"토큰_생성을_하면_OAuth_서버에서_인증_후_토큰들을_반환한다() { // given & when AccessAndRefreshTokenResponse actual = authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember());  // then ""<AssertPlaceHolder>""; assertThat(actual.getRefreshToken()).isNotEmpty(); assertThat(events.stream(MemberSavedEvent.class).count()).isEqualTo(1); }); }
generateAccessAndRefreshToken(final OAuthMember oAuthMember) { Member foundMember = findMember(oAuthMember);  OAuthToken oAuthToken = getOAuthToken(oAuthMember, foundMember); oAuthToken.change(oAuthMember.getRefreshToken());  AuthToken authToken = tokenCreator.createAuthToken(foundMember.getId()); return new AccessAndRefreshTokenResponse(authToken.getAccessToken(), authToken.getRefreshToken()); }"	assertAll(() -> { assertThat(actual.getAccessToken()).isNotEmpty()
"Authorization_Code를_받으면_회원이_데이터베이스에_저장된다() { // given & when authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember());  // then ""<AssertPlaceHolder>"";  assertAll(() -> { // SutbOAuthClient가 반환하는 OAuthMember의 이메일 assertThat(memberRepository.existsByEmail(MEMBER_이메일)).isTrue(); assertThat(events.stream(MemberSavedEvent.class).count()).isEqualTo(1); }); }
generateAccessAndRefreshToken(final OAuthMember oAuthMember) { Member foundMember = findMember(oAuthMember);  OAuthToken oAuthToken = getOAuthToken(oAuthMember, foundMember); oAuthToken.change(oAuthMember.getRefreshToken());  AuthToken authToken = tokenCreator.createAuthToken(foundMember.getId()); return new AccessAndRefreshTokenResponse(authToken.getAccessToken(), authToken.getRefreshToken()); }"	assertThat(memberRepository.existsByEmail(MEMBER_이메일)).isTrue()
"이미_가입된_회원에_대한_Authorization_Code를_전달받으면_추가로_회원이_생성되지_않는다() { // 이미 가입된 회원이 소셜 로그인 버튼을 클릭했을 경우엔 회원가입 과정이 생략되고, 곧바로 access token이 발급되어야 한다.  // given authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember());  // when authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember()); List<Member> actual = memberRepository.findAll();  // then ""<AssertPlaceHolder>""; }
generateAccessAndRefreshToken(final OAuthMember oAuthMember) { Member foundMember = findMember(oAuthMember);  OAuthToken oAuthToken = getOAuthToken(oAuthMember, foundMember); oAuthToken.change(oAuthMember.getRefreshToken());  AuthToken authToken = tokenCreator.createAuthToken(foundMember.getId()); return new AccessAndRefreshTokenResponse(authToken.getAccessToken(), authToken.getRefreshToken()); }"	assertThat(actual).hasSize(1)
"이미_가입된_회원이고_저장된_RefreshToken이_있으면_저장된_RefreshToken을_반환한다() { // 이미 가입된 회원이 소셜 로그인 버튼을 클릭했을 경우엔 회원가입 과정이 생략되고, 곧바로 access token과 refreshtoken이 발급되어야 한다.  // given AccessAndRefreshTokenResponse response = authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember());  // when AccessAndRefreshTokenResponse actual = authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember());  // then ""<AssertPlaceHolder>""; }
generateAccessAndRefreshToken(final OAuthMember oAuthMember) { Member foundMember = findMember(oAuthMember);  OAuthToken oAuthToken = getOAuthToken(oAuthMember, foundMember); oAuthToken.change(oAuthMember.getRefreshToken());  AuthToken authToken = tokenCreator.createAuthToken(foundMember.getId()); return new AccessAndRefreshTokenResponse(authToken.getAccessToken(), authToken.getRefreshToken()); }"	assertThat(actual.getRefreshToken()).isEqualTo(response.getRefreshToken())
"리프레시_토큰으로_새로운_엑세스_토큰을_발급한다() { // given AccessAndRefreshTokenResponse response = authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember()); TokenRenewalRequest tokenRenewalRequest = new TokenRenewalRequest(response.getRefreshToken());  // when AccessTokenResponse accessTokenResponse = authService.generateAccessToken(tokenRenewalRequest);  // then ""<AssertPlaceHolder>""; }
generateAccessToken(final TokenRenewalRequest tokenRenewalRequest) { String refreshToken = tokenRenewalRequest.getRefreshToken(); AuthToken authToken = tokenCreator.renewAuthToken(refreshToken); return new AccessTokenResponse(authToken.getAccessToken()); }"	assertThat(accessTokenResponse.getAccessToken()).isNotEmpty()
"리프레시_토큰으로_새로운_엑세스_토큰을_발급_할_때_리프레시_토큰이_존재하지_않으면_예외를_던진다() { // given authService.generateAccessAndRefreshToken(MEMBER.getOAuthMember()); TokenRenewalRequest tokenRenewalRequest = new TokenRenewalRequest(""DummyRefreshToken"");  // when & then ""<AssertPlaceHolder>""; }
generateAccessToken(final TokenRenewalRequest tokenRenewalRequest) { String refreshToken = tokenRenewalRequest.getRefreshToken(); AuthToken authToken = tokenCreator.renewAuthToken(refreshToken); return new AccessTokenResponse(authToken.getAccessToken()); }"	assertThatThrownBy(() -> authService.generateAccessToken(tokenRenewalRequest)) .isInstanceOf(InvalidTokenException.class)
"엑세스_토큰과_리프레시_토큰을_발급한다() { // given Long memberId = 1L;  // when AuthToken authToken = tokenCreator.createAuthToken(memberId);  // then ""<AssertPlaceHolder>""; assertThat(authToken.getRefreshToken()).isNotEmpty(); }
createAuthToken(final Long memberId) { String accessToken = tokenProvider.createAccessToken(String.valueOf(memberId)); String refreshToken = createRefreshToken(memberId); return new AuthToken(accessToken, refreshToken); }"	assertThat(authToken.getAccessToken()).isNotEmpty()
"리프레시_토큰으로_엑세스_토큰을_발급한다() { // given Long memberId = 1L; AuthToken authToken = tokenCreator.createAuthToken(memberId);  // when AuthToken actual = tokenCreator.renewAuthToken(authToken.getRefreshToken());  // then ""<AssertPlaceHolder>""; assertThat(actual.getRefreshToken()).isNotEmpty(); }
renewAuthToken(final String refreshToken) { tokenProvider.validateToken(refreshToken); Long memberId = Long.valueOf(tokenProvider.getPayload(refreshToken));  String accessTokenForRenew = tokenProvider.createAccessToken(String.valueOf(memberId)); String refreshTokenForRenew = tokenRepository.getToken(memberId);  AuthToken renewalAuthToken = new AuthToken(accessTokenForRenew, refreshTokenForRenew); renewalAuthToken.validateHasSameRefreshToken(refreshToken); return renewalAuthToken; }"	assertThat(actual.getAccessToken()).isNotEmpty()
"토큰에서_페이로드를_추출한다() { // given Long memberId = 1L; AuthToken authToken = tokenCreator.createAuthToken(memberId);  // when Long actual = tokenCreator.extractPayload(authToken.getAccessToken());  // then ""<AssertPlaceHolder>""; }
extractPayload(final String accessToken) { tokenProvider.validateToken(accessToken); return Long.valueOf(tokenProvider.getPayload(accessToken)); }"	assertThat(actual).isEqualTo(memberId)
"엑세스_토큰을_생성한다() { // given & when String actual = jwtTokenProvider.createAccessToken(PAYLOAD);  // then ""<AssertPlaceHolder>""; }
createAccessToken(final String payload) { return createToken(payload, accessTokenValidityInMilliseconds); }"	"assertThat(actual.split(""\\."")).hasSize(3)"
"리프레시_토큰을_생성한다() { // given & when String actual = jwtTokenProvider.createRefreshToken(PAYLOAD);  // then ""<AssertPlaceHolder>""; }
createRefreshToken(final String payload) { return createToken(payload, refreshTokenValidityInMilliseconds); }"	"assertThat(actual.split(""\\."")).hasSize(3)"
"토큰의_Payload를_가져온다() { // given String token = jwtTokenProvider.createAccessToken(PAYLOAD);  // when String actual = jwtTokenProvider.getPayload(token);  // then ""<AssertPlaceHolder>""; }
getPayload(final String token) { return Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token) .getBody() .getSubject(); }"	assertThat(actual).isEqualTo(PAYLOAD)
"엑세스_토큰을_검증하여_만료된_경우_예외를_던진다() { // given TokenProvider expiredJwtTokenProvider = new JwtTokenProvider(JWT_SECRET_KEY, 0, 0); String expiredToken = expiredJwtTokenProvider.createAccessToken(PAYLOAD);  // when & then ""<AssertPlaceHolder>""; }
validateToken(final String token) { try { Jws<Claims> claims = Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token);  claims.getBody() .getExpiration() .before(new Date()); } catch (final JwtException | IllegalArgumentException e) { throw new InvalidTokenException(""권한이 없습니다.""); } }"	assertThatThrownBy(() -> jwtTokenProvider.validateToken(expiredToken)) .isInstanceOf(InvalidTokenException.class)
"리프레시_토큰을_검증하여_만료된_경우_예외를_던진다() { // given TokenProvider expiredJwtTokenProvider = new JwtTokenProvider(JWT_SECRET_KEY, 0, 0); String expiredToken = expiredJwtTokenProvider.createRefreshToken(PAYLOAD);  // when & then ""<AssertPlaceHolder>""; }
validateToken(final String token) { try { Jws<Claims> claims = Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token);  claims.getBody() .getExpiration() .before(new Date()); } catch (final JwtException | IllegalArgumentException e) { throw new InvalidTokenException(""권한이 없습니다.""); } }"	assertThatThrownBy(() -> jwtTokenProvider.validateToken(expiredToken)) .isInstanceOf(InvalidTokenException.class)
"토큰을_검증하여_유효하지_않으면_예외를_던진다() { // given String malformedToken = ""malformed"";  // when & then ""<AssertPlaceHolder>""; }
validateToken(final String token) { try { Jws<Claims> claims = Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token);  claims.getBody() .getExpiration() .before(new Date()); } catch (final JwtException | IllegalArgumentException e) { throw new InvalidTokenException(""권한이 없습니다.""); } }"	assertThatThrownBy(() -> jwtTokenProvider.validateToken(malformedToken)) .isInstanceOf(InvalidTokenException.class)
"토큰을_저장한다() { // given Long dummyMemberId = 1L; String dummyRefreshToken = ""dummy token"";  // when tokenRepository.save(dummyMemberId, dummyRefreshToken);  // then ""<AssertPlaceHolder>""; }
getToken(final Long memberId) { Optional<String> token = Optional.ofNullable(TOKEN_REPOSITORY.get(memberId)); return token.orElseThrow(() -> new NoSuchTokenException(""일치하는 토큰이 존재하지 않습니다."")); }"	assertThat(tokenRepository.getToken(dummyMemberId)).isEqualTo(dummyRefreshToken)
"MemberId에_해당하는_토큰이_있으면_true를_반환한다() { // given Long dummyMemberId = 1L; String dummyRefreshToken = ""dummy token""; tokenRepository.save(dummyMemberId, dummyRefreshToken);  // when boolean actual = tokenRepository.exist(dummyMemberId);  // then ""<AssertPlaceHolder>""; }
exist(final Long memberId) { return TOKEN_REPOSITORY.containsKey(memberId); }"	assertThat(actual).isTrue()
"MemberId에_해당하는_토큰이_없으면_false를_반환한다() { // given Long dummyMemberId = 1L; String dummyRefreshToken = ""dummy token"";  // when boolean actual = tokenRepository.exist(dummyMemberId);  // then ""<AssertPlaceHolder>""; }
exist(final Long memberId) { return TOKEN_REPOSITORY.containsKey(memberId); }"	assertThat(actual).isFalse()
"MemberId에_해당하는_토큰을_가져온다() { // given Long dummyMemberId = 1L; String dummyRefreshToken = ""dummy token""; tokenRepository.save(dummyMemberId, dummyRefreshToken);  // when String actual = tokenRepository.getToken(dummyMemberId);  // then ""<AssertPlaceHolder>""; }
getToken(final Long memberId) { Optional<String> token = Optional.ofNullable(TOKEN_REPOSITORY.get(memberId)); return token.orElseThrow(() -> new NoSuchTokenException(""일치하는 토큰이 존재하지 않습니다."")); }"	assertThat(actual).isEqualTo(dummyRefreshToken)
"MemberId에_해당하는_토큰이_없으면_예외를_발생한다() { // given Long dummyMemberId = 1L;  // when & then ""<AssertPlaceHolder>""; }
getToken(final Long memberId) { Optional<String> token = Optional.ofNullable(TOKEN_REPOSITORY.get(memberId)); return token.orElseThrow(() -> new NoSuchTokenException(""일치하는 토큰이 존재하지 않습니다."")); }"	assertThatThrownBy(() -> tokenRepository.getToken(dummyMemberId)) .isInstanceOf(NoSuchTokenException.class)
"member_id의_OAuthToken이_존재할_경우_true를_반환한다() { // given Member 매트 = memberRepository.save(매트()); oAuthTokenRepository.save(new OAuthToken(매트, REFRESH_TOKEN));  // when boolean actual = oAuthTokenRepository.existsByMemberId(매트.getId());  // then ""<AssertPlaceHolder>""; }
existsByMemberId(final Long memberId);  @Query(""SELECT o "" + ""FROM OAuthToken o "" + ""WHERE o.member.id = :memberId"") Optional<OAuthToken> findByMemberId(final Long memberId);  default OAuthToken getByMemberId(final Long memberId) { return findByMemberId(memberId) .orElseThrow(NoSuchOAuthTokenException::new); }"	assertThat(actual).isTrue()
"member_id의_OAuthToken이_존재하지_않을_경우_false를_반환한다() { // given & when boolean actual = oAuthTokenRepository.existsByMemberId(0L);  // then ""<AssertPlaceHolder>""; }
existsByMemberId(final Long memberId);  @Query(""SELECT o "" + ""FROM OAuthToken o "" + ""WHERE o.member.id = :memberId"") Optional<OAuthToken> findByMemberId(final Long memberId);  default OAuthToken getByMemberId(final Long memberId) { return findByMemberId(memberId) .orElseThrow(NoSuchOAuthTokenException::new); }"	assertThat(actual).isFalse()
"member_id의_OAuthToken이_존재할_경우_Optional은_비어있지_않다() { // given Member 매트 = memberRepository.save(매트()); oAuthTokenRepository.save(new OAuthToken(매트, REFRESH_TOKEN));  // when Optional<OAuthToken> actual = oAuthTokenRepository.findByMemberId(매트.getId());  // then ""<AssertPlaceHolder>""; }
findByMemberId(final Long memberId);  default OAuthToken getByMemberId(final Long memberId) { return findByMemberId(memberId) .orElseThrow(NoSuchOAuthTokenException::new); }"	assertThat(actual).isNotEmpty()
"member_id의_OAuthToken이_존재하지_않을_경우_비어있다() { // given & when Optional<OAuthToken> actual = oAuthTokenRepository.findByMemberId(0L);  // then ""<AssertPlaceHolder>""; }
findByMemberId(final Long memberId);  default OAuthToken getByMemberId(final Long memberId) { return findByMemberId(memberId) .orElseThrow(NoSuchOAuthTokenException::new); }"	assertThat(actual).isEmpty()
"refresh_token을_교체한다() { // given Member 매트 = 매트(); String refreshToken = ""adasaegsfadasdasfgfgrgredksgdffa""; OAuthToken oAuthToken = new OAuthToken(매트, refreshToken);  String updatedRefreshToken = ""dfgsbnskjglnafgkajfnakfjgngejlkrqgn"";  // when oAuthToken.change(updatedRefreshToken);  // then ""<AssertPlaceHolder>""; }
getRefreshToken() { return refreshToken; }"	assertThat(oAuthToken.getRefreshToken()).isEqualTo(updatedRefreshToken)
"저장된_회원의_개인_카테고리를_생성하고_자동으로_구독하고_카테고리_역할을_부여한다() { // given GivenBuilder 나인 = 나인();  MemberSavedEvent event = new MemberSavedEvent(나인.회원().getId());  // when categoryService.savePersonalCategory(event);  // then List<Category> categories = categoryRepository.findByMemberId(나인.회원().getId()); List<Subscription> subscriptions = subscriptionRepository.findByMemberId(나인.회원().getId()); List<CategoryRole> categoryRoles = categoryRoleRepository.findByMemberId(나인.회원().getId());  ""<AssertPlaceHolder>""; assertThat(subscriptions).hasSize(1) .extracting(""checked"") .containsExactly(true); assertThat(categoryRoles).hasSize(1) .extracting(""categoryRoleType"") .containsExactly(ADMIN); }); }
savePersonalCategory(final MemberSavedEvent event) { Member member = memberRepository.getById(event.getMemberId()); Category category = categoryRepository.save(new Category(PERSONAL_CATEGORY_NAME, member, PERSONAL));  subscribeCategory(member, category); createCategoryRoleAsAdminToCreator(member, category); }"	"assertAll(() -> { assertThat(categories).hasSize(1) .extracting(""categoryType"") .containsExactly(CategoryType.PERSONAL)"
"제목에_검색어가_포함된_카테고리를_가져온다() { // given 나인().카테고리를_생성한다(외부_카테고리_이름, GOOGLE) .카테고리를_생성한다(취업_카테고리_이름, NORMAL) .카테고리를_생성한다(스터디_카테고리_이름, NORMAL);  // when CategoriesResponse actual = categoryService.findNormalByName(""취업"");  // then ""<AssertPlaceHolder>""; }
findNormalByName(final String name) { List<Category> categories = categoryRepository.findByCategoryTypeAndNameContaining(NORMAL, name); return new CategoriesResponse(categories); }"	assertThat(actual.getCategories()).hasSize(1)
"제목에_검색어가_포함된_카테고리를_가져올때_개인_카테고리는_제외한다() { // given 나인().카테고리를_생성한다(개인_카테고리_이름, PERSONAL) .카테고리를_생성한다(취업_카테고리_이름, NORMAL) .카테고리를_생성한다(스터디_카테고리_이름, NORMAL);  // when CategoriesResponse actual = categoryService.findNormalByName("""");  // then ""<AssertPlaceHolder>""; }
findNormalByName(final String name) { List<Category> categories = categoryRepository.findByCategoryTypeAndNameContaining(NORMAL, name); return new CategoriesResponse(categories); }"	assertThat(actual.getCategories()).hasSize(2)
"관리권한이_최고_관리자인_카테고리_목록을_조회한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(스터디_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_생성한다(스터디_카테고리_이름, NORMAL) .카테고리를_생성한다(취업_카테고리_이름, NORMAL) .카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리());  // when CategoriesResponse actual = categoryService.findScheduleEditableCategories(티거.회원().getId());  // then ""<AssertPlaceHolder>""; }
findScheduleEditableCategories(final Long memberId) { List<CategoryRole> categoryRoles = categoryRoleRepository.findByMemberId(memberId); Set<CategoryRoleType> roleTypes = CategoryRoleType.getHavingAuthorities(Set.of(CategoryAuthority.ADD_SCHEDULE, CategoryAuthority.UPDATE_SCHEDULE)); return new CategoriesResponse(toCategories(categoryRoles, roleTypes)); }"	assertThat(actual.getCategories().size()).isEqualTo(3)
"id로_카테고리_단건_조회한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when CategoryDetailResponse actual = categoryService.findDetailCategoryById(나인.카테고리().getId());  // then ""<AssertPlaceHolder>""; assertThat(actual.getName()).isEqualTo(나인.카테고리().getName()); }); }
findDetailCategoryById(final Long id) { Category category = categoryRepository.getById(id); List<Subscription> subscriptions = subscriptionRepository.findByCategoryId(id); return new CategoryDetailResponse(category, subscriptions.size()); }"	assertAll(() -> { assertThat(actual.getId()).isEqualTo(나인.카테고리().getId())
"id로_카테고리_단건_조회할_때_없으면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when & then ""<AssertPlaceHolder>""; }
findDetailCategoryById(final Long id) { Category category = categoryRepository.getById(id); List<Subscription> subscriptions = subscriptionRepository.findByCategoryId(id); return new CategoryDetailResponse(category, subscriptions.size()); }"	assertThatThrownBy(() -> categoryService.findDetailCategoryById(나인.카테고리().getId() + 1)) .isInstanceOf(NoSuchCategoryException.class)
"권한이_최고_관리자인_카테고리를_수정한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  CategoryUpdateRequest 카테고리_수정_요청 = new CategoryUpdateRequest(""새로운 취업 카테고리 이름"");  // when categoryService.update(나인.회원().getId(), 나인.카테고리().getId(), 카테고리_수정_요청);  //then Category actual = categoryRepository.getById(나인.카테고리().getId()); ""<AssertPlaceHolder>""; }
update(final Long memberId, final Long id, final CategoryUpdateRequest request) { Category category = categoryRepository.getById(id);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.UPDATE_CATEGORY);  category.changeName(request.getName()); }"	"assertThat(actual.getName()).isEqualTo(""새로운 취업 카테고리 이름"")"
"권한이_최고_관리자가_아닌_카테고리를_수정하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  CategoryUpdateRequest 카테고리_수정_요청 = new CategoryUpdateRequest(""새로운 취업 카테고리 이름"");  // when & then ""<AssertPlaceHolder>""; }
update(final Long memberId, final Long id, final CategoryUpdateRequest request) { Category category = categoryRepository.getById(id);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.UPDATE_CATEGORY);  category.changeName(request.getName()); }"	assertThatThrownBy(() -> categoryService.update(티거.회원().getId(), 나인.카테고리().getId(), 카테고리_수정_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"카테고리를_수정할_때_카테고리가_없으면_예외가_발생한다() { // given GivenBuilder 나인 = 나인();  CategoryUpdateRequest 카테고리_수정_요청 = new CategoryUpdateRequest(""새로운 취업 카테고리 이름"");  // when & then ""<AssertPlaceHolder>""; }
update(final Long memberId, final Long id, final CategoryUpdateRequest request) { Category category = categoryRepository.getById(id);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.UPDATE_CATEGORY);  category.changeName(request.getName()); }"	assertThatThrownBy(() -> categoryService.update(나인.회원().getId(), -1L, 카테고리_수정_요청)) .isInstanceOf(NoSuchCategoryException.class)
"권한이_최고_관리자인_카테고리를_삭제한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when categoryService.delete(나인.회원().getId(), 나인.카테고리().getId());  //then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> categoryRepository.getById(나인.카테고리().getId())) .isInstanceOf(NoSuchCategoryException.class)
"권한이_최고_관리자가_아닌_카테고리를_삭제하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> categoryService.delete(티거.회원().getId(), 나인.카테고리().getId())) .isInstanceOf(NoCategoryAuthorityException.class)
"없는_카테고리를_삭제하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인();  // when & then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> categoryService.delete(나인.회원().getId(), -1L)) .isInstanceOf(NoSuchCategoryException.class)
"카테고리를_삭제할_때_생성한_일정도_모두_삭제한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  // when categoryService.delete(나인.회원().getId(), 나인.카테고리().getId());  // then ""<AssertPlaceHolder>""; }); }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertAll(() -> { assertThatThrownBy(() -> scheduleRepository.getById(나인.카테고리_일정().getId())) .isInstanceOf(NoSuchScheduleException.class)
"카테고리를_삭제할_때_구독_정보도_모두_삭제한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when categoryService.delete(나인.회원().getId(), 나인.카테고리().getId());  // then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> subscriptionRepository.getById(티거.구독().getId())) .isInstanceOf(NoSuchSubscriptionException.class)
"카테고리를_삭제할_때_카테고리_권한도_모두_삭제한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  CategoryRole 권한 = categoryRoleRepository.getByMemberIdAndCategoryId(나인.회원().getId(), 나인.카테고리().getId());  // when categoryService.delete(나인.회원().getId(), 나인.카테고리().getId());  // then boolean actual = categoryRoleRepository.findById(권한.getId()).isPresent(); ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThat(actual).isFalse()
"개인_카테고리를_삭제하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(개인_카테고리_이름, PERSONAL);  // when & then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> categoryService.delete(나인.회원().getId(), 나인.카테고리().getId())) .isInstanceOf(InvalidCategoryException.class)
"외부_서비스_연동_카테고리를_삭제한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(외부_카테고리_이름, GOOGLE);  // when categoryService.delete(나인.회원().getId(), 나인.카테고리().getId());  // then ""<AssertPlaceHolder>""; }
delete(final Long memberId, final Long id) { Category category = categoryRepository.getById(id);  validateNotPersonalCategory(category);  CategoryRole role = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, category.getId()); role.validateAuthority(CategoryAuthority.DELETE_CATEGORY);  scheduleRepository.deleteByCategoryIdIn(List.of(id)); subscriptionRepository.deleteByCategoryIdIn(List.of(id)); externalCategoryDetailRepository.deleteByCategoryId(id); categoryRoleRepository.deleteByCategoryId(id); categoryRepository.deleteById(id); }"	assertThatThrownBy(() -> categoryRepository.getById(나인.카테고리().getId())) .isInstanceOf(NoSuchCategoryException.class)
"월별_일정을_조회하면_회원의_외부_카테고리_전체를_조회한다() { // given GivenBuilder 나인 = 나인().외부_카테고리를_등록한다(외부_카테고리_이름, GOOGLE);  // when List<ExternalCategoryDetail> actual = externalCategoryDetailService.findByMemberId(나인.회원().getId());  // then ""<AssertPlaceHolder>""; }
findByMemberId(final Long memberId) { Subscriptions subscriptions = new Subscriptions(subscriptionRepository.findByMemberId(memberId)); List<Category> categories = subscriptions.findExternalCategory(); return externalCategoryDetailRepository.findByCategoryIn(categories); }"	assertThat(actual).hasSize(1)
"카테고리_제목과_타입을_통해_해당하는_카테고리를_조회한다() { // given Member 관리자 = memberRepository.save(관리자()); Category 공통_일정 = categoryRepository.save(공통_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, 공통_일정)); Category BE_일정 = categoryRepository.save(BE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, BE_일정)); Category FE_일정 = categoryRepository.save(FE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, FE_일정)); Category 매트_아고라 = categoryRepository.save(매트_아고라(관리자)); subscriptionRepository.save(색상1_구독(관리자, 매트_아고라)); Category 후디_JPA_스터디 = categoryRepository.save(후디_JPA_스터디(관리자)); subscriptionRepository.save(색상1_구독(관리자, 후디_JPA_스터디)); Category 내_일정 = categoryRepository.save(내_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, 내_일정)); Category 우아한테크코스_일정 = categoryRepository.save(우아한테크코스_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, 우아한테크코스_일정));  // when List<Category> actual = categoryRepository.findByCategoryTypeAndNameContaining(NORMAL, ""일"");  // then ""<AssertPlaceHolder>""; }
findByCategoryTypeAndNameContaining(final CategoryType categoryType, final String name);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId AND c.categoryType = :categoryType"") List<Category> findByMemberIdAndCategoryType(final Long memberId, final CategoryType categoryType);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId"") List<Category> findByMemberId(final Long memberId);  default Category getById(final Long id) { return this.findById(id) .orElseThrow(NoSuchCategoryException::new); }"	assertThat(actual).hasSize(3) .extracting(Category::getName) .contains(공통_일정_이름, BE_일정_이름, FE_일정_이름)
"카테고리_이름_검색_결과가_존재하지_않는_경우_아무것도_조회_하지_않는다() { // given Member 관리자 = memberRepository.save(관리자()); Category 공통_일정 = categoryRepository.save(공통_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, 공통_일정)); Category BE_일정 = categoryRepository.save(BE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, BE_일정)); Category FE_일정 = categoryRepository.save(FE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, FE_일정)); Category 매트_아고라 = categoryRepository.save(매트_아고라(관리자)); subscriptionRepository.save(색상1_구독(관리자, 매트_아고라));  // when List<Category> actual = categoryRepository.findByCategoryTypeAndNameContaining(NORMAL, ""파랑"");  // then ""<AssertPlaceHolder>""; }
findByCategoryTypeAndNameContaining(final CategoryType categoryType, final String name);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId AND c.categoryType = :categoryType"") List<Category> findByMemberIdAndCategoryType(final Long memberId, final CategoryType categoryType);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId"") List<Category> findByMemberId(final Long memberId);  default Category getById(final Long id) { return this.findById(id) .orElseThrow(NoSuchCategoryException::new); }"	assertThat(actual).hasSize(0)
"구독자수가_많은_순서로_정렬하여_반환한다() { // given Member 관리자 = memberRepository.save(관리자());  Category 공통_일정 = categoryRepository.save(공통_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, 공통_일정)); Category BE_일정 = categoryRepository.save(BE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, BE_일정)); Category FE_일정 = categoryRepository.save(FE_일정(관리자)); subscriptionRepository.save(색상1_구독(관리자, FE_일정));  Member 매트 = memberRepository.save(매트()); Member 리버 = memberRepository.save(리버()); Member 후디 = memberRepository.save(후디()); Member 파랑 = memberRepository.save(파랑());  subscriptionRepository.save(색상1_구독(매트, 공통_일정)); subscriptionRepository.save(색상1_구독(리버, 공통_일정)); subscriptionRepository.save(색상1_구독(후디, 공통_일정)); subscriptionRepository.save(색상1_구독(파랑, 공통_일정));  subscriptionRepository.save(색상1_구독(매트, BE_일정)); subscriptionRepository.save(색상1_구독(리버, BE_일정)); subscriptionRepository.save(색상1_구독(후디, BE_일정));  // when List<Category> actual = categoryRepository.findByCategoryTypeAndNameContaining(NORMAL, """");  // then ""<AssertPlaceHolder>""; }
findByCategoryTypeAndNameContaining(final CategoryType categoryType, final String name);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId AND c.categoryType = :categoryType"") List<Category> findByMemberIdAndCategoryType(final Long memberId, final CategoryType categoryType);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId"") List<Category> findByMemberId(final Long memberId);  default Category getById(final Long id) { return this.findById(id) .orElseThrow(NoSuchCategoryException::new); }"	assertThat(actual).hasSize(3) .containsExactlyInAnyOrder(공통_일정, BE_일정, FE_일정)
"member_id와_categoryType을_기반으로_조회한다() { // given Member 매트 = memberRepository.save(매트()); categoryRepository.save(공통_일정(매트)); categoryRepository.save(BE_일정(매트)); categoryRepository.save(FE_일정(매트)); categoryRepository.save(매트_아고라(매트)); categoryRepository.save(후디_JPA_스터디(매트));  // when List<Category> actual = categoryRepository.findByMemberIdAndCategoryType(매트.getId(), NORMAL);  // then ""<AssertPlaceHolder>""; }
findByMemberIdAndCategoryType(final Long memberId, final CategoryType categoryType);  @Query(""SELECT c "" + ""FROM Category c "" + ""WHERE c.member.id = :memberId"") List<Category> findByMemberId(final Long memberId);  default Category getById(final Long id) { return this.findById(id) .orElseThrow(NoSuchCategoryException::new); }"	assertThat(actual).hasSize(5)
"특정_회원이_생성한_카테고리를_조회한다() { // given Member 관리자 = memberRepository.save(관리자()); categoryRepository.save(공통_일정(관리자)); categoryRepository.save(BE_일정(관리자)); categoryRepository.save(FE_일정(관리자));  Member 후디 = memberRepository.save(후디()); categoryRepository.save(후디_JPA_스터디(후디));  // when List<Category> categories = categoryRepository.findByMemberId(관리자.getId());  // then ""<AssertPlaceHolder>""; assertThat( categories.stream() .map(Category::getCreatedAt) .allMatch(Objects::nonNull)) .isTrue(); }); }
findByMemberId(final Long memberId);  default Category getById(final Long id) { return this.findById(id) .orElseThrow(NoSuchCategoryException::new); }"	assertAll(() -> { assertThat(categories).hasSize(3) .extracting(Category::getName) .containsExactlyInAnyOrder(공통_일정_이름, BE_일정_이름, FE_일정_이름)
"제공된_회원의_ID와_카테고리를_생성한_회원의_ID가_일치하지_않으면_false를_반환한다() { // given Category BE_일정 = BE_일정(관리자());  // when boolean actual = BE_일정.isCreatorId(999L);  // then ""<AssertPlaceHolder>""; }
isCreatorId(final Long creatorId) { return member.hasSameId(creatorId); }"	assertThat(actual).isFalse()
"개인_카테고리면_true를_반환한다() { // given Category 내_일정 = 내_일정(관리자());  // when boolean actual = 내_일정.isPersonal();  // then ""<AssertPlaceHolder>""; }
isPersonal() { return categoryType == CategoryType.PERSONAL; }"	assertThat(actual).isTrue()
"외부_연동_카테고리면_true를_반환한다() { // given Category 우아한테크코스_일정 = 우아한테크코스_일정(관리자());  // when boolean actual = 우아한테크코스_일정.isExternal();  // then ""<AssertPlaceHolder>""; }
isExternal() { return categoryType == CategoryType.GOOGLE; }"	assertThat(actual).isTrue()
"존재하지_않는_카테고리_종류인_경우_예외를_던진다() { // given String notExistingCategoryType = ""존재하지 않는 카테고리 종류"";  // when & then ""<AssertPlaceHolder>""; }
from(final String value) { try { return CategoryType.valueOf(value.toUpperCase()); } catch (final IllegalArgumentException e) { throw new NoSuchCategoryException(""("" + value + "")는 존재하지 않는 카테고리 타입입니다.""); } }"	assertThatThrownBy(() -> CategoryType.from(notExistingCategoryType)) .isInstanceOf(NoSuchCategoryException.class)
"존재하지_않는_외부_카테고리_세부정보를_가져오는_경우_예외를_던진다() { // given Member 관리자 = memberRepository.save(관리자());  Category 우아한테크코스_일정 = 우아한테크코스_일정(관리자); categoryRepository.save(우아한테크코스_일정);  externalCategoryDetailRepository.save(new ExternalCategoryDetail(우아한테크코스_일정, ""externalId""));  Category 공통_일정 = categoryRepository.save(공통_일정(관리자));  // when & then ""<AssertPlaceHolder>""; }
getByCategory(final Category category) { return this.findByCategory(category) .orElseThrow(NoSuchExternalCategoryDetailException::new); }"	assertThatThrownBy(() -> externalCategoryDetailRepository.getByCategory(공통_일정)) .isInstanceOf(NoSuchExternalCategoryDetailException.class)
"이미_존재하는_외부_카테고리_세부정보인_경우_예외를_던진다() { // given Member 관리자 = memberRepository.save(관리자());  Category 우아한테크코스_일정 = 우아한테크코스_일정(관리자); categoryRepository.save(우아한테크코스_일정);  String externalId = ""externalId""; externalCategoryDetailRepository.save(new ExternalCategoryDetail(우아한테크코스_일정, externalId));  // when & then ""<AssertPlaceHolder>""; }
validateExistByExternalIdAndCategoryIn(final String externalId, final List<Category> externalCategories) { if (existsByExternalIdAndCategoryIn(externalId, externalCategories)) { throw new ExistExternalCategoryException(); } }"	assertThatThrownBy(() -> externalCategoryDetailRepository .validateExistByExternalIdAndCategoryIn(externalId, List.of(우아한테크코스_일정))) .isInstanceOf(ExistExternalCategoryException.class)
"카테고리의_구독자_목록을_조회한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  티거().카테고리를_구독한다(나인.카테고리());  // when SubscribersResponse actual = categoryRoleService.findSubscribers(나인.회원().getId(), 나인.카테고리().getId());  // then ""<AssertPlaceHolder>""; }
findSubscribers(final Long loginMemberId, final Long categoryId) { CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(loginMemberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.FIND_SUBSCRIBERS);  List<CategoryRole> categoryRoles = categoryRoleRepository.findByCategoryId(categoryId); return new SubscribersResponse(categoryRoles); }"	assertThat(actual.getSubscribers().size()).isEqualTo(2)
"관리자_권한이_아닌_회원이_카테고리_구독자_목록을_조회하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
findSubscribers(final Long loginMemberId, final Long categoryId) { CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(loginMemberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.FIND_SUBSCRIBERS);  List<CategoryRole> categoryRoles = categoryRoleRepository.findByCategoryId(categoryId); return new SubscribersResponse(categoryRoles); }"	assertThatThrownBy(() -> categoryRoleService.findSubscribers(티거.회원().getId(), 나인.카테고리().getId())) .isInstanceOf(NoCategoryAuthorityException.class)
"관리자_역할로_변경하려는_회원이_이미_50개_이상의_카테고리에_권한이_있으면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리()); for (int i = 0; i < 50; i++) { 티거.카테고리를_생성한다(""카테고리 "" + i, NORMAL); }  // when & then ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThatThrownBy( () -> categoryRoleService.updateRole( 나인.회원().getId(), 티거.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청)) .isInstanceOf(ManagingCategoryLimitExcessException.class)
"카테고리_권한이_관리자인_회원이_다른_관리자의_권한을_변경한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리());  // when categoryRoleService.updateRole(티거.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_해제_요청);  // then CategoryRole actual = categoryRoleRepository.getByMemberIdAndCategoryId(나인.회원().getId(), 나인.카테고리().getId()); ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThat(actual.getCategoryRoleType()).isEqualTo(NONE)
"카테고리_권한이_관리자인_회원이_구독자의_권한을_변경한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when categoryRoleService.updateRole(나인.회원().getId(), 티거.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청);  // then CategoryRole actual = categoryRoleRepository.getByMemberIdAndCategoryId(티거.회원().getId(), 나인.카테고리().getId()); ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThat(actual.getCategoryRoleType()).isEqualTo(ADMIN)
"카테고리_권한이_관리자인_회원이_자신의_권한을_변경한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리());  // when categoryRoleService.updateRole(나인.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_해제_요청);  // then CategoryRole actual = categoryRoleRepository.getByMemberIdAndCategoryId(나인.회원().getId(), 나인.카테고리().getId()); ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThat(actual.getCategoryRoleType()).isEqualTo(NONE)
"카테고리_권한이_없는_회원이_다른_회원의_권한을_변경하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThatThrownBy( () -> categoryRoleService.updateRole( 티거.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"유일한_카테고리_관리자인_회원이_자신의_권한을_변경하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when & then ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThatThrownBy(() -> categoryRoleService.updateRole( 나인.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청)) .isInstanceOf(NotAbleToChangeRoleException.class)
"개인_카테고리에_대한_회원의_권한을_변경하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(개인_카테고리_이름, PERSONAL);  // when & then ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThatThrownBy(() -> categoryRoleService.updateRole( 나인.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청)) .isInstanceOf(NotAbleToChangeRoleException.class)
"외부_카테고리에_대한_회원의_권한을_변경하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(외부_카테고리_이름, GOOGLE);  // when & then ""<AssertPlaceHolder>""; }
updateRole(final Long loginMemberId, final Long memberId, final Long categoryId, final CategoryRoleUpdateRequest request) { try { List<CategoryRole> categoryRolesInCategory = categoryRoleRepository.findByCategoryId(categoryId); CategoryRole roleOfTargetMember = getCategoryRole(memberId, categoryRolesInCategory);  validateLoginMemberAuthority(loginMemberId, categoryRolesInCategory); // 요청 유저 권한 검증 validateIsTargetMemberSoleAdmin(categoryRolesInCategory, roleOfTargetMember); // 대상 유저가 유일한 어드민이 아닌지 검증 validateCategoryType(roleOfTargetMember.getCategory()); // 카테고리가 개인, 외부 카테고리가 아닌지 검증 categoryRoleRepository.validateManagingCategoryLimit(memberId, request.getCategoryRoleType()); // 관리 개수 검증  roleOfTargetMember.changeRole(request.getCategoryRoleType()); } catch (final ObjectOptimisticLockingFailureException e) { throw NotAbleToChangeRoleException.concurrentIssue(); } }"	assertThatThrownBy(() -> categoryRoleService.updateRole( 나인.회원().getId(), 나인.회원().getId(), 나인.카테고리().getId(), 카테고리_관리권한_부여_요청)) .isInstanceOf(NotAbleToChangeRoleException.class)
"member_id와_category_id를_기반으로_조회한다() { // given Member 매트 = memberRepository.save(매트()); Category BE_일정 = categoryRepository.save(BE_일정(매트));  CategoryRole savedCategoryRoleType = categoryRoleRepository.save( new CategoryRole(BE_일정, 매트, CategoryRoleType.ADMIN));  // when CategoryRole actual = categoryRoleRepository.getByMemberIdAndCategoryId(매트.getId(), BE_일정.getId());  // then ""<AssertPlaceHolder>""; }
getByMemberIdAndCategoryId(final Long memberId, final Long categoryId) { return findByMemberIdAndCategoryId(memberId, categoryId) .orElseThrow(NoSuchCategoryRoleException::new); }"	assertThat(actual).isEqualTo(savedCategoryRoleType)
"category_id를_기반으로_조회한다() { // given Member 매트 = memberRepository.save(매트()); Category BE_일정 = categoryRepository.save(BE_일정(매트)); categoryRoleRepository.save(new CategoryRole(BE_일정, 매트, CategoryRoleType.ADMIN));  // when List<CategoryRole> actual = categoryRoleRepository.findByMemberId(매트.getId());  // then ""<AssertPlaceHolder>""; }
findByMemberId(final Long memberId);  @Query(""SELECT count(cr) "" + ""FROM CategoryRole cr "" + ""WHERE cr.categoryRoleType = :categoryRoleType "" + ""AND cr.member.id = :memberId"") int countByMemberIdAndCategoryRoleType(final Long memberId, final CategoryRoleType categoryRoleType);  int countByCategoryIdAndCategoryRoleType(final Long categoryId, final CategoryRoleType categoryRoleType);  void deleteByCategoryId(final Long categoryId);  default CategoryRole getByMemberIdAndCategoryId(final Long memberId, final Long categoryId) { return findByMemberIdAndCategoryId(memberId, categoryId) .orElseThrow(NoSuchCategoryRoleException::new); }"	assertThat(actual).hasSize(1)
"특정_카테고리에_admin이_혼자인지_확인한다() { // given Member 매트 = memberRepository.save(매트()); Category BE_일정 = categoryRepository.save(BE_일정(매트)); categoryRoleRepository.save(new CategoryRole(BE_일정, 매트, CategoryRoleType.ADMIN));  // when boolean actual = categoryRoleRepository.isMemberSoleAdminInCategory(매트.getId(), BE_일정.getId());  // then ""<AssertPlaceHolder>""; }
isMemberSoleAdminInCategory(final Long memberId, final Long categoryId) { CategoryRole categoryRole = getByMemberIdAndCategoryId(memberId, categoryId); int adminCount = countByCategoryIdAndCategoryRoleType(categoryId, CategoryRoleType.ADMIN);  return categoryRole.isAdmin() && adminCount == 1; }"	assertThat(actual).isTrue()
"회원의_외부_캘린더_목록을_조회한다() { // given GivenBuilder 나인 = 나인();  // when ExternalCalendarsResponse actual = externalCalendarService.findByMemberId(나인.회원().getId());  // then ""<AssertPlaceHolder>""; }
findByMemberId(final Long memberId) { OAuthToken oAuthToken = oAuthTokenRepository.getByMemberId(memberId);  String oAuthAccessToken = oAuthClient.getAccessToken(oAuthToken.getRefreshToken()).getAccessToken();  return new ExternalCalendarsResponse(externalCalendarClient.getExternalCalendars(oAuthAccessToken)); }"	assertThat(actual.getExternalCalendars()).hasSize(3)
"회원을_조회한다() { // given GivenBuilder 나인 = 나인();  // when & then ""<AssertPlaceHolder>""; }
findById(final Long id) { return new MemberResponse(memberRepository.getById(id)); }"	assertThat(memberService.findById(나인.회원().getId()).getId()) .isEqualTo(나인.회원().getId())
"회원의_이름을_수정한다() { // given GivenBuilder 나인 = 나인();  // when memberService.update(나인.회원().getId(), 나인_이름_수정_요청);  // then Member actual = memberRepository.getById(나인.회원().getId()); ""<AssertPlaceHolder>""; }
update(final Long id, final MemberUpdateRequest request) { Member member = memberRepository.getById(id); member.change(request.getDisplayName()); }"	"assertThat(actual.getDisplayName()).isEqualTo(""텐"")"
"중복된_이메일이_존재하는_경우_true를_반환한다() { // given memberRepository.save(파랑());  // when & then ""<AssertPlaceHolder>""; }
existsByEmail(final String email);  default Member getById(final Long id) { return findById(id) .orElseThrow(NoSuchMemberException::new); }"	assertThat(memberRepository.existsByEmail(파랑_이메일)).isTrue()
"이메일을_통해_회원을_찾는다() { // given Member 파랑 = memberRepository.save(파랑());  // when Member actual = memberRepository.getByEmail(파랑_이메일);  // then ""<AssertPlaceHolder>""; }
getByEmail(final String email) { return findByEmail(email) .orElseThrow(NoSuchMemberException::new); }"	assertThat(actual.getId()).isEqualTo(파랑.getId())
"존재하지_않는_email을_조회할_경우_예외를_던진다() { // given String email = ""dev.hyeonic@gmail.com"";  // given & when & then ""<AssertPlaceHolder>""; }
getByEmail(final String email) { return findByEmail(email) .orElseThrow(NoSuchMemberException::new); }"	assertThatThrownBy(() -> memberRepository.getByEmail(email)) .isInstanceOf(NoSuchMemberException.class)
"존재하지_않는_id이면_예외를_던진다() { // given Long id = 0L;  // when & then ""<AssertPlaceHolder>""; }
validateExistsById(final Long id) { if (!existsById(id)) { throw new NoSuchMemberException(); } }"	assertThatThrownBy(() -> memberRepository.validateExistsById(id)) .isInstanceOf(NoSuchMemberException.class)
"회원의_이름을_변경한다() { // given Member member = 매트(); String 패트_이름 = ""패트"";  // when member.change(패트_이름);  // then ""<AssertPlaceHolder>""; }
getDisplayName() { return displayName; }"	assertThat(member.getDisplayName()).isEqualTo(패트_이름)
"관리_권한이_없는_회원이_카고리에_새로운_일정을_생성하려_하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(티거.회원().getId(), 나인.카테고리().getId(), 취업_일정_생성_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"카테고리_생성자라도_관리_권한이_없으면_새로운_일정을_생성할_때_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리()); 티거.카테고리_관리_권한을_해제한다(나인.회원(), 나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 나인.카테고리().getId(), 취업_일정_생성_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"새로운_일정을_생성_할_때_일정_제목의_길이가_50을_초과하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  String 잘못된_일정_제목 = ""일이삼사오육칠팔구십일이삼사오육칠팔구십일일이삼사오육칠팔구십일이삼사오육칠팔구십일일이삼사오육칠팔구십일""; ScheduleCreateRequest 잘못된_일정_생성_요청 = new ScheduleCreateRequest(잘못된_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 나인.카테고리().getId(), 잘못된_일정_생성_요청)). isInstanceOf(InvalidScheduleException.class)
"새로운_일정을_생성_할_때_일정_메모의_길이가_255를_초과하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  String 잘못된_일정_메모 = ""1"".repeat(256); ScheduleCreateRequest 잘못된_일정_생성_요청 = new ScheduleCreateRequest(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 잘못된_일정_메모);  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 나인.카테고리().getId(), 잘못된_일정_생성_요청)). isInstanceOf(InvalidScheduleException.class)
"새로운_일정을_생성_할_때_종료일시가_시작일시_이전이라면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  ScheduleCreateRequest 잘못된_일정_생성_요청 = new ScheduleCreateRequest(취업_일정_제목, 취업_일정_종료일, 취업_일정_시작일, 취업_일정_메모);  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 나인.카테고리().getId(), 잘못된_일정_생성_요청)). isInstanceOf(InvalidScheduleException.class)
"존재하지_않는_카테고리에_일정을_추가하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인();  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 0L, 취업_일정_생성_요청)). isInstanceOf(NoSuchCategoryException.class)
"외부_연동_카테고리에_일정을_추가하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, GOOGLE);  // when & then ""<AssertPlaceHolder>""; }
save(final Long memberId, final Long categoryId, final ScheduleCreateRequest request) { Category category = categoryRepository.getById(categoryId); category.validateNotExternalCategory();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.ADD_SCHEDULE);  Schedule schedule = scheduleRepository.save(request.toEntity(category)); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.save(나인.회원().getId(), 나인.카테고리().getId(), 취업_일정_생성_요청)). isInstanceOf(NoPermissionException.class)
"단건_일정을_조회한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  // when ScheduleResponse actual = scheduleService.findById(나인.카테고리_일정().getId());  // then ""<AssertPlaceHolder>""; assertThat(actual.getTitle()).isEqualTo(취업_일정_제목); assertThat(actual.getStartDateTime()).isEqualTo(취업_일정_시작일); assertThat(actual.getEndDateTime()).isEqualTo(취업_일정_종료일); assertThat(actual.getMemo()).isEqualTo(취업_일정_메모); }); }
findById(final Long id) { Schedule schedule = scheduleRepository.getById(id); return new ScheduleResponse(schedule); }"	assertAll(() -> { assertThat(actual.getId()).isEqualTo(나인.카테고리().getId())
"존재하지_않는_일정을_단건_조회하면_예외가_발생한다() { // given Long 잘못된_아이디 = 0L;  // when & then ""<AssertPlaceHolder>""; }
findById(final Long id) { Schedule schedule = scheduleRepository.getById(id); return new ScheduleResponse(schedule); }"	assertThatThrownBy(() -> scheduleService.findById(잘못된_아이디)) .isInstanceOf(NoSuchScheduleException.class)
"월별_일정_조회를_하면_통합일정_정보를_반환한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모) .일정을_생성한다(면접_일정_제목, 면접_일정_시작일, 면접_일정_종료일, 면접_일정_메모);  // when List<IntegrationSchedule> actual = scheduleService.findInternalByMemberIdAndDateRange(나인.회원().getId(), 구간_일정_조회_요청).getSchedules();  // then ""<AssertPlaceHolder>""; }
findInternalByMemberIdAndDateRange(final Long memberId, final DateRangeRequest request) { Subscriptions subscriptions = new Subscriptions(subscriptionRepository.findByMemberId(memberId)); List<Category> categories = subscriptions.findInternalCategory(); LocalDateTime startDateTime = request.getStartDateTime(); LocalDateTime endDateTime = request.getEndDateTime(); List<IntegrationSchedule> schedules = toIntegrationSchedules(categories, startDateTime, endDateTime);  String refreshToken = toRefreshToken(memberId); List<ExternalCategoryDetail> externalCategoryDetails = toCategoryDetails(subscriptions);  return new MaterialToFindSchedules(subscriptions, schedules, refreshToken, externalCategoryDetails); }"	assertThat(actual).hasSize(2)
"카테고리_별_통합_일정_정보를_조회한다() { // given GivenBuilder 나인 = 나인().회원_가입을_한다(나인_이메일, 나인_이름, 나인_프로필_URL) .카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(""첫번째 장기 일정"", LocalDateTime.of(2022, 7, 1, 0, 0), LocalDateTime.of(2022, 8, 15, 14, 0), """") .일정을_생성한다(""두번째 장기 일정"", LocalDateTime.of(2022, 7, 1, 0, 0), LocalDateTime.of(2022, 7, 31, 0, 0), """") .일정을_생성한다(""세번째 장기 일정"", LocalDateTime.of(2022, 7, 1, 0, 0), LocalDateTime.of(2022, 7, 16, 16, 1), """") .일정을_생성한다(""네번째 장기 일정"", LocalDateTime.of(2022, 7, 7, 16, 0), LocalDateTime.of(2022, 7, 15, 16, 0), """") .일정을_생성한다(""다섯번째 장기 일정"", LocalDateTime.of(2022, 7, 31, 0, 0), LocalDateTime.of(2022, 8, 15, 17, 0), """") .일정을_생성한다(""첫번째 종일 일정"", LocalDateTime.of(2022, 7, 10, 0, 0), LocalDateTime.of(2022, 7, 11, 0, 0), """") .일정을_생성한다(""두번째 종일 일정"", LocalDateTime.of(2022, 7, 27, 0, 0), LocalDateTime.of(2022, 7, 28, 0, 0), """") .일정을_생성한다(""첫번째 몇시간 일정"", LocalDateTime.of(2022, 7, 16, 16, 0), LocalDateTime.of(2022, 7, 16, 20, 0), """") .일정을_생성한다(""두번째 몇시간 일정"", LocalDateTime.of(2022, 7, 16, 16, 0), LocalDateTime.of(2022, 7, 16, 18, 0), """");  // when IntegrationScheduleResponses actual = scheduleService.findByCategoryIdAndDateRange(나인.카테고리().getId(), 구간_일정_조회_요청);  // then ""<AssertPlaceHolder>""; assertThat(actual.getAllDays()).extracting(IntegrationScheduleResponse::getTitle) .contains(""첫번째 종일 일정"", ""두번째 종일 일정""); assertThat(actual.getFewHours()).extracting(IntegrationScheduleResponse::getTitle) .contains(""첫번째 몇시간 일정"", ""두번째 몇시간 일정""); }); }
findByCategoryIdAndDateRange(final Long categoryId, final DateRangeRequest request) { Category category = categoryRepository.getById(categoryId); LocalDateTime startDateTime = request.getStartDateTime(); LocalDateTime endDateTime = request.getEndDateTime();  List<IntegrationSchedule> schedules = toIntegrationSchedules(List.of(category), startDateTime, endDateTime); Color color = Color.pick(colorPicker.pickNumber());  return new IntegrationScheduleResponses(color, new TypedSchedules(schedules)); }"	"assertAll(() -> { assertThat(actual.getLongTerms()).extracting(IntegrationScheduleResponse::getTitle) .contains(""첫번째 장기 일정"", ""두번째 장기 일정"", ""세번째 장기 일정"", ""네번째 장기 일정"", ""다섯번째 장기 일정"")"
"일정을_수정한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  // when ScheduleUpdateRequest 일정_수정_요청 = new ScheduleUpdateRequest(나인.카테고리().getId(), ""제목"", 취업_일정_시작일, 취업_일정_종료일, ""메모""); scheduleService.update(나인.카테고리_일정().getId(), 나인.회원().getId(), 일정_수정_요청);  // then Schedule actual = scheduleRepository.getById(나인.카테고리_일정().getId()); ""<AssertPlaceHolder>""; assertThat(actual.getTitle()).isEqualTo(""제목""); assertThat(actual.getStartDateTime()).isEqualTo(취업_일정_시작일); assertThat(actual.getEndDateTime()).isEqualTo(취업_일정_종료일); assertThat(actual.getMemo()).isEqualTo(""메모""); } ); }
update(final Long id, final Long memberId, final ScheduleUpdateRequest request) { Long categoryId = request.getCategoryId(); Category categoryForUpdate = categoryRepository.getById(categoryId); Schedule schedule = scheduleRepository.getById(id);  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.UPDATE_SCHEDULE);  schedule.change(categoryForUpdate, request.getTitle(), request.getStartDateTime(), request.getEndDateTime(), request.getMemo()); }"	assertAll( () -> { assertThat(actual.getId()).isEqualTo(나인.카테고리_일정().getId())
"관리_권한이_없는_회원이_카테고리의_일정을_수정하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ScheduleUpdateRequest 일정_수정_요청 = new ScheduleUpdateRequest(나인.카테고리().getId(), ""제목"", 취업_일정_시작일, 취업_일정_종료일, ""메모"");  ""<AssertPlaceHolder>""; }
update(final Long id, final Long memberId, final ScheduleUpdateRequest request) { Long categoryId = request.getCategoryId(); Category categoryForUpdate = categoryRepository.getById(categoryId); Schedule schedule = scheduleRepository.getById(id);  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.UPDATE_SCHEDULE);  schedule.change(categoryForUpdate, request.getTitle(), request.getStartDateTime(), request.getEndDateTime(), request.getMemo()); }"	assertThatThrownBy(() -> scheduleService.update(나인.카테고리_일정().getId(), 티거.회원().getId(), 일정_수정_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"카테고리_생성자라도_관리_권한이_없으면_카테고리의_일정을_수정할_떄_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리()); 티거.카테고리_관리_권한을_해제한다(나인.회원(), 나인.카테고리());  // when & then ScheduleUpdateRequest 일정_수정_요청 = new ScheduleUpdateRequest(나인.카테고리().getId(), ""제목"", 취업_일정_시작일, 취업_일정_종료일, ""메모"");  ""<AssertPlaceHolder>""; }
update(final Long id, final Long memberId, final ScheduleUpdateRequest request) { Long categoryId = request.getCategoryId(); Category categoryForUpdate = categoryRepository.getById(categoryId); Schedule schedule = scheduleRepository.getById(id);  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.UPDATE_SCHEDULE);  schedule.change(categoryForUpdate, request.getTitle(), request.getStartDateTime(), request.getEndDateTime(), request.getMemo()); }"	assertThatThrownBy(() -> scheduleService.update(나인.카테고리_일정().getId(), 나인.회원().getId(), 일정_수정_요청)) .isInstanceOf(NoCategoryAuthorityException.class)
"존재하지_않은_일정을_수정하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when & then ScheduleUpdateRequest 일정_수정_요청 = new ScheduleUpdateRequest(나인.카테고리().getId(), ""제목"", 취업_일정_시작일, 취업_일정_종료일, ""메모"");  ""<AssertPlaceHolder>""; }
update(final Long id, final Long memberId, final ScheduleUpdateRequest request) { Long categoryId = request.getCategoryId(); Category categoryForUpdate = categoryRepository.getById(categoryId); Schedule schedule = scheduleRepository.getById(id);  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.UPDATE_SCHEDULE);  schedule.change(categoryForUpdate, request.getTitle(), request.getStartDateTime(), request.getEndDateTime(), request.getMemo()); }"	assertThatThrownBy(() -> scheduleService.update(0L, 나인.회원().getId(), 일정_수정_요청)) .isInstanceOf(NoSuchScheduleException.class)
"일정의_카테고리를_변경한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  Schedule 기존_일정 = 나인.카테고리_일정(); 나인.카테고리를_생성한다(스터디_카테고리_이름, NORMAL);  // when ScheduleUpdateRequest 일정_수정_요청 = new ScheduleUpdateRequest(나인.카테고리().getId(), ""제목"", 취업_일정_시작일, 취업_일정_종료일, ""메모""); scheduleService.update(기존_일정.getId(), 나인.회원().getId(), 일정_수정_요청);  // then Schedule actual = scheduleRepository.getById(기존_일정.getId()); ""<AssertPlaceHolder>""; }
update(final Long id, final Long memberId, final ScheduleUpdateRequest request) { Long categoryId = request.getCategoryId(); Category categoryForUpdate = categoryRepository.getById(categoryId); Schedule schedule = scheduleRepository.getById(id);  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.UPDATE_SCHEDULE);  schedule.change(categoryForUpdate, request.getTitle(), request.getStartDateTime(), request.getEndDateTime(), request.getMemo()); }"	assertThat(actual.getCategory().getId()).isEqualTo(나인.카테고리().getId())
"관리_권한이_있는_회원은_카테고리의_일정을_삭제할_수_있다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  // when scheduleService.delete(나인.카테고리_일정().getId(), 나인.회원().getId());  // then ""<AssertPlaceHolder>""; }
delete(final Long id, final Long memberId) { Schedule schedule = scheduleRepository.getById(id); Long categoryId = schedule.getCategory().getId();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.DELETE_SCHEDULE);  scheduleRepository.deleteById(id); }"	assertThatThrownBy(() -> scheduleRepository.getById(나인.카테고리_일정().getId())) .isInstanceOf(NoSuchScheduleException.class)
"관리_권한이_없는_회원이_카테고리의_일정을_삭제하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
delete(final Long id, final Long memberId) { Schedule schedule = scheduleRepository.getById(id); Long categoryId = schedule.getCategory().getId();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.DELETE_SCHEDULE);  scheduleRepository.deleteById(id); }"	assertThatThrownBy(() -> scheduleService.delete(나인.카테고리_일정().getId(), 티거.회원().getId())) .isInstanceOf(NoCategoryAuthorityException.class)
"카테고리_생성자라도_관리_권한이_없으면_일정을_삭제하려할때_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL) .일정을_생성한다(취업_일정_제목, 취업_일정_시작일, 취업_일정_종료일, 취업_일정_메모);  GivenBuilder 티거 = 티거().카테고리를_구독한다(나인.카테고리());  나인.카테고리_관리_권한을_부여한다(티거.회원(), 나인.카테고리()); 티거.카테고리_관리_권한을_해제한다(나인.회원(), 나인.카테고리());  // when & then ""<AssertPlaceHolder>""; }
delete(final Long id, final Long memberId) { Schedule schedule = scheduleRepository.getById(id); Long categoryId = schedule.getCategory().getId();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.DELETE_SCHEDULE);  scheduleRepository.deleteById(id); }"	assertThatThrownBy(() -> scheduleService.delete(나인.카테고리_일정().getId(), 나인.회원().getId())) .isInstanceOf(NoCategoryAuthorityException.class)
"존재하지_않은_일정을_삭제하려하면_예외가_발생한다() { // given GivenBuilder 나인 = 나인().카테고리를_생성한다(취업_카테고리_이름, NORMAL);  // when & then ""<AssertPlaceHolder>""; }
delete(final Long id, final Long memberId) { Schedule schedule = scheduleRepository.getById(id); Long categoryId = schedule.getCategory().getId();  CategoryRole categoryRole = categoryRoleRepository.getByMemberIdAndCategoryId(memberId, categoryId); categoryRole.validateAuthority(CategoryAuthority.DELETE_SCHEDULE);  scheduleRepository.deleteById(id); }"	assertThatThrownBy(() -> scheduleService.delete(0L, 나인.회원().getId())) .isInstanceOf(NoSuchScheduleException.class)
"겹치는_일정이_하나도_없을_때_일정_시작일시가_빠른_순서대로_정렬된다() { // given Long categoryId = 1L; IntegrationSchedule 첫번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""1"", categoryId, ""일정1"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 2, 0, 0), ""일정1"", NORMAL);  IntegrationSchedule 두번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""2"", categoryId, ""일정2"", LocalDateTime.of(2022, 3, 3, 0, 0), LocalDateTime.of(2022, 3, 4, 0, 0), ""일정2"", NORMAL);  IntegrationSchedule 세번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""3"", categoryId, ""일정3"", LocalDateTime.of(2022, 3, 5, 0, 0), LocalDateTime.of(2022, 3, 7, 0, 0), ""일정3"", NORMAL);  // when IntegrationSchedules integrationSchedules = new IntegrationSchedules(); integrationSchedules.add(세번째로_정렬되어야_하는_일정); integrationSchedules.add(두번째로_정렬되어야_하는_일정); integrationSchedules.add(첫번째로_정렬되어야_하는_일정);  // then ""<AssertPlaceHolder>""; }
getSortedValues() { values.sort(COMPARATOR); return List.copyOf(values); }"	"assertThat(integrationSchedules.getSortedValues()) .extracting(IntegrationSchedule::getTitle) .containsExactly(""일정1"", ""일정2"", ""일정3"")"
"일정의_시작일시가_겹친다면_일정_종료일시가_느린_순서대로_정렬된다() { // given Long categoryId = 1L; IntegrationSchedule 첫번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""1"", categoryId, ""일정1"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 10, 0, 0), ""일정1"", NORMAL);  IntegrationSchedule 두번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""2"", categoryId, ""일정2"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 7, 0, 0), ""일정2"", NORMAL);  IntegrationSchedule 세번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""3"", categoryId, ""일정3"", LocalDateTime.of(2022, 3, 5, 0, 0), LocalDateTime.of(2022, 3, 5, 0, 0), ""일정3"", NORMAL);  // when IntegrationSchedules integrationSchedules = new IntegrationSchedules(); integrationSchedules.add(두번째로_정렬되어야_하는_일정); integrationSchedules.add(세번째로_정렬되어야_하는_일정); integrationSchedules.add(첫번째로_정렬되어야_하는_일정);  // then ""<AssertPlaceHolder>""; }
getSortedValues() { values.sort(COMPARATOR); return List.copyOf(values); }"	"assertThat(integrationSchedules.getSortedValues()) .extracting(IntegrationSchedule::getTitle) .containsExactly(""일정1"", ""일정2"", ""일정3"")"
"일정의_시작일시가_겹치고_종료일시도_겹칠때는_일정의_제목을_사전기준_오름차순으로_정렬된다() { // given Long categoryId = 1L; IntegrationSchedule 첫번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""1"", categoryId, ""가"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 10, 0, 0), ""일정1"", NORMAL);  IntegrationSchedule 두번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""2"", categoryId, ""나"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 10, 0, 0), ""일정2"", NORMAL);  IntegrationSchedule 세번째로_정렬되어야_하는_일정 = new IntegrationSchedule(""3"", categoryId, ""다"", LocalDateTime.of(2022, 3, 1, 0, 0), LocalDateTime.of(2022, 3, 10, 0, 0), ""일정3"", NORMAL);  // when IntegrationSchedules integrationSchedules = new IntegrationSchedules(); integrationSchedules.add(세번째로_정렬되어야_하는_일정); integrationSchedules.add(두번째로_정렬되어야_하는_일정); integrationSchedules.add(첫번째로_정렬되어야_하는_일정);  // then ""<AssertPlaceHolder>""; }
getSortedValues() { values.sort(COMPARATOR); return List.copyOf(values); }"	"assertThat(integrationSchedules.getSortedValues()) .extracting(IntegrationSchedule::getTitle) .containsExactly(""가"", ""나"", ""다"")"
"LongTerm인지_확인_할_때_AllDays가_아니고_일정의_시작일과_종료일이_다르면_true를_반환한다() { // given String id = ""1""; Long categoryId = 1L; IntegrationSchedule integrationSchedule = new IntegrationSchedule(id, categoryId, 알록달록_회의_제목, LocalDateTime.of(2022, 7, 1, 0, 1), LocalDateTime.of(2022, 7, 2, 0, 0), 알록달록_회의_메모, NORMAL);  // when boolean actual = integrationSchedule.isLongTerms();  // then ""<AssertPlaceHolder>""; }
isLongTerms() { return !isAllDays() && period.calculateDayDifference() >= ONE_DAY; }"	assertThat(actual).isTrue()
"LongTerm인지_확인_할_때_일정의_시작일과_종료일이_같으면_false를_반환한다() { // given String id = ""1""; Long categoryId = 1L; IntegrationSchedule integrationSchedule = new IntegrationSchedule(id, categoryId, 알록달록_회의_제목, LocalDateTime.of(2022, 7, 1, 0, 1), LocalDateTime.of(2022, 7, 1, 23, 59), 알록달록_회의_메모, NORMAL);  // when boolean actual = integrationSchedule.isLongTerms();  // then ""<AssertPlaceHolder>""; }
isLongTerms() { return !isAllDays() && period.calculateDayDifference() >= ONE_DAY; }"	assertThat(actual).isFalse()
