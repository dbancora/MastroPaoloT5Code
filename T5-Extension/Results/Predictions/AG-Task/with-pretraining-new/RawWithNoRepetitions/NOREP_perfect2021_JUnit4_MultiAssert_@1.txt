************************************
[+] input: Exception { CollectorFormatter minF = new CollectorFormatter("{7}", (Formatter) null, (Comparator<LogRecord>) null);  tickMilli(); //Make sure the max not equal to the start time.  final String min = minF.getTail((Handler) null); NumberFormat.getIntegerInstance().parse(min); tickMilli();  //Next min is not old min. String next = minF.getTail((Handler) null); assertFalse(min + ' ' + next, min.equals(next));  //All mins start at the init time. CollectorFormatter initF = new CollectorFormatter("{10}", (Formatter) null, (Comparator<LogRecord>) null);  next = initF.getTail((Handler) null); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(min, next)
[-] pred: org. junit. Assert. assertEquals ( min, next )
************************************
************************************
[+] input: IOException { // [stripe 0] // Stripe: offset: 3 data: 6333874 rows: 240000 tail: 111 index: 4025 final int stripeId = 0; final int columnId = 2; final int[] rowGroupIds = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22};  final long rowsInStripe = orcTail.getStripes().get(stripeId).getNumberOfRows(); int groupsInStripe = (int) ((rowsInStripe + indexStride - 1) / indexStride);  BlockCacheManager<Block> blockCacheManager = prepareCache(stripeId, new int[] {columnId}, rowGroupIds);  CacheReader<Block> cacheReader = new CacheReaderImpl(stripeId, columnId, groupsInStripe);  if (!cacheReader.isInitialized()) { // Check the block-cache-manager what row-group of this column have been cached. Map<Integer, SeekableIterator<Block>> caches = blockCacheManager.getCachedRowGroups( FILE_PATH, stripeId, columnId, fromRowGroupIds(stripeId, rowGroupIds) ); cacheReader.initialize(caches); }  // Check cached row group bitmap. boolean[] bitmap = cacheReader.cachedRowGroupBitmap(); Assert.assertTrue( Arrays.equals(fromRowGroupIds(stripeId, rowGroupIds), bitmap));  // collect block locations in this group. List<BlockLocation> locationList = new ArrayList<>(); for (int groupId : rowGroupIds) { final int rowCountInGroup = getRowCount(orcTail.getStripes().get(stripeId), groupId); for (int startPosition = 0; startPosition < rowCountInGroup; startPosition += DEFAULT_CHUNK_LIMIT) { int positionCount = Math.min(DEFAULT_CHUNK_LIMIT, rowCountInGroup - startPosition); locationList.add(new BlockLocation(groupId, startPosition, positionCount)); } }  // Check block existence for (BlockLocation location : locationList) { Block cached = cacheReader.getCache(location.rowGroupId, location.startPosition); Assert."<AssertPlaceHolder>"; Assert.assertEquals(location.positionCount, cached.getPositionCount()); } }
getCache(int groupId, int position);
[*] target: assertNotNull(cached)
[-] pred: org. junit. Assert. assertNotNull ( cached )
************************************
************************************
[+] input: getConfigNameTest() { String configName = "binlogx_stream_group_name"; String expect = "binlogx.stream.group.name"; String actual = ConfigNameMap.getOldConfigName(configName); Assert.assertEquals(expect, actual);  configName = "not_exist_config"; expect = ""; actual = ConfigNameMap.getOldConfigName(configName); Assert."<AssertPlaceHolder>"; }
getOldConfigName(String newConfigName) { return StringUtils.defaultIfBlank(CONFIG_MAP.get(newConfigName), ""); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);  transaction.setLockType(Lock.LockType.XLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应升级为x锁,新的事务获取应获取不到 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }   // 终止所有线程 threadPool.shutdownNow(); }
setLockType(LockType lockType) { this.lockType = lockType; }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
************************************
[+] input: rtspGetParameterRequestTest() {  String expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspGetParameterRequest request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 26\r\n" + "\r\n" + "packets_received\r\n" + "jitter\r\n"; uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("packets_received"); request.addParameter("jitter"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: listFilesTest() { List<CdcFile> files = fileSystem.listAllFiles(); List<String> actual = new ArrayList<>(); for (CdcFile file : files) { actual.add(file.getName()); } List<String> expect = new ArrayList<>(); int n = 15; for (int i = 1; i < n; i++) { expect.add(binlogFilePrefix + String.format("%06d", i)); } boolean expectTrue = ListUtils.isEqualList(expect, actual); Assert.assertTrue(expectTrue); files = fileSystem.listAllFiles(); actual.clear(); for (CdcFile file : files) { actual.add(file.getName()); } expectTrue = ListUtils.isEqualList(expect, actual); Assert."<AssertPlaceHolder>"; }
listAllFiles() { Map<String, CdcFile> fileMap = getLocalFileMap(); if (remoteFileSystem != null) { List<CdcFile> remoteFiles = listRemoteFiles(); for (CdcFile f : remoteFiles) { if (fileMap.containsKey(f.getName())) { fileMap.get(f.getName()).setRecord(f.getRecord()); } else { fileMap.putIfAbsent(f.getName(), f); } } } ArrayList<CdcFile> res = new ArrayList<>(fileMap.values()); res.sort(CdcFile::compareTo); return res; }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
************************************
[+] input: test5() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(false, FRADtoA.class.getName(), "setStrA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-set");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(false, FRADtoA.class.getName(), "intA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-set"); } }
queryGetSetMethodByFieldName(boolean queryGetMethod, String className, String fieldName) { List<BaseWriteDbData4GetSetMethod> list = queryGetSetMethodListByFieldName(queryGetMethod, className, fieldName); if (JavaCGUtil.isCollectionEmpty(list)) { return null; } if (list.size() > 1) { logger.error("类的字段存在多个{}方法 {} {}", (queryGetMethod ? JavaCGConstants.METHOD_PREFIX_GET : JavaCGConstants.METHOD_PREFIX_SET), className, fieldName); } return list.get(0); }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: test4() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(true, FRADtoA.class.getName(), "getLongA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(true, FRADtoA.class.getName(), "strA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-get"); } }
queryGetSetMethodByFieldName(boolean queryGetMethod, String className, String fieldName) { List<BaseWriteDbData4GetSetMethod> list = queryGetSetMethodListByFieldName(queryGetMethod, className, fieldName); if (JavaCGUtil.isCollectionEmpty(list)) { return null; } if (list.size() > 1) { logger.error("类的字段存在多个{}方法 {} {}", (queryGetMethod ? JavaCGConstants.METHOD_PREFIX_GET : JavaCGConstants.METHOD_PREFIX_SET), className, fieldName); } return list.get(0); }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); XADataSource dataSource = dataSourceFactory.createXADataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PGXADataSource); PGXADataSource xaDataSource = (PGXADataSource) dataSource; Assert.assertEquals("db", xaDataSource.getDatabaseName()); }
createXADataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); PGXADataSource dataSource = new PGXADataSource(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { VectorSlicer vectorSlicer = new VectorSlicer().setInputCol("vec").setOutputCol("sliceVec").setIndices(0, 2, 1);  Table output = vectorSlicer.transform(inputDataTable)[0]; DataStream<Row> dataStream = tEnv.toDataStream(output); List<Row> results = IteratorUtils.toList(dataStream.executeAndCollect()); "<AssertPlaceHolder>"; for (Row result : results) { if (result.getField(0) == (Object) 0) { assertEquals( Vectors.dense(2.1, 2.3, 3.1), result.getField(vectorSlicer.getOutputCol()));  } else if (result.getField(0) == (Object) 1) { assertEquals( Vectors.dense(2.3, 1.3, 4.1), result.getField(vectorSlicer.getOutputCol())); } else { throw new RuntimeException("Result id value is error, it must be 0 or 1."); } } }
transform(Table... inputs) { Preconditions.checkArgument(inputs.length == 1); StreamTableEnvironment tEnv = (StreamTableEnvironment) ((TableImpl) inputs[0]).getTableEnvironment(); RowTypeInfo inputTypeInfo = TableUtils.getRowTypeInfo(inputs[0].getResolvedSchema()); RowTypeInfo outputTypeInfo = new RowTypeInfo( ArrayUtils.addAll(inputTypeInfo.getFieldTypes(), VectorTypeInfo.INSTANCE), ArrayUtils.addAll(inputTypeInfo.getFieldNames(), getOutputCol())); DataStream<Row> output = tEnv.toDataStream(inputs[0]) .map(new VectorSliceFunction(getIndices(), getInputCol()), outputTypeInfo); Table outputTable = tEnv.fromDataStream(output); return new Table[] {outputTable}; }
[*] target: assertEquals(2, results.size())
[-] pred: org. junit. Assert. assertEquals ( 2, results. size ( ) )
************************************
************************************
[+] input: test6() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(true, FRCDtoC.class.getName(), "iField1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "querySuperGetSetMethodByFieldName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(false, FRCDtoC.class.getName(), "iField1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "querySuperGetSetMethodByFieldName-set"); } }
queryGetSetMethodByFieldNameSuper(boolean queryGetMethod, String className, String fieldName) { String currentClassName = className; while (true) { BaseWriteDbData4GetSetMethod getSetMethod = queryGetSetMethodByFieldName(queryGetMethod, currentClassName, fieldName); if (getSetMethod != null) { // 检查获取到的get/set方法中的类名，若与指定的类名不同则进行修改 checkClassName(className, getSetMethod); return getSetMethod; } // 当前类未查询到对应的get/set方法，再查询父类的 String superClassName = extendsImplHandler.querySuperClassNameByFull(currentClassName); if (superClassName == null) { return null; } currentClassName = superClassName; } }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: test() { final SummaryStats summaryStats = new SummaryStats(); summaryStats.add(0); assertEquals(0, summaryStats.sum(), 0); assertEquals(0, summaryStats.mean(), 0); assertEquals(0, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(0, summaryStats.max(), 0); assertEquals(1, summaryStats.size64());  summaryStats.add(1); assertEquals(1, summaryStats.sum(), 0); assertEquals(.5, summaryStats.mean(), 0); assertEquals(.25, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(1, summaryStats.max(), 0); "<AssertPlaceHolder>"; }
size64() { return size; }
[*] target: assertEquals(2, summaryStats.size64())
[-] pred: org. junit. Assert. assertEquals ( 2, summaryStats. size64() )
************************************
************************************
[+] input: Exception { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = serialClone(a);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
hashCode() { return 31 * getClass().hashCode(); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
************************************
[+] input: testLabeledPointWithWeightGenerator() { String featuresCol = "features"; String labelCol = "label"; String weightCol = "weight";  LabeledPointWithWeightGenerator generator = new LabeledPointWithWeightGenerator() .setFeatureArity(10) .setLabelArity(10) .setColNames(new String[] {featuresCol, labelCol, weightCol}) .setNumValues(100);  int count = 0; for (CloseableIterator<Row> it = generator.getData(tEnv)[0].execute().collect(); it.hasNext(); ) { Row row = it.next(); count++; DenseVector features = (DenseVector) row.getField(featuresCol); "<AssertPlaceHolder>"; for (double value : features.values) { assertTrue(value >= 0); assertTrue(value <= generator.getFeatureArity() - 1); }  double label = (double) row.getField(labelCol); assertTrue(label >= 0); assertTrue(label <= generator.getLabelArity() - 1);  double weight = (double) row.getField(weightCol); assertTrue(weight >= 0); assertTrue(weight < 1); } assertEquals(generator.getNumValues(), count); }
getData(StreamTableEnvironment tEnv);
[*] target: assertNotNull(features)
[-] pred: org. junit. Assert. assertNotNull ( features )
************************************
************************************
[+] input: IOException { // sample app config String configFile = "./test/data/sample/tkltest_ui_config.toml"; TomlParseResult parsedConfig = Toml.parse(Paths.get(configFile)); String appUrl = parsedConfig.getString("general.app_url"); String testDir = parsedConfig.getString("general.test_directory"); TomlTable generateOptions = parsedConfig.getTable("generate");  // call method for creating crawljax config CrawljaxConfiguration crawljaxConfig = CrawljaxRunner.createCrawljaxConfiguration(appUrl, testDir, generateOptions);  // assert on created config Assert."<AssertPlaceHolder>"; Assert.assertEquals(appUrl, crawljaxConfig.getUrl().toString()); Assert.assertTrue(crawljaxConfig.getOutputDir().toString().endsWith( testDir+File.separator+"localhost"+File.separator+"crawl0")); Assert.assertEquals(0, crawljaxConfig.getMaximumStates()); Assert.assertEquals(2, crawljaxConfig.getCrawlRules().getMaxRepeatExploredActions()); Assert.assertEquals(2, crawljaxConfig.getMaximumDepth()); CrawlRules crawlRules = crawljaxConfig.getCrawlRules(); Assert.assertEquals(9, crawlRules.getPreCrawlConfig().getIncludedElements().size()); Assert.assertEquals(6, crawlRules.getPreCrawlConfig().getExcludedElements().size()); Assert.assertEquals(500, crawlRules.getWaitAfterEvent()); Assert.assertEquals(500, crawlRules.getWaitAfterReloadUrl());  // pre-crawl plugin assertions ImmutableList<Plugin> plugins = crawljaxConfig.getPlugins(); Assert.assertEquals(4, plugins.size()); Assert.assertTrue(plugins.stream().anyMatch(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin)); TackleTestOnUrlFirstLoadPlugin precrawlPlugin = (TackleTestOnUrlFirstLoadPlugin) plugins .stream() .filter(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin) .findFirst() .get(); // assert on submit_totp action TomlTable[] precrawlActions = precrawlPlugin.getPreCrawlActions(); Assert.assertEquals(6, precrawlActions.length); Set<String> expKeySet = Stream .of("action_type", "max_attempts", "optional", "totp_secret_env_var", "enter", "click") .collect(Collectors.toSet()); Assert.assertEquals(expKeySet, precrawlActions[5].keySet()); Assert.assertEquals("submit_totp", precrawlActions[5].getString("action_type")); Assert.assertEquals("TKLTESTUI_TOTP_SECRET", precrawlActions[5].getString("totp_secret_env_var")); Assert.assertEquals(true, precrawlActions[5].getBoolean("optional")); Assert.assertEquals(2, precrawlActions[5].getLong("max_attempts").intValue()); }
createCrawljaxConfiguration(String appUrl, String testDir, TomlTable generateOptions) throws IOException { CrawljaxConfiguration.CrawljaxConfigurationBuilder builder = CrawljaxConfiguration.builderFor(appUrl);  // set browser builder.setBrowserConfig(createBrowserConfiguration( generateOptions.getString("browser"), getIntTypeOption(generateOptions, "browser_pixel_density") ));  // set max runtime long timeLimit = getLongTypeOption(generateOptions, "time_limit"); builder.setMaximumRunTime(timeLimit, TimeUnit.MINUTES);  // set max states int maxStates = getIntTypeOption(generateOptions, "max_states"); if (maxStates == 0) { builder.setUnlimitedStates(); } else { builder.setMaximumStates(maxStates); }  // set max explore action int maxExploreAction = getIntTypeOption(generateOptions, "max_explore_action"); if (maxExploreAction > 1) { builder.crawlRules().skipExploredActions(false, maxExploreAction); }  // set max depth int maxDepth = getIntTypeOption(generateOptions, "max_depth"); if (maxDepth == 0) { builder.setUnlimitedCrawlDepth(); } else { builder.setMaximumDepth(maxDepth); }  // set click rules builder.crawlRules().clickOnce(Boolean.TRUE.equals( generateOptions.getBoolean("click_once"))); builder.crawlRules().clickElementsInRandomOrder(Boolean.TRUE.equals( generateOptions.getBoolean("click_randomly")));  // set wait times builder.crawlRules().waitAfterEvent(getLongTypeOption(generateOptions, "wait_after_event"), TimeUnit.MILLISECONDS); builder.crawlRules().waitAfterReloadUrl(getLongTypeOption(generateOptions, "wait_after_reload"), TimeUnit.MILLISECONDS);  // crawl hidden anchors builder.crawlRules().crawlHiddenAnchors(Boolean.TRUE.equals( generateOptions.getBoolean("crawl_hidden_anchors")));  // click default elements if (getBooleanTypeOption(generateOptions," click_default_elements")) { builder.crawlRules().clickDefaultElements(); }  // handle include_iframes option: if specified use RTED state abstraction function; otherwise // use fragment-based state abstraction if (getBooleanTypeOption(generateOptions, "include_iframes")) { double rtedSimilarityThreshold = getDoubleTypeOption(generateOptions, "rted_similarity_threshold"); builder.setStateVertexFactory(new RTEDStateVertexFactory(rtedSimilarityThreshold)); builder.crawlRules().crawlFrames(true); } else { builder.setStateVertexFactory(new FragGenStateVertexFactory(0, builder, true)); builder.crawlRules().crawlFrames(false); }  // form fill mode CrawlRules.FormFillMode formFillMode = getFormFillMode(generateOptions.getString("form_fill_mode")); builder.crawlRules().setFormFillMode(formFillMode);  // form fill order CrawlRules.FormFillOrder formFillOrder = getFormFillOrder(generateOptions.getString("form_fill_order")); builder.crawlRules().setFormFillOrder(formFillOrder);  // set click and don't-click rules String clickablesSpecFile = generateOptions.getString("clickables_spec_file"); if (clickablesSpecFile != null && !clickablesSpecFile.isEmpty()) { updateClickablesConfiguration(Toml.parse(Paths.get(clickablesSpecFile)), builder); }  // set form input specification String formDataSpecFile = generateOptions.getString("form_data_spec_file"); if (formDataSpecFile != null && !formDataSpecFile.isEmpty()) { InputSpecification inputSpec = getFormInputSpecification(formDataSpecFile); builder.crawlRules().setInputSpec(inputSpec); }  // process pre-crawl actions via onUrlFirstLoad plugin String precrawlActionsSpecFile = generateOptions.getString("precrawl_actions_spec_file"); if (precrawlActionsSpecFile != null && !precrawlActionsSpecFile.isEmpty()) { processPreCrawlActions(Toml.parse(Paths.get(precrawlActionsSpecFile)), builder); }  // add crawl-overview and test-generator plugins builder.addPlugin(new CrawlOverview()); builder.addPlugin(new TestSuiteGenerator(createTestConfiguration("none"))); //        builder.addPlugin(new TestSuiteGenerator( //            createTestConfiguration(generateOptions.getString("add_state_diff_assertions"))));  // set output directory builder.setOutputDirectory(new File(testDir));  return builder.build(); }
[*] target: assertNotNull(crawljaxConfig)
[-] pred: org. junit. Assert. assertNotNull ( crawljaxConfig )
************************************
************************************
[+] input: InterruptedException { ProviderConfig<?> providerConfig = providerConfig("consul-test-1", 12200); registry.register(providerConfig);  ConsumerConfig<?> consumerConfig = consumerConfig("consul-test-1"); MockProviderInfoListener listener = new MockProviderInfoListener(); consumerConfig.setProviderInfoListener(listener);  assertUntil(() -> { List<ProviderGroup> providerGroups = registry.subscribe(consumerConfig); Assert.assertEquals(1, providerGroups.size()); Assert.assertEquals(1, providerGroups.get(0).size()); }, 10, TimeUnit.SECONDS);  CountDownLatch latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  providerConfig = providerConfig("consul-test-1", 12201, 12202); registry.register(providerConfig);  boolean ok = latch.await(10, TimeUnit.SECONDS); Assert.assertTrue(ok);  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(3, providers.size()); }, 10, TimeUnit.SECONDS);  latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  registry.unRegister(providerConfig);  ok = latch.await(10, TimeUnit.SECONDS); Assert."<AssertPlaceHolder>";  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(1, providers.size()); }, 10, TimeUnit.SECONDS); }
unRegister(ProviderConfig config) { String appName = config.getAppName();  if (!registryConfig.isRegister()) { // 注册中心不注册 if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE)); } return; } // 反注册服务端节点 if (!config.isRegister()) { return; } try { List<String> ids = buildServiceIds(config); if (CommonUtils.isNotEmpty(ids)) { ids.forEach(this::deregisterConsulService); if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_UNPUB, config.getInterfaceId(), ids.size())); } } } catch (Exception e) { if (!RpcRunningState.isShuttingDown()) { if ( e instanceof SofaRpcRuntimeException){ throw e; }else{ throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_UNREG_PROVIDER ,EXT_NAME), e); }} } }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilResponse mb = new MbWriteSingleCoilResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(new byte[]{(byte) 0xFF, (byte) 0x00}); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putBytes(this.value) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x01, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x13}; MbReadCoilRequest mb = new MbReadCoilRequest(); mb.setFunctionCode(EMbFunctionCode.READ_COIL); mb.setAddress(19); mb.setQuantity(19); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getConsumerRunningInfo(anyString(), anyString(), anyBoolean())).thenReturn(new ConsumerRunningInfo()); } ConsumerRunningInfo consumerRunningInfo = mqAdminExtImpl.getConsumerRunningInfo("group_test", "", true); Assert."<AssertPlaceHolder>"; }
getConsumerRunningInfo(String consumerGroup, String clientId, boolean jstack) throws RemotingException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().getConsumerRunningInfo(consumerGroup, clientId, jstack); }
[*] target: assertNotNull(consumerRunningInfo)
[-] pred: org. junit. Assert. assertNotNull ( consumerRunningInfo )
************************************
************************************
[+] input: generateCodeIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); }
generateCodeIdTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return this.generateAuthorizationCodeResponse(userInfo, param, clientDetail) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineBrokerClusterInfo()).thenReturn(MockObjectUtil.createClusterInfo()); } ClusterInfo clusterInfo = mqAdminExtImpl.examineBrokerClusterInfo(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(clusterInfo.getBrokerAddrTable().size(), 1); Assert.assertEquals(clusterInfo.getClusterAddrTable().size(), 1); }
examineBrokerClusterInfo() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException { return MQAdminInstance.threadLocalMQAdminExt().examineBrokerClusterInfo(); }
[*] target: assertNotNull(clusterInfo)
[-] pred: org. junit. Assert. assertNotNull ( clusterInfo )
************************************
************************************
[+] input: getStructureViewBuilder_go() { GoFile file = (GoFile) myFixture.configureByFile("go_file.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GoStructureViewFactory.Model); }
getStructureViewBuilder(@NotNull PsiFile psiFile) { GinkgoSettings settings = GinkgoSettings.getInstance(); if (isGinkgoTestFile(psiFile) && settings.isGinkgoStructViewEnabled()) { return new TreeBasedStructureViewBuilder() { public @NotNull StructureViewModel createStructureViewModel(@Nullable Editor editor) { return new GinkgoStructureViewModel(psiFile); } }; }  //we should fall back to GoStructViewFactory return new GoStructureViewFactory().getStructureViewBuilder(psiFile); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
************************************
[+] input: testType() { String s = "test"; String res = Assertions.assertType(s, String.class); "<AssertPlaceHolder>"; }
assertEquals(final T value1, final Object value2) { return assertEquals(value1, value2, "expected value1 to be equals with value2 [value1={}, value2={}]", value1, value2); }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
************************************
[+] input: testUpdateActionsFromPaths_layersFirst() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.LAYERS, UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml"), Path.of("layers/apigw-helper/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; // the first item in the set iterator should always be LAYERS // (meaning we update layers first) regardless of changedPath ordering assertTrue(actualActions.iterator().next().name().equals("LAYERS")); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testEnsureDeclaredNodes() { EntityFixtureDo testObj = BEANS.get(EntityFixtureDo.class); assertFalse(testObj.id().exists()); assertFalse(testObj.otherEntitiesList().exists()); assertFalse(testObj.otherEntities().exists()); assertFalse(testObj.otherEntitiesMap().exists());  EntityFixtureDo testObjEnsuredNodes = m_helper.ensureDeclaredNodes(testObj); "<AssertPlaceHolder>"; assertTrue(testObjEnsuredNodes.id().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesList().exists()); assertTrue(testObjEnsuredNodes.otherEntities().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesMap().exists()); }
ensureDeclaredNodes(E entity) { if (entity == null) { return null; } m_dataObjectInventory.get().getAttributesDescription(entity.getClass()) .values() .forEach(desc -> ensureNodeValue(entity, desc.getName(), desc.getType().getRawType(), null, false)); return entity; }
[*] target: assertEquals(testObj, testObjEnsuredNodes)
[-] pred: org. junit. Assert. assertEquals ( testObj, testObjEnsuredNodes )
************************************
************************************
[+] input: should_ReturnValidationError_When_NullAsEndpointNameGiven() { String validationResult = checker.check(null);  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
check(String endpointName) { if (endpointName == null || endpointName.isEmpty()) { return "Endpoint name cannot be blank"; } if (ECMA_SCRIPT_RESERVED_WORDS.contains(endpointName)) { return "Endpoint name cannot be equal to JavaScript reserved words"; } if (WHITESPACE_PATTERN.matcher(endpointName).find()) { return "Endpoint name cannot contain any whitespaces"; } return null; }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x02, (byte) 0x00, (byte) 0xC4, (byte) 0x00, (byte) 0x16}; MbReadDiscreteInputRequest mb = new MbReadDiscreteInputRequest(); mb.setFunctionCode(EMbFunctionCode.READ_DISCRETE_INPUT); mb.setAddress(196); mb.setQuantity(22); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: verifyEmailTokenSuccessFull() { ChangeEmailRequest changeEmailRequest = getDummyChangeEmailRequest(); User user = getDummyUser(); String expectedMessage = UserMessage.EMAIL_CHANGE_SUCCESSFUL; ChangeEmailForm changeEmailForm = getDummyChangeEmailForm(); changeEmailForm.setNew_email(changeEmailForm.getNew_email()); changeEmailForm.setOld_email("user@email.com"); Mockito.when(changeEmailRepository.findByEmailToken(Mockito.anyString())) .thenReturn(changeEmailRequest); Mockito.doReturn(user).when(userRepository).save(Mockito.any(User.class)); Mockito.doReturn(user).when(userService).getUserFromToken(Mockito.any()); CRAPIResponse crapiAPIResponse = userService.verifyEmailToken(getMockHttpRequest(), changeEmailForm); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(HttpStatus.OK.value(), crapiAPIResponse.getStatus()); }*/
verifyEmailToken( HttpServletRequest request, ChangeEmailForm changeEmailForm) { ChangeEmailRequest changeEmailRequest; User user; changeEmailRequest = changeEmailRepository.findByEmailToken(changeEmailForm.getToken()); user = getUserFromToken(request); if (changeEmailRequest != null) { if (user.getEmail().equalsIgnoreCase(changeEmailRequest.getOldEmail())) { if (changeEmailRequest.getNewEmail().equalsIgnoreCase(changeEmailForm.getNew_email())) { user.setEmail(changeEmailRequest.getNewEmail()); user.setJwtToken(""); userRepository.save(user); return new CRAPIResponse(UserMessage.EMAIL_CHANGE_SUCCESSFUL, 200); } else { return new CRAPIResponse(UserMessage.NEW_MAIL_DOES_NOT_BELONG, 500); } } else { return new CRAPIResponse(UserMessage.OLD_MAIL_DOES_NOT_BELONG, 500); } } return new CRAPIResponse(UserMessage.INVALID_EMAIL_TOKEN, 500); }
[*] target: assertEquals(expectedMessage, crapiAPIResponse.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, crapiAPIResponse. getMessage ( ) )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof ConnectionPool); ConnectionPool connectionPoolDataSource = (ConnectionPool) dataSource; Assert.assertEquals("db", connectionPoolDataSource.getDatabaseName()); }
createConnectionPoolDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); ConnectionPool dataSource = new ConnectionPool(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:00"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 0, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 24, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getCacheCodeVerifier() { JapCache japCache = new JapLocalCache(); JapAuthentication.setContext(new JapContext().setCache(japCache)); JapAuthentication.getContext().getCache().set("clientId", "111", 111111); String res = PkceHelper.getCacheCodeVerifier("clientId"); Assert."<AssertPlaceHolder>"; Assert.assertEquals("111", res); }
getCacheCodeVerifier(String clientId) { return (String) JapAuthentication.getContext().getCache().get(clientId); }
[*] target: assertNotNull(res)
[-] pred: org. junit. Assert. assertNotNull ( res )
************************************
************************************
[+] input: InterruptedException { int dataBlockSize = 677; int dataBlocks = 100; int bufferSize = 2 * 1024; //noinspection ConstantConditions assert bufferSize > dataBlockSize;  CommunicationPipe p = new CommunicationPipe(bufferSize); InputStream in = p.getInputStream(); OutputStream out = p.getOutputStream();  byte[] sourceBytes = new byte[dataBlockSize]; new Random().nextBytes(sourceBytes);  CountDownLatch completed = new CountDownLatch(2); new Thread(() -> { for (int i = 0; i < dataBlocks; i++) { try { out.write(sourceBytes); } catch (Exception e) { e.printStackTrace(); return; } completed.countDown(); } }).start();  new Thread(() -> { byte[] readBytes = new byte[dataBlockSize]; try { while (in.available() > dataBlockSize) { int read = in.read(readBytes); Assert."<AssertPlaceHolder>"; Assert.assertArrayEquals(sourceBytes, readBytes); } }catch (Exception e) { e.printStackTrace(); return; } completed.countDown();  }).start();  completed.await(); }
getOutputStream() { return outputStream; }
[*] target: assertEquals(dataBlockSize, read)
[-] pred: org. junit. Assert. assertEquals ( dataBlockSize, read )
************************************
************************************
[+] input: Exception { LocalMapPartitionFile partitionFile1 = createPartitionFile(); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); assertTrue(partitionFile1.isConsumable());  partitionFile1.onError(new FileCorruptedException()); assertFalse(partitionFile1.isConsumable());  LocalMapPartitionFile partitionFile2 = createPartitionFile(); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); assertTrue(partitionFile2.isConsumable());  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception.")); "<AssertPlaceHolder>"; }
isConsumable() { return isConsumable && Files.isReadable(fileMeta.getDataFilePath()) && Files.isReadable(fileMeta.getIndexFilePath()); }
[*] target: assertFalse(partitionFile2.isConsumable())
[-] pred: org. junit. Assert. assertFalse ( partitionFile2. isConsumable ( ) )
************************************
************************************
[+] input: testHashPassword() { final byte[] salt = SecurityUtility.createRandomBytes(); final byte[] salt2 = SecurityUtility.createRandomBytes();  // test hash byte[] hash1 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash2 = SecurityUtility.hashPassword(PASSWORD, salt2); byte[] hash3 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash4 = SecurityUtility.hashPassword("other".toCharArray(), salt);  // ensure hashing was executed Assert.assertFalse(Arrays.equals(String.valueOf(PASSWORD).getBytes(ENCODING), hash1));  // ensure different salts matter Assert.assertFalse(Arrays.equals(hash1, hash2));  // ensure same input -> same output Assert.assertArrayEquals(hash1, hash3);  // ensure different input -> different output Assert.assertFalse(Arrays.equals(hash4, hash1));  // test invalid values boolean ok = false; try { SecurityUtility.hashPassword(null, salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok);  ok = false; try { SecurityUtility.hashPassword(PASSWORD, null); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword("".toCharArray(), salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword(PASSWORD, new byte[]{}); } catch (AssertionException e) { ok = true; } Assert."<AssertPlaceHolder>"; }
hashPassword(char[] password, byte[] salt) { return SECURITY_PROVIDER.get().createPasswordHash(password, salt); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: Exception { ServerTransportConfig config = new ServerTransportConfig(); config.setHost("0.0.0.0"); config.setPort(22222); config.setBossThreads(1); config.setIoThreads(8); config.setBizMaxThreads(200); config.setBizPoolQueues(50); config.setDaemon(false); config.setContainer("test"); ServerTransport server = ServerTransportFactory.getServerTransport(config); Assert.assertNotNull(server);  boolean error = false; try { config.setContainer("testasdasd"); ServerTransportFactory.getServerTransport(config); } catch (Exception e) { error = true; } Assert."<AssertPlaceHolder>"; }
getServerTransport(ServerTransportConfig serverConfig) { ServerTransport serverTransport = ExtensionLoaderFactory.getExtensionLoader(ServerTransport.class) .getExtension(serverConfig.getContainer(), new Class[] { ServerTransportConfig.class }, new Object[] { serverConfig }); if (serverTransport != null) { String key = Integer.toString(serverConfig.getPort()); SERVER_TRANSPORT_MAP.put(key, serverTransport); } return serverTransport; }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
************************************
[+] input: UnsupportedEncodingException { SnappyRpcCompressor compressor = new SnappyRpcCompressor(); String s = "xxxxasdasdasd0as8d0asdkmasldjalsd"; byte[] bs = compressor.compress(s.getBytes("utf-8")); Assert.assertNotNull(s);  String s1 = new String(compressor.deCompress(bs), "utf-8"); Assert."<AssertPlaceHolder>"; }
deCompress(byte[] src) { return uncompress(src, 0, src.length); }
[*] target: assertEquals(s, s1)
[-] pred: org. junit. Assert. assertEquals ( s, s1 )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.viewBrokerStatsData(anyString(), anyString(), anyString())).thenReturn(new BrokerStatsData()); } BrokerStatsData brokerStatsData = mqAdminExtImpl.viewBrokerStatsData(brokerAddr, BrokerStatsManager.TOPIC_PUT_NUMS, "topic_test"); Assert."<AssertPlaceHolder>"; }
viewBrokerStatsData(String brokerAddr, String statsName, String statsKey) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().viewBrokerStatsData(brokerAddr, statsName, statsKey); }
[*] target: assertNotNull(brokerStatsData)
[-] pred: org. junit. Assert. assertNotNull ( brokerStatsData )
************************************
************************************
[+] input: testRandomTime() { Calendar calendar = new GregorianCalendar(); IntStream.range(0, 1 << 20) // we have 1/3 prob to get random invalid timestamp .mapToObj(i -> R.nextInt() % 3 == 0 ? generateRandomDatetime() : generateStandardDatetime()) .forEach( bs -> { Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); String errorMessage = "original = " + new String(bs) + ", t1 = " + t1.toString() + ", t2 = " + t2.toString(); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(errorMessage, !eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String( bs), Arrays.equals(t1.toString().getBytes(), bs)); } ); }
bytesToDatetime(byte[] timestampAsBytes, int sqlType, Calendar calendar, boolean allowModification, boolean allowInvalidity) {  MysqlDateTime mysqlDateTime = StringTimeParser.parseString(timestampAsBytes, sqlType); if (mysqlDateTime == null) { return null; } if (!allowModification) { return createOriginalTimestamp(mysqlDateTime); } else { int year = (int) mysqlDateTime.getYear(); int month = (int) mysqlDateTime.getMonth(); int day = (int) mysqlDateTime.getDay(); int hour = (int) mysqlDateTime.getHour(); int minute = (int) mysqlDateTime.getMinute(); int second = (int) mysqlDateTime.getSecond(); int secondPart = (int) mysqlDateTime.getSecondPart(); return createJavaTimestamp(calendar, year, month, day, hour, minute, second, secondPart); } }
[*] target: assertTrue(errorMessage, eq)
[-] pred: org. junit. Assert. assertTrue ( errorMessage, eq )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForMapType() { String error = explicitNullableTypeChecker.checkValueForType(null, Map.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Map")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x03, (byte) 0x00, (byte) 0x6B, (byte) 0x00, (byte) 0x03}; MbReadHoldRegisterRequest mb = new MbReadHoldRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_HOLD_REGISTER); mb.setAddress(107); mb.setQuantity(3); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: testScanFolder() { URL scoutXml = getClass().getResource("/" + JandexInventoryBuilder.SCOUT_XML_PATH); JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index = builder.scanModule(builder.findIndexUri(scoutXml)); "<AssertPlaceHolder>"; ClassInfo c = index.getClassByName(DotName.createSimple(FixtureJandexInventoryObject.class.getName())); assertNotNull(c); assertEquals(FixtureJandexInventoryObject.class.getSimpleName(), c.simpleName()); }
findIndexUri(URL scoutXmlUrl) { String s = scoutXmlUrl.toExternalForm(); try { return new URI(s.substring(0, s.length() - SCOUT_XML_PATH.length()) + JANDEX_INDEX_PATH); } catch (URISyntaxException ex) { throw new PlatformException("Cannot find index URI from '{}'", s, ex); } }
[*] target: assertNotNull(index)
[-] pred: org. junit. Assert. assertNotNull ( index )
************************************
************************************
[+] input: testUpdateActionsFromPaths_newPath() { Path newResource = Path.of("resources/saas-boost-newtemplate.yaml"); createFile(newResource); Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.RESOURCES); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(List.of(newResource)); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost-newtemplate.yaml")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: broadcastAllocateStrategyTest() { AllocateStrategy allocateStrategy = new BroadcastAllocateStrategy(); Collection<RocketMQSourceSplit> mqAll = new ArrayList<>(); for (int i = 0; i < NUM_SPLITS; i++) { mqAll.add( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i])); } int parallelism = 3; Map<Integer, Set<RocketMQSourceSplit>> result = allocateStrategy.allocate(mqAll, parallelism); "<AssertPlaceHolder>"; for (int i = 0; i < parallelism; i++) { Set<RocketMQSourceSplit> splits = result.get(i); assertEquals(NUM_SPLITS, splits.size());  for (int j = 0; j < NUM_SPLITS; j++) { assertTrue( splits.contains( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i]))); } } }
allocate( final Collection<RocketMQSourceSplit> mqAll, final int parallelism) { Map<Integer, Set<RocketMQSourceSplit>> result = new HashMap<>(parallelism); for (int i = 0; i < parallelism; i++) { result.computeIfAbsent(i, k -> new HashSet<>()).addAll(mqAll); } return result; }
[*] target: assertEquals(parallelism, result.size())
[-] pred: org. junit. Assert. assertEquals ( parallelism, result. size ( ) )
************************************
************************************
[+] input: testClear() { assertTrue(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); assertTrue(c.addOrdered(m_ordered10)); assertTrue(c.addOrdered(m_ordered20)); assertTrue(c.addOrdered(m_ordered30)); assertFalse(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); c.clear(); "<AssertPlaceHolder>"; }
isEmpty() { return m_orderedObjects.isEmpty(); }
[*] target: assertTrue(c.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( c. isEmpty() )
************************************
************************************
[+] input: Exception { PropertyGroup pg = new PropertyGroup(obj); String value = pg.getStringProperty("level1|level2|scalars|stringProp"); "<AssertPlaceHolder>"; assertEquals("stringValue", value); }
getStringProperty(String propertyName) throws Exception { return getStringProperty(propertyName, null); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getBrokerConfig(anyString())).thenReturn(new Properties()); } Properties brokerConfig = mqAdminExtImpl.getBrokerConfig(brokerAddr); Assert."<AssertPlaceHolder>"; }
getBrokerConfig( String brokerAddr) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException { return MQAdminInstance.threadLocalMQAdminExt().getBrokerConfig(brokerAddr); }
[*] target: assertNotNull(brokerConfig)
[-] pred: org. junit. Assert. assertNotNull ( brokerConfig )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:05"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 5, 0) ); "<AssertPlaceHolder>"; assertEquals(300, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { InputStream inputStream = IOUtils.open("org/opensearch/hadoop/util/textdata.txt"); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
open(String location) { return open(location, null); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
************************************
[+] input: testSaveNotebook() { String newName = "new name"; long currentTimeStamp = System.currentTimeMillis(); NotebookInfo nbInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); nbInfo.setName(newName); nbInfo.setUpdateTime(new Timestamp(currentTimeStamp)); nbService.save(nbInfo); NotebookInfo newNotebookInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); Assert."<AssertPlaceHolder>"; Assert.assertEquals(newName, newNotebookInfo.getName()); Assert.assertEquals(currentTimeStamp, newNotebookInfo.getUpdateTime().getTime()); }
findById(Integer id) { return notebookRepository.findById(id).orElse(null); }
[*] target: assertNotNull(newNotebookInfo)
[-] pred: org. junit. Assert. assertNotNull ( newNotebookInfo )
************************************
************************************
[+] input: generateNoneAuthorizationResponse() { String url = idsAuthorizationProvider.generateNoneAuthorizationResponse(idsRequestParam); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("state")); }
generateNoneAuthorizationResponse(IdsRequestParam param) { String params = ""; if (!StringUtil.isEmpty(param.getState())) { params = "?state=" + param.getState(); } return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: rtspDescribeRequestTest() { String expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554"); RtspDescribeRequest request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP)); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP), this.authenticator); request.setCSeq(1); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: testToBundleDefaultValues() { Time time = new Time(); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); PersistableBundle persistableBundle = time.toPersistableBundle(); assertNotNull(persistableBundle); time = new Time(persistableBundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Bundle bundle = time.toBundle(); assertNotNull(bundle); time = new Time(bundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Map<String, ?> map = time.toMap(); assertNotNull(map); time = new Time(map); assertEquals(0, time.getHour()); "<AssertPlaceHolder>"; }
getMinute() { return minute; }
[*] target: assertEquals(0, time.getMinute())
[-] pred: org. junit. Assert. assertEquals ( 0, time. getMinute() )
************************************
************************************
[+] input: pushNPop() { CustomLinkedList<Integer> linkedList = new CustomLinkedList<>(); assertTrue(linkedList.isEmpty()); linkedList.push(2); linkedList.push(3); linkedList.push(36); linkedList.push(39);  assertThat(linkedList.pop(), is(39)); assertThat(linkedList.pop(), is(36)); assertThat(linkedList.pop(), is(3)); assertFalse(linkedList.isEmpty()); assertThat(linkedList.pop(), is(2)); "<AssertPlaceHolder>"; }
isEmpty() { return size == 0; }
[*] target: assertTrue(linkedList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( linkedList. isEmpty() )
************************************
************************************
[+] input: IOException { CSVFormat format = CSVFormat.POSTGRESQL_TEXT;  PipedOutputStream payload = new PipedOutputStream(); OutputStreamWriter writer = new OutputStreamWriter(payload, StandardCharsets.UTF_8);  PipedInputStream inputStream = new PipedInputStream(payload); Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);  CSVParser parser = CSVParser.parse(reader, format); // Pass in 2 complete and one incomplete record. It should be possible to parse the two first // records without problems. String records = "1\tOne\n2\tTwo\n3\t"; writer.write(records); writer.flush();  // Get an iterator for the parser and get the first two records. Iterator<CSVRecord> iterator = parser.iterator(); assertTrue(iterator.hasNext()); CSVRecord record = iterator.next(); assertEquals("1", record.get(0)); assertEquals("One", record.get(1));  assertTrue(iterator.hasNext()); record = iterator.next(); assertEquals("2", record.get(0)); assertEquals("Two", record.get(1));  // Calling iterator.hasNext() or iterator.next() would now block, as there is not enough data // to build another record. // Add the missing pieces for the last record and parse that as well. writer.write("Three\n"); writer.close();  "<AssertPlaceHolder>"; record = iterator.next(); assertEquals("3", record.get(0)); assertEquals("Three", record.get(1));  // There are no more records as the writer has been closed. assertFalse(iterator.hasNext()); }
close() throws IOException { this.payload.close(); this.closedLatch.countDown(); this.dataReceivedLatch.countDown(); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.XLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);   Thread.sleep(100); transaction.setLockType(Lock.LockType.SLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应保持为x锁,新的事务获取应获取不到锁 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }  // 终止所有线程 threadPool.shutdownNow(); }
setLockType(LockType lockType) { this.lockType = lockType; }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
************************************
[+] input: testMandatoryWithExistingTransactionAndError() { final RuntimeException exception = new RuntimeException("Expected JUnit exception"); ITransaction callingTransaction = mock(ITransaction.class);  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.MANDATORY)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (Exception e) { "<AssertPlaceHolder>";  assertSame(callingTransaction, actualTransaction.getValue()); verifyNoInteractions(m_transaction); verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, never()).release(); verify(callingTransaction, times(1)).addFailure(any(Exception.class)); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: getNextBinlogFileNameTest() { // 单流测试 String groupName = GROUP_NAME_GLOBAL; String streamName = STREAM_NAME_GLOBAL; String fileName = getFirstBinlogFileName(groupName, streamName); int randomSeq = new Random().nextInt(BINLOG_FILE_NAME_MAX_SEQUENCE); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } String expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); assertEquals(expectedFileName, fileName); // 多流测试 groupName = "group1"; streamName = "stream1"; fileName = getFirstBinlogFileName(groupName, streamName); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); "<AssertPlaceHolder>"; }
getBinlogFileNameBySequence(String groupName, String streamName, int seq) { if (seq <= 0 || BINLOG_FILE_NAME_MAX_SEQUENCE < seq) { throw new PolardbxException("invalid binlog file name sequence " + seq); } String prefix = getBinlogFilePrefix(groupName, streamName); String suffix = String.format(BINLOG_FILE_NAME_SUFFIX_FORMAT, seq); return prefix + BINLOG_FILE_NAME_SEPARATOR + suffix; }
[*] target: assertEquals(expectedFileName, fileName)
[-] pred: org. junit. Assert. assertEquals ( expectedFileName, fileName )
************************************
************************************
[+] input: testSynchronizeDelete() { getIntervalDAO().insertInterval(getInterval1()); getIntervalDAO().insertInterval(getInterval2()); activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().removeItems(); "<AssertPlaceHolder>"; assertTrue(getIntervalDAO().readAllIntervals().isEmpty()); }
synchronizeIntervals() { Log.d(IntervalHandler.class.getName(), "synchronizeIntervals"); boolean didChanges = false; try { List<Interval> newIntervals = intervalDialog.getAdapter().getAllItems(); List<Interval> dbIntervals = new ArrayList<>(globalSettingsActivity.getTimeBasedSuspensionScheduler().getIntervals()); for (Interval interval : newIntervals) { Log.d(IntervalHandler.class.getName(), "Processing interval " + interval); if (interval.getId() < 0) { insertInterval(interval); didChanges = true; } else { Interval dbInterval = findById(interval.getId(), dbIntervals); Log.d(IntervalHandler.class.getName(), "Found dbInterval = " + dbInterval); if (dbInterval != null) { if (!interval.isEqual(dbInterval)) { updateInterval(interval); didChanges = true; } dbIntervals.remove(dbInterval); } else { Log.e(IntervalHandler.class.getName(), "No interval with id " + interval.getId() + " found"); } } } for (Interval interval : dbIntervals) { deleteInterval(interval); didChanges = true; } } catch (Exception exc) { Log.e(IntervalHandler.class.getName(), "Error synchronizing intervals.", exc); showErrorDialog(getResources().getString(R.string.text_dialog_general_error_synchronize_intervals)); } return didChanges; }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
************************************
[+] input: generateAuthorizationCodeResponse() { String url = idsAuthorizationProvider.generateAuthorizationCodeResponse(userInfo, idsRequestParam, clientDetail); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
generateAuthorizationCodeResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail) { String authorizationCode = oauth2Service.createAuthorizationCode(param, userInfo, OauthUtil.getCodeExpiresIn(clientDetail.getCodeExpiresIn())); String params = "?code=" + authorizationCode; if (StringUtil.isNotEmpty(param.getState())) { params = params + "&state=" + param.getState(); } return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: should_ReturnValidationError_When_EmptyAsEndpointNameGiven() { String validationResult = checker.check("");  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
check(String endpointName) { if (endpointName == null || endpointName.isEmpty()) { return "Endpoint name cannot be blank"; } if (ECMA_SCRIPT_RESERVED_WORDS.contains(endpointName)) { return "Endpoint name cannot be equal to JavaScript reserved words"; } if (WHITESPACE_PATTERN.matcher(endpointName).find()) { return "Endpoint name cannot contain any whitespaces"; } return null; }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
************************************
[+] input: Exception { File tempFile = File.createTempFile("textdata", "txt"); BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile))); writer.write("Hello World. This is used by IOUtilsTest."); writer.close();  InputStream inputStream = IOUtils.open(tempFile.toURI().toURL().toString()); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
open(String location) { return open(location, null); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
************************************
[+] input: generateIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("id_token")); }
generateIdTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "?id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param, issuer); return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: getStructureViewBuilder_ginkgo() { GoFile file = (GoFile) myFixture.configureByFile("marker_test.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GinkgoStructureViewModel); }
getStructureViewBuilder(@NotNull PsiFile psiFile) { GinkgoSettings settings = GinkgoSettings.getInstance(); if (isGinkgoTestFile(psiFile) && settings.isGinkgoStructViewEnabled()) { return new TreeBasedStructureViewBuilder() { public @NotNull StructureViewModel createStructureViewModel(@Nullable Editor editor) { return new GinkgoStructureViewModel(psiFile); } }; }  //we should fall back to GoStructViewFactory return new GoStructureViewFactory().getStructureViewBuilder(psiFile); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30-04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put("currentSchema", "schema"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof SimpleDataSource); SimpleDataSource simpleDataSource = (SimpleDataSource) dataSource; Assert.assertEquals("db", simpleDataSource.getDatabaseName()); Assert.assertEquals("schema", simpleDataSource.getCurrentSchema()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: TransformerException { Transformer transformer = XmlUtility.newTransformer(); Assert."<AssertPlaceHolder>";  StreamSource s = new StreamSource(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamResult r = new StreamResult(out); transformer.transform(s, r); assertEquals(SIMPLE_XML, new String(out.toByteArray(), StandardCharsets.UTF_8)); }
newTransformer() throws TransformerConfigurationException { TransformerFactory tf = TransformerFactory.newInstance(); try { tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (TransformerConfigurationException e) { LOG.debug("Feature '{}' is not supported in the current TransformerFactory: {}", XMLConstants.FEATURE_SECURE_PROCESSING, tf.getClass().getName(), e); } try { tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); } catch (IllegalArgumentException e) { // some factories (e.g. xalan) throw this exception if they do not support this attribute LOG.debug("Attribute '{}' is not supported in the current TransformerFactory: {}", XMLConstants.ACCESS_EXTERNAL_DTD, tf.getClass().getName(), e); } try { // some factories (e.g. xalan) throw this exception if they do not support this attribute tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current TransformerFactory: {}", XMLConstants.ACCESS_EXTERNAL_DTD, tf.getClass().getName(), e); } return tf.newTransformer(); }
[*] target: assertNotNull(transformer)
[-] pred: org. junit. Assert. assertNotNull ( transformer )
************************************
************************************
[+] input: rowShouldEqualToOtherRowWithSimilarFloat() { Row row1 = new Row(); Row row2 = new Row(); row1.add(1.000001); row2.add(1.000002); "<AssertPlaceHolder>"; assertEquals(row2, row1); }
add(Object value) { values.add(roundFloatNum(value)); }
[*] target: assertEquals(row1, row2)
[-] pred: org. junit. Assert. assertEquals ( row1, row2 )
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); String key = "key"; Object value = TimeUnit.MILLISECONDS; assertNull(mp.put(key, value)); Object newValue = TimeUnit.NANOSECONDS; assertEquals(value, mp.put(key, newValue)); "<AssertPlaceHolder>"; }
get(final Object key) { Object value; if (key instanceof String) { value = getProperty((String) key); } else { value = null; }  //Search for non-string value. if (value == null) { value = defaults.get(key); if (value == null && !defaults.containsKey(key)) { value = super.get(key); } } return value; }
[*] target: assertEquals(newValue, mp.get(key))
[-] pred: org. junit. Assert. assertEquals ( newValue, mp. get( key ) )
************************************
************************************
[+] input: testCopy() { JobInput input = Jobs.newInput().withRunContext(RunContexts.empty()); input.withName("name");  JobInput copy = input.copy();  assertNotSame(input.getRunContext(), copy.getRunContext()); "<AssertPlaceHolder>"; }
getName() { return m_name; }
[*] target: assertEquals(input.getName(), copy.getName())
[-] pred: org. junit. Assert. assertEquals ( input. getName(), copy. getName() )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("02:30 - 04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(2, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(7200, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: generateCodeIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(4, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
generateCodeIdTokenTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return this.generateCodeTokenAuthorizationResponse(userInfo, param, clientDetail, issuer) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: testLast() { assertEquals("baz", m_testDoList.last()); m_testDoList.remove("baz"); assertEquals("bar", m_testDoList.last()); m_testDoList.clear(); "<AssertPlaceHolder>"; }
last() { return size() == 0 ? null : get(get().size() - 1); }
[*] target: assertNull(m_testDoList.last())
[-] pred: org. junit. Assert. assertNull ( m_testDoList. last() )
************************************
************************************
[+] input: shouldReturnParentPostProcessor() { when(configuration.getString(Constants.FLINK_SQL_QUERY_KEY, Constants.FLINK_SQL_QUERY_DEFAULT)).thenReturn("test-sql"); when(configuration.getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)).thenReturn(true);  List<PostProcessor> postProcessors = PostProcessorFactory.getPostProcessors(daggerContext, stencilClientOrchestrator, columnNames, metricsTelemetryExporter);  "<AssertPlaceHolder>"; assertEquals(ParentPostProcessor.class, postProcessors.get(0).getClass()); }
getPostProcessors(DaggerContext daggerContext, StencilClientOrchestrator stencilClientOrchestrator, String[] columnNames, MetricsTelemetryExporter metricsTelemetryExporter) { List<PostProcessor> postProcessors = new ArrayList<>();  if (Arrays.stream(columnNames).anyMatch(s -> Pattern.compile(".*\\blongbow.*key\\b.*").matcher(s).find())) { postProcessors.add(getLongBowProcessor(columnNames, daggerContext.getConfiguration(), metricsTelemetryExporter, stencilClientOrchestrator)); } if (daggerContext.getConfiguration().getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)) { postProcessors.add(new ParentPostProcessor(daggerContext, stencilClientOrchestrator, metricsTelemetryExporter)); } if (daggerContext.getConfiguration().getBoolean(Constants.METRIC_TELEMETRY_ENABLE_KEY, Constants.METRIC_TELEMETRY_ENABLE_VALUE_DEFAULT)) { postProcessors.add(new TelemetryProcessor(metricsTelemetryExporter)); } return postProcessors; }
[*] target: assertEquals(1, postProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 1, postProcessors. size ( ) )
************************************
************************************
[+] input: Exception { IScoutTestParameter testParameter = new ParameterizedTestClassParameter("p");  Object createdTestInstance = ParameterizedTestRunnerExtension.createTest(m_testClass, testParameter); "<AssertPlaceHolder>"; assertEquals(SampleParameterizedTestClass.class, createdTestInstance.getClass()); assertEquals(testParameter, ((SampleParameterizedTestClass) createdTestInstance).getTestParameter()); }
createTest(TestClass testClass, IScoutTestParameter testParameter) throws Exception { try { return testClass.getOnlyConstructor().newInstance(testParameter); } catch (Exception ex) { String parameterName = (testParameter != null ? testParameter.getName() : null); throw new Exception("Constructor can not be invoked with the parameter '" + parameterName + "')", ex); } }
[*] target: assertNotNull(createdTestInstance)
[-] pred: org. junit. Assert. assertNotNull ( createdTestInstance )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineTopicRouteInfo(anyString())).thenReturn(MockObjectUtil.createTopicRouteData()); } TopicRouteData topicRouteData = mqAdminExtImpl.examineTopicRouteInfo("topic_test"); Assert."<AssertPlaceHolder>"; }
examineTopicRouteInfo(String topic) throws RemotingException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().examineTopicRouteInfo(topic); }
[*] target: assertNotNull(topicRouteData)
[-] pred: org. junit. Assert. assertNotNull ( topicRouteData )
************************************
************************************
[+] input: IOException { PipedOutputStream pipedOutputStream = new PipedOutputStream(); BinaryCopyParser parser = new BinaryCopyParser(new PipedInputStream(pipedOutputStream, 256));  DataOutputStream data = new DataOutputStream(pipedOutputStream); data.write(COPY_BINARY_HEADER); data.writeInt(0); data.writeInt(0);  // Write the trailer indicator to indicate that there are no more rows. data.writeShort(-1);  Iterator<CopyRecord> iterator = parser.iterator(); "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, iterator::next); }
hasNext() { try { // The hasNext status is UNKNOWN if a call to next() has been executed since the last time // hasNext() was called, or if this is the first time hasNext() is called. if (hasNext == HasNext.UNKNOWN) { // The first value in a row is the number of fields in that row. The value will be -1 for // the last tuple (this is the file trailer). The value should be the same for all other // rows. short fieldCount = dataInputStream.readShort(); if (fieldCount == -1) { logger.log(Level.FINE, "End of copy file: -1"); hasNext = HasNext.NO; } else if (fieldCount > -1) { if (firstRowFieldCount == -1) { firstRowFieldCount = fieldCount; currentRow = new BinaryField[fieldCount]; } else if (firstRowFieldCount != fieldCount) { throw SpannerExceptionFactory.newSpannerException( ErrorCode.FAILED_PRECONDITION, String.format( "Invalid field count encountered: %d, expected %d", fieldCount, firstRowFieldCount)); } hasNext = HasNext.YES; } else { throw SpannerExceptionFactory.newSpannerException( ErrorCode.FAILED_PRECONDITION, String.format("Invalid field count encountered: %d", fieldCount)); } } return hasNext == HasNext.YES; } catch (EOFException eofException) { // The protocol specifies that the stream should contain a -1 as the trailer in the file, // but it seems that some clients do not include this. logger.log(Level.FINE, "EOF in BinaryCopyParser"); hasNext = HasNext.NO; return false; } catch (IOException ioException) { throw SpannerExceptionFactory.newSpannerException( ErrorCode.INTERNAL, ioException.getMessage(), ioException); } }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext ( ) )
************************************
************************************
[+] input: clearEmptyPaths_EmptyPathSize2_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); Map<String, Object> innerMap = new HashMap<>(); innerMap.put("b", new HashMap<String, Object>()); map.put("a", innerMap); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
clearEmptyPaths(Map<String, Object> map) { if (map.size() == 0) { return true; } Set<String> keysToDelete = new HashSet<>(); for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (Map.class.isAssignableFrom(value.getClass())) { if (clearEmptyPaths((Map<String, Object>) value)) { keysToDelete.add(entry.getKey()); } } } if (keysToDelete.size() != 0) { if (map.size() == keysToDelete.size()) { map.clear(); return true; } for (String key : keysToDelete) { // TODO: seems like a bug, either fix, or just get rid of for loop and remove the first key map.remove(key); return false; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  m_transaction.registerMember(new TestTransactionMember(exception));  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: test() { IFuture<Void> future1 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_A_job")); IFuture<Void> future2 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_B_job")); IFuture<Void> future3 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_C_job"));  Predicate<IFuture<?>> filter = new JobNameRegexFutureFilter(Pattern.compile(".*[AB].*")); assertTrue(filter.test(future1)); assertTrue(filter.test(future2)); "<AssertPlaceHolder>";  // cleanup Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), 10, TimeUnit.SECONDS); }
test(final IFuture<?> future) { if (future.getJobInput().getName() == null) { return false; } return m_regex.matcher(future.getJobInput().getName()).matches(); }
[*] target: assertFalse(filter.test(future3))
[-] pred: org. junit. Assert. assertFalse ( filter. test ( future3 ) )
************************************
************************************
[+] input: testEquals() { MailHandler h = new MailHandler(); assertFalse(h.equals((Object) null)); assertNotEquals(h, new MailHandler()); "<AssertPlaceHolder>"; }
equals(Object o) { if (o instanceof TailNameFormatter) { return name.equals(((TailNameFormatter) o).name); } return false; }
[*] target: assertTrue(h.equals(h))
[-] pred: org. junit. Assert. assertTrue ( h. equals(h ) )
************************************
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(0); for (int i = 0; i < 1000; ++i) { statementSummaryManager.summaryStmt(execInfo); } execInfo.setSlow(true); statementSummaryManager.summaryStmt(execInfo); Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount == 1); }
getCurrentStmtSummaries(long nowBeginTime) { return getStmtSummaries(nowBeginTime, (e1, e2) -> { return (int) (e1.longValue() - e2.longValue()); }); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: testSynchronizeIntervalsAdd() { activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().addItem(getInterval1()); intervalsDialog.getAdapter().addItem(getInterval2()); intervalsDialog.getAdapter().addItem(getInterval3()); "<AssertPlaceHolder>"; List<Interval> intervals = getIntervalDAO().readAllIntervals(); assertEquals(2, intervals.size()); assertTrue(intervals.get(0).isEqual(getInterval1())); assertTrue(intervals.get(1).isEqual(getInterval2())); }
synchronizeIntervals() { Log.d(IntervalHandler.class.getName(), "synchronizeIntervals"); boolean didChanges = false; try { List<Interval> newIntervals = intervalDialog.getAdapter().getAllItems(); List<Interval> dbIntervals = new ArrayList<>(globalSettingsActivity.getTimeBasedSuspensionScheduler().getIntervals()); for (Interval interval : newIntervals) { Log.d(IntervalHandler.class.getName(), "Processing interval " + interval); if (interval.getId() < 0) { insertInterval(interval); didChanges = true; } else { Interval dbInterval = findById(interval.getId(), dbIntervals); Log.d(IntervalHandler.class.getName(), "Found dbInterval = " + dbInterval); if (dbInterval != null) { if (!interval.isEqual(dbInterval)) { updateInterval(interval); didChanges = true; } dbIntervals.remove(dbInterval); } else { Log.e(IntervalHandler.class.getName(), "No interval with id " + interval.getId() + " found"); } } } for (Interval interval : dbIntervals) { deleteInterval(interval); didChanges = true; } } catch (Exception exc) { Log.e(IntervalHandler.class.getName(), "Error synchronizing intervals.", exc); showErrorDialog(getResources().getString(R.string.text_dialog_general_error_synchronize_intervals)); } return didChanges; }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
************************************
[+] input: testWithExceptionInRemove() { GroupedSynchronizer<String, String> lck = new GroupedSynchronizer<>(); RuntimeException expectedException = new RuntimeException(); String key = "key"; lck.runInGroupLock(key, () -> { }, Function.identity());  assertEquals(1, lck.size()); assertNull(lck.remove("nonExisting")); assertEquals(0, lck.numLockedRootLocks());  try { lck.remove("key", obj -> { assertEquals(1, lck.numLockedRootLocks()); throw expectedException; }); } catch (RuntimeException e) { assertSame(expectedException, e); }  // lock is available again: assertEquals(0, lck.numLockedRootLocks()); "<AssertPlaceHolder>"; // remove is done (event there was an exception) }
size() { return m_locks.size(); }
[*] target: assertEquals(0, lck.size())
[-] pred: org. junit. Assert. assertEquals ( 0, lck. size() )
************************************
************************************
[+] input: testSegmentIoExample1() {  // SOURCE: https://github.com/segmentio/ksuid // // REPRESENTATION: // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 // // COMPONENTS: // // Time: 2017-10-09 21:00:47 -0700 PDT // Timestamp: 107608047 // Payload: B5A1CD34B5F99D1154FB6853345C9735 //  String string = "0ujtsYcgvSTl8PAuAdqWYSMnLOv"; String raw = "0669F7EFB5A1CD34B5F99D1154FB6853345C9735"; Instant instant = Instant.parse("2017-10-10T04:00:47Z"); // UTC long timestamp = 107608047; // KSUID time String payload = "B5A1CD34B5F99D1154FB6853345C9735";  // instantiate a KSUID from bytes byte[] bytes = new BigInteger(raw, 16).toByteArray(); Ksuid ksuid = Ksuid.from(bytes);  // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv assertEquals(string, ksuid.toString());  // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 String raw2 = new BigInteger(1, ksuid.toBytes()).toString(16).toUpperCase(); assertEquals(raw.replaceAll("^0+", ""), raw2);  // Time: 2017-10-09 21:00:47 -0700 PDT assertEquals(instant, ksuid.getInstant());  // Timestamp: 107608047 assertEquals(Ksuid.toUnixTime(timestamp), ksuid.getTime());  // Payload: B5A1CD34B5F99D1154FB6853345C9735 String payload2 = new BigInteger(1, ksuid.getPayload()).toString(16).toUpperCase(); "<AssertPlaceHolder>"; }
getPayload() { final byte[] copy = new byte[PAYLOAD_BYTES]; System.arraycopy(this.payload, 0, copy, 0, PAYLOAD_BYTES); return copy; }
[*] target: assertEquals(payload, payload2)
[-] pred: org. junit. Assert. assertEquals ( payload, payload2 )
************************************
************************************
[+] input: testGetResourceToFile() { // 测试getResourceToFile方法是否能正确地将资源文件复制到指定的文件路径  //获取临时文件路径 String tempDirectoryPath = org.apache.commons.io.FileUtils.getTempDirectoryPath();  String resourceName = "iast.properties.example"; // 假设存在名为test_resource.txt的资源文件 String fileName = tempDirectoryPath + "test.example"; // 替换为实际的目标文件路径  boolean result; try { result = FileUtils.getResourceToFile(resourceName, fileName); } catch (IOException e) { throw new RuntimeException(e); }  Assert."<AssertPlaceHolder>"; // 验证复制操作是否成功  // 验证目标文件是否存在 java.io.File targetFile = new java.io.File(fileName); Assert.assertTrue(targetFile.exists());  // 清理测试产生的文件 targetFile.delete(); }
getResourceToFile(String resourceName, String fileName) throws IOException { File targetFile = new File(fileName);  if (!targetFile.exists()) { if (!targetFile.getParentFile().exists()) { if (!targetFile.getParentFile().mkdirs()) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "mkdirs"); } } if (!targetFile.createNewFile()) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "createNewFile"); } }  try { InputStream is = FileUtils.class.getClassLoader().getResourceAsStream(resourceName); if (is == null) { return false; } FileOutputStream fos = new FileOutputStream(targetFile); int length = 0; byte[] data = new byte[1024]; while ((length = is.read(data)) != -1) { fos.write(data, 0, length); } data = null; is.close(); fos.close(); return true; } catch (Throwable e) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "write", e); return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: URISyntaxException { BatchRequestCreator batchRequestCreator = new BatchRequestCreator(firehoseInstrumentation, uriBuilder, headerBuilder, HttpSinkRequestMethodType.POST, jsonBody, httpSinkConfig); List<HttpEntityEnclosingRequestBase> requests = batchRequestCreator.create(messages, requestEntityBuilder);  "<AssertPlaceHolder>"; assertEquals(HttpSinkRequestMethodType.POST.toString(), requests.get(0).getMethod()); verify(firehoseInstrumentation, times(1)).logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uriBuilder.build(), headerBuilder.build(), jsonBody.serialize(messages), HttpSinkRequestMethodType.POST); }
create(List<Message> messages, RequestEntityBuilder requestEntityBuilder) throws URISyntaxException { URI uri = uriBuilder.build(); HttpEntityEnclosingRequestBase request = HttpRequestMethodFactory .create(uri, method);  Map<String, String> headerMap = headerBuilder.build(); headerMap.forEach(request::addHeader); String messagesString = jsonBody.serialize(messages).toString();  if (!(method == HttpSinkRequestMethodType.DELETE && !httpSinkConfig.getSinkHttpDeleteBodyEnable())) { request.setEntity(requestEntityBuilder.buildHttpEntity(messagesString)); firehoseInstrumentation.logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uri, headerMap, jsonBody.serialize(messages), method); } else { firehoseInstrumentation.logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: no body\nRequest method: {}", uri, headerMap, method); } return Collections.singletonList(request); }
[*] target: assertEquals(1, requests.size())
[-] pred: org. junit. Assert. assertEquals ( 1, requests. size ( ) )
************************************
************************************
[+] input: testDatabaseAnnotation() { annotationMapper.parseClassAnnotations(ClassWithDatabase.class.getAnnotations(), context); DefaultDBSystem db = (DefaultDBSystem) context.get("db"); "<AssertPlaceHolder>"; assertEquals("hsqlmem", db.getEnvironment()); }
parseClassAnnotations(Annotation[] annotations, BeneratorContext context) { for (Annotation annotation : annotations) { if (annotation instanceof Database) { parseDatabase((Database) annotation, context); } else if (annotation instanceof Bean) { parseBean((Bean) annotation, context); } } }
[*] target: assertNotNull(db)
[-] pred: org. junit. Assert. assertNotNull ( db )
************************************
************************************
[+] input: Exception { ITransaction callingTransaction = mock(ITransaction.class);  final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.REQUIRED)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(callingTransaction, actualTransaction.getValue());  verifyNoInteractions(m_transaction);  verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, times(1)).addFailure(any(Throwable.class)); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: useSettingsFromConfigTemplate() { GinkgoRunConfiguration configTemplate = (GinkgoRunConfiguration) new GinkgoConfigurationType().createTemplateConfiguration(getProject()); configTemplate.getOptions().setGinkgoAdditionalOptions("additional options"); configTemplate.getOptions().setGoToolOptions("build tool options"); configTemplate.getOptions().setWorkingDir("custom directory");  GoFile file = (GoFile) myFixture.configureByFile("marker_ginkgo.go"); PsiElement specElement = getSpecElement(file, "Describe"); ConfigurationContext context = new ConfigurationContext(specElement); boolean result = ginkgoRunConfigurationProducer.setupConfigurationFromContext(configTemplate, context, new Ref<>(specElement));  "<AssertPlaceHolder>"; assertEquals("additional options", configTemplate.getOptions().getGinkgoAdditionalOptions()); assertEquals("build tool options", configTemplate.getOptions().getGoToolOptions()); assertEquals("custom directory", configTemplate.getOptions().getWorkingDir()); }
setupConfigurationFromContext(@NotNull GinkgoRunConfiguration configuration, @NotNull ConfigurationContext context, @NotNull Ref<PsiElement> sourceElement) { if (context.getPsiLocation() == null || context.getPsiLocation().getParent() == null) { return false; }  if (!(context.getPsiLocation().getParent().getParent() instanceof GoCallExpr)) { return false; }  List<String> specNames = getSpecNames(context); GinkgoRunConfigurationOptions options = configuration.getOptions();  GinkgoRunConfigurationOptions ginkgoRunConfigurationOptions = new GinkgoRunConfigurationOptions(); ginkgoRunConfigurationOptions.setGinkgoExecutable(options.getGinkgoExecutable()); ginkgoRunConfigurationOptions.setWorkingDir(configWorkingDirectory(context, options)); ginkgoRunConfigurationOptions.setEnvData(options.getEnvData()); ginkgoRunConfigurationOptions.setGinkgoAdditionalOptions(options.getGinkgoAdditionalOptions()); ginkgoRunConfigurationOptions.setGinkgoScope(GinkgoScope.FOCUS); ginkgoRunConfigurationOptions.setTestNames(specNames); ginkgoRunConfigurationOptions.setFocusTestExpression(String.join(" ", specNames)); ginkgoRunConfigurationOptions.setGoToolOptions(options.getGoToolOptions()); GoFile file = (GoFile) context.getPsiLocation().getContainingFile(); ginkgoRunConfigurationOptions.setPackageName(file.getPackageName());  configuration.setOptions(ginkgoRunConfigurationOptions); configuration.setGeneratedName(); return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: generateImplicitGrantResponse() { String url = idsAuthorizationProvider.generateImplicitGrantResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(6, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("scope")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("token_type")); Assert.assertTrue(obj.containsKey("expires_in")); }
generateImplicitGrantResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); Map<String, String> tokenResponse = new HashMap<>(9); // https://tools.ietf.org/html/rfc6749#section-4.2.2 // The authorization server MUST NOT issue a refresh token. tokenResponse.put(IdsConsts.ACCESS_TOKEN, accessToken.getAccessToken()); tokenResponse.put(IdsConsts.EXPIRES_IN, String.valueOf(OauthUtil.getAccessTokenExpiresIn(clientDetail.getAccessTokenExpiresIn()))); tokenResponse.put(IdsConsts.TOKEN_TYPE, IdsConsts.TOKEN_TYPE_BEARER); tokenResponse.put(IdsConsts.SCOPE, param.getScope()); if (OauthUtil.isOidcProtocol(param.getScope())) { tokenResponse.put(IdsConsts.ID_TOKEN, TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer)); } if (StringUtil.isNotEmpty(param.getState())) { tokenResponse.put(IdsConsts.STATE, param.getState()); } String params = ObjectUtils.parseMapToString(tokenResponse, false); return param.getRedirectUri() + "?" + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: getVehicleLocationSuccessWithUserDetailsNotNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); UserDetails userDetails = getDummyUserDetails(); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())) .thenReturn(vehicleDetails); Mockito.when(userDetailsRepository.findByUser_id(Mockito.anyLong())).thenReturn(userDetails); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(userDetails.getName(), vehicleLocationResponse.getFullName()); Assertions.assertEquals(userDetails.getUser().getEmail(), vehicleLocationResponse.getEmail()); }
getVehicleLocation(UUID carId) { VehicleDetails vehicleDetails = null; VehicleLocationResponse vehicleLocationForm = null; UserDetails userDetails = null; Random random = new Random(); try { vehicleDetails = vehicleDetailsRepository.findByUuid(carId); if (vehicleDetails != null) { // vehicleDetails = vehicleDetailsRepository.findByVehicleLocation_id(carId); // vehicleDetails.setVehicleLocation(getVehicleLocationList().get(random.nextInt(getVehicleLocationList().size()))); if (vehicleDetails.getOwner() != null) { userDetails = userDetailsRepository.findByUser_id(vehicleDetails.getOwner().getId()); vehicleLocationForm = new VehicleLocationResponse( carId, (userDetails != null ? userDetails.getName() : null), (userDetails != null ? userDetails.getUser().getEmail() : null), vehicleDetails.getVehicleLocation()); return vehicleLocationForm; } } } catch (Exception exception) { log.error("Fail to get vehicle location-> Message: {}", exception); } return null; }
[*] target: assertNotNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNotNull ( vehicleLocationResponse )
************************************
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(1); for (int i = 0; i < 10000; ++i) { statementSummaryManager.summaryStmt(execInfo); } Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount > 50L && queryCount < 150L); }
getCurrentStmtSummaries(long nowBeginTime) { return getStmtSummaries(nowBeginTime, (e1, e2) -> { return (int) (e1.longValue() - e2.longValue()); }); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: XMLStreamException { XMLInputFactory factory = XmlUtility.newXMLInputFactory(); Assert."<AssertPlaceHolder>";  XMLEventReader reader = factory.createXMLEventReader(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); StringBuilder b = new StringBuilder(); while (reader.hasNext()) { XMLEvent event = reader.nextEvent(); b.append(event.getEventType()); } assertEquals("711228", b.toString()); }
newXMLInputFactory() { XMLInputFactory factory = XMLInputFactory.newInstance(); try { factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current XMLInputFactory: {}", XMLInputFactory.SUPPORT_DTD, factory.getClass().getName(), e); } try { factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current XMLInputFactory: {}", XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, factory.getClass().getName(), e); } return factory; }
[*] target: assertNotNull(factory)
[-] pred: org. junit. Assert. assertNotNull ( factory )
************************************
************************************
[+] input: testPath() { final DynamicDAG<Integer> dag = new DynamicDAG<>(3.0 / 2.0); final int n = 25; boolean ok;  final int[] nodeOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); @SuppressWarnings("unchecked") final DOLNode<DAGNode<Integer>>[] x = new DOLNode[n]; for (int i = 0; i < n; i++) { x[nodeOrder[i]] = dag.addNode(nodeOrder[i]); Assert.assertTrue(dag.dynamicOrderedList.assertList()); } final int[] arcOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); for (int i = 0; i < n; i++) if (arcOrder[i] < n - 1) { ok = dag.addArc(x[arcOrder[i]], x[arcOrder[i] + 1]); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dag.dynamicOrderedList.assertList()); } // Now test for order for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) Assert.assertEquals(Integer.compare(i, j), DynamicOrderedList.compare(x[i], x[j]));  }
addArc(final DOLNode<DAGNode<K>> source, final DOLNode<DAGNode<K>> target) { final DOLNode<DAGNode<K>> lastInserted = visitForwardAndMove(target, source, source); if (lastInserted == null) return false; addSuccessor(source, target); return true; }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForOptionalType() { String error = explicitNullableTypeChecker.checkValueForType(null, Optional.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Optional.empty")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateType() { String error = explicitNullableTypeChecker.checkValueForType(null, Date.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Date")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: testWithRealActivities() { testWorkflowRule.getWorker().registerActivitiesImplementations(new ContentLengthActivityImpl()); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute();  "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  }
execute();
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01}; MbReadInputRegisterRequest mb = new MbReadInputRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_INPUT_REGISTER); mb.setAddress(8); mb.setQuantity(1); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: testUpdateActionsFromPaths_basic() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.FUNCTIONS) { assertEquals(1, action.getTargets().size()); assertEquals(1, UpdateAction.FUNCTIONS.getTargets().size()); assertTrue(action.getTargets().contains("onboarding-app-stack-listener")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: toHexString() { String expected = "1A 6B DE 8C"; byte[] data = new byte[]{(byte) 0x1A, (byte) 0x6B, (byte) 0xDE, (byte) 0x8C}; String actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1 49 AB DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1|49|AB|DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"|"); assertEquals(expected, actual);  expected = "A1-49-AB-DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"-"); assertEquals(expected, actual);  expected = "A1@49@AB@DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"@"); "<AssertPlaceHolder>"; }
toHexString(byte[] src, String splitStr) { return toHexString(src, splitStr, true); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testWriteDateWithNanos() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Timestamp timestamp = new Timestamp(1420114230123l); timestamp.setNanos(123456789); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(timestamp, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = timestamp.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123456789, parsedDate.getNano()); }
doWrite(Object value, Generator generator, String parentField) { if (value == null) { generator.writeNull(); } else if (value instanceof String) { generator.writeString((String) value); } else if (value instanceof Integer) { generator.writeNumber(((Integer) value).intValue()); } else if (value instanceof Long) { generator.writeNumber(((Long) value).longValue()); } else if (value instanceof Float) { generator.writeNumber(((Float) value).floatValue()); } else if (value instanceof Double) { generator.writeNumber(((Double) value).doubleValue()); } else if (value instanceof Short) { generator.writeNumber(((Short) value).shortValue()); } else if (value instanceof Byte) { generator.writeNumber(((Byte) value).byteValue()); } // Big Decimal/Integer else if (value instanceof Number) { // check double vs long Number n = ((Number) value); double d = n.doubleValue(); if (Math.floor(d) == d) { generator.writeNumber(n.longValue()); } else { generator.writeNumber(d); } } else if (value instanceof Boolean) { generator.writeBoolean(((Boolean) value).booleanValue()); } else if (value instanceof byte[]) { generator.writeBinary((byte[]) value); } else if (value.getClass().isArray()) { generator.writeBeginArray(); for (Object o : ObjectUtils.toObjectArray(value)) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Map) { generator.writeBeginObject(); for (Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) { String fieldName = entry.getKey().toString(); // filter out fields if (shouldKeep(parentField, fieldName)) { generator.writeFieldName(fieldName); Result result = doWrite(entry.getValue(), generator, fieldName); if (!result.isSuccesful()) { return result; } } } generator.writeEndObject(); } else if (value instanceof Iterable) { generator.writeBeginArray(); for (Object o : (Iterable<?>) value) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Timestamp) { Timestamp timestamp = (Timestamp) value; long epochSeconds = timestamp.getTime() / 1000; // Getting rid of millisconds because they're captured in timestamp.getNanos() Instant instant = Instant.ofEpochSecond(epochSeconds, timestamp.getNanos()); OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(instant, ZoneId.systemDefault()); generator.writeString(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(offsetDateTime)); } else if (value instanceof Date) { Calendar cal = Calendar.getInstance(); cal.setTime((Date) value); generator.writeString(DatatypeConverter.printDateTime(cal)); } else if (value instanceof Calendar) { generator.writeString(DatatypeConverter.printDateTime((Calendar) value)); } else { if (writeUnknownTypes) { return handleUnknown(value, generator); } return Result.FAILED(value); } return Result.SUCCESFUL(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testSingle() { String original = "0000-00-00 01:01:01"; Calendar calendar = new GregorianCalendar(); byte[] bs = original.getBytes(); Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(!eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String(bs), Arrays.equals(t1.toString().getBytes(), bs)); System.out.println(t2.toString()); }
bytesToDatetime(byte[] timestampAsBytes, int sqlType, Calendar calendar, boolean allowModification, boolean allowInvalidity) {  MysqlDateTime mysqlDateTime = StringTimeParser.parseString(timestampAsBytes, sqlType); if (mysqlDateTime == null) { return null; } if (!allowModification) { return createOriginalTimestamp(mysqlDateTime); } else { int year = (int) mysqlDateTime.getYear(); int month = (int) mysqlDateTime.getMonth(); int day = (int) mysqlDateTime.getDay(); int hour = (int) mysqlDateTime.getHour(); int minute = (int) mysqlDateTime.getMinute(); int second = (int) mysqlDateTime.getSecond(); int secondPart = (int) mysqlDateTime.getSecondPart(); return createJavaTimestamp(calendar, year, month, day, hour, minute, second, secondPart); } }
[*] target: assertTrue(eq)
[-] pred: org. junit. Assert. assertTrue ( eq )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalDateTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalDateTime")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: testMatch() { boolean b = MatcherUtil.match("/topic/*.query", "/topic/route.query"); boolean b1 = MatcherUtil.match("/**/**.do", "/consumer/route.do"); boolean b2 = MatcherUtil.match("/*", "/topic/qqq/route.do"); Assert."<AssertPlaceHolder>"; Assert.assertTrue(b1); Assert.assertFalse(b2); }
match(String accessUrl, String reqPath) { String regPath = getRegPath(accessUrl); return Pattern.compile(regPath).matcher(reqPath).matches(); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: testWithMockedActivities() { ContentLengthActivity activities = mock(ContentLengthActivity.class, withSettings().withoutAnnotations());  ContentLengthInfo testInfo = new ContentLengthInfo(); testInfo.add("testsite", 100);  when(activities.count(anyString())).thenReturn(testInfo); testWorkflowRule.getWorker().registerActivitiesImplementations(activities); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute(); "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  assertEquals(100, (int) info.getWebsiteMap().get("testsite"));  }
execute();
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
************************************
[+] input: SQLException { String jsonString = TABLE_METADATA.getResponse(); Response response = new Response.Builder().code(HttpStatus.SC_OK). request(buildRequest()).protocol(Protocol.HTTP_1_1). message("Successful"). body(ResponseBody.create(jsonString, MediaType.parse("application/json"))).build(); doReturn(response).when(queryExecutor).getMetadata(); ResultSet resultSet = queryServiceMetadata.getColumns("", "", "ContactPointEmail__dlm", ""); while(resultSet.next()) { String columnName = resultSet.getString("COLUMN_NAME"); Assert."<AssertPlaceHolder>"; if (booleanColumns.contains(columnName)) { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.BOOLEAN); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.BOOLEAN.getName()); } else { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.VARCHAR); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.STRING.getName()); } } Assert.assertEquals(resultSet.getMetaData().getColumnCount(), 24); }
getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException { MetadataResponse metadataResponse = getMetadataResponse(); return createColumnResultSet(metadataResponse, tableNamePattern); }
[*] target: assertNotNull(columnName)
[-] pred: org. junit. Assert. assertNotNull ( columnName )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForObjectType() { String error = explicitNullableTypeChecker.checkValueForType(null, Object.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Object")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: testEmptyConstructor() { EndpointConfigEntry entry = new EndpointConfigEntry(); assertNull(entry.productCode()); assertNull(entry.regionCode()); "<AssertPlaceHolder>"; }
domains() { return domains; }
[*] target: assertNull(entry.domains())
[-] pred: org. junit. Assert. assertNull ( entry. domains() )
************************************
************************************
[+] input: testUpdateEventOffset() { List<Map<String, Object>> rows = offset.queryEventOffset().join(); rows.forEach(map -> { Long id = (Long) map.get("id"); Long offset_id = (Long) map.get("event_offset_id"); String dataSourceName = (String) map.get("data_source_name"); boolean status = offset.updateEventOffset(dataSourceName, offset_id + 1, id).join(); Assert.assertTrue(status); boolean status2 = offset.updateEventOffset(dataSourceName, offset_id, id).join(); Assert."<AssertPlaceHolder>"; });  }
updateEventOffset(String dataSourceName, long offsetId, long id) { try { DataSource dataSource = dataSourceNameMap.get(dataSourceName); QueryRunner queryRunner = new QueryRunner(dataSource); queryRunner.update(UPDATE_EVENT_OFFSET, offsetId, id); return CompletableFuture.completedFuture(true); } catch (Throwable e) { CompletableFuture<Boolean> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } }
[*] target: assertTrue(status2)
[-] pred: org. junit. Assert. assertTrue ( status2 )
************************************
************************************
[+] input: InvalidSPDXAnalysisException { File resultDirectory = Files.createTempDirectory("cdxTest").toFile(); try { String resultFilePath = resultDirectory + File.separator + "resultSpdx.json"; CycloneToSpdx.cycloneDxToSpdx(VALID_BOM_PATH.toString(), resultFilePath); MultiFormatStore store = new MultiFormatStore(new InMemSpdxStore(), Format.JSON_PRETTY, Verbose.COMPACT); String documentUri; try (InputStream is = new FileInputStream(new File(resultFilePath))) { documentUri = store.deSerialize(is, false); } SpdxDocument spdxDoc = new SpdxDocument(store, documentUri, null, false); List<String> verify = spdxDoc.verify(); "<AssertPlaceHolder>"; List<String> expectedDocAttributionPatterns = new ArrayList<>(); assertTrue(spdxDoc.getDocumentUri().contains("3e671687-395b-41f5-a30f-a58921a69b79")); assertTrue(spdxDoc.getDocumentUri().endsWith("_1")); String created = spdxDoc.getCreationInfo().getCreated(); assertTrue(created.startsWith("2020-04-13T20:20:39")); Collection<String> creators = spdxDoc.getCreationInfo().getCreators(); boolean foundTool = false; boolean foundPerson = false; boolean foundOrganization = false; for (String creator:creators) { if (creator.contains("Awesome Tool")) { assertFalse(foundTool); foundTool = true; assertTrue(creator.startsWith("Tool:")); assertTrue(creator.contains("9.1.2")); // Too checksums expectedDocAttributionPatterns.add("25ed8e31b995bb927966616df2a42b979a2717f0"); expectedDocAttributionPatterns.add("a74f733635a19aefb1f73e5947cef59cd7440c6952ef0f03d09d974274cbd6df"); } if (creator.contains("Samantha Wright")) { assertFalse(foundPerson); foundPerson = true; assertTrue(creator.startsWith("Person:")); assertTrue(creator.contains("(samantha.wright@example.com)")); expectedDocAttributionPatterns.add("800-555-1212"); } if (creator.contains("Acme, Inc.")) { assertFalse(foundOrganization); foundOrganization = true; assertTrue(creator.startsWith("Organization: ")); expectedDocAttributionPatterns.add("https://example.com"); expectedDocAttributionPatterns.add("Acme Distribution"); expectedDocAttributionPatterns.add("distribution@example.com"); } } assertTrue(foundTool); assertTrue(foundPerson); assertTrue(foundOrganization); expectedDocAttributionPatterns.add("Acme, Inc."); expectedDocAttributionPatterns.add("Acme Professional Services"); expectedDocAttributionPatterns.add("professional.services@example.com"); assertEquals(1, spdxDoc.getDocumentDescribes().size()); SpdxElement described = spdxDoc.getDocumentDescribes().toArray(new SpdxElement[1])[0]; assertEquals("Acme Application", described.getName().get()); assertTrue(spdxDoc.getName().get().contains("Acme Application")); assertAnnotationsContains(spdxDoc.getAnnotations(), expectedDocAttributionPatterns);  // check on all the packages final List<String> foundComponentNames = new ArrayList<>(); SpdxModelFactory.getElements(spdxDoc.getModelStore(), spdxDoc.getDocumentUri(), spdxDoc.getCopyManager(), SpdxPackage.class).forEach(element -> { try { SpdxPackage pkg = (SpdxPackage)element; foundComponentNames.add(pkg.getName().get()); if ("Acme Application".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("application".toUpperCase());	// type assertEquals("Person: Acme Super Heros", pkg.getOriginator().get()); /** TODO: Uncomment this out once the SWID external refs are implemented assertEquals("9.1.1", pkg.getVersionInfo().get()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("swid"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.SECURITY, externalRefs[0].getReferenceCategory()); assertTrue(externalRefs[0].getReferenceLocator().contains("swidgen-242eb18a-503e-ca37-393b-cf156ef09691_9.1.1")); **/ expectedAnnotations.add("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8"); // part of the SWID content assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("com.acme:tomcat-catalina".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("library".toUpperCase());	// type assertTrue(pkg.getOriginator().get().contains("Acme Inc")); assertEquals("9.0.14", pkg.getVersionInfo().get()); if (pkg.getId().contains("npm")) { // There are 3 in the BOM test file with the same name - one has more details assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", pkg.getSha1()); boolean foundSha1 = false; boolean foundSha512 = false; boolean foundSha256 = false; boolean foundMd5 = false; for (Checksum checksum:pkg.getChecksums()) { if (ChecksumAlgorithm.SHA1.equals(checksum.getAlgorithm())) { assertFalse(foundSha1); foundSha1 = true; assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", checksum.getValue()); } else if (ChecksumAlgorithm.SHA256.equals(checksum.getAlgorithm())) { assertFalse(foundSha256); foundSha256 = true; assertEquals("f498a8ff2dd007e29c2074f5e4b01a9a01775c3ff3aeaf6906ea503bc5791b7b", checksum.getValue()); } else if (ChecksumAlgorithm.SHA512.equals(checksum.getAlgorithm())) { assertFalse(foundSha512); foundSha512 = true; assertEquals("e8f33e424f3f4ed6db76a482fde1a5298970e442c531729119e37991884bdffab4f9426b7ee11fccd074eeda0634d71697d6f88a460dce0ac8d627a29f7d1282", checksum.getValue()); } else if (ChecksumAlgorithm.MD5.equals(checksum.getAlgorithm())) { assertFalse(foundMd5); foundMd5 = true; assertEquals("3942447fac867ae5cdb3229b658f4d48", checksum.getValue()); } else { fail("Unexpected checksum algorithm"); } } assertTrue(foundSha512); assertTrue(foundSha256); assertTrue(foundSha1); assertTrue(foundMd5); assertEquals("Apache-2.0", pkg.getLicenseDeclared().toString()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("purl"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.PACKAGE_MANAGER, externalRefs[0].getReferenceCategory()); assertEquals("pkg:npm/acme/component@1.0.0", externalRefs[0].getReferenceLocator()); Relationship[] relationships = pkg.getRelationships().toArray(new Relationship[pkg.getRelationships().size()]); assertEquals(3, relationships.length); int numAcestors = 0; int numDependencies = 0; for (Relationship relationship:relationships) { SpdxPackage relatedPackage = (SpdxPackage)relationship.getRelatedSpdxElement().get(); assertEquals("com.acme:tomcat-catalina", relatedPackage.getName().get());  assertEquals("9.0.14", relatedPackage.getVersionInfo().get()); if (RelationshipType.ANCESTOR_OF.equals(relationship.getRelationshipType())) { numAcestors++; } else if (RelationshipType.DEPENDS_ON.equals(relationship.getRelationshipType())) { numDependencies++; } else { fail("Unexpected relationship type: "+relationship.getRelationshipType()); } } assertEquals(2, numAcestors); assertEquals(1, numDependencies); expectedAnnotations.add("123"); // commit expectedAnnotations.add("2018-11-13T"); // commit } assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("org.example:mylibrary".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); assertTrue(pkg.getSupplier().get().contains("Example, Inc.")); assertTrue(pkg.getSupplier().get().contains("support@example.com")); expectedAnnotations.add("800-555-1212"); expectedAnnotations.add("Example Support APAC"); expectedAnnotations.add("support@apac.example.com"); assertEquals("Person: Example Super Heros", pkg.getOriginator().get()); expectedAnnotations.add("https://example.com"); expectedAnnotations.add("https://example.net"); assertEquals("1.0.0", pkg.getVersionInfo().get()); assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else { fail("Unexpected package "+pkg.getName().get()); } } catch (Exception ex) { fail("Exception occurred while processing packages: "+ex.getMessage()); } }); assertEquals(5, foundComponentNames.size()); assertTrue(foundComponentNames.contains("Acme Application")); assertTrue(foundComponentNames.contains("com.acme:tomcat-catalina")); assertTrue(foundComponentNames.contains("org.example:mylibrary")); } finally { deleteDirOrFile(resultDirectory); } }
cycloneDxToSpdx(String cycloneDxFilePath, String spdxFilePath) throws CycloneConversionException { File outFile = new File(spdxFilePath); if (outFile.exists()) { throw new CycloneConversionException("File "+spdxFilePath+" already exists."); } try { if (!outFile.createNewFile()) { throw new CycloneConversionException("Could not create output file "+spdxFilePath); } } catch (IOException e) { throw new CycloneConversionException("I/O Error creating output file "+spdxFilePath, e); } ISerializableModelStore modelStore = null; try { modelStore = fileTypeToStore(fileToFileType(outFile)); } catch (InvalidSPDXAnalysisException e) { throw new CycloneConversionException("Unable to create SPDX model store: "+e.getMessage(), e); } catch (org.spdx.cdx2spdx.InvalidFileNameException e) { throw new CycloneConversionException("Cyclone DX Parsing Exception: "+e.getMessage(), e); } File inFile = new File(cycloneDxFilePath); if (!inFile.exists()) { throw new CycloneConversionException("File "+cycloneDxFilePath+" does not exist."); } Bom cycloneBom = null; try { Parser cycloneParser = BomParserFactory.createParser(inFile); cycloneBom = cycloneParser.parse(inFile); } catch (ParseException e) { throw new CycloneConversionException("Error creating Cyclone parser:"+e.getMessage()); } CycloneSpdxConverter converter = new CycloneSpdxConverter(cycloneBom, modelStore); converter.convert(); try (FileOutputStream output = new FileOutputStream(outFile)) { modelStore.serialize(converter.getDocumentUri(), output); return converter.getWarnings(); } catch (FileNotFoundException e) { throw new CycloneConversionException("Output file "+spdxFilePath+" not found.", e); } catch (IOException e) { throw new CycloneConversionException("I/O error writing output file:"+e.getMessage(), e); } catch (InvalidSPDXAnalysisException e) { throw new CycloneConversionException("SPDX error creating output file:"+e.getMessage(), e); } }
[*] target: assertEquals(0, verify.size())
[-] pred: org. junit. Assert. assertEquals ( 0, verify. size ( ) )
************************************
************************************
[+] input: extractFrom() { String src = "RTP/AVP;unicast;client_port=60802-60803;server_port=8216-8217;ssrc=4f92ef4b;mode="play""; RtspClientPortTransport transport = (RtspClientPortTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(60802, transport.getRtpClientPort().intValue()); assertEquals(60803, transport.getRtcpClientPort().intValue()); assertEquals(8216, transport.getRtpServerPort().intValue()); assertEquals(8217, transport.getRtcpServerPort().intValue()); assertEquals("4f92ef4b", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
toString() { if (this.protocol == null || this.protocol.equals("")) { throw new RtspCommException("protocol of RtspTransport is null or empty"); } if (this.castMode == null || this.castMode.equals("")) { throw new RtspCommException("castMode of RtspTransport is null or empty"); } List<String> res = new ArrayList<>(); res.add(this.protocol); res.add(this.castMode);  if (this.ssrc != null && !this.ssrc.equals("")) { res.add(String.format("ssrc=%s", this.ssrc)); } if (this.mode != null && !this.mode.equals("")) { res.add(String.format("mode="%s"", this.mode)); } return String.join(";", res); }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.queryMessage(anyString(), anyString(), anyInt(), anyLong(), anyLong())).thenReturn(mock(QueryResult.class)); } QueryResult result = mqAdminExtImpl.queryMessage("topic_test", "key", 32, 1627804565000L, System.currentTimeMillis()); Assert."<AssertPlaceHolder>"; }
queryMessage(String topic, String key, int maxNum, long begin, long end) throws MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().queryMessage(topic, key, maxNum, begin, end); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: should_ReturnError_When_GivenNull_BeanProperty() { // Property 'title' is null Bean bean = new Bean();  String error = explicitNullableTypeChecker.checkValueForType(bean, Bean.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Bean")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: rtspInterleavedTransportTest() { String src = "RTP/AVP/TCP;unicast;interleaved=0-1;ssrc=1fc17e75;mode="play""; RtspInterleavedTransport transport = (RtspInterleavedTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP/TCP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(0, transport.getInterleaved1().intValue()); assertEquals(1, transport.getInterleaved2().intValue()); assertEquals("1fc17e75", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
toString() { if (this.protocol == null || this.protocol.equals("")) { throw new RtspCommException("protocol of RtspTransport is null or empty"); } if (this.castMode == null || this.castMode.equals("")) { throw new RtspCommException("castMode of RtspTransport is null or empty"); } List<String> res = new ArrayList<>(); res.add(this.protocol); res.add(this.castMode);  if (this.ssrc != null && !this.ssrc.equals("")) { res.add(String.format("ssrc=%s", this.ssrc)); } if (this.mode != null && !this.mode.equals("")) { res.add(String.format("mode="%s"", this.mode)); } return String.join(";", res); }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
************************************
[+] input: Exception { // ZooKeeper does not like whitespace in the quorum connect String. String actual, expected; Configuration conf = new Configuration();  { expected = "localhost:2891";  setQuorum(conf, expected); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891 "); // with leading and trailing whitespace actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891"); // whitespace after port actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual); }  { expected = "localhost:2891,localhost:2891";  setQuorum(conf, "localhost:2891,localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost:2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891, localhost:2891 "); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); "<AssertPlaceHolder>"; } }
getZooKeeperEnsemble(Configuration conf) { String zkQuorum = conf.getString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM); if (zkQuorum == null || StringUtils.isBlank(zkQuorum)) { throw new ConfigurationException("No ZooKeeper quorum specified in config."); } // Remove all whitespace return zkQuorum.replaceAll("\\s+", ""); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { SofaRpcException exception = new SofaRpcException(RpcErrorType.SERVER_BUSY, "111"); String string = ExceptionUtils.toString(exception); Assert."<AssertPlaceHolder>"; Pattern pattern = Pattern.compile("at"); Matcher matcher = pattern.matcher(string); int count = 0; while (matcher.find()) { count++; } Assert.assertTrue(count > 1); }
toString(Throwable e) { StackTraceElement[] traces = e.getStackTrace(); StringBuilder sb = new StringBuilder(1024); sb.append(e.toString()).append("\n"); if (traces != null) { for (StackTraceElement trace : traces) { sb.append("\tat ").append(trace).append("\n"); } } return sb.toString(); }
[*] target: assertNotNull(string)
[-] pred: org. junit. Assert. assertNotNull ( string )
************************************
************************************
[+] input: clearEmptyPaths_EmptyPathSize1_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); map.put("a", new HashMap<String, Object>()); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
clearEmptyPaths(Map<String, Object> map) { if (map.size() == 0) { return true; } Set<String> keysToDelete = new HashSet<>(); for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (Map.class.isAssignableFrom(value.getClass())) { if (clearEmptyPaths((Map<String, Object>) value)) { keysToDelete.add(entry.getKey()); } } } if (keysToDelete.size() != 0) { if (map.size() == keysToDelete.size()) { map.clear(); return true; } for (String key : keysToDelete) { // TODO: seems like a bug, either fix, or just get rid of for loop and remove the first key map.remove(key); return false; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testEquals() { MultiStatus multiStatus = new MultiStatus(); multiStatus.add(m_warningStatus); multiStatus.add(m_infoStatus); MultiStatus multiStatus2 = new MultiStatus(); multiStatus2.add(m_infoStatus); multiStatus2.add(m_warningStatus); "<AssertPlaceHolder>"; assertEquals(new MultiStatus(), new MultiStatus()); assertNotEquals(multiStatus, m_warningStatus); assertNotEquals(multiStatus, new Status("aaa")); assertNotEquals(multiStatus, new MultiStatus()); }
add(IStatus status) { m_children.add(Assertions.assertNotNull(status)); }
[*] target: assertEquals(multiStatus, multiStatus2)
[-] pred: org. junit. Assert. assertEquals ( multiStatus, multiStatus2 )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineProducerConnectionInfo(anyString(), anyString())).thenReturn(new ProducerConnection()); } ProducerConnection producerConnection = mqAdminExtImpl.examineProducerConnectionInfo("group_test", "topic_test"); Assert."<AssertPlaceHolder>"; }
examineProducerConnectionInfo(String producerGroup, String topic) throws RemotingException, MQClientException, InterruptedException, MQBrokerException { return MQAdminInstance.threadLocalMQAdminExt().examineProducerConnectionInfo(producerGroup, topic); }
[*] target: assertNotNull(producerConnection)
[-] pred: org. junit. Assert. assertNotNull ( producerConnection )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  ITransactionMember m = new TestTransactionMember(exception);  m_transaction.registerMember(m);  final Holder<ITransaction> actualTransaction = new Holder<>(); CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } finally { m_transaction.unregisterMember(m); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: testFormEventResetComplete() { final Boolean[] called = {false}; final AbstractForm form = new TestForm(false); form.addFormListener(e -> { if (e.getType() == FormEvent.TYPE_RESET_COMPLETE) { called[0] = true; } }); form.start(); assertFalse(called[0]); form.doReset(); "<AssertPlaceHolder>"; }
doReset() { setFormLoading(true); // reset values Consumer<IFormField> v = field -> { if (field instanceof IResettableFormField) { IResettableFormField f = (IResettableFormField) field; f.resetValue(); } }; try { visit(v, IFormField.class); // init again reinit(); // load again loadStateInternal(); } catch (RuntimeException | PlatformError e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo("form", getClass().getName()); } fireFormResetComplete(); }
[*] target: assertTrue(called[0])
[-] pred: org. junit. Assert. assertTrue ( called[0] )
************************************
************************************
[+] input: getMappingForExistingField() { IndexMappings indexMappings = LocalClusterState.state().getFieldMappings(new String[] {INDEX_NAME}); Assert."<AssertPlaceHolder>";  FieldMappings fieldMappings = indexMappings.mapping(INDEX_NAME); Assert.assertNotNull(fieldMappings);  Assert.assertEquals("text", fieldMappings.mapping("address").get("type")); Assert.assertEquals("integer", fieldMappings.mapping("age").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("city").get("type")); Assert.assertEquals("text", fieldMappings.mapping("employer").get("type"));  Assert.assertEquals("text", fieldMappings.mapping("manager.name").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("manager.address").get("type")); }
getFieldMappings(String[] indices) { Objects.requireNonNull(client, "Client is null");  try {  Map<String, MappingMetadata> mappingMetadata = client .admin() .indices() .prepareGetMappings(indices) .setLocal(true) .setIndicesOptions(IndicesOptions.strictExpandOpen()) .execute() .actionGet(0, TimeUnit.NANOSECONDS) .mappings();  IndexMappings mappings = new IndexMappings(mappingMetadata);  LOG.debug("Found mappings: {}", mappings); return mappings; } catch (IndexNotFoundException e) { throw e; } catch (Exception e) { throw new IllegalStateException( "Failed to read mapping in cluster state for indices=" + Arrays.toString(indices), e); } }
[*] target: assertNotNull(indexMappings)
[-] pred: org. junit. Assert. assertNotNull ( indexMappings )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilRequest mb = new MbWriteSingleCoilRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(true); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putBytes(this.value ? ON : OFF) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: testCalculateReturnDate() { for (int return_day : this.return_days) { Timestamp return_flight_date = ReturnFlight.calculateReturnDate(this.flight_date, return_day); "<AssertPlaceHolder>"; assertTrue(this.flight_date.getTime() < return_flight_date.getTime()); } // FOR }
calculateReturnDate(Timestamp flight_date, int return_days) {  // Round this to the start of the day Calendar cal = Calendar.getInstance(); cal.setTimeInMillis( flight_date.getTime() + (return_days * SEATSConstants.MILLISECONDS_PER_DAY));  int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH); int day = cal.get(Calendar.DAY_OF_MONTH);  cal.clear(); cal.set(year, month, day); return (new Timestamp(cal.getTime().getTime())); }
[*] target: assertNotNull(return_flight_date)
[-] pred: org. junit. Assert. assertNotNull ( return_flight_date )
************************************
************************************
[+] input: convert() { Schema c = convertor.convert(Enumnumnum.class); Assert."<AssertPlaceHolder>"; Assert.assertEquals("string", c.getType()); Assert.assertArrayEquals(c.getEnums(), new String[]{"A", "B", "C"}); }
convert(Class clazz) {  if (clazz == null) { return null; }  // Open API里枚举类型是被看做一个有限取值的string Schema schema = manager.database.find(clazz); if (schema != null) { return schema; }  // 处理枚举值 Object[] enumConstants = clazz.getEnumConstants(); String[] enums = new String[enumConstants.length]; for (int i = 0; i < enumConstants.length; i++) { enums[i] = enumConstants[i].toString(); }  Schema s = new Schema(DataType.String()); s.setEnums(enums);  // 枚举不会有dfs，所以不需要触发转换完成的回调  return s; }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
************************************
[+] input: IOException { String fileName = "size-test.txt"; String content = "size_test"; long expect = -1; long actual = fileSystem.size(fileName); Assert.assertEquals(expect, actual); File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); expect = content.length(); actual = fileSystem.size(fileName); Assert."<AssertPlaceHolder>"; }
size(String fileName) { if (exist(fileName)) { return newFile(fileName).length(); } return -1; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: testWriteDate() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Date date = new Date(1420114230123l); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(date, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = date.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123000000, parsedDate.getNano()); //Nothing beyond milliseconds }
doWrite(Object value, Generator generator, String parentField) { if (value == null) { generator.writeNull(); } else if (value instanceof String) { generator.writeString((String) value); } else if (value instanceof Integer) { generator.writeNumber(((Integer) value).intValue()); } else if (value instanceof Long) { generator.writeNumber(((Long) value).longValue()); } else if (value instanceof Float) { generator.writeNumber(((Float) value).floatValue()); } else if (value instanceof Double) { generator.writeNumber(((Double) value).doubleValue()); } else if (value instanceof Short) { generator.writeNumber(((Short) value).shortValue()); } else if (value instanceof Byte) { generator.writeNumber(((Byte) value).byteValue()); } // Big Decimal/Integer else if (value instanceof Number) { // check double vs long Number n = ((Number) value); double d = n.doubleValue(); if (Math.floor(d) == d) { generator.writeNumber(n.longValue()); } else { generator.writeNumber(d); } } else if (value instanceof Boolean) { generator.writeBoolean(((Boolean) value).booleanValue()); } else if (value instanceof byte[]) { generator.writeBinary((byte[]) value); } else if (value.getClass().isArray()) { generator.writeBeginArray(); for (Object o : ObjectUtils.toObjectArray(value)) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Map) { generator.writeBeginObject(); for (Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) { String fieldName = entry.getKey().toString(); // filter out fields if (shouldKeep(parentField, fieldName)) { generator.writeFieldName(fieldName); Result result = doWrite(entry.getValue(), generator, fieldName); if (!result.isSuccesful()) { return result; } } } generator.writeEndObject(); } else if (value instanceof Iterable) { generator.writeBeginArray(); for (Object o : (Iterable<?>) value) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Timestamp) { Timestamp timestamp = (Timestamp) value; long epochSeconds = timestamp.getTime() / 1000; // Getting rid of millisconds because they're captured in timestamp.getNanos() Instant instant = Instant.ofEpochSecond(epochSeconds, timestamp.getNanos()); OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(instant, ZoneId.systemDefault()); generator.writeString(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(offsetDateTime)); } else if (value instanceof Date) { Calendar cal = Calendar.getInstance(); cal.setTime((Date) value); generator.writeString(DatatypeConverter.printDateTime(cal)); } else if (value instanceof Calendar) { generator.writeString(DatatypeConverter.printDateTime((Calendar) value)); } else { if (writeUnknownTypes) { return handleUnknown(value, generator); } return Result.FAILED(value); } return Result.SUCCESFUL(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { LogRecord record = new LogRecord(Level.SEVERE, ""); try { long expected = 10L; if (Thread.currentThread().getId() == expected) { ++expected; } setLongThreadID(record, expected); assertNotEquals(expected, Thread.currentThread().getId());  CompactFormatter cf = new CompactFormatter("%10$d"); String output = cf.format(record); String expect = Long.toString(expected); assertEquals(expect, output);  setLongThreadID(record, -1L); output = cf.format(record); expect = Long.toString(-1L); assertEquals(expect, output);  //Test that downcast works right. Number id = cf.formatThreadID(record); assertEquals(-1, id.intValue()); assertEquals(expect, Long.toString(id.longValue()));  setLongThreadID(record, Long.MAX_VALUE >>> 1L); output = cf.format(record); expect = Long.toString(Long.MAX_VALUE >>> 1L); "<AssertPlaceHolder>";  int tid = getIntThreadID(record); assertTrue(String.valueOf(tid), tid < 0); } catch (NoSuchMethodException JDK8245302) { try { Method m = LogRecord.class.getMethod("getLongThreadID"); fail(m.toString()); } catch (NoSuchMethodException expect) { assertNull(LogManagerProperties.getLongThreadID(record)); } } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )
************************************
************************************
[+] input: IOException { String fileName = "get-channel-test.txt"; BinlogFileReadChannel channel = fileSystem.getReadChannel(fileName); Assert.assertNull(channel); String content = "Darkness travels towards light, " + "but blindness towards death."; File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); channel = fileSystem.getReadChannel(fileName); byte[] data = new byte[1024]; ByteBuffer buffer = ByteBuffer.wrap(data); channel.read(buffer); buffer.flip(); String actual = new String(buffer.array(), 0, buffer.limit()); Assert."<AssertPlaceHolder>"; }
getReadChannel(String fileName) throws IOException { if (exist(fileName)) { FileInputStream is = new FileInputStream(getFullName(fileName)); return new BinlogFileReadChannel(is.getChannel(), is); } return null; }
[*] target: assertEquals(content, actual)
[-] pred: org. junit. Assert. assertEquals ( content, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00 -00:30 "); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(1800, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testInstance() { String s = "test"; String res = Assertions.assertInstance(s, String.class); "<AssertPlaceHolder>"; }
assertEquals(final T value1, final Object value2) { return assertEquals(value1, value2, "expected value1 to be equals with value2 [value1={}, value2={}]", value1, value2); }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForCollectionType() { String error = explicitNullableTypeChecker.checkValueForType(null, stringListType, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("List")); Assert.assertTrue(error.contains("String")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: Exception { StarRocksTable oldTable = catalog.getTable(DB_NAME, tableName).orElse(null); assertNotNull(oldTable); List<String> dropColumns = Arrays.asList("c2", "c3"); catalog.alterDropColumns(DB_NAME, tableName, dropColumns, 60); StarRocksTable newTable = catalog.getTable(DB_NAME, tableName).orElse(null); "<AssertPlaceHolder>";  List<StarRocksColumn> expectedColumns = oldTable.getColumns().stream() .filter(column -> !dropColumns.contains(column.getColumnName())) .collect(Collectors.toList()); assertEquals(expectedColumns, newTable.getColumns()); }
getTable(String databaseName, String tableName) throws StarRocksCatalogException { Preconditions.checkArgument( !StringUtils.isNullOrWhitespaceOnly(databaseName), "database name cannot be null or empty."); Preconditions.checkArgument( !StringUtils.isNullOrWhitespaceOnly(tableName), "table name cannot be null or empty.");  final String tableSchemaQuery = "SELECT `COLUMN_NAME`, `DATA_TYPE`, `ORDINAL_POSITION`, `COLUMN_SIZE`, `DECIMAL_DIGITS`, " + "`IS_NULLABLE`, `COLUMN_KEY`, `COLUMN_COMMENT` FROM `information_schema`.`COLUMNS` " + "WHERE `TABLE_SCHEMA`=? AND `TABLE_NAME`=?;";  StarRocksTable.TableType tableType = StarRocksTable.TableType.UNKNOWN; List<StarRocksColumn> columns = new ArrayList<>(); List<String> tableKeys = new ArrayList<>(); try (Connection connection = getConnection()) { try (PreparedStatement statement = connection.prepareStatement(tableSchemaQuery)) { statement.setObject(1, databaseName); statement.setObject(2, tableName); try (ResultSet resultSet = statement.executeQuery()) { while (resultSet.next()) { String name = resultSet.getString("COLUMN_NAME"); String type = resultSet.getString("DATA_TYPE"); Integer size = resultSet.getInt("COLUMN_SIZE"); if (resultSet.wasNull()) { size = null; } // mysql does not have boolean type, and starrocks `information_schema`.`COLUMNS` will return // a "tinyint" data type for both StarRocks BOOLEAN and TINYINT type, Distinguish them by // column size, and the size of BOOLEAN is null if ("tinyint".equalsIgnoreCase(type) && size == null) { type = "boolean"; } int position = resultSet.getInt("ORDINAL_POSITION"); Integer scale = resultSet.getInt("DECIMAL_DIGITS"); if (resultSet.wasNull()) { scale = null; } String isNullable = resultSet.getString("IS_NULLABLE"); String comment = resultSet.getString("COLUMN_COMMENT"); StarRocksColumn column = new StarRocksColumn.Builder() .setColumnName(name) .setOrdinalPosition(position - 1) .setDataType(type) .setColumnSize(size) .setDecimalDigits(scale) .setNullable( isNullable == null || !isNullable.equalsIgnoreCase("NO")) .setColumnComment(comment) .build(); columns.add(column);  // Only primary key table has value in this field. and the value is "PRI" String columnKey = resultSet.getString("COLUMN_KEY"); if (!StringUtils.isNullOrWhitespaceOnly(columnKey)) { if (columnKey.equalsIgnoreCase("PRI") && tableType == StarRocksTable.TableType.UNKNOWN) { tableType = StarRocksTable.TableType.PRIMARY_KEY; } tableKeys.add(column.getColumnName()); } } } } } catch (Exception e) { throw new StarRocksCatalogException( String.format("Failed to get table %s.%s", databaseName, tableName), e); }  StarRocksTable starRocksTable = null; if (!columns.isEmpty()) { starRocksTable = new StarRocksTable.Builder() .setDatabaseName(databaseName) .setTableName(tableName) .setTableType(tableType) .setColumns(columns) .setTableKeys(tableKeys) .build(); } return Optional.ofNullable(starRocksTable); }
[*] target: assertNotNull(newTable)
[-] pred: org. junit. Assert. assertNotNull ( newTable )
************************************
************************************
[+] input: InvalidMessageException { TimebasedProposalGenerator proposalGenerator = new TimebasedProposalGenerator(); Proposal proposal = proposalGenerator.nextProposal(); Value value = new Protocol.StringValue("test1"); Value svalue = new Protocol.StringValue("test2"); Promise prom = protocol.new Promise(proposal, value, svalue,new Ranking(100, 101), 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION); assertEquals(101, prom.getSuggestionRanking().minor);  final String wireFormatNew = prom.wireFormat();  int tieBreaker = wireFormatNew.lastIndexOf(TextProtocol.SEPARATOR); final String wireFormatOld = wireFormatNew.substring(0, tieBreaker);  /* Simulate new node reading old Promise format. */ Promise prom2 = (Promise)protocol.parse(wireFormatOld);  assertEquals(Ranking.UNINITIALIZED.major, prom2.getSuggestionRanking().minor);  TestProtocol.OldPromise oldProm = protocol.new OldPromise(proposal, value, svalue, 100, 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION);  /* Simulate old node reading old and new promise formats. */ protocol.replacePromise();  assertEquals(oldProm.wireFormat(), wireFormatOld); TestProtocol.OldPromise oldProm1 = (TestProtocol.OldPromise)protocol.parse(wireFormatOld); TestProtocol.OldPromise oldProm2 = (TestProtocol.OldPromise)protocol.parse(wireFormatNew);  /* verify they check out equal. */ "<AssertPlaceHolder>"; }
parse(String wireFormat); }  /** * A String based value implementation used as the "default" Value */ public static class StringValue extends StringFormatable implements Value {  StringValue() { super(null); }  public StringValue(String s) { super(s); }  @Override public String toString() { return "Value:" + s; }  public String getString() { return s; } }
[*] target: assertEquals(oldProm1, oldProm2)
[-] pred: org. junit. Assert. assertEquals ( oldProm1, oldProm2 )
************************************
************************************
[+] input: testGetMdl() { /** * ddl */ final ExecutorService ddlPool = Executors.newFixedThreadPool(1); ddlPool.submit(() -> { while (true) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  final Long trxId = 9527L; // get lock final MdlTicket ticket = context.acquireLock(writeRequest(trxId, tableName));  // update schema version tableSchemaMap.put(tableName, tableSchemaMap.get(tableName) + 1);  try { TimeUnit.MILLISECONDS.sleep(2); } catch (InterruptedException e) { e.printStackTrace(); }  // release lock context.releaseLock(trxId, ticket);  // close connection mdlManager.removeContext(context);  if (Thread.interrupted()) { break; } } });  /** * dml */ final ExecutorService dmlPool = Executors.newFixedThreadPool(10);  final List<Future> dmlFutures = new ArrayList<>(); IntStream.range(0, 10).forEach(index -> {  final Future<?> future = dmlPool.submit(() -> { final Random r = new Random(LocalDateTime.now().getNano());  int connCount = 0; while (connCount++ < CONN_COUNT) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  int trxCount = 0; while (trxCount++ < TRX_COUNT) { final int stmtCountInTrx = Math.abs(r.nextInt()) % 10 + 1;  final Long trxId = 9527L + trxIdGenerator.getAndIncrement();  // begin transaction MdlTicket ticket = null; for (int i = 0; i < stmtCountInTrx; i++) { final MdlTicket newTicket = context.acquireLock(readRequest(trxId, tableName));  // grant ticket once for a table in a transaction if (null != ticket) { Assert."<AssertPlaceHolder>"; }  ticket = newTicket;  // get schema version final Long schemaVersion1 = tableSchemaMap.get(tableName);  // execute query try { TimeUnit.MILLISECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); }  // check schema version final Long schemaVersion2 = tableSchemaMap.get(tableName);  final long versionChange = schemaVersion2 - schemaVersion1; Assert.assertTrue(versionChange >= 0 && versionChange <= 1); }  // commit context.releaseLock(trxId, ticket);  Assert.assertFalse(ticket.isValidate()); }  // close connection final MdlContext mdlContext = mdlManager.removeContext(context); } });  dmlFutures.add(future); });  dmlFutures.forEach(future -> { try { future.get(); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } });  ddlPool.shutdown();  System.out.println(JSON.toJSONString(tableSchemaMap)); }
acquireLock(@NotNull final MdlRequest request, @NotNull final MdlContext context) { final boolean readLock = MdlManager.isReadLock(request.getType());  if (readLock) { return readLock(request, context); } else { return writeLock(request, context); } }
[*] target: assertEquals(ticket, newTicket)
[-] pred: org. junit. Assert. assertEquals ( ticket, newTicket )
************************************
************************************
[+] input: testEquals() { ServerConfig config1 = new ServerConfig(); Assert.assertTrue(config1.equals(config1)); Assert.assertFalse(config1.equals(null)); Assert.assertFalse(config1.equals(""));  ServerConfig config2 = new ServerConfig(); Assert.assertTrue(config1.equals(config2));  config1.setHost("127.0.0.1"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.2"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.1"); Assert.assertTrue(config1.equals(config2));  config1.setPort(1234); Assert.assertFalse(config1.equals(config2)); config2.setPort(1235); Assert.assertFalse(config1.equals(config2)); config2.setPort(1234); Assert.assertTrue(config1.equals(config2));  config1.setProtocol("xxx"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("yyy"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("xxx"); Assert."<AssertPlaceHolder>"; }
equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } ServerConfig other = (ServerConfig) obj; if (host == null) { if (other.host != null) { return false; } } else if (!host.equals(other.host)) { return false; } if (port != other.port) { return false; } if (protocol == null) { if (other.protocol != null) { return false; } } else if (!protocol.equals(other.protocol)) { return false; } return true; }
[*] target: assertTrue(config1.equals(config2))
[-] pred: org. junit. Assert. assertTrue ( config1. equals ( config2 ) )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForLcalTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalTime")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30:20-04:30:40"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 20), LocalTime.of(4, 30, 40) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6 + 20, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineConsumerConnectionInfo(anyString())).thenReturn(new ConsumerConnection()); } ConsumerConnection consumerConnection = mqAdminExtImpl.examineConsumerConnectionInfo("group_test"); Assert."<AssertPlaceHolder>"; }
examineConsumerConnectionInfo(String consumerGroup) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException, RemotingException, MQClientException { return MQAdminInstance.threadLocalMQAdminExt().examineConsumerConnectionInfo(consumerGroup); }
[*] target: assertNotNull(consumerConnection)
[-] pred: org. junit. Assert. assertNotNull ( consumerConnection )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForStringType() { String error = explicitNullableTypeChecker.checkValueForType(null, String.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("String")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: testUpdateActionsFromPaths_customResourcesPath() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CUSTOM_RESOURCES, UpdateAction.RESOURCES); List<Path> changedPaths = List.of( Path.of("resources/saas-boost.yaml"), Path.of("resources/custom-resources/app-services-macro/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost.yaml")); } if (action == UpdateAction.CUSTOM_RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("app-services-macro")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: generateCodeTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
generateCodeTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); String params = "&access_token=" + accessToken.getAccessToken(); return this.generateAuthorizationCodeResponse(userInfo, param, clientDetail) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: Exception { AtomicInteger num = new AtomicInteger(0); CollectExecutorConfig config = new CollectExecutorConfig(); config.setCoreSize(10); config.setMaxSize(10); config.setQueueSize(500); config.setKeepAliveTime(3000); ExecutorService collectExecutor = config.collectExecutor(config); Assert."<AssertPlaceHolder>"; CountDownLatch countDownLatch = new CountDownLatch(COUNT); for (int i = 0; i < COUNT; i++) { collectExecutor.submit(() -> { num.getAndIncrement(); countDownLatch.countDown(); }); } countDownLatch.await(); System.out.println(collectExecutor.isTerminated()); Assert.assertEquals(COUNT, num.get()); }
collectExecutor(CollectExecutorConfig collectExecutorConfig) { ExecutorService collectExecutor = new ThreadPoolExecutor( collectExecutorConfig.getCoreSize(), collectExecutorConfig.getMaxSize(), collectExecutorConfig.getKeepAliveTime(), TimeUnit.MILLISECONDS, new LinkedBlockingDeque<>(collectExecutorConfig.getQueueSize()), new ThreadFactory() { private final AtomicLong threadIndex = new AtomicLong(0);  @Override public Thread newThread(Runnable r) { return new Thread(r, "collectTopicThread_" + this.threadIndex.incrementAndGet()); } }, new ThreadPoolExecutor.DiscardOldestPolicy() ); return collectExecutor; }
[*] target: assertNotNull(collectExecutor)
[-] pred: org. junit. Assert. assertNotNull ( collectExecutor )
************************************
************************************
[+] input: IOException { appendEntryToFile(new NoOpEntry(1, 1)); FileEntrySequence sequence = new FileEntrySequence(entriesFile, entryIndexFile, 1); EntryMeta meta = sequence.getEntryMeta(1); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Entry.KIND_NO_OP, meta.getKind()); Assert.assertEquals(1, meta.getIndex()); Assert.assertEquals(1, meta.getTerm()); }
getEntryMeta(int index) { if (!isEntryPresent(index)) { return null; } if (entryIndexFile.isEmpty()) { return pendingEntries.get(index - doGetFirstLogIndex()).getMeta(); } return entryIndexFile.get(index).toEntryMeta(); }
[*] target: assertNotNull(meta)
[-] pred: org. junit. Assert. assertNotNull ( meta )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put(DataSourceFactory.JDBC_INITIAL_POOL_SIZE, "5"); properties.put(DataSourceFactory.JDBC_MAX_POOL_SIZE, "10"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PoolingDataSource); PoolingDataSource poolingDataSource = (PoolingDataSource) dataSource; Assert.assertEquals("db", poolingDataSource.getDatabaseName()); Assert.assertEquals(5, poolingDataSource.getInitialConnections()); Assert.assertEquals(10, poolingDataSource.getMaxConnections()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: generateIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
generateIdTokenTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); String params = "?access_token=" + accessToken.getAccessToken() + "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: shouldReturnNullIfPythonFilesConfigIsNotGiven() { String pythonJsonConfig = "{"PYTHON_FN_EXECUTION_ARROW_BATCH_SIZE": "10000", "PYTHON_FN_EXECUTION_BUNDLE_SIZE": "100000", "PYTHON_FN_EXECUTION_BUNDLE_TIME": "1000"}";  when(configuration.getString(Constants.PYTHON_UDF_CONFIG, "")).thenReturn(pythonJsonConfig); PythonUdfConfig pythonUdfConfig = PythonUdfConfig.parse(configuration);  Assert.assertNull(pythonUdfConfig.getPythonFiles()); Assert."<AssertPlaceHolder>"; Assert.assertNull(pythonUdfConfig.getPythonRequirements()); }
getPythonArchives() { if (pythonArchives != null) { return pythonArchives.replaceAll("\\s+", ""); } return null; }
[*] target: assertNull(pythonUdfConfig.getPythonArchives())
[-] pred: org. junit. Assert. assertNull ( pythonUdfConfig. getPythonArchives ( ) )
************************************
************************************
[+] input: testResourceName() { String serviceName = "foo"; String expected = "foo"; String actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo"; expected = "Foo"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo_Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo-Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); "<AssertPlaceHolder>"; }
ecrResourceName(String serviceName) { if (Utils.isBlank(serviceName)) { throw new IllegalArgumentException("service name cannot be blank"); } return cloudFormationResourceName(serviceName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: rtspSetParameterRequestTest() {  String expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspSetParameterRequest request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 20\r\n" + "\r\n" + "barparam: barstuff\r\n";  uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("barparam", "barstuff"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
