[+] input: getQuantidadeLetrasMinusculas_test01() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("Felix"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(4, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 4, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: isShutdownHook() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); Assertions."<AssertPlaceHolder>"; }
isShutdownHook() { return shutdownHook; }
[*] target: assertTrue(prefetchWorker.isShutdownHook())
[-] pred: org. junit. Assert. assertTrue ( prefetchWorker. isShutdownHook() )
************************************
************************************
[+] input: test_objectFileName_with_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}.pdf";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".pdf")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: shouldBuildElementAvailableInFutureVersion() { Message message = MessageFactory.elementAvailableInFutureVersion("inclusiveGateway", "8.0.0", "8.1.0"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Element 'inclusiveGateway' is not supported in Zeebe version '8.0.0'. It is available in version '8.1.0'."); }
elementAvailableInFutureVersion( String elementLocalName, String semanticVersion, String futureVersion) { return INSTANCE.composeMessage( "element-available-in-future-version", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .entry("futureVersion", futureVersion) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: Exception { String masterAddresses = harness.getMasterAddressesAsString();  KuduTableInfo tableInfo = KuduTableInfo .forTable("test_speed") .createTableIfNotExists( () -> Lists.newArrayList( new ColumnSchema .ColumnSchemaBuilder("id", Type.INT32) .key(true) .build(), new ColumnSchema .ColumnSchemaBuilder("uuid", Type.STRING) .build() ), () -> new CreateTableOptions() .setNumReplicas(3) .addHashPartitions(Lists.newArrayList("id"), 6));  KuduWriterConfig writerConfig = KuduWriterConfig.Builder .setMasters(masterAddresses) .setEventualConsistency() .build(); KuduSink<Row> sink = new KuduSink<>(writerConfig, tableInfo, new RowOperationMapper(columns, AbstractSingleOperationMapper.KuduOperation.INSERT));  sink.setRuntimeContext(context); sink.open(new Configuration());  int totalRecords = 100000; for (int i = 0; i < totalRecords; i++) { Row kuduRow = new Row(2); kuduRow.setField(0, i); kuduRow.setField(1, UUID.randomUUID().toString()); sink.invoke(kuduRow); }  // sleep to allow eventual consistency to finish Thread.sleep(1000);  sink.close();  List<Row> rows = readRows(tableInfo); Assertions."<AssertPlaceHolder>"; }
close() throws Exception { if (kuduWriter != null) { kuduWriter.close(); } }
[*] target: assertEquals(totalRecords, rows.size())
[-] pred: org. junit. Assert. assertEquals ( totalRecords, rows. size ( ) )
************************************
************************************
[+] input: getDashboardData_whenIdIsValidAndUserIsAuthorized_getDashboardData() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  when(limitServiceMock.getLimitsByOrgId(anyString())).thenReturn(tesLimitPricingPlanViewModel);  when(labelTaskRepositoryMock.countProjectTasksWhereMediasNotDeleted(anyString())).thenReturn(0); when(labelTaskRepositoryMock.countProjectTasksByStateWhereMediasNotDeleted(anyString(), any())).thenReturn(0L); when(labelTaskRepositoryMock.countProjectTasksByMediaTypeWhereMediasNotDeleted(anyString(), any())).thenReturn(0L);  ProjectDashboardViewModel dashboardData = projectService.getDashboardData(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), dashboardData.getId()); assertEquals(testProject.getName(), dashboardData.getName()); assertEquals(testProject.getDescription(), dashboardData.getDescription()); assertEquals(testProject.getShortDescription(), dashboardData.getShortDescription()); assertEquals(testProject.isPinned(), dashboardData.isPinned()); assertEquals(testProject.getOwner(), dashboardData.getOwner()); assertEquals("FREE_DEVELOPER", dashboardData.getCurrentPlan()); assertEquals(0, dashboardData.getCountTasks()); assertEquals(0, dashboardData.getCountDatasets()); assertEquals(0, dashboardData.getApprovedReviewPerformance()); assertEquals(0, dashboardData.getDeclinedReviewPerformance()); assertEquals(LabelTaskState.values().length, dashboardData.getTaskStatus().size()); assertEquals(MediaSourceType.values().length, dashboardData.getTaskMediaDetail().size());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
getDashboardData(String projectId) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  Project projectById = getProjectById(projectId);  //Permissions check String owner = projectById.getOwner(); DataGymSecurity.isAdmin(owner, true);  // Create new ProjectDashboardViewModel and add all Properties form the current Project ProjectDashboardViewModel projectDashboardViewModel = ProjectMapper .mapToProjectDashboardViewModel(projectById, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  // Get the remaining Properties for the ProjectDashboardViewModel  // Don't count tasks with deleted images. int countTasks = labelTaskRepository.countProjectTasksWhereMediasNotDeleted(projectId);  int countDatasets = projectById.getDatasets().size(); boolean hasLabelConfiguration = !projectById.getLabelConfiguration().getEntries().isEmpty();  // Get the LabelRatings for the Project List<LabelerRating> labelerRatings = labelerRatingRepository.findLabelerRatingsByProjectIdAndMediaDeleted( projectId, false); long approvedReviewPerformance = labelerRatings.stream().mapToLong(LabelerRating::getPositive).sum(); long declinedReviewPerformance = labelerRatings.stream().mapToLong(LabelerRating::getNegative).sum();  Map<LabelTaskState, Long> taskStatusMap = new EnumMap<>(LabelTaskState.class); Arrays.stream(LabelTaskState.values()) .forEach(state -> taskStatusMap.put(state, labelTaskRepository.countProjectTasksByStateWhereMediasNotDeleted( projectId, state)));  Map<MediaSourceType, Long> taskMediaDetailMap = new EnumMap<>(MediaSourceType.class); Arrays.stream(MediaSourceType.values()) .forEach(mediaSourceType -> taskMediaDetailMap.put(mediaSourceType, labelTaskRepository.countProjectTasksByMediaTypeWhereMediasNotDeleted( projectId, mediaSourceType)));  List<DatasetMediaStatusViewModel> datasetMediaStatusViewModels = getDatasetImageStatusViewModels(projectById); long projectTotalInvalidImages = datasetMediaStatusViewModels .stream() .mapToLong(DatasetMediaStatusViewModel::getInvalidMediaCount) .sum();  // Get Pricing Plan Type for the current Organisation LimitPricingPlanViewModel limitsByOrgId = limitService.getLimitsByOrgId(owner); String pricingPlanType = limitsByOrgId.getPricingPlanType();  // Set all properties projectDashboardViewModel.setCountTasks(countTasks); projectDashboardViewModel.setCountDatasets(countDatasets); projectDashboardViewModel.setHasLabelConfiguration(hasLabelConfiguration); projectDashboardViewModel.setApprovedReviewPerformance(approvedReviewPerformance); projectDashboardViewModel.setDeclinedReviewPerformance(declinedReviewPerformance); projectDashboardViewModel.setTaskStatus(taskStatusMap); projectDashboardViewModel.setTaskMediaDetail(taskMediaDetailMap); projectDashboardViewModel.setCurrentPlan(pricingPlanType); projectDashboardViewModel.setDatasetMediaStatuses(datasetMediaStatusViewModels); projectDashboardViewModel.setCountInvalidImages(projectTotalInvalidImages);  return projectDashboardViewModel; }
[*] target: assertNotNull(dashboardData)
[-] pred: org. junit. Assert. assertNotNull ( dashboardData )
************************************
************************************
[+] input: generateAccessTokenFromNonUUID() { String accessToken = accessTokenService.generateAccessToken("testetstetstetstestste"); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
validateAccessToken(String token, PayloadDTO payloadDTO) { String[] parts = token.split("\\."); if (parts.length != 3 || payloadDTO == null) return false;  String payload = parts[1]; String signature = parts[2]; return generateSignature(payload).equals(signature); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: IOException {  // mocking and stubbing data for test execution SchemaEntity schema = computeSchema(TEST_SCHEMA_JSON_USER); JoyceURI rawURI = JoyceURI.createURI(MESSAGE_KEY).orElseThrow(); when(schemaUtils.metadataFromSchemaOrElseThrow(any())).thenReturn(schema.getMetadata()); when(jsonLogicService.filter(any(), any())).thenReturn(true); when(schemaEngine.process(any(SchemaEntity.class), any(), any())) .thenReturn(objectMapper.valueToTree(Map.of("code", "1337")));  // Subject under test SingleImportResult expected = new SingleImportResult(rawURI, ProcessStatus.IMPORTED, null); SingleImportResult actual = importService.processImport(rawURI, computeDocument(TEST_USER_JSON), schema);  // Asserts "<AssertPlaceHolder>"; }
processImport( @RawUri JoyceURI rawUri, @EventPayload JsonNode document, SchemaEntity schema) {  JoyceSchemaMetadata metadata = schemaUtils.metadataFromSchemaOrElseThrow(schema); if (jsonLogicService.filter(document, metadata)) {  Span span = GlobalTracer.get().buildSpan("process").start(); span.setTag("uri", this.computeTracerUri(rawUri));  JsonNode result = schemaEngine.process(schema, document, null);  computeParentMetadata(metadata, result, true) .ifPresent(parentMetadata -> { metadata.setUidKey(parentMetadata.getUidKey()); metadata.setCollection(parentMetadata.getCollection()); metadata.setNamespace(parentMetadata.getNamespace()); });  JoyceURI contentURI = computeContentURI(result, metadata); span.finish();  contentProducer.publish(schema, rawUri, contentURI, result, metadata); return SingleImportResult.builder().uri(rawUri).processStatus(ProcessStatus.IMPORTED).build();  } else { log.info("Document with uri {} wasn't processed cause it didn't pass metadata filter.", rawUri); return SingleImportResult.builder().uri(rawUri).processStatus(ProcessStatus.SKIPPED).build(); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: isEmpty() { when(searchResponse.getHits()) .thenReturn( new SearchHits( new SearchHit[] {searchHit1, searchHit2}, new TotalHits(2L, TotalHits.Relation.EQUAL_TO), 1.0F));  var response = new OpenSearchResponse(searchResponse, factory, includes); assertFalse(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(null);  response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()) .thenReturn(new SearchHits(null, new TotalHits(0, TotalHits.Relation.EQUAL_TO), 0)); response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(new Aggregations(emptyList()));  response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
isEmpty() { return (hits.getHits() == null) || (hits.getHits().length == 0) && aggregations == null; }
[*] target: assertFalse(response.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( response. isEmpty() )
************************************
************************************
[+] input: testIsEqualTo() { SimpleNumericVersion version = new SimpleNumericVersion(10); SimpleNumericVersion version2 = new SimpleNumericVersion(10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
hashCode() { return getVersionNumber(); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode ( ), version2. hashCode ( ) )
************************************
************************************
[+] input: run() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  // trigger data final TriggerParam triggerParam = new TriggerParam(); triggerParam.setJobId(1); triggerParam.setExecutorHandler("demoJobHandler"); triggerParam.setExecutorParams(null); triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name()); triggerParam.setGlueType(GlueTypeEnum.BEAN.name()); triggerParam.setGlueSource(null); triggerParam.setGlueUpdatetime(System.currentTimeMillis()); triggerParam.setLogId(1); triggerParam.setLogDateTime(System.currentTimeMillis());  // Act final ReturnT<String> retval = executorBiz.run(triggerParam);  // Assert result Assertions."<AssertPlaceHolder>"; }
run(TriggerParam triggerParam);
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: getAllProjectsFromOrganisationAndLoggedInUserIsAdmin_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner(anyString())).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService .getAllProjectsFromOrganisationAndLoggedInUserIsAdmin();  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner(anyString()); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner(anyString()); }
getAllProjectsFromOrganisationAndLoggedInUserIsAdmin() { //Permissions check DataGymSecurity.isAuthenticated();  OauthUser user = SecurityContext.get(); Map<String, String> orgs = user.orgs();  List<ProjectViewModel> result = new ArrayList<>();  for (Map.Entry<String, String> orgsEntry : orgs.entrySet()) { String currentUserOrg = orgsEntry.getKey();  boolean isAdminInCurrentOrg = DataGymSecurity.checkIfUserIsAdmin(currentUserOrg, false);  if (isAdminInCurrentOrg) { List<ProjectViewModel> currentOrgProjectViewModels = projectRepository .findAllByDeletedIsFalseAndOwner(currentUserOrg).stream() .map(currentProject -> { ProjectViewModel projectViewModel = ProjectMapper.mapToProjectViewModel(currentProject, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  boolean projectExportable = isProjectExportable(currentProject.getId()); projectViewModel.setExportable(projectExportable); return projectViewModel; }) .collect(Collectors.toList());  result.addAll(currentOrgProjectViewModels); } }  return result; }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
************************************
[+] input: searchStepsByName() { Collection<Step> step = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, step.size()); for (Step s : step) { Assertions.assertEquals(CONNECTOR_2, s.getName()); } }
searchByName(final String connectionName) { if (connectionName == null) { return Collections.emptyList(); } Collection<T> steps = new ArrayList<>(); for (MetadataCatalog<T> c : catalogs) { steps.addAll(c.searchByName(connectionName)); } return steps; }
[*] target: assertNotNull(step)
[-] pred: org. junit. Assert. assertNotNull ( step )
************************************
************************************
[+] input: testCreateDictData_success() { // 准备参数 DictDataSaveReqVO reqVO = randomPojo(DictDataSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值 // mock 方法 when(dictTypeService.getDictType(eq(reqVO.getDictType()))).thenReturn(randomDictTypeDO(reqVO.getDictType()));  // 调用 Long dictDataId = dictDataService.createDictData(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictDataDO dictData = dictDataMapper.selectById(dictDataId); assertPojoEquals(reqVO, dictData, "id"); }
createDictData(DictDataSaveReqVO createReqVO) { // 校验字典类型有效 validateDictTypeExists(createReqVO.getDictType()); // 校验字典数据的值的唯一性 validateDictDataValueUnique(null, createReqVO.getDictType(), createReqVO.getValue());  // 插入字典类型 DictDataDO dictData = BeanUtils.toBean(createReqVO, DictDataDO.class); dictDataMapper.insert(dictData); return dictData.getId(); }
[*] target: assertNotNull(dictDataId)
[-] pred: org. junit. Assert. assertNotNull ( dictDataId )
************************************
************************************
[+] input: testCreateOAuth2Client_success() { // 准备参数 OAuth2ClientSaveReqVO reqVO = randomPojo(OAuth2ClientSaveReqVO.class, o -> o.setLogo(randomString())) .setId(null); // 防止 id 被赋值  // 调用 Long oauth2ClientId = oauth2ClientService.createOAuth2Client(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 OAuth2ClientDO oAuth2Client = oauth2ClientMapper.selectById(oauth2ClientId); assertPojoEquals(reqVO, oAuth2Client, "id"); }
createOAuth2Client(OAuth2ClientSaveReqVO createReqVO) { validateClientIdExists(null, createReqVO.getClientId()); // 插入 OAuth2ClientDO client = BeanUtils.toBean(createReqVO, OAuth2ClientDO.class); oauth2ClientMapper.insert(client); return client.getId(); }
[*] target: assertNotNull(oauth2ClientId)
[-] pred: org. junit. Assert. assertNotNull ( oauth2ClientId )
************************************
************************************
[+] input: testFunctionNames9() { List<String> names = NextflowScript.getFunctionNames("def      { some content }"); "<AssertPlaceHolder>"; }
getFunctionNames(String content) {  List<String> names = new Vector<String>();  String patternFunctionName = "(?i)^\\s*def\\s*(.+)(\\s*\\(|\\()";  Pattern r = Pattern.compile(patternFunctionName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { names.add(m.group(1).trim()); }  return names; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  try (PositionOutputStream outputStream = localOutputFile.create(8192L)) { outputStream.write(inputBytes); }  final String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
create(long blockSizeHint) throws IOException { try { return LocalFilePositionOutputStream.create(file); } catch (FileNotFoundException e) { throw new IOException("Failed to create file: " + file.toString(), e); } }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
************************************
[+] input: testIsProviderCodeUniqueSameExists() { Provider provider = new Provider(1, "name-a", LocalDate.now(), "nationality-a", "code-a"); Mockito.when(dao.findProviderByCode(Mockito.any())).thenReturn(provider);  boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
isProviderCodeUnique(Integer id, String code) { Provider provider = findProviderByCode(code); return ( provider == null || ((id != null) && (provider.getId() == id))); }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
************************************
[+] input: setConnectString() { String connectString = "localhost:2182"; CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setConnectString(connectString); Assertions."<AssertPlaceHolder>"; }
getConnectString() { return connectString; }
[*] target: assertEquals(connectString, properties.getConnectString())
[-] pred: org. junit. Assert. assertEquals ( connectString, properties. getConnectString() )
************************************
************************************
[+] input: testCreateRewardActivity_success() { // 准备参数 RewardActivityCreateReqVO reqVO = randomPojo(RewardActivityCreateReqVO.class, o -> { o.setConditionType(randomEle(PromotionConditionTypeEnum.values()).getType()); o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()); // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); });  // 调用 Long rewardActivityId = rewardActivityService.createRewardActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 RewardActivityDO rewardActivity = rewardActivityMapper.selectById(rewardActivityId); assertPojoEquals(reqVO, rewardActivity, "rules"); assertEquals(rewardActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); for (int i = 0; i < reqVO.getRules().size(); i++) { assertPojoEquals(reqVO.getRules().get(i), rewardActivity.getRules().get(i)); } }
createRewardActivity(RewardActivityCreateReqVO createReqVO) { // 校验商品是否冲突 validateRewardActivitySpuConflicts(null, createReqVO.getProductSpuIds());  // 插入 RewardActivityDO rewardActivity = RewardActivityConvert.INSTANCE.convert(createReqVO) .setStatus(PromotionUtils.calculateActivityStatus(createReqVO.getEndTime())); rewardActivityMapper.insert(rewardActivity); // 返回 return rewardActivity.getId(); }
[*] target: assertNotNull(rewardActivityId)
[-] pred: org. junit. Assert. assertNotNull ( rewardActivityId )
************************************
************************************
[+] input: getQuantidadeCaracteresEspeciais_test05() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("!@#)("); "<AssertPlaceHolder>"; }
getQuantidadeCaracteresEspeciais(String str) { return 0; }
[*] target: assertEquals(5, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeCaracteresEspeciais )
************************************
************************************
[+] input: can_serialize_and_deserialize_references() { Expression original = ref("name", STRING); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
serialize(Expression expr) { try { ByteArrayOutputStream output = new ByteArrayOutputStream(); ObjectOutputStream objectOutput = new ObjectOutputStream(output); objectOutput.writeObject(expr); objectOutput.flush(); return Base64.getEncoder().encodeToString(output.toByteArray()); } catch (IOException e) { throw new IllegalStateException("Failed to serialize expression: " + expr, e); } }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: testSaveEntity() { User user = randomUser(); User created = repository.save(user); Assertions."<AssertPlaceHolder>"; }
save(T entity);
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
************************************
[+] input: SQLException { String resourceName = "test01.csv";  ClassLoader classLoader = getClass().getClassLoader(); String path = classLoader.getResource(resourceName).getPath();  String parent = Paths.get(path).getParent().toAbsolutePath().toString();  Driver driver = new CsvDriver();  try( Connection con = driver.connect("jdbc:csv:"+parent, null); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM test01.csv;") ) { "<AssertPlaceHolder>"; assertEquals("A", rs.getString(1)); assertEquals("B", rs.getString(2));  assertTrue(rs.next()); assertEquals("C", rs.getString(1)); assertEquals("D", rs.getString(2));  assertFalse(rs.next()); }; }
connect(String s, Properties properties) throws SQLException { String[] parts = s.split(":");  if (parts.length < 2 ||	!parts[0].toLowerCase().equals("jdbc") || !parts[1].toLowerCase().equals("csv")) return null;  String directory = Arrays.stream(parts).skip(2).collect(Collectors.joining(":"));  Path path = Paths.get(directory).toAbsolutePath();  if (!Files.isDirectory(path)) throw new SQLException("'" + path + "' is not a directory");  return new CsvConnection(path); }
[*] target: assertTrue(rs.next())
[-] pred: org. junit. Assert. assertTrue ( rs. next ( ) )
************************************
************************************
[+] input: testShouldNotFilterShouldReturnTrueWhenRequestBaseUriIsPing() { //given when(request.getRequestURI()).thenReturn("/ping");  //when final boolean actual = underTest.shouldNotFilter(request);  //then Assertions."<AssertPlaceHolder>"; verify(request, atLeastOnce()).getRequestURI(); }
shouldNotFilter(@NonNull final HttpServletRequest request) { return skipUrisIfMatch.stream() .anyMatch(pattern -> antPathMatcher.matchStart(pattern, request.getRequestURI())); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: shouldBuildInternalScript() { Message message = MessageFactory.internalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Script is transformed to Zeebe script."); }
internalScript() { return INSTANCE.staticMessage("internal-script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test04() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas(""); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: convertToEntityAttributeNull() { AnimalPorteConverter converter = new AnimalPorteConverter(); AnimalPorte convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String descricao) { if(descricao == null) { return null; }  return AnimalPorte.of(descricao); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: prefers_expression_with_longest_non_empty_match() { ParameterType<String> zeroOrMore = new ParameterType<>( "zero-or-more", "[a-z]*", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(zeroOrMore); ParameterType<String> exactlyOne = new ParameterType<>( "exactly-one", "[a-z]", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(exactlyOne);  List<GeneratedExpression> generatedExpressions = generator.generateExpressions("a simple step"); "<AssertPlaceHolder>"; assertEquals("{exactly-one} {zero-or-more} {zero-or-more}", generatedExpressions.get(0).getSource()); assertEquals("{zero-or-more} {zero-or-more} {zero-or-more}", generatedExpressions.get(1).getSource()); }
generateExpressions(String text) { List<List<ParameterType<?>>> parameterTypeCombinations = new ArrayList<>(); List<ParameterTypeMatcher> parameterTypeMatchers = createParameterTypeMatchers(text); StringBuilder expressionTemplate = new StringBuilder(); int pos = 0; while (true) { List<ParameterTypeMatcher> matchingParameterTypeMatchers = new ArrayList<>();  for (ParameterTypeMatcher parameterTypeMatcher : parameterTypeMatchers) { if (parameterTypeMatcher.advanceToAndFind(pos)) { matchingParameterTypeMatchers.add(parameterTypeMatcher); } }  if (!matchingParameterTypeMatchers.isEmpty()) { Collections.sort(matchingParameterTypeMatchers);  // Find all the best parameter type matchers, they are all candidates. ParameterTypeMatcher bestParameterTypeMatcher = matchingParameterTypeMatchers.get(0); List<ParameterTypeMatcher> bestParameterTypeMatchers = new ArrayList<>(); for (ParameterTypeMatcher m : matchingParameterTypeMatchers) { if (m.compareTo(bestParameterTypeMatcher) == 0) { bestParameterTypeMatchers.add(m); } }  // Build a list of parameter types without duplicates. The reason there // might be duplicates is that some parameter types have more than one regexp, // which means multiple ParameterTypeMatcher objects will have a reference to the // same ParameterType. // We're sorting the list so preferential parameter types are listed first. // Users are most likely to want these, so they should be listed at the top. Set<ParameterType<?>> set = new HashSet<>(); for (ParameterTypeMatcher parameterTypeMatcher : bestParameterTypeMatchers) { ParameterType<?> parameterType = parameterTypeMatcher.getParameterType(); set.add(parameterType); } SortedSet<ParameterType<?>> parameterTypes = new TreeSet<>(set);  parameterTypeCombinations.add(new ArrayList<>(parameterTypes));  expressionTemplate .append(escape(text.substring(pos, bestParameterTypeMatcher.start()))) .append("{%s}"); pos = bestParameterTypeMatcher.start() + bestParameterTypeMatcher.group().length(); } else { break; }  if (pos >= text.length()) { break; } } expressionTemplate.append(escape(text.substring(pos))); return new CombinatorialGeneratedExpressionFactory(expressionTemplate.toString(), parameterTypeCombinations).generateExpressions(); }
[*] target: assertEquals(2, generatedExpressions.size())
[-] pred: org. junit. Assert. assertEquals ( 2, generatedExpressions. size ( ) )
************************************
************************************
[+] input: filterUncompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; }
size() { return tasks.size(); }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
************************************
[+] input: Exception { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken); // Act final ReturnT<String> retval = executorBiz.beat();  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
beat();
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUnique_setDeletedToFalseAndAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); String testDatasetName = testDataset.getName(); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg()); when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(testDatasetName.length() + 37, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldValidateWithNoConfig() { TopicValidator topicValidator = TopicValidator.builder() .validationConstraints( Map.of("replication.factor", ResourceValidator.Range.between(3, 3), "partitions", ResourceValidator.Range.between(3, 6), "cleanup.policy", ResourceValidator.ValidList.in("delete", "compact"), "min.insync.replicas", ResourceValidator.Range.between(2, 2), "retention.ms", ResourceValidator.Range.between(60000, 604800000))) .build();  Topic topic = Topic.builder() .metadata(Metadata.builder() .name("validName") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .build()) .build();  List<String> actual = topicValidator.validate(topic); "<AssertPlaceHolder>"; assertTrue(actual.contains("Invalid empty value for field "min.insync.replicas": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "retention.ms": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "cleanup.policy": value must not be null.")); }
validate(Topic topic) { List<String> validationErrors = new ArrayList<>();  if (!StringUtils.hasText(topic.getMetadata().getName())) { validationErrors.add(invalidNameEmpty()); }  if (topic.getMetadata().getName().equals(".") || topic.getMetadata().getName().equals("..")) { validationErrors.add(invalidTopicName(topic.getMetadata().getName())); }  if (topic.getMetadata().getName().length() > 249) { validationErrors.add(invalidNameLength(topic.getMetadata().getName())); }  if (!topic.getMetadata().getName().matches("[a-zA-Z0-9._-]+")) { validationErrors.add(invalidNameSpecChars(topic.getMetadata().getName())); }  if (!validationConstraints.isEmpty() && topic.getSpec().getConfigs() != null) { Map<String, String> configsWithoutConstraints = topic.getSpec().getConfigs().entrySet() .stream() .filter(entry -> !validationConstraints.containsKey(entry.getKey())) .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));  if (!configsWithoutConstraints.isEmpty()) { configsWithoutConstraints .forEach((key, value) -> validationErrors.add(invalidTopicSpec(key, value))); } }  validationConstraints.forEach((key, value) -> { try { if (key.equals(PARTITIONS)) { value.ensureValid(key, topic.getSpec().getPartitions()); } else if (key.equals(REPLICATION_FACTOR)) { value.ensureValid(key, topic.getSpec().getReplicationFactor()); } else { if (topic.getSpec().getConfigs() != null) { value.ensureValid(key, topic.getSpec().getConfigs().get(key)); } else { validationErrors.add(invalidFieldValidationNull(key)); } } } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); return validationErrors; }
[*] target: assertEquals(3, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 3, actual. size ( ) )
************************************
************************************
[+] input: equals_true_when_same_object() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(vec3c);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.delete(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
delete(@NonNull final URI baseUri) { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH, Map.of(BASE_URI_QUERY_PARAM, baseUri.toString())); final HttpRequest request = new HttpRequest(HttpMethod.DELETE, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(Boolean.class)); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: isAndroid_whenNotSetInConfig() { boolean isAndroid = Configuration.INSTANCE.isAndroid();  "<AssertPlaceHolder>"; }
isAndroid() { return OSUtil.isAndroid(); }
[*] target: assertFalse(isAndroid)
[-] pred: org. junit. Assert. assertFalse ( isAndroid )
************************************
************************************
[+] input: filterUncompletedTasksOfList() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo"; final String task3Name = "TaskThree";  final TodoList todoList = new TodoList(); final TaskId taskId1 = todoList.addTask(task1Name); todoList.addTask(task2Name); final TaskId taskId3 = todoList.addTask(task3Name);  todoList.toggleTaskCompletion(taskId1); todoList.toggleTaskCompletion(taskId3);  final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task2Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testGetEntityShouldReturnValueWhenCalledWithExistingKey() { //given final KeyVaultFake underTest = createUnderTest(); final OctKeyCreationInput input = new OctKeyCreationInput(KeyType.OCT_HSM, null); final VersionedKeyEntityId keyEntityId = underTest.createKeyVersion(KEY_NAME_1, KeyCreateDetailedInput.builder() .key(input) .build());  //when final ReadOnlyKeyVaultKeyEntity actual = underTest.getEntities().getReadOnlyEntity(keyEntityId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(keyEntityId.asUri(HTTPS_LOCALHOST_8443), actual.getId().asUri(HTTPS_LOCALHOST_8443)); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testCreateCategory_success() { // 准备参数 //ProductCategoryCreateReqVO reqVO = randomPojo(ProductCategoryCreateReqVO.class);  // mock 父类 //ProductCategoryDO parentProductCategory = randomPojo(ProductCategoryDO.class, o -> { //    reqVO.setParentId(o.getId()); //    o.setParentId(PARENT_ID_NULL); //}); //productCategoryMapper.insert(parentProductCategory); // //// 调用 //Long categoryId = productCategoryService.createCategory(reqVO); //// 断言 //"<AssertPlaceHolder>"; //// 校验记录的属性是否正确 //ProductCategoryDO category = productCategoryMapper.selectById(categoryId); //assertPojoEquals(reqVO, category); }
createCategory(ProductCategorySaveReqVO createReqVO) { // 校验父分类存在 validateParentProductCategory(createReqVO.getParentId());  // 插入 ProductCategoryDO category = BeanUtils.toBean(createReqVO, ProductCategoryDO.class); productCategoryMapper.insert(category); // 返回 return category.getId(); }
[*] target: assertNotNull(categoryId)
[-] pred: org. junit. Assert. assertNotNull ( categoryId )
************************************
************************************
[+] input: setManual() { MachineProperties.Manual manual = new MachineProperties.Manual(); MachineProperties.Distributor distributor = new MachineProperties.Distributor(); distributor.setManual(manual); Assertions."<AssertPlaceHolder>"; }
getManual() { return manual; }
[*] target: assertEquals(manual, distributor.getManual())
[-] pred: org. junit. Assert. assertEquals ( manual, distributor. getManual() )
************************************
************************************
[+] input: testListClusterRolesByClusterId() { // Setup final List<ClusterRoleInfo> expectedResult = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes"))));  // Configure ClusterRoleService.getAllRoleClusterByClusterId(...). final List<ClusterRoleInfo> clusterRoleInfos = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes")))); when(mockClusterRoleService.getAllRoleClusterByClusterId(0)).thenReturn(clusterRoleInfos);  // Run the test final List<ClusterRoleInfo> result = clusterPhyManager.listClusterRolesByClusterId(0);  // Verify the results "<AssertPlaceHolder>"; }
listClusterRolesByClusterId(Integer clusterId);  /** * 根据集群名称获获取集群节点列表 * * @param cluster 集群名称 * @return {@link List}
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: setPrefetchPeriod() { Duration prefetchPeriod = Duration.ZERO; SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setPrefetchPeriod(prefetchPeriod); Assertions."<AssertPlaceHolder>"; }
getPrefetchPeriod() { return prefetchPeriod; }
[*] target: assertEquals(prefetchPeriod, prefetchWorker.getPrefetchPeriod())
[-] pred: org. junit. Assert. assertEquals ( prefetchPeriod, prefetchWorker. getPrefetchPeriod() )
************************************
************************************
[+] input: testCreateScanBuilderWithSqlTableFunction() { SparkQueryRequest sparkQueryRequest = new SparkQueryRequest(); sparkQueryRequest.setSql(QUERY); SparkTable sparkTable = new SparkTable(client, sparkQueryRequest); TableScanBuilder tableScanBuilder = sparkTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof SparkSqlFunctionTableScanBuilder); }
createScanBuilder() { return new SparkSqlFunctionTableScanBuilder(sparkClient, sparkQueryRequest); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: testDivide1() { int res = Calculadora.divide(8, 2); "<AssertPlaceHolder>"; }
divide(int a, int b) { return a / b; }
[*] target: assertEquals(4, res)
[-] pred: org. junit. Assert. assertEquals ( 4, res )
************************************
************************************
[+] input: can_serialize_and_deserialize_literals() { Expression original = literal(10); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
serialize(Expression expr) { try { ByteArrayOutputStream output = new ByteArrayOutputStream(); ObjectOutputStream objectOutput = new ObjectOutputStream(output); objectOutput.writeObject(expr); objectOutput.flush(); return Base64.getEncoder().encodeToString(output.toByteArray()); } catch (IOException e) { throw new IllegalStateException("Failed to serialize expression: " + expr, e); } }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
************************************
[+] input: jsonNullIsHandledSafely() { fakeStorage.setJsonData("last_used_dir", "null"); LastUsedDirPref pref = new LastUsedDirPref(fakeStorage);  "<AssertPlaceHolder>"; }
get() { return lastUsedDir; }
[*] target: assertNull(pref.get())
[-] pred: org. junit. Assert. assertNull ( pref. get() )
************************************
************************************
[+] input: testFinalPositionOfSnakeMixedCommands() { List<String> commands = List.of("DOWN", "RIGHT", "UP", "LEFT", "UP", "DOWN", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_equal_to_max_event_size_THEN_return_false() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize((thresholdConfig.getMaxEventSizeBytes()) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanMaxEventSize(final long eventSize) { return (eventSize + APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE) > maxEventSizeBytes; }
[*] target: assertFalse(isEventGreater)
[-] pred: org. junit. Assert. assertFalse ( isEventGreater )
************************************
************************************
[+] input: setOffset() { long offset = 100; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setOffset(offset); Assertions."<AssertPlaceHolder>"; }
getOffset() { return offset; }
[*] target: assertEquals(offset, idDefinition.getOffset())
[-] pred: org. junit. Assert. assertEquals ( offset, idDefinition. getOffset() )
************************************
************************************
[+] input: test_objectFileName_default_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".json")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: testMultiplica7() { int res = Calculadora.multiplica(0, 0); "<AssertPlaceHolder>"; }
multiplica(int a, int b) { return a * b; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
************************************
[+] input: setTimestampBit() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); int timestampBit = 50; properties.setTimestampBit(50); Assertions."<AssertPlaceHolder>"; }
getTimestampBit() { return timestampBit; }
[*] target: assertEquals(timestampBit, properties.getTimestampBit())
[-] pred: org. junit. Assert. assertEquals ( timestampBit, properties. getTimestampBit() )
************************************
************************************
[+] input: testCreateDiyPage_success() { // 准备参数 DiyPageCreateReqVO reqVO = randomPojo(DiyPageCreateReqVO.class);  // 调用 Long diyPageId = diyPageService.createDiyPage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyPageDO diyPage = diyPageMapper.selectById(diyPageId); assertPojoEquals(reqVO, diyPage); }
createDiyPage(DiyPageCreateReqVO createReqVO) { // 校验名称唯一 validateNameUnique(null, createReqVO.getTemplateId(), createReqVO.getName()); // 插入 DiyPageDO diyPage = DiyPageConvert.INSTANCE.convert(createReqVO); diyPage.setProperty("{}"); diyPageMapper.insert(diyPage); return diyPage.getId(); }
[*] target: assertNotNull(diyPageId)
[-] pred: org. junit. Assert. assertNotNull ( diyPageId )
************************************
************************************
[+] input: getHostIP() { String hostIP = HostUtils.getHostIP(); "<AssertPlaceHolder>"; }
getHostIP() { return IP; }
[*] target: assertNotNull(hostIP)
[-] pred: org. junit. Assert. assertNotNull ( hostIP )
************************************
************************************
[+] input: create() { DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest(); request.setDatabaseType("ut-mysql"); request.setIcon(""); request.setDescription("integration test"); request.setJdbcDriverFileUrl("some url"); request.setJdbcDriverClassName("com.mysql.jdbc.Driver"); request.setJdbcProtocol("jdbc:mysql"); request.setUrlPattern("{{jdbc.protocol}}//{{db.url}}/{{db.schema}}"); Integer id = databaseTypeService.create(request); Assertions."<AssertPlaceHolder>"; }
create(DatabaseTypeCreateRequest request) { databaseTypeUpdateValidator.validRequestRequiredParams(request); String databaseType = request.getDatabaseType(); if (databaseTypeDao.existsByDatabaseType(databaseType)) { throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception(); } DriverResult result = loadAndValidate(request.getJdbcDriverFileUrl(), request.getJdbcDriverFilePath(), request.getJdbcDriverClassName()); String targetPath = driverResources.copyToStandardDirectory(result.getDriverFile(), databaseType); DatabaseType pojo = databaseTypeConverter.of(request, targetPath); // TODO workaround pojo.setJdbcDriverFileUrl(StringUtils.defaultIfBlank(request.getJdbcDriverFileUrl(), "")); try { return databaseTypeDao.insertAndReturnId(pojo); } catch (DuplicateKeyException e) { throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception(); } }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: getLimitsByOrgId_whenOrgIdIsInvalid_getLimitsByOrgId() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Limit tesLimit = LimitsUtils.createTesLimit(); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(limitRepositoryMock.findByOrganisationId(anyString())) .thenReturn(java.util.Optional.of(tesLimit));  LimitPricingPlanViewModel limitsByOrgId = limitService.getLimitsByOrgId(ORGANISATION_ID);  //Then "<AssertPlaceHolder>"; assertEquals(tesLimitPricingPlanViewModel.getOrganisationId(), limitsByOrgId.getOrganisationId()); assertEquals(tesLimitPricingPlanViewModel.getPricingPlanType(), limitsByOrgId.getPricingPlanType()); assertEquals(tesLimitPricingPlanViewModel.getProjectLimit(), limitsByOrgId.getProjectLimit()); assertEquals(tesLimitPricingPlanViewModel.getProjectUsed(), limitsByOrgId.getProjectUsed()); assertEquals(tesLimitPricingPlanViewModel.getLabelLimit(), limitsByOrgId.getLabelLimit()); assertEquals(tesLimitPricingPlanViewModel.getLabelRemaining(), limitsByOrgId.getLabelRemaining()); assertEquals(tesLimitPricingPlanViewModel.getStorageLimit(), limitsByOrgId.getStorageLimit()); assertEquals(tesLimitPricingPlanViewModel.getStorageUsed(), limitsByOrgId.getStorageUsed()); assertEquals(tesLimitPricingPlanViewModel.getAiSegLimit(), limitsByOrgId.getAiSegLimit()); assertEquals(tesLimitPricingPlanViewModel.getAiSegRemaining(), limitsByOrgId.getAiSegRemaining()); assertEquals(tesLimitPricingPlanViewModel.isApiAccess(), limitsByOrgId.isApiAccess()); assertEquals(tesLimitPricingPlanViewModel.isExternalStorage(), limitsByOrgId.isExternalStorage());  verify(limitRepositoryMock).findByOrganisationId(anyString()); verify(limitRepositoryMock, times(1)).findByOrganisationId(anyString()); verifyNoMoreInteractions(limitRepositoryMock); }
getLimitsByOrgId(String orgId) { //Permissions check DataGymSecurity.isAdminOrUser(orgId, true);  // Get Limits by OrganisationId. If there aren't any Limits, create the Limits for the current Organisation Limit limitByOrganisationIdRequired = getLimitByOrganisationIdRequired(orgId);  return LimitMapper.mapToLimitPricingPlanViewModel(limitByOrganisationIdRequired); }
[*] target: assertNotNull(limitsByOrgId)
[-] pred: org. junit. Assert. assertNotNull ( limitsByOrgId )
************************************
************************************
[+] input: shouldBuildErrorEventDefinition() { Message message = MessageFactory.errorEventDefinition(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
errorEventDefinition(String elementLocalName) { return INSTANCE.composeMessage( "error-event-definition", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateWorkId() { var created = workIDApplication.createWorkId(randomWorkIdDto()); Assertions."<AssertPlaceHolder>"; }
createWorkId(WorkIdDto workIdDto);
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
************************************
[+] input: shouldBuildFormData() { Message message = MessageFactory.formData(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formData(String elementLocalName) { return INSTANCE.composeMessage( "form-data", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateSocialClient_success() { // 准备参数 SocialClientSaveReqVO reqVO = randomPojo(SocialClientSaveReqVO.class, o -> o.setSocialType(randomEle(SocialTypeEnum.values()).getType()) .setUserType(randomEle(UserTypeEnum.values()).getValue()) .setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long socialClientId = socialClientService.createSocialClient(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SocialClientDO socialClient = socialClientMapper.selectById(socialClientId); assertPojoEquals(reqVO, socialClient, "id"); }
createSocialClient(SocialClientSaveReqVO createReqVO) { // 校验重复 validateSocialClientUnique(null, createReqVO.getUserType(), createReqVO.getSocialType());  // 插入 SocialClientDO client = BeanUtils.toBean(createReqVO, SocialClientDO.class); socialClientMapper.insert(client); return client.getId(); }
[*] target: assertNotNull(socialClientId)
[-] pred: org. junit. Assert. assertNotNull ( socialClientId )
************************************
************************************
[+] input: setPrefix() { String prefix = "test"; IdConverterDefinition definition = new IdConverterDefinition(); definition.setPrefix(prefix); Assertions."<AssertPlaceHolder>"; }
getPrefix() { return prefix; }
[*] target: assertEquals(prefix, definition.getPrefix())
[-] pred: org. junit. Assert. assertEquals ( prefix, definition. getPrefix() )
************************************
************************************
[+] input: setSequenceBit() { int sequenceBit = 10; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setSequenceBit(sequenceBit); Assertions."<AssertPlaceHolder>"; }
getSequenceBit() { return sequenceBit; }
[*] target: assertEquals(sequenceBit, idDefinition.getSequenceBit())
[-] pred: org. junit. Assert. assertEquals ( sequenceBit, idDefinition. getSequenceBit() )
************************************
************************************
[+] input: testRemove() { User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created);  boolean exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions.assertTrue(exists);  entityRepositoryJpa.remove(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>";  }
exists(Class<T> clazz, Serializable id);
[*] target: assertFalse(exists)
[-] pred: org. junit. Assert. assertFalse ( exists )
************************************
************************************
[+] input: shouldReturnTrueWhenExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(true);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
existWaitingProductByOwnerId(Long ownerId) { return productRepository.existsByOwnerIdAndStatus(ownerId, ProductStatus.WAITING); }
[*] target: assertTrue(existWaitingProduct)
[-] pred: org. junit. Assert. assertTrue ( existWaitingProduct )
************************************
************************************
[+] input: ignoresCompletingNonExistingTask() { final TodoList todoList = new TodoList(); todoList.toggleTaskCompletion(TaskId.of(UUID.randomUUID())); "<AssertPlaceHolder>"; }
size() { return tasks.size(); }
[*] target: assertEquals(0, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, todoList. size() )
************************************
************************************
[+] input: testGetWorkflowNames9() { List<String> names = NextflowScript.getWorkflowNames("workflow      { some content }"); "<AssertPlaceHolder>"; }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleRemoved() { Message message = MessageFactory.failedJobRetryTimeCycleRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
failedJobRetryTimeCycleRemoved(String elementLocalName, String timecycle) { return INSTANCE.composeMessage( "failed-job-retry-time-cycle-removed", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("timecycle", timecycle) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildErrorCodeNoExpression() { Message message = errorCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Error code cannot be an expression."); }
errorCodeNoExpression() { return INSTANCE.staticMessage("error-code-no-expression"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes()- ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
************************************
[+] input: shouldReturnFalseWhenNotExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(false);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
existWaitingProductByOwnerId(Long ownerId) { return productRepository.existsByOwnerIdAndStatus(ownerId, ProductStatus.WAITING); }
[*] target: assertFalse(existWaitingProduct)
[-] pred: org. junit. Assert. assertFalse ( existWaitingProduct )
************************************
************************************
[+] input: getConverter() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
getConverter() { return converter; }
[*] target: assertNotNull(idDefinition.getConverter())
[-] pred: org. junit. Assert. assertNotNull ( idDefinition. getConverter() )
************************************
************************************
[+] input: createUser() { var createdUser = userRepository.createUser(randomUser()); Assertions."<AssertPlaceHolder>"; }
createUser(User user) { return save(user); }
[*] target: assertNotNull(createdUser)
[-] pred: org. junit. Assert. assertNotNull ( createdUser )
************************************
************************************
[+] input: mustBeFightingConstruct() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(1), withNextMonster("migratory pirate")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
decorate(final StringBuffer buffer) { // If we are not on El Vibrato Island, nothing to do. KoLAdventure location = KoLAdventure.lastVisitedLocation; if (location == null || location.getAdventureNumber() != AdventurePool.EL_VIBRATO_ISLAND) { return; }  // If the fight is over, punt if (FightRequest.getCurrentRound() == 0) { return; }  MonsterData monster = MonsterStatusTracker.getLastMonster(); if (!isElVibratoConstruct(monster)) { // Unfortunately, wanders can intrude return; }  int index = buffer.lastIndexOf("</table></center></td>"); if (index != -1) { StringBuilder table = new StringBuilder("<tr><td><center>"); generateTable(table, monster); table.append("</center></td></tr>"); buffer.insert(index, table); } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
************************************
[+] input: getAbsoluto_test02() { int absoluto = Calculadora.getAbsoluto(-10);  "<AssertPlaceHolder>"; }
getAbsoluto(int n) { return 0; }
[*] target: assertEquals(10, absoluto)
[-] pred: org. junit. Assert. assertEquals ( 10, absoluto )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test07() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("felix"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(5, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: SchedulerException { // 准备参数 指定 Cron 表达式 JobSaveReqVO reqVO = randomPojo(JobSaveReqVO.class, o -> o.setCronExpression("0 0/1 * * * ? *")) .setId(null); try (MockedStatic<SpringUtil> springUtilMockedStatic = mockStatic(SpringUtil.class)) { springUtilMockedStatic.when(() -> SpringUtil.getBean(eq(reqVO.getHandlerName()))) .thenReturn(jobLogCleanJob);  // 调用 Long jobId = jobService.createJob(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobDO job = jobMapper.selectById(jobId); assertPojoEquals(reqVO, job, "id"); assertEquals(JobStatusEnum.NORMAL.getStatus(), job.getStatus()); // 校验调用 verify(schedulerManager).addJob(eq(job.getId()), eq(job.getHandlerName()), eq(job.getHandlerParam()), eq(job.getCronExpression()), eq(reqVO.getRetryCount()), eq(reqVO.getRetryInterval())); } }
createJob(JobSaveReqVO createReqVO) throws SchedulerException { validateCronExpression(createReqVO.getCronExpression()); // 1.1 校验唯一性 if (jobMapper.selectByHandlerName(createReqVO.getHandlerName()) != null) { throw exception(JOB_HANDLER_EXISTS); } // 1.2 校验 JobHandler 是否存在 validateJobHandlerExists(createReqVO.getHandlerName());  // 2. 插入 JobDO JobDO job = BeanUtils.toBean(createReqVO, JobDO.class); job.setStatus(JobStatusEnum.INIT.getStatus()); fillJobMonitorTimeoutEmpty(job); jobMapper.insert(job);  // 3.1 添加 Job 到 Quartz 中 schedulerManager.addJob(job.getId(), job.getHandlerName(), job.getHandlerParam(), job.getCronExpression(), createReqVO.getRetryCount(), createReqVO.getRetryInterval()); // 3.2 更新 JobDO JobDO updateObj = JobDO.builder().id(job.getId()).status(JobStatusEnum.NORMAL.getStatus()).build(); jobMapper.updateById(updateObj); return job.getId(); }
[*] target: assertNotNull(jobId)
[-] pred: org. junit. Assert. assertNotNull ( jobId )
************************************
************************************
[+] input: shouldValidateEncryptAndDecryptAes256GcmWrongKeySize() { String clearText = "myClearText"; String keyEncryptionKey = "myKeyEncryptionKeyWrongSize"; String myClearText = EncryptionUtils.encryptAes256Gcm(clearText, keyEncryptionKey);  "<AssertPlaceHolder>"; }
encryptAes256Gcm(String clearText, String key) { try { if (!StringUtils.hasText(clearText)) { return clearText; }  AESEncrypter encrypter = new AESEncrypter(key.getBytes(StandardCharsets.UTF_8)); JWECryptoParts encryptedData = encrypter.encrypt(new JWEHeader(JWEAlgorithm.A256KW, EncryptionMethod.A256GCM), clearText.getBytes(StandardCharsets.UTF_8));  ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); outputStream.write(encryptedData.getEncryptedKey().decode()); outputStream.write(encryptedData.getInitializationVector().decode()); outputStream.write(encryptedData.getAuthenticationTag().decode()); outputStream.write(encryptedData.getCipherText().decode());  return Base64URL.encode(outputStream.toByteArray()).toString(); } catch (JOSEException | IOException e) { log.error("An error occurred during Connect cluster password encryption", e); }  return clearText; }
[*] target: assertEquals(clearText, myClearText)
[-] pred: org. junit. Assert. assertEquals ( clearText, myClearText )
************************************
************************************
[+] input: isAndroid_whenSetThroughOSUtil() { OSUtil.setAndroid(true); boolean isAndroid = OSUtil.isAndroid(); Configuration.INSTANCE.setAndroid(false);  "<AssertPlaceHolder>"; }
setAndroid(boolean android) { OSUtil.setAndroid(android); }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
************************************
[+] input: InterruptedException { boolean aQueued = reloader.reload(plugin); boolean bQueued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertFalse(bQueued); assertTrue(reloader.isReloadQueued());  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
reload(@NotNull Plugin plugin) { if (plugin == null) throw new IllegalArgumentException("Plugin must not be null");  synchronized (this) { if (this.reloadQueued) return false; this.reloadQueued = true; }  scheduler.schedule(() -> { try { this.doReload(plugin); } catch (Throwable throwable) { Log.error("Failed to reload plugin " + plugin.getName(), throwable); } finally { synchronized (this) { this.reloadQueued = false; } } }, Duration.ofMillis(this.quietPeriod)); return true; }
[*] target: assertTrue(aQueued)
[-] pred: org. junit. Assert. assertTrue ( aQueued )
************************************
************************************
[+] input: testParseSmsReceiveStatus() { // 准备参数 String text = "[\n" + "    {\n" + "        "user_receive_time": "2015-10-17 08:03:04",\n" + "        "nationcode": "86",\n" + "        "mobile": "13900000001",\n" + "        "report_status": "SUCCESS",\n" + "        "errmsg": "DELIVRD",\n" + "        "description": "用户短信送达成功",\n" + "        "sid": "12345",\n" + "        "ext": {"logId":"67890"}\n" + "    }\n" + "]";  // 调用 List<SmsReceiveRespDTO> statuses = smsClient.parseSmsReceiveStatus(text); // 断言 "<AssertPlaceHolder>"; assertTrue(statuses.get(0).getSuccess()); assertEquals("DELIVRD", statuses.get(0).getErrorCode()); assertEquals("13900000001", statuses.get(0).getMobile()); assertEquals(LocalDateTime.of(2015, 10, 17, 8, 3, 4), statuses.get(0).getReceiveTime()); assertEquals("12345", statuses.get(0).getSerialNo()); }
parseSmsReceiveStatus(String text) { JSONArray statuses = JSONUtil.parseArray(text); // 字段参考 return convertList(statuses, status -> { JSONObject statusObj = (JSONObject) status; return new SmsReceiveRespDTO() .setSuccess("SUCCESS".equals(statusObj.getStr("report_status"))) // 是否接收成功 .setErrorCode(statusObj.getStr("errmsg")) // 状态报告编码 .setMobile(statusObj.getStr("mobile")) // 手机号 .setReceiveTime(statusObj.getLocalDateTime("user_receive_time", null)) // 状态报告时间 .setSerialNo(statusObj.getStr("sid")); // 发送序列号 }); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
************************************
[+] input: testOnlyNumberValueProvided() { Duration expectedDuration = Duration.ofSeconds(3); Duration actualDuration = DurationUtils.parseDuration("3", "refresh-period"); "<AssertPlaceHolder>"; }
parseDuration(String duration, String parameter) { if (duration.startsWith("-")) { throw new IllegalArgumentException("Negative " + parameter + " specified for service discovery: " + duration); } if (DIGITS.asPredicate().test(duration)) { return Duration.ofSeconds(Long.parseLong(duration)); } return Duration.parse("PT" + duration);  }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
************************************
[+] input: can_visit_all_types_of_expression_node() { Expression expr = DSL.regex( DSL.castString(DSL.sum(DSL.add(ref("balance", INTEGER), literal(10)))), DSL.literal("(?<group>\\d+)"), DSL.literal("group"));  Expression actual = expr.accept( new ExpressionNodeVisitor<Expression, Object>() { @Override public Expression visitLiteral(LiteralExpression node, Object context) { return node; }  @Override public Expression visitReference(ReferenceExpression node, Object context) { return node; }  @Override public Expression visitParse(ParseExpression node, Object context) { return node; }  @Override public Expression visitFunction(FunctionExpression node, Object context) { return DSL.add(visitArguments(node.getArguments(), context)); }  @Override public Expression visitAggregator(Aggregator<?> node, Object context) { return DSL.sum(visitArguments(node.getArguments(), context)); }  private Expression[] visitArguments(List<Expression> arguments, Object context) { return arguments.stream() .map(arg -> arg.accept(this, context)) .toArray(Expression[]::new); } }, null);  "<AssertPlaceHolder>"; }
visitAggregator(Aggregator<?> node, C context) { return visitChildren(node, context); }
[*] target: assertEquals(expr, actual)
[-] pred: org. junit. Assert. assertEquals ( expr, actual )
************************************
************************************
[+] input: shouldBuildCompletionCondition() { Message message = MessageFactory.completionCondition(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
completionCondition(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "completion-condition", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: serialize_WithCircularReference_ReturnsErrorMessage() { // Test for circular reference handling GenericRecord record1 = new GenericData.Record(SCHEMA); record1.put("nested", record1);  String expectedErrorMessage = "{"nested":  ">>> CIRCULAR REFERENCE CANNOT BE PUT IN JSON STRING, ABORTING RECURSION <<<" , "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record1);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedErrorMessage, json)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, json )
************************************
************************************
[+] input: InvocationTargetException { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  List<LcEntry> testLcEntryLineList = LcEntryUtils.createTestLcEntryGeometryList(3, LcEntryType.LINE, testLabelConfiguration);  //When when(labelConfigRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration));  when(lcEntryRepositoryMock.findAllByParentEntryIsNullAndConfigurationId(anyString())) .thenReturn(testLcEntryLineList);  LcConfigDeleteViewModel lcConfigDeleteViewModel = labelConfigService.clearConfig(LC_CONFIG_ID);  System.out.println();  //Then "<AssertPlaceHolder>"; assertEquals(LC_CONFIG_ID, lcConfigDeleteViewModel.getConfigId());  ArgumentCaptor<String> idCapture = ArgumentCaptor.forClass(String.class); verify(lcEntryRepositoryMock, times(1)).deleteLcEntriesByConfigurationId(idCapture.capture()); assertThat(idCapture.getValue()).isEqualTo(LC_CONFIG_ID); verifyNoMoreInteractions(lcEntryRepositoryMock); }
clearConfig(String configId) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(OAUTH_SCOPE_TYPE, TOKEN_SCOPE_TYPE);  LabelConfiguration labelConfiguration = findConfigById(configId);  //Permissions check String projectOrganisation = labelConfiguration.getProject().getOwner(); DataGymSecurity.isAdminOrUser(projectOrganisation, false);  // Delete all LcEntries for the current Configuration lcEntryRepository.deleteLcEntriesByConfigurationId(configId);  // Change TaskState after clearing the LabelConfiguration userTaskService.changeTaskStateAfterLabelConfigurationUpdate(configId);  LcConfigDeleteViewModel lcConfigDeleteViewModel = new LcConfigDeleteViewModel(); lcConfigDeleteViewModel.setConfigId(configId);  return lcConfigDeleteViewModel; }
[*] target: assertNotNull(lcConfigDeleteViewModel)
[-] pred: org. junit. Assert. assertNotNull ( lcConfigDeleteViewModel )
************************************
************************************
[+] input: XMLParseException { InputStream inputStream = Thread.currentThread().getContextClassLoader() .getResourceAsStream("xml-parser-process.xml"); Element processElement = new XMLParser().parseFirstElement(inputStream);  "<AssertPlaceHolder>"; assertEquals("Definitions_12vhdwp", processElement.getAttributeValue("id")); assertTrue(processElement.getChildElement().stream() .anyMatch(element -> "process".equals(element.getType().getLocalPart()))); }
parseFirstElement(InputStream inputStream) throws XMLParseException { XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);  XMLStreamReader reader = null; try { reader = factory.createXMLStreamReader(inputStream);  boolean findFirst = nextElement(reader); if (findFirst) { return parseElement(reader); }  throw new XMLParseException("[XML] Cannot find any elements when parsing"); } catch (XMLStreamException xse) { throw new XMLParseException("[XML] Encountered error when reading XML stream: " + xse.getMessage(), xse); } catch (Exception e) { throw new XMLParseException("[XML] Unknown exception: " + e.getMessage(), e); } finally { if (reader != null) { try { reader.close(); } catch (XMLStreamException e) { // do nothing } } } }
[*] target: assertNotNull(processElement)
[-] pred: org. junit. Assert. assertNotNull ( processElement )
************************************
************************************
[+] input: shouldBuildScriptOnConditionalFlow() { String script = random(); String language = random(); Message message = scriptOnConditionalFlow(language, script); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Please translate the %s script from '%s' to a valid FEEL expression.", language, script); }
scriptOnConditionalFlow(String language, String script) { return INSTANCE.composeMessage( "script-on-conditional-flow", ContextBuilder.builder().entry("language", language).entry("script", script).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_greater_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() + 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
************************************
[+] input: IOException { List<? extends JavaFileObject> files = List.of( testFiles.get("/workspace/com/gazelle/java/javaparser/generators/ExportingClass.java")); parser.parseClasses(files);  Set<String> expected = Set.of( "example.external.PackageReturn", "example.external.ProtectedReturn", "example.external.PublicReturn"); "<AssertPlaceHolder>"; }
getExportedTypes() { return ImmutableSet.copyOf(exportedTypes); }
[*] target: assertEquals(expected, parser.getExportedTypes())
[-] pred: org. junit. Assert. assertEquals ( expected, parser. getExportedTypes() )
************************************
************************************
[+] input: testNumberWithUnitValueProvided() { Duration expectedDuration = Duration.ofMinutes(3); Duration actualDuration = DurationUtils.parseDuration("3M", "refresh-period"); "<AssertPlaceHolder>"; }
parseDuration(String duration, String parameter) { if (duration.startsWith("-")) { throw new IllegalArgumentException("Negative " + parameter + " specified for service discovery: " + duration); } if (DIGITS.asPredicate().test(duration)) { return Duration.ofSeconds(Long.parseLong(duration)); } return Duration.parse("PT" + duration);  }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
************************************
[+] input: overflowMana() { String res = tracker.update("§61605/1305❤     §a270§a❈ Defense     §b548/548✎ §3200ʬ", false); "<AssertPlaceHolder>"; assertStats(1605, 1305, 270, 548, 548, 200); }
update(String actionBar, boolean filterManaUse) { var sb = new StringBuilder(); Matcher matcher = STATUS_HEALTH.matcher(actionBar); if (!matcher.lookingAt()) return actionBar; updateHealth(matcher); if (matcher.group(5) != null) { sb.append("§c❤"); sb.append(matcher.group(5)); } actionBar = reset(actionBar, matcher); if (matcher.usePattern(MANA_STATUS).lookingAt()) { defense = 0; updateMana(matcher); actionBar = reset(actionBar, matcher); } else { if (matcher.usePattern(DEFENSE_STATUS).lookingAt()) { defense = parseInt(matcher, 1); actionBar = reset(actionBar, matcher); } else if (filterManaUse && matcher.usePattern(MANA_USE).lookingAt()) { actionBar = reset(actionBar, matcher); } if (matcher.usePattern(MANA_STATUS).find()) { updateMana(matcher); matcher.appendReplacement(sb, ""); } } matcher.appendTail(sb); String res = sb.toString().trim(); return res.isEmpty() ? null : res; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: testDivide2() { int algo = 7; int res = Calculadora.divide(algo, 1); "<AssertPlaceHolder>"; }
divide(int a, int b) { return a / b; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
************************************
[+] input: test() { TreeNode root = new TreeNode(7); root.left = new TreeNode(3); root.right = new TreeNode(15); root.right.left = new TreeNode(9); root.right.right = new TreeNode(20); BSTIterator testObject = new BSTIterator(root); assertEquals(3, testObject.next()); assertEquals(7, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(9, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(15, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(20, testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return !stack.isEmpty(); }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: Exception { PulsarTopic topic = new PulsarTopic("test"); assertNull(topic.extractSubscriptionName());  topic = new PulsarTopic("test:sub"); assertNull(topic.extractSubscriptionName()); "<AssertPlaceHolder>"; }
extractSubscriptionName() throws InvalidDestinationException { return null; }
[*] target: assertNull(topic.extractSubscriptionName())
[-] pred: org. junit. Assert. assertNull ( topic. extractSubscriptionName ( ) )
************************************
************************************
[+] input: setInstanceId() { String instanceId = MockIdGenerator.INSTANCE.generateAsString(); MachineProperties properties = new MachineProperties(); properties.setInstanceId(instanceId); Assertions."<AssertPlaceHolder>"; }
getInstanceId() { return instanceId; }
[*] target: assertEquals(instanceId, properties.getInstanceId())
[-] pred: org. junit. Assert. assertEquals ( instanceId, properties. getInstanceId() )
************************************
************************************
[+] input: getProject_whenIdIsValidAndUserIsAuthorized_getProject() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID);  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  ProjectViewModel project = projectService.getProject(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), project.getId()); assertEquals(testProject.getName(), project.getName()); assertEquals(testProject.getDescription(), project.getDescription()); assertEquals(testProject.getShortDescription(), project.getShortDescription()); assertEquals(testProject.isPinned(), project.isPinned()); assertEquals(testProject.getOwner(), project.getOwner());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
getProject(String projectId) { Project projectById = getProjectById(projectId);  //Permissions check String owner = projectById.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  if (!projectById.isDeleted()) { ProjectViewModel projectViewModel = ProjectMapper.mapToProjectViewModel(projectById, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  boolean projectExportable = isProjectExportable(projectById.getId()); projectViewModel.setExportable(projectExportable); return projectViewModel; }  throw new NotFoundException(PROJECT_PLACEHOLDER, "id", "" + projectId); }
[*] target: assertNotNull(project)
[-] pred: org. junit. Assert. assertNotNull ( project )
************************************
************************************
[+] input: isProjectNameUniqueAndDeletedFalse_whenUsernameIsNotUnique_returnFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID);  //When when(projectRepositoryMock.findByNameAndDeletedFalseAndOwner(anyString(), anyString())).thenReturn(java.util.Optional.empty());  boolean actual = projectService.isProjectNameUniqueAndDeletedFalse(PROJECT_NAME, "eforce");  //Then Assertions."<AssertPlaceHolder>"; verify(projectRepositoryMock).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); verify(projectRepositoryMock, times(1)).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); }
isProjectNameUniqueAndDeletedFalse(String projectName, String owner) { return projectRepository .findByNameAndDeletedFalseAndOwner(projectName, owner).isEmpty(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: IllegalAccessException { MockFields obj = new MockFields(); Field field = ReflectionUtils.getField(obj.getClass(), "name");  "<AssertPlaceHolder>"; assertEquals("Joe", field.get(obj)); }
getField(@Nonnull Class<?> c, @Nonnull String field) throws NoSuchFieldException { return c.getDeclaredField(field); }
[*] target: assertNotNull(field)
[-] pred: org. junit. Assert. assertNotNull ( field )
************************************
************************************
[+] input: getProvider() { SnowflakeIdProperties properties = new SnowflakeIdProperties(); Assertions."<AssertPlaceHolder>"; }
getProvider() { return provider; }
[*] target: assertNotNull(properties.getProvider())
[-] pred: org. junit. Assert. assertNotNull ( properties. getProvider() )
************************************
************************************
[+] input: testCreateNotifyTemplate_success() { // 准备参数 NotifyTemplateSaveReqVO reqVO = randomPojo(NotifyTemplateSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long notifyTemplateId = notifyTemplateService.createNotifyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 NotifyTemplateDO notifyTemplate = notifyTemplateMapper.selectById(notifyTemplateId); assertPojoEquals(reqVO, notifyTemplate, "id"); }
createNotifyTemplate(NotifyTemplateSaveReqVO createReqVO) { // 校验站内信编码是否重复 validateNotifyTemplateCodeDuplicate(null, createReqVO.getCode());  // 插入 NotifyTemplateDO notifyTemplate = BeanUtils.toBean(createReqVO, NotifyTemplateDO.class); notifyTemplate.setParams(parseTemplateContentParams(notifyTemplate.getContent())); notifyTemplateMapper.insert(notifyTemplate); return notifyTemplate.getId(); }
[*] target: assertNotNull(notifyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( notifyTemplateId )
************************************
************************************
[+] input: testDivide3() { int a = 3; int b = 5; int res = Calculadora.divide(Calculadora.multiplica(a, b), b); "<AssertPlaceHolder>"; }
multiplica(int a, int b) { return a * b; }
[*] target: assertEquals(a, res)
[-] pred: org. junit. Assert. assertEquals ( a, res )
************************************
************************************
[+] input: serialize_WithFloatInfinityValue_ReturnsQuotedJson() { // Test for serializing float Infinity value GenericRecord record = new GenericData.Record(SCHEMA); record.put("floatValue", Float.POSITIVE_INFINITY);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": "Infinity", "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
idleBeat(IdleBeatParam idleBeatParam);
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: convertToEntityAttributeNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); AnimalTipo convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String descricao) { if(descricao == null) { return null; }  return AnimalTipo.of(descricao); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: shouldBuildCallActivityNoCalledElementHint() { Message message = MessageFactory.callActivityNoCalledElementHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
callActivityNoCalledElementHint() { return INSTANCE.staticMessage("call-activity-no-called-element-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testAssign() { for (int i = 0; i < 20; ++i) { clusterManager.add(new ServerNode(String.valueOf(i), "", 0, 0, 0, 20 - i, 0, tags, true)); }  PartitionRangeAssignment pra = strategy.assign(100, 10, 2, tags); SortedMap<PartitionRange, List<ServerNode>> assignments = pra.getAssignments(); "<AssertPlaceHolder>";  for (int i = 0; i < 100; i += 10) { assignments.containsKey(new PartitionRange(i, i + 10)); }  int i = 0; Iterator<List<ServerNode>> ite = assignments.values().iterator(); while (ite.hasNext()) { List<ServerNode> cur = ite.next(); assertEquals(2, cur.size()); assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(0).getId()); i++; assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(1).getId()); i++; } }
assign(int totalPartitionNum, int partitionNumPerRange, int replica, Set<String> requiredTags) { List<PartitionRange> ranges = CoordinatorUtils.generateRanges(totalPartitionNum, partitionNumPerRange); int shuffleNodesMax = clusterManager.getShuffleNodesMax(); List<ServerNode> servers = getRequiredServers(requiredTags, shuffleNodesMax); if (servers.isEmpty() || servers.size() < replica) { return new PartitionRangeAssignment(null); }  SortedMap<PartitionRange, List<ServerNode>> assignments = new TreeMap<>(); int idx = 0; int size = servers.size();  for (PartitionRange range : ranges) { List<ServerNode> nodes = new LinkedList<>(); for (int i = 0; i < replica; ++i) { ServerNode node = servers.get(idx); nodes.add(node); idx = CoordinatorUtils.nextIdx(idx, size); }  assignments.put(range, nodes); }  return new PartitionRangeAssignment(assignments); }
[*] target: assertEquals(10, assignments.size())
[-] pred: org. junit. Assert. assertEquals ( 10, assignments. size ( ) )
************************************
************************************
[+] input: statSnowflakeId() { var snowflakeId = new MillisecondSnowflakeId(0); var stat = snowflakeId.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(SnowflakeIdStat.class)); var snowflakeIdStat = (SnowflakeIdStat) stat; assertThat(snowflakeIdStat.getMachineId(), equalTo(0)); }
stat();
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
************************************
[+] input: can_serialize_and_deserialize_predicates() { Expression original = DSL.or(literal(true), DSL.less(literal(1), literal(2))); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
serialize(Expression expr) { try { ByteArrayOutputStream output = new ByteArrayOutputStream(); ObjectOutputStream objectOutput = new ObjectOutputStream(output); objectOutput.writeObject(expr); objectOutput.flush(); return Base64.getEncoder().encodeToString(output.toByteArray()); } catch (IOException e) { throw new IllegalStateException("Failed to serialize expression: " + expr, e); } }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test02() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("Felix Gilioli"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(2, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 2, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: ps() { String name = "test"; List<Container> containers = new ArrayList<>(); containers.add(new Container()); when(dockerClient.listContainersCmd().withNameFilter(Lists.newArrayList(name))) .thenReturn(new ListContainersCmdImpl(command -> containers)); List<Container> ps = dockerService.ps(name); "<AssertPlaceHolder>"; assertEquals(1, ps.size()); }
ps(String containerNamePrefix) { String containerName = StringPattern.replacePatternBreaking(containerNamePrefix); logger.info("执行: docker ps|grep {}", containerName); ListContainersCmd listContainersCmd = dockerClient.listContainersCmd().withNameFilter(Lists.newArrayList(containerNamePrefix)); return listContainersCmd.exec(); }
[*] target: assertNotNull(ps)
[-] pred: org. junit. Assert. assertNotNull ( ps )
************************************
************************************
[+] input: isValidDatasetArn_returns_false_when_arn_resource_is_not_dataset() { final String datasetArn = "arn:aws:personalize::123456789012:role/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
isValidDatasetArn() { if (datasetArn == null) { return true; } final Arn arn = getArn(); boolean status = true; if (!AWS_PERSONALIZE.equals(arn.service())) { status = false; } final Optional<String> resourceType = arn.resource().resourceType(); if (resourceType.isEmpty() || !resourceType.get().equals(AWS_PERSONALIZE_DATASET)) { status = false; } return status; }
[*] target: assertFalse(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertFalse ( objectUnderTest. isValidDatasetArn() )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_less_than_max_request_size_THEN_return_false() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes() - 1) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
************************************
[+] input: isClockSync() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
isClockSync() { return clockSync; }
[*] target: assertTrue(idDefinition.isClockSync())
[-] pred: org. junit. Assert. assertTrue ( idDefinition. isClockSync() )
************************************
************************************
[+] input: updateDataset_whenInputDatasetIdValid_updateDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given DatasetUpdateBindingModel testDatasetUpdateBindingModel = DatasetUtils.createTestDatasetUpdateBindingModel(); Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("DatasetName updated"); testDataset.setShortDescription("Dataset shortDescription updated");  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.updateDataset(DATASET_ID, testDatasetUpdateBindingModel);  //Then "<AssertPlaceHolder>"; assertEquals(testDatasetUpdateBindingModel.getName(), actual.getName()); assertEquals(testDatasetUpdateBindingModel.getShortDescription(), actual.getShortDescription());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
updateDataset(String id, @Valid DatasetUpdateBindingModel datasetUpdateBindingModel) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  String datasetName = datasetById.getName();  if (DUMMY_DATASET_ONE_PLACEHOLDER.equals(datasetName) || DUMMY_DATASET_TWO_PLACEHOLDER.equals(datasetName)) { throw new GenericException(DUMMY_DATASET_ERROR_PLACEHOLDER, null, null); }  String currentDatasetName = datasetById.getName(); String newDatasetName = datasetUpdateBindingModel.getName();  if (!currentDatasetName.equals(newDatasetName)) { Optional<Dataset> datasetByName = datasetRepository.findByNameAndDeletedFalseAndOwner(newDatasetName, owner);  if (datasetByName.isPresent()) { throw new AlreadyExistsException("Dataset", "name", newDatasetName); } }  Dataset dataset = DatasetMapper.mapToDataset(datasetUpdateBindingModel, datasetById);  long currentTime = System.currentTimeMillis(); dataset.setTimestamp(currentTime);  Dataset updatedDataset = datasetRepository.saveAndFlush(dataset); return DatasetMapper.mapToDatasetViewModel(updatedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testFillTemplateWithBraces() { String template = "Beginning ${VAR} { end }"; Map<String, String> vars = new HashMap<String, String>(); vars.put("VAR", "middle"); String result = StringUtil.fillTemplate(template, vars); String expected = "Beginning middle { end }"; "<AssertPlaceHolder>"; }
fillTemplate(String template, Map<String, ? extends Object> vars) { return fillTemplate(template, vars, varPattern); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: mustBeOnElVibratoIsland() { var cleanups = new Cleanups( withLastLocation("Haunted Pantry"), withFight(1), withNextMonster("lonely construct")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
decorate(final StringBuffer buffer) { // If we are not on El Vibrato Island, nothing to do. KoLAdventure location = KoLAdventure.lastVisitedLocation; if (location == null || location.getAdventureNumber() != AdventurePool.EL_VIBRATO_ISLAND) { return; }  // If the fight is over, punt if (FightRequest.getCurrentRound() == 0) { return; }  MonsterData monster = MonsterStatusTracker.getLastMonster(); if (!isElVibratoConstruct(monster)) { // Unfortunately, wanders can intrude return; }  int index = buffer.lastIndexOf("</table></center></td>"); if (index != -1) { StringBuilder table = new StringBuilder("<tr><td><center>"); generateTable(table, monster); table.append("</center></td></tr>"); buffer.insert(index, table); } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
************************************
[+] input: testGetFieldTypes() { DataSourceTable dataSourceTable = new DataSourceTable(dataSourceService); Map<String, ExprType> fieldTypes = dataSourceTable.getFieldTypes(); Map<String, ExprType> expectedTypes = new HashMap<>(); expectedTypes.put("DATASOURCE_NAME", ExprCoreType.STRING); expectedTypes.put("CONNECTOR_TYPE", ExprCoreType.STRING); "<AssertPlaceHolder>"; }
getFieldTypes() { return DataSourceTableSchema.DATASOURCE_TABLE_SCHEMA.getMapping(); }
[*] target: assertEquals(expectedTypes, fieldTypes)
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, fieldTypes )
************************************
************************************
[+] input: testEntityExists() { boolean exists = repository.exists(User.class,-1L); Assertions.assertFalse(exists);   User created = repository.save(randomUser()); exists = repository.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
exists(Class<T> clazz, Serializable id);
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: testCreateArticleCategory_success() { // 准备参数 ArticleCategoryCreateReqVO reqVO = randomPojo(ArticleCategoryCreateReqVO.class);  // 调用 Long articleCategoryId = articleCategoryService.createArticleCategory(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleCategoryDO articleCategory = articleCategoryMapper.selectById(articleCategoryId); assertPojoEquals(reqVO, articleCategory); }
createArticleCategory(ArticleCategoryCreateReqVO createReqVO) { // 插入 ArticleCategoryDO category = ArticleCategoryConvert.INSTANCE.convert(createReqVO); articleCategoryMapper.insert(category); // 返回 return category.getId(); }
[*] target: assertNotNull(articleCategoryId)
[-] pred: org. junit. Assert. assertNotNull ( articleCategoryId )
************************************
************************************
[+] input: confirmDefaultBehavior() { when(provider.getHttpAuthenticationService()).thenCallRealMethod();  var result = provider.getHttpAuthenticationService(); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(result.isPresent()); }
getHttpAuthenticationService() { return Optional.empty(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: searchTest() { var result = wishListService.search("갈비집"); System.out.println(result); Assertions."<AssertPlaceHolder>";  }
search(String query){ // 지역검색 var searchLocalReq = new SearchLocalReq(); searchLocalReq.setQuery(query); var searchLocalRes = naverClient.searchLocal(searchLocalReq);  if(searchLocalRes.getTotal() > 0){ var localItem = searchLocalRes.getItems().stream().findFirst().get(); var imageQuery = localItem.getTitle().replaceAll("<[^>]*>",""); var searchImageReq = new SearchImageReq(); searchImageReq.setQuery(imageQuery);  // 이미지 검색 var searchImageRes = naverClient.searchImage(searchImageReq);  if(searchImageRes.getTotal() > 0){ var imageItem = searchImageRes.getItems().stream().findFirst().get();  // 결과를 리턴 var result = new WishListDto(); result.setTitle(localItem.getTitle()); result.setCategory(localItem.getCategory()); result.setAddress(localItem.getAddress()); result.setRoadAddress(localItem.getRoadAddress()); result.setHomePageLink(localItem.getLink()); result.setImageLink(imageItem.getLink()); return result; } }  return new WishListDto(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: JsonProcessingException { String endpoint = this.computeEndpoint(ConnectorEndpoint.CONNECTOR_STATUS); JsonNode expected = jsonMapper.createObjectNode().put("status", "OK"); byte[] responseBody = jsonMapper.writeValueAsBytes(expected); this.mockRestCall(endpoint, null, responseBody, HttpMethod.GET, HttpStatus.OK); JsonNode actual = connectorService.getConnectorStatus(NAMESPACE, NAME, CONNECTOR); "<AssertPlaceHolder>"; }
getConnectorStatus( String namespace, String name, String connector) {  String connectorStatusEndpoint = String.format("%s/status", this.computeConnectorsEndpoint(namespace, name, connector)); return this.executeRest(connectorStatusEndpoint, HttpMethod.GET, HttpStatus.OK); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDense() { float[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  FloatSparseNdArray instance = new FloatSparseNdArray(indices, values, DimensionalSpace.create(shape)); FloatNdArray denseInstance = instance.toDense(); FloatNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { FloatDataBuffer dataBuffer = DataBuffers.ofFloats(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: getQuantidadeCaracteresEspeciais_test04() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(null); "<AssertPlaceHolder>"; }
getQuantidadeCaracteresEspeciais(String str) { return 0; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
************************************
[+] input: testGetInstances() { Set<Fly> flies =  instanceProvider.getInstances(Fly.class); Assertions."<AssertPlaceHolder>"; }
getInstances(Class<T> beanType);
[*] target: assertEquals(2,flies.size())
[-] pred: org. junit. Assert. assertEquals ( 2, flies. size ( ) )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUniqueAndNameIsMoreThan89Chars_setDeletedToFalseAndCutTheNameTo89CharsAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua"); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(126, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testCacheCleanup() { var cache = Cache.<String, String>builder(key -> key + "-test") .expireAfterAccess(Duration.ofSeconds(1)) .build(); cache.require("foo"); // this won't do anything since expire time is 1 second cache.cleanup(); cache.require("bar"); // this won't do anything since expire time is 1 second cache.cleanup(); // this won't do anything since expire time is 1 second cache.cleanup();  Utils.sleep(Duration.ofSeconds(1)); Assertions.assertEquals(2, cache.size()); // after 1 second, every element in cache has expired cache.cleanup(); Assertions."<AssertPlaceHolder>"; }
size() { return map.size(); }
[*] target: assertEquals(0, cache.size())
[-] pred: org. junit. Assert. assertEquals ( 0, cache. size() )
************************************
************************************
[+] input: setIncrementMaxIdSql() { String incrementMaxIdSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setIncrementMaxIdSql(incrementMaxIdSql); Assertions."<AssertPlaceHolder>"; }
getIncrementMaxIdSql() { return incrementMaxIdSql; }
[*] target: assertEquals(incrementMaxIdSql, jdbc.getIncrementMaxIdSql())
[-] pred: org. junit. Assert. assertEquals ( incrementMaxIdSql, jdbc. getIncrementMaxIdSql() )
************************************
************************************
[+] input: convertToDatabaseColumnNull() { AnimalClassificacaoEtariaConverter animalConverter = new AnimalClassificacaoEtariaConverter(); String s = animalConverter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(AnimalClassificacaoEtaria classificacaoEtaria) { if(classificacaoEtaria == null) { return null; } return classificacaoEtaria.getDescricao(); }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test05() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("FELIX"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: testGetExpression_noLoginUser() { // 准备参数 String tableName = randomString(); Alias tableAlias = new Alias(randomString()); // mock 方法  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; }
getExpression(String tableName, Alias tableAlias) { // 只有有登陆用户的情况下，才进行数据权限的处理 LoginUser loginUser = SecurityFrameworkUtils.getLoginUser(); if (loginUser == null) { return null; } // 只有管理员类型的用户，才进行数据权限的处理 if (ObjectUtil.notEqual(loginUser.getUserType(), UserTypeEnum.ADMIN.getValue())) { return null; }  // 获得数据权限 DeptDataPermissionRespDTO deptDataPermission = loginUser.getContext(CONTEXT_KEY, DeptDataPermissionRespDTO.class); // 从上下文中拿不到，则调用逻辑进行获取 if (deptDataPermission == null) { deptDataPermission = permissionApi.getDeptDataPermission(loginUser.getId()); if (deptDataPermission == null) { log.error("[getExpression][LoginUser({}) 获取数据权限为 null]", JsonUtils.toJsonString(loginUser)); throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 未返回数据权限", loginUser.getId(), tableName, tableAlias.getName())); } // 添加到上下文中，避免重复计算 loginUser.setContext(CONTEXT_KEY, deptDataPermission); }  // 情况一，如果是 ALL 可查看全部，则无需拼接条件 if (deptDataPermission.getAll()) { return null; }  // 情况二，即不能查看部门，又不能查看自己，则说明 100% 无权限 if (CollUtil.isEmpty(deptDataPermission.getDeptIds()) && Boolean.FALSE.equals(deptDataPermission.getSelf())) { return new EqualsTo(null, null); // WHERE null = null，可以保证返回的数据为空 }  // 情况三，拼接 Dept 和 User 的条件，最后组合 Expression deptExpression = buildDeptExpression(tableName,tableAlias, deptDataPermission.getDeptIds()); Expression userExpression = buildUserExpression(tableName, tableAlias, deptDataPermission.getSelf(), loginUser.getId()); if (deptExpression == null && userExpression == null) { // TODO 芋艿：获得不到条件的时候，暂时不抛出异常，而是不返回数据 log.warn("[getExpression][LoginUser({}) Table({}/{}) DeptDataPermission({}) 构建的条件为空]", JsonUtils.toJsonString(loginUser), tableName, tableAlias, JsonUtils.toJsonString(deptDataPermission)); //            throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 构建的条件为空", //                    loginUser.getId(), tableName, tableAlias.getName())); return EXPRESSION_NULL; } if (deptExpression == null) { return userExpression; } if (userExpression == null) { return deptExpression; } // 目前，如果有指定部门 + 可查看自己，采用 OR 条件。即，WHERE (dept_id IN ? OR user_id = ?) return new Parenthesis(new OrExpression(deptExpression, userExpression)); }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
************************************
[+] input: testCreateCouponTemplate_success() { // 准备参数 CouponTemplateCreateReqVO reqVO = randomPojo(CouponTemplateCreateReqVO.class, o -> o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()) .setValidityType(randomEle(CouponTemplateValidityTypeEnum.values()).getType()) .setDiscountType(randomEle(PromotionDiscountTypeEnum.values()).getType()));  // 调用 Long couponTemplateId = couponTemplateService.createCouponTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CouponTemplateDO couponTemplate = couponTemplateMapper.selectById(couponTemplateId); assertPojoEquals(reqVO, couponTemplate); }
createCouponTemplate(CouponTemplateCreateReqVO createReqVO) { // 校验商品范围 validateProductScope(createReqVO.getProductScope(), createReqVO.getProductScopeValues()); // 插入 CouponTemplateDO couponTemplate = CouponTemplateConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); couponTemplateMapper.insert(couponTemplate); // 返回 return couponTemplate.getId(); }
[*] target: assertNotNull(couponTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( couponTemplateId )
************************************
************************************
[+] input: testFinalPositionOfSnakeOnlyUp() { List<String> commands = List.of("UP", "UP"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: shouldBuildElementNotSupportedHint() { Message message = MessageFactory.elementNotSupportedHint(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementNotSupportedHint(String elementLocalName, String semanticVersion) { return INSTANCE.composeMessage( "element-not-supported-hint", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: ColumnA_was_DELETE_BUT_Is_ColumnB_was_still_survive() { // given UserInfo columnA = this.getUserInfo("columnA"); List<PortfolioCard> aCards = new ArrayList<PortfolioCard>(); aCards.add(this.getPortfolioCard(1, columnA)); aCards.add(this.getPortfolioCard(2, columnA)); aCards.add(this.getPortfolioCard(3, columnA));  UserInfo columnB = this.getUserInfo("columnB"); List<PortfolioCard> bCards = new ArrayList<PortfolioCard>(); bCards.add(this.getPortfolioCard(4, columnB)); bCards.add(this.getPortfolioCard(5, columnB)); bCards.add(this.getPortfolioCard(6, columnB));  // when this.saveUserInfo(columnA); this.savePortfolioCards(aCards); this.saveUserInfo(columnB); this.savePortfolioCards(bCards);  this.portfolioCardRepository.deleteByName(columnA.getName());  List<PortfolioCard> resultA = this.portfolioCardRepository.findByName(columnA.getName()); List<PortfolioCard> resultB = this.portfolioCardRepository.findByName(columnB.getName());  // then "<AssertPlaceHolder>"; assertEquals(resultB.size(), bCards.size()); }
findByName(@Param("name") String name);
[*] target: assertTrue(resultA.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( resultA. isEmpty ( ) )
************************************
************************************
[+] input: shouldBuildScriptFormat() { Message message = MessageFactory.scriptFormat(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptFormat(String headerName, String scriptFormat) { return INSTANCE.composeMessage( "script-format", ContextBuilder.builder() .entry("headerName", headerName) .entry("scriptFormat", scriptFormat) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testGetExpression_allDeptDataPermission() { try (MockedStatic<SecurityFrameworkUtils> securityFrameworkUtilsMock = mockStatic(SecurityFrameworkUtils.class)) { // 准备参数 String tableName = "t_user"; Alias tableAlias = new Alias("u"); // mock 方法（LoginUser） LoginUser loginUser = randomPojo(LoginUser.class, o -> o.setId(1L) .setUserType(UserTypeEnum.ADMIN.getValue())); securityFrameworkUtilsMock.when(SecurityFrameworkUtils::getLoginUser).thenReturn(loginUser); // mock 方法（DeptDataPermissionRespDTO） DeptDataPermissionRespDTO deptDataPermission = new DeptDataPermissionRespDTO().setAll(true); when(permissionApi.getDeptDataPermission(same(1L))).thenReturn(deptDataPermission);  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; assertSame(deptDataPermission, loginUser.getContext(DeptDataPermissionRule.CONTEXT_KEY, DeptDataPermissionRespDTO.class)); } }
getExpression(String tableName, Alias tableAlias) { // 只有有登陆用户的情况下，才进行数据权限的处理 LoginUser loginUser = SecurityFrameworkUtils.getLoginUser(); if (loginUser == null) { return null; } // 只有管理员类型的用户，才进行数据权限的处理 if (ObjectUtil.notEqual(loginUser.getUserType(), UserTypeEnum.ADMIN.getValue())) { return null; }  // 获得数据权限 DeptDataPermissionRespDTO deptDataPermission = loginUser.getContext(CONTEXT_KEY, DeptDataPermissionRespDTO.class); // 从上下文中拿不到，则调用逻辑进行获取 if (deptDataPermission == null) { deptDataPermission = permissionApi.getDeptDataPermission(loginUser.getId()); if (deptDataPermission == null) { log.error("[getExpression][LoginUser({}) 获取数据权限为 null]", JsonUtils.toJsonString(loginUser)); throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 未返回数据权限", loginUser.getId(), tableName, tableAlias.getName())); } // 添加到上下文中，避免重复计算 loginUser.setContext(CONTEXT_KEY, deptDataPermission); }  // 情况一，如果是 ALL 可查看全部，则无需拼接条件 if (deptDataPermission.getAll()) { return null; }  // 情况二，即不能查看部门，又不能查看自己，则说明 100% 无权限 if (CollUtil.isEmpty(deptDataPermission.getDeptIds()) && Boolean.FALSE.equals(deptDataPermission.getSelf())) { return new EqualsTo(null, null); // WHERE null = null，可以保证返回的数据为空 }  // 情况三，拼接 Dept 和 User 的条件，最后组合 Expression deptExpression = buildDeptExpression(tableName,tableAlias, deptDataPermission.getDeptIds()); Expression userExpression = buildUserExpression(tableName, tableAlias, deptDataPermission.getSelf(), loginUser.getId()); if (deptExpression == null && userExpression == null) { // TODO 芋艿：获得不到条件的时候，暂时不抛出异常，而是不返回数据 log.warn("[getExpression][LoginUser({}) Table({}/{}) DeptDataPermission({}) 构建的条件为空]", JsonUtils.toJsonString(loginUser), tableName, tableAlias, JsonUtils.toJsonString(deptDataPermission)); //            throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 构建的条件为空", //                    loginUser.getId(), tableName, tableAlias.getName())); return EXPRESSION_NULL; } if (deptExpression == null) { return userExpression; } if (userExpression == null) { return deptExpression; } // 目前，如果有指定部门 + 可查看自己，采用 OR 条件。即，WHERE (dept_id IN ? OR user_id = ?) return new Parenthesis(new OrExpression(deptExpression, userExpression)); }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
************************************
[+] input: testIsAutoRenewShouldReturnTrueWhenCalledWithBothTypesInMap() { //given final CertificateLifetimeActionTrigger trigger = new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10); final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map .of(EMAIL_CONTACTS, trigger, AUTO_RENEW, trigger); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final boolean actual = underTest.isAutoRenew();  //then Assertions."<AssertPlaceHolder>"; }
isAutoRenew() { return getLifetimeActions().containsKey(CertificateLifetimeActionActivity.AUTO_RENEW); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: testCreateConfig_success() { // 准备参数 ConfigSaveReqVO reqVO = randomPojo(ConfigSaveReqVO.class) .setId(null); // 防止 id 被赋值，导致唯一性校验失败  // 调用 Long configId = configService.createConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ConfigDO config = configMapper.selectById(configId); assertPojoEquals(reqVO, config, "id"); assertEquals(ConfigTypeEnum.CUSTOM.getType(), config.getType()); }
createConfig(ConfigSaveReqVO createReqVO) { // 校验参数配置 key 的唯一性 validateConfigKeyUnique(null, createReqVO.getKey());  // 插入参数配置 ConfigDO config = ConfigConvert.INSTANCE.convert(createReqVO); config.setType(ConfigTypeEnum.CUSTOM.getType()); configMapper.insert(config); return config.getId(); }
[*] target: assertNotNull(configId)
[-] pred: org. junit. Assert. assertNotNull ( configId )
************************************
************************************
[+] input: stateWithSameNameShouldBeEqual() { State a = State.of("state"); State b = State.of("state");  Assertions."<AssertPlaceHolder>"; }
of(String name) { return new StateImpl(name); }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
************************************
[+] input: Exception { //given Statement statement = new Statement();  List<Performance> performances = new ArrayList<>(); performances.add(new Performance("hamlet",55)); performances.add(new Performance("as-like",35)); performances.add(new Performance("othello",40)); Invoice invoice = new Invoice("BigCo", performances);  Map<String, Play> playMap = new HashMap<>(); playMap.put("hamlet", new Play("hamlet", PlayType.TRAGEDY)); playMap.put("as-like", new Play("As You Like It", PlayType.COMEDY)); playMap.put("othello", new Play("Othello", PlayType.TRAGEDY)); Plays plays = new Plays(playMap);  String answer = "청구내역 (고객명: BigCo)\n" + "hamlet: $650 55석\n" + "As You Like It: $580 35석\n" + "Othello: $500 40석\n" + "총액: $1730\n" + "적립 포인트: 47점"; //when String result = statement.statement(invoice, plays); //then "<AssertPlaceHolder>"; }
statement(Invoice invoice, Plays plays) throws Exception { StatementData statementData = new StatementData(invoice, plays); return renderPlainText(statementData); }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
************************************
[+] input: testCreateFileConfig_success() { // 准备参数 Map<String, Object> config = MapUtil.<String, Object>builder().put("basePath", "/yunai") .put("domain", "https://www.iocoder.cn").build(); FileConfigSaveReqVO reqVO = randomPojo(FileConfigSaveReqVO.class, o -> o.setStorage(FileStorageEnum.LOCAL.getStorage()).setConfig(config)) .setId(null); // 避免 id 被赋值  // 调用 Long fileConfigId = fileConfigService.createFileConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 FileConfigDO fileConfig = fileConfigMapper.selectById(fileConfigId); assertPojoEquals(reqVO, fileConfig, "id", "config"); assertFalse(fileConfig.getMaster()); assertEquals("/yunai", ((LocalFileClientConfig) fileConfig.getConfig()).getBasePath()); assertEquals("https://www.iocoder.cn", ((LocalFileClientConfig) fileConfig.getConfig()).getDomain()); // 验证 cache assertNull(fileConfigService.getClientCache().getIfPresent(fileConfigId)); }
createFileConfig(FileConfigSaveReqVO createReqVO) { FileConfigDO fileConfig = FileConfigConvert.INSTANCE.convert(createReqVO) .setConfig(parseClientConfig(createReqVO.getStorage(), createReqVO.getConfig())) .setMaster(false); // 默认非 master fileConfigMapper.insert(fileConfig); return fileConfig.getId(); }
[*] target: assertNotNull(fileConfigId)
[-] pred: org. junit. Assert. assertNotNull ( fileConfigId )
************************************
************************************
[+] input: testProcessRoleDeleted() { // 准备参数 Long roleId = randomLongId(); // mock 数据 UserRole UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setRoleId(roleId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02); // mock 数据 RoleMenu RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setRoleId(roleId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processRoleDeleted(roleId); // 断言数据 RoleMenuDO List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); // 断言数据 UserRoleDO List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); assertEquals(1, dbUserRoles.size()); assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
processRoleDeleted(Long roleId);  /** * 处理菜单删除时，删除关联授权数据 * * @param menuId 菜单编号 */ void processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
************************************
[+] input: setClockSync() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setClockSync(false); Assertions."<AssertPlaceHolder>"; }
isClockSync() { return clockSync; }
[*] target: assertFalse(idDefinition.isClockSync())
[-] pred: org. junit. Assert. assertFalse ( idDefinition. isClockSync() )
************************************
************************************
[+] input: setStateLocation() { String stateLocation = MockIdGenerator.INSTANCE.generateAsString(); MachineProperties.StateStorage.Local local = new MachineProperties.StateStorage.Local(); local.setStateLocation(stateLocation); Assertions."<AssertPlaceHolder>"; }
getStateLocation() { return stateLocation; }
[*] target: assertEquals(stateLocation, local.getStateLocation())
[-] pred: org. junit. Assert. assertEquals ( stateLocation, local. getStateLocation() )
************************************
************************************
[+] input: testDefaultConstructor() { op = new Checkpoint(); "<AssertPlaceHolder>"; assertNull(op.getTransactionId()); }
getNumActiveTxns() { return mTxnSet.size(); }
[*] target: assertEquals(0, op.getNumActiveTxns())
[-] pred: org. junit. Assert. assertEquals ( 0, op. getNumActiveTxns() )
************************************
************************************
[+] input: JsonProcessingException {  final String SINK_YAML = "        url: "https://eihycslfo6g2hwrrytyckjkkok.lambda-url.us-east-2.on.aws/"\n"; final HttpSinkConfiguration httpSinkConfiguration = objectMapper.readValue(SINK_YAML, HttpSinkConfiguration.class);  "<AssertPlaceHolder>"; }
isValidAWSUrl() { URL parsedUrl = HttpSinkUtil.getURLByUrlString(url); if(parsedUrl.getProtocol().equals(HTTPS) && (parsedUrl.getHost().contains(AWS_HOST_AMAZONAWS_COM) ||parsedUrl.getHost().contains(AWS_HOST_API_AWS) || parsedUrl.getHost().contains(AWS_HOST_ON_AWS))){ return true; } return false; }
[*] target: assertTrue(httpSinkConfiguration.isValidAWSUrl())
[-] pred: org. junit. Assert. assertTrue ( httpSinkConfiguration. isValidAWSUrl ( ) )
************************************
************************************
[+] input: testIsAutoRenewShouldReturnFalseWhenCalledWithOnlyEmailContactsSet() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final boolean actual = underTest.isAutoRenew();  //then Assertions."<AssertPlaceHolder>"; }
isAutoRenew() { return getLifetimeActions().containsKey(CertificateLifetimeActionActivity.AUTO_RENEW); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: shouldBuildConnectorHint() { Message message = MessageFactory.connectorHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
connectorHint() { return INSTANCE.staticMessage("connector-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testRawToArrayMsgTest() { val msg = "[CQ:at,qq=1122334455]测试消息1[CQ:face,id=1]测试消息2[CQ:video,file=https://test.com/1.mp4][CQ:image,file=test1.image,url=https://test.com/1.jpg]\n[CQ:image,file=test2.image,url=https://test.com/2.jpg]"; val expected = Arrays.asList( new ArrayMsg().setType(MsgTypeEnum.at).setData(Map.of("qq", "1122334455")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息1")), new ArrayMsg().setType(MsgTypeEnum.face).setData(Map.of("id", "1")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息2")), new ArrayMsg().setType(MsgTypeEnum.video).setData(Map.of("file", "https://test.com/1.mp4")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test1.image", "url", "https://test.com/1.jpg")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "\n")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test2.image", "url", "https://test.com/2.jpg")) ); val actual = ShiroUtils.rawToArrayMsg(msg); "<AssertPlaceHolder>"; }
rawToArrayMsg(@NonNull String msg) { List<ArrayMsg> chain = new ArrayList<>(); try { Arrays.stream(msg.split(CQ_CODE_SPLIT)).filter(s -> !s.isEmpty()).forEach(s -> { Optional<Matcher> matcher = RegexUtils.matcher(CQ_CODE_REGEX, s); ArrayMsg item = new ArrayMsg(); Map<String, String> data = new HashMap<>(); if (matcher.isEmpty()) { item.setType(MsgTypeEnum.text); data.put("text", ShiroUtils.unescape(s)); item.setData(data); } if (matcher.isPresent()) { MsgTypeEnum type = MsgTypeEnum.typeOf(matcher.get().group(1)); String[] params = matcher.get().group(2).split(","); item.setType(type); Arrays.stream(params).filter(args -> !args.isEmpty()).forEach(args -> { String k = args.substring(0, args.indexOf("=")); String v = ShiroUtils.unescape(args.substring(args.indexOf("=") + 1)); data.put(k, v); }); item.setData(data); } chain.add(item); }); } catch (Exception e) { log.error("Conversion failed: {}", e.getMessage()); } return chain; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testSaveEntity() { User user = randomUser();  User created = repository.save(user); Assertions."<AssertPlaceHolder>"; }
save(T entity);
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
************************************
[+] input: testValidByronAddr() { boolean isValid = AddressUtil.isValidAddress("DdzFFzCqrhszg6cqZvDhEwUX7cZyNzdycAVpm4Uo2vjKMgTLrVqiVKi3MBt2tFAtDe7NkptK6TAhVkiYzhavmKV5hE79CWwJnPCJTREK");  "<AssertPlaceHolder>"; }
isValidAddress(String addr) { try { addressToBytes(addr);  return true; } catch (AddressExcepion e) { return false; } catch (AddressRuntimeException e) { return false; } }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
************************************
[+] input: getQuantidadeDePessoasQueComecamComALetra_test03() { List<String> pessoas = new ArrayList<>(); long quantidade = ArrayLists.getQuantidadeDePessoasQueComecamComALetra(pessoas, "A");  "<AssertPlaceHolder>"; }
getQuantidadeDePessoasQueComecamComALetra(List<String> pessoas, String letra) { return 0; }
[*] target: assertEquals(0, quantidade)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidade )
************************************
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyName() { //given  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
containsEntity(@NonNull final K entityId) { return containsName(entityId.id()) && entities.get(entityId.id()).containsKey(entityId.version()); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: testCreateDictType_success() { // 准备参数 DictTypeSaveReqVO reqVO = randomPojo(DictTypeSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 避免 id 被赋值  // 调用 Long dictTypeId = dictTypeService.createDictType(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictTypeDO dictType = dictTypeMapper.selectById(dictTypeId); assertPojoEquals(reqVO, dictType, "id"); }
createDictType(DictTypeSaveReqVO createReqVO) { // 校验字典类型的名字的唯一性 validateDictTypeNameUnique(null, createReqVO.getName()); // 校验字典类型的类型的唯一性 validateDictTypeUnique(null, createReqVO.getType());  // 插入字典类型 DictTypeDO dictType = BeanUtils.toBean(createReqVO, DictTypeDO.class); dictType.setDeletedTime(LocalDateTimeUtils.EMPTY); // 唯一索引，避免 null 值 dictTypeMapper.insert(dictType); return dictType.getId(); }
[*] target: assertNotNull(dictTypeId)
[-] pred: org. junit. Assert. assertNotNull ( dictTypeId )
************************************
************************************
[+] input: SQLException { final Connection mockConn = Mockito.mock(Connection.class); stubTopologyQueryMultiWriter(mockConn);  final HostInfo clusterHostInfo = new HostInfo(clusterInstanceHostPattern, null, defaultPort, false);  spyProvider.setClusterInstanceTemplate(clusterHostInfo);  final List<HostInfo> topology = spyProvider.getTopology(mockConn, false); "<AssertPlaceHolder>"; final List<HostInfo> readers = topology.subList(AuroraTopologyService.WRITER_CONNECTION_INDEX + 1, topology.size());  assertEquals(3, topology.size()); assertEquals(2, readers.size());  final HostInfo master1 = topology.get(AuroraTopologyService.WRITER_CONNECTION_INDEX); final HostInfo master2 = topology.get(2); final HostInfo reader = topology.get(1);  assertEquals("writer-instance-1.XYZ.us-east-2.rds.amazonaws.com", master1.getHost()); assertEquals(defaultPort, master1.getPort()); assertEquals("writer-instance-1", master1.getInstanceIdentifier()); assertTrue(master1.isWriter());  assertEquals("writer-instance-2.XYZ.us-east-2.rds.amazonaws.com", master2.getHost()); assertEquals(defaultPort, master2.getPort()); assertEquals("writer-instance-2", master2.getInstanceIdentifier()); // A second writer indicates the topology is in a failover state, and the second writer is // the obsolete one. It will be come a reader shortly, so we mark it as such assertFalse(master2.isWriter());  assertEquals("reader-instance.XYZ.us-east-2.rds.amazonaws.com", reader.getHost()); assertEquals(defaultPort, reader.getPort()); assertEquals("reader-instance", reader.getInstanceIdentifier()); assertFalse(reader.isWriter()); }
getTopology(Connection conn, boolean forceUpdate) { ClusterTopologyInfo clusterTopologyInfo = topologyCache.get(this.clusterId);  if (clusterTopologyInfo == null || clusterTopologyInfo.hosts.isEmpty() || forceUpdate || refreshNeeded(clusterTopologyInfo)) {  ClusterTopologyInfo latestTopologyInfo = queryForTopology(conn);  if (!latestTopologyInfo.hosts.isEmpty()) { clusterTopologyInfo = updateCache(clusterTopologyInfo, latestTopologyInfo); } else { return (clusterTopologyInfo == null || forceUpdate) ? new ArrayList<>() : clusterTopologyInfo.hosts; } }  return clusterTopologyInfo.hosts; }
[*] target: assertNotNull(topology)
[-] pred: org. junit. Assert. assertNotNull ( topology )
************************************
************************************
[+] input: get_should_create_a_server() { when(peerForwarderConfiguration.getMaxConnectionCount()).thenReturn(500); final Server server = createObjectUnderTest().get();  Assertions."<AssertPlaceHolder>"; assertThat(server, instanceOf(Server.class)); }
get() { final ServerBuilder sb = Server.builder();  sb.disableServerHeader();  if (peerForwarderConfiguration.isSsl()) { final CertificateProvider certificateProvider = certificateProviderFactory.getCertificateProvider(); final Certificate certificate = certificateProvider.getCertificate(); LOG.info("Creating http source with SSL/TLS enabled."); // TODO: enable encrypted key with password sb.https(peerForwarderConfiguration.getServerPort()) .tls( new ByteArrayInputStream(certificate.getCertificate().getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream(certificate.getPrivateKey().getBytes(StandardCharsets.UTF_8) ) );  if (peerForwarderConfiguration.getAuthentication() == ForwardingAuthentication.MUTUAL_TLS) { if (peerForwarderConfiguration.isSslFingerprintVerificationOnly()) { final FingerprintTrustManagerFactory fingerprintTrustManagerFactory = new FingerprintTrustManagerFactory(certificate.getFingerprint()); sb.tlsCustomizer(sslContextBuilder -> sslContextBuilder.trustManager(fingerprintTrustManagerFactory) .clientAuth(ClientAuth.REQUIRE)); } else { sb.tlsCustomizer(sslContextBuilder -> sslContextBuilder.trustManager( new ByteArrayInputStream(certificate.getCertificate().getBytes(StandardCharsets.UTF_8)) ) .clientAuth(ClientAuth.REQUIRE)); } } } else { LOG.warn("Creating Peer Forwarder server without SSL/TLS. This is not secure."); sb.http(peerForwarderConfiguration.getServerPort()); }   sb.maxNumConnections(peerForwarderConfiguration.getMaxConnectionCount()); sb.requestTimeout(Duration.ofMillis(peerForwarderConfiguration.getRequestTimeout())); final int threadCount = peerForwarderConfiguration.getServerThreadCount(); final ScheduledThreadPoolExecutor blockingTaskExecutor = new ScheduledThreadPoolExecutor(threadCount); sb.blockingTaskExecutor(blockingTaskExecutor, true); // TODO: Add throttling service  sb.annotatedService(PeerForwarderConfiguration.DEFAULT_PEER_FORWARDING_URI, peerForwarderHttpService);  return sb.build(); }
[*] target: assertNotNull(server)
[-] pred: org. junit. Assert. assertNotNull ( server )
************************************
************************************
[+] input: generateAccessToken() { String accessToken = accessTokenService.generateAccessToken(UUID.randomUUID().toString()); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
validateAccessToken(String token, PayloadDTO payloadDTO) { String[] parts = token.split("\\."); if (parts.length != 3 || payloadDTO == null) return false;  String payload = parts[1]; String signature = parts[2]; return generateSignature(payload).equals(signature); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testOneProvider() { Set<Service<MyService>> services = ServiceRegistry.INSTANCE.allServicesFor(MyService.class); System.out.println(services); Assertions."<AssertPlaceHolder>"; }
allServicesFor(@NotNull Class<T> clazz) { Objects.requireNonNull(clazz, "clazz"); if (!hasRegistration(clazz)) { return Collections.emptySet(); }  List<Service<?>> services = servicesMap.get(clazz); if (services == null || services.isEmpty()) { return Collections.emptySet(); }  Set<Service<T>> ret = new HashSet<>(); for (Service<?> service : services) { ret.add((Service<T>) service); }  return ret; }
[*] target: assertEquals(1, services.size())
[-] pred: org. junit. Assert. assertEquals ( 1, services. size ( ) )
************************************
************************************
[+] input: shouldBuildAttributeRemoved() { Message message = MessageFactory.attributeRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
attributeRemoved(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "attribute-removed", ContextBuilder.builder() .entry("attributeLocalName", attributeLocalName) .entry("elementLocalName", elementLocalName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: profitTest() { //given int answer = 230; //when int result = sampleProvince.profit(); //then "<AssertPlaceHolder>"; }
profit() { return demandValue() - demandCost(); }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
************************************
[+] input: testDivide4() { int a = 3; int b = 5; int res = Calculadora.divide(Calculadora.multiplica(a, b) + 1, b); "<AssertPlaceHolder>"; }
multiplica(int a, int b) { return a * b; }
[*] target: assertEquals(a, res)
[-] pred: org. junit. Assert. assertEquals ( a, res )
************************************
************************************
[+] input: testUpdateWithTypeEmbed() { var intCell = RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(); var rows = List.of( RecordRowDesc.builder().cells(Map.of("key", intCell)).build() ); var req = UpdateTableEmbeddedRequest.builder() .tableName("t") .keyColumn("key") .rows(rows) .build();  // update with type this.dataStore.updateWithTypeEmbed(req); var result = this.dataStore.scan(DataStoreScanRequest.builder() .tables(List.of(DataStoreScanRequest.TableInfo.builder() .tableName("t") .keepNone(true) .build())) .keepNone(true) .encodeWithType(true) .build()); var expected = new RecordList( null, Map.of("key", ColumnHintsDesc.builder() .typeHints(List.of("INT32")) .columnValueHints(List.of("1")) .build()), List.of(Map.of("key", Map.of("type", "INT32", "value", "00000001"))), "00000001", "INT32" ); "<AssertPlaceHolder>"; }
scan(DataStoreScanRequest req) { var limit = req.getLimit(); if (limit > QUERY_LIMIT) { throw new SwValidationException(SwValidationException.ValidSubject.DATASTORE, "limit must be less or equal to " + QUERY_LIMIT + ". request=" + req); } if (limit < 0) { limit = QUERY_LIMIT; } int finalLimit = limit; return scanRecords(req, new ResultResolver<>() { @Override public RecordList apply( List<TableMeta> tables, Map<String, ColumnSchema> columnSchemaMap, List<TableRecords> records ) { BaseValue lastKey = null; List<Map<String, Object>> ret = new ArrayList<>(); while (!records.isEmpty() && ret.size() < finalLimit) { lastKey = Collections.min(records, (a, b) -> { var x = a.record.getKey(); var y = b.record.getKey(); return x.compareTo(y); }).record.getKey(); Map<String, Object> record = null; for (var r : records) { if (r.record.getKey().equals(lastKey)) { if (r.record.isDeleted()) { record = null; } else { if (record == null) { record = new HashMap<>(); } record.putAll( RecordEncoder.encodeRecord(r.record.getValues(), req.isRawResult(), req.isEncodeWithType())); } if (r.iterator.hasNext()) { r.record = r.iterator.next(); } else { r.record = null; } } } if (record != null) { if (!req.isKeepNone()) { record.entrySet().removeIf(x -> x.getValue() == null); } ret.add(record); } records.removeIf(r -> r.record == null); } var columnStatistics = new HashMap<String, ColumnStatistics>(); for (var table : tables) { table.table.getColumnStatistics(table.columns).forEach((k, v) -> columnStatistics.computeIfAbsent(k, x -> new ColumnStatistics()).merge(v)); } return new RecordList( columnSchemaMap, columnStatistics.entrySet().stream().collect( Collectors.toMap(Entry::getKey, entry -> entry.getValue().toColumnHintsDesc())), ret, (String) BaseValue.encode(lastKey, false, false), BaseValue.getColumnType(lastKey).name() ); }  @Override public boolean stop(int recordSize) { return recordSize >= finalLimit; }  @Override public RecordList empty() { return new RecordList( Collections.emptyMap(), Collections.emptyMap(), Collections.emptyList(), null, null); } } ); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testCreateSeckillActivity_success() { // 准备参数 SeckillActivityCreateReqVO reqVO = randomPojo(SeckillActivityCreateReqVO.class);  // 调用 Long seckillActivityId = seckillActivityService.createSeckillActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillActivityDO seckillActivity = seckillActivityMapper.selectById(seckillActivityId); assertPojoEquals(reqVO, seckillActivity); }
createSeckillActivity(SeckillActivityCreateReqVO createReqVO) { // 1.1 校验商品秒杀时段是否冲突 validateProductConflict(createReqVO.getConfigIds(), createReqVO.getSpuId(), null); // 1.2 校验商品是否存在 validateProductExists(createReqVO.getSpuId(), createReqVO.getProducts());  // 2.1 插入秒杀活动 SeckillActivityDO activity = SeckillActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()) .setStock(getSumValue(createReqVO.getProducts(), SeckillProductBaseVO::getStock, Integer::sum)); activity.setTotalStock(activity.getStock()); seckillActivityMapper.insert(activity); // 2.2 插入商品 List<SeckillProductDO> products = SeckillActivityConvert.INSTANCE.convertList(createReqVO.getProducts(), activity); seckillProductMapper.insertBatch(products); return activity.getId(); }
[*] target: assertNotNull(seckillActivityId)
[-] pred: org. junit. Assert. assertNotNull ( seckillActivityId )
************************************
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "existingEntryId"; final String deletedImageId = "deleted image"; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Media media = Mockito.mock(Media.class); final String expectedErrorMessage = String.format("Item image with id %s not found.", deletedImageId); final LcEntry lcEntry = Mockito.mock(LcEntry.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId); project.getLabelConfiguration().setEntries(Set.of(lcEntry));  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)).thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()).thenReturn(project); Mockito.when(labelTask.getLabelTaskState()).thenReturn(LabelTaskState.COMPLETED); Mockito.when(labelTask.getMedia()).thenReturn(media); Mockito.when(lcEntry.getEntryKey()).thenReturn(lcEntryKey); Mockito.when(media.isDeleted()).thenReturn(true); Mockito.when(media.getId()).thenReturn(deletedImageId);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
streamSegmentationBitmap(String taskId, String lcEntryKey, HttpServletResponse response) throws IOException {  // Permission check: authenticated user DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE, OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  List<LabelTaskState> labelTaskStateList = new ArrayList<>(); labelTaskStateList.add(LabelTaskState.COMPLETED); labelTaskStateList.add(LabelTaskState.SKIPPED); labelTaskStateList.add(LabelTaskState.REVIEWED);  LabelTask labelTask =  labelTaskRepository .findById(taskId) .orElseThrow(() -> new NotFoundException(LABEL_TASK_PLACEHOLDER, "id", "" + taskId));  if (!labelTaskStateList.contains(labelTask.getLabelTaskState())) { // The task is not in allowed / supported state. throw new GenericException(WRONG_LABEL_TASK_STATE, null, null, labelTask.getId()); }  // Permission check: is the user admin or user of the project. Project project = labelTask.getProject(); String owner = project.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  /* * Check if a LcEntry with the given export key exists within the documentation. */ Optional<LcEntry> optionalLcEntry = project.getLabelConfiguration().getEntries().stream() .filter(entry -> URLDecoder.decode(entry.getEntryKey(), StandardCharsets.UTF_8).equals(lcEntryKey)) .findFirst();  if (optionalLcEntry.isEmpty()) { // no entry with the given key is defined. throw new NotFoundException(LC_ENTRY_PLACEHOLDER, "entry_key", lcEntryKey); }  Media taskMedia = labelTask.getMedia(); if (taskMedia.isDeleted()) { throw new NotFoundException(IMAGE_PLACEHOLDER, "id", taskMedia.getId()); }  List<LcEntryValue> values = lcEntryValueRepository .findAllByTaskIdAndEntryKeyAndEntryType(taskId, lcEntryKey, LcEntryType.IMAGE_SEGMENTATION);  List<List<PointCollection>> pointCollections = values.stream() .filter(value -> value instanceof LcEntryImageSegmentationValue) .map(value -> ((LcEntryImageSegmentationValue) value).getPointsCollection()) .collect(Collectors.toList());  ImageSize image = (new ImageSizeReader(tika)).getSize(taskMedia); int height = image.getHeight(); int width = image.getWidth();  BufferedImage img = (new SegmentationBitmap(height, width)).addSegmentations(pointCollections).apply().asBufferedImage();  // Stream the Image String mimeType = "image/bmp"; String formatName = mimeType.split("/")[1].toLowerCase(Locale.ENGLISH);  // Stream the Image response.setHeader("Content-Type", mimeType); ImageIO.write(img, formatName, response.getOutputStream()); }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
************************************
[+] input: isValidDatasetArn_returns_true_for_valid_dataset_arn() { final String datasetArn = "arn:aws:personalize::123456789012:dataset/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
isValidDatasetArn() { if (datasetArn == null) { return true; } final Arn arn = getArn(); boolean status = true; if (!AWS_PERSONALIZE.equals(arn.service())) { status = false; } final Optional<String> resourceType = arn.resource().resourceType(); if (resourceType.isEmpty() || !resourceType.get().equals(AWS_PERSONALIZE_DATASET)) { status = false; } return status; }
[*] target: assertTrue(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertTrue ( objectUnderTest. isValidDatasetArn ( ) )
************************************
************************************
[+] input: testDense() {  DoubleSparseNdArray instance = new DoubleSparseNdArray(indices, values, DimensionalSpace.create(shape)); DoubleNdArray denseInstance = instance.toDense(); DoubleNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { DoubleDataBuffer dataBuffer = DataBuffers.ofDoubles(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: getFunctions() { PrometheusStorageEngine engine = new PrometheusStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(2, functionResolverCollection.size()); Iterator<FunctionResolver> iterator = functionResolverCollection.iterator(); assertTrue(iterator.next() instanceof QueryRangeTableFunctionResolver); assertTrue(iterator.next() instanceof QueryExemplarsTableFunctionResolver); }
getFunctions() { ArrayList<FunctionResolver> functionList = new ArrayList<>(); functionList.add(new QueryRangeTableFunctionResolver(prometheusClient)); functionList.add(new QueryExemplarsTableFunctionResolver(prometheusClient)); return functionList; }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
************************************
[+] input: statUuidGenerator() { var stat = UuidGenerator.INSTANCE.stat(); Assertions."<AssertPlaceHolder>"; }
stat();
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_greater_than_max_request_size_THEN_return_true() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes() + 1) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetRequestSize )
************************************
************************************
[+] input: save() { var request = OperationLogRequest.builder() .operatorUserId(-1000) .operatorUsername("ut") .operatorNickname("ut") .operationModule("system") .operationCode("updateEmail") .operationName("更新邮箱") .operationResponse(JsonData.ok()) .isSuccess(true) .involvedProjectId(null) .involvedGroupId(null) .involvedUserId(null) .build(); Long id = operationLogService.save(request); Assertions."<AssertPlaceHolder>"; }
save(OperationLogRequest request) { OperationLog pojo = operationLogRequestConverter.toPojo(request); return operationLogDao.insertAndReturnId(pojo); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: setBrokenThreshold() { int brokenThreshold = 10; MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); clockBackwards.setBrokenThreshold(brokenThreshold); Assertions."<AssertPlaceHolder>"; }
getBrokenThreshold() { return brokenThreshold; }
[*] target: assertEquals(brokenThreshold, clockBackwards.getBrokenThreshold())
[-] pred: org. junit. Assert. assertEquals ( brokenThreshold, clockBackwards. getBrokenThreshold() )
************************************
************************************
[+] input: setNamespace() { String namespace = "segment-namespace"; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
getNamespace() { return namespace; }
[*] target: assertEquals(namespace, idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, idDefinition. getNamespace() )
************************************
************************************
[+] input: testCompareEquals() { DateTimeStamp object1 = new DateTimeStamp("2018-04-04T10:10:00.586-0100"); DateTimeStamp object2 = new DateTimeStamp("2018-04-04T10:10:00.586-0100"); "<AssertPlaceHolder>"; }
compareTo(DateTimeStamp dateTimeStamp) { return  comparator.compare(this,dateTimeStamp); }
[*] target: assertEquals(0, object1.compareTo(object2))
[-] pred: org. junit. Assert. assertEquals ( 0, object1. compareTo ( object2 ) )
************************************
************************************
[+] input: IOException { KeyManager km = SingleConnectorServicesProvider.getKeyFromKeyStoreUri(new File(keystoreFileName).toURI().toString(), keystoreFilePass); "<AssertPlaceHolder>"; }
getKeyFromKeyStoreUri(String keystoreUri, String keystorePassword) throws URISyntaxException, KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException { if(keystorePassword== null) { keystorePassword = ""; } String keyAlias = null; KeyStore store = KeyStore.getInstance("pkcs12");  URI uriParser = new URI(keystoreUri); String scheme = uriParser.getScheme();  if (scheme.equalsIgnoreCase("data")){ // example: "data:application/x-pkcs12;base64,MIACAQMwgAY...gtc/qoCAwGQAAAA" String[] schemeSpecificParts = uriParser.getSchemeSpecificPart().split(";"); String contentType = schemeSpecificParts[0]; if (contentType.equalsIgnoreCase("application/x-pkcs12") || contentType.equalsIgnoreCase("application/octet-stream")){ String[] dataParts = schemeSpecificParts[1].split(","); String encodingType = dataParts[0]; if (encodingType.equalsIgnoreCase("base64")){ String keystoreBase64 = dataParts[1]; ByteArrayInputStream keystoreInputStream = new ByteArrayInputStream(Base64.getDecoder().decode(keystoreBase64)); store.load(keystoreInputStream, keystorePassword.toCharArray()); } } } else if (scheme.equalsIgnoreCase("file")) { String keystoreFile = uriParser.getPath(); String query = uriParser.getRawQuery(); try { String[] queryParts = query.split("="); String parameterName = queryParts[0]; String parameterValue = queryParts[1]; if (parameterName.equalsIgnoreCase("alias")){ // example: "file:src/test/resources/certs/keystore.p12?alias=key2" keyAlias = parameterValue; } } catch (NullPointerException|PatternSyntaxException e){ // take the first key from KeyStore, whichever it is // example: "file:src/test/resources/certs/keystore.p12" } FileInputStream in = new FileInputStream(keystoreFile); store.load(in, keystorePassword.toCharArray()); }  KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); try { kmf.init(store, keystorePassword.toCharArray()); final X509KeyManager origKm = (X509KeyManager)kmf.getKeyManagers()[0]; if(keyAlias == null) { return origKm; } else { final String finalKeyAlias = keyAlias; return new X509KeyManager() {  @Override public String chooseClientAlias(String[] arg0, Principal[] arg1, Socket arg2) { return finalKeyAlias; }  @Override public String chooseServerAlias(String arg0, Principal[] arg1, Socket arg2) { return origKm.chooseServerAlias(arg0, arg1, arg2); }  @Override public X509Certificate[] getCertificateChain(String alias) { return origKm.getCertificateChain(alias); }  @Override public String[] getClientAliases(String arg0, Principal[] arg1) { return origKm.getClientAliases(arg0, arg1); }  @Override public PrivateKey getPrivateKey(String alias) { return origKm.getPrivateKey(alias); }  @Override public String[] getServerAliases(String arg0, Principal[] arg1) { return origKm.getServerAliases(arg0, arg1); } }; } } catch (UnrecoverableKeyException e) { log.log(Level.WARNING, "Could not create KeyManager", e); return null; } }
[*] target: assertNotNull(km)
[-] pred: org. junit. Assert. assertNotNull ( km )
************************************
************************************
[+] input: test_with_valid_endpoint_should_download_file() { when(maxMindDatabaseConfig.getDatabasePaths()).thenReturn(Map.of("geolite2-city", path)); final ManifestDownloadService objectUnderTest = createObjectUnderTest(); objectUnderTest.initiateDownload();  final File file = new File(OUTPUT_DIR + File.separator + "geolite2-city.mmdb"); "<AssertPlaceHolder>";  file.deleteOnExit(); final File directory = new File(OUTPUT_DIR); directory.deleteOnExit(); }
initiateDownload() { final Set<String> databasePaths = maxMindDatabaseConfig.getDatabasePaths().keySet(); for (final String key: databasePaths) { final Manifest manifest = deserializeManifestFile(maxMindDatabaseConfig.getDatabasePaths().get(key));  final String manifestFilePath = manifest.getDbName(); final String zipFileName = manifestFilePath.substring(0, manifestFilePath.lastIndexOf(".")).concat(ZIP_FILE_EXTENSION); final String zipFilePath = directoryName + File.separator + zipFileName;  downloadZipFile(manifest.getUrl(), zipFilePath); unzipDownloadedFile(zipFilePath, directoryName, key + MAXMIND_DATABASE_EXTENSION); } }
[*] target: assertTrue(file.exists())
[-] pred: org. junit. Assert. assertTrue ( file. exists ( ) )
************************************
************************************
[+] input: testUpdateAfterApproval_approved() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); // 有序，方便判断 requestedScopes.put("read", true); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(2, result.size()); // read assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); // write assertEquals(userId, result.get(1).getUserId()); assertEquals(userType, result.get(1).getUserType()); assertEquals(clientId, result.get(1).getClientId()); assertEquals("write", result.get(1).getScope()); assertFalse(result.get(1).getApproved()); assertFalse(DateUtils.isExpired(result.get(1).getExpiresTime())); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: testHash() { for (int i = 0; i < 10; i++) { System.out.println(random.nextHex()); }  for (int i = 0; i < 10; i++) { String string = random.nextHex(i); System.out.println(string); Assertions."<AssertPlaceHolder>"; } }
nextHex(int length) { StringBuilder sb = new StringBuilder(); while (sb.length() < length) { sb.append(Integer.toHexString(nextInt())); } sb.setLength(length); return sb.toString(); }
[*] target: assertEquals(string.length(), i)
[-] pred: org. junit. Assert. assertEquals ( string. length ( ), i )
************************************
************************************
[+] input: testConstructorCause() { String message = "This is the message"; Throwable cause = new RuntimeException(); String body = "This is the body"; int code = 403;  HttpResponseException exception = new HttpResponseException(message, cause, body, code);  assertEquals(message, exception.getMessage()); assertSame(cause, exception.getCause()); assertEquals(body, exception.getBody()); "<AssertPlaceHolder>"; }
getCode() { return code; }
[*] target: assertEquals(code, exception.getCode())
[-] pred: org. junit. Assert. assertEquals ( code, exception. getCode() )
************************************
************************************
[+] input: returnsNullWhenNicknameDoesntExist() { var cm = CoinmasterRegistry.findCoinmasterByNickname("thisdoesntexist"); "<AssertPlaceHolder>"; }
findCoinmasterByNickname(final String nickname) { List<String> matchingNames = StringUtilities.getMatchingNames(NICKNAMES, nickname);  if (matchingNames.size() != 1) { return null; }  String name = matchingNames.get(0);  return Arrays.stream(COINMASTERS) .filter(data -> name.equalsIgnoreCase(data.getNickname())) .findAny() .orElse(null); }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
************************************
[+] input: convertToEntityAttributeNull() { AnimalClassificacaoEtariaConverter animalConverter = new AnimalClassificacaoEtariaConverter(); AnimalClassificacaoEtaria convert = animalConverter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String descricao) { if(descricao == null) { return null; }  return AnimalClassificacaoEtaria.of(descricao); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: shouldBuildTimerExpressionNotSupported() { String timerType = random(); String timerValue = random(); String eventType = random(); String semanticVersion = random(); Message message = timerExpressionNotSupported(timerType, timerValue, eventType, semanticVersion); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Timer of type '" + timerType + "' with value '" + timerValue + "' is not supported for event type '" + eventType + "' in Zeebe version '" + semanticVersion + "'."); }
timerExpressionNotSupported( String timerType, String timerExpression, String eventType, String semanticVersion) { return INSTANCE.composeMessage( "timer-expression-not-supported", ContextBuilder.builder() .entry("timerType", timerType) .entry("timerExpression", timerExpression) .entry("eventType", eventType) .entry("semanticVersion", semanticVersion) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testDense() { int[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  IntSparseNdArray instance = new IntSparseNdArray(indices, values, DimensionalSpace.create(shape)); IntNdArray denseInstance = instance.toDense(); IntNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { IntDataBuffer dataBuffer = DataBuffers.ofInts(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: stringKeyedMapCompactFormat() { final Schema origSchema = SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build();  final Map<Object, Object> origValue = Map.of("field1", 1, "field2", 2);  // Use the newer compact format for map entries with string keys converter = createDataConverter(true); final Schema preProcessedSchema = converter.preProcessSchema(origSchema); assertEquals(SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build(), preProcessedSchema); final Map<?, ?> newValue = (Map<?, ?>) converter.preProcessValue(origValue, origSchema, preProcessedSchema); "<AssertPlaceHolder>"; }
preProcessValue(final Object value, final Schema schema, final Schema newSchema) { // Handle missing schemas and acceptable null values if (schema == null) { return value; }  if (value == null) { return preProcessNullValue(schema); }  // Handle logical types final String schemaName = schema.name(); if (schemaName != null) { final Object result = preProcessLogicalValue(schemaName, value); if (result != null) { return result; } }  final Schema.Type schemaType = schema.type(); switch (schemaType) { case ARRAY : return preProcessArrayValue(value, schema, newSchema); case MAP : return preProcessMapValue(value, schema, newSchema); case STRUCT : return preProcessStructValue(value, schema, newSchema); default : return value; } }
[*] target: assertEquals(origValue, newValue)
[-] pred: org. junit. Assert. assertEquals ( origValue, newValue )
************************************
************************************
[+] input: readContainerNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_CONTAINER_NAME); final String expected = "fooservice"; "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_log_send_interval_equal_to_max_log_send_interval_THEN_return_true() { boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME, thresholdConfig.getMaxRequestSizeBytes(),ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetTime)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetTime )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test03() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("testandoOTesteDoTestador"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(4, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 4, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: createConnectionViaUserPwdSqlException() { try (MockedStatic<DriverManager> driverMgr = Mockito.mockStatic(DriverManager.class)) { driverMgr.when(() -> DriverManager.getConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())) .thenThrow(SQLException.class);  Connection conn = DbUtil.createConnectionViaUserPwd("a", "b", "c"); "<AssertPlaceHolder>"; } }
createConnectionViaUserPwd( @NonNull String username, @NonNull String pwd, @NonNull String dbEndpoint) { Connection connection;  try { connection = DriverManager.getConnection(JDBC_PREFIX + dbEndpoint, username, pwd); logger.info("Connection Established"); return connection;  } catch (SQLException e) { logger.info("Connection FAILED"); logger.error(e.getMessage(), e); }  return null; }
[*] target: assertNull(conn)
[-] pred: org. junit. Assert. assertNull ( conn )
************************************
************************************
[+] input: notHealthyWithRetry() { when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedException.class);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(3)).isMemoryHealthy(anyLong()); }
isHealthy() { try { ByteSizeValue limit = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT); Supplier<Boolean> booleanSupplier = Retry.decorateSupplier(retry, () -> memoryMonitor.isMemoryHealthy(limit.getBytes())); return booleanSupplier.get(); } catch (Exception e) { return false; } }
[*] target: assertFalse(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertFalse ( resourceMonitor. isHealthy() )
************************************
************************************
[+] input: fromOptionValue_users_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("users"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("USERS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: testGivenPersonDTOThenReturnSavedMessage() { PersonDTO personDTO = createFakeDTO(); Person expectedSavedPerson = createFakeEntity();  when(personMapper.toModel(personDTO)).thenReturn(expectedSavedPerson); when(personRepository.save(any(Person.class))).thenReturn(expectedSavedPerson); //        when(personRepository.save(any(Person.class))) //                .thenReturn(expectedSavedPerson);  MessageResponseDTO expectedMessage = createExpectedResponse(expectedSavedPerson.getId()); MessageResponseDTO successMessage = personService.createPerson(personDTO);  "<AssertPlaceHolder>";  }
createPerson(PersonDTO personDTO) { Person personToSave = personMapper.toModel(personDTO); Person savedPerson = personRepository.save(personToSave);  return createMessageResponseDTO(savedPerson.getId(), "Created Person with ID "); }
[*] target: assertEquals(expectedMessage, successMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, successMessage )
************************************
************************************
[+] input: testSuma4() { int res = Calculadora.suma(0, 0); "<AssertPlaceHolder>"; }
suma(int a, int b) { return a + b; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
************************************
[+] input: getAllProjectsFromOrganisation_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner(anyString())).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService.getAllProjectsFromOrganisation("eforce21");  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner(anyString()); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner(anyString()); }
getAllProjectsFromOrganisation(String orgId) { //Permissions check DataGymSecurity.isAdminOrUser(orgId, false);  return projectRepository .findAllByDeletedIsFalseAndOwner(orgId).stream() .filter(project -> !project.getName().equals(DUMMY_PROJECT_PLACEHOLDER)) .map(currentProject -> { ProjectViewModel projectViewModel = ProjectMapper.mapToProjectViewModel(currentProject, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  boolean projectExportable = isProjectExportable(currentProject.getId()); projectViewModel.setExportable(projectExportable); return projectViewModel; }) .collect(Collectors.toList()); }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
************************************
[+] input: testCopy() { // Tests round-tripping a json document that contains all event types and various kinds of nesting  String json = "{\n" + "  "p1": "str1",\n" + "  "p2": 42,\n" + "  "p3": ["str31", "str32"],\n" + "  "p4": {\n" + "    "p41": "str41",\n" + "    "p42": ["str421", "str422"],\n" + "    "p43": {\n" + "      "p431": "str431"\n" + "    },\n" + "    "p44": true,\n" + "    "p45": false,\n" + "    "p46": 3.14\n" + "  },\n" + "  "p5": [{\n" + "    "p51": {\n" + "      "p511": "str511"\n" + "    }\n" + "  }],\n" + "  "p6": null\n" + "}\n";  json = normalizeIndent(json);  JsonProvider provider = JsonpUtils.provider();  JsonParser parser = provider.createParser(new StringReader(json)); StringWriter sw = new StringWriter(); JsonGenerator generator = provider.createGenerator(sw);  JsonpUtils.copy(parser, generator); parser.close(); generator.close();  "<AssertPlaceHolder>"; }
toString() { return "(in object at " + super.toString().substring(1); }
[*] target: assertEquals(json, sw.toString())
[-] pred: org. junit. Assert. assertEquals ( json, sw. toString ( ) )
************************************
************************************
[+] input: testOnTickPriceDiffAbort() { when(priceDiffConditionToAbort.test(anyDouble())).thenReturn(true); tradeIntent.onTick(tick); "<AssertPlaceHolder>"; verify(context, never()).submitOrderReq(any(), any(), any(), anyInt(), anyDouble()); }
hasTerminated() { return terminated || accVol >= volume; }
[*] target: assertTrue(tradeIntent.hasTerminated())
[-] pred: org. junit. Assert. assertTrue ( tradeIntent. hasTerminated() )
************************************
************************************
[+] input: ensureFreeSpace_underLimit() { File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile);  when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES - 1); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace(); "<AssertPlaceHolder>"; verify(fileUtils, never()).safeDelete(any()); }
ensureFreeSpace() { tryFreeingSpace(); // play nice if disk is getting full return fileProvider.provideSpansDirectory().getFreeSpace() > limitInBytes(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldBuildDueDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.dueDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'dueDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
dueDate(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "due-date", ContextBuilder.builder() .context( supportedAttributeExpression("dueDate", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: signalWithSameNameShouldBeEqual() { Signal a = Signal.of("signal"); Signal b = Signal.of("signal");  Assertions."<AssertPlaceHolder>"; }
of(String name) { return new SignalImpl(name); }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
************************************
[+] input: IOException { // Given String taskId = "not-existing"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Item task with id not-existing not found."; HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  // When try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); // Then fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
streamSegmentationBitmap(String taskId, String lcEntryKey, HttpServletResponse response) throws IOException {  // Permission check: authenticated user DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE, OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  List<LabelTaskState> labelTaskStateList = new ArrayList<>(); labelTaskStateList.add(LabelTaskState.COMPLETED); labelTaskStateList.add(LabelTaskState.SKIPPED); labelTaskStateList.add(LabelTaskState.REVIEWED);  LabelTask labelTask =  labelTaskRepository .findById(taskId) .orElseThrow(() -> new NotFoundException(LABEL_TASK_PLACEHOLDER, "id", "" + taskId));  if (!labelTaskStateList.contains(labelTask.getLabelTaskState())) { // The task is not in allowed / supported state. throw new GenericException(WRONG_LABEL_TASK_STATE, null, null, labelTask.getId()); }  // Permission check: is the user admin or user of the project. Project project = labelTask.getProject(); String owner = project.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  /* * Check if a LcEntry with the given export key exists within the documentation. */ Optional<LcEntry> optionalLcEntry = project.getLabelConfiguration().getEntries().stream() .filter(entry -> URLDecoder.decode(entry.getEntryKey(), StandardCharsets.UTF_8).equals(lcEntryKey)) .findFirst();  if (optionalLcEntry.isEmpty()) { // no entry with the given key is defined. throw new NotFoundException(LC_ENTRY_PLACEHOLDER, "entry_key", lcEntryKey); }  Media taskMedia = labelTask.getMedia(); if (taskMedia.isDeleted()) { throw new NotFoundException(IMAGE_PLACEHOLDER, "id", taskMedia.getId()); }  List<LcEntryValue> values = lcEntryValueRepository .findAllByTaskIdAndEntryKeyAndEntryType(taskId, lcEntryKey, LcEntryType.IMAGE_SEGMENTATION);  List<List<PointCollection>> pointCollections = values.stream() .filter(value -> value instanceof LcEntryImageSegmentationValue) .map(value -> ((LcEntryImageSegmentationValue) value).getPointsCollection()) .collect(Collectors.toList());  ImageSize image = (new ImageSizeReader(tika)).getSize(taskMedia); int height = image.getHeight(); int width = image.getWidth();  BufferedImage img = (new SegmentationBitmap(height, width)).addSegmentations(pointCollections).apply().asBufferedImage();  // Stream the Image String mimeType = "image/bmp"; String formatName = mimeType.split("/")[1].toLowerCase(Locale.ENGLISH);  // Stream the Image response.setHeader("Content-Type", mimeType); ImageIO.write(img, formatName, response.getOutputStream()); }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
************************************
[+] input: IOException { SecurityContext.clear();  String taskId = "not used here"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Forbidden."; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("ForbiddenException should be thrown."); } catch (ForbiddenException e) { "<AssertPlaceHolder>"; } }
streamSegmentationBitmap(String taskId, String lcEntryKey, HttpServletResponse response) throws IOException {  // Permission check: authenticated user DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE, OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  List<LabelTaskState> labelTaskStateList = new ArrayList<>(); labelTaskStateList.add(LabelTaskState.COMPLETED); labelTaskStateList.add(LabelTaskState.SKIPPED); labelTaskStateList.add(LabelTaskState.REVIEWED);  LabelTask labelTask =  labelTaskRepository .findById(taskId) .orElseThrow(() -> new NotFoundException(LABEL_TASK_PLACEHOLDER, "id", "" + taskId));  if (!labelTaskStateList.contains(labelTask.getLabelTaskState())) { // The task is not in allowed / supported state. throw new GenericException(WRONG_LABEL_TASK_STATE, null, null, labelTask.getId()); }  // Permission check: is the user admin or user of the project. Project project = labelTask.getProject(); String owner = project.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  /* * Check if a LcEntry with the given export key exists within the documentation. */ Optional<LcEntry> optionalLcEntry = project.getLabelConfiguration().getEntries().stream() .filter(entry -> URLDecoder.decode(entry.getEntryKey(), StandardCharsets.UTF_8).equals(lcEntryKey)) .findFirst();  if (optionalLcEntry.isEmpty()) { // no entry with the given key is defined. throw new NotFoundException(LC_ENTRY_PLACEHOLDER, "entry_key", lcEntryKey); }  Media taskMedia = labelTask.getMedia(); if (taskMedia.isDeleted()) { throw new NotFoundException(IMAGE_PLACEHOLDER, "id", taskMedia.getId()); }  List<LcEntryValue> values = lcEntryValueRepository .findAllByTaskIdAndEntryKeyAndEntryType(taskId, lcEntryKey, LcEntryType.IMAGE_SEGMENTATION);  List<List<PointCollection>> pointCollections = values.stream() .filter(value -> value instanceof LcEntryImageSegmentationValue) .map(value -> ((LcEntryImageSegmentationValue) value).getPointsCollection()) .collect(Collectors.toList());  ImageSize image = (new ImageSizeReader(tika)).getSize(taskMedia); int height = image.getHeight(); int width = image.getWidth();  BufferedImage img = (new SegmentationBitmap(height, width)).addSegmentations(pointCollections).apply().asBufferedImage();  // Stream the Image String mimeType = "image/bmp"; String formatName = mimeType.split("/")[1].toLowerCase(Locale.ENGLISH);  // Stream the Image response.setHeader("Content-Type", mimeType); ImageIO.write(img, formatName, response.getOutputStream()); }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
************************************
[+] input: testCountOnMappedField() { long count = entityStream // .of(Company.class) // .filter( // Company$.NAME.notEq("RedisInc") // .and(Company$.NAME.notEq("Microsoft")) // ) // .map(Company$.NAME) // .sequential() // .count();  "<AssertPlaceHolder>"; }
count() { return backingStream.count(); }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
************************************
[+] input: findOrCacheSerializerShouldFindIfExists() { final SerializerFactory serializerFactory = Containers.get(SerializerFactory.class); final ObjectSerializerStringStringMock serializer = new ObjectSerializerStringStringMock(); serializerFactory.registerSerializer(serializer);  final ObjectSerializer<?, ?> cacheSerializer = serializerFactory.findOrCacheSerializer(ObjectSerializerStringStringMock.class);  Assertions."<AssertPlaceHolder>"; }
findOrCacheSerializer(@NotNull Class<?> serializerClass) { ConditionUtils.is(ObjectSerializer.class.isAssignableFrom(serializerClass), "Cannot findOrCacheSerializer() by a non-serializer class."); final SerializerData serializerData = this.serializerBySerializerType.get(serializerClass); if (serializerData == null) { ObjectSerializer<?, ?> serializer = ThrowingSupplier .sneaky(() -> (ObjectSerializer<?, ?>) serializerClass.getDeclaredConstructor().newInstance()) .get(); this.registerSerializer(serializer); return serializer; } return serializerData.getSerializer(); }
[*] target: assertEquals(serializer, cacheSerializer)
[-] pred: org. junit. Assert. assertEquals ( serializer, cacheSerializer )
************************************
************************************
[+] input: convertToEntityAttributeNull() { AnimalSexoConverter converter = new AnimalSexoConverter(); AnimalSexo convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String descricao) { if(descricao == null) { return null; }  return AnimalSexo.of(descricao); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: shouldCompareEqualArraysAsZero() { // given final OffsetDateTime date = OffsetDateTime.of(2023, 10, 5, 15, 50, 0, 0, ZoneOffset.of("+02:00"));  final OffsetDateTime sameDate = OffsetDateTime.of(2023, 10, 5, 15, 50, 0, 0, ZoneOffset.of("+02:00"));  final ExpandableArrayBuffer dateKeyBuffer = new ExpandableArrayBuffer(); dateKeyBuffer.putLong(0, date.toInstant().toEpochMilli(), ZeebeDbConstants.ZB_DB_BYTE_ORDER);  final ExpandableArrayBuffer sameDateKeyBuffer = new ExpandableArrayBuffer(); sameDateKeyBuffer.putLong( 0, sameDate.toInstant().toEpochMilli(), ZeebeDbConstants.ZB_DB_BYTE_ORDER);  final Bytes dateBytes = Bytes.fromExpandableArrayBuffer(dateKeyBuffer); final Bytes sameDateBytes = Bytes.fromExpandableArrayBuffer(sameDateKeyBuffer);  // when final int result = dateBytes.compareTo(sameDateBytes);  // then Assertions."<AssertPlaceHolder>"; }
compareTo(final Bytes other) { return Arrays.compareUnsigned(byteArray, other.byteArray); }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: shouldBuildResource() { Message message = MessageFactory.resource(random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
resource( String attributeLocalName, String elementLocalName, String headerName) { return INSTANCE.composeMessage( "resource", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .entry("headerName", headerName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: readContainerNameInvalid() { final String hostnameThatIsNotPodName = "generic-hostname"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsNotPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_CONTAINER_NAME); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: shouldFormatCorrectlyWhenCalledProcessComplexStat() {  StringBuilder buf = new StringBuilder(); String[] header = {"command", "exec_count", "exec_ms_avg"}; String[] stats = {"NoOpRequest", "2", "0"};  PrometheusFormatter.processComplexStats("soap", buf, header, stats);  String expected = "soap_exec_count {command="NoOpRequest"} 2\n" + "soap_exec_ms_avg {command="NoOpRequest"} 0\n";  "<AssertPlaceHolder>"; }
processComplexStats( String statFilePrefix, StringBuilder logBuffer, final String[] headers, String[] stats) { final String command = stats[0]; final String header = headers[0]; IntStream.range(1, headers.length) .forEach( i -> logBuffer .append(statFilePrefix) .append("_") .append(sanitizeHeader(headers[i])) .append(" ") .append("{") .append(header) .append("="") .append(command) .append(""}") .append(" ") .append("".equals(stats[i]) ? "0" : stats[i]) .append("\n")); }
[*] target: assertEquals(expected, buf.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, buf. toString ( ) )
************************************
************************************
[+] input: test_objectFileName() { final String namePattern = "my-elb-%{yyyy-MM-dd'T'hh-mm-ss}";  when(objectKeyOptions.getNamePattern()).thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; assertThat(objectFileName, startsWith("my-elb")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: IOException { Path path = new Path(HDFS_URI, "createStreamFirstTest"); try (HdfsFileWriter writer = new HdfsFileWriter(path, conf)) { assertTrue(fs.isFile(path)); "<AssertPlaceHolder>"; } }
nextOffset() { return nextOffset; }
[*] target: assertEquals(0, writer.nextOffset())
[-] pred: org. junit. Assert. assertEquals ( 0, writer. nextOffset() )
************************************
************************************
[+] input: deveRetornarAlunoValido() { AlunoBuilder alunoBuilder = new AlunoBuilder(); Aluno aluno = alunoBuilder .setMatricula(1) .setNome("Aluno 1") .setEmail("aluno1@email.com") .build();  "<AssertPlaceHolder>"; }
build() { if (aluno.getMatricula() == 0) { throw new IllegalArgumentException("Matrícula inválida"); } if (aluno.getNome().equals("")) { throw new IllegalArgumentException("Nome inválido"); } return aluno; }
[*] target: assertNotNull(aluno)
[-] pred: org. junit. Assert. assertNotNull ( aluno )
************************************
************************************
[+] input: ReflectiveOperationException { final boolean[] bools = new boolean[2]; final PojoMapper<TestProperties> pojoMapper = PojoMapper.create(TestProperties.class); pojoMapper.addListener(new PojoListener() { @Override public void onPropertyAdded(PojoMapper<?> pojoMapper, PojoProperty pojoProperty) { bools[0] = true; }  @Override public void onMapperInitialized(PojoMapper<?> pojoMapper) { bools[1] = true; } }); pojoMapper.init();  for (boolean bool : bools) { Assertions."<AssertPlaceHolder>"; } }
init() throws ReflectiveOperationException;  Map<String, PojoProperty> properties();  default PojoProperty getProperty(String name) { return properties().getOrDefault(name, null); }
[*] target: assertTrue(bool)
[-] pred: org. junit. Assert. assertTrue ( bool )
************************************
************************************
[+] input: setMachineBit() { int machineBit = 6; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setMachineBit(machineBit); Assertions."<AssertPlaceHolder>"; }
getMachineBit() { return machineBit; }
[*] target: assertEquals(machineBit, idDefinition.getMachineBit())
[-] pred: org. junit. Assert. assertEquals ( machineBit, idDefinition. getMachineBit() )
************************************
************************************
[+] input: getAbsoluto_test03() { int absoluto = Calculadora.getAbsoluto(20);  "<AssertPlaceHolder>"; }
getAbsoluto(int n) { return 0; }
[*] target: assertEquals(20, absoluto)
[-] pred: org. junit. Assert. assertEquals ( 20, absoluto )
************************************
************************************
[+] input: testCreateMailAccount_success() { // 准备参数 MailAccountSaveReqVO reqVO = randomPojo(MailAccountSaveReqVO.class, o -> o.setMail(randomEmail())) .setId(null); // 防止 id 被赋值  // 调用 Long mailAccountId = mailAccountService.createMailAccount(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailAccountDO mailAccount = mailAccountMapper.selectById(mailAccountId); assertPojoEquals(reqVO, mailAccount, "id"); }
createMailAccount(MailAccountSaveReqVO createReqVO) { MailAccountDO account = BeanUtils.toBean(createReqVO, MailAccountDO.class); mailAccountMapper.insert(account); return account.getId(); }
[*] target: assertNotNull(mailAccountId)
[-] pred: org. junit. Assert. assertNotNull ( mailAccountId )
************************************
************************************
[+] input: testBuildAuthRequest_clientDisable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: testGetNotExistingEnumConstant() { MockEnum constant = ReflectionUtils.getEnumConstant(MockEnum.class, "CHOCOLATE");  "<AssertPlaceHolder>"; }
getEnumConstant(Class<T> c, String name) { for (T field : c.getEnumConstants()) { if (field.toString().equals(name)) { return field; } }  return null; }
[*] target: assertNull(constant)
[-] pred: org. junit. Assert. assertNull ( constant )
************************************
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeen() { creq = new ChatRequest(0L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: testIsValidCsrfTokenForAccountWithMultipleTokens() { try { Account acct = Provisioning.getInstance().getAccountByName( "test@zimbra.com"); AuthToken authToken = new ZimbraAuthToken(acct);  String csrfToken1 = CsrfUtil.generateCsrfToken(acct.getId(), AUTH_TOKEN_EXPR, CSRFTOKEN_SALT, authToken); boolean validToken = CsrfUtil.isValidCsrfToken(csrfToken1, authToken); "<AssertPlaceHolder>";   } catch (ServiceException  e) { fail("Should not throw exception."); } }
isValidCsrfToken(String csrfToken, AuthToken authToken) { if (StringUtil.isNullOrEmpty(csrfToken) || null == authToken) { return false; }  String hmacFromToken = null; String crumb = null; String keyVersion = null; boolean validToken = false; boolean loadFromLdap = false;  try { Pair<String, String> data = parseCsrfToken(csrfToken); hmacFromToken = data.getFirst(); keyVersion = data.getSecond(); crumb  = authToken.getCrumb(); Account account = getAccount(authToken, loadFromLdap); if(account == null) { return false; } validToken = validateCsrfToken(hmacFromToken, crumb, keyVersion, validToken, account); if (!validToken) { // just recheck that we are looking at the latest Account object // cache of this server might be stale ZimbraLog.misc.info("CSRF token was invalid, rechecking with account object from LDAP."); loadFromLdap = true; account = getAccount(authToken, loadFromLdap); validToken = validateCsrfToken(hmacFromToken, crumb, keyVersion, validToken, account); if (ZimbraLog.misc.isDebugEnabled()) { ZimbraLog.misc.debug("The csrfToken second check: " + (validToken ? "is valid." : " is invalid.")); } } } catch (AuthTokenException | ServiceException e) { ZimbraLog.misc.info("Error decoding CSRF token, " + e.getMessage()); validToken = false; }  if (ZimbraLog.misc.isDebugEnabled() ) { ZimbraLog.misc.debug("The csrfToken: " + (validToken ? "is valid." : " is invalid.")); } return validToken; }
[*] target: assertTrue(validToken)
[-] pred: org. junit. Assert. assertTrue ( validToken )
************************************
************************************
[+] input: emptyIsCorrect() { Set<Integer> testSet = Empty.apply();  "<AssertPlaceHolder>"; }
isEmpty() { return new IsEmpty().term(); }
[*] target: assertTrue(testSet.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( testSet. isEmpty() )
************************************
************************************
[+] input: shouldBuildErrorCode() { Message message = MessageFactory.errorCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Error code is transformed from 'old' to 'new'. Please review."); }
errorCode(String oldCode, String newCode) { return INSTANCE.composeMessage( "error-code", ContextBuilder.builder().entry("oldCode", oldCode).entry("newCode", newCode).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: repeatUnderLimit() { int limit = 55; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p2", "p3", 1234); assertFalse(throttle.isCommandThrottled(command)); command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
isCommandThrottled(ImapCommand command) { if (repeatLimit <= 0) { return false; } else if (command.throttle(lastCommand)) { // commands can implement their own throttle mechanism ZimbraLog.imap.debug("throttled by command"); return true; } else if (isCommandRepeated(command)) { repeats++; lastCommand = command; if (repeats > repeatLimit) { ZimbraLog.imap.debug("throttled by repeat"); return true; } else { return false; } } else { repeats = 1; lastCommand = command; return false; } }
[*] target: assertFalse(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertFalse ( throttle. isCommandThrottled ( command ) )
************************************
************************************
[+] input: testGetLifetimeActionsShouldReturnTheMapSetPreviouslyWhenCalled() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> actual = underTest.getLifetimeActions();  //then Assertions."<AssertPlaceHolder>"; }
getLifetimeActions() { return lifetimeActions; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testAddAndGetWithId() { var step = StepEntity.builder() .uuid("uuid") .name("name") .jobId(4L) .lastStepId(5L) .status(StepStatus.RUNNING) .concurrency(3) .taskNum(10) .originJson("{"foo": "bar"}") .build();  stepMapper.save(step); var step2 = stepMapper.findById(step.getId()); step.setCreatedTime(step2.getCreatedTime()); step.setModifiedTime(step2.getModifiedTime()); Assertions."<AssertPlaceHolder>"; }
findById(@Param("id") Long id);  @Update("update step set last_step_id = #{lastStepId}
[*] target: assertEquals(step, step2)
[-] pred: org. junit. Assert. assertEquals ( step, step2 )
************************************
************************************
[+] input: shouldBuildCorrelationKeyHint() { Message message = MessageFactory.correlationKeyHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
correlationKeyHint() { return INSTANCE.staticMessage("correlation-key-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: whenFindByIdThenReturnSuccess() { when(service.findById(anyInt())).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.findById(ID);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); assertEquals(PASSWORD, response.getBody().getPassword()); }
findById(@PathVariable Integer id) { return ResponseEntity.ok().body(mapper.map(service.findById(id), UserDTO.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: cacheReturnsNewValueFromCallback() { LayeredMatchedOptionCache<String, Integer> cache = new LayeredMatchedOptionCache<>(Duration.ofMinutes(1), 10);  Integer result = cache.get("test", () -> 42, value -> false);  "<AssertPlaceHolder>"; }
get(K key, Supplier<V> callback, Predicate<V> matcher) { Deque<CacheEntry<V>> entries = prepareMap(key);  cleanUpEntries(entries, key);  return findValidEntry(entries, matcher) .map(CacheEntry::value) .orElseGet(() -> addNewEntry(entries, callback.get())); }
[*] target: assertEquals(42, result)
[-] pred: org. junit. Assert. assertEquals ( 42, result )
************************************
************************************
[+] input: getStakeAddressFromMnemonic_whenTestnet() { String phrase24W = "coconut you order found animal inform tent anxiety pepper aisle web horse source indicate eyebrow viable lawsuit speak dragon scheme among animal slogan exchange"; String expectedRewardAddress = "stake_test1uq06d3cktqn4z9tv8rr9723fvrxdnh44an9tjvjftw6krscamyncv";  Account account = new Account(Networks.testnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
stakeAddress() { if (stakeAddress == null || stakeAddress.isEmpty()) { HdKeyPair stakeKeyPair = getStakeKeyPair(); Address address = AddressProvider.getRewardAddress(stakeKeyPair.getPublicKey(), network); stakeAddress = address.toBech32(); }  return stakeAddress; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
************************************
[+] input: testGetMenuIdListByPermissionFromCache() { // mock 数据 MenuDO menu100 = randomPojo(MenuDO.class); menuMapper.insert(menu100); MenuDO menu101 = randomPojo(MenuDO.class); menuMapper.insert(menu101); // 准备参数 String permission = menu100.getPermission();  // 调用 List<Long> ids = menuService.getMenuIdListByPermissionFromCache(permission); // 断言 "<AssertPlaceHolder>"; assertEquals(menu100.getId(), ids.get(0)); }
getMenuIdListByPermissionFromCache(String permission) { List<MenuDO> menus = menuMapper.selectListByPermission(permission); return convertList(menus, MenuDO::getId); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
************************************
[+] input: getDataMesesAtras_test01() { LocalDate inicio = LocalDate.of(2021, 5, 13); LocalDate dataEsperada = LocalDate.of(2020, 12, 13); LocalDate dataObtida = LocalDates.getDataMesesAtras(inicio, 5); "<AssertPlaceHolder>"; }
getDataMesesAtras(LocalDate inicio, long meses) { return null; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
************************************
[+] input: testGetEncodedCertificateSignRequestShouldReturnNullWhenCsrIsMissing() { //given final CertificateCreationInput input = CertificateCreationInput.builder() .validityStart(NOW) .subject("CN=" + LOCALHOST) .upns(Set.of(LOOP_BACK_IP)) .name(CERT_NAME_1) .dnsNames(Set.of(LOWKEY_VAULT)) .enableTransparency(false) .certAuthorityType(UNKNOWN) .contentType(CertContentType.PEM) .certificateType(null) .keyType(KeyType.EC) .keyCurveName(KeyCurveName.P_521) .extendedKeyUsage(Set.of("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")) .keyUsage(Set.of(KeyUsageEnum.KEY_ENCIPHERMENT)) .reuseKeyOnRenewal(true) .validityMonths(VALIDITY_MONTHS) .exportablePrivateKey(true) .build();  final VaultFake vault = new VaultFakeImpl(HTTPS_LOCALHOST_8443); final KeyVaultCertificateEntity entity = spy(new KeyVaultCertificateEntity(CERT_NAME_1, input, vault)); doReturn(null).when(entity).getCertificateSigningRequest();  //when final byte[] actual = entity.getEncodedCertificateSigningRequest();  //then Assertions."<AssertPlaceHolder>"; }
getEncodedCertificateSigningRequest() { try { byte[] encoded = null; if (getCertificateSigningRequest() != null) { encoded = getCertificateSigningRequest().getEncoded(); } return encoded; } catch (final Exception e) { throw new CryptoException("Failed to obtain encoded certificate signing request: " + getId().toString(), e); } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnArg", String.class);  "<AssertPlaceHolder>";  String arg = "Hello World"; assertEquals(arg, method.invoke(obj, arg)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method, Class<?>... paramTypes) { Class<?>[] expectParamTypes = toPrimitiveTypeArray(paramTypes);  for (Method m : c.getMethods()) { Class<?>[] methodParameters = toPrimitiveTypeArray(m.getParameterTypes());  if ((m.getName().equals(method)) && (equalsTypeArray(methodParameters, expectParamTypes))) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: NoSuchFieldException { String fieldName = "name"; FastField ff = FastField.create(Person.class.getField(fieldName)); "<AssertPlaceHolder>"; }
getName() { return field.getName(); }
[*] target: assertEquals(fieldName, ff.getName())
[-] pred: org. junit. Assert. assertEquals ( fieldName, ff. getName() )
************************************
************************************
[+] input: isAdminOrLabeler_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("test_org", null, true);  // Then "<AssertPlaceHolder>"; }
isAdminOrLabeler(String projectOrganisation, String currentTaskLabelerId, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(projectOrganisation)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!orgs.containsKey(projectOrganisation)) { throw new ForbiddenException(); }  boolean hasAdminRole = orgs.get(projectOrganisation).equals(ADMIN_ROLE);  if (scopes.contains(TOKEN_SCOPE_TYPE)) { if (!hasAdminRole) { throw new ForbiddenException(); } } else { String userId = user.id();  if (!userId.equals(currentTaskLabelerId) && !hasAdminRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
************************************
[+] input: testUpdateNickName_success() { //        // mock 数据 //        MemberUserDO userDO = randomUserDO(); //        userMapper.insert(userDO); // //        // 随机昵称 //        String newNickName = randomString(); // //        // 调用接口修改昵称 //        memberUserService.updateUser(userDO.getId(),newNickName); //        // 查询新修改后的昵称 //        String nickname = memberUserService.getUser(userDO.getId()).getNickname(); //        // 断言 //        "<AssertPlaceHolder>"; //    }
getUser(Long id) { return memberUserMapper.selectById(id); }
[*] target: assertEquals(newNickName,nickname)
[-] pred: org. junit. Assert. assertEquals ( newNickName, nickname )
************************************
************************************
[+] input: NoSuchAlgorithmException { var originalData = "12345678910!".repeat(1000); var responseInputStream = originalData.getBytes(StandardCharsets.UTF_16);   var md5Hash = MessageDigest.getInstance("MD5").digest(responseInputStream);  var expectedDigestString = Base64.getEncoder().encodeToString(md5Hash);  var checksum = new Md5Checksum().getChecksum(responseInputStream); var digest = checksum.getChecksum();  "<AssertPlaceHolder>";  }
getChecksum(byte[] objectResponse) throws NoSuchAlgorithmException {  MessageDigest md; md = MessageDigest.getInstance(ALGORITHM); var digest = md.digest(objectResponse);  var checksum = Base64.getEncoder().encodeToString(digest); return new Checksum(ALGORITHM, checksum); }
[*] target: assertEquals(expectedDigestString, digest)
[-] pred: org. junit. Assert. assertEquals ( expectedDigestString, digest )
************************************
************************************
[+] input: validateScore1000Test() { try { RecordsManager.validateScore(ALEJANDRO, 1000); "<AssertPlaceHolder>"; } catch (ScoreTooLowException e) { fail(e.getMessage()); } }
validateScore(String name, int score) throws ScoreTooLowException { /// (6) Validamos la puntuación mínima if (score < MIN_SCORE) { throw new ScoreTooLowException(name, score); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: getRedis() { SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
getRedis() { return redis; }
[*] target: assertNotNull(distributor.getRedis())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getRedis() )
************************************
************************************
[+] input: searchStepByName() { var steps = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, steps.size()); Assertions.assertTrue(steps.stream().allMatch( step -> CONNECTOR_2.equalsIgnoreCase(step.getName()))); }
searchByName(final String connectionName) { if (connectionName == null) { return Collections.emptyList(); } Collection<T> steps = new ArrayList<>(); for (MetadataCatalog<T> c : catalogs) { steps.addAll(c.searchByName(connectionName)); } return steps; }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listDeletedVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/deleted", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
listDeletedVaults() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_DELETED_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(VAULT_MODEL_LIST_TYPE_REF)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("require "variables"; tag "${subject} World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: Hello".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
isListed() { return isListed; }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
************************************
[+] input: shouldBuildOutAllNotRecommendedHint() { Message message = MessageFactory.outAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
outAllHint() { return INSTANCE.staticMessage("out-all-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testAsUriNoVersionShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = UNVERSIONED_CERT_ENTITY_ID_1;  //when final URI actual = underTest.asUriNoVersion(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: queryUnmodifiedWhenNoSpan() { TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
************************************
[+] input: setEnabled() { CosIdProperties properties = new CosIdProperties(); properties.setEnabled(false); Assertions."<AssertPlaceHolder>"; }
isEnabled() { return enabled; }
[*] target: assertFalse(properties.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( properties. isEnabled() )
************************************
************************************
[+] input: testAssignRoleMenu() { // 准备参数 Long roleId = 1L; Set<Long> menuIds = asSet(200L, 300L); // mock 数据 RoleMenuDO roleMenu01 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(100L); roleMenuMapper.insert(roleMenu01); RoleMenuDO roleMenu02 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(200L); roleMenuMapper.insert(roleMenu02);  // 调用 permissionService.assignRoleMenu(roleId, menuIds); // 断言 List<RoleMenuDO> roleMenuList = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, roleMenuList.get(0).getRoleId()); assertEquals(200L, roleMenuList.get(0).getMenuId()); assertEquals(1L, roleMenuList.get(1).getRoleId()); assertEquals(300L, roleMenuList.get(1).getMenuId()); }
assignRoleMenu(Long roleId, Set<Long> menuIds);  /** * 处理角色删除时，删除关联授权数据 * * @param roleId 角色编号 */ void processRoleDeleted(Long roleId);  /** * 处理菜单删除时，删除关联授权数据 * * @param menuId 菜单编号 */ void processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(2, roleMenuList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, roleMenuList. size ( ) )
************************************
************************************
[+] input: ctor() { ExactCollection<String> exactCollection = createExactCollection(10); Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: testLatchFilters() { final var horizon = Interval.between(Duration.of(0, Duration.SECONDS), Duration.of(50, Duration.SECONDS)); final var horizonW = new Windows(horizon, true); final var simResults = new SimulationResults( Instant.EPOCH, Interval.between(0, 20, SECONDS), List.of(), Map.of(), Map.of( "smallState1", smallState1(horizon), "smallState2", smallState2(horizon) ) );  final var ste = new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))); final var ste2 = new And( new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))), new Equal<>(new DiscreteResource("smallState2"), new DiscreteValue(SerializedValue.of(true))) );  final var tre = new TimeRangeExpression.Builder() .from(ste) .name("withinEach") .build();  final var filter = new Filters.LatchingBuilder() .withinEach(tre) .filterFirstBy(Filters.minDuration(Duration.of(3, Duration.SECONDS))) .thenFilterBy(Filters.minDuration(Duration.of(4, Duration.SECONDS))) .build();  final var tre2 = new TimeRangeExpression.Builder() .name("tre2") .from(ste2) .thenFilter(filter) .build();  final var res = tre2.computeRange(simResults, null, horizonW);  final var expected = new Windows(interval(0, Inclusive, 20, Exclusive, SECONDS), false) .set(List.of( interval(3, Inclusive, 6, Exclusive, SECONDS), interval(11, Inclusive, 15, Exclusive, SECONDS) ), true);  "<AssertPlaceHolder>"; }
build() { return Filters.withinEach(expr, new FilterLatching(filter1, filter2)); }
[*] target: assertEquals(expected, res)
[-] pred: org. junit. Assert. assertEquals ( expected, res )
************************************
************************************
[+] input: queryWithUnknownTraceId() { String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(TracingStatementInspector.UNKNOWN_TRACE_ID); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shortfallTest() { //given int answer = 5; //when int result = sampleProvince.shortFall(); //then "<AssertPlaceHolder>"; }
shortFall() { return this.demand - this.totalProduction; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
save(@Valid @RequestBody LocationSaveRequestDto saveRequestDto) { return locationService.save(saveRequestDto); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
************************************
[+] input: testVerifySignedTypedData() { final String signature = "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c";  boolean verified = key.verifyTypedData(domain, message, signature).join();  "<AssertPlaceHolder>"; }
verifyTypedData(Eip712Domain domain, S typedData, String signature) { return this.verifySignature(signature, Eip712Encoder.typedDataToSignedBytes(domain, typedData), false); }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: shouldBuildInclusiveGatewayJoin() { Message message = MessageFactory.inclusiveGatewayJoin(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inclusiveGatewayJoin() { return INSTANCE.staticMessage("inclusive-gateway-join"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildResourceOnConditionalFlow() { String resource = random(); Message message = resourceOnConditionalFlow(resource); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Please translate the content from '%s' to a valid FEEL expression.", resource); }
resourceOnConditionalFlow(String resource) { return INSTANCE.composeMessage( "resource-on-conditional-flow", ContextBuilder.builder().entry("resource", resource).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: principal_creationWorks() { val sessionID = Utils.generateRandomID(); val memberID = Utils.generateRandomID(); val principal = new MemberPrincipal(sessionID, memberID); assertEquals(principal.getSessionID(), sessionID); assertEquals(principal.getMemberID(), memberID); "<AssertPlaceHolder>"; }
getName() { return memberID; }
[*] target: assertEquals(principal.getName(), memberID)
[-] pred: org. junit. Assert. assertEquals ( principal. getName(), memberID )
************************************
************************************
[+] input: hashCode_same_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act double vec3c1Hash = vec3c1.hashCode(); double vec3c2Hash = vec3c2.hashCode();  // Assert "<AssertPlaceHolder>"; }
hashCode() { long bits = 1L; bits = 31L * bits + doubleToLongBits(xCoord); bits = 31L * bits + doubleToLongBits(yCoord); bits = 31L * bits + doubleToLongBits(zCoord); return (int) (bits ^ (bits >> 32)); }
[*] target: assertEquals(vec3c1Hash, vec3c2Hash)
[-] pred: org. junit. Assert. assertEquals ( vec3c1Hash, vec3c2Hash )
************************************
************************************
[+] input: testUpdateAfterApproval_none() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString();  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, null); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(0, result.size()); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: testBuildAuthRequest_clientEnable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthConfig authConfig = mock(AuthConfig.class); AuthRequest authRequest = mock(AuthDefaultRequest.class); ReflectUtil.setFieldValue(authRequest, "config", authConfig); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.ENABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertNotSame(authConfig, ReflectUtil.getFieldValue(authRequest, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: isAuthenticated_whenUserIsAuthenticated_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  boolean isAuthenticated = DataGymSecurity.isAuthenticated();  // Then "<AssertPlaceHolder>"; }
isAuthenticated() { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  return true; }
[*] target: assertTrue(isAuthenticated)
[-] pred: org. junit. Assert. assertTrue ( isAuthenticated )
************************************
************************************
[+] input: Exception { CountDownLatch latch1 = new CountDownLatch(2); CountDownLatch latch2 = new CountDownLatch(2); s1.registerCallback(new CountDownCallback(latch1)); s2.registerCallback(new CountDownCallback(latch2)); c.getPeer("peer1").sendMessage(messages[0]); c.getPeer("peer2").sendMessage(messages[1]); c.getPeer("peer1").sendMessage(messages[2]); c.getPeer("peer2").sendMessage(messages[3]); latch1.await(2, TimeUnit.SECONDS); latch2.await(2, TimeUnit.SECONDS); "<AssertPlaceHolder>"; assertEquals(0, latch2.getCount()); }
registerCallback(NotifyCallback cb) { callback = cb; }
[*] target: assertEquals(0, latch1.getCount())
[-] pred: org. junit. Assert. assertEquals ( 0, latch1. getCount ( ) )
************************************
************************************
[+] input: testFinalPositionOfSnakeInvalidCommands() { List<String> commands = List.of("DOWN", "RIGHT", "JUMP", "LEFT", "UP", "DOWN", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
************************************
[+] input: shouldBuildInputOutputParameter() { Message message = MessageFactory.inputOutputParameter(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutputParameter( String elementLocalName, String parameterName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "input-output-parameter", ContextBuilder.builder() .entry("parameterName", parameterName) .context(elementTransformedPrefix(elementLocalName)) .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testUpdatePhyClusterDynamicConfig() { final ClusterSettingDTO param = new ClusterSettingDTO("clusterName", "key", "value"); final Result<Boolean> expectedResult = Result.buildFail(false); when(mockClusterPhyService.updatePhyClusterDynamicConfig(new ClusterSettingDTO("clusterName", "key", "value"))) .thenReturn(Result.buildFail(false)); Integer projectId = 1; final Result<Boolean> result; try { result = clusterPhyManager.updatePhyClusterDynamicConfig(param, "operator", projectId); } catch (ESOperateException e) { throw new RuntimeException(e); }  "<AssertPlaceHolder>"; }
updatePhyClusterDynamicConfig(ClusterSettingDTO param, String operator, Integer projectId) throws ESOperateException ;  /** * 获取集群下的属性配置 * @param cluster 集群名称 * @return result */ Result<Set<String>> getRoutingAllocationAwarenessAttributes(String cluster);  /** * 获取APP有管理、读写、读权限的物理集群名称列表 * * @param projectId projectId * @return {@link List}
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: SQLException { String nql = "INSERT VERTEX vert (prop) VALUES "v1":(?))"; String expected = "INSERT VERTEX vert (prop) VALUES "v1":(null))"; NebulaPreparedStatementImpl stmt = new NebulaPreparedStatementImpl(null, nql); stmt.setNull(1, Types.OTHER); String resultNql = stmt.replacePlaceHolderWithParam(nql); "<AssertPlaceHolder>"; }
replacePlaceHolderWithParam(String rawNGQL) throws SQLException { Integer index = 1; String digested = rawNGQL;  Matcher matcher = NAMED_PARAMETER_REGEX.matcher(digested);  while (matcher.find()) { if(!parameters.containsKey(index)){ throw new SQLException(String.format("Can not get param in index [%d], please check your nGql.", index)); } Object param = parameters.get(index);  if(param != null) { String paramTypeName = param.getClass().getTypeName(); switch (paramTypeName) { case ("java.lang.String"): param = String.format(""%s"", param); break; case ("java.sql.Date"): param = String.format("date("%s")", param); break; case ("java.sql.Time"): param = String.format("time("%s")", param); break; case ("java.util.Date"): SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.sss"); String datetimeString = formatter.format(param); param = String.format("datetime("%s")", datetimeString); break; default: break; } }  digested = NAMED_PARAMETER_REGEX.matcher(digested).replaceFirst(Objects.toString(param)); index++; }  return digested; }
[*] target: assertEquals(expected, resultNql)
[-] pred: org. junit. Assert. assertEquals ( expected, resultNql )
************************************
************************************
[+] input: sessionEnable() { SessionManager sessionManager = new SessionManager( sessionStorageService, statementStorageService, emrServerlessClientFactory, sessionConfigSupplier, sessionIdProvider);  Assertions."<AssertPlaceHolder>"; }
isEnabled() { return true; }
[*] target: assertTrue(sessionManager.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( sessionManager. isEnabled() )
************************************
************************************
[+] input: testIsExist() { Table systemIndex = new OpenSearchSystemIndex(client, TABLE_INFO); "<AssertPlaceHolder>"; }
exists() { return true; // TODO: implement for system index later }
[*] target: assertTrue(systemIndex.exists())
[-] pred: org. junit. Assert. assertTrue ( systemIndex. exists() )
************************************
************************************
[+] input: addsTask() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); }
size() { return tasks.size(); }
[*] target: assertEquals(1, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, todoList. size() )
************************************
************************************
[+] input: queryWithTraceIdAndSpanId() { String traceId = "12345678901234567890123456789abc"; String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId, spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: removeNFT() { String policyId_1 = "1e80fa1859c59b18ff4895a2c481cced459c6b4fcd6c445b5e907a92"; String policyId_2 = "2222221859c59b18ff4895a2c481cced459c6b4fcd6c445b5e907a92";  NFT nft1 = NFT.create() .assetName("assetname-nft1") .name("nft1") .image("ipfs://someimageurl-1") .mediaType("image/png") .description("NFT-1 description") .addFile(NFTFile.create() .name("nft1-file1") .mediaType("plain/text") .src("http://nft1-file1")) .addFile(NFTFile.create() .name("nft1-file2") .mediaType("plain/text") .src("http://nft1-file2"));  NFT nft2 = NFT.create() .assetName("assetname-nft2") .name("nft2") .image("ipfs://someimageurl-2") .mediaType("image/png") .description("NFT-2 description");  NFT nft3 = NFT.create() .assetName("assetname-nft3") .name("nft2") .image("ipfs://someimageurl-3") .mediaType("image/png") .description("NFT-3 description");  NFTMetadata metadata = NFTMetadata.create() .addNFT(policyId_1, nft1) .addNFT(policyId_1, nft2) .addNFT(policyId_2, nft3);  //remove nft2 metadata.removeNFT(policyId_1, nft2.getAssetName());  //asserts NFT removeNFT = metadata.getNFT(policyId_1, nft2.getAssetName()); "<AssertPlaceHolder>"; }
getNFT(String policyId, String assetName) { CBORMetadataMap nftListMap = (CBORMetadataMap) policyMap.get(policyId); if (nftListMap == null) return null;  CBORMetadataMap nftMap = (CBORMetadataMap) nftListMap.get(assetName); if (nftMap != null) { NFT nft = NFT.create(nftMap.getMap()); nft.assetName(assetName); return nft; } else { return null; } }
[*] target: assertNull(removeNFT)
[-] pred: org. junit. Assert. assertNull ( removeNFT )
************************************
************************************
[+] input: allModules() { moduleManager.add(module1); moduleManager.add(module2);  List<IModule> modules = moduleManager.allModules();  assertEquals(2, modules.size()); assertTrue(modules.contains(module1)); "<AssertPlaceHolder>"; }
contains(Identifier id) { return moduleMap.containsKey(id); }
[*] target: assertTrue(modules.contains(module2))
[-] pred: org. junit. Assert. assertTrue ( modules. contains ( module2 ) )
************************************
************************************
[+] input: isUserInCurrentOrg_whenUserIsAuthenticatedAndIsMemberOfTheOrg_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isUserInCurrentOrg = DataGymSecurity.isUserInCurrentOrg("datagym");  // Then "<AssertPlaceHolder>"; }
isUserInCurrentOrg(String org) { OauthUser user = SecurityContext.get();  if (user == null || !user.orgs().containsKey(org)) { throw new ForbiddenException(); }  return true; }
[*] target: assertTrue(isUserInCurrentOrg)
[-] pred: org. junit. Assert. assertTrue ( isUserInCurrentOrg )
************************************
************************************
[+] input: test_normal_field_failure_without_delimiters() { Dissector dissector = createObjectUnderTest("dm1 %{field1} %{field2} dm2");  boolean result = dissector.dissectText("dm1 foo bar"); "<AssertPlaceHolder>"; }
dissectText(String text){ try { if (!setDelimiterIndexes(text)) { return false; } Field head = fieldsList.getFirst(); for (final Delimiter delimiter : delimiterList) { int fieldStart = 0; int fieldEnd = delimiter.getStart(); if (delimiter.getPrev() == null && delimiter.getStart() == 0) { continue; } if (delimiter.getPrev() != null || delimiter.getStart() == 0) { fieldStart = delimiter.getPrev().getEnd() + 1; } head.setValue(text.substring(fieldStart, fieldEnd)); head = head.getNext(); } if (delimiterList.getLast().getEnd() != text.length() - 1) { int fieldStart = delimiterList.getLast().getEnd() + 1; int fieldEnd = text.length(); head.setValue(text.substring(fieldStart, fieldEnd)); } return true; } catch (Exception e) { return false; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test01() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("Felix"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(1, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 1, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: getJdbc() { SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
getJdbc() { return jdbc; }
[*] target: assertNotNull(distributor.getJdbc())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getJdbc() )
************************************
************************************
[+] input: JavetException { V8Runtime danglingV8Runtime; try (V8Runtime v8Runtime = v8Host.createV8Runtime()) { assertFalse(v8Runtime.isClosed()); danglingV8Runtime = v8Runtime; } "<AssertPlaceHolder>"; }
isClosed() { return handle == INVALID_HANDLE; }
[*] target: assertTrue(danglingV8Runtime.isClosed())
[-] pred: org. junit. Assert. assertTrue ( danglingV8Runtime. isClosed() )
************************************
************************************
[+] input: Exception { String html = "<div id="noticias"><div class="bloque">BLOQUESSS</div></div>"; String result = new OwaspHtmlSanitizer(html, true, null).sanitize(); // check that the id and class attributes are not removed "<AssertPlaceHolder>"; }
sanitize() { OwaspThreadLocal threadLocalInstance = new OwaspThreadLocal(); threadLocalInstance.setVHost(vHost); OwaspHtmlSanitizer.zThreadLocal.set(threadLocalInstance); if (StringUtil.isNullOrEmpty(html)) { return null; } // create the builder into which the sanitized email will be written final StringBuilder htmlBuilder = new StringBuilder(html.length()); // create the renderer that will write the sanitized HTML to the builder final HtmlStreamRenderer renderer = HtmlStreamRenderer.create(htmlBuilder, Handler.PROPAGATE, // log errors resulting from exceptionally bizarre inputs x -> { throw new AssertionError(x); }); // create a thread-specific policy instantiatePolicy(); final Policy policy = POLICY_DEFINITION.apply(new StyleTagReceiver(renderer)); // run the html through the sanitizer HtmlSanitizer.sanitize(html, policy); // return the resulting HTML from the builder OwaspHtmlSanitizer.zThreadLocal.remove(); return htmlBuilder.toString(); }
[*] target: assertEquals(result, html)
[-] pred: org. junit. Assert. assertEquals ( result, html )
************************************
************************************
[+] input: Exception { // Create post. Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); opt.setFlags(FlagInfo.POST.toBitmask()); Message msg = mbox.addMessage(null, new ParsedMessage( "From: test@zimbra.com\r\nTo: test@zimbra.com".getBytes(), false), opt, null);  // Validate flag. assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0);  // Search by flag. List<Integer> ids = TestUtil.search(mbox, "tag:\\post", MailItem.Type.MESSAGE); "<AssertPlaceHolder>"; assertEquals(msg.getId(), ids.get(0).intValue());  // Make sure that the post flag is serialized to XML. Element eMsg = ToXML.encodeMessageAsMIME(new XMLElement("test"), new ItemIdFormatter(), (OperationContext) null, msg, (String) null /* part */, false /* mustInline */, false /* mustNotInline */, false /* serializeType */, ToXML.NOTIFY_FIELDS);  assertEquals("^", eMsg.getAttribute(MailConstants.A_FLAGS));  // Try unsetting the post flag. mbox.setTags(null, msg.getId(), MailItem.Type.MESSAGE, 0, null); msg = mbox.getMessageById(null, msg.getId()); // make sure post flag is still set assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0, "POST flag set"); assertEquals(msg.getIdInMailbox(), msg.getImapUid(), "IMAP UID should be same as ID"); }
size();  /** * Serializes the payload into ByteBuffer. */ protected abstract void serialize(ByteBuffer out) throws IOException;  /** * Constructs the message by parsing the payload in ByteBuffer. */ protected abstract Message construct(ByteBuffer in) throws IOException;  /** * Returns MessageHandler instance. * @return */ public abstract MessageHandler getHandler();  /** * MessageHandler is an object that gets called when a Message is received * from a peer server on MessageChannel.  Each Message subclass must have * its own unique MessageHandler object that knows how to deal with * the Message. */ public interface MessageHandler { void handle(Message m, String clientId); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
************************************
[+] input: equals_false_when_different_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(3.0, 2.0, 1.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: shouldBuildTimerExpressionMappedMessage() { String juelExpression = random(); String feelExpression = random(); Message message = timerExpressionMapped(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Timer expression was transformed: Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
timerExpressionMapped(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "timer-expression-mapped", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "not-existing"; final String expectedErrorMessage = String.format("Item lcEntry with entry_key %s not found.", lcEntryKey); final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId);  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)) .thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()) .thenReturn(project); Mockito.when(labelTask.getLabelTaskState()) .thenReturn(LabelTaskState.COMPLETED);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
streamSegmentationBitmap(String taskId, String lcEntryKey, HttpServletResponse response) throws IOException {  // Permission check: authenticated user DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE, OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  List<LabelTaskState> labelTaskStateList = new ArrayList<>(); labelTaskStateList.add(LabelTaskState.COMPLETED); labelTaskStateList.add(LabelTaskState.SKIPPED); labelTaskStateList.add(LabelTaskState.REVIEWED);  LabelTask labelTask =  labelTaskRepository .findById(taskId) .orElseThrow(() -> new NotFoundException(LABEL_TASK_PLACEHOLDER, "id", "" + taskId));  if (!labelTaskStateList.contains(labelTask.getLabelTaskState())) { // The task is not in allowed / supported state. throw new GenericException(WRONG_LABEL_TASK_STATE, null, null, labelTask.getId()); }  // Permission check: is the user admin or user of the project. Project project = labelTask.getProject(); String owner = project.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  /* * Check if a LcEntry with the given export key exists within the documentation. */ Optional<LcEntry> optionalLcEntry = project.getLabelConfiguration().getEntries().stream() .filter(entry -> URLDecoder.decode(entry.getEntryKey(), StandardCharsets.UTF_8).equals(lcEntryKey)) .findFirst();  if (optionalLcEntry.isEmpty()) { // no entry with the given key is defined. throw new NotFoundException(LC_ENTRY_PLACEHOLDER, "entry_key", lcEntryKey); }  Media taskMedia = labelTask.getMedia(); if (taskMedia.isDeleted()) { throw new NotFoundException(IMAGE_PLACEHOLDER, "id", taskMedia.getId()); }  List<LcEntryValue> values = lcEntryValueRepository .findAllByTaskIdAndEntryKeyAndEntryType(taskId, lcEntryKey, LcEntryType.IMAGE_SEGMENTATION);  List<List<PointCollection>> pointCollections = values.stream() .filter(value -> value instanceof LcEntryImageSegmentationValue) .map(value -> ((LcEntryImageSegmentationValue) value).getPointsCollection()) .collect(Collectors.toList());  ImageSize image = (new ImageSizeReader(tika)).getSize(taskMedia); int height = image.getHeight(); int width = image.getWidth();  BufferedImage img = (new SegmentationBitmap(height, width)).addSegmentations(pointCollections).apply().asBufferedImage();  // Stream the Image String mimeType = "image/bmp"; String formatName = mimeType.split("/")[1].toLowerCase(Locale.ENGLISH);  // Stream the Image response.setHeader("Content-Type", mimeType); ImageIO.write(img, formatName, response.getOutputStream()); }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
************************************
[+] input: existTest() { //given Team teamA = new Team("TeamA"); em.persist(teamA); Member member1 = new Member("member1", 10, teamA); em.persist(member1); //when Boolean exist = woowahwanMemberRepository.exist(member1.getId()); //then "<AssertPlaceHolder>"; }
exist(Long memberId) { Integer fetchOne = queryFactory .selectOne() .from(member) .where(member.id.eq(memberId)) .fetchFirst();  return fetchOne != null; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
************************************
[+] input: testAddAndGet() { String taskUuid = UUID.randomUUID().toString(); TaskEntity task = TaskEntity.builder() .taskStatus(TaskStatus.CREATED).retryNum(0).taskUuid(taskUuid).stepId(1L).build(); taskMapper.addTask(task); TaskEntity db2Memory = taskMapper.findTaskById(task.getId()); Assertions."<AssertPlaceHolder>"; }
findTaskById(@Param("taskId") Long taskId);  @Select("select " + COLUMNS + " from task_info where task_uuid = #{taskUuid}
[*] target: assertEquals(task, db2Memory)
[-] pred: org. junit. Assert. assertEquals ( task, db2Memory )
************************************
************************************
[+] input: testConstructor() { String message = "This is the message"; String body = "This is the body"; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=This is the body}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
toString() { return super.toString() + " {code=" + getCode() + ", body=" + getBody() + '}'; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
************************************
[+] input: shouldBuildProperty() { Message message = MessageFactory.property(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
property(String elementLocalName, String propertyName) { return INSTANCE.composeMessage( "property", ContextBuilder.builder() .entry("propertyName", propertyName) .context(elementTransformedPrefix(elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildEscalationCode() { Message message = MessageFactory.escalationCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Escalation code is transformed from 'old' to 'new'. Please review."); }
escalationCode(String oldCode, String newCode) { return INSTANCE.composeMessage( "escalation-code", ContextBuilder.builder().entry("oldCode", oldCode).entry("newCode", newCode).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testInit() { NebulaPreparedStatementImpl statement = new NebulaPreparedStatementImpl(null, ""); "<AssertPlaceHolder>"; }
getParameters() { return parameters; }
[*] target: assertNotNull(statement.getParameters())
[-] pred: org. junit. Assert. assertNotNull ( statement. getParameters() )
************************************
************************************
[+] input: shouldBuildFollowUpDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.followUpDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'followUpDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
followUpDate(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "follow-up-date", ContextBuilder.builder() .context( supportedAttributeExpression( "followUpDate", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateGroup_success() { // 准备参数 MemberGroupCreateReqVO reqVO = randomPojo(MemberGroupCreateReqVO.class, o -> o.setStatus(randomCommonStatus()));  // 调用 Long groupId = groupService.createGroup(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberGroupDO group = groupMapper.selectById(groupId); assertPojoEquals(reqVO, group); }
createGroup(MemberGroupCreateReqVO createReqVO) { // 插入 MemberGroupDO group = MemberGroupConvert.INSTANCE.convert(createReqVO); memberGroupMapper.insert(group); // 返回 return group.getId(); }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(messageKey, headers, null);  "<AssertPlaceHolder>"; }
computeValidSchemaUri( String messageKey, Map<String, String> headers, @RawUri JoyceURI rawUri) throws JsonProcessingException {  return this.computeSchemaUri(messageKey, headers) .filter(joyceURI -> JoyceURI.Subtype.IMPORT.equals(joyceURI.getSubtype())) .orElseThrow( () -> new InvalidJoyceUriException( String.format("Schema is not a valid schema uri. key: %s", messageKey)) ); }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
************************************
[+] input: shouldValidateEncryptAndDecryptAes256GcmNullText() { String keyEncryptionKey = "myKeyEncryptionKeyWrongSize";  String stillNullText = EncryptionUtils.encryptAes256Gcm(null, keyEncryptionKey); "<AssertPlaceHolder>"; }
encryptAes256Gcm(String clearText, String key) { try { if (!StringUtils.hasText(clearText)) { return clearText; }  AESEncrypter encrypter = new AESEncrypter(key.getBytes(StandardCharsets.UTF_8)); JWECryptoParts encryptedData = encrypter.encrypt(new JWEHeader(JWEAlgorithm.A256KW, EncryptionMethod.A256GCM), clearText.getBytes(StandardCharsets.UTF_8));  ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); outputStream.write(encryptedData.getEncryptedKey().decode()); outputStream.write(encryptedData.getInitializationVector().decode()); outputStream.write(encryptedData.getAuthenticationTag().decode()); outputStream.write(encryptedData.getCipherText().decode());  return Base64URL.encode(outputStream.toByteArray()).toString(); } catch (JOSEException | IOException e) { log.error("An error occurred during Connect cluster password encryption", e); }  return clearText; }
[*] target: assertNull(stillNullText)
[-] pred: org. junit. Assert. assertNull ( stillNullText )
************************************
************************************
[+] input: testCreateApp_success() { // 准备参数 PayAppCreateReqVO reqVO = randomPojo(PayAppCreateReqVO.class, o -> o.setStatus((RandomUtil.randomEle(CommonStatusEnum.values()).getStatus())) .setOrderNotifyUrl(randomURL()) .setRefundNotifyUrl(randomURL()));  // 调用 Long appId = appService.createApp(reqVO); // 断言 "<AssertPlaceHolder>"; PayAppDO app = appMapper.selectById(appId); assertPojoEquals(reqVO, app); }
createApp(@Valid PayAppCreateReqVO createReqVO);  /** * 更新支付应用 * * @param updateReqVO 更新 */ void updateApp(@Valid PayAppUpdateReqVO updateReqVO);  /** * 修改应用状态 * * @param id     应用编号 * @param status 状态 */ void updateAppStatus(Long id, Integer status);  /** * 删除支付应用 * * @param id 编号 */ void deleteApp(Long id);  /** * 获得支付应用 * * @param id 编号 * @return 支付应用 */ PayAppDO getApp(Long id);  /** * 获得支付应用列表 * * @param ids 编号 * @return 支付应用列表 */ List<PayAppDO> getAppList(Collection<Long> ids);  /** * 获得支付应用列表 * * @return 支付应用列表 */ List<PayAppDO> getAppList();  /** * 获得支付应用分页 * * @param pageReqVO 分页查询 * @return 支付应用分页 */ PageResult<PayAppDO> getAppPage(PayAppPageReqVO pageReqVO);  /** * 获得指定编号的商户 Map * * @param ids 应用编号集合 * @return 商户 Map */ default Map<Long, PayAppDO> getAppMap(Collection<Long> ids) { List<PayAppDO> list = getAppList(ids); return CollectionUtils.convertMap(list, PayAppDO::getId); }
[*] target: assertNotNull(appId)
[-] pred: org. junit. Assert. assertNotNull ( appId )
************************************
************************************
[+] input: IOException { KeyManager km = SingleConnectorServicesProvider.getKeyFromKeyStoreUri(new File(keystoreFileName).toURI().toString()+"?alias=key2", keystoreFilePass); "<AssertPlaceHolder>"; }
getKeyFromKeyStoreUri(String keystoreUri, String keystorePassword) throws URISyntaxException, KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException { if(keystorePassword== null) { keystorePassword = ""; } String keyAlias = null; KeyStore store = KeyStore.getInstance("pkcs12");  URI uriParser = new URI(keystoreUri); String scheme = uriParser.getScheme();  if (scheme.equalsIgnoreCase("data")){ // example: "data:application/x-pkcs12;base64,MIACAQMwgAY...gtc/qoCAwGQAAAA" String[] schemeSpecificParts = uriParser.getSchemeSpecificPart().split(";"); String contentType = schemeSpecificParts[0]; if (contentType.equalsIgnoreCase("application/x-pkcs12") || contentType.equalsIgnoreCase("application/octet-stream")){ String[] dataParts = schemeSpecificParts[1].split(","); String encodingType = dataParts[0]; if (encodingType.equalsIgnoreCase("base64")){ String keystoreBase64 = dataParts[1]; ByteArrayInputStream keystoreInputStream = new ByteArrayInputStream(Base64.getDecoder().decode(keystoreBase64)); store.load(keystoreInputStream, keystorePassword.toCharArray()); } } } else if (scheme.equalsIgnoreCase("file")) { String keystoreFile = uriParser.getPath(); String query = uriParser.getRawQuery(); try { String[] queryParts = query.split("="); String parameterName = queryParts[0]; String parameterValue = queryParts[1]; if (parameterName.equalsIgnoreCase("alias")){ // example: "file:src/test/resources/certs/keystore.p12?alias=key2" keyAlias = parameterValue; } } catch (NullPointerException|PatternSyntaxException e){ // take the first key from KeyStore, whichever it is // example: "file:src/test/resources/certs/keystore.p12" } FileInputStream in = new FileInputStream(keystoreFile); store.load(in, keystorePassword.toCharArray()); }  KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); try { kmf.init(store, keystorePassword.toCharArray()); final X509KeyManager origKm = (X509KeyManager)kmf.getKeyManagers()[0]; if(keyAlias == null) { return origKm; } else { final String finalKeyAlias = keyAlias; return new X509KeyManager() {  @Override public String chooseClientAlias(String[] arg0, Principal[] arg1, Socket arg2) { return finalKeyAlias; }  @Override public String chooseServerAlias(String arg0, Principal[] arg1, Socket arg2) { return origKm.chooseServerAlias(arg0, arg1, arg2); }  @Override public X509Certificate[] getCertificateChain(String alias) { return origKm.getCertificateChain(alias); }  @Override public String[] getClientAliases(String arg0, Principal[] arg1) { return origKm.getClientAliases(arg0, arg1); }  @Override public PrivateKey getPrivateKey(String alias) { return origKm.getPrivateKey(alias); }  @Override public String[] getServerAliases(String arg0, Principal[] arg1) { return origKm.getServerAliases(arg0, arg1); } }; } } catch (UnrecoverableKeyException e) { log.log(Level.WARNING, "Could not create KeyManager", e); return null; } }
[*] target: assertNotNull(km)
[-] pred: org. junit. Assert. assertNotNull ( km )
************************************
************************************
[+] input: IOException { // mocking and stubbing data for test execution SchemaEntity schema = computeSchema(TEST_SCHEMA_JSON_ENHANCED_USER); JoyceURI rawURI = JoyceURI.createURI(MESSAGE_KEY).orElseThrow(); when(schemaUtils.metadataFromSchemaOrElseThrow(any())).thenReturn(schema.getMetadata()); when(jsonLogicService.filter(any(), any())).thenReturn(true); when(schemaEngine.process(any(SchemaEntity.class), any(), any())) .thenReturn(objectMapper.valueToTree(Map.of("code", "1337"))); when(schemaService.get(any())) .thenReturn(Optional.of(computeSchema(TEST_SCHEMA_JSON_USER)));  SingleImportResult expected = new SingleImportResult(rawURI, ProcessStatus.IMPORTED, null); SingleImportResult actual = importService.processImport(rawURI, null, schema);  // asserts "<AssertPlaceHolder>"; }
processImport( @RawUri JoyceURI rawUri, @EventPayload JsonNode document, SchemaEntity schema) {  JoyceSchemaMetadata metadata = schemaUtils.metadataFromSchemaOrElseThrow(schema); if (jsonLogicService.filter(document, metadata)) {  Span span = GlobalTracer.get().buildSpan("process").start(); span.setTag("uri", this.computeTracerUri(rawUri));  JsonNode result = schemaEngine.process(schema, document, null);  computeParentMetadata(metadata, result, true) .ifPresent(parentMetadata -> { metadata.setUidKey(parentMetadata.getUidKey()); metadata.setCollection(parentMetadata.getCollection()); metadata.setNamespace(parentMetadata.getNamespace()); });  JoyceURI contentURI = computeContentURI(result, metadata); span.finish();  contentProducer.publish(schema, rawUri, contentURI, result, metadata); return SingleImportResult.builder().uri(rawUri).processStatus(ProcessStatus.IMPORTED).build();  } else { log.info("Document with uri {} wasn't processed cause it didn't pass metadata filter.", rawUri); return SingleImportResult.builder().uri(rawUri).processStatus(ProcessStatus.SKIPPED).build(); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: 사용자_포털_메인_예약목록_조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  Map<String, Collection<ReserveItemMainResponseDto>> responseBody = webTestClient.get() .uri(API_URL+"/latest/3") .exchange() .expectStatus().isOk() .expectBody(new ParameterizedTypeReference<Map<String, Collection<ReserveItemMainResponseDto>>>() { }) .returnResult().getResponseBody();  assertThat(responseBody.keySet().size()).isEqualTo(1); assertThat(responseBody.keySet().contains(category.getCodeId())).isTrue(); Collection<ReserveItemMainResponseDto> reserveItemMainResponseDtos = responseBody.get(category.getCodeId()); reserveItemMainResponseDtos.stream().forEach(reserveItemMainResponseDto -> { assertThat(reserveItemMainResponseDto.getReserveItemName().equals(saved.getReserveItemName())); }); }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: testFillTemplate() { String template = "The quick ${COLOR} ${ANIMAL}\njumped over the ${ADJECTIVE} dogs.\n"; Map<String, String> vars = new HashMap<String, String>(); vars.put("COLOR", "brown"); vars.put("ANIMAL", "fox"); vars.put("ADJECTIVE", "lazy"); String result = StringUtil.fillTemplate(template, vars); String expected = "The quick brown fox\njumped over the lazy dogs.\n"; "<AssertPlaceHolder>"; }
fillTemplate(String template, Map<String, ? extends Object> vars) { return fillTemplate(template, vars, varPattern); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: serialize_WithFloatNaNValue_ReturnsQuotedJson() { // Test for serializing float NaN value GenericRecord record = new GenericData.Record(SCHEMA); record.put("floatValue", Float.NaN);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": "NaN", "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: getPlanForSerialization() { plan = mock(PhysicalPlan.class, withSettings().extraInterfaces(SerializablePlan.class)); monitorPlan = new ResourceMonitorPlan(plan, resourceMonitor); "<AssertPlaceHolder>"; }
getPlanForSerialization() { return (SerializablePlan) delegate; }
[*] target: assertEquals(plan, monitorPlan.getPlanForSerialization())
[-] pred: org. junit. Assert. assertEquals ( plan, monitorPlan. getPlanForSerialization() )
************************************
************************************
[+] input: testGenNotifyBody() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwidxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Admin") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
genNotifBody( ShareInfoData sid, Locale locale, Action action, String externalGroupMember) throws MessagingException, ServiceException {  // Body MimeMultipart mmp = new ZMimeMultipart("alternative");  String extUserShareAcceptUrl = null; String extUserLoginUrl = null; String externalGranteeName = null; if (sid.getGranteeTypeCode() == ACL.GRANTEE_GUEST) { externalGranteeName = sid.getGranteeName(); } else if (sid.getGranteeTypeCode() == ACL.GRANTEE_GROUP && externalGroupMember != null) { externalGranteeName = externalGroupMember; } // this mail will go to external email address boolean goesToExternalAddr = (externalGranteeName != null); if (action == null && goesToExternalAddr) { Account owner = Provisioning.getInstance().getAccountById(sid.getOwnerAcctId()); extUserShareAcceptUrl = AccountUtil.getShareAcceptURL(owner, sid.getItemId(), externalGranteeName); extUserLoginUrl = AccountUtil.getExtUserLoginURL(owner); }  // TEXT part (add me first!) String mimePartText; if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, false); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, false); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, false); } MimeBodyPart textPart = new ZMimeBodyPart(); textPart.setText(mimePartText, MimeConstants.P_CHARSET_UTF8); mmp.addBodyPart(textPart);  // HTML part if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, true); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, true); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, true); } MimeBodyPart htmlPart = new ZMimeBodyPart(); htmlPart.setDataHandler(new DataHandler(new HtmlPartDataSource(mimePartText))); mmp.addBodyPart(htmlPart);  // XML part if (!goesToExternalAddr) { MimeBodyPart xmlPart = new ZMimeBodyPart(); xmlPart.setDataHandler( new DataHandler(new XmlPartDataSource(genXmlPart(sid, null, action)))); mmp.addBodyPart(xmlPart); }  return mmp; }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
************************************
[+] input: testAsPendingOperationUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPendingOperationUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/pending"; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: mustHaveNormalPage() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(1), withNextMonster("lonely construct")); try (cleanups) { String input = "hello"; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
decorate(final StringBuffer buffer) { // If we are not on El Vibrato Island, nothing to do. KoLAdventure location = KoLAdventure.lastVisitedLocation; if (location == null || location.getAdventureNumber() != AdventurePool.EL_VIBRATO_ISLAND) { return; }  // If the fight is over, punt if (FightRequest.getCurrentRound() == 0) { return; }  MonsterData monster = MonsterStatusTracker.getLastMonster(); if (!isElVibratoConstruct(monster)) { // Unfortunately, wanders can intrude return; }  int index = buffer.lastIndexOf("</table></center></td>"); if (index != -1) { StringBuilder table = new StringBuilder("<tr><td><center>"); generateTable(table, monster); table.append("</center></td></tr>"); buffer.insert(index, table); } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
************************************
[+] input: getRedis() { MachineProperties.Distributor distributor = new MachineProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
getRedis() { return redis; }
[*] target: assertNotNull(distributor.getRedis())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getRedis() )
************************************
************************************
[+] input: serialize_WithMap_ReturnsCorrectJson() { // Test for serializing a map GenericRecord record = new GenericData.Record(SCHEMA); Map<String, String> map = new HashMap<>(); map.put("one", "valueOne"); map.put("two", "valueTwo"); map.put("three", "valueThree"); record.put("metadata", map);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": {"one": "valueOne", "two": "valueTwo", "three": "valueThree"}, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: statCosIdGenerator() { var cosIdGenerator = new Radix36CosIdGenerator(0); var stat = cosIdGenerator.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(CosIdGeneratorStat.class)); var cosIdGeneratorStat = (CosIdGeneratorStat) stat; assertThat(cosIdGeneratorStat.getMachineId(), equalTo(0)); }
stat();
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
************************************
[+] input: isDatasetNameUniqueAndDeletedFalse_whenDatasetNameIsNotUnique_returnTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findByNameAndDeletedFalseAndOwner(anyString(), anyString())).thenReturn(java.util.Optional.empty());  boolean actual = datasetService.isDatasetNameUniqueAndDeletedFalse(DATASET_NAME, "eforce");  //Then Assertions."<AssertPlaceHolder>"; verify(datasetRepositoryMock).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); verify(datasetRepositoryMock, times(1)).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); }
isDatasetNameUniqueAndDeletedFalse(String datasetName, String owner) { return datasetRepository .findByNameAndDeletedFalseAndOwner(datasetName, owner).isEmpty(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: getNomeDosAtributosDoObjeto_test03() { final List<String> nomeDosAtributosDoObjeto = JavaReflection.getNomeDosAtributosDoObjeto(new Object()); "<AssertPlaceHolder>"; }
getNomeDosAtributosDoObjeto(Object objeto) { throw new UnsupportedOperationException(); }
[*] target: assertTrue(nomeDosAtributosDoObjeto.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( nomeDosAtributosDoObjeto. isEmpty ( ) )
************************************
************************************
[+] input: shouldWorkWithNoCronSet() { dateUtils.setCurrentNow(WINTER_TIME_DATE);  service.switchToSummerTime(); service.switchToWinterTime(); Assertions."<AssertPlaceHolder>"; }
switchToWinterTime() { logger.info("Sunday of October. Is it Winter Time?"); if(dateUtils.isLastSundayOfMonth()) { logger.info("Winter Time");  String cronStart = kubernetesService.getCronStartAsString(); String cronStop = kubernetesService.getCronStopAsString();  String newCronStart = getCronWithWinterTimeAsString(cronStart); String newCronStop = getCronWithWinterTimeAsString(cronStop);  kubernetesService.deleteCronJobs();  kubernetesService.createStartCronJob(newCronStart); kubernetesService.createStopCronJob(newCronStop); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: serialize_WithEnum_ReturnsCorrectJson() { // Test for serializing an enum GenericRecord record = new GenericData.Record(SCHEMA); record.put("suit", new GenericData.EnumSymbol(SCHEMA.getField("suit").schema(), "SPADES"));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": "SPADES"}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: Exception { Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); } }
loadRules() { List<RuleStream> ruleStreams = new ArrayList<>(); ClassLoader classLoader = getClass().getClassLoader();  try { // Use ClassLoader to find all resources that match the RULES_PATH pattern Enumeration<URL> rulesURLs = classLoader.getResources(RULES_PATH);  while (rulesURLs.hasMoreElements()) { URL rulesURL = rulesURLs.nextElement();  try { // Convert the URL to a URI, then to a Path to read the directory contents Path rulesPath; try { rulesPath = Paths.get(rulesURL.toURI()); } catch (FileSystemNotFoundException e) { // Handle the case where the file system is not accessible (e.g., in a JAR) FileSystem fileSystem = FileSystems.newFileSystem(rulesURL.toURI(), Collections.emptyMap()); rulesPath = fileSystem.getPath(RULES_PATH); }  // Scan the directory for rule files try (Stream<Path> paths = Files.walk(rulesPath)) { paths.filter(Files::isRegularFile) .forEach(rulePath -> { try { InputStream ruleInputStream = Files.newInputStream(rulePath); ruleStreams.add(new RuleStream(rulePath.getFileName().toString(), ruleInputStream)); } catch (IOException e) { throw new RuntimeException("Failed to load rule: " + rulePath, e); } }); } } catch (IOException | URISyntaxException e) { throw new RuntimeException("Failed to scan rules directory on classpath: " + rulesURL, e); } } } catch (IOException e) { throw new RuntimeException("Failed to load rules from classpath.", e); }  return ruleStreams; }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
************************************
[+] input: isEnabled() { CosIdProperties properties = new CosIdProperties(); Assertions."<AssertPlaceHolder>"; }
isEnabled() { return enabled; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
************************************
[+] input: mustBeInFight() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(0), withNextMonster("lonely construct")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
decorate(final StringBuffer buffer) { // If we are not on El Vibrato Island, nothing to do. KoLAdventure location = KoLAdventure.lastVisitedLocation; if (location == null || location.getAdventureNumber() != AdventurePool.EL_VIBRATO_ISLAND) { return; }  // If the fight is over, punt if (FightRequest.getCurrentRound() == 0) { return; }  MonsterData monster = MonsterStatusTracker.getLastMonster(); if (!isElVibratoConstruct(monster)) { // Unfortunately, wanders can intrude return; }  int index = buffer.lastIndexOf("</table></center></td>"); if (index != -1) { StringBuilder table = new StringBuilder("<tr><td><center>"); generateTable(table, monster); table.append("</center></td></tr>"); buffer.insert(index, table); } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
************************************
[+] input: shouldReturnUnknownWhenMissingClaims() { Map<String, Object> claims = Map.of(SUBJECT, "user", ROLES, List.of()); Authentication auth = Authentication.build("user", claims);  SecurityRuleResult actual = resourceBasedSecurityRule.checkSecurity(HttpRequest.GET("/anything"), auth); "<AssertPlaceHolder>"; }
checkSecurity(HttpRequest<?> request, @Nullable Authentication authentication) { if (authentication == null) { return SecurityRuleResult.UNKNOWN; }  if (!authentication.getAttributes().containsKey(ROLE_BINDINGS)) { log.debug("No authentication available for path [{}]. Returning unknown.", request.getPath()); return SecurityRuleResult.UNKNOWN; }  // Request to a URL that is not in the scope of this SecurityRule Matcher matcher = namespacedResourcePattern.matcher(request.getPath()); if (!matcher.find()) { log.debug("Invalid namespaced resource for path [{}]. Returning unknown.", request.getPath()); return SecurityRuleResult.UNKNOWN; }  String namespace = matcher.group("namespace"); String resourceSubtype = matcher.group("resourceSubtype"); String resourceType;  // Subresource handling ie. connects/restart or groups/reset if (StringUtils.isNotEmpty(resourceSubtype)) { resourceType = matcher.group("resourceType") + "/" + resourceSubtype; } else { resourceType = matcher.group("resourceType"); }  // Namespace doesn't exist String sub = authentication.getName(); if (namespaceRepository.findByName(namespace).isEmpty()) { log.debug("Namespace not found for user "{}" on path "{}"", sub, request.getPath()); throw new UnknownNamespaceException(namespace); }  // Admin are allowed everything (provided that the namespace exists) Collection<String> roles = authentication.getRoles(); if (roles.contains(IS_ADMIN)) { log.debug("Authorized admin "{}" on path "{}"", sub, request.getPath()); return SecurityRuleResult.ALLOWED; }  AuthenticationInfo authenticationInfo = AuthenticationInfo.of(authentication);  // No role binding for the target namespace. User is targeting a namespace that he is not allowed to access List<AuthenticationRoleBinding> namespaceRoleBindings = authenticationInfo.getRoleBindings() .stream() .filter(roleBinding -> roleBinding.getNamespace().equals(namespace)) .toList();  if (namespaceRoleBindings.isEmpty()) { log.debug("No matching role binding for user "{}" and namespace "{}" on path "{}"", sub, namespace, request.getPath()); throw new ForbiddenNamespaceException(namespace); }  List<AuthenticationRoleBinding> authorizedRoleBindings = namespaceRoleBindings .stream() .filter(roleBinding -> roleBinding.getResourceTypes().contains(resourceType)) .filter(roleBinding -> roleBinding.getVerbs().contains(RoleBinding.Verb.valueOf(request.getMethodName()))) .toList();  // User not authorized to access requested resource if (authorizedRoleBindings.isEmpty()) { log.debug("No matching role binding for user "{}", namespace "{}", resource type "{}" " + "and HTTP verb "{}" on path "{}"", sub, namespace, resourceType, request.getMethodName(), request.getPath()); return SecurityRuleResult.UNKNOWN; }  if (log.isDebugEnabled()) { authorizedRoleBindings.forEach( roleBinding -> log.debug("Found matching role binding "{}"", roleBinding.toString())); log.debug("Authorized user "{}" on path "{}"", sub, request.getPath()); }  return SecurityRuleResult.ALLOWED; }
[*] target: assertEquals(SecurityRuleResult.UNKNOWN, actual)
[-] pred: org. junit. Assert. assertEquals ( SecurityRuleResult. UNKNOWN, actual )
************************************
************************************
[+] input: isHealthy() { when(memoryMonitor.isMemoryHealthy(anyLong())).thenReturn(true);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; }
isHealthy() { try { ByteSizeValue limit = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT); Supplier<Boolean> booleanSupplier = Retry.decorateSupplier(retry, () -> memoryMonitor.isMemoryHealthy(limit.getBytes())); return booleanSupplier.get(); } catch (Exception e) { return false; } }
[*] target: assertTrue(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertTrue ( resourceMonitor. isHealthy() )
************************************
************************************
[+] input: repeatCommand() { int limit = 25; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
isCommandThrottled(ImapCommand command) { if (repeatLimit <= 0) { return false; } else if (command.throttle(lastCommand)) { // commands can implement their own throttle mechanism ZimbraLog.imap.debug("throttled by command"); return true; } else if (isCommandRepeated(command)) { repeats++; lastCommand = command; if (repeats > repeatLimit) { ZimbraLog.imap.debug("throttled by repeat"); return true; } else { return false; } } else { repeats = 1; lastCommand = command; return false; } }
[*] target: assertTrue(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertTrue ( throttle. isCommandThrottled ( command ) )
************************************
************************************
[+] input: Exception { String inputString = new String(ByteUtil.getContent(new File(EMAIL_BASE_DIR + "bug_100966.txt"))); String expectedResult = new String(ByteUtil.getContent(new File(EMAIL_BASE_DIR + "bug_100966_op.txt"))); String result = new DefangFilter(false).extractAndSanitizeAsciiData(inputString); "<AssertPlaceHolder>"; }
extractAndSanitizeAsciiData(String data) { char[] c = data.toCharArray(); StringBuilder sanitizedStrg = new StringBuilder(); StringBuilder asciiData = new StringBuilder(); for (char value : c) { if (value <= ASCII_DATA_VALUE) { asciiData.append(value);  } else { String temp = asciiData.toString(); if (!StringUtil.isNullOrEmpty(temp)) { temp = sanitizeStyleValue(temp); sanitizedStrg.append(temp); asciiData = new StringBuilder(); } sanitizedStrg.append(value); } } // Append the asciiData to the sanitizedStrg sanitizedStrg.append(asciiData); return sanitizedStrg.toString(); }
[*] target: assertEquals(result, expectedResult)
[-] pred: org. junit. Assert. assertEquals ( result, expectedResult )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnFortyTwo");  "<AssertPlaceHolder>"; assertEquals(42, method.invoke(obj)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method) { for (Method m : c.getMethods()) { if (m.getName().equals(method)) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: canWriteTest() { LocalStorage item = LocalStorage.newBuilder().basePath(testBaseDir.getAbsolutePath()) .cleanupThreshold(50) .highWaterMarkOfWrite(95) .lowWaterMarkOfWrite(80) .capacity(100) .cleanIntervalMs(5000) .build();  item.getMetaData().updateDiskSize(20); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(65); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); "<AssertPlaceHolder>"; }
canWrite() { if (isSpaceEnough) { isSpaceEnough = metaData.getDiskSize().doubleValue() * 100 / capacity < highWaterMarkOfWrite; } else { isSpaceEnough = metaData.getDiskSize().doubleValue() * 100 / capacity < lowWaterMarkOfWrite; } return isSpaceEnough && !isCorrupted; }
[*] target: assertTrue(item.canWrite())
[-] pred: org. junit. Assert. assertTrue ( item. canWrite() )
************************************
************************************
[+] input: shouldBuildCollection() { Message message = MessageFactory.collection(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
collection( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "collection", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: Exception {  Account acct = createTestAccount(Provisioning.getInstance(), UUID.randomUUID() + "@" + UUID.randomUUID() + ".com"); ImapHandler handler = new MockImapHandler();  acct.setImapEnabled(true); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertTrue(handler.isAuthenticated());  acct.setImapEnabled(true); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); "<AssertPlaceHolder>"; }
isAuthenticated() { return credentials != null; }
[*] target: assertFalse(handler.isAuthenticated())
[-] pred: org. junit. Assert. assertFalse ( handler. isAuthenticated() )
************************************
************************************
[+] input: schedule() { AtomicBoolean isRun = new AtomicBoolean(false); client.schedule( () -> { isRun.set(true); }); "<AssertPlaceHolder>"; }
schedule(Runnable task) { // at that time, task already running the sql-worker ThreadPool. task.run(); }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
************************************
[+] input: 한건조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  ReserveItemResponseDto responseBody = webTestClient.get() .uri(API_URL+"/{reserveItemId}", saved.getReserveItemId()) .exchange() .expectStatus().isOk() .expectBody(ReserveItemResponseDto.class) .returnResult().getResponseBody();  assertThat(responseBody.getCategoryId()).isEqualTo(category.getCodeId()); assertThat(responseBody.getReserveItemName()).isEqualTo(saved.getReserveItemName());  }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: shouldCallTheArrayMatcherIfTheTwoObjectAreArray() { final var array1 = new ArrayNode(null); final var array2 = new ArrayNode(null);  final var arrayMatcher = (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( arrayMatcher, (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class), (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class) ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(arrayMatcher.jsonDiff(path, array1, array2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, array1, array2);  "<AssertPlaceHolder>"; }
diff(Path path, JsonNode expected, JsonNode received) { if (expected instanceof ObjectNode  && received instanceof ObjectNode) { return this.jsonObjectPartialMatcher.jsonDiff(path, (ObjectNode) expected, (ObjectNode) received, this); } else if (expected instanceof ArrayNode && received instanceof ArrayNode) { return this.jsonArrayPartialMatcher.jsonDiff(path, (ArrayNode) expected, (ArrayNode) received, this); } else if (expected instanceof ValueNode && received instanceof ValueNode){ return this.primitivePartialMatcher.jsonDiff(path, (ValueNode) expected, (ValueNode) received, this); } else { return new UnMatchedPrimaryDiff(path, expected, received); } }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
************************************
[+] input: testBuildAuthRequest_clientNull() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: testBuildQueryStringNestedQuote() { String rawQuery = "SELECT '"1"'"; String expectedQueryInParams = ""SELECT '\\"1\\"'""; String params = sparkSubmitParametersBuilder.query(rawQuery).toString(); "<AssertPlaceHolder>"; }
toString() { return sparkSubmitParameters.toString(); }
[*] target: assertTrue(params.contains(expectedQueryInParams))
[-] pred: org. junit. Assert. assertTrue ( params. contains ( expectedQueryInParams ) )
************************************
************************************
[+] input: testBuildWithoutExtraParameters() { String params = sparkSubmitParametersBuilder.toString();  "<AssertPlaceHolder>"; }
toString() { return sparkSubmitParameters.toString(); }
[*] target: assertNotNull(params)
[-] pred: org. junit. Assert. assertNotNull ( params )
************************************
************************************
[+] input: shouldBuildInputOutput() { Message message = MessageFactory.inputOutput(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutput() { return INSTANCE.emptyMessage(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  outputStream.write(inputBytes); outputStream.close();  String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
close() throws IOException { if (!this.closed) { fileStream.close(); this.closed = true; } }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
************************************
[+] input: shouldGetFirstMatchingLabelNodeInstruction() {  List<Integer[]> labelIndexPairs = ImmutableList.of( new Integer[] { 0, 6 }, new Integer[] { 6, 12 }, new Integer[] { 12, 23 }, new Integer[] { 23, 27 } ); for (int i1 = 0; i1 < labelIndexPairs.size(); i1++) { List<AbstractInsnNode> insnToMatch = new ArrayList<>(); Integer[] labelIndexPair = labelIndexPairs.get(i1); for (int i2 = labelIndexPair[0]; i2 < labelIndexPair[1]; i2++) { insnToMatch.add(instructions.get(i2)); } LabelNode expectedLabel = LABELS[i1]; LabelNode actualLabel = AsmUtils.getFirstMatchingLabelNode(createInstructionList(), insnToMatch); Assertions."<AssertPlaceHolder>"; } }
getFirstMatchingLabelNode(InsnList list, List<AbstractInsnNode> match) {  //@formatter:off for (int i1 = 0; i1 < list.size(); i1++) { AbstractInsnNode instruction = list.get(i1); if (instruction instanceof LabelNode) { int i3 = i1 + 1; boolean matchedInstructions = true; for (int i2 = 0; i2 < match.size() && i3 < list.size(); i2++, i3++) { AbstractInsnNode a = list.get(i3); // ignore line number nodes if (!(a instanceof LineNumberNode)) { AbstractInsnNode b = match.get(i2); // ignore label and line number nodes if (!(b instanceof LabelNode) && !(b instanceof LineNumberNode)) { if (!AsmUtils.equalNodes(a, b)) { matchedInstructions = false; break; } } else i3 -= 1;	// when ignoring nodes counter variables }					// need to be adjusted to compensate for else i2 -= 1;		// the for-loop auto-incremental operation } if (matchedInstructions) { return (LabelNode) instruction; } } }//@formatter:on return null; }
[*] target: assertEquals(expectedLabel, actualLabel)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel )
************************************
************************************
[+] input: testAsUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: testEncryptAndDecrypt() { String masterKey = "1234567890123456"; String input = "This is a test input"; Encryptor encryptor = new EncryptorImpl(masterKey);  String encrypted = encryptor.encrypt(input); String decrypted = encryptor.decrypt(encrypted);  "<AssertPlaceHolder>"; }
decrypt(String encryptedText) { validate(masterKey); final AwsCrypto crypto = AwsCrypto.builder() .withCommitmentPolicy(CommitmentPolicy.RequireEncryptRequireDecrypt) .build();  JceMasterKey jceMasterKey = JceMasterKey.getInstance( new SecretKeySpec(masterKey.getBytes(), "AES"), "Custom", "opensearch.config.master.key", "AES/GCM/NoPadding");  final CryptoResult<byte[], JceMasterKey> decryptedResult = crypto.decryptData(jceMasterKey, Base64.getDecoder().decode(encryptedText)); return new String(decryptedResult.getResult()); }
[*] target: assertEquals(input, decrypted)
[-] pred: org. junit. Assert. assertEquals ( input, decrypted )
************************************
************************************
[+] input: loadUserByUsername() { UserDetails nome = this.autenticacaoService.loadUserByUsername("testeautenticacaoservice@example.com"); "<AssertPlaceHolder>"; }
loadUserByUsername(String username) { Optional<Pessoa> p = service.getPersonByEmail(username);  if (p.isPresent()) { return p.get(); }  throw new UsernameNotFoundException("Dados inválidos!"); }
[*] target: assertNotNull(nome)
[-] pred: org. junit. Assert. assertNotNull ( nome )
************************************
************************************
[+] input: setMachineId() { Integer machineId = 1; MachineProperties.Manual manual = new MachineProperties.Manual(); manual.setMachineId(machineId); Assertions."<AssertPlaceHolder>"; }
getMachineId() { return machineId; }
[*] target: assertEquals(machineId, manual.getMachineId())
[-] pred: org. junit. Assert. assertEquals ( machineId, manual. getMachineId() )
************************************
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
getBuffer() { File tempFile = null; Buffer localfileBuffer = null; try { tempFile = File.createTempFile(PREFIX, SUFFIX); localfileBuffer = new LocalFileBuffer(tempFile); } catch (IOException e) { LOG.error("Unable to create temp file ", e); } return localfileBuffer; }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: isAndroid_whenSetInJavaVMVendor() { String actualVendor = System.getProperty("java.vm.vendor"); System.setProperty("java.vm.vendor", "The Android Project"); boolean isAndroid = OSUtil.isAndroid(); System.setProperty("java.vm.vendor", actualVendor); "<AssertPlaceHolder>"; }
isAndroid() { //If isAndroid is set programmatically if (android) return true;  String javaVendor = System.getProperty("java.vm.vendor");  if (javaVendor != null && "The Android Project".equalsIgnoreCase(javaVendor)) { return true; } else { return false; } }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(null, null, null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
getBuffer(final S3AsyncClient s3Client, final Supplier<String> bucketSupplier, final Supplier<String> keySupplier, final String defaultBucket, final BucketOwnerProvider bucketOwnerProvider) { File tempFile = null; Buffer localfileBuffer = null; try { tempFile = File.createTempFile(PREFIX, SUFFIX); localfileBuffer = new LocalFileBuffer(tempFile, s3Client, bucketSupplier, keySupplier, defaultBucket, bucketOwnerProvider); } catch (IOException e) { LOG.error("Unable to create temp file ", e); } return localfileBuffer; }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: testDense() {  ByteSparseNdArray instance = new ByteSparseNdArray(indices, values, DimensionalSpace.create(shape)); ByteNdArray denseInstance = instance.toDense(); ByteNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { ByteDataBuffer dataBuffer = DataBuffers.ofBytes(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: testSecretVaultFakeShouldNeverBeNullWhenCalled() { //given final VaultFakeImpl underTest = new VaultFakeImpl(HTTPS_LOCALHOST);  //when final SecretVaultFake actual = underTest.secretVaultFake();  //then Assertions."<AssertPlaceHolder>"; }
secretVaultFake() { return secrets; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: isEmpty() { TokenQueue queue = provideEmptyTokenQueue(); assertTrue(queue.isEmpty());  queue = provide2TokenQueue(); assertFalse(queue.isEmpty());  queue.consume(); assertFalse(queue.isEmpty());  queue.consume(); "<AssertPlaceHolder>"; }
isEmpty() { return nextTokenIndex >= tokens.size(); }
[*] target: assertTrue(queue.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( queue. isEmpty() )
************************************
************************************
[+] input: setNamespace() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); String namespace = "wow cosid"; properties.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
getNamespace() { return namespace; }
[*] target: assertEquals(namespace, properties.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, properties. getNamespace() )
************************************
************************************
[+] input: callWithRetryRetriableError() { final int[] attempt = new int[1]; final int maxRetries = 3; final int res = RetryUtil.callWithRetry("test callWithRetryRetriableError", () -> { if (attempt[0] < maxRetries) { ++attempt[0]; throw new ArithmeticException(); } return attempt[0]; }, maxRetries, 1L, RuntimeException.class);  "<AssertPlaceHolder>"; }
callWithRetry(final String callName, final Callable<T> callable, final int maxRetries, final long retryBackoffMs, final Class<E> repeatableException) { final var time = Time.SYSTEM; final int maxAttempts = maxRetries + 1; for (int attempts = 1, retryAttempts = 0; true; ++attempts, ++retryAttempts) { try { LOGGER.trace("Try {} with attempt {}/{}", callName, attempts, maxAttempts); return callable.call(); } catch (final Exception e) { if (!repeatableException.isAssignableFrom(e.getClass())) { final var msg = String.format("Non-repeatable exception trown by %s", callName); LOGGER.error(msg, e); throw new ConnectException(msg, e); } else if (attempts < maxAttempts) { final long sleepTimeMs = computeRandomRetryWaitTimeInMillis(retryAttempts, retryBackoffMs); final var msg = String.format("Failed to %s with attempt %s/%s, will attempt retry after %s ms. ", callName, attempts, maxAttempts, sleepTimeMs); LOGGER.warn(msg + "Failure reason: {}", e); time.sleep(sleepTimeMs); } else { final var msg = String.format("Failed to %s after total of %s attempt(s)", callName, attempts); LOGGER.error(msg, e); throw new ConnectException(msg, e); } } } }
[*] target: assertEquals(maxRetries, res)
[-] pred: org. junit. Assert. assertEquals ( maxRetries, res )
************************************
************************************
[+] input: submitQuery() { NodeClient nodeClient = mock(NodeClient.class); ThreadPool threadPool = mock(ThreadPool.class); when(nodeClient.threadPool()).thenReturn(threadPool);  AtomicBoolean isRun = new AtomicBoolean(false); AbstractPlan queryPlan = new QueryPlan(queryId, plan, queryService, listener) { @Override public void execute() { isRun.set(true); } };  doAnswer( invocation -> { Runnable task = invocation.getArgument(0); task.run(); return null; }) .when(threadPool) .schedule(any(), any(), any()); new OpenSearchQueryManager(nodeClient).submit(queryPlan);  "<AssertPlaceHolder>"; }
submit(AbstractPlan queryPlan) { schedule(nodeClient, () -> queryPlan.execute());  return queryPlan.getQueryId(); }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
************************************
[+] input: testDecodeCellDesc() { var cells = Map.of( "key", RecordCellDesc.builder().dataStoreValueType(ColumnType.STRING).scalarValue("foo").build(), "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), "b", RecordCellDesc.builder() .dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))) .build(), "c", RecordCellDesc.builder().dataStoreValueType(ColumnType.BOOL).scalarValue("1").build(), "d", RecordCellDesc.builder() .dataStoreValueType(ColumnType.BYTES) .scalarValue(Base64.getEncoder().encodeToString("test".getBytes(StandardCharsets.UTF_8))) .build() ); var row = RecordRowDesc.builder().cells(cells).build(); var result = RecordDecoder.decodeRecord(row); var expected = Map.of( "key", BaseValue.valueOf("foo"), "a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.1f), "c", BaseValue.valueOf(true), "d", BaseValue.valueOf(ByteBuffer.wrap("test".getBytes())) ); assertEquals(expected, result);  cells = Map.of("null", RecordCellDesc.builder().dataStoreValueType(ColumnType.UNKNOWN).build()); row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = new HashMap<>() { { put("null", null); } }; assertEquals(expected, result);  // test list, tuple, map, object cells = Map.of( "list", RecordCellDesc.builder().dataStoreValueType(ColumnType.LIST).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))).build() )).build(),  "tuple", RecordCellDesc.builder().dataStoreValueType(ColumnType.TUPLE).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.2f))).build() )).build(),  "map", RecordCellDesc.builder().dataStoreValueType(ColumnType.MAP).mapValue(List.of( new RecordCellDesc.RecordCellMapItem( RecordCellDesc.builder() .dataStoreValueType(ColumnType.INT32) .scalarValue("00000001") .build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.3f))).build() ) )).build(),  "object", RecordCellDesc.builder().dataStoreValueType(ColumnType.OBJECT).objectValue( new RecordCellDesc.RecordCellObject( Map.of( "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32) .scalarValue("00000001").build(), "b", RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.4f))) .build() ), "t" ) ).build() );  row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = Map.of( "list", BaseValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.1f))), "tuple", TupleValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.2f))), "map", BaseValue.valueOf(Map.of(BaseValue.valueOf(1), BaseValue.valueOf(1.3f))), "object", ObjectValue.valueOf("t", Map.of("a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.4f))) ); "<AssertPlaceHolder>"; }
decodeRecord(RecordRowDesc row) { var ret = new HashMap<String, BaseValue>(); for (var entry : row.getCells().entrySet()) { ret.put(entry.getKey(), RecordDecoder.decodeValue(entry.getValue())); } return ret; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: can_serialize_and_deserialize_functions() { Expression original = DSL.abs(literal(30.0)); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
serialize(Expression expr) { try { ByteArrayOutputStream output = new ByteArrayOutputStream(); ObjectOutputStream objectOutput = new ObjectOutputStream(output); objectOutput.writeObject(expr); objectOutput.flush(); return Base64.getEncoder().encodeToString(output.toByteArray()); } catch (IOException e) { throw new IllegalStateException("Failed to serialize expression: " + expr, e); } }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
************************************
[+] input: testApplyComplexObject() { SimpleObject thatItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject thatObj = new ComplexObject(); thatObj.setId(1); thatObj.setName("eq"); thatObj.setItems(List.of(thatItem));  SimpleObject otherItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject otherObj = new ComplexObject(); otherObj.setId(1); otherObj.setName("eq"); otherObj.setItems(List.of(otherItem));  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(thatObj, otherObj); "<AssertPlaceHolder>"; }
apply(Object that, Object other) { if (Objects.equals(that, other)) { return true; } if (that == null || other == null) { return false; } try { BeanInfo thatBean = Introspector.getBeanInfo(that.getClass()); BeanInfo otherBean = Introspector.getBeanInfo(other.getClass()); Map<String, PropertyDescriptor> otherBeanPropertyMap = Arrays.stream(otherBean.getPropertyDescriptors()) .collect(Collectors.toMap(PropertyDescriptor::getName, p -> p)); for (PropertyDescriptor thatProperty : thatBean.getPropertyDescriptors()) { if (thatProperty.getReadMethod() == null || thatProperty.getWriteMethod() == null) { continue; } if (ignoreFields.contains(thatProperty.getName())) { continue; } if (!otherBeanPropertyMap.containsKey(thatProperty.getName())) { return false; } if (Collection.class.isAssignableFrom(thatProperty.getPropertyType())) { Collection thatValue = (Collection) thatProperty.getReadMethod().invoke(that); Collection otherValue = (Collection) otherBeanPropertyMap.get(thatProperty.getName()) .getReadMethod().invoke(other); return handleCollection(thatValue, otherValue); } if (!thatProperty.getPropertyType().isPrimitive()) { Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!apply(thatValue, otherValue)) { return false; } } Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!Objects.equals(thatValue, otherValue)) { return false; } } } catch (IntrospectionException | IllegalAccessException | InvocationTargetException e) { log.error("Error comparing objects", e); throw new RuntimeException(e); } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testApplyComplexObject2() { SimpleObject thatItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject thatObj = new ComplexObject(); thatObj.setId(1); thatObj.setName("eq"); thatObj.setItems(List.of(thatItem));  ComplexObject otherObj = new ComplexObject(); otherObj.setId(1); otherObj.setName("eq"); otherObj.setItems(List.of());  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(thatObj, otherObj); "<AssertPlaceHolder>"; }
apply(Object that, Object other) { if (Objects.equals(that, other)) { return true; } if (that == null || other == null) { return false; } try { BeanInfo thatBean = Introspector.getBeanInfo(that.getClass()); BeanInfo otherBean = Introspector.getBeanInfo(other.getClass()); Map<String, PropertyDescriptor> otherBeanPropertyMap = Arrays.stream(otherBean.getPropertyDescriptors()) .collect(Collectors.toMap(PropertyDescriptor::getName, p -> p)); for (PropertyDescriptor thatProperty : thatBean.getPropertyDescriptors()) { if (thatProperty.getReadMethod() == null || thatProperty.getWriteMethod() == null) { continue; } if (ignoreFields.contains(thatProperty.getName())) { continue; } if (!otherBeanPropertyMap.containsKey(thatProperty.getName())) { return false; } if (Collection.class.isAssignableFrom(thatProperty.getPropertyType())) { Collection thatValue = (Collection) thatProperty.getReadMethod().invoke(that); Collection otherValue = (Collection) otherBeanPropertyMap.get(thatProperty.getName()) .getReadMethod().invoke(other); return handleCollection(thatValue, otherValue); } if (!thatProperty.getPropertyType().isPrimitive()) { Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!apply(thatValue, otherValue)) { return false; } } Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!Objects.equals(thatValue, otherValue)) { return false; } } } catch (IntrospectionException | IllegalAccessException | InvocationTargetException e) { log.error("Error comparing objects", e); throw new RuntimeException(e); } return true; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: setInitIdSegmentSql() { String initIdSegmentSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setInitIdSegmentSql(initIdSegmentSql); Assertions."<AssertPlaceHolder>"; }
getInitIdSegmentSql() { return initIdSegmentSql; }
[*] target: assertEquals(initIdSegmentSql, jdbc.getInitIdSegmentSql())
[-] pred: org. junit. Assert. assertEquals ( initIdSegmentSql, jdbc. getInitIdSegmentSql() )
************************************
************************************
[+] input: createsEmptyList() { final TodoList todoList = new TodoList(); "<AssertPlaceHolder>"; }
size() { return tasks.size(); }
[*] target: assertEquals(0, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, todoList. size() )
************************************
************************************
[+] input: NoSuchMethodException { Method startsWithMethod = String.class.getMethod("startsWith", String.class); FastMethod fm = FastMethod.create(startsWithMethod); "<AssertPlaceHolder>"; }
getModifiers() { return method.getModifiers(); }
[*] target: assertEquals(startsWithMethod.getModifiers(), fm.getModifiers())
[-] pred: org. junit. Assert. assertEquals ( startsWithMethod. getModifiers(), fm. getModifiers() )
************************************
************************************
[+] input: shouldBuildLoopCardinality() { Message message = MessageFactory.loopCardinality(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
loopCardinality() { return INSTANCE.staticMessage("loop-cardinality"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: setProvider() { Map<String, SnowflakeIdProperties.IdDefinition> provider = new HashMap<>(); SnowflakeIdProperties properties = new SnowflakeIdProperties(); properties.setProvider(provider); Assertions."<AssertPlaceHolder>"; }
getProvider() { return provider; }
[*] target: assertEquals(provider, properties.getProvider())
[-] pred: org. junit. Assert. assertEquals ( provider, properties. getProvider() )
************************************
************************************
[+] input: Exception { // /// * // { // "ID": "intelligentGraph.PathQL1", // "query": "getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}", // "type": "read", // "roles": ["user"], // "arguments" : { // "subject" : iri("http://ex.org/1"), // "object" : null // } // } // */ // // QueryMeta queryMeta =QueryMeta.ofQuery("getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}"); // queryMeta.ID= "testPath"; // queryMeta.database = "dj/junit"; // Map<String, Object> arguments = new HashMap<>(); // arguments.put("subject", iri("http://ex.org/1")); // arguments.put("object", null); // queryMeta.arguments=arguments; // // // AbstractDatabase database = services.getConfig().getDatabase( queryMeta.database); // // List<Map<String, Object>> res = database.queryGraph(queryMeta, null); // // ObjectMapper mapper = new ObjectMapper(); // String resJSON = // mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mapper.convertValue(res, // JsonNode.class)); // // String expectedJSON = Files.readString( Paths.get("./src/test/resources/results/", "junit", // queryMeta.ID +".json")); // // "<AssertPlaceHolder>"; // }
queryGraph(QueryMeta info, Map<String, Object> arguments) throws Exception { List<Map<String, Object>> res = new ArrayList<>(); String[] queryParts = info.query.split(IntelligentGraphConstants.PATH_QL_REGEX); switch (queryParts[0]) { case "getFact": case "getFacts": break; case "getPath": case "getPaths": IRI predicate = iri( PATHQL.NAMESPACE + URLEncoder.encode(info.query, StandardCharsets.UTF_8.toString())); // PathQL queries have an implicit subject and object parameter (subject is optionally null) IRI subject = arguments == null || arguments.get("subject") == null ? null : iri(arguments.get("subject")); Value object = arguments == null || arguments.get("object") == null ? null : iri(arguments.get("object")); PathResults pathsIterator = null; try (RepositoryConnection con = getConnection()) { RepositoryResult<Statement> resultsIterator = con.getStatements(subject, predicate, object); Thing subjectThing = subject == null ? null : Thing.create(null, subject, null); pathsIterator = new PathResults(resultsIterator, subjectThing, null, null);  while (pathsIterator.hasNext()) { Path path = pathsIterator.next(); PathSteps pathSteps = new PathSteps(info.database, path); @SuppressWarnings("rawtypes") // assume an implicit path variable Map row = MapUtil.of("path", pathSteps); res.add(row); } } finally { // exceptions are thrown but close iter in all cases if (pathsIterator != null) pathsIterator.close(); } break; default: res = queryInternal(info, arguments, true);  } return res; }
[*] target: assertEquals( expectedJSON, resJSON)
[-] pred: org. junit. Assert. assertEquals ( expectedJSON, resJSON )
************************************
************************************
[+] input: JavetException { String resourceName = "./test.js"; IV8Executor iV8Executor = v8Runtime.getExecutor( "const a = 1; a;").setResourceName(resourceName); try (V8Script v8Script = iV8Executor.compileV8Script()) { assertNotNull(v8Script); "<AssertPlaceHolder>"; assertEquals(1, v8Script.executeInteger()); } }
getResourceName() throws JavetException { if (resourceName == null) { return checkV8Runtime().getV8Internal().scriptGetResourceName(this); } return resourceName; }
[*] target: assertEquals(resourceName, v8Script.getResourceName())
[-] pred: org. junit. Assert. assertEquals ( resourceName, v8Script. getResourceName() )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_greater_than_max_event_size_THEN_return_true() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize((thresholdConfig.getMaxEventSizeBytes() + 1) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanMaxEventSize(final long eventSize) { return (eventSize + APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE) > maxEventSizeBytes; }
[*] target: assertTrue(isEventGreater)
[-] pred: org. junit. Assert. assertTrue ( isEventGreater )
************************************
************************************
[+] input: test() { SortedMap sortedMap = new TreeMap(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList(new ServerNode( String.valueOf(i), "", i / 3, 0, 0, 0, 0, Sets.newHashSet("test"), true)); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
isEmpty() { return assignments == null || assignments.isEmpty(); }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
************************************
[+] input: inValidatePayLoadOfNull() { boolean payloadOfNull = accessTokenService .validateAccessToken(accessTokenService.generateAccessToken(UUID.randomUUID().toString()), null); "<AssertPlaceHolder>"; }
generateAccessToken(String userId) { long expirationTime = System.currentTimeMillis() + expirationTimeMillis; String token = UUID.randomUUID().toString(); String payload = generatePayload(userId,expirationTime); String signature = generateSignature(payload); return token + "." +payload + "." + signature; }
[*] target: assertFalse(payloadOfNull)
[-] pred: org. junit. Assert. assertFalse ( payloadOfNull )
************************************
************************************
[+] input: shouldValidateUserQuotaFormatError() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .build();  ResourceQuota resourceQuota = ResourceQuota.builder() .metadata(Metadata.builder() .cluster("local") .name("test") .build()) .spec( Map.of(USER_PRODUCER_BYTE_RATE.toString(), "producer", USER_CONSUMER_BYTE_RATE.toString(), "consumer")) .build();  List<String> validationErrors = resourceQuotaService.validateNewResourceQuota(ns, resourceQuota);  "<AssertPlaceHolder>"; assertEquals("Invalid value "producer" for field "user/producer_byte_rate": value must be a number.", validationErrors.getFirst()); assertEquals("Invalid value "consumer" for field "user/consumer_byte_rate": value must be a number.", validationErrors.get(1)); }
validateNewResourceQuota(Namespace namespace, ResourceQuota resourceQuota) { List<String> errors = new ArrayList<>();  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_TOPICS.getKey()))) { long used = getCurrentCountTopicsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_TOPICS.getKey())); if (used > limit) { errors.add( invalidQuotaAlreadyExceeded(COUNT_TOPICS, String.valueOf(limit), String.valueOf(used))); } }  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_PARTITIONS.getKey()))) { long used = getCurrentCountPartitionsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_PARTITIONS.getKey())); if (used > limit) { errors.add(invalidQuotaAlreadyExceeded(COUNT_PARTITIONS, String.valueOf(limit), String.valueOf(used))); } }  if (StringUtils.hasText(resourceQuota.getSpec().get(DISK_TOPICS.getKey()))) { String limitAsString = resourceQuota.getSpec().get(DISK_TOPICS.getKey()); if (!limitAsString.endsWith(BYTE) && !limitAsString.endsWith(KIBIBYTE) && !limitAsString.endsWith(MEBIBYTE) && !limitAsString.endsWith(GIBIBYTE)) { errors.add(invalidQuotaFormat(DISK_TOPICS, limitAsString)); } else { long used = getCurrentDiskTopicsByNamespace(namespace); long limit = BytesUtils.humanReadableToBytes(limitAsString); if (used > limit) { errors.add( invalidQuotaAlreadyExceeded(DISK_TOPICS, limitAsString, BytesUtils.bytesToHumanReadable(used))); } } }  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_CONNECTORS.getKey()))) { long used = getCurrentCountConnectorsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_CONNECTORS.getKey())); if (used > limit) { errors.add(invalidQuotaAlreadyExceeded(COUNT_CONNECTORS, String.valueOf(limit), String.valueOf(used))); } }  String producerByteRate = resourceQuota.getSpec().get(USER_PRODUCER_BYTE_RATE.getKey()); if (StringUtils.hasText(producerByteRate)) { try { Double.parseDouble(producerByteRate); } catch (NumberFormatException e) { errors.add(invalidFieldValidationNumber(USER_PRODUCER_BYTE_RATE.toString(), producerByteRate)); } }  String consumerByteRate = resourceQuota.getSpec().get(USER_CONSUMER_BYTE_RATE.getKey()); if (StringUtils.hasText(consumerByteRate)) { try { Double.parseDouble(consumerByteRate); } catch (NumberFormatException e) { errors.add(invalidFieldValidationNumber(USER_CONSUMER_BYTE_RATE.toString(), consumerByteRate)); } }  return errors; }
[*] target: assertEquals(2, validationErrors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, validationErrors. size ( ) )
************************************
************************************
[+] input: should_support_query() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1").build(); "<AssertPlaceHolder>"; }
isSupported() { boolean hasCursor = isCursor(); boolean hasQuery = query != null; boolean hasContent = jsonContent != null && !jsonContent.isEmpty();  Predicate<String> supportedParams = Set.of(QUERY_PARAMS_FORMAT, QUERY_PARAMS_PRETTY)::contains; boolean hasUnsupportedParams = (!params.isEmpty()) && params.keySet().stream().dropWhile(supportedParams).findAny().isPresent();  boolean validCursor = hasCursor && !hasQuery && !hasUnsupportedParams && !hasContent; boolean validQuery = !hasCursor && hasQuery;  return (validCursor || validQuery) // It's a valid cursor or a valid query && isOnlySupportedFieldInPayload() // and request must contain supported fields only && isSupportedFormat(); // and request must be a supported format }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageTrue_setDeletedToTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0);  assertTrue(arg0.isDeleted()); assertNotNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, true);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
deleteMediaFile(String mediaId, boolean deleteMedia) { DataGymSecurity.isAuthenticated(); Media mediaById = getMediaById(mediaId);  // Permissions check String owner = isCurrentUserPermittedToManipulateMedia(mediaById, false); DataGymSecurity.isAdmin(owner, false);  boolean deleted = mediaById.isDeleted();  if (deleted == deleteMedia) { throw new GenericException("image_delete", null, null, mediaId); }  mediaById.setDeleted(deleteMedia); Long currentTime = null;  if (deleteMedia) { currentTime = System.currentTimeMillis();  // Check Pricing Plan Limits decreaseUsedStorage(owner, mediaById); } else { // Check Pricing Plan Limits increaseUsedStorage(owner, mediaById); }  mediaById.setDeleteTime(currentTime);  Media savedMedia = mediaRepository.save(mediaById); return MediaMapper.mapToMediaViewModel(savedMedia); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: streamTest() { Cycle<Integer> cycle = new Cycle<>(1, 2, 3, 4); List<Integer> expected = List.of(1, 2, 3, 4, 1, 2, 3, 4, 1, 2); List<Integer> actual; // Un-queried cycle actual = cycle.stream() .limit(expected.size()) .toList(); Assertions.assertEquals(expected, actual); // Queried cycle cycle.next(); actual = cycle.stream() .limit(expected.size()) .toList(); Assertions."<AssertPlaceHolder>"; }
toList() { Iterator<T> iterator = Iterators.limit(this.iterable.iterator(), this.size); return ImmutableList.copyOf(iterator); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: isFriendly() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
isFriendly() { return friendly; }
[*] target: assertTrue(idDefinition.isFriendly())
[-] pred: org. junit. Assert. assertTrue ( idDefinition. isFriendly() )
************************************
************************************
[+] input: setSessionTimeout() { Duration sessionTimeout = Duration.ofSeconds(10); CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setSessionTimeout(sessionTimeout); Assertions."<AssertPlaceHolder>"; }
getSessionTimeout() { return sessionTimeout; }
[*] target: assertEquals(sessionTimeout, properties.getSessionTimeout())
[-] pred: org. junit. Assert. assertEquals ( sessionTimeout, properties. getSessionTimeout() )
************************************
************************************
[+] input: IOException { final String rawCpuSetInfo = "/docker/1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldBuildFormRef() { Message message = MessageFactory.formRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formRef( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "form-ref", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: IOException { File tempDir = createTempDir(); FileUtil.deleteDirContents(tempDir); "<AssertPlaceHolder>"; assertEquals(0, tempDir.listFiles().length); }
deleteDirContents(File directory) throws IOException { if (!directory.exists()) return; File[] files = directory.listFiles(); if (files != null) { for (File file : files) { if (file.isDirectory()) { deleteDir(file); } else { if (!file.delete()) { throw new IOException("Cannot remove " + file.getPath()); } } } } }
[*] target: assertTrue(tempDir.exists())
[-] pred: org. junit. Assert. assertTrue ( tempDir. exists ( ) )
************************************
************************************
[+] input: testCreateMailTemplate_success() { // 准备参数 MailTemplateSaveReqVO reqVO = randomPojo(MailTemplateSaveReqVO.class) .setId(null); // 防止 id 被赋值  // 调用 Long mailTemplateId = mailTemplateService.createMailTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailTemplateDO mailTemplate = mailTemplateMapper.selectById(mailTemplateId); assertPojoEquals(reqVO, mailTemplate, "id"); }
createMailTemplate(MailTemplateSaveReqVO createReqVO) { // 校验 code 是否唯一 validateCodeUnique(null, createReqVO.getCode());  // 插入 MailTemplateDO template = BeanUtils.toBean(createReqVO, MailTemplateDO.class) .setParams(parseTemplateContentParams(createReqVO.getContent())); mailTemplateMapper.insert(template); return template.getId(); }
[*] target: assertNotNull(mailTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( mailTemplateId )
************************************
************************************
[+] input: shouldBuildInOutBusinessKeyNotSupported() { Message message = MessageFactory.inOutBusinessKeyNotSupported(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inOutBusinessKeyNotSupported(String elementLocalName) { return INSTANCE.composeMessage( "in-out-business-key-not-supported", ContextBuilder.builder() .context(businessKeyNotSupported()) .context(elementNotTransformablePrefix(elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getSettingValue() { when(clusterSettings.get(ClusterName.CLUSTER_NAME_SETTING)).thenReturn(ClusterName.DEFAULT); when(clusterSettings.get(not((eq(ClusterName.CLUSTER_NAME_SETTING))))).thenReturn(null); OpenSearchSettings settings = new OpenSearchSettings(clusterSettings); ByteSizeValue sizeValue = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT);  "<AssertPlaceHolder>"; }
getSettingValue(Settings.Key key) { return (T) latestSettings.getOrDefault(key, defaultSettings.get(key).getDefault(EMPTY)); }
[*] target: assertNotNull(sizeValue)
[-] pred: org. junit. Assert. assertNotNull ( sizeValue )
************************************
************************************
[+] input: IOException { File tempDir = createTempDir(); FileUtil.deleteDir(tempDir); "<AssertPlaceHolder>"; }
deleteDir(File directory) throws IOException { deleteDirContents(directory); if (directory.exists() && !directory.delete()) { throw new IOException("Cannot remove " + directory.getPath()); } }
[*] target: assertFalse(tempDir.exists())
[-] pred: org. junit. Assert. assertFalse ( tempDir. exists ( ) )
************************************
************************************
[+] input: testIsClusterExists() { when(mockClusterPhyService.isClusterExists(CLUSTER)).thenReturn(false);  final boolean result = clusterPhyManager.isClusterExists(CLUSTER);  "<AssertPlaceHolder>"; }
isClusterExists(String clusterName);  /** * 获取控制台物理集群信息列表(ZH有使用) * @param param 查询参数 * @return 物理集群列表 */ List<ClusterPhyVO> listClusterPhys(ClusterPhyDTO param);  /** * 构建客户端需要的数据 * * @param clusterPhyList  集群列表源数据 * @return */ List<ClusterPhyVO> buildClusterInfo(List<ClusterPhy> clusterPhyList);  /** * 获取单个物理集群overView信息 * @param clusterId 物理集群id * @param currentProjectId 当前登录项目 * @return 物理集群信息 */ ClusterPhyVO getClusterPhyOverview(Integer clusterId, Integer currentProjectId);  /** * 获取逻辑集群可关联region的物理集群名称列表 * @param clusterLogicType 逻辑集群类型 * @param clusterLogicId   逻辑集群Id * @see ClusterResourceTypeEnum * @return 物理集群名称 */ Result<List<String>> listCanBeAssociatedRegionOfClustersPhys(Integer clusterLogicType, Long clusterLogicId);  /** * 获取新建逻辑集群可关联的物理集群名称 * @param clusterLogicType  逻辑集群类型 * @see ClusterResourceTypeEnum * @return 物理集群名称 */ Result<List<String>> listCanBeAssociatedClustersPhys(Integer clusterLogicType);  /** * 集群接入 * * @param param     逻辑集群Id, 物理集群名称 * @param operator  操作人 * @param projectId * @return ClusterPhyVO */ Result<ClusterPhyVO> joinCluster(ClusterJoinDTO param, String operator, Integer projectId);  /** * 删除接入集群 删除顺序: region ——> clusterLogic ——> clusterHost ——> clusterRole  ——> cluster * * @param clusterId 集群id * @param operator  操作人 * @param projectId * @return {@link Result}
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testCreateMailLog() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String toMail = randomEmail(); MailAccountDO account = randomPojo(MailAccountDO.class); MailTemplateDO template = randomPojo(MailTemplateDO.class); String templateContent = randomString(); Map<String, Object> templateParams = randomTemplateParams(); Boolean isSend = true; // mock 方法  // 调用 Long logId = mailLogService.createMailLog(userId, userType, toMail, account, template, templateContent, templateParams, isSend); // 断言 MailLogDO log = mailLogMapper.selectById(logId); "<AssertPlaceHolder>"; assertEquals(MailSendStatusEnum.INIT.getStatus(), log.getSendStatus()); assertEquals(userId, log.getUserId()); assertEquals(userType, log.getUserType()); assertEquals(toMail, log.getToMail()); assertEquals(account.getId(), log.getAccountId()); assertEquals(account.getMail(), log.getFromMail()); assertEquals(template.getId(), log.getTemplateId()); assertEquals(template.getCode(), log.getTemplateCode()); assertEquals(template.getNickname(), log.getTemplateNickname()); assertEquals(template.getTitle(), log.getTemplateTitle()); assertEquals(templateContent, log.getTemplateContent()); assertEquals(templateParams, log.getTemplateParams()); }
createMailLog(Long userId, Integer userType, String toMail, MailAccountDO account, MailTemplateDO template, String templateContent, Map<String, Object> templateParams, Boolean isSend) { MailLogDO.MailLogDOBuilder logDOBuilder = MailLogDO.builder(); // 根据是否要发送，设置状态 logDOBuilder.sendStatus(Objects.equals(isSend, true) ? MailSendStatusEnum.INIT.getStatus() : MailSendStatusEnum.IGNORE.getStatus()) // 用户信息 .userId(userId).userType(userType).toMail(toMail) .accountId(account.getId()).fromMail(account.getMail()) // 模板相关字段 .templateId(template.getId()).templateCode(template.getCode()).templateNickname(template.getNickname()) .templateTitle(template.getTitle()).templateContent(templateContent).templateParams(templateParams);  // 插入数据库 MailLogDO logDO = logDOBuilder.build(); mailLogMapper.insert(logDO); return logDO.getId(); }
[*] target: assertNotNull(log)
[-] pred: org. junit. Assert. assertNotNull ( log )
************************************
************************************
[+] input: fromOptionValue_interactions_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("interactions"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("INTERACTIONS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: testCreateBrand_success() { // 准备参数 ProductBrandCreateReqVO reqVO = randomPojo(ProductBrandCreateReqVO.class);  // 调用 Long brandId = brandService.createBrand(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ProductBrandDO brand = brandMapper.selectById(brandId); assertPojoEquals(reqVO, brand); }
createBrand(ProductBrandCreateReqVO createReqVO) { // 校验 validateBrandNameUnique(null, createReqVO.getName());  // 插入 ProductBrandDO brand = ProductBrandConvert.INSTANCE.convert(createReqVO); brandMapper.insert(brand); // 返回 return brand.getId(); }
[*] target: assertNotNull(brandId)
[-] pred: org. junit. Assert. assertNotNull ( brandId )
************************************
************************************
[+] input: testConfigLoadedLocale() { Locale locale = new Locale("de", "AT"); Configuration.resetTestingInstance(); Configuration instance = Configuration.getInstance(locale); String[] tsp_sources = instance.getProperties().getStringArray("tsp_sources"); "<AssertPlaceHolder>"; assertTrue(tsp_sources.length > 1); assertEquals("Zeitpunkt", instance.getResourceBundle().getString("timestamp")); }
getInstance(Locale locale) { if (INSTANCE == null) { INSTANCE = new Configuration(locale); } return INSTANCE; }
[*] target: assertNotNull(tsp_sources)
[-] pred: org. junit. Assert. assertNotNull ( tsp_sources )
************************************
************************************
[+] input: GeneralSecurityException { String password = "test_password"; ScryptKeyDeriver scryptKeyDeriver1 = new ScryptKeyDeriver(); ScryptParameters scryptParameters = scryptKeyDeriver1.getScryptParameters(); AesSecretKey key1 = scryptKeyDeriver1.deriveKeyFromPassword(password); byte[] plainText = "test_data".getBytes(); byte[] iv = AesGcm.generateIv().getIV(); byte[] cipherText = AesGcm.encrypt(key1, iv, plainText); EncryptedData encryptedData = new EncryptedData(iv, cipherText);  ScryptKeyDeriver scryptKeyDeriver2 = new ScryptKeyDeriver(scryptParameters); AesSecretKey key2 = scryptKeyDeriver2.deriveKeyFromPassword(password); byte[] decryptedData = AesGcm.decrypt(key2, encryptedData.getIv(), encryptedData.getCipherText()); "<AssertPlaceHolder>"; }
decrypt(SecretKey secretKey, byte[] iv, byte[] cipherText) throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException { Cipher cipher = Cipher.getInstance(AES_GCM_NO_PADDING_CIPHER_NAME, BouncyCastleProvider.PROVIDER_NAME); GCMParameterSpec spec = new GCMParameterSpec(MAX_TAG_LENGTH, iv); cipher.init(Cipher.DECRYPT_MODE, secretKey, spec); return cipher.doFinal(cipherText); }
[*] target: assertArrayEquals(plainText, decryptedData)
[-] pred: org. junit. Assert. assertArrayEquals ( plainText, decryptedData )
************************************
************************************
[+] input: IOException { when(buffer.getSize()).thenReturn(maxBytes.getBytes() - 1000); when(buffer.getEventCount()).thenReturn(maxEvents + 1); when(buffer.getDuration()).thenReturn(maxCollectionDuration.minusSeconds(1)); Boolean isBatchEnabled = false;  boolean isThresholdExceed = ThresholdCheck.checkThresholdExceed(buffer, maxEvents, maxBytes, maxCollectionDuration, isBatchEnabled);  "<AssertPlaceHolder>"; }
checkThresholdExceed(final Buffer currentBuffer, final int maxEvents, final ByteCount maxBytes, final Duration maxCollectionDuration, final Boolean isBatchEnabled) { if (!isBatchEnabled) return true;  if (maxEvents > 0) { return currentBuffer.getEventCount() + 1 > maxEvents || currentBuffer.getDuration().compareTo(maxCollectionDuration) > 0 || currentBuffer.getSize() > maxBytes.getBytes(); } else { return currentBuffer.getDuration().compareTo(maxCollectionDuration) > 0 || currentBuffer.getSize() > maxBytes.getBytes(); } }
[*] target: assertTrue(isThresholdExceed)
[-] pred: org. junit. Assert. assertTrue ( isThresholdExceed )
************************************
************************************
[+] input: shouldValidateUpdateTopicCleanupPolicyDeleteToCompactOnSelfManaged() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .build();  Topic existing = Topic.builder() .metadata(Metadata.builder() .name("test.topic") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .configs(Map.of("cleanup.policy", "delete", "min.insync.replicas", "2", "retention.ms", "60000")) .build()) .build();  Topic topic = Topic.builder() .metadata(Metadata.builder() .name("test.topic") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .configs(Map.of("cleanup.policy", "compact", "min.insync.replicas", "2", "retention.ms", "60000")) .build()) .build();  when(managedClusterProperties.stream()).thenReturn( Stream.of(new ManagedClusterProperties("local", ManagedClusterProperties.KafkaProvider.SELF_MANAGED)));  List<String> actual = topicService.validateTopicUpdate(ns, existing, topic);  "<AssertPlaceHolder>"; }
validateTopicUpdate(Namespace namespace, Topic existingTopic, Topic newTopic) { List<String> validationErrors = new ArrayList<>();  if (existingTopic.getSpec().getPartitions() != newTopic.getSpec().getPartitions()) { validationErrors.add(invalidImmutableValue("partitions", String.valueOf(newTopic.getSpec().getPartitions()))); }  if (existingTopic.getSpec().getReplicationFactor() != newTopic.getSpec().getReplicationFactor()) { validationErrors.add(invalidImmutableValue("replication.factor", String.valueOf(newTopic.getSpec().getReplicationFactor()))); }  Optional<ManagedClusterProperties> topicCluster = managedClusterProperties .stream() .filter(cluster -> namespace.getMetadata().getCluster().equals(cluster.getName())) .findFirst();  boolean isConfluentCloud = topicCluster.isPresent() && topicCluster.get().isConfluentCloud();  if (isConfluentCloud && existingTopic.getSpec().getConfigs().get(CLEANUP_POLICY_CONFIG).equals(CLEANUP_POLICY_DELETE) && newTopic.getSpec().getConfigs().get(CLEANUP_POLICY_CONFIG).equals(CLEANUP_POLICY_COMPACT)) { validationErrors.add(invalidTopicCleanupPolicy(newTopic.getSpec().getConfigs().get(CLEANUP_POLICY_CONFIG))); }  return validationErrors; }
[*] target: assertEquals(0, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 0, actual. size ( ) )
************************************
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); assertNotNull(location1);  webTestClient.put() .uri(API_URL+"/{locationId}", location1.getLocationId()) .contentType(MediaType.APPLICATION_JSON) .body(BodyInserters.fromValue(LocationUpdateRequestDto.builder() .locationName("updateLocation") .isUse(location1.getIsUse()) .sortSeq(location1.getSortSeq()) .build())) .exchange() .expectStatus().isNoContent();  Location updatedLocation = locationRepository.findById(location1.getLocationId()).block(); "<AssertPlaceHolder>"; assertEquals(updatedLocation.getLocationName(), "updateLocation"); }
findById(@PathVariable Long locationId) { return locationService.findById(locationId); }
[*] target: assertNotNull(updatedLocation)
[-] pred: org. junit. Assert. assertNotNull ( updatedLocation )
************************************
************************************
[+] input: testCreatePost_success() { // 准备参数 PostSaveReqVO reqVO = randomPojo(PostSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 防止 id 被设置 // 调用 Long postId = postService.createPost(reqVO);  // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 PostDO post = postMapper.selectById(postId); assertPojoEquals(reqVO, post, "id"); }
createPost(PostSaveReqVO createReqVO) { // 校验正确性 validatePostForCreateOrUpdate(null, createReqVO.getName(), createReqVO.getCode());  // 插入岗位 PostDO post = BeanUtils.toBean(createReqVO, PostDO.class); postMapper.insert(post); return post.getId(); }
[*] target: assertNotNull(postId)
[-] pred: org. junit. Assert. assertNotNull ( postId )
************************************
************************************
[+] input: test() { SessionClient client = new SessionClient(); String html = client.getHtml("https://www.baidu.com"); "<AssertPlaceHolder>"; }
getHtml(String url){ return getHtml(url,null); }
[*] target: assertNotNull(html)
[-] pred: org. junit. Assert. assertNotNull ( html )
************************************
************************************
[+] input: testCreateAccount() { Account expected = new Account("Gigi", 2100, "223311"); when(mockRepo.findOne("Gigi")).thenReturn(Optional.empty()); when(mockRepo.save(any(Account.class))).thenReturn(expected);  Account result = service.createAccount("Gigi", "223311", "2100"); "<AssertPlaceHolder>"; }
createAccount(String holder, String accountNumber, String amount);  /** * returns sum in the account after adding the amount * @param holder * @param amount * @return amount in the account */ int debit(String holder, int amount);  /** * returns sum in the account after subtracting the amount * @param holder * @param amount * @return amount in the account */ int credit(String holder, int amount);  /** * deletes the account for this holder * @param holder * @returns {@code true}
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: IOException { when(restClient.indices().get(any(GetIndexRequest.class), any(RequestOptions.class))) .thenReturn(getIndexResponse); when(getIndexResponse.getIndices()).thenReturn(new String[] {"index"});  final List<String> indices = client.indices(); "<AssertPlaceHolder>"; }
indices() { try { GetIndexResponse indexResponse = client.indices().get(new GetIndexRequest(), RequestOptions.DEFAULT); final Stream<String> aliasStream = ImmutableList.copyOf(indexResponse.getAliases().values()).stream() .flatMap(Collection::stream) .map(AliasMetadata::alias); return Stream.concat(Arrays.stream(indexResponse.getIndices()), aliasStream) .collect(Collectors.toList()); } catch (IOException e) { throw new IllegalStateException("Failed to get indices", e); } }
[*] target: assertFalse(indices.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( indices. isEmpty ( ) )
************************************
************************************
[+] input: testFinalPositionOfSnakeEmptyCommands() { List<String> commands = List.of(); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: response_isnot_aggregation_when_aggregation_is_empty() { when(searchResponse.getAggregations()).thenReturn(null);  OpenSearchResponse response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
isAggregationResponse() { return aggregations != null; }
[*] target: assertFalse(response.isAggregationResponse())
[-] pred: org. junit. Assert. assertFalse ( response. isAggregationResponse ( ) )
************************************
************************************
[+] input: setStep() { long step = 1; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setStep(step); Assertions."<AssertPlaceHolder>"; }
getStep() { return step; }
[*] target: assertEquals(step, idDefinition.getStep())
[-] pred: org. junit. Assert. assertEquals ( step, idDefinition. getStep() )
************************************
************************************
[+] input: testSuma3() { int algo = 7; int res = Calculadora.suma(algo, 0); "<AssertPlaceHolder>"; }
suma(int a, int b) { return a + b; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
************************************
[+] input: testGetMethodInvalidName() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "notExisting");  "<AssertPlaceHolder>"; }
getMethod(@Nonnull Class<?> c, @Nonnull String method) { for (Method m : c.getMethods()) { if (m.getName().equals(method)) { return m; } }  return null; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
************************************
[+] input: JavetException { IntStream.range(0, 5).forEach(i -> assertFalse(nodeRuntime.isStopping())); IntStream.range(0, 5).forEach(i -> { nodeRuntime.setStopping(false); assertFalse(nodeRuntime.isStopping()); nodeRuntime.setStopping(true); "<AssertPlaceHolder>"; }); nodeRuntime.getExecutor("let count = 0; setInterval(()=> console.log(count++), 1000);").executeVoid(); }
isStopping() { return ((INodeNative) v8Native).isStopping(handle); }
[*] target: assertTrue(nodeRuntime.isStopping())
[-] pred: org. junit. Assert. assertTrue ( nodeRuntime. isStopping() )
************************************
************************************
[+] input: testCreateTag_success() { // 准备参数 MemberTagCreateReqVO reqVO = randomPojo(MemberTagCreateReqVO.class);  // 调用 Long tagId = tagService.createTag(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberTagDO tag = tagMapper.selectById(tagId); assertPojoEquals(reqVO, tag); }
createTag(MemberTagCreateReqVO createReqVO) { // 校验名称唯一 validateTagNameUnique(null, createReqVO.getName()); // 插入 MemberTagDO tag = MemberTagConvert.INSTANCE.convert(createReqVO); memberTagMapper.insert(tag); // 返回 return tag.getId(); }
[*] target: assertNotNull(tagId)
[-] pred: org. junit. Assert. assertNotNull ( tagId )
************************************
************************************
[+] input: testCreateIndexByMap() { // 演示通过自定义map创建索引,最为灵活,若我提供的创建索引API不能满足时可用此方法 LambdaEsIndexWrapper<Document> wrapper = new LambdaEsIndexWrapper<>(); wrapper.indexName(Document.class.getSimpleName().toLowerCase()); wrapper.settings(3, 2); Map<String, Object> map = new HashMap<>(); Map<String, Object> prop = new HashMap<>(); Map<String, String> field = new HashMap<>(); field.put("type", FieldType.KEYWORD.getType()); prop.put("this_is_field", field); map.put("properties", prop); wrapper.mapping(map); boolean isOk = documentMapper.createIndex(wrapper); Assertions."<AssertPlaceHolder>"; }
mapping(Map<String, Object> mapping);  /** * 设置mapping信息 * * @param column    列 * @param fieldType es中的索引类型 * @return wrapper */ default Children mapping(R column, FieldType fieldType) { return mapping(column, fieldType, null, null, null, null, null); }
[*] target: assertTrue(isOk)
[-] pred: org. junit. Assert. assertTrue ( isOk )
************************************
************************************
[+] input: shouldBuildElementNotSupported() { Message message = MessageFactory.elementNotSupported(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementNotSupported(String elementLocalName, String semanticVersion) { return INSTANCE.composeMessage( "element-not-supported", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: normalStatusBar() { String res = tracker.update("§c934/1086❤     §a159§a❈ Defense     §b562/516✎ Mana", false); "<AssertPlaceHolder>"; assertStats(934, 1086, 159, 562, 516, 0); }
update(String actionBar, boolean filterManaUse) { var sb = new StringBuilder(); Matcher matcher = STATUS_HEALTH.matcher(actionBar); if (!matcher.lookingAt()) return actionBar; updateHealth(matcher); if (matcher.group(5) != null) { sb.append("§c❤"); sb.append(matcher.group(5)); } actionBar = reset(actionBar, matcher); if (matcher.usePattern(MANA_STATUS).lookingAt()) { defense = 0; updateMana(matcher); actionBar = reset(actionBar, matcher); } else { if (matcher.usePattern(DEFENSE_STATUS).lookingAt()) { defense = parseInt(matcher, 1); actionBar = reset(actionBar, matcher); } else if (filterManaUse && matcher.usePattern(MANA_USE).lookingAt()) { actionBar = reset(actionBar, matcher); } if (matcher.usePattern(MANA_STATUS).find()) { updateMana(matcher); matcher.appendReplacement(sb, ""); } } matcher.appendTail(sb); String res = sb.toString().trim(); return res.isEmpty() ? null : res; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: notHealthyFastFailure() { when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedFastFailureException.class);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(1)).isMemoryHealthy(anyLong()); }
isHealthy() { try { ByteSizeValue limit = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT); Supplier<Boolean> booleanSupplier = Retry.decorateSupplier(retry, () -> memoryMonitor.isMemoryHealthy(limit.getBytes())); return booleanSupplier.get(); } catch (Exception e) { return false; } }
[*] target: assertFalse(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertFalse ( resourceMonitor. isHealthy() )
************************************
************************************
[+] input: test() { CombinationIterator testObject = new CombinationIterator("abc", 2); assertEquals("ab", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("ac", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("bc", testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return !validCombinations.isEmpty(); }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: testToSkytilsBase64() { List<WaypointCategory> waypointCategories = List.of(new WaypointCategory("category", "hub", List.of(new NamedWaypoint(BlockPos.ORIGIN, "waypoint", new float[]{0f, 0.5f, 1f}, 0.8f, false), new NamedWaypoint(new BlockPos(-1, 0, 1), "1", new float[]{0f, 0f, 0f}, true)))); String waypointCategoriesSkytilsBase64 = Waypoints.toSkytilsBase64(waypointCategories); String expectedWaypointCategoriesSkytilsBase64 = "eyJjYXRlZ29yaWVzIjpbeyJuYW1lIjoiY2F0ZWdvcnkiLCJpc2xhbmQiOiJodWIiLCJ3YXlwb2ludHMiOlt7Im5hbWUiOiJ3YXlwb2ludCIsImNvbG9yIjotODcyMzgyNDY1LCJlbmFibGVkIjpmYWxzZSwieCI6MCwieSI6MCwieiI6MH0seyJuYW1lIjoiMSIsImNvbG9yIjoyMTMwNzA2NDMyLCJlbmFibGVkIjp0cnVlLCJ4IjotMSwieSI6MCwieiI6MX1dfV19";  Assertions."<AssertPlaceHolder>"; }
toSkytilsBase64(List<WaypointCategory> waypointCategories) { return Base64.getEncoder().encodeToString(toSkytilsJson(waypointCategories).getBytes()); }
[*] target: assertEquals(expectedWaypointCategoriesSkytilsBase64, waypointCategoriesSkytilsBase64)
[-] pred: org. junit. Assert. assertEquals ( expectedWaypointCategoriesSkytilsBase64, waypointCategoriesSkytilsBase64 )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor("const x = {a:1,b:2}; x;").execute()) { try (V8ValueProxy v8ValueProxy = v8Runtime.createV8ValueProxy(v8ValueObject)) { assertNotNull(v8ValueProxy); assertFalse(v8ValueProxy.isRevoked()); assertEquals(1, v8ValueProxy.getInteger("a")); assertEquals(2, v8ValueProxy.getInteger("b")); assertTrue(v8ValueProxy.get("c").isUndefined()); v8ValueObject.set("c", 3); assertEquals(3, v8ValueProxy.getInteger("c")); assertEquals("{"a":1,"b":2,"c":3}", v8ValueProxy.toJsonString()); v8ValueProxy.revoke(); "<AssertPlaceHolder>"; } } }
isRevoked() throws JavetException { return checkV8Runtime().getV8Internal().proxyIsRevoked(this); }
[*] target: assertTrue(v8ValueProxy.isRevoked())
[-] pred: org. junit. Assert. assertTrue ( v8ValueProxy. isRevoked() )
************************************
************************************
[+] input: readPropertiesFileMissingTest() { Map<String, String> properties = ResourceUtil.readProperties(ResourceUtilTest.class, "missing.properties");  Assertions."<AssertPlaceHolder>"; }
readProperties(Class<?> clazz, String fileName) { return Objects.requireNonNull(getResourceStream(clazz, fileName).map(inputStream -> { Properties properties = new Properties(); try { properties.load(inputStream); return properties.entrySet().stream() .collect(Collectors.toMap(e -> (String) e.getKey(), e -> (String) e.getValue())); } catch (IOException e) { LOGGER.warn("Could not read resource file '{}', binding will probably fail: {}", fileName, e.getMessage()); return new HashMap<String, String>(); } }).orElse(Map.of())); }
[*] target: assertEquals(0, properties.size())
[-] pred: org. junit. Assert. assertEquals ( 0, properties. size ( ) )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test06() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas(null); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: isAdminOrUser_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("test_org", true);  // Then "<AssertPlaceHolder>"; }
isAdminOrUser(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminOrUserRole = orgs.get(owner).equals(ADMIN_ROLE) || orgs.get(owner).equals(USER_ROLE);  if (!hasAdminOrUserRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
************************************
[+] input: fromOptionValue_test() { DBSourceOptions downloadSourceOptions = DBSourceOptions.fromOptionValue("s3"); "<AssertPlaceHolder>"; assertThat(downloadSourceOptions.toString(), equalTo("S3")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(downloadSourceOptions)
[-] pred: org. junit. Assert. assertNotNull ( downloadSourceOptions )
************************************
************************************
[+] input: compareTo_zero_when_equal() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act int result = vec3c1.compareTo(vec3c2);  // Assert "<AssertPlaceHolder>"; }
compareTo(Vec3Comparable other) { return this.yCoord == other.yCoord ? (this.zCoord == other.zCoord ? (int) (this.xCoord - other.xCoord) : (int) (this.zCoord - other.zCoord)) : (int) (this.yCoord - other.yCoord); }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryExemplarsRequest exemplarsRequest = new PrometheusQueryExemplarsRequest(); exemplarsRequest.setQuery(QUERY); exemplarsRequest.setStartTime(STARTTIME); exemplarsRequest.setEndTime(ENDTIME); QueryExemplarsTable queryExemplarsTable = new QueryExemplarsTable(client, exemplarsRequest); TableScanBuilder tableScanBuilder = queryExemplarsTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryExemplarsFunctionTableScanBuilder); }
createScanBuilder() { return new QueryExemplarsFunctionTableScanBuilder(prometheusClient, exemplarsRequest); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: shouldBuildLocalVariablePropagationNotSupported() { Message message = MessageFactory.localVariablePropagationNotSupported(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
localVariablePropagationNotSupported() { return INSTANCE.staticMessage("local-variable-propagation-not-supported-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testAsUriWithQueryShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3; final String query = "?query=1";  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP, query);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + query; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: getMaior_test03() { int maior = Calculadora.getMaior(10, -20); "<AssertPlaceHolder>"; }
getMaior(int a, int b) { return 0; }
[*] target: assertEquals(10, maior)
[-] pred: org. junit. Assert. assertEquals ( 10, maior )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_equal_to_max_request_size_THEN_return_false() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes()) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
************************************
[+] input: InterruptedException { HBrowser hBrowser = new HBrowser(); try (PlaywrightWindow window = hBrowser.openCustomWindow().debugOutputStream(System.out).headless(false).buildPlaywrightWindow()) { window.load(new File(System.getProperty("user.dir") + "/test.html")); String expected = "This is the expected value!"; String actual = null; window.fill("id=input__text", expected); window.fill("id=input__password", expected); actual = window.getOuterHtml().getElementById("input__text").attr("value"); // TODO seems like it sets the text correctly. // TODO Just got to find a way of retrieving the value from the form, because it wont work with the regular form.value thing. //"<AssertPlaceHolder>"; } }
getOuterHtml() { String rawHtml = jsContext.executeJSAndGetResult("" + "var result = await page.evaluate(() => document.getElementsByTagName("html")[0].outerHTML);\n"); return Jsoup.parse(rawHtml); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testUpdateStartedTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid22") .name("test_step22") .jobId(3L) .lastStepId(5L) .status(StepStatus.RUNNING) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateStartedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(3L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getStartedTime().getTime()); }
findByJobId(@Param("jobId") Long jobId);  @Select("select id, step_uuid as uuid, step_name as name, job_id, last_step_id, step_status as status," + " finished_time, started_time, created_time, modified_time, concurrency, task_num, pool_info," + " origin_json from step" + " where id = #{id}
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
************************************
[+] input: initializationSpan() { SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("dev") .setApplicationName("testApp") .setRumAccessToken("accessToken");  ApplicationInfo appInfo = new ApplicationInfo(); appInfo.labelRes = 14;  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper); when(context.getApplicationInfo()).thenReturn(appInfo); when(context.getString(appInfo.labelRes)).thenReturn(APP_NAME);  InMemorySpanExporter testExporter = InMemorySpanExporter.create(); AppStartupTimer startupTimer = new AppStartupTimer(); RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, startupTimer) { @Override SpanExporter buildFilteringExporter( CurrentNetworkProvider connectionUtil, VisibleScreenTracker visibleScreenTracker) { return testExporter; } }; SplunkRum splunkRum = testInitializer.initialize(mainLooper); startupTimer.runCompletionCallback(); splunkRum.flushSpans();  List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>"; SpanData initSpan = spans.get(0); assertEquals( initSpan.getParentSpanContext(), startupTimer.getStartupSpan().getSpanContext());  verifyResource(initSpan); assertEquals("SplunkRum.initialize", initSpan.getName()); assertEquals("appstart", initSpan.getAttributes().get(COMPONENT_KEY)); assertEquals( "[debug:false,crashReporting:true,anrReporting:true,slowRenderingDetector:true,networkMonitor:true]", initSpan.getAttributes().get(stringKey("config_settings")));  List<EventData> events = initSpan.getEvents(); assertTrue(events.size() > 0); checkEventExists(events, "connectionUtilInitialized"); checkEventExists(events, "exporterInitialized"); checkEventExists(events, "tracerProviderInitialized"); checkEventExists(events, "activityLifecycleCallbacksInitialized"); checkEventExists(events, "crashReportingInitialized"); checkEventExists(events, "anrMonitorInitialized"); }
initialize(Looper mainLooper) { VisibleScreenTracker visibleScreenTracker = new VisibleScreenTracker();  initializationEvents.begin();  OtelRumConfig config = new OtelRumConfig(); GlobalAttributesSupplier globalAttributeSupplier = new GlobalAttributesSupplier(builder.globalAttributes); config.setGlobalAttributes(globalAttributeSupplier); if (!builder.isNetworkMonitorEnabled()) { config.disableNetworkChangeMonitoring(); }  config.disableScreenAttributes(); OpenTelemetryRumBuilder otelRumBuilder = OpenTelemetryRum.builder(application, config);  otelRumBuilder.mergeResource(createSplunkResource()); initializationEvents.emit("resourceInitialized");  CurrentNetworkProvider currentNetworkProvider = CurrentNetworkProvider.createAndStart(application); otelRumBuilder.setCurrentNetworkProvider(currentNetworkProvider); initializationEvents.emit("connectionUtilInitialized");  // TODO: How truly important is the order of these span processors? The location of event // generation should probably not be altered...  // Add batch span processor otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { SpanExporter zipkinExporter = buildFilteringExporter(currentNetworkProvider, visibleScreenTracker); initializationEvents.emit("exporterInitialized");  BatchSpanProcessor batchSpanProcessor = BatchSpanProcessor.builder(zipkinExporter).build(); initializationEvents.emit("batchSpanProcessorInitialized"); return tracerProviderBuilder.addSpanProcessor(batchSpanProcessor); });  // Inhibit the upstream exporter because we add our own BatchSpanProcessor otelRumBuilder.addSpanExporterCustomizer(x -> new NoOpSpanExporter());  // Set span limits otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.setSpanLimits( SpanLimits.builder() .setMaxAttributeValueLength(MAX_ATTRIBUTE_LENGTH) .build()));  // Set up the sampler, if enabled // TODO: Make this better... // This holder is required because we cannot reasonably get the session id until after // OpenTelemetryRum has been created. So this is spackled into place below. AtomicReference<Supplier<String>> sessionSupplierHolder = new AtomicReference<>(() -> null); if (builder.sessionBasedSamplerEnabled) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { Sampler sampler = UInt32QuadXorTraceIdRatioSampler.create( builder.sessionBasedSamplerRatio, () -> { Supplier<String> supplier = sessionSupplierHolder.get(); return supplier == null ? null : supplier.get(); }); return tracerProviderBuilder.setSampler(sampler); }); }  // Wire up the logging exporter, if enabled. if (builder.isDebugEnabled()) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { tracerProviderBuilder.addSpanProcessor( SimpleSpanProcessor.create( builder.decorateWithSpanFilter( LoggingSpanExporter.create()))); initializationEvents.emit("debugSpanExporterInitialized"); return tracerProviderBuilder; }); }  // Add final event showing tracer provider init finished otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { initializationEvents.emit("tracerProviderInitialized"); return tracerProviderBuilder; });  // install the log->span bridge LogToSpanBridge logBridge = new LogToSpanBridge(); otelRumBuilder.addLoggerProviderCustomizer( (loggerProviderBuilder, app) -> loggerProviderBuilder.addLogRecordProcessor(logBridge)); // make sure the TracerProvider gets set as the very first thing, before any other // instrumentations otelRumBuilder.addInstrumentation( instrumentedApplication -> logBridge.setTracerProvider( instrumentedApplication.getOpenTelemetrySdk().getTracerProvider()));  if (builder.isAnrDetectionEnabled()) { installAnrDetector(otelRumBuilder, mainLooper); } if (builder.isSlowRenderingDetectionEnabled()) { installSlowRenderingDetector(otelRumBuilder); } if (builder.isCrashReportingEnabled()) { installCrashReporter(otelRumBuilder); }  SettableScreenAttributesAppender screenAttributesAppender = new SettableScreenAttributesAppender(visibleScreenTracker); otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.addSpanProcessor(screenAttributesAppender));  // Lifecycle events instrumentation are always installed. installLifecycleInstrumentations(otelRumBuilder, visibleScreenTracker);  OpenTelemetryRum openTelemetryRum = otelRumBuilder.build();  sessionSupplierHolder.set(openTelemetryRum::getRumSessionId);  initializationEvents.recordInitializationSpans( builder.getConfigFlags(), openTelemetryRum.getOpenTelemetry().getTracer(RUM_TRACER_NAME));  return new SplunkRum(openTelemetryRum, globalAttributeSupplier, screenAttributesAppender); }
[*] target: assertEquals(1, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 1, spans. size ( ) )
************************************
************************************
[+] input: testSerialize() { Language language = new Language("en", List.of("en_us", "en_gb")); String expectedSerializedLanguage = "en|en_us|en_gb";  String actualSerializedLanguage = this.composer.serialize(language).get(); "<AssertPlaceHolder>"; }
serialize(Language entity) { List<String> all = new ArrayList<>();  all.add(entity.getLang()); all.addAll(entity.getAliases());  return Result.ok(Joiner.on("|").join(all).toString()); }
[*] target: assertEquals(expectedSerializedLanguage, actualSerializedLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedSerializedLanguage, actualSerializedLanguage )
************************************
************************************
[+] input: testFinalPositionOfSnakeOnlyDown() { List<String> commands = List.of("DOWN", "DOWN"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(6, result)
[-] pred: org. junit. Assert. assertEquals ( 6, result )
************************************
************************************
[+] input: testResta1() { int res = Calculadora.resta(8, 3); "<AssertPlaceHolder>"; }
resta(int a, int b) { return a + b; }
[*] target: assertEquals(5, res)
[-] pred: org. junit. Assert. assertEquals ( 5, res )
************************************
************************************
[+] input: shouldCallTheDelegatedIfNodeHaveDifferentType() { final var value1 = IntNode.valueOf(100); final var value2 = TextNode.valueOf("100"); final var jsonMatcher = Mockito.mock(JsonMatcher.class); final var delegated = Mockito.mock(PartialJsonMatcher.class); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(delegated.jsonDiff(expectedPath, value1, value2, jsonMatcher)).thenReturn(expectedJsonDiff);  final var jsonDiff = new LenientNumberPrimitivePartialMatcher(delegated) .jsonDiff(expectedPath, value1, value2, jsonMatcher);  "<AssertPlaceHolder>"; }
jsonDiff(Path path, ValueNode expectedValue, ValueNode receivedValue, JsonMatcher jsonMatcher) { if (expectedValue instanceof NumericNode && receivedValue instanceof NumericNode) { final var expectedIntValue = expectedValue.intValue(); final var actualIntValue = receivedValue.intValue(); final var expectedDecimalValue = receivedValue.doubleValue() % 1; final var actualDecimalValue = expectedValue.doubleValue() % 1;  if (expectedIntValue != actualIntValue || expectedDecimalValue != actualDecimalValue) { return new UnMatchedPrimaryDiff(path, expectedValue, receivedValue); } else { return new MatchedPrimaryDiff(path, expectedValue); } }  return delegated.jsonDiff(path, expectedValue, receivedValue, jsonMatcher); }
[*] target: assertEquals(expectedJsonDiff, jsonDiff)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, jsonDiff )
************************************
************************************
[+] input: has_to_create_DataFecher_By_Path() { // Given final SwaggerGraphQLSchemaBuilder swaggerGraphQLSchemaBuilder = new SwaggerGraphQLSchemaBuilder(); final Swagger swagger = new SwaggerParser().read(SWAGGER_LOCATION);  // When final GraphQLSchema graphQLSchema = swaggerGraphQLSchemaBuilder.swagger(swagger).build();  // Then /** * TODO * Define mock for http://localhost:8080/books and http://localhost:8080/books({id} * Use https://github.com/square/okhttp/tree/master/mockwebserver */ FieldCoordinates fieldCoordinates = coordinates("Query", "books"); DataFetcher dataFetcher = graphQLSchema.getCodeRegistry().getDataFetcher(fieldCoordinates, graphQLSchema.getQueryType().getFieldDefinition("books")); "<AssertPlaceHolder>"; }
build() { return schemaBuilder.build(); }
[*] target: assertNotNull(dataFetcher)
[-] pred: org. junit. Assert. assertNotNull ( dataFetcher )
************************************
************************************
[+] input: shouldBuildConnectorId() { Message message = MessageFactory.connectorId(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
connectorId(String elementLocalName) { return INSTANCE.composeMessage( "connector-id", ContextBuilder.builder().context(elementTransformedPrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: serialize_WithBytesContainingSpecialCharacters_ReturnsEscapedJson() { // Test for serializing bytes with special characters GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{34, 92, 13, 10, 9}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\"\\\\\\r\\n\\t"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: testAssignUserRole() { // 准备参数 Long userId = 1L; Set<Long> roleIds = asSet(200L, 300L); // mock 数据 UserRoleDO userRole01 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(100L); userRoleMapper.insert(userRole01); UserRoleDO userRole02 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(200L); userRoleMapper.insert(userRole02);  // 调用 permissionService.assignUserRole(userId, roleIds); // 断言 List<UserRoleDO> userRoleDOList = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, userRoleDOList.get(0).getUserId()); assertEquals(200L, userRoleDOList.get(0).getRoleId()); assertEquals(1L, userRoleDOList.get(1).getUserId()); assertEquals(300L, userRoleDOList.get(1).getRoleId()); }
assignUserRole(Long userId, Set<Long> roleIds);
[*] target: assertEquals(2, userRoleDOList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, userRoleDOList. size ( ) )
************************************
************************************
[+] input: create() { ClassLoader classLoader = getClass().getClassLoader(); TestPlugin testPlugin = (TestPlugin) pluginClassInitializer.create("io.fairyproject.plugin.initializer.TestPlugin", classLoader);  "<AssertPlaceHolder>"; assertSame(testPlugin.getClass().getClassLoader(), classLoader); }
create(String mainClassPath, ClassLoader classLoader) { Class<?> mainClass; try { mainClass = classLoader.loadClass(mainClassPath); } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to load mainClass " + mainClassPath, e); }  if (!Plugin.class.isAssignableFrom(mainClass)) { throw new IllegalStateException(String.format("%s wasn't implementing Plugin", mainClass)); }  try { return (Plugin) mainClass.getDeclaredConstructor().newInstance(); } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) { throw new IllegalStateException("Failed to new instance " + mainClassPath + " (Does it has no args constructor in the class?)", e); } }
[*] target: assertNotNull(testPlugin)
[-] pred: org. junit. Assert. assertNotNull ( testPlugin )
************************************
************************************
[+] input: shouldListAllNamespaceResourcesWhenEmpty() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .spec(NamespaceSpec.builder() .connectClusters(List.of("local-name")) .kafkaUser("user") .build()) .build();  when(topicService.findAllForNamespace(ns)) .thenReturn(List.of()); when(connectorService.findAllForNamespace(ns)) .thenReturn(List.of()); when(roleBindingService.findAllForNamespace("namespace")) .thenReturn(List.of()); when(aclService.findAllForNamespace(ns)) .thenReturn(List.of()); when(connectClusterService.findAllForNamespaceWithOwnerPermission(ns)) .thenReturn(List.of()); when(resourceQuotaService.findForNamespace("namespace")) .thenReturn(Optional.empty());  List<String> result = namespaceService.findAllResourcesByNamespace(ns); "<AssertPlaceHolder>"; }
findAllResourcesByNamespace(Namespace namespace) { return Stream.of( topicService.findAllForNamespace(namespace).stream() .map(topic -> TOPIC + "/" + topic.getMetadata().getName()), connectorService.findAllForNamespace(namespace).stream() .map(connector -> CONNECTOR + "/" + connector.getMetadata().getName()), connectClusterService.findAllForNamespaceWithOwnerPermission(namespace).stream() .map(connectCluster -> CONNECT_CLUSTER + "/" + connectCluster.getMetadata().getName()), aclService.findAllForNamespace(namespace).stream() .map(ace -> ACCESS_CONTROL_ENTRY + "/" + ace.getMetadata().getName()), resourceQuotaService.findForNamespace(namespace.getMetadata().getName()).stream() .map(resourceQuota -> RESOURCE_QUOTA + "/" + resourceQuota.getMetadata().getName()), roleBindingService.findAllForNamespace(namespace.getMetadata().getName()).stream() .map(roleBinding -> ROLE_BINDING + "/" + roleBinding.getMetadata().getName()) ) .reduce(Stream::concat) .orElseGet(Stream::empty) .toList(); }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
************************************
[+] input: setFriendly() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setFriendly(false); Assertions."<AssertPlaceHolder>"; }
isFriendly() { return friendly; }
[*] target: assertFalse(idDefinition.isFriendly())
[-] pred: org. junit. Assert. assertFalse ( idDefinition. isFriendly() )
************************************
************************************
[+] input: equals_false_when_different_object_type() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); BlockPos blockPos = new BlockPos(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(blockPos);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: testSetLifetimeActionsShouldOverwriteTheMapWhenCalledWithValidData() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, Map.of());  //when underTest.setLifetimeActions(expected);  //then final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> actual = underTest.getLifetimeActions(); Assertions."<AssertPlaceHolder>"; }
getLifetimeActions() { return lifetimeActions; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryRequest prometheusQueryRequest = new PrometheusQueryRequest(); prometheusQueryRequest.setPromQl("test"); prometheusQueryRequest.setStep("15m"); PrometheusMetricTable prometheusMetricTable = new PrometheusMetricTable(client, prometheusQueryRequest); TableScanBuilder tableScanBuilder = prometheusMetricTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryRangeFunctionTableScanBuilder); }
createScanBuilder() { if (metricName == null) { return new QueryRangeFunctionTableScanBuilder(prometheusClient, prometheusQueryRequest); } else { return null; } }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: testContainsNameShouldReturnFalseWhenCalledWithNonExistingKey() { //given underTest.put(VERSIONED_KEY_ENTITY_ID_1_VERSION_1, key1Version1Mock);  //when final boolean actual = underTest.containsName(KEY_NAME_2);  //then Assertions."<AssertPlaceHolder>"; }
containsName(@NonNull final String name) { return entities.containsKey(name); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
listVaults() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(VAULT_MODEL_LIST_TYPE_REF)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: serialize_WithBytesValue_ReturnsCorrectJson() { // Test for serializing bytes value GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{1, 2, 3}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\u0001\\u0002\\u0003"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setDeleted(true);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: initialization_onlyOnce() { Application application = mock(Application.class, RETURNS_DEEP_STUBS); Context context = mock(Context.class);  SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setApplicationName("appName") .setBeaconEndpoint("http://backend") .setRumAccessToken("abracadabra") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context);  SplunkRum singleton = SplunkRum.initialize(splunkRumBuilder, application); SplunkRum sameInstance = splunkRumBuilder.build(application);  "<AssertPlaceHolder>"; }
initialize(SplunkRumBuilder builder, Application application) { if (INSTANCE != null) { Log.w(LOG_TAG, "Singleton SplunkRum instance has already been initialized."); return INSTANCE; }  if (builder.isSubprocessInstrumentationDisabled() && builder.isSubprocess) { INSTANCE = SplunkRum.noop(); } else { INSTANCE = new RumInitializer(builder, application, startupTimer) .initialize(Looper.getMainLooper()); }  if (builder.isDebugEnabled()) { Log.i( LOG_TAG, "Splunk RUM monitoring initialized with session ID: " + INSTANCE.getRumSessionId()); }  return INSTANCE; }
[*] target: assertSame(singleton, sameInstance)
[-] pred: org. junit. Assert. assertSame ( singleton, sameInstance )
************************************
************************************
[+] input: testHash() { DateTimeStamp a = new DateTimeStamp(.586); DateTimeStamp b = new DateTimeStamp(.587); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0000", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp(.587); b = new DateTimeStamp(.587); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); "<AssertPlaceHolder>";  }
hashCode() { return Objects.hash(getDateTime(), getTimeStamp()); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
************************************
[+] input: setFetchMaxIdSql() { String fetchMaxIdSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setFetchMaxIdSql(fetchMaxIdSql); Assertions."<AssertPlaceHolder>"; }
getFetchMaxIdSql() { return fetchMaxIdSql; }
[*] target: assertEquals(fetchMaxIdSql, jdbc.getFetchMaxIdSql())
[-] pred: org. junit. Assert. assertEquals ( fetchMaxIdSql, jdbc. getFetchMaxIdSql ( ) )
************************************
************************************
[+] input: Exception { Account acct = Provisioning.getInstance().getAccountByName("testMove@zimbra.com"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(acct); // Add two messages to inbox, one with search match and other with no match DeliveryOptions dopt = new DeliveryOptions() .setFolderId(Mailbox.ID_FOLDER_INBOX) .setFlags(Flag.BITMASK_UNREAD | Flag.BITMASK_MUTED); mbox.addMessage(null, MailboxTestUtil.generateMessage("test subject"), dopt, null); mbox.addMessage(null, MailboxTestUtil.generateMessage("unmatched subject"), dopt, null); TypedIdList ids = mbox.getItemIds(null, 2); assertEquals(2, ids.size()); SearchRequest sRequest = new SearchRequest(); sRequest.setSearchTypes("conversation"); // search with query 'test' sRequest.setQuery("test"); BulkAction bAction = new BulkAction(); // search action - move search result to 'Trash' bAction.setOp(BulkAction.Operation.move); bAction.setFolder("Trash"); Map<String, Object> context = ServiceTestUtil.getRequestContext(acct); ZimbraSoapContext zsc = (ZimbraSoapContext) context.get(SoapEngine.ZIMBRA_CONTEXT); Element searchResponse = new Search().handle(zsc.jaxbToElement(sRequest), ServiceTestUtil.getRequestContext(acct)); com.zimbra.soap.mail.message.SearchResponse sResponse = zsc.elementToJaxb(searchResponse); List<SearchHit> searchHits = sResponse.getSearchHits(); SearchAction.performAction(bAction, sRequest, searchHits, mbox, null); // check inbox contains only 1 unmatched mail item after move List<MailItem> mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 2, com.zimbra.cs.index.SortBy.DATE_DESC); "<AssertPlaceHolder>"; assertEquals("unmatched subject", mailItems.get(0).getSubject()); // check trash contains mail item having 'test subject' after move mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 3, com.zimbra.cs.index.SortBy.DATE_DESC); assertEquals(1, mailItems.size()); assertEquals("test subject", mailItems.get(0).getSubject()); }
performAction( BulkAction action, SearchRequest searchRequest, List<SearchHit> searchHits, Mailbox mbox, OperationContext octxt) throws ServiceException, AuthTokenException, IOException, HttpException { switch (action.getOp()) { case move: performMoveAction(action, searchRequest, searchHits, mbox, octxt); break; case read: performReadUnreadAction(searchRequest, searchHits, mbox, "read"); break; case unread: performReadUnreadAction(searchRequest, searchHits, mbox, "!read"); break; default: throw ServiceException.INVALID_REQUEST("Unsupported action", null); } }
[*] target: assertEquals(1, mailItems.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mailItems. size ( ) )
************************************
************************************
[+] input: getMaior_test04() { int maior = Calculadora.getMaior(0, 0); "<AssertPlaceHolder>"; }
getMaior(int a, int b) { return 0; }
[*] target: assertEquals(0, maior)
[-] pred: org. junit. Assert. assertEquals ( 0, maior )
************************************
************************************
[+] input: isAdminOrUser_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("test_org", true);  // Then "<AssertPlaceHolder>"; }
isAdminOrUser(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminOrUserRole = orgs.get(owner).equals(ADMIN_ROLE) || orgs.get(owner).equals(USER_ROLE);  if (!hasAdminOrUserRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
************************************
[+] input: testLength() { byte [] bytes = { 'a', 'b', 'c', 'd', 'e', 'f',}; BinaryString bs = new BinaryString(bytes, 2, 3); "<AssertPlaceHolder>"; }
length() { return usedLen; }
[*] target: assertEquals(3, bs.length())
[-] pred: org. junit. Assert. assertEquals ( 3, bs. length() )
************************************
************************************
[+] input: isAdmin_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.isAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
isAdmin(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminRole = orgs.get(owner).equals(ADMIN_ROLE);  if (!hasAdminRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
************************************
[+] input: shouldValidateEncryptAndDecryptAes256NullText() { final String encryptionKey = "myKeyEncryption"; final String encryptionSalt = "p8t42EhY9z2eSUdpGeq7HX7RboMrsJAhUnu3EEJJVS";  final String stillBlankText = EncryptionUtils.encryptAesWithPrefix(null, encryptionKey, encryptionSalt); "<AssertPlaceHolder>"; }
encryptAesWithPrefix(final String clearText, final String key, final String salt) { if (!StringUtils.hasText(clearText)) { return clearText; }  try { final SecretKey secret = getAesSecretKey(key, salt); final byte[] iv = getRandomIv(); final var cipher = Cipher.getInstance(ENCRYPT_ALGO); cipher.init(Cipher.ENCRYPT_MODE, secret, new GCMParameterSpec(TAG_LENGTH_BIT, iv)); final byte[] cipherText = cipher.doFinal(clearText.getBytes(StandardCharsets.UTF_8)); final byte[] prefix = NS4KAFKA_PREFIX.getBytes(StandardCharsets.UTF_8); final byte[] cipherTextWithIv = ByteBuffer.allocate(prefix.length + iv.length + cipherText.length) .put(prefix) .put(iv) .put(cipherText) .array(); return Base64.getEncoder().encodeToString(cipherTextWithIv); } catch (Exception e) { log.error("An error occurred during Connect cluster AES256 string encryption", e); }  return clearText; }
[*] target: assertNull(stillBlankText)
[-] pred: org. junit. Assert. assertNull ( stillBlankText )
************************************
************************************
[+] input: testGetDefaultNgrokConfig() { // GIVEN final JavaNgrokConfig javaNgrokConfigV3Tmp = new JavaNgrokConfig.Builder() .withConfigPath(Paths.get("build", ".ngrok", "config_v2_tmp.yml").toAbsolutePath()) .withNgrokPath(Paths.get("build", "bin", "v2", NgrokInstaller.getNgrokBin())) .withNgrokVersion(NgrokVersion.V3) .build(); ngrokInstaller.installDefaultConfig(javaNgrokConfigV3Tmp.getConfigPath(), Map.of(), javaNgrokConfigV3Tmp.getNgrokVersion());  // WHEN final Map<String, Object> ngrokConfig = ngrokInstaller.getNgrokConfig(javaNgrokConfigV3Tmp.getConfigPath(), true, javaNgrokConfigV3Tmp.getNgrokVersion());  // THEN "<AssertPlaceHolder>"; assertEquals(2, ngrokConfig.size()); assertTrue(Files.exists(javaNgrokConfigV3Tmp.getConfigPath())); }
getNgrokConfig(final Path configPath, final boolean useCache, final NgrokVersion ngrokVersion) { final String key = configPath.toString(); if (!configCache.containsKey(key) || !useCache) { try { final String config = Files.readString(configPath);  if (isBlank(config)) { configCache.put(key, getDefaultConfig(ngrokVersion)); } else { configCache.put(key, yaml.load(config)); } } catch (final IOException | JsonParseException e) { throw new JavaNgrokInstallerException(String.format("An error occurred while parsing " + "the config file: %s", configPath), e); } }  return configCache.get(key); }
[*] target: assertNotNull(ngrokConfig)
[-] pred: org. junit. Assert. assertNotNull ( ngrokConfig )
************************************
************************************
[+] input: Exception { // Ensure the rules directory has at least one file Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); assertTrue(ruleStream.getName().endsWith("-rule.yaml")); } }
loadRules() { List<RuleStream> ruleStreams = new ArrayList<>(); ClassLoader classLoader = getClass().getClassLoader();  try { // Use ClassLoader to find all resources that match the RULES_PATH pattern Enumeration<URL> rulesURLs = classLoader.getResources(RULES_PATH);  while (rulesURLs.hasMoreElements()) { URL rulesURL = rulesURLs.nextElement();  try { // Convert the URL to a URI, then to a Path to read the directory contents Path rulesPath; try { rulesPath = Paths.get(rulesURL.toURI()); } catch (FileSystemNotFoundException e) { // Handle the case where the file system is not accessible (e.g., in a JAR) FileSystem fileSystem = FileSystems.newFileSystem(rulesURL.toURI(), Collections.emptyMap()); rulesPath = fileSystem.getPath(RULES_PATH); }  // Scan the directory for rule files try (Stream<Path> paths = Files.walk(rulesPath)) { paths.filter(Files::isRegularFile) .forEach(rulePath -> { try { InputStream ruleInputStream = Files.newInputStream(rulePath); ruleStreams.add(new RuleStream(rulePath.getFileName().toString(), ruleInputStream)); } catch (IOException e) { throw new RuntimeException("Failed to load rule: " + rulePath, e); } }); } } catch (IOException | URISyntaxException e) { throw new RuntimeException("Failed to scan rules directory on classpath: " + rulesURL, e); } } } catch (IOException e) { throw new RuntimeException("Failed to load rules from classpath.", e); }  return ruleStreams; }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
************************************
[+] input: setNamespace() { String namespace = "test"; CosIdProperties properties = new CosIdProperties(); properties.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
getNamespace() { return namespace; }
[*] target: assertEquals(namespace, properties.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, properties. getNamespace() )
************************************
************************************
[+] input: createConnectionViaUserPwdGood() { Connection connectionMock = Mockito.mock(Connection.class); try (MockedStatic<DriverManager> driverMgr = Mockito.mockStatic(DriverManager.class)) { driverMgr.when(() -> DriverManager.getConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())) .thenReturn(connectionMock);  Connection conn = DbUtil.createConnectionViaUserPwd("a", "b", "c"); "<AssertPlaceHolder>"; } }
createConnectionViaUserPwd( @NonNull String username, @NonNull String pwd, @NonNull String dbEndpoint) { Connection connection;  try { connection = DriverManager.getConnection(JDBC_PREFIX + dbEndpoint, username, pwd); logger.info("Connection Established"); return connection;  } catch (SQLException e) { logger.info("Connection FAILED"); logger.error(e.getMessage(), e); }  return null; }
[*] target: assertNotNull(conn)
[-] pred: org. junit. Assert. assertNotNull ( conn )
************************************
************************************
[+] input: basicEvents() { StateMachineBuilder builder = StateMachine.builder(); builder.initialState(ExampleState.A); builder.state(ExampleState.A); builder.state(ExampleState.B);  AtomicBoolean startCalled = new AtomicBoolean(false); AtomicBoolean transitionCalled = new AtomicBoolean(false); AtomicBoolean stopCalled = new AtomicBoolean(false);  EventNode<StateMachineEvent> eventNode = builder.eventNode(); eventNode.addListener(StateMachineStartEvent.class, event -> startCalled.set(true)); eventNode.addListener(StateMachineTransitionEvent.class, event -> transitionCalled.set(true)); eventNode.addListener(StateMachineStopEvent.class, event -> stopCalled.set(true));  StateMachine stateMachine = builder.build();  Assertions.assertTrue(startCalled.get()); Assertions.assertFalse(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.transform(ExampleState.B);  Assertions.assertTrue(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.stop(Signal.UNDEFINED);  Assertions."<AssertPlaceHolder>"; }
stop(@NotNull Signal signal);
[*] target: assertTrue(stopCalled.get())
[-] pred: org. junit. Assert. assertTrue ( stopCalled. get ( ) )
************************************
************************************
[+] input: testEvents() { var events = eventMapper.listEventsOfResource(null, null); assertEquals(0, events.size());  var entity = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.JOB) .resourceId(1L) .message("foo") .data("{}") .createdTime(new Date(123L * 1000)) .build();  var entity2 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(2L) .message("bar") .data("{}") .createdTime(new Date(456L * 1000)) .build();  var entity3 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(3L) .message("baz") .data("{}") .createdTime(new Date(789L * 1000)) .build();  eventMapper.insert(entity); eventMapper.insert(entity2); eventMapper.insert(entity3);  events = eventMapper.listEventsOfResource(EventResourceType.JOB, 1L); assertEquals(1, events.size()); assertEquals(entity, events.get(0));  events = eventMapper.listEventsOfResource(EventResourceType.TASK, 2L); "<AssertPlaceHolder>"; assertEquals(entity2, events.get(0));  events = eventMapper.listEventsOfResources(EventResourceType.TASK, List.of(2L, 3L)); assertEquals(2, events.size()); assertThat(events).containsExactly(entity2, entity3); }
listEventsOfResource(@NotNull Event.EventResourceType resourceType, @NotNull Long resourceId);  @Select("<script>" + "select " + COLUMNS + " from " + TABLE + " where resource_type = #{resourceType}
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
************************************
[+] input: getFunctions() { SparkStorageEngine engine = new SparkStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(1, functionResolverCollection.size()); assertTrue( functionResolverCollection.iterator().next() instanceof SparkSqlTableFunctionResolver); }
getFunctions() { return Collections.singletonList(new SparkSqlTableFunctionResolver(sparkClient)); }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
************************************
[+] input: wrongUrlSilentlyFails() { ParseCatalog<Step> kameletParser = parseCatalog.getParser("https://nothing/wrong/url.git", "");  List<Step> steps = kameletParser.parse().join(); Assertions."<AssertPlaceHolder>"; assertEquals(0, steps.size()); }
getParser(final String url, final String tag) { ParseCatalog<Step> parseCatalog = new GitParseCatalog<>(url, tag); parseCatalog.setFileVisitor(kameletFileProcessor); return parseCatalog; }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
************************************
[+] input: shouldProperlyMapDtoToModel() { //given LectureDTO dto = new LectureDTO(); dto.setId(11L); dto.setName("lecture name");  //when LectureModel model = mapperUnderTest.toModel(dto);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(dto.getId(), model.getId()); Assertions.assertEquals(dto.getName(), model.getName()); }
toModel(LectureDTO dto);
[*] target: assertNotNull(model)
[-] pred: org. junit. Assert. assertNotNull ( model )
************************************
************************************
[+] input: isAdminOrUser_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("eforce21", false);  // Then "<AssertPlaceHolder>"; }
isAdminOrUser(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminOrUserRole = orgs.get(owner).equals(ADMIN_ROLE) || orgs.get(owner).equals(USER_ROLE);  if (!hasAdminOrUserRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
************************************
[+] input: convertToDatabaseColumnNull() { AnimalSexoConverter converter = new AnimalSexoConverter(); String s = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(AnimalSexo sexo) { if(sexo == null) { return null; } return sexo.getDescricao(); }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
************************************
[+] input: testCreateUserGroup_success() { // 准备参数 BpmUserGroupSaveReqVO reqVO = RandomUtils.randomPojo(BpmUserGroupSaveReqVO.class);  // 调用 Long userGroupId = userGroupService.createUserGroup(reqVO); // 断言 Assertions."<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmUserGroupDO userGroup = userGroupMapper.selectById(userGroupId); AssertUtils.assertPojoEquals(reqVO, userGroup); }
createUserGroup(@Valid BpmUserGroupSaveReqVO createReqVO);
[*] target: assertNotNull(userGroupId)
[-] pred: org. junit. Assert. assertNotNull ( userGroupId )
************************************
************************************
[+] input: shouldProperlyMapStudentToDto() { //given StudentModel studentModel = new StudentModel(); studentModel.setId(1L); studentModel.setName("Ivan");  LectureModel lectureModel = new LectureModel(); lectureModel.setId(2L); lectureModel.setName("Matan");  studentModel.setLectures(singletonList(lectureModel));  LecturerModel lecturerModel = new LecturerModel();  lecturerModel.setId(3L); lecturerModel.setName("Vladimir Kirillovich");  studentModel.setLecturers(singletonList(lecturerModel));  //when StudentDTO studentDTO = studentMapper.toDTO(studentModel);  //then "<AssertPlaceHolder>"; assertEquals(1L, studentDTO.getId()); assertEquals("Ivan", studentDTO.getName());  assertEquals(1, studentDTO.getLecturers().size()); assertEquals(2L, studentDTO.getLectures().get(0).getId()); assertEquals("Matan", studentDTO.getLectures().get(0).getName());  assertEquals(1, studentDTO.getLectures().size()); assertEquals(3L, studentDTO.getLecturers().get(0).getId()); assertEquals("Vladimir Kirillovich", studentDTO.getLecturers().get(0).getName()); }
toDTO(StudentModel model);
[*] target: assertNotNull(studentDTO)
[-] pred: org. junit. Assert. assertNotNull ( studentDTO )
************************************
************************************
[+] input: shouldCreateCommandForLongChain() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, AdminConstants.DEFAULT_CHAIN, domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
createCommand(String remoteCommand, String email, String chain, String domainName, String publicServiceHostName, String[] virtualHosts) {  this.stringBuilder = new StringBuilder();  stringBuilder.append(remoteCommand);  if (Objects.equals(chain, CHAIN_TYPE)) { addSubCommand(" ", CHAIN, SHORT_CHAIN); }  addSubCommand(" ", AGREEMENT, EMAIL, email, NON_INTERACTIVELY, KEEP, WEBROOT, WEBROOT_PATH, CERT_NAME, domainName);  addSubCommand(D, publicServiceHostName); addSubCommand(D, virtualHosts);  return stringBuilder.toString(); }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
************************************
[+] input: setTimestampBit() { int timestampBit = 45; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setTimestampBit(timestampBit); Assertions."<AssertPlaceHolder>"; }
getTimestampBit() { return timestampBit; }
[*] target: assertEquals(timestampBit, idDefinition.getTimestampBit())
[-] pred: org. junit. Assert. assertEquals ( timestampBit, idDefinition. getTimestampBit() )
************************************
************************************
[+] input: shouldBuildAssignee() { Message message = MessageFactory.assignee(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
assignee( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "assignee", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithNull() { //given  //when final VaultModel actual = underTest.convert(null);  //then Assertions."<AssertPlaceHolder>"; }
convert(@Nullable final VaultFake source) { return Optional.ofNullable(source) .map(this::convertNonNull) .orElse(null); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: readPodNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_POD_NAME); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(hostnameThatIsPodName, actual)
[-] pred: org. junit. Assert. assertEquals ( hostnameThatIsPodName, actual )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
getPropertyNames() throws JavetException { return checkV8Runtime().getV8Internal().objectGetPropertyNames(this); }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
************************************
[+] input: testExists() { User randomUser = new User(); boolean exists = entityRepositoryJpa.exists(User.class,randomUser.getId()); Assertions.assertFalse(exists);  User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
exists(Class<T> clazz, Serializable id);
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: whenCreateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.create(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
create(UserDTO obj) { findByEmail(obj); return repository.save(mapper.map(obj, User.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: shouldProperlyMapListDtosToListModels() { //given LectureDTO dto = new LectureDTO(); dto.setId(12L); dto.setName("I'm BATMAN!");  List<LectureDTO> dtos = Collections.singletonList(dto);  //when List<LectureModel> models = lectureListMapper.toModelList(dtos);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, models.size()); Assertions.assertEquals(dto.getId(), models.get(0).getId()); Assertions.assertEquals(dto.getName(), models.get(0).getName()); }
toModelList(List<LectureDTO> dtos);
[*] target: assertNotNull(models)
[-] pred: org. junit. Assert. assertNotNull ( models )
************************************
************************************
[+] input: testGetVersionsShouldReturnOnlyRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_2_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2), actual); }
getVersions(@NonNull final K entityId) { if (!versions.containsKey(entityId.id()) || versions.get(entityId.id()).isEmpty()) { throw new NotFoundException("Key not found: " + entityId); } return new LinkedList<>(versions.get(entityId.id())); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: cast_Geometry() { //Given final LcEntryImageSegmentation entry = new LcEntryImageSegmentation(); entry.setType(LcEntryType.IMAGE_SEGMENTATION); entry.setColor("color"); entry.setShortcut("shortcut");  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertTrue(export instanceof LcEntryExportGeometry); assertEquals(entry.getColor(), ((LcEntryExportGeometry) export).getColor()); assertEquals(entry.getShortcut(), ((LcEntryExportGeometry) export).getShortcut()); }
cast(final LcEntry source) { switch (source.getType()) { case LINE: case POINT: case POLYGON: case RECTANGLE: case IMAGE_SEGMENTATION: return new LcEntryExportGeometry(source); case FREETEXT: return new LcEntryExportFreeText(source); case SELECT: case CHECKLIST: return new LcEntryExportOption(source); default: // not possible. } throw new IllegalArgumentException(); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
************************************
[+] input: appendTest() { ShuffleBuffer shuffleBuffer = new ShuffleBuffer(100); shuffleBuffer.append(createData(10)); assertEquals(42, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(26)); assertEquals(100, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(1)); assertEquals(133, shuffleBuffer.getSize()); "<AssertPlaceHolder>"; }
isFull() { return size > capacity; }
[*] target: assertTrue(shuffleBuffer.isFull())
[-] pred: org. junit. Assert. assertTrue ( shuffleBuffer. isFull() )
************************************
************************************
[+] input: testEquals2() { ServiceNode serviceNode = new ServiceNode("127.0.0.1"); assertEquals(serviceNode, serviceNode); int expectedHashCodeResult = serviceNode.hashCode(); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(ip); }
[*] target: assertEquals(expectedHashCodeResult, serviceNode.hashCode())
[-] pred: org. junit. Assert. assertEquals ( expectedHashCodeResult, serviceNode. hashCode() )
************************************
************************************
[+] input: NoSuchAlgorithmException { DES des = new DES(); byte[] key = des.getKey(); "<AssertPlaceHolder>"; }
getKey(){ return key.getEncoded(); }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
************************************
[+] input: testDeserialize() { Language expectedLanguage = new Language("en", List.of("en_us", "en_gb")); String serializedLanguage = "en|en_us|en_gb";  Language actualLanguage = this.composer.deserialize(serializedLanguage).get(); "<AssertPlaceHolder>"; }
deserialize(String source) { List<String> arguments = Arrays.asList(source.split("\\|"));  return Result.ok(new Language(arguments.get(0), arguments.subList(1, arguments.size()))); }
[*] target: assertEquals(expectedLanguage, actualLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedLanguage, actualLanguage )
************************************
************************************
[+] input: Exception { String raw = "From: Pete(A wonderful \\) chap) <pete(his account)@(comment)silly.test(his host)>\n" + "To: Chris <c@(xxx bbb)public.example>,\n" + "         joe@example.org,\n" + "  John <jdoe@one.test> (my dear friend); (the end of the group)\n" + "Cc:(Empty list)(start)Undisclosed recipients  :(nobody(that I know))  ;\n" + "Date: Thu,\n" + "      13\n" + "        Feb\n" + "          1969\n" + "      23:32\n" + "               -0330 (Newfoundland Time)\n" + "Message-ID:              <testabcd.1234@silly.test>\n" + "\n" + "Testing.";  ParsedMessage msg = new ParsedMessage(raw.getBytes(), false); List<IndexDocument> docs = msg.getLuceneDocuments(); "<AssertPlaceHolder>"; Document doc = docs.get(0).toDocument();  RFC822AddressTokenStream from = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_FROM).tokenStreamValue(); assertEquals(Arrays.asList("pete", "a", "wonderful", "chap", "pete", "his", "account", "comment", "silly.test", "his", "host", "pete@silly.test", "pete", "@silly.test", "silly.test"), from.getAllTokens());  RFC822AddressTokenStream to = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_TO).tokenStreamValue(); assertEquals(Arrays.asList("chris", "c@", "c", "xxx", "bbb", "public.example", "joe@example.org", "joe", "@example.org", "example.org", "example", "@example", "john", "jdoe@one.test", "jdoe", "@one.test", "one.test", "my", "dear", "friend", "the", "end", "of", "the", "group", "c@public.example", "c", "@public.example", "public.example"), to.getAllTokens());  RFC822AddressTokenStream cc = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_CC).tokenStreamValue(); assertEquals(Arrays.asList("empty", "list", "start", "undisclosed", "recipients", "nobody", "that", "i", "know"), cc.getAllTokens());  RFC822AddressTokenStream xEnvFrom = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_FROM).tokenStreamValue(); assertEquals(0, xEnvFrom.getAllTokens().size());  RFC822AddressTokenStream xEnvTo = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_TO).tokenStreamValue(); assertEquals(0, xEnvTo.getAllTokens().size()); }
getLuceneDocuments() { try { analyzeFully(); } catch (ServiceException e) { LOG.warn("message analysis failed when getting lucene documents"); } return luceneDocuments; }
[*] target: assertEquals(1, docs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, docs. size ( ) )
************************************
************************************
[+] input: build_has_to_declare_ObjecType_by_Swagger_Definition() { // Given final SwaggerGraphQLSchemaBuilder swaggerGraphQLSchemaBuilder = new SwaggerGraphQLSchemaBuilder(); final Swagger swagger = new SwaggerParser().read(SWAGGER_LOCATION);  // When final GraphQLSchema graphQLSchema = swaggerGraphQLSchemaBuilder.swagger(swagger).build();  // Then /** * Refactor creating assertAuthorDto and assertBookDto */ GraphQLObjectType authorDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_AUTHOR); "<AssertPlaceHolder>"; assertEquals(3, authorDto.getFieldDefinitions().size()); assertNotNull(authorDto.getFieldDefinition("id")); assertEquals(GraphQLID, authorDto.getFieldDefinition("id").getType()); assertNotNull(authorDto.getFieldDefinition("firstName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("firstName").getType()); assertNotNull(authorDto.getFieldDefinition("lastName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("lastName").getType()); // And GraphQLObjectType bookDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_BOOK); assertNotNull(bookDto); assertNotNull(bookDto.getFieldDefinition("id")); assertEquals(GraphQLID, bookDto.getFieldDefinition("id").getType()); assertNotNull(bookDto.getFieldDefinition("name")); assertEquals(GraphQLString, bookDto.getFieldDefinition("name").getType()); assertNotNull(bookDto.getFieldDefinition("pageCount")); assertEquals(GraphQLInt, bookDto.getFieldDefinition("pageCount").getType()); assertNotNull(bookDto.getFieldDefinition("author")); assertTrue(bookDto.getFieldDefinition("author").getType() instanceof GraphQLObjectType); assertEquals("AuthorDto", ((GraphQLObjectType)bookDto.getFieldDefinition("author").getType()).getName()); }
build() { return schemaBuilder.build(); }
[*] target: assertNotNull(authorDto)
[-] pred: org. junit. Assert. assertNotNull ( authorDto )
************************************
************************************
[+] input: queryWithUnknownSpanId() { String traceId = "12345678901234567890123456789abc"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(TracingStatementInspector.UNKNOWN_SPAN_ID);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldValidateWithNoClassValidationConstraint() { ConnectValidator validator = ConnectValidator.builder() .validationConstraints(Map.of( "key.converter", new ResourceValidator.NonEmptyString(), "value.converter", new ResourceValidator.NonEmptyString(), "connector.class", new ResourceValidator.ValidString( List.of("io.confluent.connect.jdbc.JdbcSourceConnector", "io.confluent.connect.jdbc.JdbcSinkConnector", "com.splunk.kafka.connect.SplunkSinkConnector", "org.apache.kafka.connect.file.FileStreamSinkConnector"), false))) .sourceValidationConstraints(Map.of( "producer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .sinkValidationConstraints(Map.of( "consumer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .build();  Connector connector = Connector.builder() .metadata(Metadata.builder() .name("connect2") .build()) .spec(Connector.ConnectorSpec.builder() .connectCluster("cluster1") .config(Map.of( "connector.class", "io.confluent.connect.jdbc.JdbcSourceConnector", "key.converter", "test", "value.converter", "test", "consumer.override.sasl.jaas.config", "test")) .build()) .build();  List<String> actual = validator.validate(connector, "sink"); "<AssertPlaceHolder>"; }
validate(Connector connector, String connectorType) { List<String> validationErrors = new ArrayList<>();  if (!StringUtils.hasText(connector.getMetadata().getName())) { return List.of(invalidNameEmpty()); }  if (connector.getMetadata().getName().length() > 249) { validationErrors.add(invalidNameLength(connector.getMetadata().getName())); }  if (!connector.getMetadata().getName().matches("[a-zA-Z0-9._-]+")) { validationErrors.add(invalidNameSpecChars(connector.getMetadata().getName())); }  validationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } });  if (connectorType.equals("sink")) { sinkValidationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); }  if (connectorType.equals("source")) { sourceValidationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); }  if (classValidationConstraints.containsKey(connector.getSpec().getConfig().get(CONNECTOR_CLASS))) { classValidationConstraints.get(connector.getSpec().getConfig().get(CONNECTOR_CLASS)) .forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); } return validationErrors; }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty ( ) )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test06() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas(null); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("eforce21", null, false);  // Then "<AssertPlaceHolder>"; }
isAdminOrLabeler(String projectOrganisation, String currentTaskLabelerId, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(projectOrganisation)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!orgs.containsKey(projectOrganisation)) { throw new ForbiddenException(); }  boolean hasAdminRole = orgs.get(projectOrganisation).equals(ADMIN_ROLE);  if (scopes.contains(TOKEN_SCOPE_TYPE)) { if (!hasAdminRole) { throw new ForbiddenException(); } } else { String userId = user.id();  if (!userId.equals(currentTaskLabelerId) && !hasAdminRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
************************************
[+] input: setJdbc() { SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); distributor.setJdbc(jdbc); Assertions."<AssertPlaceHolder>"; }
getJdbc() { return jdbc; }
[*] target: assertEquals(jdbc, distributor.getJdbc())
[-] pred: org. junit. Assert. assertEquals ( jdbc, distributor. getJdbc() )
************************************
************************************
[+] input: happyPathSendSpans() { FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(bandwidthTracker).tick(fileSpans); }
handleFileOnDisk(File file) { Log.d(LOG_TAG, "Reading file content for ingest: " + file); List<byte[]> encodedSpans = readFileCompletely(file); if (encodedSpans.isEmpty()) { fileUtils.safeDelete(file); return false; }  boolean sentOk = attemptSend(file, encodedSpans); if (!sentOk) { retryTracker.trackFailure(file); } if (sentOk || retryTracker.exceededRetries(file)) { retryTracker.clear(file); fileUtils.safeDelete(file); } return sentOk; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeenAndAFK() { creq = new ChatRequest(0L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: checkIfUserIsAdmin_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
checkIfUserIsAdmin(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); } return orgs.get(owner).equals(ADMIN_ROLE); }  return true; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
************************************
[+] input: testFinalPositionOfSnakeAllCommands() { List<String> commands = List.of("UP", "DOWN", "LEFT", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
************************************
[+] input: testNotExists() { Organization randomOrganization = randomOrganization(); Assertions.assertTrue(randomOrganization.notExisted());  Organization created = randomOrganization.createOrg(); Assertions."<AssertPlaceHolder>"; }
notExisted() { return !existed(); }
[*] target: assertFalse(created.notExisted())
[-] pred: org. junit. Assert. assertFalse ( created. notExisted() )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_equal_to_max_batch_size_THEN_return_true() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetRequestSize )
************************************
************************************
[+] input: returnsNullWhenSellerDoesntExist() { var cm = CoinmasterRegistry.findSeller(ItemPool.SEAL_CLUB); "<AssertPlaceHolder>"; }
findSeller(final int itemId) { return Arrays.stream(COINMASTERS) .filter(data -> data.canBuyItem(itemId)) .findAny() .orElse(null); }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
************************************
[+] input: NoSuchMethodException { Constructor<String> stringCtor = String.class.getConstructor(char[].class); FastConstructor<String> fc = FastConstructor.create(stringCtor); "<AssertPlaceHolder>"; }
toString() { return constructor.toString(); }
[*] target: assertEquals(stringCtor.toString(), fc.toString())
[-] pred: org. junit. Assert. assertEquals ( stringCtor. toString ( ), fc. toString ( ) )
************************************
************************************
[+] input: filterUncompletedTasksOfOneUncompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testGetEnumConstants() { List<MockEnum> constants = ReflectionUtils.getEnumConstants(MockEnum.class);  "<AssertPlaceHolder>"; }
getEnumConstants(@Nonnull Class<T> c) { return Arrays.asList(c.getEnumConstants()); }
[*] target: assertEquals(4, constants.size())
[-] pred: org. junit. Assert. assertEquals ( 4, constants. size ( ) )
************************************
************************************
[+] input: setShutdownHook() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setShutdownHook(false); Assertions."<AssertPlaceHolder>"; }
isShutdownHook() { return shutdownHook; }
[*] target: assertFalse(prefetchWorker.isShutdownHook())
[-] pred: org. junit. Assert. assertFalse ( prefetchWorker. isShutdownHook() )
************************************
************************************
[+] input: setType() { MachineProperties.Distributor.Type type = MachineProperties.Distributor.Type.JDBC; MachineProperties.Distributor distributor = new MachineProperties.Distributor(); distributor.setType(type); Assertions."<AssertPlaceHolder>"; }
getType() { return type; }
[*] target: assertEquals(type, distributor.getType())
[-] pred: org. junit. Assert. assertEquals ( type, distributor. getType() )
************************************
************************************
[+] input: testConstructorNullBody() { String message = "This is the message"; String body = null; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=null}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
toString() { return super.toString() + " {code=" + getCode() + ", body=" + getBody() + '}'; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
************************************
[+] input: setSuffix() { String suffix = "test"; IdConverterDefinition definition = new IdConverterDefinition(); definition.setSuffix(suffix); Assertions."<AssertPlaceHolder>"; }
getSuffix() { return suffix; }
[*] target: assertEquals(suffix, definition.getSuffix())
[-] pred: org. junit. Assert. assertEquals ( suffix, definition. getSuffix() )
************************************
************************************
[+] input: shouldBuildElementVariable() { Message message = MessageFactory.elementVariable(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementVariable(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "element-variable", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: IOException { final byte[] key1 = new byte[]{-64, 0, -64, 0}; final byte[] key2 = new byte[]{0}; final byte[] key3 = new byte[]{64, 64, 64, 64}; final byte[] key4 = new byte[]{126, 126, 126, 126};  final DataClass data1 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data2 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data3 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data4 = new DataClass(UUID.randomUUID().toString(), random.nextInt());  processorState.put(key3, data3); processorState.put(key4, data4); processorState.put(key1, data1); processorState.put(key2, data2);  final List<String> values = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 0);  final List<String> values2 = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 1);  assertEquals(2, values.size()); "<AssertPlaceHolder>"; assertTrue(values.containsAll(Arrays.asList( data1.stringVal, data2.stringVal ))); assertTrue(values2.containsAll(Arrays.asList( data3.stringVal, data4.stringVal ))); }
size() { return map.size(); }
[*] target: assertEquals(2, values2.size())
[-] pred: org. junit. Assert. assertEquals ( 2, values2. size ( ) )
************************************
************************************
[+] input: InterruptedException { boolean queued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertTrue(reloader.isReloadQueued());  Mockito.verify(reloadShutdownHandler, Mockito.never()).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.never()).start(plugin);  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
reload(@NotNull Plugin plugin) { if (plugin == null) throw new IllegalArgumentException("Plugin must not be null");  synchronized (this) { if (this.reloadQueued) return false; this.reloadQueued = true; }  scheduler.schedule(() -> { try { this.doReload(plugin); } catch (Throwable throwable) { Log.error("Failed to reload plugin " + plugin.getName(), throwable); } finally { synchronized (this) { this.reloadQueued = false; } } }, Duration.ofMillis(this.quietPeriod)); return true; }
[*] target: assertTrue(queued)
[-] pred: org. junit. Assert. assertTrue ( queued )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_log_send_interval_less_than_max_log_send_interval_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, validRequestSize ,ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetTime)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetTime )
************************************
************************************
[+] input: shouldBuildInAllNotRecommendedHint() { Message message = MessageFactory.inAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inAllHint() { return INSTANCE.staticMessage("in-all-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildDecisionRef() { Message message = MessageFactory.decisionRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
decisionRef( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "decision-ref", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldCreateConnectCluster() { ConnectCluster connectCluster = ConnectCluster.builder() .metadata(Metadata.builder() .name("prefix.connect-cluster") .build()) .spec(ConnectCluster.ConnectClusterSpec.builder() .url("https://after") .build()) .build();  when(connectClusterRepository.create(connectCluster)) .thenReturn(connectCluster);  ConnectCluster actual = connectClusterService.create(connectCluster); "<AssertPlaceHolder>"; }
create(ConnectCluster connectCluster) { if (StringUtils.hasText(connectCluster.getSpec().getPassword())) { connectCluster.getSpec() .setPassword(EncryptionUtils.encryptAes256Gcm(connectCluster.getSpec().getPassword(), securityProperties.getAes256EncryptionKey())); }  // encrypt aes256 key if present if (StringUtils.hasText(connectCluster.getSpec().getAes256Key())) { connectCluster.getSpec() .setAes256Key(EncryptionUtils.encryptAes256Gcm(connectCluster.getSpec().getAes256Key(), securityProperties.getAes256EncryptionKey())); }  // encrypt aes256 salt if present if (StringUtils.hasText(connectCluster.getSpec().getAes256Salt())) { connectCluster.getSpec() .setAes256Salt(EncryptionUtils.encryptAes256Gcm(connectCluster.getSpec().getAes256Salt(), securityProperties.getAes256EncryptionKey())); }  return connectClusterRepository.create(connectCluster); }
[*] target: assertEquals(connectCluster, actual)
[-] pred: org. junit. Assert. assertEquals ( connectCluster, actual )
************************************
************************************
[+] input: testGetJobRunner() { ScheduledJobRunner jobRunner = OpenSearchAsyncQueryScheduler.getJobRunner(); "<AssertPlaceHolder>"; }
getJobRunner() { return OpenSearchRefreshIndexJob.getJobRunnerInstance(); }
[*] target: assertNotNull(jobRunner)
[-] pred: org. junit. Assert. assertNotNull ( jobRunner )
************************************
************************************
[+] input: testGetVersionsShouldReturnAllRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2, KEY_VERSION_3), actual); }
getVersions(@NonNull final K entityId) { if (!versions.containsKey(entityId.id()) || versions.get(entityId.id()).isEmpty()) { throw new NotFoundException("Key not found: " + entityId); } return new LinkedList<>(versions.get(entityId.id())); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: healthyWithRetry() {  when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedException.class) .thenReturn(true);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(2)).isMemoryHealthy(anyLong()); }
isHealthy() { try { ByteSizeValue limit = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT); Supplier<Boolean> booleanSupplier = Retry.decorateSupplier(retry, () -> memoryMonitor.isMemoryHealthy(limit.getBytes())); return booleanSupplier.get(); } catch (Exception e) { return false; } }
[*] target: assertTrue(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertTrue ( resourceMonitor. isHealthy() )
************************************
************************************
[+] input: JsonProcessingException { //given final URI baseUri = URI.create(HTTPS_LOCALHOST); final RecoveryLevel recoveryLevel = RecoveryLevel.RECOVERABLE; final Integer recoverableDays = RECOVERABLE_DAYS; final VaultModel result = new VaultModel(); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VaultModel.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result); final VaultModel expectedRequestVault = new VaultModel(baseUri, null, recoveryLevel, recoverableDays, null, null); when(objectWriter.writeValueAsString(eq(expectedRequestVault))).thenReturn(JSON);  //when final VaultModel actual = underTest.createVault(baseUri, recoveryLevel, recoverableDays);  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.POST, request.getHttpMethod()); Assertions.assertEquals(APPLICATION_JSON, request.getHeaders().getValue(HttpHeaderName.CONTENT_TYPE)); final String actualBody = new String(Objects.requireNonNull(request.getBody().single().block()).array()); Assertions.assertEquals(JSON, actualBody); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VaultModel.class)); verify(objectReader).readValue(anyString()); verify(objectWriter).writeValueAsString(eq(expectedRequestVault)); }
createVault(@NonNull final URI baseUri, @NonNull final RecoveryLevel recoveryLevel, @Nullable final Integer recoverableDays) { final String body = vaultModelAsString(baseUri, recoveryLevel, recoverableDays); final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH); final HttpRequest request = new HttpRequest(HttpMethod.POST, uri.toString()) .setBody(body) .setHeader(HttpHeaderName.CONTENT_TYPE, APPLICATION_JSON); return sendAndProcess(request, r -> r.getResponseObject(VaultModel.class)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: getPrefetchWorker() { SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); Assertions."<AssertPlaceHolder>"; }
getPrefetchWorker() { return prefetchWorker; }
[*] target: assertNotNull(chain.getPrefetchWorker())
[-] pred: org. junit. Assert. assertNotNull ( chain. getPrefetchWorker() )
************************************
************************************
[+] input: setCorePoolSize() { int corePoolSize = 1; SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setCorePoolSize(corePoolSize); Assertions."<AssertPlaceHolder>"; }
getCorePoolSize() { return corePoolSize; }
[*] target: assertEquals(corePoolSize, prefetchWorker.getCorePoolSize())
[-] pred: org. junit. Assert. assertEquals ( corePoolSize, prefetchWorker. getCorePoolSize() )
************************************
************************************
[+] input: IOException { final String machineId = "9bcc0df29af9454298607489a54040e2"; writeStringToFile(machineId, TracingAttributes.MACHINE_ID_FILE_PATH); final TracingAttributes attributes = instance(); final String actual = attributes.get(TracingAttributes.MACHINE_ID); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(machineId, actual)
[-] pred: org. junit. Assert. assertEquals ( machineId, actual )
************************************
************************************
[+] input: deleteFlintIndexStateModel() { when(mockStateStore.delete(any(), any())).thenReturn(true);  boolean result = openSearchFlintIndexStateModelService.deleteFlintIndexStateModel( ID, DATASOURCE, asyncQueryRequestContext);  "<AssertPlaceHolder>"; }
deleteFlintIndexStateModel( String id, String datasourceName, AsyncQueryRequestContext asyncQueryRequestContext) { return stateStore.delete(id, OpenSearchStateStoreUtil.getIndexName(datasourceName)); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: setInitCosidTableSql() { String initCosidTableSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setInitCosidTableSql(initCosidTableSql); Assertions."<AssertPlaceHolder>"; }
getInitCosidTableSql() { return initCosidTableSql; }
[*] target: assertEquals(initCosidTableSql, jdbc.getInitCosidTableSql())
[-] pred: org. junit. Assert. assertEquals ( initCosidTableSql, jdbc. getInitCosidTableSql() )
************************************
************************************
[+] input: getAllImages_WhenZeroImages_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.getAllMediasByDatasetId(DATASET_ID)).thenReturn(new ArrayList<>()); List<MediaViewModel> allImages = datasetService.getAllMedia(DATASET_ID);  //Then "<AssertPlaceHolder>";  verify(datasetRepositoryMock).getAllMediasByDatasetId(anyString()); verify(datasetRepositoryMock, times(1)).getAllMediasByDatasetId(anyString()); }
getAllMedia(String datasetId) { Dataset datasetById = getDatasetById(datasetId);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdminOrUser(owner, false);  List<Media> allMediaByDatasetId = datasetRepository.getAllMediasByDatasetId(datasetId);  return MediaMapper.mapToMediaViewModel(allMediaByDatasetId); }
[*] target: assertTrue(allImages.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allImages. isEmpty ( ) )
************************************
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(null, headers, null);  "<AssertPlaceHolder>"; }
computeValidSchemaUri( String messageKey, Map<String, String> headers, @RawUri JoyceURI rawUri) throws JsonProcessingException {  return this.computeSchemaUri(messageKey, headers) .filter(joyceURI -> JoyceURI.Subtype.IMPORT.equals(joyceURI.getSubtype())) .orElseThrow( () -> new InvalidJoyceUriException( String.format("Schema is not a valid schema uri. key: %s", messageKey)) ); }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
************************************
[+] input: shouldBuildTopic() { Message message = MessageFactory.topic(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
topic(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "topic", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: whenObjectNotFoundExceptionThenReturnAResponseEntity() { ResponseEntity<StandardError> response = ecxeptionHandler .objectNotFound( new ObjectNotFoundException(OBJETO_NAO_ENCONTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(OBJETO_NAO_ENCONTRADO, response.getBody().getError()); assertEquals(404, response.getBody().getStatus()); assertNotEquals("/user/2", response.getBody().getPath()); assertNotEquals(LocalDateTime.now(), response.getBody().getTimestamp()); }
objectNotFound(ObjectNotFoundException ex, HttpServletRequest request) { StandardError error = new StandardError(LocalDateTime.now(), HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getRequestURI()); return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: response_is_aggregation_when_aggregation_not_empty() { when(searchResponse.getAggregations()).thenReturn(aggregations);  OpenSearchResponse response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
isAggregationResponse() { return aggregations != null; }
[*] target: assertTrue(response.isAggregationResponse())
[-] pred: org. junit. Assert. assertTrue ( response. isAggregationResponse ( ) )
************************************
************************************
[+] input: testKeyVaultFakeShouldNeverBeNullWhenCalled() { //given final VaultFakeImpl underTest = new VaultFakeImpl(HTTPS_LOCALHOST);  //when final KeyVaultFake actual = underTest.keyVaultFake();  //then Assertions."<AssertPlaceHolder>"; }
keyVaultFake() { return keys; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: WxErrorException { // 准备参数 Integer userType = randomPojo(UserTypeEnum.class).getValue(); String phoneCode = randomString(); // mock 方法 WxMaUserService userService = mock(WxMaUserService.class); when(wxMaService.getUserService()).thenReturn(userService); WxMaPhoneNumberInfo phoneNumber = randomPojo(WxMaPhoneNumberInfo.class); when(userService.getPhoneNoInfo(eq(phoneCode))).thenReturn(phoneNumber);  // 调用 WxMaPhoneNumberInfo result = socialClientService.getWxMaPhoneNumberInfo(userType, phoneCode); // 断言 "<AssertPlaceHolder>"; }
getWxMaPhoneNumberInfo(Integer userType, String phoneCode) { WxMaService service = getWxMaService(userType); try { return service.getUserService().getPhoneNoInfo(phoneCode); } catch (WxErrorException e) { log.error("[getPhoneNoInfo][userType({}) phoneCode({}) 获得手机号失败]", userType, phoneCode, e); throw exception(SOCIAL_CLIENT_WEIXIN_MINI_APP_PHONE_CODE_ERROR); } }
[*] target: assertSame(phoneNumber, result)
[-] pred: org. junit. Assert. assertSame ( phoneNumber, result )
************************************
************************************
[+] input: QueryParam() { //       OrderSearchParams orderSearchParams = new OrderSearchParams(); //       orderSearchParams.setPageSize(0); //       orderSearchParams.setPageNumber(10); //       IPage<OrderSimpleVO> orderVOIPage = orderService.queryByParams(orderSearchParams); //       Assertions."<AssertPlaceHolder>"; //       orderVOIPage.getRecords().forEach(System.out::println); }
queryByParams(OrderSearchParams orderSearchParams);
[*] target: assertNotNull(orderVOIPage)
[-] pred: org. junit. Assert. assertNotNull ( orderVOIPage )
************************************
************************************
[+] input: testCreateDiscountActivity_success() { // 准备参数 DiscountActivityCreateReqVO reqVO = randomPojo(DiscountActivityCreateReqVO.class, o -> { // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); // 设置商品 o.setProducts(asList(new DiscountActivityBaseVO.Product().setSpuId(1L).setSkuId(2L) .setDiscountType(PromotionDiscountTypeEnum.PRICE.getType()).setDiscountPrice(3), new DiscountActivityBaseVO.Product().setSpuId(10L).setSkuId(20L) .setDiscountType(PromotionDiscountTypeEnum.PERCENT.getType()).setDiscountPercent(30))); });  // 调用 Long discountActivityId = discountActivityService.createDiscountActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验活动 DiscountActivityDO discountActivity = discountActivityMapper.selectById(discountActivityId); assertPojoEquals(reqVO, discountActivity); assertEquals(discountActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); // 校验商品 List<DiscountProductDO> discountProducts = discountProductMapper.selectList(DiscountProductDO::getActivityId, discountActivity.getId()); assertEquals(discountProducts.size(), reqVO.getProducts().size()); for (int i = 0; i < reqVO.getProducts().size(); i++) { DiscountActivityBaseVO.Product product = reqVO.getProducts().get(i); DiscountProductDO discountProduct = discountProducts.get(i); assertEquals(discountProduct.getActivityId(), discountActivity.getId()); assertEquals(discountProduct.getSpuId(), product.getSpuId()); assertEquals(discountProduct.getSkuId(), product.getSkuId()); assertEquals(discountProduct.getDiscountType(), product.getDiscountType()); assertEquals(discountProduct.getDiscountPrice(), product.getDiscountPrice()); assertEquals(discountProduct.getDiscountPercent(), product.getDiscountPercent()); } }
createDiscountActivity(DiscountActivityCreateReqVO createReqVO) { // 校验商品是否冲突 validateDiscountActivityProductConflicts(null, createReqVO.getProducts());  // 插入活动 DiscountActivityDO discountActivity = DiscountActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); discountActivityMapper.insert(discountActivity); // 插入商品 List<DiscountProductDO> discountProducts = BeanUtils.toBean(createReqVO.getProducts(), DiscountProductDO.class, product -> product.setActivityId(discountActivity.getId()).setActivityStatus(discountActivity.getStatus()) .setActivityStartTime(createReqVO.getStartTime()).setActivityEndTime(createReqVO.getEndTime())); discountProductMapper.insertBatch(discountProducts); // 返回 return discountActivity.getId(); }
[*] target: assertNotNull(discountActivityId)
[-] pred: org. junit. Assert. assertNotNull ( discountActivityId )
************************************
************************************
[+] input: shouldCreateCommandWithLongChainForRandomText() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "random", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
createCommand(String remoteCommand, String email, String chain, String domainName, String publicServiceHostName, String[] virtualHosts) {  this.stringBuilder = new StringBuilder();  stringBuilder.append(remoteCommand);  if (Objects.equals(chain, CHAIN_TYPE)) { addSubCommand(" ", CHAIN, SHORT_CHAIN); }  addSubCommand(" ", AGREEMENT, EMAIL, email, NON_INTERACTIVELY, KEEP, WEBROOT, WEBROOT_PATH, CERT_NAME, domainName);  addSubCommand(D, publicServiceHostName); addSubCommand(D, virtualHosts);  return stringBuilder.toString(); }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
************************************
[+] input: execute_with_cursor() { List<ExprValue> expected = Arrays.asList( tupleValue(of("name", "John", "age", 20)), tupleValue(of("name", "Allen", "age", 30))); var plan = new FakePhysicalPlan(expected.iterator()); when(protector.protect(plan)).thenReturn(plan);  OpenSearchExecutionEngine executor = new OpenSearchExecutionEngine(client, protector, new PlanSerializer(null)); List<ExprValue> actual = new ArrayList<>(); executor.execute( plan, new ResponseListener<>() { @Override public void onResponse(QueryResponse response) { actual.addAll(response.getResults()); assertTrue(response.getCursor().toString().startsWith("n:")); }  @Override public void onFailure(Exception e) { fail("Error occurred during execution", e); } });  "<AssertPlaceHolder>"; }
execute( PhysicalPlan physicalPlan, ExecutionContext context, ResponseListener<QueryResponse> listener) { PhysicalPlan plan = executionProtector.protect(physicalPlan); client.schedule( () -> { try { List<ExprValue> result = new ArrayList<>();  context.getSplit().ifPresent(plan::add); plan.open();  while (plan.hasNext()) { result.add(plan.next()); }  QueryResponse response = new QueryResponse( physicalPlan.schema(), result, planSerializer.convertToCursor(plan)); listener.onResponse(response); } catch (Exception e) { listener.onFailure(e); } finally { plan.close(); } }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldBuildScript() { Message message = MessageFactory.script(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
script() { return INSTANCE.staticMessage("script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: should_support_query_with_zero_fetch_size() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1") .jsonContent("{"query": "SELECT 1", "fetch_size": 0}") .build(); "<AssertPlaceHolder>"; }
isSupported() { boolean hasCursor = isCursor(); boolean hasQuery = query != null; boolean hasContent = jsonContent != null && !jsonContent.isEmpty();  Predicate<String> supportedParams = Set.of(QUERY_PARAMS_FORMAT, QUERY_PARAMS_PRETTY)::contains; boolean hasUnsupportedParams = (!params.isEmpty()) && params.keySet().stream().dropWhile(supportedParams).findAny().isPresent();  boolean validCursor = hasCursor && !hasQuery && !hasUnsupportedParams && !hasContent; boolean validQuery = !hasCursor && hasQuery;  return (validCursor || validQuery) // It's a valid cursor or a valid query && isOnlySupportedFieldInPayload() // and request must contain supported fields only && isSupportedFormat(); // and request must be a supported format }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://user:pass@proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort());  ArgumentCaptor<CredentialsProvider> credentialsCaptor = ArgumentCaptor.forClass(CredentialsProvider.class); verify(httpClientBuilderSpy).setDefaultCredentialsProvider(credentialsCaptor.capture()); CredentialsProvider credentialsProvider = credentialsCaptor.getValue();  UsernamePasswordCredentials creds = (UsernamePasswordCredentials) credentialsProvider.getCredentials(AuthScope.ANY); Assertions.assertNotNull(creds); assertEquals("user", creds.getUserName()); assertEquals("pass", creds.getPassword()); }
configureProxy(HttpClientBuilder clientBuilder) { try { final var httpProxyUrl = Provisioning.getInstance().getLocalServer() .getAttr(ZAttrProvisioning.A_zimbraHttpProxyURL, null); if (httpProxyUrl == null || httpProxyUrl.isEmpty()) { ZimbraLog.misc.info("HttpProxyUtil.configureProxy 'zimbraHttpProxyURL' is null or empty, not using proxy."); return; }  var uri = new URI(httpProxyUrl); var proxyHost = uri.getHost(); var proxyPort = uri.getPort();  var userInfo = uri.getUserInfo(); String username = null; String password = null; if (userInfo != null) { var credentials = userInfo.split(":"); if (credentials.length == 2) { username = credentials[0]; password = credentials[1]; } }  if (username != null && password != null) { CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials( new AuthScope(proxyHost, proxyPort), new UsernamePasswordCredentials(username, password) ); clientBuilder.setDefaultCredentialsProvider(credentialsProvider); }  var proxy = new HttpHost(proxyHost, proxyPort); var config = RequestConfig.custom() .setProxy(proxy) .build(); clientBuilder.setDefaultRequestConfig(config);  if (ZimbraLog.misc.isDebugEnabled()) { ZimbraLog.misc.debug("setting proxy: " + httpProxyUrl); }  } catch (ServiceException | URISyntaxException | IllegalArgumentException e) { ZimbraLog.misc.warn("Unable to configureProxy: " + e.getMessage(), e); } }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
************************************
[+] input: getDataset_whenIdIsValid_getDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); DatasetViewModel dataset = datasetService.getDataset(DATASET_ID, false);  //Then "<AssertPlaceHolder>"; assertEquals(testDataset.getId(), dataset.getId()); assertEquals(testDataset.getName(), dataset.getName()); assertEquals(testDataset.getShortDescription(), dataset.getShortDescription()); assertEquals(testDataset.isDeleted(), dataset.isDeleted()); assertNull(dataset.getDeleteTime()); assertEquals(0, dataset.getProjectCount());  verify(datasetRepositoryMock).findById(anyString()); verify(datasetRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(datasetRepositoryMock); }
getDataset(String id, boolean includeMedia) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  if (!datasetById.isDeleted()) { DatasetViewModel datasetViewModel = DatasetMapper.mapToDatasetViewModel(datasetById, includeMedia);  // Deactivate pricing limits for the Unit-Tests if (!deactivateLimiter) { //Check if Organisation-PricingPlan allows upload of Public Urls String pricingPlanType = limitService.getLimitsByOrgId(owner).getPricingPlanType();  datasetViewModel.setAllowPublicUrls(true);  if (DataGymPlan.FREE_DEVELOPER.name().equals(pricingPlanType)) { datasetViewModel.setAllowPublicUrls(false); } }   return datasetViewModel; }  throw new NotFoundException(DATASET_PLACEHOLDER, "id", "" + id); }
[*] target: assertNotNull(dataset)
[-] pred: org. junit. Assert. assertNotNull ( dataset )
************************************
************************************
[+] input: testResta4() { int res = Calculadora.resta(0, 0); "<AssertPlaceHolder>"; }
resta(int a, int b) { return a + b; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
************************************
[+] input: isAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.isAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
isAdmin(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminRole = orgs.get(owner).equals(ADMIN_ROLE);  if (!hasAdminRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
************************************
[+] input: isReadyForShutdownTest() { GeoIPProcessor geoIPProcessor = createObjectUnderTest(); "<AssertPlaceHolder>"; }
isReadyForShutdown() { geoIPProcessorService.shutdown(); return true; }
[*] target: assertTrue(geoIPProcessor.isReadyForShutdown())
[-] pred: org. junit. Assert. assertTrue ( geoIPProcessor. isReadyForShutdown ( ) )
************************************
************************************
[+] input: IOException { InputStream inputStream = new ByteArrayInputStream("Test data".getBytes()); when(s3Client.getObject(any(GetObjectRequest.class), any(ResponseTransformer.class))).thenReturn(inputStream); final S3InputStream s3InputStream = createObjectUnderTest(); createObjectUnderTest().seek(0);  int availableBytes = s3InputStream.available(); "<AssertPlaceHolder>"; }
available() throws IOException { Preconditions.checkState(!closed, "Cannot read: already closed"); positionStream();  return stream.available(); }
[*] target: assertEquals(9, availableBytes)
[-] pred: org. junit. Assert. assertEquals ( 9, availableBytes )
************************************
************************************
[+] input: testGetCryptoClientShouldReturnClientWhenCalled() { //given final ApacheHttpClientProvider underTest = new ApacheHttpClientProvider(HTTPS_SPECIAL_LOCALHOST_8443, new AuthorityOverrideFunction(SPECIAL_LOCALHOST, LOCALHOST));  //when final CryptographyClient client = underTest.getCryptoClient(WEB_KEY_ID);  //then Assertions."<AssertPlaceHolder>"; }
getCryptoClient(final String webKeyId) { return getCryptoClient(webKeyId, CryptographyServiceVersion.V7_4); }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
************************************
[+] input: testConvertShouldConvertFieldsWhenCalledWithNotNull() { //given final VaultFake input = mock(VaultFake.class); when(input.baseUri()).thenReturn(TestConstantsUri.HTTPS_LOCALHOST_8443); when(input.getCreatedOn()).thenReturn(TestConstants.TIME_10_MINUTES_AGO); when(input.getDeletedOn()).thenReturn(TestConstants.NOW); when(input.getRecoveryLevel()).thenReturn(RecoveryLevel.CUSTOMIZED_RECOVERABLE); when(input.getRecoverableDays()).thenReturn(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE);  //when final VaultModel actual = underTest.convert(input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(TestConstantsUri.HTTPS_LOCALHOST_8443, actual.getBaseUri()); Assertions.assertEquals(TestConstants.TIME_10_MINUTES_AGO, actual.getCreatedOn()); Assertions.assertEquals(TestConstants.NOW, actual.getDeletedOn()); Assertions.assertEquals(RecoveryLevel.CUSTOMIZED_RECOVERABLE, actual.getRecoveryLevel()); Assertions.assertEquals(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE, actual.getRecoverableDays());  }
convert(@Nullable final VaultFake source) { return Optional.ofNullable(source) .map(this::convertNonNull) .orElse(null); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: ParseTreeCompositeException { final ParseTree expected = mock(DataPrepperExpressionParser.ExpressionContext.class); doReturn(expected).when(parser).expression();  ParseTree parseTree = parseTreeParser.parse(VALID_STATEMENT); assertThat(parseTree, is(expected));  parseTree = parseTreeParser.parse(VALID_STATEMENT); "<AssertPlaceHolder>";  verify(errorListener).isErrorFound();  // Verify parser.expression() called 1 time verify(parser).expression(); }
parse(final String expression) throws ParseTreeCompositeException { if (cache.containsKey(expression)) { return cache.get(expression); } else { final ParseTree parseTree = createParseTree(expression); cache.put(expression, parseTree); return parseTree; } }
[*] target: assertThat(parseTree, is(expected))
[-] pred: org. junit. Assert. assertThat ( parseTree, is ( expected ) )
************************************
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithEmptyModel() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
convert(@Nullable final KeyRotationPolicyModel source) { return Optional.ofNullable(source) .filter(this::isNotEmpty) .map(this::convertNonNull) .orElse(null); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: testMultiplica6() { int algo = 4; int res = Calculadora.multiplica(0, algo); "<AssertPlaceHolder>"; }
multiplica(int a, int b) { return a * b; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidEcParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new EcKeyCreationInput(KeyType.EC_HSM, KeyCurveName.P_256)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
************************************
[+] input: shouldProperlyMapModelToDto() { //given LectureModel model = new LectureModel(); model.setId(11L); model.setName("lecture name");  //when LectureDTO dto = mapperUnderTest.toDTO(model);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(model.getId(), dto.getId()); Assertions.assertEquals(model.getName(), dto.getName()); }
toDTO(LectureModel model);
[*] target: assertNotNull(dto)
[-] pred: org. junit. Assert. assertNotNull ( dto )
************************************
************************************
[+] input: checkForPreApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(null)); // mock 数据 OAuth2ApproveDO approve = randomPojo(OAuth2ApproveDO.class).setUserId(userId) .setUserType(userType).setClientId(clientId).setScope("read") .setExpiresTime(LocalDateTimeUtil.offset(LocalDateTime.now(), 1L, ChronoUnit.DAYS)).setApproved(false); // 拒绝 oauth2ApproveMapper.insert(approve);  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; }
checkForPreApproval(Long userId, Integer userType, String clientId, Collection<String> requestedScopes) { // 第一步，基于 Client 的自动授权计算，如果 scopes 都在自动授权中，则返回 true 通过 OAuth2ClientDO clientDO = oauth2ClientService.validOAuthClientFromCache(clientId); Assert.notNull(clientDO, "客户端不能为空"); // 防御性编程 if (CollUtil.containsAll(clientDO.getAutoApproveScopes(), requestedScopes)) { // gh-877 - if all scopes are auto approved, approvals still need to be added to the approval store. LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (String scope : requestedScopes) { saveApprove(userId, userType, clientId, scope, true, expireTime); } return true; }  // 第二步，算上用户已经批准的授权。如果 scopes 都包含，则返回 true List<OAuth2ApproveDO> approveDOs = getApproveList(userId, userType, clientId); Set<String> scopes = convertSet(approveDOs, OAuth2ApproveDO::getScope, OAuth2ApproveDO::getApproved); // 只保留未过期的 + 同意的 return CollUtil.containsAll(scopes, requestedScopes); }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_less_than_max_event_size_THEN_return_false() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize(((thresholdConfig.getMaxEventSizeBytes()) - 1) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanMaxEventSize(final long eventSize) { return (eventSize + APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE) > maxEventSizeBytes; }
[*] target: assertFalse(isEventGreater)
[-] pred: org. junit. Assert. assertFalse ( isEventGreater )
************************************
************************************
[+] input: testCalculateUsers_noDept() { // 准备参数 DelegateExecution execution = mockDelegateExecution(1L); // mock 方法(startUser) AdminUserRespDTO startUser = randomPojo(AdminUserRespDTO.class, o -> o.setDeptId(10L)); when(adminUserApi.getUser(eq(1L))).thenReturn(startUser); // mock 方法(getStartUserDept)没有部门 when(deptApi.getDept(eq(10L))).thenReturn(null);  // 调用 Set<Long> result = expression.calculateUsers(execution, 1); // 断言 "<AssertPlaceHolder>"; }
calculateUsers(DelegateExecution execution, int level) { Assert.isTrue(level > 0, "level 必须大于 0"); // 获得发起人 ProcessInstance processInstance = processInstanceService.getProcessInstance(execution.getProcessInstanceId()); Long startUserId = NumberUtils.parseLong(processInstance.getStartUserId()); // 获得对应 leve 的部门 DeptRespDTO dept = null; for (int i = 0; i < level; i++) { // 获得 level 对应的部门 if (dept == null) { dept = getStartUserDept(startUserId); if (dept == null) { // 找不到发起人的部门，所以无法使用该规则 return emptySet(); } } else { DeptRespDTO parentDept = deptApi.getDept(dept.getParentId()); if (parentDept == null) { // 找不到父级部门，所以只好结束寻找。原因是：例如说，级别比较高的人，所在部门层级比较少 break; } dept = parentDept; } } return dept.getLeaderUserId() != null ? asSet(dept.getLeaderUserId()) : emptySet(); }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
************************************
[+] input: getStringTruncada_test05() { String stringTruncada = Strings.getStringTruncada(null, 0); "<AssertPlaceHolder>"; }
getStringTruncada(String s, int tamanho) { return null; }
[*] target: assertNull(stringTruncada)
[-] pred: org. junit. Assert. assertNull ( stringTruncada )
************************************
************************************
[+] input: serialize_WithNullValue_ReturnsCorrectJson() { // Test for serializing null value GenericRecord record = new GenericData.Record(SCHEMA); record.put("nested", null);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: getQuantidadeDePessoasQueComecamComALetra_test02() { List<String> pessoas = new ArrayList<>(asList("Felix", "Daiane", "Erivelto", "Paulo", "Maycon", "Elizandro")); long quantidade = ArrayLists.getQuantidadeDePessoasQueComecamComALetra(pessoas, "A");  "<AssertPlaceHolder>"; }
getQuantidadeDePessoasQueComecamComALetra(List<String> pessoas, String letra) { return 0; }
[*] target: assertEquals(0, quantidade)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidade )
************************************
************************************
[+] input: shouldBuildResultVariableInternalScript() { Message message = MessageFactory.resultVariableInternalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Result variable is set to Zeebe script result variable."); }
resultVariableInternalScript() { return INSTANCE.staticMessage("result-variable-internal-script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testAvailableChannel() { provider.add(mockChannelType, null, mockFactory); List<ChannelType> availableChannels = provider.availableChannel(); "<AssertPlaceHolder>"; assertFalse(availableChannels.isEmpty()); assertTrue(availableChannels.contains(mockChannelType)); }
availableChannel() { Set<ChannelType> channels = new HashSet<>(); channels.addAll(factoryMap.keySet()); channels.addAll(settingsMap.keySet()); return channels.stream().sorted().toList(); }
[*] target: assertNotNull(availableChannels)
[-] pred: org. junit. Assert. assertNotNull ( availableChannels )
************************************
************************************
[+] input: testCreateArticle_success() { // 准备参数 ArticleCreateReqVO reqVO = randomPojo(ArticleCreateReqVO.class);  // 调用 Long articleId = articleService.createArticle(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleDO article = articleMapper.selectById(articleId); assertPojoEquals(reqVO, article); }
createArticle(ArticleCreateReqVO createReqVO) { // 校验分类存在 validateArticleCategoryExists(createReqVO.getCategoryId());  // 插入 ArticleDO article = ArticleConvert.INSTANCE.convert(createReqVO); article.setBrowseCount(0); // 初始浏览量 articleMapper.insert(article); // 返回 return article.getId(); }
[*] target: assertNotNull(articleId)
[-] pred: org. junit. Assert. assertNotNull ( articleId )
************************************
************************************
[+] input: readServiceVersionFromSystemProperty() { final String version = "1.2.9"; final Properties properties = new Properties(); properties.put("service.version", version); final TracingAttributes attributes = instance(properties); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
************************************
[+] input: testListLatestNonManagedEntitiesShouldReturnOnlyTheNotManagedEntitiesWhenMultipleVersionsWerePut() { //given putAllMocks(); when(key1Version3Mock.isManaged()).thenReturn(true);  //when final List<ReadOnlyKeyVaultKeyEntity> actual = underTest.listLatestNonManagedEntities();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, actual.size()); Assertions.assertSame(key2Version2Mock, actual.get(0)); Assertions.assertSame(key3Version2Mock, actual.get(1)); }
listLatestNonManagedEntities() { return streamAllLatestEntities() .filter(entity -> !entity.isManaged()) .collect(Collectors.toList()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: hashBytecode() { String expected = "0x010000517112c421df08d7b49e4dc1312f4ee62268ee4f5683b11d9e2d33525a";  byte[] result = ContractDeployer.hashBytecode(Numeric.hexStringToByteArray(CounterContract.BINARY)); String resultHex = Numeric.toHexString(result);  Assertions."<AssertPlaceHolder>"; }
hashBytecode(byte[] bytecode) { byte[] bytecodeHash = Hash.sha256(bytecode);  if (bytecode.length % 32 != 0) { throw new IllegalArgumentException("The bytecode length in bytes must be divisible by 32"); }  BigInteger length = BigInteger.valueOf(bytecode.length / 32); if (length.compareTo(MAX_BYTECODE_SIZE) > 0) { throw new IllegalArgumentException("Bytecode length must be less than 2^16 bytes"); }  byte[] codeHashVersion = new byte[] { 1, 0 }; byte[] bytecodeLength = Numeric.toBytesPadded(length, 2);  System.arraycopy(codeHashVersion, 0, bytecodeHash, 0, codeHashVersion.length); System.arraycopy(bytecodeLength, 0, bytecodeHash, 2, bytecodeLength.length);  return bytecodeHash; }
[*] target: assertEquals(expected, resultHex)
[-] pred: org. junit. Assert. assertEquals ( expected, resultHex )
************************************
************************************
[+] input: filterCompletedTasksOfOneCompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); final TaskId taskId = todoList.addTask(task1Name); todoList.toggleTaskCompletion(taskId);  final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: shouldBuildCandidateUsers() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.candidateUsers(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'candidateUsers' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
candidateUsers(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "candidate-users", ContextBuilder.builder() .context( supportedAttributeExpression( "candidateUsers", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithoutAttributesAndEmptyList() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setLifetimeActions(List.of()); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
convert(@Nullable final KeyRotationPolicyModel source) { return Optional.ofNullable(source) .filter(this::isNotEmpty) .map(this::convertNonNull) .orElse(null); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: URISyntaxException { var target = new RestClientParser(); var req = new Request(); req.setRequestText( "POST https://www.google.com/test?a=1&b=%202\n" + "Content-Type:text/plain\n" + "\n" + "This is a multiline\n" + "Text\n"); var result = target.parse(req.getRequestText()); "<AssertPlaceHolder>"; assertEquals(2, result.getQuery().size()); assertEquals(1, result.getHeaders().size()); var header = result.getHeader(ConstantsHeader.CONTENT_TYPE); assertEquals("text/plain", header); }
parse(String requestText) throws URISyntaxException { var call = new Request(); var lines = requestText.trim().split("\\r?\\n"); var requestLine = lines[0]; addRequest(call, requestLine); var body = new StringBuffer(); var headersCompleted = false; for (var i = 1; i < lines.length; i++) { var current = lines[i];  if (headersCompleted) { body.append(current); body.append("\n"); } else { var trimmed = current.trim(); if (trimmed.length() == 0) { headersCompleted = true; continue; } addHeader(call, current); } } call.setRequestText(body.toString()); call.setBinaryRequest(false); return call; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: equals_false_when_vec3_equals() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3 vec3c2 = new Vec3(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: testGetConfigByKey() { // mock 数据 ConfigDO dbConfig = randomConfigDO(); configMapper.insert(dbConfig);// @Sql: 先插入出一条存在的数据 // 准备参数 String key = dbConfig.getConfigKey();  // 调用 ConfigDO config = configService.getConfigByKey(key); // 断言 "<AssertPlaceHolder>"; assertPojoEquals(dbConfig, config); }
getConfigByKey(String key) { return configMapper.selectByKey(key); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: push() { try (IntStack stack = new IntStack(Integer.MIN_VALUE, 8)) { Assertions.assertTrue(stack.push(1)); Assertions.assertTrue(stack.push(2)); Assertions.assertTrue(stack.push(3)); Assertions."<AssertPlaceHolder>"; } }
size() { return (index.get() >> 2) + 1; }
[*] target: assertEquals(3, stack.size())
[-] pred: org. junit. Assert. assertEquals ( 3, stack. size() )
************************************
************************************
[+] input: getMaior_test01() { int maior = Calculadora.getMaior(20, 10); "<AssertPlaceHolder>"; }
getMaior(int a, int b) { return 0; }
[*] target: assertEquals(20, maior)
[-] pred: org. junit. Assert. assertEquals ( 20, maior )
************************************
************************************
[+] input: getLocation_test() { // given var location = new RiderLocation("rider-1234", "delivery-1234", 23.0f, 190f); var uri = UriComponentsBuilder.fromUriString(riderLocationMapping) .queryParam("deliveryId", location.getDeliveryId()) .buildAndExpand() .toUriString();  // when when(riderLocationService.getLocation(location.getDeliveryId())) .thenReturn(Mono.just(location));  var result = testClient .get() .uri(uri) .exchange() .expectStatus() .isOk() .expectBody(RiderLocation.class) .returnResult() .getResponseBody(); // then "<AssertPlaceHolder>"; }
getLocation(@RequestParam(name = "deliveryId") String deliveryId) { return locationService.getLocation(deliveryId); }
[*] target: assertEquals(location, result)
[-] pred: org. junit. Assert. assertEquals ( location, result )
************************************
************************************
[+] input: testDense() {  BooleanSparseNdArray instance = new BooleanSparseNdArray(indices, values, DimensionalSpace.create(shape)); BooleanNdArray denseInstance = instance.toDense(); BooleanNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { BooleanDataBuffer dataBuffer = DataBuffers.ofBooleans(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: equals_true_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
************************************
[+] input: testExportActiveShouldReturnFullResponseWhenCalledOnRunningServer() { //given final String expected = "value"; final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(expected)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK);  //when final String actual = underTest.exportActive();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/export", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); }
exportActive() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_EXPORT_ACTIVE_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendRaw(request).getResponseBodyAsString(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: acceptDelivery() { // Arrange var delivery = makeValidDelivery(); delivery.setId("delivery-1234"); // Stub when(deliveryService.acceptDelivery(any(Delivery.class))).thenReturn(Mono.just(delivery)); // Act var result = testClient .put() .uri(DELIVERY_URL + "/accept") .bodyValue(delivery) .exchange() .expectStatus() .isOk() .expectBody(Delivery.class) .returnResult() .getResponseBody(); // Assert Assertions."<AssertPlaceHolder>"; }
acceptDelivery(@RequestBody @Valid Delivery delivery) { return deliveryService.acceptDelivery(delivery); }
[*] target: assertEquals(delivery, result)
[-] pred: org. junit. Assert. assertEquals ( delivery, result )
************************************
************************************
[+] input: never_hasNext() { var plan = new CursorCloseOperator(null); assertFalse(plan.hasNext()); plan.open(); "<AssertPlaceHolder>"; }
hasNext() { return false; }
[*] target: assertFalse(plan.hasNext())
[-] pred: org. junit. Assert. assertFalse ( plan. hasNext() )
************************************
************************************
[+] input: SQLException {  String queryNode = "match (v:testNode) return v;";  ResultSet resultSet = statement.executeQuery(queryNode);  assertTrue(resultSet.next()); assertEquals(1, resultSet.getRow());  resultSet.absolute(5); assertEquals(5, resultSet.getRow());  resultSet.absolute(-2); assertEquals(5, resultSet.getRow());  resultSet.relative(1); assertEquals(6, resultSet.getRow());  resultSet.relative(-3); assertEquals(3, resultSet.getRow());  resultSet.previous(); assertEquals(2, resultSet.getRow());  resultSet.first(); assertEquals(1, resultSet.getRow()); assertTrue(resultSet.isFirst());  resultSet.beforeFirst(); assertEquals(0, resultSet.getRow()); assertTrue(resultSet.isBeforeFirst());  resultSet.last(); assertEquals(6, resultSet.getRow()); assertTrue(resultSet.isLast());  resultSet.afterLast(); assertEquals(7, resultSet.getRow()); "<AssertPlaceHolder>";  }
isAfterLast() throws SQLException { return currentRowNumber == resultRowSize; }
[*] target: assertTrue(resultSet.isAfterLast())
[-] pred: org. junit. Assert. assertTrue ( resultSet. isAfterLast ( ) )
************************************
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort()); }
configureProxy(HttpClientBuilder clientBuilder) { try { final var httpProxyUrl = Provisioning.getInstance().getLocalServer() .getAttr(ZAttrProvisioning.A_zimbraHttpProxyURL, null); if (httpProxyUrl == null || httpProxyUrl.isEmpty()) { ZimbraLog.misc.info("HttpProxyUtil.configureProxy 'zimbraHttpProxyURL' is null or empty, not using proxy."); return; }  var uri = new URI(httpProxyUrl); var proxyHost = uri.getHost(); var proxyPort = uri.getPort();  var userInfo = uri.getUserInfo(); String username = null; String password = null; if (userInfo != null) { var credentials = userInfo.split(":"); if (credentials.length == 2) { username = credentials[0]; password = credentials[1]; } }  if (username != null && password != null) { CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials( new AuthScope(proxyHost, proxyPort), new UsernamePasswordCredentials(username, password) ); clientBuilder.setDefaultCredentialsProvider(credentialsProvider); }  var proxy = new HttpHost(proxyHost, proxyPort); var config = RequestConfig.custom() .setProxy(proxy) .build(); clientBuilder.setDefaultRequestConfig(config);  if (ZimbraLog.misc.isDebugEnabled()) { ZimbraLog.misc.debug("setting proxy: " + httpProxyUrl); }  } catch (ServiceException | URISyntaxException | IllegalArgumentException e) { ZimbraLog.misc.warn("Unable to configureProxy: " + e.getMessage(), e); } }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
************************************
[+] input: filterCompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; }
size() { return tasks.size(); }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
************************************
[+] input: shouldValidateNamespaceOwnerOfConnectCluster() { Namespace namespace = Namespace.builder() .metadata(Metadata.builder() .name("myNamespace") .cluster("local") .build()) .spec(Namespace.NamespaceSpec.builder() .build()) .build();  when(aclService.isNamespaceOwnerOfResource(any(), any(), any())) .thenReturn(true);  boolean actual = connectClusterService.isNamespaceOwnerOfConnectCluster(namespace, "prefix.connect-cluster");  "<AssertPlaceHolder>"; }
isNamespaceOwnerOfConnectCluster(Namespace namespace, String connectCluster) { return aclService.isNamespaceOwnerOfResource(namespace.getMetadata().getName(), AccessControlEntry.ResourceType.CONNECT_CLUSTER, connectCluster); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: haveTheSameOwner_whenFirstOwnerEqualsSecondOwner_returnsTrue() { // When boolean haveTheSameOwner = DataGymSecurity.haveTheSameOwner("eforce21", "eforce21");  // Then "<AssertPlaceHolder>"; }
haveTheSameOwner(String firstOwner, String secondOwner) { if (!firstOwner.equals(secondOwner)) { throw new ForbiddenException(); }  return true; }
[*] target: assertTrue(haveTheSameOwner)
[-] pred: org. junit. Assert. assertTrue ( haveTheSameOwner )
************************************
************************************
[+] input: convertToDatabaseColumnNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(AnuncioStatus status) { if(status == null) { return null; } return status.getDescricao(); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: shouldBuildFormKey() { Message message = MessageFactory.formKey(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formKey(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "form-key", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: validateNameLargoTest() { try { RecordsManager.validateName(ALEJANDRO); "<AssertPlaceHolder>"; } catch (PlayerNameTooShortException e) { fail(e.getMessage()); } }
validateName(String name) throws PlayerNameTooShortException { /// (5) Validamos la longitud del nombre if (name.length() < MIN_NAME_LENGTH) { throw new PlayerNameTooShortException(name); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: setEnabled() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); properties.setEnabled(true); Assertions."<AssertPlaceHolder>"; }
isEnabled() { return enabled; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
************************************
[+] input: testCreateNotice_success() { // 准备参数 NoticeSaveReqVO reqVO = randomPojo(NoticeSaveReqVO.class) .setId(null); // 避免 id 被赋值  // 调用 Long noticeId = noticeService.createNotice(reqVO); // 校验插入属性是否正确 "<AssertPlaceHolder>"; NoticeDO notice = noticeMapper.selectById(noticeId); assertPojoEquals(reqVO, notice, "id"); }
createNotice(NoticeSaveReqVO createReqVO) { NoticeDO notice = BeanUtils.toBean(createReqVO, NoticeDO.class); noticeMapper.insert(notice); return notice.getId(); }
[*] target: assertNotNull(noticeId)
[-] pred: org. junit. Assert. assertNotNull ( noticeId )
************************************
************************************
[+] input: serialize_WithNestedRecord_ReturnsCorrectJson() { // Test for serializing a nested record Schema schema = new Schema.Parser().parse( "{" + "  "type": "record"," + "  "name": "ParentRecord"," + "  "fields": [" + "    {" + "      "name": "child"," + "      "type": {" + "        "type": "record"," + "        "name": "ChildRecord"," + "        "fields": [" + "          {"name": "name", "type": "string"}" + "        ]" + "      }" + "    }" + "  ]" + "}" ); GenericRecord childRecord = new GenericData.Record(schema.getField("child").schema()); childRecord.put("name", "John Doe"); GenericRecord parentRecord = new GenericData.Record(schema); parentRecord.put("child", childRecord);  String expectedJson = "{"child": {"name": "John Doe"}}";  String json = encoder.serialize(parentRecord);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: testGetWorkflowNames6() { List<String> names = NextflowScript.getWorkflowNames("workflow PLINK_TO_VCF{ some content }"); "<AssertPlaceHolder>"; assertEquals("PLINK_TO_VCF", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: testCreateForm_success() { // 准备参数 BpmFormSaveReqVO reqVO = randomPojo(BpmFormSaveReqVO.class, o -> { o.setConf("{}"); o.setFields(randomFields()); });  // 调用 Long formId = formService.createForm(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmFormDO form = formMapper.selectById(formId); assertPojoEquals(reqVO, form); }
createForm(@Valid BpmFormSaveReqVO createReqVO);  /** * 更新动态表单 * * @param updateReqVO 更新信息 */ void updateForm(@Valid BpmFormSaveReqVO updateReqVO);  /** * 删除动态表单 * * @param id 编号 */ void deleteForm(Long id);  /** * 获得动态表单 * * @param id 编号 * @return 动态表单 */ BpmFormDO getForm(Long id);  /** * 获得动态表单列表 * * @return 动态表单列表 */ List<BpmFormDO> getFormList();  /** * 获得动态表单列表 * * @param ids 编号 * @return 动态表单列表 */ List<BpmFormDO> getFormList(Collection<Long> ids);  /** * 获得动态表单 Map * * @param ids 编号 * @return 动态表单 Map */ default Map<Long, BpmFormDO> getFormMap(Collection<Long> ids) { return CollectionUtils.convertMap(this.getFormList(ids), BpmFormDO::getId); }
[*] target: assertNotNull(formId)
[-] pred: org. junit. Assert. assertNotNull ( formId )
************************************
************************************
[+] input: shouldBuildConditionExpression() { Message message = MessageFactory.conditionExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
conditionExpression(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "condition-expression", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: scanNamedDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.scanner.entity"}, new NamedDefinitionParser("id"), registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(OrderEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(OrderItemEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderItemEntity.class, cosIdAccessor.getIdDeclaringClass());  }
scan() { if (log.isInfoEnabled()) { log.info("Scan basePackages:{}.", Arrays.toString(basePackages)); } try { ClassLoader classLoader = getClass().getClassLoader(); ClassPath classPath = ClassPath.from(classLoader); for (String basePackage : basePackages) {  ImmutableSet<ClassPath.ClassInfo> classInfos = classPath.getTopLevelClassesRecursive(basePackage); for (ClassPath.ClassInfo classInfo : classInfos) { Class<?> clazz = classLoader.loadClass(classInfo.getName()); if (clazz.isInterface()) { continue; } CosIdAccessor cosIdAccessor = cosIdAccessorParser.parse(clazz); cosIdAccessorRegistry.register(clazz, cosIdAccessor); } } } catch (IOException | ClassNotFoundException e) { throw new CosIdException(e.getMessage(), e); } }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
************************************
[+] input: shouldBuildConditionExpressionFeel() { String oldExpression = random(); String newExpression = random(); Message message = conditionExpressionFeel(oldExpression, newExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "FEEL Condition expression: Please review transformed expression: '%s' -> '%s'. Check for custom FEEL functions as they are not supported by Zeebe.", oldExpression, newExpression); }
conditionExpressionFeel( String oldFeelExpression, String newFeelExpression) { return INSTANCE.composeMessage( "condition-expression-feel", ContextBuilder.builder() .context(expressionTransformationResult(oldFeelExpression, newFeelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_equal_to_max_batch_size_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: whenUpdateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.update(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
update(UserDTO obj) { findByEmail(obj); return repository.save(mapper.map(obj, User.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_greater_than_max_batch_size_THEN_return_true() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes()) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE + 1); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetBatchSize )
************************************
************************************
[+] input: ServiceException { boolean check = false; assert (check = true); if (check) { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); mbox.lock.lock(false); assertFalse(mbox.lock.isUnlocked()); assertFalse(mbox.lock.isWriteLockedByCurrentThread()); boolean good = true; try { mbox.lock.lock(true); good = false; } catch (AssertionError e) { //expected } "<AssertPlaceHolder>"; } else { ZimbraLog.test.debug("skipped testWriteWhileHoldingRead since asserts are not enabled"); //without this the test times out eventually, but we want tests to be fast so skip this one } }
lock(boolean write) { write = write || mbox.requiresWriteLock(); ZimbraLog.mailbox.trace("LOCK %s", (write ? "WRITE" : "READ")); assert (neverReadBeforeWrite(write)); try { if (tryLock(write)) { if (mbox.requiresWriteLock() && !isWriteLockedByCurrentThread()) { // writer finished a purge while we waited promote(); return; } lockStack.push(write); try { acquireDistributedLock(write); } catch (ServiceException e) { release(); LockFailedException lfe = new LockFailedException("lockdb"); lfe.logStackTrace(); throw lfe; } return; } int queueLength = zLock.getQueueLength(); if (queueLength >= LC.zimbra_mailbox_lock_max_waiting_threads.intValue()) { // Too many threads are already waiting for the lock, can't let you queued. We don't want to // log stack trace // here because once requests back up, each new incoming request falls into here, which // creates too much // noise in the logs. Unless debug switch is enabled LockFailedException e = new LockFailedException("too many waiters: " + queueLength); if (DebugConfig.debugMailboxLock) { e.logStackTrace(); } throw e; } // Wait for the lock up to the timeout. if (tryLockWithTimeout(write)) { if (mbox.requiresWriteLock() && !isWriteLockedByCurrentThread()) { // writer finished a purge while we waited promote(); return; } lockStack.push(write); try { acquireDistributedLock(write); } catch (ServiceException e) { release(); LockFailedException lfe = new LockFailedException("lockdb"); lfe.logStackTrace(); throw lfe; } return; } LockFailedException e = new LockFailedException("timeout"); e.logStackTrace(); throw e; } catch (InterruptedException e) { throw new LockFailedException("interrupted", e); } finally { assert (!isUnlocked() || debugReleaseReadLock()); } }
[*] target: assertTrue(good)
[-] pred: org. junit. Assert. assertTrue ( good )
************************************
************************************
[+] input: shouldBuildCandidateGroups() { Message message = MessageFactory.candidateGroups(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
candidateGroups(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "candidate-groups", ContextBuilder.builder() .context( supportedAttributeExpression( "candidateGroups", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildCalledElement() { Message message = MessageFactory.calledElement(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
calledElement( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "called-element", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: setTimeout() { Duration timeout = Duration.ofSeconds(2); MachineProperties.Redis redis = new MachineProperties.Redis(); redis.setTimeout(timeout); Assertions."<AssertPlaceHolder>"; }
getTimeout() { return timeout; }
[*] target: assertEquals(timeout, redis.getTimeout())
[-] pred: org. junit. Assert. assertEquals ( timeout, redis. getTimeout() )
************************************
************************************
[+] input: getStakeAddressFromMnemonic_whenMainnet() { String phrase24W = "damp wish scrub sentence vibrant gauge tumble raven game extend winner acid side amused vote edge affair buzz hospital slogan patient drum day vital"; String expectedRewardAddress = "stake1u9xeg0r67z4wca682l28ghg69jxaxgswdmpvnher7at697quawequ";  Account account = new Account(Networks.mainnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
stakeAddress() { if (stakeAddress == null || stakeAddress.isEmpty()) { HdKeyPair stakeKeyPair = getStakeKeyPair(); Address address = AddressProvider.getRewardAddress(stakeKeyPair.getPublicKey(), network); stakeAddress = address.toBech32(); }  return stakeAddress; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
************************************
[+] input: testProcessMenuDeleted() { // 准备参数 Long menuId = randomLongId(); // mock 数据 RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setMenuId(menuId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processMenuDeleted(menuId); // 断言数据 List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); }
processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
************************************
[+] input: should_support_query_with_parameters_and_zero_fetch_size() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1") .jsonContent("{"query": "SELECT 1", "fetch_size": 0, "parameters":[]}") .build(); "<AssertPlaceHolder>"; }
isSupported() { boolean hasCursor = isCursor(); boolean hasQuery = query != null; boolean hasContent = jsonContent != null && !jsonContent.isEmpty();  Predicate<String> supportedParams = Set.of(QUERY_PARAMS_FORMAT, QUERY_PARAMS_PRETTY)::contains; boolean hasUnsupportedParams = (!params.isEmpty()) && params.keySet().stream().dropWhile(supportedParams).findAny().isPresent();  boolean validCursor = hasCursor && !hasQuery && !hasUnsupportedParams && !hasContent; boolean validQuery = !hasCursor && hasQuery;  return (validCursor || validQuery) // It's a valid cursor or a valid query && isOnlySupportedFieldInPayload() // and request must contain supported fields only && isSupportedFormat(); // and request must be a supported format }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
************************************
[+] input: queryUnmodifiedWhenUnknownTracingAndSpanId() { when(traceContext.traceId()).thenReturn(TracingStatementInspector.UNKNOWN_TRACE_ID); when(traceContext.spanId()).thenReturn(TracingStatementInspector.UNKNOWN_SPAN_ID);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
************************************
[+] input: isValidDatasetArn_returns_false_when_arn_service_is_not_personalize() { final String datasetArn = "arn:aws:iam::123456789012:dataset/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
isValidDatasetArn() { if (datasetArn == null) { return true; } final Arn arn = getArn(); boolean status = true; if (!AWS_PERSONALIZE.equals(arn.service())) { status = false; } final Optional<String> resourceType = arn.resource().resourceType(); if (resourceType.isEmpty() || !resourceType.get().equals(AWS_PERSONALIZE_DATASET)) { status = false; } return status; }
[*] target: assertFalse(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertFalse ( objectUnderTest. isValidDatasetArn() )
************************************
************************************
[+] input: CannotParseOpenApiException { logger.info("Test specification type inference"); OpenApiParser openAPIParser = new OpenApiParser(ApiUnderTest.loadTestApiFromFile("type-inference")); openAPIParser.parse();  File solvedSpecification = new File("apis/.test-apis/type-inference/specifications/solved.json"); Map<String, Object> parsed = Helper.getParserMap (openAPIParser); Gson gson = new Gson(); Reader reader = Files.newBufferedReader(Paths.get(solvedSpecification.getAbsolutePath())); Map<String, Object> rightMap = gson.fromJson(reader, Map.class);  "<AssertPlaceHolder>"; }
parse() throws InvalidOpenApiException {  // The specification is invalid in case it does not contain servers or path properties if (!this.openAPIMap.containsKey("servers")) { throw new InvalidOpenApiException("Missing 'servers' field."); } if (!this.openAPIMap.containsKey("paths")) { throw new InvalidOpenApiException("Missing 'paths' field."); }  /* * Add extension with schema names to enrich the specification and keep track of the specification fields * that have exactly the same schema */ addSchemasNames(); // Solve all the refs normalizing (replace refs with their actual schema) solveOpenAPIrefs(); // Normalize common parameters normalizeCommonParameters(); // Infer parameter type where missing inferParameterTypes(); // Normalize 'required' attribute in request/response bodies unfoldRequiredAttributes();  // Start parsing specification fields OpenApi openAPI = new OpenApi();  // Read servers List<Map<String, Object>> servers = (List<Map<String, Object>>) this.openAPIMap.get("servers"); servers.forEach(server -> { try { openAPI.addServer(new URL((String) server.get("url"))); } catch (MalformedURLException|ClassCastException e) { logger.error(e); } }); if (openAPI.getServers().isEmpty()) { throw new InvalidOpenApiException("No valid server found within the OpenAPI specification."); }  // Read paths and create operations Map<String, Object> paths = (Map<String, Object>) this.openAPIMap.get("paths");  // Fetch paths for (Map.Entry<String, Object> path : paths.entrySet()) {  if (path.getKey().startsWith("x-")) { continue; }  // Fetch operations for (Map.Entry<String, Object> operation : ((Map<String, Object>) path.getValue()).entrySet()) {  if (operation.getKey().startsWith("x-")) { continue; }  Operation o = new Operation(path.getKey(), HttpMethod.getMethod(operation.getKey()), (Map<String, Object>) operation.getValue()); o.setReadOnly(); openAPI.addOperation(o); } }  // Finally, parse specification information Map<String, Object> infoMap = safeGet(this.openAPIMap, "info", LinkedTreeMap.class); Map<String, Object> contactMap = safeGet(infoMap, "contact", LinkedTreeMap.class); Map<String, Object> licenseMap = safeGet(infoMap, "license", LinkedTreeMap.class); openAPI.setTitle(safeGet(infoMap, "title", String.class)); openAPI.setSummary(safeGet(infoMap, "summary", String.class)); openAPI.setDescription(safeGet(infoMap, "description", String.class)); openAPI.setTermsOfService(safeGet(infoMap, "termsOfService", String.class)); openAPI.setContactName(safeGet(contactMap, "name", String.class)); openAPI.setContactUrl(safeGet(contactMap, "url", String.class)); openAPI.setContactEmail(safeGet(contactMap, "email", String.class)); openAPI.setLicenseName(safeGet(licenseMap, "name", String.class)); openAPI.setLicenseUrl(safeGet(licenseMap, "url", String.class)); openAPI.setVersion(safeGet(infoMap, "version", String.class));  logger.info("OpenAPI specification correctly parsed."); return openAPI; }
[*] target: assertEquals(rightMap, parsed)
[-] pred: org. junit. Assert. assertEquals ( rightMap, parsed )
************************************
************************************
[+] input: testAsPolicyUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPolicyUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + "/policy"; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.locationName").isEqualTo(location1.getLocationName()); }
save(@Valid @RequestBody LocationSaveRequestDto saveRequestDto) { return locationService.save(saveRequestDto); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
************************************
[+] input: interfaceMethods() { ScreenAttributesAppender screenAttributesAppender = new ScreenAttributesAppender(visibleScreenTracker);  assertTrue(screenAttributesAppender.isStartRequired()); "<AssertPlaceHolder>"; }
isEndRequired() { return false; }
[*] target: assertFalse(screenAttributesAppender.isEndRequired())
[-] pred: org. junit. Assert. assertFalse ( screenAttributesAppender. isEndRequired() )
************************************
************************************
[+] input: Exception { doThrow(new IOException("boom")).when(delegate).send(anyList()); FileSender sender = buildFileSender(3); boolean result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(1); result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(2); result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(fileUtils).safeDelete(file); verifyNoMoreInteractions(backoff); }
handleFileOnDisk(File file) { Log.d(LOG_TAG, "Reading file content for ingest: " + file); List<byte[]> encodedSpans = readFileCompletely(file); if (encodedSpans.isEmpty()) { fileUtils.safeDelete(file); return false; }  boolean sentOk = attemptSend(file, encodedSpans); if (!sentOk) { retryTracker.trackFailure(file); } if (sentOk || retryTracker.exceededRetries(file)) { retryTracker.clear(file); fileUtils.safeDelete(file); } return sentOk; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: inValidateSignature() {  String accessToken = accessTokenService.generateAccessToken(UUID.randomUUID().toString()); String[] parts = accessToken.split("\\."); String token = parts[0]; String payload = parts[1]; PayloadDTO payloadDTO = generatePayloadDTO(accessToken); String forgedToken = token + "." + payload + "." + "checksumTest"; boolean result = accessTokenService .validateAccessToken(forgedToken, payloadDTO); "<AssertPlaceHolder>"; }
validateAccessToken(String token, PayloadDTO payloadDTO) { String[] parts = token.split("\\."); if (parts.length != 3 || payloadDTO == null) return false;  String payload = parts[1]; String signature = parts[2]; return generateSignature(payload).equals(signature); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: setNamespace() { String namespace = "snowflake-namespace"; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
getNamespace() { return namespace; }
[*] target: assertEquals(namespace, idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, idDefinition. getNamespace() )
************************************
************************************
[+] input: getCreateTableSql() {  PostgreSqlDriver postgreSqlDriver = new PostgreSqlDriver(); String tableDDL = postgreSqlDriver.getCreateTableSql(table); String expect = "CREATE TABLE "public"."user" (\n" + "\t"id" BIGINT NOT NULL,\n" + "\t"username" VARCHAR(255) NOT NULL,\n" + "\t"password" VARCHAR(255) NOT NULL,\n" + "\t"email" VARCHAR(255) NOT NULL,\n" + "\t"phone" VARCHAR(20) NOT NULL,\n" + "\t"age" INT,\n" + "\t"gender" BOOLEAN,\n" + "\t"height" DECIMAL(5,2),\n" + "\t"birthday" DATE,\n" + "\t"register_time" TIMESTAMP NOT NULL, \n" + "\tPRIMARY KEY ("id")\n" + ");\n" + "COMMENT ON TABLE "public"."user" IS '用户表';\n" + "COMMENT ON COLUMN "public"."user"."id" IS '用户id';\n" + "COMMENT ON COLUMN "public"."user"."username" IS '用户名';\n" + "COMMENT ON COLUMN "public"."user"."password" IS '密码';\n" + "COMMENT ON COLUMN "public"."user"."email" IS '邮箱';\n" + "COMMENT ON COLUMN "public"."user"."phone" IS '电话号码';\n" + "COMMENT ON COLUMN "public"."user"."age" IS '年龄';\n" + "COMMENT ON COLUMN "public"."user"."gender" IS '性别';\n" + "COMMENT ON COLUMN "public"."user"."height" IS '身高';\n" + "COMMENT ON COLUMN "public"."user"."birthday" IS '生日';\n" + "COMMENT ON COLUMN "public"."user"."register_time" IS '注册时间';\n"; "<AssertPlaceHolder>"; }
getCreateTableSql(Table table) { String tableName = table.getName(); String schema = table.getSchema(); List<Column> columns = table.getColumns();  String columnDefinitions = columns.stream().map(this::getColumnDefinition).collect(Collectors.joining(",\n"));  // comment table:COMMENT ON TABLE "schemaName"."tableName" IS 'comment'; String comment = String.format("COMMENT ON TABLE "%s"."%s" IS '%s';\n", schema, tableName, table.getComment());  // get primaryKeys List<String> columnKeys = table.getColumns().stream() .filter(Column::isKeyFlag) .map(Column::getName) .map(t -> String.format(""%s"", t)) .collect(Collectors.toList());  // add primaryKey String primaryKeyStr = columnKeys.isEmpty() ? "" : columnKeys.stream().collect(Collectors.joining(",", ", \n\tPRIMARY KEY (", ")\n"));  // CREATE TABLE "schemaName"."tableName" ( columnDefinitions ); comment String ddl = String.format( "CREATE TABLE "%s"."%s" (\n%s%s);\n%s", schema, tableName, columnDefinitions, primaryKeyStr, comment);  ddl += columns.stream() // COMMENT ON COLUMN "schemaName"."tableName"."columnName" IS 'comment' .map(c -> String.format( "COMMENT ON COLUMN "%s"."%s"."%s" IS '%s';\n", schema, tableName, c.getName(), c.getComment())) .collect(Collectors.joining());  return ddl; }
[*] target: assertEquals(expect, tableDDL)
[-] pred: org. junit. Assert. assertEquals ( expect, tableDDL )
************************************
************************************
[+] input: Exception { InputCodec objectUnderTest = new InputCodec() { @Override public void parse(InputStream inputStream, Consumer<Record<Event>> eventConsumer) throws IOException {  } };  inputFile = mock(InputFile.class); inputStream = mock(SeekableInputStream.class); decompressionEngine = mock(DecompressionEngine.class); when(inputFile.newStream()).thenReturn(inputStream); closeCalled = false; doAnswer(a -> { closeCalled = true; return null; }).when(inputStream).close(); when(decompressionEngine.createInputStream(any(InputStream.class))).thenReturn(inputStream); objectUnderTest.parse(inputFile, decompressionEngine, rec -> {}); "<AssertPlaceHolder>"; }
parse( InputFile inputFile, DecompressionEngine decompressionEngine, Consumer<Record<Event>> eventConsumer) throws IOException { Objects.requireNonNull(inputFile); Objects.requireNonNull(eventConsumer); try (InputStream inputStream = inputFile.newStream()) { parse(decompressionEngine.createInputStream(inputStream), eventConsumer); } }
[*] target: assertTrue(closeCalled)
[-] pred: org. junit. Assert. assertTrue ( closeCalled )
************************************
************************************
[+] input: testGetChannelListByAppIds() { // mock 数据 PayChannelDO dbChannel01 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.ALIPAY_APP.getCode()); o.setConfig(randomAlipayPayClientConfig()); }); channelMapper.insert(dbChannel01);// @Sql: 先插入出一条存在的数据 PayChannelDO dbChannel02 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.WX_PUB.getCode()); o.setConfig(randomWxPayClientConfig()); }); channelMapper.insert(dbChannel02);// @Sql: 先插入出一条存在的数据 // 准备参数 Long appId = dbChannel01.getAppId();  // 调用 List<PayChannelDO> channels = channelService.getChannelListByAppIds(Collections.singleton(appId)); // 校验是否更新正确 "<AssertPlaceHolder>"; assertPojoEquals(dbChannel01, channels.get(0)); }
getChannelListByAppIds(Collection<Long> appIds);  /** * 根据条件获取渠道 * * @param appId      应用编号 * @param code       渠道编码 * @return 数量 */ PayChannelDO getChannelByAppIdAndCode(Long appId, String code);  /** * 支付渠道的合法性 * * 如果不合法，抛出 {@link ServiceException}
[*] target: assertEquals(1, channels.size())
[-] pred: org. junit. Assert. assertEquals ( 1, channels. size ( ) )
************************************
************************************
[+] input: shouldCallTheObjectMatcherIfTheTwoObjectAreObject() { final var object1 = new ObjectNode(null); final var object2 = new ObjectNode(null);  final var objectMatcher = (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), objectMatcher, (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class) ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(objectMatcher.jsonDiff(path, object1, object2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, object1, object2);  "<AssertPlaceHolder>"; }
diff(Path path, JsonNode expected, JsonNode received) { if (expected instanceof ObjectNode  && received instanceof ObjectNode) { return this.jsonObjectPartialMatcher.jsonDiff(path, (ObjectNode) expected, (ObjectNode) received, this); } else if (expected instanceof ArrayNode && received instanceof ArrayNode) { return this.jsonArrayPartialMatcher.jsonDiff(path, (ArrayNode) expected, (ArrayNode) received, this); } else if (expected instanceof ValueNode && received instanceof ValueNode){ return this.primitivePartialMatcher.jsonDiff(path, (ValueNode) expected, (ValueNode) received, this); } else { return new UnMatchedPrimaryDiff(path, expected, received); } }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
************************************
[+] input: setMachineBit() { int machineBit = 9; MachineProperties properties = new MachineProperties(); properties.setMachineBit(machineBit); Assertions."<AssertPlaceHolder>"; }
getMachineBit() { return machineBit; }
[*] target: assertEquals(machineBit, properties.getMachineBit())
[-] pred: org. junit. Assert. assertEquals ( machineBit, properties. getMachineBit() )
************************************
************************************
[+] input: testCreateJobLog() { // 准备参数 JobLogDO reqVO = randomPojo(JobLogDO.class, o -> o.setExecuteIndex(1));  // 调用 Long id = jobLogService.createJobLog(reqVO.getJobId(), reqVO.getBeginTime(), reqVO.getHandlerName(), reqVO.getHandlerParam(), reqVO.getExecuteIndex()); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobLogDO job = jobLogMapper.selectById(id); assertEquals(JobLogStatusEnum.RUNNING.getStatus(), job.getStatus()); }
createJobLog(Long jobId, LocalDateTime beginTime, String jobHandlerName, String jobHandlerParam, Integer executeIndex) { JobLogDO log = JobLogDO.builder().jobId(jobId).handlerName(jobHandlerName) .handlerParam(jobHandlerParam).executeIndex(executeIndex) .beginTime(beginTime).status(JobLogStatusEnum.RUNNING.getStatus()).build(); jobLogMapper.insert(log); return log.getId(); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: shouldFindExistingMessageTemplate() { MessageTemplate messageTemplate = MESSAGE_TEMPLATE_PROVIDER.getMessageTemplate("connector-hint"); "<AssertPlaceHolder>"; }
getMessageTemplate(String templateName) { MessageTemplate template; synchronized (MESSAGE_TEMPLATES) { template = MESSAGE_TEMPLATES.get(templateName); } if (template == null) { throw new IllegalStateException("No template found for name '" + templateName + "'"); } return template; }
[*] target: assertNotNull(messageTemplate)
[-] pred: org. junit. Assert. assertNotNull ( messageTemplate )
************************************
************************************
[+] input: testIsEqualTo() { PrefixedVersion version = new PrefixedVersion("TEST #", 10); PrefixedVersion version2 = new PrefixedVersion("TEST #", 10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
hashCode() { return Objects.hash(prefix, getVersionNumber()); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode(), version2. hashCode() )
************************************
************************************
[+] input: should_support_query_without_parameters() { SQLQueryRequest requestWithNoParams = SQLQueryRequestBuilder.request("SELECT 1").params(Map.of()).build(); "<AssertPlaceHolder>"; }
isSupported() { boolean hasCursor = isCursor(); boolean hasQuery = query != null; boolean hasContent = jsonContent != null && !jsonContent.isEmpty();  Predicate<String> supportedParams = Set.of(QUERY_PARAMS_FORMAT, QUERY_PARAMS_PRETTY)::contains; boolean hasUnsupportedParams = (!params.isEmpty()) && params.keySet().stream().dropWhile(supportedParams).findAny().isPresent();  boolean validCursor = hasCursor && !hasQuery && !hasUnsupportedParams && !hasContent; boolean validQuery = !hasCursor && hasQuery;  return (validCursor || validQuery) // It's a valid cursor or a valid query && isOnlySupportedFieldInPayload() // and request must contain supported fields only && isSupportedFormat(); // and request must be a supported format }
[*] target: assertTrue(requestWithNoParams.isSupported())
[-] pred: org. junit. Assert. assertTrue ( requestWithNoParams. isSupported ( ) )
************************************
************************************
[+] input: isAndroid() { Configuration.INSTANCE.setAndroid(true); boolean isAndroid = Configuration.INSTANCE.isAndroid(); Configuration.INSTANCE.setAndroid(false);  "<AssertPlaceHolder>"; }
setAndroid(boolean android) { OSUtil.setAndroid(android); }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
************************************
[+] input: shouldValidateEncryptAndDecryptAes256() { String clearText = "myClearText"; String encryptionKey = "myKeyEncryption"; String encryptionSalt = "p8t42EhY9z2eSUdpGeq7HX7RboMrsJAhUnu3EEJJVS"; String encryptedText = EncryptionUtils.encryptAesWithPrefix(clearText, encryptionKey, encryptionSalt); String clearTextDecrypted = EncryptionUtils.decryptAesWithPrefix(encryptedText, encryptionKey, encryptionSalt);  "<AssertPlaceHolder>"; }
decryptAesWithPrefix(final String encryptedText, final String key, final String salt) { if (!StringUtils.hasText(encryptedText)) { return encryptedText; }  try { // Get IV and cipherText from encrypted text. final byte[] prefix = NS4KAFKA_PREFIX.getBytes(StandardCharsets.UTF_8); final var byteBuffer = ByteBuffer.wrap(Base64.getDecoder().decode(encryptedText)); final byte[] iv = new byte[IV_LENGTH_BYTE]; byteBuffer.position(prefix.length); byteBuffer.get(iv); final byte[] cipherText = new byte[byteBuffer.remaining()]; byteBuffer.get(cipherText);  // decrypt the cipher text. final SecretKey secret = getAesSecretKey(key, salt); final var cipher = Cipher.getInstance(ENCRYPT_ALGO); cipher.init(Cipher.DECRYPT_MODE, secret, new GCMParameterSpec(TAG_LENGTH_BIT, iv)); return new String(cipher.doFinal(cipherText), StandardCharsets.UTF_8); } catch (Exception e) { log.error("An error occurred during Connect cluster AES256 string decryption", e); }  return encryptedText; }
[*] target: assertEquals(clearText, clearTextDecrypted)
[-] pred: org. junit. Assert. assertEquals ( clearText, clearTextDecrypted )
************************************
************************************
[+] input: IOException { // Set Security Context OauthUser oauthUser = SecurityUtils.createTestTokenUser(); SecurityContext.set(oauthUser);  //Given List<LcEntryUpdateBindingModel> testLcEntryUpdateBindingModels = LcEntryUtils.createTestLcEntryUpdateBindingModels(3);  Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  LabelConfigurationViewModel testLabelConfigurationViewModel = LabelConfigurationUtils.createTestLabelConfigurationViewModel();  //When when(labelConfigurationRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration)); when(labelConfigurationServiceMock.updateLabelConfiguration(anyString(), anyList(), anyBoolean())) .thenReturn(testLabelConfigurationViewModel);  LabelConfigurationViewModel labelConfigurationViewModel = externalApiService .uploadLabelConfiguration(LC_CONFIG_ID, testLcEntryUpdateBindingModels);  //Then "<AssertPlaceHolder>"; assertEquals(testLabelConfiguration.getId(), labelConfigurationViewModel.getId()); assertEquals(testLabelConfiguration.getProject().getId(), labelConfigurationViewModel.getProjectId()); assertEquals(0, labelConfigurationViewModel.getEntries().size());  verify(labelConfigurationServiceMock, times(1)) .updateLabelConfiguration(anyString(), anyList(), anyBoolean()); verifyNoMoreInteractions(labelConfigurationServiceMock); }
uploadLabelConfiguration(String configId, List<LcEntryUpdateBindingModel> lcEntryUpdateBindingModelList) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE);  LabelConfiguration configById = findConfigById(configId);  // If there are any LcEntries in the current Configuration, throw exception if (!configById.getEntries().isEmpty()) { throw new GenericException("config_not_cleared", null, null, configId); }  return labelConfigurationService.updateLabelConfiguration(configId, lcEntryUpdateBindingModelList, true); }
[*] target: assertNotNull(labelConfigurationViewModel)
[-] pred: org. junit. Assert. assertNotNull ( labelConfigurationViewModel )
************************************
************************************
[+] input: IOException { final String rawCpuSetInfo = "/kubepods/besteffort/pod72832d24-7655-487c-8b85-3f01844639a9/" + "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDefaultDataSourceMetadata() { DataSourceMetadata defaultMetadata = DataSourceMetadata.defaultOpenSearchDataSourceMetadata(); "<AssertPlaceHolder>"; assertEquals(DataSourceType.OPENSEARCH, defaultMetadata.getConnector()); assertTrue(defaultMetadata.getAllowedRoles().isEmpty()); assertTrue(defaultMetadata.getProperties().isEmpty()); }
defaultOpenSearchDataSourceMetadata() { return new DataSourceMetadata.Builder() .setName(DEFAULT_DATASOURCE_NAME) .setDescription(StringUtils.EMPTY) .setConnector(DataSourceType.OPENSEARCH) .setAllowedRoles(Collections.emptyList()) .setProperties(ImmutableMap.of()) .validateAndBuild(); }
[*] target: assertNotNull(defaultMetadata)
[-] pred: org. junit. Assert. assertNotNull ( defaultMetadata )
************************************
************************************
[+] input: testConvertShouldSetParametersWhenCalledWithValidRsaPrivateKey() { //given final RsaPrivateKeyToJsonWebKeyImportRequestConverter underTest = new RsaPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateRsa(2048, null); final RSAPrivateCrtKey privateKey = (RSAPrivateCrtKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.RSA, actual.getKeyType()); Assertions.assertNotNull(actual.getN()); Assertions.assertNotNull(actual.getE()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getP()); Assertions.assertNotNull(actual.getQ()); Assertions.assertNotNull(actual.getDp()); Assertions.assertNotNull(actual.getDq()); Assertions.assertNotNull(actual.getQi()); }
convert(final @NonNull RSAPrivateCrtKey source) { final JsonWebKeyImportRequest importRequest = new JsonWebKeyImportRequest(); importRequest.setKeyType(KeyType.RSA); importRequest.setN(source.getModulus().toByteArray()); importRequest.setE(source.getPublicExponent().toByteArray()); importRequest.setD(source.getPrivateExponent().toByteArray()); importRequest.setP(source.getPrimeP().toByteArray()); importRequest.setQ(source.getPrimeQ().toByteArray()); importRequest.setDq(source.getPrimeExponentQ().toByteArray()); importRequest.setDp(source.getPrimeExponentP().toByteArray()); importRequest.setQi(source.getCrtCoefficient().toByteArray()); return importRequest; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testShouldRender() { ProfileAwareWaypoint waypoint = new ProfileAwareWaypoint(BlockPos.ORIGIN, null, null, null); waypoint.setFound("profile"); Assertions.assertTrue(waypoint.shouldRender()); waypoint.setFound(""); Assertions.assertFalse(waypoint.shouldRender()); waypoint.setMissing(); Assertions."<AssertPlaceHolder>"; }
shouldRender() { return !foundProfiles.contains(Utils.getProfile()); }
[*] target: assertTrue(waypoint.shouldRender())
[-] pred: org. junit. Assert. assertTrue ( waypoint. shouldRender() )
************************************
************************************
[+] input: getNamespace() { SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
getNamespace() { return namespace; }
[*] target: assertNull(idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertNull ( idDefinition. getNamespace() )
************************************
************************************
[+] input: test() { List<Integer> elements = Arrays.asList(1, 2, 3); PeekingIterator testObject = new PeekingIterator(elements.iterator()); assertEquals(1, testObject.next()); assertEquals(2, testObject.peek()); assertEquals(2, testObject.next()); assertEquals(3, testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return areElementsLeft; }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: emptyCycleTest() { Cycle<Integer> cycle = new Cycle<>(); Assertions.assertEquals(0, cycle.size()); Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(NoSuchElementException.class, cycle::next); }
hasNext() { return this.iterator.hasNext(); }
[*] target: assertFalse(cycle.hasNext())
[-] pred: org. junit. Assert. assertFalse ( cycle. hasNext() )
************************************
************************************
[+] input: Throwable { String str = "abc"; String encoding = "UTF-8"; byte[] bytes = str.getBytes(encoding); FastConstructor<String> fc = FastConstructor.create(String.class.getConstructor(byte[].class, String.class)); String result = (String) fc.invoke(bytes, encoding); "<AssertPlaceHolder>"; }
create(Constructor<T> constructor, boolean toSetAccessible) { return create(constructor, FastMemberLoader.getDefaultLoader(), toSetAccessible); }
[*] target: assertEquals(str, result)
[-] pred: org. junit. Assert. assertEquals ( str, result )
************************************
************************************
[+] input: isAdminOrUser_whenUserHasUserRole_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("datagym", false);  // Then "<AssertPlaceHolder>"; }
isAdminOrUser(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); }  boolean hasAdminOrUserRole = orgs.get(owner).equals(ADMIN_ROLE) || orgs.get(owner).equals(USER_ROLE);  if (!hasAdminOrUserRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(MESSAGE_KEY, headers);  "<AssertPlaceHolder>"; }
computeRawURI( @RawUri String messageKey, Map<String, String> headers) throws JsonProcessingException {  if (headers.get(KafkaCustomHeaders.IMPORT_SCHEMA) == null) {  ConnectKeyPayload key = jsonMapper.readValue(messageKey, ConnectKeyPayload.class); checkValidKey(key); return JoyceURI.make(JoyceURI.Type.RAW, JoyceURI.Subtype.OTHER, key.getSource(), key.getUid()); }  return JoyceURI.createURI(messageKey) .orElseThrow(() -> new InvalidJoyceUriException(String.format("Uri [%s] is not a valid Joyce Uri", messageKey))); }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
************************************
[+] input: isAccessTokenExpired() {  long expirationTime = System.currentTimeMillis() - 62 * 60 *1000L; String token = UUID.randomUUID().toString(); String userId = UUID.randomUUID().toString(); String payload = accessTokenService.generatePayload(userId,expirationTime); String signature = accessTokenService.generateSignature(payload); String signedToken = token + "." +payload + "." + signature; PayloadDTO payloadDTO = generatePayloadDTO(signedToken); boolean result = accessTokenService .isAccessTokenExpired(payloadDTO); "<AssertPlaceHolder>"; }
isAccessTokenExpired(PayloadDTO payloadDTO) { return System.currentTimeMillis() > payloadDTO.getExp(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testFinalPositionOfSnakeOnlyLeft() { List<String> commands = List.of("LEFT", "LEFT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
finalPositionOfSnake(int n, List<String> commands) { int x = 0; int y = 0; for (String command : commands) { switch (command) { case "UP": if (x > 0) { x--; } break; case "DOWN": if (x < n - 1) { x++; } break; case "LEFT": if (y > 0) { y--; } break; case "RIGHT": if (y < n - 1) { y++; } break; default: break; } } return (x * n) + y; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: testCreateDept() { // 准备参数 DeptSaveReqVO reqVO = randomPojo(DeptSaveReqVO.class, o -> { o.setId(null); // 防止 id 被设置 o.setParentId(DeptDO.PARENT_ID_ROOT); o.setStatus(randomCommonStatus()); });  // 调用 Long deptId = deptService.createDept(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DeptDO deptDO = deptMapper.selectById(deptId); assertPojoEquals(reqVO, deptDO, "id"); }
createDept(DeptSaveReqVO createReqVO) { if (createReqVO.getParentId() == null) { createReqVO.setParentId(DeptDO.PARENT_ID_ROOT); } // 校验父部门的有效性 validateParentDept(null, createReqVO.getParentId()); // 校验部门名的唯一性 validateDeptNameUnique(null, createReqVO.getParentId(), createReqVO.getName());  // 插入部门 DeptDO dept = BeanUtils.toBean(createReqVO, DeptDO.class); deptMapper.insert(dept); return dept.getId(); }
[*] target: assertNotNull(deptId)
[-] pred: org. junit. Assert. assertNotNull ( deptId )
************************************
************************************
[+] input: Exception { // Lookup and initialize mojo var engineConfigureMojo = (EngineConfigureMojo) lookupMojo("configure", getTestConfiguration()); setVariableValueToObject(engineConfigureMojo, "project", getMavenProject()); engineConfigureMojo.execute();  var storedEngineConfiguration = EngineConfiguration .loadDirectory(getBuildDirectory()); "<AssertPlaceHolder>"; JsonAssertions.assertEquals(getEngineConfiguration(), storedEngineConfiguration); }
execute() throws EngineConfigureMojoException {  if (!FlowModeAbstractMojo.isHillaAvailable(project)) { getLog().warn( "The 'configure' goal is only meant to be used in Hilla projects with endpoints." .stripIndent()); return; } try { var legacyFrontendFolder = project.getBasedir().toPath() .resolve(LEGACY_PROJECT_FRONTEND_PATH).toFile(); if (legacyFrontendFolder.exists()) { generatedTsFolder = legacyFrontendFolder.toPath() .resolve("generated").toFile(); } var buildDir = project.getBuild().getDirectory(); var cp = Stream .of(project.getCompileClasspathElements(), project.getRuntimeClasspathElements(), project.getSystemClasspathElements()) .flatMap(Collection::stream) .collect(Collectors.toCollection(LinkedHashSet::new)); var conf = new EngineConfiguration.Builder( project.getBasedir().toPath()).classPath(cp) .outputDir(generatedTsFolder.toPath()).generator(generator) .parser(parser).buildDir(buildDir) .classesDir(project.getBuild().getOutputDirectory()) .create();  // The configuration gathered from the Maven plugin is saved in a // file so that further runs can skip running a separate Maven // project just to get this configuration again var configDir = project.getBasedir().toPath().resolve(buildDir); Files.createDirectories(configDir); conf.store(configDir .resolve(EngineConfiguration.DEFAULT_CONFIG_FILE_NAME) .toFile()); } catch (DependencyResolutionRequiredException e) { throw new EngineConfigureMojoException("Configuration failed", e); } catch (IOException e) { throw new EngineConfigureMojoException( "Maven configuration has not been saved to file", e); } }
[*] target: assertNotNull(storedEngineConfiguration)
[-] pred: org. junit. Assert. assertNotNull ( storedEngineConfiguration )
************************************
************************************
[+] input: testContainsEntityShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; }
containsEntity(@NonNull final K entityId) { return containsName(entityId.id()) && entities.get(entityId.id()).containsKey(entityId.version()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: getQuantidadeCaracteresEspeciais_test03() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(""); "<AssertPlaceHolder>"; }
getQuantidadeCaracteresEspeciais(String str) { return 0; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
************************************
[+] input: shouldBuildDelegateImplementationNoDefaultJobType() { String implementationType = random(); String binding = random(); Message message = delegateImplementationNoDefaultJobType(implementationType, binding); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Delegate call of type '" + implementationType + "' bound to '" + binding + "' was reset."); }
delegateImplementationNoDefaultJobType( String implementationType, String binding) { return INSTANCE.composeMessage( "delegate-implementation-no-default-job-type", ContextBuilder.builder() .entry("implementationType", implementationType) .entry("binding", binding) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: create() { doNothing().when(userEventSubscriber).onUserCreated(any());  String username = UUID.randomUUID().toString().replace("-", ""); UserCreateRequest request = new UserCreateRequest(); request.setAvatar(username); request.setUsername(username); request.setNickname(username); request.setEmail(username + "@Databasir-ut.com"); request.setPassword("123456"); request.setEnabled(true); Integer id = userService.create(request, UserSource.MANUAL); "<AssertPlaceHolder>"; verify(userEventSubscriber, times(1)).onUserCreated(any()); }
create(UserCreateRequest userCreateRequest, String source) { userDao.selectByEmailOrUsername(userCreateRequest.getUsername()).ifPresent(data -> { throw DomainErrors.USERNAME_OR_EMAIL_DUPLICATE.exception(); }); String hashedPassword = bCryptPasswordEncoder.encode(userCreateRequest.getPassword()); User pojo = userConverter.of(userCreateRequest, hashedPassword); try { Integer id = userDao.insertAndReturnId(pojo); // publish event UserCreated event = userEventConverter.userCreated(pojo, source, userCreateRequest.getPassword(), id); eventPublisher.publish(event); return id; } catch (DuplicateKeyException e) { throw DomainErrors.USERNAME_OR_EMAIL_DUPLICATE.exception(); } }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: allArgsConstructorAndGetter() { Especie especie = new Especie(1, "nome-especie"); assertEquals(1, especie.getIdEspecie()); "<AssertPlaceHolder>"; assertEquals("nome-especie", especie.getNome()); }
getId() { return this.getIdEspecie(); }
[*] target: assertEquals(1, especie.getId())
[-] pred: org. junit. Assert. assertEquals ( 1, especie. getId ( ) )
************************************
************************************
[+] input: itShouldBuildAModernChatRequestWithLastSeen() { KoLConstants.RNG.setSeed(42);  creq = new ChatRequest(0L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.7275636800328681&j=1&lasttime=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.6832234717598454&j=1&lasttime=8675309"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: testFindTag() { var entity = BundleVersionTagEntity.builder() .type("MODEL") .bundleId(1L) .versionId(2L) .tag("tag") .build(); when(bundleVersionTagMapper.findTag("MODEL", 1L, "tag")).thenReturn(entity); var get = bundleVersionTagDao.findTag(BundleAccessor.Type.MODEL, 1L, "tag"); verify(bundleVersionTagMapper).findTag("MODEL", 1L, "tag"); "<AssertPlaceHolder>"; }
findTag(BundleAccessor.Type type, Long bundleId, String tag) { return bundleVersionTagMapper.findTag(type.name(), bundleId, tag); }
[*] target: assertEquals(entity, get)
[-] pred: org. junit. Assert. assertEquals ( entity, get )
************************************
************************************
[+] input: basic() { String realCode = """ int x=5; String y =foo("bar");""";  List<TokenType> expectedTypes = List.of(TokenType.INT, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.ASSIGN, TokenType.NUMBER, TokenType.SEMICOLON, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.ASSIGN, TokenType.IDENTIFIER, TokenType.OPEN_PARENTHESIS, TokenType.STRING, TokenType.CLOSE_PARENTHESIS, TokenType.SEMICOLON);  List<TokenType> actualTypes = tokenize(realCode);  "<AssertPlaceHolder>"; }
tokenize(CharSequence code) { if (code.isEmpty()) { return List.of(); }  List<Token> tokens = new ArrayList<>(); CharBuffer remainingCode = CharBuffer.wrap(code);  while (!remainingCode.isEmpty()) { Token token = nextToken(remainingCode); tokens.add(token);  advancePosition(remainingCode, token.content().length()); }  return tokens; }
[*] target: assertEquals(expectedTypes, actualTypes)
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, actualTypes )
************************************
************************************
[+] input: checkForPreApproval_approve() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(null)); // mock 数据 OAuth2ApproveDO approve = randomPojo(OAuth2ApproveDO.class).setUserId(userId) .setUserType(userType).setClientId(clientId).setScope("read") .setExpiresTime(LocalDateTimeUtil.offset(LocalDateTime.now(), 1L, ChronoUnit.DAYS)).setApproved(true); // 同意 oauth2ApproveMapper.insert(approve);  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; }
checkForPreApproval(Long userId, Integer userType, String clientId, Collection<String> requestedScopes) { // 第一步，基于 Client 的自动授权计算，如果 scopes 都在自动授权中，则返回 true 通过 OAuth2ClientDO clientDO = oauth2ClientService.validOAuthClientFromCache(clientId); Assert.notNull(clientDO, "客户端不能为空"); // 防御性编程 if (CollUtil.containsAll(clientDO.getAutoApproveScopes(), requestedScopes)) { // gh-877 - if all scopes are auto approved, approvals still need to be added to the approval store. LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (String scope : requestedScopes) { saveApprove(userId, userType, clientId, scope, true, expireTime); } return true; }  // 第二步，算上用户已经批准的授权。如果 scopes 都包含，则返回 true List<OAuth2ApproveDO> approveDOs = getApproveList(userId, userType, clientId); Set<String> scopes = convertSet(approveDOs, OAuth2ApproveDO::getScope, OAuth2ApproveDO::getApproved); // 只保留未过期的 + 同意的 return CollUtil.containsAll(scopes, requestedScopes); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: removeNode() { consistentHashRouter.removeNode(() -> "1"); Node node = consistentHashRouter.routeNode("1"); "<AssertPlaceHolder>"; }
routeNode(String businessKey) { if (ring.isEmpty()) { logger.debug("哈希环为空"); return null; } Long hashOfBusinessKey = this.hashAlgorithm.hash(businessKey); // 截取哈希环中比当前业务值哈希大的部分环 map SortedMap<Long, VirtualNode<T>> biggerTailMap = ring.tailMap(hashOfBusinessKey); // 获取路由到的虚拟节点的 hash Long nodeHash; if (biggerTailMap.isEmpty()) { // 没有，回到整个哈希环的环首 nodeHash = ring.firstKey(); } else { // 存在，则为被截取后的 tailMap 的首个节点 key nodeHash = biggerTailMap.firstKey(); } VirtualNode<T> virtualNode = ring.get(nodeHash); return virtualNode.getPhysicalNode(); }
[*] target: assertNull(node)
[-] pred: org. junit. Assert. assertNull ( node )
************************************
************************************
[+] input: testDense() { long[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  LongSparseNdArray instance = new LongSparseNdArray(indices, values, DimensionalSpace.create(shape)); LongNdArray denseInstance = instance.toDense(); LongNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { LongDataBuffer dataBuffer = DataBuffers.ofLongs(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: shouldFormatCorrectlyWhenCalledProcessNormalStats() { String[] headers = { "AnonymousIoService", "CloudRoutingReaderThread", "GC", "ImapSSLServer", "ImapServer", "LmtpServer", "Pop3SSLServer", "Pop3Server", "ScheduledTask", "SocketAcceptor", "Thread", "Timer", "btpool", "pool" };  String[] stats = {"0", "0", "0", "0", "0", "2", "0", "0", "10", "0", "2", "5", "0", "0"};  StringBuilder buf = new StringBuilder(); PrometheusFormatter.processNormalStats("threads", buf, headers, stats); String expected = "threads_AnonymousIoService 0\n" + "threads_CloudRoutingReaderThread 0\n" + "threads_GC 0\n" + "threads_ImapSSLServer 0\n" + "threads_ImapServer 0\n" + "threads_LmtpServer 2\n" + "threads_Pop3SSLServer 0\n" + "threads_Pop3Server 0\n" + "threads_ScheduledTask 10\n" + "threads_SocketAcceptor 0\n" + "threads_Thread 2\n" + "threads_Timer 5\n" + "threads_btpool 0\n" + "threads_pool 0\n"; "<AssertPlaceHolder>"; }
processNormalStats( String statFilePrefix, StringBuilder logBuffer, final String[] headers, String[] stats) { IntStream.range(0, stats.length) .forEach( i -> logBuffer .append(statFilePrefix) .append("_") .append(sanitizeHeader(headers[i])) .append(" ") .append(("".equals(stats[i]) ? "0" : stats[i])) .append("\n")); }
[*] target: assertEquals(expected, buf.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, buf. toString ( ) )
************************************
************************************
[+] input: addsTwoTasks() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name); todoList.addTask(task2Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); assertEquals(task2Name, task2NameOf(todoList)); }
size() { return tasks.size(); }
[*] target: assertEquals(2, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, todoList. size() )
************************************
************************************
[+] input: testCreateDiyTemplate_success() { // 准备参数 DiyTemplateCreateReqVO reqVO = randomPojo(DiyTemplateCreateReqVO.class);  // 调用 Long diyTemplateId = diyTemplateService.createDiyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyTemplateDO diyTemplate = diyTemplateMapper.selectById(diyTemplateId); assertPojoEquals(reqVO, diyTemplate); }
createDiyTemplate(DiyTemplateCreateReqVO createReqVO) { // 校验名称唯一 validateNameUnique(null, createReqVO.getName()); // 插入 DiyTemplateDO diyTemplate = DiyTemplateConvert.INSTANCE.convert(createReqVO); diyTemplate.setProperty("{}"); diyTemplateMapper.insert(diyTemplate); // 创建默认页面 createDefaultPage(diyTemplate); // 返回 return diyTemplate.getId(); }
[*] target: assertNotNull(diyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( diyTemplateId )
************************************
************************************
[+] input: defaultValues() { SplunkRumBuilder builder = SplunkRum.builder();  assertFalse(builder.isDebugEnabled()); assertFalse(builder.isDiskBufferingEnabled()); assertTrue(builder.isCrashReportingEnabled()); assertTrue(builder.isNetworkMonitorEnabled()); assertTrue(builder.isAnrDetectionEnabled()); "<AssertPlaceHolder>"; assertEquals(Attributes.empty(), builder.globalAttributes); assertNull(builder.deploymentEnvironment); assertFalse(builder.sessionBasedSamplerEnabled); }
isSlowRenderingDetectionEnabled() { return configFlags.isSlowRenderingDetectionEnabled(); }
[*] target: assertTrue(builder.isSlowRenderingDetectionEnabled())
[-] pred: org. junit. Assert. assertTrue ( builder. isSlowRenderingDetectionEnabled ( ) )
************************************
************************************
[+] input: queryUnmodifiedWhenNoTrace() { TracingStatementInspector inspector = new TracingStatementInspector(null); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
inspect(final String sql) { final Span span = findSpan();  if (span == null) { return sql; }  final String traceId = span.context().traceId(); final String spanId = span.context().spanId(); final boolean traceIdUnknown = UNKNOWN_TRACE_ID.equals(traceId) || isInvalidId(traceId); final boolean spanIdUnknown = UNKNOWN_SPAN_ID.equals(spanId) || isInvalidId(spanId);  span.tag("query", sql);  // There is no trace id and there is no span id if (traceIdUnknown && spanIdUnknown) { return sql; }  final StringBuilder sqlWithTraceIds = new StringBuilder();  /* Allow existing comments to be persisted at the top of the SQL statement * then insert tracing comments below those comments. */ try (Scanner scanner = new Scanner(sql)) { boolean inTopLevelComments = true;  while (scanner.hasNextLine()) { final String line = scanner.nextLine();  if (inTopLevelComments && !line.startsWith("--")) { appendTraceIds(sqlWithTraceIds, traceId, spanId, traceIdUnknown, spanIdUnknown); inTopLevelComments = false; }  sqlWithTraceIds.append(line);  if (scanner.hasNextLine()) { sqlWithTraceIds.append(System.lineSeparator()); } } }  return sqlWithTraceIds.toString(); }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
************************************
[+] input: testIsProviderCodeUniqueDoesntExist() { boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
isProviderCodeUnique(Integer id, String code) { Provider provider = findProviderByCode(code); return ( provider == null || ((id != null) && (provider.getId() == id))); }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
************************************
[+] input: checkForPreApproval_clientAutoApprove() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(requestedScopes));  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
checkForPreApproval(Long userId, Integer userType, String clientId, Collection<String> requestedScopes) { // 第一步，基于 Client 的自动授权计算，如果 scopes 都在自动授权中，则返回 true 通过 OAuth2ClientDO clientDO = oauth2ClientService.validOAuthClientFromCache(clientId); Assert.notNull(clientDO, "客户端不能为空"); // 防御性编程 if (CollUtil.containsAll(clientDO.getAutoApproveScopes(), requestedScopes)) { // gh-877 - if all scopes are auto approved, approvals still need to be added to the approval store. LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (String scope : requestedScopes) { saveApprove(userId, userType, clientId, scope, true, expireTime); } return true; }  // 第二步，算上用户已经批准的授权。如果 scopes 都包含，则返回 true List<OAuth2ApproveDO> approveDOs = getApproveList(userId, userType, clientId); Set<String> scopes = convertSet(approveDOs, OAuth2ApproveDO::getScope, OAuth2ApproveDO::getApproved); // 只保留未过期的 + 同意的 return CollUtil.containsAll(scopes, requestedScopes); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.delete() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isNoContent();  }
save(@Valid @RequestBody LocationSaveRequestDto saveRequestDto) { return locationService.save(saveRequestDto); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
************************************
[+] input: IOException { final String expected = new UUID(0L, 0L).toString(); writeStringToFile(expected, TracingAttributes.getServiceIdFilePath(fileSystem, APP_NAME)); final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.SERVICE_INSTANCE_ID); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testHashCode() { JavaIdentifier id = new JavaIdentifier( "com.gazelle.java.javaparser.generators", "JavaIdentifier", "artifact("com.gazelle.java.javaparser:generators")"); int hashCode = 1986351184; "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(packageName, className); }
[*] target: assertEquals(id.hashCode(), hashCode)
[-] pred: org. junit. Assert. assertEquals ( id. hashCode(), hashCode )
************************************
************************************
[+] input: fromOptionValue_test() { LicenseTypeOptions licenseTypeOptions = LicenseTypeOptions.fromOptionValue("enterprise"); "<AssertPlaceHolder>"; assertThat(licenseTypeOptions.toString(), equalTo("ENTERPRISE")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(licenseTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( licenseTypeOptions )
************************************
************************************
[+] input: whenUpdateThenReturnSuccess() { when(service.update(userDTO)).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.update(ID, userDTO);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.OK, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); }
update(@PathVariable Integer id, @RequestBody UserDTO obj) { obj.setId(id); return ResponseEntity.ok().body(mapper.map(service.update(obj), UserDTO.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: convertToEntityAttributeNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); AnuncioStatus convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String descricao) { if(descricao == null) { return null; }  return AnuncioStatus.of(descricao); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: shouldValidateSourceConnector() { ConnectValidator validator = ConnectValidator.builder() .validationConstraints(Map.of( "key.converter", new ResourceValidator.NonEmptyString(), "value.converter", new ResourceValidator.NonEmptyString(), "connector.class", new ResourceValidator.ValidString( List.of("io.confluent.connect.jdbc.JdbcSourceConnector", "io.confluent.connect.jdbc.JdbcSinkConnector", "com.splunk.kafka.connect.SplunkSinkConnector", "org.apache.kafka.connect.file.FileStreamSinkConnector"), false))) .sourceValidationConstraints(Map.of( "producer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .sinkValidationConstraints(Map.of( "consumer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .classValidationConstraints(Map.of( "io.confluent.connect.jdbc.JdbcSinkConnector", Map.of( "db.timezone", new ResourceValidator.NonEmptyString()))) .build();  Connector connector = Connector.builder() .metadata(Metadata.builder() .name("connect2") .build()) .spec(Connector.ConnectorSpec.builder() .connectCluster("cluster1") .config(Map.of( "connector.class", "io.confluent.connect.jdbc.JdbcSourceConnector", "key.converter", "test", "value.converter", "test", "producer.override.sasl.jaas.config", "test")) .build()) .build();  List<String> actual = validator.validate(connector, "source"); "<AssertPlaceHolder>"; }
validate(Connector connector, String connectorType) { List<String> validationErrors = new ArrayList<>();  if (!StringUtils.hasText(connector.getMetadata().getName())) { return List.of(invalidNameEmpty()); }  if (connector.getMetadata().getName().length() > 249) { validationErrors.add(invalidNameLength(connector.getMetadata().getName())); }  if (!connector.getMetadata().getName().matches("[a-zA-Z0-9._-]+")) { validationErrors.add(invalidNameSpecChars(connector.getMetadata().getName())); }  validationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } });  if (connectorType.equals("sink")) { sinkValidationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); }  if (connectorType.equals("source")) { sourceValidationConstraints.forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); }  if (classValidationConstraints.containsKey(connector.getSpec().getConfig().get(CONNECTOR_CLASS))) { classValidationConstraints.get(connector.getSpec().getConfig().get(CONNECTOR_CLASS)) .forEach((key, value) -> { try { value.ensureValid(key, connector.getSpec().getConfig().get(key)); } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); } return validationErrors; }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty ( ) )
************************************
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleError() { Message message = MessageFactory.failedJobRetryTimeCycleError(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
failedJobRetryTimeCycleError(String elementLocalName, String timecycle) { return INSTANCE.composeMessage( "failed-job-retry-time-cycle-error", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("timecycle", timecycle) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getNodeDetails_kraken_isNotOnline() { NodeDetailsDto kraken = demoDataService.getNodeDetails(KRAKEN.remotePubkey()); "<AssertPlaceHolder>"; assertFalse(kraken.onlineReport().online()); }
getNodeDetails(Pubkey pubkey) { List<OpenChannelDto> openChannels = getOpenChannelsWith(pubkey); return createNodeDetails(getNode(pubkey), openChannels, warningService.getNodeWarnings(pubkey)); }
[*] target: assertNotNull(kraken)
[-] pred: org. junit. Assert. assertNotNull ( kraken )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test03() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("testandoOTesteDoTestador"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(20, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 20, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: createTrustAnyHttpClient() { ClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(TrustAnyHttpClientFactory.createTrustAnyHttpClient()); RestTemplate restTemplate = new RestTemplate(factory); String response = restTemplate.getForObject("https://www.baidu.com",String.class); "<AssertPlaceHolder>"; }
createTrustAnyHttpClient() { SSLContext sslContext = SSLContext.getInstance("TLS"); TrustAnyTrustManager trustAnyTrustManager = new TrustAnyTrustManager(); sslContext.init(null, new TrustManager[] {trustAnyTrustManager}, null); SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);  final Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory> create() .register("https", sslConnectionSocketFactory) .register("http", new PlainConnectionSocketFactory()) .build();  RequestConfig requestConfig = RequestConfig.custom() .setCircularRedirectsAllowed(true) .build();  BasicHttpClientConnectionManager connectionManager = new BasicHttpClientConnectionManager(socketFactoryRegistry);  return HttpClients.custom() .setDefaultRequestConfig(requestConfig) .setConnectionManager(connectionManager) .build(); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: Exception { CountDownLatch latch = new CountDownLatch(1); s1.registerCallback(new CountDownCallback(latch)); s2.registerCallback(new CountDownCallback(latch)); Exception e = null; try { c.getPeer("bogus").sendMessage(messages[0]); fail("bogus config"); } catch (IOChannelException ex) { e = ex; } "<AssertPlaceHolder>"; }
registerCallback(NotifyCallback cb) { callback = cb; }
[*] target: assertNotNull(e)
[-] pred: org. junit. Assert. assertNotNull ( e )
************************************
************************************
[+] input: testResta3() { int algo = 8; int res = Calculadora.resta(algo, 0); "<AssertPlaceHolder>"; }
resta(int a, int b) { return a + b; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
************************************
[+] input: findEventById_shouldFindEvent_whenExists() { final Event event = mock(Event.class); when(event.getId()).thenReturn(ID);  repository.saveEvent(event); final Event actual = repository.findEventById(ID);  "<AssertPlaceHolder>"; assertEquals(event, actual); }
findEventById(long id) { return storage.get(id); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: drawImageWithNullTransform() { Image img = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB); g2.drawImage(img, null, null); "<AssertPlaceHolder>"; // won't get here if there's an exception above }
drawImage(Image img, AffineTransform xform, ImageObserver obs) { if (LOG_ENABLED) { LOGGER.debug("drawImage(Image, AffineTransform, ImageObserver)"); } AffineTransform savedTransform = getTransform(); if (xform != null) { transform(xform); } boolean result = drawImage(img, 0, 0, obs); if (xform != null) { setTransform(savedTransform); } return result; }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: test_provideCollector() { MetricsServletModule module = new MetricsServletModule(); Assertions."<AssertPlaceHolder>"; }
provideCollector() { CarbonioMetricRegisterer.register(Metrics.COLLECTOR_REGISTRY); return Metrics.COLLECTOR_REGISTRY; }
[*] target: assertNotNull(module.provideCollector())
[-] pred: org. junit. Assert. assertNotNull ( module. provideCollector() )
************************************
************************************
[+] input: IOException { int data = 123;  outputStream.write(data);  outputStream.close();  final String stringContent = Files.readString(testDataFile.toPath()); final byte[] bytesContent = stringContent.getBytes(StandardCharsets.UTF_8); int actualContent = bytesContent[0] & 0xFF;   "<AssertPlaceHolder>"; }
close() throws IOException { if (!this.closed) { fileStream.close(); this.closed = true; } }
[*] target: assertEquals(data, actualContent)
[-] pred: org. junit. Assert. assertEquals ( data, actualContent )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_equal_to_max_batch_size_THEN_return_true() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(thresholdConfig.getMaxRequestSizeBytes(), ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetBatchSize )
************************************
************************************
[+] input: JavetException { String message = "test"; List<V8ValueErrorType> types = SimpleList.of(V8ValueErrorType.values()); types.remove(types.size() - 1); for (V8ValueErrorType type : types) { try (V8ValueError v8ValueError = v8Runtime.createV8ValueError(type, message)) { assertEquals(message, v8ValueError.getMessage()); "<AssertPlaceHolder>"; } } }
getErrorType() { if (optionalType == null) { optionalType = V8ValueErrorType.UnknownError; try (V8Value v8Value = get(METHOD_NAME_CONSTRUCTOR)) { String constructorFunction = v8Value.toString(); if (StringUtils.isNotEmpty(constructorFunction)) { final int startIndex = constructorFunction.indexOf(" ") + 1; final int endIndex = constructorFunction.indexOf("("); if (startIndex > 0 && endIndex > startIndex) { String constructorName = constructorFunction.substring(startIndex, endIndex); optionalType = V8ValueErrorType.parse(constructorName); } } } catch (Throwable ignored) { ignored.printStackTrace(System.err); } } return optionalType; }
[*] target: assertEquals(type, v8ValueError.getErrorType())
[-] pred: org. junit. Assert. assertEquals ( type, v8ValueError. getErrorType ( ) )
************************************
************************************
[+] input: getI18NProvider_beanEnabled_instanceReturned() { I18NProvider i18NProvider = instantiator.getI18NProvider(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(i18NProvider instanceof I18NTestProvider); }
getI18NProvider() { final BeanLookup<I18NProvider> lookup = new BeanLookup<>( getBeanManager(), I18NProvider.class, BeanLookup.SERVICE); if (i18NLoggingEnabled.compareAndSet(true, false)) { lookup.setUnsatisfiedHandler(() -> getLogger().info( "Can't find any @VaadinServiceScoped bean implementing '{}'. " + CANNOT_USE_CDI_BEANS_FOR_I18N, I18NProvider.class.getSimpleName())).setAmbiguousHandler( e -> getLogger().warn( "Found more beans for I18N. " + CANNOT_USE_CDI_BEANS_FOR_I18N, e)); } else { lookup.setAmbiguousHandler(e -> { }); } return lookup.lookupOrElseGet(delegate::getI18NProvider); }
[*] target: assertNotNull(i18NProvider)
[-] pred: org. junit. Assert. assertNotNull ( i18NProvider )
************************************
************************************
[+] input: testGetMethodWithInvalidParams() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnInteger", String.class);  "<AssertPlaceHolder>"; }
getMethod(@Nonnull Class<?> c, @Nonnull String method, Class<?>... paramTypes) { Class<?>[] expectParamTypes = toPrimitiveTypeArray(paramTypes);  for (Method m : c.getMethods()) { Class<?>[] methodParameters = toPrimitiveTypeArray(m.getParameterTypes());  if ((m.getName().equals(method)) && (equalsTypeArray(methodParameters, expectParamTypes))) { return m; } }  return null; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
************************************
[+] input: testCreateLevel_success() { // 准备参数 MemberLevelCreateReqVO reqVO = randomPojo(MemberLevelCreateReqVO.class, o -> { o.setDiscountPercent(randomInt()); o.setIcon(randomURL()); o.setBackgroundUrl(randomURL()); o.setStatus(randomCommonStatus()); });  // 调用 Long levelId = levelService.createLevel(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberLevelDO level = memberlevelMapper.selectById(levelId); assertPojoEquals(reqVO, level); }
createLevel(MemberLevelCreateReqVO createReqVO) { // 校验配置是否有效 validateConfigValid(null, createReqVO.getName(), createReqVO.getLevel(), createReqVO.getExperience());  // 插入 MemberLevelDO level = MemberLevelConvert.INSTANCE.convert(createReqVO); memberLevelMapper.insert(level); // 返回 return level.getId(); }
[*] target: assertNotNull(levelId)
[-] pred: org. junit. Assert. assertNotNull ( levelId )
************************************
************************************
[+] input: shouldValidateEncryptAndDecryptAes256Gcm() { String clearText = "myClearText"; String keyEncryptionKey = "olDeandATEDiCenSiTurThrepASTrole"; String encryptedText = EncryptionUtils.encryptAes256Gcm(clearText, keyEncryptionKey); String clearTextDecrypted = EncryptionUtils.decryptAes256Gcm(encryptedText, keyEncryptionKey);  "<AssertPlaceHolder>"; }
decryptAes256Gcm(String encryptedText, String key) { try { if (!StringUtils.hasText(encryptedText)) { return encryptedText; }  AESDecrypter decrypter = new AESDecrypter(key.getBytes(StandardCharsets.UTF_8)); byte[] encryptedData = Base64URL.from(encryptedText).decode();  Base64URL encryptedKey = Base64URL.encode(Arrays.copyOfRange(encryptedData, 0, 40)); Base64URL iv = Base64URL.encode(Arrays.copyOfRange(encryptedData, 40, 52)); Base64URL auth = Base64URL.encode(Arrays.copyOfRange(encryptedData, 52, 68)); Base64URL text = Base64URL.encode(Arrays.copyOfRange(encryptedData, 68, encryptedData.length));  byte[] clearTextAsBytes = decrypter.decrypt(new JWEHeader(JWEAlgorithm.A256KW, EncryptionMethod.A256GCM), encryptedKey, iv, text, auth);  return new String(clearTextAsBytes); } catch (JOSEException e) { log.error("An error occurred during Connect cluster password decryption", e); }  return encryptedText; }
[*] target: assertEquals(clearText, clearTextDecrypted)
[-] pred: org. junit. Assert. assertEquals ( clearText, clearTextDecrypted )
************************************
************************************
[+] input: testCreateTenantPackage_success() { // 准备参数 TenantPackageSaveReqVO reqVO = randomPojo(TenantPackageSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long tenantPackageId = tenantPackageService.createTenantPackage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 TenantPackageDO tenantPackage = tenantPackageMapper.selectById(tenantPackageId); assertPojoEquals(reqVO, tenantPackage, "id"); }
createTenantPackage(TenantPackageSaveReqVO createReqVO) { // 插入 TenantPackageDO tenantPackage = BeanUtils.toBean(createReqVO, TenantPackageDO.class); tenantPackageMapper.insert(tenantPackage); // 返回 return tenantPackage.getId(); }
[*] target: assertNotNull(tenantPackageId)
[-] pred: org. junit. Assert. assertNotNull ( tenantPackageId )
************************************
************************************
[+] input: shouldBuildDelegateImplementation() { Message message = MessageFactory.delegateImplementation(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
delegateImplementation( String attributeLocalName, String elementLocalName, String binding, String jobType) { return INSTANCE.composeMessage( "delegate-implementation", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .entry("binding", binding) .entry("jobType", jobType) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); testImage.setDeleted(true); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0, Media.class);  assertFalse(arg0.isDeleted()); assertNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, false);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
deleteMediaFile(String mediaId, boolean deleteMedia) { DataGymSecurity.isAuthenticated(); Media mediaById = getMediaById(mediaId);  // Permissions check String owner = isCurrentUserPermittedToManipulateMedia(mediaById, false); DataGymSecurity.isAdmin(owner, false);  boolean deleted = mediaById.isDeleted();  if (deleted == deleteMedia) { throw new GenericException("image_delete", null, null, mediaId); }  mediaById.setDeleted(deleteMedia); Long currentTime = null;  if (deleteMedia) { currentTime = System.currentTimeMillis();  // Check Pricing Plan Limits decreaseUsedStorage(owner, mediaById); } else { // Check Pricing Plan Limits increaseUsedStorage(owner, mediaById); }  mediaById.setDeleteTime(currentTime);  Media savedMedia = mediaRepository.save(mediaById); return MediaMapper.mapToMediaViewModel(savedMedia); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testIterator() { Set<DataSource> dataSourceSet = new HashSet<>(); dataSourceSet.add(new DataSource("prometheus", DataSourceType.PROMETHEUS, storageEngine)); dataSourceSet.add(new DataSource("opensearch", DataSourceType.OPENSEARCH, storageEngine)); Set<DataSourceMetadata> dataSourceMetadata = dataSourceSet.stream() .map( dataSource -> new DataSourceMetadata.Builder() .setName(dataSource.getName()) .setConnector(dataSource.getConnectorType()) .setProperties(ImmutableMap.of("prometheus.uri", "localhost:9200")) .build()) .collect(Collectors.toSet()); when(dataSourceService.getDataSourceMetadata(false)).thenReturn(dataSourceMetadata);  assertFalse(dataSourceTableScan.hasNext()); dataSourceTableScan.open(); assertTrue(dataSourceTableScan.hasNext()); Set<ExprValue> exprTupleValues = new HashSet<>(); while (dataSourceTableScan.hasNext()) { exprTupleValues.add(dataSourceTableScan.next()); }  Set<ExprValue> expectedExprTupleValues = new HashSet<>(); for (DataSource dataSource : dataSourceSet) { expectedExprTupleValues.add( new ExprTupleValue( new LinkedHashMap<>( ImmutableMap.of( "DATASOURCE_NAME", ExprValueUtils.stringValue(dataSource.getName()), "CONNECTOR_TYPE", ExprValueUtils.stringValue(dataSource.getConnectorType().name()))))); } "<AssertPlaceHolder>"; }
next() { return iterator.next(); }
[*] target: assertEquals(expectedExprTupleValues, exprTupleValues)
[-] pred: org. junit. Assert. assertEquals ( expectedExprTupleValues, exprTupleValues )
************************************
************************************
[+] input: testGenNotifyBodyForCustom() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwdxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Custom") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
genNotifBody( ShareInfoData sid, Locale locale, Action action, String externalGroupMember) throws MessagingException, ServiceException {  // Body MimeMultipart mmp = new ZMimeMultipart("alternative");  String extUserShareAcceptUrl = null; String extUserLoginUrl = null; String externalGranteeName = null; if (sid.getGranteeTypeCode() == ACL.GRANTEE_GUEST) { externalGranteeName = sid.getGranteeName(); } else if (sid.getGranteeTypeCode() == ACL.GRANTEE_GROUP && externalGroupMember != null) { externalGranteeName = externalGroupMember; } // this mail will go to external email address boolean goesToExternalAddr = (externalGranteeName != null); if (action == null && goesToExternalAddr) { Account owner = Provisioning.getInstance().getAccountById(sid.getOwnerAcctId()); extUserShareAcceptUrl = AccountUtil.getShareAcceptURL(owner, sid.getItemId(), externalGranteeName); extUserLoginUrl = AccountUtil.getExtUserLoginURL(owner); }  // TEXT part (add me first!) String mimePartText; if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, false); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, false); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, false); } MimeBodyPart textPart = new ZMimeBodyPart(); textPart.setText(mimePartText, MimeConstants.P_CHARSET_UTF8); mmp.addBodyPart(textPart);  // HTML part if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, true); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, true); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, true); } MimeBodyPart htmlPart = new ZMimeBodyPart(); htmlPart.setDataHandler(new DataHandler(new HtmlPartDataSource(mimePartText))); mmp.addBodyPart(htmlPart);  // XML part if (!goesToExternalAddr) { MimeBodyPart xmlPart = new ZMimeBodyPart(); xmlPart.setDataHandler( new DataHandler(new XmlPartDataSource(genXmlPart(sid, null, action)))); mmp.addBodyPart(xmlPart); }  return mmp; }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
************************************
[+] input: InterruptedException { final int capacity = 1 << 10; final int limit = 1 << 20; try (IntStack stack = new IntStack(Integer.MIN_VALUE, capacity >>> 1)) { final ExecutorService pool = Executors.newFixedThreadPool(8); for (int i = 0; i < limit; i++) { pool.execute(() -> stack.push(1)); } pool.shutdown(); Assertions.assertTrue(pool.awaitTermination(5, TimeUnit.SECONDS)); Assertions."<AssertPlaceHolder>"; } }
size() { return (index.get() >> 2) + 1; }
[*] target: assertEquals(limit, stack.size())
[-] pred: org. junit. Assert. assertEquals ( limit, stack. size() )
************************************
************************************
[+] input: testBatchSend() { //        // Setup //        final BatchSendRequest batchSendRequest = new BatchSendRequest("code", 0L, //                Arrays.asList(new MessageParam("receiver", new HashMap<>(), new HashMap<>()))); //        final SendResponse expectedResult = new SendResponse("status", "msg"); // //        // Configure ProcessController.process(...). //        final ProcessContext processContext = new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        when(processController.process(new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")))).thenReturn(processContext); // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.batchSend(batchSendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
batchSend(BatchSendRequest batchSendRequest) { if (ObjectUtils.isEmpty(batchSendRequest)) { return new SendResponse(RespStatusEnum.CLIENT_BAD_PARAMETERS.getCode(), RespStatusEnum.CLIENT_BAD_PARAMETERS.getMsg(), null); }  SendTaskModel sendTaskModel = SendTaskModel.builder() .messageTemplateId(batchSendRequest.getMessageTemplateId()) .messageParamList(batchSendRequest.getMessageParamList()) .build();  ProcessContext context = ProcessContext.builder() .code(batchSendRequest.getCode()) .processModel(sendTaskModel) .needBreak(false) .response(BasicResultVO.success()).build();  ProcessContext process = processController.process(context);  return new SendResponse(process.getResponse().getStatus(), process.getResponse().getMsg(), (List<SimpleTaskInfo>) process.getResponse().getData()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getOwnPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
getOwnPropertyNames() throws JavetException { return checkV8Runtime().getV8Internal().objectGetOwnPropertyNames(this); }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidOctParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new OctKeyCreationInput(KeyType.OCT_HSM, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: isEnabled() { CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); Assertions."<AssertPlaceHolder>"; }
isEnabled() { return enabled; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
************************************
[+] input: testIfMethodReturnsPositivePairsUntilNumber() { final int randomNumber = (new Random()).nextInt(100) + 1; List<String> expectedPairNumbers = intStreamToListString( IntStream.rangeClosed(1, randomNumber).filter(number -> number % 2 == 0)); List<String> actualPairNumbers = intStreamToListString( ExibindoNumerosPares.getPositivePairsUntilNumber(randomNumber)); "<AssertPlaceHolder>"; }
getPositivePairsUntilNumber(int number) { IntStream pairNumbers = IntStream.rangeClosed(1, number); return pairNumbers.filter(x -> x % 2 == 0); }
[*] target: assertEquals(expectedPairNumbers, actualPairNumbers)
[-] pred: org. junit. Assert. assertEquals ( expectedPairNumbers, actualPairNumbers )
************************************
************************************
[+] input: testCreateSeckillConfig_success() { // 准备参数 SeckillConfigCreateReqVO reqVO = randomPojo(SeckillConfigCreateReqVO.class);  // 调用 Long SeckillConfigId = SeckillConfigService.createSeckillConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillConfigDO SeckillConfig = seckillConfigMapper.selectById(SeckillConfigId); assertPojoEquals(reqVO, SeckillConfig); }
createSeckillConfig(SeckillConfigCreateReqVO createReqVO) { // 校验时间段是否冲突 validateSeckillConfigConflict(createReqVO.getStartTime(), createReqVO.getEndTime(), null);  // 插入 SeckillConfigDO seckillConfig = SeckillConfigConvert.INSTANCE.convert(createReqVO); seckillConfigMapper.insert(seckillConfig); // 返回 return seckillConfig.getId(); }
[*] target: assertNotNull(SeckillConfigId)
[-] pred: org. junit. Assert. assertNotNull ( SeckillConfigId )
************************************
************************************
[+] input: testValidShelleyAddress() { boolean isValid = AddressUtil.isValidAddress("addr1qxkeutm43mhc8jpqg6sk4cqtypzy3ez6z8k7qlfwa97h2acz7xprvuysll04e5gaa65vavyj0wvd0v99lhpntm7c03us8wk6xc");  "<AssertPlaceHolder>"; }
isValidAddress(String addr) { try { addressToBytes(addr);  return true; } catch (AddressExcepion e) { return false; } catch (AddressRuntimeException e) { return false; } }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
************************************
[+] input: remainingSize() { TokenQueue queue = provideEmptyTokenQueue(); assertEquals(0, queue.remainingSize());  queue = provide2TokenQueue(); assertEquals(2, queue.remainingSize());  queue.consume(); assertEquals(1, queue.remainingSize()); queue.consume(); "<AssertPlaceHolder>"; }
remainingSize() { return tokens.size() - nextTokenIndex; }
[*] target: assertEquals(0, queue.remainingSize())
[-] pred: org. junit. Assert. assertEquals ( 0, queue. remainingSize() )
************************************
************************************
[+] input: iterator() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions."<AssertPlaceHolder>"; int idx = 0; for (String element : exactCollection) { Assertions.assertEquals(String.valueOf(idx), element); idx++; } }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: Exception { // 准备参数 Long configId = 10L; String path = "tudou.jpg"; // mock 方法 FileClient client = mock(FileClient.class); when(fileConfigService.getFileClient(eq(10L))).thenReturn(client); byte[] content = new byte[]{}; when(client.getContent(eq("tudou.jpg"))).thenReturn(content);  // 调用 byte[] result = fileService.getFileContent(configId, path); // 断言 "<AssertPlaceHolder>"; }
getFileContent(Long configId, String path) throws Exception { FileClient client = fileConfigService.getFileClient(configId); Assert.notNull(client, "客户端({}) 不能为空", configId); return client.getContent(path); }
[*] target: assertSame(result, content)
[-] pred: org. junit. Assert. assertSame ( result, content )
************************************
************************************
[+] input: getAllDatasetsFromOrganisationAndLoggedInUserIsAdmin_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(datasetRepositoryMock.findAllByDeletedIsFalseAndOwner("datagym")).thenReturn(new ArrayList<>()); List<DatasetViewModel> allDatasets = datasetService.getAllDatasetsFromOrganisationAndLoggedInUserIsAdmin();  //Then "<AssertPlaceHolder>";  verify(datasetRepositoryMock).findAllByDeletedIsFalseAndOwner("eforce21"); verify(datasetRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner("eforce21"); }
getAllDatasetsFromOrganisationAndLoggedInUserIsAdmin() { //Permissions check DataGymSecurity.isAuthenticated();  OauthUser user = SecurityContext.get(); Map<String, String> orgs = user.orgs();  List<DatasetViewModel> result = new ArrayList<>();  for (Map.Entry<String, String> orgsEntry : orgs.entrySet()) { String currentUserOrg = orgsEntry.getKey();  boolean isAdminInCurrentOrg = DataGymSecurity.checkIfUserIsAdmin(currentUserOrg, false);  if (isAdminInCurrentOrg) { List<DatasetViewModel> currentOrgDatasetViewModels = datasetRepository .findAllByDeletedIsFalseAndOwner(currentUserOrg) .stream() .map(dataset -> DatasetMapper.mapToDatasetViewModel(dataset, true)) .collect(Collectors.toList());  result.addAll(currentOrgDatasetViewModels); } }  return result; }
[*] target: assertTrue(allDatasets.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allDatasets. isEmpty ( ) )
************************************
************************************
[+] input: testAsRecoveryUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asRecoveryUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/deletedcertificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
toString() { return asString(); }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
************************************
[+] input: IOException { List<? extends JavaFileObject> files = List.of( testFiles.get( "/workspace/com/gazelle/java/javaparser/generators/AnonymousInnerClass.java")); parser.parseClasses(files);  Set<String> expectedTypes = Set.of( "java.util.HashMap", "javax.annotation.Nullable", "org.jetbrains.annotations.Nullable"); "<AssertPlaceHolder>";  Map<String, ClasspathParser.PerClassData> expectedPerClassMetadata = new TreeMap<>(); TreeMap<String, SortedSet<String>> expectedPerMethodAnnotations = new TreeMap<>(); expectedPerMethodAnnotations.put( "containsValue", treeSet("Override", "javax.annotation.Nullable")); // This anonymous inner class really has a name like $1, but we don't know what number it will // end up getting given, so we just use the empty string for anonymous inner classes. expectedPerClassMetadata.put( "workspace.com.gazelle.java.javaparser.generators.AnonymousInnerClass.", new ClasspathParser.PerClassData(treeSet(), expectedPerMethodAnnotations, new TreeMap<>())); assertEquals(expectedPerClassMetadata, parser.perClassData); }
getUsedTypes() { return ImmutableSet.copyOf(usedTypes); }
[*] target: assertEquals(expectedTypes, parser.getUsedTypes())
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, parser. getUsedTypes() )
************************************
************************************
[+] input: shouldBuildEscalationCodeNoExpression() { Message message = escalationCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Escalation code cannot be an expression."); }
escalationCodeNoExpression() { return INSTANCE.staticMessage("escalation-code-no-expression"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: setConverter() { IdConverterDefinition converter = new IdConverterDefinition(); SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setConverter(converter); Assertions."<AssertPlaceHolder>"; }
getConverter() { return converter; }
[*] target: assertEquals(converter, idDefinition.getConverter())
[-] pred: org. junit. Assert. assertEquals ( converter, idDefinition. getConverter() )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test05() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("FELIX"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(5, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: testPhrase() { for (int i = 0; i < 10; i++) { System.out.println(random.nextPhrase()); }  for (int i = 100; i < 150; i++) { String s = random.nextPhrase(i); System.out.println(s); Assertions."<AssertPlaceHolder>"; } }
nextPhrase(int length) { StringBuilder s = new StringBuilder(); while (s.length() < length) { s.append(nextWord(nextIntBetweenInclusive(1, Math.min(length - s.length() + 1, 19)))).append(" "); } s.setLength(length); return s.toString(); }
[*] target: assertEquals(s.length(), i)
[-] pred: org. junit. Assert. assertEquals ( s. length ( ), i )
************************************
************************************
[+] input: validateVerificationToken_returnsExpiredIfTokenExpired() { testToken.setExpiryDate(getExpirationDate(0)); when(verificationTokenRepository.findByToken(anyString())).thenReturn(testToken); UserService.TokenValidationResult result = userVerificationService.validateVerificationToken(anyString()); Assertions."<AssertPlaceHolder>"; }
validateVerificationToken(String token) { final VerificationToken verificationToken = tokenRepository.findByToken(token); if (verificationToken == null) { return UserService.TokenValidationResult.INVALID_TOKEN; }  final User user = verificationToken.getUser(); final Calendar cal = Calendar.getInstance(); if (verificationToken.getExpiryDate().before(cal.getTime())) { tokenRepository.delete(verificationToken); return UserService.TokenValidationResult.EXPIRED; }  user.setEnabled(true); userRepository.save(user); return UserService.TokenValidationResult.VALID; }
[*] target: assertEquals(result, UserService.TokenValidationResult.EXPIRED)
[-] pred: org. junit. Assert. assertEquals ( result, UserService.TokenValidationResult.EXPIRED )
************************************
************************************
[+] input: testCompileAndEvaluateWithConstants() { boolean result = SimpleProposition.compileAndEvaluate("1 == 1", null); "<AssertPlaceHolder>"; }
compileAndEvaluate(String expression, Map<String, Object> context) { String[] tokens = tokenize(expression); if (tokens.length == 0) { throw new ExpressionException("[EL] No supporting operators found", expression); } if (context == null) { context = Collections.emptyMap(); }  String[] literals = Arrays.copyOfRange(tokens, 1, tokens.length); Object[] operands = parse(literals, context); return evaluate(tokens[0], operands); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldBuildFieldContent() { Message message = MessageFactory.fieldContent(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
fieldContent(String elementLocalName) { return INSTANCE.composeMessage( "field-content", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.purge(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/purge", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
purge(@NonNull final URI baseUri) { final Map<String, String> parameters = Map.of(BASE_URI_QUERY_PARAM, baseUri.toString()); final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PURGE_PATH, parameters); final HttpRequest request = new HttpRequest(HttpMethod.DELETE, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(Boolean.class)); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: test() { try { final int status = -1; final String testExitMessage = "testExitMessage"; try { ExitUtils.disableSystemExit(); ExitUtils.terminate(status, testExitMessage, null, null); fail(); } catch (ExitException e) { "<AssertPlaceHolder>"; assertEquals(testExitMessage, e.getMessage()); }  final Thread t = new Thread(null, () -> { throw new AssertionError("TestUncaughtException"); }, "testThread"); t.start(); t.join(); } catch (Exception e) { e.printStackTrace(); fail(); }  }
getStatus() { return status; }
[*] target: assertEquals(status, e.getStatus())
[-] pred: org. junit. Assert. assertEquals ( status, e. getStatus() )
************************************
************************************
[+] input: isScrollStarted() { assertFalse(request.isScroll());  request.setScrollId("scroll123"); assertTrue(request.isScroll());  request.reset(); "<AssertPlaceHolder>"; }
isScroll() { return !scrollId.equals(NO_SCROLL_ID); }
[*] target: assertFalse(request.isScroll())
[-] pred: org. junit. Assert. assertFalse ( request. isScroll() )
************************************
************************************
[+] input: testCancelOrder() { when(mockOrderRequest.originOrderId()).thenReturn("order1"); manager.submitOrder(mockOrderRequest); boolean result = manager.cancelOrder("order1"); "<AssertPlaceHolder>"; Map<String, OrderRequest> orderMap = manager.orderMap; assertEquals(0, orderMap.size()); }
cancelOrder(String originOrderId) { OrderRequest orderReq = orderMap.remove(originOrderId); if(Objects.isNull(orderReq)) { return false; } orderReq.cancelOrder(); return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testCreateCombinationActivity_success() { // 准备参数 CombinationActivityCreateReqVO reqVO = randomPojo(CombinationActivityCreateReqVO.class);  // 调用 Long combinationActivityId = combinationActivityService.createCombinationActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CombinationActivityDO combinationActivity = combinationActivityMapper.selectById(combinationActivityId); assertPojoEquals(reqVO, combinationActivity); }
createCombinationActivity(CombinationActivityCreateReqVO createReqVO) { // 校验商品 SPU 是否存在是否参加的别的活动 validateProductConflict(createReqVO.getSpuId(), null); // 校验商品是否存在 validateProductExists(createReqVO.getSpuId(), createReqVO.getProducts());  // 插入拼团活动 CombinationActivityDO activity = CombinationActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); combinationActivityMapper.insert(activity); // 插入商品 List<CombinationProductDO> products = CombinationActivityConvert.INSTANCE.convertList(createReqVO.getProducts(), activity); combinationProductMapper.insertBatch(products); return activity.getId(); }
[*] target: assertNotNull(combinationActivityId)
[-] pred: org. junit. Assert. assertNotNull ( combinationActivityId )
************************************
************************************
[+] input: returnsNullWhenBuyerDoesntExist() { var cm = CoinmasterRegistry.findBuyer(ItemPool.SEAL_CLUB); "<AssertPlaceHolder>"; }
findBuyer(final int itemId) { if (itemId == -1) { return null; }  return Arrays.stream(COINMASTERS) .filter(data -> data.canSellItem(itemId)) .findAny() .orElse(null); }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
************************************
[+] input: testListSwdsVersionsByJobId() { List<Long> ids = jobDatasetVersionMapper.listDatasetVersionIdsByJobId( 13L); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( CollectionUtils.isEqualCollection(List.of(datasetVersionEntity.getId(), datasetVersionEntity2.getId()), ids));  }
listDatasetVersionIdsByJobId(@Param("jobId") Long jobId);  @InsertProvider(value = JobDatasetVersionProvider.class, method = "insertSql") int insert(@Param("jobId") Long jodId, @Param("datasetVersionIds") Set<Long> datasetVersionIds);  class JobDatasetVersionProvider {  public String insertSql(@Param("jobId") Long jobId, @Param("datasetVersionIds") Set<Long> datasetVersionIds) { return new SQL() { { INSERT_INTO("job_dataset_version_rel"); INTO_COLUMNS("job_id", "dataset_version_id"); for (Long datasetVersionId : datasetVersionIds) { INTO_VALUES(String.valueOf(jobId), String.valueOf(datasetVersionId)); ADD_ROW(); } } }.toString(); } }
[*] target: assertEquals(2, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ids. size ( ) )
************************************
************************************
[+] input: shouldCallThePrimitiveMatcherIfTheTwoObjectAreValue() { final var value1 = TextNode.valueOf(""); final var value2 = IntNode.valueOf(10);  final var primitiveMatcher = (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class), primitiveMatcher ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(primitiveMatcher.jsonDiff(path, value1, value2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, value1, value2);  "<AssertPlaceHolder>"; }
diff(Path path, JsonNode expected, JsonNode received) { if (expected instanceof ObjectNode  && received instanceof ObjectNode) { return this.jsonObjectPartialMatcher.jsonDiff(path, (ObjectNode) expected, (ObjectNode) received, this); } else if (expected instanceof ArrayNode && received instanceof ArrayNode) { return this.jsonArrayPartialMatcher.jsonDiff(path, (ArrayNode) expected, (ArrayNode) received, this); } else if (expected instanceof ValueNode && received instanceof ValueNode){ return this.primitivePartialMatcher.jsonDiff(path, (ValueNode) expected, (ValueNode) received, this); } else { return new UnMatchedPrimaryDiff(path, expected, received); } }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsLabeler_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("datagym", "eforce21", false);  // Then "<AssertPlaceHolder>"; }
isAdminOrLabeler(String projectOrganisation, String currentTaskLabelerId, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(projectOrganisation)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!orgs.containsKey(projectOrganisation)) { throw new ForbiddenException(); }  boolean hasAdminRole = orgs.get(projectOrganisation).equals(ADMIN_ROLE);  if (scopes.contains(TOKEN_SCOPE_TYPE)) { if (!hasAdminRole) { throw new ForbiddenException(); } } else { String userId = user.id();  if (!userId.equals(currentTaskLabelerId) && !hasAdminRole) { throw new ForbiddenException(); } }  return true; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
************************************
[+] input: getTodosByAssignee() {  TodoCollectionResponse todosCollection = (TodoCollectionResponse) (todoAPIContract .getTodosByAssignee("ABC1234", null) .getBody());  List<Todo> fetchedTodos = todosCollection.getTodos();  "<AssertPlaceHolder>";  Todo firstTodo = fetchedTodos.get(0);  assertEquals( "MyTodo 1", firstTodo.getName(), "The todo fetched should have a name of: MyTodo 1"); }
getTodosByAssignee( @ApiParam(required = true, value = "Assignee associated with the todo records") @PathVariable(value = "assignee") String assignee, HttpServletRequest request);  //-------------------------------------------------------------------------------------------- @ApiOperation( value = "Fetch a todo record by id", notes = "Use this resource to fetch a todo record from the repository.", tags = {"todo-service"}
[*] target: assertEquals(1, fetchedTodos.size())
[-] pred: org. junit. Assert. assertEquals ( 1, fetchedTodos. size ( ) )
************************************
************************************
[+] input: test() { NestedIterator testObject = new NestedIterator(null); assertFalse(testObject.hasNext()); "<AssertPlaceHolder>"; }
next() { // We can return an element only if it hasNext() returns true if (hasNext()) { return stack.pop().getInteger(); } return null; }
[*] target: assertNull(testObject.next())
[-] pred: org. junit. Assert. assertNull ( testObject. next() )
************************************
************************************
[+] input: testSend() {  //        // params //        final SendRequest sendRequest = new SendRequest("send", 1L, //                new MessageParam("13711111111", new HashMap<>(), new HashMap<>())); // //        // predict result //        final ProcessContext<SendTaskModel> processContext = new ProcessContext<>(sendRequest.getCode(), new SendTaskModel(), false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        final SendResponse expectedResult = new SendResponse(processContext.getResponse().getStatus(), processContext.getResponse().getMsg()); // // //        // stub //        Map<String, ProcessTemplate> templateConfig = new HashMap<>(4); //        processTemplate.setProcessList(Arrays.asList(businessProcess)); //        templateConfig.put(BusinessCode.COMMON_SEND.getCode(), processTemplate); // //        processController.setTemplateConfig(templateConfig); // // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.send(sendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
send(SendRequest sendRequest) { if (ObjectUtils.isEmpty(sendRequest)) { return new SendResponse(RespStatusEnum.CLIENT_BAD_PARAMETERS.getCode(), RespStatusEnum.CLIENT_BAD_PARAMETERS.getMsg(), null); }  SendTaskModel sendTaskModel = SendTaskModel.builder() .messageTemplateId(sendRequest.getMessageTemplateId()) .messageParamList(Collections.singletonList(sendRequest.getMessageParam())) .build();  ProcessContext context = ProcessContext.builder() .code(sendRequest.getCode()) .processModel(sendTaskModel) .needBreak(false) .response(BasicResultVO.success()).build();  ProcessContext process = processController.process(context);  return new SendResponse(process.getResponse().getStatus(), process.getResponse().getMsg(), (List<SimpleTaskInfo>) process.getResponse().getData()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testGetTargetCopy() { TreeNode original = new TreeNode(7); original.left = new TreeNode(4); original.right = new TreeNode(3); original.right.left = new TreeNode(6); original.right.right = new TreeNode(19); TreeNode target = original.right; TreeNode expected = testObject.getTargetCopy(original, original, target); "<AssertPlaceHolder>"; }
getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) { // Special case if (original == null) { return cloned; } // Queues to traverse through the tree in the BFS Queue<TreeNode> q1 = new LinkedList<>(); Queue<TreeNode> q2 = new LinkedList<>(); // Add root nodes to the queues q1.offer(original); q2.offer(cloned); // Loop until the queues are empty while (!q1.isEmpty() && !q2.isEmpty()) { // Get the nodes in the front of the queues TreeNode c1 = q1.remove(); TreeNode c2 = q2.remove(); // If the current front is equal to the target node, // we will return the corresponding node from the // clone tree if (c1 == target) { return c2; } // Add childrent nodes if they are available if (c1.left != null && c2.left != null) { q1.offer(c1.left); q2.offer(c2.left); } if (c1.right != null && c2.right != null) { q1.offer(c1.right); q2.offer(c2.right); } } return null; }
[*] target: assertEquals(expected, target)
[-] pred: org. junit. Assert. assertEquals ( expected, target )
************************************
************************************
[+] input: isAndroid_whenNotSetInConfig() { boolean isAndroid = OSUtil.isAndroid();  "<AssertPlaceHolder>"; }
isAndroid() { //If isAndroid is set programmatically if (android) return true;  String javaVendor = System.getProperty("java.vm.vendor");  if (javaVendor != null && "The Android Project".equalsIgnoreCase(javaVendor)) { return true; } else { return false; } }
[*] target: assertFalse(isAndroid)
[-] pred: org. junit. Assert. assertFalse ( isAndroid )
************************************
************************************
[+] input: readServiceVersionFromEnv() { final String version = "1.2.3"; final Map<String, String> env = new HashMap<>(); env.put("VERSION", version); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
get(final AttributeKey<T> key) { return inner.get(key); }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
************************************
[+] input: 관리자목록조회_성공() {  ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  webTestClient.method(HttpMethod.GET) .uri(API_URL+"?page=0&size=3&isUse=false") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].reserveItemName").isEqualTo(reserveItem.getReserveItemName()); }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: getSecret() { KeypairReader reader = new AwsSecretsKeypairReader( new AwsSecretsManagerResolver(secretsManagerClient), keypairName); KeyPair keyPair = reader.loadKeys().block(); "<AssertPlaceHolder>"; assertThat(Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded())) .isEqualTo(priv); }
loadKeys() throws KeyLoadException { return getSecret() .map(keys -> new KeyPair(loadPublicKey(keys), loadPrivateKey(keys))) .doOnSuccess(kp -> log.info(KEYPAIR_LOADED, secretName)) .onErrorMap(KeyLoadException::new) .switchIfEmpty(Mono.error(new KeyLoadException("Cannot load keys from secret " + secretName))) .doOnError(ex -> log.error(KEYPAIR_ERROR, secretName, ex.getMessage())); }
[*] target: assertNotNull(keyPair)
[-] pred: org. junit. Assert. assertNotNull ( keyPair )
************************************
************************************
[+] input: URISyntaxException { Path camelJsonRoute = Path.of( CamelRouteFileProcessorTest.class.getResource(".").toURI());  ParseCatalog<Step> camelParser = parseCatalog.getLocalFolder(camelJsonRoute); List<Step> steps = camelParser.parse().join().stream().filter(Objects::nonNull).collect(Collectors.toList());  "<AssertPlaceHolder>";  BiFunction<List<Step>, String, Step> fetchBrowse = (stepList, stepType) -> stepList.stream() .filter(step -> stepType.equals(step.getType())).findFirst().get();  Step browseComponentSink = fetchBrowse.apply(steps, Step.END); Step browseComponentSource = fetchBrowse.apply(steps, Step.START); Step browseComponentAction = fetchBrowse.apply(steps, Step.MIDDLE);  assertBrowseJsonHasBeenParsedCorrectly(browseComponentSink, Step.END, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentSource, Step.START, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentAction, Step.MIDDLE, false); }
getLocalFolder(final Path path) { ParseCatalog<Step> parseCatalog = new LocalFolderParseCatalog<>(path); parseCatalog.setFileVisitor(new CamelRouteFileProcessor()); return parseCatalog; }
[*] target: assertEquals(3, steps.size())
[-] pred: org. junit. Assert. assertEquals ( 3, steps. size ( ) )
************************************
************************************
[+] input: ensureFreeSpace_overLimitHappyDeletion() { File file1 = new File("oldest"); File file2 = new File("younger"); File file3 = new File("newest");  File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile); when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES + 1); when(fileUtils.getModificationTime(file1)).thenReturn(1000L); when(fileUtils.getModificationTime(file2)).thenReturn(1001L); when(fileUtils.getModificationTime(file3)).thenReturn(1002L); when(fileUtils.getFileSize(isA(File.class))).thenReturn(1L); when(spanStorage.getAllSpanFiles()).thenReturn(Stream.of(file3, file1, file2)); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace();  verify(fileUtils).safeDelete(file1); verify(fileUtils).safeDelete(file2); verify(fileUtils, never()).safeDelete(file3); "<AssertPlaceHolder>"; }
ensureFreeSpace() { tryFreeingSpace(); // play nice if disk is getting full return fileProvider.provideSpansDirectory().getFreeSpace() > limitInBytes(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: canBuildAnOnlyErrorDiffViewerFromJsonDiff() { final var jsonDiff = new UnMatchedPrimaryDiff(path, TextNode.valueOf("a"), TextNode.valueOf("b"));  final var result = OnlyErrorDiffViewer.from(jsonDiff);  final var expected = "The property "$.a" didn't match. Expected "a", Received: "b"\n"; "<AssertPlaceHolder>"; }
toString() { return stringBuilder.toString(); }
[*] target: assertEquals(expected, result.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, result. toString ( ) )
************************************
************************************
[+] input: 사용자목록조회_성공() {  ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  webTestClient.method(HttpMethod.GET) .uri("/api/v1/"+category.getCodeId()+"/reserve-items"+"?page=0&size=3&isUse=true") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].reserveItemName").isEqualTo(reserveItem.getReserveItemName()); }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: test() { MyQueue myQueue = new MyQueue(); myQueue.push(1); myQueue.push(2); assertEquals(1, myQueue.peek()); assertEquals(1, myQueue.pop()); "<AssertPlaceHolder>"; }
empty() { return stackOne.isEmpty() && stackTwo.isEmpty(); }
[*] target: assertFalse(myQueue.empty())
[-] pred: org. junit. Assert. assertFalse ( myQueue. empty() )
************************************
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_greater_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE + 1); "<AssertPlaceHolder>"; }
isEqualToLimitReached(final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isEqualBatchSize(batchSize) || isEqualMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
************************************
[+] input: shouldBuildPotentialStarter() { Message message = MessageFactory.potentialStarter(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
potentialStarter(String elementLocalName) { return INSTANCE.composeMessage( "potential-starter", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildInputOutputParameterIsNoExpression() { Message message = MessageFactory.inputOutputParameterIsNoExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutputParameterIsNoExpression( String elementLocalName, String parameterName) { return INSTANCE.composeMessage( "input-output-parameter-is-no-expression", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("parameterName", parameterName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildResultVariableBusinessRule() { Message message = MessageFactory.resultVariableBusinessRule(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
resultVariableBusinessRule( String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "result-variable-business-rule", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getChangeAddressFromAccountPrivateKey_byNetwork() { String accountPrivateKey = "a83aa0356397602d3da7648f139ca06be2465caef14ac4d795b17cdf13bd0f4fe9aac037f7e22335cd99495b963d54f21e8dae540112fe56243b287962da366fd4016f4cfb6d6baba1807621b4216d18581c38404c4768fe820204bef98ba706"; String changeAddress0 = "addr_test1qpqwpvc7946mqvl0mwwhqgmh6w4a6335mkuypjyg9fd5elsl5mr3vkp82y2kcwxxtu4zjcxvm80ttmx2hyeyjka4v8psy8w5eh";  Account account = new Account(Networks.testnet(), HexUtil.decodeHexString(accountPrivateKey));  assertNotNull(account.changeAddress()); assertNotNull(account.privateKeyBytes()); "<AssertPlaceHolder>"; }
changeAddress() { if (changeAddress == null || changeAddress.isEmpty()) { HdKeyPair changeKeyPair = getChangeKeyPair(); HdKeyPair stakeKeyPair = getStakeKeyPair();  Address address = AddressProvider.getBaseAddress(changeKeyPair.getPublicKey(), stakeKeyPair.getPublicKey(), network); changeAddress = address.toBech32(); }  return changeAddress; }
[*] target: assertEquals(changeAddress0, account.changeAddress())
[-] pred: org. junit. Assert. assertEquals ( changeAddress0, account. changeAddress ( ) )
************************************
************************************
[+] input: setSafeDistance() { int safeDistance = 1; SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); chain.setSafeDistance(safeDistance); Assertions."<AssertPlaceHolder>"; }
getSafeDistance() { return safeDistance; }
[*] target: assertEquals(safeDistance, chain.getSafeDistance())
[-] pred: org. junit. Assert. assertEquals ( safeDistance, chain. getSafeDistance() )
************************************
************************************
[+] input: testGetWorkflowNames10() { List<String> names = NextflowScript.getWorkflowNames("echo workflow ${value}"); "<AssertPlaceHolder>"; }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(messageKey, headers);  "<AssertPlaceHolder>"; }
computeRawURI( @RawUri String messageKey, Map<String, String> headers) throws JsonProcessingException {  if (headers.get(KafkaCustomHeaders.IMPORT_SCHEMA) == null) {  ConnectKeyPayload key = jsonMapper.readValue(messageKey, ConnectKeyPayload.class); checkValidKey(key); return JoyceURI.make(JoyceURI.Type.RAW, JoyceURI.Subtype.OTHER, key.getSource(), key.getUid()); }  return JoyceURI.createURI(messageKey) .orElseThrow(() -> new InvalidJoyceUriException(String.format("Uri [%s] is not a valid Joyce Uri", messageKey))); }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
************************************
[+] input: filterCompletedTasksOfOneUncompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; }
size() { return tasks.size(); }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
************************************
[+] input: isDatasetNameUnique_whenDatasetNameIsNotUnique_returnTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findByName(anyString())).thenReturn(java.util.Optional.empty());  boolean actual = datasetService.isDatasetNameUnique(DATASET_NAME);  //Then Assertions."<AssertPlaceHolder>"; verify(datasetRepositoryMock).findByName(anyString()); verify(datasetRepositoryMock, times(1)).findByName(anyString()); }
isDatasetNameUnique(String datasetName) { return datasetRepository .findByName(datasetName).isEmpty(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: NoSuchAlgorithmException { RSA rsa = new RSA(); "<AssertPlaceHolder>"; Base64.Encoder encoder = Base64.getEncoder(); System.out.println("publicKey:" + encoder.encodeToString(rsa.getPublicKey())); }
getPublicKey() { return publicKey.getEncoded(); }
[*] target: assertNotNull(rsa.getPublicKey())
[-] pred: org. junit. Assert. assertNotNull ( rsa. getPublicKey() )
************************************
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?keywordType=locationName&keyword=location&page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
save(@Valid @RequestBody LocationSaveRequestDto saveRequestDto) { return locationService.save(saveRequestDto); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
************************************
[+] input: test_buffer_notNull() { InMemoryBufferFactory inMemoryBufferFactory = new InMemoryBufferFactory(); Assertions.assertNotNull(inMemoryBufferFactory); Buffer buffer = inMemoryBufferFactory.getBuffer(null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(Buffer.class)); }
getBuffer(LambdaClient lambdaClient, String functionName, String invocationType){ return new InMemoryBuffer(lambdaClient, functionName, invocationType); }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: testUpdateFinishTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid11") .name("test_step11") .jobId(2L) .lastStepId(5L) .status(StepStatus.CREATED) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateFinishedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(2L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getFinishedTime().getTime()); }
findByJobId(@Param("jobId") Long jobId);  @Select("select id, step_uuid as uuid, step_name as name, job_id, last_step_id, step_status as status," + " finished_time, started_time, created_time, modified_time, concurrency, task_num, pool_info," + " origin_json from step" + " where id = #{id}
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
************************************
[+] input: NoSuchFieldException { Field field = Person.class.getField("name"); FastField ff = FastField.create(field); "<AssertPlaceHolder>"; }
toString() { return field.toString(); }
[*] target: assertEquals(field.toString(), ff.toString())
[-] pred: org. junit. Assert. assertEquals ( field. toString ( ), ff. toString ( ) )
************************************
************************************
[+] input: testMultiplica2() { int algo = 9; int res = Calculadora.multiplica(algo, 1); "<AssertPlaceHolder>"; }
multiplica(int a, int b) { return a * b; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
************************************
[+] input: incrementAndGet() { DefaultIdSegment segment = new DefaultIdSegment(1, 1); long id = segment.incrementAndGet(); Assertions."<AssertPlaceHolder>"; }
incrementAndGet() { if (isOverflow()) { return SEQUENCE_OVERFLOW; }  final long nextSeq = S.incrementAndGet(this);  if (isOverflow(nextSeq)) { return SEQUENCE_OVERFLOW; } GroupedAccessor.setIfNotNever(group()); return nextSeq; }
[*] target: assertEquals(1, id)
[-] pred: org. junit. Assert. assertEquals ( 1, id )
************************************
************************************
[+] input: canSetScreenName() { InMemorySpanExporter testExporter = InMemorySpanExporter.create(); SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("us0") .setRumAccessToken("secret!") .setApplicationName("test") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper);  RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, new AppStartupTimer()) { @Override SpanExporter getCoreSpanExporter() { return testExporter; } };  SplunkRum splunkRum = testInitializer.initialize(mainLooper); splunkRum.experimentalSetScreenName("screen-1"); splunkRum.experimentalSetScreenName("screen-2");  // pause and resume splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName("screen-2", "Resumed");  // exit the view with explicit screen names // both last screen name and second last screen name have to be cleared, hence the doubled // call splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName(null);  splunkRum.flushSpans(); List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>";  assertEquals("Created", spans.get(0).getName()); assertEquals("screen-1", spans.get(0).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(0).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Created", spans.get(1).getName()); assertEquals("screen-2", spans.get(1).getAttributes().get(SCREEN_NAME_KEY)); assertEquals("screen-1", spans.get(1).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Resumed", spans.get(2).getName()); assertEquals("screen-2", spans.get(2).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(2).getAttributes().get(LAST_SCREEN_NAME_KEY)); }
initialize(Looper mainLooper) { VisibleScreenTracker visibleScreenTracker = new VisibleScreenTracker();  initializationEvents.begin();  OtelRumConfig config = new OtelRumConfig(); GlobalAttributesSupplier globalAttributeSupplier = new GlobalAttributesSupplier(builder.globalAttributes); config.setGlobalAttributes(globalAttributeSupplier); if (!builder.isNetworkMonitorEnabled()) { config.disableNetworkChangeMonitoring(); }  config.disableScreenAttributes(); OpenTelemetryRumBuilder otelRumBuilder = OpenTelemetryRum.builder(application, config);  otelRumBuilder.mergeResource(createSplunkResource()); initializationEvents.emit("resourceInitialized");  CurrentNetworkProvider currentNetworkProvider = CurrentNetworkProvider.createAndStart(application); otelRumBuilder.setCurrentNetworkProvider(currentNetworkProvider); initializationEvents.emit("connectionUtilInitialized");  // TODO: How truly important is the order of these span processors? The location of event // generation should probably not be altered...  // Add batch span processor otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { SpanExporter zipkinExporter = buildFilteringExporter(currentNetworkProvider, visibleScreenTracker); initializationEvents.emit("exporterInitialized");  BatchSpanProcessor batchSpanProcessor = BatchSpanProcessor.builder(zipkinExporter).build(); initializationEvents.emit("batchSpanProcessorInitialized"); return tracerProviderBuilder.addSpanProcessor(batchSpanProcessor); });  // Inhibit the upstream exporter because we add our own BatchSpanProcessor otelRumBuilder.addSpanExporterCustomizer(x -> new NoOpSpanExporter());  // Set span limits otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.setSpanLimits( SpanLimits.builder() .setMaxAttributeValueLength(MAX_ATTRIBUTE_LENGTH) .build()));  // Set up the sampler, if enabled // TODO: Make this better... // This holder is required because we cannot reasonably get the session id until after // OpenTelemetryRum has been created. So this is spackled into place below. AtomicReference<Supplier<String>> sessionSupplierHolder = new AtomicReference<>(() -> null); if (builder.sessionBasedSamplerEnabled) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { Sampler sampler = UInt32QuadXorTraceIdRatioSampler.create( builder.sessionBasedSamplerRatio, () -> { Supplier<String> supplier = sessionSupplierHolder.get(); return supplier == null ? null : supplier.get(); }); return tracerProviderBuilder.setSampler(sampler); }); }  // Wire up the logging exporter, if enabled. if (builder.isDebugEnabled()) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { tracerProviderBuilder.addSpanProcessor( SimpleSpanProcessor.create( builder.decorateWithSpanFilter( LoggingSpanExporter.create()))); initializationEvents.emit("debugSpanExporterInitialized"); return tracerProviderBuilder; }); }  // Add final event showing tracer provider init finished otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { initializationEvents.emit("tracerProviderInitialized"); return tracerProviderBuilder; });  // install the log->span bridge LogToSpanBridge logBridge = new LogToSpanBridge(); otelRumBuilder.addLoggerProviderCustomizer( (loggerProviderBuilder, app) -> loggerProviderBuilder.addLogRecordProcessor(logBridge)); // make sure the TracerProvider gets set as the very first thing, before any other // instrumentations otelRumBuilder.addInstrumentation( instrumentedApplication -> logBridge.setTracerProvider( instrumentedApplication.getOpenTelemetrySdk().getTracerProvider()));  if (builder.isAnrDetectionEnabled()) { installAnrDetector(otelRumBuilder, mainLooper); } if (builder.isSlowRenderingDetectionEnabled()) { installSlowRenderingDetector(otelRumBuilder); } if (builder.isCrashReportingEnabled()) { installCrashReporter(otelRumBuilder); }  SettableScreenAttributesAppender screenAttributesAppender = new SettableScreenAttributesAppender(visibleScreenTracker); otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.addSpanProcessor(screenAttributesAppender));  // Lifecycle events instrumentation are always installed. installLifecycleInstrumentations(otelRumBuilder, visibleScreenTracker);  OpenTelemetryRum openTelemetryRum = otelRumBuilder.build();  sessionSupplierHolder.set(openTelemetryRum::getRumSessionId);  initializationEvents.recordInitializationSpans( builder.getConfigFlags(), openTelemetryRum.getOpenTelemetry().getTracer(RUM_TRACER_NAME));  return new SplunkRum(openTelemetryRum, globalAttributeSupplier, screenAttributesAppender); }
[*] target: assertEquals(3, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 3, spans. size ( ) )
************************************
************************************
[+] input: buildCache() { Cache<String> cache = CacheBuilder.newBuilder().build(String.class); Assertions.assertNotNull(cache);  var anotherCache = CacheBuilder.newBuilder().expires(10).maximumSize(1000).build(String.class); Assertions."<AssertPlaceHolder>"; }
build(Class<T> tClass){ assert Objects.nonNull(tClass);  Class<Cache<T>> cacheClass = (Class<Cache<T>>) queryCacheExists(); try { Constructor<Cache<T>> ct = cacheClass.getConstructor(Long.TYPE,Long.TYPE); return ct.newInstance(maximumSize,expires); } catch (NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) { throw new CacheNotExistsException(); } }
[*] target: assertNotNull(anotherCache)
[-] pred: org. junit. Assert. assertNotNull ( anotherCache )
************************************
************************************
[+] input: testCreateLazyFilterFromMissingFile() { UnmodifiableBloomFilter<String> missingFileFilter = UnmodifiableBloomFilter.createLazyFilterFromFile("src/test/resources/fake-file-not-found"); // expect to initialize on demand assertFalse(missingFileFilter.isInitialized()); assertFalse(missingFileFilter.mightContain("test123")); assertTrue(missingFileFilter.isInitialized()); // file not found results in disabled instance "<AssertPlaceHolder>"; }
isDisabled() { return isInitialized && cache == null; }
[*] target: assertTrue(missingFileFilter.isDisabled())
[-] pred: org. junit. Assert. assertTrue ( missingFileFilter. isDisabled() )
************************************
************************************
[+] input: visualizeGraphTest() { final var graph = new DirectedAcyclicGraph<>(); graph.addVertex("A"); graph.addVertex("B"); graph.addVertex("C"); graph.addVertex("D"); graph.addEdge("A", "B"); graph.addEdge("A", "C"); graph.addEdge("B", "D");  final var visualizer = new HorizontalGraphVisualizer<>(); final var config = new GraphLayoutConfig<>() { @NotNull @Override public Dimension getSize(@NotNull Object vertex) { return new Dimension(20, 10); }  @NotNull @Override public Dimension getSpacing() { return new Dimension(5, 5); } };  final var layouts = visualizer.create(graph, config); final var expected = List.of( new DefaultGraphLayout<>("A", new Point(0, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("B", new Point(25, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("C", new Point(25, 15), new Dimension(20, 10)), new DefaultGraphLayout<>("D", new Point(50, 0), new Dimension(20, 10)) );  Assertions."<AssertPlaceHolder>"; }
create(@NotNull Graph<V> graph, @NotNull C config);
[*] target: assertEquals(expected, layouts)
[-] pred: org. junit. Assert. assertEquals ( expected, layouts )
************************************
************************************
[+] input: IOException { Mockito.reset(fileUtils); Mockito.reset(delegate); when(fileUtils.readFileCompletely(file)).thenThrow(new IOException("boom")); FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verifyNoMoreInteractions(bandwidthTracker); verifyNoMoreInteractions(delegate); }
handleFileOnDisk(File file) { Log.d(LOG_TAG, "Reading file content for ingest: " + file); List<byte[]> encodedSpans = readFileCompletely(file); if (encodedSpans.isEmpty()) { fileUtils.safeDelete(file); return false; }  boolean sentOk = attemptSend(file, encodedSpans); if (!sentOk) { retryTracker.trackFailure(file); } if (sentOk || retryTracker.exceededRetries(file)) { retryTracker.clear(file); fileUtils.safeDelete(file); } return sentOk; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: setSpinThreshold() { int spinThreshold = 100; MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); clockBackwards.setSpinThreshold(spinThreshold); Assertions."<AssertPlaceHolder>"; }
getSpinThreshold() { return spinThreshold; }
[*] target: assertEquals(spinThreshold, clockBackwards.getSpinThreshold())
[-] pred: org. junit. Assert. assertEquals ( spinThreshold, clockBackwards. getSpinThreshold() )
************************************
************************************
[+] input: shouldCreateCommandForShortChain() { final String expectedCommand = "certbot certonly --preferred-chain "ISRG Root X1" " + "--agree-tos --email admin@example.com -n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "short", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
createCommand(String remoteCommand, String email, String chain, String domainName, String publicServiceHostName, String[] virtualHosts) {  this.stringBuilder = new StringBuilder();  stringBuilder.append(remoteCommand);  if (Objects.equals(chain, CHAIN_TYPE)) { addSubCommand(" ", CHAIN, SHORT_CHAIN); }  addSubCommand(" ", AGREEMENT, EMAIL, email, NON_INTERACTIVELY, KEEP, WEBROOT, WEBROOT_PATH, CERT_NAME, domainName);  addSubCommand(D, publicServiceHostName); addSubCommand(D, virtualHosts);  return stringBuilder.toString(); }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
************************************
[+] input: add() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: dataIntegrityViolationException() { ResponseEntity<StandardError> response = ecxeptionHandler .dataIntegrityViolationException( new DataIntegratyViolationException(E_MAIL_JA_CADASTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(E_MAIL_JA_CADASTRADO, response.getBody().getError()); assertEquals(400, response.getBody().getStatus()); }
dataIntegrityViolationException(DataIntegratyViolationException ex, HttpServletRequest request) { StandardError error = new StandardError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(), ex.getMessage(), request.getRequestURI()); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testBuid() { MensagemDTO mensagemDTO = new MensagemDTO(); Mensagem build = mensagemDTO.build(); "<AssertPlaceHolder>"; assertTrue(build instanceof Mensagem); }
build() { return new Mensagem(); }
[*] target: assertNotNull(build)
[-] pred: org. junit. Assert. assertNotNull ( build )
************************************
************************************
[+] input: testDeleteMenu_success() { // mock 数据 MenuDO menuDO = randomPojo(MenuDO.class); menuMapper.insert(menuDO); // 准备参数 Long id = menuDO.getId();  // 调用 menuService.deleteMenu(id); // 断言 MenuDO dbMenuDO = menuMapper.selectById(id); "<AssertPlaceHolder>"; verify(permissionService).processMenuDeleted(id); }
deleteMenu(Long id) { // 校验是否还有子菜单 if (menuMapper.selectCountByParentId(id) > 0) { throw exception(MENU_EXISTS_CHILDREN); } // 校验删除的菜单是否存在 if (menuMapper.selectById(id) == null) { throw exception(MENU_NOT_EXISTS); } // 标记删除 menuMapper.deleteById(id); // 删除授予给角色的权限 permissionService.processMenuDeleted(id); }
[*] target: assertNull(dbMenuDO)
[-] pred: org. junit. Assert. assertNull ( dbMenuDO )
************************************
************************************
[+] input: testContainsNameShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsName(KEY_NAME_1);  //then Assertions."<AssertPlaceHolder>"; }
containsName(@NonNull final String name) { return entities.containsKey(name); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: convertToDatabaseColumnNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(AnimalTipo tipo) { if(tipo == null) { return null; } return tipo.getDescricao(); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: checkIfUserIsAdmin_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
checkIfUserIsAdmin(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); } return orgs.get(owner).equals(ADMIN_ROLE); }  return true; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
************************************
[+] input: itShouldHaveExpectedValuesForParameterizedConstructor() { ChatMessage testMessage = new ChatMessage("sender", "recipient", "content", true); "<AssertPlaceHolder>"; assertNotNull(testMessage.getTimestamp()); assertTrue(testMessage.isAction()); assertEquals(testMessage.getSender(), "sender"); assertEquals(testMessage.getRecipient(), "recipient"); assertEquals(testMessage.getContent(), "content"); JSONObject jso = testMessage.toJSON(); assertNotNull(jso); String ep1 = "{"msg":"content","for":{"color":"black","name":"recipient","id":"recipient"},"time":"; String ep2 = Long.toString(testMessage.getDate().getTime() / 1000); String ep3 = ","type":"private","who":{"color":"black","name":"sender","id":"sender"}}"; assertEquals(jso.toString(), ep1 + ep2 + ep3); }
getDate() { return this.date; }
[*] target: assertNotNull(testMessage.getDate())
[-] pred: org. junit. Assert. assertNotNull ( testMessage. getDate() )
************************************
************************************
[+] input: testSuma1() { int res = Calculadora.suma(2, 3); "<AssertPlaceHolder>"; }
suma(int a, int b) { return a + b; }
[*] target: assertEquals(5, res)
[-] pred: org. junit. Assert. assertEquals ( 5, res )
************************************
************************************
[+] input: getName_ofCtorValue() { final var expected = "A"; final var obj = new ActivityType(expected); final var actual = obj.getName(); "<AssertPlaceHolder>"; }
getName() { return this.name; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: serialize_WithEmptyRecord_ReturnsEmptyJson() { // Test for serializing an empty record GenericRecord record = new GenericData.Record(SCHEMA); String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: shouldBuildScriptFormatMissing() { Message message = MessageFactory.scriptFormatMissing(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptFormatMissing() { return INSTANCE.staticMessage("script-format-missing"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: setType() { SegmentIdProperties.Distributor.Type type = SegmentIdProperties.Distributor.Type.JDBC; SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); distributor.setType(type); Assertions."<AssertPlaceHolder>"; }
getType() { return type; }
[*] target: assertEquals(type, distributor.getType())
[-] pred: org. junit. Assert. assertEquals ( type, distributor. getType() )
************************************
************************************
[+] input: testGetWorkflowName2() { List<String> names = NextflowScript.getWorkflowNames("\n   workflow process1\n{some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: testGetProcessName4() { List<String> names = NextflowScript .getProcesseNames("\n   process process1\n{some content }\n   process process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
public static List<String> getProcesseNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*process\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { names.add(m.group(1).trim()); }  return names; }  public List<String> getFunctions() { return functions; }  public static List<String> getFunctionNames(String content) {  List<String> names = new Vector<String>();  String patternFunctionName = "(?i)^\\s*def\\s*(.+)(\\s*\\(|\\()";  Pattern r = Pattern.compile(patternFunctionName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { names.add(m.group(1).trim()); }  return names; }  public List<String> getWorkflows() { return workflows; }  public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
************************************
[+] input: SQLException { try (NebulaConnection connection = (NebulaConnection) DriverManager.getConnection(RunMeBeforeTest.URL, RunMeBeforeTest.USERNAME, RunMeBeforeTest.PASSWORD)) { "<AssertPlaceHolder>"; } }
getMetaData() throws SQLException { return new NebulaDatabaseMetaData(this); }
[*] target: assertNotNull(connection.getMetaData())
[-] pred: org. junit. Assert. assertNotNull ( connection. getMetaData() )
************************************
************************************
[+] input: getQuantidadeCaracteresEspeciais_test01() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("Felix"); "<AssertPlaceHolder>"; }
getQuantidadeCaracteresEspeciais(String str) { return 0; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
************************************
[+] input: shouldBuildMap() { Message message = MessageFactory.map(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
map() { return INSTANCE.emptyMessage(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test02() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("Felix Gilioli"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(10, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 10, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: testAddToAcknowledgementSetFromOriginEvent() { Map<String, Object> data = Map.of("k1","v1"); EventMetadata eventMetadata = mock(EventMetadata.class); Event originRecordEvent = JacksonEvent.builder() .withEventMetadata(eventMetadata) .withEventType("event") .withData(data) .build(); Event spyEvent = spy(originRecordEvent);  DefaultEventHandle mockEventHandle = mock(DefaultEventHandle.class); when(spyEvent.getEventHandle()).thenReturn(mockEventHandle);  Record record = splitEventProcessor .createNewRecordFromEvent(spyEvent, "v1");  Event recordEvent = (Event) record.getData(); splitEventProcessor.addToAcknowledgementSetFromOriginEvent(recordEvent, spyEvent);  DefaultEventHandle spyEventHandle = (DefaultEventHandle) spyEvent.getEventHandle(); // Verify that the add method is called on the acknowledgement set verify(spyEventHandle).getAcknowledgementSet();  AcknowledgementSet spyAckSet = spyEventHandle.getAcknowledgementSet(); DefaultEventHandle eventHandle = (DefaultEventHandle) recordEvent.getEventHandle(); AcknowledgementSet ackSet1 = eventHandle.getAcknowledgementSet();  "<AssertPlaceHolder>"; }
addToAcknowledgementSetFromOriginEvent(Event recordEvent, Event originRecordEvent) { DefaultEventHandle eventHandle = (DefaultEventHandle) originRecordEvent.getEventHandle(); if (eventHandle != null && eventHandle.getAcknowledgementSet() != null) { eventHandle.getAcknowledgementSet().add(recordEvent); } }
[*] target: assertEquals(spyAckSet, ackSet1)
[-] pred: org. junit. Assert. assertEquals ( spyAckSet, ackSet1 )
************************************
************************************
[+] input: registerLogicalTypeConverter_WithLogicalType_ConvertsValueUsingConverter() { GenericRecord record = new GenericData.Record(SCHEMA); record.put("lastUpdated", Instant.ofEpochMilli(1685483879));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": 1970-01-20T12:11:23.879Z, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: Exception { String pluginName = "test-plugin";  // Load the actual resource InputStream inputStream = transformersFactory.getPluginTemplateFileStream(pluginName);  "<AssertPlaceHolder>"; inputStream.close(); }
getPluginTemplateFileStream(String pluginName) { if (pluginName == null || pluginName.isEmpty()) { throw new RuntimeException("Transformation plugin not found"); }  // Construct the expected file name String templateFileName = pluginName + TEMPLATE_FILE_NAME_PATTERN;  // Use the ClassLoader to find the template file on the classpath ClassLoader classLoader = getClass().getClassLoader(); URL templateURL = classLoader.getResource(TEMPLATES_PATH + templateFileName);  if (templateURL == null) { throw new RuntimeException("Template file not found for plugin: " + pluginName); }  try { // Convert the URL to a URI, then to a Path to read the file Path templatePath; try { templatePath = Paths.get(templateURL.toURI()); } catch (FileSystemNotFoundException e) { // Handle the case where the file system is not accessible (e.g., in a JAR) FileSystem fileSystem = FileSystems.newFileSystem(templateURL.toURI(), Collections.emptyMap()); templatePath = fileSystem.getPath(TEMPLATES_PATH + templateFileName); }  // Return an InputStream for the found file return Files.newInputStream(templatePath);  } catch (IOException | URISyntaxException e) { throw new RuntimeException("Failed to load template file for plugin: " + pluginName, e); } }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
************************************
[+] input: testNewerThanPatch() { SemanticVersion version = new SemanticVersion(1, 2, 5); SemanticVersion version2 = new SemanticVersion(1, 2, 4);  assertTrue(version.isNewerThan(version2)); "<AssertPlaceHolder>"; }
isNewerThan(@Nonnull Version version) { if (isSimilar(version)) { SemanticVersion semver = (SemanticVersion) version; int major = semver.getMajorVersion();  if (getMajorVersion() > major) { return true; } else if (major > getMajorVersion()) { return false; }  int minor = semver.getMinorVersion();  if (getMinorVersion() > minor) { return true; } else if (minor > getMinorVersion()) { return false; }  return getPatchVersion() > semver.getPatchVersion(); } else { throw new IncomparableVersionsException(this, version); } }
[*] target: assertFalse(version2.isNewerThan(version))
[-] pred: org. junit. Assert. assertFalse ( version2. isNewerThan ( version ) )
************************************
************************************
[+] input: scanAnnotationDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.annotation.entity"}, AnnotationDefinitionParser.INSTANCE, registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(LongIdEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(MissingIdGenEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(MissingIdGenEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(PrimitiveLongIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(PrimitiveLongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(IntIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(IntIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(StringIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(StringIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(ChildEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass()); }
scan() { if (log.isInfoEnabled()) { log.info("Scan basePackages:{}.", Arrays.toString(basePackages)); } try { ClassLoader classLoader = getClass().getClassLoader(); ClassPath classPath = ClassPath.from(classLoader); for (String basePackage : basePackages) {  ImmutableSet<ClassPath.ClassInfo> classInfos = classPath.getTopLevelClassesRecursive(basePackage); for (ClassPath.ClassInfo classInfo : classInfos) { Class<?> clazz = classLoader.loadClass(classInfo.getName()); if (clazz.isInterface()) { continue; } CosIdAccessor cosIdAccessor = cosIdAccessorParser.parse(clazz); cosIdAccessorRegistry.register(clazz, cosIdAccessor); } } } catch (IOException | ClassNotFoundException e) { throw new CosIdException(e.getMessage(), e); } }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
************************************
[+] input: WxErrorException { // 准备参数 Integer userType = randomPojo(UserTypeEnum.class).getValue(); String url = randomString(); // mock 方法 WxJsapiSignature signature = randomPojo(WxJsapiSignature.class); when(wxMpService.createJsapiSignature(eq(url))).thenReturn(signature);  // 调用 WxJsapiSignature result = socialClientService.createWxMpJsapiSignature(userType, url); // 断言 "<AssertPlaceHolder>"; }
createWxMpJsapiSignature(Integer userType, String url) { WxMpService service = getWxMpService(userType); return service.createJsapiSignature(url); }
[*] target: assertSame(signature, result)
[-] pred: org. junit. Assert. assertSame ( signature, result )
************************************
************************************
[+] input: testManifestNoChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls");  Properties properties = new Properties(); properties.put(tempFolder.relativize(bar.toPath()).toString(), "7cada13b5b8770e46f7a69e8856abdb9"); properties.put(tempFolder.relativize(foo.toPath()).toString(), "61bbd2d58c22dfb3c664829ad116f7e9");  File manifest = tempFolder.resolve("manifest.props").toFile(); try (FileOutputStream fis = new FileOutputStream(manifest)) { properties.store(fis, "Schema Manifest"); }  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions."<AssertPlaceHolder>"; }
getChangedFiles() { Set<File> changed = new HashSet<>(); OrderedProperties manifest = loadManifest(); for (File file : files) { String oldChecksum = manifest.getProperty(relativizeToProject(file)); if (oldChecksum == null) { log.info("{} is new, will generate code", file.getName()); } else if (!oldChecksum.equals(generateChecksum(file))) { log.info("{} has changed, will generate code", file.getName()); } else { log.info("{} has not changed, will not generate code", file.getName()); continue; } changed.add(file); } return changed; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
************************************
[+] input: testManifestRequiresChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls"); File manifest = tempFolder.resolve("manifest.props").toFile();  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().contains(foo));  sfm.syncManifest(); Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions.assertTrue(sfm.getChangedFiles().isEmpty()); sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions."<AssertPlaceHolder>"; }
getChangedFiles() { Set<File> changed = new HashSet<>(); OrderedProperties manifest = loadManifest(); for (File file : files) { String oldChecksum = manifest.getProperty(relativizeToProject(file)); if (oldChecksum == null) { log.info("{} is new, will generate code", file.getName()); } else if (!oldChecksum.equals(generateChecksum(file))) { log.info("{} has changed, will generate code", file.getName()); } else { log.info("{} has not changed, will not generate code", file.getName()); continue; } changed.add(file); } return changed; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
************************************
[+] input: testDense() { short[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  ShortSparseNdArray instance = new ShortSparseNdArray(indices, values, DimensionalSpace.create(shape)); ShortNdArray denseInstance = instance.toDense(); ShortNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
toDense() { ShortDataBuffer dataBuffer = DataBuffers.ofShorts(shape().size()); copyTo(dataBuffer); return NdArrays.wrap(shape(), dataBuffer); }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("tag "Hello World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test1".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); assertTrue(tag.isListed());  // Send one more message to verify that no exception occurs ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test2".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
isListed() { return isListed; }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
************************************
[+] input: setPrefetchWorker() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); chain.setPrefetchWorker(prefetchWorker); Assertions."<AssertPlaceHolder>"; }
getPrefetchWorker() { return prefetchWorker; }
[*] target: assertEquals(prefetchWorker, chain.getPrefetchWorker())
[-] pred: org. junit. Assert. assertEquals ( prefetchWorker, chain. getPrefetchWorker() )
************************************
************************************
[+] input: testCreateProject_success() { // 准备参数 GoViewProjectCreateReqVO reqVO = randomPojo(GoViewProjectCreateReqVO.class);  // 调用 Long goViewProjectId = goViewProjectService.createProject(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 GoViewProjectDO goViewProject = goViewProjectMapper.selectById(goViewProjectId); assertPojoEquals(reqVO, goViewProject); }
createProject(GoViewProjectCreateReqVO createReqVO) { // 插入 GoViewProjectDO goViewProject = GoViewProjectConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.DISABLE.getStatus()); goViewProjectMapper.insert(goViewProject); // 返回 return goViewProject.getId(); }
[*] target: assertNotNull(goViewProjectId)
[-] pred: org. junit. Assert. assertNotNull ( goViewProjectId )
************************************
************************************
[+] input: getQuantidadeLetrasMaiusculas_test07() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("felix"); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMaiusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
************************************
[+] input: setEnabled() { CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setEnabled(false); Assertions."<AssertPlaceHolder>"; }
isEnabled() { return enabled; }
[*] target: assertFalse(properties.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( properties. isEnabled() )
************************************
************************************
[+] input: testApplySimpleObject() { SimpleObject that = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  SimpleObject other = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(that, other); "<AssertPlaceHolder>"; }
apply(Object that, Object other) { if (Objects.equals(that, other)) { return true; } if (that == null || other == null) { return false; } try { BeanInfo thatBean = Introspector.getBeanInfo(that.getClass()); BeanInfo otherBean = Introspector.getBeanInfo(other.getClass()); Map<String, PropertyDescriptor> otherBeanPropertyMap = Arrays.stream(otherBean.getPropertyDescriptors()) .collect(Collectors.toMap(PropertyDescriptor::getName, p -> p)); for (PropertyDescriptor thatProperty : thatBean.getPropertyDescriptors()) { if (thatProperty.getReadMethod() == null || thatProperty.getWriteMethod() == null) { continue; } if (ignoreFields.contains(thatProperty.getName())) { continue; } if (!otherBeanPropertyMap.containsKey(thatProperty.getName())) { return false; } if (Collection.class.isAssignableFrom(thatProperty.getPropertyType())) { Collection thatValue = (Collection) thatProperty.getReadMethod().invoke(that); Collection otherValue = (Collection) otherBeanPropertyMap.get(thatProperty.getName()) .getReadMethod().invoke(other); return handleCollection(thatValue, otherValue); } if (!thatProperty.getPropertyType().isPrimitive()) { Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!apply(thatValue, otherValue)) { return false; } } Object thatValue = thatProperty.getReadMethod().invoke(that); Object otherValue = otherBeanPropertyMap.get(thatProperty.getName()).getReadMethod().invoke(other); if (!Objects.equals(thatValue, otherValue)) { return false; } } } catch (IntrospectionException | IllegalAccessException | InvocationTargetException e) { log.error("Error comparing objects", e); throw new RuntimeException(e); } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); Message msg = mbox.addMessage( null, new ParsedMessage("From: from1@zimbra.com\r\nTo: to1@zimbra.com".getBytes(), false), opt, null);  Volume vol = VolumeManager.getInstance().getCurrentMessageVolume();  DbVolumeBlobs.addBlobReference(conn, mbox, vol, msg);  String digest = msg.getBlob().getDigest(); String path = msg.getBlob().getLocalBlob().getFile().getPath(); List<BlobReference> blobs = DbVolumeBlobs.getBlobReferences(conn, digest, vol); "<AssertPlaceHolder>"; BlobReference ref = blobs.get(0);  assertEquals(path, getPath(ref)); }
getBlobReferences(DbConnection conn, String digest, Volume volume) throws ServiceException { PreparedStatement stmt = null; ResultSet rs = null; try { stmt = conn.prepareStatement(SELECT_BLOB_REFS + CN_DIGEST + " = ? AND " + CN_VOLUME_ID + " = ? ORDER BY "+ CN_DIGEST + " ASC"); int pos = 1; stmt.setString(pos++, digest); stmt.setShort(pos++, volume.getId()); rs = stmt.executeQuery(); return fillBlobReferences(rs); } catch (SQLException e) { throw ServiceException.FAILURE("unable to query blob references", e); } finally { DbPool.closeResults(rs); DbPool.closeStatement(stmt); } }
[*] target: assertEquals(1, blobs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, blobs. size ( ) )
************************************
************************************
[+] input: create() { GroupCreateRequest request = new GroupCreateRequest(); request.setName(UUID.randomUUID().toString()); request.setDescription("group service test"); request.setGroupOwnerUserIds(List.of(1, 2, 3)); Integer groupId = groupService.create(request); "<AssertPlaceHolder>";  List<UserRole> roles = userRoleDao.selectByUserIds(List.of(1, 2, 3)) .stream() .filter(r -> Objects.equals(r.getGroupId(), groupId) && r.getRole().equals("GROUP_OWNER")) .collect(Collectors.toList()); assertEquals(3, roles.size()); }
create(GroupCreateRequest request) { Group group = groupConverter.of(request); Integer groupId = groupDao.insertAndReturnId(group); List<UserRole> roles = request.getGroupOwnerUserIds() .stream() .map(userId -> { UserRole role = new UserRole(); role.setUserId(userId); role.setRole(GROUP_OWNER); role.setGroupId(groupId); return role; }) .collect(Collectors.toList()); userRoleDao.batchInsert(roles); eventPublisher.publish(new GroupCreated(groupId, request.getName(), request.getDescription())); return groupId; }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
************************************
[+] input: fromOptionValue_items_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("items"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("ITEMS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: getNamingService() { NacosNamingService namingService = namingServiceConfig.getNamingService(); "<AssertPlaceHolder>"; }
getNamingService() { logger.info("注入 Nacos ({}) 名称服务", webSocketProperties.getNacosServerAddress()); NacosNamingService namingService = null; Properties properties = new Properties(); properties.put("namespace", webSocketProperties.getNacosNamespace()); properties.put("serverAddr", webSocketProperties.getNacosServerAddress()); try { namingService = new NacosNamingService(properties); } catch (NacosException e) { logger.error("NacosNamingService 创建异常: {}", e.toString()); } return namingService; }
[*] target: assertNotNull(namingService)
[-] pred: org. junit. Assert. assertNotNull ( namingService )
************************************
************************************
[+] input: shouldBuildScriptJobType() { Message message = MessageFactory.scriptJobType(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptJobType(String elementLocalName, String jobType) { return INSTANCE.composeMessage( "script-job-type", ContextBuilder.builder() .context(elementTransformedPrefix(elementLocalName)) .entry("jobType", jobType) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testProcessUserDeleted() { // 准备参数 Long userId = randomLongId(); // mock 数据 UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setUserId(userId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02);  // 调用 permissionService.processUserDeleted(userId); // 断言数据 List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
processUserDeleted(Long userId);
[*] target: assertEquals(1, dbUserRoles.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbUserRoles. size ( ) )
************************************
************************************
[+] input: testHasTerminated() { when(priceDiffConditionToAbort.test(anyDouble())).thenReturn(true); tradeIntent.onTick(tick); "<AssertPlaceHolder>"; }
hasTerminated() { return terminated || accVol >= volume; }
[*] target: assertTrue(tradeIntent.hasTerminated())
[-] pred: org. junit. Assert. assertTrue ( tradeIntent. hasTerminated() )
************************************
************************************
[+] input: serialize_WithArray_ReturnsCorrectJson() { // Test for serializing an array GenericRecord record = new GenericData.Record(SCHEMA); record.put("alternateIds", new GenericData.Array<>(SCHEMA.getField("alternateIds").schema(), java.util.Arrays.asList("one", "two", "three")));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": ["one", "two", "three"], "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
serialize(GenericRecord value) { StringBuilder buffer = new StringBuilder(); serialize(value, buffer, new IdentityHashMap<>(128) ); String result = buffer.toString(); return result; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
************************************
[+] input: getSessionTimeout() { Duration sessionTimeout = Duration.ofSeconds(60); CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); Assertions."<AssertPlaceHolder>"; }
getSessionTimeout() { return sessionTimeout; }
[*] target: assertEquals(sessionTimeout, properties.getSessionTimeout())
[-] pred: org. junit. Assert. assertEquals ( sessionTimeout, properties. getSessionTimeout() )
************************************
************************************
[+] input: shouldBuildExecutionListener() { Message message = MessageFactory.executionListener("start", "${myExecutionListener}"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Listener at 'start' with implementation '${myExecutionListener}' cannot be transformed. Execution Listeners do not exist in Zeebe."); }
executionListener(String event, String implementation) { return INSTANCE.composeMessage( "execution-listener", ContextBuilder.builder() .entry("event", event) .entry("implementation", implementation) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testGetWorkflowName4() { List<String> names = NextflowScript .getWorkflowNames("\n   workflow process1\n{some content }\n   workflow process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
************************************
[+] input: checkIfUserIsAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
checkIfUserIsAdmin(String owner, boolean allowForSuperUser) { OauthUser user = SecurityContext.get();  if (user == null) { throw new ForbiddenException(); }  Set<String> scopes = user.scopes(); Map<String, String> orgs = user.orgs();  // Check if User is in the current Organisation. If not, check if user is SuperAdmin if (!orgs.containsKey(owner)) { // Check if user is SuperAdmin and whether the method is allowed for a SuperAdmin if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && allowForSuperUser) { return true; } else if (scopes.contains(SUPER_ADMIN_SCOPE_TYPE) && !allowForSuperUser) { throw new ForbiddenException(); } }  if (!scopes.contains(BASIC_SCOPE_TYPE)) { if (!orgs.containsKey(owner)) { throw new ForbiddenException(); } return orgs.get(owner).equals(ADMIN_ROLE); }  return true; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
************************************
[+] input: equals_false_when_null() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(null);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: SGIVEN_greater_than_limit_method_WHEN_log_send_interval_greater_than_max_log_send_interval_THEN_return_true() { boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME + 1, thresholdConfig.getMaxRequestSizeBytes(),ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
isGreaterThanLimitReached(final long currentTime, final long currentRequestSize, final int batchSize) { long bufferSizeWithOverhead = (currentRequestSize + ((long) (batchSize) * APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); return (isGreaterThanBatchSize(batchSize) || isGreaterEqualToLogSendInterval(currentTime) || isGreaterThanMaxRequestSize(bufferSizeWithOverhead)); }
[*] target: assertTrue(thresholdMetTime)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetTime )
************************************
************************************
[+] input: setClockBackwards() { MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); MachineProperties properties = new MachineProperties(); properties.setClockBackwards(clockBackwards); Assertions."<AssertPlaceHolder>"; }
getClockBackwards() { return clockBackwards; }
[*] target: assertEquals(clockBackwards, properties.getClockBackwards())
[-] pred: org. junit. Assert. assertEquals ( clockBackwards, properties. getClockBackwards() )
************************************
************************************
[+] input: testConvertShouldSetRecognisedCurveNameAndParametersWhenCalledWithValidEcPrivateKey() { //given final EcPrivateKeyToJsonWebKeyImportRequestConverter underTest = new EcPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateEc(KeyCurveName.P_256); final BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.EC, actual.getKeyType()); Assertions.assertEquals(KeyCurveName.P_256, actual.getCurveName()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getX()); Assertions.assertNotNull(actual.getY()); }
convert(final @NonNull BCECPrivateKey source) { final JsonWebKeyImportRequest importRequest = new JsonWebKeyImportRequest(); importRequest.setKeyType(KeyType.EC); final String sourceAlgorithm = ((ECNamedCurveParameterSpec) source.getParameters()).getName(); importRequest.setCurveName(KeyCurveName.forAlg(sourceAlgorithm)); importRequest.setD(source.getD().toByteArray()); final ECPoint point = source.getParameters().getG().multiply(source.getD()).normalize(); importRequest.setX(point.getAffineXCoord().getEncoded()); importRequest.setY(point.getAffineYCoord().getEncoded()); return importRequest; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: IOException { final GeoIpServiceConfig geoIpServiceConfig = makeConfig("src/test/resources/geoip_service_config.yaml"); assertNotNull(geoIpServiceConfig);  final MaxMindConfig maxMindConfig = geoIpServiceConfig.getMaxMindConfig(); "<AssertPlaceHolder>"; assertNotNull(maxMindConfig.getAwsAuthenticationOptionsConfig());  assertThat(maxMindConfig, notNullValue()); assertThat(maxMindConfig.getDatabaseRefreshInterval(), equalTo(Duration.ofDays(10))); assertThat(maxMindConfig.getMaxMindDatabaseConfig().getDatabasePaths().size(), equalTo(2)); assertThat(maxMindConfig.getCacheSize(), equalTo(2048)); assertThat(maxMindConfig.getDatabaseDestination(), equalTo("/tst/resources")); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig(), notNullValue()); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig().getAwsRegion(), equalTo(Region.of("us-east-1"))); }
getMaxMindConfig() { return maxMindConfig; }
[*] target: assertNotNull(maxMindConfig)
[-] pred: org. junit. Assert. assertNotNull ( maxMindConfig )
************************************
************************************
[+] input: Exception { Account acct1 = Provisioning.getInstance().get(Key.AccountBy.name, "testZCS3546@zimbra.com"); acct1.setPrefOutOfOfficeSuppressExternalReply(true); acct1.unsetInternalSendersDomain(); acct1.unsetPrefExternalSendersType(); Mailbox mbox1 = MailboxManager.getInstance().getMailboxByAccount(acct1); boolean skipOOO = Notification.skipOutOfOfficeMsg("test3@synacor.com", acct1, mbox1); "<AssertPlaceHolder>"; }
skipOutOfOfficeMsg(String senderAddr, Account account, Mailbox mbox) { return account.isPrefOutOfOfficeSuppressExternalReply() && isOfExternalSenderType(senderAddr, account, mbox) &&  !isInternalSender(senderAddr, account) && !isOfSpecificDomainSenderType(senderAddr, account); }
[*] target: assertEquals(true, skipOOO)
[-] pred: org. junit. Assert. assertEquals ( true, skipOOO )
************************************
************************************
[+] input: Throwable { FastMethod fm = FastMethod.create(String.class.getMethod("startsWith", String.class)); boolean result = (boolean) fm.invoke("abc", "a"); "<AssertPlaceHolder>"; }
invoke(Object obj, Object... args) throws Throwable;  public static FastMethod create(Method method) { return create(method, false); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { helper.createTestDocument(); ExportDocumentsParameters exportDocumentsParameters = new ExportDocumentsParameters(); exportDocumentsParameters.setExcludeFields("id,publication_year,authors"); String exportStr = client.collections("books").documents().export(exportDocumentsParameters); String expectedExportStr = "{"average_rating":3.2,"ratings_count":124,"title":"Romeo and juliet"}"; "<AssertPlaceHolder>"; }
export(ExportDocumentsParameters exportDocumentsParameters) throws Exception { return this.apiCall.get(getEndPoint("export"), exportDocumentsParameters, String.class); }
[*] target: assertEquals(expectedExportStr, exportStr)
[-] pred: org. junit. Assert. assertEquals ( expectedExportStr, exportStr )
************************************
************************************
[+] input: setTimeout() { Duration timeout = Duration.ZERO; SegmentIdProperties.Distributor.Redis redis = new SegmentIdProperties.Distributor.Redis(); redis.setTimeout(timeout); Assertions."<AssertPlaceHolder>"; }
getTimeout() { return timeout; }
[*] target: assertEquals(timeout, redis.getTimeout())
[-] pred: org. junit. Assert. assertEquals ( timeout, redis. getTimeout() )
************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidRsaParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new RsaKeyCreationInput(KeyType.RSA_HSM, null, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: setProvider() { Map<String, SegmentIdProperties.IdDefinition> provider = new HashMap<>(); SegmentIdProperties properties = new SegmentIdProperties(); properties.setProvider(provider); Assertions."<AssertPlaceHolder>"; }
getProvider() { return provider; }
[*] target: assertEquals(provider, properties.getProvider())
[-] pred: org. junit. Assert. assertEquals ( provider, properties. getProvider() )
************************************
************************************
[+] input: setShare() { SegmentIdProperties.ShardIdDefinition idDefinition = new SegmentIdProperties.ShardIdDefinition(); SegmentIdProperties properties = new SegmentIdProperties(); properties.setShare(idDefinition); Assertions."<AssertPlaceHolder>"; }
getShare() { return share; }
[*] target: assertEquals(idDefinition, properties.getShare())
[-] pred: org. junit. Assert. assertEquals ( idDefinition, properties. getShare() )
************************************
************************************
[+] input: should_not_support_request_with_unknown_field() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1").jsonContent("{"pewpew": 42}").build(); "<AssertPlaceHolder>"; }
isSupported() { boolean hasCursor = isCursor(); boolean hasQuery = query != null; boolean hasContent = jsonContent != null && !jsonContent.isEmpty();  Predicate<String> supportedParams = Set.of(QUERY_PARAMS_FORMAT, QUERY_PARAMS_PRETTY)::contains; boolean hasUnsupportedParams = (!params.isEmpty()) && params.keySet().stream().dropWhile(supportedParams).findAny().isPresent();  boolean validCursor = hasCursor && !hasQuery && !hasUnsupportedParams && !hasContent; boolean validQuery = !hasCursor && hasQuery;  return (validCursor || validQuery) // It's a valid cursor or a valid query && isOnlySupportedFieldInPayload() // and request must contain supported fields only && isSupportedFormat(); // and request must be a supported format }
[*] target: assertFalse(request.isSupported())
[-] pred: org. junit. Assert. assertFalse ( request. isSupported ( ) )
************************************
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyVersion() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
containsEntity(@NonNull final K entityId) { return containsName(entityId.id()) && entities.get(entityId.id()).containsKey(entityId.version()); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
kill(KillParam killParam);
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: inValidateAccessToken() { PayloadDTO dto = PayloadDTO.builder().exp(16868291L).sub(UUID.randomUUID().toString()).build(); boolean result = accessTokenService.validateAccessToken("test",dto); "<AssertPlaceHolder>"; }
validateAccessToken(String token, PayloadDTO payloadDTO) { String[] parts = token.split("\\."); if (parts.length != 3 || payloadDTO == null) return false;  String payload = parts[1]; String signature = parts[2]; return generateSignature(payload).equals(signature); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: cast_Select() { //Given final LcEntrySelect entry = new LcEntrySelect(); entry.setType(LcEntryType.SELECT); entry.setEntryValue("entryValue"); entry.setEntryKey("key"); entry.setOptions(null);  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertEquals(entry.getEntryKey(), export.getEntryKey()); assertEquals(entry.getEntryValue(), export.getEntryValue());  assertTrue(export instanceof LcEntryExportOption); assertNull(((LcEntryExportOption) export).getOptions()); }
cast(final LcEntry source) { switch (source.getType()) { case LINE: case POINT: case POLYGON: case RECTANGLE: case IMAGE_SEGMENTATION: return new LcEntryExportGeometry(source); case FREETEXT: return new LcEntryExportFreeText(source); case SELECT: case CHECKLIST: return new LcEntryExportOption(source); default: // not possible. } throw new IllegalArgumentException(); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
************************************
[+] input: testUpdateAfterApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); // write assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("write", result.get(0).getScope()); assertFalse(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
************************************
[+] input: testBufferIsEmpty_without_write() { final PeerForwarderReceiveBuffer<Record<String>> peerForwarderReceiveBuffer = createObjectUnderTest(TEST_BUFFER_SIZE);  Assertions."<AssertPlaceHolder>"; }
isEmpty() { return blockingQueue.isEmpty() && recordsInFlight == 0; }
[*] target: assertTrue(peerForwarderReceiveBuffer.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( peerForwarderReceiveBuffer. isEmpty ( ) )
************************************
************************************
[+] input: testGetWorkflowNames() { List<String> names = NextflowScript.getWorkflowNames("workflow process1 { some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: testGetTableList() { // 准备参数 Long dataSourceConfigId = randomLongId(); // mock 方法 DataSourceConfigDO dataSourceConfig = new DataSourceConfigDO().setUsername("sa").setPassword("") .setUrl("jdbc:h2:mem:testdb"); when(dataSourceConfigService.getDataSourceConfig(eq(dataSourceConfigId))) .thenReturn(dataSourceConfig);  // 调用 List<TableInfo> tables = databaseTableService.getTableList(dataSourceConfigId, "config", "参数"); // 断言 "<AssertPlaceHolder>"; assertTableInfo(tables.get(0)); }
getTableList(Long dataSourceConfigId, String nameLike, String commentLike) { List<TableInfo> tables = getTableList0(dataSourceConfigId, null); return tables.stream().filter(tableInfo -> (StrUtil.isEmpty(nameLike) || tableInfo.getName().contains(nameLike)) && (StrUtil.isEmpty(commentLike) || tableInfo.getComment().contains(commentLike))) .collect(Collectors.toList()); }
[*] target: assertEquals(1, tables.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tables. size ( ) )
************************************
************************************
[+] input: convertToDatabaseColumnNull() { AnimalPorteConverter converter = new AnimalPorteConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(AnimalPorte porte) { if(porte == null) { return null; } return porte.getDescricao(); }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
************************************
[+] input: getDataAnosAFrente_test01() { LocalDate inicio = LocalDate.of(2021, 5, 29); LocalDate dataEsperada = LocalDate.of(2023, 5, 29); LocalDate dataObtida = LocalDates.getDataAnosAFrente(inicio, 2); "<AssertPlaceHolder>"; }
getDataAnosAFrente(LocalDate inicio, long anos) { return null; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
************************************
[+] input: testIsProviderCodeUniqueOtherExists() { Provider provider = new Provider(1, "name-a", LocalDate.now(), "nationality-a", "code-a"); Mockito.when(dao.findProviderByCode(Mockito.any())).thenReturn(provider);  boolean retVal = service.isProviderCodeUnique(2, "a"); "<AssertPlaceHolder>"; }
isProviderCodeUnique(Integer id, String code) { Provider provider = findProviderByCode(code); return ( provider == null || ((id != null) && (provider.getId() == id))); }
[*] target: assertFalse(retVal)
[-] pred: org. junit. Assert. assertFalse ( retVal )
************************************
************************************
[+] input: getQuantidadeLetrasMinusculas_test04() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas(""); "<AssertPlaceHolder>"; }
getQuantidadeLetrasMinusculas(String str) { return 0; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
************************************
[+] input: testSize() { assertEquals(0, ringArray.size()); ringArray.update(1, false); assertEquals(1, ringArray.size()); ringArray.update(2, true); "<AssertPlaceHolder>"; }
size() { return (int) Stream.of(array).filter(Objects::nonNull).count(); }
[*] target: assertEquals(2, ringArray.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ringArray. size() )
************************************
************************************
[+] input: schedule() { AtomicBoolean isRun = new AtomicBoolean(false); client.schedule(() -> isRun.set(true)); "<AssertPlaceHolder>"; }
schedule(Runnable task) { task.run(); }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "squaredPrimitiveInt", Integer.class);  "<AssertPlaceHolder>";  int arg = 1000; assertEquals(arg * arg, method.invoke(obj, arg)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method, Class<?>... paramTypes) { Class<?>[] expectParamTypes = toPrimitiveTypeArray(paramTypes);  for (Method m : c.getMethods()) { Class<?>[] methodParameters = toPrimitiveTypeArray(m.getParameterTypes());  if ((m.getName().equals(method)) && (equalsTypeArray(methodParameters, expectParamTypes))) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: getAllProjects_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner("eforce21")).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService.getAllProjects();  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner("eforce21"); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner("eforce21"); }
getAllProjects() { OauthUser user = SecurityContext.get(); Map<String, String> orgs = user.orgs();  List<ProjectViewModel> result = new ArrayList<>();  for (Map.Entry<String, String> orgsEntry : orgs.entrySet()) { String currentUserOrg = orgsEntry.getKey();  List<ProjectViewModel> currentOrgProjectViewModels = projectRepository .findAllByDeletedIsFalseAndOwner(currentUserOrg).stream() .map(currentProject -> { ProjectViewModel projectViewModel = ProjectMapper.mapToProjectViewModel(currentProject, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  boolean projectExportable = isProjectExportable(currentProject.getId()); projectViewModel.setExportable(projectExportable); return projectViewModel; }) .collect(Collectors.toList());  result.addAll(currentOrgProjectViewModels); }  return result; }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
************************************
