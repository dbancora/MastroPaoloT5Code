[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(messageKey, headers);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
[+] input: testSend() {  //        // params //        final SendRequest sendRequest = new SendRequest("send", 1L, //                new MessageParam("13711111111", new HashMap<>(), new HashMap<>())); // //        // predict result //        final ProcessContext<SendTaskModel> processContext = new ProcessContext<>(sendRequest.getCode(), new SendTaskModel(), false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        final SendResponse expectedResult = new SendResponse(processContext.getResponse().getStatus(), processContext.getResponse().getMsg()); // // //        // stub //        Map<String, ProcessTemplate> templateConfig = new HashMap<>(4); //        processTemplate.setProcessList(Arrays.asList(businessProcess)); //        templateConfig.put(BusinessCode.COMMON_SEND.getCode(), processTemplate); // //        processController.setTemplateConfig(templateConfig); // // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.send(sendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: shouldValidateUserQuotaFormatError() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .build();  ResourceQuota resourceQuota = ResourceQuota.builder() .metadata(Metadata.builder() .cluster("local") .name("test") .build()) .spec( Map.of(USER_PRODUCER_BYTE_RATE.toString(), "producer", USER_CONSUMER_BYTE_RATE.toString(), "consumer")) .build();  List<String> validationErrors = resourceQuotaService.validateNewResourceQuota(ns, resourceQuota);  "<AssertPlaceHolder>"; assertEquals("Invalid value "producer" for field "user/producer_byte_rate": value must be a number.", validationErrors.getFirst()); assertEquals("Invalid value "consumer" for field "user/consumer_byte_rate": value must be a number.", validationErrors.get(1)); }
[*] target: assertEquals(2, validationErrors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, validationErrors. size ( ) )
************************************
[+] input: testCreateDiscountActivity_success() { // 准备参数 DiscountActivityCreateReqVO reqVO = randomPojo(DiscountActivityCreateReqVO.class, o -> { // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); // 设置商品 o.setProducts(asList(new DiscountActivityBaseVO.Product().setSpuId(1L).setSkuId(2L) .setDiscountType(PromotionDiscountTypeEnum.PRICE.getType()).setDiscountPrice(3), new DiscountActivityBaseVO.Product().setSpuId(10L).setSkuId(20L) .setDiscountType(PromotionDiscountTypeEnum.PERCENT.getType()).setDiscountPercent(30))); });  // 调用 Long discountActivityId = discountActivityService.createDiscountActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验活动 DiscountActivityDO discountActivity = discountActivityMapper.selectById(discountActivityId); assertPojoEquals(reqVO, discountActivity); assertEquals(discountActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); // 校验商品 List<DiscountProductDO> discountProducts = discountProductMapper.selectList(DiscountProductDO::getActivityId, discountActivity.getId()); assertEquals(discountProducts.size(), reqVO.getProducts().size()); for (int i = 0; i < reqVO.getProducts().size(); i++) { DiscountActivityBaseVO.Product product = reqVO.getProducts().get(i); DiscountProductDO discountProduct = discountProducts.get(i); assertEquals(discountProduct.getActivityId(), discountActivity.getId()); assertEquals(discountProduct.getSpuId(), product.getSpuId()); assertEquals(discountProduct.getSkuId(), product.getSkuId()); assertEquals(discountProduct.getDiscountType(), product.getDiscountType()); assertEquals(discountProduct.getDiscountPrice(), product.getDiscountPrice()); assertEquals(discountProduct.getDiscountPercent(), product.getDiscountPercent()); } }
[*] target: assertNotNull(discountActivityId)
[-] pred: org. junit. Assert. assertNotNull ( discountActivityId )
************************************
[+] input: serialize_WithNestedRecord_ReturnsCorrectJson() { // Test for serializing a nested record Schema schema = new Schema.Parser().parse( "{" + "  "type": "record"," + "  "name": "ParentRecord"," + "  "fields": [" + "    {" + "      "name": "child"," + "      "type": {" + "        "type": "record"," + "        "name": "ChildRecord"," + "        "fields": [" + "          {"name": "name", "type": "string"}" + "        ]" + "      }" + "    }" + "  ]" + "}" ); GenericRecord childRecord = new GenericData.Record(schema.getField("child").schema()); childRecord.put("name", "John Doe"); GenericRecord parentRecord = new GenericData.Record(schema); parentRecord.put("child", childRecord);  String expectedJson = "{"child": {"name": "John Doe"}}";  String json = encoder.serialize(parentRecord);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: shouldBuildScriptFormat() { Message message = MessageFactory.scriptFormat(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildOutAllNotRecommendedHint() { Message message = MessageFactory.outAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testBuildAuthRequest_clientDisable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test01() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("Felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 1, quantidadeLetrasMaiusculas )
************************************
[+] input: setMachineId() { Integer machineId = 1; MachineProperties.Manual manual = new MachineProperties.Manual(); manual.setMachineId(machineId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(machineId, manual.getMachineId())
[-] pred: org. junit. Assert. assertEquals ( machineId, manual. getMachineId() )
************************************
[+] input: validateNameLargoTest() { try { RecordsManager.validateName(ALEJANDRO); "<AssertPlaceHolder>"; } catch (PlayerNameTooShortException e) { fail(e.getMessage()); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: acceptDelivery() { // Arrange var delivery = makeValidDelivery(); delivery.setId("delivery-1234"); // Stub when(deliveryService.acceptDelivery(any(Delivery.class))).thenReturn(Mono.just(delivery)); // Act var result = testClient .put() .uri(DELIVERY_URL + "/accept") .bodyValue(delivery) .exchange() .expectStatus() .isOk() .expectBody(Delivery.class) .returnResult() .getResponseBody(); // Assert Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(delivery, result)
[-] pred: org. junit. Assert. assertEquals ( delivery, result )
************************************
[+] input: testUpdateAfterApproval_approved() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); // 有序，方便判断 requestedScopes.put("read", true); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(2, result.size()); // read assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); // write assertEquals(userId, result.get(1).getUserId()); assertEquals(userType, result.get(1).getUserType()); assertEquals(clientId, result.get(1).getClientId()); assertEquals("write", result.get(1).getScope()); assertFalse(result.get(1).getApproved()); assertFalse(DateUtils.isExpired(result.get(1).getExpiresTime())); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: isDatasetNameUniqueAndDeletedFalse_whenDatasetNameIsNotUnique_returnTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findByNameAndDeletedFalseAndOwner(anyString(), anyString())).thenReturn(java.util.Optional.empty());  boolean actual = datasetService.isDatasetNameUniqueAndDeletedFalse(DATASET_NAME, "eforce");  //Then Assertions."<AssertPlaceHolder>"; verify(datasetRepositoryMock).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); verify(datasetRepositoryMock, times(1)).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(MESSAGE_KEY, headers);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
[+] input: testEncryptAndDecrypt() { String masterKey = "1234567890123456"; String input = "This is a test input"; Encryptor encryptor = new EncryptorImpl(masterKey);  String encrypted = encryptor.encrypt(input); String decrypted = encryptor.decrypt(encrypted);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(input, decrypted)
[-] pred: org. junit. Assert. assertEquals ( input, decrypted )
************************************
[+] input: getFunctions() { PrometheusStorageEngine engine = new PrometheusStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(2, functionResolverCollection.size()); Iterator<FunctionResolver> iterator = functionResolverCollection.iterator(); assertTrue(iterator.next() instanceof QueryRangeTableFunctionResolver); assertTrue(iterator.next() instanceof QueryExemplarsTableFunctionResolver); }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
[+] input: testListSwdsVersionsByJobId() { List<Long> ids = jobDatasetVersionMapper.listDatasetVersionIdsByJobId( 13L); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( CollectionUtils.isEqualCollection(List.of(datasetVersionEntity.getId(), datasetVersionEntity2.getId()), ids));  }
[*] target: assertEquals(2, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ids. size ( ) )
************************************
[+] input: IOException { File tempDir = createTempDir(); FileUtil.deleteDir(tempDir); "<AssertPlaceHolder>"; }
[*] target: assertFalse(tempDir.exists())
[-] pred: org. junit. Assert. assertFalse ( tempDir. exists ( ) )
************************************
[+] input: filterCompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
[+] input: testApplyComplexObject() { SimpleObject thatItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject thatObj = new ComplexObject(); thatObj.setId(1); thatObj.setName("eq"); thatObj.setItems(List.of(thatItem));  SimpleObject otherItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject otherObj = new ComplexObject(); otherObj.setId(1); otherObj.setName("eq"); otherObj.setItems(List.of(otherItem));  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(thatObj, otherObj); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getAllImages_WhenZeroImages_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.getAllMediasByDatasetId(DATASET_ID)).thenReturn(new ArrayList<>()); List<MediaViewModel> allImages = datasetService.getAllMedia(DATASET_ID);  //Then "<AssertPlaceHolder>";  verify(datasetRepositoryMock).getAllMediasByDatasetId(anyString()); verify(datasetRepositoryMock, times(1)).getAllMediasByDatasetId(anyString()); }
[*] target: assertTrue(allImages.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allImages. isEmpty ( ) )
************************************
[+] input: IOException { SecurityContext.clear();  String taskId = "not used here"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Forbidden."; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("ForbiddenException should be thrown."); } catch (ForbiddenException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: getAllProjectsFromOrganisationAndLoggedInUserIsAdmin_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner(anyString())).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService .getAllProjectsFromOrganisationAndLoggedInUserIsAdmin();  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner(anyString()); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner(anyString()); }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
[+] input: setProvider() { Map<String, SnowflakeIdProperties.IdDefinition> provider = new HashMap<>(); SnowflakeIdProperties properties = new SnowflakeIdProperties(); properties.setProvider(provider); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(provider, properties.getProvider())
[-] pred: org. junit. Assert. assertEquals ( provider, properties. getProvider() )
************************************
[+] input: getLocation_test() { // given var location = new RiderLocation("rider-1234", "delivery-1234", 23.0f, 190f); var uri = UriComponentsBuilder.fromUriString(riderLocationMapping) .queryParam("deliveryId", location.getDeliveryId()) .buildAndExpand() .toUriString();  // when when(riderLocationService.getLocation(location.getDeliveryId())) .thenReturn(Mono.just(location));  var result = testClient .get() .uri(uri) .exchange() .expectStatus() .isOk() .expectBody(RiderLocation.class) .returnResult() .getResponseBody(); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(location, result)
[-] pred: org. junit. Assert. assertEquals ( location, result )
************************************
[+] input: testSaveEntity() { User user = randomUser(); User created = repository.save(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
[+] input: testGetFieldTypes() { DataSourceTable dataSourceTable = new DataSourceTable(dataSourceService); Map<String, ExprType> fieldTypes = dataSourceTable.getFieldTypes(); Map<String, ExprType> expectedTypes = new HashMap<>(); expectedTypes.put("DATASOURCE_NAME", ExprCoreType.STRING); expectedTypes.put("CONNECTOR_TYPE", ExprCoreType.STRING); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypes, fieldTypes)
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, fieldTypes )
************************************
[+] input: testDivide1() { int res = Calculadora.divide(8, 2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, res)
[-] pred: org. junit. Assert. assertEquals ( 4, res )
************************************
[+] input: testGetMethodInvalidName() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "notExisting");  "<AssertPlaceHolder>"; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
[+] input: should_support_query_with_parameters_and_zero_fetch_size() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1") .jsonContent("{"query": "SELECT 1", "fetch_size": 0, "parameters":[]}") .build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
[+] input: prefers_expression_with_longest_non_empty_match() { ParameterType<String> zeroOrMore = new ParameterType<>( "zero-or-more", "[a-z]*", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(zeroOrMore); ParameterType<String> exactlyOne = new ParameterType<>( "exactly-one", "[a-z]", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(exactlyOne);  List<GeneratedExpression> generatedExpressions = generator.generateExpressions("a simple step"); "<AssertPlaceHolder>"; assertEquals("{exactly-one} {zero-or-more} {zero-or-more}", generatedExpressions.get(0).getSource()); assertEquals("{zero-or-more} {zero-or-more} {zero-or-more}", generatedExpressions.get(1).getSource()); }
[*] target: assertEquals(2, generatedExpressions.size())
[-] pred: org. junit. Assert. assertEquals ( 2, generatedExpressions. size ( ) )
************************************
[+] input: WxErrorException { // 准备参数 Integer userType = randomPojo(UserTypeEnum.class).getValue(); String url = randomString(); // mock 方法 WxJsapiSignature signature = randomPojo(WxJsapiSignature.class); when(wxMpService.createJsapiSignature(eq(url))).thenReturn(signature);  // 调用 WxJsapiSignature result = socialClientService.createWxMpJsapiSignature(userType, url); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertSame(signature, result)
[-] pred: org. junit. Assert. assertSame ( signature, result )
************************************
[+] input: Exception { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); Message msg = mbox.addMessage( null, new ParsedMessage("From: from1@zimbra.com\r\nTo: to1@zimbra.com".getBytes(), false), opt, null);  Volume vol = VolumeManager.getInstance().getCurrentMessageVolume();  DbVolumeBlobs.addBlobReference(conn, mbox, vol, msg);  String digest = msg.getBlob().getDigest(); String path = msg.getBlob().getLocalBlob().getFile().getPath(); List<BlobReference> blobs = DbVolumeBlobs.getBlobReferences(conn, digest, vol); "<AssertPlaceHolder>"; BlobReference ref = blobs.get(0);  assertEquals(path, getPath(ref)); }
[*] target: assertEquals(1, blobs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, blobs. size ( ) )
************************************
[+] input: testGetEncodedCertificateSignRequestShouldReturnNullWhenCsrIsMissing() { //given final CertificateCreationInput input = CertificateCreationInput.builder() .validityStart(NOW) .subject("CN=" + LOCALHOST) .upns(Set.of(LOOP_BACK_IP)) .name(CERT_NAME_1) .dnsNames(Set.of(LOWKEY_VAULT)) .enableTransparency(false) .certAuthorityType(UNKNOWN) .contentType(CertContentType.PEM) .certificateType(null) .keyType(KeyType.EC) .keyCurveName(KeyCurveName.P_521) .extendedKeyUsage(Set.of("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")) .keyUsage(Set.of(KeyUsageEnum.KEY_ENCIPHERMENT)) .reuseKeyOnRenewal(true) .validityMonths(VALIDITY_MONTHS) .exportablePrivateKey(true) .build();  final VaultFake vault = new VaultFakeImpl(HTTPS_LOCALHOST_8443); final KeyVaultCertificateEntity entity = spy(new KeyVaultCertificateEntity(CERT_NAME_1, input, vault)); doReturn(null).when(entity).getCertificateSigningRequest();  //when final byte[] actual = entity.getEncodedCertificateSigningRequest();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: setMachineBit() { int machineBit = 6; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setMachineBit(machineBit); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(machineBit, idDefinition.getMachineBit())
[-] pred: org. junit. Assert. assertEquals ( machineBit, idDefinition. getMachineBit() )
************************************
[+] input: isAndroid_whenNotSetInConfig() { boolean isAndroid = Configuration.INSTANCE.isAndroid();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isAndroid)
[-] pred: org. junit. Assert. assertFalse ( isAndroid )
************************************
[+] input: test_objectFileName_default_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".json")); }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
[+] input: testNotExists() { Organization randomOrganization = randomOrganization(); Assertions.assertTrue(randomOrganization.notExisted());  Organization created = randomOrganization.createOrg(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(created.notExisted())
[-] pred: org. junit. Assert. assertFalse ( created. notExisted() )
************************************
[+] input: test_provideCollector() { MetricsServletModule module = new MetricsServletModule(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(module.provideCollector())
[-] pred: org. junit. Assert. assertNotNull ( module. provideCollector() )
************************************
[+] input: test() { SessionClient client = new SessionClient(); String html = client.getHtml("https://www.baidu.com"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(html)
[-] pred: org. junit. Assert. assertNotNull ( html )
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyName() { //given  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testCreateArticle_success() { // 准备参数 ArticleCreateReqVO reqVO = randomPojo(ArticleCreateReqVO.class);  // 调用 Long articleId = articleService.createArticle(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleDO article = articleMapper.selectById(articleId); assertPojoEquals(reqVO, article); }
[*] target: assertNotNull(articleId)
[-] pred: org. junit. Assert. assertNotNull ( articleId )
************************************
[+] input: normalStatusBar() { String res = tracker.update("§c934/1086❤     §a159§a❈ Defense     §b562/516✎ Mana", false); "<AssertPlaceHolder>"; assertStats(934, 1086, 159, 562, 516, 0); }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: Exception { CountDownLatch latch1 = new CountDownLatch(2); CountDownLatch latch2 = new CountDownLatch(2); s1.registerCallback(new CountDownCallback(latch1)); s2.registerCallback(new CountDownCallback(latch2)); c.getPeer("peer1").sendMessage(messages[0]); c.getPeer("peer2").sendMessage(messages[1]); c.getPeer("peer1").sendMessage(messages[2]); c.getPeer("peer2").sendMessage(messages[3]); latch1.await(2, TimeUnit.SECONDS); latch2.await(2, TimeUnit.SECONDS); "<AssertPlaceHolder>"; assertEquals(0, latch2.getCount()); }
[*] target: assertEquals(0, latch1.getCount())
[-] pred: org. junit. Assert. assertEquals ( 0, latch1. getCount ( ) )
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(null, null, null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
[+] input: shouldBuildEscalationCodeNoExpression() { Message message = escalationCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Escalation code cannot be an expression."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: confirmDefaultBehavior() { when(provider.getHttpAuthenticationService()).thenCallRealMethod();  var result = provider.getHttpAuthenticationService(); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(result.isPresent()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: equals_true_when_same_object() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(vec3c);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: testCacheCleanup() { var cache = Cache.<String, String>builder(key -> key + "-test") .expireAfterAccess(Duration.ofSeconds(1)) .build(); cache.require("foo"); // this won't do anything since expire time is 1 second cache.cleanup(); cache.require("bar"); // this won't do anything since expire time is 1 second cache.cleanup(); // this won't do anything since expire time is 1 second cache.cleanup();  Utils.sleep(Duration.ofSeconds(1)); Assertions.assertEquals(2, cache.size()); // after 1 second, every element in cache has expired cache.cleanup(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, cache.size())
[-] pred: org. junit. Assert. assertEquals ( 0, cache. size() )
************************************
[+] input: testHash() { for (int i = 0; i < 10; i++) { System.out.println(random.nextHex()); }  for (int i = 0; i < 10; i++) { String string = random.nextHex(i); System.out.println(string); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(string.length(), i)
[-] pred: org. junit. Assert. assertEquals ( string. length ( ), i )
************************************
[+] input: isAdmin_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.isAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: readPropertiesFileMissingTest() { Map<String, String> properties = ResourceUtil.readProperties(ResourceUtilTest.class, "missing.properties");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, properties.size())
[-] pred: org. junit. Assert. assertEquals ( 0, properties. size ( ) )
************************************
[+] input: testGetWorkflowNames() { List<String> names = NextflowScript.getWorkflowNames("workflow process1 { some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
[+] input: setNamespace() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); String namespace = "wow cosid"; properties.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(namespace, properties.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, properties. getNamespace() )
************************************
[+] input: setPrefetchWorker() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); chain.setPrefetchWorker(prefetchWorker); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(prefetchWorker, chain.getPrefetchWorker())
[-] pred: org. junit. Assert. assertEquals ( prefetchWorker, chain. getPrefetchWorker() )
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort()); }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
[+] input: getTodosByAssignee() {  TodoCollectionResponse todosCollection = (TodoCollectionResponse) (todoAPIContract .getTodosByAssignee("ABC1234", null) .getBody());  List<Todo> fetchedTodos = todosCollection.getTodos();  "<AssertPlaceHolder>";  Todo firstTodo = fetchedTodos.get(0);  assertEquals( "MyTodo 1", firstTodo.getName(), "The todo fetched should have a name of: MyTodo 1"); }
[*] target: assertEquals(1, fetchedTodos.size())
[-] pred: org. junit. Assert. assertEquals ( 1, fetchedTodos. size ( ) )
************************************
[+] input: checkForPreApproval_clientAutoApprove() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(requestedScopes));  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: shouldBuildPotentialStarter() { Message message = MessageFactory.potentialStarter(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: Exception { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken); // Act final ReturnT<String> retval = executorBiz.beat();  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_greater_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() + 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
[+] input: ensureFreeSpace_overLimitHappyDeletion() { File file1 = new File("oldest"); File file2 = new File("younger"); File file3 = new File("newest");  File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile); when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES + 1); when(fileUtils.getModificationTime(file1)).thenReturn(1000L); when(fileUtils.getModificationTime(file2)).thenReturn(1001L); when(fileUtils.getModificationTime(file3)).thenReturn(1002L); when(fileUtils.getFileSize(isA(File.class))).thenReturn(1L); when(spanStorage.getAllSpanFiles()).thenReturn(Stream.of(file3, file1, file2)); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace();  verify(fileUtils).safeDelete(file1); verify(fileUtils).safeDelete(file2); verify(fileUtils, never()).safeDelete(file3); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: shouldCreateCommandForShortChain() { final String expectedCommand = "certbot certonly --preferred-chain "ISRG Root X1" " + "--agree-tos --email admin@example.com -n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "short", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: testConvertShouldSetParametersWhenCalledWithValidRsaPrivateKey() { //given final RsaPrivateKeyToJsonWebKeyImportRequestConverter underTest = new RsaPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateRsa(2048, null); final RSAPrivateCrtKey privateKey = (RSAPrivateCrtKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.RSA, actual.getKeyType()); Assertions.assertNotNull(actual.getN()); Assertions.assertNotNull(actual.getE()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getP()); Assertions.assertNotNull(actual.getQ()); Assertions.assertNotNull(actual.getDp()); Assertions.assertNotNull(actual.getDq()); Assertions.assertNotNull(actual.getQi()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testUpdateNickName_success() { //        // mock 数据 //        MemberUserDO userDO = randomUserDO(); //        userMapper.insert(userDO); // //        // 随机昵称 //        String newNickName = randomString(); // //        // 调用接口修改昵称 //        memberUserService.updateUser(userDO.getId(),newNickName); //        // 查询新修改后的昵称 //        String nickname = memberUserService.getUser(userDO.getId()).getNickname(); //        // 断言 //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(newNickName,nickname)
[-] pred: org. junit. Assert. assertEquals ( newNickName, nickname )
************************************
[+] input: schedule() { AtomicBoolean isRun = new AtomicBoolean(false); client.schedule(() -> isRun.set(true)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: testCreateProject_success() { // 准备参数 GoViewProjectCreateReqVO reqVO = randomPojo(GoViewProjectCreateReqVO.class);  // 调用 Long goViewProjectId = goViewProjectService.createProject(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 GoViewProjectDO goViewProject = goViewProjectMapper.selectById(goViewProjectId); assertPojoEquals(reqVO, goViewProject); }
[*] target: assertNotNull(goViewProjectId)
[-] pred: org. junit. Assert. assertNotNull ( goViewProjectId )
************************************
[+] input: testCreateWorkId() { var created = workIDApplication.createWorkId(randomWorkIdDto()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
[+] input: testGetInstances() { Set<Fly> flies =  instanceProvider.getInstances(Fly.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2,flies.size())
[-] pred: org. junit. Assert. assertEquals ( 2, flies. size ( ) )
************************************
[+] input: Exception { String raw = "From: Pete(A wonderful \\) chap) <pete(his account)@(comment)silly.test(his host)>\n" + "To: Chris <c@(xxx bbb)public.example>,\n" + "         joe@example.org,\n" + "  John <jdoe@one.test> (my dear friend); (the end of the group)\n" + "Cc:(Empty list)(start)Undisclosed recipients  :(nobody(that I know))  ;\n" + "Date: Thu,\n" + "      13\n" + "        Feb\n" + "          1969\n" + "      23:32\n" + "               -0330 (Newfoundland Time)\n" + "Message-ID:              <testabcd.1234@silly.test>\n" + "\n" + "Testing.";  ParsedMessage msg = new ParsedMessage(raw.getBytes(), false); List<IndexDocument> docs = msg.getLuceneDocuments(); "<AssertPlaceHolder>"; Document doc = docs.get(0).toDocument();  RFC822AddressTokenStream from = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_FROM).tokenStreamValue(); assertEquals(Arrays.asList("pete", "a", "wonderful", "chap", "pete", "his", "account", "comment", "silly.test", "his", "host", "pete@silly.test", "pete", "@silly.test", "silly.test"), from.getAllTokens());  RFC822AddressTokenStream to = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_TO).tokenStreamValue(); assertEquals(Arrays.asList("chris", "c@", "c", "xxx", "bbb", "public.example", "joe@example.org", "joe", "@example.org", "example.org", "example", "@example", "john", "jdoe@one.test", "jdoe", "@one.test", "one.test", "my", "dear", "friend", "the", "end", "of", "the", "group", "c@public.example", "c", "@public.example", "public.example"), to.getAllTokens());  RFC822AddressTokenStream cc = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_CC).tokenStreamValue(); assertEquals(Arrays.asList("empty", "list", "start", "undisclosed", "recipients", "nobody", "that", "i", "know"), cc.getAllTokens());  RFC822AddressTokenStream xEnvFrom = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_FROM).tokenStreamValue(); assertEquals(0, xEnvFrom.getAllTokens().size());  RFC822AddressTokenStream xEnvTo = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_TO).tokenStreamValue(); assertEquals(0, xEnvTo.getAllTokens().size()); }
[*] target: assertEquals(1, docs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, docs. size ( ) )
************************************
[+] input: isScrollStarted() { assertFalse(request.isScroll());  request.setScrollId("scroll123"); assertTrue(request.isScroll());  request.reset(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(request.isScroll())
[-] pred: org. junit. Assert. assertFalse ( request. isScroll() )
************************************
[+] input: testCreateBrand_success() { // 准备参数 ProductBrandCreateReqVO reqVO = randomPojo(ProductBrandCreateReqVO.class);  // 调用 Long brandId = brandService.createBrand(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ProductBrandDO brand = brandMapper.selectById(brandId); assertPojoEquals(reqVO, brand); }
[*] target: assertNotNull(brandId)
[-] pred: org. junit. Assert. assertNotNull ( brandId )
************************************
[+] input: Exception { InputCodec objectUnderTest = new InputCodec() { @Override public void parse(InputStream inputStream, Consumer<Record<Event>> eventConsumer) throws IOException {  } };  inputFile = mock(InputFile.class); inputStream = mock(SeekableInputStream.class); decompressionEngine = mock(DecompressionEngine.class); when(inputFile.newStream()).thenReturn(inputStream); closeCalled = false; doAnswer(a -> { closeCalled = true; return null; }).when(inputStream).close(); when(decompressionEngine.createInputStream(any(InputStream.class))).thenReturn(inputStream); objectUnderTest.parse(inputFile, decompressionEngine, rec -> {}); "<AssertPlaceHolder>"; }
[*] target: assertTrue(closeCalled)
[-] pred: org. junit. Assert. assertTrue ( closeCalled )
************************************
[+] input: shouldProperlyMapDtoToModel() { //given LectureDTO dto = new LectureDTO(); dto.setId(11L); dto.setName("lecture name");  //when LectureModel model = mapperUnderTest.toModel(dto);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(dto.getId(), model.getId()); Assertions.assertEquals(dto.getName(), model.getName()); }
[*] target: assertNotNull(model)
[-] pred: org. junit. Assert. assertNotNull ( model )
************************************
[+] input: healthyWithRetry() {  when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedException.class) .thenReturn(true);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(2)).isMemoryHealthy(anyLong()); }
[*] target: assertTrue(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertTrue ( resourceMonitor. isHealthy() )
************************************
[+] input: equals_false_when_different_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(3.0, 2.0, 1.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: shouldBuildDecisionRef() { Message message = MessageFactory.decisionRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: response_is_aggregation_when_aggregation_not_empty() { when(searchResponse.getAggregations()).thenReturn(aggregations);  OpenSearchResponse response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
[*] target: assertTrue(response.isAggregationResponse())
[-] pred: org. junit. Assert. assertTrue ( response. isAggregationResponse ( ) )
************************************
[+] input: testDefaultDataSourceMetadata() { DataSourceMetadata defaultMetadata = DataSourceMetadata.defaultOpenSearchDataSourceMetadata(); "<AssertPlaceHolder>"; assertEquals(DataSourceType.OPENSEARCH, defaultMetadata.getConnector()); assertTrue(defaultMetadata.getAllowedRoles().isEmpty()); assertTrue(defaultMetadata.getProperties().isEmpty()); }
[*] target: assertNotNull(defaultMetadata)
[-] pred: org. junit. Assert. assertNotNull ( defaultMetadata )
************************************
[+] input: convertToEntityAttributeNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); AnimalTipo convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256GcmWrongKeySize() { String clearText = "myClearText"; String keyEncryptionKey = "myKeyEncryptionKeyWrongSize"; String myClearText = EncryptionUtils.encryptAes256Gcm(clearText, keyEncryptionKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearText, myClearText)
[-] pred: org. junit. Assert. assertEquals ( clearText, myClearText )
************************************
[+] input: shouldBuildInputOutput() { Message message = MessageFactory.inputOutput(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildFieldContent() { Message message = MessageFactory.fieldContent(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: cacheReturnsNewValueFromCallback() { LayeredMatchedOptionCache<String, Integer> cache = new LayeredMatchedOptionCache<>(Duration.ofMinutes(1), 10);  Integer result = cache.get("test", () -> 42, value -> false);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(42, result)
[-] pred: org. junit. Assert. assertEquals ( 42, result )
************************************
[+] input: getNamingService() { NacosNamingService namingService = namingServiceConfig.getNamingService(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(namingService)
[-] pred: org. junit. Assert. assertNotNull ( namingService )
************************************
[+] input: loadUserByUsername() { UserDetails nome = this.autenticacaoService.loadUserByUsername("testeautenticacaoservice@example.com"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(nome)
[-] pred: org. junit. Assert. assertNotNull ( nome )
************************************
[+] input: getPlanForSerialization() { plan = mock(PhysicalPlan.class, withSettings().extraInterfaces(SerializablePlan.class)); monitorPlan = new ResourceMonitorPlan(plan, resourceMonitor); "<AssertPlaceHolder>"; }
[*] target: assertEquals(plan, monitorPlan.getPlanForSerialization())
[-] pred: org. junit. Assert. assertEquals ( plan, monitorPlan. getPlanForSerialization() )
************************************
[+] input: testAsUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: findEventById_shouldFindEvent_whenExists() { final Event event = mock(Event.class); when(event.getId()).thenReturn(ID);  repository.saveEvent(event); final Event actual = repository.findEventById(ID);  "<AssertPlaceHolder>"; assertEquals(event, actual); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: checkIfUserIsAdmin_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: testCreateDictData_success() { // 准备参数 DictDataSaveReqVO reqVO = randomPojo(DictDataSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值 // mock 方法 when(dictTypeService.getDictType(eq(reqVO.getDictType()))).thenReturn(randomDictTypeDO(reqVO.getDictType()));  // 调用 Long dictDataId = dictDataService.createDictData(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictDataDO dictData = dictDataMapper.selectById(dictDataId); assertPojoEquals(reqVO, dictData, "id"); }
[*] target: assertNotNull(dictDataId)
[-] pred: org. junit. Assert. assertNotNull ( dictDataId )
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listDeletedVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/deleted", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryExemplarsRequest exemplarsRequest = new PrometheusQueryExemplarsRequest(); exemplarsRequest.setQuery(QUERY); exemplarsRequest.setStartTime(STARTTIME); exemplarsRequest.setEndTime(ENDTIME); QueryExemplarsTable queryExemplarsTable = new QueryExemplarsTable(client, exemplarsRequest); TableScanBuilder tableScanBuilder = queryExemplarsTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryExemplarsFunctionTableScanBuilder); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
[+] input: run() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  // trigger data final TriggerParam triggerParam = new TriggerParam(); triggerParam.setJobId(1); triggerParam.setExecutorHandler("demoJobHandler"); triggerParam.setExecutorParams(null); triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name()); triggerParam.setGlueType(GlueTypeEnum.BEAN.name()); triggerParam.setGlueSource(null); triggerParam.setGlueUpdatetime(System.currentTimeMillis()); triggerParam.setLogId(1); triggerParam.setLogDateTime(System.currentTimeMillis());  // Act final ReturnT<String> retval = executorBiz.run(triggerParam);  // Assert result Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: setTimeout() { Duration timeout = Duration.ofSeconds(2); MachineProperties.Redis redis = new MachineProperties.Redis(); redis.setTimeout(timeout); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(timeout, redis.getTimeout())
[-] pred: org. junit. Assert. assertEquals ( timeout, redis. getTimeout() )
************************************
[+] input: setTimestampBit() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); int timestampBit = 50; properties.setTimestampBit(50); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(timestampBit, properties.getTimestampBit())
[-] pred: org. junit. Assert. assertEquals ( timestampBit, properties. getTimestampBit() )
************************************
[+] input: testVerifySignedTypedData() { final String signature = "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c";  boolean verified = key.verifyTypedData(domain, message, signature).join();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testCreatePost_success() { // 准备参数 PostSaveReqVO reqVO = randomPojo(PostSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 防止 id 被设置 // 调用 Long postId = postService.createPost(reqVO);  // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 PostDO post = postMapper.selectById(postId); assertPojoEquals(reqVO, post, "id"); }
[*] target: assertNotNull(postId)
[-] pred: org. junit. Assert. assertNotNull ( postId )
************************************
[+] input: JsonProcessingException { String endpoint = this.computeEndpoint(ConnectorEndpoint.CONNECTOR_STATUS); JsonNode expected = jsonMapper.createObjectNode().put("status", "OK"); byte[] responseBody = jsonMapper.writeValueAsBytes(expected); this.mockRestCall(endpoint, null, responseBody, HttpMethod.GET, HttpStatus.OK); JsonNode actual = connectorService.getConnectorStatus(NAMESPACE, NAME, CONNECTOR); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testBuildWithoutExtraParameters() { String params = sparkSubmitParametersBuilder.toString();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(params)
[-] pred: org. junit. Assert. assertNotNull ( params )
************************************
[+] input: Exception { Account acct1 = Provisioning.getInstance().get(Key.AccountBy.name, "testZCS3546@zimbra.com"); acct1.setPrefOutOfOfficeSuppressExternalReply(true); acct1.unsetInternalSendersDomain(); acct1.unsetPrefExternalSendersType(); Mailbox mbox1 = MailboxManager.getInstance().getMailboxByAccount(acct1); boolean skipOOO = Notification.skipOutOfOfficeMsg("test3@synacor.com", acct1, mbox1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, skipOOO)
[-] pred: org. junit. Assert. assertEquals ( true, skipOOO )
************************************
[+] input: setStateLocation() { String stateLocation = MockIdGenerator.INSTANCE.generateAsString(); MachineProperties.StateStorage.Local local = new MachineProperties.StateStorage.Local(); local.setStateLocation(stateLocation); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(stateLocation, local.getStateLocation())
[-] pred: org. junit. Assert. assertEquals ( stateLocation, local. getStateLocation() )
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: hashBytecode() { String expected = "0x010000517112c421df08d7b49e4dc1312f4ee62268ee4f5683b11d9e2d33525a";  byte[] result = ContractDeployer.hashBytecode(Numeric.hexStringToByteArray(CounterContract.BINARY)); String resultHex = Numeric.toHexString(result);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resultHex)
[-] pred: org. junit. Assert. assertEquals ( expected, resultHex )
************************************
[+] input: getProject_whenIdIsValidAndUserIsAuthorized_getProject() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID);  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  ProjectViewModel project = projectService.getProject(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), project.getId()); assertEquals(testProject.getName(), project.getName()); assertEquals(testProject.getDescription(), project.getDescription()); assertEquals(testProject.getShortDescription(), project.getShortDescription()); assertEquals(testProject.isPinned(), project.isPinned()); assertEquals(testProject.getOwner(), project.getOwner());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
[*] target: assertNotNull(project)
[-] pred: org. junit. Assert. assertNotNull ( project )
************************************
[+] input: isShutdownHook() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(prefetchWorker.isShutdownHook())
[-] pred: org. junit. Assert. assertTrue ( prefetchWorker. isShutdownHook() )
************************************
[+] input: InterruptedException { HBrowser hBrowser = new HBrowser(); try (PlaywrightWindow window = hBrowser.openCustomWindow().debugOutputStream(System.out).headless(false).buildPlaywrightWindow()) { window.load(new File(System.getProperty("user.dir") + "/test.html")); String expected = "This is the expected value!"; String actual = null; window.fill("id=input__text", expected); window.fill("id=input__password", expected); actual = window.getOuterHtml().getElementById("input__text").attr("value"); // TODO seems like it sets the text correctly. // TODO Just got to find a way of retrieving the value from the form, because it wont work with the regular form.value thing. //"<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateMailTemplate_success() { // 准备参数 MailTemplateSaveReqVO reqVO = randomPojo(MailTemplateSaveReqVO.class) .setId(null); // 防止 id 被赋值  // 调用 Long mailTemplateId = mailTemplateService.createMailTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailTemplateDO mailTemplate = mailTemplateMapper.selectById(mailTemplateId); assertPojoEquals(reqVO, mailTemplate, "id"); }
[*] target: assertNotNull(mailTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( mailTemplateId )
************************************
[+] input: shouldBuildTimerExpressionNotSupported() { String timerType = random(); String timerValue = random(); String eventType = random(); String semanticVersion = random(); Message message = timerExpressionNotSupported(timerType, timerValue, eventType, semanticVersion); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Timer of type '" + timerType + "' with value '" + timerValue + "' is not supported for event type '" + eventType + "' in Zeebe version '" + semanticVersion + "'."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: Exception {  Account acct = createTestAccount(Provisioning.getInstance(), UUID.randomUUID() + "@" + UUID.randomUUID() + ".com"); ImapHandler handler = new MockImapHandler();  acct.setImapEnabled(true); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertTrue(handler.isAuthenticated());  acct.setImapEnabled(true); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(handler.isAuthenticated())
[-] pred: org. junit. Assert. assertFalse ( handler. isAuthenticated() )
************************************
[+] input: setIncrementMaxIdSql() { String incrementMaxIdSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setIncrementMaxIdSql(incrementMaxIdSql); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(incrementMaxIdSql, jdbc.getIncrementMaxIdSql())
[-] pred: org. junit. Assert. assertEquals ( incrementMaxIdSql, jdbc. getIncrementMaxIdSql() )
************************************
[+] input: setOffset() { long offset = 100; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setOffset(offset); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(offset, idDefinition.getOffset())
[-] pred: org. junit. Assert. assertEquals ( offset, idDefinition. getOffset() )
************************************
[+] input: serialize_WithEnum_ReturnsCorrectJson() { // Test for serializing an enum GenericRecord record = new GenericData.Record(SCHEMA); record.put("suit", new GenericData.EnumSymbol(SCHEMA.getField("suit").schema(), "SPADES"));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": "SPADES"}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: getDashboardData_whenIdIsValidAndUserIsAuthorized_getDashboardData() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  when(limitServiceMock.getLimitsByOrgId(anyString())).thenReturn(tesLimitPricingPlanViewModel);  when(labelTaskRepositoryMock.countProjectTasksWhereMediasNotDeleted(anyString())).thenReturn(0); when(labelTaskRepositoryMock.countProjectTasksByStateWhereMediasNotDeleted(anyString(), any())).thenReturn(0L); when(labelTaskRepositoryMock.countProjectTasksByMediaTypeWhereMediasNotDeleted(anyString(), any())).thenReturn(0L);  ProjectDashboardViewModel dashboardData = projectService.getDashboardData(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), dashboardData.getId()); assertEquals(testProject.getName(), dashboardData.getName()); assertEquals(testProject.getDescription(), dashboardData.getDescription()); assertEquals(testProject.getShortDescription(), dashboardData.getShortDescription()); assertEquals(testProject.isPinned(), dashboardData.isPinned()); assertEquals(testProject.getOwner(), dashboardData.getOwner()); assertEquals("FREE_DEVELOPER", dashboardData.getCurrentPlan()); assertEquals(0, dashboardData.getCountTasks()); assertEquals(0, dashboardData.getCountDatasets()); assertEquals(0, dashboardData.getApprovedReviewPerformance()); assertEquals(0, dashboardData.getDeclinedReviewPerformance()); assertEquals(LabelTaskState.values().length, dashboardData.getTaskStatus().size()); assertEquals(MediaSourceType.values().length, dashboardData.getTaskMediaDetail().size());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
[*] target: assertNotNull(dashboardData)
[-] pred: org. junit. Assert. assertNotNull ( dashboardData )
************************************
[+] input: serialize_WithBytesValue_ReturnsCorrectJson() { // Test for serializing bytes value GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{1, 2, 3}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\u0001\\u0002\\u0003"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: JavetException { String resourceName = "./test.js"; IV8Executor iV8Executor = v8Runtime.getExecutor( "const a = 1; a;").setResourceName(resourceName); try (V8Script v8Script = iV8Executor.compileV8Script()) { assertNotNull(v8Script); "<AssertPlaceHolder>"; assertEquals(1, v8Script.executeInteger()); } }
[*] target: assertEquals(resourceName, v8Script.getResourceName())
[-] pred: org. junit. Assert. assertEquals ( resourceName, v8Script. getResourceName() )
************************************
[+] input: add() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
[+] input: test_with_valid_endpoint_should_download_file() { when(maxMindDatabaseConfig.getDatabasePaths()).thenReturn(Map.of("geolite2-city", path)); final ManifestDownloadService objectUnderTest = createObjectUnderTest(); objectUnderTest.initiateDownload();  final File file = new File(OUTPUT_DIR + File.separator + "geolite2-city.mmdb"); "<AssertPlaceHolder>";  file.deleteOnExit(); final File directory = new File(OUTPUT_DIR); directory.deleteOnExit(); }
[*] target: assertTrue(file.exists())
[-] pred: org. junit. Assert. assertTrue ( file. exists ( ) )
************************************
[+] input: SQLException {  String queryNode = "match (v:testNode) return v;";  ResultSet resultSet = statement.executeQuery(queryNode);  assertTrue(resultSet.next()); assertEquals(1, resultSet.getRow());  resultSet.absolute(5); assertEquals(5, resultSet.getRow());  resultSet.absolute(-2); assertEquals(5, resultSet.getRow());  resultSet.relative(1); assertEquals(6, resultSet.getRow());  resultSet.relative(-3); assertEquals(3, resultSet.getRow());  resultSet.previous(); assertEquals(2, resultSet.getRow());  resultSet.first(); assertEquals(1, resultSet.getRow()); assertTrue(resultSet.isFirst());  resultSet.beforeFirst(); assertEquals(0, resultSet.getRow()); assertTrue(resultSet.isBeforeFirst());  resultSet.last(); assertEquals(6, resultSet.getRow()); assertTrue(resultSet.isLast());  resultSet.afterLast(); assertEquals(7, resultSet.getRow()); "<AssertPlaceHolder>";  }
[*] target: assertTrue(resultSet.isAfterLast())
[-] pred: org. junit. Assert. assertTrue ( resultSet. isAfterLast ( ) )
************************************
[+] input: testAsPendingOperationUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPendingOperationUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/pending"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: convertToEntityAttributeNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); AnuncioStatus convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: happyPathSendSpans() { FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(bandwidthTracker).tick(fileSpans); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: setJdbc() { SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); distributor.setJdbc(jdbc); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(jdbc, distributor.getJdbc())
[-] pred: org. junit. Assert. assertEquals ( jdbc, distributor. getJdbc() )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalClassificacaoEtariaConverter animalConverter = new AnimalClassificacaoEtariaConverter(); String s = animalConverter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
[+] input: testNewerThanPatch() { SemanticVersion version = new SemanticVersion(1, 2, 5); SemanticVersion version2 = new SemanticVersion(1, 2, 4);  assertTrue(version.isNewerThan(version2)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(version2.isNewerThan(version))
[-] pred: org. junit. Assert. assertFalse ( version2. isNewerThan ( version ) )
************************************
[+] input: testCreateArticleCategory_success() { // 准备参数 ArticleCategoryCreateReqVO reqVO = randomPojo(ArticleCategoryCreateReqVO.class);  // 调用 Long articleCategoryId = articleCategoryService.createArticleCategory(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleCategoryDO articleCategory = articleCategoryMapper.selectById(articleCategoryId); assertPojoEquals(reqVO, articleCategory); }
[*] target: assertNotNull(articleCategoryId)
[-] pred: org. junit. Assert. assertNotNull ( articleCategoryId )
************************************
[+] input: validateVerificationToken_returnsExpiredIfTokenExpired() { testToken.setExpiryDate(getExpirationDate(0)); when(verificationTokenRepository.findByToken(anyString())).thenReturn(testToken); UserService.TokenValidationResult result = userVerificationService.validateVerificationToken(anyString()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(result, UserService.TokenValidationResult.EXPIRED)
[-] pred: org. junit. Assert. assertEquals ( result, UserService.TokenValidationResult.EXPIRED )
************************************
[+] input: Exception { helper.createTestDocument(); ExportDocumentsParameters exportDocumentsParameters = new ExportDocumentsParameters(); exportDocumentsParameters.setExcludeFields("id,publication_year,authors"); String exportStr = client.collections("books").documents().export(exportDocumentsParameters); String expectedExportStr = "{"average_rating":3.2,"ratings_count":124,"title":"Romeo and juliet"}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedExportStr, exportStr)
[-] pred: org. junit. Assert. assertEquals ( expectedExportStr, exportStr )
************************************
[+] input: addsTask() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); }
[*] target: assertEquals(1, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, todoList. size() )
************************************
[+] input: testCreateLazyFilterFromMissingFile() { UnmodifiableBloomFilter<String> missingFileFilter = UnmodifiableBloomFilter.createLazyFilterFromFile("src/test/resources/fake-file-not-found"); // expect to initialize on demand assertFalse(missingFileFilter.isInitialized()); assertFalse(missingFileFilter.mightContain("test123")); assertTrue(missingFileFilter.isInitialized()); // file not found results in disabled instance "<AssertPlaceHolder>"; }
[*] target: assertTrue(missingFileFilter.isDisabled())
[-] pred: org. junit. Assert. assertTrue ( missingFileFilter. isDisabled() )
************************************
[+] input: getDataMesesAtras_test01() { LocalDate inicio = LocalDate.of(2021, 5, 13); LocalDate dataEsperada = LocalDate.of(2020, 12, 13); LocalDate dataObtida = LocalDates.getDataMesesAtras(inicio, 5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
[+] input: testGetDefaultNgrokConfig() { // GIVEN final JavaNgrokConfig javaNgrokConfigV3Tmp = new JavaNgrokConfig.Builder() .withConfigPath(Paths.get("build", ".ngrok", "config_v2_tmp.yml").toAbsolutePath()) .withNgrokPath(Paths.get("build", "bin", "v2", NgrokInstaller.getNgrokBin())) .withNgrokVersion(NgrokVersion.V3) .build(); ngrokInstaller.installDefaultConfig(javaNgrokConfigV3Tmp.getConfigPath(), Map.of(), javaNgrokConfigV3Tmp.getNgrokVersion());  // WHEN final Map<String, Object> ngrokConfig = ngrokInstaller.getNgrokConfig(javaNgrokConfigV3Tmp.getConfigPath(), true, javaNgrokConfigV3Tmp.getNgrokVersion());  // THEN "<AssertPlaceHolder>"; assertEquals(2, ngrokConfig.size()); assertTrue(Files.exists(javaNgrokConfigV3Tmp.getConfigPath())); }
[*] target: assertNotNull(ngrokConfig)
[-] pred: org. junit. Assert. assertNotNull ( ngrokConfig )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_greater_than_max_event_size_THEN_return_true() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize((thresholdConfig.getMaxEventSizeBytes() + 1) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isEventGreater)
[-] pred: org. junit. Assert. assertTrue ( isEventGreater )
************************************
[+] input: ColumnA_was_DELETE_BUT_Is_ColumnB_was_still_survive() { // given UserInfo columnA = this.getUserInfo("columnA"); List<PortfolioCard> aCards = new ArrayList<PortfolioCard>(); aCards.add(this.getPortfolioCard(1, columnA)); aCards.add(this.getPortfolioCard(2, columnA)); aCards.add(this.getPortfolioCard(3, columnA));  UserInfo columnB = this.getUserInfo("columnB"); List<PortfolioCard> bCards = new ArrayList<PortfolioCard>(); bCards.add(this.getPortfolioCard(4, columnB)); bCards.add(this.getPortfolioCard(5, columnB)); bCards.add(this.getPortfolioCard(6, columnB));  // when this.saveUserInfo(columnA); this.savePortfolioCards(aCards); this.saveUserInfo(columnB); this.savePortfolioCards(bCards);  this.portfolioCardRepository.deleteByName(columnA.getName());  List<PortfolioCard> resultA = this.portfolioCardRepository.findByName(columnA.getName()); List<PortfolioCard> resultB = this.portfolioCardRepository.findByName(columnB.getName());  // then "<AssertPlaceHolder>"; assertEquals(resultB.size(), bCards.size()); }
[*] target: assertTrue(resultA.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( resultA. isEmpty ( ) )
************************************
[+] input: testRawToArrayMsgTest() { val msg = "[CQ:at,qq=1122334455]测试消息1[CQ:face,id=1]测试消息2[CQ:video,file=https://test.com/1.mp4][CQ:image,file=test1.image,url=https://test.com/1.jpg]\n[CQ:image,file=test2.image,url=https://test.com/2.jpg]"; val expected = Arrays.asList( new ArrayMsg().setType(MsgTypeEnum.at).setData(Map.of("qq", "1122334455")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息1")), new ArrayMsg().setType(MsgTypeEnum.face).setData(Map.of("id", "1")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息2")), new ArrayMsg().setType(MsgTypeEnum.video).setData(Map.of("file", "https://test.com/1.mp4")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test1.image", "url", "https://test.com/1.jpg")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "\n")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test2.image", "url", "https://test.com/2.jpg")) ); val actual = ShiroUtils.rawToArrayMsg(msg); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?keywordType=locationName&keyword=location&page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: testManifestNoChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls");  Properties properties = new Properties(); properties.put(tempFolder.relativize(bar.toPath()).toString(), "7cada13b5b8770e46f7a69e8856abdb9"); properties.put(tempFolder.relativize(foo.toPath()).toString(), "61bbd2d58c22dfb3c664829ad116f7e9");  File manifest = tempFolder.resolve("manifest.props").toFile(); try (FileOutputStream fis = new FileOutputStream(manifest)) { properties.store(fis, "Schema Manifest"); }  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
[+] input: serialize_WithArray_ReturnsCorrectJson() { // Test for serializing an array GenericRecord record = new GenericData.Record(SCHEMA); record.put("alternateIds", new GenericData.Array<>(SCHEMA.getField("alternateIds").schema(), java.util.Arrays.asList("one", "two", "three")));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": ["one", "two", "three"], "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: repeatUnderLimit() { int limit = 55; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p2", "p3", 1234); assertFalse(throttle.isCommandThrottled(command)); command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
[*] target: assertFalse(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertFalse ( throttle. isCommandThrottled ( command ) )
************************************
[+] input: itShouldBuildAModernChatRequestWithLastSeen() { KoLConstants.RNG.setSeed(42);  creq = new ChatRequest(0L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.7275636800328681&j=1&lasttime=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.6832234717598454&j=1&lasttime=8675309"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
[+] input: shouldBuildErrorCodeNoExpression() { Message message = errorCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Error code cannot be an expression."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: setSafeDistance() { int safeDistance = 1; SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); chain.setSafeDistance(safeDistance); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(safeDistance, chain.getSafeDistance())
[-] pred: org. junit. Assert. assertEquals ( safeDistance, chain. getSafeDistance() )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test02() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("Felix Gilioli"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 2, quantidadeLetrasMaiusculas )
************************************
[+] input: Exception { Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); } }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
[+] input: testAddAndGet() { String taskUuid = UUID.randomUUID().toString(); TaskEntity task = TaskEntity.builder() .taskStatus(TaskStatus.CREATED).retryNum(0).taskUuid(taskUuid).stepId(1L).build(); taskMapper.addTask(task); TaskEntity db2Memory = taskMapper.findTaskById(task.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(task, db2Memory)
[-] pred: org. junit. Assert. assertEquals ( task, db2Memory )
************************************
[+] input: getChangeAddressFromAccountPrivateKey_byNetwork() { String accountPrivateKey = "a83aa0356397602d3da7648f139ca06be2465caef14ac4d795b17cdf13bd0f4fe9aac037f7e22335cd99495b963d54f21e8dae540112fe56243b287962da366fd4016f4cfb6d6baba1807621b4216d18581c38404c4768fe820204bef98ba706"; String changeAddress0 = "addr_test1qpqwpvc7946mqvl0mwwhqgmh6w4a6335mkuypjyg9fd5elsl5mr3vkp82y2kcwxxtu4zjcxvm80ttmx2hyeyjka4v8psy8w5eh";  Account account = new Account(Networks.testnet(), HexUtil.decodeHexString(accountPrivateKey));  assertNotNull(account.changeAddress()); assertNotNull(account.privateKeyBytes()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(changeAddress0, account.changeAddress())
[-] pred: org. junit. Assert. assertEquals ( changeAddress0, account. changeAddress ( ) )
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUnique_setDeletedToFalseAndAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); String testDatasetName = testDataset.getName(); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg()); when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(testDatasetName.length() + 37, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
[+] input: setInstanceId() { String instanceId = MockIdGenerator.INSTANCE.generateAsString(); MachineProperties properties = new MachineProperties(); properties.setInstanceId(instanceId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(instanceId, properties.getInstanceId())
[-] pred: org. junit. Assert. assertEquals ( instanceId, properties. getInstanceId() )
************************************
[+] input: setTimestampBit() { int timestampBit = 45; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setTimestampBit(timestampBit); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(timestampBit, idDefinition.getTimestampBit())
[-] pred: org. junit. Assert. assertEquals ( timestampBit, idDefinition. getTimestampBit() )
************************************
[+] input: registerLogicalTypeConverter_WithLogicalType_ConvertsValueUsingConverter() { GenericRecord record = new GenericData.Record(SCHEMA); record.put("lastUpdated", Instant.ofEpochMilli(1685483879));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": 1970-01-20T12:11:23.879Z, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: testCreateIndexByMap() { // 演示通过自定义map创建索引,最为灵活,若我提供的创建索引API不能满足时可用此方法 LambdaEsIndexWrapper<Document> wrapper = new LambdaEsIndexWrapper<>(); wrapper.indexName(Document.class.getSimpleName().toLowerCase()); wrapper.settings(3, 2); Map<String, Object> map = new HashMap<>(); Map<String, Object> prop = new HashMap<>(); Map<String, String> field = new HashMap<>(); field.put("type", FieldType.KEYWORD.getType()); prop.put("this_is_field", field); map.put("properties", prop); wrapper.mapping(map); boolean isOk = documentMapper.createIndex(wrapper); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isOk)
[-] pred: org. junit. Assert. assertTrue ( isOk )
************************************
[+] input: shouldBuildCallActivityNoCalledElementHint() { Message message = MessageFactory.callActivityNoCalledElementHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildErrorCode() { Message message = MessageFactory.errorCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Error code is transformed from 'old' to 'new'. Please review."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: serialize_WithCircularReference_ReturnsErrorMessage() { // Test for circular reference handling GenericRecord record1 = new GenericData.Record(SCHEMA); record1.put("nested", record1);  String expectedErrorMessage = "{"nested":  ">>> CIRCULAR REFERENCE CANNOT BE PUT IN JSON STRING, ABORTING RECURSION <<<" , "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedErrorMessage, json)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, json )
************************************
[+] input: getPrefetchWorker() { SegmentIdProperties.Chain chain = new SegmentIdProperties.Chain(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(chain.getPrefetchWorker())
[-] pred: org. junit. Assert. assertNotNull ( chain. getPrefetchWorker() )
************************************
[+] input: testSuma1() { int res = Calculadora.suma(2, 3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, res)
[-] pred: org. junit. Assert. assertEquals ( 5, res )
************************************
[+] input: appendTest() { ShuffleBuffer shuffleBuffer = new ShuffleBuffer(100); shuffleBuffer.append(createData(10)); assertEquals(42, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(26)); assertEquals(100, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(1)); assertEquals(133, shuffleBuffer.getSize()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(shuffleBuffer.isFull())
[-] pred: org. junit. Assert. assertTrue ( shuffleBuffer. isFull() )
************************************
[+] input: testMultiplica6() { int algo = 4; int res = Calculadora.multiplica(0, algo); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
[+] input: getDataset_whenIdIsValid_getDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); DatasetViewModel dataset = datasetService.getDataset(DATASET_ID, false);  //Then "<AssertPlaceHolder>"; assertEquals(testDataset.getId(), dataset.getId()); assertEquals(testDataset.getName(), dataset.getName()); assertEquals(testDataset.getShortDescription(), dataset.getShortDescription()); assertEquals(testDataset.isDeleted(), dataset.isDeleted()); assertNull(dataset.getDeleteTime()); assertEquals(0, dataset.getProjectCount());  verify(datasetRepositoryMock).findById(anyString()); verify(datasetRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(datasetRepositoryMock); }
[*] target: assertNotNull(dataset)
[-] pred: org. junit. Assert. assertNotNull ( dataset )
************************************
[+] input: IOException { final String expected = new UUID(0L, 0L).toString(); writeStringToFile(expected, TracingAttributes.getServiceIdFilePath(fileSystem, APP_NAME)); final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.SERVICE_INSTANCE_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldValidateNamespaceOwnerOfConnectCluster() { Namespace namespace = Namespace.builder() .metadata(Metadata.builder() .name("myNamespace") .cluster("local") .build()) .spec(Namespace.NamespaceSpec.builder() .build()) .build();  when(aclService.isNamespaceOwnerOfResource(any(), any(), any())) .thenReturn(true);  boolean actual = connectClusterService.isNamespaceOwnerOfConnectCluster(namespace, "prefix.connect-cluster");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: IOException { final byte[] key1 = new byte[]{-64, 0, -64, 0}; final byte[] key2 = new byte[]{0}; final byte[] key3 = new byte[]{64, 64, 64, 64}; final byte[] key4 = new byte[]{126, 126, 126, 126};  final DataClass data1 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data2 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data3 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data4 = new DataClass(UUID.randomUUID().toString(), random.nextInt());  processorState.put(key3, data3); processorState.put(key4, data4); processorState.put(key1, data1); processorState.put(key2, data2);  final List<String> values = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 0);  final List<String> values2 = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 1);  assertEquals(2, values.size()); "<AssertPlaceHolder>"; assertTrue(values.containsAll(Arrays.asList( data1.stringVal, data2.stringVal ))); assertTrue(values2.containsAll(Arrays.asList( data3.stringVal, data4.stringVal ))); }
[*] target: assertEquals(2, values2.size())
[-] pred: org. junit. Assert. assertEquals ( 2, values2. size ( ) )
************************************
[+] input: Exception { //given Statement statement = new Statement();  List<Performance> performances = new ArrayList<>(); performances.add(new Performance("hamlet",55)); performances.add(new Performance("as-like",35)); performances.add(new Performance("othello",40)); Invoice invoice = new Invoice("BigCo", performances);  Map<String, Play> playMap = new HashMap<>(); playMap.put("hamlet", new Play("hamlet", PlayType.TRAGEDY)); playMap.put("as-like", new Play("As You Like It", PlayType.COMEDY)); playMap.put("othello", new Play("Othello", PlayType.TRAGEDY)); Plays plays = new Plays(playMap);  String answer = "청구내역 (고객명: BigCo)\n" + "hamlet: $650 55석\n" + "As You Like It: $580 35석\n" + "Othello: $500 40석\n" + "총액: $1730\n" + "적립 포인트: 47점"; //when String result = statement.statement(invoice, plays); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: testCreateLevel_success() { // 准备参数 MemberLevelCreateReqVO reqVO = randomPojo(MemberLevelCreateReqVO.class, o -> { o.setDiscountPercent(randomInt()); o.setIcon(randomURL()); o.setBackgroundUrl(randomURL()); o.setStatus(randomCommonStatus()); });  // 调用 Long levelId = levelService.createLevel(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberLevelDO level = memberlevelMapper.selectById(levelId); assertPojoEquals(reqVO, level); }
[*] target: assertNotNull(levelId)
[-] pred: org. junit. Assert. assertNotNull ( levelId )
************************************
[+] input: shouldCallTheArrayMatcherIfTheTwoObjectAreArray() { final var array1 = new ArrayNode(null); final var array2 = new ArrayNode(null);  final var arrayMatcher = (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( arrayMatcher, (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class), (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class) ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(arrayMatcher.jsonDiff(path, array1, array2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, array1, array2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
[+] input: testDivide2() { int algo = 7; int res = Calculadora.divide(algo, 1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
[+] input: testGetVersionsShouldReturnOnlyRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_2_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2), actual); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: shouldCompareEqualArraysAsZero() { // given final OffsetDateTime date = OffsetDateTime.of(2023, 10, 5, 15, 50, 0, 0, ZoneOffset.of("+02:00"));  final OffsetDateTime sameDate = OffsetDateTime.of(2023, 10, 5, 15, 50, 0, 0, ZoneOffset.of("+02:00"));  final ExpandableArrayBuffer dateKeyBuffer = new ExpandableArrayBuffer(); dateKeyBuffer.putLong(0, date.toInstant().toEpochMilli(), ZeebeDbConstants.ZB_DB_BYTE_ORDER);  final ExpandableArrayBuffer sameDateKeyBuffer = new ExpandableArrayBuffer(); sameDateKeyBuffer.putLong( 0, sameDate.toInstant().toEpochMilli(), ZeebeDbConstants.ZB_DB_BYTE_ORDER);  final Bytes dateBytes = Bytes.fromExpandableArrayBuffer(dateKeyBuffer); final Bytes sameDateBytes = Bytes.fromExpandableArrayBuffer(sameDateKeyBuffer);  // when final int result = dateBytes.compareTo(sameDateBytes);  // then Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: test() { CombinationIterator testObject = new CombinationIterator("abc", 2); assertEquals("ab", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("ac", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("bc", testObject.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
[+] input: testCreateCouponTemplate_success() { // 准备参数 CouponTemplateCreateReqVO reqVO = randomPojo(CouponTemplateCreateReqVO.class, o -> o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()) .setValidityType(randomEle(CouponTemplateValidityTypeEnum.values()).getType()) .setDiscountType(randomEle(PromotionDiscountTypeEnum.values()).getType()));  // 调用 Long couponTemplateId = couponTemplateService.createCouponTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CouponTemplateDO couponTemplate = couponTemplateMapper.selectById(couponTemplateId); assertPojoEquals(reqVO, couponTemplate); }
[*] target: assertNotNull(couponTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( couponTemplateId )
************************************
[+] input: testCompileAndEvaluateWithConstants() { boolean result = SimpleProposition.compileAndEvaluate("1 == 1", null); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: setSpinThreshold() { int spinThreshold = 100; MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); clockBackwards.setSpinThreshold(spinThreshold); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(spinThreshold, clockBackwards.getSpinThreshold())
[-] pred: org. junit. Assert. assertEquals ( spinThreshold, clockBackwards. getSpinThreshold() )
************************************
[+] input: should_support_query_without_parameters() { SQLQueryRequest requestWithNoParams = SQLQueryRequestBuilder.request("SELECT 1").params(Map.of()).build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(requestWithNoParams.isSupported())
[-] pred: org. junit. Assert. assertTrue ( requestWithNoParams. isSupported ( ) )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test05() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("FELIX"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeLetrasMaiusculas )
************************************
[+] input: isAccessTokenExpired() {  long expirationTime = System.currentTimeMillis() - 62 * 60 *1000L; String token = UUID.randomUUID().toString(); String userId = UUID.randomUUID().toString(); String payload = accessTokenService.generatePayload(userId,expirationTime); String signature = accessTokenService.generateSignature(payload); String signedToken = token + "." +payload + "." + signature; PayloadDTO payloadDTO = generatePayloadDTO(signedToken); boolean result = accessTokenService .isAccessTokenExpired(payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testIterator() { Set<DataSource> dataSourceSet = new HashSet<>(); dataSourceSet.add(new DataSource("prometheus", DataSourceType.PROMETHEUS, storageEngine)); dataSourceSet.add(new DataSource("opensearch", DataSourceType.OPENSEARCH, storageEngine)); Set<DataSourceMetadata> dataSourceMetadata = dataSourceSet.stream() .map( dataSource -> new DataSourceMetadata.Builder() .setName(dataSource.getName()) .setConnector(dataSource.getConnectorType()) .setProperties(ImmutableMap.of("prometheus.uri", "localhost:9200")) .build()) .collect(Collectors.toSet()); when(dataSourceService.getDataSourceMetadata(false)).thenReturn(dataSourceMetadata);  assertFalse(dataSourceTableScan.hasNext()); dataSourceTableScan.open(); assertTrue(dataSourceTableScan.hasNext()); Set<ExprValue> exprTupleValues = new HashSet<>(); while (dataSourceTableScan.hasNext()) { exprTupleValues.add(dataSourceTableScan.next()); }  Set<ExprValue> expectedExprTupleValues = new HashSet<>(); for (DataSource dataSource : dataSourceSet) { expectedExprTupleValues.add( new ExprTupleValue( new LinkedHashMap<>( ImmutableMap.of( "DATASOURCE_NAME", ExprValueUtils.stringValue(dataSource.getName()), "CONNECTOR_TYPE", ExprValueUtils.stringValue(dataSource.getConnectorType().name()))))); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedExprTupleValues, exprTupleValues)
[-] pred: org. junit. Assert. assertEquals ( expectedExprTupleValues, exprTupleValues )
************************************
[+] input: shouldBuildCandidateGroups() { Message message = MessageFactory.candidateGroups(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUniqueAndNameIsMoreThan89Chars_setDeletedToFalseAndCutTheNameTo89CharsAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua"); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(126, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: shouldBuildScript() { Message message = MessageFactory.script(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: setShutdownHook() { SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setShutdownHook(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(prefetchWorker.isShutdownHook())
[-] pred: org. junit. Assert. assertFalse ( prefetchWorker. isShutdownHook() )
************************************
[+] input: testCreateUserGroup_success() { // 准备参数 BpmUserGroupSaveReqVO reqVO = RandomUtils.randomPojo(BpmUserGroupSaveReqVO.class);  // 调用 Long userGroupId = userGroupService.createUserGroup(reqVO); // 断言 Assertions."<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmUserGroupDO userGroup = userGroupMapper.selectById(userGroupId); AssertUtils.assertPojoEquals(reqVO, userGroup); }
[*] target: assertNotNull(userGroupId)
[-] pred: org. junit. Assert. assertNotNull ( userGroupId )
************************************
[+] input: shouldBuildConditionExpressionFeel() { String oldExpression = random(); String newExpression = random(); Message message = conditionExpressionFeel(oldExpression, newExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "FEEL Condition expression: Please review transformed expression: '%s' -> '%s'. Check for custom FEEL functions as they are not supported by Zeebe.", oldExpression, newExpression); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: test() { NestedIterator testObject = new NestedIterator(null); assertFalse(testObject.hasNext()); "<AssertPlaceHolder>"; }
[*] target: assertNull(testObject.next())
[-] pred: org. junit. Assert. assertNull ( testObject. next() )
************************************
[+] input: testSize() { assertEquals(0, ringArray.size()); ringArray.update(1, false); assertEquals(1, ringArray.size()); ringArray.update(2, true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, ringArray.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ringArray. size() )
************************************
[+] input: testGivenPersonDTOThenReturnSavedMessage() { PersonDTO personDTO = createFakeDTO(); Person expectedSavedPerson = createFakeEntity();  when(personMapper.toModel(personDTO)).thenReturn(expectedSavedPerson); when(personRepository.save(any(Person.class))).thenReturn(expectedSavedPerson); //        when(personRepository.save(any(Person.class))) //                .thenReturn(expectedSavedPerson);  MessageResponseDTO expectedMessage = createExpectedResponse(expectedSavedPerson.getId()); MessageResponseDTO successMessage = personService.createPerson(personDTO);  "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedMessage, successMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, successMessage )
************************************
[+] input: getMaior_test01() { int maior = Calculadora.getMaior(20, 10); "<AssertPlaceHolder>"; }
[*] target: assertEquals(20, maior)
[-] pred: org. junit. Assert. assertEquals ( 20, maior )
************************************
[+] input: setInitCosidTableSql() { String initCosidTableSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setInitCosidTableSql(initCosidTableSql); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(initCosidTableSql, jdbc.getInitCosidTableSql())
[-] pred: org. junit. Assert. assertEquals ( initCosidTableSql, jdbc. getInitCosidTableSql() )
************************************
[+] input: create() { ClassLoader classLoader = getClass().getClassLoader(); TestPlugin testPlugin = (TestPlugin) pluginClassInitializer.create("io.fairyproject.plugin.initializer.TestPlugin", classLoader);  "<AssertPlaceHolder>"; assertSame(testPlugin.getClass().getClassLoader(), classLoader); }
[*] target: assertNotNull(testPlugin)
[-] pred: org. junit. Assert. assertNotNull ( testPlugin )
************************************
[+] input: execute_with_cursor() { List<ExprValue> expected = Arrays.asList( tupleValue(of("name", "John", "age", 20)), tupleValue(of("name", "Allen", "age", 30))); var plan = new FakePhysicalPlan(expected.iterator()); when(protector.protect(plan)).thenReturn(plan);  OpenSearchExecutionEngine executor = new OpenSearchExecutionEngine(client, protector, new PlanSerializer(null)); List<ExprValue> actual = new ArrayList<>(); executor.execute( plan, new ResponseListener<>() { @Override public void onResponse(QueryResponse response) { actual.addAll(response.getResults()); assertTrue(response.getCursor().toString().startsWith("n:")); }  @Override public void onFailure(Exception e) { fail("Error occurred during execution", e); } });  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ParseTreeCompositeException { final ParseTree expected = mock(DataPrepperExpressionParser.ExpressionContext.class); doReturn(expected).when(parser).expression();  ParseTree parseTree = parseTreeParser.parse(VALID_STATEMENT); assertThat(parseTree, is(expected));  parseTree = parseTreeParser.parse(VALID_STATEMENT); "<AssertPlaceHolder>";  verify(errorListener).isErrorFound();  // Verify parser.expression() called 1 time verify(parser).expression(); }
[*] target: assertThat(parseTree, is(expected))
[-] pred: org. junit. Assert. assertThat ( parseTree, is ( expected ) )
************************************
[+] input: testFinalPositionOfSnakeInvalidCommands() { List<String> commands = List.of("DOWN", "RIGHT", "JUMP", "LEFT", "UP", "DOWN", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
[+] input: createsEmptyList() { final TodoList todoList = new TodoList(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, todoList. size() )
************************************
[+] input: equals_true_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: testAsUriNoVersionShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = UNVERSIONED_CERT_ENTITY_ID_1;  //when final URI actual = underTest.asUriNoVersion(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: setManual() { MachineProperties.Manual manual = new MachineProperties.Manual(); MachineProperties.Distributor distributor = new MachineProperties.Distributor(); distributor.setManual(manual); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(manual, distributor.getManual())
[-] pred: org. junit. Assert. assertEquals ( manual, distributor. getManual() )
************************************
[+] input: ensureFreeSpace_underLimit() { File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile);  when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES - 1); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace(); "<AssertPlaceHolder>"; verify(fileUtils, never()).safeDelete(any()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeenAndAFK() { creq = new ChatRequest(0L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
[+] input: testGetExpression_allDeptDataPermission() { try (MockedStatic<SecurityFrameworkUtils> securityFrameworkUtilsMock = mockStatic(SecurityFrameworkUtils.class)) { // 准备参数 String tableName = "t_user"; Alias tableAlias = new Alias("u"); // mock 方法（LoginUser） LoginUser loginUser = randomPojo(LoginUser.class, o -> o.setId(1L) .setUserType(UserTypeEnum.ADMIN.getValue())); securityFrameworkUtilsMock.when(SecurityFrameworkUtils::getLoginUser).thenReturn(loginUser); // mock 方法（DeptDataPermissionRespDTO） DeptDataPermissionRespDTO deptDataPermission = new DeptDataPermissionRespDTO().setAll(true); when(permissionApi.getDeptDataPermission(same(1L))).thenReturn(deptDataPermission);  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; assertSame(deptDataPermission, loginUser.getContext(DeptDataPermissionRule.CONTEXT_KEY, DeptDataPermissionRespDTO.class)); } }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
[+] input: testSuma4() { int res = Calculadora.suma(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
[+] input: setEnabled() { CosIdProperties properties = new CosIdProperties(); properties.setEnabled(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(properties.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( properties. isEnabled() )
************************************
[+] input: testGetTableList() { // 准备参数 Long dataSourceConfigId = randomLongId(); // mock 方法 DataSourceConfigDO dataSourceConfig = new DataSourceConfigDO().setUsername("sa").setPassword("") .setUrl("jdbc:h2:mem:testdb"); when(dataSourceConfigService.getDataSourceConfig(eq(dataSourceConfigId))) .thenReturn(dataSourceConfig);  // 调用 List<TableInfo> tables = databaseTableService.getTableList(dataSourceConfigId, "config", "参数"); // 断言 "<AssertPlaceHolder>"; assertTableInfo(tables.get(0)); }
[*] target: assertEquals(1, tables.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tables. size ( ) )
************************************
[+] input: shouldBuildInputOutputParameter() { Message message = MessageFactory.inputOutputParameter(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalSexoConverter converter = new AnimalSexoConverter(); String s = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
[+] input: searchStepByName() { var steps = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, steps.size()); Assertions.assertTrue(steps.stream().allMatch( step -> CONNECTOR_2.equalsIgnoreCase(step.getName()))); }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
[+] input: testContainsNameShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsName(KEY_NAME_1);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: repeatCommand() { int limit = 25; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
[*] target: assertTrue(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertTrue ( throttle. isCommandThrottled ( command ) )
************************************
[+] input: testRemove() { User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created);  boolean exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions.assertTrue(exists);  entityRepositoryJpa.remove(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>";  }
[*] target: assertFalse(exists)
[-] pred: org. junit. Assert. assertFalse ( exists )
************************************
[+] input: testDense() { float[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  FloatSparseNdArray instance = new FloatSparseNdArray(indices, values, DimensionalSpace.create(shape)); FloatNdArray denseInstance = instance.toDense(); FloatNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: whenObjectNotFoundExceptionThenReturnAResponseEntity() { ResponseEntity<StandardError> response = ecxeptionHandler .objectNotFound( new ObjectNotFoundException(OBJETO_NAO_ENCONTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(OBJETO_NAO_ENCONTRADO, response.getBody().getError()); assertEquals(404, response.getBody().getStatus()); assertNotEquals("/user/2", response.getBody().getPath()); assertNotEquals(LocalDateTime.now(), response.getBody().getTimestamp()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: 사용자_포털_메인_예약목록_조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  Map<String, Collection<ReserveItemMainResponseDto>> responseBody = webTestClient.get() .uri(API_URL+"/latest/3") .exchange() .expectStatus().isOk() .expectBody(new ParameterizedTypeReference<Map<String, Collection<ReserveItemMainResponseDto>>>() { }) .returnResult().getResponseBody();  assertThat(responseBody.keySet().size()).isEqualTo(1); assertThat(responseBody.keySet().contains(category.getCodeId())).isTrue(); Collection<ReserveItemMainResponseDto> reserveItemMainResponseDtos = responseBody.get(category.getCodeId()); reserveItemMainResponseDtos.stream().forEach(reserveItemMainResponseDto -> { assertThat(reserveItemMainResponseDto.getReserveItemName().equals(saved.getReserveItemName())); }); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: scanAnnotationDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.annotation.entity"}, AnnotationDefinitionParser.INSTANCE, registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(LongIdEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(MissingIdGenEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(MissingIdGenEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(PrimitiveLongIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(PrimitiveLongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(IntIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(IntIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(StringIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(StringIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(ChildEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass()); }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
[+] input: IOException { final String machineId = "9bcc0df29af9454298607489a54040e2"; writeStringToFile(machineId, TracingAttributes.MACHINE_ID_FILE_PATH); final TracingAttributes attributes = instance(); final String actual = attributes.get(TracingAttributes.MACHINE_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(machineId, actual)
[-] pred: org. junit. Assert. assertEquals ( machineId, actual )
************************************
[+] input: shouldBuildCorrelationKeyHint() { Message message = MessageFactory.correlationKeyHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.delete(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: NoSuchAlgorithmException { var originalData = "12345678910!".repeat(1000); var responseInputStream = originalData.getBytes(StandardCharsets.UTF_16);   var md5Hash = MessageDigest.getInstance("MD5").digest(responseInputStream);  var expectedDigestString = Base64.getEncoder().encodeToString(md5Hash);  var checksum = new Md5Checksum().getChecksum(responseInputStream); var digest = checksum.getChecksum();  "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedDigestString, digest)
[-] pred: org. junit. Assert. assertEquals ( expectedDigestString, digest )
************************************
[+] input: whenUpdateThenReturnSuccess() { when(service.update(userDTO)).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.update(ID, userDTO);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.OK, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testContainsEntityShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: serialize_WithFloatInfinityValue_ReturnsQuotedJson() { // Test for serializing float Infinity value GenericRecord record = new GenericData.Record(SCHEMA); record.put("floatValue", Float.POSITIVE_INFINITY);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": "Infinity", "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnArg", String.class);  "<AssertPlaceHolder>";  String arg = "Hello World"; assertEquals(arg, method.invoke(obj, arg)); }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(null, headers, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
[+] input: itShouldHaveExpectedValuesForParameterizedConstructor() { ChatMessage testMessage = new ChatMessage("sender", "recipient", "content", true); "<AssertPlaceHolder>"; assertNotNull(testMessage.getTimestamp()); assertTrue(testMessage.isAction()); assertEquals(testMessage.getSender(), "sender"); assertEquals(testMessage.getRecipient(), "recipient"); assertEquals(testMessage.getContent(), "content"); JSONObject jso = testMessage.toJSON(); assertNotNull(jso); String ep1 = "{"msg":"content","for":{"color":"black","name":"recipient","id":"recipient"},"time":"; String ep2 = Long.toString(testMessage.getDate().getTime() / 1000); String ep3 = ","type":"private","who":{"color":"black","name":"sender","id":"sender"}}"; assertEquals(jso.toString(), ep1 + ep2 + ep3); }
[*] target: assertNotNull(testMessage.getDate())
[-] pred: org. junit. Assert. assertNotNull ( testMessage. getDate() )
************************************
[+] input: shouldProperlyMapStudentToDto() { //given StudentModel studentModel = new StudentModel(); studentModel.setId(1L); studentModel.setName("Ivan");  LectureModel lectureModel = new LectureModel(); lectureModel.setId(2L); lectureModel.setName("Matan");  studentModel.setLectures(singletonList(lectureModel));  LecturerModel lecturerModel = new LecturerModel();  lecturerModel.setId(3L); lecturerModel.setName("Vladimir Kirillovich");  studentModel.setLecturers(singletonList(lecturerModel));  //when StudentDTO studentDTO = studentMapper.toDTO(studentModel);  //then "<AssertPlaceHolder>"; assertEquals(1L, studentDTO.getId()); assertEquals("Ivan", studentDTO.getName());  assertEquals(1, studentDTO.getLecturers().size()); assertEquals(2L, studentDTO.getLectures().get(0).getId()); assertEquals("Matan", studentDTO.getLectures().get(0).getName());  assertEquals(1, studentDTO.getLectures().size()); assertEquals(3L, studentDTO.getLecturers().get(0).getId()); assertEquals("Vladimir Kirillovich", studentDTO.getLecturers().get(0).getName()); }
[*] target: assertNotNull(studentDTO)
[-] pred: org. junit. Assert. assertNotNull ( studentDTO )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_greater_than_max_batch_size_THEN_return_true() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes()) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE + 1); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetBatchSize )
************************************
[+] input: testSerialize() { Language language = new Language("en", List.of("en_us", "en_gb")); String expectedSerializedLanguage = "en|en_us|en_gb";  String actualSerializedLanguage = this.composer.serialize(language).get(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSerializedLanguage, actualSerializedLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedSerializedLanguage, actualSerializedLanguage )
************************************
[+] input: testToSkytilsBase64() { List<WaypointCategory> waypointCategories = List.of(new WaypointCategory("category", "hub", List.of(new NamedWaypoint(BlockPos.ORIGIN, "waypoint", new float[]{0f, 0.5f, 1f}, 0.8f, false), new NamedWaypoint(new BlockPos(-1, 0, 1), "1", new float[]{0f, 0f, 0f}, true)))); String waypointCategoriesSkytilsBase64 = Waypoints.toSkytilsBase64(waypointCategories); String expectedWaypointCategoriesSkytilsBase64 = "eyJjYXRlZ29yaWVzIjpbeyJuYW1lIjoiY2F0ZWdvcnkiLCJpc2xhbmQiOiJodWIiLCJ3YXlwb2ludHMiOlt7Im5hbWUiOiJ3YXlwb2ludCIsImNvbG9yIjotODcyMzgyNDY1LCJlbmFibGVkIjpmYWxzZSwieCI6MCwieSI6MCwieiI6MH0seyJuYW1lIjoiMSIsImNvbG9yIjoyMTMwNzA2NDMyLCJlbmFibGVkIjp0cnVlLCJ4IjotMSwieSI6MCwieiI6MX1dfV19";  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWaypointCategoriesSkytilsBase64, waypointCategoriesSkytilsBase64)
[-] pred: org. junit. Assert. assertEquals ( expectedWaypointCategoriesSkytilsBase64, waypointCategoriesSkytilsBase64 )
************************************
[+] input: fromOptionValue_test() { LicenseTypeOptions licenseTypeOptions = LicenseTypeOptions.fromOptionValue("enterprise"); "<AssertPlaceHolder>"; assertThat(licenseTypeOptions.toString(), equalTo("ENTERPRISE")); }
[*] target: assertNotNull(licenseTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( licenseTypeOptions )
************************************
[+] input: shouldBuildCompletionCondition() { Message message = MessageFactory.completionCondition(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: fromOptionValue_items_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("items"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("ITEMS")); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
[+] input: IOException { when(buffer.getSize()).thenReturn(maxBytes.getBytes() - 1000); when(buffer.getEventCount()).thenReturn(maxEvents + 1); when(buffer.getDuration()).thenReturn(maxCollectionDuration.minusSeconds(1)); Boolean isBatchEnabled = false;  boolean isThresholdExceed = ThresholdCheck.checkThresholdExceed(buffer, maxEvents, maxBytes, maxCollectionDuration, isBatchEnabled);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isThresholdExceed)
[-] pred: org. junit. Assert. assertTrue ( isThresholdExceed )
************************************
[+] input: setClockBackwards() { MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); MachineProperties properties = new MachineProperties(); properties.setClockBackwards(clockBackwards); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(clockBackwards, properties.getClockBackwards())
[-] pred: org. junit. Assert. assertEquals ( clockBackwards, properties. getClockBackwards() )
************************************
[+] input: getAllProjects_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner("eforce21")).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService.getAllProjects();  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner("eforce21"); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner("eforce21"); }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
[+] input: test() { TreeNode root = new TreeNode(7); root.left = new TreeNode(3); root.right = new TreeNode(15); root.right.left = new TreeNode(9); root.right.right = new TreeNode(20); BSTIterator testObject = new BSTIterator(root); assertEquals(3, testObject.next()); assertEquals(7, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(9, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(15, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(20, testObject.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "squaredPrimitiveInt", Integer.class);  "<AssertPlaceHolder>";  int arg = 1000; assertEquals(arg * arg, method.invoke(obj, arg)); }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
[+] input: basicEvents() { StateMachineBuilder builder = StateMachine.builder(); builder.initialState(ExampleState.A); builder.state(ExampleState.A); builder.state(ExampleState.B);  AtomicBoolean startCalled = new AtomicBoolean(false); AtomicBoolean transitionCalled = new AtomicBoolean(false); AtomicBoolean stopCalled = new AtomicBoolean(false);  EventNode<StateMachineEvent> eventNode = builder.eventNode(); eventNode.addListener(StateMachineStartEvent.class, event -> startCalled.set(true)); eventNode.addListener(StateMachineTransitionEvent.class, event -> transitionCalled.set(true)); eventNode.addListener(StateMachineStopEvent.class, event -> stopCalled.set(true));  StateMachine stateMachine = builder.build();  Assertions.assertTrue(startCalled.get()); Assertions.assertFalse(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.transform(ExampleState.B);  Assertions.assertTrue(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.stop(Signal.UNDEFINED);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(stopCalled.get())
[-] pred: org. junit. Assert. assertTrue ( stopCalled. get ( ) )
************************************
[+] input: testContainsNameShouldReturnFalseWhenCalledWithNonExistingKey() { //given underTest.put(VERSIONED_KEY_ENTITY_ID_1_VERSION_1, key1Version1Mock);  //when final boolean actual = underTest.containsName(KEY_NAME_2);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: getQuantidadeLetrasMinusculas_test01() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("Felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 4, quantidadeLetrasMinusculas )
************************************
[+] input: shouldBuildErrorEventDefinition() { Message message = MessageFactory.errorEventDefinition(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testSecretVaultFakeShouldNeverBeNullWhenCalled() { //given final VaultFakeImpl underTest = new VaultFakeImpl(HTTPS_LOCALHOST);  //when final SecretVaultFake actual = underTest.secretVaultFake();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: save() { var request = OperationLogRequest.builder() .operatorUserId(-1000) .operatorUsername("ut") .operatorNickname("ut") .operationModule("system") .operationCode("updateEmail") .operationName("更新邮箱") .operationResponse(JsonData.ok()) .isSuccess(true) .involvedProjectId(null) .involvedGroupId(null) .involvedUserId(null) .build(); Long id = operationLogService.save(request); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: testGetWorkflowNames6() { List<String> names = NextflowScript.getWorkflowNames("workflow PLINK_TO_VCF{ some content }"); "<AssertPlaceHolder>"; assertEquals("PLINK_TO_VCF", names.get(0)); }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
[+] input: setSessionTimeout() { Duration sessionTimeout = Duration.ofSeconds(10); CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setSessionTimeout(sessionTimeout); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(sessionTimeout, properties.getSessionTimeout())
[-] pred: org. junit. Assert. assertEquals ( sessionTimeout, properties. getSessionTimeout() )
************************************
[+] input: test_objectFileName() { final String namePattern = "my-elb-%{yyyy-MM-dd'T'hh-mm-ss}";  when(objectKeyOptions.getNamePattern()).thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; assertThat(objectFileName, startsWith("my-elb")); }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
[+] input: statSnowflakeId() { var snowflakeId = new MillisecondSnowflakeId(0); var stat = snowflakeId.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(SnowflakeIdStat.class)); var snowflakeIdStat = (SnowflakeIdStat) stat; assertThat(snowflakeIdStat.getMachineId(), equalTo(0)); }
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
[+] input: IOException { File tempDir = createTempDir(); FileUtil.deleteDirContents(tempDir); "<AssertPlaceHolder>"; assertEquals(0, tempDir.listFiles().length); }
[*] target: assertTrue(tempDir.exists())
[-] pred: org. junit. Assert. assertTrue ( tempDir. exists ( ) )
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithNull() { //given  //when final VaultModel actual = underTest.convert(null);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: NoSuchAlgorithmException { RSA rsa = new RSA(); "<AssertPlaceHolder>"; Base64.Encoder encoder = Base64.getEncoder(); System.out.println("publicKey:" + encoder.encodeToString(rsa.getPublicKey())); }
[*] target: assertNotNull(rsa.getPublicKey())
[-] pred: org. junit. Assert. assertNotNull ( rsa. getPublicKey() )
************************************
[+] input: testCreateOAuth2Client_success() { // 准备参数 OAuth2ClientSaveReqVO reqVO = randomPojo(OAuth2ClientSaveReqVO.class, o -> o.setLogo(randomString())) .setId(null); // 防止 id 被赋值  // 调用 Long oauth2ClientId = oauth2ClientService.createOAuth2Client(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 OAuth2ClientDO oAuth2Client = oauth2ClientMapper.selectById(oauth2ClientId); assertPojoEquals(reqVO, oAuth2Client, "id"); }
[*] target: assertNotNull(oauth2ClientId)
[-] pred: org. junit. Assert. assertNotNull ( oauth2ClientId )
************************************
[+] input: readContainerNameInvalid() { final String hostnameThatIsNotPodName = "generic-hostname"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsNotPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_CONTAINER_NAME); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testConstructor() { String message = "This is the message"; String body = "This is the body"; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=This is the body}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
[+] input: testCreateDiyTemplate_success() { // 准备参数 DiyTemplateCreateReqVO reqVO = randomPojo(DiyTemplateCreateReqVO.class);  // 调用 Long diyTemplateId = diyTemplateService.createDiyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyTemplateDO diyTemplate = diyTemplateMapper.selectById(diyTemplateId); assertPojoEquals(reqVO, diyTemplate); }
[*] target: assertNotNull(diyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( diyTemplateId )
************************************
[+] input: getQuantidadeLetrasMinusculas_test07() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeLetrasMinusculas )
************************************
[+] input: getSessionTimeout() { Duration sessionTimeout = Duration.ofSeconds(60); CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(sessionTimeout, properties.getSessionTimeout())
[-] pred: org. junit. Assert. assertEquals ( sessionTimeout, properties. getSessionTimeout() )
************************************
[+] input: testAsUriWithQueryShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3; final String query = "?query=1";  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP, query);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + query; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: setEnabled() { CosIdGeneratorProperties properties = new CosIdGeneratorProperties(); properties.setEnabled(true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
[+] input: setSuffix() { String suffix = "test"; IdConverterDefinition definition = new IdConverterDefinition(); definition.setSuffix(suffix); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(suffix, definition.getSuffix())
[-] pred: org. junit. Assert. assertEquals ( suffix, definition. getSuffix() )
************************************
[+] input: emptyIsCorrect() { Set<Integer> testSet = Empty.apply();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(testSet.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( testSet. isEmpty() )
************************************
[+] input: 관리자목록조회_성공() {  ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  webTestClient.method(HttpMethod.GET) .uri(API_URL+"?page=0&size=3&isUse=false") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].reserveItemName").isEqualTo(reserveItem.getReserveItemName()); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: testResta3() { int algo = 8; int res = Calculadora.resta(algo, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
[+] input: testFinalPositionOfSnakeOnlyLeft() { List<String> commands = List.of("LEFT", "LEFT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: testCancelOrder() { when(mockOrderRequest.originOrderId()).thenReturn("order1"); manager.submitOrder(mockOrderRequest); boolean result = manager.cancelOrder("order1"); "<AssertPlaceHolder>"; Map<String, OrderRequest> orderMap = manager.orderMap; assertEquals(0, orderMap.size()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testExportActiveShouldReturnFullResponseWhenCalledOnRunningServer() { //given final String expected = "value"; final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(expected)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK);  //when final String actual = underTest.exportActive();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/export", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildMap() { Message message = MessageFactory.map(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: allArgsConstructorAndGetter() { Especie especie = new Especie(1, "nome-especie"); assertEquals(1, especie.getIdEspecie()); "<AssertPlaceHolder>"; assertEquals("nome-especie", especie.getNome()); }
[*] target: assertEquals(1, especie.getId())
[-] pred: org. junit. Assert. assertEquals ( 1, especie. getId ( ) )
************************************
[+] input: shouldBuildCalledElement() { Message message = MessageFactory.calledElement(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldReturnFalseWhenNotExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(false);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(existWaitingProduct)
[-] pred: org. junit. Assert. assertFalse ( existWaitingProduct )
************************************
[+] input: test() { try { final int status = -1; final String testExitMessage = "testExitMessage"; try { ExitUtils.disableSystemExit(); ExitUtils.terminate(status, testExitMessage, null, null); fail(); } catch (ExitException e) { "<AssertPlaceHolder>"; assertEquals(testExitMessage, e.getMessage()); }  final Thread t = new Thread(null, () -> { throw new AssertionError("TestUncaughtException"); }, "testThread"); t.start(); t.join(); } catch (Exception e) { e.printStackTrace(); fail(); }  }
[*] target: assertEquals(status, e.getStatus())
[-] pred: org. junit. Assert. assertEquals ( status, e. getStatus() )
************************************
[+] input: getCreateTableSql() {  PostgreSqlDriver postgreSqlDriver = new PostgreSqlDriver(); String tableDDL = postgreSqlDriver.getCreateTableSql(table); String expect = "CREATE TABLE "public"."user" (\n" + "\t"id" BIGINT NOT NULL,\n" + "\t"username" VARCHAR(255) NOT NULL,\n" + "\t"password" VARCHAR(255) NOT NULL,\n" + "\t"email" VARCHAR(255) NOT NULL,\n" + "\t"phone" VARCHAR(20) NOT NULL,\n" + "\t"age" INT,\n" + "\t"gender" BOOLEAN,\n" + "\t"height" DECIMAL(5,2),\n" + "\t"birthday" DATE,\n" + "\t"register_time" TIMESTAMP NOT NULL, \n" + "\tPRIMARY KEY ("id")\n" + ");\n" + "COMMENT ON TABLE "public"."user" IS '用户表';\n" + "COMMENT ON COLUMN "public"."user"."id" IS '用户id';\n" + "COMMENT ON COLUMN "public"."user"."username" IS '用户名';\n" + "COMMENT ON COLUMN "public"."user"."password" IS '密码';\n" + "COMMENT ON COLUMN "public"."user"."email" IS '邮箱';\n" + "COMMENT ON COLUMN "public"."user"."phone" IS '电话号码';\n" + "COMMENT ON COLUMN "public"."user"."age" IS '年龄';\n" + "COMMENT ON COLUMN "public"."user"."gender" IS '性别';\n" + "COMMENT ON COLUMN "public"."user"."height" IS '身高';\n" + "COMMENT ON COLUMN "public"."user"."birthday" IS '生日';\n" + "COMMENT ON COLUMN "public"."user"."register_time" IS '注册时间';\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, tableDDL)
[-] pred: org. junit. Assert. assertEquals ( expect, tableDDL )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test03() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: testGetCryptoClientShouldReturnClientWhenCalled() { //given final ApacheHttpClientProvider underTest = new ApacheHttpClientProvider(HTTPS_SPECIAL_LOCALHOST_8443, new AuthorityOverrideFunction(SPECIAL_LOCALHOST, LOCALHOST));  //when final CryptographyClient client = underTest.getCryptoClient(WEB_KEY_ID);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: isFriendly() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(idDefinition.isFriendly())
[-] pred: org. junit. Assert. assertTrue ( idDefinition. isFriendly() )
************************************
[+] input: testGetEnumConstants() { List<MockEnum> constants = ReflectionUtils.getEnumConstants(MockEnum.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, constants.size())
[-] pred: org. junit. Assert. assertEquals ( 4, constants. size ( ) )
************************************
[+] input: serialize_WithFloatNaNValue_ReturnsQuotedJson() { // Test for serializing float NaN value GenericRecord record = new GenericData.Record(SCHEMA); record.put("floatValue", Float.NaN);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": "NaN", "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: whenUpdateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.update(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: IOException { // mocking and stubbing data for test execution SchemaEntity schema = computeSchema(TEST_SCHEMA_JSON_ENHANCED_USER); JoyceURI rawURI = JoyceURI.createURI(MESSAGE_KEY).orElseThrow(); when(schemaUtils.metadataFromSchemaOrElseThrow(any())).thenReturn(schema.getMetadata()); when(jsonLogicService.filter(any(), any())).thenReturn(true); when(schemaEngine.process(any(SchemaEntity.class), any(), any())) .thenReturn(objectMapper.valueToTree(Map.of("code", "1337"))); when(schemaService.get(any())) .thenReturn(Optional.of(computeSchema(TEST_SCHEMA_JSON_USER)));  SingleImportResult expected = new SingleImportResult(rawURI, ProcessStatus.IMPORTED, null); SingleImportResult actual = importService.processImport(rawURI, null, schema);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidRsaParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new RsaKeyCreationInput(KeyType.RSA_HSM, null, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testGetProcessName4() { List<String> names = NextflowScript .getProcesseNames("\n   process process1\n{some content }\n   process process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
[+] input: should_not_support_request_with_unknown_field() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1").jsonContent("{"pewpew": 42}").build(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(request.isSupported())
[-] pred: org. junit. Assert. assertFalse ( request. isSupported ( ) )
************************************
[+] input: testApplySimpleObject() { SimpleObject that = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  SimpleObject other = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(that, other); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: createTrustAnyHttpClient() { ClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(TrustAnyHttpClientFactory.createTrustAnyHttpClient()); RestTemplate restTemplate = new RestTemplate(factory); String response = restTemplate.getForObject("https://www.baidu.com",String.class); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256GcmNullText() { String keyEncryptionKey = "myKeyEncryptionKeyWrongSize";  String stillNullText = EncryptionUtils.encryptAes256Gcm(null, keyEncryptionKey); "<AssertPlaceHolder>"; }
[*] target: assertNull(stillNullText)
[-] pred: org. junit. Assert. assertNull ( stillNullText )
************************************
[+] input: testCreateDictType_success() { // 准备参数 DictTypeSaveReqVO reqVO = randomPojo(DictTypeSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 避免 id 被赋值  // 调用 Long dictTypeId = dictTypeService.createDictType(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictTypeDO dictType = dictTypeMapper.selectById(dictTypeId); assertPojoEquals(reqVO, dictType, "id"); }
[*] target: assertNotNull(dictTypeId)
[-] pred: org. junit. Assert. assertNotNull ( dictTypeId )
************************************
[+] input: testConvertShouldSetRecognisedCurveNameAndParametersWhenCalledWithValidEcPrivateKey() { //given final EcPrivateKeyToJsonWebKeyImportRequestConverter underTest = new EcPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateEc(KeyCurveName.P_256); final BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.EC, actual.getKeyType()); Assertions.assertEquals(KeyCurveName.P_256, actual.getCurveName()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getX()); Assertions.assertNotNull(actual.getY()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleRemoved() { Message message = MessageFactory.failedJobRetryTimeCycleRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: stateWithSameNameShouldBeEqual() { State a = State.of("state"); State b = State.of("state");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: setProvider() { Map<String, SegmentIdProperties.IdDefinition> provider = new HashMap<>(); SegmentIdProperties properties = new SegmentIdProperties(); properties.setProvider(provider); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(provider, properties.getProvider())
[-] pred: org. junit. Assert. assertEquals ( provider, properties. getProvider() )
************************************
[+] input: getQuantidadeLetrasMinusculas_test03() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("testandoOTesteDoTestador"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(20, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 20, quantidadeLetrasMinusculas )
************************************
[+] input: getLimitsByOrgId_whenOrgIdIsInvalid_getLimitsByOrgId() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Limit tesLimit = LimitsUtils.createTesLimit(); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(limitRepositoryMock.findByOrganisationId(anyString())) .thenReturn(java.util.Optional.of(tesLimit));  LimitPricingPlanViewModel limitsByOrgId = limitService.getLimitsByOrgId(ORGANISATION_ID);  //Then "<AssertPlaceHolder>"; assertEquals(tesLimitPricingPlanViewModel.getOrganisationId(), limitsByOrgId.getOrganisationId()); assertEquals(tesLimitPricingPlanViewModel.getPricingPlanType(), limitsByOrgId.getPricingPlanType()); assertEquals(tesLimitPricingPlanViewModel.getProjectLimit(), limitsByOrgId.getProjectLimit()); assertEquals(tesLimitPricingPlanViewModel.getProjectUsed(), limitsByOrgId.getProjectUsed()); assertEquals(tesLimitPricingPlanViewModel.getLabelLimit(), limitsByOrgId.getLabelLimit()); assertEquals(tesLimitPricingPlanViewModel.getLabelRemaining(), limitsByOrgId.getLabelRemaining()); assertEquals(tesLimitPricingPlanViewModel.getStorageLimit(), limitsByOrgId.getStorageLimit()); assertEquals(tesLimitPricingPlanViewModel.getStorageUsed(), limitsByOrgId.getStorageUsed()); assertEquals(tesLimitPricingPlanViewModel.getAiSegLimit(), limitsByOrgId.getAiSegLimit()); assertEquals(tesLimitPricingPlanViewModel.getAiSegRemaining(), limitsByOrgId.getAiSegRemaining()); assertEquals(tesLimitPricingPlanViewModel.isApiAccess(), limitsByOrgId.isApiAccess()); assertEquals(tesLimitPricingPlanViewModel.isExternalStorage(), limitsByOrgId.isExternalStorage());  verify(limitRepositoryMock).findByOrganisationId(anyString()); verify(limitRepositoryMock, times(1)).findByOrganisationId(anyString()); verifyNoMoreInteractions(limitRepositoryMock); }
[*] target: assertNotNull(limitsByOrgId)
[-] pred: org. junit. Assert. assertNotNull ( limitsByOrgId )
************************************
[+] input: testHash() { DateTimeStamp a = new DateTimeStamp(.586); DateTimeStamp b = new DateTimeStamp(.587); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0000", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp(.587); b = new DateTimeStamp(.587); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); "<AssertPlaceHolder>";  }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
[+] input: IOException { KeyManager km = SingleConnectorServicesProvider.getKeyFromKeyStoreUri(new File(keystoreFileName).toURI().toString(), keystoreFilePass); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(km)
[-] pred: org. junit. Assert. assertNotNull ( km )
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "existingEntryId"; final String deletedImageId = "deleted image"; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Media media = Mockito.mock(Media.class); final String expectedErrorMessage = String.format("Item image with id %s not found.", deletedImageId); final LcEntry lcEntry = Mockito.mock(LcEntry.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId); project.getLabelConfiguration().setEntries(Set.of(lcEntry));  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)).thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()).thenReturn(project); Mockito.when(labelTask.getLabelTaskState()).thenReturn(LabelTaskState.COMPLETED); Mockito.when(labelTask.getMedia()).thenReturn(media); Mockito.when(lcEntry.getEntryKey()).thenReturn(lcEntryKey); Mockito.when(media.isDeleted()).thenReturn(true); Mockito.when(media.getId()).thenReturn(deletedImageId);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: shouldBuildFormRef() { Message message = MessageFactory.formRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: cast_Select() { //Given final LcEntrySelect entry = new LcEntrySelect(); entry.setType(LcEntryType.SELECT); entry.setEntryValue("entryValue"); entry.setEntryKey("key"); entry.setOptions(null);  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertEquals(entry.getEntryKey(), export.getEntryKey()); assertEquals(entry.getEntryValue(), export.getEntryValue());  assertTrue(export instanceof LcEntryExportOption); assertNull(((LcEntryExportOption) export).getOptions()); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
[+] input: readPodNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_POD_NAME); "<AssertPlaceHolder>"; }
[*] target: assertEquals(hostnameThatIsPodName, actual)
[-] pred: org. junit. Assert. assertEquals ( hostnameThatIsPodName, actual )
************************************
[+] input: setPrefix() { String prefix = "test"; IdConverterDefinition definition = new IdConverterDefinition(); definition.setPrefix(prefix); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(prefix, definition.getPrefix())
[-] pred: org. junit. Assert. assertEquals ( prefix, definition. getPrefix() )
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  try (PositionOutputStream outputStream = localOutputFile.create(8192L)) { outputStream.write(inputBytes); }  final String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
[+] input: testValidByronAddr() { boolean isValid = AddressUtil.isValidAddress("DdzFFzCqrhszg6cqZvDhEwUX7cZyNzdycAVpm4Uo2vjKMgTLrVqiVKi3MBt2tFAtDe7NkptK6TAhVkiYzhavmKV5hE79CWwJnPCJTREK");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
[+] input: testDeserialize() { Language expectedLanguage = new Language("en", List.of("en_us", "en_gb")); String serializedLanguage = "en|en_us|en_gb";  Language actualLanguage = this.composer.deserialize(serializedLanguage).get(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLanguage, actualLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedLanguage, actualLanguage )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_equal_to_max_batch_size_THEN_return_true() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetRequestSize )
************************************
[+] input: notHealthyWithRetry() { when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedException.class);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(3)).isMemoryHealthy(anyLong()); }
[*] target: assertFalse(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertFalse ( resourceMonitor. isHealthy() )
************************************
[+] input: shouldBuildFollowUpDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.followUpDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'followUpDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: fromOptionValue_test() { DBSourceOptions downloadSourceOptions = DBSourceOptions.fromOptionValue("s3"); "<AssertPlaceHolder>"; assertThat(downloadSourceOptions.toString(), equalTo("S3")); }
[*] target: assertNotNull(downloadSourceOptions)
[-] pred: org. junit. Assert. assertNotNull ( downloadSourceOptions )
************************************
[+] input: testApplyComplexObject2() { SimpleObject thatItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject thatObj = new ComplexObject(); thatObj.setId(1); thatObj.setName("eq"); thatObj.setItems(List.of(thatItem));  ComplexObject otherObj = new ComplexObject(); otherObj.setId(1); otherObj.setName("eq"); otherObj.setItems(List.of());  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(thatObj, otherObj); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: NoSuchMethodException { Constructor<String> stringCtor = String.class.getConstructor(char[].class); FastConstructor<String> fc = FastConstructor.create(stringCtor); "<AssertPlaceHolder>"; }
[*] target: assertEquals(stringCtor.toString(), fc.toString())
[-] pred: org. junit. Assert. assertEquals ( stringCtor. toString ( ), fc. toString ( ) )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256Gcm() { String clearText = "myClearText"; String keyEncryptionKey = "olDeandATEDiCenSiTurThrepASTrole"; String encryptedText = EncryptionUtils.encryptAes256Gcm(clearText, keyEncryptionKey); String clearTextDecrypted = EncryptionUtils.decryptAes256Gcm(encryptedText, keyEncryptionKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearText, clearTextDecrypted)
[-] pred: org. junit. Assert. assertEquals ( clearText, clearTextDecrypted )
************************************
[+] input: testAssignRoleMenu() { // 准备参数 Long roleId = 1L; Set<Long> menuIds = asSet(200L, 300L); // mock 数据 RoleMenuDO roleMenu01 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(100L); roleMenuMapper.insert(roleMenu01); RoleMenuDO roleMenu02 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(200L); roleMenuMapper.insert(roleMenu02);  // 调用 permissionService.assignRoleMenu(roleId, menuIds); // 断言 List<RoleMenuDO> roleMenuList = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, roleMenuList.get(0).getRoleId()); assertEquals(200L, roleMenuList.get(0).getMenuId()); assertEquals(1L, roleMenuList.get(1).getRoleId()); assertEquals(300L, roleMenuList.get(1).getMenuId()); }
[*] target: assertEquals(2, roleMenuList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, roleMenuList. size ( ) )
************************************
[+] input: canWriteTest() { LocalStorage item = LocalStorage.newBuilder().basePath(testBaseDir.getAbsolutePath()) .cleanupThreshold(50) .highWaterMarkOfWrite(95) .lowWaterMarkOfWrite(80) .capacity(100) .cleanIntervalMs(5000) .build();  item.getMetaData().updateDiskSize(20); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(65); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); "<AssertPlaceHolder>"; }
[*] target: assertTrue(item.canWrite())
[-] pred: org. junit. Assert. assertTrue ( item. canWrite() )
************************************
[+] input: getNomeDosAtributosDoObjeto_test03() { final List<String> nomeDosAtributosDoObjeto = JavaReflection.getNomeDosAtributosDoObjeto(new Object()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(nomeDosAtributosDoObjeto.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( nomeDosAtributosDoObjeto. isEmpty ( ) )
************************************
[+] input: JsonProcessingException {  final String SINK_YAML = "        url: "https://eihycslfo6g2hwrrytyckjkkok.lambda-url.us-east-2.on.aws/"\n"; final HttpSinkConfiguration httpSinkConfiguration = objectMapper.readValue(SINK_YAML, HttpSinkConfiguration.class);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(httpSinkConfiguration.isValidAWSUrl())
[-] pred: org. junit. Assert. assertTrue ( httpSinkConfiguration. isValidAWSUrl ( ) )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256NullText() { final String encryptionKey = "myKeyEncryption"; final String encryptionSalt = "p8t42EhY9z2eSUdpGeq7HX7RboMrsJAhUnu3EEJJVS";  final String stillBlankText = EncryptionUtils.encryptAesWithPrefix(null, encryptionKey, encryptionSalt); "<AssertPlaceHolder>"; }
[*] target: assertNull(stillBlankText)
[-] pred: org. junit. Assert. assertNull ( stillBlankText )
************************************
[+] input: shouldBuildConnectorId() { Message message = MessageFactory.connectorId(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test05() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("!@#)("); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeCaracteresEspeciais )
************************************
[+] input: shouldValidateSourceConnector() { ConnectValidator validator = ConnectValidator.builder() .validationConstraints(Map.of( "key.converter", new ResourceValidator.NonEmptyString(), "value.converter", new ResourceValidator.NonEmptyString(), "connector.class", new ResourceValidator.ValidString( List.of("io.confluent.connect.jdbc.JdbcSourceConnector", "io.confluent.connect.jdbc.JdbcSinkConnector", "com.splunk.kafka.connect.SplunkSinkConnector", "org.apache.kafka.connect.file.FileStreamSinkConnector"), false))) .sourceValidationConstraints(Map.of( "producer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .sinkValidationConstraints(Map.of( "consumer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .classValidationConstraints(Map.of( "io.confluent.connect.jdbc.JdbcSinkConnector", Map.of( "db.timezone", new ResourceValidator.NonEmptyString()))) .build();  Connector connector = Connector.builder() .metadata(Metadata.builder() .name("connect2") .build()) .spec(Connector.ConnectorSpec.builder() .connectCluster("cluster1") .config(Map.of( "connector.class", "io.confluent.connect.jdbc.JdbcSourceConnector", "key.converter", "test", "value.converter", "test", "producer.override.sasl.jaas.config", "test")) .build()) .build();  List<String> actual = validator.validate(connector, "source"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty ( ) )
************************************
[+] input: testAsRecoveryUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asRecoveryUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/deletedcertificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: getQuantidadeLetrasMinusculas_test06() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
[+] input: allModules() { moduleManager.add(module1); moduleManager.add(module2);  List<IModule> modules = moduleManager.allModules();  assertEquals(2, modules.size()); assertTrue(modules.contains(module1)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(modules.contains(module2))
[-] pred: org. junit. Assert. assertTrue ( modules. contains ( module2 ) )
************************************
[+] input: searchTest() { var result = wishListService.search("갈비집"); System.out.println(result); Assertions."<AssertPlaceHolder>";  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getStringTruncada_test05() { String stringTruncada = Strings.getStringTruncada(null, 0); "<AssertPlaceHolder>"; }
[*] target: assertNull(stringTruncada)
[-] pred: org. junit. Assert. assertNull ( stringTruncada )
************************************
[+] input: shouldBuildElementNotSupportedHint() { Message message = MessageFactory.elementNotSupportedHint(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: isAuthenticated_whenUserIsAuthenticated_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  boolean isAuthenticated = DataGymSecurity.isAuthenticated();  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAuthenticated)
[-] pred: org. junit. Assert. assertTrue ( isAuthenticated )
************************************
[+] input: testGetExpression_noLoginUser() { // 准备参数 String tableName = randomString(); Alias tableAlias = new Alias(randomString()); // mock 方法  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
[+] input: testUpdateWithTypeEmbed() { var intCell = RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(); var rows = List.of( RecordRowDesc.builder().cells(Map.of("key", intCell)).build() ); var req = UpdateTableEmbeddedRequest.builder() .tableName("t") .keyColumn("key") .rows(rows) .build();  // update with type this.dataStore.updateWithTypeEmbed(req); var result = this.dataStore.scan(DataStoreScanRequest.builder() .tables(List.of(DataStoreScanRequest.TableInfo.builder() .tableName("t") .keepNone(true) .build())) .keepNone(true) .encodeWithType(true) .build()); var expected = new RecordList( null, Map.of("key", ColumnHintsDesc.builder() .typeHints(List.of("INT32")) .columnValueHints(List.of("1")) .build()), List.of(Map.of("key", Map.of("type", "INT32", "value", "00000001"))), "00000001", "INT32" ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: never_hasNext() { var plan = new CursorCloseOperator(null); assertFalse(plan.hasNext()); plan.open(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(plan.hasNext())
[-] pred: org. junit. Assert. assertFalse ( plan. hasNext() )
************************************
[+] input: shouldListAllNamespaceResourcesWhenEmpty() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .spec(NamespaceSpec.builder() .connectClusters(List.of("local-name")) .kafkaUser("user") .build()) .build();  when(topicService.findAllForNamespace(ns)) .thenReturn(List.of()); when(connectorService.findAllForNamespace(ns)) .thenReturn(List.of()); when(roleBindingService.findAllForNamespace("namespace")) .thenReturn(List.of()); when(aclService.findAllForNamespace(ns)) .thenReturn(List.of()); when(connectClusterService.findAllForNamespaceWithOwnerPermission(ns)) .thenReturn(List.of()); when(resourceQuotaService.findForNamespace("namespace")) .thenReturn(Optional.empty());  List<String> result = namespaceService.findAllResourcesByNamespace(ns); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: queryWithUnknownSpanId() { String traceId = "12345678901234567890123456789abc"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(TracingStatementInspector.UNKNOWN_SPAN_ID);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: convertToDatabaseColumnNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: isValidDatasetArn_returns_true_for_valid_dataset_arn() { final String datasetArn = "arn:aws:personalize::123456789012:dataset/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
[*] target: assertTrue(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertTrue ( objectUnderTest. isValidDatasetArn ( ) )
************************************
[+] input: compareTo_zero_when_equal() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act int result = vec3c1.compareTo(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: queryWithTraceIdAndSpanId() { String traceId = "12345678901234567890123456789abc"; String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId, spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFillTemplate() { String template = "The quick ${COLOR} ${ANIMAL}\njumped over the ${ADJECTIVE} dogs.\n"; Map<String, String> vars = new HashMap<String, String>(); vars.put("COLOR", "brown"); vars.put("ANIMAL", "fox"); vars.put("ADJECTIVE", "lazy"); String result = StringUtil.fillTemplate(template, vars); String expected = "The quick brown fox\njumped over the lazy dogs.\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: isProjectNameUniqueAndDeletedFalse_whenUsernameIsNotUnique_returnFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID);  //When when(projectRepositoryMock.findByNameAndDeletedFalseAndOwner(anyString(), anyString())).thenReturn(java.util.Optional.empty());  boolean actual = projectService.isProjectNameUniqueAndDeletedFalse(PROJECT_NAME, "eforce");  //Then Assertions."<AssertPlaceHolder>"; verify(projectRepositoryMock).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); verify(projectRepositoryMock, times(1)).findByNameAndDeletedFalseAndOwner(anyString(), anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test03() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("testandoOTesteDoTestador"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 4, quantidadeLetrasMaiusculas )
************************************
[+] input: initialization_onlyOnce() { Application application = mock(Application.class, RETURNS_DEEP_STUBS); Context context = mock(Context.class);  SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setApplicationName("appName") .setBeaconEndpoint("http://backend") .setRumAccessToken("abracadabra") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context);  SplunkRum singleton = SplunkRum.initialize(splunkRumBuilder, application); SplunkRum sameInstance = splunkRumBuilder.build(application);  "<AssertPlaceHolder>"; }
[*] target: assertSame(singleton, sameInstance)
[-] pred: org. junit. Assert. assertSame ( singleton, sameInstance )
************************************
[+] input: testHasTerminated() { when(priceDiffConditionToAbort.test(anyDouble())).thenReturn(true); tradeIntent.onTick(tick); "<AssertPlaceHolder>"; }
[*] target: assertTrue(tradeIntent.hasTerminated())
[-] pred: org. junit. Assert. assertTrue ( tradeIntent. hasTerminated() )
************************************
[+] input: IOException { final String rawCpuSetInfo = "/kubepods/besteffort/pod72832d24-7655-487c-8b85-3f01844639a9/" + "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: mustBeInFight() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(0), withNextMonster("lonely construct")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_less_than_max_request_size_THEN_return_false() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes() - 1) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
[+] input: shouldFindExistingMessageTemplate() { MessageTemplate messageTemplate = MESSAGE_TEMPLATE_PROVIDER.getMessageTemplate("connector-hint"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(messageTemplate)
[-] pred: org. junit. Assert. assertNotNull ( messageTemplate )
************************************
[+] input: create() { doNothing().when(userEventSubscriber).onUserCreated(any());  String username = UUID.randomUUID().toString().replace("-", ""); UserCreateRequest request = new UserCreateRequest(); request.setAvatar(username); request.setUsername(username); request.setNickname(username); request.setEmail(username + "@Databasir-ut.com"); request.setPassword("123456"); request.setEnabled(true); Integer id = userService.create(request, UserSource.MANUAL); "<AssertPlaceHolder>"; verify(userEventSubscriber, times(1)).onUserCreated(any()); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: JsonProcessingException { //given final URI baseUri = URI.create(HTTPS_LOCALHOST); final RecoveryLevel recoveryLevel = RecoveryLevel.RECOVERABLE; final Integer recoverableDays = RECOVERABLE_DAYS; final VaultModel result = new VaultModel(); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VaultModel.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result); final VaultModel expectedRequestVault = new VaultModel(baseUri, null, recoveryLevel, recoverableDays, null, null); when(objectWriter.writeValueAsString(eq(expectedRequestVault))).thenReturn(JSON);  //when final VaultModel actual = underTest.createVault(baseUri, recoveryLevel, recoverableDays);  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.POST, request.getHttpMethod()); Assertions.assertEquals(APPLICATION_JSON, request.getHeaders().getValue(HttpHeaderName.CONTENT_TYPE)); final String actualBody = new String(Objects.requireNonNull(request.getBody().single().block()).array()); Assertions.assertEquals(JSON, actualBody); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VaultModel.class)); verify(objectReader).readValue(anyString()); verify(objectWriter).writeValueAsString(eq(expectedRequestVault)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
[+] input: should_support_query_with_zero_fetch_size() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1") .jsonContent("{"query": "SELECT 1", "fetch_size": 0}") .build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
[+] input: basic() { String realCode = """ int x=5; String y =foo("bar");""";  List<TokenType> expectedTypes = List.of(TokenType.INT, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.ASSIGN, TokenType.NUMBER, TokenType.SEMICOLON, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.ASSIGN, TokenType.IDENTIFIER, TokenType.OPEN_PARENTHESIS, TokenType.STRING, TokenType.CLOSE_PARENTHESIS, TokenType.SEMICOLON);  List<TokenType> actualTypes = tokenize(realCode);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypes, actualTypes)
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, actualTypes )
************************************
[+] input: Throwable { String str = "abc"; String encoding = "UTF-8"; byte[] bytes = str.getBytes(encoding); FastConstructor<String> fc = FastConstructor.create(String.class.getConstructor(byte[].class, String.class)); String result = (String) fc.invoke(bytes, encoding); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, result)
[-] pred: org. junit. Assert. assertEquals ( str, result )
************************************
[+] input: generateAccessToken() { String accessToken = accessTokenService.generateAccessToken(UUID.randomUUID().toString()); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: isAdminOrUser_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: defaultValues() { SplunkRumBuilder builder = SplunkRum.builder();  assertFalse(builder.isDebugEnabled()); assertFalse(builder.isDiskBufferingEnabled()); assertTrue(builder.isCrashReportingEnabled()); assertTrue(builder.isNetworkMonitorEnabled()); assertTrue(builder.isAnrDetectionEnabled()); "<AssertPlaceHolder>"; assertEquals(Attributes.empty(), builder.globalAttributes); assertNull(builder.deploymentEnvironment); assertFalse(builder.sessionBasedSamplerEnabled); }
[*] target: assertTrue(builder.isSlowRenderingDetectionEnabled())
[-] pred: org. junit. Assert. assertTrue ( builder. isSlowRenderingDetectionEnabled ( ) )
************************************
[+] input: testIsEqualTo() { SimpleNumericVersion version = new SimpleNumericVersion(10); SimpleNumericVersion version2 = new SimpleNumericVersion(10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode ( ), version2. hashCode ( ) )
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
[+] input: shouldBuildFormData() { Message message = MessageFactory.formData(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("tag "Hello World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test1".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); assertTrue(tag.isListed());  // Send one more message to verify that no exception occurs ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test2".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
[+] input: canSetScreenName() { InMemorySpanExporter testExporter = InMemorySpanExporter.create(); SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("us0") .setRumAccessToken("secret!") .setApplicationName("test") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper);  RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, new AppStartupTimer()) { @Override SpanExporter getCoreSpanExporter() { return testExporter; } };  SplunkRum splunkRum = testInitializer.initialize(mainLooper); splunkRum.experimentalSetScreenName("screen-1"); splunkRum.experimentalSetScreenName("screen-2");  // pause and resume splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName("screen-2", "Resumed");  // exit the view with explicit screen names // both last screen name and second last screen name have to be cleared, hence the doubled // call splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName(null);  splunkRum.flushSpans(); List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>";  assertEquals("Created", spans.get(0).getName()); assertEquals("screen-1", spans.get(0).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(0).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Created", spans.get(1).getName()); assertEquals("screen-2", spans.get(1).getAttributes().get(SCREEN_NAME_KEY)); assertEquals("screen-1", spans.get(1).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Resumed", spans.get(2).getName()); assertEquals("screen-2", spans.get(2).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(2).getAttributes().get(LAST_SCREEN_NAME_KEY)); }
[*] target: assertEquals(3, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 3, spans. size ( ) )
************************************
[+] input: schedule() { AtomicBoolean isRun = new AtomicBoolean(false); client.schedule( () -> { isRun.set(true); }); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: testCreateFileConfig_success() { // 准备参数 Map<String, Object> config = MapUtil.<String, Object>builder().put("basePath", "/yunai") .put("domain", "https://www.iocoder.cn").build(); FileConfigSaveReqVO reqVO = randomPojo(FileConfigSaveReqVO.class, o -> o.setStorage(FileStorageEnum.LOCAL.getStorage()).setConfig(config)) .setId(null); // 避免 id 被赋值  // 调用 Long fileConfigId = fileConfigService.createFileConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 FileConfigDO fileConfig = fileConfigMapper.selectById(fileConfigId); assertPojoEquals(reqVO, fileConfig, "id", "config"); assertFalse(fileConfig.getMaster()); assertEquals("/yunai", ((LocalFileClientConfig) fileConfig.getConfig()).getBasePath()); assertEquals("https://www.iocoder.cn", ((LocalFileClientConfig) fileConfig.getConfig()).getDomain()); // 验证 cache assertNull(fileConfigService.getClientCache().getIfPresent(fileConfigId)); }
[*] target: assertNotNull(fileConfigId)
[-] pred: org. junit. Assert. assertNotNull ( fileConfigId )
************************************
[+] input: shouldBuildResultVariableBusinessRule() { Message message = MessageFactory.resultVariableBusinessRule(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IOException { InputStream inputStream = new ByteArrayInputStream("Test data".getBytes()); when(s3Client.getObject(any(GetObjectRequest.class), any(ResponseTransformer.class))).thenReturn(inputStream); final S3InputStream s3InputStream = createObjectUnderTest(); createObjectUnderTest().seek(0);  int availableBytes = s3InputStream.available(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(9, availableBytes)
[-] pred: org. junit. Assert. assertEquals ( 9, availableBytes )
************************************
[+] input: URISyntaxException { var target = new RestClientParser(); var req = new Request(); req.setRequestText( "POST https://www.google.com/test?a=1&b=%202\n" + "Content-Type:text/plain\n" + "\n" + "This is a multiline\n" + "Text\n"); var result = target.parse(req.getRequestText()); "<AssertPlaceHolder>"; assertEquals(2, result.getQuery().size()); assertEquals(1, result.getHeaders().size()); var header = result.getHeader(ConstantsHeader.CONTENT_TYPE); assertEquals("text/plain", header); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: shouldBuildCandidateUsers() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.candidateUsers(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'candidateUsers' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldProperlyMapListDtosToListModels() { //given LectureDTO dto = new LectureDTO(); dto.setId(12L); dto.setName("I'm BATMAN!");  List<LectureDTO> dtos = Collections.singletonList(dto);  //when List<LectureModel> models = lectureListMapper.toModelList(dtos);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, models.size()); Assertions.assertEquals(dto.getId(), models.get(0).getId()); Assertions.assertEquals(dto.getName(), models.get(0).getName()); }
[*] target: assertNotNull(models)
[-] pred: org. junit. Assert. assertNotNull ( models )
************************************
[+] input: getConverter() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(idDefinition.getConverter())
[-] pred: org. junit. Assert. assertNotNull ( idDefinition. getConverter() )
************************************
[+] input: NoSuchFieldException { String fieldName = "name"; FastField ff = FastField.create(Person.class.getField(fieldName)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(fieldName, ff.getName())
[-] pred: org. junit. Assert. assertEquals ( fieldName, ff. getName() )
************************************
[+] input: shouldBuildScriptJobType() { Message message = MessageFactory.scriptJobType(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldValidateWithNoConfig() { TopicValidator topicValidator = TopicValidator.builder() .validationConstraints( Map.of("replication.factor", ResourceValidator.Range.between(3, 3), "partitions", ResourceValidator.Range.between(3, 6), "cleanup.policy", ResourceValidator.ValidList.in("delete", "compact"), "min.insync.replicas", ResourceValidator.Range.between(2, 2), "retention.ms", ResourceValidator.Range.between(60000, 604800000))) .build();  Topic topic = Topic.builder() .metadata(Metadata.builder() .name("validName") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .build()) .build();  List<String> actual = topicValidator.validate(topic); "<AssertPlaceHolder>"; assertTrue(actual.contains("Invalid empty value for field "min.insync.replicas": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "retention.ms": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "cleanup.policy": value must not be null.")); }
[*] target: assertEquals(3, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 3, actual. size ( ) )
************************************
[+] input: testGetMenuIdListByPermissionFromCache() { // mock 数据 MenuDO menu100 = randomPojo(MenuDO.class); menuMapper.insert(menu100); MenuDO menu101 = randomPojo(MenuDO.class); menuMapper.insert(menu101); // 准备参数 String permission = menu100.getPermission();  // 调用 List<Long> ids = menuService.getMenuIdListByPermissionFromCache(permission); // 断言 "<AssertPlaceHolder>"; assertEquals(menu100.getId(), ids.get(0)); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
[+] input: shouldReturnTrueWhenExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(true);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(existWaitingProduct)
[-] pred: org. junit. Assert. assertTrue ( existWaitingProduct )
************************************
[+] input: sessionEnable() { SessionManager sessionManager = new SessionManager( sessionStorageService, statementStorageService, emrServerlessClientFactory, sessionConfigSupplier, sessionIdProvider);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(sessionManager.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( sessionManager. isEnabled() )
************************************
[+] input: shouldValidateWithNoClassValidationConstraint() { ConnectValidator validator = ConnectValidator.builder() .validationConstraints(Map.of( "key.converter", new ResourceValidator.NonEmptyString(), "value.converter", new ResourceValidator.NonEmptyString(), "connector.class", new ResourceValidator.ValidString( List.of("io.confluent.connect.jdbc.JdbcSourceConnector", "io.confluent.connect.jdbc.JdbcSinkConnector", "com.splunk.kafka.connect.SplunkSinkConnector", "org.apache.kafka.connect.file.FileStreamSinkConnector"), false))) .sourceValidationConstraints(Map.of( "producer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .sinkValidationConstraints(Map.of( "consumer.override.sasl.jaas.config", new ResourceValidator.NonEmptyString())) .build();  Connector connector = Connector.builder() .metadata(Metadata.builder() .name("connect2") .build()) .spec(Connector.ConnectorSpec.builder() .connectCluster("cluster1") .config(Map.of( "connector.class", "io.confluent.connect.jdbc.JdbcSourceConnector", "key.converter", "test", "value.converter", "test", "consumer.override.sasl.jaas.config", "test")) .build()) .build();  List<String> actual = validator.validate(connector, "sink"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty ( ) )
************************************
[+] input: ps() { String name = "test"; List<Container> containers = new ArrayList<>(); containers.add(new Container()); when(dockerClient.listContainersCmd().withNameFilter(Lists.newArrayList(name))) .thenReturn(new ListContainersCmdImpl(command -> containers)); List<Container> ps = dockerService.ps(name); "<AssertPlaceHolder>"; assertEquals(1, ps.size()); }
[*] target: assertNotNull(ps)
[-] pred: org. junit. Assert. assertNotNull ( ps )
************************************
[+] input: shouldBuildConditionExpression() { Message message = MessageFactory.conditionExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: callWithRetryRetriableError() { final int[] attempt = new int[1]; final int maxRetries = 3; final int res = RetryUtil.callWithRetry("test callWithRetryRetriableError", () -> { if (attempt[0] < maxRetries) { ++attempt[0]; throw new ArithmeticException(); } return attempt[0]; }, maxRetries, 1L, RuntimeException.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(maxRetries, res)
[-] pred: org. junit. Assert. assertEquals ( maxRetries, res )
************************************
[+] input: convertToEntityAttributeNull() { AnimalPorteConverter converter = new AnimalPorteConverter(); AnimalPorte convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: testGetVersionsShouldReturnAllRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2, KEY_VERSION_3), actual); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: SQLException { String nql = "INSERT VERTEX vert (prop) VALUES "v1":(?))"; String expected = "INSERT VERTEX vert (prop) VALUES "v1":(null))"; NebulaPreparedStatementImpl stmt = new NebulaPreparedStatementImpl(null, nql); stmt.setNull(1, Types.OTHER); String resultNql = stmt.replacePlaceHolderWithParam(nql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resultNql)
[-] pred: org. junit. Assert. assertEquals ( expected, resultNql )
************************************
[+] input: shouldBuildInclusiveGatewayJoin() { Message message = MessageFactory.inclusiveGatewayJoin(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldReturnUnknownWhenMissingClaims() { Map<String, Object> claims = Map.of(SUBJECT, "user", ROLES, List.of()); Authentication auth = Authentication.build("user", claims);  SecurityRuleResult actual = resourceBasedSecurityRule.checkSecurity(HttpRequest.GET("/anything"), auth); "<AssertPlaceHolder>"; }
[*] target: assertEquals(SecurityRuleResult.UNKNOWN, actual)
[-] pred: org. junit. Assert. assertEquals ( SecurityRuleResult. UNKNOWN, actual )
************************************
[+] input: testIsAutoRenewShouldReturnFalseWhenCalledWithOnlyEmailContactsSet() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final boolean actual = underTest.isAutoRenew();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidEcParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new EcKeyCreationInput(KeyType.EC_HSM, KeyCurveName.P_256)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: Exception { String inputString = new String(ByteUtil.getContent(new File(EMAIL_BASE_DIR + "bug_100966.txt"))); String expectedResult = new String(ByteUtil.getContent(new File(EMAIL_BASE_DIR + "bug_100966_op.txt"))); String result = new DefangFilter(false).extractAndSanitizeAsciiData(inputString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(result, expectedResult)
[-] pred: org. junit. Assert. assertEquals ( result, expectedResult )
************************************
[+] input: updateDataset_whenInputDatasetIdValid_updateDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given DatasetUpdateBindingModel testDatasetUpdateBindingModel = DatasetUtils.createTestDatasetUpdateBindingModel(); Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("DatasetName updated"); testDataset.setShortDescription("Dataset shortDescription updated");  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.updateDataset(DATASET_ID, testDatasetUpdateBindingModel);  //Then "<AssertPlaceHolder>"; assertEquals(testDatasetUpdateBindingModel.getName(), actual.getName()); assertEquals(testDatasetUpdateBindingModel.getShortDescription(), actual.getShortDescription());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: validateScore1000Test() { try { RecordsManager.validateScore(ALEJANDRO, 1000); "<AssertPlaceHolder>"; } catch (ScoreTooLowException e) { fail(e.getMessage()); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: searchStepsByName() { Collection<Step> step = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, step.size()); for (Step s : step) { Assertions.assertEquals(CONNECTOR_2, s.getName()); } }
[*] target: assertNotNull(step)
[-] pred: org. junit. Assert. assertNotNull ( step )
************************************
[+] input: testGetLifetimeActionsShouldReturnTheMapSetPreviouslyWhenCalled() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> actual = underTest.getLifetimeActions();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: setType() { MachineProperties.Distributor.Type type = MachineProperties.Distributor.Type.JDBC; MachineProperties.Distributor distributor = new MachineProperties.Distributor(); distributor.setType(type); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(type, distributor.getType())
[-] pred: org. junit. Assert. assertEquals ( type, distributor. getType() )
************************************
[+] input: testCreateScanBuilderWithSqlTableFunction() { SparkQueryRequest sparkQueryRequest = new SparkQueryRequest(); sparkQueryRequest.setSql(QUERY); SparkTable sparkTable = new SparkTable(client, sparkQueryRequest); TableScanBuilder tableScanBuilder = sparkTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof SparkSqlFunctionTableScanBuilder); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
[+] input: deleteFlintIndexStateModel() { when(mockStateStore.delete(any(), any())).thenReturn(true);  boolean result = openSearchFlintIndexStateModelService.deleteFlintIndexStateModel( ID, DATASOURCE, asyncQueryRequestContext);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: isHealthy() { when(memoryMonitor.isMemoryHealthy(anyLong())).thenReturn(true);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; }
[*] target: assertTrue(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertTrue ( resourceMonitor. isHealthy() )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(messageKey, headers, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
[+] input: IOException { // Given String taskId = "not-existing"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Item task with id not-existing not found."; HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  // When try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); // Then fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: test_normal_field_failure_without_delimiters() { Dissector dissector = createObjectUnderTest("dm1 %{field1} %{field2} dm2");  boolean result = dissector.dissectText("dm1 foo bar"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testGetEntityShouldReturnValueWhenCalledWithExistingKey() { //given final KeyVaultFake underTest = createUnderTest(); final OctKeyCreationInput input = new OctKeyCreationInput(KeyType.OCT_HSM, null); final VersionedKeyEntityId keyEntityId = underTest.createKeyVersion(KEY_NAME_1, KeyCreateDetailedInput.builder() .key(input) .build());  //when final ReadOnlyKeyVaultKeyEntity actual = underTest.getEntities().getReadOnlyEntity(keyEntityId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(keyEntityId.asUri(HTTPS_LOCALHOST_8443), actual.getId().asUri(HTTPS_LOCALHOST_8443)); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: setTimeout() { Duration timeout = Duration.ZERO; SegmentIdProperties.Distributor.Redis redis = new SegmentIdProperties.Distributor.Redis(); redis.setTimeout(timeout); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(timeout, redis.getTimeout())
[-] pred: org. junit. Assert. assertEquals ( timeout, redis. getTimeout() )
************************************
[+] input: cast_Geometry() { //Given final LcEntryImageSegmentation entry = new LcEntryImageSegmentation(); entry.setType(LcEntryType.IMAGE_SEGMENTATION); entry.setColor("color"); entry.setShortcut("shortcut");  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertTrue(export instanceof LcEntryExportGeometry); assertEquals(entry.getColor(), ((LcEntryExportGeometry) export).getColor()); assertEquals(entry.getShortcut(), ((LcEntryExportGeometry) export).getShortcut()); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
[+] input: NoSuchMethodException { Method startsWithMethod = String.class.getMethod("startsWith", String.class); FastMethod fm = FastMethod.create(startsWithMethod); "<AssertPlaceHolder>"; }
[*] target: assertEquals(startsWithMethod.getModifiers(), fm.getModifiers())
[-] pred: org. junit. Assert. assertEquals ( startsWithMethod. getModifiers(), fm. getModifiers() )
************************************
[+] input: setMachineBit() { int machineBit = 9; MachineProperties properties = new MachineProperties(); properties.setMachineBit(machineBit); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(machineBit, properties.getMachineBit())
[-] pred: org. junit. Assert. assertEquals ( machineBit, properties. getMachineBit() )
************************************
[+] input: inValidateSignature() {  String accessToken = accessTokenService.generateAccessToken(UUID.randomUUID().toString()); String[] parts = accessToken.split("\\."); String token = parts[0]; String payload = parts[1]; PayloadDTO payloadDTO = generatePayloadDTO(accessToken); String forgedToken = token + "." + payload + "." + "checksumTest"; boolean result = accessTokenService .validateAccessToken(forgedToken, payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: removeNode() { consistentHashRouter.removeNode(() -> "1"); Node node = consistentHashRouter.routeNode("1"); "<AssertPlaceHolder>"; }
[*] target: assertNull(node)
[-] pred: org. junit. Assert. assertNull ( node )
************************************
[+] input: getNamespace() { SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertNull ( idDefinition. getNamespace() )
************************************
[+] input: serialize_WithMap_ReturnsCorrectJson() { // Test for serializing a map GenericRecord record = new GenericData.Record(SCHEMA); Map<String, String> map = new HashMap<>(); map.put("one", "valueOne"); map.put("two", "valueTwo"); map.put("three", "valueThree"); record.put("metadata", map);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": {"one": "valueOne", "two": "valueTwo", "three": "valueThree"}, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: create() { GroupCreateRequest request = new GroupCreateRequest(); request.setName(UUID.randomUUID().toString()); request.setDescription("group service test"); request.setGroupOwnerUserIds(List.of(1, 2, 3)); Integer groupId = groupService.create(request); "<AssertPlaceHolder>";  List<UserRole> roles = userRoleDao.selectByUserIds(List.of(1, 2, 3)) .stream() .filter(r -> Objects.equals(r.getGroupId(), groupId) && r.getRole().equals("GROUP_OWNER")) .collect(Collectors.toList()); assertEquals(3, roles.size()); }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
[+] input: setClockSync() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setClockSync(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(idDefinition.isClockSync())
[-] pred: org. junit. Assert. assertFalse ( idDefinition. isClockSync() )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_equal_to_max_batch_size_THEN_return_true() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(thresholdConfig.getMaxRequestSizeBytes(), ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetBatchSize )
************************************
[+] input: Exception { // Ensure the rules directory has at least one file Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); assertTrue(ruleStream.getName().endsWith("-rule.yaml")); } }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
[+] input: getI18NProvider_beanEnabled_instanceReturned() { I18NProvider i18NProvider = instantiator.getI18NProvider(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(i18NProvider instanceof I18NTestProvider); }
[*] target: assertNotNull(i18NProvider)
[-] pred: org. junit. Assert. assertNotNull ( i18NProvider )
************************************
[+] input: testCreateJobLog() { // 准备参数 JobLogDO reqVO = randomPojo(JobLogDO.class, o -> o.setExecuteIndex(1));  // 调用 Long id = jobLogService.createJobLog(reqVO.getJobId(), reqVO.getBeginTime(), reqVO.getHandlerName(), reqVO.getHandlerParam(), reqVO.getExecuteIndex()); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobLogDO job = jobLogMapper.selectById(id); assertEquals(JobLogStatusEnum.RUNNING.getStatus(), job.getStatus()); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: can_visit_all_types_of_expression_node() { Expression expr = DSL.regex( DSL.castString(DSL.sum(DSL.add(ref("balance", INTEGER), literal(10)))), DSL.literal("(?<group>\\d+)"), DSL.literal("group"));  Expression actual = expr.accept( new ExpressionNodeVisitor<Expression, Object>() { @Override public Expression visitLiteral(LiteralExpression node, Object context) { return node; }  @Override public Expression visitReference(ReferenceExpression node, Object context) { return node; }  @Override public Expression visitParse(ParseExpression node, Object context) { return node; }  @Override public Expression visitFunction(FunctionExpression node, Object context) { return DSL.add(visitArguments(node.getArguments(), context)); }  @Override public Expression visitAggregator(Aggregator<?> node, Object context) { return DSL.sum(visitArguments(node.getArguments(), context)); }  private Expression[] visitArguments(List<Expression> arguments, Object context) { return arguments.stream() .map(arg -> arg.accept(this, context)) .toArray(Expression[]::new); } }, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expr, actual)
[-] pred: org. junit. Assert. assertEquals ( expr, actual )
************************************
[+] input: testBuildAuthRequest_clientNull() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
[+] input: testProcessUserDeleted() { // 准备参数 Long userId = randomLongId(); // mock 数据 UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setUserId(userId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02);  // 调用 permissionService.processUserDeleted(userId); // 断言数据 List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
[*] target: assertEquals(1, dbUserRoles.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbUserRoles. size ( ) )
************************************
[+] input: isAndroid() { Configuration.INSTANCE.setAndroid(true); boolean isAndroid = Configuration.INSTANCE.isAndroid(); Configuration.INSTANCE.setAndroid(false);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
[+] input: setStep() { long step = 1; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setStep(step); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(step, idDefinition.getStep())
[-] pred: org. junit. Assert. assertEquals ( step, idDefinition. getStep() )
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: NoSuchAlgorithmException { DES des = new DES(); byte[] key = des.getKey(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
[+] input: fromOptionValue_users_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("users"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("USERS")); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
[+] input: testHashCode() { JavaIdentifier id = new JavaIdentifier( "com.gazelle.java.javaparser.generators", "JavaIdentifier", "artifact("com.gazelle.java.javaparser:generators")"); int hashCode = 1986351184; "<AssertPlaceHolder>"; }
[*] target: assertEquals(id.hashCode(), hashCode)
[-] pred: org. junit. Assert. assertEquals ( id. hashCode(), hashCode )
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setDeleted(true);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_equal_to_max_batch_size_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
[+] input: IOException { // Set Security Context OauthUser oauthUser = SecurityUtils.createTestTokenUser(); SecurityContext.set(oauthUser);  //Given List<LcEntryUpdateBindingModel> testLcEntryUpdateBindingModels = LcEntryUtils.createTestLcEntryUpdateBindingModels(3);  Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  LabelConfigurationViewModel testLabelConfigurationViewModel = LabelConfigurationUtils.createTestLabelConfigurationViewModel();  //When when(labelConfigurationRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration)); when(labelConfigurationServiceMock.updateLabelConfiguration(anyString(), anyList(), anyBoolean())) .thenReturn(testLabelConfigurationViewModel);  LabelConfigurationViewModel labelConfigurationViewModel = externalApiService .uploadLabelConfiguration(LC_CONFIG_ID, testLcEntryUpdateBindingModels);  //Then "<AssertPlaceHolder>"; assertEquals(testLabelConfiguration.getId(), labelConfigurationViewModel.getId()); assertEquals(testLabelConfiguration.getProject().getId(), labelConfigurationViewModel.getProjectId()); assertEquals(0, labelConfigurationViewModel.getEntries().size());  verify(labelConfigurationServiceMock, times(1)) .updateLabelConfiguration(anyString(), anyList(), anyBoolean()); verifyNoMoreInteractions(labelConfigurationServiceMock); }
[*] target: assertNotNull(labelConfigurationViewModel)
[-] pred: org. junit. Assert. assertNotNull ( labelConfigurationViewModel )
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnFortyTwo");  "<AssertPlaceHolder>"; assertEquals(42, method.invoke(obj)); }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
[+] input: returnsNullWhenSellerDoesntExist() { var cm = CoinmasterRegistry.findSeller(ItemPool.SEAL_CLUB); "<AssertPlaceHolder>"; }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
[+] input: shouldBuildCollection() { Message message = MessageFactory.collection(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleError() { Message message = MessageFactory.failedJobRetryTimeCycleError(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); testImage.setDeleted(true); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0, Media.class);  assertFalse(arg0.isDeleted()); assertNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, false);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testGetWorkflowName2() { List<String> names = NextflowScript.getWorkflowNames("\n   workflow process1\n{some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test04() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: testOnlyNumberValueProvided() { Duration expectedDuration = Duration.ofSeconds(3); Duration actualDuration = DurationUtils.parseDuration("3", "refresh-period"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
[+] input: shouldBuildInOutBusinessKeyNotSupported() { Message message = MessageFactory.inOutBusinessKeyNotSupported(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testConvertShouldConvertFieldsWhenCalledWithNotNull() { //given final VaultFake input = mock(VaultFake.class); when(input.baseUri()).thenReturn(TestConstantsUri.HTTPS_LOCALHOST_8443); when(input.getCreatedOn()).thenReturn(TestConstants.TIME_10_MINUTES_AGO); when(input.getDeletedOn()).thenReturn(TestConstants.NOW); when(input.getRecoveryLevel()).thenReturn(RecoveryLevel.CUSTOMIZED_RECOVERABLE); when(input.getRecoverableDays()).thenReturn(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE);  //when final VaultModel actual = underTest.convert(input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(TestConstantsUri.HTTPS_LOCALHOST_8443, actual.getBaseUri()); Assertions.assertEquals(TestConstants.TIME_10_MINUTES_AGO, actual.getCreatedOn()); Assertions.assertEquals(TestConstants.NOW, actual.getDeletedOn()); Assertions.assertEquals(RecoveryLevel.CUSTOMIZED_RECOVERABLE, actual.getRecoveryLevel()); Assertions.assertEquals(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE, actual.getRecoverableDays());  }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testExists() { User randomUser = new User(); boolean exists = entityRepositoryJpa.exists(User.class,randomUser.getId()); Assertions.assertFalse(exists);  User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: isEmpty() { when(searchResponse.getHits()) .thenReturn( new SearchHits( new SearchHit[] {searchHit1, searchHit2}, new TotalHits(2L, TotalHits.Relation.EQUAL_TO), 1.0F));  var response = new OpenSearchResponse(searchResponse, factory, includes); assertFalse(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(null);  response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()) .thenReturn(new SearchHits(null, new TotalHits(0, TotalHits.Relation.EQUAL_TO), 0)); response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(new Aggregations(emptyList()));  response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
[*] target: assertFalse(response.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( response. isEmpty() )
************************************
[+] input: statUuidGenerator() { var stat = UuidGenerator.INSTANCE.stat(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
[+] input: shouldProperlyMapModelToDto() { //given LectureModel model = new LectureModel(); model.setId(11L); model.setName("lecture name");  //when LectureDTO dto = mapperUnderTest.toDTO(model);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(model.getId(), dto.getId()); Assertions.assertEquals(model.getName(), dto.getName()); }
[*] target: assertNotNull(dto)
[-] pred: org. junit. Assert. assertNotNull ( dto )
************************************
[+] input: getQuantidadeDePessoasQueComecamComALetra_test03() { List<String> pessoas = new ArrayList<>(); long quantidade = ArrayLists.getQuantidadeDePessoasQueComecamComALetra(pessoas, "A");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidade)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidade )
************************************
[+] input: IOException { List<? extends JavaFileObject> files = List.of( testFiles.get("/workspace/com/gazelle/java/javaparser/generators/ExportingClass.java")); parser.parseClasses(files);  Set<String> expected = Set.of( "example.external.PackageReturn", "example.external.ProtectedReturn", "example.external.PublicReturn"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, parser.getExportedTypes())
[-] pred: org. junit. Assert. assertEquals ( expected, parser. getExportedTypes() )
************************************
[+] input: testOneProvider() { Set<Service<MyService>> services = ServiceRegistry.INSTANCE.allServicesFor(MyService.class); System.out.println(services); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, services.size())
[-] pred: org. junit. Assert. assertEquals ( 1, services. size ( ) )
************************************
[+] input: wrongUrlSilentlyFails() { ParseCatalog<Step> kameletParser = parseCatalog.getParser("https://nothing/wrong/url.git", "");  List<Step> steps = kameletParser.parse().join(); Assertions."<AssertPlaceHolder>"; assertEquals(0, steps.size()); }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
[+] input: isAndroid_whenNotSetInConfig() { boolean isAndroid = OSUtil.isAndroid();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isAndroid)
[-] pred: org. junit. Assert. assertFalse ( isAndroid )
************************************
[+] input: testGetWorkflowName4() { List<String> names = NextflowScript .getWorkflowNames("\n   workflow process1\n{some content }\n   workflow process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
[+] input: isAdminOrUser_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: testBuildAuthRequest_clientEnable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthConfig authConfig = mock(AuthConfig.class); AuthRequest authRequest = mock(AuthDefaultRequest.class); ReflectUtil.setFieldValue(authRequest, "config", authConfig); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.ENABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertNotSame(authConfig, ReflectUtil.getFieldValue(authRequest, "config")); }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
[+] input: IOException { int data = 123;  outputStream.write(data);  outputStream.close();  final String stringContent = Files.readString(testDataFile.toPath()); final byte[] bytesContent = stringContent.getBytes(StandardCharsets.UTF_8); int actualContent = bytesContent[0] & 0xFF;   "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, actualContent)
[-] pred: org. junit. Assert. assertEquals ( data, actualContent )
************************************
[+] input: filterUncompletedTasksOfList() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo"; final String task3Name = "TaskThree";  final TodoList todoList = new TodoList(); final TaskId taskId1 = todoList.addTask(task1Name); todoList.addTask(task2Name); final TaskId taskId3 = todoList.addTask(task3Name);  todoList.toggleTaskCompletion(taskId1); todoList.toggleTaskCompletion(taskId3);  final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task2Name, tasks.get(0).getName()); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256() { String clearText = "myClearText"; String encryptionKey = "myKeyEncryption"; String encryptionSalt = "p8t42EhY9z2eSUdpGeq7HX7RboMrsJAhUnu3EEJJVS"; String encryptedText = EncryptionUtils.encryptAesWithPrefix(clearText, encryptionKey, encryptionSalt); String clearTextDecrypted = EncryptionUtils.decryptAesWithPrefix(encryptedText, encryptionKey, encryptionSalt);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearText, clearTextDecrypted)
[-] pred: org. junit. Assert. assertEquals ( clearText, clearTextDecrypted )
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyVersion() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: filterUncompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
[+] input: isDatasetNameUnique_whenDatasetNameIsNotUnique_returnTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findByName(anyString())).thenReturn(java.util.Optional.empty());  boolean actual = datasetService.isDatasetNameUnique(DATASET_NAME);  //Then Assertions."<AssertPlaceHolder>"; verify(datasetRepositoryMock).findByName(anyString()); verify(datasetRepositoryMock, times(1)).findByName(anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testGetConfigByKey() { // mock 数据 ConfigDO dbConfig = randomConfigDO(); configMapper.insert(dbConfig);// @Sql: 先插入出一条存在的数据 // 准备参数 String key = dbConfig.getConfigKey();  // 调用 ConfigDO config = configService.getConfigByKey(key); // 断言 "<AssertPlaceHolder>"; assertPojoEquals(dbConfig, config); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
[+] input: isAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.isAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: testFindTag() { var entity = BundleVersionTagEntity.builder() .type("MODEL") .bundleId(1L) .versionId(2L) .tag("tag") .build(); when(bundleVersionTagMapper.findTag("MODEL", 1L, "tag")).thenReturn(entity); var get = bundleVersionTagDao.findTag(BundleAccessor.Type.MODEL, 1L, "tag"); verify(bundleVersionTagMapper).findTag("MODEL", 1L, "tag"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(entity, get)
[-] pred: org. junit. Assert. assertEquals ( entity, get )
************************************
[+] input: getProvider() { SnowflakeIdProperties properties = new SnowflakeIdProperties(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(properties.getProvider())
[-] pred: org. junit. Assert. assertNotNull ( properties. getProvider() )
************************************
[+] input: testListLatestNonManagedEntitiesShouldReturnOnlyTheNotManagedEntitiesWhenMultipleVersionsWerePut() { //given putAllMocks(); when(key1Version3Mock.isManaged()).thenReturn(true);  //when final List<ReadOnlyKeyVaultKeyEntity> actual = underTest.listLatestNonManagedEntities();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, actual.size()); Assertions.assertSame(key2Version2Mock, actual.get(0)); Assertions.assertSame(key3Version2Mock, actual.get(1)); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: shouldBuildDelegateImplementationNoDefaultJobType() { String implementationType = random(); String binding = random(); Message message = delegateImplementationNoDefaultJobType(implementationType, binding); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Delegate call of type '" + implementationType + "' bound to '" + binding + "' was reset."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getStakeAddressFromMnemonic_whenMainnet() { String phrase24W = "damp wish scrub sentence vibrant gauge tumble raven game extend winner acid side amused vote edge affair buzz hospital slogan patient drum day vital"; String expectedRewardAddress = "stake1u9xeg0r67z4wca682l28ghg69jxaxgswdmpvnher7at697quawequ";  Account account = new Account(Networks.mainnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
[+] input: testCalculateUsers_noDept() { // 准备参数 DelegateExecution execution = mockDelegateExecution(1L); // mock 方法(startUser) AdminUserRespDTO startUser = randomPojo(AdminUserRespDTO.class, o -> o.setDeptId(10L)); when(adminUserApi.getUser(eq(1L))).thenReturn(startUser); // mock 方法(getStartUserDept)没有部门 when(deptApi.getDept(eq(10L))).thenReturn(null);  // 调用 Set<Long> result = expression.calculateUsers(execution, 1); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: isAdminOrLabeler_whenUserIsNotInTheOrgAndUserIsSuperAdminAndMethodIsAllowedForSuperAdmins_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createSuperAdminUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("test_org", null, true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://user:pass@proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort());  ArgumentCaptor<CredentialsProvider> credentialsCaptor = ArgumentCaptor.forClass(CredentialsProvider.class); verify(httpClientBuilderSpy).setDefaultCredentialsProvider(credentialsCaptor.capture()); CredentialsProvider credentialsProvider = credentialsCaptor.getValue();  UsernamePasswordCredentials creds = (UsernamePasswordCredentials) credentialsProvider.getCredentials(AuthScope.ANY); Assertions.assertNotNull(creds); assertEquals("user", creds.getUserName()); assertEquals("pass", creds.getPassword()); }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
[+] input: testLength() { byte [] bytes = { 'a', 'b', 'c', 'd', 'e', 'f',}; BinaryString bs = new BinaryString(bytes, 2, 3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(3, bs.length())
[-] pred: org. junit. Assert. assertEquals ( 3, bs. length() )
************************************
[+] input: testIsProviderCodeUniqueOtherExists() { Provider provider = new Provider(1, "name-a", LocalDate.now(), "nationality-a", "code-a"); Mockito.when(dao.findProviderByCode(Mockito.any())).thenReturn(provider);  boolean retVal = service.isProviderCodeUnique(2, "a"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(retVal)
[-] pred: org. junit. Assert. assertFalse ( retVal )
************************************
[+] input: shouldBuildTopic() { Message message = MessageFactory.topic(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getSettingValue() { when(clusterSettings.get(ClusterName.CLUSTER_NAME_SETTING)).thenReturn(ClusterName.DEFAULT); when(clusterSettings.get(not((eq(ClusterName.CLUSTER_NAME_SETTING))))).thenReturn(null); OpenSearchSettings settings = new OpenSearchSettings(clusterSettings); ByteSizeValue sizeValue = settings.getSettingValue(Settings.Key.QUERY_MEMORY_LIMIT);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(sizeValue)
[-] pred: org. junit. Assert. assertNotNull ( sizeValue )
************************************
[+] input: testUpdateAfterApproval_none() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString();  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, null); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(0, result.size()); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryRequest prometheusQueryRequest = new PrometheusQueryRequest(); prometheusQueryRequest.setPromQl("test"); prometheusQueryRequest.setStep("15m"); PrometheusMetricTable prometheusMetricTable = new PrometheusMetricTable(client, prometheusQueryRequest); TableScanBuilder tableScanBuilder = prometheusMetricTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryRangeFunctionTableScanBuilder); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
[+] input: generateAccessTokenFromNonUUID() { String accessToken = accessTokenService.generateAccessToken("testetstetstetstestste"); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: SQLException { try (NebulaConnection connection = (NebulaConnection) DriverManager.getConnection(RunMeBeforeTest.URL, RunMeBeforeTest.USERNAME, RunMeBeforeTest.PASSWORD)) { "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(connection.getMetaData())
[-] pred: org. junit. Assert. assertNotNull ( connection. getMetaData() )
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithoutAttributesAndEmptyList() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setLifetimeActions(List.of()); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: should_support_query() { SQLQueryRequest request = SQLQueryRequestBuilder.request("SELECT 1").build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(request.isSupported())
[-] pred: org. junit. Assert. assertTrue ( request. isSupported ( ) )
************************************
[+] input: testInit() { NebulaPreparedStatementImpl statement = new NebulaPreparedStatementImpl(null, ""); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(statement.getParameters())
[-] pred: org. junit. Assert. assertNotNull ( statement. getParameters() )
************************************
[+] input: setType() { SegmentIdProperties.Distributor.Type type = SegmentIdProperties.Distributor.Type.JDBC; SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); distributor.setType(type); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(type, distributor.getType())
[-] pred: org. junit. Assert. assertEquals ( type, distributor. getType() )
************************************
[+] input: URISyntaxException { Path camelJsonRoute = Path.of( CamelRouteFileProcessorTest.class.getResource(".").toURI());  ParseCatalog<Step> camelParser = parseCatalog.getLocalFolder(camelJsonRoute); List<Step> steps = camelParser.parse().join().stream().filter(Objects::nonNull).collect(Collectors.toList());  "<AssertPlaceHolder>";  BiFunction<List<Step>, String, Step> fetchBrowse = (stepList, stepType) -> stepList.stream() .filter(step -> stepType.equals(step.getType())).findFirst().get();  Step browseComponentSink = fetchBrowse.apply(steps, Step.END); Step browseComponentSource = fetchBrowse.apply(steps, Step.START); Step browseComponentAction = fetchBrowse.apply(steps, Step.MIDDLE);  assertBrowseJsonHasBeenParsedCorrectly(browseComponentSink, Step.END, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentSource, Step.START, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentAction, Step.MIDDLE, false); }
[*] target: assertEquals(3, steps.size())
[-] pred: org. junit. Assert. assertEquals ( 3, steps. size ( ) )
************************************
[+] input: testCreateForm_success() { // 准备参数 BpmFormSaveReqVO reqVO = randomPojo(BpmFormSaveReqVO.class, o -> { o.setConf("{}"); o.setFields(randomFields()); });  // 调用 Long formId = formService.createForm(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmFormDO form = formMapper.selectById(formId); assertPojoEquals(reqVO, form); }
[*] target: assertNotNull(formId)
[-] pred: org. junit. Assert. assertNotNull ( formId )
************************************
[+] input: testLatchFilters() { final var horizon = Interval.between(Duration.of(0, Duration.SECONDS), Duration.of(50, Duration.SECONDS)); final var horizonW = new Windows(horizon, true); final var simResults = new SimulationResults( Instant.EPOCH, Interval.between(0, 20, SECONDS), List.of(), Map.of(), Map.of( "smallState1", smallState1(horizon), "smallState2", smallState2(horizon) ) );  final var ste = new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))); final var ste2 = new And( new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))), new Equal<>(new DiscreteResource("smallState2"), new DiscreteValue(SerializedValue.of(true))) );  final var tre = new TimeRangeExpression.Builder() .from(ste) .name("withinEach") .build();  final var filter = new Filters.LatchingBuilder() .withinEach(tre) .filterFirstBy(Filters.minDuration(Duration.of(3, Duration.SECONDS))) .thenFilterBy(Filters.minDuration(Duration.of(4, Duration.SECONDS))) .build();  final var tre2 = new TimeRangeExpression.Builder() .name("tre2") .from(ste2) .thenFilter(filter) .build();  final var res = tre2.computeRange(simResults, null, horizonW);  final var expected = new Windows(interval(0, Inclusive, 20, Exclusive, SECONDS), false) .set(List.of( interval(3, Inclusive, 6, Exclusive, SECONDS), interval(11, Inclusive, 15, Exclusive, SECONDS) ), true);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, res)
[-] pred: org. junit. Assert. assertEquals ( expected, res )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_less_than_max_event_size_THEN_return_false() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize(((thresholdConfig.getMaxEventSizeBytes()) - 1) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isEventGreater)
[-] pred: org. junit. Assert. assertFalse ( isEventGreater )
************************************
[+] input: testIsAutoRenewShouldReturnTrueWhenCalledWithBothTypesInMap() { //given final CertificateLifetimeActionTrigger trigger = new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10); final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map .of(EMAIL_CONTACTS, trigger, AUTO_RENEW, trigger); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final boolean actual = underTest.isAutoRenew();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: createConnectionViaUserPwdSqlException() { try (MockedStatic<DriverManager> driverMgr = Mockito.mockStatic(DriverManager.class)) { driverMgr.when(() -> DriverManager.getConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())) .thenThrow(SQLException.class);  Connection conn = DbUtil.createConnectionViaUserPwd("a", "b", "c"); "<AssertPlaceHolder>"; } }
[*] target: assertNull(conn)
[-] pred: org. junit. Assert. assertNull ( conn )
************************************
[+] input: Exception { CountDownLatch latch = new CountDownLatch(1); s1.registerCallback(new CountDownCallback(latch)); s2.registerCallback(new CountDownCallback(latch)); Exception e = null; try { c.getPeer("bogus").sendMessage(messages[0]); fail("bogus config"); } catch (IOChannelException ex) { e = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(e)
[-] pred: org. junit. Assert. assertNotNull ( e )
************************************
[+] input: setInitIdSegmentSql() { String initIdSegmentSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setInitIdSegmentSql(initIdSegmentSql); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(initIdSegmentSql, jdbc.getInitIdSegmentSql())
[-] pred: org. junit. Assert. assertEquals ( initIdSegmentSql, jdbc. getInitIdSegmentSql() )
************************************
[+] input: 사용자목록조회_성공() {  ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  webTestClient.method(HttpMethod.GET) .uri("/api/v1/"+category.getCodeId()+"/reserve-items"+"?page=0&size=3&isUse=true") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].reserveItemName").isEqualTo(reserveItem.getReserveItemName()); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: queryUnmodifiedWhenNoTrace() { TracingStatementInspector inspector = new TracingStatementInspector(null); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
[+] input: testGenNotifyBodyForCustom() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwdxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Custom") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
[+] input: testResta4() { int res = Calculadora.resta(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
[+] input: shouldCallThePrimitiveMatcherIfTheTwoObjectAreValue() { final var value1 = TextNode.valueOf(""); final var value2 = IntNode.valueOf(10);  final var primitiveMatcher = (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class), primitiveMatcher ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(primitiveMatcher.jsonDiff(path, value1, value2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, value1, value2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsLabeler_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("datagym", "eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
[+] input: testGetNotExistingEnumConstant() { MockEnum constant = ReflectionUtils.getEnumConstant(MockEnum.class, "CHOCOLATE");  "<AssertPlaceHolder>"; }
[*] target: assertNull(constant)
[-] pred: org. junit. Assert. assertNull ( constant )
************************************
[+] input: setNamespace() { String namespace = "snowflake-namespace"; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(namespace, idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, idDefinition. getNamespace() )
************************************
[+] input: testGetTargetCopy() { TreeNode original = new TreeNode(7); original.left = new TreeNode(4); original.right = new TreeNode(3); original.right.left = new TreeNode(6); original.right.right = new TreeNode(19); TreeNode target = original.right; TreeNode expected = testObject.getTargetCopy(original, original, target); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, target)
[-] pred: org. junit. Assert. assertEquals ( expected, target )
************************************
[+] input: testConstructorNullBody() { String message = "This is the message"; String body = null; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=null}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
[+] input: isValidDatasetArn_returns_false_when_arn_resource_is_not_dataset() { final String datasetArn = "arn:aws:personalize::123456789012:role/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
[*] target: assertFalse(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertFalse ( objectUnderTest. isValidDatasetArn() )
************************************
[+] input: testDense() { int[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  IntSparseNdArray instance = new IntSparseNdArray(indices, values, DimensionalSpace.create(shape)); IntNdArray denseInstance = instance.toDense(); IntNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); assertNotNull(location1);  webTestClient.put() .uri(API_URL+"/{locationId}", location1.getLocationId()) .contentType(MediaType.APPLICATION_JSON) .body(BodyInserters.fromValue(LocationUpdateRequestDto.builder() .locationName("updateLocation") .isUse(location1.getIsUse()) .sortSeq(location1.getSortSeq()) .build())) .exchange() .expectStatus().isNoContent();  Location updatedLocation = locationRepository.findById(location1.getLocationId()).block(); "<AssertPlaceHolder>"; assertEquals(updatedLocation.getLocationName(), "updateLocation"); }
[*] target: assertNotNull(updatedLocation)
[-] pred: org. junit. Assert. assertNotNull ( updatedLocation )
************************************
[+] input: testIsProviderCodeUniqueSameExists() { Provider provider = new Provider(1, "name-a", LocalDate.now(), "nationality-a", "code-a"); Mockito.when(dao.findProviderByCode(Mockito.any())).thenReturn(provider);  boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
[+] input: statCosIdGenerator() { var cosIdGenerator = new Radix36CosIdGenerator(0); var stat = cosIdGenerator.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(CosIdGeneratorStat.class)); var cosIdGeneratorStat = (CosIdGeneratorStat) stat; assertThat(cosIdGeneratorStat.getMachineId(), equalTo(0)); }
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
[+] input: shouldBuildAssignee() { Message message = MessageFactory.assignee(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getAbsoluto_test03() { int absoluto = Calculadora.getAbsoluto(20);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(20, absoluto)
[-] pred: org. junit. Assert. assertEquals ( 20, absoluto )
************************************
[+] input: incrementAndGet() { DefaultIdSegment segment = new DefaultIdSegment(1, 1); long id = segment.incrementAndGet(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, id)
[-] pred: org. junit. Assert. assertEquals ( 1, id )
************************************
[+] input: InvocationTargetException { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  List<LcEntry> testLcEntryLineList = LcEntryUtils.createTestLcEntryGeometryList(3, LcEntryType.LINE, testLabelConfiguration);  //When when(labelConfigRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration));  when(lcEntryRepositoryMock.findAllByParentEntryIsNullAndConfigurationId(anyString())) .thenReturn(testLcEntryLineList);  LcConfigDeleteViewModel lcConfigDeleteViewModel = labelConfigService.clearConfig(LC_CONFIG_ID);  System.out.println();  //Then "<AssertPlaceHolder>"; assertEquals(LC_CONFIG_ID, lcConfigDeleteViewModel.getConfigId());  ArgumentCaptor<String> idCapture = ArgumentCaptor.forClass(String.class); verify(lcEntryRepositoryMock, times(1)).deleteLcEntriesByConfigurationId(idCapture.capture()); assertThat(idCapture.getValue()).isEqualTo(LC_CONFIG_ID); verifyNoMoreInteractions(lcEntryRepositoryMock); }
[*] target: assertNotNull(lcConfigDeleteViewModel)
[-] pred: org. junit. Assert. assertNotNull ( lcConfigDeleteViewModel )
************************************
[+] input: jsonNullIsHandledSafely() { fakeStorage.setJsonData("last_used_dir", "null"); LastUsedDirPref pref = new LastUsedDirPref(fakeStorage);  "<AssertPlaceHolder>"; }
[*] target: assertNull(pref.get())
[-] pred: org. junit. Assert. assertNull ( pref. get() )
************************************
[+] input: test() { List<Integer> elements = Arrays.asList(1, 2, 3); PeekingIterator testObject = new PeekingIterator(elements.iterator()); assertEquals(1, testObject.next()); assertEquals(2, testObject.peek()); assertEquals(2, testObject.next()); assertEquals(3, testObject.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
[+] input: Exception { // 准备参数 Long configId = 10L; String path = "tudou.jpg"; // mock 方法 FileClient client = mock(FileClient.class); when(fileConfigService.getFileClient(eq(10L))).thenReturn(client); byte[] content = new byte[]{}; when(client.getContent(eq("tudou.jpg"))).thenReturn(content);  // 调用 byte[] result = fileService.getFileContent(configId, path); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertSame(result, content)
[-] pred: org. junit. Assert. assertSame ( result, content )
************************************
[+] input: shouldBuildDelegateImplementation() { Message message = MessageFactory.delegateImplementation(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testDecodeCellDesc() { var cells = Map.of( "key", RecordCellDesc.builder().dataStoreValueType(ColumnType.STRING).scalarValue("foo").build(), "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), "b", RecordCellDesc.builder() .dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))) .build(), "c", RecordCellDesc.builder().dataStoreValueType(ColumnType.BOOL).scalarValue("1").build(), "d", RecordCellDesc.builder() .dataStoreValueType(ColumnType.BYTES) .scalarValue(Base64.getEncoder().encodeToString("test".getBytes(StandardCharsets.UTF_8))) .build() ); var row = RecordRowDesc.builder().cells(cells).build(); var result = RecordDecoder.decodeRecord(row); var expected = Map.of( "key", BaseValue.valueOf("foo"), "a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.1f), "c", BaseValue.valueOf(true), "d", BaseValue.valueOf(ByteBuffer.wrap("test".getBytes())) ); assertEquals(expected, result);  cells = Map.of("null", RecordCellDesc.builder().dataStoreValueType(ColumnType.UNKNOWN).build()); row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = new HashMap<>() { { put("null", null); } }; assertEquals(expected, result);  // test list, tuple, map, object cells = Map.of( "list", RecordCellDesc.builder().dataStoreValueType(ColumnType.LIST).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))).build() )).build(),  "tuple", RecordCellDesc.builder().dataStoreValueType(ColumnType.TUPLE).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.2f))).build() )).build(),  "map", RecordCellDesc.builder().dataStoreValueType(ColumnType.MAP).mapValue(List.of( new RecordCellDesc.RecordCellMapItem( RecordCellDesc.builder() .dataStoreValueType(ColumnType.INT32) .scalarValue("00000001") .build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.3f))).build() ) )).build(),  "object", RecordCellDesc.builder().dataStoreValueType(ColumnType.OBJECT).objectValue( new RecordCellDesc.RecordCellObject( Map.of( "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32) .scalarValue("00000001").build(), "b", RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.4f))) .build() ), "t" ) ).build() );  row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = Map.of( "list", BaseValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.1f))), "tuple", TupleValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.2f))), "map", BaseValue.valueOf(Map.of(BaseValue.valueOf(1), BaseValue.valueOf(1.3f))), "object", ObjectValue.valueOf("t", Map.of("a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.4f))) ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetWorkflowNames10() { List<String> names = NextflowScript.getWorkflowNames("echo workflow ${value}"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: response_isnot_aggregation_when_aggregation_is_empty() { when(searchResponse.getAggregations()).thenReturn(null);  OpenSearchResponse response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
[*] target: assertFalse(response.isAggregationResponse())
[-] pred: org. junit. Assert. assertFalse ( response. isAggregationResponse ( ) )
************************************
[+] input: convertToEntityAttributeNull() { AnimalSexoConverter converter = new AnimalSexoConverter(); AnimalSexo convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: can_serialize_and_deserialize_predicates() { Expression original = DSL.or(literal(true), DSL.less(literal(1), literal(2))); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("eforce21", null, false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
[+] input: getAbsoluto_test02() { int absoluto = Calculadora.getAbsoluto(-10);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(10, absoluto)
[-] pred: org. junit. Assert. assertEquals ( 10, absoluto )
************************************
[+] input: testDense() {  ByteSparseNdArray instance = new ByteSparseNdArray(indices, values, DimensionalSpace.create(shape)); ByteNdArray denseInstance = instance.toDense(); ByteNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: getQuantidadeLetrasMinusculas_test05() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("FELIX"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
[+] input: shortfallTest() { //given int answer = 5; //when int result = sampleProvince.shortFall(); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: testIfMethodReturnsPositivePairsUntilNumber() { final int randomNumber = (new Random()).nextInt(100) + 1; List<String> expectedPairNumbers = intStreamToListString( IntStream.rangeClosed(1, randomNumber).filter(number -> number % 2 == 0)); List<String> actualPairNumbers = intStreamToListString( ExibindoNumerosPares.getPositivePairsUntilNumber(randomNumber)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPairNumbers, actualPairNumbers)
[-] pred: org. junit. Assert. assertEquals ( expectedPairNumbers, actualPairNumbers )
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithEmptyModel() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: JavetException { String message = "test"; List<V8ValueErrorType> types = SimpleList.of(V8ValueErrorType.values()); types.remove(types.size() - 1); for (V8ValueErrorType type : types) { try (V8ValueError v8ValueError = v8Runtime.createV8ValueError(type, message)) { assertEquals(message, v8ValueError.getMessage()); "<AssertPlaceHolder>"; } } }
[*] target: assertEquals(type, v8ValueError.getErrorType())
[-] pred: org. junit. Assert. assertEquals ( type, v8ValueError. getErrorType ( ) )
************************************
[+] input: IOException { when(restClient.indices().get(any(GetIndexRequest.class), any(RequestOptions.class))) .thenReturn(getIndexResponse); when(getIndexResponse.getIndices()).thenReturn(new String[] {"index"});  final List<String> indices = client.indices(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(indices.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( indices. isEmpty ( ) )
************************************
[+] input: emptyCycleTest() { Cycle<Integer> cycle = new Cycle<>(); Assertions.assertEquals(0, cycle.size()); Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(NoSuchElementException.class, cycle::next); }
[*] target: assertFalse(cycle.hasNext())
[-] pred: org. junit. Assert. assertFalse ( cycle. hasNext() )
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: existTest() { //given Team teamA = new Team("TeamA"); em.persist(teamA); Member member1 = new Member("member1", 10, teamA); em.persist(member1); //when Boolean exist = woowahwanMemberRepository.exist(member1.getId()); //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
[+] input: testCreateDiyPage_success() { // 准备参数 DiyPageCreateReqVO reqVO = randomPojo(DiyPageCreateReqVO.class);  // 调用 Long diyPageId = diyPageService.createDiyPage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyPageDO diyPage = diyPageMapper.selectById(diyPageId); assertPojoEquals(reqVO, diyPage); }
[*] target: assertNotNull(diyPageId)
[-] pred: org. junit. Assert. assertNotNull ( diyPageId )
************************************
[+] input: testValidShelleyAddress() { boolean isValid = AddressUtil.isValidAddress("addr1qxkeutm43mhc8jpqg6sk4cqtypzy3ez6z8k7qlfwa97h2acz7xprvuysll04e5gaa65vavyj0wvd0v99lhpntm7c03us8wk6xc");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
[+] input: testBuildQueryStringNestedQuote() { String rawQuery = "SELECT '"1"'"; String expectedQueryInParams = ""SELECT '\\"1\\"'""; String params = sparkSubmitParametersBuilder.query(rawQuery).toString(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(params.contains(expectedQueryInParams))
[-] pred: org. junit. Assert. assertTrue ( params. contains ( expectedQueryInParams ) )
************************************
[+] input: testAssign() { for (int i = 0; i < 20; ++i) { clusterManager.add(new ServerNode(String.valueOf(i), "", 0, 0, 0, 20 - i, 0, tags, true)); }  PartitionRangeAssignment pra = strategy.assign(100, 10, 2, tags); SortedMap<PartitionRange, List<ServerNode>> assignments = pra.getAssignments(); "<AssertPlaceHolder>";  for (int i = 0; i < 100; i += 10) { assignments.containsKey(new PartitionRange(i, i + 10)); }  int i = 0; Iterator<List<ServerNode>> ite = assignments.values().iterator(); while (ite.hasNext()) { List<ServerNode> cur = ite.next(); assertEquals(2, cur.size()); assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(0).getId()); i++; assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(1).getId()); i++; } }
[*] target: assertEquals(10, assignments.size())
[-] pred: org. junit. Assert. assertEquals ( 10, assignments. size ( ) )
************************************
[+] input: testDeleteMenu_success() { // mock 数据 MenuDO menuDO = randomPojo(MenuDO.class); menuMapper.insert(menuDO); // 准备参数 Long id = menuDO.getId();  // 调用 menuService.deleteMenu(id); // 断言 MenuDO dbMenuDO = menuMapper.selectById(id); "<AssertPlaceHolder>"; verify(permissionService).processMenuDeleted(id); }
[*] target: assertNull(dbMenuDO)
[-] pred: org. junit. Assert. assertNull ( dbMenuDO )
************************************
[+] input: getQuantidadeLetrasMinusculas_test04() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
[+] input: addsTwoTasks() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name); todoList.addTask(task2Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); assertEquals(task2Name, task2NameOf(todoList)); }
[*] target: assertEquals(2, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, todoList. size() )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_greater_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE + 1); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
[+] input: stringKeyedMapCompactFormat() { final Schema origSchema = SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build();  final Map<Object, Object> origValue = Map.of("field1", 1, "field2", 2);  // Use the newer compact format for map entries with string keys converter = createDataConverter(true); final Schema preProcessedSchema = converter.preProcessSchema(origSchema); assertEquals(SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build(), preProcessedSchema); final Map<?, ?> newValue = (Map<?, ?>) converter.preProcessValue(origValue, origSchema, preProcessedSchema); "<AssertPlaceHolder>"; }
[*] target: assertEquals(origValue, newValue)
[-] pred: org. junit. Assert. assertEquals ( origValue, newValue )
************************************
[+] input: testCreateNotifyTemplate_success() { // 准备参数 NotifyTemplateSaveReqVO reqVO = randomPojo(NotifyTemplateSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long notifyTemplateId = notifyTemplateService.createNotifyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 NotifyTemplateDO notifyTemplate = notifyTemplateMapper.selectById(notifyTemplateId); assertPojoEquals(reqVO, notifyTemplate, "id"); }
[*] target: assertNotNull(notifyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( notifyTemplateId )
************************************
[+] input: shouldWorkWithNoCronSet() { dateUtils.setCurrentNow(WINTER_TIME_DATE);  service.switchToSummerTime(); service.switchToWinterTime(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: setEnabled() { CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setEnabled(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(properties.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( properties. isEnabled() )
************************************
[+] input: shouldBuildInputOutputParameterIsNoExpression() { Message message = MessageFactory.inputOutputParameterIsNoExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: dataIntegrityViolationException() { ResponseEntity<StandardError> response = ecxeptionHandler .dataIntegrityViolationException( new DataIntegratyViolationException(E_MAIL_JA_CADASTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(E_MAIL_JA_CADASTRADO, response.getBody().getError()); assertEquals(400, response.getBody().getStatus()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: queryUnmodifiedWhenNoSpan() { TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
[+] input: get_should_create_a_server() { when(peerForwarderConfiguration.getMaxConnectionCount()).thenReturn(500); final Server server = createObjectUnderTest().get();  Assertions."<AssertPlaceHolder>"; assertThat(server, instanceOf(Server.class)); }
[*] target: assertNotNull(server)
[-] pred: org. junit. Assert. assertNotNull ( server )
************************************
[+] input: shouldBuildTimerExpressionMappedMessage() { String juelExpression = random(); String feelExpression = random(); Message message = timerExpressionMapped(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Timer expression was transformed: Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: isReadyForShutdownTest() { GeoIPProcessor geoIPProcessor = createObjectUnderTest(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(geoIPProcessor.isReadyForShutdown())
[-] pred: org. junit. Assert. assertTrue ( geoIPProcessor. isReadyForShutdown ( ) )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_greater_than_max_request_size_THEN_return_true() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes() + 1) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetRequestSize )
************************************
[+] input: testDivide3() { int a = 3; int b = 5; int res = Calculadora.divide(Calculadora.multiplica(a, b), b); "<AssertPlaceHolder>"; }
[*] target: assertEquals(a, res)
[-] pred: org. junit. Assert. assertEquals ( a, res )
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.purge(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/purge", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: checkForPreApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(null)); // mock 数据 OAuth2ApproveDO approve = randomPojo(OAuth2ApproveDO.class).setUserId(userId) .setUserType(userType).setClientId(clientId).setScope("read") .setExpiresTime(LocalDateTimeUtil.offset(LocalDateTime.now(), 1L, ChronoUnit.DAYS)).setApproved(false); // 拒绝 oauth2ApproveMapper.insert(approve);  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
[+] input: getRedis() { MachineProperties.Distributor distributor = new MachineProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(distributor.getRedis())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getRedis() )
************************************
[+] input: shouldBuildResource() { Message message = MessageFactory.resource(random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: checkForPreApproval_approve() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(null)); // mock 数据 OAuth2ApproveDO approve = randomPojo(OAuth2ApproveDO.class).setUserId(userId) .setUserType(userType).setClientId(clientId).setScope("read") .setExpiresTime(LocalDateTimeUtil.offset(LocalDateTime.now(), 1L, ChronoUnit.DAYS)).setApproved(true); // 同意 oauth2ApproveMapper.insert(approve);  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: visualizeGraphTest() { final var graph = new DirectedAcyclicGraph<>(); graph.addVertex("A"); graph.addVertex("B"); graph.addVertex("C"); graph.addVertex("D"); graph.addEdge("A", "B"); graph.addEdge("A", "C"); graph.addEdge("B", "D");  final var visualizer = new HorizontalGraphVisualizer<>(); final var config = new GraphLayoutConfig<>() { @NotNull @Override public Dimension getSize(@NotNull Object vertex) { return new Dimension(20, 10); }  @NotNull @Override public Dimension getSpacing() { return new Dimension(5, 5); } };  final var layouts = visualizer.create(graph, config); final var expected = List.of( new DefaultGraphLayout<>("A", new Point(0, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("B", new Point(25, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("C", new Point(25, 15), new Dimension(20, 10)), new DefaultGraphLayout<>("D", new Point(50, 0), new Dimension(20, 10)) );  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, layouts)
[-] pred: org. junit. Assert. assertEquals ( expected, layouts )
************************************
[+] input: testCreateApp_success() { // 准备参数 PayAppCreateReqVO reqVO = randomPojo(PayAppCreateReqVO.class, o -> o.setStatus((RandomUtil.randomEle(CommonStatusEnum.values()).getStatus())) .setOrderNotifyUrl(randomURL()) .setRefundNotifyUrl(randomURL()));  // 调用 Long appId = appService.createApp(reqVO); // 断言 "<AssertPlaceHolder>"; PayAppDO app = appMapper.selectById(appId); assertPojoEquals(reqVO, app); }
[*] target: assertNotNull(appId)
[-] pred: org. junit. Assert. assertNotNull ( appId )
************************************
[+] input: shouldBuildInternalScript() { Message message = MessageFactory.internalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Script is transformed to Zeebe script."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testDense() { long[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  LongSparseNdArray instance = new LongSparseNdArray(indices, values, DimensionalSpace.create(shape)); LongNdArray denseInstance = instance.toDense(); LongNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidOctParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new OctKeyCreationInput(KeyType.OCT_HSM, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testDense() {  BooleanSparseNdArray instance = new BooleanSparseNdArray(indices, values, DimensionalSpace.create(shape)); BooleanNdArray denseInstance = instance.toDense(); BooleanNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: isEmpty() { TokenQueue queue = provideEmptyTokenQueue(); assertTrue(queue.isEmpty());  queue = provide2TokenQueue(); assertFalse(queue.isEmpty());  queue.consume(); assertFalse(queue.isEmpty());  queue.consume(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(queue.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( queue. isEmpty() )
************************************
[+] input: testProcessMenuDeleted() { // 准备参数 Long menuId = randomLongId(); // mock 数据 RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setMenuId(menuId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processMenuDeleted(menuId); // 断言数据 List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
[+] input: setNamespace() { String namespace = "test"; CosIdProperties properties = new CosIdProperties(); properties.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(namespace, properties.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, properties. getNamespace() )
************************************
[+] input: shouldBuildElementVariable() { Message message = MessageFactory.elementVariable(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: can_serialize_and_deserialize_references() { Expression original = ref("name", STRING); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: deveRetornarAlunoValido() { AlunoBuilder alunoBuilder = new AlunoBuilder(); Aluno aluno = alunoBuilder .setMatricula(1) .setNome("Aluno 1") .setEmail("aluno1@email.com") .build();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(aluno)
[-] pred: org. junit. Assert. assertNotNull ( aluno )
************************************
[+] input: XMLParseException { InputStream inputStream = Thread.currentThread().getContextClassLoader() .getResourceAsStream("xml-parser-process.xml"); Element processElement = new XMLParser().parseFirstElement(inputStream);  "<AssertPlaceHolder>"; assertEquals("Definitions_12vhdwp", processElement.getAttributeValue("id")); assertTrue(processElement.getChildElement().stream() .anyMatch(element -> "process".equals(element.getType().getLocalPart()))); }
[*] target: assertNotNull(processElement)
[-] pred: org. junit. Assert. assertNotNull ( processElement )
************************************
[+] input: shouldBuildConnectorHint() { Message message = MessageFactory.connectorHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: ServiceException { boolean check = false; assert (check = true); if (check) { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); mbox.lock.lock(false); assertFalse(mbox.lock.isUnlocked()); assertFalse(mbox.lock.isWriteLockedByCurrentThread()); boolean good = true; try { mbox.lock.lock(true); good = false; } catch (AssertionError e) { //expected } "<AssertPlaceHolder>"; } else { ZimbraLog.test.debug("skipped testWriteWhileHoldingRead since asserts are not enabled"); //without this the test times out eventually, but we want tests to be fast so skip this one } }
[*] target: assertTrue(good)
[-] pred: org. junit. Assert. assertTrue ( good )
************************************
[+] input: setBrokenThreshold() { int brokenThreshold = 10; MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); clockBackwards.setBrokenThreshold(brokenThreshold); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(brokenThreshold, clockBackwards.getBrokenThreshold())
[-] pred: org. junit. Assert. assertEquals ( brokenThreshold, clockBackwards. getBrokenThreshold() )
************************************
[+] input: testIsProviderCodeUniqueDoesntExist() { boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
[+] input: shouldCreateCommandForLongChain() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, AdminConstants.DEFAULT_CHAIN, domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: shouldBuildElementAvailableInFutureVersion() { Message message = MessageFactory.elementAvailableInFutureVersion("inclusiveGateway", "8.0.0", "8.1.0"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Element 'inclusiveGateway' is not supported in Zeebe version '8.0.0'. It is available in version '8.1.0'."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: isAdminOrUser_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: shouldFormatCorrectlyWhenCalledProcessComplexStat() {  StringBuilder buf = new StringBuilder(); String[] header = {"command", "exec_count", "exec_ms_avg"}; String[] stats = {"NoOpRequest", "2", "0"};  PrometheusFormatter.processComplexStats("soap", buf, header, stats);  String expected = "soap_exec_count {command="NoOpRequest"} 2\n" + "soap_exec_ms_avg {command="NoOpRequest"} 0\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, buf.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, buf. toString ( ) )
************************************
[+] input: 한건조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  ReserveItemResponseDto responseBody = webTestClient.get() .uri(API_URL+"/{reserveItemId}", saved.getReserveItemId()) .exchange() .expectStatus().isOk() .expectBody(ReserveItemResponseDto.class) .returnResult().getResponseBody();  assertThat(responseBody.getCategoryId()).isEqualTo(category.getCodeId()); assertThat(responseBody.getReserveItemName()).isEqualTo(saved.getReserveItemName());  }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: setFriendly() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setFriendly(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(idDefinition.isFriendly())
[-] pred: org. junit. Assert. assertFalse ( idDefinition. isFriendly() )
************************************
[+] input: shouldCreateConnectCluster() { ConnectCluster connectCluster = ConnectCluster.builder() .metadata(Metadata.builder() .name("prefix.connect-cluster") .build()) .spec(ConnectCluster.ConnectClusterSpec.builder() .url("https://after") .build()) .build();  when(connectClusterRepository.create(connectCluster)) .thenReturn(connectCluster);  ConnectCluster actual = connectClusterService.create(connectCluster); "<AssertPlaceHolder>"; }
[*] target: assertEquals(connectCluster, actual)
[-] pred: org. junit. Assert. assertEquals ( connectCluster, actual )
************************************
[+] input: IOException { List<? extends JavaFileObject> files = List.of( testFiles.get( "/workspace/com/gazelle/java/javaparser/generators/AnonymousInnerClass.java")); parser.parseClasses(files);  Set<String> expectedTypes = Set.of( "java.util.HashMap", "javax.annotation.Nullable", "org.jetbrains.annotations.Nullable"); "<AssertPlaceHolder>";  Map<String, ClasspathParser.PerClassData> expectedPerClassMetadata = new TreeMap<>(); TreeMap<String, SortedSet<String>> expectedPerMethodAnnotations = new TreeMap<>(); expectedPerMethodAnnotations.put( "containsValue", treeSet("Override", "javax.annotation.Nullable")); // This anonymous inner class really has a name like $1, but we don't know what number it will // end up getting given, so we just use the empty string for anonymous inner classes. expectedPerClassMetadata.put( "workspace.com.gazelle.java.javaparser.generators.AnonymousInnerClass.", new ClasspathParser.PerClassData(treeSet(), expectedPerMethodAnnotations, new TreeMap<>())); assertEquals(expectedPerClassMetadata, parser.perClassData); }
[*] target: assertEquals(expectedTypes, parser.getUsedTypes())
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, parser. getUsedTypes() )
************************************
[+] input: serialize_WithBytesContainingSpecialCharacters_ReturnsEscapedJson() { // Test for serializing bytes with special characters GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{34, 92, 13, 10, 9}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\"\\\\\\r\\n\\t"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: testListClusterRolesByClusterId() { // Setup final List<ClusterRoleInfo> expectedResult = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes"))));  // Configure ClusterRoleService.getAllRoleClusterByClusterId(...). final List<ClusterRoleInfo> clusterRoleInfos = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes")))); when(mockClusterRoleService.getAllRoleClusterByClusterId(0)).thenReturn(clusterRoleInfos);  // Run the test final List<ClusterRoleInfo> result = clusterPhyManager.listClusterRolesByClusterId(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor("const x = {a:1,b:2}; x;").execute()) { try (V8ValueProxy v8ValueProxy = v8Runtime.createV8ValueProxy(v8ValueObject)) { assertNotNull(v8ValueProxy); assertFalse(v8ValueProxy.isRevoked()); assertEquals(1, v8ValueProxy.getInteger("a")); assertEquals(2, v8ValueProxy.getInteger("b")); assertTrue(v8ValueProxy.get("c").isUndefined()); v8ValueObject.set("c", 3); assertEquals(3, v8ValueProxy.getInteger("c")); assertEquals("{"a":1,"b":2,"c":3}", v8ValueProxy.toJsonString()); v8ValueProxy.revoke(); "<AssertPlaceHolder>"; } } }
[*] target: assertTrue(v8ValueProxy.isRevoked())
[-] pred: org. junit. Assert. assertTrue ( v8ValueProxy. isRevoked() )
************************************
[+] input: testManifestRequiresChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls"); File manifest = tempFolder.resolve("manifest.props").toFile();  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().contains(foo));  sfm.syncManifest(); Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions.assertTrue(sfm.getChangedFiles().isEmpty()); sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
[+] input: testUpdateStartedTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid22") .name("test_step22") .jobId(3L) .lastStepId(5L) .status(StepStatus.RUNNING) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateStartedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(3L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getStartedTime().getTime()); }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: testBufferIsEmpty_without_write() { final PeerForwarderReceiveBuffer<Record<String>> peerForwarderReceiveBuffer = createObjectUnderTest(TEST_BUFFER_SIZE);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(peerForwarderReceiveBuffer.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( peerForwarderReceiveBuffer. isEmpty ( ) )
************************************
[+] input: filterUncompletedTasksOfOneUncompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
[+] input: setSequenceBit() { int sequenceBit = 10; SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); idDefinition.setSequenceBit(sequenceBit); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(sequenceBit, idDefinition.getSequenceBit())
[-] pred: org. junit. Assert. assertEquals ( sequenceBit, idDefinition. getSequenceBit() )
************************************
[+] input: shouldBuildElementNotSupported() { Message message = MessageFactory.elementNotSupported(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testAsPolicyUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPolicyUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + "/policy"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: IllegalAccessException { MockFields obj = new MockFields(); Field field = ReflectionUtils.getField(obj.getClass(), "name");  "<AssertPlaceHolder>"; assertEquals("Joe", field.get(obj)); }
[*] target: assertNotNull(field)
[-] pred: org. junit. Assert. assertNotNull ( field )
************************************
[+] input: testShouldNotFilterShouldReturnTrueWhenRequestBaseUriIsPing() { //given when(request.getRequestURI()).thenReturn("/ping");  //when final boolean actual = underTest.shouldNotFilter(request);  //then Assertions."<AssertPlaceHolder>"; verify(request, atLeastOnce()).getRequestURI(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testSaveEntity() { User user = randomUser();  User created = repository.save(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(created)
[-] pred: org. junit. Assert. assertNotNull ( created )
************************************
[+] input: serialize_WithNullValue_ReturnsCorrectJson() { // Test for serializing null value GenericRecord record = new GenericData.Record(SCHEMA); record.put("nested", null);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: shouldBuildAttributeRemoved() { Message message = MessageFactory.attributeRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testShouldRender() { ProfileAwareWaypoint waypoint = new ProfileAwareWaypoint(BlockPos.ORIGIN, null, null, null); waypoint.setFound("profile"); Assertions.assertTrue(waypoint.shouldRender()); waypoint.setFound(""); Assertions.assertFalse(waypoint.shouldRender()); waypoint.setMissing(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(waypoint.shouldRender())
[-] pred: org. junit. Assert. assertTrue ( waypoint. shouldRender() )
************************************
[+] input: Exception { String html = "<div id="noticias"><div class="bloque">BLOQUESSS</div></div>"; String result = new OwaspHtmlSanitizer(html, true, null).sanitize(); // check that the id and class attributes are not removed "<AssertPlaceHolder>"; }
[*] target: assertEquals(result, html)
[-] pred: org. junit. Assert. assertEquals ( result, html )
************************************
[+] input: principal_creationWorks() { val sessionID = Utils.generateRandomID(); val memberID = Utils.generateRandomID(); val principal = new MemberPrincipal(sessionID, memberID); assertEquals(principal.getSessionID(), sessionID); assertEquals(principal.getMemberID(), memberID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(principal.getName(), memberID)
[-] pred: org. junit. Assert. assertEquals ( principal. getName(), memberID )
************************************
[+] input: testCopy() { // Tests round-tripping a json document that contains all event types and various kinds of nesting  String json = "{\n" + "  "p1": "str1",\n" + "  "p2": 42,\n" + "  "p3": ["str31", "str32"],\n" + "  "p4": {\n" + "    "p41": "str41",\n" + "    "p42": ["str421", "str422"],\n" + "    "p43": {\n" + "      "p431": "str431"\n" + "    },\n" + "    "p44": true,\n" + "    "p45": false,\n" + "    "p46": 3.14\n" + "  },\n" + "  "p5": [{\n" + "    "p51": {\n" + "      "p511": "str511"\n" + "    }\n" + "  }],\n" + "  "p6": null\n" + "}\n";  json = normalizeIndent(json);  JsonProvider provider = JsonpUtils.provider();  JsonParser parser = provider.createParser(new StringReader(json)); StringWriter sw = new StringWriter(); JsonGenerator generator = provider.createGenerator(sw);  JsonpUtils.copy(parser, generator); parser.close(); generator.close();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(json, sw.toString())
[-] pred: org. junit. Assert. assertEquals ( json, sw. toString ( ) )
************************************
[+] input: testGetChannelListByAppIds() { // mock 数据 PayChannelDO dbChannel01 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.ALIPAY_APP.getCode()); o.setConfig(randomAlipayPayClientConfig()); }); channelMapper.insert(dbChannel01);// @Sql: 先插入出一条存在的数据 PayChannelDO dbChannel02 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.WX_PUB.getCode()); o.setConfig(randomWxPayClientConfig()); }); channelMapper.insert(dbChannel02);// @Sql: 先插入出一条存在的数据 // 准备参数 Long appId = dbChannel01.getAppId();  // 调用 List<PayChannelDO> channels = channelService.getChannelListByAppIds(Collections.singleton(appId)); // 校验是否更新正确 "<AssertPlaceHolder>"; assertPojoEquals(dbChannel01, channels.get(0)); }
[*] target: assertEquals(1, channels.size())
[-] pred: org. junit. Assert. assertEquals ( 1, channels. size ( ) )
************************************
[+] input: shouldBuildLocalVariablePropagationNotSupported() { Message message = MessageFactory.localVariablePropagationNotSupported(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: queryWithUnknownTraceId() { String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(TracingStatementInspector.UNKNOWN_TRACE_ID); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGenNotifyBody() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwidxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Admin") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
[+] input: QueryParam() { //       OrderSearchParams orderSearchParams = new OrderSearchParams(); //       orderSearchParams.setPageSize(0); //       orderSearchParams.setPageNumber(10); //       IPage<OrderSimpleVO> orderVOIPage = orderService.queryByParams(orderSearchParams); //       Assertions."<AssertPlaceHolder>"; //       orderVOIPage.getRecords().forEach(System.out::println); }
[*] target: assertNotNull(orderVOIPage)
[-] pred: org. junit. Assert. assertNotNull ( orderVOIPage )
************************************
[+] input: getAllDatasetsFromOrganisationAndLoggedInUserIsAdmin_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(datasetRepositoryMock.findAllByDeletedIsFalseAndOwner("datagym")).thenReturn(new ArrayList<>()); List<DatasetViewModel> allDatasets = datasetService.getAllDatasetsFromOrganisationAndLoggedInUserIsAdmin();  //Then "<AssertPlaceHolder>";  verify(datasetRepositoryMock).findAllByDeletedIsFalseAndOwner("eforce21"); verify(datasetRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner("eforce21"); }
[*] target: assertTrue(allDatasets.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allDatasets. isEmpty ( ) )
************************************
[+] input: getQuantidadeDePessoasQueComecamComALetra_test02() { List<String> pessoas = new ArrayList<>(asList("Felix", "Daiane", "Erivelto", "Paulo", "Maycon", "Elizandro")); long quantidade = ArrayLists.getQuantidadeDePessoasQueComecamComALetra(pessoas, "A");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidade)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidade )
************************************
[+] input: testGetMethodWithInvalidParams() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnInteger", String.class);  "<AssertPlaceHolder>"; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
[+] input: testIsEqualTo() { PrefixedVersion version = new PrefixedVersion("TEST #", 10); PrefixedVersion version2 = new PrefixedVersion("TEST #", 10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode(), version2. hashCode() )
************************************
[+] input: overflowMana() { String res = tracker.update("§61605/1305❤     §a270§a❈ Defense     §b548/548✎ §3200ʬ", false); "<AssertPlaceHolder>"; assertStats(1605, 1305, 270, 548, 548, 200); }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: testCreateTag_success() { // 准备参数 MemberTagCreateReqVO reqVO = randomPojo(MemberTagCreateReqVO.class);  // 调用 Long tagId = tagService.createTag(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberTagDO tag = tagMapper.selectById(tagId); assertPojoEquals(reqVO, tag); }
[*] target: assertNotNull(tagId)
[-] pred: org. junit. Assert. assertNotNull ( tagId )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_log_send_interval_equal_to_max_log_send_interval_THEN_return_true() { boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME, thresholdConfig.getMaxRequestSizeBytes(),ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetTime)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetTime )
************************************
[+] input: shouldGetFirstMatchingLabelNodeInstruction() {  List<Integer[]> labelIndexPairs = ImmutableList.of( new Integer[] { 0, 6 }, new Integer[] { 6, 12 }, new Integer[] { 12, 23 }, new Integer[] { 23, 27 } ); for (int i1 = 0; i1 < labelIndexPairs.size(); i1++) { List<AbstractInsnNode> insnToMatch = new ArrayList<>(); Integer[] labelIndexPair = labelIndexPairs.get(i1); for (int i2 = labelIndexPair[0]; i2 < labelIndexPair[1]; i2++) { insnToMatch.add(instructions.get(i2)); } LabelNode expectedLabel = LABELS[i1]; LabelNode actualLabel = AsmUtils.getFirstMatchingLabelNode(createInstructionList(), insnToMatch); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedLabel, actualLabel)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel )
************************************
[+] input: testGetWorkflowNames9() { List<String> names = NextflowScript.getWorkflowNames("workflow      { some content }"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: test() { MyQueue myQueue = new MyQueue(); myQueue.push(1); myQueue.push(2); assertEquals(1, myQueue.peek()); assertEquals(1, myQueue.pop()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(myQueue.empty())
[-] pred: org. junit. Assert. assertFalse ( myQueue. empty() )
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.delete() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isNoContent();  }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: shouldValidateUpdateTopicCleanupPolicyDeleteToCompactOnSelfManaged() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .build();  Topic existing = Topic.builder() .metadata(Metadata.builder() .name("test.topic") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .configs(Map.of("cleanup.policy", "delete", "min.insync.replicas", "2", "retention.ms", "60000")) .build()) .build();  Topic topic = Topic.builder() .metadata(Metadata.builder() .name("test.topic") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .configs(Map.of("cleanup.policy", "compact", "min.insync.replicas", "2", "retention.ms", "60000")) .build()) .build();  when(managedClusterProperties.stream()).thenReturn( Stream.of(new ManagedClusterProperties("local", ManagedClusterProperties.KafkaProvider.SELF_MANAGED)));  List<String> actual = topicService.validateTopicUpdate(ns, existing, topic);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 0, actual. size ( ) )
************************************
[+] input: initializationSpan() { SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("dev") .setApplicationName("testApp") .setRumAccessToken("accessToken");  ApplicationInfo appInfo = new ApplicationInfo(); appInfo.labelRes = 14;  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper); when(context.getApplicationInfo()).thenReturn(appInfo); when(context.getString(appInfo.labelRes)).thenReturn(APP_NAME);  InMemorySpanExporter testExporter = InMemorySpanExporter.create(); AppStartupTimer startupTimer = new AppStartupTimer(); RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, startupTimer) { @Override SpanExporter buildFilteringExporter( CurrentNetworkProvider connectionUtil, VisibleScreenTracker visibleScreenTracker) { return testExporter; } }; SplunkRum splunkRum = testInitializer.initialize(mainLooper); startupTimer.runCompletionCallback(); splunkRum.flushSpans();  List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>"; SpanData initSpan = spans.get(0); assertEquals( initSpan.getParentSpanContext(), startupTimer.getStartupSpan().getSpanContext());  verifyResource(initSpan); assertEquals("SplunkRum.initialize", initSpan.getName()); assertEquals("appstart", initSpan.getAttributes().get(COMPONENT_KEY)); assertEquals( "[debug:false,crashReporting:true,anrReporting:true,slowRenderingDetector:true,networkMonitor:true]", initSpan.getAttributes().get(stringKey("config_settings")));  List<EventData> events = initSpan.getEvents(); assertTrue(events.size() > 0); checkEventExists(events, "connectionUtilInitialized"); checkEventExists(events, "exporterInitialized"); checkEventExists(events, "tracerProviderInitialized"); checkEventExists(events, "activityLifecycleCallbacksInitialized"); checkEventExists(events, "crashReportingInitialized"); checkEventExists(events, "anrMonitorInitialized"); }
[*] target: assertEquals(1, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 1, spans. size ( ) )
************************************
[+] input: IOException { KeyManager km = SingleConnectorServicesProvider.getKeyFromKeyStoreUri(new File(keystoreFileName).toURI().toString()+"?alias=key2", keystoreFilePass); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(km)
[-] pred: org. junit. Assert. assertNotNull ( km )
************************************
[+] input: signalWithSameNameShouldBeEqual() { Signal a = Signal.of("signal"); Signal b = Signal.of("signal");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: Throwable { FastMethod fm = FastMethod.create(String.class.getMethod("startsWith", String.class)); boolean result = (boolean) fm.invoke("abc", "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: mustBeOnElVibratoIsland() { var cleanups = new Cleanups( withLastLocation("Haunted Pantry"), withFight(1), withNextMonster("lonely construct")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
[+] input: testConstructorCause() { String message = "This is the message"; Throwable cause = new RuntimeException(); String body = "This is the body"; int code = 403;  HttpResponseException exception = new HttpResponseException(message, cause, body, code);  assertEquals(message, exception.getMessage()); assertSame(cause, exception.getCause()); assertEquals(body, exception.getBody()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(code, exception.getCode())
[-] pred: org. junit. Assert. assertEquals ( code, exception. getCode() )
************************************
[+] input: ReflectiveOperationException { final boolean[] bools = new boolean[2]; final PojoMapper<TestProperties> pojoMapper = PojoMapper.create(TestProperties.class); pojoMapper.addListener(new PojoListener() { @Override public void onPropertyAdded(PojoMapper<?> pojoMapper, PojoProperty pojoProperty) { bools[0] = true; }  @Override public void onMapperInitialized(PojoMapper<?> pojoMapper) { bools[1] = true; } }); pojoMapper.init();  for (boolean bool : bools) { Assertions."<AssertPlaceHolder>"; } }
[*] target: assertTrue(bool)
[-] pred: org. junit. Assert. assertTrue ( bool )
************************************
[+] input: testFinalPositionOfSnakeMixedCommands() { List<String> commands = List.of("DOWN", "RIGHT", "UP", "LEFT", "UP", "DOWN", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
[+] input: readServiceVersionFromEnv() { final String version = "1.2.3"; final Map<String, String> env = new HashMap<>(); env.put("VERSION", version); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
[+] input: setCorePoolSize() { int corePoolSize = 1; SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setCorePoolSize(corePoolSize); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(corePoolSize, prefetchWorker.getCorePoolSize())
[-] pred: org. junit. Assert. assertEquals ( corePoolSize, prefetchWorker. getCorePoolSize() )
************************************
[+] input: whenCreateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.create(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: returnsNullWhenBuyerDoesntExist() { var cm = CoinmasterRegistry.findBuyer(ItemPool.SEAL_CLUB); "<AssertPlaceHolder>"; }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
[+] input: testCreateMailAccount_success() { // 准备参数 MailAccountSaveReqVO reqVO = randomPojo(MailAccountSaveReqVO.class, o -> o.setMail(randomEmail())) .setId(null); // 防止 id 被赋值  // 调用 Long mailAccountId = mailAccountService.createMailAccount(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailAccountDO mailAccount = mailAccountMapper.selectById(mailAccountId); assertPojoEquals(reqVO, mailAccount, "id"); }
[*] target: assertNotNull(mailAccountId)
[-] pred: org. junit. Assert. assertNotNull ( mailAccountId )
************************************
[+] input: can_serialize_and_deserialize_literals() { Expression original = literal(10); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: shouldBuildLoopCardinality() { Message message = MessageFactory.loopCardinality(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildInAllNotRecommendedHint() { Message message = MessageFactory.inAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testParseSmsReceiveStatus() { // 准备参数 String text = "[\n" + "    {\n" + "        "user_receive_time": "2015-10-17 08:03:04",\n" + "        "nationcode": "86",\n" + "        "mobile": "13900000001",\n" + "        "report_status": "SUCCESS",\n" + "        "errmsg": "DELIVRD",\n" + "        "description": "用户短信送达成功",\n" + "        "sid": "12345",\n" + "        "ext": {"logId":"67890"}\n" + "    }\n" + "]";  // 调用 List<SmsReceiveRespDTO> statuses = smsClient.parseSmsReceiveStatus(text); // 断言 "<AssertPlaceHolder>"; assertTrue(statuses.get(0).getSuccess()); assertEquals("DELIVRD", statuses.get(0).getErrorCode()); assertEquals("13900000001", statuses.get(0).getMobile()); assertEquals(LocalDateTime.of(2015, 10, 17, 8, 3, 4), statuses.get(0).getReceiveTime()); assertEquals("12345", statuses.get(0).getSerialNo()); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
[+] input: setConverter() { IdConverterDefinition converter = new IdConverterDefinition(); SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setConverter(converter); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(converter, idDefinition.getConverter())
[-] pred: org. junit. Assert. assertEquals ( converter, idDefinition. getConverter() )
************************************
[+] input: testSetLifetimeActionsShouldOverwriteTheMapWhenCalledWithValidData() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, Map.of());  //when underTest.setLifetimeActions(expected);  //then final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> actual = underTest.getLifetimeActions(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateSeckillConfig_success() { // 准备参数 SeckillConfigCreateReqVO reqVO = randomPojo(SeckillConfigCreateReqVO.class);  // 调用 Long SeckillConfigId = SeckillConfigService.createSeckillConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillConfigDO SeckillConfig = seckillConfigMapper.selectById(SeckillConfigId); assertPojoEquals(reqVO, SeckillConfig); }
[*] target: assertNotNull(SeckillConfigId)
[-] pred: org. junit. Assert. assertNotNull ( SeckillConfigId )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test07() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
[+] input: shouldBuildExecutionListener() { Message message = MessageFactory.executionListener("start", "${myExecutionListener}"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Listener at 'start' with implementation '${myExecutionListener}' cannot be transformed. Execution Listeners do not exist in Zeebe."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "not-existing"; final String expectedErrorMessage = String.format("Item lcEntry with entry_key %s not found.", lcEntryKey); final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId);  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)) .thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()) .thenReturn(project); Mockito.when(labelTask.getLabelTaskState()) .thenReturn(LabelTaskState.COMPLETED);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: getHostIP() { String hostIP = HostUtils.getHostIP(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(hostIP)
[-] pred: org. junit. Assert. assertNotNull ( hostIP )
************************************
[+] input: convertToEntityAttributeNull() { AnimalClassificacaoEtariaConverter animalConverter = new AnimalClassificacaoEtariaConverter(); AnimalClassificacaoEtaria convert = animalConverter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: testResta1() { int res = Calculadora.resta(8, 3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, res)
[-] pred: org. junit. Assert. assertEquals ( 5, res )
************************************
[+] input: drawImageWithNullTransform() { Image img = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB); g2.drawImage(img, null, null); "<AssertPlaceHolder>"; // won't get here if there's an exception above }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: Exception { Account acct = Provisioning.getInstance().getAccountByName("testMove@zimbra.com"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(acct); // Add two messages to inbox, one with search match and other with no match DeliveryOptions dopt = new DeliveryOptions() .setFolderId(Mailbox.ID_FOLDER_INBOX) .setFlags(Flag.BITMASK_UNREAD | Flag.BITMASK_MUTED); mbox.addMessage(null, MailboxTestUtil.generateMessage("test subject"), dopt, null); mbox.addMessage(null, MailboxTestUtil.generateMessage("unmatched subject"), dopt, null); TypedIdList ids = mbox.getItemIds(null, 2); assertEquals(2, ids.size()); SearchRequest sRequest = new SearchRequest(); sRequest.setSearchTypes("conversation"); // search with query 'test' sRequest.setQuery("test"); BulkAction bAction = new BulkAction(); // search action - move search result to 'Trash' bAction.setOp(BulkAction.Operation.move); bAction.setFolder("Trash"); Map<String, Object> context = ServiceTestUtil.getRequestContext(acct); ZimbraSoapContext zsc = (ZimbraSoapContext) context.get(SoapEngine.ZIMBRA_CONTEXT); Element searchResponse = new Search().handle(zsc.jaxbToElement(sRequest), ServiceTestUtil.getRequestContext(acct)); com.zimbra.soap.mail.message.SearchResponse sResponse = zsc.elementToJaxb(searchResponse); List<SearchHit> searchHits = sResponse.getSearchHits(); SearchAction.performAction(bAction, sRequest, searchHits, mbox, null); // check inbox contains only 1 unmatched mail item after move List<MailItem> mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 2, com.zimbra.cs.index.SortBy.DATE_DESC); "<AssertPlaceHolder>"; assertEquals("unmatched subject", mailItems.get(0).getSubject()); // check trash contains mail item having 'test subject' after move mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 3, com.zimbra.cs.index.SortBy.DATE_DESC); assertEquals(1, mailItems.size()); assertEquals("test subject", mailItems.get(0).getSubject()); }
[*] target: assertEquals(1, mailItems.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mailItems. size ( ) )
************************************
[+] input: mustHaveNormalPage() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(1), withNextMonster("lonely construct")); try (cleanups) { String input = "hello"; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
[+] input: profitTest() { //given int answer = 230; //when int result = sampleProvince.profit(); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: Exception { String masterAddresses = harness.getMasterAddressesAsString();  KuduTableInfo tableInfo = KuduTableInfo .forTable("test_speed") .createTableIfNotExists( () -> Lists.newArrayList( new ColumnSchema .ColumnSchemaBuilder("id", Type.INT32) .key(true) .build(), new ColumnSchema .ColumnSchemaBuilder("uuid", Type.STRING) .build() ), () -> new CreateTableOptions() .setNumReplicas(3) .addHashPartitions(Lists.newArrayList("id"), 6));  KuduWriterConfig writerConfig = KuduWriterConfig.Builder .setMasters(masterAddresses) .setEventualConsistency() .build(); KuduSink<Row> sink = new KuduSink<>(writerConfig, tableInfo, new RowOperationMapper(columns, AbstractSingleOperationMapper.KuduOperation.INSERT));  sink.setRuntimeContext(context); sink.open(new Configuration());  int totalRecords = 100000; for (int i = 0; i < totalRecords; i++) { Row kuduRow = new Row(2); kuduRow.setField(0, i); kuduRow.setField(1, UUID.randomUUID().toString()); sink.invoke(kuduRow); }  // sleep to allow eventual consistency to finish Thread.sleep(1000);  sink.close();  List<Row> rows = readRows(tableInfo); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(totalRecords, rows.size())
[-] pred: org. junit. Assert. assertEquals ( totalRecords, rows. size ( ) )
************************************
[+] input: iterator() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions."<AssertPlaceHolder>"; int idx = 0; for (String element : exactCollection) { Assertions.assertEquals(String.valueOf(idx), element); idx++; } }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
[+] input: mustBeFightingConstruct() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(1), withNextMonster("migratory pirate")); try (cleanups) { String input = html; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
[+] input: filterCompletedTasksOfOneCompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); final TaskId taskId = todoList.addTask(task1Name); todoList.toggleTaskCompletion(taskId);  final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
[+] input: findOrCacheSerializerShouldFindIfExists() { final SerializerFactory serializerFactory = Containers.get(SerializerFactory.class); final ObjectSerializerStringStringMock serializer = new ObjectSerializerStringStringMock(); serializerFactory.registerSerializer(serializer);  final ObjectSerializer<?, ?> cacheSerializer = serializerFactory.findOrCacheSerializer(ObjectSerializerStringStringMock.class);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(serializer, cacheSerializer)
[-] pred: org. junit. Assert. assertEquals ( serializer, cacheSerializer )
************************************
[+] input: testCreateConfig_success() { // 准备参数 ConfigSaveReqVO reqVO = randomPojo(ConfigSaveReqVO.class) .setId(null); // 防止 id 被赋值，导致唯一性校验失败  // 调用 Long configId = configService.createConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ConfigDO config = configMapper.selectById(configId); assertPojoEquals(reqVO, config, "id"); assertEquals(ConfigTypeEnum.CUSTOM.getType(), config.getType()); }
[*] target: assertNotNull(configId)
[-] pred: org. junit. Assert. assertNotNull ( configId )
************************************
[+] input: scanNamedDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.scanner.entity"}, new NamedDefinitionParser("id"), registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(OrderEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(OrderItemEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderItemEntity.class, cosIdAccessor.getIdDeclaringClass());  }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
[+] input: getNodeDetails_kraken_isNotOnline() { NodeDetailsDto kraken = demoDataService.getNodeDetails(KRAKEN.remotePubkey()); "<AssertPlaceHolder>"; assertFalse(kraken.onlineReport().online()); }
[*] target: assertNotNull(kraken)
[-] pred: org. junit. Assert. assertNotNull ( kraken )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test04() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
[+] input: getSecret() { KeypairReader reader = new AwsSecretsKeypairReader( new AwsSecretsManagerResolver(secretsManagerClient), keypairName); KeyPair keyPair = reader.loadKeys().block(); "<AssertPlaceHolder>"; assertThat(Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded())) .isEqualTo(priv); }
[*] target: assertNotNull(keyPair)
[-] pred: org. junit. Assert. assertNotNull ( keyPair )
************************************
[+] input: testFinalPositionOfSnakeAllCommands() { List<String> commands = List.of("UP", "DOWN", "LEFT", "RIGHT"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, result)
[-] pred: org. junit. Assert. assertEquals ( 4, result )
************************************
[+] input: shouldBuildResultVariableInternalScript() { Message message = MessageFactory.resultVariableInternalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Result variable is set to Zeebe script result variable."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  outputStream.write(inputBytes); outputStream.close();  String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
[+] input: testAddToAcknowledgementSetFromOriginEvent() { Map<String, Object> data = Map.of("k1","v1"); EventMetadata eventMetadata = mock(EventMetadata.class); Event originRecordEvent = JacksonEvent.builder() .withEventMetadata(eventMetadata) .withEventType("event") .withData(data) .build(); Event spyEvent = spy(originRecordEvent);  DefaultEventHandle mockEventHandle = mock(DefaultEventHandle.class); when(spyEvent.getEventHandle()).thenReturn(mockEventHandle);  Record record = splitEventProcessor .createNewRecordFromEvent(spyEvent, "v1");  Event recordEvent = (Event) record.getData(); splitEventProcessor.addToAcknowledgementSetFromOriginEvent(recordEvent, spyEvent);  DefaultEventHandle spyEventHandle = (DefaultEventHandle) spyEvent.getEventHandle(); // Verify that the add method is called on the acknowledgement set verify(spyEventHandle).getAcknowledgementSet();  AcknowledgementSet spyAckSet = spyEventHandle.getAcknowledgementSet(); DefaultEventHandle eventHandle = (DefaultEventHandle) recordEvent.getEventHandle(); AcknowledgementSet ackSet1 = eventHandle.getAcknowledgementSet();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(spyAckSet, ackSet1)
[-] pred: org. junit. Assert. assertEquals ( spyAckSet, ackSet1 )
************************************
[+] input: equals_false_when_vec3_equals() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3 vec3c2 = new Vec3(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: test_objectFileName_with_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}.pdf";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".pdf")); }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
[+] input: testCreateGroup_success() { // 准备参数 MemberGroupCreateReqVO reqVO = randomPojo(MemberGroupCreateReqVO.class, o -> o.setStatus(randomCommonStatus()));  // 调用 Long groupId = groupService.createGroup(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberGroupDO group = groupMapper.selectById(groupId); assertPojoEquals(reqVO, group); }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("require "variables"; tag "${subject} World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: Hello".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
[+] input: testCreateSocialClient_success() { // 准备参数 SocialClientSaveReqVO reqVO = randomPojo(SocialClientSaveReqVO.class, o -> o.setSocialType(randomEle(SocialTypeEnum.values()).getType()) .setUserType(randomEle(UserTypeEnum.values()).getValue()) .setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long socialClientId = socialClientService.createSocialClient(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SocialClientDO socialClient = socialClientMapper.selectById(socialClientId); assertPojoEquals(reqVO, socialClient, "id"); }
[*] target: assertNotNull(socialClientId)
[-] pred: org. junit. Assert. assertNotNull ( socialClientId )
************************************
[+] input: isValidDatasetArn_returns_false_when_arn_service_is_not_personalize() { final String datasetArn = "arn:aws:iam::123456789012:dataset/test"; final Map<String, Object> jsonMap = Map.of("dataset_arn", datasetArn); final PersonalizeSinkConfiguration objectUnderTest = objectMapper.convertValue(jsonMap, PersonalizeSinkConfiguration.class); "<AssertPlaceHolder>"; }
[*] target: assertFalse(objectUnderTest.isValidDatasetArn())
[-] pred: org. junit. Assert. assertFalse ( objectUnderTest. isValidDatasetArn() )
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeen() { creq = new ChatRequest(0L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
[+] input: testDense() { short[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  ShortSparseNdArray instance = new ShortSparseNdArray(indices, values, DimensionalSpace.create(shape)); ShortNdArray denseInstance = instance.toDense(); ShortNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: testAssignUserRole() { // 准备参数 Long userId = 1L; Set<Long> roleIds = asSet(200L, 300L); // mock 数据 UserRoleDO userRole01 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(100L); userRoleMapper.insert(userRole01); UserRoleDO userRole02 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(200L); userRoleMapper.insert(userRole02);  // 调用 permissionService.assignUserRole(userId, roleIds); // 断言 List<UserRoleDO> userRoleDOList = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, userRoleDOList.get(0).getUserId()); assertEquals(200L, userRoleDOList.get(0).getRoleId()); assertEquals(1L, userRoleDOList.get(1).getUserId()); assertEquals(300L, userRoleDOList.get(1).getRoleId()); }
[*] target: assertEquals(2, userRoleDOList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, userRoleDOList. size ( ) )
************************************
[+] input: testDivide4() { int a = 3; int b = 5; int res = Calculadora.divide(Calculadora.multiplica(a, b) + 1, b); "<AssertPlaceHolder>"; }
[*] target: assertEquals(a, res)
[-] pred: org. junit. Assert. assertEquals ( a, res )
************************************
[+] input: readContainerNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_CONTAINER_NAME); final String expected = "fooservice"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testAvailableChannel() { provider.add(mockChannelType, null, mockFactory); List<ChannelType> availableChannels = provider.availableChannel(); "<AssertPlaceHolder>"; assertFalse(availableChannels.isEmpty()); assertTrue(availableChannels.contains(mockChannelType)); }
[*] target: assertNotNull(availableChannels)
[-] pred: org. junit. Assert. assertNotNull ( availableChannels )
************************************
[+] input: streamTest() { Cycle<Integer> cycle = new Cycle<>(1, 2, 3, 4); List<Integer> expected = List.of(1, 2, 3, 4, 1, 2, 3, 4, 1, 2); List<Integer> actual; // Un-queried cycle actual = cycle.stream() .limit(expected.size()) .toList(); Assertions.assertEquals(expected, actual); // Queried cycle cycle.next(); actual = cycle.stream() .limit(expected.size()) .toList(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testKeyVaultFakeShouldNeverBeNullWhenCalled() { //given final VaultFakeImpl underTest = new VaultFakeImpl(HTTPS_LOCALHOST);  //when final KeyVaultFake actual = underTest.keyVaultFake();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: submitQuery() { NodeClient nodeClient = mock(NodeClient.class); ThreadPool threadPool = mock(ThreadPool.class); when(nodeClient.threadPool()).thenReturn(threadPool);  AtomicBoolean isRun = new AtomicBoolean(false); AbstractPlan queryPlan = new QueryPlan(queryId, plan, queryService, listener) { @Override public void execute() { isRun.set(true); } };  doAnswer( invocation -> { Runnable task = invocation.getArgument(0); task.run(); return null; }) .when(threadPool) .schedule(any(), any(), any()); new OpenSearchQueryManager(nodeClient).submit(queryPlan);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: setPrefetchPeriod() { Duration prefetchPeriod = Duration.ZERO; SegmentIdProperties.Chain.PrefetchWorker prefetchWorker = new SegmentIdProperties.Chain.PrefetchWorker(); prefetchWorker.setPrefetchPeriod(prefetchPeriod); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(prefetchPeriod, prefetchWorker.getPrefetchPeriod())
[-] pred: org. junit. Assert. assertEquals ( prefetchPeriod, prefetchWorker. getPrefetchPeriod() )
************************************
[+] input: create() { DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest(); request.setDatabaseType("ut-mysql"); request.setIcon(""); request.setDescription("integration test"); request.setJdbcDriverFileUrl("some url"); request.setJdbcDriverClassName("com.mysql.jdbc.Driver"); request.setJdbcProtocol("jdbc:mysql"); request.setUrlPattern("{{jdbc.protocol}}//{{db.url}}/{{db.schema}}"); Integer id = databaseTypeService.create(request); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: InterruptedException { final int capacity = 1 << 10; final int limit = 1 << 20; try (IntStack stack = new IntStack(Integer.MIN_VALUE, capacity >>> 1)) { final ExecutorService pool = Executors.newFixedThreadPool(8); for (int i = 0; i < limit; i++) { pool.execute(() -> stack.push(1)); } pool.shutdown(); Assertions.assertTrue(pool.awaitTermination(5, TimeUnit.SECONDS)); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(limit, stack.size())
[-] pred: org. junit. Assert. assertEquals ( limit, stack. size() )
************************************
[+] input: testAddAndGetWithId() { var step = StepEntity.builder() .uuid("uuid") .name("name") .jobId(4L) .lastStepId(5L) .status(StepStatus.RUNNING) .concurrency(3) .taskNum(10) .originJson("{"foo": "bar"}") .build();  stepMapper.save(step); var step2 = stepMapper.findById(step.getId()); step.setCreatedTime(step2.getCreatedTime()); step.setModifiedTime(step2.getModifiedTime()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(step, step2)
[-] pred: org. junit. Assert. assertEquals ( step, step2 )
************************************
[+] input: equals_false_when_null() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(null);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: testCreateTenantPackage_success() { // 准备参数 TenantPackageSaveReqVO reqVO = randomPojo(TenantPackageSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long tenantPackageId = tenantPackageService.createTenantPackage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 TenantPackageDO tenantPackage = tenantPackageMapper.selectById(tenantPackageId); assertPojoEquals(reqVO, tenantPackage, "id"); }
[*] target: assertNotNull(tenantPackageId)
[-] pred: org. junit. Assert. assertNotNull ( tenantPackageId )
************************************
[+] input: testCompareEquals() { DateTimeStamp object1 = new DateTimeStamp("2018-04-04T10:10:00.586-0100"); DateTimeStamp object2 = new DateTimeStamp("2018-04-04T10:10:00.586-0100"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, object1.compareTo(object2))
[-] pred: org. junit. Assert. assertEquals ( 0, object1. compareTo ( object2 ) )
************************************
[+] input: getName_ofCtorValue() { final var expected = "A"; final var obj = new ActivityType(expected); final var actual = obj.getName(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test06() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes()- ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
[+] input: testCreateAccount() { Account expected = new Account("Gigi", 2100, "223311"); when(mockRepo.findOne("Gigi")).thenReturn(Optional.empty()); when(mockRepo.save(any(Account.class))).thenReturn(expected);  Account result = service.createAccount("Gigi", "223311", "2100"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getOwnPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
[+] input: shouldCallTheObjectMatcherIfTheTwoObjectAreObject() { final var object1 = new ObjectNode(null); final var object2 = new ObjectNode(null);  final var objectMatcher = (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), objectMatcher, (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class) ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(objectMatcher.jsonDiff(path, object1, object2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, object1, object2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
[+] input: GeneralSecurityException { String password = "test_password"; ScryptKeyDeriver scryptKeyDeriver1 = new ScryptKeyDeriver(); ScryptParameters scryptParameters = scryptKeyDeriver1.getScryptParameters(); AesSecretKey key1 = scryptKeyDeriver1.deriveKeyFromPassword(password); byte[] plainText = "test_data".getBytes(); byte[] iv = AesGcm.generateIv().getIV(); byte[] cipherText = AesGcm.encrypt(key1, iv, plainText); EncryptedData encryptedData = new EncryptedData(iv, cipherText);  ScryptKeyDeriver scryptKeyDeriver2 = new ScryptKeyDeriver(scryptParameters); AesSecretKey key2 = scryptKeyDeriver2.deriveKeyFromPassword(password); byte[] decryptedData = AesGcm.decrypt(key2, encryptedData.getIv(), encryptedData.getCipherText()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(plainText, decryptedData)
[-] pred: org. junit. Assert. assertArrayEquals ( plainText, decryptedData )
************************************
[+] input: getJdbc() { SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(distributor.getJdbc())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getJdbc() )
************************************
[+] input: setShare() { SegmentIdProperties.ShardIdDefinition idDefinition = new SegmentIdProperties.ShardIdDefinition(); SegmentIdProperties properties = new SegmentIdProperties(); properties.setShare(idDefinition); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(idDefinition, properties.getShare())
[-] pred: org. junit. Assert. assertEquals ( idDefinition, properties. getShare() )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_request_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
[+] input: testDense() {  DoubleSparseNdArray instance = new DoubleSparseNdArray(indices, values, DimensionalSpace.create(shape)); DoubleNdArray denseInstance = instance.toDense(); DoubleNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: isAdminOrUser_whenUserHasUserRole_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("datagym", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: ctor() { ExactCollection<String> exactCollection = createExactCollection(10); Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
[+] input: JavetException { V8Runtime danglingV8Runtime; try (V8Runtime v8Runtime = v8Host.createV8Runtime()) { assertFalse(v8Runtime.isClosed()); danglingV8Runtime = v8Runtime; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(danglingV8Runtime.isClosed())
[-] pred: org. junit. Assert. assertTrue ( danglingV8Runtime. isClosed() )
************************************
[+] input: CannotParseOpenApiException { logger.info("Test specification type inference"); OpenApiParser openAPIParser = new OpenApiParser(ApiUnderTest.loadTestApiFromFile("type-inference")); openAPIParser.parse();  File solvedSpecification = new File("apis/.test-apis/type-inference/specifications/solved.json"); Map<String, Object> parsed = Helper.getParserMap (openAPIParser); Gson gson = new Gson(); Reader reader = Files.newBufferedReader(Paths.get(solvedSpecification.getAbsolutePath())); Map<String, Object> rightMap = gson.fromJson(reader, Map.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(rightMap, parsed)
[-] pred: org. junit. Assert. assertEquals ( rightMap, parsed )
************************************
[+] input: SGIVEN_greater_than_limit_method_WHEN_log_send_interval_greater_than_max_log_send_interval_THEN_return_true() { boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME + 1, thresholdConfig.getMaxRequestSizeBytes(),ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertTrue(thresholdMetTime)
[-] pred: org. junit. Assert. assertTrue ( thresholdMetTime )
************************************
[+] input: checkIfUserIsAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: testConfigLoadedLocale() { Locale locale = new Locale("de", "AT"); Configuration.resetTestingInstance(); Configuration instance = Configuration.getInstance(locale); String[] tsp_sources = instance.getProperties().getStringArray("tsp_sources"); "<AssertPlaceHolder>"; assertTrue(tsp_sources.length > 1); assertEquals("Zeitpunkt", instance.getResourceBundle().getString("timestamp")); }
[*] target: assertNotNull(tsp_sources)
[-] pred: org. junit. Assert. assertNotNull ( tsp_sources )
************************************
[+] input: shouldBuildDueDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.dueDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'dueDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IOException { Path path = new Path(HDFS_URI, "createStreamFirstTest"); try (HdfsFileWriter writer = new HdfsFileWriter(path, conf)) { assertTrue(fs.isFile(path)); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(0, writer.nextOffset())
[-] pred: org. junit. Assert. assertEquals ( 0, writer. nextOffset() )
************************************
[+] input: shouldCreateCommandWithLongChainForRandomText() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "random", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: haveTheSameOwner_whenFirstOwnerEqualsSecondOwner_returnsTrue() { // When boolean haveTheSameOwner = DataGymSecurity.haveTheSameOwner("eforce21", "eforce21");  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(haveTheSameOwner)
[-] pred: org. junit. Assert. assertTrue ( haveTheSameOwner )
************************************
[+] input: isEnabled() { CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
[+] input: test_buffer_notNull() { InMemoryBufferFactory inMemoryBufferFactory = new InMemoryBufferFactory(); Assertions.assertNotNull(inMemoryBufferFactory); Buffer buffer = inMemoryBufferFactory.getBuffer(null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(Buffer.class)); }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
[+] input: testOnTickPriceDiffAbort() { when(priceDiffConditionToAbort.test(anyDouble())).thenReturn(true); tradeIntent.onTick(tick); "<AssertPlaceHolder>"; verify(context, never()).submitOrderReq(any(), any(), any(), anyInt(), anyDouble()); }
[*] target: assertTrue(tradeIntent.hasTerminated())
[-] pred: org. junit. Assert. assertTrue ( tradeIntent. hasTerminated() )
************************************
[+] input: testNumberWithUnitValueProvided() { Duration expectedDuration = Duration.ofMinutes(3); Duration actualDuration = DurationUtils.parseDuration("3M", "refresh-period"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
[+] input: testEquals2() { ServiceNode serviceNode = new ServiceNode("127.0.0.1"); assertEquals(serviceNode, serviceNode); int expectedHashCodeResult = serviceNode.hashCode(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedHashCodeResult, serviceNode.hashCode())
[-] pred: org. junit. Assert. assertEquals ( expectedHashCodeResult, serviceNode. hashCode() )
************************************
[+] input: isClockSync() { SnowflakeIdProperties.IdDefinition idDefinition = new SnowflakeIdProperties.IdDefinition(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(idDefinition.isClockSync())
[-] pred: org. junit. Assert. assertTrue ( idDefinition. isClockSync() )
************************************
[+] input: setConnectString() { String connectString = "localhost:2182"; CosIdZookeeperProperties properties = new CosIdZookeeperProperties(); properties.setConnectString(connectString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(connectString, properties.getConnectString())
[-] pred: org. junit. Assert. assertEquals ( connectString, properties. getConnectString() )
************************************
[+] input: getMaior_test03() { int maior = Calculadora.getMaior(10, -20); "<AssertPlaceHolder>"; }
[*] target: assertEquals(10, maior)
[-] pred: org. junit. Assert. assertEquals ( 10, maior )
************************************
[+] input: testCountOnMappedField() { long count = entityStream // .of(Company.class) // .filter( // Company$.NAME.notEq("RedisInc") // .and(Company$.NAME.notEq("Microsoft")) // ) // .map(Company$.NAME) // .sequential() // .count();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: equals_false_when_different_object_type() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); BlockPos blockPos = new BlockPos(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(blockPos);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: build_has_to_declare_ObjecType_by_Swagger_Definition() { // Given final SwaggerGraphQLSchemaBuilder swaggerGraphQLSchemaBuilder = new SwaggerGraphQLSchemaBuilder(); final Swagger swagger = new SwaggerParser().read(SWAGGER_LOCATION);  // When final GraphQLSchema graphQLSchema = swaggerGraphQLSchemaBuilder.swagger(swagger).build();  // Then /** * Refactor creating assertAuthorDto and assertBookDto */ GraphQLObjectType authorDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_AUTHOR); "<AssertPlaceHolder>"; assertEquals(3, authorDto.getFieldDefinitions().size()); assertNotNull(authorDto.getFieldDefinition("id")); assertEquals(GraphQLID, authorDto.getFieldDefinition("id").getType()); assertNotNull(authorDto.getFieldDefinition("firstName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("firstName").getType()); assertNotNull(authorDto.getFieldDefinition("lastName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("lastName").getType()); // And GraphQLObjectType bookDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_BOOK); assertNotNull(bookDto); assertNotNull(bookDto.getFieldDefinition("id")); assertEquals(GraphQLID, bookDto.getFieldDefinition("id").getType()); assertNotNull(bookDto.getFieldDefinition("name")); assertEquals(GraphQLString, bookDto.getFieldDefinition("name").getType()); assertNotNull(bookDto.getFieldDefinition("pageCount")); assertEquals(GraphQLInt, bookDto.getFieldDefinition("pageCount").getType()); assertNotNull(bookDto.getFieldDefinition("author")); assertTrue(bookDto.getFieldDefinition("author").getType() instanceof GraphQLObjectType); assertEquals("AuthorDto", ((GraphQLObjectType)bookDto.getFieldDefinition("author").getType()).getName()); }
[*] target: assertNotNull(authorDto)
[-] pred: org. junit. Assert. assertNotNull ( authorDto )
************************************
[+] input: testCreateDept() { // 准备参数 DeptSaveReqVO reqVO = randomPojo(DeptSaveReqVO.class, o -> { o.setId(null); // 防止 id 被设置 o.setParentId(DeptDO.PARENT_ID_ROOT); o.setStatus(randomCommonStatus()); });  // 调用 Long deptId = deptService.createDept(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DeptDO deptDO = deptMapper.selectById(deptId); assertPojoEquals(reqVO, deptDO, "id"); }
[*] target: assertNotNull(deptId)
[-] pred: org. junit. Assert. assertNotNull ( deptId )
************************************
[+] input: hashCode_same_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act double vec3c1Hash = vec3c1.hashCode(); double vec3c2Hash = vec3c2.hashCode();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(vec3c1Hash, vec3c2Hash)
[-] pred: org. junit. Assert. assertEquals ( vec3c1Hash, vec3c2Hash )
************************************
[+] input: testEvents() { var events = eventMapper.listEventsOfResource(null, null); assertEquals(0, events.size());  var entity = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.JOB) .resourceId(1L) .message("foo") .data("{}") .createdTime(new Date(123L * 1000)) .build();  var entity2 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(2L) .message("bar") .data("{}") .createdTime(new Date(456L * 1000)) .build();  var entity3 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(3L) .message("baz") .data("{}") .createdTime(new Date(789L * 1000)) .build();  eventMapper.insert(entity); eventMapper.insert(entity2); eventMapper.insert(entity3);  events = eventMapper.listEventsOfResource(EventResourceType.JOB, 1L); assertEquals(1, events.size()); assertEquals(entity, events.get(0));  events = eventMapper.listEventsOfResource(EventResourceType.TASK, 2L); "<AssertPlaceHolder>"; assertEquals(entity2, events.get(0));  events = eventMapper.listEventsOfResources(EventResourceType.TASK, List.of(2L, 3L)); assertEquals(2, events.size()); assertThat(events).containsExactly(entity2, entity3); }
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
[+] input: serialize_WithEmptyRecord_ReturnsEmptyJson() { // Test for serializing an empty record GenericRecord record = new GenericData.Record(SCHEMA); String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: shouldBuildProperty() { Message message = MessageFactory.property(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: isAndroid_whenSetInJavaVMVendor() { String actualVendor = System.getProperty("java.vm.vendor"); System.setProperty("java.vm.vendor", "The Android Project"); boolean isAndroid = OSUtil.isAndroid(); System.setProperty("java.vm.vendor", actualVendor); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
[+] input: isUserInCurrentOrg_whenUserIsAuthenticatedAndIsMemberOfTheOrg_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isUserInCurrentOrg = DataGymSecurity.isUserInCurrentOrg("datagym");  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isUserInCurrentOrg)
[-] pred: org. junit. Assert. assertTrue ( isUserInCurrentOrg )
************************************
[+] input: shouldBuildScriptOnConditionalFlow() { String script = random(); String language = random(); Message message = scriptOnConditionalFlow(language, script); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Please translate the %s script from '%s' to a valid FEEL expression.", language, script); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getStakeAddressFromMnemonic_whenTestnet() { String phrase24W = "coconut you order found animal inform tent anxiety pepper aisle web horse source indicate eyebrow viable lawsuit speak dragon scheme among animal slogan exchange"; String expectedRewardAddress = "stake_test1uq06d3cktqn4z9tv8rr9723fvrxdnh44an9tjvjftw6krscamyncv";  Account account = new Account(Networks.testnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
[+] input: testSuma3() { int algo = 7; int res = Calculadora.suma(algo, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
[+] input: InterruptedException { boolean aQueued = reloader.reload(plugin); boolean bQueued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertFalse(bQueued); assertTrue(reloader.isReloadQueued());  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
[*] target: assertTrue(aQueued)
[-] pred: org. junit. Assert. assertTrue ( aQueued )
************************************
[+] input: IOException {  // mocking and stubbing data for test execution SchemaEntity schema = computeSchema(TEST_SCHEMA_JSON_USER); JoyceURI rawURI = JoyceURI.createURI(MESSAGE_KEY).orElseThrow(); when(schemaUtils.metadataFromSchemaOrElseThrow(any())).thenReturn(schema.getMetadata()); when(jsonLogicService.filter(any(), any())).thenReturn(true); when(schemaEngine.process(any(SchemaEntity.class), any(), any())) .thenReturn(objectMapper.valueToTree(Map.of("code", "1337")));  // Subject under test SingleImportResult expected = new SingleImportResult(rawURI, ProcessStatus.IMPORTED, null); SingleImportResult actual = importService.processImport(rawURI, computeDocument(TEST_USER_JSON), schema);  // Asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_event_size_equal_to_max_event_size_THEN_return_false() { boolean isEventGreater = cloudWatchLogsLimits.isGreaterThanMaxEventSize((thresholdConfig.getMaxEventSizeBytes()) - CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isEventGreater)
[-] pred: org. junit. Assert. assertFalse ( isEventGreater )
************************************
[+] input: testCreateMailLog() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String toMail = randomEmail(); MailAccountDO account = randomPojo(MailAccountDO.class); MailTemplateDO template = randomPojo(MailTemplateDO.class); String templateContent = randomString(); Map<String, Object> templateParams = randomTemplateParams(); Boolean isSend = true; // mock 方法  // 调用 Long logId = mailLogService.createMailLog(userId, userType, toMail, account, template, templateContent, templateParams, isSend); // 断言 MailLogDO log = mailLogMapper.selectById(logId); "<AssertPlaceHolder>"; assertEquals(MailSendStatusEnum.INIT.getStatus(), log.getSendStatus()); assertEquals(userId, log.getUserId()); assertEquals(userType, log.getUserType()); assertEquals(toMail, log.getToMail()); assertEquals(account.getId(), log.getAccountId()); assertEquals(account.getMail(), log.getFromMail()); assertEquals(template.getId(), log.getTemplateId()); assertEquals(template.getCode(), log.getTemplateCode()); assertEquals(template.getNickname(), log.getTemplateNickname()); assertEquals(template.getTitle(), log.getTemplateTitle()); assertEquals(templateContent, log.getTemplateContent()); assertEquals(templateParams, log.getTemplateParams()); }
[*] target: assertNotNull(log)
[-] pred: org. junit. Assert. assertNotNull ( log )
************************************
[+] input: Exception { // Lookup and initialize mojo var engineConfigureMojo = (EngineConfigureMojo) lookupMojo("configure", getTestConfiguration()); setVariableValueToObject(engineConfigureMojo, "project", getMavenProject()); engineConfigureMojo.execute();  var storedEngineConfiguration = EngineConfiguration .loadDirectory(getBuildDirectory()); "<AssertPlaceHolder>"; JsonAssertions.assertEquals(getEngineConfiguration(), storedEngineConfiguration); }
[*] target: assertNotNull(storedEngineConfiguration)
[-] pred: org. junit. Assert. assertNotNull ( storedEngineConfiguration )
************************************
[+] input: testProcessRoleDeleted() { // 准备参数 Long roleId = randomLongId(); // mock 数据 UserRole UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setRoleId(roleId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02); // mock 数据 RoleMenu RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setRoleId(roleId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processRoleDeleted(roleId); // 断言数据 RoleMenuDO List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); // 断言数据 UserRoleDO List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); assertEquals(1, dbUserRoles.size()); assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
[+] input: testFinalPositionOfSnakeOnlyDown() { List<String> commands = List.of("DOWN", "DOWN"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(6, result)
[-] pred: org. junit. Assert. assertEquals ( 6, result )
************************************
[+] input: test() { SortedMap sortedMap = new TreeMap(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList(new ServerNode( String.valueOf(i), "", i / 3, 0, 0, 0, 0, Sets.newHashSet("test"), true)); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
[+] input: IOException { final GeoIpServiceConfig geoIpServiceConfig = makeConfig("src/test/resources/geoip_service_config.yaml"); assertNotNull(geoIpServiceConfig);  final MaxMindConfig maxMindConfig = geoIpServiceConfig.getMaxMindConfig(); "<AssertPlaceHolder>"; assertNotNull(maxMindConfig.getAwsAuthenticationOptionsConfig());  assertThat(maxMindConfig, notNullValue()); assertThat(maxMindConfig.getDatabaseRefreshInterval(), equalTo(Duration.ofDays(10))); assertThat(maxMindConfig.getMaxMindDatabaseConfig().getDatabasePaths().size(), equalTo(2)); assertThat(maxMindConfig.getCacheSize(), equalTo(2048)); assertThat(maxMindConfig.getDatabaseDestination(), equalTo("/tst/resources")); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig(), notNullValue()); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig().getAwsRegion(), equalTo(Region.of("us-east-1"))); }
[*] target: assertNotNull(maxMindConfig)
[-] pred: org. junit. Assert. assertNotNull ( maxMindConfig )
************************************
[+] input: getMaior_test04() { int maior = Calculadora.getMaior(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, maior)
[-] pred: org. junit. Assert. assertEquals ( 0, maior )
************************************
[+] input: testCreateSeckillActivity_success() { // 准备参数 SeckillActivityCreateReqVO reqVO = randomPojo(SeckillActivityCreateReqVO.class);  // 调用 Long seckillActivityId = seckillActivityService.createSeckillActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillActivityDO seckillActivity = seckillActivityMapper.selectById(seckillActivityId); assertPojoEquals(reqVO, seckillActivity); }
[*] target: assertNotNull(seckillActivityId)
[-] pred: org. junit. Assert. assertNotNull ( seckillActivityId )
************************************
[+] input: testMultiplica2() { int algo = 9; int res = Calculadora.multiplica(algo, 1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(algo, res)
[-] pred: org. junit. Assert. assertEquals ( algo, res )
************************************
[+] input: removeNFT() { String policyId_1 = "1e80fa1859c59b18ff4895a2c481cced459c6b4fcd6c445b5e907a92"; String policyId_2 = "2222221859c59b18ff4895a2c481cced459c6b4fcd6c445b5e907a92";  NFT nft1 = NFT.create() .assetName("assetname-nft1") .name("nft1") .image("ipfs://someimageurl-1") .mediaType("image/png") .description("NFT-1 description") .addFile(NFTFile.create() .name("nft1-file1") .mediaType("plain/text") .src("http://nft1-file1")) .addFile(NFTFile.create() .name("nft1-file2") .mediaType("plain/text") .src("http://nft1-file2"));  NFT nft2 = NFT.create() .assetName("assetname-nft2") .name("nft2") .image("ipfs://someimageurl-2") .mediaType("image/png") .description("NFT-2 description");  NFT nft3 = NFT.create() .assetName("assetname-nft3") .name("nft2") .image("ipfs://someimageurl-3") .mediaType("image/png") .description("NFT-3 description");  NFTMetadata metadata = NFTMetadata.create() .addNFT(policyId_1, nft1) .addNFT(policyId_1, nft2) .addNFT(policyId_2, nft3);  //remove nft2 metadata.removeNFT(policyId_1, nft2.getAssetName());  //asserts NFT removeNFT = metadata.getNFT(policyId_1, nft2.getAssetName()); "<AssertPlaceHolder>"; }
[*] target: assertNull(removeNFT)
[-] pred: org. junit. Assert. assertNull ( removeNFT )
************************************
[+] input: getAllProjectsFromOrganisation_WhenNoProjects_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //When when(projectRepositoryMock.findAllByDeletedIsFalseAndOwner(anyString())).thenReturn(new ArrayList<>()); List<ProjectViewModel> allProjects = projectService.getAllProjectsFromOrganisation("eforce21");  //Then "<AssertPlaceHolder>";  verify(projectRepositoryMock).findAllByDeletedIsFalseAndOwner(anyString()); verify(projectRepositoryMock, times(1)).findAllByDeletedIsFalseAndOwner(anyString()); }
[*] target: assertTrue(allProjects.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allProjects. isEmpty ( ) )
************************************
[+] input: testCreateRewardActivity_success() { // 准备参数 RewardActivityCreateReqVO reqVO = randomPojo(RewardActivityCreateReqVO.class, o -> { o.setConditionType(randomEle(PromotionConditionTypeEnum.values()).getType()); o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()); // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); });  // 调用 Long rewardActivityId = rewardActivityService.createRewardActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 RewardActivityDO rewardActivity = rewardActivityMapper.selectById(rewardActivityId); assertPojoEquals(reqVO, rewardActivity, "rules"); assertEquals(rewardActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); for (int i = 0; i < reqVO.getRules().size(); i++) { assertPojoEquals(reqVO.getRules().get(i), rewardActivity.getRules().get(i)); } }
[*] target: assertNotNull(rewardActivityId)
[-] pred: org. junit. Assert. assertNotNull ( rewardActivityId )
************************************
[+] input: IOException { Mockito.reset(fileUtils); Mockito.reset(delegate); when(fileUtils.readFileCompletely(file)).thenThrow(new IOException("boom")); FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verifyNoMoreInteractions(bandwidthTracker); verifyNoMoreInteractions(delegate); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: inValidateAccessToken() { PayloadDTO dto = PayloadDTO.builder().exp(16868291L).sub(UUID.randomUUID().toString()).build(); boolean result = accessTokenService.validateAccessToken("test",dto); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testFinalPositionOfSnakeEmptyCommands() { List<String> commands = List.of(); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: ignoresCompletingNonExistingTask() { final TodoList todoList = new TodoList(); todoList.toggleTaskCompletion(TaskId.of(UUID.randomUUID())); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, todoList. size() )
************************************
[+] input: testPhrase() { for (int i = 0; i < 10; i++) { System.out.println(random.nextPhrase()); }  for (int i = 100; i < 150; i++) { String s = random.nextPhrase(i); System.out.println(s); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(s.length(), i)
[-] pred: org. junit. Assert. assertEquals ( s. length ( ), i )
************************************
[+] input: returnsNullWhenNicknameDoesntExist() { var cm = CoinmasterRegistry.findCoinmasterByNickname("thisdoesntexist"); "<AssertPlaceHolder>"; }
[*] target: assertNull(cm)
[-] pred: org. junit. Assert. assertNull ( cm )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_log_send_interval_less_than_max_log_send_interval_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, validRequestSize ,ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetTime)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetTime )
************************************
[+] input: SchedulerException { // 准备参数 指定 Cron 表达式 JobSaveReqVO reqVO = randomPojo(JobSaveReqVO.class, o -> o.setCronExpression("0 0/1 * * * ? *")) .setId(null); try (MockedStatic<SpringUtil> springUtilMockedStatic = mockStatic(SpringUtil.class)) { springUtilMockedStatic.when(() -> SpringUtil.getBean(eq(reqVO.getHandlerName()))) .thenReturn(jobLogCleanJob);  // 调用 Long jobId = jobService.createJob(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobDO job = jobMapper.selectById(jobId); assertPojoEquals(reqVO, job, "id"); assertEquals(JobStatusEnum.NORMAL.getStatus(), job.getStatus()); // 校验调用 verify(schedulerManager).addJob(eq(job.getId()), eq(job.getHandlerName()), eq(job.getHandlerParam()), eq(job.getCronExpression()), eq(reqVO.getRetryCount()), eq(reqVO.getRetryInterval())); } }
[*] target: assertNotNull(jobId)
[-] pred: org. junit. Assert. assertNotNull ( jobId )
************************************
[+] input: getRedis() { SegmentIdProperties.Distributor distributor = new SegmentIdProperties.Distributor(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(distributor.getRedis())
[-] pred: org. junit. Assert. assertNotNull ( distributor. getRedis() )
************************************
[+] input: Exception { PulsarTopic topic = new PulsarTopic("test"); assertNull(topic.extractSubscriptionName());  topic = new PulsarTopic("test:sub"); assertNull(topic.extractSubscriptionName()); "<AssertPlaceHolder>"; }
[*] target: assertNull(topic.extractSubscriptionName())
[-] pred: org. junit. Assert. assertNull ( topic. extractSubscriptionName ( ) )
************************************
[+] input: createConnectionViaUserPwdGood() { Connection connectionMock = Mockito.mock(Connection.class); try (MockedStatic<DriverManager> driverMgr = Mockito.mockStatic(DriverManager.class)) { driverMgr.when(() -> DriverManager.getConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())) .thenReturn(connectionMock);  Connection conn = DbUtil.createConnectionViaUserPwd("a", "b", "c"); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(conn)
[-] pred: org. junit. Assert. assertNotNull ( conn )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test01() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("Felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_request_size_equal_to_max_request_size_THEN_return_false() { long requestSizeWithoutOverhead = (thresholdConfig.getMaxRequestSizeBytes()) - ThresholdConfig.DEFAULT_BATCH_SIZE * (CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetRequestSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, requestSizeWithoutOverhead, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetRequestSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetRequestSize )
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageTrue_setDeletedToTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0);  assertTrue(arg0.isDeleted()); assertNotNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, true);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: buildCache() { Cache<String> cache = CacheBuilder.newBuilder().build(String.class); Assertions.assertNotNull(cache);  var anotherCache = CacheBuilder.newBuilder().expires(10).maximumSize(1000).build(String.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(anotherCache)
[-] pred: org. junit. Assert. assertNotNull ( anotherCache )
************************************
[+] input: shouldBuildFormKey() { Message message = MessageFactory.formKey(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildResourceOnConditionalFlow() { String resource = random(); Message message = resourceOnConditionalFlow(resource); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Please translate the content from '%s' to a valid FEEL expression.", resource); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testMultiplica7() { int res = Calculadora.multiplica(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
[+] input: testFillTemplateWithBraces() { String template = "Beginning ${VAR} { end }"; Map<String, String> vars = new HashMap<String, String>(); vars.put("VAR", "middle"); String result = StringUtil.fillTemplate(template, vars); String expected = "Beginning middle { end }"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: push() { try (IntStack stack = new IntStack(Integer.MIN_VALUE, 8)) { Assertions.assertTrue(stack.push(1)); Assertions.assertTrue(stack.push(2)); Assertions.assertTrue(stack.push(3)); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(3, stack.size())
[-] pred: org. junit. Assert. assertEquals ( 3, stack. size() )
************************************
[+] input: remainingSize() { TokenQueue queue = provideEmptyTokenQueue(); assertEquals(0, queue.remainingSize());  queue = provide2TokenQueue(); assertEquals(2, queue.remainingSize());  queue.consume(); assertEquals(1, queue.remainingSize()); queue.consume(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, queue.remainingSize())
[-] pred: org. junit. Assert. assertEquals ( 0, queue. remainingSize() )
************************************
[+] input: testUpdateAfterApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); // write assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("write", result.get(0).getScope()); assertFalse(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
[+] input: inValidatePayLoadOfNull() { boolean payloadOfNull = accessTokenService .validateAccessToken(accessTokenService.generateAccessToken(UUID.randomUUID().toString()), null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(payloadOfNull)
[-] pred: org. junit. Assert. assertFalse ( payloadOfNull )
************************************
[+] input: NoSuchFieldException { Field field = Person.class.getField("name"); FastField ff = FastField.create(field); "<AssertPlaceHolder>"; }
[*] target: assertEquals(field.toString(), ff.toString())
[-] pred: org. junit. Assert. assertEquals ( field. toString ( ), ff. toString ( ) )
************************************
[+] input: testUpdatePhyClusterDynamicConfig() { final ClusterSettingDTO param = new ClusterSettingDTO("clusterName", "key", "value"); final Result<Boolean> expectedResult = Result.buildFail(false); when(mockClusterPhyService.updatePhyClusterDynamicConfig(new ClusterSettingDTO("clusterName", "key", "value"))) .thenReturn(Result.buildFail(false)); Integer projectId = 1; final Result<Boolean> result; try { result = clusterPhyManager.updatePhyClusterDynamicConfig(param, "operator", projectId); } catch (ESOperateException e) { throw new RuntimeException(e); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFunctionNames9() { List<String> names = NextflowScript.getFunctionNames("def      { some content }"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: testCreateNotice_success() { // 准备参数 NoticeSaveReqVO reqVO = randomPojo(NoticeSaveReqVO.class) .setId(null); // 避免 id 被赋值  // 调用 Long noticeId = noticeService.createNotice(reqVO); // 校验插入属性是否正确 "<AssertPlaceHolder>"; NoticeDO notice = noticeMapper.selectById(noticeId); assertPojoEquals(reqVO, notice, "id"); }
[*] target: assertNotNull(noticeId)
[-] pred: org. junit. Assert. assertNotNull ( noticeId )
************************************
[+] input: Exception { // Create post. Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); opt.setFlags(FlagInfo.POST.toBitmask()); Message msg = mbox.addMessage(null, new ParsedMessage( "From: test@zimbra.com\r\nTo: test@zimbra.com".getBytes(), false), opt, null);  // Validate flag. assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0);  // Search by flag. List<Integer> ids = TestUtil.search(mbox, "tag:\\post", MailItem.Type.MESSAGE); "<AssertPlaceHolder>"; assertEquals(msg.getId(), ids.get(0).intValue());  // Make sure that the post flag is serialized to XML. Element eMsg = ToXML.encodeMessageAsMIME(new XMLElement("test"), new ItemIdFormatter(), (OperationContext) null, msg, (String) null /* part */, false /* mustInline */, false /* mustNotInline */, false /* serializeType */, ToXML.NOTIFY_FIELDS);  assertEquals("^", eMsg.getAttribute(MailConstants.A_FLAGS));  // Try unsetting the post flag. mbox.setTags(null, msg.getId(), MailItem.Type.MESSAGE, 0, null); msg = mbox.getMessageById(null, msg.getId()); // make sure post flag is still set assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0, "POST flag set"); assertEquals(msg.getIdInMailbox(), msg.getImapUid(), "IMAP UID should be same as ID"); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
[+] input: testGetJobRunner() { ScheduledJobRunner jobRunner = OpenSearchAsyncQueryScheduler.getJobRunner(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(jobRunner)
[-] pred: org. junit. Assert. assertNotNull ( jobRunner )
************************************
[+] input: testFinalPositionOfSnakeOnlyUp() { List<String> commands = List.of("UP", "UP"); int result = new Solution().finalPositionOfSnake(3, commands); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: testIsClusterExists() { when(mockClusterPhyService.isClusterExists(CLUSTER)).thenReturn(false);  final boolean result = clusterPhyManager.isClusterExists(CLUSTER);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { // /// * // { // "ID": "intelligentGraph.PathQL1", // "query": "getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}", // "type": "read", // "roles": ["user"], // "arguments" : { // "subject" : iri("http://ex.org/1"), // "object" : null // } // } // */ // // QueryMeta queryMeta =QueryMeta.ofQuery("getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}"); // queryMeta.ID= "testPath"; // queryMeta.database = "dj/junit"; // Map<String, Object> arguments = new HashMap<>(); // arguments.put("subject", iri("http://ex.org/1")); // arguments.put("object", null); // queryMeta.arguments=arguments; // // // AbstractDatabase database = services.getConfig().getDatabase( queryMeta.database); // // List<Map<String, Object>> res = database.queryGraph(queryMeta, null); // // ObjectMapper mapper = new ObjectMapper(); // String resJSON = // mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mapper.convertValue(res, // JsonNode.class)); // // String expectedJSON = Files.readString( Paths.get("./src/test/resources/results/", "junit", // queryMeta.ID +".json")); // // "<AssertPlaceHolder>"; // }
[*] target: assertEquals( expectedJSON, resJSON)
[-] pred: org. junit. Assert. assertEquals ( expectedJSON, resJSON )
************************************
[+] input: testIsValidCsrfTokenForAccountWithMultipleTokens() { try { Account acct = Provisioning.getInstance().getAccountByName( "test@zimbra.com"); AuthToken authToken = new ZimbraAuthToken(acct);  String csrfToken1 = CsrfUtil.generateCsrfToken(acct.getId(), AUTH_TOKEN_EXPR, CSRFTOKEN_SALT, authToken); boolean validToken = CsrfUtil.isValidCsrfToken(csrfToken1, authToken); "<AssertPlaceHolder>";   } catch (ServiceException  e) { fail("Should not throw exception."); } }
[*] target: assertTrue(validToken)
[-] pred: org. junit. Assert. assertTrue ( validToken )
************************************
[+] input: notHealthyFastFailure() { when(memoryMonitor.isMemoryHealthy(anyLong())) .thenThrow(OpenSearchMemoryHealthy.MemoryUsageExceedFastFailureException.class);  OpenSearchResourceMonitor resourceMonitor = new OpenSearchResourceMonitor(settings, memoryMonitor); "<AssertPlaceHolder>"; verify(memoryMonitor, times(1)).isMemoryHealthy(anyLong()); }
[*] target: assertFalse(resourceMonitor.isHealthy())
[-] pred: org. junit. Assert. assertFalse ( resourceMonitor. isHealthy() )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalPorteConverter converter = new AnimalPorteConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: testBatchSend() { //        // Setup //        final BatchSendRequest batchSendRequest = new BatchSendRequest("code", 0L, //                Arrays.asList(new MessageParam("receiver", new HashMap<>(), new HashMap<>()))); //        final SendResponse expectedResult = new SendResponse("status", "msg"); // //        // Configure ProcessController.process(...). //        final ProcessContext processContext = new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        when(processController.process(new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")))).thenReturn(processContext); // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.batchSend(batchSendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: SQLException { final Connection mockConn = Mockito.mock(Connection.class); stubTopologyQueryMultiWriter(mockConn);  final HostInfo clusterHostInfo = new HostInfo(clusterInstanceHostPattern, null, defaultPort, false);  spyProvider.setClusterInstanceTemplate(clusterHostInfo);  final List<HostInfo> topology = spyProvider.getTopology(mockConn, false); "<AssertPlaceHolder>"; final List<HostInfo> readers = topology.subList(AuroraTopologyService.WRITER_CONNECTION_INDEX + 1, topology.size());  assertEquals(3, topology.size()); assertEquals(2, readers.size());  final HostInfo master1 = topology.get(AuroraTopologyService.WRITER_CONNECTION_INDEX); final HostInfo master2 = topology.get(2); final HostInfo reader = topology.get(1);  assertEquals("writer-instance-1.XYZ.us-east-2.rds.amazonaws.com", master1.getHost()); assertEquals(defaultPort, master1.getPort()); assertEquals("writer-instance-1", master1.getInstanceIdentifier()); assertTrue(master1.isWriter());  assertEquals("writer-instance-2.XYZ.us-east-2.rds.amazonaws.com", master2.getHost()); assertEquals(defaultPort, master2.getPort()); assertEquals("writer-instance-2", master2.getInstanceIdentifier()); // A second writer indicates the topology is in a failover state, and the second writer is // the obsolete one. It will be come a reader shortly, so we mark it as such assertFalse(master2.isWriter());  assertEquals("reader-instance.XYZ.us-east-2.rds.amazonaws.com", reader.getHost()); assertEquals(defaultPort, reader.getPort()); assertEquals("reader-instance", reader.getInstanceIdentifier()); assertFalse(reader.isWriter()); }
[*] target: assertNotNull(topology)
[-] pred: org. junit. Assert. assertNotNull ( topology )
************************************
[+] input: Exception { String pluginName = "test-plugin";  // Load the actual resource InputStream inputStream = transformersFactory.getPluginTemplateFileStream(pluginName);  "<AssertPlaceHolder>"; inputStream.close(); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
[+] input: testEntityExists() { boolean exists = repository.exists(User.class,-1L); Assertions.assertFalse(exists);   User created = repository.save(randomUser()); exists = repository.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: filterCompletedTasksOfOneUncompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
[+] input: SQLException { String resourceName = "test01.csv";  ClassLoader classLoader = getClass().getClassLoader(); String path = classLoader.getResource(resourceName).getPath();  String parent = Paths.get(path).getParent().toAbsolutePath().toString();  Driver driver = new CsvDriver();  try( Connection con = driver.connect("jdbc:csv:"+parent, null); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM test01.csv;") ) { "<AssertPlaceHolder>"; assertEquals("A", rs.getString(1)); assertEquals("B", rs.getString(2));  assertTrue(rs.next()); assertEquals("C", rs.getString(1)); assertEquals("D", rs.getString(2));  assertFalse(rs.next()); }; }
[*] target: assertTrue(rs.next())
[-] pred: org. junit. Assert. assertTrue ( rs. next ( ) )
************************************
[+] input: setFetchMaxIdSql() { String fetchMaxIdSql = "Great CosId!"; SegmentIdProperties.Distributor.Jdbc jdbc = new SegmentIdProperties.Distributor.Jdbc(); jdbc.setFetchMaxIdSql(fetchMaxIdSql); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(fetchMaxIdSql, jdbc.getFetchMaxIdSql())
[-] pred: org. junit. Assert. assertEquals ( fetchMaxIdSql, jdbc. getFetchMaxIdSql ( ) )
************************************
[+] input: shouldFormatCorrectlyWhenCalledProcessNormalStats() { String[] headers = { "AnonymousIoService", "CloudRoutingReaderThread", "GC", "ImapSSLServer", "ImapServer", "LmtpServer", "Pop3SSLServer", "Pop3Server", "ScheduledTask", "SocketAcceptor", "Thread", "Timer", "btpool", "pool" };  String[] stats = {"0", "0", "0", "0", "0", "2", "0", "0", "10", "0", "2", "5", "0", "0"};  StringBuilder buf = new StringBuilder(); PrometheusFormatter.processNormalStats("threads", buf, headers, stats); String expected = "threads_AnonymousIoService 0\n" + "threads_CloudRoutingReaderThread 0\n" + "threads_GC 0\n" + "threads_ImapSSLServer 0\n" + "threads_ImapServer 0\n" + "threads_LmtpServer 2\n" + "threads_Pop3SSLServer 0\n" + "threads_Pop3Server 0\n" + "threads_ScheduledTask 10\n" + "threads_SocketAcceptor 0\n" + "threads_Thread 2\n" + "threads_Timer 5\n" + "threads_btpool 0\n" + "threads_pool 0\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, buf.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, buf. toString ( ) )
************************************
[+] input: whenFindByIdThenReturnSuccess() { when(service.findById(anyInt())).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.findById(ID);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); assertEquals(PASSWORD, response.getBody().getPassword()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: interfaceMethods() { ScreenAttributesAppender screenAttributesAppender = new ScreenAttributesAppender(visibleScreenTracker);  assertTrue(screenAttributesAppender.isStartRequired()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(screenAttributesAppender.isEndRequired())
[-] pred: org. junit. Assert. assertFalse ( screenAttributesAppender. isEndRequired() )
************************************
[+] input: shouldCallTheDelegatedIfNodeHaveDifferentType() { final var value1 = IntNode.valueOf(100); final var value2 = TextNode.valueOf("100"); final var jsonMatcher = Mockito.mock(JsonMatcher.class); final var delegated = Mockito.mock(PartialJsonMatcher.class); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(delegated.jsonDiff(expectedPath, value1, value2, jsonMatcher)).thenReturn(expectedJsonDiff);  final var jsonDiff = new LenientNumberPrimitivePartialMatcher(delegated) .jsonDiff(expectedPath, value1, value2, jsonMatcher);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, jsonDiff)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, jsonDiff )
************************************
[+] input: queryUnmodifiedWhenUnknownTracingAndSpanId() { when(traceContext.traceId()).thenReturn(TracingStatementInspector.UNKNOWN_TRACE_ID); when(traceContext.spanId()).thenReturn(TracingStatementInspector.UNKNOWN_SPAN_ID);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
[+] input: JavetException { IntStream.range(0, 5).forEach(i -> assertFalse(nodeRuntime.isStopping())); IntStream.range(0, 5).forEach(i -> { nodeRuntime.setStopping(false); assertFalse(nodeRuntime.isStopping()); nodeRuntime.setStopping(true); "<AssertPlaceHolder>"; }); nodeRuntime.getExecutor("let count = 0; setInterval(()=> console.log(count++), 1000);").executeVoid(); }
[*] target: assertTrue(nodeRuntime.isStopping())
[-] pred: org. junit. Assert. assertTrue ( nodeRuntime. isStopping() )
************************************
[+] input: GIVEN_equal_to_limit_method_WHEN_batch_size_less_than_max_batch_size_THEN_return_false() { long validRequestSize = ((thresholdConfig.getMaxRequestSizeBytes() - 1) - ((ThresholdConfig.DEFAULT_BATCH_SIZE - 1) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE)); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isEqualToLimitReached(validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE - 1); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
[+] input: testUpdateFinishTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid11") .name("test_step11") .jobId(2L) .lastStepId(5L) .status(StepStatus.CREATED) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateFinishedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(2L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getFinishedTime().getTime()); }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: shouldBuildEscalationCode() { Message message = MessageFactory.escalationCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Escalation code is transformed from 'old' to 'new'. Please review."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: can_serialize_and_deserialize_functions() { Expression original = DSL.abs(literal(30.0)); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: Exception { doThrow(new IOException("boom")).when(delegate).send(anyList()); FileSender sender = buildFileSender(3); boolean result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(1); result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(2); result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(fileUtils).safeDelete(file); verifyNoMoreInteractions(backoff); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testDefaultConstructor() { op = new Checkpoint(); "<AssertPlaceHolder>"; assertNull(op.getTransactionId()); }
[*] target: assertEquals(0, op.getNumActiveTxns())
[-] pred: org. junit. Assert. assertEquals ( 0, op. getNumActiveTxns() )
************************************
[+] input: isEnabled() { CosIdProperties properties = new CosIdProperties(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(properties.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( properties. isEnabled() )
************************************
[+] input: checkIfUserIsAdmin_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: readServiceVersionFromSystemProperty() { final String version = "1.2.9"; final Properties properties = new Properties(); properties.put("service.version", version); final TracingAttributes attributes = instance(properties); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
[+] input: IOException { final String rawCpuSetInfo = "/docker/1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getFunctions() { SparkStorageEngine engine = new SparkStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(1, functionResolverCollection.size()); assertTrue( functionResolverCollection.iterator().next() instanceof SparkSqlTableFunctionResolver); }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
[+] input: InterruptedException { boolean queued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertTrue(reloader.isReloadQueued());  Mockito.verify(reloadShutdownHandler, Mockito.never()).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.never()).start(plugin);  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
[*] target: assertTrue(queued)
[-] pred: org. junit. Assert. assertTrue ( queued )
************************************
[+] input: isAndroid_whenSetThroughOSUtil() { OSUtil.setAndroid(true); boolean isAndroid = OSUtil.isAndroid(); Configuration.INSTANCE.setAndroid(false);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
[+] input: testBuid() { MensagemDTO mensagemDTO = new MensagemDTO(); Mensagem build = mensagemDTO.build(); "<AssertPlaceHolder>"; assertTrue(build instanceof Mensagem); }
[*] target: assertNotNull(build)
[-] pred: org. junit. Assert. assertNotNull ( build )
************************************
[+] input: has_to_create_DataFecher_By_Path() { // Given final SwaggerGraphQLSchemaBuilder swaggerGraphQLSchemaBuilder = new SwaggerGraphQLSchemaBuilder(); final Swagger swagger = new SwaggerParser().read(SWAGGER_LOCATION);  // When final GraphQLSchema graphQLSchema = swaggerGraphQLSchemaBuilder.swagger(swagger).build();  // Then /** * TODO * Define mock for http://localhost:8080/books and http://localhost:8080/books({id} * Use https://github.com/square/okhttp/tree/master/mockwebserver */ FieldCoordinates fieldCoordinates = coordinates("Query", "books"); DataFetcher dataFetcher = graphQLSchema.getCodeRegistry().getDataFetcher(fieldCoordinates, graphQLSchema.getQueryType().getFieldDefinition("books")); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(dataFetcher)
[-] pred: org. junit. Assert. assertNotNull ( dataFetcher )
************************************
[+] input: testIsExist() { Table systemIndex = new OpenSearchSystemIndex(client, TABLE_INFO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(systemIndex.exists())
[-] pred: org. junit. Assert. assertTrue ( systemIndex. exists() )
************************************
[+] input: testCreateCategory_success() { // 准备参数 //ProductCategoryCreateReqVO reqVO = randomPojo(ProductCategoryCreateReqVO.class);  // mock 父类 //ProductCategoryDO parentProductCategory = randomPojo(ProductCategoryDO.class, o -> { //    reqVO.setParentId(o.getId()); //    o.setParentId(PARENT_ID_NULL); //}); //productCategoryMapper.insert(parentProductCategory); // //// 调用 //Long categoryId = productCategoryService.createCategory(reqVO); //// 断言 //"<AssertPlaceHolder>"; //// 校验记录的属性是否正确 //ProductCategoryDO category = productCategoryMapper.selectById(categoryId); //assertPojoEquals(reqVO, category); }
[*] target: assertNotNull(categoryId)
[-] pred: org. junit. Assert. assertNotNull ( categoryId )
************************************
[+] input: getQuantidadeLetrasMinusculas_test02() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas("Felix Gilioli"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(10, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 10, quantidadeLetrasMinusculas )
************************************
[+] input: setNamespace() { String namespace = "segment-namespace"; SegmentIdProperties.IdDefinition idDefinition = new SegmentIdProperties.IdDefinition(); idDefinition.setNamespace(namespace); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(namespace, idDefinition.getNamespace())
[-] pred: org. junit. Assert. assertEquals ( namespace, idDefinition. getNamespace() )
************************************
[+] input: createUser() { var createdUser = userRepository.createUser(randomUser()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(createdUser)
[-] pred: org. junit. Assert. assertNotNull ( createdUser )
************************************
[+] input: getDataAnosAFrente_test01() { LocalDate inicio = LocalDate.of(2021, 5, 29); LocalDate dataEsperada = LocalDate.of(2023, 5, 29); LocalDate dataObtida = LocalDates.getDataAnosAFrente(inicio, 2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
[+] input: testCreateCombinationActivity_success() { // 准备参数 CombinationActivityCreateReqVO reqVO = randomPojo(CombinationActivityCreateReqVO.class);  // 调用 Long combinationActivityId = combinationActivityService.createCombinationActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CombinationActivityDO combinationActivity = combinationActivityMapper.selectById(combinationActivityId); assertPojoEquals(reqVO, combinationActivity); }
[*] target: assertNotNull(combinationActivityId)
[-] pred: org. junit. Assert. assertNotNull ( combinationActivityId )
************************************
[+] input: shouldBuildScriptFormatMissing() { Message message = MessageFactory.scriptFormatMissing(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: WxErrorException { // 准备参数 Integer userType = randomPojo(UserTypeEnum.class).getValue(); String phoneCode = randomString(); // mock 方法 WxMaUserService userService = mock(WxMaUserService.class); when(wxMaService.getUserService()).thenReturn(userService); WxMaPhoneNumberInfo phoneNumber = randomPojo(WxMaPhoneNumberInfo.class); when(userService.getPhoneNoInfo(eq(phoneCode))).thenReturn(phoneNumber);  // 调用 WxMaPhoneNumberInfo result = socialClientService.getWxMaPhoneNumberInfo(userType, phoneCode); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertSame(phoneNumber, result)
[-] pred: org. junit. Assert. assertSame ( phoneNumber, result )
************************************
[+] input: fromOptionValue_interactions_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("interactions"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("INTERACTIONS")); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
[+] input: canBuildAnOnlyErrorDiffViewerFromJsonDiff() { final var jsonDiff = new UnMatchedPrimaryDiff(path, TextNode.valueOf("a"), TextNode.valueOf("b"));  final var result = OnlyErrorDiffViewer.from(jsonDiff);  final var expected = "The property "$.a" didn't match. Expected "a", Received: "b"\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, result. toString ( ) )
************************************
