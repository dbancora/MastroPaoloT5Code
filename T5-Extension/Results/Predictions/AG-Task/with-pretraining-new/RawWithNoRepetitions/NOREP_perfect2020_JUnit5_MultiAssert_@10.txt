[+] input: testGetAttributes() { Map<String, String> attributes = authorvh.getAttributes(context.request()); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"data-author-vh-tablet", "data-author-vh-item-mobile", "data-author-vh-item-desktop"}, attributes.keySet().toArray()); assertEquals("51", attributes.get("data-author-vh-tablet")); assertEquals("12,,", attributes.get("data-author-vh-item-mobile")); assertEquals(",15,", attributes.get("data-author-vh-item-desktop")); }
getAttributes(SlingHttpServletRequest request) { if (DISABLED.equals(WCMMode.fromRequest(request))) { return null; }  Map<String, String> attributes = null; for (Breakpoint breakpoint : RequestUtil.getBreakpoints(request)) { if (breakpoint == null) { continue; } String vh = extractVH(request.getResource(), request, breakpoint); if (vh != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX + breakpoint.key(), vh); } for (String parent : listParentNodeNames) { Resource parentResource = request.getResource().getChild(parent + breakpoint.propertySuffix()); String value = generateItemAttributes(parentResource, request); if (value != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX_ITEM + breakpoint.key(), value); } } } return attributes; }
[*] target: assertNotNull(attributes)
[-] pred: org. junit. Assert. assertNotNull ( attributes )
************************************
************************************
[+] input: getSettingTest() { Settings settings = provider.getSettings(context.request(), "some"); "<AssertPlaceHolder>"; assertEquals("linkTag", settings.getEmbedType()); assertEquals("https://use.typekit.net", settings.getUrl()); assertEquals("foo", settings.getId()); }
getSettings(SlingHttpServletRequest request, String configName) { String configPath = CLOUDCONFIG_PARENT + configName; LOG.trace("Obtaining ResourceResolver with service user [{}]", SERVICE_USER); PageManager pageManager = request.getResourceResolver().adaptTo(PageManager.class); Page currentPage = pageManager.getContainingPage(request.getResource()); Resource environmentResource = getEnvironmentResource(pageManager, currentPage, configPath); if (environmentResource != null) { return environmentResource.adaptTo(Settings.class); } return null; }
[*] target: assertNotNull(settings)
[-] pred: org. junit. Assert. assertNotNull ( settings )
************************************
************************************
[+] input: getConfig() { context.create() .resource("/content/some/component", "test", "foobar"); Config config = condition.getConfig(context.currentResource("/content/some/component")); "<AssertPlaceHolder>"; assertEquals("foobar", config.get("test")); }
getConfig(@NotNull Resource dialogResource) { return new Config(dialogResource); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: ReflectiveOperationException { MarketoFooter footer = getModel(MarketoFooter.class, CURRENT_PAGE_PATH); MarketoConfBasicInfo marketoConfig = footer.getMarketoConfBasicInfo(); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"dx/content/components/marketo"}, marketoConfig.getMarketoComponentTypes()); assertEquals("//app-ab12.marketo.com", marketoConfig.getBaseUrl()); assertEquals("123-shs-456", marketoConfig.getMunchkinId()); }
getMarketoConfBasicInfo() { return marketoConfBasicInfo; }
[*] target: assertNotNull(marketoConfig)
[-] pred: org. junit. Assert. assertNotNull ( marketoConfig )
************************************
************************************
[+] input: testRaw() { String u = "http://localhost:5256/static/:path?pa=12&pa=34&pb=afasdf"; QueryCoder qc = new QueryCoder(u);  assertNotEquals(qc.uri(), qc.raw()); "<AssertPlaceHolder>"; }
raw() { return decoder.toString(); }
[*] target: assertEquals(u, qc.raw())
[-] pred: org. junit. Assert. assertEquals ( u, qc. raw() )
************************************
************************************
[+] input: Exception {  // Arrange FileConfigLoader loader = new FileConfigLoader("sample-config.yaml");  // Act MainConfig mainConfig = loader.loadConfiguration();  // Assert "<AssertPlaceHolder>"; assertEquals("http://localhost:8080", mainConfig.getHostUri());  }
loadConfiguration() throws IOException {  log.info("Load configuration from: {}", configPath);  InputStream userConfigInputStream; if (configPath.startsWith("https://")) { userConfigInputStream = loadRemoteConfigFile(); } else if (configPath.startsWith("http://") && this.allowUnsafeHttp) { userConfigInputStream = loadRemoteConfigFile(); } else { userConfigInputStream = loadConfigFromFile(); }  InputStream defaultConfigStream = OWASPApplicationGatewayApplication.class.getResourceAsStream("/default-config.yaml"); MainConfig config = mergeConfiguration(defaultConfigStream, userConfigInputStream);  log.debug("Configuration successfully loaded"); return config; }
[*] target: assertNotNull(mainConfig)
[-] pred: org. junit. Assert. assertNotNull ( mainConfig )
************************************
************************************
[+] input: generatorTest() { MainConfig config = new MainConfig(); config.setKeyManagementProfile(new KeyManagementProfile()); config.getKeyManagementProfile().setKeyGeneratorProfile(new KeyGeneratorProfile()); config.getKeyManagementProfile().getKeyGeneratorProfile().setKeySize(2048);  RsaKeyGenerator underTest = new RsaKeyGenerator(config);  KeyGenerator.GeneratedKey key = underTest.generateJWTSigningKey(); "<AssertPlaceHolder>"; assertNotNull(key.keyPair); assertNotNull(key.getKeyUsedToVerify()); }
generateJWTSigningKey() { int keySize = config.getKeyManagementProfile().getKeyGeneratorProfile().getKeySize(); try { KeyPairGenerator factory = KeyPairGenerator.getInstance("RSA"); factory.initialize(keySize); KeyPair newPair = factory.generateKeyPair(); return new GeneratedKey(newPair); } catch (NoSuchAlgorithmException e) { throw new ConfigurationException("Configured keySize in KeyGeneratorProfile of MainConfig is not working for algorithm RSA. Configured size: " + keySize, e); }  }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 10; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> metrics = parseMetrics(events.get(0)); Assertions.assertEquals(metrics.size(), metricCount); for (MetricDefinition metric : metrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
serialize() throws JsonProcessingException { if (rootNode.metrics().size() <= Constants.MAX_METRICS_PER_EVENT && !anyMetricWithTooManyDataPoints(rootNode)) { return Arrays.asList(this.rootNode.serialize()); } else { List<RootNode> nodes = new ArrayList<>(); Map<String, MetricDefinition> metrics = new HashMap<>(); Queue<MetricDefinition> metricDefinitions = new LinkedList<>(rootNode.metrics().values()); while (!metricDefinitions.isEmpty()) { MetricDefinition metric = metricDefinitions.poll();  if (metrics.size() == Constants.MAX_METRICS_PER_EVENT || metrics.containsKey(metric.getName())) { nodes.add(buildRootNode(metrics)); metrics = new HashMap<>(); }  if (metric.getValues().size() <= Constants.MAX_DATAPOINTS_PER_METRIC) { metrics.put(metric.getName(), metric); } else { metrics.put( metric.getName(), new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList(0, Constants.MAX_DATAPOINTS_PER_METRIC))); metricDefinitions.offer( new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList( Constants.MAX_DATAPOINTS_PER_METRIC, metric.getValues().size()))); } } if (!metrics.isEmpty()) { nodes.add(buildRootNode(metrics)); } List<String> strings = new ArrayList<>(); for (RootNode node : nodes) { strings.add(node.serialize()); } return strings; } }
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 253; int expectedEventCount = 3; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> allMetrics = new ArrayList<>(); for (String event : events) { allMetrics.addAll(parseMetrics(event)); } Assertions.assertEquals(metricCount, allMetrics.size()); for (MetricDefinition metric : allMetrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
serialize() throws JsonProcessingException { if (rootNode.metrics().size() <= Constants.MAX_METRICS_PER_EVENT && !anyMetricWithTooManyDataPoints(rootNode)) { return Arrays.asList(this.rootNode.serialize()); } else { List<RootNode> nodes = new ArrayList<>(); Map<String, MetricDefinition> metrics = new HashMap<>(); Queue<MetricDefinition> metricDefinitions = new LinkedList<>(rootNode.metrics().values()); while (!metricDefinitions.isEmpty()) { MetricDefinition metric = metricDefinitions.poll();  if (metrics.size() == Constants.MAX_METRICS_PER_EVENT || metrics.containsKey(metric.getName())) { nodes.add(buildRootNode(metrics)); metrics = new HashMap<>(); }  if (metric.getValues().size() <= Constants.MAX_DATAPOINTS_PER_METRIC) { metrics.put(metric.getName(), metric); } else { metrics.put( metric.getName(), new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList(0, Constants.MAX_DATAPOINTS_PER_METRIC))); metricDefinitions.offer( new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList( Constants.MAX_DATAPOINTS_PER_METRIC, metric.getValues().size()))); } } if (!metrics.isEmpty()) { nodes.add(buildRootNode(metrics)); } List<String> strings = new ArrayList<>(); for (RootNode node : nodes) { strings.add(node.serialize()); } return strings; } }
[*] target: assertEquals(expectedEventCount, events.size())
[-] pred: org. junit. Assert. assertEquals ( expectedEventCount, events. size ( ) )
************************************
************************************
[+] input: test_5_getMonitorCalledWithMultipleNodesInKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeOne.domain"); nodeKeys.add("nodeTwo.domain");  final Set<String> nodeKeysTwo = new HashSet<>(); nodeKeysTwo.add("nodeTwo.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Should get the same monitor as before as contain the same key "nodeTwo.domain" final IMonitor monitorOneSame = monitorService.getMonitor(nodeKeysTwo, info, propertySet); "<AssertPlaceHolder>"; assertEquals(monitorOne, monitorOneSame);  // Make sure createMonitor was called once verify(monitorInitializer).createMonitor( eq(info), eq(propertySet), eq(monitorService)); }
getMonitor(Set<String> nodeKeys, HostInfo hostInfo, PropertySet propertySet) { return this.threadContainer.getOrCreateMonitor(nodeKeys, () -> monitorInitializer.createMonitor(hostInfo, propertySet, this)); }
[*] target: assertNotNull(monitorOneSame)
[-] pred: org. junit. Assert. assertNotNull ( monitorOneSame )
************************************
************************************
[+] input: test_6_getMonitorCalledWithDifferentNodeKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeNEW.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Ensuring monitor is the same one and not creating a new one final IMonitor monitorOneDupe = monitorService.getMonitor(nodeKeys, info, propertySet); assertEquals(monitorOne, monitorOneDupe);  // Ensuring monitors are not the same as they have different keys // "any.node.domain" compared to "nodeNEW.domain" final IMonitor monitorTwo = monitorService.getMonitor(NODE_KEYS, info, propertySet); "<AssertPlaceHolder>"; assertNotEquals(monitorOne, monitorTwo); }
getMonitor(Set<String> nodeKeys, HostInfo hostInfo, PropertySet propertySet) { return this.threadContainer.getOrCreateMonitor(nodeKeys, () -> monitorInitializer.createMonitor(hostInfo, propertySet, this)); }
[*] target: assertNotNull(monitorTwo)
[-] pred: org. junit. Assert. assertNotNull ( monitorTwo )
************************************
************************************
[+] input: testHostFailoverStrictReaderEnabled() { final ITopologyService mockTopologyService = Mockito.mock(ITopologyService.class); final IConnectionProvider mockConnProvider = Mockito.mock(IConnectionProvider.class); final List<HostInfo> hosts = getHostsFromTestUrls(2); final HostInfo writer = hosts.get(0); final HostInfo reader = hosts.get(1);  final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockTopologyService, mockConnProvider, testConnectionProps, 5000, 30000, true, mockLog);  // We expect only reader nodes to be chosen. List<HostTuple> expectedReaderHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( reader, 1));  List<HostTuple> hostsByPriority = target.getHostTuplesByPriority(hosts, Collections.emptySet()); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick reader even if unavailable. hostsByPriority = target.getHostTuplesByPriority(hosts, new HashSet<>(Collections.singletonList(reader.getHost()))); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostTuple> expectedWriterHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( writer, 0)); hostsByPriority = target.getHostTuplesByPriority(Collections.singletonList(writer), Collections.emptySet()); "<AssertPlaceHolder>"; }
getHostTuplesByPriority(List<HostInfo> hosts, Set<String> downHosts) { List<HostTuple> hostGroup = new ArrayList<>(); addActiveReaders(hostGroup, hosts, downHosts); HostInfo writerHost = hosts.get(FailoverConnectionPlugin.WRITER_CONNECTION_INDEX); if (writerHost != null && (!this.enableFailoverStrictReader || hosts.size() == 1)) { hostGroup.add( new HostTuple( writerHost, FailoverConnectionPlugin.WRITER_CONNECTION_INDEX)); } addDownHosts(hostGroup, hosts, downHosts); return hostGroup; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
************************************
[+] input: Exception { final ConnectionImpl mockReaderConnection = mockConnection; final ConnectionImpl mockWriterConnection = mockConnection;  final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getTopology(mockReaderConnection, false)) .thenReturn(topology); when(mockTopologyService.getHostByName(mockReaderConnection)) .thenReturn(readerB_Host); when(mockConnectionProvider.connect(mockHostInfo)) .thenReturn(mockReaderConnection); when(mockConnectionProvider.connect(refEq(writerHost))) .thenReturn(mockWriterConnection);  final Properties properties = new Properties(); properties.setProperty(PropertyKey.failOverReadOnly.getKeyName(), "false");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); assertTrue(failoverPlugin.isCurrentConnectionReadOnly()); assertTrue(failoverPlugin.explicitlyReadOnly);  failoverPlugin.execute( JdbcConnection.class, "setReadOnly", () -> { mockConnection.setReadOnly(false); return true; }, new Object[] {false}); assertFalse(failoverPlugin.explicitlyReadOnly);  "<AssertPlaceHolder>"; }
isCurrentConnectionWriter() { return isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionWriter())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionWriter ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-domain.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);   assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); properties.setProperty( PropertyKey.clusterId.getKeyName(), "test-cluster-id"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-cluster-id")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int newConnectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockConnectionProvider.connect(refEq(readerA_Host))).thenReturn(mockConnection);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getLastUsedReaderHost()).thenReturn(readerA_Host); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerA_Host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(newConnectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  when(mockConnection.getSession()).thenReturn(mockSession); when(mockSession.getLog()).thenReturn(mockLogger);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-cluster-name.cluster-custom-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-instance-name.XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(writerHost); when(mockConnectionProvider.connect(refEq(writerHost))).thenReturn(mockConnection);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isCurrentConnectionWriter()); assertFalse(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertFalse(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int connectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerAHost = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerAHost);  when(mockConnectionProvider.connect(refEq(readerAHost))).thenReturn(mockConnection); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerAHost);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(connectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties();  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertEquals(4, failoverPlugin.initialConnectionProps.size()); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties(); properties.setProperty("maxAllowedPacket", "10");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); final Map<String, String> initialConnectionProperties = failoverPlugin.initialConnectionProps;  assertEquals(5, initialConnectionProperties.size()); assertEquals("10", initialConnectionProperties.get("maxAllowedPacket")); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testOrderByParserComplexExpressions() { List<Order> orderSpec = new ExprParser("field not in ('a',func('b', 2.0),'c') desc, 1-a->$**[0].*, now () + $.b + c > 2 asc").parseOrderSpec(); "<AssertPlaceHolder>"; Order o1 = orderSpec.get(0); assertTrue(o1.hasDirection()); assertEquals(Order.Direction.DESC, o1.getDirection()); assertEquals("field not in("a", func("b", 2.0), "c")", ExprUnparser.exprToString(o1.getExpr())); Order o2 = orderSpec.get(1); assertFalse(o2.hasDirection()); assertEquals("(1 - a->$**[0].*)", ExprUnparser.exprToString(o2.getExpr())); Order o3 = orderSpec.get(2); assertTrue(o3.hasDirection()); assertEquals(Order.Direction.ASC, o3.getDirection()); assertEquals("(((now() + $.b) + c) > 2)", ExprUnparser.exprToString(o3.getExpr())); }
parseOrderSpec() { return parseCommaSeparatedList(() -> { Order.Builder builder = Order.newBuilder(); builder.setExpr(expr()); if (currentTokenTypeEquals(TokenType.ORDERBY_ASC)) { consumeToken(TokenType.ORDERBY_ASC); builder.setDirection(Order.Direction.ASC); } else if (currentTokenTypeEquals(TokenType.ORDERBY_DESC)) { consumeToken(TokenType.ORDERBY_DESC); builder.setDirection(Order.Direction.DESC); } return builder.build(); }); }
[*] target: assertEquals(3, orderSpec.size())
[-] pred: org. junit. Assert. assertEquals ( 3, orderSpec. size ( ) )
************************************
************************************
[+] input: JsonProcessingException { wireMockServer.stubFor( get(urlPathEqualTo("/response-entity-list")) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .willReturn( aResponse() .withStatus(400) .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(Collections.singletonList(FIRST_RESPONSE))) ) );  ResponseEntity<List<FirstResponse>> response = exampleClient.responseEntityList().block(); "<AssertPlaceHolder>"; assertEquals(400, response.getStatusCodeValue()); assertNotNull(response.getBody()); assertEquals(1, response.getBody().size()); assertEquals(FIRST_RESPONSE, response.getBody().get(0)); }
responseEntityList();  @RequestMapping( method = RequestMethod.POST, path = "/first", consumes = MediaType.APPLICATION_JSON_VALUE ) Mono<FirstResponse> first(@RequestBody FirstRequest request);  @RequestMapping( method = RequestMethod.GET, path = "/second" ) Mono<SecondResponse> second();  @RequestMapping( method = RequestMethod.GET, path = "/third/{userId}
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new EntireBufferByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
read(ByteBuffer dst) throws IOException { synchronized (mutex) { if (closed) { throw new ClosedChannelException(); } int result = 0; while (dst.hasRemaining()) { int outputSize = decode(); if (outputSize <= 0) { return result == 0 ? outputSize : result; } result += consume(dst); } return result; } }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new OneByteAtATimeByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
read(ByteBuffer dst) throws IOException { synchronized (mutex) { if (closed) { throw new ClosedChannelException(); } int result = 0; while (dst.hasRemaining()) { int outputSize = decode(); if (outputSize <= 0) { return result == 0 ? outputSize : result; } result += consume(dst); } return result; } }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: buildProgressChart_shouldBuildCorrectXAxisLabels() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle"); long companyId = 11L; KeyResultHistory keyResultHistory1 = new KeyResultHistoryBuilder().SetBaseInformation(5, 10, null, LocalDate.now().minusDays(5)).Build(); KeyResultHistory keyResultHistory2 = new KeyResultHistoryBuilder().SetBaseInformation(10, 10, null, LocalDate.now().minusDays(4)).Build(); KeyResult keyResult = new KeyResultBuilder() .SetTarget(10).SetCurrent(10) .AddHistory(keyResultHistory1) .AddHistory(keyResultHistory2) .Build(); Objective objective1 = ObjectiveBuilder.Create().AddKeyResult(keyResult).Build(); OkrChildUnit team1 = TeamBuilder.CreateDepartment(10L).AddObjective(objective1).Build(); OkrCompany company = new CompanyBuilder().AddChildUnits(team1).Build(); when(keyResultHistoryService.findOldestKeyResultHistoryForKeyResultList(any())).thenReturn(keyResult.getKeyResultHistory().stream().toList().get(0)); when(companyService.findById(companyId)).thenReturn(company);  LineChartOptionsDto result = lineChartService.buildProgressChart(chartCreationOptions, companyId);  "<AssertPlaceHolder>"; assertEquals(6, result.getXAxisCategories().size()); String[] xAxisLabels = result.getXAxisCategories().toArray(new String[0]); assertEquals(LocalDate.now().minusDays(5).toString(), xAxisLabels[0]); assertEquals(LocalDate.now().minusDays(4).toString(), xAxisLabels[1]); assertEquals(LocalDate.now().minusDays(3).toString(), xAxisLabels[2]); assertEquals(LocalDate.now().minusDays(2).toString(), xAxisLabels[3]); assertEquals(LocalDate.now().minusDays(1).toString(), xAxisLabels[4]); assertEquals(LocalDate.now().toString(), xAxisLabels[5]); assertEquals("TestTitle", result.getTitle()); }
buildProgressChart(ChartCreationOptions chartCreationOptions, Long companyId) { LineChartOptionsDto lineChartOptionsDto = new LineChartOptionsDto(); Collection<LineChartLineKeyValues> lineChartLineKeyValuesList = new ArrayList<>(); Collection<Objective> objectives = new ArrayList<>(); Collection<KeyResult> keyResults = new ArrayList<>(); Collection<OkrDepartment> teams;  lineChartOptionsDto.setId(chartCreationOptions.getId()); lineChartOptionsDto.setTitle(chartCreationOptions.getTitle()); lineChartOptionsDto.setChartType(ChartInformationTypeEnum.LINE_PROGRESS.ordinal());  teams = getDepartments( companyId, chartCreationOptions.getTeamIds() );  for (OkrDepartment team : teams) { objectives.addAll(team.getObjectives()); }  for (Objective objective : objectives) { keyResults.addAll(objective.getKeyResults()); }  if (keyResults.size() == 0) { return getNoValuesFoundLineChartOptionsDto(chartCreationOptions, lineChartOptionsDto); }  LocalDate startDate = keyResultHistoryService.findOldestKeyResultHistoryForKeyResultList(keyResults) .getDateChanged(); LocalDate today = LocalDate.now(); long numberOfDays = ChronoUnit.DAYS.between(startDate, today) + 1; // +1 because we also include the startDate   for (OkrDepartment team : teams) { LineChartLineKeyValues lineChartLineKeyValues = new LineChartLineKeyValues(); lineChartLineKeyValues.setName(team.getName()); lineChartLineKeyValues.setData(ProgressHelper.getProgressForTeam(team, startDate, numberOfDays)); lineChartLineKeyValuesList.add(lineChartLineKeyValues); }  if (chartCreationOptions.getTeamIds().size() == 0) { lineChartOptionsDto.setSeries(Collections.singletonList(ProgressHelper.getProgressForCompany( lineChartLineKeyValuesList, numberOfDays ))); } else { lineChartOptionsDto.setSeries(lineChartLineKeyValuesList); } lineChartOptionsDto.setXAxisCategories(getProgressXAxis(startDate, numberOfDays)); return lineChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneDraft() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneOfEachStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.approved); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.rejected); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(1, result.getSeries()[2]); assertEquals(1, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithNoneStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  when(topicDraftService.getAllTopicDrafts()).thenReturn(new ArrayList<>());  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(0, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithMuchOfOne() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(3, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: generateForDepartment_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(departmentServiceUsers.findById(departmentId)).thenReturn(okrDepartment); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForOkrChildUnit(departmentId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(departmentServiceUsers, times(1)).findById(departmentId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
generateForOkrChildUnit(long departmentId) { OkrDepartment okrDepartment = departmentServiceUsers.findById(departmentId); return generateTeamMemberRowForDepartment(okrDepartment); }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
************************************
[+] input: generateForCompany_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(companyService.findById(companyId)).thenReturn(okrCompany); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrCompany.setOkrChildUnits(Collections.singletonList(okrDepartment)); okrDepartment.setParentOkrUnit(okrCompany); okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForCompany(companyId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(companyService, times(1)).findById(companyId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
generateForCompany(long companyId) { OkrCompany okrCompany = companyService.findById(companyId);  Collection<TeamMemberRow> teamMemberRows = new ArrayList<>(); Collection<OkrDepartment> okrDepartments = BranchHelper.collectDepartments(okrCompany); okrDepartments.forEach( department -> teamMemberRows.addAll(generateTeamMemberRowForDepartment(department)));  return teamMemberRows; }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/verifiableCredentialAdHocContext.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); final Optional<VerifiablePresentation<VerifiableIndyCredential>> signed = mgmt.sign(vp); "<AssertPlaceHolder>"; assertNotNull(signed.get().getProof()); }
sign( @NonNull VerifiablePresentation<VerifiableIndyCredential> inputVp) { Optional<VerifiablePresentation<VerifiableIndyCredential>> result = Optional.empty(); try { final Optional<String> verkey = id.getVerkey(); String myDid = id.getMyDid(); String myVerkey = id.getMyKeyId(myDid); if (verkey.isPresent()) { SignRequest sr = SignRequest.from( verkey.get(), inputVp, Options.builderWithDefaults() .verificationMethod(myVerkey) .build()); result = acaPy.jsonldSign( sr, VerifiablePresentation.INDY_CREDENTIAL_TYPE); } } catch (IOException e) { log.error(e.getMessage(), e); throw new NetworkException(e.getMessage()); } return result; }
[*] target: assertTrue(signed.isPresent())
[-] pred: org. junit. Assert. assertTrue ( signed. isPresent ( ) )
************************************
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/VCUnsigned.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); VerifiablePresentation<VerifiableIndyCredential> signed = mgmt.sign(vp).orElseThrow(); assertNotNull(signed.getProof());  Boolean verified = mgmt.verify(id.getVerkey().orElseThrow(), signed); "<AssertPlaceHolder>"; }
verify(String verkey, VerifiablePresentation<VerifiableIndyCredential> inputVp) { Boolean result = Boolean.FALSE; try { Optional<VerifyResponse> state = acaPy.jsonldVerify(verkey, inputVp); if (state.isPresent()) { result = state.get().isValid(); } } catch (IOException e) { log.error(e.getMessage(), e); throw new NetworkException(e.getMessage()); } return result; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: Exception { DidVerkeyResponse verKey = new DidVerkeyResponse(); verKey.setVerkey("dummy"); Mockito.when(ac.ledgerDidVerkey(Mockito.anyString())) .thenReturn(Optional.of(verKey)); BPASchema dbSchema = schemaRepo.save(BPASchema.builder() .schemaId("1234") .seqNo(571) .type(CredentialType.INDY) .build()); Optional<TrustedIssuer> credDefId = mgmt .addRestriction(dbSchema.getId(), "5mwQSWnRePrZ3oF67C4KqD", null); Assertions.assertTrue(credDefId.isPresent());  Optional<BPASchema> schemaReloaded = schemaRepo.findById(dbSchema.getId()); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(schemaReloaded.get().getRestrictions()); Assertions.assertEquals(1, schemaReloaded.get().getRestrictions().size()); }
findById(@NonNull UUID id) { return repo.findById(id).orElseThrow(EntityNotFoundException::new); }
[*] target: assertTrue(schemaReloaded.isPresent())
[-] pred: org. junit. Assert. assertTrue ( schemaReloaded. isPresent ( ) )
************************************
************************************
[+] input: testISOWithMilli() { final String ts = "2021-11-16T12:02:41.930486Z"; final Instant i = TimeUtil.fromISOInstant(ts); assertNotNull(i); String time = TimeUtil.toISOInstant(i); "<AssertPlaceHolder>"; }
toISOInstant(@NonNull Instant instant) { return ISO_INSTANT_FORMATTER.format(instant); }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
************************************
[+] input: test_should_createClient_ifMessagePackMapperIsChanged() { //given String expectedMappingResult = "Hello";  //when TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client = TarantoolClientFactory.createClient() .withAddresses(SAMPLE_ADDRESS) .withCredentials(SAMPLE_CREDENTIALS) .withDefaultMessagePackMapperConfiguration(mapperBuilder -> mapperBuilder.withObjectConverter(String.class, StringValue.class, object -> ValueFactory.newString(expectedMappingResult)) ) .withConnections(SAMPLE_CONNECTIONS) .withConnectTimeout(SAMPLE_CONNECT_TIMEOUT) .withRequestTimeout(SAMPLE_REQUEST_TIMEOUT) .withReadTimeout(SAMPLE_READ_TIMEOUT) .withEventLoopThreadsNumber(SAMPLE_EVENT_LOOP_THREADS_NUMBER) .build();  TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> configuredClient = TarantoolClientFactory.configureClient(client).build();  String convertedTest = configuredClient.getConfig().getMessagePackMapper() .toValue("Test").asStringValue().asString();  //then "<AssertPlaceHolder>"; assertEquals(ClusterTarantoolTupleClient.class, configuredClient.getClass()); TarantoolClientConfig config = configuredClient.getConfig();  assertTrue(((ClusterTarantoolTupleClient) client).getAddressProvider() .getAddresses().contains(SAMPLE_ADDRESS));  assertNotEquals(SAMPLE_MAPPER, config.getMessagePackMapper());  assertEquals(SAMPLE_CREDENTIALS, config.getCredentials()); assertEquals(SAMPLE_CONNECTIONS, config.getConnections()); assertEquals(SAMPLE_READ_TIMEOUT, config.getReadTimeout()); assertEquals(SAMPLE_REQUEST_TIMEOUT, config.getRequestTimeout()); assertEquals(SAMPLE_CONNECT_TIMEOUT, config.getConnectTimeout()); assertEquals(PARALLEL_ROUND_ROBIN.value(), config.getConnectionSelectionStrategyFactory()); }
build();
[*] target: assertEquals(expectedMappingResult, convertedTest)
[-] pred: org. junit. Assert. assertEquals ( expectedMappingResult, convertedTest )
************************************
************************************
[+] input: testEmptyFrameCreation() { //given final Animation animation = new Animation();  //then "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, animation::getFrame); }
hasFrame() { return !frames.isEmpty(); }
[*] target: assertFalse(animation.hasFrame())
[-] pred: org. junit. Assert. assertFalse ( animation. hasFrame() )
************************************
************************************
[+] input: it_recognizes_lines_that_should_not_be_parsed() { CobolLine line1 = new CobolLine("  ", tokenExtractor); //In FILE SECTION CobolLine line2 = new CobolLine("       FD  INPUT-FILE", tokenExtractor); state.setFlagFor(Constants.FILE_SECTION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertFalse(shouldBeParsed2); }
shouldLineBeParsed(CobolLine line, State state) { if (isTooShortToBeMeaningful(line) && line.tokensSize() > 0) { return false; } if (state.isFlagSetFor(Constants.FILE_SECTION) && !(line.containsToken(Constants.FILE_SECTION))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; } if (state.isFlagSetFor(Constants.FILE_CONTROL) && !(line.containsToken(Constants.FILE_CONTROL))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; }  return true; }
[*] target: assertFalse(shouldBeParsed1)
[-] pred: org. junit. Assert. assertFalse ( shouldBeParsed1 )
************************************
************************************
[+] input: it_recognizes_lines_that_should_be_parsed() { CobolLine line1 = new CobolLine("           .", tokenExtractor); CobolLine line2 = new CobolLine("                   PERFORM 9999-ABORT", tokenExtractor); state.setFlagFor(Constants.PROCEDURE_DIVISION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertTrue(shouldBeParsed2); }
shouldLineBeParsed(CobolLine line, State state) { if (isTooShortToBeMeaningful(line) && line.tokensSize() > 0) { return false; } if (state.isFlagSetFor(Constants.FILE_SECTION) && !(line.containsToken(Constants.FILE_SECTION))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; } if (state.isFlagSetFor(Constants.FILE_CONTROL) && !(line.containsToken(Constants.FILE_CONTROL))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; }  return true; }
[*] target: assertTrue(shouldBeParsed1)
[-] pred: org. junit. Assert. assertTrue ( shouldBeParsed1 )
************************************
************************************
[+] input: Exception { final ApacheHttpClient client = mock(ApacheHttpClient.class); final Request request = Request.create(HttpMethod.GET, "http://localhost", Collections.emptyMap(), Body.empty(), (RequestTemplate) null); final Response mockResponse = Response.builder().request(request).body("foo".getBytes()).build(); when(client.execute(any(), any())).thenReturn(mockResponse); final DccRevocationClientDelegator fixture = new DccRevocationClientDelegator(client); assertNotNull(mockResponse.body()); final Response response = fixture.execute(request, new Options()); "<AssertPlaceHolder>"; }
execute(final Request request, final Options options) throws IOException { final Response response = apacheHttpClient.execute(request, options);  // in case of http HEAD the response is NULL! final Body body = response.body(); if (body != null) { return response; } else { logger.info("response body is null for '{}'", request); }  return Response.builder() .status(response.status()) .reason(response.reason()) .headers(response.headers()) .request(response.request()) .body("", StandardCharsets.UTF_8).build(); }
[*] target: assertEquals(mockResponse, response)
[-] pred: org. junit. Assert. assertEquals ( mockResponse, response )
************************************
************************************
[+] input: testGroupByMajor() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1");  final Map<Integer, BusinessRule> map = BusinessRule.groupByMajor(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1)); assertEquals(v2_1_1, map.get(2)); }
setVersion(String version) { this.version = version; semver = null; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: testIsSameMajorVersionButNewer() { final BusinessRule r1 = new BusinessRule(); r1.setVersion("2.1.0");  final BusinessRule r2 = new BusinessRule(); r2.setVersion("2.1.0");  assertTrue(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.1.1"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("1.1.0"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.0.0"); "<AssertPlaceHolder>"; }
isSameMajorVersionButNewer(final BusinessRule other) { return version().getMajor().equals(other.version().getMajor()) && version().isGreaterThanOrEqualTo(other.version()); }
[*] target: assertTrue(r1.isSameMajorVersionButNewer(r2))
[-] pred: org. junit. Assert. assertTrue ( r1. isSameMajorVersionButNewer(r2 ) )
************************************
************************************
[+] input: testFilterAndSortWithSameIdentifier() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0"); v1_0_0.setIdentifier("one");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); v1_0_5.setIdentifier("one");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1).iterator().next()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: testFilterAndSort() { final BusinessRule one_v1_0_0 = new BusinessRule(); one_v1_0_0.setVersion("1.0.0"); one_v1_0_0.setIdentifier("one");  final BusinessRule two_v1_0_5 = new BusinessRule(); two_v1_0_5.setVersion("1.0.5"); two_v1_0_5.setIdentifier("two");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(one_v1_0_0, two_v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(2, map.get(1).size()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: testIsComplete() { LocalStatisticsJsonStringObject object = new LocalStatisticsJsonStringObject(); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(null); object.setSevenDayIncidence1stReportedTrend1Percent(42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); "<AssertPlaceHolder>"; }
isComplete() { return sevenDayIncidence1stReportedDaily != null && sevenDayIncidence1stReportedTrend1Percent != null; }
[*] target: assertTrue(object.isComplete())
[-] pred: org. junit. Assert. assertTrue ( object. isComplete() )
************************************
************************************
[+] input: should_return_false_if_checkout_time_is_equal_or_before_checkin_time() { SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  boolean result = validator.verify(newPayload, mockValidatorContext); assertFalse(result);  newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME - 1).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
verify(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) { List<CheckIn> checkins = submissionPayload.getCheckInsList(); return checkins.stream() .map(checkin -> verifyTransmissionRiskLevel(checkin, validatorContext) && verifyLocationIdLength(checkin, validatorContext) && verifyStartIntervalNumber(checkin, validatorContext) && verifyEndIntervalNumber(checkin, validatorContext)) .allMatch(checkinValidation -> checkinValidation.equals(Boolean.TRUE)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: getCatalogTemplate_validInput_returnCatalog() { /* ARRANGE */ final var catalog = new ResourceCatalogBuilder().build();  /* ACT */ final var result = TemplateUtils.getCatalogTemplate(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; assertNotNull(result.getDesc());  }
getCatalogTemplate( final Catalog catalog) { return FromIdsObjectMapper.fromIdsCatalog(catalog); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: handleResourceNotFoundException_returnHttpStatusNotFound() { /* ACT */ final var response = exceptionHandler .handleResourceNotFoundException(new ResourceNotFoundException("Resource not found."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Resource not found.", body.get("message")); }
handleResourceNotFoundException( final ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Resource not found. [exception=({})]", exception == null ? "" : exception.getMessage(), exception); }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Resource not found.");  return new ResponseEntity<>(body, headers, HttpStatus.NOT_FOUND); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: handleRouteCreationException_returnStatusInternalServerError() { /* ACT */ final var response = exceptionHandler .handleRouteCreationException( new RouteCreationException("Failed to create route."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Failed to create Camel route.", body.get("message")); }
handleRouteCreationException( final RouteCreationException exception) { if (log.isWarnEnabled()) { if (exception != null) { log.warn("Failed to create Camel route. [exception=({})] [cause=({})]", exception.getMessage(), exception.getCause() == null ? "" : exception.getCause().getMessage()); } else { log.warn("Failed to create Camel route."); } }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Failed to create Camel route.");  return new ResponseEntity<>(body, headers, HttpStatus.INTERNAL_SERVER_ERROR); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = AgreementController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = agreementViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, AgreementController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnAgreementView() { /* ARRANGE */ final var agreement = getAgreement();  /* ACT */ final var result = agreementViewAssembler.toModel(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(agreement.getValue(), result.getValue()); Assertions.assertEquals(agreement.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(agreement.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(agreement.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(agreement.isConfirmed(), result.isConfirmed());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getAgreementLink(agreement.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getAgreementArtifactsLink(agreement.getId()), artifactsLink.get().getHref()); }
toModel(final Agreement agreement) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(agreement, AgreementView.class); view.add(getSelfLink(agreement.getId()));  final var artifactLink = WebMvcLinkBuilder .linkTo(methodOn(AgreementsToArtifactsController.class) .getResource(agreement.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = ArtifactController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = artifactViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, ArtifactController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnArtifactView() { /* ARRANGE */ final var artifact = getArtifact();  /* ACT */ final var result = artifactViewAssembler.toModel(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(artifact.getTitle(), result.getTitle()); Assertions.assertEquals(artifact.getByteSize(), result.getByteSize()); Assertions.assertEquals(artifact.getCheckSum(), result.getCheckSum()); Assertions.assertEquals(artifact.getNumAccessed(), result.getNumAccessed()); Assertions.assertEquals(artifact.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(artifact.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(artifact.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(artifact.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getArtifactLink(artifact.getId()), selfLink.get().getHref());  final var dataLink = result.getLink("data"); assertTrue(dataLink.isPresent()); assertNotNull(dataLink.get()); assertEquals(getArtifactDataLink(artifact.getId()), dataLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getArtifactRepresentationsLink(artifact.getId()), representationsLink.get().getHref());  final var agreementsLink = result.getLink("agreements"); assertTrue(agreementsLink.isPresent()); assertNotNull(agreementsLink.get()); assertEquals(getArtifactAgreementsLink(artifact.getId()), agreementsLink.get().getHref()); }
toModel(final Artifact artifact) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(artifact, ArtifactView.class); view.add(getSelfLink(artifact.getId()));  final var dataLink = linkTo(methodOn(ArtifactController.class) .getData(artifact.getId(), new ArrayList<>(), new QueryInput())) .withRel("data"); view.add(dataLink);  final var repLink = linkTo(methodOn(ArtifactsToRepresentationsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var agreementLink = linkTo(methodOn(ArtifactsToAgreementsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.AGREEMENTS); view.add(agreementLink);  final var subscriptionLink = linkTo(methodOn(ArtifactsToSubscriptionsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var routeLink = linkTo(methodOn(ArtifactController.class) .getRoute(artifact.getId())) .withRel("route"); view.add(routeLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = CatalogController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = catalogViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, CatalogController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnCatalogView() { /* ARRANGE */ final var catalog = getCatalog();  /* ACT */ final var result = catalogViewAssembler.toModel(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(catalog.getTitle(), result.getTitle()); Assertions.assertEquals(catalog.getDescription(), result.getDescription()); Assertions.assertEquals(catalog.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(catalog.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(catalog.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getCatalogLink(catalog.getId()), selfLink.get().getHref());  final var offeredResourcesLink = result.getLink("offers"); assertTrue(offeredResourcesLink.isPresent()); assertNotNull(offeredResourcesLink.get()); assertEquals(getCatalogOfferedResourcesLink(catalog.getId()), offeredResourcesLink.get().getHref()); }
toModel(final Catalog catalog) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(catalog, CatalogView.class); view.add(getSelfLink(catalog.getId()));  final var offeredResLink = WebMvcLinkBuilder .linkTo(methodOn(CatalogsToOfferedResourcesController.class) .getResource(catalog.getId(), null, null)) .withRel(BaseType.OFFERS); view.add(offeredResLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_noResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContract();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_withOfferedResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContractWithOfferedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_withRequestedResources_returnContractViewWithRequestsLink() { /* ARRANGE */ final var contract = getContractWithRequestedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getContractRequestedResourcesLink(contract.getId()), requestsLink.get().getHref()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RepresentationController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = representationViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, RepresentationController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentation();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_withOfferedResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentationWithOfferedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_withRequestedResources_returnRepresentationViewWithRequestsLink() { /* ARRANGE */ final var representation = getRepresentationWithRequestedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getRepresentationRequestedResourcesLink(representation.getId()), requestsLink.get().getHref()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = OfferedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = offeredResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, OfferedResourceController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnOfferedResourceView() { /* ARRANGE */ final var offeredResource = getOfferedResource();  /* ACT */ final var result = offeredResourceViewAssembler.toModel(offeredResource);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(offeredResource.getTitle(), result.getTitle()); Assertions.assertEquals(offeredResource.getDescription(), result.getDescription()); Assertions.assertEquals(offeredResource.getKeywords(), result.getKeywords()); Assertions.assertEquals(offeredResource.getPublisher(), result.getPublisher()); Assertions.assertEquals(offeredResource.getLanguage(), result.getLanguage()); Assertions.assertEquals(offeredResource.getLicense(), result.getLicense()); Assertions.assertEquals(offeredResource.getVersion(), result.getVersion()); Assertions.assertEquals(offeredResource.getSovereign(), result.getSovereign()); Assertions.assertEquals(offeredResource.getEndpointDocumentation(), result.getEndpointDocumentation()); Assertions.assertEquals(offeredResource.getAdditional(), result.getAdditional()); Assertions.assertEquals(offeredResource.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(offeredResource.getModificationDate(), result.getModificationDate());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getOfferedResourceLink(offeredResource.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getOfferedResourceContractsLink(offeredResource.getId()), contractsLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getOfferedResourceRepresentationsLink(offeredResource.getId()), representationsLink.get().getHref());  final var catalogsLink = result.getLink("catalogs"); assertTrue(catalogsLink.isPresent()); assertNotNull(catalogsLink.get()); assertEquals(getOfferedResourceCatalogsLink(offeredResource.getId()), catalogsLink.get().getHref()); }
toModel(final OfferedResource resource) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(resource, OfferedResourceView.class); view.add(getSelfLink(resource.getId()));  final var contractsLink = linkTo(methodOn(OfferedResourcesToContractsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractsLink);  final var repLink = linkTo(methodOn(OfferedResourcesToRepresentationsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var catalogLink = linkTo(methodOn(OfferedResourcesToCatalogsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CATALOGS); view.add(catalogLink);  final var subscriptionLink = linkTo(methodOn(OfferedResourcesToSubscriptionsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var brokerLink = linkTo(methodOn(OfferedResourcesToBrokersController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.BROKERS); view.add(brokerLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RequestedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = requestedResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, RequestedResourceController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnContractRuleView() { /* ARRANGE */ final var contractRule = getContractRule();  /* ACT */ final var result = contractRuleViewAssembler.toModel(contractRule);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contractRule.getTitle(), result.getTitle()); Assertions.assertEquals(contractRule.getValue(), result.getValue()); Assertions.assertEquals(contractRule.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contractRule.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contractRule.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractRuleLink(contractRule.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getContractRuleContractsLink(contractRule.getId()), contractsLink.get().getHref()); }
toModel(final ContractRule rule) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(rule, ContractRuleView.class); view.add(getSelfLink(rule.getId()));  final var contractLink = WebMvcLinkBuilder.linkTo(methodOn(RulesToContractsController.class) .getResource(rule.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = SubscriptionController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = subscriptionViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, SubscriptionController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var subscription = getSubscription();  /* ACT */ final var result = subscriptionViewAssembler.toModel(subscription);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(subscription.getSubscriber(), result.getSubscriber()); Assertions.assertEquals(subscription.getTarget(), result.getTarget()); Assertions.assertEquals(subscription.getLocation(), result.getLocation()); Assertions.assertEquals(subscription.isPushData(), result.isPushData()); Assertions.assertEquals(subscription.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(subscription.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(subscription.getAdditional(), result.getAdditional()); }
toModel(final Subscription subscription) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(subscription, SubscriptionView.class); view.add(getSelfLink(subscription.getId()));  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: updateByteSize_setByteFromNullToEmpty_willNotUpdate() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc());  /* ACT */ final byte[] data = {}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length); final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ //bytesize and checksum should still be 0 "<AssertPlaceHolder>"; assertEquals(0, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
updateByteSize(final Artifact artifact, final byte[] bytes) { if (bytes != null) { final var byteSize = bytes.length; final var checkSum = calculateChecksum(bytes); if (artifact.getCheckSum() != checkSum || artifact.getByteSize() != byteSize) { setByteSizeAndCheckSum(artifact, byteSize, checkSum); return true; } } else { if (artifact.getByteSize() != 0 || artifact.getCheckSum() != 0) { setByteSizeAndCheckSum(artifact, 0, 0); return true; } } return false; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: updateByteSize_hasChanged_willUpdateByteSizeAndChecksum() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc()); final byte[] data = {0, 1}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length);  /* ACT */ final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(2, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
updateByteSize(final Artifact artifact, final byte[] bytes) { if (bytes != null) { final var byteSize = bytes.length; final var checkSum = calculateChecksum(bytes); if (artifact.getCheckSum() != checkSum || artifact.getByteSize() != byteSize) { setByteSizeAndCheckSum(artifact, byteSize, checkSum); return true; } } else { if (artifact.getByteSize() != 0 || artifact.getCheckSum() != 0) { setByteSizeAndCheckSum(artifact, 0, 0); return true; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: getBrokers_brokersNotEmpty_returnList() { /* ARRANGE */ final var broker = new Broker(); final var resource = new OfferedResource(); resource.setBrokers(Collections.singletonList(broker));  /* ACT */ final var result = resource.getBrokers();  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(broker, result.get(0)); }
getBrokers() { return brokers; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: update_newPushData_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isPushData()); }
update(final Subscription subscription, final SubscriptionDesc desc) { final var hasParentUpdated = super.update(subscription, desc); final var hasUpdatedUrl = this.updateLocation(subscription, desc.getLocation()); final var hasUpdatedTarget = this.updateTarget(subscription, desc.getTarget()); final var hasUpdatedPushData = this.updatePushData(subscription, desc.isPushData()); final var hasUpdatedSubscriber = this.updateSubscriber(subscription, desc.getSubscriber()); final var hasUpdateIdsValue = this.updateIdsValue(subscription, desc.isIdsProtocol());  return hasParentUpdated || hasUpdatedUrl || hasUpdatedTarget || hasUpdatedPushData || hasUpdatedSubscriber || hasUpdateIdsValue; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: update_IdsValue_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isIdsProtocol()); }
update(final Subscription subscription, final SubscriptionDesc desc) { final var hasParentUpdated = super.update(subscription, desc); final var hasUpdatedUrl = this.updateLocation(subscription, desc.getLocation()); final var hasUpdatedTarget = this.updateTarget(subscription, desc.getTarget()); final var hasUpdatedPushData = this.updatePushData(subscription, desc.isPushData()); final var hasUpdatedSubscriber = this.updateSubscriber(subscription, desc.getSubscriber()); final var hasUpdateIdsValue = this.updateIdsValue(subscription, desc.isIdsProtocol());  return hasParentUpdated || hasUpdatedUrl || hasUpdatedTarget || hasUpdatedPushData || hasUpdatedSubscriber || hasUpdateIdsValue; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: getAllByArtifactId_validUuid_returnContracts() { /* ARRANGE */ final var contract = new Contract(); final var uuid = UUID.randomUUID(); Mockito.doReturn(List.of(contract)).when(repository).findAllByArtifactId(Mockito.eq(uuid));  /* ACT */ final var result = service.getAllByArtifactId(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(contract, result.get(0)); }
getAllByArtifactId(final UUID artifactId) { Utils.requireNonNull(artifactId, ErrorMessage.ENTITYID_NULL); return ((ContractRepository) getRepository()).findAllByArtifactId(artifactId); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: create_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var desc = new GenericEndpointDesc();  Mockito.doReturn(new GenericEndpoint()).when(generic).create(desc);  /* ACT */ final var result = serviceProxy.create(desc);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
create(final EndpointDesc desc) { return getService(desc.getClass()).create(desc); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: get_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var uuid = UUID.randomUUID();  Mockito.doReturn(new GenericEndpoint()).when(generic).get(uuid);  /* ACT */ final var result = serviceProxy.get(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
get(final UUID entityId) { try { return generic.get(entityId); } catch (ResourceNotFoundException ignored) { } return app.get(entityId); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getBySubscriberAndTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllBySubscriberAndTarget(Mockito.any(), Mockito.any());  /* ACT */ final var result = service.getBySubscriberAndTarget(URI.create("https://subscriber"), URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getByTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllByTarget(Mockito.any());  /* ACT */ final var result = service.getByTarget(URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: checkConstructor() {  //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act Address address = Address.createAddress(street, doorNumber, postCode, city, country);  //Assert assertEquals(street, address.getStreet()); assertEquals(doorNumber, address.getDoorNumber()); assertEquals(postCode, address.getPostCode()); assertEquals(city, address.getCity()); "<AssertPlaceHolder>";  }
getCountry() { return country; }
[*] target: assertEquals(country, address.getCountry())
[-] pred: org. junit. Assert. assertEquals ( country, address. getCountry() )
************************************
************************************
[+] input: testProducerConfigSupplier() { Properties consumerConfig = new Properties(); consumerConfig.setProperty("bootstrap.servers", "localhost:9092"); consumerConfig.setProperty("max.poll.records", "10"); consumerConfig.setProperty("group.id", "group-a"); consumerConfig.setProperty("metric.reporters", "org.apache.kafka.common.metrics.MetricsReporter"); Properties producerConfig = SubscriptionBuilder.producerConfigSupplier(consumerConfig).get(); "<AssertPlaceHolder>"; assertEquals("localhost:9092", producerConfig.getProperty("bootstrap.servers")); assertEquals("org.apache.kafka.common.metrics.MetricsReporter", producerConfig.getProperty("metric.reporters")); }
producerConfigSupplier(Properties consumerConfig) { return () -> { Properties producerProps = new Properties(); Set<String> definedProps = ProducerConfig.configNames(); consumerConfig.stringPropertyNames() .stream() .filter(definedProps::contains) .forEach(propertyName -> producerProps.setProperty( propertyName, consumerConfig.getProperty(propertyName))); return producerProps; }; }
[*] target: assertEquals(2, producerConfig.size())
[-] pred: org. junit. Assert. assertEquals ( 2, producerConfig. size ( ) )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppAnyServices.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppNoService.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/ConsumerSpecificProviders.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals("127.0.0.1:20880", url.getParameter(OVERRIDE_PROVIDERS_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: testRoute_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: testRoute_Empty_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl(" => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: testRoute_False_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("true => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: testRoute_Placeholder() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = $host")); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: testRoutePickInvokers() { String rule = "var result = new java.util.ArrayList(invokers.size());" + "for (i=0;i<invokers.size(); i++){ " + "if (invokers.get(i).isAvailable()) {" + "result.add(invokers.get(i)) ;" + "}" + "} ; " + "return result;"; String script = "function route(invokers,invocation,context){" + rule + "} route(invokers,invocation,context)"; Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));  List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(false); Invoker<String> invoker2 = new MockInvoker<String>(true); Invoker<String> invoker3 = new MockInvoker<String>(true); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { try { // 创建Bindings对象作为function函数的入参 Bindings bindings = createBindings(invokers, invocation); if (function == null) { return invokers; } // 调用function函数，并在getRoutedInvokers()方法中整理得到的Invoker集合 return getRoutedInvokers(function.eval(bindings)); } catch (ScriptException e) { logger.error("route error, rule has been ignored. rule: " + rule + ", method:" + invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(), e); return invokers; } }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: Exception { String p1 = "dubbo.registry.address=zookeeper://127.0.0.1:2181\\\\ndubbo.protocol.port=20880"; Map<String, String> result = ConfigurationUtils.parseProperties(p1); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("zookeeper://127.0.0.1:2181\\ndubbo.protocol.port=20880", result.get("dubbo.registry.address")); }
parseProperties(String content) throws IOException { Map<String, String> map = new HashMap<>(); if (StringUtils.isEmpty(content)) { logger.warn("You specified the config center, but there's not even one single config item in it."); } else { Properties properties = new Properties(); properties.load(new StringReader(content)); properties.stringPropertyNames().forEach( k -> map.put(k, properties.getProperty(k)) ); } return map; }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
************************************
[+] input: test() { long timestamp = System.currentTimeMillis(); String msg = "Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-127.0.0.1:12345, Pool Size: 1 (active: 0, core: 1, max: 1, largest: 1), Task: 6 (completed: 6), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://127.0.0.1:12345!, dubbo version: 2.7.3, current host: 127.0.0.1"; ThreadPoolExhaustedEvent event = new ThreadPoolExhaustedEvent(this, msg);  assertEquals(this, event.getSource()); "<AssertPlaceHolder>"; assertTrue(event.getTimestamp() >= timestamp); }
getMsg() { return msg; }
[*] target: assertEquals(msg, event.getMsg())
[-] pred: org. junit. Assert. assertEquals ( msg, event. getMsg() )
************************************
************************************
[+] input: testGetMetaAnnotations() { List<Annotation> metaAnnotations = getMetaAnnotations(Service.class, a -> isSameType(a, Inherited.class)); "<AssertPlaceHolder>"; assertEquals(Inherited.class, metaAnnotations.get(0).annotationType());  metaAnnotations = getMetaAnnotations(Service.class); assertEquals(2, metaAnnotations.size()); assertEquals(Inherited.class, metaAnnotations.get(0).annotationType()); assertEquals(Deprecated.class, metaAnnotations.get(1).annotationType()); }
isSameType(Annotation annotation, Class<? extends Annotation> annotationType) { if (annotation == null || annotationType == null) { return false; } return Objects.equals(annotation.annotationType(), annotationType); }
[*] target: assertEquals(1, metaAnnotations.size())
[-] pred: org. junit. Assert. assertEquals ( 1, metaAnnotations. size ( ) )
************************************
************************************
[+] input: testOfSet() { Set<String> set = ofSet(); assertEquals(emptySet(), set);  set = ofSet(((String[]) null)); assertEquals(emptySet(), set);  set = ofSet("A", "B", "C"); Set<String> expectedSet = new LinkedHashSet<>(); expectedSet.add("A"); expectedSet.add("B"); expectedSet.add("C"); "<AssertPlaceHolder>"; }
ofSet(T... values) { int size = values == null ? 0 : values.length; if (size < 1) { return emptySet(); }  float loadFactor = 1f / ((size + 1) * 1.0f);  if (loadFactor > 0.75f) { loadFactor = 0.75f; }  Set<T> elements = new LinkedHashSet<>(size, loadFactor); for (int i = 0; i < size; i++) { elements.add(values[i]); } return unmodifiableSet(elements); }
[*] target: assertEquals(expectedSet, set)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, set )
************************************
************************************
[+] input: testGetMethod() { Method getMethod = null; for (Method method : MethodTestClazz.class.getMethods()) { if (MethodUtils.isGetter(method)) { getMethod = method; } } Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("getValue", getMethod.getName()); }
isGetter(Method method) { String name = method.getName(); return (name.startsWith("get") || name.startsWith("is")) && !"get".equals(name) && !"is".equals(name) && !"getClass".equals(name) && !"getObject".equals(name) && Modifier.isPublic(method.getModifiers()) && method.getParameterTypes().length == 0 && ClassUtils.isPrimitive(method.getReturnType()); }
[*] target: assertNotNull(getMethod)
[-] pred: org. junit. Assert. assertNotNull ( getMethod )
************************************
************************************
[+] input: Exception { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; MetadataIdentifier consumerIdentifier = storeConsumer(etcdMetadataReport, TEST_SERVICE, version, group, application);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(consumerIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(fileContent, "{"paramConsumerTest":"etcdConsumer"}"); }
getNodeKey(BaseMetadataIdentifier identifier) { return toRootDir() + identifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, version, group, "provider", revision, protocol); etcdMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(serviceMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, URL.encode(url.toFullString())); }
getNodeKey(BaseMetadataIdentifier identifier) { return toRootDir() + identifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(application, revision); Gson gson = new Gson(); String r = gson.toJson(Arrays.asList(url)); etcdMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, r);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(subscriberMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = etcdMetadataReport.doGetSubscribedURLs(subscriberMetadataIdentifier); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, r); }
doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) { return etcdClient.getKVValue(getNodeKey(subscriberMetadataIdentifier)); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: Exception { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION, METADATA_GROUP, "provider", REVISION, PROTOCOL); nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH); String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(serviceMetaData, URL.encode(url.toFullString()));  //clear test data configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP); }
doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) { storeMetadata(serviceMetadataIdentifier, URL.encode(url.toFullString())); }
[*] target: assertNotNull(serviceMetaData)
[-] pred: org. junit. Assert. assertNotNull ( serviceMetaData )
************************************
************************************
[+] input: NacosException { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(APPLICATION_NAME, REVISION); Gson gson = new Gson(); String urlListJsonString = gson.toJson(Arrays.asList(url)); nacosMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, urlListJsonString); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);  String subscriberMetadata = configService.getConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(subscriberMetadata, urlListJsonString);  //clear test data configService.removeConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);  }
doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) { storeMetadata(subscriberMetadataIdentifier, urlListStr); }
[*] target: assertNotNull(subscriberMetadata)
[-] pred: org. junit. Assert. assertNotNull ( subscriberMetadata )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0.zk.md"; String group = null; String application = "vic.zk.md"; MetadataIdentifier providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application);  String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNotNull(fileContent);  deletePath(providerMetadataIdentifier, zookeeperMetadataReport); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 1000, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNull(fileContent);   providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions."<AssertPlaceHolder>";  Gson gson = new Gson(); FullServiceDefinition fullServiceDefinition = gson.fromJson(fileContent, FullServiceDefinition.class); Assertions.assertEquals(fullServiceDefinition.getParameters().get("paramTest"), "zkTest"); }
getNodePath(BaseMetadataIdentifier metadataIdentifier) { return toRootDir() + metadataIdentifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(interfaceName, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(interfaceName, version, group, "provider", revision, protocol); zookeeperMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier));  Assertions.assertNotNull(fileContent);   zookeeperMetadataReport.doRemoveMetadata(serviceMetadataIdentifier);  fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier)); Assertions."<AssertPlaceHolder>"; }
getNodePath(BaseMetadataIdentifier metadataIdentifier) { return toRootDir() + metadataIdentifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNull(fileContent)
[-] pred: org. junit. Assert. assertNull ( fileContent )
************************************
************************************
[+] input: testNotifyoverrideUrls_beforeInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory(); List<URL> overrideUrls = new ArrayList<URL>(); overrideUrls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5")); registryDirectory.notify(overrideUrls); //The registry is initially pushed to override only, and the dirctory state should be false because there is no invoker. Assertions.assertFalse(registryDirectory.isAvailable());  //After pushing two provider, the directory state is restored to true List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("timeout", "1000")); serviceUrls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10"));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
************************************
[+] input: testNotifyoverrideUrls_withInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> durls = new ArrayList<URL>(); durls.add(SERVICEURL.addParameter("timeout", "1000")); durls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10")); durls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5"));  registryDirectory.notify(durls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
************************************
[+] input: testNotify_MockProviderOnly() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("methods", "getXXX1")); serviceUrls.add(SERVICEURL2.addParameter("methods", "getXXX1,getXXX2")); serviceUrls.add(SERVICEURL.setProtocol(MOCK_PROTOCOL));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>"; invocation = new RpcInvocation();  List invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  RpcInvocation mockinvocation = new RpcInvocation(); mockinvocation.setAttachment(INVOCATION_NEED_MOCK, "true"); invokers = registryDirectory.list(mockinvocation); Assertions.assertEquals(1, invokers.size()); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable() )
************************************
************************************
[+] input: test_Notified_withGroupFilter() { URL directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1,group2"); RegistryDirectory directory = this.getRegistryDirectory(directoryUrl); URL provider1 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group1&mock=false&application=mockApplication"); URL provider2 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group2&mock=false&application=mockApplication");  List<URL> providers = new ArrayList<>(); providers.add(provider1); providers.add(provider2); directory.notify(providers);  invocation = new RpcInvocation(); invocation.setMethodName("getXXX"); List<Invoker<DemoService>> invokers = directory.list(invocation);  Assertions.assertEquals(2, invokers.size()); Assertions.assertTrue(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertTrue(invokers.get(1) instanceof MockClusterInvoker);  directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1"); directory = this.getRegistryDirectory(directoryUrl); directory.notify(providers);  invokers = directory.list(invocation);  Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertFalse(invokers.get(1) instanceof MockClusterInvoker); }
notify(List<URL> urls) { // 按照category进行分类，分成configurators、routers、providers三类 Map<String, List<URL>> categoryUrls = urls.stream() .filter(Objects::nonNull) .filter(this::isValidCategory) .filter(this::isNotCompatibleFor26x) .collect(Collectors.groupingBy(this::judgeCategory)); // 获取configurators类型的URL，并转换成Configurator对象 List<URL> configuratorURLs = categoryUrls.getOrDefault(CONFIGURATORS_CATEGORY, Collections.emptyList()); this.configurators = Configurator.toConfigurators(configuratorURLs).orElse(this.configurators);  // 获取routers类型的URL，并转成Router对象，添加到RouterChain中 List<URL> routerURLs = categoryUrls.getOrDefault(ROUTERS_CATEGORY, Collections.emptyList()); toRouters(routerURLs).ifPresent(this::addRouters);  // 获取providers类型的URL，调用refreshOverrideAndInvoker()方法进行处理 List<URL> providerURLs = categoryUrls.getOrDefault(PROVIDERS_CATEGORY, Collections.emptyList()); /** * 3.x added for extend URL address */ ExtensionLoader<AddressListener> addressListenerExtensionLoader = ExtensionLoader.getExtensionLoader(AddressListener.class); List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null); if (supportedListeners != null && !supportedListeners.isEmpty()) { for (AddressListener addressListener : supportedListeners) { providerURLs = addressListener.notify(providerURLs, getConsumerUrl(),this); } } refreshOverrideAndInvoker(providerURLs); }
[*] target: assertEquals(2, invokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, invokers. size ( ) )
************************************
************************************
[+] input: getByteBufferState() { ByteBuffer dst = ByteBuffer.allocate(4); dst.position(1); dst.limit(3);  buffer.setByte(0, (byte) 1); buffer.setByte(1, (byte) 2); buffer.setByte(2, (byte) 3); buffer.setByte(3, (byte) 4); buffer.getBytes(1, dst);  assertEquals(3, dst.position()); assertEquals(3, dst.limit());  dst.clear(); "<AssertPlaceHolder>"; assertEquals(2, dst.get(1)); assertEquals(3, dst.get(2)); assertEquals(0, dst.get(3)); }
clear() { readerIndex = writerIndex = 0; }
[*] target: assertEquals(0, dst.get(0))
[-] pred: org. junit. Assert. assertEquals ( 0, dst. get ( 0 ) )
************************************
************************************
[+] input: startCloseTest() { try { boolean isClosing = channel.isClosing(); Assertions.assertFalse(isClosing); header.startClose(); isClosing = channel.isClosing(); Assertions."<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); } }
startClose() { channel.startClose(); }
[*] target: assertTrue(isClosing)
[-] pred: org. junit. Assert. assertTrue ( isClosing )
************************************
************************************
[+] input: testAsync() {  RpcContext rpcContext = RpcContext.getContext(); Assertions.assertFalse(rpcContext.isAsyncStarted());  AsyncContext asyncContext = RpcContext.startAsync(); Assertions.assertTrue(rpcContext.isAsyncStarted());  asyncContext.write(new Object()); Assertions.assertTrue(((AsyncContextImpl) asyncContext).getInternalFuture().isDone());  rpcContext.stopAsync(); Assertions."<AssertPlaceHolder>"; }
isAsyncStarted() { if (this.asyncContext == null) { return false; } return asyncContext.isAsyncStarted(); }
[*] target: assertTrue(rpcContext.isAsyncStarted())
[-] pred: org. junit. Assert. assertTrue ( rpcContext. isAsyncStarted() )
************************************
************************************
[+] input: Exception {  DubboSwaggerApiListingResource resource = new  DubboSwaggerApiListingResource();  app = mock(Application.class); sc = mock(ServletConfig.class); Set<Class<?>> sets = new HashSet<Class<?>>(); sets.add(SwaggerService.class);  when(sc.getServletContext()).thenReturn(mock(ServletContext.class)); when(app.getClasses()).thenReturn(sets);  Response response = resource.getListingJson(app, sc, null, new ResteasyUriInfo(new URI("http://rest.test")));  Assertions."<AssertPlaceHolder>"; Swagger swagger = (Swagger)response.getEntity(); Assertions.assertEquals("SwaggerService",swagger.getTags().get(0).getName()); Assertions.assertEquals("/demoService/hello",swagger.getPaths().keySet().toArray()[0].toString()); }
getListingJson(Application app, ServletConfig sc, HttpHeaders headers, UriInfo uriInfo)  throws JsonProcessingException { Response response =  getListingJsonResponse(app, context, sc, headers, uriInfo); response.getHeaders().add("Access-Control-Allow-Origin", "*"); response.getHeaders().add("Access-Control-Allow-Headers", "x-requested-with, ssi-token"); response.getHeaders().add("Access-Control-Max-Age", "3600"); response.getHeaders().add("Access-Control-Allow-Methods","GET,POST,PUT,DELETE,OPTIONS"); return response; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.Iface.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());  Demo.echoString_result methodResult = new Demo.echoString_result();  methodResult.success = "Hello, World!";  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.Iface.class.getName()); // path protocol.writeString(Demo.Iface.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); methodResult.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  byte[] buf = new byte[4 + bos.size()]; System.arraycopy(bos.toByteArray(), 0, buf, 4, bos.size());  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(buf);  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertEquals(request.getId(), response.getId());  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.getValue() instanceof String);  Assertions.assertEquals(methodResult.success, result.getValue());  }
decode(Channel channel, ChannelBuffer buffer) throws IOException {  int available = buffer.readableBytes();  if (available < MESSAGE_SHORTEST_LENGTH) {  return DecodeResult.NEED_MORE_INPUT;  } else {  TIOStreamTransport transport = new TIOStreamTransport(new ChannelBufferInputStream(buffer));  TBinaryProtocol protocol = new TBinaryProtocol(transport);  short magic; int messageLength;  try { //                protocol.readI32(); // skip the first message length byte[] bytes = new byte[4]; transport.read(bytes, 0, 4); magic = protocol.readI16(); messageLength = protocol.readI32();  } catch (TException e) { throw new IOException(e.getMessage(), e); }  if (MAGIC != magic) { throw new IOException("Unknown magic code " + magic); }  if (available < messageLength) { return DecodeResult.NEED_MORE_INPUT; }  return decode(protocol);  }  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.EXCEPTION, ThriftCodec.getSeqId());  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  TApplicationException exception = new TApplicationException();  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.class.getName()); // path protocol.writeString(Demo.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); exception.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(encodeFrame(bos.toByteArray()));  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.hasException());  Assertions.assertTrue(result.getException() instanceof RpcException);  }
decode(Channel channel, ChannelBuffer buffer) throws IOException {  int available = buffer.readableBytes();  if (available < MESSAGE_SHORTEST_LENGTH) {  return DecodeResult.NEED_MORE_INPUT;  } else {  TIOStreamTransport transport = new TIOStreamTransport(new ChannelBufferInputStream(buffer));  TBinaryProtocol protocol = new TBinaryProtocol(transport);  short magic; int messageLength;  try { //                protocol.readI32(); // skip the first message length byte[] bytes = new byte[4]; transport.read(bytes, 0, 4); magic = protocol.readI16(); messageLength = protocol.readI32();  } catch (TException e) { throw new IOException(e.getMessage(), e); }  if (MAGIC != magic) { throw new IOException("Unknown magic code " + magic); }  if (available < messageLength) { return DecodeResult.NEED_MORE_INPUT; }  return decode(protocol);  }  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
************************************
[+] input: IOException { Layout layout = LogLinearLayout.create(1e-8, 1e-2, -1e6, 1e6); Histogram histogram = Histogram.createDynamic(layout); histogram.addValue(-5.5);  ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream); histogram.write(dataOutputStream); byte[] serializedHistogram = byteArrayOutputStream.toByteArray();  DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(serializedHistogram)); Histogram deserializedHistogram = Histogram.readAsPreprocessed(layout, dataInputStream);  "<AssertPlaceHolder>"; assertEquals(histogram.hashCode(), deserializedHistogram.hashCode()); }
addValue(double value) { throw new UnsupportedOperationException(); }
[*] target: assertEquals(histogram, deserializedHistogram)
[-] pred: org. junit. Assert. assertEquals ( histogram, deserializedHistogram )
************************************
************************************
[+] input: testConvertRGB() { Color color = convertPaint(CSSConstants.CSS_FILL_PROPERTY, "rgb(120, 30, 200)", ColorValue.RGB_FUNCTION); "<AssertPlaceHolder>"; assertEquals(120, color.getRed()); assertEquals(30, color.getGreen()); assertEquals(200, color.getBlue()); assertEquals(255, color.getAlpha());  assertNull(context.getColorSpace()); }
convertPaint(Element paintedElement, GraphicsNode paintedNode, Value paintDef, float opacity, BridgeContext ctx) { if (paintDef.getCssValueType() == CssType.TYPED) { switch (paintDef.getPrimitiveType()) { case IDENT: return null; // none case COLOR: return convertColor(paintDef.getColorValue(), opacity, ctx); case URI: return convertURIPaint(paintedElement, paintedNode, paintDef, opacity, ctx); default: break; } } else { // List Value v = paintDef.item(0); switch (v.getPrimitiveType()) { case COLOR: switch ((v.getColorValue()).getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: return convertRGBICCColor(paintedElement, v, paintDef.item(1), opacity, ctx); } break;  case URI: Paint result = silentConvertURIPaint(paintedElement, paintedNode, v, opacity, ctx); if (result != null) { return result; }  v = paintDef.item(1); switch (v.getPrimitiveType()) { case IDENT: return null; // none case COLOR: ColorValue color = v.getColorValue(); switch (color.getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: if (paintDef.getLength() == 2) { return convertColor((RGBColorValue) color, opacity); } else { return convertRGBICCColor(paintedElement, v, paintDef.item(2), opacity, ctx); } } break; default: break; }  default: break; } } throw new IllegalArgumentException("Paint argument is not an appropriate CSS value"); }
[*] target: assertNotNull(color)
[-] pred: org. junit. Assert. assertNotNull ( color )
************************************
************************************
[+] input: testFindByBatchTagIsAndUploader_CountryIsNot() { List<DiagnosisKeyEntity> result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_B); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_A, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.SECOND_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_B); Assertions."<AssertPlaceHolder>"; }
findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(String batchTag, String country);
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
************************************
[+] input: testScanFromJarWithIncludesPredicates() { // use slf4j as target assumeTrue(ClassUtils.hasClass("org.slf4j.Logger") && ClassUtils.hasClass("org.slf4j.LoggerFactory"));  final ClassPathScanUtils scanUtils = new ClassPathScanUtils(true, true, Collections.singletonList("LoggerFactory")); Set<Class<?>> classes = scanUtils.getPackageAllClasses("org.slf4j", false); "<AssertPlaceHolder>"; assertTrue(classes.contains(org.slf4j.LoggerFactory.class)); assertFalse(classes.contains(org.slf4j.Logger.class)); }
getPackageAllClasses(String path, boolean recursive) { Checks.checkNotEmptyArg(path, "path"); final Set<Class<?>> classes = new LinkedHashSet<>(); if (path.endsWith(".")) { path = path.substring(0, path.lastIndexOf('.')); }  Enumeration<URL> dirs; try { dirs = ClassUtils.getClassLoader().getResources(standardPath(path)); while (dirs.hasMoreElements()) { URL url = dirs.nextElement(); if ("file".equals(url.getProtocol())) { scanFromFile(classes, path, URLDecoder.decode(url.getFile(), "UTF-8"), recursive); } else if ("jar".equals(url.getProtocol())) { scanFromJar(path, url, classes, recursive); } } } catch (IOException ignored) { }  return classes; }
[*] target: assertEquals(1, classes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, classes. size ( ) )
************************************
************************************
[+] input: testCreateNewNettyInternalThread() { InternalThread t = InternalThreads.newThread(); assertTrue(t instanceof NettyInternalThread); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = InternalThreads.newThread(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = InternalThreads.newThread(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(InternalThreads.newThread("foo"), null, "foo"); assertThreadInfo(InternalThreads.newThread(group, "foo"), group, "foo");  t = InternalThreads.newThread(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
thread();
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
************************************
[+] input: testCreateNewInternalThread() { InternalThread t = new InternalThreadImpl(); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = new InternalThreadImpl(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = new InternalThreadImpl(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(new InternalThreadImpl("foo"), null, "foo"); assertThreadInfo(new InternalThreadImpl(group, "foo"), group, "foo");  t = new InternalThreadImpl(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
thread();
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
************************************
[+] input: testNameAndUnwrap() { final LogHandler handler = mock(LogHandler.class); InternalLoggerImpl logger = new InternalLoggerImpl("foo", handler); assertEquals("foo", logger.name()); "<AssertPlaceHolder>"; }
unwrap() { return this; }
[*] target: assertSame(logger, logger.unwrap())
[-] pred: org. junit. Assert. assertSame ( logger, logger. unwrap() )
************************************
************************************
[+] input: testInfo() { final java.util.logging.Logger mock = mock(java.util.logging.Logger.class); when(mock.getName()).thenReturn("foo"); final Logger logger = new JdkLogger(mock); when(mock.isLoggable(Level.INFO)).thenReturn(true); assertTrue(logger.isInfoEnabled()); verifyInfo(mock, logger, true);  reset(mock);  when(mock.getName()).thenReturn("foo"); when(mock.isLoggable(Level.INFO)).thenReturn(false); "<AssertPlaceHolder>"; verifyInfo(mock, logger, false); }
isInfoEnabled() { return logger.isLoggable(Level.INFO); }
[*] target: assertFalse(logger.isInfoEnabled())
[-] pred: org. junit. Assert. assertFalse ( logger. isInfoEnabled() )
************************************
************************************
[+] input: testConfigure() { final MultipartOptions options = MultipartOptionsConfigure.newOpts() .charset(StandardCharsets.UTF_8) .maxSize(1L) .memoryThreshold(2L) .tempDir("/foo") .useDisk(true) .configured();  assertEquals(StandardCharsets.UTF_8, options.getCharset()); assertEquals(1L, options.getMaxSize()); assertEquals(2L, options.getMemoryThreshold()); assertEquals("/foo", options.getTempDir()); "<AssertPlaceHolder>"; }
isUseDisk() { return useDisk; }
[*] target: assertTrue(options.isUseDisk())
[-] pred: org. junit. Assert. assertTrue ( options. isUseDisk() )
************************************
************************************
[+] input: testSetAndCallOnEndHandler() { final Req req = plainReq(); when(req.response.isCommitted()).thenReturn(true); when(req.response.isEnded()).thenReturn(true); final AtomicBoolean end = new AtomicBoolean(); assertSame(req, req.onEnd(p -> { end.set(true); return p.setSuccess(null); })); req.handleEnd(); "<AssertPlaceHolder>"; }
handleEnd() { if (multipart != null) { // may be error multipart.end(); }  if (onEnd != null) { Future<Void> f = onEnd.apply(ctx.newPromise()); if (f.isDone()) { windUp(f); } else { f.addListener(this::windUp); } } else { windUp(ctx.newSucceededFuture()); } }
[*] target: assertTrue(end.get())
[-] pred: org. junit. Assert. assertTrue ( end. get ( ) )
************************************
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.write(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
isEnded() { return COMMITTED_UPDATER.get(this) == END; }
[*] target: assertFalse(res.isEnded())
[-] pred: org. junit. Assert. assertFalse ( res. isEnded() )
************************************
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.end(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
isEnded() { return COMMITTED_UPDATER.get(this) == END; }
[*] target: assertTrue(res.isEnded())
[-] pred: org. junit. Assert. assertTrue ( res. isEnded() )
************************************
************************************
[+] input: testNoneSsl() { final SslHelper sslHelper = new SslHelper(null, true); assertFalse(sslHelper.isSsl()); assertNull(sslHelper.options()); "<AssertPlaceHolder>"; }
getSslContext() { return sslContext; }
[*] target: assertNull(sslHelper.getSslContext())
[-] pred: org. junit. Assert. assertNull ( sslHelper. getSslContext() )
************************************
************************************
[+] input: CertificateException {  final SslOptions ssl = new SslOptions(); ssl.setEnabledProtocols(new String[]{"TLSv1.2"}); ssl.setCiphers(new String[]{"AES256-SHA", "AES128-SHA"}); final SelfSignedCertificate cert = new SelfSignedCertificate(); ssl.setCertificate(cert.certificate()); ssl.setPrivateKey(cert.privateKey()); ssl.setClientAuth(ClientAuth.NONE); ssl.setSessionCacheSize(10L);   final SslHelper sslHelper = new SslHelper(ssl, true); assertTrue(sslHelper.isSsl()); assertSame(ssl, sslHelper.options());  final SslContext sslContext = sslHelper.getSslContext(); "<AssertPlaceHolder>"; assertTrue(sslContext.isServer()); assertArrayEquals(ssl.getCiphers(), sslContext.cipherSuites().toArray()); assertEquals(10L, sslContext.sessionCacheSize()); }
getSslContext() { return sslContext; }
[*] target: assertNotNull(sslContext)
[-] pred: org. junit. Assert. assertNotNull ( sslContext )
************************************
************************************
[+] input: InterruptedException { final NetOptions options = new NetOptions(); options.setSoBacklog(10); options.setReuseAddress(false); options.setSoKeepalive(true); options.setTcpNoDelay(true); options.setSoRcvbuf(100); options.setSoSendbuf(100); options.setSoLinger(1); options.setOptions(Collections.singletonMap(ChannelOption.AUTO_READ, false)); final CountDownLatch latch = new CountDownLatch(1); final AtomicReference<Channel> ch = new AtomicReference<>(); final EventLoopGroup group = new NioEventLoopGroup(1); try { ServerBootstrap sb = new ServerBootstrap(); NioTransport.INSTANCE.applyOptions(sb, options, new LocalAddress("foo")); sb.channel(NioServerSocketChannel.class) .group(group) .childHandler(new ChannelInboundHandlerAdapter()) .handler(new ChannelHandlerAdapter() { @Override public void handlerAdded(ChannelHandlerContext ctx) { ch.set(ctx.channel()); latch.countDown(); } }); sb.register().syncUninterruptibly(); latch.await(); final Channel channel = ch.get(); "<AssertPlaceHolder>";  assertEquals(10, channel.config().getOption(ChannelOption.SO_BACKLOG)); assertFalse(channel.config().getOption(ChannelOption.SO_REUSEADDR)); assertFalse(channel.config().getOption(ChannelOption.AUTO_READ)); } finally { group.shutdownGracefully(); } }
applyOptions(ServerBootstrap bootstrap, NetOptions options, SocketAddress local) { final boolean isDomainSocket = local instanceof DomainSocketAddress; if (!isDomainSocket) { bootstrap.childOption(ChannelOption.SO_KEEPALIVE, options.isSoKeepalive()); bootstrap.childOption(ChannelOption.TCP_NODELAY, options.isTcpNoDelay()); }  if (options.getSoBacklog() > 0) { bootstrap.option(ChannelOption.SO_BACKLOG, options.getSoBacklog()); }  bootstrap.option(ChannelOption.SO_REUSEADDR, options.isReuseAddress());  if (USE_UNPOOLED_ALLOCATOR) { bootstrap.childOption(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT); }  if (options.getSoRcvbuf() > 0) { bootstrap.childOption(ChannelOption.SO_RCVBUF, options.getSoRcvbuf()); }  if (options.getSoSendbuf() > 0) { bootstrap.childOption(ChannelOption.SO_SNDBUF, options.getSoSendbuf()); }  if (options.getSoLinger() != -1) { bootstrap.childOption(ChannelOption.SO_LINGER, options.getSoLinger()); }  if (options.getOptions() != null) { addOption(bootstrap, options.getOptions()); }  if (options.getChildOptions() != null) { addChildOption(bootstrap, options.getChildOptions()); } }
[*] target: assertNotNull(channel)
[-] pred: org. junit. Assert. assertNotNull ( channel )
************************************
************************************
[+] input: testConfigure() { final SerializesOptions options = SerializesOptionsConfigure.newOpts() .request(null) .response(null) .configured();  assertNull(options.getRequest()); "<AssertPlaceHolder>"; }
getResponse() { return response; }
[*] target: assertNull(options.getResponse())
[-] pred: org. junit. Assert. assertNull ( options. getResponse() )
************************************
************************************
[+] input: testResolveEmptyArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); when(mock.params()).thenReturn(new HandlerAdapter.ResolvableParam[0]); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(0, args.length); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: testResolveFixArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); }  @Override protected Object resolveFixedArg(MethodParam parameter, AsyncRequest request, AsyncResponse response) { return "foo"; } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); //noinspection unchecked when(param.type()).thenReturn((Class) Object.class); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, null); when(mock.params()).thenReturn(params);  final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: Exception { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); final ArgumentResolver argResolver = mock(ArgumentResolver.class); when(argResolver.resolve(any(), any())).thenReturn("foo"); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, argResolver); when(mock.params()) .thenReturn(params); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: NoSuchMethodException { HandlerInvoker invoker = getInvoker("method"); final HandlerMethod handlerMethod = HandlerMethod.of(Subject.class.getDeclaredMethod("method"), SUBJECT); final HttpResponseStatus customResponse = HttpResponseStatus.ACCEPTED; final HandlerImpl handler = new HandlerImpl(handlerMethod, customResponse, invoker); assertEquals(handlerMethod, handler.handler()); "<AssertPlaceHolder>";  }
customResponse() { return customResponse; }
[*] target: assertEquals(customResponse, handler.customResponse())
[-] pred: org. junit. Assert. assertEquals ( customResponse, handler. customResponse() )
************************************
************************************
[+] input: NoSuchMethodException { final RouteHandler handler = mock(RouteHandler.class); when(handler.intercepted()).thenReturn(true); when(handler.handler()) .thenReturn(HandlerMethod.of(HandlerAdapterTest.class.getDeclaredMethod("normal", String.class), new HandlerAdapterTest())); final MultiValueMap<InterceptorPredicate, Interceptor> interceptors = new LinkedMultiValueMap<>(); final Interceptor interceptor0 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return 0; } }; final Interceptor interceptor1 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return -1; } }; final Interceptor interceptor2 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> false; }  @Override public int getOrder() { return 1; } }; interceptors.add(interceptor0.predicate(), interceptor0); interceptors.add(interceptor1.predicate(), interceptor1); interceptors.add(interceptor2.predicate(), interceptor2);  final RouteHandlerAdapter adapter = new RouteHandlerAdapter(handler, mock(HandlerResolverFactory.class), interceptors, null);  final List<InternalInterceptor> matched = adapter.getMatchingInterceptors(MockAsyncRequest.aMockRequest().build()); "<AssertPlaceHolder>"; assertEquals(2, matched.size()); assertSame(interceptor1, matched.get(0)); assertSame(interceptor0, matched.get(1)); }
getMatchingInterceptors(AsyncRequest request) { if (handler.intercepted()) { return interceptorMatcher.match(request); } return null; }
[*] target: assertNotNull(matched)
[-] pred: org. junit. Assert. assertNotNull ( matched )
************************************
************************************
[+] input: Throwable { final HandlerAdvicesFactory factory = mock(HandlerAdvicesFactory.class); when(factory.getHandlerAdvices(any())) .thenReturn(new HandlerAdvice[]{(request, response, args, invoker) -> "bar"});  final AbstractRouteHandlerLocator locator = new AbstractRouteHandlerLocator("foo", factory) { @Override protected HttpResponseStatus getCustomResponse(InvocableMethod handlerMethod) { return HttpResponseStatus.OK; } };  final Optional<RouteHandler> handler = locator.getRouteHandler(AbstractRouteHandlerLocatorTest.class, AbstractRouteHandlerLocatorTest.class.getDeclaredMethod("forTest"), new AbstractRouteHandlerLocatorTest());  "<AssertPlaceHolder>"; assertTrue(handler.isPresent()); assertEquals("foo", handler.get().scheduler()); assertTrue(handler.get().hasCustomResponse()); assertEquals(HttpResponseStatus.OK, handler.get().customResponse()); assertEquals("bar", handler.get().invoke(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), null)); }
getRouteHandler(Class<?> userType, Method method, Object bean) { final InvocableMethod handlerMethod = getHandlerMethod(userType, method, bean); HandlerInvoker invoker = new HandlerInvokerImpl(handlerMethod); if (handlerAdvicesFactory != null) { HandlerAdvice[] handlerAdvices = handlerAdvicesFactory.getHandlerAdvices(new HandlerImpl(handlerMethod, this.getCustomResponse(handlerMethod), invoker)); if (handlerAdvices != null && handlerAdvices.length > 0) { invoker = LinkedHandlerInvoker.immutable(handlerAdvices, invoker); } } return Optional.of(new RouteHandlerImpl(handlerMethod, this.getCustomResponse(handlerMethod), invoker, InterceptorUtils.isIntercepted(handlerMethod), RouteUtils.scheduling(handlerMethod, globalScheduling))); }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
************************************
[+] input: testTransferListenableFuture() { final CompletableFuture<String> cf = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> "foo")); assertNotNull(cf); assertEquals("foo", cf.join());  final IllegalStateException e = new IllegalStateException("bar"); final CompletableFuture<String> cf1 = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> { throw e; })); "<AssertPlaceHolder>"; try { cf1.join(); } catch (Exception ex) { Throwable err = Futures.unwrapCompletionException(ex); assertEquals(e, err); assertEquals("bar", err.getMessage()); } }
transferListenableFuture(ListenableFuture<T> future) { final CompletableFuture<T> transfer = new CompletableFuture<>(); future.addListener(() -> { try { transfer.complete(getDone(future)); } catch (Throwable t) { // unwrap ExecutionException which wrapped by ListenableFuture if (t instanceof ExecutionException) { transfer.completeExceptionally(t.getCause()); } else { transfer.completeExceptionally(t); } } }, DirectExecutor.INSTANCE); return transfer; }
[*] target: assertNotNull(cf1)
[-] pred: org. junit. Assert. assertNotNull ( cf1 )
************************************
************************************
[+] input: testDeployments() { final ServerOptions ops = ServerOptionsConfigure.newOpts() .scheduling(SchedulingOptionsConfigure.newOpts() .defaultScheduler("custom") .configured()) .route(RouteOptionsConfigure.newOpts().useCachedRouting(true).computeRate(20).configured()) .configured(); final Route r1 = Route.route(get("/foo")).schedule(Schedulers.io()); final Route r2 = Route.route(get("/bar")).schedule(Schedulers.biz()); final Route r3 = Route.route(get("/baz")); final ThreadPoolExecutor custom = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<>()); final Restlite restlite = Restlite0.forServer(ops) .deployments() .addScheduler(Schedulers.fromExecutor("custom", custom)) .addSchedulers(Collections.singleton(Schedulers.fromExecutor("custom0", GlobalEventExecutor.INSTANCE))) .addRoute(r1) .addRoutes(Arrays.asList(r2, r3)) .addRequestTaskHook((RequestTaskHook) task -> null) .addRequestTaskHook((RequestTaskHookFactory) ctx -> Optional.empty()) .addRequestTaskHooks(Collections.singletonList(ctx -> Optional.empty())) .server(); restlite.start(); final ServerDeployContext<ServerOptions> ctx = restlite.deployments().deployContext(); "<AssertPlaceHolder>"; assertEquals(ops, ctx.options()); assertTrue(ctx.routeRegistry().isPresent()); assertNotNull(ctx.routeRegistry().get().routes()); assertEquals(3, ctx.routeRegistry().get().routes().size()); assertEquals(4, ctx.schedulers().size()); assertEquals(Schedulers.io(), ctx.schedulers().get(Schedulers.IO)); final Scheduler biz = ctx.schedulers().get(Schedulers.BIZ); assertTrue(biz instanceof ExecutorScheduler); assertTrue(((ExecutorScheduler) biz).executor() instanceof ThreadPoolExecutor); final ThreadPoolExecutor bizPool = (ThreadPoolExecutor) ((ExecutorScheduler) biz).executor(); assertEquals(ops.getBizThreads().getCore(), bizPool.getCorePoolSize()); assertEquals(ops.getBizThreads().getMax(), bizPool.getMaximumPoolSize()); assertEquals(ops.getBizThreads().getKeepAliveTimeSeconds(), bizPool.getKeepAliveTime(TimeUnit.SECONDS)); final Scheduler customScheduler = ctx.schedulers().get("custom"); assertTrue(customScheduler instanceof ExecutorScheduler); assertEquals(custom, ((ExecutorScheduler) customScheduler).executor()); assertTrue(custom.getRejectedExecutionHandler() instanceof BaseDeployments.BizRejectedHandler); }
forServer(ServerOptions options) { return new Restlite(options); }
[*] target: assertNotNull(ctx)
[-] pred: org. junit. Assert. assertNotNull ( ctx )
************************************
************************************
[+] input: testRejectedBeforeExecution() { final AtomicBoolean flag = new AtomicBoolean();  // actualCost < timeoutMillis final TimeoutScheduler scheduler0 = new TimeoutScheduler(Schedulers.io(), TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured()); final AsyncResponse response0 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable0 = () -> { flag.set(true); response0.sendResult(1000); }; final RequestTask task0 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), response0, new CompletableFuture<>(), runnable0); scheduler0.schedule(task0); assertTrue(flag.get()); assertEquals(1000, response0.status()); flag.set(false);  // actualCost >= timeoutMillis final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable1 = () -> { response1.sendResult(1000); flag.set(true); }; final RequestTask task1 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), new CompletableFuture<>(), runnable1); final TimeoutScheduler scheduler1 = new TimeoutScheduler(new Scheduler() {  @Override public String name() { return "test"; }  @Override public void schedule(Runnable cmd) { try { TimeUnit.MILLISECONDS.sleep(10L); } catch (Throwable ignore) { } cmd.run(); }  @Override public void shutdown() {  } }, TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured());  scheduler1.schedule(task1); "<AssertPlaceHolder>"; assertEquals(200, response1.status()); }
schedule(Runnable command) { if (command instanceof RequestTask) { schedule0(new TimeoutRequestTask(((RequestTask) command), name(), getStartTime((RequestTask) command), timeoutMillis)); } else { scheduler.schedule(command); } }
[*] target: assertFalse(flag.get())
[-] pred: org. junit. Assert. assertFalse ( flag. get ( ) )
************************************
************************************
[+] input: testCreateMappersFromController() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerExceptionMapping controller = new ControllerExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromController(controller, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
createMappersFromController(Object bean, HandlerLocator locator, HandlerResolverFactory factory) { final Map<Class<? extends Throwable>, ExceptionResolver<Throwable>> mappings = extractMappings(bean, locator, factory); return mappings.isEmpty() ? null : Collections.singletonList(new HandlerOnlyExceptionMapper(mappings, ClassUtils.getUserType(bean.getClass()))); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
************************************
[+] input: testCreateMappersFromControllerAdvice() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerAdviceExceptionMapping controller = new ControllerAdviceExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromControllerAdvice(controller, false, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
createMappersFromControllerAdvice(Object adviceBean, boolean isController, HandlerLocator locator, HandlerResolverFactory factory) { final Class<?> beanType = ClassUtils.getUserType(adviceBean); Annotation ann = AnnotationUtils.findAnyAnnotation(beanType, ControllerAdvice0.extendedClasses()); if (ann == null) { ann = AnnotationUtils.findAnnotation(beanType, ControllerAdvice0.shadedClass()); }  ControllerAdvice0 controllerAdvice = ControllerAdvice0.fromShade(ann); if (controllerAdvice == null) { return Collections.emptyList(); } final Map<Class<? extends Throwable>, ExceptionResolver<Throwable>> mappings = extractMappings(adviceBean, locator, factory); return mappings.isEmpty() ? null : Collections.singletonList(new ControllerAdviceExceptionMapper(mappings, adviceBean, isController, controllerAdvice.basePackages(), controllerAdvice.basePackageClasses(), Arrays.asList(controllerAdvice.assignableTypes()), Arrays.asList(controllerAdvice.annotations()))); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
************************************
[+] input: NoSuchMethodException { final SpringMvcRouteHandlerLocatorFactory factory = new SpringMvcRouteHandlerLocatorFactory(); final DeployContext<RestlightOptions> ctx = mock(DeployContext.class); when(ctx.options()).thenReturn(RestlightOptionsConfigure.defaultOpts()); RouteHandlerLocator locator = factory.locator(ctx); assertNotNull(locator); assertEquals(SpringMvcRouteHandlerLocatorFactory.HandlerLocator.class, locator.getClass());  final InvocableMethod method = mock(InvocableMethod.class); when(method.beanType()).thenReturn((Class) SpringMvcRouteHandlerLocatorFactoryTest.class); when(method.method()) .thenReturn(SpringMvcRouteHandlerLocatorFactoryTest.class.getDeclaredMethod("forTest"));  final HttpResponseStatus ret = ((SpringMvcRouteHandlerLocatorFactory.HandlerLocator) locator) .getCustomResponse(method);  "<AssertPlaceHolder>"; assertEquals(HttpResponseStatus.NOT_FOUND.code(), ret.code()); assertEquals("foo", ret.reasonPhrase()); }
getCustomResponse(InvocableMethod handlerMethod) { return ResponseStatusUtils.getCustomResponse(handlerMethod.beanType(), handlerMethod.method()); }
[*] target: assertNotNull(ret)
[-] pred: org. junit. Assert. assertNotNull ( ret )
************************************
************************************
[+] input: testInvokeWithArgs() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); Map<String, String> body = new HashMap<>(16); body.put("foo", "1"); body.put("bar", "2"); final CompletableFuture<Object> ret = handler.handle(get, response, body); assertNotNull(ret); assertNotNull(ret.join()); final Map<String, Object> args = (Map<String, Object>) ret.join(); assertEquals(0, args.size());  final AsyncRequest post = MockAsyncRequest.aMockRequest() .withMethod("POST") .build(); final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(post, response1, body); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args1 = (Map<String, Object>) ret1.join(); assertEquals(body, args1); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testInvokeWithPathVariables() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withUri("/a/b") .build();  PatternsPredicate p = new PatternsPredicate(new String[]{"/{foo}/{bar}"}); p.test(get); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testInvokeWithUrlParams() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withParameter("foo", "a") .withParameter("bar", "b") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testReturnObjectAndStatus() { final WebOperation op = webOperation(c -> new WebEndpointResponse<>("foo", 404)); final OperationHandler handler = new OperationHandler(op); final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(request, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); assertEquals("foo", ret1.join()); assertEquals(404, response.status()); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testSendResult0() { final MockAsyncResponse response = MockAsyncResponse.aMockResponse() .build();  response.setStatus(200); response.sendResult(302, "Hello".getBytes(), 0, "Hello".getBytes().length); assertEquals(302, response.status());  "<AssertPlaceHolder>";  assertThrows(IllegalStateException.class, () -> response.sendResult(404, null, 0, 0, true)); }
isCommitted() { return committed == 1; }
[*] target: assertTrue(response.isCommitted())
[-] pred: org. junit. Assert. assertTrue ( response. isCommitted() )
************************************
************************************
[+] input: testRehashing() { int count = 20000;  for (int i = 0; i < count; i++) { map.put(i, "value" + i); }  for (int i = 0; i < count; i++) { assertEquals("value" + i, map.get(i)); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(count, map.size())
[-] pred: org. junit. Assert. assertEquals ( count, map. size() )
************************************
************************************
[+] input: ValidationException { for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) { // given DocumentItem doc0 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc0.setPath("Chicago/test2.pdf"); this.service.saveDocument(siteId, doc0, null);  DocumentItem doc1 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc1.setPath("abc.pdf"); this.service.saveDocument(siteId, doc1, null);  DocumentItem doc2 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc2.setPath("aaaa/test3.pdf"); this.service.saveDocument(siteId, doc2, null);  PaginationMapToken startkey = null; String folder = ""; SearchQuery q = new SearchQuery().meta(new SearchMetaCriteria().folder(folder));  // when PaginationResults<DynamicDocumentItem> results = this.searchService.search(siteId, q, null, startkey, MAX_RESULTS);  // then final int expected = 3; List<DynamicDocumentItem> list = results.getResults(); "<AssertPlaceHolder>"; assertNull(results.getToken());  int i = 0; assertNotNull(list.get(i).getDocumentId()); assertEquals("aaaa", list.get(i++).getPath()); assertEquals("Chicago", list.get(i++).getPath()); assertEquals("abc.pdf", list.get(i++).getPath()); } }
search(final String siteId, final SearchQuery query, final SearchResponseFields searchResponseFields, final PaginationMapToken token, final int maxresults) throws ValidationException {  SearchMetaCriteria meta = query.getMeta(); PaginationResults<DynamicDocumentItem> results;  if (meta != null) {  if (meta.path() != null) {  try { Map<String, String> map = this.folderIndexProcesor.getIndex(siteId, meta.path()); String documentId = map.get("documentId");  DocumentItem item = this.docService.findDocument(siteId, documentId);  DynamicDocumentItem result = new DocumentItemToDynamicDocumentItem().apply(item); results = new PaginationResults<>(Collections.singletonList(result), null);  } catch (IOException e) { results = new PaginationResults<>(Collections.emptyList(), null); }  } else { updateFolderMetaData(meta); results = searchByMeta(siteId, meta, token, maxresults); }  } else if (query.getAttribute() != null || !notNull(query.getAttributes()).isEmpty()) {  SearchAttributeCriteria search = query.getAttribute();  if (!notNull(query.getAttributes()).isEmpty()) {  Collection<String> list = query.getAttributes().stream() .map(SearchAttributeCriteria::getKey).collect(Collectors.toSet());  if (list.size() != query.getAttributes().size()) { throw new ValidationException(Collections .singletonList(new ValidationErrorImpl().error("duplicate attributes in query"))); }  search = createAttributesCriteria(siteId, query); }  results = searchByAttribute(siteId, query, search, token, maxresults);  } else {  SearchTagCriteria search = query.getTag(); results = searchByTag(siteId, query, search, token, maxresults, null); }  addResponseFields(siteId, results.getResults(), searchResponseFields); return results; }
[*] target: assertEquals(expected, list.size())
[-] pred: org. junit. Assert. assertEquals ( expected, list. size ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("fi#test.pdf", indexes.get(i).get(SK).s()); assertEquals("test.pdf", indexes.get(i).get("path").s()); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("formkiq:://sample/test.txt");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 3; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#formkiq", indexes.get(i).get(SK).s()); assertEquals("formkiq", indexes.get(i).get("path").s()); String documentId0 = indexes.get(i++).get("documentId").s();  assertEquals(site + "global#folders#" + documentId0, indexes.get(i).get(PK).s()); assertEquals("ff#sample", indexes.get(i).get(SK).s()); assertEquals("sample", indexes.get(i).get("path").s()); String documentId1 = indexes.get(i++).get("documentId").s(); assertNotEquals(documentId0, documentId1);  assertEquals(site + "global#folders#" + documentId1, indexes.get(i).get(PK).s()); assertEquals("fi#test.txt", indexes.get(i).get(SK).s()); assertEquals("test.txt", indexes.get(i).get("path").s()); String documentId2 = indexes.get(i).get("documentId").s(); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); assertNotEquals(documentId1, documentId2); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/B/");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 2; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#a", indexes.get(i).get(SK).s()); assertEquals("a", indexes.get(i).get("path").s()); String documentIdA = indexes.get(i).get("documentId").s(); assertNotNull(indexes.get(i++).get("documentId"));  assertEquals(site + "global#folders#" + documentIdA, indexes.get(i).get(PK).s()); assertEquals("fi#b", indexes.get(i).get(SK).s()); assertEquals("B", indexes.get(i).get("path").s()); assertNotNull(indexes.get(i++).get("documentId")); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  String site = siteId != null ? siteId + "/" : "";  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  Map<String, AttributeValue> map = indexes.get(0); assertFalse(dbService.exists(map.get(PK), map.get(SK))); verifyIndex(map, site + "global#folders#", "fi#test.pdf", "test.pdf", false); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: testGetFolderByDocumentId01() { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/test.pdf");  List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item); assertEquals(2, indexes.size()); dbService.putItems(indexes);  // when FolderIndexRecord folder = index.getFolderByDocumentId(siteId, indexes.get(0).get("documentId").s()); FolderIndexRecord file = index.getFolderByDocumentId(siteId, indexes.get(1).get("documentId").s());  // then "<AssertPlaceHolder>"; assertNotNull(folder); assertEquals("a", folder.path()); assertEquals("folder", folder.type()); } }
getFolderByDocumentId(String siteId, String documentId);  /** * Get Folder Index by documentIds. * * @param siteId {@link String}
[*] target: assertNull(file)
[-] pred: org. junit. Assert. assertNull ( file )
************************************
************************************
[+] input: Exception { // given String siteId = null; String oldDocumentId = "acd4be1b-9466-4dcd-b8b8-e5b19135b460"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, "karate", MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  documents = service.searchFulltext(siteId, "test.pdf", MAX); assertEquals(1, documents.size());  documents = service.searchFulltext(siteId, "bleh.pdf", MAX); assertEquals(0, documents.size());  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: Exception { // given String siteId = "5da6c0ef-20ff-45d1-8c08-d5fb0cfcf9b4"; String oldDocumentId = "666b7588-fc01-4ed3-8b3d-3e8d13264997"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert_siteId.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then String text = "9e803220-127e-45d9-98c6-7b8430812cb5"; List<String> documents = service.searchFulltext(siteId, text, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: Exception { // given String siteId = null; String documentId = "0a5f8534-4c27-4fb3-b50f-09015dd96927";  Map<String, Object> map = loadRequest("/insert_subdocument.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>";  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(0, syncs.getResults().size()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(0, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 0, documents. size ( ) )
************************************
************************************
[+] input: Exception { // given String siteId = null; String documentId = "3dbc3319-6ef4-402a-a46c-a87a7ce05a73";  Map<String, Object> map = loadRequest("/insert_subdocument01.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size()); assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("System", syncs.getResults().get(0).getUserId()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: Exception { KnownApplicationImpl app = new KnownApplicationImpl("quattro-1", "Quattro"); app.setAliases(List.of("q2")); knownApplicationRepository.save(app).get();  GalapagosEventManagerMock eventManagerMock = new GalapagosEventManagerMock();  NamingService namingService = buildNamingService();  ApplicationsServiceImpl applicationServiceImpl = new ApplicationsServiceImpl(kafkaClusters, mock(CurrentUserService.class), mock(TimeService.class), namingService, eventManagerMock);  applicationServiceImpl .registerApplicationOnEnvironment("test", "quattro-1", new JSONObject(), new ByteArrayOutputStream()) .get();  List<InvocationOnMock> invs = eventManagerMock.getSinkInvocations(); "<AssertPlaceHolder>"; assertEquals("handleApplicationRegistered", invs.get(0).getMethod().getName()); }
registerApplicationOnEnvironment(String environmentId, String applicationId, JSONObject registerParams, OutputStream outputStreamForSecret) { KafkaAuthenticationModule authModule = kafkaClusters.getAuthenticationModule(environmentId).orElse(null); if (authModule == null) { return unknownEnvironment(environmentId); }  KafkaCluster kafkaCluster = kafkaClusters.getEnvironment(environmentId).orElse(null); if (kafkaCluster == null) { return unknownEnvironment(environmentId); }  KnownApplication knownApplication = getKnownApplication(applicationId).orElse(null); if (knownApplication == null) { return unknownApplication(applicationId); }  String applicationName = namingService.normalize(knownApplication.getName());  ApplicationMetadata existing = getApplicationMetadata(environmentId, applicationId).orElse(null); CompletableFuture<CreateAuthenticationResult> updateOrCreateFuture = null;  if (existing != null) { String json = existing.getAuthenticationJson(); if (!ObjectUtils.isEmpty(json)) { updateOrCreateFuture = authModule.updateApplicationAuthentication(applicationId, applicationName, registerParams, new JSONObject(json)); } } if (updateOrCreateFuture == null) { updateOrCreateFuture = authModule.createApplicationAuthentication(applicationId, applicationName, registerParams); }  GalapagosEventSink eventSink = eventManager.newEventSink(kafkaCluster);  JSONObject oldAuthentication = existing != null && StringUtils.hasLength(existing.getAuthenticationJson()) ? new JSONObject(existing.getAuthenticationJson()) : new JSONObject();  return updateOrCreateFuture .thenCompose(result -> updateApplicationMetadata(kafkaCluster, knownApplication, existing, result) .thenCompose(meta -> futureWrite(outputStreamForSecret, result.getPrivateAuthenticationData()) .thenApply(o -> meta))) .thenCompose(meta -> { if (existing != null) { return eventSink.handleApplicationAuthenticationChanged(meta, oldAuthentication, new JSONObject(meta.getAuthenticationJson())).thenApply(o -> meta); } return eventSink.handleApplicationRegistered(meta).thenApply(o -> meta); }); }
[*] target: assertEquals(1, invs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, invs. size ( ) )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .withRequestBody( new JsonWithPropertiesPattern(Map.of("display_name", "myaccount", "description", "mydesc"))) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value())));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", false);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>";  assertEquals("Created Service Account.", spec.getDescription()); assertEquals("CREATED_service_account", spec.getDisplayName()); assertEquals("sa-xy123", spec.getResourceId()); assertNull(spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value()))); wireMock.register(authenticatedEndpoint("/service_accounts") .willReturn(okForPlainJson(readTestResource("ccloud/service-account-mapping.json"))));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", true);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>"; assertEquals("123456", spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); wireMock.verifyThat(1, requestedFor(HttpMethod.GET.name(), urlPathEqualTo("/service_accounts"))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: testTopicsByType() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicType topicType = TopicType.EVENTS;  TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setType(topicType); topicMetadata.setName("test-topic"); topicMetadata.setOwnerApplicationId("owner-app"); topicMetadata.setProducers(List.of("producer-app")); topicMetadata.setEolDate(LocalDate.parse("2024-01-01")); topicMetadata.setDeprecationText("Deprecation notice"); GraphQLContext context = GraphQLContext.newContext().build();  when(topicService.listTopics(environmentId)).thenReturn(List.of(topicMetadata)); List<TopicMetadata> topics = graphqlController.topicsByType(environmentId, topicType, context);  "<AssertPlaceHolder>"; assertEquals(1, topics.size()); TopicMetadata topic = topics.get(0); assertEquals("test-topic", topic.getName()); assertEquals(TopicType.EVENTS, topic.getType()); assertEquals("owner-app", topic.getOwnerApplicationId()); assertNotNull(topic.getProducers()); assertNotNull(topic.getEolDate()); assertEquals("Deprecation notice", topic.getDeprecationText()); }
topicsByType(@Argument String environmentId, @Argument TopicType topicType, GraphQLContext graphQLContext) { if (environmentId == null || topicType == null) { throw new IllegalArgumentException( "The environmentId and topicType parameters are required and cannot be null."); } graphQLContext.put("environmentId", environmentId); return topicService.listTopics(environmentId).stream().filter(m -> m.getType().equals(topicType)) .collect(Collectors.toList()); }
[*] target: assertNotNull(topics)
[-] pred: org. junit. Assert. assertNotNull ( topics )
************************************
************************************
[+] input: testGetSubscriptions() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setName("test-topic"); SubscriptionMetadata subscriptionMetadata = new SubscriptionMetadata(); subscriptionMetadata.setId("1"); subscriptionMetadata.setClientApplicationId("client-app"); subscriptionMetadata.setDescription("Deprecation notice");  when(subscriptionService.getSubscriptionsForTopic(environmentId, "test-topic", false)) .thenReturn(List.of(subscriptionMetadata)); List<SubscriptionMetadata> subscriptions = graphqlController.getSubscriptions(environmentId, topicMetadata);  "<AssertPlaceHolder>"; assertEquals(1, subscriptions.size()); assertEquals("1", subscriptions.get(0).getId()); assertEquals("client-app", subscriptions.get(0).getClientApplicationId()); assertEquals("Deprecation notice", subscriptions.get(0).getDescription()); }
getSubscriptions(@ContextValue(name = "environmentId") String environmentId, TopicMetadata topic) { return subscriptionService.getSubscriptionsForTopic(environmentId, topic.getName(), false); }
[*] target: assertNotNull(subscriptions)
[-] pred: org. junit. Assert. assertNotNull ( subscriptions )
************************************
************************************
[+] input: testGetDevelopers() { assertNotNull(graphqlController);  KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name");  ApplicationOwnerRequest ownerRequest1 = new ApplicationOwnerRequest(); ownerRequest1.setApplicationId("app-id"); ownerRequest1.setUserName("developer1"); ownerRequest1.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest2 = new ApplicationOwnerRequest(); ownerRequest2.setApplicationId("app-id"); ownerRequest2.setUserName("developer2"); ownerRequest2.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest3 = new ApplicationOwnerRequest(); ownerRequest3.setApplicationId("app-id"); ownerRequest3.setUserName("developer3"); ownerRequest3.setState(RequestState.REJECTED); ApplicationOwnerRequest ownerRequest4 = new ApplicationOwnerRequest(); ownerRequest4.setApplicationId("application-id"); ownerRequest4.setUserName("developer4"); ownerRequest4.setState(RequestState.APPROVED);  when(applicationsService.getAllApplicationOwnerRequests()) .thenReturn(List.of(ownerRequest1, ownerRequest2, ownerRequest3, ownerRequest4)); List<String> developers = graphqlController.getDevelopers(app);  "<AssertPlaceHolder>"; assertEquals(2, developers.size()); assertEquals("developer1", developers.get(0)); assertEquals("developer2", developers.get(1)); }
getDevelopers(KnownApplication application) { List<ApplicationOwnerRequest> allOwnerRequests = applicationsService.getAllApplicationOwnerRequests(); return allOwnerRequests.stream() .filter(request -> request.getApplicationId().equals(application.getId()) && request.getState().equals(RequestState.APPROVED)) .map(ApplicationOwnerRequest::getUserName).collect(Collectors.toList()); }
[*] target: assertNotNull(developers)
[-] pred: org. junit. Assert. assertNotNull ( developers )
************************************
************************************
[+] input: testGetAuthenticationInfo() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson("{"auth": "info"}");  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; assertEquals("{"auth": "info"}", authInfo); }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNotNull(authInfo)
[-] pred: org. junit. Assert. assertNotNull ( authInfo )
************************************
************************************
[+] input: testGetAuthenticationInfoWithNull() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson(null);  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNull(authInfo)
[-] pred: org. junit. Assert. assertNull ( authInfo )
************************************
************************************
[+] input: testCustomLinks() { List<CustomLinkConfig> links = testController.getCustomLinks(); "<AssertPlaceHolder>";  for (CustomLinkConfig link : links) { assertNotNull(link.getId());  assertNotNull(link.getHref()); assertFalse(link.getHref().isBlank());  assertNotNull(link.getLabel()); assertFalse(link.getLabel().isBlank());  assertNotNull(link.getLinkType()); } }
getCustomLinks() { return customLinksConfig.getLinks(); }
[*] target: assertNotNull(links)
[-] pred: org. junit. Assert. assertNotNull ( links )
************************************
************************************
[+] input: testKafkaDoc() { List<KafkaConfigDescriptionDto> result = new UISupportController(null, null, null, null, null, null, null) .getSupportedKafkaConfigs(); "<AssertPlaceHolder>"; assertTrue(result.size() > 10); assertTrue(result.stream().filter(d -> d.getConfigDescription().length() > 20).count() > 10); }
getSupportedKafkaConfigs() { return KafkaTopicConfigHelper.getConfigKeysAndDescription().entrySet().stream() .map(entry -> new KafkaConfigDescriptionDto(entry.getKey(), entry.getValue())) .collect(Collectors.toList()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { S3ConfigSourceBuilder builder = S3ConfigSourceBuilder.builder(); builder.setS3(s3Client); builder.setBucketName("testBucket"); builder.setKeyName("testKey");  assertEquals(s3Client, builder.getS3()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testKey", builder.getKeyName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  S3ConfigSource s3ConfigSource = (S3ConfigSource) configSourcePackage.getConfigSource(); assertTrue(s3ConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new S3ConfigSource(s3, bucketName, keyName)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: GestaltException { BlobConfigSourceBuilder builder = BlobConfigSourceBuilder.builder() .setBlobClient(blobClient) .setBlobName("testBlob.properties") .setContainerName("testContainer");  when(blobClient.getBlobName()).thenReturn("testBlob.properties");   ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  BlobConfigSource blobConfigSource = (BlobConfigSource) configSourcePackage.getConfigSource(); assertTrue(blobConfigSource.hasStream()); assertEquals("properties", blobConfigSource.format()); }
build() throws GestaltException { if (blobClient == null) { Objects.requireNonNull(endpoint, "Must provided either a BlobClient or a valid endpoint"); Objects.requireNonNull(blobName, "Must provided either a BlobClient or a valid blobName"); Objects.requireNonNull(containerName, "Must provided either a BlobClient or a valid containerName");  BlobClientBuilder blobClientBuilder = new BlobClientBuilder() .endpoint(endpoint) .blobName(blobName) .containerName(containerName);  if (credential != null) { blobClientBuilder.credential(credential); }  return buildPackage(new BlobConfigSource(blobClientBuilder.buildClient())); } else { return buildPackage(new BlobConfigSource(blobClient)); } }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: rootsToSearchNone() { var resolution = new EqualTagsWithDefaultTagResolutionStrategy();  var roots = new LinkedHashMap<Tags, ConfigNode>(); var foundNodes = resolution.rootsToSearch(roots, Tags.of());  Assertions.assertEquals(0, foundNodes.size());  // search for dev foundNodes = resolution.rootsToSearch(roots, Tags.environment("dev"));  Assertions."<AssertPlaceHolder>"; }
rootsToSearch(LinkedHashMap<Tags, ConfigNode> roots, Tags tags) { List<GResultOf<ConfigNode>> rootsToSearch = new ArrayList<>();  // if the roots contain the empty tags, add the empty tags as a fallback. if (roots.containsKey(Tags.of())) { rootsToSearch.add(GResultOf.result(roots.get(Tags.of()))); }  // if the tags aren't the empty tags, and if this root contains the tags, add them to the roots to search. if (!Tags.of().equals(tags) && roots.containsKey(tags)) { rootsToSearch.add(GResultOf.result(roots.get(tags))); }  return rootsToSearch; }
[*] target: assertEquals(0, foundNodes.size())
[-] pred: org. junit. Assert. assertEquals ( 0, foundNodes. size ( ) )
************************************
************************************
[+] input: GestaltException { ClassPathConfigSource classPathConfigSource = new ClassPathConfigSource("test.properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, classPathConfigSource::loadList); }
hasList() { return false; }
[*] target: assertFalse(classPathConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( classPathConfigSource. hasList() )
************************************
************************************
[+] input: GestaltException { String config = "db.port = 1234\ndb.password = password\ndb.user = notroot"; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  assertNotNull(builder.getConfig()); assertEquals(format, builder.getFormat()); ConfigSourcePackage configSourcePackage = builder.build();  "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new InputStreamConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new InputStreamConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() { return config; }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
hasList() { return false; }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
************************************
[+] input: GestaltException { // Arrange Map<String, String> customConfig = new HashMap<>(); customConfig.put("db.port", "1234"); customConfig.put("db.password", "password"); customConfig.put("db.user", "notroot");  MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder(); builder.setCustomConfig(customConfig);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertTrue(configSource.hasList()); assertEquals(3, configSource.loadList().size()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: addCustomConfig() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234") .addCustomConfig("db.password", "password") .addCustomConfig("db.user", "notroot");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(3, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); assertEquals("password", customConfig.get("db.password")); assertEquals("notroot", customConfig.get("db.user")); }
getCustomConfig() { return customConfig; }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
************************************
[+] input: addCustomConfigNullMap() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(1, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); }
getCustomConfig() { return customConfig; }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
************************************
[+] input: GestaltException { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertNotNull(configSource.hasList()); assertTrue(configSource.loadList().isEmpty()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  StringConfigSourceBuilder builder = StringConfigSourceBuilder.builder(); builder.setConfig(config) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  StringConfigSource stringConfigSource = (StringConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new StringConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test=abc", "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() { return new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8)); }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test", "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
hasList() { return false; }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
************************************
[+] input: GestaltException { URLConfigSource fileConfigSource = new URLConfigSource(testURL);  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, fileConfigSource::loadList); }
hasList() { return false; }
[*] target: assertFalse(fileConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( fileConfigSource. hasList() )
************************************
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  assertEquals(storage, builder.getStorage()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testObject", builder.getObjectName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  GCSConfigSource gcsConfigSource = (GCSConfigSource) configSourcePackage.getConfigSource(); assertTrue(gcsConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new GCSConfigSource(storage, bucketName, objectName, tags)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: IOException {  final File uploadFile = new File(UPLOAD_FILE_NAME); byte[] bytes = Files.readAllBytes(uploadFile.toPath());  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenReturn(bytes);  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() throws GestaltException { try { Blob blob = storage.get(BlobId.of(bucketName, objectName));  byte[] objectBytes = blob.getContent(); return new ByteArrayInputStream(objectBytes);  } catch (StorageException e) { throw new GestaltException("Exception loading Google Cloud Storage object: " + objectName + ", bucket: " + bucketName + ", with error:" + e.getMessage(), e); } }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream ( ) )
************************************
************************************
[+] input: GestaltException {  final File uploadFile = new File(UPLOAD_FILE_NAME);  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenThrow(new StorageException(504, "bad data"));  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions."<AssertPlaceHolder>"; GestaltException exception = Assertions.assertThrows(GestaltException.class, source::loadStream); Assertions.assertEquals("Exception loading Google Cloud Storage " + "object: default.properties, bucket: testbucket, with error:bad data", exception.getMessage()); }
hasStream() { return true; }
[*] target: assertTrue(source.hasStream())
[-] pred: org. junit. Assert. assertTrue ( source. hasStream ( ) )
************************************
************************************
[+] input: getList_dataFieldExists_returnsList() { GraphQLResponse response = constructResponse("{ "data": { "field": ["value"] } }"); List<String> values = response.getList("field", String.class); "<AssertPlaceHolder>"; assertEquals("value", values.get(0)); }
getList(String fieldName, Class<T> type) { if (data.hasNonNull(fieldName)) { return convertList(data.get(fieldName), type); } return emptyList(); }
[*] target: assertEquals(1, values.size())
[-] pred: org. junit. Assert. assertEquals ( 1, values. size ( ) )
************************************
************************************
[+] input: listSucceeds() { Flux<Simple> response = graphqlClient.flux("query-list.graphql", Simple.class); List<Simple> list = response.collectList().block(); "<AssertPlaceHolder>"; assertEquals(1, list.size()); }
flux(String resource, Class<T> returnType);
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
************************************
[+] input: getVersion() { String version = sdkOptions.getVersion(); "<AssertPlaceHolder>"; String[] versionParts = version.split("\\."); assertEquals(3, versionParts.length); }
getVersion() { int buildVersion = getHcnetsdk().NET_DVR_GetSDKBuildVersion(); return (buildVersion >> 24) + "." + (buildVersion << 8 >> 24) + "." + (buildVersion << 16 >> 16); }
[*] target: assertNotNull(version)
[-] pred: org. junit. Assert. assertNotNull ( version )
************************************
************************************
[+] input: DefaultStringsTest() { final SimpleRunConfig config = new SimpleRunConfig(new String[0]);  assertThat(config.getNumOfThreads(), is(4)); assertThat(config.getAllocRateInMbPerSecond(), is(1024L)); assertThat(config.getDurationInSecond(), is(60)); assertThat(config.getMaxObjectSize(), is(1024)); assertThat(config.getMinObjectSize(), is(128)); assertThat(config.getHeapSizeInMb(), is(1024)); assertThat(config.getLongLivedInMb(), is(64)); assertThat(config.getMidAgedInMb(), is(64)); assertThat(config.getPruneRatio(), is(50)); assertThat(config.getReshuffleRatio(), is(100)); assertThat(config.getLogFile(), is("output.csv")); "<AssertPlaceHolder>"; }
isUseCompressedOops() { return useCompressedOops; }
[*] target: assertTrue(config.isUseCompressedOops())
[-] pred: org. junit. Assert. assertTrue ( config. isUseCompressedOops() )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenNullLinkHeader() { BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder() .jobs(List.of(testJob)) .author(BuildKiteBuildInfo.Author.builder().name("xx").build()) .build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenValidLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedPageLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: IOException { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); ResponseEntity<List<BuildKitePipelineDTO>> responseEntity = getBuildKitepipelineResponseEntity(httpHeaders); when(buildKiteFeignClient.getPipelineInfo(MOCK_TOKEN, TEST_ORG_ID, "1", "100")).thenReturn(responseEntity);  var pageStepsInfoDto = cachePageService.getPipelineInfoList(TEST_ORG_ID, MOCK_TOKEN, "1", "100");  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
getPipelineInfoList(String orgSlug, String buildKiteToken, String page, String perPage) { var pipelineInfoResponse = buildKiteFeignClient.getPipelineInfo(buildKiteToken, orgSlug, page, perPage); log.info("Successfully get paginated pipeline info pagination info, orgSlug: {}, page:{}", orgSlug, 1);  int totalPage = parseTotalPage(pipelineInfoResponse.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage);  return PageBuildKitePipelineInfoDTO.builder() .firstPageInfo(pipelineInfoResponse.getBody()) .totalPage(totalPage) .build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: convert() { // given final BigDecimalConverter converter = new BigDecimalConverter(); final String rawValue = "1.2";  // when final BigDecimal value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("1.2", value.toString()); }
convert(final String value) throws IllegalArgumentException { return new BigDecimal(value); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: convert() { // given final UriConverter converter = new UriConverter(); final String rawValue = "http://example.net";  // when final URI value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
convert(final String value) throws IllegalArgumentException { try { return new URI(value); } catch (URISyntaxException e) { throw new IllegalArgumentException("Value '" + value + "' is not a valid URI", e); } }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: convert() { // given final UrlConverter converter = new UrlConverter(); final String rawValue = "http://example.net";  // when final URL value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
convert(final String value) throws IllegalArgumentException { if (value == null) { throw new NullPointerException("null can not be converted"); } try { return new URL(value); } catch (MalformedURLException e) { throw new IllegalArgumentException("Value '" + value + "' is not a valid URL", e); } }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testInvalid() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = "1"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("1", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testInvalid() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = "12345"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("12345", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testInvalid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testInvalid() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = "no-number"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("no-number", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testGenCronTrigger() { // normal ScheduleInfo scheduleInfo = genDefaultScheduleInfo(); JobDetail jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  Trigger trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); assertNotNull(trigger);  TriggerKey triggerKey = trigger.getKey(); assertNotNull(triggerKey); String identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  ScheduleBuilder<? extends Trigger> scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(SimpleScheduleBuilder.class, scheduleBuilder);  Date startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  Date endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  // cron scheduleInfo = genDefaultCronScheduleInfo(); jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); "<AssertPlaceHolder>";  triggerKey = trigger.getKey(); assertNotNull(triggerKey); identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(CronScheduleBuilder.class, scheduleBuilder);  startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  }
genQuartzTrigger(JobDetail jobDetail, ScheduleInfo scheduleInfo) { String key = jobDetail.getKey().getName(); Timestamp startTime = scheduleInfo.getStartTime(); Timestamp endTime = scheduleInfo.getEndTime(); int scheduleType = scheduleInfo.getScheduleType(); ScheduleType type = ScheduleType.fromCode(scheduleType); if (type == null) { throw new QuartzScheduleException("Invalid schedule type: " + scheduleType); } LOGGER.info("Creating quartz trigger for key : {}, startTime : {}, endTime : {}, scheduleTYpe : {}, " + "scheduleUnit : {}, scheduleInterval : {}, crontabExpression : {}", key, startTime, endTime, type.name(), scheduleInfo.getScheduleUnit(), scheduleInfo.getScheduleInterval(), scheduleInfo.getCrontabExpression()); switch (type) { case NORMAL: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genSimpleQuartzScheduleBuilder(scheduleInfo.getScheduleInterval(), scheduleInfo.getScheduleUnit())) .forJob(jobDetail).build(); case CRONTAB: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genCronQuartzScheduleBuilder(scheduleInfo.getCrontabExpression())) .forJob(jobDetail).build(); default: throw new QuartzScheduleException("Unknown schedule type: " + scheduleType); } }
[*] target: assertNotNull(trigger)
[-] pred: org. junit. Assert. assertNotNull ( trigger )
************************************
************************************
[+] input: testGetKafkaLatestMessage_1() { addRecord(Collections.singletonList("inlong")); QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("inlong", messages.get(0).getBody()); }
getLatestMessage(Consumer<byte[], byte[]> consumer, String topicName, InlongStreamInfo streamInfo, QueryMessageRequest request) { List<BriefMQMessage> messageList = new ArrayList<>(); Integer messageCount = request.getMessageCount(); try { List<PartitionInfo> partitionInfoList = consumer.partitionsFor(topicName); List<TopicPartition> topicPartitionList = partitionInfoList.stream() .map(topicPartition -> new TopicPartition(topicPartition.topic(), topicPartition.partition())) .collect(Collectors.toList());  Map<TopicPartition, Long> beginningTopicPartitionList = consumer.beginningOffsets(topicPartitionList); Map<TopicPartition, Long> endTopicPartitionList = consumer.endOffsets(topicPartitionList);  int count = (int) Math.ceil((double) messageCount / topicPartitionList.size()); Map<TopicPartition, Long> expectedOffsetMap = beginningTopicPartitionList.entrySet() .stream() .map(entry -> { long beginningOffset = entry.getValue(); long endOffset = endTopicPartitionList.getOrDefault(entry.getKey(), beginningOffset); Long offset = (endOffset - beginningOffset) >= count ? (endOffset - count) : beginningOffset; return Pair.of(entry.getKey(), offset); }).collect(Collectors.toMap(Pair::getKey, Pair::getValue));  consumer.assign(topicPartitionList); expectedOffsetMap.forEach(consumer::seek);  int index = 0; ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord<byte[], byte[]> record : records) { Map<String, String> headers = new HashMap<>(); for (Header header : record.headers()) { headers.put(header.key(), new String(header.value(), StandardCharsets.UTF_8)); }  MessageWrapType messageWrapType = MessageWrapType.forType(streamInfo.getWrapType()); if (headers.get(InlongConstants.MSG_ENCODE_VER) != null) { messageWrapType = MessageWrapType.valueOf(Integer.parseInt(headers.get(InlongConstants.MSG_ENCODE_VER))); } DeserializeOperator deserializeOperator = deserializeOperatorFactory.getInstance(messageWrapType); deserializeOperator.decodeMsg(streamInfo, messageList, record.value(), headers, index, request); if (messageList.size() >= messageCount) { break; } } } catch (Exception e) { String errMsg = "decode msg error: "; LOGGER.error(errMsg, e); throw new BusinessException(errMsg + e.getMessage()); } finally { consumer.close(); }  LOGGER.debug("success query messages for topic={}, size={}, returned size={}", topicName, messageList.size(), messageCount); // only return a list of messages of the specified count int fromIndex = (messageList.size() > messageCount) ? (messageList.size() - messageCount) : 0; List<BriefMQMessage> resultList = messageList.subList(fromIndex, messageList.size()); for (int i = 0; i < resultList.size(); i++) { BriefMQMessage message = resultList.get(i); message.setId(i + 1); }  return resultList; }
[*] target: assertEquals(1, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 1, messages. size ( ) )
************************************
************************************
[+] input: testSaveAndDelete() { Integer id = this.saveSource(); Assertions.assertNotNull(id);  boolean result = sourceService.delete(id, GLOBAL_OPERATOR); Assertions."<AssertPlaceHolder>"; }
delete(Integer id, String operator);  /** * Force deletes the stream source by groupId and streamId * * @param groupId The belongs group id. * @param streamId The belongs stream id. * @param operator Operator's name * @return Whether succeed */ Boolean forceDelete(String groupId, String streamId, String operator);  /** * Delete the stream source by the given id and source type. * * @param id The primary key of the source. * @param operator Operator's name * @return Whether succeed */ Boolean restart(Integer id, String operator);  /** * Delete the stream source by the given id and source type. * * @param id The primary key of the source. * @param operator Operator's name * @return Whether succeed */ Boolean stop(Integer id, String operator);  /** * Logically delete stream source with the given conditions. * * @param groupId Inlong group id to which the data source belongs. * @param streamId Inlong stream id to which the data source belongs. * @param operator Operator's name * @return Whether succeed. */ Boolean logicDeleteAll(String groupId, String streamId, String operator);  /** * Physically delete stream source with the given conditions. * * @param groupId Inlong group id. * @param streamId Inlong stream id. * @param operator Operator's name * @return Whether succeed. */ Boolean deleteAll(String groupId, String streamId, String operator);  /** * According to the inlong stream id, query the list of source types owned by it. * * @param groupId Inlong group id. * @param streamId Inlong stream id. * @return List of source types. */ List<String> getSourceTypeList(String groupId, String streamId);  /** * Save the information modified when the approval is passed. * * @param operator Operator's name * @return Whether succeed. */ default Boolean updateAfterApprove(String operator) { return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception {  final String uniqueInstanceKey = String.valueOf(instanceCount.getAndIncrement()); final String[] customAuthArgs = new String[]{ uniqueInstanceKey, "arg1", "arg2" }; final String serializedArgList = StringUtils.join(customAuthArgs,','); final HttpClientConfigCallback hccc = authTestBase( ImmutableMap.<String, String>builder(). put("index." + INDEX_NAME + ".elasticsearch.interface", "REST_CLIENT"). put("index." + INDEX_NAME + ".elasticsearch.http.auth.type", HttpAuthTypes.CUSTOM.toString()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-class", TestCustomAuthenticator.class.getName()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-args", serializedArgList). build() );  verify(restClientSetup).getCustomAuthenticator( eq(TestCustomAuthenticator.class.getName()), eq(customAuthArgs));  TestCustomAuthenticator customAuth = TestCustomAuthenticator.instanceMap.get(uniqueInstanceKey); "<AssertPlaceHolder>";  // authenticator has been instantiated, verifying it has been called assertEquals(1, customAuth.numInitCalls);  // verifying that the custom callback is in the chain final HttpAsyncClientBuilder hacb = mock(HttpAsyncClientBuilder.class); hccc.customizeHttpClient(hacb);  assertEquals(1, customAuth.customizeHttpClientHistory.size()); assertSame(hacb, customAuth.customizeHttpClientHistory.get(0)); assertArrayEquals(customAuthArgs, customAuth.args); }
getCustomAuthenticator(String authClassName, String[] authClassConstructorArgList) { Preconditions.checkArgument(StringUtils.isNotEmpty(authClassName), "Custom authenticator class name cannot be empty"); Preconditions.checkNotNull(authClassConstructorArgList, "Custom authenticator class constructor argument list cannot be null");  final RestClientAuthenticator authenticator;  try { final Class<?> c = Class.forName(authClassName); Preconditions.checkArgument(RestClientAuthenticator.class.isAssignableFrom(c), "Authenticator class " + authClassName + " must be a subclass of " + RestClientAuthenticator.class.getName()); @SuppressWarnings("unchecked") final Constructor<RestClientAuthenticator> ctr = ((Class<RestClientAuthenticator>)c).getConstructor(String[].class); authenticator = ctr.newInstance((Object)authClassConstructorArgList); } catch (Exception e) { log.error("Unable to instantiate the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to instantiate the custom authenticator", e); }  try { authenticator.init(); } catch (IOException e) { log.error("Unable to initialize the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to initialize the custom authenticator", e); }  return authenticator; }
[*] target: assertNotNull(customAuth)
[-] pred: org. junit. Assert. assertNotNull ( customAuth )
************************************
************************************
[+] input: ConfigurationException { final TinkerGraphApp app = new TinkerGraphApp(CONF_FILE); final GraphTraversalSource g = app.openGraph(); app.createSchema(); final TinkerGraph tinkerGraph = (TinkerGraph) g.getGraph(); final Set<String> vertexIndexes = tinkerGraph.getIndexedKeys(TinkerVertex.class); "<AssertPlaceHolder>"; assertEquals("name", vertexIndexes.toArray()[0]); final Set<String> edgeIndexes = tinkerGraph.getIndexedKeys(TinkerEdge.class); assertTrue(edgeIndexes.isEmpty()); }
createSchema() { LOGGER.info("creating schema"); final TinkerGraph tinkerGraph = (TinkerGraph) graph; // naive check if the schema was previously created if (!tinkerGraph.getIndexedKeys(Vertex.class).iterator().hasNext()) { tinkerGraph.createIndex("name", Vertex.class); } }
[*] target: assertEquals(1, vertexIndexes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, vertexIndexes. size ( ) )
************************************
************************************
[+] input: testSerializationMixture() { serialize.registerClass(1,TClass1.class, new TClass1Serializer());  for (int t = 0; t < 1000; t++) { DataOutput out = serialize.getDataOutput(128); int num = random.nextInt(100)+1; final List<SerialEntry> entries = new ArrayList<>(num); for (int i = 0; i < num; i++) { Map.Entry<Class,Factory> type = Iterables.get(TYPES.entrySet(),random.nextInt(TYPES.size())); Object element = type.getValue().newInstance(); boolean notNull = true; if (random.nextDouble()<0.5) { notNull = false; if (random.nextDouble()<0.2) element=null; } entries.add(new SerialEntry(element,type.getKey(),notNull)); if (notNull) out.writeObjectNotNull(element); else out.writeObject(element,type.getKey()); } StaticBuffer sb = out.getStaticBuffer(); ReadBuffer in = sb.asReadBuffer(); for (SerialEntry entry : entries) { Object read; if (entry.notNull) read = serialize.readObjectNotNull(in,entry.clazz); else read = serialize.readObject(in,entry.clazz); if (entry.object==null) "<AssertPlaceHolder>"; else if (entry.clazz.isArray()) { assertEquals(Array.getLength(entry.object),Array.getLength(read)); for (int i = 0; i < Array.getLength(read); i++) { assertEquals(Array.get(entry.object,i),Array.get(read,i)); } } else assertEquals(entry.object,read); } } }
readObject(ScanBuffer buffer, Class<T> type);
[*] target: assertNull(read)
[-] pred: org. junit. Assert. assertNull ( read )
************************************
************************************
[+] input: testSearchExistingFlightByFullNumber() { flightService.registerFlight("OL234"); flightService.registerFlight("KM23234"); flightService.registerFlight("LTE114"); flightService.registerFlight("BRT14");  List<String> foundFlights = flightService.searchFlights("LTE114");  "<AssertPlaceHolder>"; assertEquals("LTE114", foundFlights.get(0)); }
searchFlights(String query) { throw new ExerciseNotCompletedException(); }
[*] target: assertEquals(1, foundFlights.size())
[-] pred: org. junit. Assert. assertEquals ( 1, foundFlights. size ( ) )
************************************
************************************
[+] input: testToBytes() { byte[] expectedBytes = new byte[]{81, 6, -4, -102, -68, -126, 55, 85, -127, 54, -46, -119}; Xid id = new Xid(expectedBytes);  assertArrayEquals(expectedBytes, id.toByteArray());  ByteBuffer buffer = ByteBuffer.allocate(12); id.putToByteBuffer(buffer); "<AssertPlaceHolder>"; }
putToByteBuffer(final ByteBuffer buffer) { paramNotNull("buffer", buffer); isTrue("buffer.remaining() >=12", buffer.remaining() >= ID_LENGTH);  buffer.put(int3(timestamp)); buffer.put(int2(timestamp)); buffer.put(int1(timestamp)); buffer.put(int0(timestamp)); buffer.put(int2(randomValue1)); buffer.put(int1(randomValue1)); buffer.put(int0(randomValue1)); buffer.put(short1(randomValue2)); buffer.put(short0(randomValue2)); buffer.put(int2(counter)); buffer.put(int1(counter)); buffer.put(int0(counter)); }
[*] target: assertArrayEquals(expectedBytes, buffer.array())
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, buffer. array ( ) )
************************************
************************************
[+] input: instantiateViaServiceLoaderApi() { final ServiceLoader<DataCaptureConfig> dataCaptureConfigs = ServiceLoader.load(DataCaptureConfig.class); final Iterator<DataCaptureConfig> iterator = dataCaptureConfigs.iterator(); "<AssertPlaceHolder>"; final DataCaptureConfig dataCaptureConfig = iterator.next(); assertNotNull(dataCaptureConfig); assertFalse(iterator.hasNext()); }
load(ClassLoader cl) { ServiceLoader<DataCaptureConfig> configs = ServiceLoader.load(DataCaptureConfig.class, cl); Iterator<DataCaptureConfig> iterator = configs.iterator(); if (!iterator.hasNext()) { logger.error("Failed to load data capture config"); return null; } return iterator.next(); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: shouldProperlyGetGroupsWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
getGroupList(GroupRequestArgs requestArgs);  /** * Get all the {@link GroupDiscussionInfo}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: shouldProperlyGetWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupList(GroupRequestArgs requestArgs);  /** * Get all the {@link GroupDiscussionInfo}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: shouldProperlyGetGroupsDiscWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
getGroupDiscussionList(GroupRequestArgs requestArgs);  /** * Get count of groups filtered by provided {@link GroupRequestArgs}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: shouldProperlyGetGroupDiscWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupDiscussionList(GroupRequestArgs requestArgs);  /** * Get count of groups filtered by provided {@link GroupRequestArgs}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: shouldProperlyGetGroupById() { //given Integer androidGroupId = 16;  //when GroupDiscussionInfo groupById = groupClient.getGroupById(androidGroupId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(16, groupById.getId()); Assertions.assertEquals(TECH, groupById.getType()); Assertions.assertEquals("android", groupById.getKey()); }
getGroupById(Integer id);
[*] target: assertNotNull(groupById)
[-] pred: org. junit. Assert. assertNotNull ( groupById )
************************************
************************************
[+] input: shouldProperlySendStatDTO() { //given Mockito.when(telegramUserService.findAllInActiveUsers()).thenReturn(singletonList(new TelegramUser())); TelegramUser activeUser = new TelegramUser(); activeUser.setGroupSubs(singletonList(new GroupSub())); Mockito.when(telegramUserService.findAllActiveUsers()).thenReturn(singletonList(activeUser)); GroupSub groupSub = new GroupSub(); groupSub.setTitle("group"); groupSub.setId(1); groupSub.setUsers(singletonList(new TelegramUser())); Mockito.when(groupSubService.findAll()).thenReturn(singletonList(groupSub));  //when StatisticDTO statisticDTO = statisticsService.countBotStatistic();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, statisticDTO.getActiveUserCount()); Assertions.assertEquals(1, statisticDTO.getInactiveUserCount()); Assertions.assertEquals(1.0, statisticDTO.getAverageGroupCountByUser()); Assertions.assertEquals(singletonList(new GroupStatDTO(groupSub.getId(), groupSub.getTitle(), groupSub.getUsers().size())), statisticDTO.getGroupStatDTOs()); }
countBotStatistic() { List<GroupStatDTO> groupStatDTOS = groupSubService.findAll().stream() .filter(it -> !isEmpty(it.getUsers())) .map(groupSub -> new GroupStatDTO(groupSub.getId(), groupSub.getTitle(), groupSub.getUsers().size())) .collect(Collectors.toList()); List<TelegramUser> allInActiveUsers = telegramUserService.findAllInActiveUsers(); List<TelegramUser> allActiveUsers = telegramUserService.findAllActiveUsers();  double groupsPerUser = getGroupsPerUser(allActiveUsers); return new StatisticDTO(allActiveUsers.size(), allInActiveUsers.size(), groupStatDTOS, groupsPerUser); }
[*] target: assertNotNull(statisticDTO)
[-] pred: org. junit. Assert. assertNotNull ( statisticDTO )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("permission", CommandEvent.class); SlashCommandDefinition definition = SlashCommandDefinition.build(method, validator, LOCALIZATION_FUNCTION).orElse(null);  "<AssertPlaceHolder>";  assertEquals(1, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("permission")); }
build(@NotNull Method method, @NotNull ValidatorRegistry validatorRegistry, @NotNull LocalizationFunction localizationFunction) {  if (!method.isAnnotationPresent(SlashCommand.class) || !method.getDeclaringClass().isAnnotationPresent(Interaction.class)) { return Optional.empty(); }  SlashCommand command = method.getAnnotation(SlashCommand.class); Interaction interaction = method.getDeclaringClass().getAnnotation(Interaction.class);  if (!command.isActive()) { log.debug("Command {} is set inactive. Skipping this command!", method.getName()); return Optional.empty(); }  Set<String> permissions = new HashSet<>(); if (method.isAnnotationPresent(Permissions.class)) { Permissions permission = method.getAnnotation(Permissions.class); permissions = new HashSet<>(Arrays.asList(permission.value())); }  String label = interaction.value() + " " + command.value(); while (label.contains("  ")) { label = label.replaceAll(" {2}", " "); } label = label.trim();  if (label.isEmpty()) { logError("Labels must not be empty!", method); return Optional.empty(); }  // build parameter definitions List<ParameterDefinition> parameters = new ArrayList<>(); for (Parameter parameter : method.getParameters()) { parameters.add(ParameterDefinition.build(parameter, validatorRegistry)); }  if (parameters.isEmpty()) { logError(String.format("First parameter must be of type %s!", CommandEvent.class.getSimpleName()), method); return Optional.empty(); }  // validate parameter definitions for (int i = 0; i < parameters.size(); i++) { ParameterDefinition parameter = parameters.get(i); Class<?> type = parameter.getType();  // first argument must be a CommandEvent if (i == 0) { if (!CommandEvent.class.isAssignableFrom(type)) { logError(String.format("First parameter must be of type %s!", CommandEvent.class.getSimpleName()), method); return Optional.empty(); } continue; }  // argument parsing can be skipped by using just a String array (the traditional way of command frameworks) // this means that no other parameters are allowed in this case if (type.isAssignableFrom(String[].class) && parameters.size() > 2) { logError("Additional parameters aren't allowed when using arrays!", method); return Optional.empty(); } }  Set<net.dv8tion.jda.api.Permission> enabledFor = Arrays.stream(command.enabledFor()).collect(Collectors.toSet()); if (enabledFor.size() == 1 && enabledFor.contains(net.dv8tion.jda.api.Permission.UNKNOWN)) { enabledFor.clear(); }  return Optional.of(new SlashCommandDefinition( method, command.ephemeral(), label, permissions, command.isGuildOnly(), command.isNSFW(), Command.Type.SLASH, enabledFor, command.scope(), localizationFunction, command.desc(), parameters, CooldownDefinition.build(method.getAnnotation(Cooldown.class)), false )); }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("combine", CommandEvent.class);  InteractionControllerDefinition controllerDefinition = InteractionControllerDefinition.build(controller, validators, dependencyInjector, LOCALIZATION_FUNCTION).orElse(null); assertNotNull(controllerDefinition); SlashCommandDefinition definition = controllerDefinition.getCommands().stream() .filter(it -> it.getCommandType() == Command.Type.SLASH) .map(it -> (SlashCommandDefinition) it) .filter(c -> c.getMethod().equals(method)) .findFirst().orElse(null); "<AssertPlaceHolder>";  assertEquals("super sub", definition.getName());  assertTrue(definition.hasCooldown()); assertEquals(5, definition.getCooldown().getDelay()); assertEquals(TimeUnit.DAYS, definition.getCooldown().getTimeUnit());  assertEquals(2, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("superPermission")); assertTrue(definition.getPermissions().contains("subPermission")); }
getCommands() { return commands; }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("primitives", int.class); ParameterDefinition parameter = ParameterDefinition.build(method.getParameters()[0], validatorRegistry);  assertEquals(Integer.class, parameter.getType()); "<AssertPlaceHolder>"; }
isPrimitive() { return isPrimitive; }
[*] target: assertTrue(parameter.isPrimitive())
[-] pred: org. junit. Assert. assertTrue ( parameter. isPrimitive() )
************************************
************************************
[+] input: getTemplateConfigMetadata() { ConfigMetadata templateConfig = provider.getTemplateConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云语音模版", templateConfig.getName()); }
getTemplateConfigMetadata() { return templateConfig; }
[*] target: assertNotNull(templateConfig)
[-] pred: org. junit. Assert. assertNotNull ( templateConfig )
************************************
************************************
[+] input: getNotifierConfigMetadata() { ConfigMetadata notifierConfig = provider.getNotifierConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云通知配置", notifierConfig.getName()); }
getNotifierConfigMetadata() { return notifierConfig; }
[*] target: assertNotNull(notifierConfig)
[-] pred: org. junit. Assert. assertNotNull ( notifierConfig )
************************************
************************************
[+] input: testEmailAddress() { RFC2822AddressParser.ParsedAddress address = new RFC2822AddressParser().parse("igor@jodd.org");  assertEquals(null, address.getPersonalName()); assertEquals("igor", address.getLocalPart()); assertEquals("jodd.org", address.getDomain()); assertTrue(address.isValid());  address = new RFC2822AddressParser().parse("Vladimir <djs@gmail.com>");  assertEquals("Vladimir", address.getPersonalName()); assertEquals("djs", address.getLocalPart()); assertEquals("gmail.com", address.getDomain());  "<AssertPlaceHolder>"; }
isValid() { return isValid; }
[*] target: assertTrue(address.isValid())
[-] pred: org. junit. Assert. assertTrue ( address. isValid() )
************************************
************************************
[+] input: checkClassFromExternalJar() { final JarFile actual = ClassUtil.jarFileOf(StringUtils.class);  // asserts "<AssertPlaceHolder>"; assertTrue(actual.getName().contains("junit-platform-commons")); }
jarFileOf(final Class<?> klass) { final URL url = klass.getResource( "/" + klass.getName().replace('.', '/') + ".class");  if (url == null) { return null; }  final String s = url.getFile(); final int beginIndex = s.indexOf("file:") + "file:".length(); int endIndex = s.indexOf(".jar!"); if (endIndex == -1) { return null; }  endIndex += ".jar".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, StandardCharsets.UTF_8); final File file = new File(f);  try { return file.exists() ? new JarFile(file) : null; } catch (final IOException e) { throw new IllegalStateException(e); } }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: getOptions() { String result = WalkGenerationMode.getOptions(); "<AssertPlaceHolder>"; assertFalse(result.endsWith(" ")); assertFalse(result.endsWith("|")); //System.out.println(result); }
getOptions() { String result = ""; for (WalkGenerationMode mode : WalkGenerationMode.values()) { result += mode.toString() + " | "; } result = result.substring(0, result.length() - 3); return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: convertTxt2() { File txtFile = loadFile("freude_vectors_w2v_copy.txt"); File fileToWrite = new File(VECTORS_KV_FILE_2); fileToWrite.deleteOnExit(); KvConverter.convert(txtFile, fileToWrite); File w2vFile = new File("./freude_vectors_w2v_copy.w2v"); w2vFile.deleteOnExit(); "<AssertPlaceHolder>";  // checking vocabulary assertTrue(Gensim.getInstance().isInVocabulary("schöner", fileToWrite.getAbsoluteFile()));  // checking dimension Double[] vector = Gensim.getInstance().getVector("schöner", fileToWrite.getAbsolutePath());  // checking values assertEquals(3, vector.length); assertEquals(-0.0016543772, vector[0]); assertEquals(-0.0009240248, vector[1]); assertEquals(-0.0007398839, vector[2]);  assertTrue(fileToWrite.exists()); }
convert(File txtOrw2vFile, File fileToWrite){ File w2vFile = null; if(txtOrw2vFile.getName().endsWith(".w2v")){ LOGGER.info("Recognized w2v format. Converting to kv..."); w2vFile = txtOrw2vFile; } else if(txtOrw2vFile.getName().endsWith(".txt")) { if(isW2Vformat(txtOrw2vFile)){ LOGGER.info("Provided file is likely in w2v format despite '.txt' ending. Trying to convert directly " + "to '.kv'."); w2vFile = txtOrw2vFile; } else { LOGGER.info("Recognized txt format. Will convert to w2v and then to kv."); w2vFile = new File(fileToWrite.getParentFile(), txtOrw2vFile.getName().substring(0, (int) (txtOrw2vFile.getName().length()) - 4) + ".w2v"); VectorTxtToW2v.convert(txtOrw2vFile, w2vFile); } } else { LOGGER.error("Neither .txt nor .w2v file provided (make sure you use correct file endings). ABORTING " + "program."); return; } Gensim.getInstance().convertW2vToKv(w2vFile.getAbsolutePath(), fileToWrite.getAbsolutePath()); }
[*] target: assertFalse(w2vFile.exists())
[-] pred: org. junit. Assert. assertFalse ( w2vFile. exists ( ) )
************************************
************************************
[+] input: writeReducedTextVectorFile() { String fileToWritePath = "./reduced_vocab.txt"; String vectorTxtFilePath = getPathOfResource("txtVectorFile.txt"); String entityFilePath = getPathOfResource("txtVectorFileEntities.txt");  // try error cases first VectorFileReducer.writeReducedTextVectorFile(null, null, null); VectorFileReducer.writeReducedTextVectorFile(null, fileToWritePath, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, null, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, null);  File fileToWrite = new File(fileToWritePath); assertFalse(fileToWrite.exists());  // now try the real thing: VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, entityFilePath); "<AssertPlaceHolder>"; assertTrue(getNumberOfLines(fileToWrite) <= 3);  deleteFile(fileToWrite); }
writeReducedTextVectorFile(String textVectorPath, String fileToWritePath, String entityPath) { writeReducedTextVectorFile(textVectorPath, fileToWritePath, entityPath, false); }
[*] target: assertTrue(fileToWrite.exists())
[-] pred: org. junit. Assert. assertTrue ( fileToWrite. exists ( ) )
************************************
************************************
[+] input: removeObjectTriple() { TripleDataSetMemory ds = new TripleDataSetMemory(); ds.addObjectTriple("A", "B", "C"); ds.addObjectTriple("A", "B", "D"); assertEquals(2, ds.getObjectTripleSize());  ds.removeObjectTriple(new Triple("A", "B", "D")); assertEquals(1, ds.getObjectTripleSize()); assertNull(ds.getObjectTriplesInvolvingObject("D")); assertTrue(ds.getObjectTriplesInvolvingSubject("A").contains(new Triple("A", "B", "C")) ); assertEquals(1, ds.getObjectTriplesInvolvingSubject("A").size() );  // negative test ds.removeObjectTriple(null);  // negative test 2 ds.removeObjectTriple(new Triple("A1", "B", "C")); "<AssertPlaceHolder>"; }
getObjectTripleSize() { return objectTriples.size(); }
[*] target: assertEquals(1, ds.getObjectTripleSize())
[-] pred: org. junit. Assert. assertEquals ( 1, ds. getObjectTripleSize ( ) )
************************************
************************************
[+] input: setUseHierarchicalSoftmax() { Word2VecConfiguration configuration = new Word2VecConfiguration(Word2VecType.SG); assertEquals(Word2VecConfiguration.IS_USE_HIERARCHICAL_SOFTMAX_DEFAULT, configuration.isUseHierarchicalSoftmax()); configuration.setUseHierarchicalSoftmax(true); "<AssertPlaceHolder>"; }
isUseHierarchicalSoftmax() { return isUseHierarchicalSoftmax; }
[*] target: assertTrue(configuration.isUseHierarchicalSoftmax())
[-] pred: org. junit. Assert. assertTrue ( configuration. isUseHierarchicalSoftmax ( ) )
************************************
************************************
[+] input: generateMidWalkForEntity() { try { HdtWalkGenerator parser = new HdtWalkGenerator(loadFile("swdf-2012-11-28.hdt")); String concept = "http://data.semanticweb.org/workshop/semwiki/2010/programme-committee-member";  for (int depth = 1; depth < 10; depth++) { List<String> walk1 = parser.generateMidWalkForEntity(concept, depth); "<AssertPlaceHolder>"; assertTrue(walk1.size() <= depth * 2 + 1, "The walk is supposed to have at most " + (depth * 2 + 1) + " elements. It has: " + walk1.size() + "\nWalk:\n" + walk1); assertTrue(walk1.size() >= 3, "The walk must consist of at least 3 elements. Walk:\n" + walk1);  String[] walkArray = new String[walk1.size()]; for (int i = 0; i < walkArray.length; i++) { walkArray[i] = walk1.get(i); } String hdtPath = loadFile("swdf-2012-11-28.hdt").getAbsolutePath(); try { HDT hdtDataSet = HDTManager.loadHDT(hdtPath); for (int i = 2; i < walkArray.length - 1; i += i + 2) { IteratorTripleString iterator = hdtDataSet.search(walkArray[i - 2], walkArray[i - 1], walkArray[i]); assertTrue(iterator.hasNext(), "The following triple appeared in the walk but not in the data set:\n" + walkArray[i - 2] + " " + walkArray[i - 1] + " " + walkArray[i] + "\nSentence:\n" + walk1); } } catch (NotFoundException | IOException e) { fail("Exception", e); } } } catch (IOException ioe) { LOGGER.error("HDT Init error."); fail("Init should not fail."); } }
generateMidWalkForEntity(String entity, int depth) { LinkedList<String> result = new LinkedList<>();  String nextElementPredecessor = entity; String nextElementSuccessor = entity;  // initialize result result.add(entity);  // variable to store the number of iterations performed so far int currentDepth = 0;  while (currentDepth < depth) { currentDepth++;  // randomly decide whether to use predecessors or successors int randomPickZeroOne = ThreadLocalRandom.current().nextInt(2);  if (randomPickZeroOne == 0) { // predecessor try { IteratorTripleString iterator = hdtDataSet.search("", "", nextElementPredecessor); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; while (iterator.hasNext()) { ts = iterator.next(); candidates.add(ts); }  if (candidates.size() > 0) { TripleString drawnTriple = Util.randomDrawFromSet(candidates);  // add walks from the front (walk started before entity) result.addFirst(drawnTriple.getPredicate().toString()); result.addFirst(drawnTriple.getSubject().toString()); nextElementPredecessor = drawnTriple.getSubject().toString(); }  } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a predecessor.", e); } } else { // successor try { IteratorTripleString iterator = hdtDataSet.search(nextElementSuccessor, "", ""); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; CharSequence objectCharSequence; while (iterator.hasNext()) { ts = iterator.next(); objectCharSequence = ts.getObject(); if (objectCharSequence.charAt(0) == '"') { continue; } candidates.add(ts); } if (candidates.size() > 0) { TripleString stringToAdd = Util.randomDrawFromSet(candidates);  // add next walk iteration result.addLast(stringToAdd.getPredicate().toString()); result.addLast(stringToAdd.getObject().toString()); nextElementSuccessor = stringToAdd.getObject().toString(); } } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a successor.", e); } } } return result; }
[*] target: assertNotNull(walk1)
[-] pred: org. junit. Assert. assertNotNull ( walk1 )
************************************
************************************
[+] input: generateTextWalksForEntity() { NxMemoryWalkGenerator parser = new NxMemoryWalkGenerator(); parser.setParseDatatypeProperties(true); assertTrue(parser.isParseDatatypeProperties); parser.readNtriples(loadFile("dummyGraph_with_labels.nt"));  // walk depth 8 List<String> result = parser.generateTextWalksForEntity("W", 8); "<AssertPlaceHolder>"; assertTrue(result.contains("W rdfs:label gedichte")); String expectedSentence = "W rdf:Description wer reitet so spät durch nacht"; assertTrue(result.contains(expectedSentence), "Could not find String '" + expectedSentence + "'.\n" + transformToString(result) + "\nNumber of walks: " + result.size()); assertFalse(result.contains("W rdf:Description wer reitet"));  // walk depth 4 result = parser.generateTextWalksForEntity("W", 4); assertNotNull(result); assertTrue(result.contains("W rdfs:label gedichte")); assertTrue(result.contains("W rdf:Description wer reitet")); assertFalse(result.contains("W rdf:Description wer reitet so spät durch nacht")); }
readNtriples(File fileToReadFrom) { if (!fileToReadFrom.exists()) { LOGGER.error("File does not exist. Cannot parse."); return; } if (!sanityCheck(fileToReadFrom)) { LOGGER.error("File cannot be parsed by NxParser."); return; } if (fileToReadFrom.getName().endsWith(".nt") || fileToReadFrom.getName().endsWith(".ttl") || fileToReadFrom.getName().endsWith(".nq")) { NxParser parser = new NxParser(); try { parser.parse(new InputStreamReader(new FileInputStream(fileToReadFrom), StandardCharsets.UTF_8)); String subject, predicate, object; for (Node[] nx : parser) {  if(isParseDatatypeProperties && nx[2].toString().startsWith(""")){ // the current triple is a datatype triple subject = uriShortenerFunction.apply(removeTags(nx[0].toString())); predicate = uriShortenerFunction.apply(removeTags(nx[1].toString())); object = getTextProcessingFunction().apply(nx[2].toString()); data.addDatatypeTriple(subject, predicate, object); continue; } else if (nx[2].toString().startsWith(""")) continue;  subject = uriShortenerFunction.apply(removeTags(nx[0].toString())); predicate = uriShortenerFunction.apply(removeTags(nx[1].toString())); object = uriShortenerFunction.apply(removeTags(nx[2].toString())); data.addObjectTriple(subject, predicate, object); } } catch (FileNotFoundException fnfe) { LOGGER.error("Could not find file " + fileToReadFrom.getAbsolutePath(), fnfe); } } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: should_serialize_object_and_deserialize_from_bytes() { JacksonSerializer jacksonSerializer = new JacksonSerializer(); SerializeObject serializeObject = new SerializeObject("java", "Java"); byte[] bytes = jacksonSerializer.serialize(serializeObject); assertNotEquals(bytes.length, 0); SerializeObject deserializeObject = jacksonSerializer.deserialize(bytes, SerializeObject.class); "<AssertPlaceHolder>"; }
deserialize(byte[] bytes, Class<T> clazz) { T object = null; try { object = objectMapper.readValue(bytes, clazz); } catch (IOException e) { e.printStackTrace(); } return object; }
[*] target: assertEquals(serializeObject, deserializeObject)
[-] pred: org. junit. Assert. assertEquals ( serializeObject, deserializeObject )
************************************
************************************
[+] input: ParseException { InputArguments inputArguments = new InputArguments("-i", "foo", "-o", "bar"); assertAll( () -> assertEquals(Paths.get("foo"), inputArguments.getInput()), () -> assertEquals(Paths.get("bar"), inputArguments.getOutput()), () -> "<AssertPlaceHolder>"; }
isTransparent() { return transparent; }
[*] target: assertFalse(inputArguments.isTransparent()))
[-] pred: org. junit. Assert. assertFalse ( inputArguments. isTransparent() ) )
************************************
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,01:23:45:67:8a:bc,-69,AccessPoint2,fe:dc:ba:98:76:54,-51,25.9");  Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1", location.getAccessPoints().get(0).getName()); assertEquals("01:23:45:67:8a:bc", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("fe:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
toLocation(Message message) throws KidTrackerParseException {  if (!LOCATION_TYPES.contains(message.getType())) { throw new KidTrackerParseException("Unable to parse location from message of type " + message.getType()); }  final Queue<String> parts = new LinkedList<>(Arrays.asList(message.getPayload().split(PAYLOAD_SEPARATOR)));  try { Location.LocationBuilder locationBuilder = Location.builder() .time(LocalDateTime.parse(parts.remove() + parts.remove(), TIME_FORMATTER)) .valid("A".equals(parts.poll())) .latitude(Double.parseDouble(parts.remove()) * ("N".equals(parts.poll()) ? 1 : -1)) .longitude(Double.parseDouble(parts.remove()) * ("E".equals(parts.poll()) ? 1 : -1)) .speed(Double.parseDouble(parts.remove())) .course(Double.parseDouble(parts.remove())) .altitude(Double.parseDouble(parts.remove())) .satellites(Integer.parseInt(parts.remove())) .rssi(Integer.parseInt(parts.remove())) .battery(Integer.parseInt(parts.remove())) .pedometer(Integer.parseInt(parts.remove())) .rolls(Integer.parseInt(parts.remove())) .state(new DeviceState(Long.parseLong(parts.remove(), 16)));  int baseStationsCount = Integer.parseInt(parts.remove());  locationBuilder .gsmDelay(Integer.parseInt(parts.remove())) .mcc(Integer.parseInt(parts.remove())) .mnc(Integer.parseInt(parts.remove())) .baseStations(IntStream.range(0, baseStationsCount) .mapToObj(i -> new BaseStation(Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()))) .collect(Collectors.toList()));  int accessPointsCount = Integer.parseInt(parts.remove()); locationBuilder.accessPoints(IntStream.range(0, accessPointsCount) .mapToObj(i -> { // this trick is required to handle cases where Access Point name contains commas List<String> name = new ArrayList<>(); do { name.add(parts.remove()); } while (!ValidationUtils.isValidMacAddress(parts.peek())); return new AccessPoint(String.join(PAYLOAD_SEPARATOR, name), parts.remove(), Integer.parseInt(parts.remove())); }) .collect(Collectors.toList()));  return new Temporal<>(message.getTimestamp(), locationBuilder .accuracy(Double.parseDouble(parts.remove())) .build());  } catch (Exception ex) { throw new KidTrackerParseException("Unable to parse location from message "" + message + "", not enough data", ex); } }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,2,3,1:23:45:67:a:c,-69,AccessPoint2,f:dc:ba:98:76:54,-51,25.9"); Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1,2,3", location.getAccessPoints().get(0).getName()); assertEquals("1:23:45:67:a:c", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("f:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
toLocation(Message message) throws KidTrackerParseException {  if (!LOCATION_TYPES.contains(message.getType())) { throw new KidTrackerParseException("Unable to parse location from message of type " + message.getType()); }  final Queue<String> parts = new LinkedList<>(Arrays.asList(message.getPayload().split(PAYLOAD_SEPARATOR)));  try { Location.LocationBuilder locationBuilder = Location.builder() .time(LocalDateTime.parse(parts.remove() + parts.remove(), TIME_FORMATTER)) .valid("A".equals(parts.poll())) .latitude(Double.parseDouble(parts.remove()) * ("N".equals(parts.poll()) ? 1 : -1)) .longitude(Double.parseDouble(parts.remove()) * ("E".equals(parts.poll()) ? 1 : -1)) .speed(Double.parseDouble(parts.remove())) .course(Double.parseDouble(parts.remove())) .altitude(Double.parseDouble(parts.remove())) .satellites(Integer.parseInt(parts.remove())) .rssi(Integer.parseInt(parts.remove())) .battery(Integer.parseInt(parts.remove())) .pedometer(Integer.parseInt(parts.remove())) .rolls(Integer.parseInt(parts.remove())) .state(new DeviceState(Long.parseLong(parts.remove(), 16)));  int baseStationsCount = Integer.parseInt(parts.remove());  locationBuilder .gsmDelay(Integer.parseInt(parts.remove())) .mcc(Integer.parseInt(parts.remove())) .mnc(Integer.parseInt(parts.remove())) .baseStations(IntStream.range(0, baseStationsCount) .mapToObj(i -> new BaseStation(Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()))) .collect(Collectors.toList()));  int accessPointsCount = Integer.parseInt(parts.remove()); locationBuilder.accessPoints(IntStream.range(0, accessPointsCount) .mapToObj(i -> { // this trick is required to handle cases where Access Point name contains commas List<String> name = new ArrayList<>(); do { name.add(parts.remove()); } while (!ValidationUtils.isValidMacAddress(parts.peek())); return new AccessPoint(String.join(PAYLOAD_SEPARATOR, name), parts.remove(), Integer.parseInt(parts.remove())); }) .collect(Collectors.toList()));  return new Temporal<>(message.getTimestamp(), locationBuilder .accuracy(Double.parseDouble(parts.remove())) .build());  } catch (Exception ex) { throw new KidTrackerParseException("Unable to parse location from message "" + message + "", not enough data", ex); } }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
************************************
[+] input: demoAndV2BatchIdStringFormatIsCorrect() { BatchId id = new BatchId(123, Optional.of(45)); String stringId = "123_45"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: batchIdStringFormatIsCorrect() { BatchId id = new BatchId(123); String stringId = "123"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: createAndParseToken_ok() { String username = "test"; String token = JwtUtils.createToken(username); Assertions.assertTrue(token.startsWith("Bearer")); String username_parsed = JwtUtils.parseUsername(token); Assertions."<AssertPlaceHolder>"; }
parseUsername(String token) { token = token.substring(7); SecretKey key = Keys.hmacShaKeyFor(SECRET_TOKEN.getBytes(StandardCharsets.UTF_8)); return Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token).getBody().getAudience(); }
[*] target: assertEquals(username, username_parsed)
[-] pred: org. junit. Assert. assertEquals ( username, username_parsed )
************************************
************************************
[+] input: test_update() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); assertEquals(info, refTableVersionInfo); refTableVersionInfo.setTableName("table_update"); refTableVersionRepository.update(refTableVersionInfo); RefTableVersionInfo refTableVersionInfo_update = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>"; }
findByVersionId(Long versionId) { if (Objects.isNull(versionId)) { log.debug("version id  is null"); return null; } return selectOne(ImmutableMap.of(RTVI_VERSION_ID, versionId)); }
[*] target: assertEquals(refTableVersionInfo, refTableVersionInfo_update)
[-] pred: org. junit. Assert. assertEquals ( refTableVersionInfo, refTableVersionInfo_update )
************************************
************************************
[+] input: test_fetchNameWithSingleAliveAndMultipleArchived_ok() { Random rand = new Random(); int times = rand.nextInt(5) + 5; for (int time = 1; time <= times; time++) { TaskDefinition taskDefinitionTemp = MockTaskDefinitionFactory.createTaskDefinition(); taskDefinitionTemp = taskDefinitionTemp.cloneBuilder() .withName("test") .build(); taskDefinitionDao.create(taskDefinitionTemp); if (time == times) break; taskDefinitionDao.archive(taskDefinitionTemp.getDefinitionId()); } Optional<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test").stream() .findAny(); "<AssertPlaceHolder>"; assertTrue(fetched.get().getName().equals("test")); }
fetchAliveTaskDefinitionByName(String taskName) { String sql = getSelectSQL(TASK_DEF_MODEL_NAME + ".name = ?"); return jdbcTemplate.query(sql, TaskDefinitionMapper.INSTANCE, taskName).stream() .filter(taskDef -> !taskDef.isArchived()) .collect(Collectors.toList()); }
[*] target: assertTrue(fetched.isPresent())
[-] pred: org. junit. Assert. assertTrue ( fetched. isPresent ( ) )
************************************
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); abnormalDatasetRepository.create(abnormalDataset);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); boolean result = abnormalDatasetRepository.updateStatus(abnormalDatasets.get(0).getId(), "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
updateStatus(Long id, String status, OffsetDateTime updateTime) { String sql = DefaultSQLBuilder.newBuilder() .update(TABLE_NAME) .set("status", "update_time") .where("id = ?") .asPrepared() .getSQL(); int updatedRows = jdbcTemplate.update(sql, status, updateTime, id); return updatedRows == 1; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); Long datasetGid = IdGenerator.getInstance().nextId(); abnormalDatasetService.create(abnormalDataset, datasetGid);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); TaskRun taskRun = MockTaskRunFactory.create(TaskRunStatus.SUCCESS); boolean result = abnormalDatasetService.updateStatus(abnormalDatasets.get(0).getId(), taskRun); "<AssertPlaceHolder>"; }
updateStatus(Long id, TaskRun taskRun) { TaskRunStatus taskRunStatus = taskRun.getStatus(); OffsetDateTime updateTime = taskRunStatus.isTermState() ? taskRun.getTermAt() : DateTimeUtils.now(); String status = taskRunStatus.isSuccess() ? "SUCCESS" : "FAILED"; return abnormalDatasetRepository.updateStatus(id, status, updateTime); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: removeTaskNotifyConfigById() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigById(persistedConfig.getId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigById(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigById(Long taskNotifyConfigId) { Preconditions.checkNotNull(taskNotifyConfigId, "id of target config record to be removed should not be null"); return taskNotifyConfigDao.removeById(taskNotifyConfigId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: removeTaskNotifyConfigByWorkflowTaskId() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(persistedConfig.getWorkflowTaskId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigByWorkflowTaskId(Long workflowTaskId) { Preconditions.checkNotNull(workflowTaskId, "id of workflow task id should not be null"); return taskNotifyConfigDao.removeByWorkflowTaskId(workflowTaskId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: delete_WithNonExistId_shouldAffectNoRow() { // Prepare List<Operator> operators = insertSampleData(); Long operatorId = operators.get(0).getId(); Optional<Operator> firstOperator = operatorDao.fetchById(operatorId); assertTrue(firstOperator.isPresent());  // Process boolean rowAffected = operatorDao.deleteById(999L); "<AssertPlaceHolder>"; }
deleteById(Long id) { Preconditions.checkNotNull(id, "Invalid parameter `id`: found null object"); String sql = String.format("DELETE FROM %s WHERE id = ?;", DB_TABLE_NAME); int affectedRows = dbOperator.update(sql, id); return affectedRows > 0; }
[*] target: assertFalse(rowAffected)
[-] pred: org. junit. Assert. assertFalse ( rowAffected )
************************************
************************************
[+] input: partialUpdateOperator_withExistingOperator_shouldSuccess() { // Prepare // 1. create an operator OperatorPropsVO operatorPropsVO = MockOperatorFactory.createOperatorPropsVO(); Operator operator = operatorService.createOperator(operatorPropsVO);  // 2. prepare an operator value object with only part of its props assigned OperatorPropsVO updateVO = OperatorPropsVO.newBuilder() .withName("ShellOperator") .build();  System.out.println(JSONUtils.toJsonString(updateVO));  // Process // 3. perform partial update operatorService.partialUpdateOperator(operator.getId(), updateVO);  // Validate Optional<Operator> updatedOperatorOptional = operatorService.fetchOperatorById(operator.getId()); "<AssertPlaceHolder>"; Operator updatedOperator = updatedOperatorOptional.get(); // 4. updated operator should have same property values as original one, except updated properties assertThat(updatedOperator, samePropertyValuesAs(operator, "name")); assertThat(updatedOperator.getName(), is("ShellOperator")); }
fetchOperatorById(Long id) { // 1. Id should not be null validateIdNotNull(id);  // 2. Get optional operator through DAO return operatorDao.fetchById(id); }
[*] target: assertTrue(updatedOperatorOptional.isPresent())
[-] pred: org. junit. Assert. assertTrue ( updatedOperatorOptional. isPresent ( ) )
************************************
************************************
[+] input: deleteTaskRun_byExistingId_shouldReturnRemovedRowNum() { // Prepare Clock mockClock = getMockClock(); DateTimeUtils.setClock(mockClock);  // 1. create task runs Task task = MockTaskFactory.createTask(); taskDao.create(task);  // 2. create task run TaskRun sampleTaskRun = MockTaskRunFactory.createTaskRun(1L, task); taskRunDao.createTaskRun(sampleTaskRun);  // Process // 3. Perform delete action boolean deletionSuccess = taskRunDao.deleteTaskRun(1L);  // Validate assertTrue(deletionSuccess);  // 4. fetch and validate Optional<TaskRun> persistedTaskRunOptional = taskRunDao.fetchTaskRunById(1L); assertFalse(persistedTaskRunOptional.isPresent());  // 5. Multiple deletions on same id should be idempotent, but returns false flag boolean deletionSuccessAfterAction = taskRunDao.deleteTaskRun(1L); "<AssertPlaceHolder>"; }
deleteTaskRun(Long taskRunId) { return dbOperator.transaction(() -> { deleteTaskRunConditions(taskRunId); deleteTaskRunDependencies(taskRunId); deleteTaskAttempts(taskRunId); String deleteSQL = DefaultSQLBuilder.newBuilder() .delete() .from(TASK_RUN_TABLE_NAME) .where("id = ?") .getSQL(); return dbOperator.update(deleteSQL, taskRunId) > 0; }); }
[*] target: assertFalse(deletionSuccessAfterAction)
[-] pred: org. junit. Assert. assertFalse ( deletionSuccessAfterAction )
************************************
************************************
[+] input: tangentLinesForTwoCircles1() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 9, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(0.0, lines.get(0)[0], 1e-6); assertEquals(1.0, lines.get(0)[1], 1e-6); assertEquals(4.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(-1.0, lines.get(1)[1], 1e-6); assertEquals(6.0, lines.get(1)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(2, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 2, lines. size ( ) )
************************************
************************************
[+] input: tangentLinesForTwoCircles2() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 11, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(1.0, lines.get(1)[1], 1e-6); assertEquals(4.0, lines.get(1)[2], 1e-6);  assertEquals(0.0, lines.get(2)[0], 1e-6); assertEquals(-1.0, lines.get(2)[1], 1e-6); assertEquals(6.0, lines.get(2)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(3, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 3, lines. size ( ) )
************************************
************************************
[+] input: tangentLinesForTwoCircles4() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 2, 1, 4); "<AssertPlaceHolder>"; assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
************************************
[+] input: test1() { CombinationIterator iterator = new CombinationIterator("abc", 2); assertTrue(iterator.hasNext()); assertEquals("ab", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("ac", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("bc", iterator.next()); "<AssertPlaceHolder>"; }
hasNext() { return current[0] != space; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
************************************
[+] input: test3() { Solution solution = new Solution(); Solution2 solution2 = new Solution2(); TreeNode first = LeetcodeUtils.initializeTree(new Integer[]{}); TreeNode second = LeetcodeUtils.initializeTree(new Integer[]{5, 1, 7, 0, 2}); List<Integer> expected = Arrays.asList(0, 1, 2, 5, 7); assertEquals(expected, solution.getAllElements(first, second)); "<AssertPlaceHolder>"; }
getAllElements(TreeNode root1, TreeNode root2) { Stack<StackNode> first = new Stack<>(); if (root1 != null) { first.push(new StackNode(root1)); while (first.peek().root.left != null) { first.push(new StackNode(first.peek().root.left)); } } Stack<StackNode> second = new Stack<>(); if (root2 != null) { second.push(new StackNode(root2)); while (second.peek().root.left != null) { second.push(new StackNode(second.peek().root.left)); } } LinkedList<Integer> ans = new LinkedList<>(); while (!first.isEmpty() || !second.isEmpty()) { if (!first.isEmpty() && !second.isEmpty()) { StackNode firstPeek = first.peek(); StackNode secondPeek = second.peek(); Stack<StackNode> toProcess = firstPeek.root.val < secondPeek.root.val ? first : second; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } else { Stack<StackNode> toProcess = first.isEmpty() ? second : first; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } } return ans; }
[*] target: assertEquals(expected, solution2.getAllElements(first, second))
[-] pred: org. junit. Assert. assertEquals ( expected, solution2. getAllElements ( first, second ) )
************************************
************************************
[+] input: test1() { int[] nums = {1, 5, 1, 1, 6, 4}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: test2() { int[] nums = {1, 3, 2, 2, 3, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: test3() { int[] nums = {1, 1, 2, 2, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: test4() { int[] pre = {1, 2, 4, 5, 3, 6, 7}; int[] post = {4, 5, 2, 6, 7, 3, 1}; TreeNode root = new Solution().constructFromPrePost(pre, post); "<AssertPlaceHolder>"; assertEquals(1, root.val);  assertNotNull(root.left); assertEquals(2, root.left.val); assertNotNull(root.right); assertEquals(3, root.right.val);  assertNotNull(root.left.left); assertEquals(4, root.left.left.val); assertNotNull(root.left.right); assertEquals(5, root.left.right.val); assertNotNull(root.right.left); assertEquals(6, root.right.left.val); assertNotNull(root.right.right); assertEquals(7, root.right.right.val); }
constructFromPrePost(int[] pre, int[] post) { int n = pre.length; HashMap<Integer, Integer> preMap = new HashMap<>(); HashMap<Integer, Integer> postMap = new HashMap<>(); for (int i = 0; i < n; i++) { preMap.put(pre[i], i); postMap.put(post[i], i); } return construct(pre, 0, n, post, 0, n, preMap, postMap); }
[*] target: assertNotNull(root)
[-] pred: org. junit. Assert. assertNotNull ( root )
************************************
************************************
[+] input: Exception { var replayMarkerAwareTrackingEventProcessor = spy(processor); when(replayMarkerAwareTrackingEventProcessor.processingStatus()).thenReturn(Map.of( 0, mock(EventTrackerStatus.class), 1, mock(EventTrackerStatus.class))); CountDownLatch replayLatch = new CountDownLatch(1); Consumer<ReplayableEventProcessor> listener = p -> replayLatch.countDown(); replayMarkerAwareTrackingEventProcessor.registerReplayCompletionListener(listener); replayMarkerAwareTrackingEventProcessor.startReplay(startPosition, replayMarkerEvent); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); verify(replayMarkerAwareTrackingEventProcessor).shutDown(); verify(replayMarkerAwareTrackingEventProcessor).resetTokens(startPosition); verify(replayMarkerAwareTrackingEventProcessor).start(); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying());  // Feed the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // one is not enough since we have two segments assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); assertEquals(1, replayLatch.getCount());  // Feed again the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // Now the replay be completed replayLatch.await(1, TimeUnit.SECONDS); assertEquals(0, replayLatch.getCount()); "<AssertPlaceHolder>"; }
isReplaying() { return targetMarkerEventHolder.get() != null; }
[*] target: assertFalse(replayMarkerAwareTrackingEventProcessor.isReplaying())
[-] pred: org. junit. Assert. assertFalse ( replayMarkerAwareTrackingEventProcessor. isReplaying() )
************************************
************************************
[+] input: changeUserPassword() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "123456"); assertTrue(valid);  ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(user.getId(), dto1); "<AssertPlaceHolder>";  valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "147258"); assertTrue(valid); }
changeUserPassword(Integer id, ResetPasswordDTO dto) { throwUserNotExistById(id); return userIdentityService.changePassword(id, dto.getNewPassword()); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: changeUserPassword1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(random.nextInt(), dto1); "<AssertPlaceHolder>"; }); }
changeUserPassword(Integer id, ResetPasswordDTO dto) { throwUserNotExistById(id); return userIdentityService.changePassword(id, dto.getNewPassword()); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: deleteUser() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean b = true; try { b = adminService.deleteUser(user.getId()); } catch (ForbiddenException ignored) { } "<AssertPlaceHolder>";  UserDO selected = userMapper.selectById(user.getId()); assertNull(selected); }
deleteUser(Integer id) { throwUserNotExistById(id); if (userService.getRootUserId().equals(id)) { throw new ForbiddenException(10079); } boolean userRemoved = userService.removeById(id); QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, id); // 删除用户，还应当将 user_group表中的数据删除 boolean deleteResult = userGroupMapper.deleteByUserId(id) > 0; return userRemoved && userIdentityService.remove(wrapper) && deleteResult; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: updateUserInfo1() { assertThrows(ForbiddenException.class, () -> { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Arrays.asList(random.nextInt(100), random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }); }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: updateUserInfo2() { UserDO user = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); GroupDO group1 = GroupDO.builder().name("测试分组12").info("just for test").build(); GroupDO group2 = GroupDO.builder().name("测试分组11").info("just for test").build(); userMapper.insert(user); groupMapper.insert(group1); groupMapper.insert(group2); List<UserGroupDO> relations = new ArrayList<>(); UserGroupDO relation1 = new UserGroupDO(user.getId(), group1.getId()); relations.add(relation1); userGroupMapper.insertBatch(relations);  UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Collections.singletonList(group2.getId())); boolean b = adminService.updateUserInfo(user.getId(), dto); "<AssertPlaceHolder>";  QueryWrapper<UserGroupDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group1.getId()); UserGroupDO rel1 = userGroupMapper.selectOne(wrapper); assertNull(rel1);  QueryWrapper<UserGroupDO> wrapper1 = new QueryWrapper<>(); wrapper1.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group2.getId()); UserGroupDO rel2 = userGroupMapper.selectOne(wrapper1); assertEquals(rel2.getGroupId(), group2.getId()); }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: updateGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组1儿子"); dto.setInfo("测试分组1儿子info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertEquals(selected.getName(), "测试分组1儿子"); assertEquals(selected.getInfo(), "测试分组1儿子info"); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: updateGroup1() { assertThrows(ForbiddenException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); GroupDO group1 = GroupDO.builder().name("测试分组2").info("just for test").build(); groupMapper.insert(group); groupMapper.insert(group1);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: updateGroup2() { assertThrows(NotFoundException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); Random random = new Random(); boolean ok = adminService.updateGroup(random.nextInt(100) + 10, dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: deleteGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  boolean ok = adminService.deleteGroup(group.getId()); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertNull(selected); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: deleteGroup1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); boolean ok = adminService.deleteGroup(random.nextInt(1000)); "<AssertPlaceHolder>"; }); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: changePassword() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changePassword(userIdentity.getUserId(), "147258"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro", "147258"); "<AssertPlaceHolder>"; }
verifyUsernamePassword(Integer userId, String username, String password) { QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, userId) .eq(UserIdentityDO::getIdentityType, IdentityConstant.USERNAME_PASSWORD_IDENTITY) .eq(UserIdentityDO::getIdentifier, username); UserIdentityDO userIdentity = this.baseMapper.selectOne(wrapper); return EncryptUtil.verify(userIdentity.getCredential(), password); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
************************************
[+] input: changeUsername() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changeUsername(userIdentity.getUserId(), "pedro1"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro1", "123456"); "<AssertPlaceHolder>"; }
verifyUsernamePassword(Integer userId, String username, String password) { QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, userId) .eq(UserIdentityDO::getIdentityType, IdentityConstant.USERNAME_PASSWORD_IDENTITY) .eq(UserIdentityDO::getIdentifier, username); UserIdentityDO userIdentity = this.baseMapper.selectOne(wrapper); return EncryptUtil.verify(userIdentity.getCredential(), password); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
************************************
[+] input: importFromDescriptor_noDependencies_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertNotNull(dto); assertEquals(descriptorDto.getName(), dto.getName());  ApplicationProperties.Imports.Defaults defaults = applicationProperties.getImports().getDefaults(); assertEquals(defaults.getDescription(), dto.getDescription()); assertEquals(defaults.getImageUrl(), dto.getImageUrl()); assertEquals(defaults.getApiUrl(), dto.getSwaggerUrl()); assertEquals(defaults.getGitUrl(), dto.getGitUrl()); assertEquals(defaults.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(defaults.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(defaults.getTeam().getName(), team.getName()); }
importFromDescriptor(final MicroserviceImportDescriptorDto descriptorDto) { final String name = descriptorDto.getName(); if (StringUtils.isBlank(name)) { throw new ImportException("Microservice name can't be null"); }   final Microservice persistent = microserviceRepository.findByName(name); if (persistent != null) { throw new ImportException(String.format("Microservice with name (%s) already exists. Stopping import", name)); } else { final Microservice microservice = persistMicroservice(descriptorDto); importDependencies(microservice, descriptorDto.getDependencies());  return Optional.of(microserviceMapper.microserviceToDto(microservice)); } }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
************************************
[+] input: importFromDescriptor_overrideDefaultValues_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice 2") .withDescription("Test description") .withImageUrl("Test image url") .withApiUrl("Test api url") .withGitUrl("Test git url") .withCiUrl("Test ci url") .withTeam("Test team") .withStatus("Test status") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertEquals(descriptorDto.getDescription(), dto.getDescription()); assertEquals(descriptorDto.getImageUrl(), dto.getImageUrl()); assertEquals(descriptorDto.getApiUrl(), dto.getSwaggerUrl()); assertEquals(descriptorDto.getGitUrl(), dto.getGitUrl()); assertEquals(descriptorDto.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(descriptorDto.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(descriptorDto.getTeam(), team.getName()); }
importFromDescriptor(final MicroserviceImportDescriptorDto descriptorDto) { final String name = descriptorDto.getName(); if (StringUtils.isBlank(name)) { throw new ImportException("Microservice name can't be null"); }   final Microservice persistent = microserviceRepository.findByName(name); if (persistent != null) { throw new ImportException(String.format("Microservice with name (%s) already exists. Stopping import", name)); } else { final Microservice microservice = persistMicroservice(descriptorDto); importDependencies(microservice, descriptorDto.getDependencies());  return Optional.of(microserviceMapper.microserviceToDto(microservice)); } }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
************************************
[+] input: getClassFieldsTest() {  List<Field> fields = ReflectionUtility.getClassFields(TestBean.class);  "<AssertPlaceHolder>"; assertEquals("field1", fields.get(0).getName()); assertEquals("field2", fields.get(1).getName()); assertEquals("field3", fields.get(2).getName()); assertEquals("field4", fields.get(3).getName()); assertEquals("field5", fields.get(4).getName()); }
getClassFields(Class clazz) {  List<Field> classFields = new ArrayList<>(Arrays.asList(clazz.getDeclaredFields()));  if(clazz.getSuperclass() == null) { return classFields; }  classFields.addAll(getClassFields(clazz.getSuperclass()));  return classFields; }
[*] target: assertEquals(5, fields.size())
[-] pred: org. junit. Assert. assertEquals ( 5, fields. size ( ) )
************************************
************************************
[+] input: shouldTestCacheKeysEqual() { Date date = new Date(); CacheKey key1 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); CacheKey key2 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); assertEquals(key1, key2); assertEquals(key2, key1); assertEquals(key1.hashCode(), key2.hashCode()); "<AssertPlaceHolder>"; }
toString() { StringJoiner returnValue = new StringJoiner(":"); returnValue.add(String.valueOf(hashcode)); returnValue.add(String.valueOf(checksum)); updateList.stream().map(ArrayUtil::toString).forEach(returnValue::add); return returnValue.toString(); }
[*] target: assertEquals(key1.toString(), key2.toString())
[-] pred: org. junit. Assert. assertEquals ( key1. toString ( ), key2. toString ( ) )
************************************
************************************
[+] input: Exception { CacheKey cacheKey = CacheKey.NULL_CACHE_KEY; CacheKey clonedCacheKey = cacheKey.clone(); assertEquals(cacheKey, clonedCacheKey); "<AssertPlaceHolder>"; }
hashCode() { return hashcode; }
[*] target: assertEquals(cacheKey.hashCode(), clonedCacheKey.hashCode())
[-] pred: org. junit. Assert. assertEquals ( cacheKey. hashCode(), clonedCacheKey. hashCode() )
************************************
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
parse(String text) { if (text == null || text.isEmpty()) { return ""; } // search open token int start = text.indexOf(openToken); if (start == -1) { return text; } char[] src = text.toCharArray(); int offset = 0; final StringBuilder builder = new StringBuilder(); StringBuilder expression = null; do { if (start > 0 && src[start - 1] == '\') { // this open token is escaped. remove the backslash and continue. builder.append(src, offset, start - offset - 1).append(openToken); offset = start + openToken.length(); } else { // found open token. let's search close token. if (expression == null) { expression = new StringBuilder(); } else { expression.setLength(0); } builder.append(src, offset, start - offset); offset = start + openToken.length(); int end = text.indexOf(closeToken, offset); while (end > -1) { if (end > offset && src[end - 1] == '\') { // this close token is escaped. remove the backslash and continue. expression.append(src, offset, end - offset - 1).append(closeToken); offset = end + closeToken.length(); end = text.indexOf(closeToken, offset); } else { expression.append(src, offset, end - offset); break; } } if (end == -1) { // close token was not found. builder.append(src, start, src.length - start); offset = src.length; } else { builder.append(handler.handleToken(expression.toString())); offset = end + closeToken.length(); } } start = text.indexOf(openToken, offset); } while (start > -1); if (offset < src.length) { builder.append(src, offset, src.length - offset); } return builder.toString(); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse ( input. toString ( ) ) )
************************************
************************************
[+] input: shouldCheckGetterAndSetterNames() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertEquals(5, meta.getGetterNames().length); "<AssertPlaceHolder>"; }
getSetterNames() { return reflector.getSetablePropertyNames(); }
[*] target: assertEquals(5, meta.getSetterNames().length)
[-] pred: org. junit. Assert. assertEquals ( 5, meta. getSetterNames(). length )
************************************
************************************
[+] input: shouldSelectAllAuthorsAsMap() { try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) { final Map<Integer,Author> authors = session.selectMap("org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors", "id"); "<AssertPlaceHolder>"; for(Map.Entry<Integer,Author> authorEntry : authors.entrySet()) { assertEquals(authorEntry.getKey(), (Integer) authorEntry.getValue().getId()); } } }
selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
************************************
[+] input: shouldDeleteAuthorUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { AuthorMapper mapper = session.getMapper(AuthorMapper.class); int count = mapper.deleteAuthor(101); "<AssertPlaceHolder>"; assertNull(mapper.selectAuthor(101)); } }
getMapper(Class<T> type);
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
************************************
[+] input: shouldLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(0, 2), null); "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).get("ID")); assertEquals(2, posts.get(1).get("ID")); } }
getMapper(Class<T> type);
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: shouldOffsetAndLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(2, 3)); "<AssertPlaceHolder>"; assertEquals(3, posts.get(0).get("ID")); assertEquals(4, posts.get(1).get("ID")); assertEquals(5, posts.get(2).get("ID")); } }
getMapper(Class<T> type);
[*] target: assertEquals(3, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 3, posts. size ( ) )
************************************
************************************
[+] input: shouldFindOddPostsInList() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectOddPostsIn", new ArrayList<Integer>() {{ add(0); add(1); add(2); add(3); add(4); }}); // we're getting odd indexes, not odd values, 0 is not odd "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).getId()); assertEquals(3, posts.get(1).getId()); } }
selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
parse(String text) { if (text == null || text.isEmpty()) { return ""; } // search open token int start = text.indexOf(openToken); if (start == -1) { return text; } char[] src = text.toCharArray(); int offset = 0; final StringBuilder builder = new StringBuilder(); StringBuilder expression = null; while (start > -1) { if (start > 0 && src[start - 1] == '\') { // this open token is escaped. remove the backslash and continue. builder.append(src, offset, start - offset - 1).append(openToken); offset = start + openToken.length(); } else { // found open token. let's search close token. if (expression == null) { expression = new StringBuilder(); } else { expression.setLength(0); } builder.append(src, offset, start - offset); offset = start + openToken.length(); int end = text.indexOf(closeToken, offset); while (end > -1) { if (end > offset && src[end - 1] == '\') { // this close token is escaped. remove the backslash and continue. expression.append(src, offset, end - offset - 1).append(closeToken); offset = end + closeToken.length(); end = text.indexOf(closeToken, offset); } else { expression.append(src, offset, end - offset); break; } } if (end == -1) { // close token was not found. builder.append(src, start, src.length - start); offset = src.length; } else { builder.append(handler.handleToken(expression.toString())); offset = end + closeToken.length(); } } start = text.indexOf(openToken, offset); } if (offset < src.length) { builder.append(src, offset, src.length - offset); } return builder.toString(); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse( input. toString ( ) ) )
************************************
************************************
[+] input: jwtDecodeSuccess() { // given SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder(); AppJwt appJwt = AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build(); String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);  // when AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID); Assertions.assertNotNull(decodedJwt.getExpiration()); }
decode(String encodedJwt, String secret) { Claims claims = Jwts.parserBuilder() .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes())) .build() .parseClaimsJws(encodedJwt) .getBody(); String userId = claims.getSubject(); Date expiration = claims.getExpiration(); return AppJwt.builder() .userId(userId) .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime()) .build(); }
[*] target: assertNotNull(decodedJwt)
[-] pred: org. junit. Assert. assertNotNull ( decodedJwt )
************************************
************************************
[+] input: loginSuccess() { // given LoginRequest request = getDefaultLoginRequest(); UserDto userDto = getDefaultUserDtoRequest(); AppJwt appJwt = getDefaultJwtToken(userDto); String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET); given(userSDJpaService.findUserByEmail(request.getEmail())) .willReturn(Optional.of(userDto)); given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword())) .willReturn(true); given(appJwtEncoderDecoder.encode(appJwt, SECRET)) .willReturn(encodedJwt);  // when AuthenticationData authenticationData = authenticationSDJpaService.login(request);  // then "<AssertPlaceHolder>"; assertEquals(authenticationData.getUserId(), userDto.getUserId()); assertEquals(authenticationData.getJwtToken(), encodedJwt); verify(userSDJpaService).findUserByEmail(request.getEmail()); verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword()); verify(appJwtEncoderDecoder).encode(appJwt, SECRET); }
login(LoginRequest loginRequest) { log.trace("Received login request"); final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail()) .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail())); if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) { throw new CredentialsIncorrectException(userDto.getUserId()); } final AppJwt jwtToken = createJwt(userDto); final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret); return new AuthenticationData(encodedToken, userDto.getUserId()); }
[*] target: assertNotNull(authenticationData)
[-] pred: org. junit. Assert. assertNotNull ( authenticationData )
************************************
************************************
[+] input: deleteBookingAmenityNotExists() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION)); // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId()); verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
deleteBooking(String amenityId, String bookingId) { Optional<AmenityBookingItem> booking = bookingRepository.findByAmenityBookingItemId(bookingId); return booking.map(bookingItem -> { boolean amenityFound = bookingItem.getAmenity().getAmenityId().equals(amenityId); if (amenityFound) { bookingRepository.delete(bookingItem); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
************************************
[+] input: createCommunity() { // given CommunityDto testCommunityDto = getTestCommunityDto(); Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(TEST_COMMUNITY_ID, TEST_COMMUNITY_NAME, TEST_COMMUNITY_DISTRICT, 0, 0); UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(TEST_ADMIN_ID, null, Collections.emptyList()); SecurityContextHolder.getContext().setAuthentication(authentication);  given(communityMapper.communityDtoToCommunity(testCommunityDto)) .willReturn(testCommunity); given(communityAdminRepository.findByUserIdWithCommunities(TEST_ADMIN_ID)) .willReturn(Optional.of(getTestAdmin())); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when Community createdCommunity = communitySDJpaService.createCommunity(testCommunityDto);  // then "<AssertPlaceHolder>"; assertEquals(testCommunityDto.getName(), createdCommunity.getName()); assertEquals(testCommunityDto.getDistrict(), createdCommunity.getDistrict()); verify(communityMapper).communityDtoToCommunity(testCommunityDto); verify(communityAdminRepository).findByUserIdWithCommunities(TEST_ADMIN_ID); verify(communityRepository).save(testCommunity); }
createCommunity(CommunityDto communityDto) { communityDto.setCommunityId(generateUniqueId()); String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto), userId); Community savedCommunity = communityRepository.save(community); log.trace("saved community with id[{}] to repository", savedCommunity.getId()); return savedCommunity; }
[*] target: assertNotNull(createdCommunity)
[-] pred: org. junit. Assert. assertNotNull ( createdCommunity )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseId() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); CommunityHouse testHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse(TEST_HOUSE_ID); Set<HouseMember> testHouseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); testHouse.setHouseMembers(testHouseMembers); testCommunity.getHouses().add(testHouse);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.of(testHouse));  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; assertFalse(testCommunity.getHouses().contains(testHouse)); verify(communityRepository).save(testCommunity); testHouse.getHouseMembers() .forEach(houseMember -> verify(houseService).deleteMemberFromHouse(TEST_HOUSE_ID, houseMember.getMemberId())); verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verify(communityHouseRepository).deleteByHouseId(TEST_HOUSE_ID); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertTrue(houseDeleted)
[-] pred: org. junit. Assert. assertTrue ( houseDeleted )
************************************
************************************
[+] input: deleteMemberDocumentSuccess() { // given HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertTrue(isDocumentDeleted)
[-] pred: org. junit. Assert. assertTrue ( isDocumentDeleted )
************************************
************************************
[+] input: deleteMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository, never()).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertFalse(isDocumentDeleted)
[-] pred: org. junit. Assert. assertFalse ( isDocumentDeleted )
************************************
************************************
[+] input: deleteMemberFromHouse() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID); memberToDelete.setCommunityHouse(communityHouse);  houseMembers.add(memberToDelete); communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(memberToDelete.getCommunityHouse()); assertFalse(communityHouse.getHouseMembers().contains(memberToDelete)); verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository).save(communityHouse); verify(houseMemberRepository).save(memberToDelete); }
deleteMemberFromHouse(String houseId, String memberId) { Optional<CommunityHouse> communityHouseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return communityHouseOptional.map(communityHouse -> { boolean isMemberRemoved = false; if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) { Set<HouseMember> houseMembers = communityHouse.getHouseMembers(); for (HouseMember member : houseMembers) { if (member.getMemberId().equals(memberId)) { houseMembers.remove(member); communityHouse.setHouseMembers(houseMembers); communityHouseRepository.save(communityHouse); member.setCommunityHouse(null); houseMemberRepository.save(member); isMemberRemoved = true; break; } } } return isMemberRemoved; }).orElse(false); }
[*] target: assertTrue(isMemberDeleted)
[-] pred: org. junit. Assert. assertTrue ( isMemberDeleted )
************************************
************************************
[+] input: confirmEmail() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user)); //    given(mailService.sendAccountConfirmed(user)) //        .willReturn(true);  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertTrue(user.isEmailConfirmed()); verify(securityTokenService).useToken(testSecurityToken); verify(userRepository).save(user); //    verify(mailService).sendAccountConfirmed(user); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertTrue(emailConfirmed)
[-] pred: org. junit. Assert. assertTrue ( emailConfirmed )
************************************
************************************
[+] input: confirmEmailWrongToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "wrong-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: confirmEmailUsedToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); testSecurityToken.setUsed(true); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: confirmEmailNoToken() { // given User user = getDefaultUser(); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "any-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: requestResetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); given(securityTokenService.createPasswordResetToken(user)) .willReturn(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(mailService.sendPasswordRecoverCode(user, testSecurityToken.getToken())) .willReturn(true);  // when boolean resetRequested = userService.requestResetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(getUserSecurityToken(user, SecurityTokenType.RESET), testSecurityToken); verify(securityTokenService).createPasswordResetToken(user); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(userRepository).save(user); verify(mailService).sendPasswordRecoverCode(user, testSecurityToken.getToken()); }
requestResetPassword(ForgotPasswordRequest forgotPasswordRequest) { return Optional.ofNullable(forgotPasswordRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(email -> userRepository.findByEmailWithTokens(email) .map(user -> { SecurityToken newSecurityToken = securityTokenService.createPasswordResetToken(user); user.getUserTokens().add(newSecurityToken); userRepository.save(user); return mailService.sendPasswordRecoverCode(user, newSecurityToken.getToken()); })) .orElse(false); }
[*] target: assertTrue(resetRequested)
[-] pred: org. junit. Assert. assertTrue ( resetRequested )
************************************
************************************
[+] input: resetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(passwordEncoder.encode(forgotPasswordRequest.getNewPassword())) .willReturn(forgotPasswordRequest.getNewPassword()); when(userRepository.save(user)) .then(returnsFirstArg()); given(mailService.sendPasswordSuccessfullyChanged(user)) .willReturn(true); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken);  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(passwordEncoder).encode(forgotPasswordRequest.getNewPassword()); verify(mailService).sendPasswordSuccessfullyChanged(user); verify(securityTokenService).useToken(testSecurityToken); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertTrue(passwordChanged)
[-] pred: org. junit. Assert. assertTrue ( passwordChanged )
************************************
************************************
[+] input: resetPasswordUserNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.empty());  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: resetPasswordTokenNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: resetPasswordTokenNotMatches() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); testSecurityToken.setToken("wrong-token"); User user = getDefaultUser(); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); assertNotNull(getUserSecurityToken(user, SecurityTokenType.RESET)); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = MyService.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = MyIf.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = Object.class.getMethod("toString");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(Object.class.getMethod("toString"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: Exception { QpackDecoderDynamicTable table = newTable(100); assertEquals(0, table.length()); table.add(fooBar); assertEquals(1, table.length()); table.clear(); "<AssertPlaceHolder>"; }
length() { return head < tail ? fields.length - tail + head : head - tail; }
[*] target: assertEquals(0, table.length())
[-] pred: org. junit. Assert. assertEquals ( 0, table. length() )
************************************
************************************
[+] input: putMoneyAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: putMoneyAndGetObject() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Object out = dataManager.get(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertTrue(out instanceof Money); final Money mOut = (Money) out; assertEquals(twelveDotThreeFour, mOut.getValue()); final Currency currency = mOut.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: putObjectAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.put(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: Exception { var stack = new ArrayList<RecordedFrame>(); var method = buildMethod("", "", ""); // Specially crafted artisanal length in order to exercise the edge case // It happens on the second recursion. for (int i = 0; i < 75; i++) { var frame = buildFrame(method, 0, 0); stack.add(frame); }  String result = MethodSupport.jsonWrite(stack, Optional.of(74)); "<AssertPlaceHolder>"; assertTrue(result.length() <= MethodSupport.HEADROOM_75PC); }
jsonWrite(final List<RecordedFrame> frames, final Optional<Integer> limit) throws IOException { StringWriter strOut = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(strOut); int frameCount = Math.min(limit.orElse(frames.size()), frames.size());  jsonWriter.beginObject(); jsonWriter.name("type").value("stacktrace"); jsonWriter.name("language").value("java"); jsonWriter.name("version").value(JSON_SCHEMA_VERSION); jsonWriter.name("truncated").value(frameCount < frames.size()); jsonWriter.name("payload").beginArray(); for (int i = 0; i < frameCount; i++) { RecordedFrame frame = frames.get(i); jsonWriter.beginObject(); jsonWriter.name("desc").value(describeMethod(frame.getMethod())); jsonWriter.name("line").value(Integer.toString(frame.getLineNumber())); jsonWriter.name("bytecodeIndex").value(Integer.toString(frame.getBytecodeIndex())); jsonWriter.endObject(); }  jsonWriter.endArray(); jsonWriter.endObject(); String out = strOut.toString(); int length = out.length(); if (length > HEADROOM_75PC) { double percentageOfFramesToTry = ((double) HEADROOM_75PC) / length; int numFrames = (int) (frameCount * percentageOfFramesToTry); if (numFrames < frameCount) { return jsonWrite(frames, Optional.of(numFrames)); } throw new IOException( "Corner case of a stack frame that can't be cleanly truncated! " + "numFrames = " + numFrames + ", frameCount = " + frameCount + ", " + ", percentageOfFramesToTry = " + percentageOfFramesToTry + ", length = " + length); } else { return out; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testProcessEvent() { var stack = new Stack<String>();  String expectedFrameName1 = "expectedFrameName1"; String expectedFrameName2 = "expectedFrameName2"; String expectedFrameName3 = "expectedFrameName3"; Integer expectedFrameValue = 27;  stack.push(expectedFrameName1); stack.push(expectedFrameName2); stack.push(expectedFrameName3);  FlamegraphMarshaller flamegraphMarshaller = new FlamegraphMarshaller(); flamegraphMarshaller.processEvent(stack, expectedFrameValue); FlamegraphMarshaller.StackFrame stackFrame = flamegraphMarshaller.getStackFrame(); List<FlamegraphMarshaller.StackFrame> children = stackFrame.getChildren(); assertNotNull(children);  FlamegraphMarshaller.StackFrame frame3 = (FlamegraphMarshaller.StackFrame) children.toArray()[0]; FlamegraphMarshaller.StackFrame frame2 = (FlamegraphMarshaller.StackFrame) frame3.getChildren().toArray()[0]; FlamegraphMarshaller.StackFrame frame1 = (FlamegraphMarshaller.StackFrame) frame2.getChildren().toArray()[0];  assertEquals(expectedFrameName3, frame3.getName()); assertEquals(expectedFrameValue, frame3.getValue());  assertEquals(expectedFrameName2, frame2.getName()); assertEquals(expectedFrameValue, frame2.getValue());  assertEquals(expectedFrameName1, frame1.getName()); "<AssertPlaceHolder>"; }
getValue() { return value; }
[*] target: assertEquals(expectedFrameValue, frame1.getValue())
[-] pred: org. junit. Assert. assertEquals ( expectedFrameValue, frame1. getValue ( ) )
************************************
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var duration = Duration.ofSeconds(14); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(DURATION, duration.toMillis()) .put(DESC, MISSING) .put(SUCCEEDED, true); var expectedEvent = new Event(JFR_COMPILATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var eventType = mock(EventType.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDuration()).thenReturn(duration); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getValue(METHOD)).thenReturn(null); when(event.hasField(SUCCEEDED)).thenReturn(true); when(event.getBoolean(SUCCEEDED)).thenReturn(true); when(event.getEventType()).thenReturn(eventType);  when(eventThread.getJavaName()).thenReturn(threadName); when(eventType.getName()).thenReturn(EVENT_NAME);  var mapper = new JITCompilationMapper(); assertTrue(mapper.test(event));  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent event) { long timestamp = event.getStartTime().toEpochMilli(); Duration duration = event.getDuration(); Attributes attr = new Attributes(); if (hasField(event, METHOD, SIMPLE_CLASS_NAME)) { attr.put(DESC, MethodSupport.describeMethod(event.getValue(METHOD))); } attr.put(DURATION, duration.toMillis()); attr.put(SUCCEEDED, Workarounds.getSucceeded(event)); RecordedThread threadId = null; if (hasField(event, EVENT_THREAD, SIMPLE_CLASS_NAME)) { threadId = event.getThread(EVENT_THREAD); } attr.put(THREAD_NAME, threadId == null ? null : threadId.getJavaName()); return Collections.singletonList(new Event(JFR_COMPILATION, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testSingleMinorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMinorGcSummaryMetric = new Summary( MINOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(expectedMinorGcSummaryMetric, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_NEW); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testSingleMajorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMajorGcSummaryMetric = new Summary( MAJOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(defaultMinorGcSummary, expectedMajorGcSummaryMetric); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_OLD); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testUnsupportedGcEventName() { var event = mock(RecordedEvent.class); var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000;  List<Metric> expected = List.of(defaultMinorGcSummary, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn("FOO"); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getKeysWithoutIndex() { var one = "1"; var map = new IndexedMap<Integer, String>();  map.put(1, one);  var keys = map.keySet().stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions."<AssertPlaceHolder>"; }
size() { return this.entries.size(); }
[*] target: assertEquals(1, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 1, keys. size() )
************************************
************************************
[+] input: getKeysWithIndex() { var indexKey = "myIndex"; var one = "1"; var two = "1"; var map = new IndexedMap<Integer, String>().indexBuilder() .withMapper(str -> Integer.parseInt(str)) .withName(indexKey) .build();  map.put(1, one); map.put(2, two);  var keys = map.keySet(indexKey, 1).stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions.assertTrue(keys.contains(2)); Assertions."<AssertPlaceHolder>"; }
size() { return this.entries.size(); }
[*] target: assertEquals(2, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 2, keys. size() )
************************************
************************************
[+] input: shouldReThrowException_1() { var task = this.makeOneTimeFailingTask(1);  task.withRethrowingExceptions(true);  Assertions.assertThrows(RuntimeException.class, task::execute); Assertions."<AssertPlaceHolder>"; }
succeeded() { if (!this.executed) { throw new IllegalStateException("The task has not been executed"); } return succeeded; }
[*] target: assertFalse(task.succeeded())
[-] pred: org. junit. Assert. assertFalse ( task. succeeded() )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(10, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer, Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference<Integer>(1));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .withSupplier(() -> {  return 1; }) .withRollback((inputHolder, thrown)-> { Assertions.assertNull(inputHolder); Assertions.assertNull(thrown);  }) .build(); stage.execute(null); stage.rollback(null);  Assertions.assertTrue(stage.isExecuted()); Assertions."<AssertPlaceHolder>"; }
isRolledback() { return this.rolledBack; }
[*] target: assertTrue(stage.isRolledback())
[-] pred: org. junit. Assert. assertTrue ( stage. isRolledback ( ) )
************************************
************************************
[+] input: TimeoutException { this.clientSamplesAnalyser.config.dropUnmatchedReports = false; var samplesGeneratorForSingleSfu = new SamplesGeneratorForSingleSfu(); samplesGeneratorForSingleSfu.saveTo(this.hamokStorages); var observedClientSamples = samplesGeneratorForSingleSfu.getObservedClientSamples();  var reports = new LinkedList<Report>(); this.clientSamplesAnalyser.observableReports().subscribe(reports::addAll); this.clientSamplesAnalyser.accept(observedClientSamples);  var inboundAudioReports = reports.stream() .filter(report -> ReportType.INBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (InboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var inboundVideoReports = reports.stream() .filter(report -> ReportType.INBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (InboundVideoTrackReport) report.payload) .collect(Collectors.toList()); var outboundAudioReports = reports.stream() .filter(report -> ReportType.OUTBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (OutboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var outboundVideoReports = reports.stream() .filter(report -> ReportType.OUTBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (OutboundVideoTrackReport) report.payload) .collect(Collectors.toList());  for (var inboundAudioReport : inboundAudioReports) { var found = false; for (var outboundAudioReport : outboundAudioReports) { if (outboundAudioReport.sfuStreamId == inboundAudioReport.sfuStreamId) { found = true; } } Assertions."<AssertPlaceHolder>"; } for (var outboundVideoReport : outboundVideoReports) { var found = false; for (var inboundVideoReport : inboundVideoReports) { if (inboundVideoReport.sfuStreamId == outboundVideoReport.sfuStreamId) { found = true; } } Assertions.assertTrue(found); } }
accept(ObservedClientSamples observedClientSamples) { if (observedClientSamples == null) { return; } if (observedClientSamples.isEmpty()) { this.output.onNext(Collections.emptyList()); return; } Instant started = Instant.now(); try { this.process(observedClientSamples); } finally { this.exposedMetrics.addTaskExecutionTime(METRIC_COMPONENT_NAME, started, Instant.now()); } }
[*] target: assertTrue(found)
[-] pred: org. junit. Assert. assertTrue ( found )
************************************
************************************
[+] input: should_correctly_parse_flag() { OggPage oggPage = OggPage.empty();  oggPage.setFlag(0x00); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x01); assertTrue(oggPage.isContinued());  oggPage.setFlag(0x02); assertTrue(oggPage.isBOS());  oggPage.setFlag(0x04); "<AssertPlaceHolder>"; }
isEOS() { return (this.flag & 0x04) != 0; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
************************************
[+] input: should_correctly_set_flag() { OggPage oggPage = OggPage.empty(); oggPage.setFlag(0x00);  oggPage.setContinued(); assertTrue(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setBOS(); assertFalse(oggPage.isContinued()); assertTrue(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setEOS(); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); "<AssertPlaceHolder>"; }
isEOS() { return (this.flag & 0x04) != 0; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 2); assertEquals(2, opusPacket.getCode()); assertTrue(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(2, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
getPadLenBytesSum() { return 0; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 0); assertEquals(0, opusPacket.getCode()); assertFalse(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(1, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
getPadLenBytesSum() { return 0; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
************************************
[+] input: convertSpansToRequest() { SpanData span1 = makeBasicSpan("span-1"); SpanData span2 = makeBasicSpan("span-2"); ImmutableList<SpanData> spans = ImmutableList.of(span1, span2);  ExportTraceServiceRequest actual = testSubject.convertSpansToRequest(spans);  "<AssertPlaceHolder>"; assertEquals("span-1", actual.getResourceSpans(0).getScopeSpans(0).getSpans(0).getName()); assertEquals("span-2", actual.getResourceSpans(0).getScopeSpans(0).getSpans(1).getName()); }
convertSpansToRequest(Collection<SpanData> spans) { List<ResourceSpans> resourceSpansList = Arrays.stream(ResourceSpansMarshaler.create(spans)) .map( resourceSpansMarshaler -> { try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) { resourceSpansMarshaler.writeBinaryTo(baos); return ResourceSpans.parseFrom(baos.toByteArray()); } catch (IOException e) { throw new SerializationException(e); } }) .collect(toList());  return ExportTraceServiceRequest.newBuilder().addAllResourceSpans(resourceSpansList).build(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("C1CCCC2CCCCC12"); List<Atom> atomList = frag.getAtomList(); Set<Bond> bonds = new HashSet<Bond>(frag.getBondSet()); bonds.remove(atomList.get(4).getBondToAtom(atomList.get(9))); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(4), atomList.get(9), bonds); "<AssertPlaceHolder>";  List<Atom> pathLeftRing; List<Atom> pathRightRing; if (atomList.indexOf(paths.get(0).get(0))==3){ pathLeftRing = paths.get(0); pathRightRing = paths.get(1); } else{ pathLeftRing = paths.get(1); pathRightRing = paths.get(0); } assertEquals(3, atomList.indexOf(pathLeftRing.get(0))); assertEquals(2, atomList.indexOf(pathLeftRing.get(1))); assertEquals(1, atomList.indexOf(pathLeftRing.get(2))); assertEquals(0, atomList.indexOf(pathLeftRing.get(3)));  assertEquals(5, atomList.indexOf(pathRightRing.get(0))); assertEquals(6, atomList.indexOf(pathRightRing.get(1))); assertEquals(7, atomList.indexOf(pathRightRing.get(2))); assertEquals(8, atomList.indexOf(pathRightRing.get(3))); }
getPathBetweenAtomsUsingBonds(Atom a1, Atom a2, Set<Bond> peripheryBonds){ List<List<Atom>> paths = new ArrayList<>(); Deque<PathSearchState> stateStack = new ArrayDeque<>(); stateStack.add(new PathSearchState(a1, new ArrayList<>())); while (stateStack.size()>0){ PathSearchState state  =stateStack.removeLast();//depth first traversal List<Atom> orderAtomsVisited = state.getOrderAtomsVisited(); Atom nextAtom = state.getCurrentAtom(); orderAtomsVisited.add(nextAtom); Set<Bond> neighbourBonds = new LinkedHashSet<>(nextAtom.getBonds()); neighbourBonds.retainAll(peripheryBonds); for (Bond neighbourBond : neighbourBonds) { Atom neighbour = neighbourBond.getOtherAtom(nextAtom); if (orderAtomsVisited.contains(neighbour)){//atom already visited by this path continue; } if (neighbour ==a2 ){//target atom found paths.add(new ArrayList<>(orderAtomsVisited.subList(1, orderAtomsVisited.size()))); } else{//add atom to stack, its neighbours will be recursively investigated shortly stateStack.add(new PathSearchState(neighbour, new ArrayList<>(orderAtomsVisited))); } } } return paths; }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("CC"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, atomList.get(0).getElement()); assertEquals(ChemEl.C, atomList.get(1).getElement()); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("C#N"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Set<Bond> bonds = fragment.getBondSet(); assertEquals(1, bonds.size()); for (Bond bond : bonds) { assertEquals(3, bond.getOrder()); } }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[I-].[Na+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Atom iodine = atomList.get(0); assertEquals(0, iodine.getAtomNeighbours().size()); assertEquals(-1, iodine.getCharge());  Atom sodium = atomList.get(1); assertEquals(0, sodium.getAtomNeighbours().size()); assertEquals(1, sodium.getCharge()); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[Li+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(1, atomList.get(0).getCharge()); assertEquals(0, atomList.get(0).getProtonsExplicitlyAddedOrRemoved()); assertEquals(0, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[SiH2]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("#[SiH]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[SiH2]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[Si]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { //standard unlocanted substitution BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element amino = new TokenEl(GROUP_EL); Fragment aminoFrag = state.fragManager.buildSMILES("-N"); amino.setFrag(aminoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(amino);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(aminoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, interFragmentBonds.iterator().next().getOtherAtom(aminoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentUnLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  resolveUnLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  if (foundSomethingToSubstitute){ performUnLocantedSubstitutiveOperations(state, subOrRoot);//e.g. tetramethylfuran } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentUnLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  resolveUnLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  if (foundSomethingToSubstitute){ performUnLocantedSubstitutiveOperations(state, subOrRoot);//e.g. tetramethylfuran } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addAttribute(new Attribute(LOCANT_ATR, "4")); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CCCCO",methanol,"1/2/3/4/")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  resolveLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  if (foundSomethingToSubstitute){ performAdditiveOperations(state, subOrRoot);//e.g. ethylenediimino, oxyethylene (operations where two outAtoms are used to produce the bond and no locant is required as groups) performLocantedSubstitutiveOperations(state, subOrRoot);//e.g. 2-methyltoluene } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooane",""), Arrays.asList('a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooane"); "<AssertPlaceHolder>"; assertEquals("fooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooyl","","fooane",""), Arrays.asList('a', OpsinTools.END_OF_SUBSTITUENT,'a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooylfooane"); "<AssertPlaceHolder>"; assertEquals("fooylfooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("functionalfoo",""), Arrays.asList('a', OpsinTools.END_OF_FUNCTIONALTERM)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "functionalfoo"); "<AssertPlaceHolder>"; assertEquals("functionalfoo", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: roundTrip() { final String expression = "http://snomed.info/sct|166056000|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath.fromString( expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripNoVersion() { final String expression = "http://snomed.info/sct|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertNull(literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripWithQuotedComponent() { final String expression = "http://snomed.info/sct" + "|'397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )'" + "|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals( "397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithComma() { final String expression = "http://snomed.info/sct|'46,2'|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("46,2", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSingleQuote() { final String expression = "'Someone\'s CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Someone's CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSpace() { final String expression = "'Some CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Some CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageAsyncConfiguration payloadStorageConfiguration = new PayloadStorageAsyncConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
getS3AsyncClient() { return s3Async; }
[*] target: assertNull(payloadStorageConfiguration.getS3AsyncClient())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3AsyncClient() )
************************************
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageConfiguration payloadStorageConfiguration = new PayloadStorageConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
getS3Client() { return s3; }
[*] target: assertNull(payloadStorageConfiguration.getS3Client())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3Client() )
************************************
************************************
[+] input: protobufTest() { // Empty Result var result = new PhotonPipelineResult(); var serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); var unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // non multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)))), new MultiTargetPNPResult( new PNPResult( new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.1), List.of(1, 2, 3))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); "<AssertPlaceHolder>"; }
unpack(ProtobufPhotonPipelineResult msg) { return new PhotonPipelineResult( msg.getSequenceId(), msg.getCaptureTimestampMicros(), msg.getNtPublishTimestampMicros(), PhotonTrackedTarget.proto.unpack(msg.getTargets()), MultiTargetPNPResult.proto.unpack(msg.getMultiTargetResult())); }
[*] target: assertEquals(result, unpackedResult)
[-] pred: org. junit. Assert. assertEquals ( result, unpackedResult )
************************************
************************************
[+] input: protobufTest() { var pnpRes = new PNPResult(); var serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); var unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); assertEquals(pnpRes, unpackedPNPRes);  pnpRes = new PNPResult(new Transform3d(1, 2, 3, new Rotation3d(1, 2, 3)), 0.1); serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); "<AssertPlaceHolder>"; }
unpack(ProtobufPNPResult msg) { if (!msg.getIsPresent()) { return new PNPResult(); }  return new PNPResult( Transform3d.proto.unpack(msg.getBest()), Transform3d.proto.unpack(msg.getAlt()), msg.getAmbiguity(), msg.getBestReprojErr(), msg.getAltReprojErr()); }
[*] target: assertEquals(pnpRes, unpackedPNPRes)
[-] pred: org. junit. Assert. assertEquals ( pnpRes, unpackedPNPRes )
************************************
************************************
[+] input: testGetSecretsProvider_withoutParameter_shouldCreateDefaultClient() {  // Act SecretsProvider secretsProvider = ParamManager.getSecretsProvider();  // Assert "<AssertPlaceHolder>"; assertNotNull(secretsProvider.getClient()); }
getSecretsProvider() { return getProvider(SecretsProvider.class); }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
************************************
[+] input: IOException {  Guid guid1 = Guid.fromRandomUuid();  byte[] data = guid1.toBytes(); Guid guid2 = Guid.fromBytes(data);  assertTrue(guid1.equals(guid2));  Guid guid3  = Guid.fromUuid(UUID.randomUUID()); "<AssertPlaceHolder>";  }
equals(Object o) {  if (o == null) { return false; } Class theClass = o.getClass(); if (theClass.isAssignableFrom(Guid.class)) { return this.uuid.equals(((Guid) o).uuid); } return super.equals(o); }
[*] target: assertFalse(guid1.equals(guid3))
[-] pred: org. junit. Assert. assertFalse ( guid1. equals ( guid3 ) )
************************************
************************************
[+] input: findSupportedDiseaseByName_successful() { SupportedDisease covid = _repo.findByName("COVID-19").orElse(null); "<AssertPlaceHolder>"; assertEquals("96741-4", covid.getLoinc()); }
findByName(String name);
[*] target: assertNotNull(covid)
[-] pred: org. junit. Assert. assertNotNull ( covid )
************************************
************************************
[+] input: getCurrentOrg_success() { Organization org = _service.getCurrentOrganization(); "<AssertPlaceHolder>"; assertEquals("DIS_ORG", org.getExternalId()); }
getCurrentOrganization() { OrganizationRoles orgRole = getCurrentOrganizationRoles().orElseThrow(MisconfiguredUserException::new); return orgRole.getOrganization(); }
[*] target: assertNotNull(org)
[-] pred: org. junit. Assert. assertNotNull ( org )
************************************
************************************
[+] input: saveTextMessageStatus_success() { String messageId = "some-message-id"; String messageStatus = "delivered";  Organization org = _dataFactory.saveValidOrganization(); Facility f = _dataFactory.createValidFacility(org); Person p = _dataFactory.createFullPerson(org); TestOrder to = _dataFactory.createTestOrder(p, f); PatientLink pl = _dataFactory.createPatientLink(to); TextMessageSent message = new TextMessageSent(pl, messageId); _textMessageSentRepo.save(message);  _service.saveTextMessageStatus(messageId, messageStatus);  List<TextMessageStatus> statuses = _textMessageStatusRepo.findAllByTextMessageSent(message);  "<AssertPlaceHolder>"; assertEquals(messageStatus, statuses.get(0).getStatus()); }
saveTextMessageStatus(String messageId, String status) { TextMessageSent message = sentRepo.findByTwilioMessageId(messageId); if (message == null) { throw new InvalidTwilioMessageIdentifierException(); }  TextMessageStatus textMessageStatus = new TextMessageStatus(message, status); statusRepo.save(textMessageStatus); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
************************************
[+] input: createBusinessAppHdrV01() { BusinessAppHdrV01 h = AppHdrFactory.createBusinessAppHdrV01( "AAAAUSXXXXX", "BBBBUSXXXXX", "REF12345", new MxId("pacs.008.001.08")); "<AssertPlaceHolder>"; assertNull(h.getBizSvc()); assertEquals("AAAAUSXXXXX", h.getFr().getFIId().getFinInstnId().getBICFI()); assertEquals("BBBBUSXXXXX", h.getTo().getFIId().getFinInstnId().getBICFI()); assertEquals("REF12345", h.getBizMsgIdr()); assertEquals("pacs.008.001.08", h.getMsgDefIdr());  final String xml = h.xml(); // for BAH v01 the date time must be ISONormalisedDateTime assertTrue(xml.contains("Z</CreDt>")); }
createBusinessAppHdrV01( final String sender, final String receiver, final String reference, final MxId id) { BusinessAppHdrV01 h = new BusinessAppHdrV01();  if (sender != null) { h.setFr(new Party9Choice()); h.getFr().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getFr().getFIId().getFinInstnId().setBICFI(sender); }  if (receiver != null) { h.setTo(new Party9Choice()); h.getTo().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getTo().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getTo().getFIId().getFinInstnId().setBICFI(receiver); }  if (reference != null) { h.setBizMsgIdr(reference); }  if (id != null) { h.setMsgDefIdr(id.id()); }  h.setCreDt(XMLGregorianCalendarUtils.now());  return h; }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // +System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseWithPrefix() { final String xml = "<h:AppHdr xmlns:h="urn:swift:xsd:$ahV10">\n" + "    <h:From>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=abcdchzz,o=swift</h:Id>\n" + "    </h:From>\n" + "    <h:To>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=dcbadeff,o=swift</h:Id>\n" + "    </h:To>\n" + "    <h:MsgRef>11308917</h:MsgRef>\n" + "    <h:CrDate>2013-12-23T15:50:00</h:CrDate>\n" + "</h:AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns:Ah="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>" + "</bar></foo>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testIdentifyMessage_FromBAH() { final String xml = "<?xml version="1.0" encoding="UTF-8"?>" + "<Message>\n" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n" + "<Fr> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>FOOCUS3NXXX</BICFI>\n" + "			<ClrSysMmbId>\n" + "				<ClrSysId>\n" + "					<Prtry>T2S</Prtry>\n" + "				</ClrSysId>\n" + "				<MmbId>ADMNUSERLUXCSDT1</MmbId>\n" + "			</ClrSysMmbId>\n" + "			<Othr>\n" + "				<Id>FOOTXE2SXXX</Id>\n" + "				</Othr> \n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</Fr> \n" + "<To> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>ABICUS33</BICFI>\n" + "			<Othr>\n" + "				<Id>AARBDE5W100</Id>\n" + "			</Othr>\n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</To> \n" + "<BizMsgIdr>2012111915360885</BizMsgIdr>\n" + "<MsgDefIdr>seev.031.002.03</MsgDefIdr> \n" + "<BizSvc>CSD</BizSvc> \n" + "<CreDt>2015-08-27T08:59:00Z</CreDt>\n" + "</AppHdr>\n" + "<Document></Document>\n" + "</Message>"; MxId id = MxParseUtils.identifyMessage(xml).orElse(null); "<AssertPlaceHolder>"; assertEquals("seev.031.002.03", id.id()); }
identifyMessage(final String xml) { Optional<String> namespace = NamespaceReader.findDocumentNamespace(xml); if (namespace.isPresent()) { return namespace.map(MxId::new); }  // if the Document does not have a namespace, try to identify the message from the header Optional<XMLStreamReader> element = NamespaceReader.findElement(xml, "MsgDefIdr"); if (!element.isPresent()) { // Legacy ahv10 header element = NamespaceReader.findElement(xml, "MsgName"); } if (element.isPresent()) { try { return Optional.of(new MxId(element.get().getElementText())); } catch (XMLStreamException e) { log.finer("Error identifying message: " + e.getMessage()); } }  return Optional.empty(); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: IOException { String xml = Lib.readResource("pacs.002-CDATA.xml"); MxPacs00200103 mx = (MxPacs00200103) new MxReadImpl().read(MxPacs00200103.class, xml, MxPacs00200103._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("11de568fd1754cb7b2fbbb3dd238ff16", mx.getAppHdr().reference()); assertEquals("UNKNOWN", mx.getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgId()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: testReadNamspaceSingleQuote2() { final String xml = "<message>" + "<AppHdr xmlns='urn:iso:std:iso:20022:tech:xsd:head.001.001.01' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<Fr><FIId><FinInstnId><BICFI>BNANAOLUXXX</BICFI></FinInstnId></FIId></Fr>" + "	<To><FIId><FinInstnId><BICFI>CIYUCNBAFUZ</BICFI></FinInstnId></FIId></To>" + "	<BizMsgIdr>asdfsd</BizMsgIdr>" + "	<MsgDefIdr>catm.004.001.02</MsgDefIdr>" + "	<CreDt>2016-09-16T22:34:48Z</CreDt>" + "</AppHdr>" + "<Document xmlns='urn:iso:std:iso:20022:tech:xsd:catm.004.001.02' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<TermnlMgmtRjctn>" + "		<Hdr>" + "			<DwnldTrf>false</DwnldTrf>" + "			<FrmtVrsn>asdfsd</FrmtVrsn>" + "			<CreDtTm>2016-09-17T10:55:10</CreDtTm>" + "		</Hdr>" + "		<Rjct>" + "			<RjctRsn>VERS</RjctRsn>" + "		</Rjct>" + "	</TermnlMgmtRjctn>" + "</Document>" + "</message>"; MxCatm00400102 mx = (MxCatm00400102) new MxReadImpl().read(MxCatm00400102.class, xml, MxCatm00400102._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("BNANAOLUXXX", mx.getAppHdr().from()); assertEquals(RejectReason1Code.VERS, mx.getTermnlMgmtRjctn().getRjct().getRjctRsn()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: IOException { final String xml = Lib.readResource("pacs.008.001.07.xml"); // System.out.println(xml); assertNotNull(xml); final MxPacs00800107 mx = (MxPacs00800107) new MxReadImpl().read(MxPacs00800107.class, xml, MxPacs00800107._classes); // System.out.println(ToStringBuilder.reflectionToString(mx)); "<AssertPlaceHolder>"; assertNotNull(mx.getFIToFICstmrCdtTrf()); assertNotNull( "123452342", mx.getFIToFICstmrCdtTrf().getCdtTrfTxInf().get(0).getPmtId().getTxId()); // System.out.println(mx); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: test() { String s = "V5__create_customers.sql"; FilenameParser.MigrationInfo migrationInfo = FilenameParser.getMigrationInfo(s); Assertions.assertEquals(5, migrationInfo.getVersion()); Assertions.assertEquals("create customers", migrationInfo.getDescription()); Assertions.assertFalse(migrationInfo.isSplitByLine()); Assertions."<AssertPlaceHolder>"; }
isTransactional() { return transactional; }
[*] target: assertTrue(migrationInfo.isTransactional())
[-] pred: org. junit. Assert. assertTrue ( migrationInfo. isTransactional() )
************************************
************************************
[+] input: test() { SaCookie cookie = new SaCookie("satoken", "xxxx-xxxx-xxxx-xxxx") .setDomain("https://sa-token.cc/") .setMaxAge(-1) .setPath("/") .setSameSite("Lax") .setHttpOnly(true) .setSecure(true);  Assertions.assertEquals(cookie.getName(), "satoken"); Assertions.assertEquals(cookie.getValue(), "xxxx-xxxx-xxxx-xxxx"); Assertions.assertEquals(cookie.getDomain(), "https://sa-token.cc/"); Assertions.assertEquals(cookie.getMaxAge(), -1); Assertions.assertEquals(cookie.getPath(), "/"); Assertions.assertEquals(cookie.getSameSite(), "Lax"); Assertions.assertEquals(cookie.getHttpOnly(), true); Assertions.assertEquals(cookie.getSecure(), true); Assertions.assertEquals(cookie.toHeaderValue(), "satoken=xxxx-xxxx-xxxx-xxxx; Domain=https://sa-token.cc/; Path=/; Secure; HttpOnly; SameSite=Lax");  Assertions."<AssertPlaceHolder>"; }
toString() { return "SaCookie [name=" + name + ", value=" + value + ", maxAge=" + maxAge  + ", domain=" + domain + ", path=" + path + ", secure=" + secure + ", httpOnly=" + httpOnly + ", sameSite=" + sameSite + "]"; }
[*] target: assertNotNull(cookie.toString())
[-] pred: org. junit. Assert. assertNotNull ( cookie. toString() )
************************************
************************************
[+] input: testTokenSign() { TokenSign tokenSign = new TokenSign(); tokenSign.setDevice("PC"); tokenSign.setValue("ttt-value");  Assertions.assertEquals(tokenSign.getDevice(), "PC"); Assertions.assertEquals(tokenSign.getValue(), "ttt-value");  Assertions."<AssertPlaceHolder>"; }
toString() { return "TokenSign [value=" + value + ", device=" + device + ", tag=" + tag + "]"; }
[*] target: assertNotNull(tokenSign.toString())
[-] pred: org. junit. Assert. assertNotNull ( tokenSign. toString ( ) )
************************************
************************************
[+] input: testCreateSign() { SoMap map = SoMap.getSoMap() .set("name", "zhang") .set("age", 18) .set("sex", "女"); SaManager.getSaSignTemplate().setSignConfig(new SaSignConfig().setSecretKey(key)); String sign = SaManager.getSaSignTemplate().createSign(map); Assertions.assertEquals(sign, "6f5e844a53e74363c2f6b24f64c4f0ff");  // 多次签名，结果一致 String sign2 = SaManager.getSaSignTemplate().createSign(map); Assertions."<AssertPlaceHolder>"; }
createSign(Map<String, ?> paramsMap) { String secretKey = getSecretKey(); SaSignException.notEmpty(secretKey, "参与参数签名的秘钥不可为空", SaErrorCode.CODE_12201);  // 如果调用者不小心传入了 sign 参数，则此处需要将 sign 参数排除在外 if(paramsMap.containsKey(sign)) { // 为了保证不影响原有的 paramsMap，此处需要再复制一份 paramsMap = new TreeMap<>(paramsMap); paramsMap.remove(sign); }  // 计算签名 String paramsStr = joinParamsDictSort(paramsMap); String fullStr = paramsStr + "&" + key + "=" + secretKey; String signStr = abstractStr(fullStr);  // 输入日志，方便调试 log.debug("fullStr：{}", fullStr); log.debug("signStr：{}", signStr);  // 返回 return signStr; }
[*] target: assertEquals(sign, sign2)
[-] pred: org. junit. Assert. assertEquals ( sign, sign2 )
************************************
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509Certificate x509Cert1 = new XMLX509Certificate(TestUtils.newDocument(), cert); XMLX509Certificate x509Cert2 = new XMLX509Certificate(TestUtils.newDocument(), cert);  assertEquals(x509Cert1, x509Cert2); "<AssertPlaceHolder>"; }
hashCode() { int result = 17; try { byte[] bytes = getCertificateBytes(); for (byte element : bytes) { result = 31 * result + element; } } catch (XMLSecurityException e) { LOG.log(Level.DEBUG, e.getMessage(), e); } return result; }
[*] target: assertEquals(x509Cert1.hashCode(), x509Cert2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509Cert1. hashCode ( ), x509Cert2. hashCode ( ) )
************************************
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509SubjectName x509SubjectName1 = new XMLX509SubjectName(TestUtils.newDocument(), cert); assertNotNull(x509SubjectName1.getSubjectName()); XMLX509SubjectName x509SubjectName2 = new XMLX509SubjectName(TestUtils.newDocument(), cert);  assertEquals(x509SubjectName1, x509SubjectName2); "<AssertPlaceHolder>"; }
hashCode() { int result = 17; result = 31 * result + this.getSubjectName().hashCode(); return result; }
[*] target: assertEquals(x509SubjectName1.hashCode(), x509SubjectName2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509SubjectName1. hashCode ( ), x509SubjectName2. hashCode ( ) )
************************************
************************************
[+] input: testConflictingOrderOfProcessors3() { AbstractOutputProcessor outputProcessor1 = new AbstractOutputProcessor() { }; outputProcessor1.setAction(null, -1); AbstractOutputProcessor outputProcessor2 = new AbstractOutputProcessor() { }; outputProcessor2.setAction(null, -1); AbstractOutputProcessor outputProcessor3 = new AbstractOutputProcessor() { }; outputProcessor3.setAction(null, -1); outputProcessor1.addBeforeProcessor(outputProcessor2.getClass()); outputProcessor2.addBeforeProcessor(outputProcessor3.getClass()); outputProcessor3.addBeforeProcessor(outputProcessor1.getClass());  OutputProcessorChain outputProcessorChain = new OutputProcessorChainImpl(new OutboundSecurityContextImpl()); outputProcessorChain.addProcessor(outputProcessor1); outputProcessorChain.addProcessor(outputProcessor2); assertThrows(IllegalArgumentException.class, () -> outputProcessorChain.addProcessor(outputProcessor3));  List<OutputProcessor> outputProcessors = outputProcessorChain.getProcessors(); "<AssertPlaceHolder>"; assertEquals(outputProcessor1, outputProcessors.get(0)); assertEquals(outputProcessor2, outputProcessors.get(1)); }
getProcessors();
[*] target: assertEquals(2, outputProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, outputProcessors. size ( ) )
************************************
************************************
[+] input: testHashPasswordCorrectly() { PasswordUtils utils = new PasswordUtils();  String password = "mypassword"; String hashed = PasswordUtils.hashPassword(password); assertNotNull(hashed);  boolean isValid = PasswordUtils.checkPassword(password, hashed); assertTrue(isValid);  isValid = PasswordUtils.checkPassword("notmypassword", hashed); "<AssertPlaceHolder>"; }
checkPassword(String password_plaintext, String stored_hash) { boolean password_verified = false;  if(null == stored_hash || !stored_hash.startsWith("$2a$")) throw new java.lang.IllegalArgumentException("Invalid hash provided for comparison");  password_verified = BCrypt.checkpw(password_plaintext, stored_hash);  return(password_verified); }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
************************************
[+] input: testIsStarted() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); when(recording.getState()).thenReturn(RecordingState.RUNNING); "<AssertPlaceHolder>"; }
isStarted() { return (recording != null) && RecordingState.RUNNING.equals(recording.getState()); }
[*] target: assertTrue(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertTrue ( jfrRecorder. isStarted() )
************************************
************************************
[+] input: testIsStop() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); verify(recording, never()).stop(); jfrRecorder.stop(); verify(recording).stop(); "<AssertPlaceHolder>"; }
isStarted() { return (recording != null) && RecordingState.RUNNING.equals(recording.getState()); }
[*] target: assertFalse(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertFalse ( jfrRecorder. isStarted() )
************************************
************************************
[+] input: skipClustersWithoutDoubleQuote() { ThreadDumpRegion region = new ThreadDumpRegion("something\n\n"else"", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""else""); "<AssertPlaceHolder>"; }
findNextStack() { while (findNextSection()) { if (threadDump.charAt(startIndex) == '"') { return true; } }  return false; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
************************************
[+] input: edgeCase1_simplyHitsEnd() { ThreadDumpRegion region = new ThreadDumpRegion(""something"\n\n", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""something""); "<AssertPlaceHolder>"; }
findNextStack() { while (findNextSection()) { if (threadDump.charAt(startIndex) == '"') { return true; } }  return false; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
************************************
[+] input: testPostAndGetBody() { String testValue = "testValue"; when(restTemplate.postForEntity(startsWith("http://document:8080"), any(HttpEntity.class), eq(String.class))) .thenReturn(new ResponseEntity<>(testValue, HttpStatus.OK)); String tenantId = "smart-upload"; String responseBody = buildRestHelper(null) .withQueryParam("tenantId", tenantId) .withQueryParam("userId", "userId_123") .withHeader("header1", "test_header") .withHeader("header2", List.of("value1", "value2")) .postAndGetBody(restTemplate, String.class);  "<AssertPlaceHolder>"; verify(restTemplate).postForEntity(uriCaptor.capture(), httpEntityCaptor.capture(), responseTypeCaptor.capture()); assertEquals("http://document:8080/documents/search/?tenantId=" + tenantId + "&userId=userId_123", uriCaptor.getValue()); assertEquals(String.class, responseTypeCaptor.getValue()); HttpEntity<List<UUID>> httpEntity = httpEntityCaptor.getValue(); assertTrue(httpEntity.getHeaders().getAccept().contains(MediaType.APPLICATION_JSON)); assertEquals(MediaType.APPLICATION_FORM_URLENCODED, httpEntity.getHeaders().getContentType()); assertTrue(httpEntity.getHeaders().get("Cookie").contains(TEST_COOKIE)); assertTrue(httpEntity.getHeaders().get("Authorization").contains("Bearer 1234")); assertTrue(httpEntity.getHeaders().get("header1").contains("test_header")); assertTrue(httpEntity.getHeaders().get("header2").containsAll(List.of("value1", "value2"))); }
postAndGetBody(RestTemplate restTemplate, Class<T> responseType) { return post(restTemplate, responseType).getBody(); }
[*] target: assertEquals(testValue, responseBody)
[-] pred: org. junit. Assert. assertEquals ( testValue, responseBody )
************************************
************************************
[+] input: shouldCacheUser() { User user = new User(); user.setId("test_user_id"); user.setTeamId("test_team_id"); user.setSlackAccessToken("test_slack_token"); user.setSlackBotToken("test_slack_bot_token"); user.setSpotifyRefreshToken("test_spotify_token"); user.setTimezoneOffsetSeconds(1000); user.setState(UUID.randomUUID()); CachedUser cachedUser = SpotUtil.toCachedUser(user, "test_token"); "<AssertPlaceHolder>"; assertEquals(user.getId(), cachedUser.getId()); assertEquals(user.getSlackAccessToken(), cachedUser.getSlackAccessToken()); assertEquals(user.getSpotifyRefreshToken(), cachedUser.getSpotifyRefreshToken()); assertEquals("test_token", cachedUser.getSpotifyAccessToken()); assertEquals(1000, cachedUser.getTimezoneOffsetSeconds()); }
toCachedUser(User user, String spotifyAccessToken) { return CachedUser.builder() .id(user.getId()) .teamId(user.getTeamId()) .slackAccessToken(user.getSlackAccessToken()) .slackBotToken(user.getSlackBotToken()) .spotifyRefreshToken(user.getSpotifyRefreshToken()) .spotifyAccessToken(spotifyAccessToken) .timezoneOffsetSeconds(user.getTimezoneOffsetSeconds()) .disabled(user.isDisabled()) .emojis(user.getEmojis()) .spotifyItems(user.getSpotifyItems()) .spotifyDeviceIds(user.getSpotifyDevices()) .syncStartHour(user.getSyncFrom()) .syncEndHour(user.getSyncTo()) .build(); }
[*] target: assertNotNull(cachedUser)
[-] pred: org. junit. Assert. assertNotNull ( cachedUser )
************************************
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); invocationModal.getView() .getState() .getStateValues() .get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getViewId()); assertNotNull(updateModal.getHash()); assertNotNull(updateModal.getView().getType()); assertNotNull(updateModal.getView().getSubmit()); assertEquals(18, updateModal.getView().getBlocks().size()); Block warningBlock = updateModal.getView().getBlocks().get(8); assertEquals(BLOCK_ID_INVALID_HOURS, warningBlock.getBlockId()); assertEquals(":warning: start and end time cannot identical", warningBlock.getElements().get(0).getText()); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); State invalidHoursState = invocationModal.getView().getState(); invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); // add warning userInteractionService.handleUserInteraction(invocationModal);  invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("20:00"); invocationModal.getView().setState(invalidHoursState); //remove warning InteractionModal returnedModal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient, times(2)).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updatedModal = interactionModalCaptor.getValue(); assertNotNull(updatedModal.getView()); assertNotNull(updatedModal.getView().getType()); assertNotNull(updatedModal.getView().getSubmit()); assertEquals(17, updatedModal.getView().getBlocks().size()); assertTrue(updatedModal.getView().getBlocks().stream().noneMatch(block -> BLOCK_ID_INVALID_HOURS.equals(block.getBlockId()))); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(returnedModal)
[-] pred: org. junit. Assert. assertNull ( returnedModal )
************************************
************************************
[+] input: IOException { String triggerId = "trigger123"; String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.setTriggerId(triggerId); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_SPOTIFY_LINKS); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_PUSH_URI), interactionModalCaptor.capture(), eq(TEST_USER_ID)); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getView()); assertEquals(triggerId, updateModal.getTriggerId()); assertEquals(NO_TRACK_WARNING_MESSAGE, updateModal.getView().getBlocks().get(0).getText().getTextValue()); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
************************************
[+] input: JsonProcessingException { // Write a message (John Wick user) to Kafka using a test producer String uuid = "11111"; String message = objectMapper.writeValueAsString(new User(uuid, "John", "Wick")); producer.send(new ProducerRecord<>(TOPIC_NAME, 0, uuid, message)); producer.flush();  // Read the message and assert its properties verify(userKafkaConsumer, timeout(10000).times(1)) .logKafkaMessages(userArgumentCaptor.capture(), topicArgumentCaptor.capture(), partitionArgumentCaptor.capture(), offsetArgumentCaptor.capture());  User user = userArgumentCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("11111", user.getUuid()); assertEquals("John", user.getFirstName()); assertEquals("Wick", user.getLastName()); assertEquals(TOPIC_NAME, topicArgumentCaptor.getValue()); assertEquals(0, partitionArgumentCaptor.getValue()); assertEquals(0, offsetArgumentCaptor.getValue()); }
logKafkaMessages(@Payload User user, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic, @Header(KafkaHeaders.RECEIVED_PARTITION) Integer partition, @Header(KafkaHeaders.OFFSET) Long offset) { logger.info("Received a message contains a user information with id {}, from {} topic, " + "{} partition, and {} offset", user.getUuid(), topic, partition, offset); userService.save(user); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
************************************
[+] input: JsonProcessingException { // Create a user and write to Kafka User user = new User("11111", "John", "Wick"); producer.writeToKafka(user);  // Read the message (John Wick user) with a test consumer from Kafka and assert its properties ConsumerRecord<String, String> message = records.poll(500, TimeUnit.MILLISECONDS); "<AssertPlaceHolder>"; assertEquals("11111", message.key()); User result = objectMapper.readValue(message.value(), User.class); assertNotNull(result); assertEquals("John", result.getFirstName()); assertEquals("Wick", result.getLastName()); }
writeToKafka(User user) { kafkaTemplate.send(topic, user.getUuid(), user); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testSaveUser() { userService.save(new User(UUID.randomUUID().toString(), "John", "McClane")); userService.save(new User(UUID.randomUUID().toString(), "Chandler", "Bing")); userService.save(new User(UUID.randomUUID().toString(), "Joey", "Tribbiani")); userService.save(new User(UUID.randomUUID().toString(), "John", "Kennedy"));  List<com.madadipouya.springkafkatest.entity.User> users = userService.getUsers("John");  "<AssertPlaceHolder>"; assertEquals(4, users.size()); assertEquals("Kennedy", users.get(0).getLastName()); assertEquals("McClane", users.get(1).getLastName()); assertEquals("Rambo", users.get(2).getLastName()); assertEquals("Wick", users.get(3).getLastName()); }
getUsers(String firstName);
[*] target: assertNotNull(users)
[-] pred: org. junit. Assert. assertNotNull ( users )
************************************
************************************
[+] input: shouldReturnAEmptyDto_onceEventObjectIsNotValid() { EventDto eventDto = EventMapper.map(null); "<AssertPlaceHolder>"; assertNull(eventDto.getMetadata().getNamespace()); }
map(Event event) { EventDto eventDto = new EventDto();  if (event == null) { return eventDto; }  eventDto.setMetadata(TransformerUtil.fromResource(event.getMetadata())); eventDto.setType(event.getType()); eventDto.setAction(event.getAction()); eventDto.setReason(event.getReason()); eventDto.setMessage(event.getMessage()); eventDto.setFirstTimestamp(getFirstTimestamp(event)); eventDto.setLastTimestamp(getLastTimestamp(event)); eventDto.setCount(getEventCount(event)); eventDto.setReportingComponent(getReportingComponent(event)); eventDto.setReportingInstance(getReportingInstance(event)); eventDto.setInvolvedObject(ObjectReferenceMapper.map(event.getInvolvedObject())); eventDto.setRelated(ObjectReferenceMapper.map(event.getRelated())); return eventDto; }
[*] target: assertNotNull(eventDto)
[-] pred: org. junit. Assert. assertNotNull ( eventDto )
************************************
************************************
[+] input: testDeepClone() { VirtualMouse expected = new VirtualMouse(); expected.updateFromEvent(VirtualKey.LC, true, 15, 0, 0); expected.updateFromEvent(VirtualKey.MOUSEMOVED, true, 0, 0, 0);  VirtualMouse actual = expected.clone();  "<AssertPlaceHolder>"; assertIterableEquals(expected.getSubticks(), actual.getSubticks()); }
clone() { return new VirtualMouse(new HashSet<>(this.pressedKeys), scrollWheel, cursorX, cursorY, new ArrayList<>(subtickList), isIgnoreFirstUpdate()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
compile(String className, String sourceCode) throws Exception { return addSource(className, sourceCode).compileAll().get(className); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   private static class InnerHelloWorld { int inner; }\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
compile(String className, String sourceCode) throws Exception { return addSource(className, sourceCode).compileAll().get(className); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(MediaType.JSON, new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes()))).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("https://example.com").loader(MOCK_LOADER).base("").get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(URI.create("https://example.com")).loader(MOCK_LOADER).mode(JsonLdVersion.V1_0).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com  ").loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(MediaType.JSON, new InputStreamReader(new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes())))).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: testI2() { Collection<Link> result = Link.of("https://example.org/"); "<AssertPlaceHolder>"; assertEquals(0, result.size()); }
of(final String linkHeader) { return of(linkHeader, null); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.nq");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.N_QUADS.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.json");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.jsonld");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON_LD.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: configRoot_file() {  var configUrl = "config_dir/sample-config.yaml"; var expectedRoot = tempDir.resolve("config_dir").normalize();  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = Paths.get(manager.configRoot()).normalize();  "<AssertPlaceHolder>"; assertTrue(Files.exists(configRoot)); assertTrue(Files.isDirectory(configRoot)); }
configRoot() { return rootConfigDir; }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
************************************
[+] input: testTasks_basicTask() {  var TASKS = List.of(StandardArgs.task("do_something", "desc"));  var command = "--config app.conf --task do_something"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testTasks_argTask() {  var TASKS = List.of(StandardArgs.task("do_something", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something ARG_VALUE"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertEquals("ARG_VALUE", tasks.get(0).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testTasks_multipleTasks() {  var TASKS = List.of( StandardArgs.task("do_something", "desc"), StandardArgs.task("do_something_else", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something --task do_something_else ARG1 --task do_something_else ARG2"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); assertEquals("do_something_else", tasks.get(1).getTaskName()); assertEquals("ARG1", tasks.get(1).getTaskArg()); assertEquals("do_something_else", tasks.get(2).getTaskName()); assertEquals("ARG2", tasks.get(2).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(3, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 3, tasks. size ( ) )
************************************
************************************
[+] input: testSerialization() { FeatureMap fm = buildMap(); FeatureDomainProto fmProto = fm.serialize(); FeatureMap deserFm = FeatureMap.deserialize(fmProto); assertEquals(fm, deserFm);  ImmutableFeatureMap ifm = new ImmutableFeatureMap(fm); FeatureDomainProto ifmProto = ifm.serialize(); FeatureMap deserIfm = FeatureMap.deserialize(ifmProto); "<AssertPlaceHolder>"; }
deserialize(FeatureDomainProto proto) { return ProtoUtil.deserialize(proto); }
[*] target: assertEquals(ifm, deserIfm)
[-] pred: org. junit. Assert. assertEquals ( ifm, deserIfm )
************************************
************************************
[+] input: testHashed() { FeatureMap fm = buildMap(); String salt = "This is a salt"; Hasher hasher = new HashCodeHasher(salt); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(fm,hasher);  // Note this check is only true if the hashing didn't induce collisions. assertEquals(fm.size(),hfm.size);  FeatureDomainProto hfmProto = hfm.serialize(); FeatureMap deserHfm = FeatureMap.deserialize(hfmProto); // Serialization intentionally doesn't preserve the salt. ((HashedFeatureMap) deserHfm).setSalt(salt); "<AssertPlaceHolder>"; }
deserialize(FeatureDomainProto proto) { return ProtoUtil.deserialize(proto); }
[*] target: assertEquals(hfm, deserHfm)
[-] pred: org. junit. Assert. assertEquals ( hfm, deserHfm )
************************************
************************************
[+] input: Exception { MutableFeatureMap mfm = new MutableFeatureMap(); mfm.add("goldrat", 1.618033988749); mfm.add("e", Math.E); mfm.add("pi", Math.PI); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(mfm, new MessageDigestHasher("SHA-512", "abcdefghi")); FeatureDomainProto fdp = hfm.serialize(); assertEquals(0, fdp.getVersion()); assertEquals("org.tribuo.hash.HashedFeatureMap", fdp.getClassName()); HashedFeatureMapProto hfmp = fdp.getSerializedData().unpack(HashedFeatureMapProto.class); HasherProto hasherProto = hfmp.getHasher(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.MessageDigestHasher", hasherProto.getClassName()); MessageDigestHasherProto mdhp = hasherProto.getSerializedData().unpack(MessageDigestHasherProto.class); assertEquals("SHA-512", mdhp.getHashType());  HashedFeatureMap hfmD = ProtoUtil.deserialize(fdp); hfmD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(hfm, hfmD)
[-] pred: org. junit. Assert. assertEquals ( hfm, hfmD )
************************************
************************************
[+] input: Exception { HashCodeHasher hasher = new HashCodeHasher("abcdefghi"); HasherProto hasherProto = hasher.serialize(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.HashCodeHasher", hasherProto.getClassName());  HashCodeHasher hasherD = ProtoUtil.deserialize(hasherProto); hasherD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(hasher, hasherD)
[-] pred: org. junit. Assert. assertEquals ( hasher, hasherD )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealIDInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0, 12345); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealIDInfo", infoProto.getClassName()); RealIDInfoProto proto = infoProto.getSerializedData().unpack(RealIDInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares()); assertEquals(12345, proto.getId());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealInfo", infoProto.getClassName()); RealInfoProto proto = infoProto.getSerializedData().unpack(RealInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: matrixVectorTest() { DenseMatrix a = generateA(); DenseMatrix b = generateB(); DenseMatrix c = generateC();  DenseVector vector = generateVector(); DenseMatrix oneDimMatrix = generateOneDimMatrix();  SGDVector matrixMatrixOutput; SGDVector matrixVectorOutput;  matrixMatrixOutput = a.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = a.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = b.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = b.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = c.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = c.leftMultiply(vector); "<AssertPlaceHolder>"; }
leftMultiply(SGDVector input) { if (input.size() == dim2) { double[] output = new double[dim1]; if (input instanceof DenseVector) { // If it's dense we can use loops for (int i = 0; i < dim1; i++) { for (int j = 0; j < dim2; j++) { output[i] += get(i,j) * input.get(j); } } } else { // If it's sparse we iterate the tuples for (VectorTuple tuple : input) { for (int i = 0; i < output.length; i++) { output[i] += get(i,tuple.index) * tuple.value; } } } return new DenseVector(output); } else { throw new IllegalArgumentException("input.size() != dim2, input.size() = " + input.size() + ", dim1,dim2 = " + dim1+","+dim2); } }
[*] target: assertEquals(matrixMatrixOutput,matrixVectorOutput)
[-] pred: org. junit. Assert. assertEquals ( matrixMatrixOutput, matrixVectorOutput )
************************************
************************************
[+] input: serializationTest() { SparseVector a = generateVectorA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); assertEquals(a, deser);  SparseVector empty = new SparseVector(10, new int[0], new double[0]); proto = empty.serialize(); deser = Tensor.deserialize(proto); assertEquals(empty, deser);  SparseVector full = new SparseVector(10, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 5); proto = full.serialize(); deser = Tensor.deserialize(proto); "<AssertPlaceHolder>";  }
serialize() { TensorProto.Builder builder = TensorProto.newBuilder();  builder.setVersion(CURRENT_VERSION); builder.setClassName(SparseVector.class.getName());  SparseTensorProto.Builder dataBuilder = SparseTensorProto.newBuilder(); dataBuilder.addAllDimensions(Arrays.stream(shape).boxed().collect(Collectors.toList())); ByteBuffer indicesBuffer = ByteBuffer.allocate(indices.length * 4).order(ByteOrder.LITTLE_ENDIAN); IntBuffer intBuffer = indicesBuffer.asIntBuffer(); intBuffer.put(indices); intBuffer.rewind(); ByteBuffer valuesBuffer = ByteBuffer.allocate(values.length * 8).order(ByteOrder.LITTLE_ENDIAN); DoubleBuffer doubleBuffer = valuesBuffer.asDoubleBuffer(); doubleBuffer.put(values); doubleBuffer.rewind(); dataBuilder.setIndices(ByteString.copyFrom(indicesBuffer)); dataBuilder.setValues(ByteString.copyFrom(valuesBuffer)); dataBuilder.setNumNonZero(values.length); builder.setSerializedData(Any.pack(dataBuilder.build()));  return builder.build(); }
[*] target: assertEquals(full, deser)
[-] pred: org. junit. Assert. assertEquals ( full, deser )
************************************
************************************
[+] input: testEqualsAndHashCode() { MultiLabel a = new MultiLabelFactory().generateOutput("a"); MultiLabel b = new MultiLabelFactory().generateOutput("a"); assertEquals(a, b); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(labelStrings); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() )
************************************
************************************
[+] input: testEmpty() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty(); assertEquals("", p.toString()); "<AssertPlaceHolder>"; }
isEmpty() { return predicate == null; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
************************************
[+] input: testGetFollowingIds() { List<String> ids = twitterClient.getFollowingIds("786491"); "<AssertPlaceHolder>"; assertTrue(ids.size() > 1000); }
getFollowingIds(String userId);  /** * Get the relation between two users calling https://api.twitter.com/1.1/friendships/ * * @param userId1 id of the first user * @param userId2 id of the second user * @return One of the following RelationType enum value : FRIENDS if the two users are following each other, NONE if they neither of the two is * following the other, FOLLOWER if user2 follows user1, FOLLOWING if user1 follows user2 */ RelationType getRelationType(String userId1, String userId2);  /** * Get the twitter rate limit status calling https://api.twitter.com/1.1/application/ * * @return the twitter response */ RateLimitStatus getRateLimitStatus();  /** * Search tweets from last 30 days calling https://api.twitter.com/1.1/tweets/search/30day/dev.json Your development environment name should be * "dev". See https://developer.twitter.com/en/account/environments * * @param query the search query * @param fromDate the start date * @param toDate the end date * @param envName name of the premium environment. See https://developer.twitter.com/en/account/environments * @return a list of tweets * @Deprecated <p> Use {@link ITwitterClientV2#searchTweets(String)}
[*] target: assertNotNull(ids)
[-] pred: org. junit. Assert. assertNotNull ( ids )
************************************
************************************
[+] input: testPostDM() { DmEvent result = twitterClient.postDm("Hello world !", "1120050519182016513"); "<AssertPlaceHolder>"; assertNotNull(result.getEvent().getText()); }
postDm(String text, String userId);
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetBearerToken() { String token = twitterClient.getBearerToken(); "<AssertPlaceHolder>"; assertTrue(token.length() > 50); }
getBearerToken();
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
************************************
[+] input: testGetTweetByIdWithExpansions() { String  tweetId = "1361010662714007557"; TweetV2 tweet   = (TweetV2) twitterClient.getTweet(tweetId); "<AssertPlaceHolder>"; assertEquals(3, tweet.getIncludes().getUsers().size()); Assertions.assertEquals("RedouaneBali", tweet.getIncludes().getUsers().get(0).getName()); Assertions.assertEquals("TwitterDev", tweet.getIncludes().getUsers().get(1).getName()); Assertions.assertEquals("jessicagarson", tweet.getIncludes().getUsers().get(2).getName()); assertEquals(1, tweet.getIncludes().getTweets().size()); assertEquals("2244994945", tweet.getIncludes().getTweets().get(0).getAuthorId()); assertEquals("1341761599976181763", tweet.getIncludes().getTweets().get(0).getId()); assertNotNull(tweet.getIncludes().getTweets().get(0).getEntities()); }
getTweet(String tweetId);
[*] target: assertNotNull(tweet)
[-] pred: org. junit. Assert. assertNotNull ( tweet )
************************************
************************************
[+] input: testGetListMembers() { String   listId  = "1449313282892910592"; UserList members = twitterClient.getListMembers(listId); "<AssertPlaceHolder>"; assertTrue(members.getData().size() > 1); assertNotNull(members.getData().get(0).getId()); assertNotNull(members.getData().get(0).getName()); assertNotNull(members.getData().get(0).getCreatedAt()); assertTrue(members.getData().get(0).getFollowersCount() > 0); assertTrue(members.getData().get(0).getFollowingCount() > 0); }
getListMembers(String listId);
[*] target: assertNotNull(members)
[-] pred: org. junit. Assert. assertNotNull ( members )
************************************
************************************
[+] input: testGetListTweets() { String   listId  = "1449313282892910592"; TweetList tweets = twitterClient.getListTweets(listId,  AdditionalParameters.builder().recursiveCall(false).maxResults(150).build()); "<AssertPlaceHolder>"; assertTrue(tweets.getData().size() > 1); assertNotNull(tweets.getData().get(0).getId()); assertNotNull(tweets.getData().get(0).getText()); assertNotNull(tweets.getData().get(0).getCreatedAt()); }
getListTweets(String listId, AdditionalParameters additionalParameters);
[*] target: assertNotNull(tweets)
[-] pred: org. junit. Assert. assertNotNull ( tweets )
************************************
************************************
[+] input: testWrite() { Document d = new JDocument();  d.setString("$.id", "id"); d.setString("$.info.iid", "iid");  d.setString("$.members[0].first_name", "Deepak"); d.setString("$.members[%].first_name", "Deepak", "0"); d.setString("$.members[sex=male].first_name", "Deepak"); d.setString("$.members[sex=male].last_name", "Arora");  d.setString("$.members[sex=male].phones[type=home].type", "home"); d.setString("$.members[sex=%].phones[type=%].type", "home", "male", "home");  d.setString("$.members[0].phones[type=home].number", "9999999999"); d.setString("$.info.iid", "12345678"); d.setString("$.addresses[0].line_1", "line 1"); d.setString("$.addresses[1].line_1", "line 1"); d.setString("$.addresses[2].line_1", "line 1"); d.setInteger("$.members[0].index", 0); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=home].is_primary", true); d.setString("$.members[sex=female].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_5_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_17", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testWriteTyped() { Document d = getTypedDocument("sample_7_model", null);  d.setString("$.id", "id"); d.setString("$.info.iid", "iid"); d.setString("$.members[0].first_name", "Deepak"); d.setInteger("$.members[0].age", 48); d.setString("$.members[type=basic].first_name", "Deepak"); d.setString("$.members[type=basic].last_name", "Arora"); d.setString("$.members[type=basic].phones[type=home].type", "Home"); d.setString("$.members[0].phones[type=Home].number", "11111111111"); d.setString("$.info.iid", "12345678"); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=Home].is_primary", true); d.setString("$.members[type=supp].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_7_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_38", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDelete() { Document d = getBaseDocument("/jdocs/sample_1.json");  // nothing should happen d.deletePath("$.laksdlkj");  boolean b = d.pathExists("$.members[0].phones[0].number"); assertEquals(true, b);  d.deletePath("$.members[0].phones[0].number"); b = d.pathExists("$.members[0].phones[0].number"); assertEquals(false, b);  d.deletePath("$.members[0].phones[0]"); int size = d.getArraySize("$.members[0].phones[]"); assertEquals(size, 1);  d.deletePath("$.members[sex=female]"); b = d.pathExists("$.members[sex=female]"); assertEquals(false, b);  String expected = getCompressedJson("/jdocs/sample_4_expected.json"); String actual = d.getJson();  "<AssertPlaceHolder>";  // nothing should happen d.deletePath("$.members[2]"); d.deletePath("$.members[0].phones[1]");  // just to show that we can specify [] to denote we are deleting an array block d.deletePath("$.members[]"); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCopy() { // test case 1 Document fromDoc = getBaseDocument("/jdocs/sample_1.json"); Document toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$.info"); toDoc.setContent(fromDoc, "$.members[%]", "$.members[%]", 0 + "", 0 + "");  try { toDoc.setContent(fromDoc, "$.id", "$.id"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); assertEquals(e.getErrorCode(), "jdoc_err_22"); }  fromDoc.deletePath("$.id"); fromDoc.deletePath("$.members[1]"); String expected = fromDoc.getJson(); String actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 2 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$"); expected = getCompressedJson("/jdocs/sample_2_1_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 3 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$", "$.members[type=basic].block"); expected = getCompressedJson("/jdocs/sample_2_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 4 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$", "$"); expected = getCompressedJson("/jdocs/sample_6_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 5 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[%]", "$.application.members[%]", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_3_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 6 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[]", "$.application.members[]"); expected = getCompressedJson("/jdocs/sample_6_4_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 7 fromDoc = getTypedDocument("sample_6_model", null); fromDoc.setInteger("$.application.members[0].phones[0].docs[0].index", 0); fromDoc.setString("$.application.members[0].phones[0].docs[0].name", "Deepak"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[0].phones[0].docs[%]", "$.application.members[%].phones[%].docs[%]", 0 + "", 0 + "", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_5_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>";  // test case 8 - we just check that it does not throw an exception fromDoc = getBaseDocument("/jdocs/sample_25.json"); toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses[]", "$.[]"); assertTrue(true);  toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses", "$.[]"); assertTrue(true);  toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses[]"); assertTrue(true);  try { toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); } }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { Document fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6_frag.json"); Document toDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc.merge(fromDoc, null); String expected = getCompressedJson("/jdocs/sample_6_1_expected.json"); String actual = toDoc.getJson(); assertEquals(expected, actual);  fromDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9_frag.json"); toDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_9_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // this tests the merging of value arrays fromDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10_frag.json"); toDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_10_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testEqualsFalse() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Integer> p2 = new Property<Integer>("foo", Integer.class); final Property<Boolean> p3 = new Property<Boolean>("bar", Boolean.class);  assertFalse(p1.equals(null)); assertFalse(p1.equals(Boolean.TRUE)); assertFalse(p1.equals(p2)); "<AssertPlaceHolder>"; }
equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  final Property<?> p = (Property<?>) o; return name.equals(p.name) && type.equals(p.type); }
[*] target: assertFalse(p1.equals(p3))
[-] pred: org. junit. Assert. assertFalse ( p1. equals ( p3 ) )
************************************
************************************
[+] input: testHashCodeEquals() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Boolean> p2 = new Property<Boolean>("foo", Boolean.class);  assertEquals(p1.hashCode(), p1.hashCode()); "<AssertPlaceHolder>"; }
hashCode() { return hash; }
[*] target: assertEquals(p1.hashCode(), p2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( p1. hashCode(), p2. hashCode() )
************************************
************************************
[+] input: testInitialNullBug3465() { // SequenceEncoder was failing to include initial null in sequence // Nulls are decoded as empty strings final String value2 = "value"; final char delim = ';';  final SequenceEncoder se = new SequenceEncoder(null, delim); se.append(value2);  final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), delim);  assertEquals("", sd.nextToken()); "<AssertPlaceHolder>"; }
nextToken() { if (!hasMoreTokens()) throw new NoSuchElementException();  if (start == stop) { // token for "null" is the empty string val = null; return ""; }  if (buf != null) { buf.setLength(0); }  String tok = null; int i = start; for ( ; i < stop; ++i) { if (val.charAt(i) == delim) { if (i > 0 && val.charAt(i - 1) == '\') { // escaped delimiter; piece together the token if (buf == null) { buf = new StringBuilder(); } buf.append(val, start, i - 1); start = i; } else { // real delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start, i); } else { // had an earlier escape; cobble on the end buf.append(val, start, i); } start = i + 1; break; } } }  if (start < i) { // i == stop; we reached the end without a delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start); } else { // had an earlier escape; cobble on the end buf.append(val, start, stop); } val = null; }  return unquote(tok != null ? tok : buf).intern(); }
[*] target: assertEquals(value2, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( value2, sd. nextToken ( ) )
************************************
************************************
[+] input: testDecoderCopyFromStart() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
hasNext() { return hasMoreTokens(); }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
************************************
[+] input: testDecoderCopyFromMiddle() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  sd1.nextToken(); sd1.nextToken();  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
hasNext() { return hasMoreTokens(); }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, data);  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  try (OutputStream out = z.getOutputStream(name)) { out.write(data); }  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: IOException { final String name = "pom.xml"; final Path extPath = Path.of(name); final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, extPath.toFile());  // file is there now assertTrue(z.isModified()); assertFile(name, extPath, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, extPath, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: IOException { final Path p = testArchivePath(); try (ZipArchive z = new ZipArchive(p.toFile())) { z.close(); assertTrue(z.isClosed()); z.close(); assertTrue(z.isClosed()); z.close(); "<AssertPlaceHolder>"; } }
isClosed() { return closed; }
[*] target: assertTrue(z.isClosed())
[-] pred: org. junit. Assert. assertTrue ( z. isClosed() )
************************************
************************************
[+] input: testIsShutdownTrue() { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.isShutdown()); "<AssertPlaceHolder>"; }
isShutdown() { return shutdown.get(); }
[*] target: assertTrue(ex.isShutdown())
[-] pred: org. junit. Assert. assertTrue ( ex. isShutdown() )
************************************
************************************
[+] input: InterruptedException { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.awaitTermination(1L, TimeUnit.SECONDS)); "<AssertPlaceHolder>"; }
isTerminated() { return shutdown.get() && poison_pill.isDone(); }
[*] target: assertTrue(ex.isTerminated())
[-] pred: org. junit. Assert. assertTrue ( ex. isTerminated() )
************************************
************************************
[+] input: testRef() { JsonObject resolved = JsonRef.resolve(CIRCULAR);  "<AssertPlaceHolder>"; assertNotNull(resolved.getJsonObject("definitions")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address")); assertEquals( "string", resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address") .getString("type")); }
resolve(JsonObject json) { return JsonRef.resolve(json); }
[*] target: assertNotNull(resolved)
[-] pred: org. junit. Assert. assertNotNull ( resolved )
************************************
************************************
[+] input: testStorageTemplateDataOnSourcedSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.JOURNAL, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData entryAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = entryAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookRented", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.JOURNAL, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertEquals("BookRentedAdapter", entryAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("JournalProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(4, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookPurchased")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorEntity")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookEntity")); Assertions.assertEquals("BookRented", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookRentedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("BookPurchased", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("BookPurchasedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(2, storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).size()); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("AuthorEntity")); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("BookEntity")); Assertions.assertEquals("JournalProvider", storeProviderTemplateData.filename()); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
************************************
[+] input: testStorageTemplateDataOnStatefulSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(2, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals("StateStoreProvider", storeProviderTemplateData.filename()); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
************************************
[+] input: testStorageTemplateDataOnStatefulCQRSModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypesForCQRS(), ProjectionType.NONE, false, true);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final List<TemplateData> storeProviders = allTemplatesData.stream() .filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)) .collect(Collectors.toList());  IntStream.range(0, 1).forEach(modelClassificationIndex -> { final TemplateData storeProviderTemplateData = storeProviders.get(modelClassificationIndex); final Model model = modelClassificationIndex == 0 ? Model.COMMAND : Model.QUERY; final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters(); final int expectedImports = modelClassificationIndex == 0 ? 2 : 1; Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(model, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals(model.title + "StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(expectedImports, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(model.title  + "StateStoreProvider", storeProviderTemplateData.filename()); }); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(9, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 9, allTemplatesData. size ( ) )
************************************
************************************
