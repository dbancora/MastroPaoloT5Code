[+] input: getCreateTableSql() {  PostgreSqlDriver postgreSqlDriver = new PostgreSqlDriver(); String tableDDL = postgreSqlDriver.getCreateTableSql(table); String expect = "CREATE TABLE "public"."user" (\n" + "\t"id" BIGINT NOT NULL,\n" + "\t"username" VARCHAR(255) NOT NULL,\n" + "\t"password" VARCHAR(255) NOT NULL,\n" + "\t"email" VARCHAR(255) NOT NULL,\n" + "\t"phone" VARCHAR(20) NOT NULL,\n" + "\t"age" INT,\n" + "\t"gender" BOOLEAN,\n" + "\t"height" DECIMAL(5,2),\n" + "\t"birthday" DATE,\n" + "\t"register_time" TIMESTAMP NOT NULL, \n" + "\tPRIMARY KEY ("id")\n" + ");\n" + "COMMENT ON TABLE "public"."user" IS '用户表';\n" + "COMMENT ON COLUMN "public"."user"."id" IS '用户id';\n" + "COMMENT ON COLUMN "public"."user"."username" IS '用户名';\n" + "COMMENT ON COLUMN "public"."user"."password" IS '密码';\n" + "COMMENT ON COLUMN "public"."user"."email" IS '邮箱';\n" + "COMMENT ON COLUMN "public"."user"."phone" IS '电话号码';\n" + "COMMENT ON COLUMN "public"."user"."age" IS '年龄';\n" + "COMMENT ON COLUMN "public"."user"."gender" IS '性别';\n" + "COMMENT ON COLUMN "public"."user"."height" IS '身高';\n" + "COMMENT ON COLUMN "public"."user"."birthday" IS '生日';\n" + "COMMENT ON COLUMN "public"."user"."register_time" IS '注册时间';\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, tableDDL)
[-] pred: org. junit. Assert. assertEquals ( expect, tableDDL )
************************************
[+] input: testGetMethodWithInvalidParams() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnInteger", String.class);  "<AssertPlaceHolder>"; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
[+] input: testListSwdsVersionsByJobId() { List<Long> ids = jobDatasetVersionMapper.listDatasetVersionIdsByJobId( 13L); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( CollectionUtils.isEqualCollection(List.of(datasetVersionEntity.getId(), datasetVersionEntity2.getId()), ids));  }
[*] target: assertEquals(2, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ids. size ( ) )
************************************
[+] input: testAddAndGet() { String taskUuid = UUID.randomUUID().toString(); TaskEntity task = TaskEntity.builder() .taskStatus(TaskStatus.CREATED).retryNum(0).taskUuid(taskUuid).stepId(1L).build(); taskMapper.addTask(task); TaskEntity db2Memory = taskMapper.findTaskById(task.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(task, db2Memory)
[-] pred: org. junit. Assert. assertEquals ( task, db2Memory )
************************************
[+] input: shouldBuildResultVariableInternalScript() { Message message = MessageFactory.resultVariableInternalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Result variable is set to Zeebe script result variable."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: addsTwoTasks() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name); todoList.addTask(task2Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); assertEquals(task2Name, task2NameOf(todoList)); }
[*] target: assertEquals(2, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, todoList. size() )
************************************
[+] input: testDense() { long[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  LongSparseNdArray instance = new LongSparseNdArray(indices, values, DimensionalSpace.create(shape)); LongNdArray denseInstance = instance.toDense(); LongNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: equals_true_when_same_object() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(vec3c);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: IOException { final String rawCpuSetInfo = "/docker/1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "1bfde5a828d33da2aeb5aab0d340f3a032b46bc1d0ca5765c502828b6f148c91"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildResource() { Message message = MessageFactory.resource(random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IOException { final String rawCpuSetInfo = "/kubepods/besteffort/pod72832d24-7655-487c-8b85-3f01844639a9/" + "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; writeStringToFile(rawCpuSetInfo, TracingAttributes.PROC_1_CPUSET_FILE_PATH); final String expected = "5046b447f1dacb1849cff896e47e3d9b1aa5bcfd513a98e382eae3343e6ab5c2"; final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.CONTAINER_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildTopic() { Message message = MessageFactory.topic(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: Exception { //given Statement statement = new Statement();  List<Performance> performances = new ArrayList<>(); performances.add(new Performance("hamlet",55)); performances.add(new Performance("as-like",35)); performances.add(new Performance("othello",40)); Invoice invoice = new Invoice("BigCo", performances);  Map<String, Play> playMap = new HashMap<>(); playMap.put("hamlet", new Play("hamlet", PlayType.TRAGEDY)); playMap.put("as-like", new Play("As You Like It", PlayType.COMEDY)); playMap.put("othello", new Play("Othello", PlayType.TRAGEDY)); Plays plays = new Plays(playMap);  String answer = "청구내역 (고객명: BigCo)\n" + "hamlet: $650 55석\n" + "As You Like It: $580 35석\n" + "Othello: $500 40석\n" + "총액: $1730\n" + "적립 포인트: 47점"; //when String result = statement.statement(invoice, plays); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(messageKey, headers);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
[+] input: testCreateFileConfig_success() { // 准备参数 Map<String, Object> config = MapUtil.<String, Object>builder().put("basePath", "/yunai") .put("domain", "https://www.iocoder.cn").build(); FileConfigSaveReqVO reqVO = randomPojo(FileConfigSaveReqVO.class, o -> o.setStorage(FileStorageEnum.LOCAL.getStorage()).setConfig(config)) .setId(null); // 避免 id 被赋值  // 调用 Long fileConfigId = fileConfigService.createFileConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 FileConfigDO fileConfig = fileConfigMapper.selectById(fileConfigId); assertPojoEquals(reqVO, fileConfig, "id", "config"); assertFalse(fileConfig.getMaster()); assertEquals("/yunai", ((LocalFileClientConfig) fileConfig.getConfig()).getBasePath()); assertEquals("https://www.iocoder.cn", ((LocalFileClientConfig) fileConfig.getConfig()).getDomain()); // 验证 cache assertNull(fileConfigService.getClientCache().getIfPresent(fileConfigId)); }
[*] target: assertNotNull(fileConfigId)
[-] pred: org. junit. Assert. assertNotNull ( fileConfigId )
************************************
[+] input: visualizeGraphTest() { final var graph = new DirectedAcyclicGraph<>(); graph.addVertex("A"); graph.addVertex("B"); graph.addVertex("C"); graph.addVertex("D"); graph.addEdge("A", "B"); graph.addEdge("A", "C"); graph.addEdge("B", "D");  final var visualizer = new HorizontalGraphVisualizer<>(); final var config = new GraphLayoutConfig<>() { @NotNull @Override public Dimension getSize(@NotNull Object vertex) { return new Dimension(20, 10); }  @NotNull @Override public Dimension getSpacing() { return new Dimension(5, 5); } };  final var layouts = visualizer.create(graph, config); final var expected = List.of( new DefaultGraphLayout<>("A", new Point(0, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("B", new Point(25, 0), new Dimension(20, 10)), new DefaultGraphLayout<>("C", new Point(25, 15), new Dimension(20, 10)), new DefaultGraphLayout<>("D", new Point(50, 0), new Dimension(20, 10)) );  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, layouts)
[-] pred: org. junit. Assert. assertEquals ( expected, layouts )
************************************
[+] input: testGetProcessName4() { List<String> names = NextflowScript .getProcesseNames("\n   process process1\n{some content }\n   process process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
[+] input: registerLogicalTypeConverter_WithLogicalType_ConvertsValueUsingConverter() { GenericRecord record = new GenericData.Record(SCHEMA); record.put("lastUpdated", Instant.ofEpochMilli(1685483879));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": 1970-01-20T12:11:23.879Z, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: testContainsNameShouldReturnFalseWhenCalledWithNonExistingKey() { //given underTest.put(VERSIONED_KEY_ENTITY_ID_1_VERSION_1, key1Version1Mock);  //when final boolean actual = underTest.containsName(KEY_NAME_2);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: shouldValidateNamespaceOwnerOfConnectCluster() { Namespace namespace = Namespace.builder() .metadata(Metadata.builder() .name("myNamespace") .cluster("local") .build()) .spec(Namespace.NamespaceSpec.builder() .build()) .build();  when(aclService.isNamespaceOwnerOfResource(any(), any(), any())) .thenReturn(true);  boolean actual = connectClusterService.isNamespaceOwnerOfConnectCluster(namespace, "prefix.connect-cluster");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: run() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  // trigger data final TriggerParam triggerParam = new TriggerParam(); triggerParam.setJobId(1); triggerParam.setExecutorHandler("demoJobHandler"); triggerParam.setExecutorParams(null); triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name()); triggerParam.setGlueType(GlueTypeEnum.BEAN.name()); triggerParam.setGlueSource(null); triggerParam.setGlueUpdatetime(System.currentTimeMillis()); triggerParam.setLogId(1); triggerParam.setLogDateTime(System.currentTimeMillis());  // Act final ReturnT<String> retval = executorBiz.run(triggerParam);  // Assert result Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: testAddToAcknowledgementSetFromOriginEvent() { Map<String, Object> data = Map.of("k1","v1"); EventMetadata eventMetadata = mock(EventMetadata.class); Event originRecordEvent = JacksonEvent.builder() .withEventMetadata(eventMetadata) .withEventType("event") .withData(data) .build(); Event spyEvent = spy(originRecordEvent);  DefaultEventHandle mockEventHandle = mock(DefaultEventHandle.class); when(spyEvent.getEventHandle()).thenReturn(mockEventHandle);  Record record = splitEventProcessor .createNewRecordFromEvent(spyEvent, "v1");  Event recordEvent = (Event) record.getData(); splitEventProcessor.addToAcknowledgementSetFromOriginEvent(recordEvent, spyEvent);  DefaultEventHandle spyEventHandle = (DefaultEventHandle) spyEvent.getEventHandle(); // Verify that the add method is called on the acknowledgement set verify(spyEventHandle).getAcknowledgementSet();  AcknowledgementSet spyAckSet = spyEventHandle.getAcknowledgementSet(); DefaultEventHandle eventHandle = (DefaultEventHandle) recordEvent.getEventHandle(); AcknowledgementSet ackSet1 = eventHandle.getAcknowledgementSet();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(spyAckSet, ackSet1)
[-] pred: org. junit. Assert. assertEquals ( spyAckSet, ackSet1 )
************************************
[+] input: shouldBuildLocalVariablePropagationNotSupported() { Message message = MessageFactory.localVariablePropagationNotSupported(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildCandidateUsers() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.candidateUsers(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'candidateUsers' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: prefers_expression_with_longest_non_empty_match() { ParameterType<String> zeroOrMore = new ParameterType<>( "zero-or-more", "[a-z]*", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(zeroOrMore); ParameterType<String> exactlyOne = new ParameterType<>( "exactly-one", "[a-z]", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(exactlyOne);  List<GeneratedExpression> generatedExpressions = generator.generateExpressions("a simple step"); "<AssertPlaceHolder>"; assertEquals("{exactly-one} {zero-or-more} {zero-or-more}", generatedExpressions.get(0).getSource()); assertEquals("{zero-or-more} {zero-or-more} {zero-or-more}", generatedExpressions.get(1).getSource()); }
[*] target: assertEquals(2, generatedExpressions.size())
[-] pred: org. junit. Assert. assertEquals ( 2, generatedExpressions. size ( ) )
************************************
[+] input: shouldBuildElementAvailableInFutureVersion() { Message message = MessageFactory.elementAvailableInFutureVersion("inclusiveGateway", "8.0.0", "8.1.0"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Element 'inclusiveGateway' is not supported in Zeebe version '8.0.0'. It is available in version '8.1.0'."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testAsRecoveryUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asRecoveryUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/deletedcertificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: serialize_WithArray_ReturnsCorrectJson() { // Test for serializing an array GenericRecord record = new GenericData.Record(SCHEMA); record.put("alternateIds", new GenericData.Array<>(SCHEMA.getField("alternateIds").schema(), java.util.Arrays.asList("one", "two", "three")));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": ["one", "two", "three"], "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: shouldProperlyMapDtoToModel() { //given LectureDTO dto = new LectureDTO(); dto.setId(11L); dto.setName("lecture name");  //when LectureModel model = mapperUnderTest.toModel(dto);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(dto.getId(), model.getId()); Assertions.assertEquals(dto.getName(), model.getName()); }
[*] target: assertNotNull(model)
[-] pred: org. junit. Assert. assertNotNull ( model )
************************************
[+] input: shouldBuildFormKey() { Message message = MessageFactory.formKey(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: Exception { String pluginName = "test-plugin";  // Load the actual resource InputStream inputStream = transformersFactory.getPluginTemplateFileStream(pluginName);  "<AssertPlaceHolder>"; inputStream.close(); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
[+] input: testCreateArticle_success() { // 准备参数 ArticleCreateReqVO reqVO = randomPojo(ArticleCreateReqVO.class);  // 调用 Long articleId = articleService.createArticle(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleDO article = articleMapper.selectById(articleId); assertPojoEquals(reqVO, article); }
[*] target: assertNotNull(articleId)
[-] pred: org. junit. Assert. assertNotNull ( articleId )
************************************
[+] input: testGetEncodedCertificateSignRequestShouldReturnNullWhenCsrIsMissing() { //given final CertificateCreationInput input = CertificateCreationInput.builder() .validityStart(NOW) .subject("CN=" + LOCALHOST) .upns(Set.of(LOOP_BACK_IP)) .name(CERT_NAME_1) .dnsNames(Set.of(LOWKEY_VAULT)) .enableTransparency(false) .certAuthorityType(UNKNOWN) .contentType(CertContentType.PEM) .certificateType(null) .keyType(KeyType.EC) .keyCurveName(KeyCurveName.P_521) .extendedKeyUsage(Set.of("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")) .keyUsage(Set.of(KeyUsageEnum.KEY_ENCIPHERMENT)) .reuseKeyOnRenewal(true) .validityMonths(VALIDITY_MONTHS) .exportablePrivateKey(true) .build();  final VaultFake vault = new VaultFakeImpl(HTTPS_LOCALHOST_8443); final KeyVaultCertificateEntity entity = spy(new KeyVaultCertificateEntity(CERT_NAME_1, input, vault)); doReturn(null).when(entity).getCertificateSigningRequest();  //when final byte[] actual = entity.getEncodedCertificateSigningRequest();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: queryWithTraceIdAndSpanId() { String traceId = "12345678901234567890123456789abc"; String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId, spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: filterCompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
[+] input: IOException { // Given String taskId = "not-existing"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Item task with id not-existing not found."; HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  // When try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); // Then fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: equals_true_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: testOneProvider() { Set<Service<MyService>> services = ServiceRegistry.INSTANCE.allServicesFor(MyService.class); System.out.println(services); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, services.size())
[-] pred: org. junit. Assert. assertEquals ( 1, services. size ( ) )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedRawUri = JoyceURI.createURI(MESSAGE_KEY).get(); JoyceURI actualRawUri = importService.computeRawURI(MESSAGE_KEY, headers);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRawUri, actualRawUri)
[-] pred: org. junit. Assert. assertEquals ( expectedRawUri, actualRawUri )
************************************
[+] input: JsonProcessingException { String endpoint = this.computeEndpoint(ConnectorEndpoint.CONNECTOR_STATUS); JsonNode expected = jsonMapper.createObjectNode().put("status", "OK"); byte[] responseBody = jsonMapper.writeValueAsBytes(expected); this.mockRestCall(endpoint, null, responseBody, HttpMethod.GET, HttpStatus.OK); JsonNode actual = connectorService.getConnectorStatus(NAMESPACE, NAME, CONNECTOR); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: statUuidGenerator() { var stat = UuidGenerator.INSTANCE.stat(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
[+] input: compareTo_zero_when_equal() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act int result = vec3c1.compareTo(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.delete() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isNoContent();  }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_batch_size_equal_to_max_batch_size_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetBatchSize = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME -1, validRequestSize, ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetBatchSize)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetBatchSize )
************************************
[+] input: testCreateMailTemplate_success() { // 准备参数 MailTemplateSaveReqVO reqVO = randomPojo(MailTemplateSaveReqVO.class) .setId(null); // 防止 id 被赋值  // 调用 Long mailTemplateId = mailTemplateService.createMailTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailTemplateDO mailTemplate = mailTemplateMapper.selectById(mailTemplateId); assertPojoEquals(reqVO, mailTemplate, "id"); }
[*] target: assertNotNull(mailTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( mailTemplateId )
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listDeletedVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/deleted", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
[+] input: getQuantidadeDePessoasQueComecamComALetra_test02() { List<String> pessoas = new ArrayList<>(asList("Felix", "Daiane", "Erivelto", "Paulo", "Maycon", "Elizandro")); long quantidade = ArrayLists.getQuantidadeDePessoasQueComecamComALetra(pessoas, "A");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidade)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidade )
************************************
[+] input: getStringTruncada_test05() { String stringTruncada = Strings.getStringTruncada(null, 0); "<AssertPlaceHolder>"; }
[*] target: assertNull(stringTruncada)
[-] pred: org. junit. Assert. assertNull ( stringTruncada )
************************************
[+] input: getDataMesesAtras_test01() { LocalDate inicio = LocalDate.of(2021, 5, 13); LocalDate dataEsperada = LocalDate.of(2020, 12, 13); LocalDate dataObtida = LocalDates.getDataMesesAtras(inicio, 5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
[+] input: ReflectiveOperationException { final boolean[] bools = new boolean[2]; final PojoMapper<TestProperties> pojoMapper = PojoMapper.create(TestProperties.class); pojoMapper.addListener(new PojoListener() { @Override public void onPropertyAdded(PojoMapper<?> pojoMapper, PojoProperty pojoProperty) { bools[0] = true; }  @Override public void onMapperInitialized(PojoMapper<?> pojoMapper) { bools[1] = true; } }); pojoMapper.init();  for (boolean bool : bools) { Assertions."<AssertPlaceHolder>"; } }
[*] target: assertTrue(bool)
[-] pred: org. junit. Assert. assertTrue ( bool )
************************************
[+] input: Exception { CountDownLatch latch = new CountDownLatch(1); s1.registerCallback(new CountDownCallback(latch)); s2.registerCallback(new CountDownCallback(latch)); Exception e = null; try { c.getPeer("bogus").sendMessage(messages[0]); fail("bogus config"); } catch (IOChannelException ex) { e = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(e)
[-] pred: org. junit. Assert. assertNotNull ( e )
************************************
[+] input: checkForPreApproval_clientAutoApprove() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(requestedScopes));  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: IOException { final String machineId = "9bcc0df29af9454298607489a54040e2"; writeStringToFile(machineId, TracingAttributes.MACHINE_ID_FILE_PATH); final TracingAttributes attributes = instance(); final String actual = attributes.get(TracingAttributes.MACHINE_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(machineId, actual)
[-] pred: org. junit. Assert. assertEquals ( machineId, actual )
************************************
[+] input: testShouldNotFilterShouldReturnTrueWhenRequestBaseUriIsPing() { //given when(request.getRequestURI()).thenReturn("/ping");  //when final boolean actual = underTest.shouldNotFilter(request);  //then Assertions."<AssertPlaceHolder>"; verify(request, atLeastOnce()).getRequestURI(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testFunctionNames9() { List<String> names = NextflowScript.getFunctionNames("def      { some content }"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: shouldBuildErrorCode() { Message message = MessageFactory.errorCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Error code is transformed from 'old' to 'new'. Please review."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testContainsNameShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsName(KEY_NAME_1);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: schedule() { AtomicBoolean isRun = new AtomicBoolean(false); client.schedule(() -> isRun.set(true)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: InterruptedException { boolean queued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertTrue(reloader.isReloadQueued());  Mockito.verify(reloadShutdownHandler, Mockito.never()).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.never()).start(plugin);  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
[*] target: assertTrue(queued)
[-] pred: org. junit. Assert. assertTrue ( queued )
************************************
[+] input: shouldProperlyMapStudentToDto() { //given StudentModel studentModel = new StudentModel(); studentModel.setId(1L); studentModel.setName("Ivan");  LectureModel lectureModel = new LectureModel(); lectureModel.setId(2L); lectureModel.setName("Matan");  studentModel.setLectures(singletonList(lectureModel));  LecturerModel lecturerModel = new LecturerModel();  lecturerModel.setId(3L); lecturerModel.setName("Vladimir Kirillovich");  studentModel.setLecturers(singletonList(lecturerModel));  //when StudentDTO studentDTO = studentMapper.toDTO(studentModel);  //then "<AssertPlaceHolder>"; assertEquals(1L, studentDTO.getId()); assertEquals("Ivan", studentDTO.getName());  assertEquals(1, studentDTO.getLecturers().size()); assertEquals(2L, studentDTO.getLectures().get(0).getId()); assertEquals("Matan", studentDTO.getLectures().get(0).getName());  assertEquals(1, studentDTO.getLectures().size()); assertEquals(3L, studentDTO.getLecturers().get(0).getId()); assertEquals("Vladimir Kirillovich", studentDTO.getLecturers().get(0).getName()); }
[*] target: assertNotNull(studentDTO)
[-] pred: org. junit. Assert. assertNotNull ( studentDTO )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256() { String clearText = "myClearText"; String encryptionKey = "myKeyEncryption"; String encryptionSalt = "p8t42EhY9z2eSUdpGeq7HX7RboMrsJAhUnu3EEJJVS"; String encryptedText = EncryptionUtils.encryptAesWithPrefix(clearText, encryptionKey, encryptionSalt); String clearTextDecrypted = EncryptionUtils.decryptAesWithPrefix(encryptedText, encryptionKey, encryptionSalt);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearText, clearTextDecrypted)
[-] pred: org. junit. Assert. assertEquals ( clearText, clearTextDecrypted )
************************************
[+] input: serialize_WithBytesContainingSpecialCharacters_ReturnsEscapedJson() { // Test for serializing bytes with special characters GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{34, 92, 13, 10, 9}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\"\\\\\\r\\n\\t"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: shouldCreateCommandForLongChain() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, AdminConstants.DEFAULT_CHAIN, domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: testIterator() { Set<DataSource> dataSourceSet = new HashSet<>(); dataSourceSet.add(new DataSource("prometheus", DataSourceType.PROMETHEUS, storageEngine)); dataSourceSet.add(new DataSource("opensearch", DataSourceType.OPENSEARCH, storageEngine)); Set<DataSourceMetadata> dataSourceMetadata = dataSourceSet.stream() .map( dataSource -> new DataSourceMetadata.Builder() .setName(dataSource.getName()) .setConnector(dataSource.getConnectorType()) .setProperties(ImmutableMap.of("prometheus.uri", "localhost:9200")) .build()) .collect(Collectors.toSet()); when(dataSourceService.getDataSourceMetadata(false)).thenReturn(dataSourceMetadata);  assertFalse(dataSourceTableScan.hasNext()); dataSourceTableScan.open(); assertTrue(dataSourceTableScan.hasNext()); Set<ExprValue> exprTupleValues = new HashSet<>(); while (dataSourceTableScan.hasNext()) { exprTupleValues.add(dataSourceTableScan.next()); }  Set<ExprValue> expectedExprTupleValues = new HashSet<>(); for (DataSource dataSource : dataSourceSet) { expectedExprTupleValues.add( new ExprTupleValue( new LinkedHashMap<>( ImmutableMap.of( "DATASOURCE_NAME", ExprValueUtils.stringValue(dataSource.getName()), "CONNECTOR_TYPE", ExprValueUtils.stringValue(dataSource.getConnectorType().name()))))); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedExprTupleValues, exprTupleValues)
[-] pred: org. junit. Assert. assertEquals ( expectedExprTupleValues, exprTupleValues )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(IMPORT_SCHEMA);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(null, headers, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
[+] input: shouldCallThePrimitiveMatcherIfTheTwoObjectAreValue() { final var value1 = TextNode.valueOf(""); final var value2 = IntNode.valueOf(10);  final var primitiveMatcher = (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class), primitiveMatcher ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(primitiveMatcher.jsonDiff(path, value1, value2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, value1, value2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
[+] input: testIsAutoRenewShouldReturnTrueWhenCalledWithBothTypesInMap() { //given final CertificateLifetimeActionTrigger trigger = new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10); final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map .of(EMAIL_CONTACTS, trigger, AUTO_RENEW, trigger); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final boolean actual = underTest.isAutoRenew();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test04() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
[+] input: stateWithSameNameShouldBeEqual() { State a = State.of("state"); State b = State.of("state");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"/{locationId}", location1.getLocationId()) .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: submitQuery() { NodeClient nodeClient = mock(NodeClient.class); ThreadPool threadPool = mock(ThreadPool.class); when(nodeClient.threadPool()).thenReturn(threadPool);  AtomicBoolean isRun = new AtomicBoolean(false); AbstractPlan queryPlan = new QueryPlan(queryId, plan, queryService, listener) { @Override public void execute() { isRun.set(true); } };  doAnswer( invocation -> { Runnable task = invocation.getArgument(0); task.run(); return null; }) .when(threadPool) .schedule(any(), any(), any()); new OpenSearchQueryManager(nodeClient).submit(queryPlan);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: shouldBuildProperty() { Message message = MessageFactory.property(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildScriptFormatMissing() { Message message = MessageFactory.scriptFormatMissing(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: existTest() { //given Team teamA = new Team("TeamA"); em.persist(teamA); Member member1 = new Member("member1", 10, teamA); em.persist(member1); //when Boolean exist = woowahwanMemberRepository.exist(member1.getId()); //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
[+] input: isAdminOrUser_whenUserHasUserRole_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("datagym", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: testAsUriNoVersionShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = UNVERSIONED_CERT_ENTITY_ID_1;  //when final URI actual = underTest.asUriNoVersion(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: testFillTemplateWithBraces() { String template = "Beginning ${VAR} { end }"; Map<String, String> vars = new HashMap<String, String>(); vars.put("VAR", "middle"); String result = StringUtil.fillTemplate(template, vars); String expected = "Beginning middle { end }"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: isAdminOrUser_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: create() { DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest(); request.setDatabaseType("ut-mysql"); request.setIcon(""); request.setDescription("integration test"); request.setJdbcDriverFileUrl("some url"); request.setJdbcDriverClassName("com.mysql.jdbc.Driver"); request.setJdbcProtocol("jdbc:mysql"); request.setUrlPattern("{{jdbc.protocol}}//{{db.url}}/{{db.schema}}"); Integer id = databaseTypeService.create(request); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: testApplySimpleObject() { SimpleObject that = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  SimpleObject other = SimpleObject.builder() .id(1) .height(180L) .name("test") .build();  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(that, other); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldProperlyMapModelToDto() { //given LectureModel model = new LectureModel(); model.setId(11L); model.setName("lecture name");  //when LectureDTO dto = mapperUnderTest.toDTO(model);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(model.getId(), dto.getId()); Assertions.assertEquals(model.getName(), dto.getName()); }
[*] target: assertNotNull(dto)
[-] pred: org. junit. Assert. assertNotNull ( dto )
************************************
[+] input: whenObjectNotFoundExceptionThenReturnAResponseEntity() { ResponseEntity<StandardError> response = ecxeptionHandler .objectNotFound( new ObjectNotFoundException(OBJETO_NAO_ENCONTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(OBJETO_NAO_ENCONTRADO, response.getBody().getError()); assertEquals(404, response.getBody().getStatus()); assertNotEquals("/user/2", response.getBody().getPath()); assertNotEquals(LocalDateTime.now(), response.getBody().getTimestamp()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: ensureFreeSpace_underLimit() { File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile);  when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES - 1); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace(); "<AssertPlaceHolder>"; verify(fileUtils, never()).safeDelete(any()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: 한건조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  ReserveItemResponseDto responseBody = webTestClient.get() .uri(API_URL+"/{reserveItemId}", saved.getReserveItemId()) .exchange() .expectStatus().isOk() .expectBody(ReserveItemResponseDto.class) .returnResult().getResponseBody();  assertThat(responseBody.getCategoryId()).isEqualTo(category.getCodeId()); assertThat(responseBody.getReserveItemName()).isEqualTo(saved.getReserveItemName());  }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: basic() { String realCode = """ int x=5; String y =foo("bar");""";  List<TokenType> expectedTypes = List.of(TokenType.INT, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.ASSIGN, TokenType.NUMBER, TokenType.SEMICOLON, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.IDENTIFIER, TokenType.WHITESPACE, TokenType.ASSIGN, TokenType.IDENTIFIER, TokenType.OPEN_PARENTHESIS, TokenType.STRING, TokenType.CLOSE_PARENTHESIS, TokenType.SEMICOLON);  List<TokenType> actualTypes = tokenize(realCode);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypes, actualTypes)
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, actualTypes )
************************************
[+] input: IOException { int data = 123;  outputStream.write(data);  outputStream.close();  final String stringContent = Files.readString(testDataFile.toPath()); final byte[] bytesContent = stringContent.getBytes(StandardCharsets.UTF_8); int actualContent = bytesContent[0] & 0xFF;   "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, actualContent)
[-] pred: org. junit. Assert. assertEquals ( data, actualContent )
************************************
[+] input: shouldBuildCompletionCondition() { Message message = MessageFactory.completionCondition(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: loadUserByUsername() { UserDetails nome = this.autenticacaoService.loadUserByUsername("testeautenticacaoservice@example.com"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(nome)
[-] pred: org. junit. Assert. assertNotNull ( nome )
************************************
[+] input: testAsPendingOperationUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPendingOperationUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/pending"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: test() { SortedMap sortedMap = new TreeMap(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList(new ServerNode( String.valueOf(i), "", i / 3, 0, 0, 0, 0, Sets.newHashSet("test"), true)); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
[+] input: testGetWorkflowNames9() { List<String> names = NextflowScript.getWorkflowNames("workflow      { some content }"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: readServiceVersionFromEnv() { final String version = "1.2.3"; final Map<String, String> env = new HashMap<>(); env.put("VERSION", version); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
[+] input: InvocationTargetException { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  List<LcEntry> testLcEntryLineList = LcEntryUtils.createTestLcEntryGeometryList(3, LcEntryType.LINE, testLabelConfiguration);  //When when(labelConfigRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration));  when(lcEntryRepositoryMock.findAllByParentEntryIsNullAndConfigurationId(anyString())) .thenReturn(testLcEntryLineList);  LcConfigDeleteViewModel lcConfigDeleteViewModel = labelConfigService.clearConfig(LC_CONFIG_ID);  System.out.println();  //Then "<AssertPlaceHolder>"; assertEquals(LC_CONFIG_ID, lcConfigDeleteViewModel.getConfigId());  ArgumentCaptor<String> idCapture = ArgumentCaptor.forClass(String.class); verify(lcEntryRepositoryMock, times(1)).deleteLcEntriesByConfigurationId(idCapture.capture()); assertThat(idCapture.getValue()).isEqualTo(LC_CONFIG_ID); verifyNoMoreInteractions(lcEntryRepositoryMock); }
[*] target: assertNotNull(lcConfigDeleteViewModel)
[-] pred: org. junit. Assert. assertNotNull ( lcConfigDeleteViewModel )
************************************
[+] input: NoSuchAlgorithmException { DES des = new DES(); byte[] key = des.getKey(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "not-existing"; final String expectedErrorMessage = String.format("Item lcEntry with entry_key %s not found.", lcEntryKey); final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId);  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)) .thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()) .thenReturn(project); Mockito.when(labelTask.getLabelTaskState()) .thenReturn(LabelTaskState.COMPLETED);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: testCreateOAuth2Client_success() { // 准备参数 OAuth2ClientSaveReqVO reqVO = randomPojo(OAuth2ClientSaveReqVO.class, o -> o.setLogo(randomString())) .setId(null); // 防止 id 被赋值  // 调用 Long oauth2ClientId = oauth2ClientService.createOAuth2Client(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 OAuth2ClientDO oAuth2Client = oauth2ClientMapper.selectById(oauth2ClientId); assertPojoEquals(reqVO, oAuth2Client, "id"); }
[*] target: assertNotNull(oauth2ClientId)
[-] pred: org. junit. Assert. assertNotNull ( oauth2ClientId )
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.purge(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/purge", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testCompileAndEvaluateWithConstants() { boolean result = SimpleProposition.compileAndEvaluate("1 == 1", null); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnArg", String.class);  "<AssertPlaceHolder>";  String arg = "Hello World"; assertEquals(arg, method.invoke(obj, arg)); }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
[+] input: shouldBuildCandidateGroups() { Message message = MessageFactory.candidateGroups(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildCorrelationKeyHint() { Message message = MessageFactory.correlationKeyHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: NoSuchFieldException { Field field = Person.class.getField("name"); FastField ff = FastField.create(field); "<AssertPlaceHolder>"; }
[*] target: assertEquals(field.toString(), ff.toString())
[-] pred: org. junit. Assert. assertEquals ( field. toString ( ), ff. toString ( ) )
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getOwnPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
[+] input: IOException { final String expected = new UUID(0L, 0L).toString(); writeStringToFile(expected, TracingAttributes.getServiceIdFilePath(fileSystem, APP_NAME)); final TracingAttributes attributes = instance(); final String actual = attributes.get(ResourceAttributes.SERVICE_INSTANCE_ID); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: SQLException { String nql = "INSERT VERTEX vert (prop) VALUES "v1":(?))"; String expected = "INSERT VERTEX vert (prop) VALUES "v1":(null))"; NebulaPreparedStatementImpl stmt = new NebulaPreparedStatementImpl(null, nql); stmt.setNull(1, Types.OTHER); String resultNql = stmt.replacePlaceHolderWithParam(nql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resultNql)
[-] pred: org. junit. Assert. assertEquals ( expected, resultNql )
************************************
[+] input: convertToEntityAttributeNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); AnuncioStatus convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: isUserInCurrentOrg_whenUserIsAuthenticatedAndIsMemberOfTheOrg_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isUserInCurrentOrg = DataGymSecurity.isUserInCurrentOrg("datagym");  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isUserInCurrentOrg)
[-] pred: org. junit. Assert. assertTrue ( isUserInCurrentOrg )
************************************
[+] input: execute_with_cursor() { List<ExprValue> expected = Arrays.asList( tupleValue(of("name", "John", "age", 20)), tupleValue(of("name", "Allen", "age", 30))); var plan = new FakePhysicalPlan(expected.iterator()); when(protector.protect(plan)).thenReturn(plan);  OpenSearchExecutionEngine executor = new OpenSearchExecutionEngine(client, protector, new PlanSerializer(null)); List<ExprValue> actual = new ArrayList<>(); executor.execute( plan, new ResponseListener<>() { @Override public void onResponse(QueryResponse response) { actual.addAll(response.getResults()); assertTrue(response.getCursor().toString().startsWith("n:")); }  @Override public void onFailure(Exception e) { fail("Error occurred during execution", e); } });  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildErrorEventDefinition() { Message message = MessageFactory.errorEventDefinition(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalPorteConverter converter = new AnimalPorteConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: readPodNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_POD_NAME); "<AssertPlaceHolder>"; }
[*] target: assertEquals(hostnameThatIsPodName, actual)
[-] pred: org. junit. Assert. assertEquals ( hostnameThatIsPodName, actual )
************************************
[+] input: testGenNotifyBody() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwidxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Admin") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
[+] input: initialization_onlyOnce() { Application application = mock(Application.class, RETURNS_DEEP_STUBS); Context context = mock(Context.class);  SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setApplicationName("appName") .setBeaconEndpoint("http://backend") .setRumAccessToken("abracadabra") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context);  SplunkRum singleton = SplunkRum.initialize(splunkRumBuilder, application); SplunkRum sameInstance = splunkRumBuilder.build(application);  "<AssertPlaceHolder>"; }
[*] target: assertSame(singleton, sameInstance)
[-] pred: org. junit. Assert. assertSame ( singleton, sameInstance )
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  outputStream.write(inputBytes); outputStream.close();  String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
[+] input: shouldBuildTimerExpressionNotSupported() { String timerType = random(); String timerValue = random(); String eventType = random(); String semanticVersion = random(); Message message = timerExpressionNotSupported(timerType, timerValue, eventType, semanticVersion); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Timer of type '" + timerType + "' with value '" + timerValue + "' is not supported for event type '" + eventType + "' in Zeebe version '" + semanticVersion + "'."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldCreateCommandWithLongChainForRandomText() { final String expectedCommand = "certbot certonly --agree-tos " + "--email admin@example.com " + "-n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "random", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: testDense() {  ByteSparseNdArray instance = new ByteSparseNdArray(indices, values, DimensionalSpace.create(shape)); ByteNdArray denseInstance = instance.toDense(); ByteNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: shortfallTest() { //given int answer = 5; //when int result = sampleProvince.shortFall(); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: shouldBuildElementVariable() { Message message = MessageFactory.elementVariable(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithEmptyModel() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testFillTemplate() { String template = "The quick ${COLOR} ${ANIMAL}\njumped over the ${ADJECTIVE} dogs.\n"; Map<String, String> vars = new HashMap<String, String>(); vars.put("COLOR", "brown"); vars.put("ANIMAL", "fox"); vars.put("ADJECTIVE", "lazy"); String result = StringUtil.fillTemplate(template, vars); String expected = "The quick brown fox\njumped over the lazy dogs.\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: InterruptedException { HBrowser hBrowser = new HBrowser(); try (PlaywrightWindow window = hBrowser.openCustomWindow().debugOutputStream(System.out).headless(false).buildPlaywrightWindow()) { window.load(new File(System.getProperty("user.dir") + "/test.html")); String expected = "This is the expected value!"; String actual = null; window.fill("id=input__text", expected); window.fill("id=input__password", expected); actual = window.getOuterHtml().getElementById("input__text").attr("value"); // TODO seems like it sets the text correctly. // TODO Just got to find a way of retrieving the value from the form, because it wont work with the regular form.value thing. //"<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildInputOutput() { Message message = MessageFactory.inputOutput(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getStakeAddressFromMnemonic_whenMainnet() { String phrase24W = "damp wish scrub sentence vibrant gauge tumble raven game extend winner acid side amused vote edge affair buzz hospital slogan patient drum day vital"; String expectedRewardAddress = "stake1u9xeg0r67z4wca682l28ghg69jxaxgswdmpvnher7at697quawequ";  Account account = new Account(Networks.mainnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
[+] input: generateAccessTokenFromNonUUID() { String accessToken = accessTokenService.generateAccessToken("testetstetstetstestste"); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: queryWithUnknownTraceId() { String spanId = "1234567890abcdef"; when(traceContext.traceId()).thenReturn(TracingStatementInspector.UNKNOWN_TRACE_ID); when(traceContext.spanId()).thenReturn(spanId);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- span_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", spanId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ensureFreeSpace_overLimitHappyDeletion() { File file1 = new File("oldest"); File file2 = new File("younger"); File file3 = new File("newest");  File mockFile = mock(File.class); when(spanStorage.provideSpansDirectory()).thenReturn(mockFile); when(spanStorage.getTotalFileSizeInBytes()).thenReturn(MAX_STORAGE_USE_BYTES + 1); when(fileUtils.getModificationTime(file1)).thenReturn(1000L); when(fileUtils.getModificationTime(file2)).thenReturn(1001L); when(fileUtils.getModificationTime(file3)).thenReturn(1002L); when(fileUtils.getFileSize(isA(File.class))).thenReturn(1L); when(spanStorage.getAllSpanFiles()).thenReturn(Stream.of(file3, file1, file2)); when(mockFile.getFreeSpace()).thenReturn(MAX_STORAGE_USE_BYTES + 1); boolean result = limiter.ensureFreeSpace();  verify(fileUtils).safeDelete(file1); verify(fileUtils).safeDelete(file2); verify(fileUtils, never()).safeDelete(file3); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldBuildFieldContent() { Message message = MessageFactory.fieldContent(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildDelegateImplementationNoDefaultJobType() { String implementationType = random(); String binding = random(); Message message = delegateImplementationNoDefaultJobType(implementationType, binding); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Delegate call of type '" + implementationType + "' bound to '" + binding + "' was reset."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testAsUriWithQueryShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3; final String query = "?query=1";  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP, query);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + query; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: isAdminOrUser_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrUser = DataGymSecurity.isAdminOrUser("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrUser)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrUser )
************************************
[+] input: testCreateScanBuilderWithSqlTableFunction() { SparkQueryRequest sparkQueryRequest = new SparkQueryRequest(); sparkQueryRequest.setSql(QUERY); SparkTable sparkTable = new SparkTable(client, sparkQueryRequest); TableScanBuilder tableScanBuilder = sparkTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof SparkSqlFunctionTableScanBuilder); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
[+] input: testOnlyNumberValueProvided() { Duration expectedDuration = Duration.ofSeconds(3); Duration actualDuration = DurationUtils.parseDuration("3", "refresh-period"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
[+] input: testCreateTag_success() { // 准备参数 MemberTagCreateReqVO reqVO = randomPojo(MemberTagCreateReqVO.class);  // 调用 Long tagId = tagService.createTag(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberTagDO tag = tagMapper.selectById(tagId); assertPojoEquals(reqVO, tag); }
[*] target: assertNotNull(tagId)
[-] pred: org. junit. Assert. assertNotNull ( tagId )
************************************
[+] input: serialize_WithNestedRecord_ReturnsCorrectJson() { // Test for serializing a nested record Schema schema = new Schema.Parser().parse( "{" + "  "type": "record"," + "  "name": "ParentRecord"," + "  "fields": [" + "    {" + "      "name": "child"," + "      "type": {" + "        "type": "record"," + "        "name": "ChildRecord"," + "        "fields": [" + "          {"name": "name", "type": "string"}" + "        ]" + "      }" + "    }" + "  ]" + "}" ); GenericRecord childRecord = new GenericData.Record(schema.getField("child").schema()); childRecord.put("name", "John Doe"); GenericRecord parentRecord = new GenericData.Record(schema); parentRecord.put("child", childRecord);  String expectedJson = "{"child": {"name": "John Doe"}}";  String json = encoder.serialize(parentRecord);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test01() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("Felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: addsTask() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); }
[*] target: assertEquals(1, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, todoList. size() )
************************************
[+] input: generateAccessToken() { String accessToken = accessTokenService.generateAccessToken(UUID.randomUUID().toString()); PayloadDTO payloadDTO = generatePayloadDTO(accessToken); boolean result = accessTokenService.validateAccessToken(accessToken, payloadDTO); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldBuildScriptFormat() { Message message = MessageFactory.scriptFormat(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: readServiceVersionFromSystemProperty() { final String version = "1.2.9"; final Properties properties = new Properties(); properties.put("service.version", version); final TracingAttributes attributes = instance(properties); final String actual = attributes.get(ResourceAttributes.SERVICE_VERSION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version, actual)
[-] pred: org. junit. Assert. assertEquals ( version, actual )
************************************
[+] input: fromOptionValue_users_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("users"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("USERS")); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
[+] input: testLatchFilters() { final var horizon = Interval.between(Duration.of(0, Duration.SECONDS), Duration.of(50, Duration.SECONDS)); final var horizonW = new Windows(horizon, true); final var simResults = new SimulationResults( Instant.EPOCH, Interval.between(0, 20, SECONDS), List.of(), Map.of(), Map.of( "smallState1", smallState1(horizon), "smallState2", smallState2(horizon) ) );  final var ste = new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))); final var ste2 = new And( new Equal<>(new DiscreteResource("smallState1"), new DiscreteValue(SerializedValue.of(true))), new Equal<>(new DiscreteResource("smallState2"), new DiscreteValue(SerializedValue.of(true))) );  final var tre = new TimeRangeExpression.Builder() .from(ste) .name("withinEach") .build();  final var filter = new Filters.LatchingBuilder() .withinEach(tre) .filterFirstBy(Filters.minDuration(Duration.of(3, Duration.SECONDS))) .thenFilterBy(Filters.minDuration(Duration.of(4, Duration.SECONDS))) .build();  final var tre2 = new TimeRangeExpression.Builder() .name("tre2") .from(ste2) .thenFilter(filter) .build();  final var res = tre2.computeRange(simResults, null, horizonW);  final var expected = new Windows(interval(0, Inclusive, 20, Exclusive, SECONDS), false) .set(List.of( interval(3, Inclusive, 6, Exclusive, SECONDS), interval(11, Inclusive, 15, Exclusive, SECONDS) ), true);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, res)
[-] pred: org. junit. Assert. assertEquals ( expected, res )
************************************
[+] input: convertToEntityAttributeNull() { AnimalTipoConverter converter = new AnimalTipoConverter(); AnimalTipo convert = converter.convertToEntityAttribute(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: testSerialize() { Language language = new Language("en", List.of("en_us", "en_gb")); String expectedSerializedLanguage = "en|en_us|en_gb";  String actualSerializedLanguage = this.composer.serialize(language).get(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSerializedLanguage, actualSerializedLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedSerializedLanguage, actualSerializedLanguage )
************************************
[+] input: shouldBuildScriptJobType() { Message message = MessageFactory.scriptJobType(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testGetLifetimeActionsShouldReturnTheMapSetPreviouslyWhenCalled() { //given final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> expected = Map.of(EMAIL_CONTACTS, new CertificateLifetimeActionTrigger(DAYS_BEFORE_EXPIRY, 10)); final CertificateLifetimeActionPolicy underTest = new CertificateLifetimeActionPolicy(UNVERSIONED_CERT_ENTITY_ID_1, expected);  //when final Map<CertificateLifetimeActionActivity, CertificateLifetimeActionTrigger> actual = underTest.getLifetimeActions();  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: filterUncompletedTasksOfEmptyList() { final TodoList todoList = new TodoList(); final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 0, tasks. size ( ) )
************************************
[+] input: isAuthenticated_whenUserIsAuthenticated_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  boolean isAuthenticated = DataGymSecurity.isAuthenticated();  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAuthenticated)
[-] pred: org. junit. Assert. assertTrue ( isAuthenticated )
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidOctParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new OctKeyCreationInput(KeyType.OCT_HSM, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testCancelOrder() { when(mockOrderRequest.originOrderId()).thenReturn("order1"); manager.submitOrder(mockOrderRequest); boolean result = manager.cancelOrder("order1"); "<AssertPlaceHolder>"; Map<String, OrderRequest> orderMap = manager.orderMap; assertEquals(0, orderMap.size()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testDense() { int[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  IntSparseNdArray instance = new IntSparseNdArray(indices, values, DimensionalSpace.create(shape)); IntNdArray denseInstance = instance.toDense(); IntNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: serialize_WithEnum_ReturnsCorrectJson() { // Test for serializing an enum GenericRecord record = new GenericData.Record(SCHEMA); record.put("suit", new GenericData.EnumSymbol(SCHEMA.getField("suit").schema(), "SPADES"));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": "SPADES"}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnFortyTwo");  "<AssertPlaceHolder>"; assertEquals(42, method.invoke(obj)); }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
[+] input: shouldCreateConnectCluster() { ConnectCluster connectCluster = ConnectCluster.builder() .metadata(Metadata.builder() .name("prefix.connect-cluster") .build()) .spec(ConnectCluster.ConnectClusterSpec.builder() .url("https://after") .build()) .build();  when(connectClusterRepository.create(connectCluster)) .thenReturn(connectCluster);  ConnectCluster actual = connectClusterService.create(connectCluster); "<AssertPlaceHolder>"; }
[*] target: assertEquals(connectCluster, actual)
[-] pred: org. junit. Assert. assertEquals ( connectCluster, actual )
************************************
[+] input: getDataAnosAFrente_test01() { LocalDate inicio = LocalDate.of(2021, 5, 29); LocalDate dataEsperada = LocalDate.of(2023, 5, 29); LocalDate dataObtida = LocalDates.getDataAnosAFrente(inicio, 2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dataEsperada, dataObtida)
[-] pred: org. junit. Assert. assertEquals ( dataEsperada, dataObtida )
************************************
[+] input: queryWithUnknownSpanId() { String traceId = "12345678901234567890123456789abc"; when(traceContext.traceId()).thenReturn(traceId); when(traceContext.spanId()).thenReturn(TracingStatementInspector.UNKNOWN_SPAN_ID);  TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String expected = String.format("--latest_transaction_id \n" + "-- trace_id: %s\n" + "SELECT MAX(transaction_id) FROM transactions", traceId); String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: validateVerificationToken_returnsExpiredIfTokenExpired() { testToken.setExpiryDate(getExpirationDate(0)); when(verificationTokenRepository.findByToken(anyString())).thenReturn(testToken); UserService.TokenValidationResult result = userVerificationService.validateVerificationToken(anyString()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(result, UserService.TokenValidationResult.EXPIRED)
[-] pred: org. junit. Assert. assertEquals ( result, UserService.TokenValidationResult.EXPIRED )
************************************
[+] input: testEncryptAndDecrypt() { String masterKey = "1234567890123456"; String input = "This is a test input"; Encryptor encryptor = new EncryptorImpl(masterKey);  String encrypted = encryptor.encrypt(input); String decrypted = encryptor.decrypt(encrypted);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(input, decrypted)
[-] pred: org. junit. Assert. assertEquals ( input, decrypted )
************************************
[+] input: equals_false_when_different_object_type() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); BlockPos blockPos = new BlockPos(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(blockPos);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: test_objectFileName_with_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}.pdf";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".pdf")); }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
[+] input: test_normal_field_failure_without_delimiters() { Dissector dissector = createObjectUnderTest("dm1 %{field1} %{field2} dm2");  boolean result = dissector.dissectText("dm1 foo bar"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: checkIfUserIsAdmin_whenUserHasBasicScope_throwException() { // Set Security Context OauthUser oauthUser = SecurityUtils.createUserWithBasicScope(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("test_org", true);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: shouldCallTheObjectMatcherIfTheTwoObjectAreObject() { final var object1 = new ObjectNode(null); final var object2 = new ObjectNode(null);  final var objectMatcher = (PartialJsonMatcher<ObjectNode>) Mockito.mock(PartialJsonMatcher.class); final var compositeMatcher = new CompositeJsonMatcher( (PartialJsonMatcher<ArrayNode>) Mockito.mock(PartialJsonMatcher.class), objectMatcher, (PartialJsonMatcher<ValueNode>) Mockito.mock(PartialJsonMatcher.class) ); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(objectMatcher.jsonDiff(path, object1, object2, compositeMatcher)).thenReturn(expectedJsonDiff);  final var result = compositeMatcher.diff(path, object1, object2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, result )
************************************
[+] input: Exception { String html = "<div id="noticias"><div class="bloque">BLOQUESSS</div></div>"; String result = new OwaspHtmlSanitizer(html, true, null).sanitize(); // check that the id and class attributes are not removed "<AssertPlaceHolder>"; }
[*] target: assertEquals(result, html)
[-] pred: org. junit. Assert. assertEquals ( result, html )
************************************
[+] input: Throwable { FastMethod fm = FastMethod.create(String.class.getMethod("startsWith", String.class)); boolean result = (boolean) fm.invoke("abc", "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testCreateForm_success() { // 准备参数 BpmFormSaveReqVO reqVO = randomPojo(BpmFormSaveReqVO.class, o -> { o.setConf("{}"); o.setFields(randomFields()); });  // 调用 Long formId = formService.createForm(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmFormDO form = formMapper.selectById(formId); assertPojoEquals(reqVO, form); }
[*] target: assertNotNull(formId)
[-] pred: org. junit. Assert. assertNotNull ( formId )
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: equals_false_when_vec3_equals() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3 vec3c2 = new Vec3(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: testHasTerminated() { when(priceDiffConditionToAbort.test(anyDouble())).thenReturn(true); tradeIntent.onTick(tick); "<AssertPlaceHolder>"; }
[*] target: assertTrue(tradeIntent.hasTerminated())
[-] pred: org. junit. Assert. assertTrue ( tradeIntent. hasTerminated() )
************************************
[+] input: shouldBuildDueDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.dueDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'dueDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: setClockBackwards() { MachineProperties.ClockBackwards clockBackwards = new MachineProperties.ClockBackwards(); MachineProperties properties = new MachineProperties(); properties.setClockBackwards(clockBackwards); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(clockBackwards, properties.getClockBackwards())
[-] pred: org. junit. Assert. assertEquals ( clockBackwards, properties. getClockBackwards() )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test04() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: testSend() {  //        // params //        final SendRequest sendRequest = new SendRequest("send", 1L, //                new MessageParam("13711111111", new HashMap<>(), new HashMap<>())); // //        // predict result //        final ProcessContext<SendTaskModel> processContext = new ProcessContext<>(sendRequest.getCode(), new SendTaskModel(), false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        final SendResponse expectedResult = new SendResponse(processContext.getResponse().getStatus(), processContext.getResponse().getMsg()); // // //        // stub //        Map<String, ProcessTemplate> templateConfig = new HashMap<>(4); //        processTemplate.setProcessList(Arrays.asList(businessProcess)); //        templateConfig.put(BusinessCode.COMMON_SEND.getCode(), processTemplate); // //        processController.setTemplateConfig(templateConfig); // // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.send(sendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: defaultValues() { SplunkRumBuilder builder = SplunkRum.builder();  assertFalse(builder.isDebugEnabled()); assertFalse(builder.isDiskBufferingEnabled()); assertTrue(builder.isCrashReportingEnabled()); assertTrue(builder.isNetworkMonitorEnabled()); assertTrue(builder.isAnrDetectionEnabled()); "<AssertPlaceHolder>"; assertEquals(Attributes.empty(), builder.globalAttributes); assertNull(builder.deploymentEnvironment); assertFalse(builder.sessionBasedSamplerEnabled); }
[*] target: assertTrue(builder.isSlowRenderingDetectionEnabled())
[-] pred: org. junit. Assert. assertTrue ( builder. isSlowRenderingDetectionEnabled ( ) )
************************************
[+] input: testDense() {  DoubleSparseNdArray instance = new DoubleSparseNdArray(indices, values, DimensionalSpace.create(shape)); DoubleNdArray denseInstance = instance.toDense(); DoubleNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: testRawToArrayMsgTest() { val msg = "[CQ:at,qq=1122334455]测试消息1[CQ:face,id=1]测试消息2[CQ:video,file=https://test.com/1.mp4][CQ:image,file=test1.image,url=https://test.com/1.jpg]\n[CQ:image,file=test2.image,url=https://test.com/2.jpg]"; val expected = Arrays.asList( new ArrayMsg().setType(MsgTypeEnum.at).setData(Map.of("qq", "1122334455")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息1")), new ArrayMsg().setType(MsgTypeEnum.face).setData(Map.of("id", "1")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "测试消息2")), new ArrayMsg().setType(MsgTypeEnum.video).setData(Map.of("file", "https://test.com/1.mp4")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test1.image", "url", "https://test.com/1.jpg")), new ArrayMsg().setType(MsgTypeEnum.text).setData(Map.of("text", "\n")), new ArrayMsg().setType(MsgTypeEnum.image).setData(Map.of("file", "test2.image", "url", "https://test.com/2.jpg")) ); val actual = ShiroUtils.rawToArrayMsg(msg); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: GIVEN_greater_than_limit_method_WHEN_log_send_interval_less_than_max_log_send_interval_THEN_return_false() { long validRequestSize = thresholdConfig.getMaxRequestSizeBytes() - ((ThresholdConfig.DEFAULT_BATCH_SIZE) * CloudWatchLogsLimits.APPROXIMATE_LOG_EVENT_OVERHEAD_SIZE); boolean thresholdMetTime = cloudWatchLogsLimits.isGreaterThanLimitReached(ThresholdConfig.DEFAULT_LOG_SEND_INTERVAL_TIME - 1, validRequestSize ,ThresholdConfig.DEFAULT_BATCH_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertFalse(thresholdMetTime)
[-] pred: org. junit. Assert. assertFalse ( thresholdMetTime )
************************************
[+] input: testValidShelleyAddress() { boolean isValid = AddressUtil.isValidAddress("addr1qxkeutm43mhc8jpqg6sk4cqtypzy3ez6z8k7qlfwa97h2acz7xprvuysll04e5gaa65vavyj0wvd0v99lhpntm7c03us8wk6xc");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
[+] input: testCreateMailLog() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String toMail = randomEmail(); MailAccountDO account = randomPojo(MailAccountDO.class); MailTemplateDO template = randomPojo(MailTemplateDO.class); String templateContent = randomString(); Map<String, Object> templateParams = randomTemplateParams(); Boolean isSend = true; // mock 方法  // 调用 Long logId = mailLogService.createMailLog(userId, userType, toMail, account, template, templateContent, templateParams, isSend); // 断言 MailLogDO log = mailLogMapper.selectById(logId); "<AssertPlaceHolder>"; assertEquals(MailSendStatusEnum.INIT.getStatus(), log.getSendStatus()); assertEquals(userId, log.getUserId()); assertEquals(userType, log.getUserType()); assertEquals(toMail, log.getToMail()); assertEquals(account.getId(), log.getAccountId()); assertEquals(account.getMail(), log.getFromMail()); assertEquals(template.getId(), log.getTemplateId()); assertEquals(template.getCode(), log.getTemplateCode()); assertEquals(template.getNickname(), log.getTemplateNickname()); assertEquals(template.getTitle(), log.getTemplateTitle()); assertEquals(templateContent, log.getTemplateContent()); assertEquals(templateParams, log.getTemplateParams()); }
[*] target: assertNotNull(log)
[-] pred: org. junit. Assert. assertNotNull ( log )
************************************
[+] input: 사용자_포털_메인_예약목록_조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  Map<String, Collection<ReserveItemMainResponseDto>> responseBody = webTestClient.get() .uri(API_URL+"/latest/3") .exchange() .expectStatus().isOk() .expectBody(new ParameterizedTypeReference<Map<String, Collection<ReserveItemMainResponseDto>>>() { }) .returnResult().getResponseBody();  assertThat(responseBody.keySet().size()).isEqualTo(1); assertThat(responseBody.keySet().contains(category.getCodeId())).isTrue(); Collection<ReserveItemMainResponseDto> reserveItemMainResponseDtos = responseBody.get(category.getCodeId()); reserveItemMainResponseDtos.stream().forEach(reserveItemMainResponseDto -> { assertThat(reserveItemMainResponseDto.getReserveItemName().equals(saved.getReserveItemName())); }); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
[+] input: checkIfUserIsAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.checkIfUserIsAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: signalWithSameNameShouldBeEqual() { Signal a = Signal.of("signal"); Signal b = Signal.of("signal");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: JsonProcessingException { Map<String, String> headers = this.computeHeaders(null); String messageKey = this.computeResourceAsString(TEST_COMPLEX_MESSAGE_KEY_CORRECT);  JoyceURI expectedSchemaUri = JoyceURI.createURI(IMPORT_SCHEMA).get(); JoyceURI actualSchemaUri = importService.computeValidSchemaUri(messageKey, headers, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchemaUri, actualSchemaUri)
[-] pred: org. junit. Assert. assertEquals ( expectedSchemaUri, actualSchemaUri )
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsLabeler_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("datagym", "eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
[+] input: testUpdateAfterApproval_none() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString();  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, null); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(0, result.size()); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: shouldBuildInputOutputParameterIsNoExpression() { Message message = MessageFactory.inputOutputParameterIsNoExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getAllImages_WhenZeroImages_returnEmptyList() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.getAllMediasByDatasetId(DATASET_ID)).thenReturn(new ArrayList<>()); List<MediaViewModel> allImages = datasetService.getAllMedia(DATASET_ID);  //Then "<AssertPlaceHolder>";  verify(datasetRepositoryMock).getAllMediasByDatasetId(anyString()); verify(datasetRepositoryMock, times(1)).getAllMediasByDatasetId(anyString()); }
[*] target: assertTrue(allImages.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allImages. isEmpty ( ) )
************************************
[+] input: IOException { when(buffer.getSize()).thenReturn(maxBytes.getBytes() - 1000); when(buffer.getEventCount()).thenReturn(maxEvents + 1); when(buffer.getDuration()).thenReturn(maxCollectionDuration.minusSeconds(1)); Boolean isBatchEnabled = false;  boolean isThresholdExceed = ThresholdCheck.checkThresholdExceed(buffer, maxEvents, maxBytes, maxCollectionDuration, isBatchEnabled);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isThresholdExceed)
[-] pred: org. junit. Assert. assertTrue ( isThresholdExceed )
************************************
[+] input: shouldCallTheDelegatedIfNodeHaveDifferentType() { final var value1 = IntNode.valueOf(100); final var value2 = TextNode.valueOf("100"); final var jsonMatcher = Mockito.mock(JsonMatcher.class); final var delegated = Mockito.mock(PartialJsonMatcher.class); final var expectedJsonDiff = Mockito.mock(JsonDiff.class); Mockito.when(delegated.jsonDiff(expectedPath, value1, value2, jsonMatcher)).thenReturn(expectedJsonDiff);  final var jsonDiff = new LenientNumberPrimitivePartialMatcher(delegated) .jsonDiff(expectedPath, value1, value2, jsonMatcher);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonDiff, jsonDiff)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonDiff, jsonDiff )
************************************
[+] input: testListClusterRolesByClusterId() { // Setup final List<ClusterRoleInfo> expectedResult = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes"))));  // Configure ClusterRoleService.getAllRoleClusterByClusterId(...). final List<ClusterRoleInfo> clusterRoleInfos = Arrays.asList(new ClusterRoleInfo(0L, 0L, "roleClusterName", "role", 0, 0, "machineSpec", "esVersion", 0, "plugIds", false, Arrays.asList(new ClusterRoleHost(0L, 0L, "hostname", "ip", CLUSTER, "port", 0, 0, "rack", "nodeSet", "machineSpec", 0, "attributes")))); when(mockClusterRoleService.getAllRoleClusterByClusterId(0)).thenReturn(clusterRoleInfos);  // Run the test final List<ClusterRoleInfo> result = clusterPhyManager.listClusterRolesByClusterId(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testVerifySignedTypedData() { final String signature = "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c";  boolean verified = key.verifyTypedData(domain, message, signature).join();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testGetMethodInvalidName() { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "notExisting");  "<AssertPlaceHolder>"; }
[*] target: assertNull(method)
[-] pred: org. junit. Assert. assertNull ( method )
************************************
[+] input: validateScore1000Test() { try { RecordsManager.validateScore(ALEJANDRO, 1000); "<AssertPlaceHolder>"; } catch (ScoreTooLowException e) { fail(e.getMessage()); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: serialize_WithEmptyRecord_ReturnsEmptyJson() { // Test for serializing an empty record GenericRecord record = new GenericData.Record(SCHEMA); String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: IOException { Mockito.reset(fileUtils); Mockito.reset(delegate); when(fileUtils.readFileCompletely(file)).thenThrow(new IOException("boom")); FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verifyNoMoreInteractions(bandwidthTracker); verifyNoMoreInteractions(delegate); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { helper.createTestDocument(); ExportDocumentsParameters exportDocumentsParameters = new ExportDocumentsParameters(); exportDocumentsParameters.setExcludeFields("id,publication_year,authors"); String exportStr = client.collections("books").documents().export(exportDocumentsParameters); String expectedExportStr = "{"average_rating":3.2,"ratings_count":124,"title":"Romeo and juliet"}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedExportStr, exportStr)
[-] pred: org. junit. Assert. assertEquals ( expectedExportStr, exportStr )
************************************
[+] input: acceptDelivery() { // Arrange var delivery = makeValidDelivery(); delivery.setId("delivery-1234"); // Stub when(deliveryService.acceptDelivery(any(Delivery.class))).thenReturn(Mono.just(delivery)); // Act var result = testClient .put() .uri(DELIVERY_URL + "/accept") .bodyValue(delivery) .exchange() .expectStatus() .isOk() .expectBody(Delivery.class) .returnResult() .getResponseBody(); // Assert Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(delivery, result)
[-] pred: org. junit. Assert. assertEquals ( delivery, result )
************************************
[+] input: testCalculateUsers_noDept() { // 准备参数 DelegateExecution execution = mockDelegateExecution(1L); // mock 方法(startUser) AdminUserRespDTO startUser = randomPojo(AdminUserRespDTO.class, o -> o.setDeptId(10L)); when(adminUserApi.getUser(eq(1L))).thenReturn(startUser); // mock 方法(getStartUserDept)没有部门 when(deptApi.getDept(eq(10L))).thenReturn(null);  // 调用 Set<Long> result = expression.calculateUsers(execution, 1); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testApplyComplexObject() { SimpleObject thatItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject thatObj = new ComplexObject(); thatObj.setId(1); thatObj.setName("eq"); thatObj.setItems(List.of(thatItem));  SimpleObject otherItem = SimpleObject.builder() .id(1) .height(180L) .name("test") .build(); ComplexObject otherObj = new ComplexObject(); otherObj.setId(1); otherObj.setName("eq"); otherObj.setItems(List.of(otherItem));  BaseTypeFieldEqualFunction equalFunction = new BaseTypeFieldEqualFunction(List.of()); final Boolean result = equalFunction.apply(thatObj, otherObj); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalClassificacaoEtariaConverter animalConverter = new AnimalClassificacaoEtariaConverter(); String s = animalConverter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
[+] input: testCreateUserGroup_success() { // 准备参数 BpmUserGroupSaveReqVO reqVO = RandomUtils.randomPojo(BpmUserGroupSaveReqVO.class);  // 调用 Long userGroupId = userGroupService.createUserGroup(reqVO); // 断言 Assertions."<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmUserGroupDO userGroup = userGroupMapper.selectById(userGroupId); AssertUtils.assertPojoEquals(reqVO, userGroup); }
[*] target: assertNotNull(userGroupId)
[-] pred: org. junit. Assert. assertNotNull ( userGroupId )
************************************
[+] input: shouldBuildResourceOnConditionalFlow() { String resource = random(); Message message = resourceOnConditionalFlow(resource); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Please translate the content from '%s' to a valid FEEL expression.", resource); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: deleteFlintIndexStateModel() { when(mockStateStore.delete(any(), any())).thenReturn(true);  boolean result = openSearchFlintIndexStateModelService.deleteFlintIndexStateModel( ID, DATASOURCE, asyncQueryRequestContext);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testCreateApp_success() { // 准备参数 PayAppCreateReqVO reqVO = randomPojo(PayAppCreateReqVO.class, o -> o.setStatus((RandomUtil.randomEle(CommonStatusEnum.values()).getStatus())) .setOrderNotifyUrl(randomURL()) .setRefundNotifyUrl(randomURL()));  // 调用 Long appId = appService.createApp(reqVO); // 断言 "<AssertPlaceHolder>"; PayAppDO app = appMapper.selectById(appId); assertPojoEquals(reqVO, app); }
[*] target: assertNotNull(appId)
[-] pred: org. junit. Assert. assertNotNull ( appId )
************************************
[+] input: testDense() {  BooleanSparseNdArray instance = new BooleanSparseNdArray(indices, values, DimensionalSpace.create(shape)); BooleanNdArray denseInstance = instance.toDense(); BooleanNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: whenFindByIdThenReturnSuccess() { when(service.findById(anyInt())).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.findById(ID);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); assertEquals(PASSWORD, response.getBody().getPassword()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: serialize_WithCircularReference_ReturnsErrorMessage() { // Test for circular reference handling GenericRecord record1 = new GenericData.Record(SCHEMA); record1.put("nested", record1);  String expectedErrorMessage = "{"nested":  ">>> CIRCULAR REFERENCE CANNOT BE PUT IN JSON STRING, ABORTING RECURSION <<<" , "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedErrorMessage, json)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, json )
************************************
[+] input: testCreateGroup_success() { // 准备参数 MemberGroupCreateReqVO reqVO = randomPojo(MemberGroupCreateReqVO.class, o -> o.setStatus(randomCommonStatus()));  // 调用 Long groupId = groupService.createGroup(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberGroupDO group = groupMapper.selectById(groupId); assertPojoEquals(reqVO, group); }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
[+] input: queryUnmodifiedWhenNoTrace() { TracingStatementInspector inspector = new TracingStatementInspector(null); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
[+] input: testUpdateAfterApproval_approved() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); // 有序，方便判断 requestedScopes.put("read", true); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(2, result.size()); // read assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); // write assertEquals(userId, result.get(1).getUserId()); assertEquals(userType, result.get(1).getUserType()); assertEquals(clientId, result.get(1).getClientId()); assertEquals("write", result.get(1).getScope()); assertFalse(result.get(1).getApproved()); assertFalse(DateUtils.isExpired(result.get(1).getExpiresTime())); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: isAdminOrLabeler_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdminOrLabeler = DataGymSecurity.isAdminOrLabeler("eforce21", null, false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdminOrLabeler)
[-] pred: org. junit. Assert. assertTrue ( isAdminOrLabeler )
************************************
[+] input: shouldBuildErrorCodeNoExpression() { Message message = errorCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Error code cannot be an expression."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testBatchSend() { //        // Setup //        final BatchSendRequest batchSendRequest = new BatchSendRequest("code", 0L, //                Arrays.asList(new MessageParam("receiver", new HashMap<>(), new HashMap<>()))); //        final SendResponse expectedResult = new SendResponse("status", "msg"); // //        // Configure ProcessController.process(...). //        final ProcessContext processContext = new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        when(processController.process(new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")))).thenReturn(processContext); // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.batchSend(batchSendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testHashCode() { JavaIdentifier id = new JavaIdentifier( "com.gazelle.java.javaparser.generators", "JavaIdentifier", "artifact("com.gazelle.java.javaparser:generators")"); int hashCode = 1986351184; "<AssertPlaceHolder>"; }
[*] target: assertEquals(id.hashCode(), hashCode)
[-] pred: org. junit. Assert. assertEquals ( id. hashCode(), hashCode )
************************************
[+] input: testDefaultDataSourceMetadata() { DataSourceMetadata defaultMetadata = DataSourceMetadata.defaultOpenSearchDataSourceMetadata(); "<AssertPlaceHolder>"; assertEquals(DataSourceType.OPENSEARCH, defaultMetadata.getConnector()); assertTrue(defaultMetadata.getAllowedRoles().isEmpty()); assertTrue(defaultMetadata.getProperties().isEmpty()); }
[*] target: assertNotNull(defaultMetadata)
[-] pred: org. junit. Assert. assertNotNull ( defaultMetadata )
************************************
[+] input: Exception { InputCodec objectUnderTest = new InputCodec() { @Override public void parse(InputStream inputStream, Consumer<Record<Event>> eventConsumer) throws IOException {  } };  inputFile = mock(InputFile.class); inputStream = mock(SeekableInputStream.class); decompressionEngine = mock(DecompressionEngine.class); when(inputFile.newStream()).thenReturn(inputStream); closeCalled = false; doAnswer(a -> { closeCalled = true; return null; }).when(inputStream).close(); when(decompressionEngine.createInputStream(any(InputStream.class))).thenReturn(inputStream); objectUnderTest.parse(inputFile, decompressionEngine, rec -> {}); "<AssertPlaceHolder>"; }
[*] target: assertTrue(closeCalled)
[-] pred: org. junit. Assert. assertTrue ( closeCalled )
************************************
[+] input: testCreateCombinationActivity_success() { // 准备参数 CombinationActivityCreateReqVO reqVO = randomPojo(CombinationActivityCreateReqVO.class);  // 调用 Long combinationActivityId = combinationActivityService.createCombinationActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CombinationActivityDO combinationActivity = combinationActivityMapper.selectById(combinationActivityId); assertPojoEquals(reqVO, combinationActivity); }
[*] target: assertNotNull(combinationActivityId)
[-] pred: org. junit. Assert. assertNotNull ( combinationActivityId )
************************************
[+] input: shouldBuildInternalScript() { Message message = MessageFactory.internalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Script is transformed to Zeebe script."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testContainsEntityShouldReturnTrueWhenCalledWithExistingKey() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: getName_ofCtorValue() { final var expected = "A"; final var obj = new ActivityType(expected); final var actual = obj.getName(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUpdateWithTypeEmbed() { var intCell = RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(); var rows = List.of( RecordRowDesc.builder().cells(Map.of("key", intCell)).build() ); var req = UpdateTableEmbeddedRequest.builder() .tableName("t") .keyColumn("key") .rows(rows) .build();  // update with type this.dataStore.updateWithTypeEmbed(req); var result = this.dataStore.scan(DataStoreScanRequest.builder() .tables(List.of(DataStoreScanRequest.TableInfo.builder() .tableName("t") .keepNone(true) .build())) .keepNone(true) .encodeWithType(true) .build()); var expected = new RecordList( null, Map.of("key", ColumnHintsDesc.builder() .typeHints(List.of("INT32")) .columnValueHints(List.of("1")) .build()), List.of(Map.of("key", Map.of("type", "INT32", "value", "00000001"))), "00000001", "INT32" ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldCreateCommandForShortChain() { final String expectedCommand = "certbot certonly --preferred-chain "ISRG Root X1" " + "--agree-tos --email admin@example.com -n --keep --webroot -w /opt/zextras " + "--cert-name example.com " + "-d public.example.com " + "-d virtual1.example.com -d virtual2.example.com"; final String actualCommand = remoteCertbot.createCommand(RemoteCommands.CERTBOT_CERTONLY, mail, "short", domainName, publicServiceHostName, virtualHostName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommand, actualCommand)
[-] pred: org. junit. Assert. assertEquals ( expectedCommand, actualCommand )
************************************
[+] input: IOException { // Given final String taskId = "mocked task id"; final String lcEntryKey = "existingEntryId"; final String deletedImageId = "deleted image"; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); final LabelTask labelTask = Mockito.mock(LabelTask.class); final Media media = Mockito.mock(Media.class); final String expectedErrorMessage = String.format("Item image with id %s not found.", deletedImageId); final LcEntry lcEntry = Mockito.mock(LcEntry.class); final Project project = ProjectUtils.createTestProject(PROJECT_ID); project.setOwner(loggedInUserId); project.getLabelConfiguration().setEntries(Set.of(lcEntry));  // When Mockito.when(labelTaskRepositoryMock.findById(taskId)).thenReturn(Optional.of(labelTask)); Mockito.when(labelTask.getProject()).thenReturn(project); Mockito.when(labelTask.getLabelTaskState()).thenReturn(LabelTaskState.COMPLETED); Mockito.when(labelTask.getMedia()).thenReturn(media); Mockito.when(lcEntry.getEntryKey()).thenReturn(lcEntryKey); Mockito.when(media.isDeleted()).thenReturn(true); Mockito.when(media.getId()).thenReturn(deletedImageId);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("NotFoundException should be thrown."); } catch (NotFoundException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyVersion() { //given putAllMocks();  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testAsPolicyUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asPolicyUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3 + "/policy"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: inValidatePayLoadOfNull() { boolean payloadOfNull = accessTokenService .validateAccessToken(accessTokenService.generateAccessToken(UUID.randomUUID().toString()), null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(payloadOfNull)
[-] pred: org. junit. Assert. assertFalse ( payloadOfNull )
************************************
[+] input: testCreateMailAccount_success() { // 准备参数 MailAccountSaveReqVO reqVO = randomPojo(MailAccountSaveReqVO.class, o -> o.setMail(randomEmail())) .setId(null); // 防止 id 被赋值  // 调用 Long mailAccountId = mailAccountService.createMailAccount(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailAccountDO mailAccount = mailAccountMapper.selectById(mailAccountId); assertPojoEquals(reqVO, mailAccount, "id"); }
[*] target: assertNotNull(mailAccountId)
[-] pred: org. junit. Assert. assertNotNull ( mailAccountId )
************************************
[+] input: shouldBuildConditionExpression() { Message message = MessageFactory.conditionExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: convertToDatabaseColumnNull() { AnuncioStatusConverter converter = new AnuncioStatusConverter(); String convert = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(convert)
[-] pred: org. junit. Assert. assertNull ( convert )
************************************
[+] input: mustHaveNormalPage() { var cleanups = new Cleanups( withLastLocation("El Vibrato Island"), withFight(1), withNextMonster("lonely construct")); try (cleanups) { String input = "hello"; StringBuffer page = new StringBuffer(input); ElVibratoManager.decorate(page); String result = page.toString(); // Undecorated "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, result)
[-] pred: org. junit. Assert. assertEquals ( input, result )
************************************
[+] input: testDefaultConstructor() { op = new Checkpoint(); "<AssertPlaceHolder>"; assertNull(op.getTransactionId()); }
[*] target: assertEquals(0, op.getNumActiveTxns())
[-] pred: org. junit. Assert. assertEquals ( 0, op. getNumActiveTxns() )
************************************
[+] input: test_objectFileName_default_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".json")); }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
[+] input: URISyntaxException { var target = new RestClientParser(); var req = new Request(); req.setRequestText( "POST https://www.google.com/test?a=1&b=%202\n" + "Content-Type:text/plain\n" + "\n" + "This is a multiline\n" + "Text\n"); var result = target.parse(req.getRequestText()); "<AssertPlaceHolder>"; assertEquals(2, result.getQuery().size()); assertEquals(1, result.getHeaders().size()); var header = result.getHeader(ConstantsHeader.CONTENT_TYPE); assertEquals("text/plain", header); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getMaior_test04() { int maior = Calculadora.getMaior(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, maior)
[-] pred: org. junit. Assert. assertEquals ( 0, maior )
************************************
[+] input: isAndroid_whenSetInJavaVMVendor() { String actualVendor = System.getProperty("java.vm.vendor"); System.setProperty("java.vm.vendor", "The Android Project"); boolean isAndroid = OSUtil.isAndroid(); System.setProperty("java.vm.vendor", actualVendor); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAndroid)
[-] pred: org. junit. Assert. assertTrue ( isAndroid )
************************************
[+] input: save() { var request = OperationLogRequest.builder() .operatorUserId(-1000) .operatorUsername("ut") .operatorNickname("ut") .operationModule("system") .operationCode("updateEmail") .operationName("更新邮箱") .operationResponse(JsonData.ok()) .isSuccess(true) .involvedProjectId(null) .involvedGroupId(null) .involvedUserId(null) .build(); Long id = operationLogService.save(request); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: getNamingService() { NacosNamingService namingService = namingServiceConfig.getNamingService(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(namingService)
[-] pred: org. junit. Assert. assertNotNull ( namingService )
************************************
[+] input: testValidByronAddr() { boolean isValid = AddressUtil.isValidAddress("DdzFFzCqrhszg6cqZvDhEwUX7cZyNzdycAVpm4Uo2vjKMgTLrVqiVKi3MBt2tFAtDe7NkptK6TAhVkiYzhavmKV5hE79CWwJnPCJTREK");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
[+] input: queryUnmodifiedWhenNoSpan() { TracingStatementInspector inspector = new TracingStatementInspector(tracer); String sql = "--latest_transaction_id \n" + "SELECT MAX(transaction_id) FROM transactions"; String actual = inspector.inspect(sql); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sql, actual)
[-] pred: org. junit. Assert. assertEquals ( sql, actual )
************************************
[+] input: readContainerNameValid() { final String hostnameThatIsPodName = "fooservice-b55497fc6-x9f56"; final Map<String, String> env = new HashMap<>(); env.put("HOSTNAME", hostnameThatIsPodName); final TracingAttributes attributes = instance(env); final String actual = attributes.get(ResourceAttributes.K8S_CONTAINER_NAME); final String expected = "fooservice"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUpdateAfterApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); // write assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("write", result.get(0).getScope()); assertFalse(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
[+] input: testIsValidCsrfTokenForAccountWithMultipleTokens() { try { Account acct = Provisioning.getInstance().getAccountByName( "test@zimbra.com"); AuthToken authToken = new ZimbraAuthToken(acct);  String csrfToken1 = CsrfUtil.generateCsrfToken(acct.getId(), AUTH_TOKEN_EXPR, CSRFTOKEN_SALT, authToken); boolean validToken = CsrfUtil.isValidCsrfToken(csrfToken1, authToken); "<AssertPlaceHolder>";   } catch (ServiceException  e) { fail("Should not throw exception."); } }
[*] target: assertTrue(validToken)
[-] pred: org. junit. Assert. assertTrue ( validToken )
************************************
[+] input: testIsProviderCodeUniqueDoesntExist() { boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
[+] input: testCreateSeckillActivity_success() { // 准备参数 SeckillActivityCreateReqVO reqVO = randomPojo(SeckillActivityCreateReqVO.class);  // 调用 Long seckillActivityId = seckillActivityService.createSeckillActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillActivityDO seckillActivity = seckillActivityMapper.selectById(seckillActivityId); assertPojoEquals(reqVO, seckillActivity); }
[*] target: assertNotNull(seckillActivityId)
[-] pred: org. junit. Assert. assertNotNull ( seckillActivityId )
************************************
[+] input: Exception { String address = "addr_test1qqwpl7h3g84mhr36wpetk904p7fchx2vst0z696lxk8ujsjyruqwmlsm344gfux3nsj6njyzj3ppvrqtt36cp9xyydzqzumz82";  List<Utxo> utxos = loadUtxos(LIST_2);  given(utxoSupplier.getAll(anyString())).willReturn(utxos);  UtxoSelectionStrategy selectionStrategy = new RandomImproveUtxoSelectionStrategy(utxoSupplier, true);  var requested = new Amount(CardanoConstants.LOVELACE, ADAConversionUtil.adaToLovelace(BigDecimal.TEN)); Set<Utxo> selectedUtxos = selectionStrategy.select(address, requested, null, null, Collections.emptySet(), 40);  var index = 0; while(selectedUtxos.size() != 1){ selectedUtxos = selectionStrategy.select(address, requested, null, null, Collections.emptySet(), 40); if(index > 3){ break; } index += 1; } Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, selectedUtxos.size())
[-] pred: org. junit. Assert. assertEquals ( 1, selectedUtxos. size ( ) )
************************************
[+] input: Exception { String masterAddresses = harness.getMasterAddressesAsString();  KuduTableInfo tableInfo = KuduTableInfo .forTable("test_speed") .createTableIfNotExists( () -> Lists.newArrayList( new ColumnSchema .ColumnSchemaBuilder("id", Type.INT32) .key(true) .build(), new ColumnSchema .ColumnSchemaBuilder("uuid", Type.STRING) .build() ), () -> new CreateTableOptions() .setNumReplicas(3) .addHashPartitions(Lists.newArrayList("id"), 6));  KuduWriterConfig writerConfig = KuduWriterConfig.Builder .setMasters(masterAddresses) .setEventualConsistency() .build(); KuduSink<Row> sink = new KuduSink<>(writerConfig, tableInfo, new RowOperationMapper(columns, AbstractSingleOperationMapper.KuduOperation.INSERT));  sink.setRuntimeContext(context); sink.open(new Configuration());  int totalRecords = 100000; for (int i = 0; i < totalRecords; i++) { Row kuduRow = new Row(2); kuduRow.setField(0, i); kuduRow.setField(1, UUID.randomUUID().toString()); sink.invoke(kuduRow); }  // sleep to allow eventual consistency to finish Thread.sleep(1000);  sink.close();  List<Row> rows = readRows(tableInfo); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(totalRecords, rows.size())
[-] pred: org. junit. Assert. assertEquals ( totalRecords, rows. size ( ) )
************************************
[+] input: testDeserialize() { Language expectedLanguage = new Language("en", List.of("en_us", "en_gb")); String serializedLanguage = "en|en_us|en_gb";  Language actualLanguage = this.composer.deserialize(serializedLanguage).get(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLanguage, actualLanguage)
[-] pred: org. junit. Assert. assertEquals ( expectedLanguage, actualLanguage )
************************************
[+] input: serialize_WithNullValue_ReturnsCorrectJson() { // Test for serializing null value GenericRecord record = new GenericData.Record(SCHEMA); record.put("nested", null);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: serialize_WithMap_ReturnsCorrectJson() { // Test for serializing a map GenericRecord record = new GenericData.Record(SCHEMA); Map<String, String> map = new HashMap<>(); map.put("one", "valueOne"); map.put("two", "valueTwo"); map.put("three", "valueThree"); record.put("metadata", map);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": {"one": "valueOne", "two": "valueTwo", "three": "valueThree"}, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: Exception {  Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); "<AssertPlaceHolder>";  webTestClient.get() .uri(API_URL+"?keywordType=locationName&keyword=location&page=0&size=3") .exchange() .expectStatus().isOk() .expectBody() .jsonPath("$.totalElements").isEqualTo(1) .jsonPath("$.content[0].locationName").isEqualTo(location1.getLocationName()); }
[*] target: assertNotNull(location1)
[-] pred: org. junit. Assert. assertNotNull ( location1 )
************************************
[+] input: testGetExpression_noLoginUser() { // 准备参数 String tableName = randomString(); Alias tableAlias = new Alias(randomString()); // mock 方法  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
[+] input: getStakeAddressFromMnemonic_whenTestnet() { String phrase24W = "coconut you order found animal inform tent anxiety pepper aisle web horse source indicate eyebrow viable lawsuit speak dragon scheme among animal slogan exchange"; String expectedRewardAddress = "stake_test1uq06d3cktqn4z9tv8rr9723fvrxdnh44an9tjvjftw6krscamyncv";  Account account = new Account(Networks.testnet(), phrase24W); String rewardAddress = account.stakeAddress();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRewardAddress, rewardAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedRewardAddress, rewardAddress )
************************************
[+] input: getQuantidadeLetrasMinusculas_test04() { int quantidadeLetrasMinusculas = Strings.getQuantidadeLetrasMinusculas(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMinusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMinusculas )
************************************
[+] input: testCreateLevel_success() { // 准备参数 MemberLevelCreateReqVO reqVO = randomPojo(MemberLevelCreateReqVO.class, o -> { o.setDiscountPercent(randomInt()); o.setIcon(randomURL()); o.setBackgroundUrl(randomURL()); o.setStatus(randomCommonStatus()); });  // 调用 Long levelId = levelService.createLevel(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberLevelDO level = memberlevelMapper.selectById(levelId); assertPojoEquals(reqVO, level); }
[*] target: assertNotNull(levelId)
[-] pred: org. junit. Assert. assertNotNull ( levelId )
************************************
[+] input: testAssignUserRole() { // 准备参数 Long userId = 1L; Set<Long> roleIds = asSet(200L, 300L); // mock 数据 UserRoleDO userRole01 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(100L); userRoleMapper.insert(userRole01); UserRoleDO userRole02 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(200L); userRoleMapper.insert(userRole02);  // 调用 permissionService.assignUserRole(userId, roleIds); // 断言 List<UserRoleDO> userRoleDOList = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, userRoleDOList.get(0).getUserId()); assertEquals(200L, userRoleDOList.get(0).getRoleId()); assertEquals(1L, userRoleDOList.get(1).getUserId()); assertEquals(300L, userRoleDOList.get(1).getRoleId()); }
[*] target: assertEquals(2, userRoleDOList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, userRoleDOList. size ( ) )
************************************
[+] input: can_serialize_and_deserialize_literals() { Expression original = literal(10); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: getFunctions() { PrometheusStorageEngine engine = new PrometheusStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(2, functionResolverCollection.size()); Iterator<FunctionResolver> iterator = functionResolverCollection.iterator(); assertTrue(iterator.next() instanceof QueryRangeTableFunctionResolver); assertTrue(iterator.next() instanceof QueryExemplarsTableFunctionResolver); }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
[+] input: testUpdatePhyClusterDynamicConfig() { final ClusterSettingDTO param = new ClusterSettingDTO("clusterName", "key", "value"); final Result<Boolean> expectedResult = Result.buildFail(false); when(mockClusterPhyService.updatePhyClusterDynamicConfig(new ClusterSettingDTO("clusterName", "key", "value"))) .thenReturn(Result.buildFail(false)); Integer projectId = 1; final Result<Boolean> result; try { result = clusterPhyManager.updatePhyClusterDynamicConfig(param, "operator", projectId); } catch (ESOperateException e) { throw new RuntimeException(e); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.delete(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: shouldValidateEncryptAndDecryptAes256GcmWrongKeySize() { String clearText = "myClearText"; String keyEncryptionKey = "myKeyEncryptionKeyWrongSize"; String myClearText = EncryptionUtils.encryptAes256Gcm(clearText, keyEncryptionKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearText, myClearText)
[-] pred: org. junit. Assert. assertEquals ( clearText, myClearText )
************************************
[+] input: Exception { Mockito.reset(fileUtils); Mockito.reset(delegate); File file = new File("/asdflkajsdfoij"); when(fileUtils.readFileCompletely(file)).thenReturn(emptyList()); FileSender sender = buildFileSender(); boolean result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(fileUtils).safeDelete(file); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testIsClusterExists() { when(mockClusterPhyService.isClusterExists(CLUSTER)).thenReturn(false);  final boolean result = clusterPhyManager.isClusterExists(CLUSTER);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testConvertShouldReturnNullWhenCalledWithoutAttributesAndEmptyList() { //given final KeyEntityId keyEntityId = TestConstantsKeys.UNVERSIONED_KEY_ENTITY_ID_1;  final KeyRotationPolicyModel model = new KeyRotationPolicyModel(); model.setId(keyEntityId.asRotationPolicyUri(HTTPS_LOCALHOST_8443)); model.setLifetimeActions(List.of()); model.setKeyEntityId(keyEntityId);  final KeyConverterRegistry registry = mock(KeyConverterRegistry.class); final KeyRotationPolicyV73ModelToEntityConverter underTest = new KeyRotationPolicyV73ModelToEntityConverter(registry);  //when final RotationPolicy actual = underTest.convert(model);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: shouldBuildEscalationCode() { Message message = MessageFactory.escalationCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Escalation code is transformed from 'old' to 'new'. Please review."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testDense() { float[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  FloatSparseNdArray instance = new FloatSparseNdArray(indices, values, DimensionalSpace.create(shape)); FloatNdArray denseInstance = instance.toDense(); FloatNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: Exception { // /// * // { // "ID": "intelligentGraph.PathQL1", // "query": "getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}", // "type": "read", // "roles": ["user"], // "arguments" : { // "subject" : iri("http://ex.org/1"), // "object" : null // } // } // */ // // QueryMeta queryMeta =QueryMeta.ofQuery("getPaths?pathQL=(<http://ex.org/REPORTSTO>){1,2}"); // queryMeta.ID= "testPath"; // queryMeta.database = "dj/junit"; // Map<String, Object> arguments = new HashMap<>(); // arguments.put("subject", iri("http://ex.org/1")); // arguments.put("object", null); // queryMeta.arguments=arguments; // // // AbstractDatabase database = services.getConfig().getDatabase( queryMeta.database); // // List<Map<String, Object>> res = database.queryGraph(queryMeta, null); // // ObjectMapper mapper = new ObjectMapper(); // String resJSON = // mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mapper.convertValue(res, // JsonNode.class)); // // String expectedJSON = Files.readString( Paths.get("./src/test/resources/results/", "junit", // queryMeta.ID +".json")); // // "<AssertPlaceHolder>"; // }
[*] target: assertEquals( expectedJSON, resJSON)
[-] pred: org. junit. Assert. assertEquals ( expectedJSON, resJSON )
************************************
[+] input: profitTest() { //given int answer = 230; //when int result = sampleProvince.profit(); //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: haveTheSameOwner_whenFirstOwnerEqualsSecondOwner_returnsTrue() { // When boolean haveTheSameOwner = DataGymSecurity.haveTheSameOwner("eforce21", "eforce21");  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(haveTheSameOwner)
[-] pred: org. junit. Assert. assertTrue ( haveTheSameOwner )
************************************
[+] input: callWithRetryRetriableError() { final int[] attempt = new int[1]; final int maxRetries = 3; final int res = RetryUtil.callWithRetry("test callWithRetryRetriableError", () -> { if (attempt[0] < maxRetries) { ++attempt[0]; throw new ArithmeticException(); } return attempt[0]; }, maxRetries, 1L, RuntimeException.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(maxRetries, res)
[-] pred: org. junit. Assert. assertEquals ( maxRetries, res )
************************************
[+] input: testDense() { short[][] dense2DArray = {{1, 0, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}};  ShortSparseNdArray instance = new ShortSparseNdArray(indices, values, DimensionalSpace.create(shape)); ShortNdArray denseInstance = instance.toDense(); ShortNdArray expectedDense = StdArrays.ndCopyOf(dense2DArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDense, denseInstance)
[-] pred: org. junit. Assert. assertEquals ( expectedDense, denseInstance )
************************************
[+] input: testBufferIsEmpty_without_write() { final PeerForwarderReceiveBuffer<Record<String>> peerForwarderReceiveBuffer = createObjectUnderTest(TEST_BUFFER_SIZE);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(peerForwarderReceiveBuffer.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( peerForwarderReceiveBuffer. isEmpty ( ) )
************************************
[+] input: CannotParseOpenApiException { logger.info("Test specification type inference"); OpenApiParser openAPIParser = new OpenApiParser(ApiUnderTest.loadTestApiFromFile("type-inference")); openAPIParser.parse();  File solvedSpecification = new File("apis/.test-apis/type-inference/specifications/solved.json"); Map<String, Object> parsed = Helper.getParserMap (openAPIParser); Gson gson = new Gson(); Reader reader = Files.newBufferedReader(Paths.get(solvedSpecification.getAbsolutePath())); Map<String, Object> rightMap = gson.fromJson(reader, Map.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(rightMap, parsed)
[-] pred: org. junit. Assert. assertEquals ( rightMap, parsed )
************************************
[+] input: serialize_WithFloatInfinityValue_ReturnsQuotedJson() { // Test for serializing float Infinity value GenericRecord record = new GenericData.Record(SCHEMA); record.put("floatValue", Float.POSITIVE_INFINITY);  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": "Infinity", "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": null, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: testManifestNoChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls");  Properties properties = new Properties(); properties.put(tempFolder.relativize(bar.toPath()).toString(), "7cada13b5b8770e46f7a69e8856abdb9"); properties.put(tempFolder.relativize(foo.toPath()).toString(), "61bbd2d58c22dfb3c664829ad116f7e9");  File manifest = tempFolder.resolve("manifest.props").toFile(); try (FileOutputStream fis = new FileOutputStream(manifest)) { properties.store(fis, "Schema Manifest"); }  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
[+] input: testIsProviderCodeUniqueSameExists() { Provider provider = new Provider(1, "name-a", LocalDate.now(), "nationality-a", "code-a"); Mockito.when(dao.findProviderByCode(Mockito.any())).thenReturn(provider);  boolean retVal = service.isProviderCodeUnique(1, "a"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(retVal)
[-] pred: org. junit. Assert. assertTrue ( retVal )
************************************
[+] input: testCreateArticleCategory_success() { // 准备参数 ArticleCategoryCreateReqVO reqVO = randomPojo(ArticleCategoryCreateReqVO.class);  // 调用 Long articleCategoryId = articleCategoryService.createArticleCategory(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleCategoryDO articleCategory = articleCategoryMapper.selectById(articleCategoryId); assertPojoEquals(reqVO, articleCategory); }
[*] target: assertNotNull(articleCategoryId)
[-] pred: org. junit. Assert. assertNotNull ( articleCategoryId )
************************************
[+] input: basicEvents() { StateMachineBuilder builder = StateMachine.builder(); builder.initialState(ExampleState.A); builder.state(ExampleState.A); builder.state(ExampleState.B);  AtomicBoolean startCalled = new AtomicBoolean(false); AtomicBoolean transitionCalled = new AtomicBoolean(false); AtomicBoolean stopCalled = new AtomicBoolean(false);  EventNode<StateMachineEvent> eventNode = builder.eventNode(); eventNode.addListener(StateMachineStartEvent.class, event -> startCalled.set(true)); eventNode.addListener(StateMachineTransitionEvent.class, event -> transitionCalled.set(true)); eventNode.addListener(StateMachineStopEvent.class, event -> stopCalled.set(true));  StateMachine stateMachine = builder.build();  Assertions.assertTrue(startCalled.get()); Assertions.assertFalse(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.transform(ExampleState.B);  Assertions.assertTrue(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.stop(Signal.UNDEFINED);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(stopCalled.get())
[-] pred: org. junit. Assert. assertTrue ( stopCalled. get ( ) )
************************************
[+] input: testConvertShouldSetRecognisedCurveNameAndParametersWhenCalledWithValidEcPrivateKey() { //given final EcPrivateKeyToJsonWebKeyImportRequestConverter underTest = new EcPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateEc(KeyCurveName.P_256); final BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.EC, actual.getKeyType()); Assertions.assertEquals(KeyCurveName.P_256, actual.getCurveName()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getX()); Assertions.assertNotNull(actual.getY()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test03() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais(""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeCaracteresEspeciais )
************************************
[+] input: testGivenPersonDTOThenReturnSavedMessage() { PersonDTO personDTO = createFakeDTO(); Person expectedSavedPerson = createFakeEntity();  when(personMapper.toModel(personDTO)).thenReturn(expectedSavedPerson); when(personRepository.save(any(Person.class))).thenReturn(expectedSavedPerson); //        when(personRepository.save(any(Person.class))) //                .thenReturn(expectedSavedPerson);  MessageResponseDTO expectedMessage = createExpectedResponse(expectedSavedPerson.getId()); MessageResponseDTO successMessage = personService.createPerson(personDTO);  "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedMessage, successMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, successMessage )
************************************
[+] input: getQuantidadeLetrasMaiusculas_test07() { int quantidadeLetrasMaiusculas = Strings.getQuantidadeLetrasMaiusculas("felix"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, quantidadeLetrasMaiusculas)
[-] pred: org. junit. Assert. assertEquals ( 0, quantidadeLetrasMaiusculas )
************************************
[+] input: testGetWorkflowNames10() { List<String> names = NextflowScript.getWorkflowNames("echo workflow ${value}"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, names.size())
[-] pred: org. junit. Assert. assertEquals ( 0, names. size ( ) )
************************************
[+] input: testContainsEntityShouldReturnFalseWhenCalledWithNonExistingKeyName() { //given  //when final boolean actual = underTest.containsEntity(VERSIONED_KEY_ENTITY_ID_3_VERSION_3);  //then Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: checkForPreApproval_approve() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(null)); // mock 数据 OAuth2ApproveDO approve = randomPojo(OAuth2ApproveDO.class).setUserId(userId) .setUserType(userType).setClientId(clientId).setScope("read") .setExpiresTime(LocalDateTimeUtil.offset(LocalDateTime.now(), 1L, ChronoUnit.DAYS)).setApproved(true); // 同意 oauth2ApproveMapper.insert(approve);  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: testCreateDictType_success() { // 准备参数 DictTypeSaveReqVO reqVO = randomPojo(DictTypeSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 避免 id 被赋值  // 调用 Long dictTypeId = dictTypeService.createDictType(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictTypeDO dictType = dictTypeMapper.selectById(dictTypeId); assertPojoEquals(reqVO, dictType, "id"); }
[*] target: assertNotNull(dictTypeId)
[-] pred: org. junit. Assert. assertNotNull ( dictTypeId )
************************************
[+] input: shouldBuildInOutBusinessKeyNotSupported() { Message message = MessageFactory.inOutBusinessKeyNotSupported(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: QueryParam() { //       OrderSearchParams orderSearchParams = new OrderSearchParams(); //       orderSearchParams.setPageSize(0); //       orderSearchParams.setPageNumber(10); //       IPage<OrderSimpleVO> orderVOIPage = orderService.queryByParams(orderSearchParams); //       Assertions."<AssertPlaceHolder>"; //       orderVOIPage.getRecords().forEach(System.out::println); }
[*] target: assertNotNull(orderVOIPage)
[-] pred: org. junit. Assert. assertNotNull ( orderVOIPage )
************************************
[+] input: shouldBuildElementNotSupportedHint() { Message message = MessageFactory.elementNotSupportedHint(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: can_serialize_and_deserialize_predicates() { Expression original = DSL.or(literal(true), DSL.less(literal(1), literal(2))); Expression actual = serializer.deserialize(serializer.serialize(original)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, actual)
[-] pred: org. junit. Assert. assertEquals ( original, actual )
************************************
[+] input: shouldBuildExecutionListener() { Message message = MessageFactory.executionListener("start", "${myExecutionListener}"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Listener at 'start' with implementation '${myExecutionListener}' cannot be transformed. Execution Listeners do not exist in Zeebe."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildTimerExpressionMappedMessage() { String juelExpression = random(); String feelExpression = random(); Message message = timerExpressionMapped(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Timer expression was transformed: Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testAsUriShouldReturnUriUsingAliasWhenCalledWithValidAlias() { //given final CertificateEntityId underTest = VERSIONED_CERT_ENTITY_ID_1_VERSION_3;  //when final URI actual = underTest.asUri(HTTPS_LOOP_BACK_IP);  //then final String expected = HTTPS_LOOP_BACK_IP + "/certificates/" + CERT_NAME_1 + "/" + CERT_VERSION_3; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. toString ( ) )
************************************
[+] input: readPropertiesFileMissingTest() { Map<String, String> properties = ResourceUtil.readProperties(ResourceUtilTest.class, "missing.properties");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, properties.size())
[-] pred: org. junit. Assert. assertEquals ( 0, properties. size ( ) )
************************************
[+] input: shouldBuildPotentialStarter() { Message message = MessageFactory.potentialStarter(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: equals_false_when_different_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(3.0, 2.0, 1.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: isAndroid_whenNotSetInConfig() { boolean isAndroid = Configuration.INSTANCE.isAndroid();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isAndroid)
[-] pred: org. junit. Assert. assertFalse ( isAndroid )
************************************
[+] input: testGenNotifyBodyForCustom() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwdxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Custom") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
[+] input: testNumberWithUnitValueProvided() { Duration expectedDuration = Duration.ofMinutes(3); Duration actualDuration = DurationUtils.parseDuration("3M", "refresh-period"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDuration, actualDuration)
[-] pred: org. junit. Assert. assertEquals ( expectedDuration, actualDuration )
************************************
[+] input: testMultiplica7() { int res = Calculadora.multiplica(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, res)
[-] pred: org. junit. Assert. assertEquals ( 0, res )
************************************
[+] input: serialize_WithBytesValue_ReturnsCorrectJson() { // Test for serializing bytes value GenericRecord record = new GenericData.Record(SCHEMA); record.put("rawData", ByteBuffer.wrap(new byte[]{1, 2, 3}));  String expectedJson = "{"nested": null, "id": null, "value": null, "floatValue": null, "alternateIds": null, "metadata": null, "lastUpdated": null, "rawData": {"bytes": "\\u0001\\u0002\\u0003"}, "suit": null}";  String json = encoder.serialize(record);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: testCopy() { // Tests round-tripping a json document that contains all event types and various kinds of nesting  String json = "{\n" + "  "p1": "str1",\n" + "  "p2": 42,\n" + "  "p3": ["str31", "str32"],\n" + "  "p4": {\n" + "    "p41": "str41",\n" + "    "p42": ["str421", "str422"],\n" + "    "p43": {\n" + "      "p431": "str431"\n" + "    },\n" + "    "p44": true,\n" + "    "p45": false,\n" + "    "p46": 3.14\n" + "  },\n" + "  "p5": [{\n" + "    "p51": {\n" + "      "p511": "str511"\n" + "    }\n" + "  }],\n" + "  "p6": null\n" + "}\n";  json = normalizeIndent(json);  JsonProvider provider = JsonpUtils.provider();  JsonParser parser = provider.createParser(new StringReader(json)); StringWriter sw = new StringWriter(); JsonGenerator generator = provider.createGenerator(sw);  JsonpUtils.copy(parser, generator); parser.close(); generator.close();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(json, sw.toString())
[-] pred: org. junit. Assert. assertEquals ( json, sw. toString ( ) )
************************************
[+] input: testCreateSocialClient_success() { // 准备参数 SocialClientSaveReqVO reqVO = randomPojo(SocialClientSaveReqVO.class, o -> o.setSocialType(randomEle(SocialTypeEnum.values()).getType()) .setUserType(randomEle(UserTypeEnum.values()).getValue()) .setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long socialClientId = socialClientService.createSocialClient(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SocialClientDO socialClient = socialClientMapper.selectById(socialClientId); assertPojoEquals(reqVO, socialClient, "id"); }
[*] target: assertNotNull(socialClientId)
[-] pred: org. junit. Assert. assertNotNull ( socialClientId )
************************************
[+] input: shouldBuildConditionExpressionFeel() { String oldExpression = random(); String newExpression = random(); Message message = conditionExpressionFeel(oldExpression, newExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "FEEL Condition expression: Please review transformed expression: '%s' -> '%s'. Check for custom FEEL functions as they are not supported by Zeebe.", oldExpression, newExpression); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldReturnFalseWhenNotExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(false);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(existWaitingProduct)
[-] pred: org. junit. Assert. assertFalse ( existWaitingProduct )
************************************
[+] input: IOException { SecurityContext.clear();  String taskId = "not used here"; String lcEntryKey = "not used here"; String expectedErrorMessage = "Forbidden."; final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);  try { underTest.streamSegmentationBitmap(taskId, lcEntryKey, response); fail("ForbiddenException should be thrown."); } catch (ForbiddenException e) { "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedErrorMessage, e.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, e. getMessage ( ) )
************************************
[+] input: shouldBuildFollowUpDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.followUpDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'followUpDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: whenUpdateThenReturnSuccess() { when(service.update(userDTO)).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.update(ID, userDTO);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.OK, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCreatePost_success() { // 准备参数 PostSaveReqVO reqVO = randomPojo(PostSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 防止 id 被设置 // 调用 Long postId = postService.createPost(reqVO);  // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 PostDO post = postMapper.selectById(postId); assertPojoEquals(reqVO, post, "id"); }
[*] target: assertNotNull(postId)
[-] pred: org. junit. Assert. assertNotNull ( postId )
************************************
[+] input: IOException { final String inputString = "a".repeat(100); final byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);  try (PositionOutputStream outputStream = localOutputFile.create(8192L)) { outputStream.write(inputBytes); }  final String actualContent = Files.readString(testDataFile.toPath());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputString, actualContent)
[-] pred: org. junit. Assert. assertEquals ( inputString, actualContent )
************************************
[+] input: fromOptionValue_interactions_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("interactions"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("INTERACTIONS")); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
[+] input: getDataset_whenIdIsValid_getDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); DatasetViewModel dataset = datasetService.getDataset(DATASET_ID, false);  //Then "<AssertPlaceHolder>"; assertEquals(testDataset.getId(), dataset.getId()); assertEquals(testDataset.getName(), dataset.getName()); assertEquals(testDataset.getShortDescription(), dataset.getShortDescription()); assertEquals(testDataset.isDeleted(), dataset.isDeleted()); assertNull(dataset.getDeleteTime()); assertEquals(0, dataset.getProjectCount());  verify(datasetRepositoryMock).findById(anyString()); verify(datasetRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(datasetRepositoryMock); }
[*] target: assertNotNull(dataset)
[-] pred: org. junit. Assert. assertNotNull ( dataset )
************************************
[+] input: shouldReturnTrueWhenExistProductOfOwnerBefore() { var ownerId = 1L; var productStatus = ProductStatus.WAITING;  when(productRepository.existsByOwnerIdAndStatus(ownerId, productStatus)).thenReturn(true);  boolean existWaitingProduct = createProductService.existWaitingProductByOwnerId(ownerId);  verify(productRepository).existsByOwnerIdAndStatus(ownerId, productStatus);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(existWaitingProduct)
[-] pred: org. junit. Assert. assertTrue ( existWaitingProduct )
************************************
[+] input: getQuantidadeCaracteresEspeciais_test05() { int quantidadeCaracteresEspeciais = Strings.getQuantidadeCaracteresEspeciais("!@#)("); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, quantidadeCaracteresEspeciais)
[-] pred: org. junit. Assert. assertEquals ( 5, quantidadeCaracteresEspeciais )
************************************
[+] input: testCreateDiscountActivity_success() { // 准备参数 DiscountActivityCreateReqVO reqVO = randomPojo(DiscountActivityCreateReqVO.class, o -> { // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); // 设置商品 o.setProducts(asList(new DiscountActivityBaseVO.Product().setSpuId(1L).setSkuId(2L) .setDiscountType(PromotionDiscountTypeEnum.PRICE.getType()).setDiscountPrice(3), new DiscountActivityBaseVO.Product().setSpuId(10L).setSkuId(20L) .setDiscountType(PromotionDiscountTypeEnum.PERCENT.getType()).setDiscountPercent(30))); });  // 调用 Long discountActivityId = discountActivityService.createDiscountActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验活动 DiscountActivityDO discountActivity = discountActivityMapper.selectById(discountActivityId); assertPojoEquals(reqVO, discountActivity); assertEquals(discountActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); // 校验商品 List<DiscountProductDO> discountProducts = discountProductMapper.selectList(DiscountProductDO::getActivityId, discountActivity.getId()); assertEquals(discountProducts.size(), reqVO.getProducts().size()); for (int i = 0; i < reqVO.getProducts().size(); i++) { DiscountActivityBaseVO.Product product = reqVO.getProducts().get(i); DiscountProductDO discountProduct = discountProducts.get(i); assertEquals(discountProduct.getActivityId(), discountActivity.getId()); assertEquals(discountProduct.getSpuId(), product.getSpuId()); assertEquals(discountProduct.getSkuId(), product.getSkuId()); assertEquals(discountProduct.getDiscountType(), product.getDiscountType()); assertEquals(discountProduct.getDiscountPrice(), product.getDiscountPrice()); assertEquals(discountProduct.getDiscountPercent(), product.getDiscountPercent()); } }
[*] target: assertNotNull(discountActivityId)
[-] pred: org. junit. Assert. assertNotNull ( discountActivityId )
************************************
[+] input: testExportActiveShouldReturnFullResponseWhenCalledOnRunningServer() { //given final String expected = "value"; final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(expected)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK);  //when final String actual = underTest.exportActive();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/export", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBuildElementNotSupported() { Message message = MessageFactory.elementNotSupported(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildScriptOnConditionalFlow() { String script = random(); String language = random(); Message message = scriptOnConditionalFlow(language, script); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Please translate the %s script from '%s' to a valid FEEL expression.", language, script); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildMap() { Message message = MessageFactory.map(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testCreateCouponTemplate_success() { // 准备参数 CouponTemplateCreateReqVO reqVO = randomPojo(CouponTemplateCreateReqVO.class, o -> o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()) .setValidityType(randomEle(CouponTemplateValidityTypeEnum.values()).getType()) .setDiscountType(randomEle(PromotionDiscountTypeEnum.values()).getType()));  // 调用 Long couponTemplateId = couponTemplateService.createCouponTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CouponTemplateDO couponTemplate = couponTemplateMapper.selectById(couponTemplateId); assertPojoEquals(reqVO, couponTemplate); }
[*] target: assertNotNull(couponTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( couponTemplateId )
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: equals_false_when_null() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(null);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: testCreateIndexByMap() { // 演示通过自定义map创建索引,最为灵活,若我提供的创建索引API不能满足时可用此方法 LambdaEsIndexWrapper<Document> wrapper = new LambdaEsIndexWrapper<>(); wrapper.indexName(Document.class.getSimpleName().toLowerCase()); wrapper.settings(3, 2); Map<String, Object> map = new HashMap<>(); Map<String, Object> prop = new HashMap<>(); Map<String, String> field = new HashMap<>(); field.put("type", FieldType.KEYWORD.getType()); prop.put("this_is_field", field); map.put("properties", prop); wrapper.mapping(map); boolean isOk = documentMapper.createIndex(wrapper); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isOk)
[-] pred: org. junit. Assert. assertTrue ( isOk )
************************************
[+] input: can_visit_all_types_of_expression_node() { Expression expr = DSL.regex( DSL.castString(DSL.sum(DSL.add(ref("balance", INTEGER), literal(10)))), DSL.literal("(?<group>\\d+)"), DSL.literal("group"));  Expression actual = expr.accept( new ExpressionNodeVisitor<Expression, Object>() { @Override public Expression visitLiteral(LiteralExpression node, Object context) { return node; }  @Override public Expression visitReference(ReferenceExpression node, Object context) { return node; }  @Override public Expression visitParse(ParseExpression node, Object context) { return node; }  @Override public Expression visitFunction(FunctionExpression node, Object context) { return DSL.add(visitArguments(node.getArguments(), context)); }  @Override public Expression visitAggregator(Aggregator<?> node, Object context) { return DSL.sum(visitArguments(node.getArguments(), context)); }  private Expression[] visitArguments(List<Expression> arguments, Object context) { return arguments.stream() .map(arg -> arg.accept(this, context)) .toArray(Expression[]::new); } }, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expr, actual)
[-] pred: org. junit. Assert. assertEquals ( expr, actual )
************************************
[+] input: convertToDatabaseColumnNull() { AnimalSexoConverter converter = new AnimalSexoConverter(); String s = converter.convertToDatabaseColumn(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(s)
[-] pred: org. junit. Assert. assertNull ( s )
************************************
[+] input: isAdmin_whenUserIsAuthenticatedAndIsAdmin_returnsTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // When boolean isAdmin = DataGymSecurity.isAdmin("eforce21", false);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAdmin)
[-] pred: org. junit. Assert. assertTrue ( isAdmin )
************************************
[+] input: testCreateCategory_success() { // 准备参数 //ProductCategoryCreateReqVO reqVO = randomPojo(ProductCategoryCreateReqVO.class);  // mock 父类 //ProductCategoryDO parentProductCategory = randomPojo(ProductCategoryDO.class, o -> { //    reqVO.setParentId(o.getId()); //    o.setParentId(PARENT_ID_NULL); //}); //productCategoryMapper.insert(parentProductCategory); // //// 调用 //Long categoryId = productCategoryService.createCategory(reqVO); //// 断言 //"<AssertPlaceHolder>"; //// 校验记录的属性是否正确 //ProductCategoryDO category = productCategoryMapper.selectById(categoryId); //assertPojoEquals(reqVO, category); }
[*] target: assertNotNull(categoryId)
[-] pred: org. junit. Assert. assertNotNull ( categoryId )
************************************
[+] input: ignoresCompletingNonExistingTask() { final TodoList todoList = new TodoList(); todoList.toggleTaskCompletion(TaskId.of(UUID.randomUUID())); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, todoList. size() )
************************************
[+] input: testCreateTenantPackage_success() { // 准备参数 TenantPackageSaveReqVO reqVO = randomPojo(TenantPackageSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long tenantPackageId = tenantPackageService.createTenantPackage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 TenantPackageDO tenantPackage = tenantPackageMapper.selectById(tenantPackageId); assertPojoEquals(reqVO, tenantPackage, "id"); }
[*] target: assertNotNull(tenantPackageId)
[-] pred: org. junit. Assert. assertNotNull ( tenantPackageId )
************************************
[+] input: shouldBuildEscalationCodeNoExpression() { Message message = escalationCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Escalation code cannot be an expression."); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: shouldBuildAttributeRemoved() { Message message = MessageFactory.attributeRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
