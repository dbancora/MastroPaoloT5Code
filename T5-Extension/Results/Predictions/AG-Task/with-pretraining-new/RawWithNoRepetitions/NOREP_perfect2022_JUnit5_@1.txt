[+] input: shouldMaskTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalTime input = LocalTime.of(14, 30, 15); String mask = "%Hz:%mz:%sz"; String expected = "14:30:15";  double hms = new HoursLocalTimeTransformer().transformToComponent(input); when(bridge.maskDateTime(0, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forTime(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: JobException { String taskParam = "taskParam"; when(workerRpcService.splitJob(any())).thenReturn(new SplitJobResult(Collections.singletonList(taskParam)));  SplitJobResult result = workerRpcService.splitJob(new SplitJobParam("group", null, null, null, null)); "<AssertPlaceHolder>"; assertNotNull(result.getTaskParams()); assertEquals(1, result.getTaskParams().size()); assertEquals(taskParam, result.getTaskParams().get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: test() { SortedMap<PartitionRange, List<ServerNode>> sortedMap = new TreeMap<>(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList( new ServerNode( String.valueOf(i), "127.0.0." + i, i / 3, 0, 0, 0, 0, Sets.newHashSet("test"))); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
[+] input: testCheckServiceDependency_FrameServiceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  when(mockFrameService.listServices("serviceIds")).thenReturn(Collections.emptyList());  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: arrayGivenElementType() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = Type.array(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testLoadFromStringSuccessComplete() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.loadFromString(""" <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml"><head><title></title></head><body> <p>body</p> </body></html>""", false, errors);  "<AssertPlaceHolder>"; assertEquals(xhtml.originalMimeType(), MimeType.APPLICATION_XHTML); assertEquals(0, errors.size()); }
[*] target: assertNotNull(xhtml)
[-] pred: org. junit. Assert. assertNotNull ( xhtml )
************************************
[+] input: testPseudorandom() {  MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("county.mask.pseudorandom", true);  MaskingProvider maskingProvider = new CountyMaskingProvider(maskingConfiguration);  String originalCity = "Italy"; String firstMask = maskingProvider.mask(originalCity);  for(int i = 0; i < 100; i++) { String maskedCity = maskingProvider.mask(originalCity); "<AssertPlaceHolder>"; }  }
[*] target: assertEquals(firstMask, maskedCity)
[-] pred: org. junit. Assert. assertEquals ( firstMask, maskedCity )
************************************
[+] input: testCheckWhenDifferentUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: testSaveServiceRoleHostMapping() { // Setup final ServiceRoleHostMapping serviceRoleHostMapping = new ServiceRoleHostMapping(); serviceRoleHostMapping.setServiceRole("serviceRole"); serviceRoleHostMapping.setHosts(Arrays.asList("value")); final List<ServiceRoleHostMapping> list = Arrays.asList(serviceRoleHostMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceRoleHostMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: ParseException { SchedJob job = new SchedJob(); job.setJobId(idGenerator.generateId()); job.setGroup("default"); job.setJobName(RandomStringUtils.randomAlphanumeric(5)); job.setJobExecutor("cn.ponfee.disjob.test.executor.NoopJobExecutor"); job.setJobState(JobState.DISABLED.value());  job.setJobParam("test"); job.setJobType(JobType.GENERAL.value());  job.setRetryType(RetryType.NONE.value()); job.setRetryCount(0); job.setRetryInterval(0); job.setStartTime(null); job.setEndTime(null); job.setTriggerType(TriggerType.ONCE.value());  String date = "2022-06-17 18:02:00"; job.setTriggerValue(date); job.setNextTriggerTime(JavaUtilDateFormat.DEFAULT.parse(date).getTime()); job.setExecuteTimeout(3600000); job.setMisfireStrategy(MisfireStrategy.LAST.value()); job.setCollidedStrategy(CollidedStrategy.CONCURRENT.value()); job.setRouteStrategy(RouteStrategy.ROUND_ROBIN.value()); job.setRedeployStrategy(RedeployStrategy.RESUME.value()); job.setRemark("test remark"); job.setLastTriggerTime(null); job.setNextTriggerTime(TriggerTimeUtils.computeNextTriggerTime(job, new Date())); job.setUpdatedBy("0"); job.setCreatedBy("0"); job.setUpdatedAt(new Date()); job.setCreatedAt(new Date());  int insert = bean.insert(job); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: 인물_관계_탑승하기() { // given var expected = new CharacterHistory( CHARACTER_ID, USER_ID );  Mockito.when(characterHistoryRepository.save(any())) .thenReturn(expected); // when var actual = characterHistoryService.save(CHARACTER_ID, USER_ID); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: givenManyModifiers() { String toVerify = toTest() .withModifiers(PUBLIC, STATIC, ABSTRACT) .withModifiers(PRIVATE, DEFAULT) .getModifiersGenerator() .generate();  String expected = "public private abstract default static";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testDeleteFileOfFile() { //            File file = new File("temp.txt"); //            try { //                if (file.createNewFile() && file.exists()) { //                    utils.deleteFile(file, new TapLog()); //                    Assertions."<AssertPlaceHolder>"; //                } //            } catch (IOException ignore) { } //        }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
[+] input: shouldAddKeyListener() { component.onKey(event -> { });  List<EventListener<TerminalKeyEvent>> listeners = component.getEventListeners(TerminalKeyEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalKeyEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: fipeTabelasPass() { FipeTabela[] fipeTabelas = BrasilAPI.fipeTabelas(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(fipeTabelas)
[-] pred: org. junit. Assert. assertNotNull ( fipeTabelas )
************************************
[+] input: testNormal() { milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.FINISH, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
[+] input: SQLException { when(this.mockPluginService.getHosts()).thenReturn(Collections.singletonList(writerHostSpec));  final ReadWriteSplittingPlugin plugin = new ReadWriteSplittingPlugin( mockPluginService, defaultProps, mockHostListProviderService, mockWriterConn, null); plugin.switchConnectionIfRequired(true);  verify(mockPluginService, times(0)) .setCurrentConnection(any(Connection.class), any(HostSpec.class)); assertEquals(mockWriterConn, plugin.getWriterConnection()); "<AssertPlaceHolder>"; }
[*] target: assertNull(plugin.getReaderConnection())
[-] pred: org. junit. Assert. assertNull ( plugin. getReaderConnection() )
************************************
[+] input: raw() { String expected = "String"; String toVerify = new ClassName("String").raw();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCheckServiceDependency_ClusterServiceInstanceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(Collections.emptyList());  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: givenMultipleLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "        Line 2" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: validateGivenStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(STATIC), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(C, D))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.2.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseBaseVersionRelMigImpl.class.getName(), redirect.getClass().getName()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DialogOpenEvent>> listeners = component.getEventListeners(DialogOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DialogOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testReOpenAll() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.reOpen(ids, user)).thenReturn(mock); when(webHookController.reOpenAll(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.reOpenAll(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).reOpen(ids, user); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: xssf1() { WorkbookParameter workbookParameter = WorkbookParameter.builder().build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(workbookParameter.isXssf())
[-] pred: org. junit. Assert. assertTrue ( workbookParameter. isXssf() )
************************************
[+] input: shouldAddDataListener() { component.onData(event -> { });  List<EventListener<TerminalDataEvent>> listeners = component.getEventListeners(TerminalDataEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalDataEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testGetProperties() { Properties properties = ConfigLoader.getProperties(); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(properties.getProperty("openjob.worker.test"), "test"); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: collectingWithSingleLines() { List<String> expected = asList("1", "1"); List<String> toVerify = Stream.of(1).collect(collectingIntegers());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: sholudCalculateLengthOfCG() { int expected = 50001033; int actual = Properties.calculateLengthOfCG(dnaString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSetRoundRobinHostWeightPairsProperty() { final String expectedPropertyValue = "instance-1:2,instance-2:1,instance-3:0";  final List<HostSpec> hosts = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-1") .weight(2) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-2") .weight(1) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-3") .weight(0) .build() ); final Properties properties = new Properties(); RoundRobinHostSelector.setRoundRobinHostWeightPairsProperty(properties, hosts);  final String actualPropertyValue = properties.getProperty( RoundRobinHostSelector.ROUND_ROBIN_HOST_WEIGHT_PAIRS.name);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPropertyValue, actualPropertyValue)
[-] pred: org. junit. Assert. assertEquals ( expectedPropertyValue, actualPropertyValue )
************************************
[+] input: getConsumerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: TypeParserTest {  @ParameterizedTest @MethodSource("me.darknet.assembler.TypeParserTest#provideMemberInfo") public void testParseMemberInfo(String input) { String[] args = input.split(" "); String name = args[0]; String descriptor = args[1]; MemberInfo memberInfo = TypeParser.parseMemberInfo(name, descriptor); Assertions."<AssertPlaceHolder>"; }  public String[] provideMemberInfo() { return new String[] { "java/lang/String.toString ()Ljava/lang/String;", "java/lang/String.value [C", "name Ljava/lang/String;" }; }  }
[*] target: assertNotNull(memberInfo)
[-] pred: org. junit. Assert. assertNotNull ( memberInfo )
************************************
[+] input: testTryEmit() { when(mockOutBox.offer(any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 1); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testCheckWhenDifferentDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: testSendNoticeMsgReceiverTypeNull() {  NoticeReceiver receiver = mock(NoticeReceiver.class); Alert alert = mock(Alert.class); when(receiver.getType()).thenReturn(null);  boolean result = dispatcherAlarm.sendNoticeMsg(receiver, null, alert); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testGetClassesInPackage() { final ClassTreeHelper classTreeHelper = new ClassTreeHelper();  final FilterableTreeItem<ClassTreeNode> root = buildClassTree();  final List<LoadedClass> classesInPackage = classTreeHelper.getClassesInPackage(root, "org", null);  Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(classesInPackage.stream().allMatch(c -> c.getName().startsWith("org"))); }
[*] target: assertEquals(2, classesInPackage.size())
[-] pred: org. junit. Assert. assertEquals ( 2, classesInPackage. size ( ) )
************************************
[+] input: test_getLastCheckAvailableAgentCount() { try(MockedStatic<SettingUtil> mockedStatic = mockStatic(SettingUtil.class)){ mockedStatic.when(()->SettingUtil.getValue(anyString(),anyString())).thenReturn("300"); Long except = 100L; when(workerRepository.count(any(Query.class))).thenReturn(except); Long result = workerService.getLastCheckAvailableAgentCount(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testFilterConverge_RestoredAlert() {  testAlert.setStatus(CommonConstants.ALERT_STATUS_CODE_RESTORED); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testCheckWhenSameUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: test() { JSONReader.Context ctx = JSONFactory.createReadContext(); String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReaderUTF8Vector jsonReader = new JSONReaderUTF8Vector(ctx, json, bytes, 0, bytes.length); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: testAgentIdsIsEmpty() { when(agentIds.isEmpty()).thenReturn(true); List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(0)).findAllDto(any(Query.class), any(UserDetail.class)); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
[+] input: shouldLetterIsCorGReturnFalse() { boolean actual = Properties.letterIsCorG('b'); "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testSkipNotIsomorphism() { skipDetector.setIsomorphism(false); //when(skipDetector.isomorphism).thenReturn(false); when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: getTopicsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsCountByTeams( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: concreteGivenFullyQualifiedNameAndListOfTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: withTypeParameters() { TypeParameterName A = TypeParameterName.of("A"); TypeParameterName B = TypeParameterName.of("B"); TypeParameterName C = TypeParameterName.of("C"); String toVerify = toTest() .withTypeParameters(A.asTypeParameter(), B.extending(COMPARABLE.with(B))) .withTypeParameters(C.asTypeParameter()) .getTypeParametersGenerator() .generate(); String expected = "<A, B extends java.lang.Comparable<B>, C>"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testSaveStatusPageOrg() {  StatusPageOrg inputOrg = new StatusPageOrg(); when(statusPageOrgDao.save(inputOrg)).thenReturn(inputOrg);  StatusPageOrg savedOrg = statusPageService.saveStatusPageOrg(inputOrg);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputOrg, savedOrg)
[-] pred: org. junit. Assert. assertEquals ( inputOrg, savedOrg )
************************************
[+] input: shouldMaskDateTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDateTime input = LocalDateTime.of(2023, 6, 12, 14, 30, 15); String mask = "%Dz-%Mz-%Yl %Hz:%mz:%s"; String expected = "12-06-2023 14:30:15";  JulianLocaleDateTransformer dateTransformer = new JulianLocaleDateTransformer(); HoursLocalTimeTransformer timeTransformer = new HoursLocalTimeTransformer(); int julian = dateTransformer.transformToComponent(input.toLocalDate()); double hms = timeTransformer.transformToComponent(input.toLocalTime()); when(bridge.maskDateTime(julian, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forDateTime(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteStart() { String input = ""/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldSetAndGetMacOptionClickForcesSelection() { options.setMacOptionClickForcesSelection(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isMacOptionClickForcesSelection())
[-] pred: org. junit. Assert. assertTrue ( options. isMacOptionClickForcesSelection() )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { UserId id1 = new UserId("bob@example.com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: test_getJSONArray2() { JSONObject object = new JSONObject().fluentPut("values", new ArrayList<>()); JSONArray array = object.getJSONArray("values"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, array.size())
[-] pred: org. junit. Assert. assertEquals ( 0, array. size ( ) )
************************************
[+] input: testResolveRelativePath() { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String relativePath = resolveRelativePath(resourceURL); String expectedPath = "javax/annotation/Nonnull.class"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
[+] input: perform() { Concert concert = new Concert(new MockElvis()); concert.perform();  assertTrue(concert.isLightsOn()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(concert.isMainStateOpen())
[-] pred: org. junit. Assert. assertTrue ( concert. isMainStateOpen() )
************************************
[+] input: testLocalNode() { DiscoveryExtensionNode expectedLocalNode = extensionsRunner.getExtensionNode(); DiscoveryExtensionNode localNode = sdkClusterService.localNode(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLocalNode, localNode)
[-] pred: org. junit. Assert. assertEquals ( expectedLocalNode, localNode )
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(new PlaceholderTypeConstructor()).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); ByteBuffer byteBuffer = TypeCodecs.BIGINT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: topBit() { final int i = Integer.MAX_VALUE - 1; final int ret = set.previousClearBit(i);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(i, ret)
[-] pred: org. junit. Assert. assertEquals ( i, ret )
************************************
[+] input: testGetTableNameOnlyHaveMessageEntity() { when(tapdataEvent.getMessageEntity()).thenReturn(messageEntity); when(tapdataEvent.getTapEvent()).thenReturn(null); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getMessageEntity(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME1, tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: IOException { DynamicKafkaSourceSplitSerializer serializer = new DynamicKafkaSourceSplitSerializer(); DynamicKafkaSourceSplit dynamicKafkaSourceSplit = new DynamicKafkaSourceSplit( "test-cluster", new KafkaPartitionSplit(new TopicPartition("test-topic", 3), 1)); DynamicKafkaSourceSplit dynamicKafkaSourceSplitAfterSerde = serializer.deserialize(1, serializer.serialize(dynamicKafkaSourceSplit)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde)
[-] pred: org. junit. Assert. assertEquals ( dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testStripQuotesAtStartAndEndNoQuotes() { String input = "/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testEmpty() { list.clear(); Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(0, actual.get("error")); assertEquals(0, actual.get("running")); assertEquals(0, actual.get("done")); assertEquals(0, actual.get("waiting")); assertEquals(0, actual.get("scheduling")); assertEquals(0, actual.get("stopping")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testReturnSubstringWithCodon4() { String expectedResult = this.expectedCodon4; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon4); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: getScanMetadataCronSchedule_whenRetrieved_thenReturnsDefaultScheduleAt5MinutesPastHour() { String sensorResultsStoragePath = this.sut.getSynchronizeCronSchedule(); String expected = "5 * * * *"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, sensorResultsStoragePath)
[-] pred: org. junit. Assert. assertEquals ( expected, sensorResultsStoragePath )
************************************
[+] input: generateGivenContravariant() { String expected = "? super java.lang.Boolean"; String toVerify = new TypeArgumentGenerator(BOOLEAN.contravariant()).generate();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: getActivityLogOverview_TeamIdNotNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getActivityLogByTeam( TestConstants.TEAM_ID, NUMBER_OF_DAYS, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidInitializer() { ContainingClass containingClass = getValidContainingClass();  Method initializer = getInitializer( withAnnotations(INITIALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToInitializeTypeConstructor(LIST.with(placeholder().covariant())), withToInitializeTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.of(Initializer.of(initializer.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()))), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.empty() ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, initializer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenValidVideoId_whenCallsGetResource_shouldReturnIt() { // given final var videoOne = VideoID.unique(); final var expectedType = VideoMediaType.VIDEO; final var expectedResource = resource(expectedType);  storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), expectedType), expectedResource); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.TRAILER.name()), resource(mediaType())); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.BANNER.name()), resource(mediaType()));  Assertions.assertEquals(3, storageService().storage().size());  // when final var actualResult = this.mediaResourceGateway.getResource(videoOne, expectedType).get();  // then Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResource, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResource, actualResult )
************************************
[+] input: testFilterConverge_IgnoreTag() {  testAlert.getTags().put(CommonConstants.IGNORE, "true"); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testOfferWhenTryEmitReturnFalse() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(false); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: IOException { BilibiliResponse<UserWebListResult> response = client.liveUserWebList(1, 10); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidIntervalExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "10m", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
[+] input: testNormal() { TablePathInfo tablePathInfo = parseRelMig13OrMore.getTablePathInfo(contentMapping); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("table", tablePathInfo.getTable()); Assertions.assertEquals("schema", tablePathInfo.getSchema()); Assertions.assertEquals("database", tablePathInfo.getDatabase()); verify(parseRelMig13OrMore).getFromMap(contentMapping, KeyWords.TABLE); verify(parseRelMig13OrMore).getFromMap(parseRelMig13OrMore.project, KeyWords.CONTENT); verify(parseRelMig13OrMore).getFromMap(content, KeyWords.TABLES); verify(parseRelMig13OrMore).getFromMap(tables, "tableId"); verify(parseRelMig13OrMore).getFromMap(tablePath, KeyWords.PATH); verify(tableInfo).get(KeyWords.DATABASE); verify(tableInfo).get(KeyWords.SCHEMA); verify(tableInfo).get(KeyWords.TABLE); verify(parseRelMig13OrMore, times(4)).parseMap(any()); }
[*] target: assertNotNull(tablePathInfo)
[-] pred: org. junit. Assert. assertNotNull ( tablePathInfo )
************************************
[+] input: testInspectEvent_ReturnNull() { PerformanceInspection eventStartInspection = PerformanceInspection.createEventStartInspection("event start"); PerformanceInspectionResult eventStartResult = performanceTestManagementService.inspect(eventStartInspection); Assertions.assertNull(eventStartResult);  PerformanceInspection eventEndInspection = PerformanceInspection.createEventEndInspection("event end"); PerformanceInspectionResult eventEndResult = performanceTestManagementService.inspect(eventEndInspection); Assertions."<AssertPlaceHolder>";  }
[*] target: assertNull(eventEndResult)
[-] pred: org. junit. Assert. assertNull ( eventEndResult )
************************************
[+] input: testCategorization2SectionsWithoutLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // // missing Layout addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>"; logger.info(json); assertTrue(json.contains("VerticalLayout"));  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testOfferWhenTryEmitReturnTrue() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(true); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )),user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testSkipNullCreateSourceInField() { when(field.getCreateSource()).thenReturn(null); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: corretorasPass() { Corretora[] corretoras = BrasilAPI.corretoras(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(corretoras)
[-] pred: org. junit. Assert. assertNotNull ( corretoras )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double expected = TypeCodecs.DOUBLE.parse(valueAsString); Double result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetLibPathIsURLClassLoaderAndURLsNotEmptyButJarPathNotContainsJarName() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); when(url.getPath()).thenReturn("any-path"); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 1, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: testEncryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String plainText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToDatabaseColumn(plainText); "<AssertPlaceHolder>"; }
[*] target: assertEquals(plainText, converted)
[-] pred: org. junit. Assert. assertEquals ( plainText, converted )
************************************
[+] input: testGetClusterInfo() { // Setup final ClusterInfoEntity expectedResult = new ClusterInfoEntity(); expectedResult.setId(0); expectedResult.setCreateBy("createBy"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setClusterName("clusterName"); expectedResult.setClusterCode("clusterCode"); expectedResult.setClusterFrame("clusterFrame"); expectedResult.setFrameVersion("frameVersion"); expectedResult.setClusterState(ClusterState.RUNNING); expectedResult.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); expectedResult.setClusterManagerList(Arrays.asList(userInfoEntity));  // Run the test final ClusterInfoEntity result = ProcessUtils.getClusterInfo(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFailWithBaseException() { Result result = Result.fail(new BaseException()); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_ERROR.getCode()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull1() { when(nodeList.size()).thenReturn(2); when(nodeList.get(1)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldParseTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "9pm"; String mask = "%Hz:%Mz:%S"; Locale locale = Locale.US; LocalTime expected = LocalTime.of(21, 0, 0); double hms = new HoursLocalTimeTransformer().transformToComponent(expected);  when(bridge.parseTime(input, mask, locale)).thenReturn(hms);  LocalTime result = MaskDecorator.parseTime(input, mask, locale);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: test() { //when this.registerPage.insertEmailToRegister();  //then String expected = "camila002@email.com"; String actual = this.registerPage.getEmailNewAccount(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal expected = TypeCodecs.DECIMAL.parse(valueAsString); BigDecimal result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testDeleteUserGroup_ClusterHostServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0); when(mockHostService.getHostListByClusterId(0)).thenReturn(Collections.emptyList());  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); doCallRealMethod().when(mu).closeTransport(null); doNothing().when(mu).initMailConfig(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0]; doNothing().when(session).setDebug(true); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doAnswer(a -> { throw new MessagingException(""); }).when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: givenConcreteMethod() { List<String> toVerify = method() .withModifiers(PRIVATE, STATIC) .withName("notify") .withBody("System.out.println("Consider yourself notified!");") .lines();  List<String> expected = asList( "private static void notify() {", "    System.out.println("Consider yourself notified!");", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: 피드백_생성() { FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  var expected = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(feedbackRepository.save(any())) .thenReturn(expected);  Feedback actual = feedbackService.create(request, useerId);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDaoWrap.insert(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: givenMultipleLines() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .withBody(asList("Line 3", "Line 4")) .withBody("Line 5") .getBodyGenerator() .lines();  List<String> expected = asList( "Line 1", "Line 2", "Line 3", "Line 4", "Line 5" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: BBjException { component.setLabelsVisible(true); "<AssertPlaceHolder>";  verify(control).setPaintLabels(true); }
[*] target: assertTrue(component.isLabelsVisible())
[-] pred: org. junit. Assert. assertTrue ( component. isLabelsVisible() )
************************************
[+] input: testInsertBatch() { List<User> userList = new ArrayList<>(); { User user = new User(); user.setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); userList.add(user); } { User user = new User(); user.setName("李四") .setAge(17) .setCreateTime(LocalDateTime.now()); userList.add(user); } int insert = commonDaoWrap.insertBatch(userList); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, insert)
[-] pred: org. junit. Assert. assertEquals ( 2, insert )
************************************
[+] input: testConcatToFileNormal() { File file = utils.concatToFile("mock-path", new String[]{"sub-path"}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupId id1 = new GroupId("group@example.com");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: testReturnSubstringWithCodon3() { String expectedResult = this.expectedCodon3; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testAddAll() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("configName"); serviceConfig.setValue("configValue"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("input"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> left = Arrays.asList(serviceConfig); final ServiceConfig serviceConfig1 = new ServiceConfig(); serviceConfig1.setName("configName"); serviceConfig1.setValue("configValue"); serviceConfig1.setLabel("label"); serviceConfig1.setDescription("description"); serviceConfig1.setRequired(false); serviceConfig1.setType("input"); serviceConfig1.setConfigurableInWizard(false); serviceConfig1.setDefaultValue("defaultValue"); serviceConfig1.setMinValue(0); serviceConfig1.setMaxValue(0); serviceConfig1.setUnit("unit"); serviceConfig1.setHidden(false); serviceConfig1.setSelectValue(Arrays.asList("value")); serviceConfig1.setConfigType("configType"); final List<ServiceConfig> right = Arrays.asList(serviceConfig1); final ServiceConfig serviceConfig2 = new ServiceConfig(); serviceConfig2.setName("configName"); serviceConfig2.setValue("configValue"); serviceConfig2.setLabel("label"); serviceConfig2.setDescription("description"); serviceConfig2.setRequired(false); serviceConfig2.setType("input"); serviceConfig2.setConfigurableInWizard(false); serviceConfig2.setDefaultValue("defaultValue"); serviceConfig2.setMinValue(0); serviceConfig2.setMaxValue(0); serviceConfig2.setUnit("unit"); serviceConfig2.setHidden(false); serviceConfig2.setSelectValue(Arrays.asList("value")); serviceConfig2.setConfigType("configType"); final List<ServiceConfig> expectedResult = Arrays.asList(serviceConfig2);  // Run the test final List<ServiceConfig> result = ProcessUtils.addAll(left, right);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: givenConcreteTypeWithTypeParameters() { Type type = FUNCTION.with( STRING.contravariant(), OBJECT.covariant() ); String toVerify = type(type).generate(); String expected = "java.util.function.Function<? super java.lang.String, ? extends java.lang.Object>"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testDecodeValue() {  CollectRep.MetricsData metricsData = Mockito.mock(CollectRep.MetricsData.class); byte[] bytes = new byte[] {1, 2, 3};  ByteBuffer buffer = ByteBuffer.wrap(bytes);  try { Mockito.mockStatic(CollectRep.MetricsData.class); Mockito.when(CollectRep.MetricsData.parseFrom(buffer)).thenReturn(metricsData);  CollectRep.MetricsData decodedValue = codec.decodeValue(buffer);  "<AssertPlaceHolder>"; } catch (Exception e) { log.error(e.getMessage()); fail("Exception thrown during decodeValue test"); } finally { Mockito.clearAllCaches(); } }
[*] target: assertEquals(metricsData, decodedValue)
[-] pred: org. junit. Assert. assertEquals ( metricsData, decodedValue )
************************************
[+] input: resolveFileFormat_whenAvailableOnTableAndParameters_retunsFormTable() {  TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat(FileFormatSpecObjectMother.createForCsvFile(SampleCsvFileNames.continuous_days_one_row_per_day));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertTrue(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("[{"b":1},{"b":2}]"));  Iterable<String> nodes = record.generatePaths("/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: testSaveHostServiceRoleMapping() { // Setup final HostServiceRoleMapping hostServiceRoleMapping = new HostServiceRoleMapping(); hostServiceRoleMapping.setHost("host"); hostServiceRoleMapping.setServiceRoles(Arrays.asList("value")); final List<HostServiceRoleMapping> list = Arrays.asList(hostServiceRoleMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveHostServiceRoleMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testCheckWhenIsSameDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: deleteEmployee() { Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeRepositoryService.createEmployee(employee);  employeeRepositoryService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeRepositoryService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DrawerOpenEvent>> listeners = component.getEventListeners(DrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: 커플_TOP30_조회() { // given var couples = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var couple = Character.builder() .name("디프만 1번 출구") .type(CharacterType.COUPLE) .webtoonId(1L) .build(); couples.add(couple); responses.add(new CharacterResponse.CharacterDetailResponse( couple, "테스트1.png,테스트2.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.COUPLE) .imageUrl("테스트1.png,테스트2.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(couples);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("COUPLE",mockInfo); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testTrim() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("trim-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testTrim"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testTrim");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  OR price = 200";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testGetDiscountAmount_withAmountDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.AMOUNT); given(couponCampaign.getDiscountAmount()).willReturn(discountAmount); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: testNullList() { final List<Object> list = new ArrayList<>(); list.add(null); String expectedName = "java.util.ArrayList-"; final String actualName = TypeUtil.getName(list); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedName, actualName)
[-] pred: org. junit. Assert. assertEquals ( expectedName, actualName )
************************************
[+] input: testDeserializeWithHeaders() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("topic", headers, bytes);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
[+] input: testGetTaskDtoIsomorphismNormal() { DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2);  boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1);  verify(node1, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
[*] target: assertTrue(isomorphism)
[-] pred: org. junit. Assert. assertTrue ( isomorphism )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode0() { when(nodeList.size()).thenReturn(2); JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2);  DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node1, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldTurnUpVolume() { //given //when this.tv.turnUpVolume(); this.tv.turnUpVolume(); this.tv.turnUpVolume(); int actual = this.tv.getVolume(); //then int expected = 8; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: initialization() { final var s3ClientProvider = new S3ClientProvider(null);  assertNotNull(s3ClientProvider.configuration);  S3AsyncClient t = s3ClientProvider.universalClient(); "<AssertPlaceHolder>";  var config = new S3NioSpiConfiguration(); assertSame(config, new S3ClientProvider(config).configuration); }
[*] target: assertNotNull(t)
[-] pred: org. junit. Assert. assertNotNull ( t )
************************************
[+] input: 피드백_생성() { AuthInfo authInfo = new AuthInfo(1L, List.of(Role.USER));  FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  UserDetailResponse user = new UserDetailResponse( 1L, "테스트", "test@gmail.com", "aslkdjalsdj", 1 );  Feedback feedback = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(userService.findById(authInfo.userId())) .thenReturn(user);  Mockito.when(feedbackService.create(request, useerId)) .thenReturn(feedback);  FeedbackResponse expected = new FeedbackResponse(feedback, user);  FeedbackResponse actual = feedbackFacade.create(request, authInfo);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEquals() { WorkspaceMeta w1 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w2 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w3 = new WorkspaceMeta("/nonexist/"); Assertions.assertTrue(w1.equals(w2)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(w1.equals(w3))
[-] pred: org. junit. Assert. assertTrue ( w1. equals ( w3 ) )
************************************
[+] input: testCheckWhenSameDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: setOneBelow() { set.set(1); final int ret = set.previousSetBit(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: testNormal() { List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(1)).findAllDto(any(Query.class), any(UserDetail.class)); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
[+] input: setProperty_String() { String value = "test_value"; String setValue = (String) helper.setProperty(KnownProperties.TEST_STRING, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: validateGivenOuterClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(A, B))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetServiceRoleDeployOverview() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.getServiceRoleDeployOverview(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testInsertSql() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "insert into user(name, age, create_time) values(#{name}, #{age}, #{createTime})"); long insert = commonDao.insertSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: whenTaskDtoIsNull() { try (MockedStatic<BeanUtil> beanUtilMockedStatic = mockStatic(BeanUtil.class)) { String taskId = "testTaskId"; String nodeId = "testNodeId"; when(clientMongoOperator.findOne(any(Query.class), anyString(), eq(TaskDto.class))).thenReturn(null); beanUtilMockedStatic.when(() -> BeanUtil.getBean(ClientMongoOperator.class)).thenReturn(clientMongoOperator);  try (MockedStatic<CleanResult> cleanResultMockedStatic = mockStatic(CleanResult.class)) { CleanResult success = CleanResult.success(); cleanResultMockedStatic.when(CleanResult::success).thenReturn(success);  CleanResult result = mergeNodeCleaner.cleanTaskNode(taskId, nodeId); "<AssertPlaceHolder>"; } verify(clientMongoOperator, times(1)).findOne(any(Query.class), anyString(), eq(TaskDto.class)); } }
[*] target: assertEquals(success, result)
[-] pred: org. junit. Assert. assertEquals ( success, result )
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButElementsContainsNullString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); packages.add("mock"); packages.add(null); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Object.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1,  1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: IOException { BilibiliResponse<DynamicFlow> response = client.dynamicNew(Collections.singletonList(8)); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCheckServiceDependency() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testDecodeKey() {  String key = "testKey"; ByteBuffer buffer = ByteBuffer.wrap(key.getBytes(StandardCharsets.UTF_8)); String decodedKey = codec.decodeKey(buffer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
[+] input: of() { ArrayTypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); ArrayTypeConstructor toVerify = ArrayTypeConstructor.of(new PlaceholderTypeConstructor());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testEncryptDecrypt() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(VALID_KEY_LENGTH)); List<String> plaintextStrings = new ArrayList<>(); for (int index = 0; index < 10; index++) { plaintextStrings.add(RandomStringUtils.randomAlphanumeric(RandomUtils.nextInt(5, 30))); }  List<String> encryptedStrings = new ArrayList<>(); for (String plainText : plaintextStrings) { encryptedStrings.add(converter.convertToDatabaseColumn(plainText)); }  for (int index = 0; index < 10; index++) { String plaintext = plaintextStrings.get(index); String decryptedText = converter.convertToEntityAttribute(encryptedStrings.get(index)); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(plaintext, decryptedText)
[-] pred: org. junit. Assert. assertEquals ( plaintext, decryptedText )
************************************
[+] input: testGenerateJarDir() { var sessionJob = TestUtils.buildSessionJob(); String baseDir = artifactManager.generateJarDir(sessionJob.getMetadata(), sessionJob.getSpec()); String expected = tempDir.toString() + File.separator + TestUtils.TEST_NAMESPACE + File.separator + TestUtils.TEST_DEPLOYMENT_NAME + File.separator + TestUtils.TEST_SESSION_JOB_NAME; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, baseDir)
[-] pred: org. junit. Assert. assertEquals ( expected, baseDir )
************************************
[+] input: testMessage2TapEventNullMessageEntity() { TapRecordEvent actual = hazelcastBaseNode.message2TapEvent(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: NoSuchMethodException { Method test1 = TestArexMock.class.getDeclaredMethod("testWithCacheableAnnotation", String.class, int.class); try(MockedConstruction ignored = Mockito.mockConstruction(DynamicClassExtractor.class, ((extractor, context) -> { Mockito.when(extractor.replayOrRealCall()).thenReturn(MockResult.success("test")); }))) { Method testReturnVoid = TestArexMock.class.getDeclaredMethod("testReturnVoid"); boolean actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(testReturnVoid, null, null, null); assertFalse(actualResult);  // not record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(false); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, null, null); assertFalse(actualResult);  // record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(true); Mockito.when(ContextManager.needRecord()).thenReturn(true); DynamicClassExtractor extractor = new DynamicClassExtractor(test1, new Object[]{"mock"}, "#val", null); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); assertFalse(actualResult);  // replay Mockito.when(ContextManager.needRecord()).thenReturn(false); Mockito.when(ContextManager.needReplay()).thenReturn(true); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(actualResult)
[-] pred: org. junit. Assert. assertTrue ( actualResult )
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); long delete = commonDaoWrap.deleteSql("delete from user where id = #{id}", params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: testDeleteFileOfDirectory() { //            File file = new File("temp"); //            if (file.mkdir() && file.exists()) { //                utils.deleteFile(file, new TapLog()); //            } //            Assertions."<AssertPlaceHolder>"; //        }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
[+] input: testNewControl() { SortedMap<String, Charset> charsetsSortedMap = Charset.availableCharsets(); for (String encoding : charsetsSortedMap.keySet()) { ResourceBundle.Control control = PropertyResourceBundleControl.newControl(encoding); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(control)
[-] pred: org. junit. Assert. assertNotNull ( control )
************************************
[+] input: testCheckSupplyAmount_withValidSupply() { Money supply = Money.wons(60000L); Long discount = discountAmount; Long minimum = minimumCost;  Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.checkSupplyAmount(supply, discount, minimum);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: withoutTypeParameters() { ContainingClass expected = new ContainingClass( containingPackage, modifiers(PUBLIC), new ClassName("Erudite"), emptyList() );  ContainingClass toVerify = ContainingClass.of( packageName, new ClassName("Erudite") );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: Exception { FlinkDeployment flinkApp = TestUtils.buildApplicationCluster(); ObjectMeta deployMeta = flinkApp.getMetadata(); FlinkDeploymentStatus status = flinkApp.getStatus(); FlinkDeploymentSpec spec = flinkApp.getSpec(); Configuration deployConfig = configManager.getDeployConfig(deployMeta, spec);  status.getJobStatus().setState(org.apache.flink.api.common.JobStatus.FINISHED.name()); status.setJobManagerDeploymentStatus(JobManagerDeploymentStatus.READY); reconciler .getReconciler() .deploy(getResourceContext(flinkApp), spec, deployConfig, Optional.empty(), false);  final List<Map<String, String>> expectedOwnerReferences = List.of(TestUtils.generateTestOwnerReferenceMap(flinkApp)); List<Map<String, String>> or = deployConfig.get(KubernetesConfigOptions.JOB_MANAGER_OWNER_REFERENCE); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedOwnerReferences, or)
[-] pred: org. junit. Assert. assertEquals ( expectedOwnerReferences, or )
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.contravariant(), INTEGER_TYPE.covariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), BOOLEAN_TYPE_CONSTRUCTOR.contravariant(), INTEGER_TYPE_CONSTRUCTOR.covariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: of() { GenericType expected = new GenericType(T); GenericType toVerify = GenericType.of(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testSerializeWithNullMetricsData() {  byte[] bytes = serializer.serialize("", null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(bytes)
[-] pred: org. junit. Assert. assertNull ( bytes )
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testDeserializeWithBytes() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("", bytes);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidFinalizer() { ContainingClass containingClass = getValidContainingClass();  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method finalizer = getFinalizer( withAnnotations(FINALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToFinalizeTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withFinalizedTypeConstructor(LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.empty(), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.of(Finalizer.of(finalizer.getName(), ARRAY_LIST.with(placeholder().covariant()), LIST.with(placeholder().invariant()))) ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, finalizer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: isSupported() { ComparableVersion current = ComparableVersion.of("0.9"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.11"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.12"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.8"); assertFalse(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.5.1.2"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.1"); final ModuleDescription emptyVersion = ModuleDescription.builder() .name("emptyVersion").supportFrom(ComparableVersion.of("")).build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(emptyVersion.isSupported(current))
[-] pred: org. junit. Assert. assertTrue ( emptyVersion. isSupported ( current ) )
************************************
[+] input: 아이템에_가격이_있으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(Money.ZERO); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(Money.ZERO); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
[+] input: testGetTaskDtoIsomorphismNullNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(null); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(0)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NoNextValidTime() { String cronExpressionString = "0 0 0 29 2 ? 1999"; // An impossible time (Feb 29, 1999 was not a leap year) CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Instant now = Instant.now(); Instant lastTrigger = now.minus(Duration.ofDays(365));  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: test_When_GetProductById_isSuccess() { Product product = getMockProductDetails(); when(productRepository.findById(product.getProductId())).thenReturn(Optional.of(product));  ProductResponse productResponse = productService.getProductById(1); //Verification verify(productRepository, times(1)).findById(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(product.getProductId(), productResponse.getProductId());  }
[*] target: assertNotNull(productResponse)
[-] pred: org. junit. Assert. assertNotNull ( productResponse )
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: testClearUsers() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); users.clearUsers(); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteType expected = new ConcreteType(ERUDITE, asList(STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant())); ConcreteType toVerify = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: parse_ShouldParseStringToInstantValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: Exception { MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("hashing.normalize", true);  HashMaskingProvider hashMaskingProvider = new HashMaskingProvider(maskingConfiguration);  String value = "Joe"; String maskedValue1 = hashMaskingProvider.mask(value);  String value2 = "JOE"; String maskedValue2 = hashMaskingProvider.mask(value2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(maskedValue1, maskedValue2)
[-] pred: org. junit. Assert. assertEquals ( maskedValue1, maskedValue2 )
************************************
[+] input: givenClassWithModifiersButWithoutTypeParameters() { List<String> toVerify = classOrInterface() .asClass() .withModifiers(PUBLIC, ABSTRACT) .withName("Device") .withBody( "public int capacity = 34;", "public boolean hasPower = true;" ) .lines();  List<String> expected = asList( "public abstract class Device {", "", "    public int capacity = 34;", "    public boolean hasPower = true;", "", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testNormal() { when(scheduleUtil.criteria(anyString())).thenCallRealMethod(); Criteria mockId = scheduleUtil.criteria("mockId"); Assertions."<AssertPlaceHolder>"; Document criteriaObject = mockId.getCriteriaObject(); Assertions.assertNotNull(criteriaObject); Assertions.assertEquals(5, criteriaObject.size()); Assertions.assertTrue(criteriaObject.containsKey("is_deleted")); Assertions.assertTrue(criteriaObject.containsKey("source._id")); Assertions.assertTrue(criteriaObject.containsKey("sourceType")); Assertions.assertTrue(criteriaObject.containsKey("meta_type")); Assertions.assertTrue(criteriaObject.containsKey("taskId")); }
[*] target: assertNotNull(mockId)
[-] pred: org. junit. Assert. assertNotNull ( mockId )
************************************
[+] input: sholudCalculateLengthOfCGAsZero() { String testEmptyString = ""; int expected = 0; int actual = Properties.calculateLengthOfCG(testEmptyString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: SQLException { initTable(); final Statement statement = mock(Statement.class); when(statement.enquoteIdentifier(anyString(), anyBoolean())).thenAnswer((Answer<String>) invocation -> { final Object[] args = invocation.getArguments(); return """ + args[0] + """; // enquote the column names }); final String insertStatement = SqlRowWriter.getInsertStatementSql(statement, columnStatementPositions); final StringBuilder expectedInsertStatement = new StringBuilder("INSERT INTO ").append(TableGenerator.DEFAULT_TABLE_NAME) .append(" ("); for (ColumnInsight column : columnInsights) { expectedInsertStatement.append(""").append(column.getInternalHeader()).append("","); } expectedInsertStatement.append(""").append(NONCE_HEADER_DEFAULT).append("")\nVALUES (?,?,?,?,?,?,?,?,?,?)"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInsertStatement.toString(), insertStatement)
[-] pred: org. junit. Assert. assertEquals ( expectedInsertStatement. toString ( ), insertStatement )
************************************
[+] input: bind_nonCounter_withStandardInput() { commonSetup(false,false,false); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession); BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); JarFile jarFile = toJarFile(resourceURL); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(jarFile)
[-] pred: org. junit. Assert. assertNotNull ( jarFile )
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testCheckWhenIsChildOfDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(true); when(loginUser.getDeptId()).thenReturn(1L);  DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: testGetIsomorphism() { when(mockHazelcastBaseNode.getIsomorphism()).thenCallRealMethod(); boolean isomorphism = mockHazelcastBaseNode.getIsomorphism(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: 옵션에_가격이_붙으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); Money optionAnswerPrice1 = Money.wons(1000L); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(optionAnswerPrice1); Money optionAnswerPrice2 = Money.wons(2000L); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(optionAnswerPrice2); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
[+] input: testTapEvent2MessageNullTapRecordEvent() { MessageEntity actual = hazelcastBaseNode.tapEvent2Message(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: Exception { String greekHospital = "ΠΕΠΑΓΝΗ";  Collection<ResourceEntry> entryCollection = LocalizationManager.getInstance().getResources(Resource.HOSPITAL_NAMES, Collections.singletonList("gr")); Set<String> greekHospitals = new HashSet<>();  for(ResourceEntry entry: entryCollection) { InputStream inputStream = entry.createStream(); try (CSVParser reader = Readers.createCSVReaderFromStream(inputStream)) { for (CSVRecord line : reader) { String name = line.get(0); greekHospitals.add(name.toUpperCase()); } inputStream.close(); } }  MaskingProvider maskingProvider = new HospitalMaskingProvider();  int randomizationOK = 0; for(int i = 0; i < 100; i++) { String maskedHospital = maskingProvider.mask(greekHospital); if (!maskedHospital.equalsIgnoreCase(greekHospital)) { randomizationOK++; }  boolean isMatch = greekHospitals.contains(maskedHospital.toUpperCase());  if (!isMatch) { System.out.println(maskedHospital); }  "<AssertPlaceHolder>"; }  assertTrue(randomizationOK > 0); }
[*] target: assertTrue(isMatch)
[-] pred: org. junit. Assert. assertTrue ( isMatch )
************************************
[+] input: Exception { SlackWebhookProperties props = new SlackWebhookProperties( "slackTest", SLACK_SIGNING_KEY, CHALLENGE_RESPONSE_VERIFICATION_FUNCTION); SlackConnectorPropertiesWrapper wrapper = new SlackConnectorPropertiesWrapper(props); when(ctx.bindProperties(SlackConnectorPropertiesWrapper.class)).thenReturn(wrapper); testObject = new SlackInboundWebhookExecutable(); final var requestTimeStamp = String.valueOf(now().toInstant().toEpochMilli()); Map<String, String> headers = Map.of( HEADER_SLACK_SIGNATURE, slackCurrentSignature(requestTimeStamp, URL_VERIFICATION_REQUEST), HEADER_SLACK_REQUEST_TIMESTAMP, requestTimeStamp); final var payload = mock(WebhookProcessingPayload.class); when(payload.method()).thenReturn("POST"); when(payload.headers()).thenReturn(headers); when(payload.rawBody()).thenReturn(URL_VERIFICATION_REQUEST.getBytes(UTF_8));  testObject.activate(ctx); final var result = testObject.verify(payload);  "<AssertPlaceHolder>"; assertThat(result.body()).isInstanceOf(Map.class); assertThat((Map) result.body()).containsEntry(FIELD_CHALLENGE, "aAaAaAaAaAaAaAaAaAaA"); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: test2() { //when this.registerPage.fillOutForm();  //then String expected = "Welcome to your account. Here you can manage all of your personal information and orders."; String actual = this.registerPage.getWelcomeMessage(); Assertions."<AssertPlaceHolder>";  String actualUrl = this.registerPage.getCurrentUrl(); Assertions.assertFalse(this.URL.equals(actualUrl)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnInvoiceAmount() { //given //when BigDecimal actual = this.invoice.getInvoiceAmount(); //then BigDecimal expected = BigDecimal.valueOf(30); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ncmPass() { NCM[] ncm = BrasilAPI.ncm(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ncm)
[-] pred: org. junit. Assert. assertNotNull ( ncm )
************************************
[+] input: loadSchemaTest() { List<Schema> schemaList = migrateProcessorNode.loadSchema(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null,schemaList)
[-] pred: org. junit. Assert. assertEquals ( null, schemaList )
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getPartitionsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getPartitionsCountByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getPartitionsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test_sqrt_5_to_attribute_and_metadata() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.ATTRIBUTE, "result", 3, false, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  when(telemetryService.saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble())) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: validateGivenStaticMethod() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC, STATIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Method is static and cannot implement an abstract method"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGenerateCommandHostEntity() { // Setup final ClusterServiceCommandHostEntity expectedResult = new ClusterServiceCommandHostEntity(); expectedResult.setCommandHostId("commandHostId"); expectedResult.setHostname("hostname"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setCommandId("commandId"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime());  // Run the test final ClusterServiceCommandHostEntity result = ProcessUtils.generateCommandHostEntity("commandId", "hostname");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testTransformFromTapValueNullTapEvent() { TapdataEvent tapdataEvent = new TapdataEvent(); HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: Exception { final RunningJvmLoader runningJvmLoader = new RunningJvmLoader(); try (final TestJvm testJvm = TestJvm.of(SleepForeverProgram.class)) { final RunningJvm runningJvm = TestHelper.waitFor(() -> runningJvmLoader.list() .stream() .filter(r -> r.getId() .equals(String.valueOf( testJvm.getProcess() .pid()))) .findFirst() .orElse(null), 5000); final Properties properties = runningJvm.getSystemProperties(); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: test_isDass() { when(settingsService.isCloud()).thenReturn(false); ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getProducerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this", "value") .withObjectPath("selection") .withObjectPath("current") .getObjectPathGenerator() .generate();  String expected = "this.value.selection.current";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetLibPathNotURLClassLoader() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(AbstractClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/1/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(1)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: givenGenericType() { String toVerify = toTest() .withType(T.asType()) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testOnChannelActive() {  RemotingClient remotingClient = mock(RemotingClient.class); ReflectionTestUtils.setField(collectServer, "remotingClient", remotingClient);  Channel channel = mock(Channel.class); when(collectJobService.getCollectorIdentity()).thenReturn("collector1"); when(collectJobService.getCollectorMode()).thenReturn("mode1"); when(infoProperties.getIp()).thenReturn("127.0.0.1"); when(infoProperties.getVersion()).thenReturn("1.0");  collectNettyEventListener.onChannelActive(channel);  verify(timerDispatch, times(1)).goOnline(); verify(remotingClient, times(1)).sendMsg(any(ClusterMsg.Message.class));  ScheduledExecutorService scheduledExecutor = (ScheduledExecutorService) ReflectionTestUtils.getField(collectServer, "scheduledExecutor"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(scheduledExecutor)
[-] pred: org. junit. Assert. assertNotNull ( scheduledExecutor )
************************************
[+] input: testDetailBuilder() { //  detail : { //      "type": "HorizontalLayout", //      "elements": [ //          { //              "type": "Control", //              "scope": "#/properties/name" //          }, //          { //              "type": "Control", //              "scope": "#/properties/documentation", //              "label": "Documentation", //              "options": { //                  "multi": true //              } //          } //      ] //    }  JsonObjectBuilder layoutBuilder = Json.createObjectBuilder().add("type", "HorizontalLayout");  JsonArrayBuilder controlsArrayBuilder = Json.createArrayBuilder();  JsonObjectBuilder controlBuilder = Json.createObjectBuilder(). // add("type", "Control"). // add("scope", "#/properties/");  controlsArrayBuilder.add(controlBuilder);  layoutBuilder.add("elements", controlsArrayBuilder);  JsonObjectBuilder detailBuilder = Json.createObjectBuilder(). // add("detail", layoutBuilder.build());  JsonObject jsonObject = detailBuilder.build();  "<AssertPlaceHolder>"; logger.info("" + jsonObject);  }
[*] target: assertNotNull(jsonObject)
[-] pred: org. junit. Assert. assertNotNull ( jsonObject )
************************************
[+] input: SQLException { RdsMultiAzDbClusterListProvider.clearAll();  RdsMultiAzDbClusterListProvider provider1 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-2.xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doAnswer(a -> topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsMultiAzDbClusterListProvider.topologyCache.size());  List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  // RdsMultiAzDbClusterListProvider.logCache();  RdsMultiAzDbClusterListProvider provider2 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  doAnswer(a -> topologyClusterA).when(provider2).queryForTopology(any(Connection.class));  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertNotEquals(provider1.clusterId, provider2.clusterId); assertFalse(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId); assertEquals(2, RdsMultiAzDbClusterListProvider.topologyCache.size()); assertEquals("cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com", RdsMultiAzDbClusterListProvider.suggestedPrimaryClusterIdCache.get(provider1.clusterId));  // RdsMultiAzDbClusterListProvider.logCache();  topologyProvider1 = provider1.forceRefresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1); assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  // RdsMultiAzDbClusterListProvider.logCache(); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: testIsOfThisType() { SSNUKIdentifier identifier = new SSNUKIdentifier();  String ssn = "AB123456C"; assertTrue(identifier.isOfThisType(ssn));  //ignores spaces ssn = "AB 12 34 56 C"; assertTrue(identifier.isOfThisType(ssn));  //check for not allowed characters ssn = "DB123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AD123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AO123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA12A456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA1234567"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA123456Z"; assertFalse(identifier.isOfThisType(ssn));  //'O' is allowed on the first character ssn = "OA123456C"; "<AssertPlaceHolder>"; }
[*] target: assertTrue(identifier.isOfThisType(ssn))
[-] pred: org. junit. Assert. assertTrue ( identifier. isOfThisType ( ssn ) )
************************************
[+] input: testReduceStock() { long goodsId = 1L; SeckillGoods seckillGoods = new SeckillGoods(); seckillGoods.setStockCount(5);  // 使用 any() 来匹配任何 LambdaQueryWrapper 参数 when(seckillGoodsManager.getOne(any())).thenReturn(seckillGoods);  when(redisService.get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class)) .thenReturn(4); when(seckillGoodsManager.update(eq(seckillGoods), any())).thenReturn(true);  int result = seckillGoodsService.reduceStock(goodsId);  "<AssertPlaceHolder>"; verify(redisService, times(1)).get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class); verify(seckillGoodsManager, times(1)).update(eq(seckillGoods), any()); }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: testGetNextSibling() { Node function = root.getChild(0); Node def = function.getChild(0); Node identifier = function.getChild(1); Assertions.assertNull(root.getNextSibling()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(identifier, def.getNextSibling())
[-] pred: org. junit. Assert. assertEquals ( identifier, def. getNextSibling() )
************************************
[+] input: testAListIsNull() { when(a.getAgentIds()).thenReturn(null); when(b.getAgentIds()).thenReturn(mock(List.class)); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: testAddLoggingHandler() { Logger rootLogger = Logger.getLogger(""); loggingService.addLoggingHandler(); boolean handlerFound = false; for (Handler handler : rootLogger.getHandlers()) { if (handler instanceof HmcStreamHandler) { handlerFound = true; break; } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(handlerFound)
[-] pred: org. junit. Assert. assertTrue ( handlerFound )
************************************
[+] input: SQLException { final List<HostSpec> expectedMySQL = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("mysql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); final List<HostSpec> expectedPostgres = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("postgresql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getBoolean(eq(2))).thenReturn(true); when(mockResultSet.getString(eq(1))).thenReturn("mysql");   rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "mysql://url/");  List<HostSpec> hosts = rdsHostListProvider.queryForTopology(mockConnection); assertEquals(expectedMySQL, hosts);  when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getString(eq(1))).thenReturn("postgresql");  rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "postgresql://url/"); hosts = rdsHostListProvider.queryForTopology(mockConnection); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPostgres, hosts)
[-] pred: org. junit. Assert. assertEquals ( expectedPostgres, hosts )
************************************
[+] input: givenTypeParameterName() { String toVerify = toTest() .withType(T) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull() { when(nodeList.size()).thenReturn(2); when(nodeList.get(0)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldTurnDownVolume() { //given //when this.tv.turnDownVolume(); this.tv.turnDownVolume(); this.tv.turnDownVolume(); int actual = this.tv.getVolume(); //then int expected = 2; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: apply() { Type expected = STRING_TYPE; Type toVerify = new PlaceholderTypeConstructor().apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_error4() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testResolvePath() { String path = null; String expectedPath = null; String resolvedPath = null;  resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = ""; expectedPath = ""; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "/abc/"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "//abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);   path = "//\\abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, resolvedPath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, resolvedPath )
************************************
[+] input: parse_ShouldParseStringToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: shouldTriggerAutomaticSnapshot_InvalidExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "-1", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
[+] input: givenParameters() { String toVerify = toTest() .withParameter(STRING, "s") .withParameters(Parameter.of(BIG_DECIMAL, "bd"), Parameter.of(INTEGER, "i")) .withParameterTypes(OPTIONAL.with(T), OPTIONAL.with(U)) .andParameterNames("t", "u") .getParametersGenerator() .generate();  String expected = "(java.lang.String s, java.math.BigDecimal bd, java.lang.Integer i, java.util.Optional<T> t, java.util.Optional<U> u)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-3.xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: testSingleRow() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
[+] input: shouldAddOpenListener() { component.onSelect(event -> { });  List<EventListener<GoogleChartSelectedEvent>> listeners = component.getEventListeners(GoogleChartSelectedEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<GoogleChartSelectedEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: shouldIsRandomDNAReturnTrue() { boolean actual = Properties.isRandomDNA(dnaString); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testConstructErrorType() { Result result = new Result(SystemErrorType.SYSTEM_BUSY); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_BUSY.getCode()); assertEquals(result.getMesg(), SystemErrorType.SYSTEM_BUSY.getMesg()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testHorizontalLayoutWithLabel() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElement("firstName", "First Name", null). // addElements("lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: givenTypeParameter() { String toVerify = toTest() .withType(T.extending(COMPARABLE.with(T))) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testParseWithNull_ReturnNull() { AndroidBatteryInfoResultParser parser = new AndroidBatteryInfoResultParser(); PerformanceTestResult testResult = parser.parse(null, null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(testResult)
[-] pred: org. junit. Assert. assertNull ( testResult )
************************************
[+] input: shouldAddRowDoubleClickListener() { table.onItemDoubleClick(event -> { });  List<EventListener<TableItemDoubleClickEvent>> listeners = table.getEventListeners(TableItemDoubleClickEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDoubleClickEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testResolveMatrixParameters() { String url = "https://www.google.com.hk/search;q=java;oq=java;sourceid=chrome;es_sm=122;ie=UTF-8"; Map<String, List<String>> parametersMap = resolveMatrixParameters(url); Map<String, List<String>> expectedParametersMap = new LinkedHashMap<>(); expectedParametersMap.put("q", Arrays.asList("java")); expectedParametersMap.put("oq", Arrays.asList("java")); expectedParametersMap.put("sourceid", Arrays.asList("chrome")); expectedParametersMap.put("es_sm", Arrays.asList("122")); expectedParametersMap.put("ie", Arrays.asList("UTF-8"));  assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search;"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedParametersMap, parametersMap)
[-] pred: org. junit. Assert. assertEquals ( expectedParametersMap, parametersMap )
************************************
[+] input: testLoadUnsupportedType() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.load(new Object(), true, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
[*] target: assertNull(xhtml)
[-] pred: org. junit. Assert. assertNull ( xhtml )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { BigDecimal value = new BigDecimal("12345.6789");; String expectedValue = TypeCodecs.DECIMAL.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1"); GroupKey id2 = new GroupKey("group-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
[+] input: Exception {  String alertJson = "{"id":"1","content":"Test Alert"}"; Alert expectedAlert = Alert.builder().id(1L).content("Test Alert").build();  when(syncCommands.rpop(anyString())).thenReturn(alertJson); Alert actualAlert = redisCommonDataQueue.pollAlertsData(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAlert, actualAlert)
[-] pred: org. junit. Assert. assertEquals ( expectedAlert, actualAlert )
************************************
[+] input: shouldSetGetOptionIndex() { int index = 1; component.setOptionIndex(index); verify(mockMixin).setOptionIndex(index);  when(mockMixin.getOptionIndex()).thenReturn(index); int result = component.getOptionIndex(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(index, result)
[-] pred: org. junit. Assert. assertEquals ( index, result )
************************************
[+] input: shouldMaskString() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "qw12"; String mask = "AA-00"; String expected = "QW-12";  when(bridge.maskString(input, mask)).thenReturn(expected);  String result = MaskDecorator.forString(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: test_When_getPaymentDetailsByOrderId_isSuccess() {  TransactionDetails transactionDetails = getMockTransactionDetails();  when(transactionDetailsRepository.findByOrderId(anyLong())).thenReturn(Optional.of(transactionDetails));  //Actual PaymentResponse paymentResponse = paymentService.getPaymentDetailsByOrderId(1);  //Verification verify(transactionDetailsRepository, times(1)).findByOrderId(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(transactionDetails.getId(), paymentResponse.getPaymentId()); }
[*] target: assertNotNull(paymentResponse)
[-] pred: org. junit. Assert. assertNotNull ( paymentResponse )
************************************
[+] input: CleanRoomsException { final ClientSettings expectedClientSettings = ClientSettings.builder() .allowCleartext(true) .allowDuplicates(true) .allowJoinsOnColumnsWithDifferentNames(false) .preserveNulls(false) .build(); final DataEncryptionMetadata metadata = DataEncryptionMetadata.builder() .allowCleartext(expectedClientSettings.isAllowCleartext()) .allowDuplicates(expectedClientSettings.isAllowDuplicates()) .allowJoinsOnColumnsWithDifferentNames(expectedClientSettings.isAllowJoinsOnColumnsWithDifferentNames()) .preserveNulls(expectedClientSettings.isPreserveNulls()) .build(); final Collaboration collaboration = Collaboration.builder() .dataEncryptionMetadata(metadata) .build(); final GetCollaborationResponse response = GetCollaborationResponse.builder() .collaboration(collaboration) .build(); final var client = mock(CleanRoomsClient.class); when(client.getCollaboration(any(GetCollaborationRequest.class))).thenReturn(response);  final var dao = spy(CleanRoomsDao.class); when(dao.getClient()).thenReturn(client); final var actualClientSettings = dao.getCollaborationDataEncryptionMetadata(GeneralTestUtility.EXAMPLE_SALT .toString()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedClientSettings, actualClientSettings)
[-] pred: org. junit. Assert. assertEquals ( expectedClientSettings, actualClientSettings )
************************************
[+] input: whenObjectAreEquivalentButDifferInCasing_ThenEqualsReturnsTrue() { UserId id1 = new UserId("Bob@Example.Com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: testSaveServiceConfig() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false);  // Configure ClusterHostService.list(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(clusterHostEntities);  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testReturnSubstringWithCodon6() { String expectedResult = this.expectedCodon6; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon6); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testReturnSubstringWithCodon8() { String expectedResult = this.expectedCodon8; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon8); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: bind_withTTL() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getTopicsPerTeamEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAllTopicsForTeamGroupByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEmpty() { when(webHookController.success(null)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(hook.getData()); verify(webHookController).success(null); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: testInterceptAspectTest0() { AspectInterceptResult aspect = observableAspectTask.onInterceptAspect(new Aspect() {}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(aspect)
[-] pred: org. junit. Assert. assertNull ( aspect )
************************************
[+] input: shouldLetterIsCorGReturnTrue() { boolean actual = Properties.letterIsCorG('c'); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: shouldAddOpenListener() { component.onDrawerOpen(event -> { });  List<EventListener<AppLayoutDrawerOpenEvent>> listeners = component.getEventListeners(AppLayoutDrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<AppLayoutDrawerOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: createShouldCreateLayoutBuilder() { FlexLayoutBuilder builder = FlexLayout.create(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
[+] input: shouldMaskDate() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDate input = LocalDate.now(); String mask = "%Dz-%Mz-%Yl"; String expected = "12-06-2023";  int julian = new JulianLocaleDateTransformer().transformToComponent(input); when(bridge.maskDateTime(julian, null, mask)).thenReturn(expected);  String result = MaskDecorator.forDate(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { ObjectMapper mapper = new ObjectMapper();  for (ProviderType type : ProviderType.publicValues()) { String s = mapper.writeValueAsString(type);  "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: testInitLoader() { ExtensionLoader<DemoExtension> extensionLoader = ExtensionLoader.getExtensionLoader(DemoExtension.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(extensionLoader)
[-] pred: org. junit. Assert. assertNotNull ( extensionLoader )
************************************
[+] input: givenAbstractMethodWithReturnType() { List<String> toVerify = method() .withModifiers(PUBLIC, ABSTRACT) .withTypeParameters(T.extending(OBJECT), U.asTypeParameter()) .withReturnType(OPTIONAL.with(U)) .withName("map") .withParameter(OPTIONAL.with(T), "optional") .withParameter(FUNCTION.with(T, U), "fn") .lines();  List<String> expected = singletonList( "public abstract <T, U> java.util.Optional<U> map(java.util.Optional<T> optional, java.util.function.Function<T, U> fn);" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: BBjException { busyIndicator.setBackdropVisible(true);  verify(mockIndicator, atLeast(1)).setAttribute("no-backdrop", "false");  when(mockIndicator.getAttribute("no-backdrop")).thenReturn("false"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(busyIndicator.isBackdropVisible())
[-] pred: org. junit. Assert. assertTrue ( busyIndicator. isBackdropVisible ( ) )
************************************
[+] input: testReturnSubstringWithCodon1() { String expectedResult = this.expectedCodon1; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { UserId id1 = new UserId("bob@example.com");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: testGetAppByName() { App app = appDAO.getAppByName("xxx-service"); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(app.getName(), "xxx-service"); }
[*] target: assertNotNull(app)
[-] pred: org. junit. Assert. assertNotNull ( app )
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatMatchesElementType() { TypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); TypeConstructor toVerify = new ArrayType(new GenericType(T)).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: getTopicsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByTeams(null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testReturnSubstringWithCodon2() { String expectedResult = this.expectedCodon2; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: using() { Type expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant()); Type toVerify = Type.generic(T).using(TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testTaskNullEndTime() { task.setStatus(MilestoneStatus.FINISH); node.setStatus(MilestoneStatus.FINISH); task.setEnd(null); String taskSyncStatus = milestoneAspectTask.getTaskSyncStatus(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MilestoneAspectTask.KPI_DATA_NODE_INIT, taskSyncStatus); }
[*] target: assertNotNull(taskSyncStatus)
[-] pred: org. junit. Assert. assertNotNull ( taskSyncStatus )
************************************
[+] input: testConvertWhenConversionTypeIsCodec() { //        CqlConversion.Type conversionType = CqlConversion.Type.CODEC; //        List<CqlConversion.Type> conversionTypeList = Collections.singletonList(conversionType); // //        CqlConversion cqlConversion = spy(new CqlConversion(fromDataType, toDataType, codecRegistry)); //        doReturn(conversionTypeList).when(cqlConversion).getConversionTypeList(); //        doReturn(Collections.singletonList(fromDataType)).when(cqlConversion).getFromDataTypeList(); //        doReturn(Collections.singletonList(toDataType)).when(cqlConversion).getToDataTypeList(); // //        Object inputData = new Object(); //        Object expectedResult = new Object(); // //        // Stub the convert_ONE() method to return expectedResult when called with specific arguments //        doReturn(expectedResult).when(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        Object result = cqlConversion.convert(inputData); // //        // Verify that convert_ONE() was called with the expected arguments //        verify(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFilterConvergeNoConverge() {  when(convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE)).thenReturn(null); when(alertConvergeDao.findAll()).thenReturn(Collections.emptyList());  boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; verify(convergeCache).get(CommonConstants.CACHE_ALERT_CONVERGE); verify(alertConvergeDao).findAll(); verify(convergeCache).put(CommonConstants.CACHE_ALERT_CONVERGE, Collections.emptyList()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testToJSONBBytes() { JSONObject object = JSONObject.of("id", null); byte[] jsonbBytes = object.toJSONBBytes(JSONWriter.Feature.WriteNulls); JSONObject object2 = JSONB.parseObject(jsonbBytes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(object, object2)
[-] pred: org. junit. Assert. assertEquals ( object, object2 )
************************************
[+] input: parseString() { final EditorHelper editorHelper = new EditorHelper(); final String newValue = "test";  final Object result = editorHelper.edit("java.lang.String", newValue); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(newValue, result)
[-] pred: org. junit. Assert. assertEquals ( newValue, result )
************************************
[+] input: testGetByAddress() { Worker worker = workerDAO.getByAddress("127.0.0.1:25300");  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("xxx-service", worker.getAppName()); }
[*] target: assertNotNull(worker)
[-] pred: org. junit. Assert. assertNotNull ( worker )
************************************
[+] input: testSerializeWithMetricsData() {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = serializer.serialize("", metricsData);  "<AssertPlaceHolder>"; assertArrayEquals(metricsData.toByteArray(), bytes); }
[*] target: assertNotNull(bytes)
[-] pred: org. junit. Assert. assertNotNull ( bytes )
************************************
[+] input: givenMultipleEmtpyAndNonEmptyLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "", "        Line 2" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testUpdateSql() { User user = new User(); user.setName("张三"); user.setId(1L); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "update user set name = #{name} where id = #{id}"); long update = commonDao.updateSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: testCollectFilteredFiles() { List<Path> collectedFiles = new ArrayList<>(); MavenProjectInput.walkDirectoryFiles( Paths.get("src/test/resources/test-folder"), collectedFiles, DEFAULT_GLOB, it -> it.getFileName() .toString() .endsWith("pom.xml")); "<AssertPlaceHolder>"; // pom is filtered out by the "mustBeSkipped" predicate }
[*] target: assertEquals(0, collectedFiles.size())
[-] pred: org. junit. Assert. assertEquals ( 0, collectedFiles. size ( ) )
************************************
[+] input: testForEach() { int[] keys = new int[]{1, 17, 33, 2, 18, 3};  IntObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (int key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (int k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (int k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
[+] input: test_sqrt_5_meta() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 3, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: givenStaticMethodAndNoTypeArguments() { String toVerify = methodCall() .withType(BIG_DECIMAL) .withMethodName("valueOf") .withArguments("10") .generate();  String expected = "java.math.BigDecimal.valueOf(10)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetTableNameWithNullTapdataEvent() { String tableName = hazelcastBaseNode.getTableName(null); "<AssertPlaceHolder>"; assertEquals("", tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: testDeleteOneWebHookByHookId() { when(webHookController.success()).thenReturn(mock(ResponseMessage.class)); doNothing().when(webHookService).delete(any(String[].class), any(UserDetail.class)); when(webHookController.deleteOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<Void> hook = webHookController.deleteOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(); verify(webHookService).delete(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: testQueryStatusPageOrg() {  StatusPageOrg expectedOrg = new StatusPageOrg(); when(statusPageOrgDao.findAll()).thenReturn(List.of(expectedOrg));  StatusPageOrg actualOrg = statusPageService.queryStatusPageOrg();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedOrg, actualOrg)
[-] pred: org. junit. Assert. assertEquals ( expectedOrg, actualOrg )
************************************
[+] input: Exception { /* we test that if we turn the flag off the user information is preserved */ MaskingConfiguration configuration = new DefaultMaskingConfiguration(); configuration.setValue("url.mask.usernamePassword", false); configuration.setValue("url.mask.port", true); configuration.setValue("url.preserve.domains", 0); MaskingProvider urlMaskingProvider = new URLMaskingProvider(configuration, new MaskingProviderFactory(new ConfigurationManager(), Collections.emptyMap())); String url = "http://user1:pass1@www.nba.com"; String maskedResult = urlMaskingProvider.mask(url); String originalUserInfo = new URL(url).getUserInfo(); String maskedUserInfo = new URL(maskedResult).getUserInfo(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(originalUserInfo, maskedUserInfo)
[-] pred: org. junit. Assert. assertEquals ( originalUserInfo, maskedUserInfo )
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDao.insert(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
[+] input: combine() { Map<Integer, String> left = new HashMap<>(); left.put(1, "One"); left.put(2, "Two"); left.put(3, "Three");  Map<Integer, String> right = new HashMap<>(); right.put(2, "Twee"); right.put(3, "Drie"); right.put(4, "Vier");  Map<Integer, String> expected = new HashMap<>(); expected.put(2, "TwoTwee"); expected.put(3, "ThreeDrie"); Map<Integer, String> toVerify = Maps.<Integer>instance().compose(left, right, String::concat);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_error11() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("{]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: IllegalAccessException { final List<ColumnSchema> columnSchemas = List.of( GeneralTestUtility.cleartextColumn("s1", "t1"), GeneralTestUtility.cleartextColumn("s1", "t2"), GeneralTestUtility.cleartextColumn("s2", "t3") ); final var tableSchema = generateMockTableSchema(false, columnSchemas); doCallRealMethod().when(tableSchema).getSourceAndTargetHeaders();  final Set<ColumnHeader> knownValid = Set.of( new ColumnHeader("s1"), new ColumnHeader("s2"), new ColumnHeader("t1"), new ColumnHeader("t2"), new ColumnHeader("t3") ); final var results = tableSchema.getSourceAndTargetHeaders(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(knownValid, results)
[-] pred: org. junit. Assert. assertEquals ( knownValid, results )
************************************
[+] input: generateReport_AuthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(false); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getAllTopics(TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when(handleDbRequestsJdbc.getAllConsumerGroups(TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: testGetDiscountAmount_withPercentageDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.PERCENTAGE); given(couponCampaign.getDiscountAmount()).willReturn(discountPercentage); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(18000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: shouldExtractConfirmAccountLinkWhenHtmlContainsConfirmationLink() { String htmlString = "<html><body><a href='http://localhost/sign-up/verify?token=123'>Confirm Account</a></body></html>"; String expectedLink = "http://localhost/sign-up/verify?token=123"; String actualLink = SignUpUtils.extractConfirmAccountLink(htmlString);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLink, actualLink)
[-] pred: org. junit. Assert. assertEquals ( expectedLink, actualLink )
************************************
[+] input: testGetTaskDtoIsomorphismEmptyNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: validateGivenNonStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.invalid("Only outer classes and static inner classes are currently supported"); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode() { when(nodeList.size()).thenReturn(2); JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node2, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatDoesNotMatch() { TypeConstructor expected = new GenericTypeConstructor(U); TypeConstructor toVerify = new GenericType(U).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); String expected = TypeCodecs.BIGINT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testEmpty() { when(webHookController.failed("webhook.reOpen.failed")).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).failed("webhook.reOpen.failed"); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.INT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: parse_ShouldParseStringToBigDecimalValue() { String stringValue = "12345.6789"; BigDecimal expectedValue = TypeCodecs.DECIMAL.parse(stringValue); BigDecimal result = codec.parse(stringValue); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: givenConcreteMethodWithTwoLineBody() { List<String> toVerify = method() .withModifiers(PUBLIC) .withReturnType(STRING) .withName("toString") .withBody("String result = "Helpful description";") .withReturnStatement("result") .lines();  List<String> expected = asList( "public java.lang.String toString() {", "    String result = "Helpful description";", "    return result;", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidCronExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "0 */10 * * * ?", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
[+] input: shouldTransformToModelWithValidJulianDate() { LocalDate expectedDate = LocalDate.of(2005, 3, 4); int julianDate = 2453434; LocalDate result = transformer.transformToModel(julianDate); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
[+] input: testSuccess() { Result success = Result.success(); "<AssertPlaceHolder>"; assertEquals(success.getCode(), "000000"); assertEquals(success.getMesg(), "处理成功"); }
[*] target: assertTrue(success.isSuccess())
[-] pred: org. junit. Assert. assertTrue ( success. isSuccess ( ) )
************************************
[+] input: shouldFindCreditCardActivityByAmountInterval() {  BigDecimal min = BigDecimal.ONE; BigDecimal max = BigDecimal.valueOf(10000);  List<CrdCreditCardActivity> crdCreditCardActivityList = createDummyCrdCreditCardActivityList();  List<CrdCreditCardActivity> expectedResult = createDummyCrdCreditCardActivityList();  when(crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max)).thenReturn(crdCreditCardActivityList);  List<CrdCreditCardActivity> result = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: generateReport_UnauthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(true); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsforTeam(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when( handleDbRequestsJdbc.getConsumerGroupsforTeam( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testReturnSubstringWithCodon5() { String expectedResult = this.expectedCodon5; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: taxasPass() { Taxa[] taxas = BrasilAPI.taxas(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(taxas)
[-] pred: org. junit. Assert. assertNotNull ( taxas )
************************************
[+] input: testCreateServiceConfig() { // Setup final ServiceConfig expectedResult = new ServiceConfig(); expectedResult.setName("configName"); expectedResult.setValue("configValue"); expectedResult.setLabel("label"); expectedResult.setDescription("description"); expectedResult.setRequired(false); expectedResult.setType("input"); expectedResult.setConfigurableInWizard(false); expectedResult.setDefaultValue("defaultValue"); expectedResult.setMinValue(0); expectedResult.setMaxValue(0); expectedResult.setUnit("unit"); expectedResult.setHidden(false); expectedResult.setSelectValue(Arrays.asList("value")); expectedResult.setConfigType("configType");  // Run the test final ServiceConfig result = ProcessUtils.createServiceConfig("configName", "configValue", "type");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Long value = 9223372036854775807L; String expected = TypeCodecs.BIGINT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldAddNewPhysicalAssessmentToClient() { //given Client client = new Client(); this.physicalAssessment.setClient(client); //when physicalAssessment.addPhysicalAssessment(); int actual = client.getPhysicalAssessmentList().size(); //then int expected = 1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test() { String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReader jsonReader = JSONReader.of(bytes, 0, bytes.length, StandardCharsets.UTF_8); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: setProperty_Boolean() { Boolean value = true; Boolean setValue = (Boolean) helper.setProperty(KnownProperties.TEST_BOOLEAN, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: testCloseWebHookByHookIds() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.close(ids, user)).thenReturn(mock); when(webHookController.closeWebHookByHookIds(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.closeWebHookByHookIds(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).close(ids, user); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: 종목토론방_댓글_생성하기() { // given Discussion expected = Discussion.builder() .userId(MEMBER_ID) .webtoonId(WEBTOON_ID) .content(CONTENT) .build();  Mockito.when(discussionRepository.save(any())) .thenReturn(expected);  // when var actual = discussionService.save(MEMBER_ID, WEBTOON_ID, CONTENT);  // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenColor() { // See https://benjiweber.co.uk/blog/2020/09/19/fun-with-java-records/ Color color = new Color(1, 2, 3); Town expected = new Town(1, 2, 3); Town toVerify = color.decomposeTo(Town::new); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: IOException { JarFile tempJarFile = new JarFile(CreateFileCommon.getJarInJarFile()); JarEntry jarEntry = tempJarFile.getJarEntry("internal-test.jar"); File extractNestedJar = JarUtils.extractNestedJar(tempJarFile, jarEntry, jarEntry.getName()); "<AssertPlaceHolder>"; assertTrue(extractNestedJar.getName().endsWith("internal-test.jar")); }
[*] target: assertNotNull(extractNestedJar)
[-] pred: org. junit. Assert. assertNotNull ( extractNestedJar )
************************************
[+] input: testDelete() { int delete = commonDaoWrap.delete(1L, User.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: testForDateTime() { Long expect = 1718953878000L; Object value = new DateTime(expect); Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testInspectChartNormal() { Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(1, actual.get("error")); assertEquals(1, actual.get("running")); assertEquals(1, actual.get("done")); assertEquals(1, actual.get("waiting")); assertEquals(1, actual.get("scheduling")); assertEquals(1, actual.get("stopping")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: of() { ArrayType expected = new ArrayType(STRING); ArrayType toVerify = ArrayType.of(STRING);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testDecryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String encryptedText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToEntityAttribute(encryptedText); "<AssertPlaceHolder>"; }
[*] target: assertEquals(encryptedText, converted)
[-] pred: org. junit. Assert. assertEquals ( encryptedText, converted )
************************************
[+] input: of() { ContainingPackage expected = new ContainingPackage(packageName); ContainingPackage toVerify = ContainingPackage.of(packageName);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: MalformedURLException { ClassLoader classLoader = ClassLoader.getSystemClassLoader(); URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String expectedPath = "javax/annotation/Nonnull.class"; String relativePath = resolveArchiveEntryPath(resourceURL); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
[+] input: buildCodonMapBrcaMethodsFrame2Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame2CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 2, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
[+] input: IOException { BilibiliResponse<UserNav> navResponse = client.nav(); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(navResponse.getData()); WbiImg wbiImg = navResponse.getData().getWbiImg(); Assertions.assertNotNull(wbiImg); BilibiliResponse<SpaceSearchResult> response = client.spaceSearch(1, 50, 423895, WbiUtil.getMixinKey(wbiImg.getImgKey(), wbiImg.getSubKey())); Assertions.assertNotNull(response); Assertions.assertEquals(response.getCode(), 0, response.getMessage()); Assertions.assertNotNull(response.getData()); Assertions.assertNotNull(response.getData().getList()); List<SearchVideoInfo> list = response.getData().getList().getVlist(); if (list != null) { for (SearchVideoInfo video : list) { String message = String.format("BV:%s, title:%s, author:%s", video.getBvId(), ApiUtil.removeSearchHighlight(video.getTitle()), ApiUtil.removeSearchHighlight(video.getAuthor())); logger.info(message); } } }
[*] target: assertNotNull(navResponse)
[-] pred: org. junit. Assert. assertNotNull ( navResponse )
************************************
[+] input: getUnknownTypeAsString() { final EditorHelper editorHelper = new EditorHelper();  final String result = editorHelper.getObjectString("unknown-type", true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: configProperty() {  entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (1, 'true', 'central', 'false', 'null', 2, 'MAVEN', 'https://repo1.maven.org/maven2/'); """).executeUpdate(); entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (2, 'true', 'central2', 'false', 'null', 1, 'MAVEN', 'https://repo1.maven.org/maven2/123'); """).executeUpdate(); final List<Repository> config= repository .findEnabledRepositoriesByType(RepositoryType.MAVEN); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, config.get(0).getResolutionOrder()); Assertions.assertEquals(2, config.get(1).getResolutionOrder()); }
[*] target: assertEquals(2, config.size())
[-] pred: org. junit. Assert. assertEquals ( 2, config. size ( ) )
************************************
[+] input: parseDateTime6() { LocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 0, 0); String str1 = "2022 ";  LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);  Assertions."<AssertPlaceHolder>";  }
[*] target: assertEquals(localDateTime, localDateTime1)
[-] pred: org. junit. Assert. assertEquals ( localDateTime, localDateTime1 )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: Exception { final PatchHelper patchHelper = new PatchHelper();  final File jarFile = JarTestHelper.buildJar(Startup.class); final AtomicInteger patchedClasses = new AtomicInteger();  Mockito.when(clientHandler.replaceClass(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())) .thenReturn(PatchResult.builder().success(true).build());  final boolean success = patchHelper.patch(jarFile, JVM, clientHandler, null, patchedClasses::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, patchedClasses.get());  Mockito.verify(clientHandler, Mockito.times(patchedClasses.get())) .replaceClass(ArgumentMatchers.eq(JVM), ArgumentMatchers.any(), ArgumentMatchers.any()); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.3.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseRelMig13OrMoreImpl.class.getName(), redirect.getClass().getName()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
[+] input: testForLong() { Object value = 1L; Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, actual)
[-] pred: org. junit. Assert. assertEquals ( value, actual )
************************************
[+] input: shouldAddSubmitListener() { component.onSubmit(event -> { });  List<EventListener<LoginSubmitEvent>> listeners = component.getEventListeners(LoginSubmitEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginSubmitEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testSkipNullField() { when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(null); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: testBasicForeach() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("foreach-basic-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testForeach"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testForeach");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (name = 'Jonathan')";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan", "Mcintosh"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (\n" + "    name = 'Jonathan'\n" + "    OR name = 'Fuji'\n" + "  )";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan","Mcintosh", "Fuji"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND ()";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Mcintosh"]}")); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: shouldReturnJwtResponseWithMatchingToken() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN, userDetailsBuilder); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(JWT_TOKEN, jwtResponse.getAccessToken()); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: SQLException { when(mockHttpClient.execute(any(HttpUriRequest.class))).thenReturn( mockHttpGetSignInPageResponse, mockHttpPostSignInResponse); final String correctSamlAssertion = IOUtils.toString( Objects.requireNonNull( this.getClass().getClassLoader().getResourceAsStream("federated_auth/saml-assertion.txt")), "UTF-8") .replace("\n", "") .replace("\r", ""); final String samlAssertion = this.adfsCredentialsProviderFactory.getSamlAssertion(props); "<AssertPlaceHolder>";  final ArgumentCaptor<HttpUriRequest> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpUriRequest.class); verify(mockHttpClient, times(2)).execute(httpPostArgumentCaptor.capture()); final HttpEntityEnclosingRequest actualHttpPost = (HttpEntityEnclosingRequest) httpPostArgumentCaptor.getValue(); final String content = EntityUtils.toString(actualHttpPost.getEntity()); final String[] params = content.split("&"); assertEquals("UserName=" + USERNAME.replace("@", "%40"), params[0]); assertEquals("Password=" + PASSWORD, params[1]); assertEquals("Kmsi=true", params[2]); assertEquals("AuthMethod=FormsAuthentication", params[3]); }
[*] target: assertEquals(correctSamlAssertion, samlAssertion)
[-] pred: org. junit. Assert. assertEquals ( correctSamlAssertion, samlAssertion )
************************************
[+] input: shouldReturnSalaryWithIncrement() { //given double percentualIncrement = 10; //when BigDecimal actual = this.employee.incremetSalary(percentualIncrement); //then BigDecimal expected = BigDecimal.valueOf(110.0); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); doNothing().when(transport).connect(anyString(), anyInt(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doNothing().when(transport).close(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0];  doAnswer(a -> { throw new IOException(""); }).when(transport).sendMessage(any(MimeMessage.class), any(Address[].class));  doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double value = Double.valueOf(valueAsString); // encoding could be from user input, so may not be in Java Double.toString() format ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Double result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButAllElementNotString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); when(utils.getPythonConfig(any(File.class))).thenReturn(configMap); packages = new ArrayList<>(); packages.add("mock"); packages.add(100); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: Exception { final String json; try (Reader reader = new InputStreamReader(Objects.requireNonNull(TestDataBuilder.class .getResourceAsStream("/securityReport.json")))) { json = new BufferedReader(reader).lines().collect(Collectors.joining()); } catch (IOException e) { e.printStackTrace(); return; }  var mapper = new ObjectMapper(); var report = mapper.readValue(json, Report.class);  // Assertions to verify the parsed object assertNotNull(report); assertEquals("azure", report.getModuleNamespace()); assertEquals("foo", report.getModuleName()); assertEquals("1.0.0", report.getModuleVersion()); assertEquals("azurerm", report.getProvider());  var securityReport = report.getSecurityReport(); assertNotNull(securityReport); assertEquals(1, securityReport.get("main.tf").size()); SecurityFinding finding = securityReport.get("main.tf").get(0); assertEquals("AVD-AZU-0014", finding.getId());  TerraformDocumentation documentation = report.getDocumentation(); "<AssertPlaceHolder>"; assertEquals(1, documentation.getProviders().size()); assertEquals("azurerm", documentation.getProviders().get(0).getName()); assertEquals(1, documentation.getResources().size()); assertEquals("mykey", documentation.getResources().get(0).getName()); }
[*] target: assertNotNull(documentation)
[-] pred: org. junit. Assert. assertNotNull ( documentation )
************************************
[+] input: testRemoveLast() { deque.addLast(1); deque.addLast(2); assertEquals(Integer.valueOf(2), deque.removeLast()); assertEquals(Integer.valueOf(1), deque.get(0)); assertEquals(Integer.valueOf(1), deque.removeLast()); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
[+] input: banksPass() { Bank[] bank = BrasilAPI.banks(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(bank)
[-] pred: org. junit. Assert. assertNotNull ( bank )
************************************
[+] input: testGetMessage() { String message = "Another Message"; MessageAction action = new MessageAction(message); String retrievedMessage = action.getMessage();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(message, retrievedMessage)
[-] pred: org. junit. Assert. assertEquals ( message, retrievedMessage )
************************************
[+] input: shouldTransformToComponentWithValidLocalDate() { LocalDate date = LocalDate.of(2005, 3, 4); int expectedJulianDate = 2453434; int result = transformer.transformToComponent(date); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJulianDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJulianDate, result )
************************************
[+] input: testRemove() { future.addWaiter(f1); future.addWaiter(f2); future.addWaiter(f3); future.addWaiter(f4); future.removeWaiter(f2);//mid future.removeWaiter(f1);//head future.removeWaiter(f4);//tail future.removeWaiter(f3);//last one Assertions.assertNull(future.popHeadWaiter()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(future.popTailWaiter())
[-] pred: org. junit. Assert. assertNull ( future. popTailWaiter() )
************************************
[+] input: closeSetsIsClosedToTrue() { cacheableS3Client.close(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cacheableS3Client.isClosed())
[-] pred: org. junit. Assert. assertTrue ( cacheableS3Client. isClosed() )
************************************
[+] input: testSave() { String ip = "127.0.0.2"; String akkaAddress = "127.0.0.2:25520"; Server server = new Server(); server.setIp(ip); server.setAkkaAddress(akkaAddress); Long id = serverDAO.save(server);  Assertions."<AssertPlaceHolder>"; Optional<Server> optionalServer = serverRepository.findById(id); Assertions.assertTrue(optionalServer.isPresent());  optionalServer.ifPresent((s) -> { Assertions.assertEquals(s.getIp(), server.getIp()); Assertions.assertEquals(s.getAkkaAddress(), server.getAkkaAddress()); }); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: bind_withTTLAndWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+2)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFailWithErrorType() { Result result = Result.fail(SystemErrorType.GATEWAY_ERROR); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.GATEWAY_ERROR.getCode()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testReconstructsDictionaryWithValueInsertedWithDeleteTwoTerms() { String term = "foo"; String term2 = "foo2";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.DELETE), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term2), DictionaryEntryType.VALUE) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  assertEquals(1, dictionaryEntries.size()); assertEquals("A", dictionaryEntries.get(0).getValue());  dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term2);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); assertEquals("C", dictionaryEntries.get(1).getValue()); assertEquals("D", dictionaryEntries.get(2).getValue()); }
[*] target: assertEquals(3, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 3, dictionaryEntries. size ( ) )
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField("label", dateTime); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "21474836470.7"; Double value = Double.parseDouble(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DOUBLE.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: lambdaWithSingleExpressionAsSingleLine() { String toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .generate();  String expected = "(capacity, hasPower) -> new Device(capacity, hasPower)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "10"; Integer expected = TypeCodecs.INT.parse(valueAsString); Integer result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: createCustomer() { //given Customer customer = new Customer(); customer.setId("1"); customer.setCustomerFullName("John"); customer.setCustomerType("ACTIVE");  CustomerEntity customerEntity = new CustomerEntity(); customerEntity.setId("1"); customerEntity.setCustomerType("ACTIVE"); customerEntity.setCustomerFullName("John");  //when when(customerMapper.toEntity(customer)).thenReturn(customerEntity); when(customerRepository.save(any())).thenReturn(customerEntity); when(customerMapper.toDto(customerEntity)).thenReturn(customer);  Customer customer2 = customerService.createCustomer(customer);  //then verify(customerRepository, times(1)).save(any()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(customer, customer2)
[-] pred: org. junit. Assert. assertEquals ( customer, customer2 )
************************************
[+] input: givenInstanceMethodAndExplicitTypeArguments() { String toVerify = methodCall() .withObjectPath("objects") .withTypeArguments(CHAR_SEQUENCE) .withMethodName("map") .withArguments("java.lang.Object::toString") .generate();  String expected = "objects.<java.lang.CharSequence>map(java.lang.Object::toString)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: validateGivenMethodWithNoSharedTypeConstructorBetweenInputParametersAndReturnType() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(COMPLETABLE_FUTURE.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("No shared type constructor between parameters (java.util.Optional<T> and java.util.Optional<U>) and result (java.util.concurrent.CompletableFuture<V>)"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: generic() { GenericType expected = new GenericType(T); GenericType toVerify = Type.generic(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long expected = TypeCodecs.BIGINT.parse(valueAsString); Long result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: lambdaWithSingleExpressionAsMultipleLines() { List<String> toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .multiline();  List<String> expected = asList( "(capacity, hasPower) ->", "        new Device(capacity, hasPower)" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: ibgeMunicipiosPass() { IBGEMunicipio[] ibgeMunicipios1 = BrasilAPI.ibgeMunicipios("SE"); IBGEMunicipio[] ibgeMunicipios2 = BrasilAPI.ibgeMunicipios("SE", new String[] { "dados-abertos-br" }); "<AssertPlaceHolder>"; assertNotNull(ibgeMunicipios2); }
[*] target: assertNotNull(ibgeMunicipios1)
[-] pred: org. junit. Assert. assertNotNull ( ibgeMunicipios1 )
************************************
[+] input: testGetLibPathIsURLClassLoaderButURLsIsEmpty() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(new URL[]{}); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: testAListSizeLessThanAbListSize() { List<String> mockA = mock(List.class); when(mockA.size()).thenReturn(1); List<String> mockB = mock(List.class); when(mockB.size()).thenReturn(2); when(b.getAgentIds()).thenReturn(mockB); when(a.getAgentIds()).thenReturn(mockA); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW", 19); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
[+] input: oneSourceToMultipleTargetsTest() { final String tableSchema = TableGenerator.getTableSchemaFromConfig( statement, schema, new ColumnHeader("nonce")); final StringBuilder expectedSchema = new StringBuilder("CREATE TABLE c3rTmp (\n"nonce" TEXT"); for (ColumnSchema column : schema.getColumns()) { expectedSchema.append(",\n"").append(column.getInternalHeader()).append("" TEXT"); } expectedSchema.append(")"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchema.toString(), tableSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedSchema. toString ( ), tableSchema )
************************************
[+] input: withoutAnyTypeParameters() { String toVerify = toTest().getTypeParametersGenerator().generate(); String expected = ""; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testNormal() { Query query = scheduleUtil.whereForSettings(keys); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(query)
[-] pred: org. junit. Assert. assertNotNull ( query )
************************************
[+] input: 인물_관계_TOP30_조회() { // given var expected = new ArrayList<Character>(); for(int i = 0; i < 30; i++) { expected.add(Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build() ); }  Mockito.when(characterRepository.findTop30ByTypeOrderByCoinAmountDesc(any())) .thenReturn(expected);  // when List<Character> actual = characterService.getCharactersByTopUpper(CharacterType.PERSONA); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getConsumerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testTrue() { InspectDto inspectDto = new InspectDto(); inspectDto.setInspectMethod(InspectMethod.FIELD.getValue()); inspectDto.setStatus(InspectStatusEnum.DONE.getValue()); inspectDto.setResult("failed"); inspectDto.setFlowId("test-flow-id");  List<String> errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions.assertTrue(errors.isEmpty());  inspectDto.setInspectMethod(InspectMethod.JOINTFIELD.getValue()); errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(errors.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )
************************************
[+] input: buildCodonMapBrcaMethodsFrame3Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame3CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 3, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
[+] input: marshalNullDataPreserveNullsTrueTest() { fingerprintTransformer = new FingerprintTransformer(secretKey, salt, ClientSettings.lowAssuranceMode(), false); final byte[] hmacText = fingerprintTransformer.marshal(null, context); "<AssertPlaceHolder>"; }
[*] target: assertNull(hmacText)
[-] pred: org. junit. Assert. assertNull ( hmacText )
************************************
[+] input: pixParticipantesPass() { PIX[] pix = BrasilAPI.pixParticipantes(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(pix)
[-] pred: org. junit. Assert. assertNotNull ( pix )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: shouldAddResizeListener() { component.onResize(event -> { });  List<EventListener<SplitterResizeEvent>> listeners = component.getEventListeners(SplitterResizeEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<SplitterResizeEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testGetBundle() { ResourceBundle resourceBundle = PropertyResourceBundleUtils.getBundle("META-INF.test", "UTF-8"); String expected = "测试名称"; String value = resourceBundle.getString("name"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
[+] input: givenInterfaceWithoutModifiersButWithTypeParameters() { List<String> toVerify = classOrInterface() .asInterface() .withName("Pair") .withTypeParameters(A.extending(OBJECT)) .withTypeParameters(B) .withBody( "A getLeft();", "B getRight();" ) .lines();  List<String> expected = asList( "interface Pair<A, B> {", "", "    A getLeft();", "    B getRight();", "", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: getActivityLogOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( handleDbRequestsJdbc.getActivityLogForLastDays( eq(NUMBER_OF_DAYS), any(), eq(TestConstants.TENANT_ID))) .thenReturn(List.of()); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( null, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: fipeMarcasPass() { FipeMarca[] fipeMarcas = BrasilAPI.fipeMarcas("carros"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(fipeMarcas)
[-] pred: org. junit. Assert. assertNotNull ( fipeMarcas )
************************************
[+] input: 인물_관계_단일_조회() { // given var expected = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build();  Mockito.when(characterRepository.findById(anyLong())) .thenReturn(Optional.of(expected)); // when Character actual = characterService.findById(JOINED_ITEM_ID); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testIsNotUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = false; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testBuildTaskRetryConfigNormal() { TaskConfig taskConfig = mock(TaskConfig.class); doCallRealMethod().when(tapTableMap).buildTaskRetryConfig(taskConfig); tapTableMap.buildTaskRetryConfig(taskConfig); Object actual = ReflectionTestUtils.getField(tapTableMap, "taskConfig"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(taskConfig,actual)
[-] pred: org. junit. Assert. assertEquals ( taskConfig, actual )
************************************
[+] input: getInstance() { SparkConf sc = new SparkConf(); PropertyHelper helper = PropertyHelper.getInstance(sc); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(helper)
[-] pred: org. junit. Assert. assertNotNull ( helper )
************************************
[+] input: test11() { String str = "中国"; byte[] utf16 = str.getBytes(StandardCharsets.UTF_16LE); JSONWriter jsonWriter = JSONWriter.ofJSONB(); jsonWriter.writeStringUTF16(utf16); byte[] jsonb = jsonWriter.getBytes(); Object parsed = JSONB.parse(jsonb); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW"); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDaoWrap.update(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: createAddress_validDate_Success() { generateTestData(); AddressPostVm addressPostVm = AddressPostVm.builder() .contactName("update-address") .districtId(district.getId()) .countryId(country.getId()) .stateOrProvinceId(stateOrProvince.getId()) .build(); AddressGetVm addressGetVm = addressService.createAddress(addressPostVm); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(addressGetVm)
[-] pred: org. junit. Assert. assertNotNull ( addressGetVm )
************************************
[+] input: getCountries_Pagination_Success() { generateTestData(); int pageNo = 1; int pageSize = 2; CountryListGetVm countryListGetVm = countryService.getPageableCountries(pageNo, pageSize); "<AssertPlaceHolder>"; assertEquals(countryListGetVm.pageNo(), pageNo); assertEquals(countryListGetVm.pageSize(), pageSize); assertTrue(countryListGetVm.isLast()); assertEquals(2, countryListGetVm.totalElements()); assertEquals(1, countryListGetVm.totalPages()); }
[*] target: assertNotNull(countryListGetVm)
[-] pred: org. junit. Assert. assertNotNull ( countryListGetVm )
************************************
[+] input: shouldMaskNumber() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge); float input = 12345; String mask = "##,###,###.00"; String expected = "12,345.00";  when(bridge.maskNumber(input, mask)).thenReturn(expected);  String result = MaskDecorator.forNumber(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldFindAllCustomers() {  List<CusCustomer> cusCustomerList = createDummyCusCustomerList();  List<CusCustomerDto> expectedResult = createDummyCusCustomerDtoList();  when(cusCustomerEntityService.findAllCustomers()).thenReturn(cusCustomerList);  List<CusCustomerDto> result = cusCustomerService.findAllCustomers();  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: getProducerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getAclsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByEnv(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getAclsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(UNARY_OPERATOR.with(T), "left"), Parameter.of(UNARY_OPERATOR.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "combinator"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  InvariantParametersAndTypeParametersValidator.Result result = new InvariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), UNARY_OPERATOR.with(T), UNARY_OPERATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Double value = 21474836470.7; String expected = TypeCodecs.DOUBLE.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testSaveClusterGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.saveClusterGroup(0, "groupName");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testLoadFromBytesErrorNoList() { var loader = new ImageIOLoader();  var image_bytes = new byte[]{2, 9, 7, 12, 45}; // just random values var image = loader.loadFromBytes(image_bytes, null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(image)
[-] pred: org. junit. Assert. assertNull ( image )
************************************
[+] input: arrayGivenElementTypeConstructor() { ArrayTypeConstructor expected = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR); ArrayTypeConstructor toVerify = TypeConstructor.array(STRING_TYPE_CONSTRUCTOR);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: test_sqrt_5_to_timeseries_and_metadata_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultMetadata = resultMsg.getMetaData().getValue("result"); var resultData = JacksonUtil.toJsonNode(resultMsg.getData());  assertTrue(resultData.has("result")); assertEquals(2.236, resultData.get("result").asDouble(), 0.0);  assertNotNull(resultMetadata); assertEquals("2.236", resultMetadata); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: liveMirror() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle"); ModUtils modUtils = project.getExtensions().getByType(ModUtils.class); "<AssertPlaceHolder>"; assertNotNull( modUtils.getLiveMirrorURL(10000, "https://example.com", "https://www.iana.org/help/example-domains")); }
[*] target: assertNotNull(modUtils)
[-] pred: org. junit. Assert. assertNotNull ( modUtils )
************************************
[+] input: IOException { BilibiliResponse<BilibiliPageInfo<VideoData>> response = client.popular(1, 50); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(response.getCode()); Assertions.assertEquals(response.getCode(), ErrorCode.SUCCESS); Assertions.assertNotNull(response.getData()); List<VideoData> list = response.getData().getList(); Assertions.assertNotNull(list); Assertions.assertFalse(list.isEmpty()); for (VideoData videoData : list) { Assertions.assertNotNull(videoData); Assertions.assertNotNull(videoData.getOwner()); logger.info("推荐视频:" + videoData.getTitle() + "[" + videoData.getBvid() + "]" + " " + videoData.getOwner().getName()); } }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: test_error2() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("ttr"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testNormal() { user = mock(UserDetail.class); String newName = "test_name"; ObjectId id = mock(ObjectId.class); when(taskService.count(any(Query.class),any(UserDetail.class))).thenReturn(1L); doCallRealMethod().when(taskService).checkTaskNameNotError(newName,user,id); boolean actual = taskService.checkTaskNameNotError(newName, user, id); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true,actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: testHorizontalLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElements(new String[] { "firstName", "lastName", "role" });  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: test_2_plus_2_meta() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 0, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a"), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 2).put("b", 2).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); assertNotNull(resultMsg.getMetaData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("4", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: withoutUpperBounds() { TypeParameter typeParameter = T.asTypeParameter(); String toVerify = generateFrom(typeParameter); String expected = "T"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeAndAllNodeAreDataParentNodeButDataTypeNotEquals() { when(nodeList.size()).thenReturn(2); DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type-cache"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: givenStaticMethod() { String toVerify = methodReference() .withType(STRING) .withMethodName("toString") .generate();  String expected = "java.lang.String::toString";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testEraseUnknownSession() { var sessions = new MemorySessions(); sessions.setSessionDuration(1200000);  var auth_id = "unknown"; try { "<AssertPlaceHolder>"; } catch (SessionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertFalse(sessions.eraseSession(auth_id))
[-] pred: org. junit. Assert. assertFalse ( sessions. eraseSession ( auth_id ) )
************************************
[+] input: testClassPathFile() { Properties properties = ConfigUtil.loadProperties("classpath:openjob.properties"); Assertions."<AssertPlaceHolder>";  String value = properties.getProperty("openjob.worker.test", "none"); Assertions.assertEquals(value, "test"); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: shouldAddRowSelectListener() { table.onItemSelect(event -> { });  List<EventListener<TableItemSelectEvent>> listeners = table.getEventListeners(TableItemSelectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: shouldReturnCurrentDateForZeroJulianDate() { LocalDate expectedDate = LocalDate.now(); LocalDate result = transformer.transformToModel(0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
[+] input: 인물_TOP30_조회() { // given var characters = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var character = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build(); characters.add(character); responses.add(new CharacterResponse.CharacterDetailResponse( character, "테스트.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.PERSONA) .imageUrl("테스트.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(characters);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("PERSONA", mockInfo); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldAddCloseListener() { component.onClose(event -> { });  List<EventListener<DrawerCloseEvent>> listeners = component.getEventListeners(DrawerCloseEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerCloseEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: validateGivenMethodWithAccumulatedTypeConstructorThatIsAssignableToPartiallyAccumulatedTypeConstructor() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(FUNCTION.with(P, V)), "myFunction", asList( Parameter.of(FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), "left"), Parameter.of(FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.valid( AccumulatorValidator.Result.of( "myFunction", FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().invariant(), placeholder().invariant()), FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), FUNCTION.with(P.asType().invariant(), V.asType().invariant()) ) ); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: execute() { Executor executor = DirectExecutor.INSTANCE; final boolean[] ran = {false}; executor.execute(() -> ran[0] = true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ran[0])
[-] pred: org. junit. Assert. assertTrue ( ran[0] )
************************************
[+] input: testCheckWhenFailed() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: asTypeConstructor() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = new GenericType(T).asTypeConstructor();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testEncodeKey() {  String key = "testKey"; ByteBuffer encodedKey = codec.encodeKey(key); String decodedKey = StandardCharsets.UTF_8.decode(encodedKey).toString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
[+] input: givenConcreteTypeWithoutTypeParameters() { Type type = STRING; String toVerify = type(type).generate(); String expected = "java.lang.String"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testIsUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = true; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: of() { ClassName expected = new ClassName("String"); ClassName toVerify = ClassName.of("String");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testAddAndDeleteScope() { String scopeName = "newScope4"; ScopeSetManager manager = new ScopeSetManager(); ScopeSet newScope = new ScopeSet(scopeName); manager.add(newScope); manager.save();  manager = new ScopeSetManager(); ScopeSet set = manager.findSet(scopeName); assertNotNull(set); assertEquals(scopeName, set.getName()); manager.remove(set);  manager = new ScopeSetManager(); set = manager.findSet(scopeName); "<AssertPlaceHolder>"; }
[*] target: assertNull(set)
[-] pred: org. junit. Assert. assertNull ( set )
************************************
[+] input: parse_ShouldReturnNull_WhenValueIsNull() { String value = null; String result = codec.parse(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: saveRole() { Mockito.when(roleEntityRepository.merge(roleEntity)).thenReturn(roleEntity);  Role storedRoleDetails = roleService.save(this.roleEntity); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(storedRoleDetails)
[-] pred: org. junit. Assert. assertNotNull ( storedRoleDetails )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: deleteEmployee() {  Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeOperationsService.createEmployee(employee);  employeeOperationsService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeOperationsService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetInsertStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(COMPARATOR.with(T), "left"), Parameter.of(COMPARATOR.with(U), "right"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new ContravariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), COMPARATOR.with(T), COMPARATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: isEnabled_initialized_returnsFalse() { testFeature.loadProperties(propertyHelper); "<AssertPlaceHolder>"; }
[*] target: assertFalse(testFeature.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( testFeature. isEnabled() )
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR).apply(INTEGER_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenInstanceMethod() { String toVerify = methodReference() .withObjectPath("this") .withMethodName("toString") .generate();  String expected = "this::toString";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCategorization2Sections() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // addLayout(Layout.HORIZONTAL). // addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testNormal() { GoogleAnalyticsPlatform platform = new GoogleAnalyticsPlatform(); CloseableHttpClient client = platform.getClient(); "<AssertPlaceHolder>"; try { client.close(); } catch (IOException e) { } }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: testHostFailoverStrictReaderEnabled() {  final HostSpec writer = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("writer").port(1234).role(HostRole.WRITER).build(); final HostSpec reader = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("reader1").port(1234).role(HostRole.READER).build(); final List<HostSpec> hosts = Arrays.asList(writer, reader);  Dialect mockDialect = Mockito.mock(Dialect.class); when(mockDialect.getFailoverRestrictions()).thenReturn(EnumSet.noneOf(FailoverRestriction.class)); when(mockPluginService.getDialect()).thenReturn(mockDialect); final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockPluginService, properties, DEFAULT_FAILOVER_TIMEOUT, DEFAULT_READER_CONNECT_TIMEOUT, true);  // We expect only reader nodes to be chosen. List<HostSpec> expectedReaderHost = Collections.singletonList(reader);  List<HostSpec> hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick the reader even if unavailable. reader.setAvailability(HostAvailability.NOT_AVAILABLE);  hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostSpec> expectedWriterHost = Collections.singletonList(writer);  hostsByPriority = target.getHostsByPriority(Collections.singletonList(writer)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
[+] input: getActivityLogForTeamOverview() { ChartsJsOverview chartsJsOverview = new ChartsJsOverview(); TeamOverview expected = new TeamOverview(); expected.setTopicsPerTeamPerEnvOverview(chartsJsOverview); expected.setActivityLogOverview(chartsJsOverview);  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getActivityLogOverview(TestConstants.TEAM_ID, 101, NUMBER_OF_DAYS);  TeamOverview actual = analyticsControllerService.getActivityLogForTeamOverview("true", NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnEmptyJwtResponseWithNoUserDetails() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(StringUtils.isBlank(jwtResponse.getAccessToken())); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: isEmptyTest() { // 这是jdk11 Optional中的新函数，直接照搬了过来 // 判断包裹内元素是否为空，注意并没有判断空字符串的情况 final boolean isEmpty = Opp.empty().isEmpty(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isEmpty)
[-] pred: org. junit. Assert. assertTrue ( isEmpty )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1"); SampleEntitlementId id2 = new SampleEntitlementId("cat", "jit-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this") .withObjectPath("property") .withObjectPath("current") .getObjectPathOrTypeGenerator() .generate();  String expected = "this.property.current";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testTransformFromTapValueNullTapdataEvent() { HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: resolveFileFormat_whenOnlyPathsSetOnFileFormat_retunsFormParametersWithPathsFormTable() { String sampleFileName = SampleCsvFileNames.continuous_days_one_row_per_day; TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat( new FileFormatSpec() {{ setFilePaths(new FilePathListSpec(){{ add(SampleDataFilesProvider.getFile(sampleFileName).toString()); }}); }});  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: isParentOf() { NodeData parent = new NodeData(new File("/test/foobar")); NodeData child = new NodeData(new File("/test/foobar.txt")); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(parent.isParentOf(child))
[-] pred: org. junit. Assert. assertFalse ( parent. isParentOf ( child ) )
************************************
[+] input: test_sqrt_5_to_timeseries_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, false, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(2.236, resultJson.get("result").asDouble(), 0.0); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); params.put("selfSQL", "delete from user where id = #{id}"); long delete = commonDao.deleteSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: readHex() { byte[] bytes = new byte[32]; new Random().nextBytes(bytes); Bean bean = new Bean(); bean.value = bytes;  String str = JSON.toJSONString(bean); String str1 = JSON.toJSONString(bean, JSONWriter.Feature.OptimizedForAscii); "<AssertPlaceHolder>"; assertEquals( str, new String( JSON.toJSONBytes(bean) ) ); String str2 = JSON.toJSONString(bean, JSONWriter.Feature.PrettyFormat); assertArrayEquals( JSON.parseObject(str).getBytes("value"), JSON.parseObject(str2).getBytes("value") );  JSONWriter jsonWriter = JSONWriter.ofUTF8(); jsonWriter.writeAny(bean); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.UTF_8))); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.US_ASCII))); assertEquals(str.length(), jsonWriter.size());  Bean bean1 = JSON.parseObject(str, Bean.class); assertArrayEquals(bean.value, bean1.value);  Bean bean2 = JSON.parseObject(str.getBytes(), Bean.class); assertArrayEquals(bean.value, bean2.value);  Bean bean3 = JSON.parseObject(str.toCharArray(), Bean.class); assertArrayEquals(bean.value, bean3.value); }
[*] target: assertEquals(str, str1)
[-] pred: org. junit. Assert. assertEquals ( str, str1 )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Integer value = 10; String expected = TypeCodecs.INT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: ibgeUfsPass() { IBGEUF[] ibgeUfs = BrasilAPI.ibgeUf(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ibgeUfs)
[-] pred: org. junit. Assert. assertNotNull ( ibgeUfs )
************************************
[+] input: testInstantiation() { var user = new ContentDataUser<>() { public Object useContentData(Object contentData) throws InnerClassException { return null; } };  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { OkHttpClient client = createHttpClient(Boolean.TRUE, Boolean.TRUE, Integer.valueOf(5)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: setProperty_NumberList() { List<Integer> value = Arrays.asList(1,2,3,4); List<Integer> setValue = (List<Integer>) helper.setProperty(KnownProperties.TEST_NUMBER_LIST, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: 카트라인_결제금액_있을때_결제필요_여부_조회() { // given Money won2000 = Money.wons(2000L); given(cartOptionAnswer.getAdditionalPrice()).willReturn(won2000); // when Boolean needPaid = hasPriceCartLineItem.isNeedPaid(); // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPaid)
[-] pred: org. junit. Assert. assertTrue ( needPaid )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new CovariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), OPTIONAL.with(T), OPTIONAL.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: canAddKnight() { ChessBoard board = new ChessBoard(); Knight knight = new Knight(BLACK);  board.add(knight, "c1");  Knight foundKnight = (Knight) board.getPieceAtCoords("c1"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(knight, foundKnight)
[-] pred: org. junit. Assert. assertEquals ( knight, foundKnight )
************************************
[+] input: try { Object innerValue = 1; Value value = new Value(innerValue); "<AssertPlaceHolder>"; } catch (Exception e) { fail("No exception expected."); }
[*] target: assertEquals(innerValue, value.asInteger())
[-] pred: org. junit. Assert. assertEquals ( innerValue, value. asInteger ( ) )
************************************
[+] input: testMilestoneEntityIsNull() { milestones.put("code", null); milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.WAITING, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
[+] input: shouldSetAndGetScreenReaderMode() {  options.setScreenReaderMode(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isScreenReaderMode())
[-] pred: org. junit. Assert. assertTrue ( options. isScreenReaderMode() )
************************************
[+] input: givenNestedClass() { ContainingClass containingClass = ContainingClass.of( ContainingClass.of( ContainingClass.of( ContainingPackage.of(PackageName.of("nl.wernerdegroot")), modifiers(PUBLIC), ClassName.of("OuterClass"), asList(A.asTypeParameter()) ), modifiers(PRIVATE, STATIC), ClassName.of("StaticInnerClass"), asList(B.asTypeParameter(), C.extending(SERIALIZABLE)) ), modifiers(), ClassName.of("InnerClass"), emptyList() );  String expected = "nl.wernerdegroot.OuterClass<A>.StaticInnerClass<B, C extends java.io.Serializable>.InnerClass"; String toVerify = ContainingClassGenerator.generateFrom(containingClass);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  BigDecimal result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testChoose() {  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("choose-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testChoose"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testChoose");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testChoose'";   Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testChoose"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testBind'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "apple"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'\n" + "  AND price = 10.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana", "price": 10.00}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'"; Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testGetTableNameOnlyHaveTapEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(tapInsertRecordEvent); tapdataEvent.setTapEvent(tapInsertRecordEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getTapEvent(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME2, tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatMatches() { TypeConstructor expected = new PlaceholderTypeConstructor(); TypeConstructor toVerify = new GenericType(T).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldAddCancelListener() { component.onCancel(event -> { });  List<EventListener<LoginCancelEvent>> listeners = component.getEventListeners(LoginCancelEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginCancelEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: Exception { String clientId = "22334455"; String clientSecret = "998877665544"; String cloudApiBaseUrl = "https://xray.cloud.getxray.app/api/v2"; String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; String expectedToken = "00000000000000000000000000111111111111111111111111222222222222222222222223333333333333";  Log log = Mockito.mock(Log.class); OkHttpClient client = Mockito.mock(OkHttpClient.class); Builder responseBuilder = new Response.Builder(); responseBuilder.protocol(okhttp3.Protocol.HTTP_1_1); responseBuilder.request(new Request.Builder().url(cloudApiBaseUrl + "/authenticate").build()); responseBuilder.code(200); responseBuilder.message("OK"); responseBuilder.header("Content-Type", "application/json"); responseBuilder.body(okhttp3.ResponseBody.create("""+expectedToken+""", okhttp3.MediaType.parse("application/json"))); Response response = responseBuilder.build();  final Call remoteCall = Mockito.mock(Call.class); when(remoteCall.execute()).thenReturn(response); when(client.newCall(any())).thenReturn(remoteCall);  // OkHttpClient client2 = mockHttpClient("""+expectedToken+"""); String authToken = CommonCloud.authenticateXrayAPIKeyCredentials(log, true, client, clientId, clientSecret, cloudApiBaseUrl); "<AssertPlaceHolder>";  ArgumentCaptor<Request> req = ArgumentCaptor.forClass(Request.class); verify(client).newCall(req.capture()); assertEquals(cloudApiBaseUrl + "/authenticate", req.getValue().url().toString()); assertEquals("POST", req.getValue().method()); assertEquals("application/json; charset=utf-8", req.getValue().body().contentType().toString()); final Buffer buffer = new Buffer(); req.getValue().body().writeTo(buffer); assertEquals(authenticationPayload,  buffer.readUtf8()); }
[*] target: assertEquals(expectedToken, authToken)
[-] pred: org. junit. Assert. assertEquals ( expectedToken, authToken )
************************************
[+] input: testDefaultPublisher() { NotificationPublisher publisher = new NotificationPublisher(); publisher.setDefaultPublisher(true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(publisher.isDefaultPublisher())
[-] pred: org. junit. Assert. assertTrue ( publisher. isDefaultPublisher() )
************************************
[+] input: testSelectCount() { User user = new User(); user.setAge(18); long count = commonDao.selectCount(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, count)
[-] pred: org. junit. Assert. assertEquals ( 2, count )
************************************
[+] input: resolveFileFormat_whenNotSetOnTable_guessesFormConnectionParameters() { String schemaName = "schema_name_example"; String tableName = "a/file/path.csv"; String pathPrefix = "prefix_example"; TableSpec tableSpec = new TableSpec(new PhysicalTableName(schemaName, tableName));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }}); duckdbParametersSpec.getDirectories().put(schemaName, pathPrefix);  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertEquals(fileFormatSpec.getFilePaths().get(0), Path.of(pathPrefix,tableName).toString()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: testReturnSubstringWithCodon7() { String expectedResult = this.expectedCodon7; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon7); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testSaveServiceConfig_ClusterHostServiceReturnsNoItems() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(Collections.emptyList());  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testRemoveUsersByLogin() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); assertFalse(users.removeUser("login5")); assertEquals(4, users.countUsers()); assertTrue(users.removeUser("login4")); assertEquals(3, users.countUsers()); assertTrue(users.removeUser("login1")); assertEquals(2, users.countUsers()); assertTrue(users.removeUser("login2")); assertEquals(1, users.countUsers()); assertTrue(users.removeUser("login3")); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.covariant(), INTEGER_TYPE.contravariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testLoopByConfigNormal() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: shouldTriggerAutomaticSnapshot_EmptyExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
[+] input: shouldGetSelectedIndex() { MultipleSelectableComponentMock component = new MultipleSelectableComponentMock(); component.selectIndex(1); Map<String, Object> eventMap = new HashMap<>(); eventMap.put("index", 1); SelectEventMock<MultipleSelectableComponentMock, String> event = new SelectEventMock<>(component, eventMap);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, event.getSelectedIndex())
[-] pred: org. junit. Assert. assertEquals ( 1, event. getSelectedIndex() )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("" + "{"a": [{"b":[{"a": 1},{"a": 1}]},{"b":[{"a": 1}]}]}" + ""));  Iterable<String> nodes = record.generatePaths("/a/*/b/*/a");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(3)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: shouldCalculateLoan() {  LoaCalculateLoanResponseDto result = loaLoanService.calculateLoan(24, BigDecimal.valueOf(3000));  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testRemoveLast2() { deque.addFirst(1); deque.addFirst(2); assertEquals(Integer.valueOf(1), deque.removeLast()); assertEquals(Integer.valueOf(2), deque.get(0)); assertEquals(Integer.valueOf(2), deque.removeLast()); deque.removeLast(); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
[+] input: AuthenticationException {  String userId = "admin"; String refreshToken = JsonWebTokenUtil.issueJwt(userId, 3600L, Collections.singletonMap("refresh", true));  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); when(accountProvider.loadAccount(userId)).thenReturn(account);  RefreshTokenResponse response = accountService.refreshToken(refreshToken);  "<AssertPlaceHolder>"; assertNotNull(response.getToken()); assertNotNull(response.getRefreshToken()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long value = Long.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Long result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: AuthenticationException {  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); LoginDto loginDto = LoginDto.builder() .credential(password) .identifier(identifier) .build();  when(accountProvider.loadAccount(identifier)).thenReturn(account);  Map<String, String> response = accountService.authGetToken(loginDto);  "<AssertPlaceHolder>"; assertNotNull(response.get("token")); assertNotNull(response.get("refreshToken")); assertNotNull(response.get("role")); assertEquals(JsonUtil.toJson(roles), response.get("role"));  }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: registroBRPass() { RegistroBR registroBR = BrasilAPI.registroBR("savio.pw"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(registroBR)
[-] pred: org. junit. Assert. assertNotNull ( registroBR )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: shouldAddRowDeselectListener() { table.onItemDeselect(event -> { });  List<EventListener<TableItemDeselectEvent>> listeners = table.getEventListeners(TableItemDeselectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDeselectEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: IOException { final AgentPreparer agentPreparer = new AgentPreparer(); final String output = agentPreparer.loadAgentOnFileSystem("agents/agent.jar");  Assertions."<AssertPlaceHolder>";  Files.delete(Path.of(output)); // Verify file exists and clean up at same time }
[*] target: assertNotNull(output)
[-] pred: org. junit. Assert. assertNotNull ( output )
************************************
[+] input: format_ShouldFormatInstantValueAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: attemptTaskIdTest() { String tezTaskAttemptId = "attempt_1677051234358_0091_1_00_000000_0"; TezTaskAttemptID originalTezTaskAttemptID = TezTaskAttemptID.fromString(tezTaskAttemptId); String uniqueIdentifier = String.format("%s_%05d", tezTaskAttemptId, 3); String uniqueIdentifierToAttemptId = RssTezUtils.uniqueIdentifierToAttemptId(uniqueIdentifier); "<AssertPlaceHolder>"; TezTaskAttemptID tezTaskAttemptID = TezTaskAttemptID.fromString(uniqueIdentifierToAttemptId); assertEquals(originalTezTaskAttemptID, tezTaskAttemptID); }
[*] target: assertEquals(tezTaskAttemptId, uniqueIdentifierToAttemptId)
[-] pred: org. junit. Assert. assertEquals ( tezTaskAttemptId, uniqueIdentifierToAttemptId )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: IOException { BilibiliResponse<FlowItems<DynamicItem>> response = client.dynamicFeedAll("", 1, "video"); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCityNeighbors() { CityManager manager = CityManager.getInstance(); System.out.println("++++ " + manager.getClosestCity("Boston", 1)); List<String> expected = Arrays.asList("Boston", "South Boston", "Worcester", "Providence", "Springfield"); List<String> found = manager.getKey("Boston").getNeighbors().stream().limit(5).map(City::getName).collect(Collectors.toList()); System.out.println("++++ Found: " + found); System.out.println("++++ Expected: " + expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, found)
[-] pred: org. junit. Assert. assertEquals ( expected, found )
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: testHashCode() { ConcurrentHashSet<String> set1 = new ConcurrentHashSet<>();  ConcurrentHashSet<String> set2 = new ConcurrentHashSet<>();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(set1.hashCode(), set2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( set1. hashCode ( ), set2. hashCode ( ) )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "101"; Integer value = Integer.valueOf(valueAsString); String expected = TypeCodecs.INT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testQueryWorkerByProcessIdWithId() { String processId = "111"; WorkerDto workerDto = mock(WorkerDto.class); Query query = Query.query(Criteria.where("process_id").is(processId).and("worker_type").is("connector")); doReturn(workerDto).when(workerService).findOne(query); WorkerDto actual = workerService.queryWorkerByProcessId(processId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(workerDto,actual)
[-] pred: org. junit. Assert. assertEquals ( workerDto, actual )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode1() { when(nodeList.size()).thenReturn(2); DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node2);  JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldAddSelectionChangeListener() { table.onItemSelectionChange(event -> { });  List<EventListener<TableItemSelectionChange>> listeners = table.getEventListeners(TableItemSelectionChange.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectionChange>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: should_not_mappe_movie_null() { // when final Movie result = MovieMapper.toDomain(null); // then "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testIsAvailableTerm() { //        //given //        given(couponCampaign.getValidTerm()).willReturn(validTerm); //        //LocalDateTime localDateTime = Mockito.mock(new // TypeToken<IssuedCoupon>(){}.getCreatedAt()); //        given(issuedCoupon.getCreatedAt()).willReturn(createdAt); //        //when //        Boolean result = issuedCoupon.isAvailableTerm(); //        //then //        "<AssertPlaceHolder>"; //    }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testCascadeSelect() { List<Student> studentTree = studentTreeHelper.toTree(originStudentList); Long targetStudentId = 6L; List<Long> expectedPathIds = Arrays.asList(1L, 3L, 6L); List<Student> selectedPath = studentTreeHelper.cascadeSelect(studentTree, targetStudentId); List<Long> selectedPathIds = selectedPath.stream().map(Student::getId).collect(Collectors.toList()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPathIds, selectedPathIds)
[-] pred: org. junit. Assert. assertEquals ( expectedPathIds, selectedPathIds )
************************************
[+] input: setProperty_StringList() { List<String> value = Arrays.asList("a","b", "c"); List<String> setValue = (List<String>) helper.setProperty(KnownProperties.TEST_STRING_LIST, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: prepareText_fromMessageParametersWithIssueUrl_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.acknowledged); notificationMessage.setIssueUrl("https://www.google.com");  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > The incident in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table has been acknowledged.\s > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Last seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > Issue url: <https://www.google.com | LINK>\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testInvalidNextDate() { try { var calendar = Calendar.getInstance(RifeConfig.tools().getDefaultTimeZone(), Localization.getLocale()); calendar.set(2002, Calendar.SEPTEMBER, 1, 10, 0); var calendar_time = calendar.getTimeInMillis(); Frequency frequency = null;  frequency = new Frequency("* * 31 2 *"); try { frequency.getNextTimestamp(calendar_time); fail(); } catch (FrequencyException e) { "<AssertPlaceHolder>"; } } catch (FrequencyException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: testGetLibPathNormal() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(stream, libPath); Assertions.assertEquals(mockPath, ato.get()); verify((URLClassLoader)classLoader, times(1)).getURLs(); assertVerify(1, 1, 1); }
[*] target: assertNotNull(libPath)
[-] pred: org. junit. Assert. assertNotNull ( libPath )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Integer result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
[+] input: setProperty_Number() { Integer value = 1234; Integer setValue = (Integer) helper.setProperty(KnownProperties.TEST_NUMBER, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: generic() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = TypeConstructor.generic(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testForEach() { long[] keys = new long[]{1, 17, 33, 2, 18, 3};  LongObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (long key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (long k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (long k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteEnd() { String input = "/home/user/file.txt""; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetTableNameNotTapBaseEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(heartbeatEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); "<AssertPlaceHolder>"; assertEquals("", tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: testTryEmitTwoBucketSuccess() { when(mockOutBox.offer(anyInt(), any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 2); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: Exception {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder().setMetrics("test metrics").build(); String metricsDataJson = "{"metrics":"test metrics"}";  when(syncCommands.rpop("metricsDataQueueToAlerter")).thenReturn(metricsDataJson);  CollectRep.MetricsData actualMetricsData = redisCommonDataQueue.pollMetricsDataToAlerter(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(metricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( metricsData, actualMetricsData )
************************************
[+] input: getTopicsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByEnv(TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsEnvOverview( TestConstants.TENANT_ID, Mockito.mock(PermissionType.class));  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: apply() { GenericType expected = new GenericType(T); GenericType toVerify = new GenericTypeConstructor(T).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: SQLException { rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "jdbc:someprotocol://url");  final List<HostSpec> expected = hosts; RdsHostListProvider.topologyCache.put(rdsHostListProvider.clusterId, expected, defaultRefreshRateNano);  final List<HostSpec> result = rdsHostListProvider.getCachedTopology(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { initHadoopSecurityContext();  // write file by proxy user. String fileContent = "hello world"; Path filePath = new Path("/alex/HadoopFilesystemProviderTest-testWriteAndReadBySecuredFilesystem.file"); FileSystem writeFs = HadoopFilesystemProvider.getFilesystem("alex", filePath, kerberizedHadoop.getConf());  boolean ok = writeFs.exists(new org.apache.hadoop.fs.Path("/alex")); "<AssertPlaceHolder>"; assertEquals("alex", writeFs.getFileStatus(new org.apache.hadoop.fs.Path("/alex")).getOwner());  FSDataOutputStream fsDataOutputStream = writeFs.create(filePath); BufferedWriter br = new BufferedWriter(new OutputStreamWriter(fsDataOutputStream, "UTF-8")); br.write(fileContent); br.close();  assertTrue(writeFs.exists(filePath)); assertEquals("alex", writeFs.getFileStatus(filePath).getOwner());  // Read content from HDFS by alex user directly UserGroupInformation readerUGI = UserGroupInformation.loginUserFromKeytabAndReturnUGI( kerberizedHadoop.getAlexPrincipal() + "@" + kerberizedHadoop.getKdc().getRealm(), kerberizedHadoop.getAlexKeytab()); readerUGI.doAs( (PrivilegedExceptionAction<Object>) () -> { FileSystem fs = FileSystem.get(kerberizedHadoop.getConf()); FSDataInputStream inputStream = fs.open(filePath); String fetchedResult = IOUtils.toString(inputStream); assertEquals(fileContent, fetchedResult); return null; }); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: testMultipleRows() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); tablePrinter.addRow("Type2", "Name2", "Status2", "http://url2.com"); tablePrinter.addRow("Type3", "Name3", "Status3", "http://url3.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "| Type2 | Name2 | Status2 | http://url2.com |\n" + "| Type3 | Name3 | Status3 | http://url3.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
[+] input: testQueryMonitorMetricsData() {  Long monitorId = 1L; List<CollectRep.MetricsData> expectedData = Collections.emptyList();  when(realTimeDataStorage.isServerAvailable()).thenReturn(true); when(realTimeDataStorage.getCurrentMetricsData(monitorId)).thenReturn(expectedData);  List<CollectRep.MetricsData> result = warehouseService.queryMonitorMetricsData(monitorId);  "<AssertPlaceHolder>"; verify(realTimeDataStorage, never()).isServerAvailable(); }
[*] target: assertEquals(expectedData, result)
[-] pred: org. junit. Assert. assertEquals ( expectedData, result )
************************************
[+] input: shouldGetCardActivityAnalysis() {  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = createDummyCrdCreditCardActivityAnalysisDtoList();  List<CrdCreditCardActivityAnalysisDto> expectedResult = createDummyCrdCreditCardActivityAnalysisDtoList();  when(crdCreditCardActivityEntityService.getCardActivityAnalysis(1L)).thenReturn(crdCreditCardActivityAnalysisDtoList);  List<CrdCreditCardActivityAnalysisDto> result = crdCreditCardActivityEntityService.getCardActivityAnalysis(1L);  "<AssertPlaceHolder>"; assertNotNull(result);  }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DECIMAL.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: testLookupSuccessful() { VINManager vinManager = new VINManager(); String wmi = "1C3"; assertTrue(vinManager.isValidWMI(wmi));  //check that the lowercase version is also matched wmi = "1c3"; "<AssertPlaceHolder>"; }
[*] target: assertTrue(vinManager.isValidWMI(wmi))
[-] pred: org. junit. Assert. assertTrue ( vinManager. isValidWMI(wmi ) )
************************************
[+] input: bind_withWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("SM2", PROVIDER); KeyPair keyPair = keyPairGen.generateKeyPair(); ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic(); ECPoint pubKeyPoint = pubKey.getW(); boolean onCurve = checkPointOnCurve(pubKeyPoint); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(onCurve)
[-] pred: org. junit. Assert. assertTrue ( onCurve )
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDao.update(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: testPrepareSyncGetMemorySizeHandler() { SyncGetMemorySizeHandler handler = observableAspectTask.prepareSyncGetMemorySizeHandler(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); String expected = TypeCodecs.DECIMAL.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NextValidTimeBeforeCurrent() { String cronExpressionString = "0 */10 * * * ?"; // Every 10th minute CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Calendar calendar = Calendar.getInstance(); calendar.set(2022, Calendar.JUNE, 5, 11, 5); // 11:05  Instant now = calendar.getTime().toInstant(); Instant lastTrigger = now.minus(Duration.ofMinutes(10)); // 10:05, should have fired at 11:00  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { final ExportHelper exportHelper = new ExportHelper(clientHandler); final ClassLoaderDescriptor classLoaderDescriptor = ClassLoaderDescriptor.builder().build(); final List<LoadedClass> classesToExport = List.of(new LoadedClass("org.test.MyClass", null, null), new LoadedClass("org.othertest.SomeClass", classLoaderDescriptor, null), new LoadedClass("testing.Export", classLoaderDescriptor, null));  final Map<String, byte[]> classData = classesToExport.stream() .collect(Collectors.toMap(LoadedClass::getName, l -> generateClassBytes()));  Mockito.when(clientHandler.getClassBytes(ArgumentMatchers.eq(JVM), ArgumentMatchers.any())) .thenAnswer(ctx -> classData.get(ctx.getArgument(1, LoadedClass.class).getName()));  final File outputFile = File.createTempFile("export", ".jar"); final AtomicInteger exportCount = new AtomicInteger();  final boolean success = exportHelper.export(JVM, classesToExport, outputFile, exportCount::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(classesToExport.size(), exportCount.get());  final JarFile jarFile = new JarFile(outputFile); final List<JarEntry> jarEntries = jarFile.stream() .filter(entry -> entry.getName().endsWith(".class")) .collect(Collectors.toList()); Assertions.assertEquals(jarEntries.size(), classesToExport.size());  for (JarEntry jarEntry : jarEntries) { final byte[] jarClassFile = jarFile.getInputStream(jarEntry).readAllBytes(); final byte[] baseClassFile = classData.get(jarEntry.getName().replace('/', '.').replace(".class", "")); Assertions.assertArrayEquals(baseClassFile, jarClassFile); } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: parse_ShouldParseTextAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); Instant result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testDeleteUserGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0);  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: of() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = GenericTypeConstructor.of(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldFindCustomerById() {  CusCustomer cusCustomer = createDummyCusCustomer(); Long cusCustomerId = cusCustomer.getId(); CusCustomerDto expectedResult = createDummyCusCustomerDto();  when(cusCustomerEntityService.getByIdWithControl(cusCustomerId)).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.findCustomerById(cusCustomerId);  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: IOException { DmWebViewReply dmWebViewReply = client.videoDanmakuView(885244431); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(dmWebViewReply.hasDmSge()); Assertions.assertTrue(dmWebViewReply.getDmSge().hasTotal()); logger.info("count:" + dmWebViewReply.getCount()); for (CommandDm commandDm : dmWebViewReply.getCommandDmsList()) { logger.info(commandDm.getMtime() + ">" + commandDm.getContent()); } }
[*] target: assertNotNull(dmWebViewReply)
[-] pred: org. junit. Assert. assertNotNull ( dmWebViewReply )
************************************
[+] input: testCategorization2SectionsMixed() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  Map<String, String> multilineOption = new HashMap<>(); multilineOption.put("multi", "true"); builder. // addCategory("General"). // addLayout(Layout.HORIZONTAL). // addElements("name"). // addElement("documentation", "Documentation", multilineOption). //  addLayout(Layout.VERTICAL). // addElements(new String[] { "age", "city" }). //  addCategory("Event"). // addLayout(Layout.VERTICAL). // addElements(new String[] { "a", "b" }). //  addCategory("Workflow"). // addLayout(Layout.HORIZONTAL);  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
