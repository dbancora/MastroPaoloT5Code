************************************
************************************
[+] input: IOException {  // Create two temporary files File tempConfig = File.createTempFile("temp-run-config", ".tmp");  // Write temporary config file BufferedWriter configWriter = new BufferedWriter(new FileWriter(tempConfig)); configWriter.write("run_time_s=33525\ntransport_layer=573748848test"); configWriter.close();  Simulator.setup(0, new NBProperties(tempConfig.getAbsolutePath(), BaseAllowedProperties.LOG, BaseAllowedProperties.PROPERTIES_RUN)); assertEquals(Simulator.getConfiguration().getPropertyOrFail("run_time_s"), "33525"); assertEquals(Simulator.getConfiguration().getPropertyOrFail("transport_layer"), "573748848test"); Simulator.reset();  // Delete temporary files "<AssertPlaceHolder>";    }
reset() { reset(true); }
[*] target: assertTrue(tempConfig.delete())
[-] pred: org. junit. Assert. assertEquals ( tempConfig, tempWriter. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, templine. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, tempTrace. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, temp writer. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, tempCopy. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, tempel. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, temp_19. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org. junit. Assert. assertNotNull ( tempConfig. reset() ( ) )

[*] target: assertTrue(tempConfig.delete())
[-] pred:  org

[*] target: assertTrue(tempConfig.delete())
[-] pred:  )
************************************
************************************
[+] input: IOException {  // Create temporary files File tempConfig = File.createTempFile("temp-run-config", ".tmp");  // Write temporary config file BufferedWriter configWriter = new BufferedWriter(new FileWriter(tempConfig)); configWriter.write("abc=33\nxyz=test\n643=33.13\nZZZ=9\nXyz=Test\nkey=4294967296669\nbb=false\ncc=true\nscenario_topology_file=xyz"); configWriter.close();  NBProperties properties = new NBProperties(tempConfig.getAbsolutePath(), TEST_ALLOWED_PROPERTIES);  // File name assertEquals(tempConfig.getAbsolutePath(), properties.getFileName());  // Test definition assertTrue(properties.isPropertyDefined("xyz")); assertFalse(properties.isPropertyDefined("zzz"));  // Test defaults (no hit) assertEquals(properties.getIntegerPropertyWithDefault("zzz", 100), 100); assertEquals(properties.getLongPropertyWithDefault("zzz", 100L), 100L); assertEquals(properties.getDoublePropertyWithDefault("zzz", -445.3), -445.3, 1e-10); assertEquals(properties.getPropertyWithDefault("zzz", "aaa"), "aaa"); assertEquals(properties.getBooleanPropertyWithDefault("zzz", true), true);  // Test defaults (with hit) assertEquals(properties.getIntegerPropertyWithDefault("abc", 100), 33); assertEquals(properties.getLongPropertyWithDefault("key", 100L), 4294967296669L); assertEquals(properties.getDoublePropertyWithDefault("643", -445.3), 33.13, 1e-10); assertEquals(properties.getPropertyWithDefault("Xyz", "aaa"), "Test"); assertEquals(properties.getBooleanPropertyWithDefault("bb", true), false); assertEquals(properties.getBooleanPropertyWithDefault("cc", false), true);  // Test with fail assertEquals(properties.getIntegerPropertyOrFail("abc"), 33); assertEquals(properties.getPropertyOrFail("xyz"), "test"); assertEquals(properties.getLongPropertyOrFail("key"), 4294967296669L); assertEquals(properties.getDoublePropertyOrFail("643"), 33.13, 1e-10); assertEquals(properties.getIntegerPropertyOrFail("ZZZ"), 9); assertEquals(properties.getPropertyOrFail("Xyz"), "Test"); assertEquals(properties.getBooleanPropertyOrFail("bb"), false); assertEquals(properties.getBooleanPropertyOrFail("cc"), true);  // Actual fail due to property missing in configuration (but is allowed) boolean thrown = false; try { properties.getPropertyOrFail("zzz"); } catch (PropertyMissingException e) { thrown = true; } assertTrue(thrown);  // Actual fail due to invalid boolean value thrown = false; try { properties.getBooleanPropertyOrFail("643"); } catch (PropertyValueInvalidException e) { thrown = true; } assertTrue(thrown);  // Actual fail due to invalid boolean value thrown = false; try { properties.getBooleanPropertyWithDefault("643", false); } catch (PropertyValueInvalidException e) { thrown = true; } assertTrue(thrown);  // Property overriding properties.overrideProperty("bb", "15.0"); assertEquals(properties.getDoublePropertyOrFail("bb"), 15.0, 1e-10); properties.overrideProperty("zzz", "false"); assertEquals(properties.getBooleanPropertyOrFail("zzz"), false);  // Configuration file name assertEquals(tempConfig.getAbsolutePath(), properties.getFileName()); "<AssertPlaceHolder>";  // Delete temporary config file assertTrue(tempConfig.delete());  }
getTopologyFileNameOrFail() { return this.getPropertyOrFail("scenario_topology_file"); }
[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred: org. junit. Assert. assertEquals ( 0, rendered )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, writer. toString ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, rendered. size ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, resources. size ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, state. size ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, writer. get ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, status )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  org. junit. Assert. assertEquals ( 0, properties. size ( ) )

[*] target: assertEquals("xyz", properties.getTopologyFileNameOrFail())
[-] pred:  }
************************************
************************************
[+] input: IOException {  // Create temporary files File tempConfig = File.createTempFile("temp-run-config", ".tmp");  // Write temporary config file BufferedWriter configWriter = new BufferedWriter(new FileWriter(tempConfig)); configWriter.write("abc=3->10,9->11"); configWriter.close();  NBProperties properties = new NBProperties(tempConfig.getAbsolutePath(), TEST_ALLOWED_PROPERTIES); List<Integer> list = properties.getDirectedPairsListPropertyOrFail("abc"); "<AssertPlaceHolder>"; assertEquals(3, (int) list.get(0)); assertEquals(10, (int) list.get(1)); assertEquals(9, (int) list.get(2)); assertEquals(11, (int) list.get(3));  // Clean-up assertTrue(tempConfig.delete());  }
getDirectedPairsListPropertyOrFail(String key) { String list = getPropertyOrFail(key); List<Integer> integerList = new ArrayList<>(); for (String s : list.split(",")) { for (String s2 : s.split("->")) { integerList.add(Integer.valueOf(s2)); } } return integerList; }
[*] target: assertEquals(4, list.size())
[-] pred: org. junit. Assert. assertEquals ( 0, list. size ( ) )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( list. isEmpty ( ) )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( (! ( list. isEmpty ( ) ) ) )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( msg, list. isEmpty ( ) )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( list. getDirectedPairsListListList )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( list. getDirectedPairsListListListList )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertTrue ( the list. isEmpty ( ) )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit. Assert. assertNotNull ( list )

[*] target: assertEquals(4, list.size())
[-] pred:  org. junit )

[*] target: assertEquals(4, list.size())
[-] pred:  org
************************************
************************************
[+] input: IOException {  // Create temporary files File tempConfig = File.createTempFile("temp-run-config", ".tmp"); File tempTopology = File.createTempFile("topology", ".tmp");  // Write temporary config file BufferedWriter topologyWriter = new BufferedWriter(new FileWriter(tempTopology)); topologyWriter.write("|V|=4\n"); topologyWriter.write("|E|=5\n"); topologyWriter.write("Servers=incl_range(0, 3)\n"); topologyWriter.write("Switches=set()\n"); topologyWriter.write("ToRs=incl_range(0, 3)\n"); topologyWriter.write("0 1\n"); topologyWriter.write("1 2\n"); topologyWriter.write("2 3\n"); topologyWriter.write("3 1\n"); topologyWriter.write("3 2"); topologyWriter.close();  // Write temporary config file BufferedWriter configWriter = new BufferedWriter(new FileWriter(tempConfig)); configWriter.write("scenario_topology_file=" + tempTopology.getAbsolutePath().replace("\", "/")); configWriter.close();  // Create properties NBProperties properties = new NBProperties(tempConfig.getAbsolutePath(), BaseAllowedProperties.PROPERTIES_RUN);  // Get graph properties.getGraph(); GraphDetails details = properties.getGraphDetails(); "<AssertPlaceHolder>"; assertEquals(details.getNumEdges(), 5);  // Clean-up assertTrue(tempConfig.delete());  }
getGraphDetails() { if (!graphIsRead) { readGraph(); } return graphDetails; }
[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred: org. junit. Assert. assertEquals ( temporary config file BufferedWriter configWriter, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit. Assert. assertEquals ( temporary config file BufferedWriter configurationWriter, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit. Assert. assertEquals ( tempWriter, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit. Assert. assertEquals ( tempConfig, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit. Assert. assertEquals ( temporary config file BufferedWriterWriter, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit. Assert. assertEquals ( temporary configuration file BufferedWriter configWriter, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org. junit, details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  , details )

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  org

[*] target: assertEquals(details.getNumNodes(), 4)
[-] pred:  )
************************************
************************************
[+] input: IOException {  // Graph: // //     0    1 //   2  3  4  5 //  File inFile = constructGraph( 6, 16, "incl_range(2,5)", "set(0,1)", "incl_range(2,5)", "2 0\n0 2\n2 1\n1 2\n3 0\n0 3\n3 1\n1 3\n4 0\n0 4\n4 1\n1 4\n5 0\n0 5\n5 1\n1 5" );  // Perform extension File tempOut = File.createTempFile("topology", ".tmp"); TopologyServerExtender extender = new TopologyServerExtender(inFile.getAbsolutePath(), tempOut.getAbsolutePath()); extender.extendRegular(7); "<AssertPlaceHolder>";  Pair<Graph, GraphDetails> res = GraphReader.read(tempOut.getAbsolutePath()); GraphDetails details = res.getRight();  // Graph dimensions assertEquals(34, details.getNumNodes()); // 6 + 4*7 = 34 assertEquals(72, details.getNumEdges()); // 16 + 2*4*7 = 16 + 56 = 72  // Sets assertTrue(details.isAutoExtended()); assertEquals(createSet(2, 3, 4, 5), details.getTorNodeIds()); // ToRs remain the same assertEquals(createSet(0, 1), details.getSwitchNodeIds()); // Switches remain the same Set<Integer> servers = new HashSet<>(); for (int i = 6; i < 34; i++ ) { servers.add(i); } assertEquals(servers, details.getServerNodeIds()); // Servers are added  // Test saved mapping from server perspective for (int i = 6; i < 34; i++ ) { assertEquals((int) details.getTorIdOfServer(i), 2 + (int) Math.floor((double) (i - 6) / 7.0)); }  // Test saved mapping from ToR perspective for (int i = 2; i <= 5; i++ ) { Set<Integer> torServers = new HashSet<>(); for (int j = 6 + (i - 2) * 7; j < 6 + (i - 1) * 7; j++ ) { torServers.add(j); } assertEquals(torServers, details.getServersOfTor(i)); }  assertTrue(tempOut.delete());  }
extendRegular(int serversPerTransportLayerNode) {  // Read in original graph to extend Pair<Graph, GraphDetails> original = GraphReader.read(topologyFileNameIn); Graph graph = original.getLeft(); GraphDetails details = original.getRight();  // Check that the graph can be extended if (!details.getTorNodeIds().equals(details.getServerNodeIds())) { throw new IllegalArgumentException( "Only a topology of which all its ToRs are marked as servers, " + "and nothing else, is possible to be extended." ); }  try {  System.out.println( "Extending topology file "" + topologyFileNameIn + "" by adding " + serversPerTransportLayerNode + " servers to each ToR." );   System.out.print("Writing to output topology file...");  // Open output file stream BufferedWriter outputWriter = new BufferedWriter(new FileWriter(topologyFileNameOut));  // Header outputWriter.write("# Extension with " + serversPerTransportLayerNode + " servers/TL node of topology file "" + topologyFileNameIn + ""\n\n");  // Pre-calculate what the new N parameter will be int originalN = details.getNumNodes(); int additionalNodes = serversPerTransportLayerNode * details.getServerNodeIds().size(); int newN = originalN + additionalNodes;  // Write details outputWriter.write("# Extended details\n"); outputWriter.write("|V|=" + newN + "\n"); outputWriter.write("|E|=" + (details.getNumEdges() + additionalNodes * 2) + "\n"); outputWriter.write("AutoExtended=true\n"); outputWriter.write("Servers=incl_range(" + originalN + ", " + (newN - 1) + ")\n"); outputWriter.write("Switches=set(" + StringUtils.join(details.getSwitchNodeIds(), ",") + ")\n"); outputWriter.write("ToRs=set(" + StringUtils.join(details.getTorNodeIds(), ",") + ")\n\n");  // Links section outputWriter.write("# Original " + details.getNumEdges() + " links:\n"); for (Vertex v : graph.getVertexList()) { for (Vertex w : graph.getAdjacentVertices(v)) { outputWriter.write(v.getId() + " " + w.getId() + "\n"); } }  outputWriter.write("\n# Extended " + (additionalNodes * 2) + " links:\n"); int addedSoFar = 0; for (Integer nodeId : details.getTorNodeIds()) { for (int s = 0; s < serversPerTransportLayerNode; s++) { outputWriter.write((originalN + addedSoFar) + " " + nodeId + "\n"); outputWriter.write(nodeId + " " + (originalN + addedSoFar) + "\n"); addedSoFar++; } }  // Close output file stream outputWriter.close();  System.out.println(" done.");  } catch (IOException e) { throw new RuntimeException("TopologyServerExtender: failed to read/write a topology file: " + e.getMessage()); }  }
[*] target: assertTrue(inFile.delete())
[-] pred: org. junit. Assert. assertNotNull ( extender )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. METHOD()); ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertNotNull ( extender. build ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. waitForException ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertNotNull ( extender. METHOD_11 ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. waitForAttribute ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. waitForCheck ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. isPassed ( ) )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertTrue ( extender. waitFor )

[*] target: assertTrue(inFile.delete())
[-] pred:  org. junit. Assert. assertNotNull ( extender
************************************
************************************
[+] input: testQueueOrder() {  // Events Event e1 = new FlowStartEvent(1000, null, 0, 0); Event e2 = new FlowStartEvent(0, null, 0, 0); Event e3 = new FlowStartEvent(848, null, 0, 0); Event e4 = new FlowStartEvent(1000, null, 0, 0); Event e5 = new FlowStartEvent(999999, null, 0, 0);  // Create queue PriorityQueue<Event> queue = new PriorityQueue<>(); queue.add(e1); queue.add(e2); queue.add(e3); queue.add(e4); queue.add(e5);  // Empty queue and make sure that it is in correct order assertEquals(queue.size(), 5); assertEquals(queue.peek().getTime(), 0); assertEquals(queue.poll().getTime(), 0); assertEquals(queue.size(), 4); assertEquals(queue.poll().getTime(), 848); assertEquals(queue.size(), 3); assertEquals(queue.poll().getTime(), 1000); assertEquals(queue.size(), 2); assertEquals(queue.poll().getTime(), 1000); assertEquals(queue.size(), 1); "<AssertPlaceHolder>"; assertEquals(queue.size(), 0); assertEquals(null, queue.poll());  }
getTime() { return time; }
[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred: org. junit. Assert. assertEquals ( e5, queue. getTime() ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime() ( ), queue. getTime ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime ( ), queue. getTime() ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime() ( ), queue. getTime() )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5, e2. getTime() ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime() ( ), queue )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5, queue. getTime ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5, buffer. getTime() ( ) )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime() ( ), queue. getTimeVo )

[*] target: assertEquals(queue.poll().getTime(), 999999)
[-] pred:  org. junit. Assert. assertEquals ( e5. getTime() ( ), e2. getTime() )
************************************
************************************
[+] input: testQueueingAndECNMarking() { reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // First 41 packets queued should not be marked for congestion // 40 in queue, 1 in dispatch position for (int i = 0; i < 41; i++) { port.enqueue(packet); } verify(packet, times(0)).markCongestionEncountered(); assertEquals(40, port.getQueueSize());  // Next 60 packets queued should be marked for congestion and enqueued for (int i = 0; i < 60; i++) { port.enqueue(packet); } verify(packet, times(60)).markCongestionEncountered(); assertEquals(100, port.getQueueSize());  // Next 10 packets queued should be marked for congestion and not enqueued but thrown away for (int i = 0; i < 10; i++) { port.enqueue(packet); } verify(packet, times(70)).markCongestionEncountered(); "<AssertPlaceHolder>";  // Only a single packet dispatch event should be in there assertEquals(Simulator.getEventSize(), 1);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(100, port.getQueueSize())
[-] pred: org. junit. Assert. assertNotNull ( port. getBalance ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getAllSize ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, handler. receiveSize ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getFromStringFromStringSize ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getAllMappingMapping ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getEventsSize ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getSimulatorMappingMapping ( ) )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port. getRequest )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port )

[*] target: assertEquals(100, port.getQueueSize())
[-] pred:  org
************************************
************************************
[+] input: testDispatchJustNot() {  // Standard packet reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // Enqueue two packets port.enqueue(packet); port.enqueue(packet); "<AssertPlaceHolder>";  // Just before dispatch of the first packet Simulator.runNs(packetSizeDataBytes * 8L / 10 - 1);  // Second packet is still in queue, still dispatch of first packet assertEquals(1, port.getQueueSize()); assertEquals(1, Simulator.getEventSize());  // None has arrived already verify(targetNetworkDevice, times(0)).receive(packet);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(1, port.getQueueSize())
[-] pred: org. junit. Assert. assertEquals ( 0, output. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, output. get ( 0 ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, count )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( cluster )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, is. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNull ( temp )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0L, output. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( actual )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( temp )
************************************
************************************
[+] input: testDispatchJust() {  // Standard packet reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // Queue two packets port.enqueue(packet); port.enqueue(packet); "<AssertPlaceHolder>";  // Exactly dispatch one packet, but it is not yet arrived Simulator.runNs(packetSizeDataBytes * 8L / 10);  // No queue as one is now being sent assertEquals(0, port.getQueueSize());  // One packet dispatch and one packet arrival event assertEquals(2, Simulator.getEventSize());  // None has arrived already verify(targetNetworkDevice, times(0)).receive(packet);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(1, port.getQueueSize())
[-] pred: org. junit. Assert. assertNotNull ( cluster )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( port )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, count )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( samples )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( temp )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( instant )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( true, true )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull ( actual )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  )
************************************
************************************
[+] input: testDispatchOneSent() {  // Standard packet size reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // Queue two packets port.enqueue(packet); port.enqueue(packet);  // One is queue, other is being sent "<AssertPlaceHolder>";  // Run such that one exactly arrives Simulator.runNs(packetSizeDataBytes * 8L / 10 + 20);  // The other is now being sent assertEquals(0, port.getQueueSize());  // One packet dispatch event left assertEquals(1, Simulator.getEventSize());  // The other has arrived already verify(targetNetworkDevice, times(1)).receive(packet);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(1, port.getQueueSize())
[-] pred: org. junit. Assert. assertEquals ( 0, count )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, output. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, cluster. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, size )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, is. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, pixels. size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, size ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, stream. read ( ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( true, true )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 0, stream. count ( ) )
************************************
************************************
[+] input: testDispatchOneSentSecondJustNot() {  // Standard packet size reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // Queue two packets port.enqueue(packet); port.enqueue(packet);  // One is in the queue, the other is not "<AssertPlaceHolder>";  // Link has delay of 20ns, and a throughput of 10 bit/ns // So one nanosecond is left Simulator.runNs(2 * packetSizeDataBytes * 8L / 10 + 19); assertEquals(0, port.getQueueSize());  // One packet arrival event is left assertEquals(1, Simulator.getEventSize());  // The other has arrived already verify(targetNetworkDevice, times(1)).receive(packet);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(1, port.getQueueSize())
[-] pred: org. junit. Assert. assertEquals ( 1, is in the queue )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, is in the queue

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, is )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, x )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, count )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, isIs in the queue

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, isin )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 1, actual )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  )
************************************
************************************
[+] input: testDispatchTwoSent() {  // Standard packet size reset(packet); when(packet.getSizeBit()).thenReturn(packetSizeDataBytes * 8L);  // Port with 100 packets and 40 packets ECN limit EcnTailDropOutputPort port = new EcnTailDropOutputPort(sourceNetworkDevice, targetNetworkDevice, link, 100 * packetSizeDataBytes, 40 * packetSizeDataBytes);  // Enqueue two packets port.enqueue(packet); port.enqueue(packet);  // One is in the port "<AssertPlaceHolder>";  // Run the simulator such that exactly two packets have arrived at the target network device Simulator.runNs(2 * packetSizeDataBytes * 8L / 10 + 20);  // No events left because target network device is a mock object assertEquals(0, port.getQueueSize()); assertEquals(0, Simulator.getEventSize());  // Two have arrived now verify(targetNetworkDevice, times(2)).receive(packet);  }
enqueue(Packet packet) {  // Convert to IP packet IpHeader ipHeader = (IpHeader) packet;  // Mark congestion flag if size of the queue is too big if (getBufferOccupiedBits() >= ecnThresholdKBits) { ipHeader.markCongestionEncountered(); }  // Tail-drop enqueue if (getBufferOccupiedBits() + ipHeader.getSizeBit() <= maxQueueSizeBits) { guaranteedEnqueue(packet); } else { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED"); if (ipHeader.getSourceId() == this.getOwnId()) { SimulationLogger.increaseStatisticCounter("PACKETS_DROPPED_AT_SOURCE"); } }  }
[*] target: assertEquals(1, port.getQueueSize())
[-] pred: org. junit. Assert. assertEquals ( 2, count )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 2, i )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 2, size )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 2, is in the port

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 2, isDay )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertEquals ( 2,

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit. Assert. assertNotNull (

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org. junit ) )

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  org

[*] target: assertEquals(1, port.getQueueSize())
[-] pred:  )
************************************
************************************
[+] input: testGenerator() { Simulator.setup(0); PerfectSimpleLinkGenerator generator = new PerfectSimpleLinkGenerator(100, 200); PerfectSimpleLink link = (PerfectSimpleLink) generator.generate(networkDeviceA, networkDeviceB); assertEquals(100, link.getDelayNs()); "<AssertPlaceHolder>"; Simulator.reset(); }
getBandwidthBitPerNs() { return bandwidthBitPerNs; }
[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred: org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( 20 ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNsAllow ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNs ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNsLOG ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNsParticipant ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNsWrapper ) )

[*] target: assertEquals(200, link.getBandwidthBitPerNs())
[-] pred:  org. junit. Assert. assertThat ( link. getBandwidthBitPerNs() ( ), org. hamcrest. CoreMatchers. is ( product. getBandwidthBitPerNs(0); ) )
************************************
************************************
[+] input: testFields() {  Simulator.setup(0);  // Create packet DemoPacket packet = new DemoPacket( 283, 1002, 11, 12, 99, 77 );  // Basic header fields assertEquals(283, packet.getFlowId()); assertEquals(1002, packet.getDataSizeByte()); assertEquals(11, packet.getSourceId()); assertEquals(12, packet.getDestinationId()); assertEquals(99, packet.getTTL()); "<AssertPlaceHolder>"; assertEquals((1002 + 60) * 8, packet.getSizeBit());  // Time-to-live for (int i = 0; i < 98; i++) { assertFalse(packet.decrementTtlAndIsDead()); assertEquals(99 - i - 1, packet.getTTL()); } assertTrue(packet.decrementTtlAndIsDead()); assertEquals(0, packet.getTTL());  // ECN mark assertFalse(packet.getECN()); packet.markCongestionEncountered(); assertTrue(packet.getECN()); packet.markCongestionEncountered(); assertTrue(packet.getECN());  // Departure time assertEquals(0, packet.getDepartureTime());  // String representation assertNotNull(packet.toString());  Simulator.reset();   }
getAckSizeByte() { return ackSizeByte; }
[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred: org. junit. Assert. assertEquals ( 9, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 20, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 12, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 8, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 100, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 200, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 100, packet. getAckSizeByte() )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 1, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 1000, packet. getAckSizeByte() ( ) )

[*] target: assertEquals(77, packet.getAckSizeByte())
[-] pred:  org. junit. Assert. assertEquals ( 20, packet. getAckSizeByte() )
************************************
************************************
[+] input: testIdentity() {  // Outgoing adaptation IdentityFlowletIntermediary intermediary = new IdentityFlowletIntermediary(); assertEquals(packet, intermediary.adaptOutgoing(packet));  // Verify that the (src, dst, flow, flowlet)-hash generation is used verify(packet, times(1)).setHashSrcDstFlowFlowletDependent(); verify(packet, times(1)).getFlowId(); verifyNoMoreInteractions(packet);  // Verify that nothing is being adapted for incoming packets "<AssertPlaceHolder>"; verifyNoMoreInteractions(packet);  }
adaptIncoming(Packet packet) { return packet; }
[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred: org. junit. Assert. assertEquals ( expectingStage Verify that, adaptation. adaptIncoming(packet )

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expectingFont Verify Verify. from (src, dst, flow, flowlet)-hash generation

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expecting-4 Verify that (src, dst, flow, flowlet)-hash generation is used

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expectingStage Verify, adaptation. adaptIncoming(packet )

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expecting Editor Verify Verify. from (src, dst, flow, flowlet)-hash generation

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expectingStage Verify that, adaptation. adaptIncoming(packet ) )

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expectingLanguageId Verify, adaptation. adaptIncoming(packet )

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expecting-4 Verify that (src, dst, flow, flowlet)-hash generation

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org. junit. Assert. assertEquals ( expectingStage Verify, adaptation. adaptIncoming(packet ) )

[*] target: assertEquals(packet, intermediary.adaptIncoming(packet))
[-] pred:  org
************************************
************************************
[+] input: testThreePointsInTime() {  // Retrieve default gap long gap = Simulator.getConfiguration().getLongPropertyOrFail("FLOWLET_GAP_NS"); assertTrue(gap > 0);  // Mock packet belonging to flow id 100 when(packet.getFlowId()).thenReturn(100L);  // Create intermediary UniformFlowletIntermediary intermediary = new UniformFlowletIntermediary();  // Receive packets at three different // points in time intermediary.adaptOutgoing(packet); // Receive 1st packet at t=0 Simulator.runNs(gap - 1); intermediary.adaptOutgoing(packet); // Receive 2nd packet at t=FLOWLET_GAP-1 Simulator.runNs(2 * gap - 1); intermediary.adaptOutgoing(packet); // Receive 3rd packet at t=2*FLOWLET_GAP+1  // Check flowlet identifiers at the three points in time ArgumentCaptor<Integer> captor = ArgumentCaptor.forClass(Integer.class); verify(packet, times(3)).setFlowletId(captor.capture()); "<AssertPlaceHolder>"; // No time has passed on a non-zero gap, so flowlet id should still be 0 assertEquals(0, (int) captor.getAllValues().get(1)); // Just not enough time has passed assertEquals(1, (int) captor.getAllValues().get(2)); // Exactly enough time has passed  // Must use the correct hash setting verify(packet, times(3)).setHashSrcDstFlowFlowletDependent(); verify(packet, times(0)).setHashSrcDstFlowletDependent();  }
adaptOutgoing(Packet packet) {  // Retrieve flow to which the packet belongs long flowId = packet.getFlowId();  // Retrieve current flowlet of the flow int currentFlowlet = getCurrentFlowlet(flowId);  // If the flowlet gap is exceeded, go to next flowlet if (flowletGapExceeded(flowId)) { currentFlowlet = Math.max(0, currentFlowlet + 1); setCurrentFlowlet(flowId, currentFlowlet); }  // Actually set flowlet identifier on the packet packet.setFlowletId(currentFlowlet);  // Set the actual hash to be dependent on both flow id and flowlet identifier TcpHeader tcpHeader = (TcpHeader) packet; tcpHeader.setHashSrcDstFlowFlowletDependent();  // Pass on to regular packet handling return packet;  }
[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred: org. junit. Assert. assertThat ( captor. adaptOutgoing( flow ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertEquals ( default gap, captor. adaptOutgoing( flow ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertThat ( captor. adaptOutgoing( flow ), org. hamcrest. CoreMatchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertThat ( captor. adaptOutgoing(d ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertThat ( captor. adaptOutgoing( flow, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertThat ( captor. adaptOutgoing(d ), org. hamcrest. CoreMatchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertThat ( captor. adaptOutgoing(org ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( gap ) ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertEquals ( default gap, captor. adaptOutgoing ( 0 ) )

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertEquals ( default gap, captor. adaptOutgoing (

[*] target: assertEquals(0, (int) captor.getAllValues().get(0))
[-] pred:  org. junit. Assert. assertNull ( gap )
************************************
************************************
[+] input: testAddAndNext() {  RandomCollection<Integer> rc = new RandomCollection<>(random); rc.add(0.1, 894); rc.add(0.2, 34); rc.add(0.3, 11); rc.add(0.1, -378); rc.add(0.2, 88); rc.add(0.1, 95);  when(random.nextDouble()).thenReturn(0.0); assertEquals(894, (int) rc.next());  when(random.nextDouble()).thenReturn(0.09999999); assertEquals(894, (int) rc.next());  when(random.nextDouble()).thenReturn(0.1); assertEquals(894, (int) rc.next());  when(random.nextDouble()).thenReturn(0.15); assertEquals(34, (int) rc.next());  when(random.nextDouble()).thenReturn(0.69999); assertEquals(-378, (int) rc.next());  when(random.nextDouble()).thenReturn(0.7); assertEquals(-378, (int) rc.next());  when(random.nextDouble()).thenReturn(0.9999); assertEquals(95, (int) rc.next());  when(random.nextDouble()).thenReturn(1.0); "<AssertPlaceHolder>";  boolean thrown = false; try { when(random.nextDouble()).thenReturn(1.00001); rc.next(); } catch (NullPointerException e) { thrown = true; } assertTrue(thrown);  }
next() { if (Math.abs(1.0 - total) > 1e-6) { throw new IllegalArgumentException("Total weight (" + total + ") in random collection differs too much (> 1e-6) from 1."); } double value = random.nextDouble(); return map.ceilingEntry(value).getValue(); }
[*] target: assertEquals(95, (int) rc.next())
[-] pred: org. junit. Assert. assertNull ( rc. next() ( ) )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertNull ( rc. next() )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertFalse ( rc. next() ( ) )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertNotNull ( rc. next() )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertEquals ( true, rc. next() ( ) )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertEquals ( 200, rc. next() ( ) )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org. junit. Assert. assertNotNull ( rc. next() ( ) )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  true )

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  org

[*] target: assertEquals(95, (int) rc.next())
[-] pred:  )
************************************
************************************
[+] input: simpleInstFakePacket() {  when(packet.getSizeBit()).thenReturn((long) (3535 * 8 + 60 * 8 + 60 * 8)); when(packet.getSourceId()).thenReturn(46); when(packet.getDestinationId()).thenReturn(88); when(packet.getFlowId()).thenReturn(577L);  // Create packet ValiantEncapsulation encapsulation = new ValiantEncapsulation( packet, 5 );  // Getters Assert.assertEquals(packet, encapsulation.getPacket()); assertEquals(5, encapsulation.getValiantDestination());  // Passing valiant assertFalse(encapsulation.passedValiant()); encapsulation.markPassedValiant(); assertTrue(encapsulation.passedValiant());  // Congestion mark propagation encapsulation.markCongestionEncountered(); verify(packet, times(1)).markCongestionEncountered();  // Does not increase packet size Assert."<AssertPlaceHolder>";  // These fields are necessary to be the same as the packet Assert.assertEquals(577L, encapsulation.getFlowId()); Assert.assertEquals(46, encapsulation.getSourceId()); Assert.assertEquals(88, encapsulation.getDestinationId());  }
markCongestionEncountered() { this.packet.markCongestionEncountered(); }
[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred: org. junit. Assert. assertTrue ( Congestion. markCongestionEncounteredPattern ( ) )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncountered QueryBuilder ( ) )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncounteredPattern )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncountered(); )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncountered )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncountered goes. is ( simpleText ) )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion. markCongestionEncountered goes. is ( true ) )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertTrue ( Congestion )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertThat ( Congestion )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org
************************************
************************************
[+] input: simpleInstOneHop() {  // Create a path SourceRoutingPath path = new SourceRoutingPath(); path.add(3); path.add(12);  when(packet.getSizeBit()).thenReturn((long) (3535 * 8 + 60 * 8 + 60 * 8)); when(packet.getSourceId()).thenReturn(46); when(packet.getDestinationId()).thenReturn(88); when(packet.getFlowId()).thenReturn(577L);  // Create packet SourceRoutingEncapsulation encapsulation = new SourceRoutingEncapsulation( packet, path );  // Getters assertEquals(packet, encapsulation.getPacket()); assertEquals(12, encapsulation.nextHop());  // Congestion mark propagation encapsulation.markCongestionEncountered(); verify(packet, times(1)).markCongestionEncountered();  // Does not increase packet size "<AssertPlaceHolder>";  // These fields are necessary to be the same as the packet assertEquals(577L, encapsulation.getFlowId()); assertEquals(46, encapsulation.getSourceId()); assertEquals(88, encapsulation.getDestinationId());  }
markCongestionEncountered() { this.packet.markCongestionEncountered(); }
[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred: org. junit. Assert. assertEquals ( 0, Congestion. markCongestionEncountered(); )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion. markCongestionEncounteredPattern )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion. markCongestionEncounteredFirst )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion. markCongestionEncountered )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion. markCongestionEncounteredTrace )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, CongestionCount )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, CongestionResponse )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, CongestionProperty )

[*] target: assertEquals(packet.getSizeBit(), encapsulation.getSizeBit())
[-] pred:  org. junit. Assert. assertEquals ( 0, Congestion
************************************
************************************
[+] input: testSingleForward() {  // Create device with ports SourceRoutingSwitch device = new SourceRoutingSwitch(1, null, 5, new IdentityFlowletIntermediary()); device.addConnection(topology.getPort(1, 0)); device.addConnection(topology.getPort(1, 2)); device.addConnection(topology.getPort(1, 3));  // Add path to a certain destination SourceRoutingPath path = new SourceRoutingPath(); path.add(1); path.add(3); path.add(4); device.addPathToDestination(4, path);  // Initialize packet for that destination when(packet.getDestinationId()).thenReturn(4);  ArgumentCaptor<SourceRoutingEncapsulation> captor = ArgumentCaptor.forClass(SourceRoutingEncapsulation.class);  // Give device the packet device.receiveFromTransportLayer(packet); verify(topology.getPort(1, 0), times(0)).enqueue(captor.capture()); verify(topology.getPort(1, 2), times(0)).enqueue(captor.capture()); verify(topology.getPort(1, 3), times(1)).enqueue(captor.capture());  // Make sure the encapsulation is correct SourceRoutingEncapsulation encapsulation = captor.getValue(); "<AssertPlaceHolder>"; assertEquals(packet.getDestinationId(), encapsulation.getDestinationId());  }
addPathToDestination(int destinationId, SourceRoutingPath path) {  // Check for a valid path length if (path.size() < 2) { throw new IllegalArgumentException("Cannot add a path of zero or one length (must have source and destination included)."); }  // Check for not possible next hop identifier if (!connectedTo.contains(path.get(1))) { throw new IllegalArgumentException("Cannot add path with source hop to a network device to which it is not connected (" + path.get(1) + ")"); }  // Source incorrect if (path.get(0) != this.getIdentifier()) { throw new IllegalArgumentException("First node on path should be this identifier (expected " + this.getIdentifier() + ", received " + path.get(0) + ")"); }  // Destination incorrect if (path.get(path.size() - 1) != destinationId) { throw new IllegalArgumentException("Last node on path should be destination (expected " + destinationId + ", received " + path.get(path.size() - 1) + ")"); }  // To itself if (this.getIdentifier() == destinationId) { throw new IllegalArgumentException("Cannot add a path going to itself (" + this.getIdentifier() + ")"); }  // Check for duplicate List<SourceRoutingPath> current = this.destinationToPaths.get(destinationId); if (current.contains(path)) { if (Simulator.getConfiguration().getBooleanPropertyWithDefault("allow_source_routing_skip_duplicate_paths", false)) { System.out.println("For (" + this.getIdentifier() + "->" + destinationId + ") skipped duplicate path : " + path); return; } else if (Simulator.getConfiguration().getBooleanPropertyWithDefault("allow_source_routing_add_duplicate_paths", false)) { System.out.println("For (" + this.getIdentifier() + "->" + destinationId + ") added duplicate path : " + path); } else { throw new IllegalArgumentException("Cannot add a duplicate path (" + path + ")"); } }  // Add to current ones current.add(path);  }
[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred: org. junit. Assert. assertEquals ( 3, encapsulation. addPathToDestinationId ( 0 ) )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. String. valueOf ( 3 ), encapsulation. addPathToDestinationId ( 0 ) )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( this. source, destination ), encapsulation )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( object, encapsulation )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( this. proto, encapsulation )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( null, encapsulation )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String (

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org. junit. Assert. assertEquals ( this, encapsulation )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  )

[*] target: assertTrue(packet == encapsulation.getPacket())
[-] pred:  org
************************************
************************************
[+] input: testTcpScenario() {  AckRangeSet set = new AckRangeSet();  // SYN bit from initial SYN received assertEquals(1, set.determineReceiveNextNumber(1));  // ACK has been received assertEquals(1, set.determineReceiveNextNumber(1));  // Two packets are received correctly assertEquals(101, set.determineReceiveNextNumber(101)); assertEquals(201, set.determineReceiveNextNumber(201));  // 201-301 packet is missing, but 301-401 arrived set.add(301, 401);  // Now 201-301 has arrived assertEquals(401, set.determineReceiveNextNumber(301));  // No ranges should be left List<AckRange> rangesList = convertToOrderedList(set.getRanges()); "<AssertPlaceHolder>";  }
getRanges() { return ranges; }
[*] target: assertEquals(0, rangesList.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rangesList. size ( ) )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 9, rangesList. size ( ) )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( rangesList, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals (SYN, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( keySetList, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( keySet, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org. junit, rangesList )

[*] target: assertEquals(0, rangesList.size())
[-] pred:  org

[*] target: assertEquals(0, rangesList.size())
[-] pred:  )
************************************
************************************
[+] input: testRangeIsWithin() {  AckRangeSet set = new AckRangeSet(); set.add(101, 301); ArrayList<AckRange> arr = (ArrayList<AckRange>) set.createSelectiveAckData();  "<AssertPlaceHolder>"; assertFalse(arr.get(0).isWithin(1, 101)); assertTrue(arr.get(0).isWithin(101, 201)); assertTrue(arr.get(0).isWithin(201, 301)); assertTrue(arr.get(0).isWithin(101, 301)); assertFalse(arr.get(0).isWithin(301, 401)); assertFalse(arr.get(0).isWithin(401, 501));  }
createSelectiveAckData() { if (cacheIsInvalid) { cacheRanges = new ArrayList<>(ranges); } return cacheRanges; }
[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred: org. junit. Assert. assertEquals ( 0, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertNotNull ( arr )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertEquals ( 1, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertEquals ( 3, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertEquals ( 5, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertNull ( arr )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertEquals ( 7, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertEquals ( 2, arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertNull ( arr. size ( ) )

[*] target: assertFalse(arr.get(0).isWithin(0, 1))
[-] pred:  org. junit. Assert. assertNull ( arr. isEmpty ( ) )
************************************
************************************
[+] input: testRangeMergeOnly() {  AckRangeSet set = new AckRangeSet(); set.add(0, 1); set.add(1, 101); set.add(101, 201); set.add(201, 301); set.add(301, 401); set.add(201, 301); set.add(501, 601);  List<AckRange> rangesList = convertToOrderedList(set.getRanges()); "<AssertPlaceHolder>"; assertRangeEquals(0, 401, rangesList.get(0)); assertRangeEquals(501, 601, rangesList.get(1));  }
getRanges() { return ranges; }
[*] target: assertEquals(2, rangesList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangesList. getRanges() ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangeList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertNull ( rangesList. getRanges() ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 3, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangesList.. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertNull ( rangesList )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org
************************************
************************************
[+] input: testRangeMergeAbove() {  AckRangeSet set = new AckRangeSet(); set.add(0, 1); set.add(1, 101); set.add(201, 301); set.add(101, 201); set.add(401, 501);  List<AckRange> rangesList = convertToOrderedList(set.getRanges()); "<AssertPlaceHolder>"; assertRangeEquals(0, 301, rangesList.get(0)); assertRangeEquals(401, 501, rangesList.get(1));  }
getRanges() { return ranges; }
[*] target: assertEquals(2, rangesList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangesList. getRanges() ( 0 ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangesList. getRanges() ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertNull ( rangesList )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, rangeList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert.. 0, rangesList. size ( ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertEquals(2, rangesList.size())
[-] pred:  org
************************************
************************************
[+] input: testImmutability() {  // 0-301, 401-501 AckRangeSet set = new AckRangeSet(); set.add(0, 1); set.add(1, 101); set.add(201, 301); set.add(101, 201); set.add(401, 501);  // Create ack data List<AckRange> l = (List<AckRange>) set.createSelectiveAckData();  // Modify ack range set set.add(501, 601);  List<AckRange> l2 = (List<AckRange>) set.createSelectiveAckData();  assertEquals(2, l.size()); assertRangeEquals(0, 301, l.get(0)); assertRangeEquals(401, 501, l.get(1));  assertEquals(2, l2.size()); assertRangeEquals(0, 301, l2.get(0)); assertRangeEquals(401, 601, l2.get(1));  // Modify ack range set set.add(801, 901);  List<AckRange> l3 = (List<AckRange>) set.createSelectiveAckData();  assertEquals(2, l.size()); assertRangeEquals(0, 301, l.get(0)); assertRangeEquals(401, 501, l.get(1));  assertEquals(2, l2.size()); assertRangeEquals(0, 301, l2.get(0)); assertRangeEquals(401, 601, l2.get(1));  assertEquals(3, l3.size()); assertRangeEquals(0, 301, l3.get(0)); assertRangeEquals(401, 601, l3.get(1)); assertRangeEquals(801, 901, l3.get(2));  l3.add(new AckRange(1001, 1101));  List<AckRange> l4 = (List<AckRange>) set.createSelectiveAckData();  "<AssertPlaceHolder>"; assertRangeEquals(0, 301, l4.get(0)); assertRangeEquals(401, 601, l4.get(1)); assertRangeEquals(801, 901, l4.get(2));  }
createSelectiveAckData() { if (cacheIsInvalid) { cacheRanges = new ArrayList<>(ranges); } return cacheRanges; }
[*] target: assertEquals(3, l4.size())
[-] pred: org. junit. Assert. assertNull ( l4.()); ( ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( l4. errors ) == 0 ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertNull ( l4.()); )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( l4.());. contains ( warning ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( l4. errors ) > 0 ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( l2.());. contains ( l2 ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( l2.()); ( ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( l4. errors ) == 2 ) )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit. Assert. assertNull ( l4 )

[*] target: assertEquals(3, l4.size())
[-] pred:  org. junit here )
************************************
************************************
[+] input: simpleInst() {  // Run for some time to have an interesting departure time set Simulator.runNs(37777);  // Create packet FullExtTcpPacket packet = new FullExtTcpPacket( 46622, 3535, 67, 89, 100, 80, 81, // TTL, source port, destination port 473737, 373, // Seq number, Ack number false, false, false, false, true, false, false, false, false, // NS  CWR    ECE    URG    ACK   PSH    RST    SYN    FIN 4262, 892 // Window size );  // Default getters assertEquals(packet.getFlowId(), 46622); assertEquals(packet.getDataSizeByte(), 3535); assertEquals(packet.getSizeBit(), 3535 * 8 + 60 * 8 + 60 * 8); assertEquals(packet.getSourceId(), 67); assertEquals(packet.getDestinationId(), 89); assertEquals(packet.getTTL(), 100); assertEquals(packet.getSourcePort(), 80); assertEquals(packet.getDestinationPort(), 81); assertEquals(packet.getSequenceNumber(), 473737); assertEquals(packet.getAcknowledgementNumber(), 373); assertFalse(packet.isNS()); assertFalse(packet.isCWR()); assertFalse(packet.isECE()); assertFalse(packet.isURG()); assertTrue(packet.isACK()); assertFalse(packet.isPSH()); assertFalse(packet.isRST()); assertFalse(packet.isSYN()); assertFalse(packet.isFIN()); assertEquals(packet.getWindowSize(), 4262.0, 0.0); assertEquals(packet.getDepartureTime(), 37777); assertEquals(0, packet.getFlowletId()); packet.setFlowletId(352555); assertEquals(352555, packet.getFlowletId()); assertEquals(892, packet.getPriority());  // Congestion encountering assertFalse(packet.getECN()); packet.markCongestionEncountered(); assertTrue(packet.getECN()); packet.markCongestionEncountered(); assertTrue(packet.getECN());  // Time-to-live (TTL) check for (int i = 0; i < 100; i++) { assertEquals(100 - i, packet.getTTL()); boolean isDead = packet.decrementTtlAndIsDead(); assertEquals(100 - i - 1, packet.getTTL()); if (i == 99) { assertTrue(isDead); } else { assertFalse(isDead); } }  // Print string System.out.println(packet.toString());  // Set flowlet identifier packet.setEchoFlowletId(24252); "<AssertPlaceHolder>";  }
toString() { return "TCPPacket[" + getSourceId() + " -> " + getDestinationId() + ", DATA=" + this.getDataSizeByte() + "b, ACK=" + ACK + " (exp. ack.: " + (this.getSequenceNumber() + this.getDataSizeByte()) + "), createdAt=" + this.getDepartureTime() + ", seq: " + getSequenceNumber() + ", carryingAck: " + this.getAcknowledgementNumber() + ", SYN=" + this.isSYN() + "]"; }
[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred: org. junit. Assert. assertTrue ( isDead )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertThat ( isDead, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertThat ( isDead, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertThat ( actualCount, org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. System. currentTimeMillis ( ), actual )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. System. currentTimeMillis ( ), actualCount )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertTrue ( isDead )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org. junit. Assert. assertTrue ( """", isDead )

[*] target: assertEquals(24252, packet.getEchoFlowletId())
[-] pred:  org
************************************
************************************
[+] input: dbMapperTest() { DBMapper dbMapper = new DBMapper(); dbMapper.init("{"dts_h02":{"all":false,"name":"dts_h","Table":{"dtsh27_02":{"all":true,"name":"dtsh"},"dts28_01":{"all":true,"name":"dts"},"dts28_02":{"all":true,"name":"dts"}}},"dts_h01":{"all":false,"name":"dts_h","Table":{"dtsh27_01":{"all":true,"name":"dtsh"},"dts29_02":{"all":true,"name":"dts"},"dts29_01":{"all":true,"name":"dts"}}}}"); Record record = new Record(); record.setOperation(Operation.UPDATE); String physicTable = "dts_h02.dtsh27_02"; String logicTable = "dts_h.dtsh";  record.setObjectName(physicTable); record = dbMapper.transform(record); Assert.assertEquals(record.getObjectName(), logicTable);  String physicDb = "dts_h01"; String logicDb = "dts_h"; record.setOperation(Operation.DDL); record.setObjectName(physicDb); record =  dbMapper.transform(record); Assert."<AssertPlaceHolder>";  }
transform(Record record)  { // do not support ddl for now //            if (record.getOperation().equals(Operation.DDL)) { //                if (physic2logicDBMapper.containsKey(record.getObjectName())) { //                    record.setObjectName(physic2logicDBMapper.get(record.getObjectName())); //                } //            }  if (record.getOperation().equals(Operation.INSERT) || record.getOperation().equals(Operation.UPDATE) || record.getOperation().equals(Operation.DELETE))  { if (!physic2logicTableMapper.containsKey(record.getObjectName())) { log.info("Cannot find logic db table for " + record.getObjectName() + ", refreshing dbList now"); try { retryUtil.callFunctionWithRetry( () -> { refreshDbList(); } ); }  catch (Exception e) { log.error("Error getting dbList:" + e); } } record.setObjectName(physic2logicTableMapper.get(record.getObjectName())); } return record; }
[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred: org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, physicDb )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( 0 ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record (

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( false ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( enable ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( input ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( designated ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org. junit. Assert. assertEquals ( logicDb, record. transform(Record ( stream ) )

[*] target: assertEquals(record.getObjectName(), logicDb)
[-] pred:  org
************************************
************************************
[+] input: signRequestUsingProvidedCredentials() { ArgumentCaptor<AWSCredentials> awsCredentialsArgumentCaptor = ArgumentCaptor.forClass(AWSCredentials.class); underTest.setAws4Signer(mockAWS4Signer);  doNothing() .when(mockAWS4Signer) .sign(any(SignableRequest.class), awsCredentialsArgumentCaptor.capture());  underTest.sign(new Request.Builder().url("https://api.amazon.com").build());  AWSCredentials actualAWSCredentials = awsCredentialsArgumentCaptor.getValue();  "<AssertPlaceHolder>"; assertEquals(TEST_SECRET_KEY, actualAWSCredentials.getAWSSecretKey()); }
sign(Request originalRequest) { SignableRequest<Request> signableRequest = new SignableRequestImpl(originalRequest); if (awsCredentialsProvider != null) { aws4Signer.sign(signableRequest, awsCredentialsProvider.getCredentials()); } else { aws4Signer.sign(signableRequest, awsCredentials); } return (Request) signableRequest.getOriginalRequestObject(); }
[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred: org. junit. Assert. assertEquals ( new org. apache. commons. lang. String ( actualAWSCredentials ), actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new SignableRequestImpl ( actualAWSCredentials ), actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( actualAWSCredentials, actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. lang. String [ ] { }, actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( newAWSCredentials, actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. lang. StringUtils ( actualAWSCredentials ), actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_5 ( ), actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( expectedAWSCredentials, actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new org. trace ( ), actualAWSCredentials )

[*] target: assertEquals(TEST_ACCESS_KEY_ID, actualAWSCredentials.getAWSAccessKeyId())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_1 ( ), actualAWSCredentials )
************************************
************************************
[+] input: InterruptedException {  when(mockOkHttpClient.newCall(any(Request.class))) .thenReturn(mockCall); when(mockCall.execute()) .thenReturn(buildResponse(200, "Azta|foo", "120")) .thenThrow(IllegalStateException.class); underTest.setLWAAccessTokenCache(new LWAAccessTokenCacheImpl());  //First call should get from Endpoint assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller)); //Second call when the cache is still valid, if it goes to end point it will return IllegalStateException. "<AssertPlaceHolder>"; }
getAccessToken(LWAAccessTokenRequestMeta lwaAccessTokenRequestMeta) { if (lwaAccessTokenCache != null) { return getAccessTokenFromCache(lwaAccessTokenRequestMeta); } else { return getAccessTokenFromEndpoint(lwaAccessTokenRequestMeta); } }
[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred: org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenCacheImpl());JobExecutionFirst call should get from Endpoint ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenCacheImpl());JobExecutionFirst call should get from Endpoint ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenCacheImpl());JobExecutionFirst call should get from Endpoint ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenRequestMeta ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenRequestMeta ( ), org. hamcrest. CoreMatchers. is ( 0.0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenCacheImpl());JobExecutionFirst call should get from Endpoint ( ), org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest.setLWAAccessTokenCache(new LWAAccessTokenCache( new LWAAccessTokenRequestMeta ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( underTest. getAccessToken(lwaAccessTokenRequest ), org. hamcrest. CoreMatchers. is ( 0.0 ) )

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org

[*] target: assertEquals("Azta|foo", underTest.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  )
************************************
************************************
[+] input: InterruptedException { LWAClient client = new LWAClient(TEST_ENDPOINT); client.setOkHttpClient(mockOkHttpClient); when(mockOkHttpClient.newCall(any(Request.class))) .thenReturn(mockCall); when(mockCall.execute()) .thenReturn(buildResponse(200, "Azta|foo", "1")) .thenReturn(buildResponse(200, "Azta|foo1", "1"));  //First call should get from Endpoint assertEquals("Azta|foo", client.getAccessToken(lwaAccessTokenRequestMetaSeller)); //Second call should again go to the endpoint because accesstoken is expired after expiry adjustment. "<AssertPlaceHolder>"; }
getAccessToken(LWAAccessTokenRequestMeta lwaAccessTokenRequestMeta) { if (lwaAccessTokenCache != null) { return getAccessTokenFromCache(lwaAccessTokenRequestMeta); } else { return getAccessTokenFromEndpoint(lwaAccessTokenRequestMeta); } }
[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred: org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( request ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( control ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( feature ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( context ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertThat ( client. getAccessToken(lwaAccessTokenRequestMeta), org. hamcrest. CoreMatchers. is ( rendered ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertEquals ( client. getAccessToken(lwaAccessTokenRequestMeta, call should get from Endpoint )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertEquals ( client. getAccessToken(lwaAccessTokenRequestMeta ( ), call should get from Endpoint ( ) )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertEquals ( client. getAccessToken(lwaAccessTokenRequestMeta), call should get from Endpoint )

[*] target: assertEquals("Azta|foo1", client.getAccessToken(lwaAccessTokenRequestMetaSeller))
[-] pred:  org. junit. Assert. assertEquals ( client. getAccessToken(lwaAccessTokenRequestMeta ( ), call. get from Endpoint ( ) )
************************************
************************************
[+] input: getHttpMethod() { assertEquals(HttpMethodName.GET, underTest.getHttpMethod());  underTest = new SignableRequestImpl(new Request.Builder() .url("https://www.amazon.com") .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), "{"foo": "bar"}")) .build());  "<AssertPlaceHolder>"; }
getHttpMethod() { return HttpMethodName.fromValue(originalRequest.method().toUpperCase()); }
[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred: org. junit. Assert. assertEquals (HttpMethodName.GET, underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( parameterTypesName.GET, underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( MatchTypeName.GET, underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( AbstractHttpMethodName.GET, underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( hereTest. getHttpMethod(), underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( ascendingTest. getHttpMethod(), mrTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals ( opts, underTest. getHttpMethod() )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org. junit. Assert. assertEquals (HttpMethodName.GET, underTest. getHttpMethod() ) )

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  org

[*] target: assertEquals(HttpMethodName.POST, underTest.getHttpMethod())
[-] pred:  )
************************************
************************************
[+] input: getOriginalRequestObject() { Request actualRequest = (Request)underTest.getOriginalRequestObject();  "<AssertPlaceHolder>"; assertEquals(testRequest.method(), actualRequest.method()); assertEquals(testRequest.url(), actualRequest.url()); assertEquals(testRequest.headers().toMultimap(), actualRequest.headers().toMultimap()); assertEquals(testRequest.body(), actualRequest.body()); }
getOriginalRequestObject() { return signableRequestBuilder.build(); }
[*] target: assertNotSame(testRequest, actualRequest)
[-] pred: org. junit. Assert. assertEquals ( actualRequest, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( originalRequest, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( this. actualRequestObject());, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( 18, actualRequest. getOriginalRequestObject(); )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( 18, actualRequest. getOriginalRequestObject Model )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( currentRequest, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit. Assert. assertEquals ( body, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  org. junit, actualRequest )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  _5_5 )

[*] target: assertNotSame(testRequest, actualRequest)
[-] pred:  )
************************************
************************************
[+] input: headers() { Map<String, String> expectedHeaders = new HashMap<>();  assertTrue(underTest.getHeaders().isEmpty());  underTest.addHeader("foo", "bar"); expectedHeaders.put("foo", "bar"); assertEquals(expectedHeaders, underTest.getHeaders());  underTest.addHeader("ban", "bop"); expectedHeaders.put("ban", "bop"); "<AssertPlaceHolder>"; }
getHeaders() { Map<String, String> headers = new HashMap<>();  Request requestSnapshot = signableRequestBuilder.build(); requestSnapshot.headers() .names() .forEach(headerName -> headers.put(headerName, requestSnapshot.header(headerName)));  if (requestSnapshot.body() != null) { MediaType contentType = requestSnapshot.body().contentType(); if (contentType != null) { headers.put(CONTENT_TYPE_HEADER_NAME, contentType.toString()); } }  return headers; }
[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred: org. junit. Assert. assertEquals ( expectedHeaders, actualHeaders. getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, response. getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, builder. getHeaders() ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders: ( ) )

[*] target: assertEquals(expectedHeaders, underTest.getHeaders())
[-] pred:  org. junit. Assert. assertEquals ( expectedHeaders, underTest. getHeaders(). getHeaders: ) )
************************************
************************************
[+] input: addParameter() { underTest.addParameter("left", "左");  HttpUrl actualHttpUrl = ((Request) underTest.getOriginalRequestObject()) .httpUrl();  "<AssertPlaceHolder>"; assertEquals(Collections.singletonList("blue"), actualHttpUrl.queryParameterValues("sky")); assertEquals(Collections.singletonList("右"), actualHttpUrl.queryParameterValues("right")); assertEquals(Collections.singletonList("左"), actualHttpUrl.queryParameterValues("left")); }
getOriginalRequestObject() { return signableRequestBuilder.build(); }
[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred: org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. util. HashSet ( actualHttpUrl ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new java. lang. Object ( ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. util. Properties ( ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl. getOriginalRequestObject() ( ), actualHttpUrl. getOriginalRequestObject ( ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. fs. Path ( expected ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. util. CoreMatchers ( actualHttpUrl ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. api. URI ( actualHttpUrl ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, new org. apache. hadoop. conf. Configuration ( 1 ) )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org. junit. Assert. assertEquals ( actualHttpUrl, null )

[*] target: assertEquals(Collections.singletonList("true"), actualHttpUrl.queryParameterValues("test"))
[-] pred:  org
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.matchTag(strMatcher);  "<AssertPlaceHolder>"; assertFalse(predicate.test(FAIL_TAG)); }
matchTag(final Predicate<String> tagMatcher) { return input -> tagMatcher.test(checkNotNull(input).getTag()); }
[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred: org. junit. Assert. assertFalse ( predicate. matchTag(PaPa_ predicate )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertTrue ( predicate. matchTag(PaMatcher ( ) )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchTag(PaPa2 predicate )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchTag ( org.LogRecord ) )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertTrue ( predicate. matchTag ( org.LogRecord ) )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchTag(PaMatcher ( ) )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertTrue ( predicate. matchTag(PaPa_ predicate )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertNotNull ( predicate )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org. junit. Assert. assertNull ( predicate )

[*] target: assertTrue(predicate.test(OK_TAG))
[-] pred:  org
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.withPid(OK_PID_VAL_1);  "<AssertPlaceHolder>"; assertFalse(predicate.test(FAIL_PID)); }
withPid(final int pid) { return input -> checkNotNull(input).getPid() == pid; }
[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred: org. junit. Assert. assertNotNull ( predicate )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertThat ( predicate, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertThat ( predicate, org. hamcrest. CoreMatchers. equalTo ( true ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertTrue ( predicate. equals ( org. hamcrest. CoreMatchers. equalTo ( true ) ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertFalse ( predicate. exists ( ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertFalse ( predicate. rec ( org. id ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertFalse ( predicate. rec ( 0 ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertTrue ( predicate. isEmpty ( ) )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org. junit. Assert. assertFalse ( predicate. rec )

[*] target: assertTrue(predicate.test(OK_PID_1))
[-] pred:  org
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.moreSevereThan(LogRecord.Priority.DEBUG);  "<AssertPlaceHolder>"; assertTrue(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.DEBUG))); assertTrue(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROR))); }
moreSevereThan(final LogRecord.Priority priority) { return input -> checkNotNull(input).getPriority().compareTo(priority) >= 0; }
[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred: org. junit. Assert. assertEquals ( true, predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertTrue ( predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( true, predicate. moreSevereThan(UnaryOperator.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertTrue ( predicate. moreSevereThan( asBoolean.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( true, predicate. moreSevereThan(UnaryOperator.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( true, predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERRORminus } moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( true, predicate. moreSevereThan( asBoolean.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator. moreSevereThan(final LogRecord.Priority priority) )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( true, predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERRORSSLContext )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERRORSSLContext )

[*] target: assertFalse(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.VERBOSE)))
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, predicate. moreSevereThan(predicate.test(LogRecordUtils.forPriority(LogRecord.Priority.ERROREvaluator )
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.matchMessage(strMatcher);  "<AssertPlaceHolder>"; assertFalse(predicate.test(LogRecordUtils.forMessage(FAIL_STRING))); }
matchMessage(final Predicate<String> messageMatcher) { return input -> messageMatcher.test(checkNotNull(input).getMessage()); }
[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred: org. junit. Assert. assertFalse ( predicate. matchMessage(predicate.test(LogRecordUtils.forMessage( wild_STRING2 )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchMessage(predicate.test(LogRecordUtils.forMessage( wild_STRINGExecutionResult ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchMessage(predicate.test(LogRecordUtils.forMessage( wild_STRING ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( predicate, org.LogRecord> predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( test, predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( predicate, org.LogRecord. predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( predicate, rec )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( b, predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( shell, predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forMessage(OK_STRING)))
[-] pred:  org
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.matchAppName(strMatcher);  "<AssertPlaceHolder>"; assertFalse(predicate.test(LogRecordUtils.forAppName(FAIL_STRING))); }
matchAppName(final Predicate<String> appNameMatcher) { return input -> appNameMatcher.test(checkNotNull(input).getAppName()); }
[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred: org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.andNotNull(input).getAppName()); ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.andNotNull(input).getAppName()); )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.returnreturnreturnreturnreturnreturnreturnreturnreturns true

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.test(LogRecordUtils.forAppName(SecondMatcher))

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.test(LogRecordUtils.forAppName(SecondMatcher) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.ContextContext )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. matchAppName(predicate.orgorganizingizing )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( test, predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org. junit. Assert. assertSame ( b, predicate )

[*] target: assertTrue(predicate.test(LogRecordUtils.forAppName(OK_STRING)))
[-] pred:  org
************************************
************************************
[+] input: Exception { Predicate<LogRecord> predicate = LogRecordPredicates.withBuffer(LogRecord.Buffer.MAIN);  "<AssertPlaceHolder>"; assertFalse(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.EVENTS))); }
withBuffer(final LogRecord.Buffer buffer) { return input -> checkNotNull(input).getBuffer() == buffer; }
[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred: org. junit. Assert. assertFalse ( predicate. equals ( new Predicate ( ) ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. equals ( 2 ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTSExecutionResult ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTSHouse ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTS redundant )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTSEVENTS ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTS ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. withBuffer(LogRecord.Buffer.EVENTSEditing ( ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate. equals ( this. predicate ) )

[*] target: assertTrue(predicate.test(LogRecordUtils.forBuffer(LogRecord.Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertFalse ( predicate.
************************************
************************************
[+] input: Exception { Predicate<String> p = new SearcherBuilder().buildPlain("[abc]");  Assert."<AssertPlaceHolder>"; Assert.assertTrue(p.test("[abc]")); }
buildPlain(String pattern) throws RequestCompilationException { return build(pattern, true); }
[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred: org. junit. Assert. assertNotNull ( p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertFalse ( p. isEmpty ( ) )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertSame ( p, p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertNull ( p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertTrue ( p. isEmpty ( ) )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertSame ( p, org. p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertSame ( test, p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertSame ( p, org. b )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. prepare ( p )

[*] target: assertFalse("Pattern shouldn't be threated as regexp", p.test("a"))
[-] pred:  org. junit. Assert. assertSame ( b, p )
************************************
************************************
[+] input: Exception { model.addRecord(TestData.RECORD1);  assertTrue(model.containsRecord(TestData.RECORD1)); "<AssertPlaceHolder>"; }
containsRecord(LogRecord record) { return records.contains(record); }
[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred: org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord (LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord ( rec ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord ( rec1 ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( model. containsRecord(LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { model.addRecord(TestData.RECORD1); model.addRecord(TestData.RECORD2); model.asObservable().addObserver(observer);  model.clear();  verify(observer).onBookmarkRemoved(); assertFalse(model.containsRecord(TestData.RECORD1)); "<AssertPlaceHolder>"; }
containsRecord(LogRecord record) { return records.contains(record); }
[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred: org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( model. containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord (LogRecord record ) )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( model. containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model.containsRecord(LogRecord record )

[*] target: assertFalse(model.containsRecord(TestData.RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( model. containsRecord(LogRecordrecord) )
************************************
************************************
[+] input: Exception { CharSource in = CharSource.empty(); StringCharSink out = new StringCharSink();  ConfigStorageImpl storage = new ConfigStorageImpl(in, out, MoreExecutors.newDirectExecutorService()); storage.load();  "<AssertPlaceHolder>"; assertNull("Do not commit default entry if there is no entry at all", out.getLastWrittenString()); }
loadConfig(ConfigStorageClient<T> client) { String clientName = client.getName(); JsonElement element; synchronized (serializedConfig) { element = serializedConfig.get(clientName); } try { if (element != null) { return client.fromJson(gson, element); } } catch (JsonSyntaxException | InvalidJsonContentException e) { // We have some weird JSON for this client. Discard it unless somebody updated it in // background. synchronized (serializedConfig) { if (serializedConfig.get(clientName) == element) { serializedConfig.remove(clientName); scheduleCommitLocked(); } } logger.error("Failed to parse config data of " + client.getName(), e); } // failed to load/parse, provide fallback return client.getDefault(); }
[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred: org. junit. Assert. assertThat ( storage. loadConfig ( in ), org. hamcrest. CoreMatchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig ( in ), org. hamcrest. Matchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, out ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, out ), org. hamcrest. Matchers. is ( true ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig( client.getName(); ), org. hamcrest. CoreMatchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, out ), org. hamcrest. CoreMatchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson,, org. hamcrest. CoreMatchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, out ), org. hamcrest. CoreMatchers. is ( in ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, out ), org. hamcrest. Matchers. is ( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertThat ( storage. loadConfig(gson, org. hamcrest. CoreMatchers. is ( out ) )
************************************
************************************
[+] input: Exception { CharSource in = CharSource.wrap("{"TestClient":[]}"); StringCharSink out = new StringCharSink();  ConfigStorageImpl storage = new ConfigStorageImpl(in, out, MoreExecutors.newDirectExecutorService()); storage.load();  "<AssertPlaceHolder>"; assertEquals("{}", out.getLastWrittenString()); }
loadConfig(ConfigStorageClient<T> client) { String clientName = client.getName(); JsonElement element; synchronized (serializedConfig) { element = serializedConfig.get(clientName); } try { if (element != null) { return client.fromJson(gson, element); } } catch (JsonSyntaxException | InvalidJsonContentException e) { // We have some weird JSON for this client. Discard it unless somebody updated it in // background. synchronized (serializedConfig) { if (serializedConfig.get(clientName) == element) { serializedConfig.remove(clientName); scheduleCommitLocked(); } } logger.error("Failed to parse config data of " + client.getName(), e); } // failed to load/parse, provide fallback return client.getDefault(); }
[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred: org. junit. Assert. assertEquals ( out, storage. loadConfig( guison, out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig ( in ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( channel ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig(gson, out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( out ) )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig(gson, element )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( client.getName();-4 )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( guison, element )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( client.getName(); )

[*] target: assertEquals("", storage.loadConfig(new TestClient()).s)
[-] pred:  org. junit. Assert. assertEquals ( out, storage. loadConfig( client.getName(); ) )
************************************
************************************
[+] input: Exception { // default mode is to accept all assertTrue(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertTrue ( default mode. shouldShow(LogRecord record ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( default mode. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( default mode. shouldShow(LogRecord record )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( default mode. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( default mode. shouldShow(LogRecord record )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( default mode. shouldShow(LogRecord record ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( defaultShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { chain.addFilter(hide(MATCH_FIRST)); assertFalse(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertThat ( shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( page. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( page. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( filter. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( filter. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( clazz. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( clazz. shouldShow(LogRecord record), is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( clazz. shouldShow(LogRecord record), is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { chain.addFilter(show(MATCH_FIRST)); assertTrue(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertTrue ( shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( filter. shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( page. shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( con. shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( assertTrue ( shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( assertTrue ( shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( filter. shouldShow(LogRecord record ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( page. shouldShow(LogRecord record )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { chain.addFilter(hide(MATCH_ALL)); chain.addFilter(show(MATCH_ALL)); assertFalse(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. equalTo ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. Matchers. is ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( chain. shouldShow(LogRecord record) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( filter. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertFalse(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( chain. shouldShow(LogRecord record) )
************************************
************************************
[+] input: Exception { chain.addFilter(hide(MATCH_ALL)); chain.removeFilter(hide(MATCH_ALL)); assertTrue(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( chain. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( chain. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. Matchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. equalTo ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( chain. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( chain. shouldShow(LogRecord record )
************************************
************************************
[+] input: Exception { chain.addFilter(hide(MATCH_ALL)); chain.replaceFilter(hide(MATCH_ALL), hide(MATCH_FIRST));  assertFalse(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( chain. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. Matchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( chain. shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. Matchers. is ( false ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. equalTo ( true ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertThat ( chain. shouldShow(LogRecord record), org. hamcrest. CoreMatchers. is ( false ) )
************************************
************************************
[+] input: Exception { chain.addFilter(hide(MATCH_FIRST)); chain.replaceFilter(hide(MATCH_FIRST), hide(MATCH_FIRST).disabled());  assertTrue(chain.shouldShow(RECORD1)); assertTrue(chain.shouldShow(RECORD2)); chain.replaceFilter(hide(MATCH_FIRST).disabled(), hide(MATCH_FIRST)); assertFalse(chain.shouldShow(RECORD1)); "<AssertPlaceHolder>"; }
shouldShow(LogRecord record) { return !include(FilteringMode.HIDE, record) && include(FilteringMode.SHOW, record); }
[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred: org. junit. Assert. assertFalse ( shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( shouldShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShow(LogRecord record )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( mustShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( shouldShow(LogRecord record ) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( shouldShow(LogRecord record )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShow(LogRecordrecord) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShowWithLogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertTrue ( mustShow(LogRecord record) )

[*] target: assertTrue(chain.shouldShow(RECORD2))
[-] pred:  org. junit. Assert. assertFalse ( shouldShow2LogRecord record) )
************************************
************************************
[+] input: Exception { assertNull(highlighter.getColor(RECORD1)); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred: org. junit. Assert. assertNull ( page. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( context. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( filter. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( rules. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( factory. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( client. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( page. getColor(LogRecord record )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( instance. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertNull ( params. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_FIRST_COLOR1); assertEquals(COLOR1, highlighter.getColor(RECORD1)); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred: org. junit. Assert. assertEquals ( 1, highlighter. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1 rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1);. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1);. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( 1, highlighter. getColor(RECORD1);. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( 1, highlighter. getColor(LogRecord record )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( 1, highlighter. getColor(RECORD1 rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( 1, highlighter. getColor(LogRecord record ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1);. getColor ( record ) )
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_ALL_COLOR1); highlighter.addFilter(MATCH_FIRST_COLOR2); assertEquals(COLOR2, highlighter.getColor(RECORD1)); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred: org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "< "< ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "< < ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "<

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "< ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "< "< )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "< 0 )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); "<"" )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, model. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_ALL_COLOR1); highlighter.addFilter(MATCH_FIRST_COLOR2);  highlighter.removeFilter(MATCH_FIRST_COLOR2); assertEquals(COLOR1, highlighter.getColor(RECORD1)); assertEquals(COLOR1, highlighter.getColor(RECORD2));  highlighter.removeFilter(MATCH_ALL_COLOR1); assertNull(highlighter.getColor(RECORD1)); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred: org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1)); )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1)); ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1));. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1));. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1)); )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1)); ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(RECORD1));. getColor ( rec ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org. junit. Assert. assertEquals ( true, highlighter. getColor(RECORD1)); ) )

[*] target: assertNull(highlighter.getColor(RECORD2))
[-] pred:  org
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_FIRST_COLOR1);  assertEquals(COLOR1, highlighter.getColor(RECORD1));  highlighter.replaceFilter(MATCH_FIRST_COLOR1, MATCH_FIRST_COLOR2);  "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred: org. junit. Assert. assertEquals ( java. lang. Integer. valueOf ( 1 ), highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Integer. valueOf ( 1 ), highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1 ), highlighter.getColor(RECORD1, null )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1 ), highlighter.getColor(RECORD1)); )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1 ), highlighter.getColor ( rec ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1 ), highlighter.getColor ( 15, record ) )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1,, highlighter. getColor(LogRecord record ), 0 )

[*] target: assertEquals(COLOR2, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( 1, highlighter. getColor(LogRecord record ) )
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_FIRST_COLOR2); highlighter.addFilter(MATCH_ALL_COLOR1);  assertEquals(COLOR1, highlighter.getColor(RECORD1)); assertEquals(COLOR1, highlighter.getColor(RECORD2));  highlighter.replaceFilter(MATCH_FIRST_COLOR2, MATCH_FIRST_COLOR3);  assertEquals(COLOR1, highlighter.getColor(RECORD1));  // sanity check highlighter.removeFilter(MATCH_ALL_COLOR1); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred: org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1));, null )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1)); ), highlighter.getColor(RECORD1)); )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1));, highlighter.getColor(RECORD1));, 0 )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1));), highlighter.getColor(RECORD1)); )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1)); ), highlighter.getColor (RECORD1)); ) )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1));, highlighter.getColor(RECORD1));, null )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1)); ), highlighter.getColor(RECORD2)); )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( highlighter. getColor(RECORD1));must, null )

[*] target: assertEquals(COLOR3, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertEquals ( null, highlighter. getColor(LogRecord record ) )
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_FIRST_COLOR1); highlighter.replaceFilter(MATCH_FIRST_COLOR1, MATCH_FIRST_COLOR1.disabled()); assertNull(highlighter.getColor(RECORD1));  highlighter.replaceFilter(MATCH_FIRST_COLOR1.disabled(), MATCH_FIRST_COLOR1.enabled()); "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred: org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1)); )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 provides )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1()); ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1)); ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNull ( highlighter. getColor(RECORD1 ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(LogRecord record ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 supporting )
************************************
************************************
[+] input: Exception { highlighter.addFilter(MATCH_FIRST_COLOR2); highlighter.addFilter(MATCH_ALL_COLOR1);  assertEquals(COLOR1, highlighter.getColor(RECORD1));  highlighter.replaceFilter(MATCH_FIRST_COLOR2, MATCH_FIRST_COLOR2.disabled()); highlighter.replaceFilter(MATCH_FIRST_COLOR2.disabled(), MATCH_FIRST_COLOR2.enabled());  "<AssertPlaceHolder>"; }
getColor(LogRecord record) { for (var filter : reversedView) { if (filter.isEnabled() && filter.test(record)) { return filter.getHighlightColor(); } } return null; }
[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred: org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1 )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1());Message )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1()); ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1());Builder )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1());Builder ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org. junit. Assert. assertNotNull ( highlighter. getColor(RECORD1());Builder ( ) )

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  org

[*] target: assertEquals(COLOR1, highlighter.getColor(RECORD1))
[-] pred:  )
************************************
************************************
[+] input: filterWithTwoBufferAcceptsTheseBuffers() { LogBufferFilter filter = new LogBufferFilter(); filter.setBufferEnabled(Buffer.MAIN, true); filter.setBufferEnabled(Buffer.SYSTEM, true); "<AssertPlaceHolder>"; assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEM))); }
setBufferEnabled(Buffer buffer, boolean enabled) { if (enabled) { buffers.add(buffer); } else { buffers.remove(buffer); } }
[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred: org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEMDIFF ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( combination, filter. setBufferEnabled(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEMDIFF ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEM-2 ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEM))); ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(filter, accepts(LogRecordUtils.forBuffer(Buffer.SYSTEM>, ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(Buffer.SYSTEM>, ( ). size ( ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(Buffer.SYSTEM-2 )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( 2, filter. setBufferEnabled(Buffer.SYSTEM>, ( ) )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org. junit. Assert. assertEquals ( getExpected getExpected getExpectedTargets ( ), filter. setBufferEnabled(filter, )

[*] target: assertThat(filter, accepts(LogRecordUtils.forBuffer(Buffer.MAIN)))
[-] pred:  org
************************************
************************************
[+] input: Exception { ColumnPrefs prefs = factory.getDefault(); JsonElement jsonElement = factory.toJson(gson, prefs); ColumnPrefs deserializedPrefs = factory.fromJson(gson, jsonElement);  assertThat(prefs, TogglesModelTestUtils.visibleColumns( equalTo(TogglesModelTestUtils.getVisibleColumns(deserializedPrefs)))); "<AssertPlaceHolder>"; }
getColumnOrder() { return columnOrder; }
[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred: org. junit. Assert. assertEquals ( jsonElement, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( getExpected, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( real, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( dn, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( Complex, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( added, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( 42, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org. junit. Assert. assertEquals ( jsonElement, deserializedPrefs. getColumnOrder() ( ) )

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  org

[*] target: assertThat(prefs.getColumnOrder(), matchesOrder(ColumnOrder.canonical()))
[-] pred:  )
************************************
************************************
[+] input: indexColumnCanBeHidden() { ColumnPrefs prefs = factory.getDefault();  prefs.setColumnVisibility(Column.INDEX, false);  assertFalse(prefs.isColumnAvailable(Column.INDEX)); "<AssertPlaceHolder>"; }
isColumnVisible(Column column) { return visibleColumns.contains(column); }
[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred: org. junit. Assert. assertTrue ( prefs. isColumnVisible(ColumnColumn) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertFalse ( prefs. isColumnVisible(ColumnColumn) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column column) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column1Column) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(ColumnColumn ) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible (Column) ) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column0Column ) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column ) )

[*] target: assertFalse(prefs.isColumnVisible(Column.INDEX))
[-] pred:  org. junit. Assert. assertTrue ( prefs. isColumnVisible(Column1Column ) )
************************************
************************************
[+] input: createdOrderIsConsistentWithInitialArray() { UserColumnOrder order = makeOrder(Column.INDEX, Column.TAG, Column.PID);  assertTrue(order.compare(Column.INDEX, Column.INDEX) == 0); assertTrue(order.compare(Column.TAG, Column.TAG) == 0); assertTrue(order.compare(Column.PID, Column.PID) == 0);  assertTrue(order.compare(Column.INDEX, Column.TAG) < 0); assertTrue(order.compare(Column.TAG, Column.INDEX) > 0);  assertTrue(order.compare(Column.INDEX, Column.PID) < 0); assertTrue(order.compare(Column.PID, Column.INDEX) > 0);  assertTrue(order.compare(Column.TAG, Column.PID) < 0); "<AssertPlaceHolder>"; }
compare(Column o1, Column o2) { return Integer.compare(customizableOrder.indexOf(o1), customizableOrder.indexOf(o2)); }
[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred: org. junit. Assert. assertEquals ( 0, order. compare ( order ) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX)2 )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column.INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column_INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.TAG) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compareOrder(Column.INDEX, Column.INDEX) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare ( orders ) )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order )

[*] target: assertTrue(order.compare(Column.PID, Column.TAG) > 0)
[-] pred:  org. junit )
************************************
************************************
[+] input: setColumnBeforeMovesColumn() { UserColumnOrder order = makeOrder(Column.INDEX, Column.TAG, Column.PID);  order.setColumnBefore(Column.PID, Column.TAG);  assertTrue(order.compare(Column.INDEX, Column.INDEX) == 0); assertTrue(order.compare(Column.TAG, Column.TAG) == 0); assertTrue(order.compare(Column.PID, Column.PID) == 0);  // INDEX PID TAG now assertTrue(order.compare(Column.INDEX, Column.TAG) < 0); assertTrue(order.compare(Column.TAG, Column.INDEX) > 0);  assertTrue(order.compare(Column.INDEX, Column.PID) < 0); assertTrue(order.compare(Column.PID, Column.INDEX) > 0);  assertTrue(order.compare(Column.PID, Column.TAG) < 0); "<AssertPlaceHolder>"; }
compare(Column o1, Column o2) { return Integer.compare(customizableOrder.indexOf(o1), customizableOrder.indexOf(o2)); }
[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred: org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX)2 )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX)1 )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare ( order ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column.INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column_INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, order. compare(Column.INDEX, Column.INDEX) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare ( orders ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org
************************************
************************************
[+] input: setColumnBeforeNullMovesColumnToTheEnd() { UserColumnOrder order = makeOrder(Column.INDEX, Column.TAG, Column.PID);  order.setColumnBefore(Column.TAG, null);  assertTrue(order.compare(Column.INDEX, Column.INDEX) == 0); assertTrue(order.compare(Column.TAG, Column.TAG) == 0); assertTrue(order.compare(Column.PID, Column.PID) == 0);  // INDEX PID TAG now assertTrue(order.compare(Column.INDEX, Column.TAG) < 0); assertTrue(order.compare(Column.TAG, Column.INDEX) > 0);  assertTrue(order.compare(Column.INDEX, Column.PID) < 0); assertTrue(order.compare(Column.PID, Column.INDEX) > 0);  assertTrue(order.compare(Column.PID, Column.TAG) < 0); "<AssertPlaceHolder>"; }
compare(Column o1, Column o2) { return Integer.compare(customizableOrder.indexOf(o1), customizableOrder.indexOf(o2)); }
[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred: org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX)2 )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare(Column.INDEX, Column.INDEX)1 )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare ( order ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column_INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order. compare (Column_INDEX, Column.INDEX) ) )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, order )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, order )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org. junit. Assert. assertNull ( order )

[*] target: assertTrue(order.compare(Column.TAG, Column.PID) > 0)
[-] pred:  org
************************************
************************************
[+] input: testPerformAccessibilityAction_actionNudgeShortcut() { mFocusArea1.post(() -> { // Nudge to the nudgeShortcut view. mView3.requestFocus(); assertThat(mView3.isFocused()).isTrue(); Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_RIGHT); mFocusArea3.performAccessibilityAction(ACTION_NUDGE_SHORTCUT, arguments); assertThat(mNudgeShortcut3.isFocused()).isTrue();  // nudgeShortcutDirection doesn't match. The focus should stay the same. mView3.requestFocus(); assertThat(mView3.isFocused()).isTrue(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea3.performAccessibilityAction(ACTION_NUDGE_SHORTCUT, arguments); assertThat(mView3.isFocused()).isTrue();  // No nudgeShortcut view in the current FocusArea. The focus should stay the same. mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue(); arguments.putInt(NUDGE_DIRECTION, FOCUS_RIGHT); mFocusArea1.performAccessibilityAction(ACTION_NUDGE_SHORTCUT, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( arguments, mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments, mFocusArea1.AccessibilityAction(ACTION_NUDGE_DIRECTION,

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( parameters, mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments, arguments. performAccessibilityAction ( 3, arguments ) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments);. performAccessibilityAction(ACTION_NUDGE_DIRECTION,

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments);. performAccessibilityAction ( 3, arguments ) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( arguments, mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments)

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( arguments, mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments) {

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_NUDGE_DIRECTION, arguments);

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testPerformAccessibilityAction_actionFocus() { mFocusArea1.post(() -> { mFocusArea1.performAccessibilityAction(ACTION_FOCUS, null); assertThat(mView1.isFocused()).isTrue();  // It should focus on the default or the first view in the FocusArea. mFocusArea2.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, mFocusArea performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, mFocusArea_AccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, mFocusArea performAccessibilityAction(ACTION_FOCUS,, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, arguments }, mAccessibilityAction(int action ( 0 ) )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, mFocusArea_AccessibilityAction(ACTION_FOCUS,_ arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(int action ( 0 ) )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, arguments) )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( true, mFocusArea1.performAccessibilityAction(ACTION_FOCUS,, some )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testPerformAccessibilityAction_actionFocus_enabledFocusCache() { mFocusArea1.post(() -> { RotaryCache cache = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache);  mButton1.requestFocus(); assertThat(mButton1.isFocused()).isTrue(); mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue();  // With cache, it should focus on the lastly focused view in the FocusArea. mFocusArea1.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( With cache, gragragragragragragragragragragragragragragra

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragragragragragragragragragragragragragra

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragragragra. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragragra. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragragragragra. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragra. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragra. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, gragragragragragragragragragragragragra

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( With cache, hyhyAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testPerformAccessibilityAction_actionFocus_disabledFocusCache() { mFocusArea1.post(() -> { RotaryCache cache = new RotaryCache(CACHE_TYPE_DISABLED, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache);  mButton1.requestFocus(); assertThat(mButton1.isFocused()).isTrue(); mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue();  // Without cache, it should focus on the default or the first view in the FocusArea. mFocusArea1.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( Without cache, Utils. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, IDENT_8. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, 2.2. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, 2.2. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, IDENT_0. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, IDENT_8. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, Utils. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, . performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, FocusArea. mAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( Without cache, ududData. performAccessibilityAction(ACTION_FOCUS, )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionFocus_lastFocusedViewRemoved() { mFocusArea1.post(() -> { // Focus on mDefaultFocus2 in mFocusArea2, then mView1 in mFocusArea21. mDefaultFocus2.requestFocus(); assertThat(mDefaultFocus2.isFocused()).isTrue(); mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  // Remove mDefaultFocus2, then Perform ACTION_FOCUS on mFocusArea2. mFocusArea2.removeView(mDefaultFocus2); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, null);  // mView2 in mFocusArea2 should get focused. "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusArea2 )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusArea2 )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusArea2. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusData2 )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusFocus2 )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,, in mFocusArea2. performAccessibilityAction(ACTION_FOCUS,

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS, ( arguments ) )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFocusArea2.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS, null ) )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionNudgeToAnotherFocusArea_enabledCache() { mFocusArea1.post(() -> { RotaryCache cache1 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache1); RotaryCache cache2 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache2);  // Focus on the second view in mFocusArea1, then nudge to mFocusArea2. mButton1.requestFocus(); assertThat(mButton1.isFocused()).isTrue(); Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Nudge back. It should focus on the cached view (mButton1) in the cached // FocusArea (mFocusArea1). arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); assertThat(mButton1.isFocused()).isTrue();  // Nudge back. It should fail and the focus should stay the same because of one-way // nudge history. arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea1.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction_ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction2ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityActionWithACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, argumentsArr )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments }

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments } )

[*] target: assertThat(mButton1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction_ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionNudgeToAnotherFocusArea_mixedCache() { mFocusArea1.post(() -> { // Disabled FocusCache but enabled FocusAreaCache. RotaryCache cache1 = new RotaryCache(CACHE_TYPE_DISABLED, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache1); RotaryCache cache2 = new RotaryCache(CACHE_TYPE_DISABLED, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache2);  // Focus on the second view in mFocusArea1, then nudge to mFocusArea2. mButton1.requestFocus(); assertThat(mButton1.isFocused()).isTrue(); Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Nudge back. Since FocusCache is disabled, it should focus on the default or the first // view (mView1) in the cached FocusArea (mFocusArea1). arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments. performAccessibilityAction ( arguments ) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments);. performAccessibilityAction ( arguments ) )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments);. performAccessibilityAction ( arguments ),

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, argumentsDDL )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments }

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments, 0 )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testPerformAccessibilityAction_actionNudgeToAnotherFocusArea_mixedCache2() { mFocusArea1.post(() -> { // Enabled FocusCache but disabled FocusAreaCache. RotaryCache cache1 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_DISABLED, 0); mFocusArea1.setRotaryCache(cache1); RotaryCache cache2 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_DISABLED, 0); mFocusArea2.setRotaryCache(cache2);  // Focus on the second view in mFocusArea1, then nudge to mFocusArea2. mButton1.requestFocus(); assertThat(mButton1.isFocused()).isTrue(); Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Nudge back. Since FocusAreaCache is disabled, nudge should fail and the focus should // stay the same. arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction_ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityActionWithACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction2ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, argumentsDDL )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments, 0 )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments, false )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments, null )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionNudgeToAnotherFocusArea_specifiedTarget() { mFocusArea1.post(() -> { // Nudge to specified FocusArea. mView4.requestFocus(); assertThat(mView4.isFocused()).isTrue(); Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_LEFT); mFocusArea4.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Direction doesn't match specified FocusArea. The focus should stay the same. mView4.requestFocus(); assertThat(mView4.isFocused()).isTrue(); arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea4.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); assertThat(mView4.isFocused()).isTrue();  // The FocusArea doesn't specify a target FocusArea. The focus should stay the same. mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue(); arguments.putInt(NUDGE_DIRECTION, FOCUS_LEFT); mFocusArea1.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction2ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction_ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityActionWithACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments. performAccessibilityAction (

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction2late_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction_DIRECTION_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea4.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testDefaultFocusOverridesHistory_override() { mFocusArea1.post(() -> { RotaryCache cache = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache); mFocusArea2.setDefaultFocusOverridesHistory(true);  mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue(); mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  // The focused view should be the default focus view rather than the cached view. mFocusArea2.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( view, cached view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( view, cached view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( cached view. performAccessibilityAction(ACTION_FOCUS,, null )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNull ( cached view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( view, cache. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( view, cached view. performAccessibilityAction(ACTION_FOCUS,

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNull ( cache. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( cached view. performAccessibilityAction(ACTION_FOCUS,, true )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( cached view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mDefaultFocus2.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testDefaultFocusOverridesHistory_notOverride() { mFocusArea1.post(() -> { RotaryCache cache = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache); mFocusArea2.setDefaultFocusOverridesHistory(false);  mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue(); mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  // The focused view should be the cached view rather than the default focus view. mFocusArea2.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertSame ( view, cache. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNull ( cache. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( cached view, cache. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( cached view should performAccessibilityAction(ACTION_FOCUS, null ) )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNull ( cache. performAccessibilityAction(ACTION_FOCUS, ( null ) )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( cached view, view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNull ( cache. performAccessibilityAction(ACTION_FOCUS, null )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( view. performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( view, cached view )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testClearFocusAreaHistoryWhenRotating_clear() { mFocusArea1.post(() -> { RotaryCache cache1 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache1); mFocusArea1.setClearFocusAreaHistoryWhenRotating(true); RotaryCache cache2 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache2); mFocusArea2.setClearFocusAreaHistoryWhenRotating(true);  mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  // Nudging down from mFocusArea1 to mFocusArea2. Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue(); // Rotate. mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue(); // Since nudge history is cleared, nudging up should fail and the focus should stay // the same. arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments }

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityActionWithACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction2ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, argumentsDDL )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); ;

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mView2.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testClearFocusAreaHistoryWhenRotating_notClear() { mFocusArea1.post(() -> { RotaryCache cache1 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea1.setRotaryCache(cache1); mFocusArea1.setClearFocusAreaHistoryWhenRotating(false); RotaryCache cache2 = new RotaryCache(CACHE_TYPE_NEVER_EXPIRE, 0, CACHE_TYPE_NEVER_EXPIRE, 0); mFocusArea2.setRotaryCache(cache2); mFocusArea2.setClearFocusAreaHistoryWhenRotating(false);  mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  // Nudging down from mFocusArea1 to mFocusArea2. Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue(); // Rotate. mView2.requestFocus(); assertThat(mView2.isFocused()).isTrue(); // Nudging up should move focus to mFocusArea1 according to nudge history. arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityActionWithACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction2ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments }

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction_ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, argumentsDDL )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); ;

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); )
************************************
************************************
[+] input: testBug170423337() { mFocusArea1.post(() -> { // Focus on app bar (assume mFocusArea1 is app bar). mView1.requestFocus();  // Nudge down to browse list (assume mFocusArea2 is browse list). Bundle arguments = new Bundle(); arguments.putInt(NUDGE_DIRECTION, FOCUS_DOWN); mFocusArea2.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Nudge down to playback control bar (assume mFocusArea3 is playback control bar). mFocusArea3.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mView3.isFocused()).isTrue();  // Nudge down to navigation bar (navigation bar is in system window without FocusAreas). mFpv.performAccessibilityAction(ACTION_FOCUS, null);  // Nudge up to playback control bar. arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea3.performAccessibilityAction(ACTION_FOCUS, arguments); assertThat(mView3.isFocused()).isTrue();  // Nudge up to browse list. arguments.putInt(NUDGE_DIRECTION, FOCUS_UP); mFocusArea3.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); assertThat(mDefaultFocus2.isFocused()).isTrue();  // Nudge up, and it should focus on app bar. mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_FOCUS: // Repurpose ACTION_FOCUS to focus on its descendant. We can do this because // FocusArea is not focusable and it didn't consume ACTION_FOCUS previously. boolean success = focusOnDescendant(); if (success && mPreviousFocusArea != null) { int direction = getNudgeDirection(arguments); if (direction != INVALID_DIRECTION) { saveFocusAreaHistory(direction, mPreviousFocusArea, this, SystemClock.uptimeMillis()); } } return success; case ACTION_NUDGE_SHORTCUT: return nudgeToShortcutView(arguments); case ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA: return nudgeToAnotherFocusArea(arguments); default: return super.performAccessibilityAction(action, arguments); } }
[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertEquals ( proto, arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( mFocusArea2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( expected, arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( proto, arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments. value )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( expected, arguments. performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA, arguments )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( arguments, mFocusFocus_2.performAccessibilityAction(ACTION_NUDGE_TO_ANOTHER_FOCUS_AREA )

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  org

[*] target: assertThat(mView1.isFocused()).isTrue()
[-] pred:  )
************************************
************************************
[+] input: testRestoreDefaultFocus_focusOnDefaultFocus() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  mFpv.restoreDefaultFocus(); "<AssertPlaceHolder>"; }); }
restoreDefaultFocus() { if (!mShouldRestoreFocus) { return super.restoreDefaultFocus(); } // Find a better target to focus instead of focusing this FocusParkingView when the // framework wants to focus it. return restoreFocusInRoot(/* checkForTouchMode= */ true); }
[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertThat ( mFpv.restoreDefaultFocus();. restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.restoreDefaultFocus();, org. hamcrest. CoreMatchers. is ( mFpv.restoreDefaultFocus(); ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.restoreDefaultFocus();. restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( media ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( 0L ), org. hamcrest. CoreMatchers. is ( 3 ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( media ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.restoreDefaultFocus();. restoreDefaultFocus(). restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.restoreDefaultFocus();. restoreDefaultFocus(). restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( media ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( 0L ), org. hamcrest. CoreMatchers. is ( 3L ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testOnWindowFocusChanged_loseFocus() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  mFpv.onWindowFocusChanged(false); "<AssertPlaceHolder>"; }); }
onWindowFocusChanged(boolean hasWindowFocus) { if (!hasWindowFocus) { // We need to clear the focus highlight(by parking the focus on the FocusParkingView) // once the current window goes to background. This can't be done by RotaryService // because RotaryService sees the window as removed, thus can't perform any action // (such as focus, clear focus) on the nodes in the window. So FocusParkingView has to // grab the focus proactively. super.requestFocus(FOCUS_DOWN, null);  // OnGlobalFocusChangeListener won't be triggered when the window lost focus, so reset // the focused view here. mFocusedView = null; mScrollableContainer = null; } else if (isFocused()) { // When FocusParkingView is focused and the window just gets focused, transfer the view // focus to a non-FocusParkingView in the window. restoreFocusInRoot(/* checkForTouchMode= */ true); } super.onWindowFocusChanged(hasWindowFocus); }
[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged_loseoseChecker. onWindowFocusChanged(hasWindowFocus) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged_loseose )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged(hasWindowFocusChecker. onWindowFocusChanged(hasWindowFocus) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged_loseoseChecker. onWindowFocusChanged(hasWindowFocus)

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged_loseFocus )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged_loseoseose )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged(hasWindowFocus )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.onWindowFocusChanged(hasWindowFocus(); )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  )
************************************
************************************
[+] input: testOnWindowFocusChanged_focusOnDefaultFocus() { mFpv.post(() -> { mFpv.performAccessibilityAction(ACTION_FOCUS, null); assertThat(mFpv.isFocused()).isTrue();  mFpv.onWindowFocusChanged(true); "<AssertPlaceHolder>"; }); }
onWindowFocusChanged(boolean hasWindowFocus) { if (!hasWindowFocus) { // We need to clear the focus highlight(by parking the focus on the FocusParkingView) // once the current window goes to background. This can't be done by RotaryService // because RotaryService sees the window as removed, thus can't perform any action // (such as focus, clear focus) on the nodes in the window. So FocusParkingView has to // grab the focus proactively. super.requestFocus(FOCUS_DOWN, null);  // OnGlobalFocusChangeListener won't be triggered when the window lost focus, so reset // the focused view here. mFocusedView = null; mScrollableContainer = null; } else if (isFocused()) { // When FocusParkingView is focused and the window just gets focused, transfer the view // focus to a non-FocusParkingView in the window. restoreFocusInRoot(/* checkForTouchMode= */ true); } super.onWindowFocusChanged(hasWindowFocus); }
[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertTrue ( mFpv.performAccessibilityAction(ACTION_FOCUS,. onWindowFocusChanged(boolean hasWindowFocus) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.onWindowFocusChanged(ACTION_FOCUS,. onWindowFocusChanged ( true ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.performAccessibilityAction(ACTION_FOCUS,. onWindowFocusChanged(hasWindowFocus) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv. onWindowFocusChanged(ACTION_FOCUS,. onWindowFocusChanged ( true ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.onWindowFocusChanged_focus_FOCUS,. onWindowFocusChanged(hasWindowFocus) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv. onWindowFocusChanged(ACTION_FOCUS, null ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.onWindowFocusChanged_focus )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv. onWindowFocusChanged(ACTION_FOCUS, null )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv. onWindowFocusChanged(ACTION_FOCUS, null ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.performAccessibilityAction(ACTION_FOCUS,. onWindowFocusChanged(boolean hasWindowFocus ) )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionRestoreDefaultFocus() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_RESTORE_DEFAULT_FOCUS: return restoreFocusInRoot(/* checkForTouchMode= */ false); case ACTION_HIDE_IME: InputMethodManager inputMethodManager = getContext().getSystemService(InputMethodManager.class); return inputMethodManager.hideSoftInputFromWindow(getWindowToken(), /* flags= */ 0); case ACTION_FOCUS: // Don't leave this to View to handle as it will exit touch mode. if (!hasFocus()) { return super.requestFocus(FOCUS_DOWN, null); } return false; } return super.performAccessibilityAction(action, arguments); }
[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, null ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,Null ) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, null )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,Null )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,Null) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,NullPointerException )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,, arguments passed )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS,, arguments) )

[*] target: assertThat(mFocusedByDefault.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, io io. performAccessibilityAction(ACTION_RESTORE_DEFAULT_FOCUS, null )
************************************
************************************
[+] input: testPerformAccessibilityAction_actionFocus() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue();  mFpv.performAccessibilityAction(ACTION_FOCUS, null); "<AssertPlaceHolder>"; }); }
performAccessibilityAction(int action, Bundle arguments) { switch (action) { case ACTION_RESTORE_DEFAULT_FOCUS: return restoreFocusInRoot(/* checkForTouchMode= */ false); case ACTION_HIDE_IME: InputMethodManager inputMethodManager = getContext().getSystemService(InputMethodManager.class); return inputMethodManager.hideSoftInputFromWindow(getWindowToken(), /* flags= */ 0); case ACTION_FOCUS: // Don't leave this to View to handle as it will exit touch mode. if (!hasFocus()) { return super.requestFocus(FOCUS_DOWN, null); } return false; } return super.performAccessibilityAction(action, arguments); }
[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertTrue ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS,Null ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS,Null ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS, ( null ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS,Null )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS, null ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_xxxxxxxx

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS, )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS, and arguments )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( mFpv.performAccessibilityAction(ACTION_FOCUS,. performAccessibilityAction(ACTION_FOCUS,NullPointer )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testRestoreFocusInRoot_recyclerViewItemRemoved() { mList.post(() -> mList.getViewTreeObserver().addOnGlobalLayoutListener( new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mList.getViewTreeObserver().removeOnGlobalLayoutListener(this); View firstItem = mList.getLayoutManager().findViewByPosition(0); firstItem.requestFocus(); "<AssertPlaceHolder>";  ViewGroup parent = (ViewGroup) firstItem.getParent(); parent.removeView(firstItem); assertThat(mFocusedByDefault.isFocused()).isTrue(); } }) ); }
onGlobalLayout() { // At this point the layout is complete and the dimensions of // recyclerView and any child views are known. recyclerView.sendAccessibilityEvent(TYPE_VIEW_FOCUSED); getViewTreeObserver().removeOnGlobalLayoutListener(this); }
[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertNull ( firstItem )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, testRestore )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, testRestoreRules )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, testRestoreItem )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, testRestorePage )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, testRestoreArg )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( firstItem, testRestoreFocusIn )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( firstItem, testRestore )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertNotNull ( firstItem )

[*] target: assertThat(firstItem.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testRestoreFocusInRoot_recyclerViewItemScrolledOffScreen() { mList.post(() -> mList.getViewTreeObserver().addOnGlobalLayoutListener( new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mList.getViewTreeObserver().removeOnGlobalLayoutListener(this); View firstItem = mList.getLayoutManager().findViewByPosition(0); firstItem.requestFocus(); assertThat(firstItem.isFocused()).isTrue();  mList.scrollToPosition(NUM_ITEMS - 1); mList.getViewTreeObserver().addOnGlobalLayoutListener( new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mList.getViewTreeObserver() .removeOnGlobalLayoutListener(this); "<AssertPlaceHolder>"; } }); } })); }
onGlobalLayout() { // At this point the layout is complete and the dimensions of // recyclerView and any child views are known. recyclerView.sendAccessibilityEvent(TYPE_VIEW_FOCUSED); getViewTreeObserver().removeOnGlobalLayoutListener(this); }
[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertNotNull ( firstItem )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestore ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestoreMapping ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestoreContainer ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestorePolicy ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestorePage ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestoreFuture ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestoreProvider ( ) )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList. getRestore )

[*] target: assertThat(mList.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( ( firstItem!= null ) )
************************************
************************************
[+] input: testRequestFocus_focusesFpvWhenShouldRestoreFocusIsFalse() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue(); mFpv.setShouldRestoreFocus(false);  mFpv.requestFocus(); "<AssertPlaceHolder>"; }); }
setShouldRestoreFocus(boolean shouldRestoreFocus) { mShouldRestoreFocus = shouldRestoreFocus; }
[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocus ( false ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocus ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. setShouldRestoreFocus ( false ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocus ( 0 ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocus ( false ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocus, org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocuss, org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv.setShouldRestoreFocusWith, org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org
************************************
************************************
[+] input: testRestoreDefaultFocus_focusesFpvWhenShouldRestoreFocusIsFalse() { mFpv.post(() -> { mView1.requestFocus(); assertThat(mView1.isFocused()).isTrue(); mFpv.setShouldRestoreFocus(false);  mFpv.restoreDefaultFocus(); "<AssertPlaceHolder>"; }); }
restoreDefaultFocus() { if (!mShouldRestoreFocus) { return super.restoreDefaultFocus(); } // Find a better target to focus instead of focusing this FocusParkingView when the // framework wants to focus it. return restoreFocusInRoot(/* checkForTouchMode= */ true); }
[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred: org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocusWith ( 0 ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocusWith ( 0 ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus() ( 0L ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocusWith ( 0 ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertThat(mFpv.isFocused()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( mFpv. restoreDefaultFocus(). restoreDefaultFocus(); ( 0L ), org. hamcrest. CoreMatchers. is ( 0 ) )
************************************
************************************
[+] input: testGetCachedFocusArea_notInTheCache() { int direction = View.FOCUS_LEFT; mRotaryCache.saveFocusArea(direction, mFocusArea, 0);  FocusArea focusArea = mRotaryCache.getCachedFocusArea(View.FOCUS_RIGHT, mValidTime); assertThat(focusArea).isNull(); focusArea = mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime); "<AssertPlaceHolder>"; }
getCachedFocusArea(int direction, long elapsedRealtime) { return mFocusAreaCache.get(direction, elapsedRealtime); }
[*] target: assertThat(focusArea).isNull()
[-] pred: org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea(View.FOCUS_LEFT )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea(View.FOCUS_ 50 )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea ( direction ) )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea(View.FOCUS_LEFT )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea( direction, long elapsedArea )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea( direction, elapsedArea )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea(wardsArea )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, mRotaryCache.getCachedFocusArea(View.FOCUS_LEFT ) )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( from, focusArea )

[*] target: assertThat(focusArea).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusArea, m )
************************************
************************************
[+] input: testClearFocusAreaHistory() { mRotaryCache.saveFocusArea(View.FOCUS_UP, mFocusArea, 0); assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isEqualTo( mFocusArea);  mRotaryCache.clearFocusAreaHistory(); "<AssertPlaceHolder>"; }
getCachedFocusArea(int direction, long elapsedRealtime) { return mFocusAreaCache.get(direction, elapsedRealtime); }
[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred: org. junit. Assert. assertNull ( m getCachedFocusArea(int direction, elapsedRealtime )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org. junit. Assert. assertTrue ( mRotaryCache.get(direction, elapsedRealtime )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org. junit. Assert. assertNull ( m getCachedFocusArea ( i, j ) )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org. junit. Assert. assertNull ( m getCachedFocusArea ( 0 ) )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org. junit. Assert. assertNull ( m getCachedFocusArea(direction, elapsedRealtime )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org. junit. Assert. assertNull ( m getCachedFocusArea ( 1 ) )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  a unit test for junit

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  the junit setup method

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  )

[*] target: assertThat(mRotaryCache.getCachedFocusArea(View.FOCUS_UP, mValidTime)).isNull()
[-] pred:  org
************************************
************************************
[+] input: onComputeInsets_showContentArea_shouldUpdateEntireAreaAsTouchable() { when(mInputMethodService.getWindow()).thenReturn(mDialog); when(mDialog.getWindow()).thenReturn(mWindow); View view = new FrameLayout(mContext); view.setTop(0); view.setBottom(200); when(mWindow.getDecorView()).thenReturn(view);  InputMethodService.Insets outInsets = new Insets(); CarUiImeWideScreenController carUiImeWideScreenController = getController(); carUiImeWideScreenController.onComputeInsets(outInsets);  "<AssertPlaceHolder>"; assertThat(outInsets.contentTopInsets, is(200)); assertThat(outInsets.visibleTopInsets, is(200)); }
onComputeInsets(@NonNull InputMethodService.Insets outInsets) { if (!isWideScreenMode()) { return; } Rect tempRect = new Rect(); int[] tempLocation = new int[2]; outInsets.contentTopInsets = outInsets.visibleTopInsets = mInputMethodService.getWindow().getWindow().getDecorView().getHeight(); if (mImeRendersAllContent) { outInsets.touchableRegion.setEmpty(); outInsets.touchableInsets = InputMethodService.Insets.TOUCHABLE_INSETS_FRAME; } else { mInputFrame.getLocationOnScreen(tempLocation); tempRect.set(/* left= */0, /* top= */ 0, tempLocation[0] + mInputFrame.getWidth(), tempLocation[1] + mInputFrame.getHeight()); outInsets.touchableRegion.set(tempRect); outInsets.touchableInsets = InputMethodService.Insets.TOUCHABLE_INSETS_REGION; } }
[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred: org. junit. Assert. assertEquals ( carUiImeWideScreenController, carUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( view, carUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertSame ( view, carUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertNotNull ( carUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( carUiImeWideScreenController, driverUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( carUiImeWideScreenController, comUiImeWideScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( carUiImeWideScreenController, view )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( carUiImeWideScreenController, carUiIme?"ScreenController )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. assertEquals ( carUiImeWideScreenController, code )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_FRAME))
[-] pred:  org. junit. Assert. )
************************************
************************************
[+] input: onComputeInsets_hideContentArea_shouldUpdateRegionAsTouchable() { when(mInputMethodService.getWindow()).thenReturn(mDialog); when(mDialog.getWindow()).thenReturn(mWindow); View view = new FrameLayout(mContext); view.setTop(0); view.setBottom(200); when(mWindow.getDecorView()).thenReturn(view);  View imeInputView = LayoutInflater.from(mContext) .inflate(R.layout.test_ime_input_view, null, false); CarUiImeWideScreenController carUiImeWideScreenController = getController(); carUiImeWideScreenController.setExtractEditText(new ExtractEditText(mContext)); carUiImeWideScreenController.createWideScreenImeView(imeInputView);  Bundle bundle = new Bundle(); bundle.putBoolean(REQUEST_RENDER_CONTENT_AREA, false); carUiImeWideScreenController.onAppPrivateCommand(WIDE_SCREEN_ACTION, bundle);  InputMethodService.Insets outInsets = new Insets(); carUiImeWideScreenController.onComputeInsets(outInsets);  "<AssertPlaceHolder>"; assertThat(outInsets.contentTopInsets, is(200)); assertThat(outInsets.visibleTopInsets, is(200)); }
onComputeInsets(@NonNull InputMethodService.Insets outInsets) { if (!isWideScreenMode()) { return; } Rect tempRect = new Rect(); int[] tempLocation = new int[2]; outInsets.contentTopInsets = outInsets.visibleTopInsets = mInputMethodService.getWindow().getWindow().getDecorView().getHeight(); if (mImeRendersAllContent) { outInsets.touchableRegion.setEmpty(); outInsets.touchableInsets = InputMethodService.Insets.TOUCHABLE_INSETS_FRAME; } else { mInputFrame.getLocationOnScreen(tempLocation); tempRect.set(/* left= */0, /* top= */ 0, tempLocation[0] + mInputFrame.getWidth(), tempLocation[1] + mInputFrame.getHeight()); outInsets.touchableRegion.set(tempRect); outInsets.touchableInsets = InputMethodService.Insets.TOUCHABLE_INSETS_REGION; } }
[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred: org. junit. Assert. assertEquals ( imeInputView, outInsets )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outFlex )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outRs )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outAffiliation )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outJust )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outNumber )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outInsets. onCompletedLine )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertEquals ( imeInputView, outward. onCompletedCompleted )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org. junit. Assert. assertNotNull ( outInsets )

[*] target: assertThat(outInsets.touchableInsets, is(InputMethodService.Insets.TOUCHABLE_INSETS_REGION))
[-] pred:  org
************************************
************************************
[+] input: testGridLayout() { TypedArray typedArray = spy(mActivity.getBaseContext().obtainStyledAttributes( null, R.styleable.CarUiRecyclerView));  doReturn(typedArray).when(mTestableContext).obtainStyledAttributes( any(), eq(R.styleable.CarUiRecyclerView), anyInt(), anyInt()); when(typedArray.getInt(eq(R.styleable.CarUiRecyclerView_layoutStyle), anyInt())) .thenReturn(CarUiRecyclerView.CarUiRecyclerViewLayout.GRID); when(typedArray.getInt(eq(R.styleable.CarUiRecyclerView_numOfColumns), anyInt())) .thenReturn(3);  // Ensure the CarUiRecyclerViewLayout constant matches the styleable attribute enum value assertEquals(CarUiRecyclerView.CarUiRecyclerViewLayout.GRID, 1);  CarUiRecyclerView carUiRecyclerView = new CarUiRecyclerView(mTestableContext); ViewGroup container = mActivity.findViewById(R.id.test_container); TestAdapter adapter = new TestAdapter(4); container.post(() -> { container.addView(carUiRecyclerView); carUiRecyclerView.setAdapter(adapter); });  "<AssertPlaceHolder>";  // Check that all items in the first row are top-aligned. onView(withText(adapter.getItemText(0))).check( isTopAlignedWith(withText(adapter.getItemText(1)))); onView(withText(adapter.getItemText(1))).check( isTopAlignedWith(withText(adapter.getItemText(2))));  // Check that all items in the first row are bottom-aligned. onView(withText(adapter.getItemText(0))).check( isBottomAlignedWith(withText(adapter.getItemText(1)))); onView(withText(adapter.getItemText(1))).check( isBottomAlignedWith(withText(adapter.getItemText(2))));  // Check that items in second row are rendered correctly below the first row. onView(withText(adapter.getItemText(0))).check( isCompletelyAbove(withText(adapter.getItemText(3)))); onView(withText(adapter.getItemText(0))).check( isLeftAlignedWith(withText(adapter.getItemText(3)))); onView(withText(adapter.getItemText(0))).check( isRightAlignedWith(withText(adapter.getItemText(3)))); }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred: org. junit. Assert. assertEquals ( carUiExpectation, carUiOffsets )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. isCompleted ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiOffsets. isEmpty ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. isOnly ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. isEmpty ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertEquals ( carUiExpectation, carUiIt )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertEquals ( carUiOffsets, carUiOffsets )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org. junit. Assert. assertEquals ( carUiExpectation, carUiEntry )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  org

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager)
[-] pred:  )
************************************
************************************
[+] input: testLinearLayout() { TypedArray typedArray = spy(mActivity.getBaseContext().obtainStyledAttributes( null, R.styleable.CarUiRecyclerView));  doReturn(typedArray).when(mTestableContext).obtainStyledAttributes( any(), eq(R.styleable.CarUiRecyclerView), anyInt(), anyInt()); when(typedArray.getInt(eq(R.styleable.CarUiRecyclerView_layoutStyle), anyInt())) .thenReturn(CarUiRecyclerView.CarUiRecyclerViewLayout.LINEAR);  // Ensure the CarUiRecyclerViewLayout constant matches the styleable attribute enum value assertEquals(CarUiRecyclerView.CarUiRecyclerViewLayout.LINEAR, 0);  CarUiRecyclerView carUiRecyclerView = new CarUiRecyclerView(mTestableContext); ViewGroup container = mActivity.findViewById(R.id.test_container); TestAdapter adapter = new TestAdapter(4); container.post(() -> { container.addView(carUiRecyclerView); carUiRecyclerView.setAdapter(adapter); });  "<AssertPlaceHolder>";  // Check that item views are laid out linearly. onView(withText(adapter.getItemText(0))).check( isCompletelyAbove(withText(adapter.getItemText(1)))); onView(withText(adapter.getItemText(1))).check( isCompletelyAbove(withText(adapter.getItemText(2)))); onView(withText(adapter.getItemText(2))).check( isCompletelyAbove(withText(adapter.getItemText(3)))); }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred: org. junit. Assert. assertTrue ( carUiOffsets. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiOffsets. setAdapter(@Nullable Adapter adapter ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiStartup. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiCall. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiSource. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiRefs. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiIt. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExecutor. setAdapter(@Nullable Adapter adapter) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiEntry. setAdapter(@Nullable Adapter adapter) )
************************************
************************************
[+] input: testSetLayoutManager_shouldUpdateItemDecorations() { TypedArray typedArray = spy(mActivity.getBaseContext().obtainStyledAttributes( null, R.styleable.CarUiRecyclerView));  doReturn(typedArray).when(mTestableContext).obtainStyledAttributes( any(), eq(R.styleable.CarUiRecyclerView), anyInt(), anyInt()); when(typedArray.getBoolean(eq(R.styleable.CarUiRecyclerView_enableDivider), anyBoolean())) .thenReturn(true); when(typedArray.getInt(eq(R.styleable.CarUiRecyclerView_layoutStyle), anyInt())) .thenReturn(CarUiRecyclerView.CarUiRecyclerViewLayout.GRID); when(typedArray.getInt(eq(R.styleable.CarUiRecyclerView_numOfColumns), anyInt())) .thenReturn(3);  CarUiRecyclerView carUiRecyclerView = new CarUiRecyclerView(mTestableContext); ViewGroup container = mActivity.findViewById(R.id.test_container); TestAdapter adapter = new TestAdapter(4); container.post(() -> { container.addView(carUiRecyclerView); carUiRecyclerView.setAdapter(adapter); });  assertTrue(carUiRecyclerView.getLayoutManager() instanceof GridLayoutManager); assertEquals(carUiRecyclerView.getItemDecorationCount(), 3); assertTrue(carUiRecyclerView.getItemDecorationAt(0) instanceof GridDividerItemDecoration);  carUiRecyclerView.setLayoutManager(new LinearLayoutManager(mTestableContext));  "<AssertPlaceHolder>"; assertEquals(carUiRecyclerView.getItemDecorationCount(), 3); assertFalse(carUiRecyclerView.getItemDecorationAt(0) instanceof GridDividerItemDecoration); }
setLayoutManager(@Nullable LayoutManager layoutManager) { // Cannot setup item decorations before stylized attributes have been read. if (mIsInitialized) { addItemDecorations(layoutManager); } super.setLayoutManager(layoutManager); }
[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred: org. junit. Assert. assertTrue ( carUiOffsets. isEmpty ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. getCurrent getCurrentNumber ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. getCurrentScreenCount ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. getCurrentOffsets ( typedArray ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiStats. isEmpty ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. isPresent ( typedArray ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. isSuccess ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. getCurrentGA ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiRefs. isEmpty ( ) )

[*] target: assertTrue(carUiRecyclerView.getLayoutManager() instanceof LinearLayoutManager)
[-] pred:  org. junit. Assert. assertTrue ( carUiExpectation. getCurrentSessionsCount ( ) )
************************************
************************************
[+] input: testPageUpAndDownMoveSameDistance() { mActivity.runOnUiThread( () -> mActivity.setContentView(R.layout.car_ui_recycler_view_test_activity));  onView(withId(R.id.list)).check(matches(isDisplayed()));  CarUiRecyclerView carUiRecyclerView = mActivity.requireViewById(R.id.list);  // Can't use OrientationHelper here, because it returns 0 when calling getTotalSpace methods // until LayoutManager's onLayoutComplete is called. In this case waiting until the first // item of the list is displayed guarantees that OrientationHelper is initialized properly. int totalSpace = carUiRecyclerView.getHeight() - carUiRecyclerView.getPaddingTop() - carUiRecyclerView.getPaddingBottom(); PerfectFitTestAdapter adapter = new PerfectFitTestAdapter(5, totalSpace); mActivity.runOnUiThread(() -> carUiRecyclerView.setAdapter(adapter));  IdlingRegistry.getInstance().register(new ScrollIdlingResource(carUiRecyclerView)); onView(withText(adapter.getItemText(0))).check(matches(isDisplayed()));  LinearLayoutManager layoutManager = (LinearLayoutManager) carUiRecyclerView.getLayoutManager();  OrientationHelper orientationHelper = OrientationHelper.createVerticalHelper(layoutManager); "<AssertPlaceHolder>";  // Move down one page so there will be sufficient pages for up and downs. onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click());  int topPosition = layoutManager.findFirstVisibleItemPosition();  for (int i = 0; i < 3; i++) { onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click()); onView(withId(R.id.car_ui_scrollbar_page_up)).perform(click()); }  assertEquals(layoutManager.findFirstVisibleItemPosition(), topPosition); }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred: org. junit. Assert. assertTrue ( orientationHelper. setAdapter(@Nullable Adapter mechanism ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( orientationHelper. setAdapter(@Nullable AdapterServiceImpl ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( orientationHelper. setAdapter(@Nullable Adapter adapter ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( orientationHelper. setAdapter(@Nullable Adapter giving giving giving giving

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( orgHelper. setAdapter(@Nullable Adapter mechanism) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( orientationHelper. setAdapter(@Nullable Adapter_8 ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( ( ( orientationHelper. setAdapter(@Nullable Adapter mechanism ) ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org. junit. Assert. assertTrue ( ( ( orientationHelper. setAdapter(@Nullable Adapter mechanism ) )

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  org

[*] target: assertEquals(totalSpace, orientationHelper.getTotalSpace())
[-] pred:  )
************************************
************************************
[+] input: testPageDownScrollsOverLongItem() { mActivity.runOnUiThread( () -> mActivity.setContentView(R.layout.car_ui_recycler_view_test_activity));  onView(withId(R.id.list)).check(matches(isDisplayed()));  int itemCount = 100; // Position the long item in the middle. int longItemPosition = itemCount / 2;  Map<Integer, TestAdapter.ItemHeight> heightOverrides = new HashMap<>(); heightOverrides.put(longItemPosition, TestAdapter.ItemHeight.TALL); TestAdapter adapter = new TestAdapter(itemCount, heightOverrides);  CarUiRecyclerView carUiRecyclerView = mActivity.requireViewById(R.id.list); mActivity.runOnUiThread(() -> { carUiRecyclerView.setAdapter(adapter); });  IdlingRegistry.getInstance().register(new ScrollIdlingResource(carUiRecyclerView)); onView(withText(adapter.getItemText(0))).check(matches(isDisplayed()));  OrientationHelper orientationHelper = OrientationHelper.createVerticalHelper(carUiRecyclerView.getLayoutManager()); int screenHeight = orientationHelper.getTotalSpace(); // Scroll to a position where long item is partially visible. // Scrolling from top, scrollToPosition() aligns the pos-1 item to bottom. onView(withId(R.id.list)).perform(scrollToPosition(longItemPosition - 1)); // Scroll by half the height of the screen so the long item is partially visible. mActivity.runOnUiThread(() -> carUiRecyclerView.scrollBy(0, screenHeight / 2)); // This is needed to make sure scroll is finished before looking for the long item. onView(withText(adapter.getItemText(longItemPosition - 1))).check(matches(isDisplayed()));  // Verify long item is partially shown. View longItem = getLongItem(carUiRecyclerView); "<AssertPlaceHolder>";  onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click());  // Verify long item is snapped to top. assertThat(orientationHelper.getDecoratedStart(longItem), is(equalTo(orientationHelper.getStartAfterPadding()))); assertThat(orientationHelper.getDecoratedEnd(longItem), is(greaterThan(orientationHelper.getEndAfterPadding())));  // Set a limit to avoid test stuck in non-moving state. while (orientationHelper.getDecoratedEnd(longItem) > orientationHelper.getEndAfterPadding()) { onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click()); }  // Verify long item end is aligned to bottom. assertThat(orientationHelper.getDecoratedEnd(longItem), is(equalTo(orientationHelper.getEndAfterPadding())));  onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click()); // Verify that the long item is no longer visible; Should be on the next child assertThat( orientationHelper.getDecoratedStart(longItem), is(lessThan(orientationHelper.getStartAfterPadding()))); }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred: org. junit. Assert. assertTrue ( ( item is partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( longItem instanceof java. lang. Long ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( longItem!= null ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( itemIs partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertNotNull ( longItem )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item should partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item instanceof long ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit, longItem )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  )
************************************
************************************
[+] input: testPageUpScrollsOverLongItem() { mActivity.runOnUiThread( () -> mActivity.setContentView(R.layout.car_ui_recycler_view_test_activity));  onView(withId(R.id.list)).check(matches(isDisplayed()));  int itemCount = 100; // Position the long item in the middle. int longItemPosition = itemCount / 2;  Map<Integer, TestAdapter.ItemHeight> heightOverrides = new HashMap<>(); heightOverrides.put(longItemPosition, TestAdapter.ItemHeight.TALL); TestAdapter adapter = new TestAdapter(itemCount, heightOverrides);  CarUiRecyclerView carUiRecyclerView = mActivity.requireViewById(R.id.list); mActivity.runOnUiThread(() -> { carUiRecyclerView.setAdapter(adapter); });  IdlingRegistry.getInstance().register(new ScrollIdlingResource(carUiRecyclerView)); onView(withText(adapter.getItemText(0))).check(matches(isDisplayed()));  OrientationHelper orientationHelper = OrientationHelper.createVerticalHelper(carUiRecyclerView.getLayoutManager());  // Scroll to a position just below the long item. onView(withId(R.id.list)).perform(scrollToPosition(longItemPosition + 1));  // Verify long item is off-screen. View longItem = getLongItem(carUiRecyclerView);  "<AssertPlaceHolder>";  if (orientationHelper.getStartAfterPadding() - orientationHelper.getDecoratedStart(longItem) < orientationHelper.getTotalSpace()) { onView(withId(R.id.car_ui_scrollbar_page_up)).perform(click()); assertThat(orientationHelper.getDecoratedStart(longItem), is(greaterThanOrEqualTo(orientationHelper.getStartAfterPadding()))); } else { int topBeforeClick = orientationHelper.getDecoratedStart(longItem);  onView(withId(R.id.car_ui_scrollbar_page_up)).perform(click());  // Verify we scrolled 1 screen assertThat(orientationHelper.getStartAfterPadding() - topBeforeClick, is(equalTo(orientationHelper.getTotalSpace()))); } }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred: org. junit. Assert. assertTrue ( ( longItem!= null ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( ( longItem. setAdapter(@artifactartifact ) && ( longItem. isValid ( ) ) ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( longItem. setAdapter(LinkedList < item ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( ( longItem. setAdapter(@retryretryBarBar ) && ( longItem!= null ) ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( ( longItem. setAdapter(@retryretryBarBar ) && ( longItem. isValid ( ) ) ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( ( longItem. setAdapter(@artifactartifact ) && ( longItem!= null ) ) )

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( longItem. setAdapter(2121212121212121212121212121212121212121

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( longItem. setAdapter(21212121212121212121212121212121212121

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( longItem. setAdapter(212121212121212121212121212121212121

[*] target: assertThat( orientationHelper.getDecoratedEnd(longItem), is(lessThanOrEqualTo(orientationHelper.getEndAfterPadding())))
[-] pred:  org
************************************
************************************
[+] input: testPageDownScrollsOverVeryLongItem() { mActivity.runOnUiThread( () -> mActivity.setContentView(R.layout.car_ui_recycler_view_test_activity));  onView(withId(R.id.list)).check(matches(isDisplayed()));  int itemCount = 100; // Position the long item in the middle. int longItemPosition = itemCount / 2;  Map<Integer, TestAdapter.ItemHeight> heightOverrides = new HashMap<>(); heightOverrides.put(longItemPosition, TestAdapter.ItemHeight.EXTRA_TALL); TestAdapter adapter = new TestAdapter(itemCount, heightOverrides);  CarUiRecyclerView carUiRecyclerView = mActivity.requireViewById(R.id.list); mActivity.runOnUiThread(() -> { carUiRecyclerView.setAdapter(adapter); });  IdlingRegistry.getInstance().register(new ScrollIdlingResource(carUiRecyclerView)); onView(withText(adapter.getItemText(0))).check(matches(isDisplayed()));  OrientationHelper orientationHelper = OrientationHelper.createVerticalHelper(carUiRecyclerView.getLayoutManager());  int screenHeight = Resources.getSystem().getDisplayMetrics().heightPixels; // Scroll to a position where long item is partially visible. // Scrolling from top, scrollToPosition() aligns the pos-1 item to bottom. onView(withId(R.id.list)).perform(scrollToPosition(longItemPosition - 1)); // Scroll by half the height of the screen so the long item is partially visible. mActivity.runOnUiThread(() -> carUiRecyclerView.scrollBy(0, screenHeight / 2));  onView(withText(adapter.getItemText(longItemPosition))).check(matches(isDisplayed()));  // Verify long item is partially shown. View longItem = getLongItem(carUiRecyclerView); "<AssertPlaceHolder>";  onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click());  // Verify long item is snapped to top. assertThat(orientationHelper.getDecoratedStart(longItem), is(equalTo(orientationHelper.getStartAfterPadding()))); assertThat(orientationHelper.getDecoratedEnd(longItem), is(greaterThan(orientationHelper.getEndAfterPadding())));  onView(withId(R.id.car_ui_scrollbar_page_down)).perform(click());  // Verify long item does not snap to bottom. assertThat(orientationHelper.getDecoratedEnd(longItem), not(equalTo(orientationHelper.getEndAfterPadding()))); }
setAdapter(@Nullable Adapter adapter) { if (mScrollBar != null) { // Make sure this is called before super so that scrollbar can get a reference to // the adapter using RecyclerView#getAdapter() mScrollBar.adapterChanged(adapter); } super.setAdapter(adapter); }
[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred: org. junit. Assert. assertTrue ( ( item is partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertNotNull ( longItem )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item was partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item is partially displayed. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item should partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( itemIs partially shown. View longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item is partially shown.Linear longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item == longItem ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org. junit. Assert. assertTrue ( ( item instanceof long ) )

[*] target: assertThat( orientationHelper.getDecoratedStart(longItem), is(greaterThan(orientationHelper.getStartAfterPadding())))
[-] pred:  org
************************************
************************************
[+] input: testSetAlphaToRecyclerViewWithoutScrollbar() { doReturn(false).when(mTestableResources).getBoolean(R.bool.car_ui_scrollbar_enable);  CarUiRecyclerView mCarUiRecyclerView = new CarUiRecyclerView(mTestableContext);  assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(1.0f)));  mCarUiRecyclerView.setAlpha(0.5f);  "<AssertPlaceHolder>"; }
setAlpha(float value) { if (mScrollBarEnabled) { mContainer.setAlpha(value); } else { super.setAlpha(value); } }
[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred: org. junit. Assert. assertEquals ( CarUiExecutor..Alpha ( ), mCarUiExecutor. setAlpha(float value) )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertEquals ( CarUiExecutor..Alpha ( ), mCarUiOffsets. setAlpha(float value )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertSame ( mCarUiExecutor, mCarUi23.. setAlpha(float value) )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertSame ( mCarUiExecutor, mCarUiExecutor. setAlpha(float value) )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertEquals ( 2.0, mCarUiExecutor. setAlpha(float value), 0.0 )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertEquals ( 2, mCarUiExecutor. setAlpha(float value) )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertEquals ( CarUiExecutor..Alpha ( ), mCarUiOffsets. setAlpha(float value) )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org. junit. Assert. assertEquals ( 2.0, mCarUiExecutor. setAlpha(float value), 0 )

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  org

[*] target: assertThat(mCarUiRecyclerView.getAlpha(), is(equalTo(0.5f)))
[-] pred:  )
************************************
************************************
[+] input: testSetAlphaToRecyclerViewWithScrollbar() { mActivity.runOnUiThread( () -> mActivity.setContentView( R.layout.car_ui_recycler_view_test_activity));  onView(withId(R.id.list)).check(matches(isDisplayed()));  CarUiRecyclerView carUiRecyclerView = mActivity.requireViewById(R.id.list);  ViewGroup container = (ViewGroup) carUiRecyclerView.getParent().getParent();  assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f))); assertThat(container.getAlpha(), is(equalTo(1.0f)));  carUiRecyclerView.setAlpha(0.5f);  "<AssertPlaceHolder>"; assertThat(container.getAlpha(), is(equalTo(0.5f))); }
setAlpha(float value) { if (mScrollBarEnabled) { mContainer.setAlpha(value); } else { super.setAlpha(value); } }
[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred: org. junit. Assert. assertEquals ( container, carUiOffsets )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( carUiOffsets, container. setAlpha(0.5fOffsets ( ) )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( carUiExpectation, container. setAlpha(0.5fOffsets ( ) )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( container. setAlpha(0.5fOffsets ( ), carUiOffsets )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( carUiOffsets, container. setAlpha(0.5fSUBJECT )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( carUiExecutor, container. setAlpha(0.5fOffsets ( ) )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( container. setAlpha(0.5fOffsets ( ), carUiExecutor )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( carUiExpectation, container. setAlpha(0.5fSUBJECT )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( container. setAlpha(0.5fOffsets ( ), carUiStats )

[*] target: assertThat(carUiRecyclerView.getAlpha(), is(equalTo(1.0f)))
[-] pred:  org. junit. Assert. assertEquals ( container, carUiExecutor )
************************************
************************************
[+] input: setMaxItem_toLowerThanTotalItems() { assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50); RecyclerView.ViewHolder last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49");  // Switch to limited mContentLimitingAdapter.setMaxItems(20);  assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(21); RecyclerView.ViewHolder secondToLast = getItemAtPosition(19); isTestViewHolderWithText(secondToLast, "Item 19");  last = getItemAtPosition(20); assertThat(last).isInstanceOf(ScrollingLimitedViewHolder.class);  // Switch back to unlimited mContentLimitingAdapter.setMaxItems(-1);  "<AssertPlaceHolder>"; last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49"); }
getItemCount() { if (mIsLimiting) { return mRangeFilter.getFilteredCount(); } else { return getUnrestrictedItemCount(); } }
[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred: org. junit. Assert. assertEquals ( last. getItemCount() ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountBefore ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCountContainer ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCount ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount() ( ), secondToLast. getItemCountContainer ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount() ( ), secondToLast. getItemCount F ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount() ( ), secondToLast. getItemCountRestore ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCount F ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last, secondToLast. getItemCount() ( ) )
************************************
************************************
[+] input: setMaxItem_toOne() { assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50); RecyclerView.ViewHolder last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49");  mContentLimitingAdapter.setMaxItems(1);  assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(2); RecyclerView.ViewHolder secondToLast = getItemAtPosition(0); isTestViewHolderWithText(secondToLast, "Item 0");  last = getItemAtPosition(1); assertThat(last).isInstanceOf(ScrollingLimitedViewHolder.class);  // Switch back to unlimited mContentLimitingAdapter.setMaxItems(-1);  "<AssertPlaceHolder>"; last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49"); }
getItemCount() { if (mIsLimiting) { return mRangeFilter.getFilteredCount(); } else { return getUnrestrictedItemCount(); } }
[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred: org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount F ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getId ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount F )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast, last. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast, last )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last, last )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertNotNull ( last )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  )
************************************
************************************
[+] input: setMaxItem_toZero() { assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50); RecyclerView.ViewHolder last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49");  mContentLimitingAdapter.setMaxItems(0);  assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(1); last = getItemAtPosition(0); assertThat(last).isInstanceOf(ScrollingLimitedViewHolder.class);  // Switch back to unlimited mContentLimitingAdapter.setMaxItems(-1);  "<AssertPlaceHolder>"; last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49"); }
getItemCount() { if (mIsLimiting) { return mRangeFilter.getFilteredCount(); } else { return getUnrestrictedItemCount(); } }
[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred: org. junit. Assert. assertEquals ( last. getItemCount() ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountBefore ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountArray ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountFileEntry ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountNumber ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount, 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountVo ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountMs ( ), 0 )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountMean ), 0 )
************************************
************************************
[+] input: setMaxItem_toHigherThanTotalItems() { assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50); RecyclerView.ViewHolder last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49");  mContentLimitingAdapter.setMaxItems(70);  assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50); RecyclerView.ViewHolder secondToLast = getItemAtPosition(48); isTestViewHolderWithText(secondToLast, "Item 48");  last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49");  // Switch back to unlimited mContentLimitingAdapter.setMaxItems(-1);  "<AssertPlaceHolder>"; last = getItemAtPosition(49); isTestViewHolderWithText(last, "Item 49"); }
getItemCount() { if (mIsLimiting) { return mRangeFilter.getFilteredCount(); } else { return getUnrestrictedItemCount(); } }
[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred: org. junit. Assert. assertEquals ( last. getItemCount() ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCountBefore ( ), secondToLast. getItemCount() ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCountContainer ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( last. getItemCount ( ), secondToLast. getItemCount ( ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( secondToLast. getItemCount() ( ), last. getItemCount F ) )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org. junit. Assert. assertEquals ( firstToLast. getItemCount() ( ), secondToLast. getItemCount F )

[*] target: assertThat(mContentLimitingAdapter.getItemCount()).isEqualTo(50)
[-] pred:  org
************************************
************************************
[+] input: Throwable { runWithToolbar((toolbar) -> { toolbar.setTitle("Foo"); toolbar.setSearchHint("Foo2"); toolbar.setShowMenuItemsWhileSearching(true); toolbar.setState(Toolbar.State.SUBPAGE); toolbar.setNavButtonMode(Toolbar.NavButtonMode.CLOSE);  assertThat(toolbar.getTitle().toString()).isEqualTo("Foo"); assertThat(toolbar.getSearchHint().toString()).isEqualTo("Foo2"); assertThat(toolbar.getShowMenuItemsWhileSearching()).isEqualTo(true); assertThat(toolbar.getState()).isEquivalentAccordingToCompareTo(Toolbar.State.SUBPAGE); "<AssertPlaceHolder>"; }); }
getNavButtonMode() { return mController.getNavButtonMode(); }
[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred: org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode() ( ), 0 )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);Test. getNavButtonMode ( ), 0 )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode ( ), 0 )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode ( ), pe )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode ( ), null )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.DemoState.SUBPAGE);. getNavButtonMode() ( ), 0 )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.DemoState.SUBPAGE);. getNavButtonMode ( ), pe )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode() ( ), null )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( toolbar.setNavButtonMode(Toolbar.NavState.SUBPAGE);. getNavButtonMode() ( ), tolerance )

[*] target: assertThat(toolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. )
************************************
************************************
[+] input: testFindFocusedByDefaultView_skipInvisibleView() { mRoot.post(() -> { mFocusArea3.setVisibility(INVISIBLE); assertThat(mFocusArea3.getVisibility()).isEqualTo(INVISIBLE); View focusedByDefault = ViewUtils.findFocusedByDefaultView(mRoot); "<AssertPlaceHolder>"; }); }
findFocusedByDefaultView(@NonNull View view) { return depthFirstSearch(view, /* targetPredicate= */ v -> v.isFocusedByDefault() && canTakeFocus(v), /* skipPredicate= */ v -> !v.isShown()); }
[*] target: assertThat(focusedByDefault).isNull()
[-] pred: org. junit. Assert. assertThat ( focusedByDefault, org. hamcrest. CoreMatchers. is ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, TYPEUtils. findFocusedByDefaultView ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, findFocusedByDefault. findFocusedByDefaultView ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, findFocusedByDefault )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, this. findFocusedByDefaultView ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, org. FocusArea3.getVisibility()).isEqualTo(INVISIBLE); )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertThat ( focusedByDefault, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertThat ( focusedByDefault, org. hamcrest. Matchers. is ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertEquals ( focusedByDefault, findFocusedByDefault ( focusedByDefault ) )

[*] target: assertThat(focusedByDefault).isNull()
[-] pred:  org. junit. Assert. assertThat ( focusedByDefault, findFocusedByDefaultView ( m ) )
************************************
************************************
[+] input: testGetFocusLevel() { mRoot.post(() -> { assertThat(ViewUtils.getFocusLevel(null)).isEqualTo(NO_FOCUS); assertThat(ViewUtils.getFocusLevel(mFpv)).isEqualTo(NO_FOCUS); mFocusArea2.setVisibility(INVISIBLE); assertThat(ViewUtils.getFocusLevel(mView2)).isEqualTo(NO_FOCUS);  assertThat(ViewUtils.getFocusLevel(mList5)).isEqualTo(SCROLLABLE_CONTAINER_FOCUS);  assertThat(ViewUtils.getFocusLevel(mView4)).isEqualTo(REGULAR_FOCUS);  mRoot.post(() -> mList5.getViewTreeObserver().addOnGlobalLayoutListener( new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mList5.getViewTreeObserver().removeOnGlobalLayoutListener(this); View firstItem = mList5.getLayoutManager().findViewByPosition(0); assertThat(ViewUtils.getFocusLevel(firstItem)) .isEqualTo(IMPLICIT_DEFAULT_FOCUS); } }));  assertThat(ViewUtils.getFocusLevel(mDefaultFocus4)).isEqualTo(DEFAULT_FOCUS);  "<AssertPlaceHolder>"; }); }
getFocusLevel(@Nullable View view) { if (view == null || view instanceof FocusParkingView || !view.isShown()) { return NO_FOCUS; } if (view.isFocusedByDefault()) { return FOCUSED_BY_DEFAULT; } if (isDefaultFocus(view)) { return DEFAULT_FOCUS; } if (isImplicitDefaultFocusView(view)) { return IMPLICIT_DEFAULT_FOCUS; } if (isScrollableContainer(view)) { return SCROLLABLE_CONTAINER_FOCUS; } return REGULAR_FOCUS; }
[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred: org. junit. Assert. assertThat ( mList5. getFocusLevel ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList5. getFocusLevel ( ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertTrue ( mList5. getFocusLevel ( ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertThat ( mList5.getFocusLevel ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertSame ( firstItem, mList5.getFocusLevel ( ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertThat ( view. getFocusLevel ( ), org. hamcrest. CoreMatchers. is ( firstItem ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertThat ( mList5. getFocusLevel ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertTrue ( mList5. getFocusLevel ( themList5)). getFocusLevel ( ) ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit. Assert. assertThat ( view. getFocusLevel ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(ViewUtils.getFocusLevel(mFocusedByDefault3)).isEqualTo(FOCUSED_BY_DEFAULT)
[-] pred:  org. junit ) )
************************************
************************************
[+] input: setPadding_shouldSetStartAndEndPadding() { when(mRecyclerView.getContext()).thenReturn(mContext); when(mRecyclerView.getParent()).thenReturn(mParent); when(mRecyclerView.getRecycledViewPool()).thenReturn(mRecycledViewPool); when(mParent.generateLayoutParams(any())).thenReturn(mLayoutParams);  View scrollView = LayoutInflater.from(mContext).inflate( R.layout.car_ui_recyclerview_scrollbar, null); mScrollBar.initialize(mRecyclerView, scrollView); mScrollBar.setPadding(10, 20);  "<AssertPlaceHolder>"; assertThat(scrollView.getPaddingBottom()).isEqualTo(20); }
setPadding(int paddingStart, int paddingEnd) { mScrollView.setPadding(mScrollView.getPaddingLeft(), paddingStart, mScrollView.getPaddingRight(), paddingEnd); }
[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred: org. junit. Assert. assertNotNull ( ViewSerial )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewOffsets )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewDataPoint )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( Viewdescription )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( View1_ )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewDoc )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewLayout )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewVENDOR )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org. junit. Assert. assertNotNull ( ViewWrapper )

[*] target: assertThat(scrollView.getPaddingTop()).isEqualTo(10)
[-] pred:  org
************************************
************************************
[+] input: getters_nochanges_shouldReturnDefaults() { assertThat(mToolbar.getBackgroundShown()).isEqualTo(true); assertThat(mToolbar.getShowMenuItemsWhileSearching()).isEqualTo(false); assertThat(mToolbar.getState()).isEquivalentAccordingToCompareTo(Toolbar.State.HOME); "<AssertPlaceHolder>"; }
getNavButtonMode() { return mController.getNavButtonMode(); }
[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred: org. junit. Assert. assertEquals ( 1, msg. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ( 1.0, msg. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ((), csr. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ((), msg. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ( 1.0, statistics. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ( 1, statistics. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ((), fixture. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ((), csr. getNavButtonMode() )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org. junit. Assert. assertEquals ( 1.0, long. MAX_VALUE )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.BACK)
[-] pred:  org
************************************
************************************
[+] input: setters_and_getters_test() { mToolbar.setTitle("Foo"); mToolbar.setSearchHint("Foo2"); mToolbar.setBackgroundShown(false); mToolbar.setShowMenuItemsWhileSearching(true); mToolbar.setState(Toolbar.State.SUBPAGE); mToolbar.setNavButtonMode(Toolbar.NavButtonMode.CLOSE);  assertThat(mToolbar.getTitle().toString()).isEqualTo("Foo"); assertThat(mToolbar.getSearchHint().toString()).isEqualTo("Foo2"); assertThat(mToolbar.getBackgroundShown()).isEqualTo(false); assertThat(mToolbar.getShowMenuItemsWhileSearching()).isEqualTo(true); assertThat(mToolbar.getState()).isEquivalentAccordingToCompareTo(Toolbar.State.SUBPAGE); "<AssertPlaceHolder>"; }
getNavButtonMode() { return mController.getNavButtonMode(); }
[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred: org. junit. Assert. assertEquals ( 3, msg. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, container. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, message. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, this. instance. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, env. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, properties. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. getNavButtonMode() ) == 3 ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, mToolbar.setNavButtonMode(Toolbar.150.EsWhileTuples < 0 )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org. junit. Assert. assertEquals ( 3, parameters. getNavButtonMode() ( ) )

[*] target: assertThat(mToolbar.getNavButtonMode()).isEquivalentAccordingToCompareTo( Toolbar.NavButtonMode.CLOSE)
[-] pred:  org
************************************
************************************
[+] input: registerOnBackListener_whenBackIsPressed_shouldCallListener() { mToolbar.setState(Toolbar.State.SUBPAGE); Mutable<Integer> timesBackPressed = new Mutable<>(0); Toolbar.OnBackListener listener = () -> { timesBackPressed.value++; return false; };  mToolbar.registerOnBackListener(listener); pressBack();  "<AssertPlaceHolder>"; assertThat(mActivity.getTimesBackPressed()).isEqualTo(1); }
registerOnBackListener(OnBackListener listener) { mController.registerOnBackListener(listener); }
[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred: org. junit. Assert. assertNotNull ( msg )

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  org. junit. Assert. assertNotNull ( builder )

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  org. junit. Assert. assertNotNull ( listener )

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  initialization and initialization of the class

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  this method acts as a

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  , timesBackPressed )

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  initialization of the gui elements

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  this method acts as

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  )

[*] target: assertThat(timesBackPressed.value).isEqualTo(1)
[-] pred:  org
************************************
************************************
[+] input: testState_twoRow_withTabs() { mockResources(); when(mResources.getBoolean(R.bool.car_ui_toolbar_tabs_on_second_row)).thenReturn(true);  Toolbar toolbar = new Toolbar(mContext); "<AssertPlaceHolder>"; toolbar.addTab( new TabLayout.Tab(mContext.getDrawable(getTestDrawableInt("test_ic_launcher")), "Foo")); toolbar.addTab( new TabLayout.Tab(mContext.getDrawable(getTestDrawableInt("test_ic_launcher")), "Foo"));  // Toolbar should display two rows with an empty title and tabs. assertThat(isViewInToolbarShown(toolbar, R.id.car_ui_toolbar_tabs)).isTrue(); assertThat(isViewInToolbarShown(toolbar, R.id.car_ui_toolbar_title)).isTrue(); }
isTabsInSecondRow() { return mController.isTabsInSecondRow(); }
[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred: org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow(); )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow 1.0 )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow PhaseId )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow TYPE )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow 1000 )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow(); ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow TYPE ) )
************************************
************************************
[+] input: testState_oneRow_withTabs() { mockResources(); when(mResources.getBoolean(R.bool.car_ui_toolbar_tabs_on_second_row)).thenReturn(false);  Toolbar toolbar = new Toolbar(mContext); "<AssertPlaceHolder>";  toolbar.addTab( new TabLayout.Tab(mContext.getDrawable(getTestDrawableInt("test_ic_launcher")), "Foo")); toolbar.addTab( new TabLayout.Tab(mContext.getDrawable(getTestDrawableInt("test_ic_launcher")), "Foo"));  // Toolbar should display one row with only tabs. assertThat(isViewInToolbarShown(toolbar, R.id.car_ui_toolbar_tabs)).isTrue(); assertThat(isViewInToolbarShown(toolbar, R.id.car_ui_toolbar_title)).isFalse(); }
isTabsInSecondRow() { return mController.isTabsInSecondRow(); }
[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred: org. junit. Assert. assertFalse ( toolbar. isTabsInSecondRow() ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow() ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( toolbar. isTabsInSecondRow(); )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertFalse ( toolbar. isTabsInSecondRow(); )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow(); )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertFalse ( toolbar. isTabsInSecondRow ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( toolbar. isTabsInSecondRow ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertFalse ( toolbar. isTabsInSecondRow(); ( ) )

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( toolbar. isTabsInSecondRow() ( ), org

[*] target: assertThat(toolbar.isTabsInSecondRow()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( toolbar. isTabsInSecondRow(); ( 0 ) )
************************************
************************************
[+] input: menuItems_searchScreen_shouldHideMenuItems() { mToolbar.setMenuItems(Arrays.asList( MenuItem.builder(mContext).setToSearch().build(), createMenuItem(i -> { })));  mToolbar.setShowMenuItemsWhileSearching(false); mToolbar.setState(Toolbar.State.SEARCH);  "<AssertPlaceHolder>"; assertThat(getMenuItemView(1).isShown()).isFalse(); }
setState(State state) { mController.setState(state); }
[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred: org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateState ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateState )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateState ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateStateWith )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateState2 )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateState )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateStateWithException ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar. setShowMenuItemsWhileSearching(false);. setState(StateState ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateStateWith )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(false);. setState(StateStateWith ) )
************************************
************************************
[+] input: menuItems_showMenuItemsWhileSearching() { mToolbar.setMenuItems(Arrays.asList( MenuItem.builder(mContext).setToSearch().build(), createMenuItem(i -> { })));  mToolbar.setShowMenuItemsWhileSearching(true); mToolbar.setState(Toolbar.State.SEARCH);  "<AssertPlaceHolder>"; assertThat(getMenuItemView(1).isShown()).isTrue(); }
setState(State state) { mController.setState(state); }
[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred: org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState ( ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState2 )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(State state) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateState ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertEquals ( 2, mToolbar.setShowMenuItemsWhileSearching(true);. setState(StateStateWith ) )

[*] target: assertThat(getMenuItemView(0).isShown()).isFalse()
[-] pred:  org. junit. Assert. assertThat ( mToolbar.setShowMenuItemsWhileSearching(true);. setState(State state) { }
************************************
************************************
[+] input: AgetDeclaredMethods() { List<Executable> methods = HiddenApiBypass.getDeclaredMethods(VMRuntime.class); Optional<Executable> getRuntime = methods.stream().filter(it -> it.getName().equals("getRuntime")).findFirst(); "<AssertPlaceHolder>"; Optional<Executable> setHiddenApiExemptions = methods.stream().filter(it -> it.getName().equals("setHiddenApiExemptions")).findFirst(); assertTrue(setHiddenApiExemptions.isPresent()); }
getDeclaredMethods(@NonNull Class<?> clazz) { ArrayList<Executable> list = new ArrayList<>(); if (clazz.isPrimitive() || clazz.isArray()) return list; MethodHandle mh; try { Method mA = Helper.NeverCall.class.getDeclaredMethod("a"); mA.setAccessible(true); mh = MethodHandles.lookup().unreflect(mA); } catch (NoSuchMethodException | IllegalAccessException e) { return list; } long methods = unsafe.getLong(clazz, methodsOffset); if (methods == 0) return list; int numMethods = unsafe.getInt(methods); if (BuildConfig.DEBUG) Log.d(TAG, clazz + " has " + numMethods + " methods"); for (int i = 0; i < numMethods; i++) { long method = methods + i * artMethodSize + artMethodBias; unsafe.putLong(mh, artOffset, method); unsafe.putObject(mh, infoOffset, null); try { MethodHandles.lookup().revealDirect(mh); } catch (Throwable ignored) { } MethodHandleInfo info = (MethodHandleInfo) unsafe.getObject(mh, infoOffset); Executable member = (Executable) unsafe.getObject(info, memberOffset); if (BuildConfig.DEBUG) Log.v(TAG, "got " + clazz.getTypeName() + "." + member.getName() + "(" + Arrays.stream(member.getParameterTypes()).map(Type::getTypeName).collect(Collectors.joining()) + ")"); list.add(member); } return list; }
[*] target: assertTrue(getRuntime.isPresent())
[-] pred: org. junit. Assert. assertEquals ( 0, theExecutable> getRuntime. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, theExecutable. getRuntime. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, we. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, HiddenApiExemptions. getDeclaredMethods(@NonNullClass<?> clazz )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, beExecutable> getRuntime. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, its getRuntime. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, theExecutable> getRuntime. getDeclaredMethods(@NonNullClass ) )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, toExecutable. getDeclaredMethods(@NonNullClass<?>s )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, HiddenApiExemptions. getDeclaredMethods(@NonNullClass )

[*] target: assertTrue(getRuntime.isPresent())
[-] pred:  org. junit. Assert. assertEquals ( 0, HiddenApiExemptions. getDeclaredMethods(@NonNullClass<?>s )
************************************
************************************
[+] input: NoSuchMethodException { exception.expect(NoSuchMethodException.class); exception.expectMessage(containsString("setHiddenApiExemptions")); assertTrue(HiddenApiBypass.setHiddenApiExemptions("L")); ApplicationInfo.class.getMethod("getHiddenApiEnforcementPolicy"); "<AssertPlaceHolder>"; VMRuntime.class.getMethod("setHiddenApiExemptions", String[].class); }
clearHiddenApiExemptions() { HiddenApiBypass.signaturePrefixes.clear(); return setHiddenApiExemptions(); }
[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred: org. junit. Assert. assertNotNull ( exception. clearHiddenApiExemptions(); )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( context. clearHiddenApiExemptions(); )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( properties. clearHiddenApiExemptions(); )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( object. clearHiddenApiExemptions(); )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( instance. clearHiddenApiExemptions(); )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertEquals ( 0, context. clearHiddenApiExemptions();

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( exception.expectMessage ( ) )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org. junit. Assert. assertNotNull ( exception. clearHiddenApiExemptions )

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  org

[*] target: assertTrue(HiddenApiBypass.clearHiddenApiExemptions())
[-] pred:  )
************************************
************************************
[+] input: OtestCheckArgsForInvokeMethod() { class X { } assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{}, new Object[]{new Object()})); assertTrue(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{int.class}, new Object[]{1})); assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{int.class}, new Object[]{1.0})); assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{int.class}, new Object[]{null})); assertTrue(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{Integer.class}, new Object[]{1})); assertTrue(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{Integer.class}, new Object[]{null})); assertTrue(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{Object.class}, new Object[]{new X()})); "<AssertPlaceHolder>"; assertTrue(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{Object.class, int.class, byte.class, short.class, char.class, double.class, float.class, boolean.class, long.class}, new Object[]{new X(), 1, (byte) 0, (short) 2, 'c', 1.1, 1.2f, false, 114514L})); }
checkArgsForInvokeMethod(Class<?>[] params, Object[] args) { if (params.length != args.length) return false; for (int i = 0; i < params.length; ++i) { if (params[i].isPrimitive()) { if (params[i] == int.class && !(args[i] instanceof Integer)) return false; else if (params[i] == byte.class && !(args[i] instanceof Byte)) return false; else if (params[i] == char.class && !(args[i] instanceof Character)) return false; else if (params[i] == boolean.class && !(args[i] instanceof Boolean)) return false; else if (params[i] == double.class && !(args[i] instanceof Double)) return false; else if (params[i] == float.class && !(args[i] instanceof Float)) return false; else if (params[i] == long.class && !(args[i] instanceof Long)) return false; else if (params[i] == short.class && !(args[i] instanceof Short)) return false; } else if (args[i] != null && !params[i].isInstance(args[i])) return false; } return true; }
[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred: org. junit. Assert. assertTrue ( buffer. checkArgsForInvokeMethod ( new java. lang. Object [ ] { } ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertTrue ( kbuilder. checkArgsForInvokeMethod ( new java. lang. Object [ ] { } ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertFalse ( buffer. checkArgsForInvokeMethod ( new java. lang. Object ( ) ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertTrue ( kbuilder. checkArgsForInvokeMethod ( new java. lang. Object ( ) ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertTrue ( factory. checkArgsForInvokeMethod ( new java. lang. Object [ ] { } ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertFalse ( buffer. checkArgsForInvokeMethod ( new java. lang. Object [ ] { } ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertFalse ( buffer. checkArgsForInvokeMethod ( new java. lang. Object [ ] { class X } ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertTrue ( buffer. checkArgsForInvokeMethod ( org. springframework. data. element. Element. class ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertTrue ( factory. checkArgsForInvokeMethod ( new java. lang. Object ( ) ) )

[*] target: assertFalse(HiddenApiBypass.checkArgsForInvokeMethod(new Class[]{X.class}, new Object[]{new Object()}))
[-] pred:  org. junit. Assert. assertFalse ( buffer. checkArgsForInvokeMethod ( org. springframework. data. element. Element. class ) )
************************************
************************************
[+] input: Exception { for (String s : atomTests) { Response r = new Response("* " + s); assertEquals("atom", r.readAtom()); } for (String s : atomTests) { Response r = new Response("* " + s + " "); "<AssertPlaceHolder>"; } }
readAtom() { return readDelimString(ATOM_CHAR_DELIM); }
[*] target: assertEquals("atom", r.readAtom())
[-] pred: org. junit. Assert. assertEquals ( r. readAtom()); ( ), r. readAtom()); ( ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. readAtom ( ) ) instanceof javax. ws. rs. CoreMatchers ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. readAtom ( ) ) instanceof javax. ws. rs. Document ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtom()); ( ), r. readAtom ( ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtom ( ), r. readAtom ( ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtom()); ( ), r. readAtom )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. readAtom() ( ) ) >= s ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. readAtom ( ) ) instanceof java. lang. String ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org. junit. Assert. assertEquals ( r, r. readAtom ( ) )

[*] target: assertEquals("atom", r.readAtom())
[-] pred:  org
************************************
************************************
[+] input: Exception { for (String s : astringTests) { Response r = new Response("* " + s); assertEquals("atom", r.readAtomString()); } for (String s : astringTests) { Response r = new Response("* " + s + " "); "<AssertPlaceHolder>"; } }
readAtomString() { return (String) parseString(true, true); }
[*] target: assertEquals("atom", r.readAtomString())
[-] pred: org. junit. Assert. assertEquals ( r.readAtomString());, r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString()); ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomStringTag ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString()); ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r, r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString getOperator ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomStringCss ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomStringTag ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString 0.0 )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString cleaned ( ) )
************************************
************************************
[+] input: Exception { Response r = new Response("* " + "(A B "C") atom"); assertArrayEquals(new String[]{"A", "B", "C"}, r.readAtomStringList()); "<AssertPlaceHolder>"; }
readAtomString() { return (String) parseString(true, true); }
[*] target: assertEquals("atom", r.readAtomString())
[-] pred: org. junit. Assert. assertEquals ( r, readAtomString() )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. toString ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. getString ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( 2, r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. toString ( r. readAtomString() ( ) ), r )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. valueOf ( rs. readAtomString() ( ) ), r )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), 2 )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( 4, r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org
************************************
************************************
[+] input: Exception { Response r = new Response("* " + "() atom"); assertArrayEquals(new String[0], r.readAtomStringList()); "<AssertPlaceHolder>"; }
readAtomString() { return (String) parseString(true, true); }
[*] target: assertEquals("atom", r.readAtomString())
[-] pred: org. junit. Assert. assertEquals ( ""1"", r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( """", r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. toString ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( ""1"", r. readAtomString() ( 0 ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( ""foo"", r. readAtomString() ( ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( ""1"", r. readAtomString(): ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString() )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r, readAtomString() )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( r. readAtomString() ( ), r. readAtomString() ) )

[*] target: assertEquals("atom", r.readAtomString())
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( r. readAtomString() ), r
************************************
************************************
[+] input: testSizeLarge() { testWithHandler( new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); assertEquals(Integer.MAX_VALUE, m.getSize()); "<AssertPlaceHolder>"; } }, new IMAPHandlerMessage() { { { size = (long) Integer.MAX_VALUE + 1; } } }); }
getSizeLong() throws MessagingException { checkExpunged(); // if bodyLoaded, size is already set if (size == -1) loadEnvelope();    // XXX - could just fetch the size return size; }
[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred: org. junit. Assert. assertNull ( m )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertEquals ( ( - 10 ), m. getSizeLong ( ) )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertEquals ( 6, m. getSizeLong ( ) )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertEquals ( 6, m. getSizeLongLong ( ) )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertNull ( m. getSizeLongLong ( ) )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertNotNull ( m )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertTrue ( ( m!= null ) )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org. junit. Assert. assertSame ( m, m )

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  org

[*] target: assertEquals((long) Integer.MAX_VALUE + 1, ((IMAPMessage) m).getSizeLong())
[-] pred:  )
************************************
************************************
[+] input: testCloseClosesFolder() { testWithHandler( new IMAPTest() { @Override public void test(Store store, TestServer server) throws MessagingException, IOException { store.connect("test", "test"); Folder test = store.getFolder("INBOX"); test.open(Folder.READ_ONLY); store.close(); "<AssertPlaceHolder>"; assertEquals(1, server.clientCount()); server.waitForClients(1); // test will timeout if clients don't terminate } }, new IMAPHandler() { }); }
close() throws MessagingException { cleanup(); // do these again in case cleanup returned early // because we were already closed due to a failure, // in which case we force close everything closeAllFolders(true); emptyConnectionPool(true); }
[*] target: assertFalse(test.isOpen())
[-] pred: org. junit. Assert. assertNotNull ( test )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( ( test!= null ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertNull ( test )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertEquals ( 1, test.clientCount )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertEquals ( true, test. close ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( ( test == null ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( ( test instanceof1, ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit )

[*] target: assertFalse(test.isOpen())
[-] pred:  org

[*] target: assertFalse(test.isOpen())
[-] pred:  )
************************************
************************************
[+] input: testStoreFailureDoesNotCloseFolder() { testWithHandler( new IMAPTest() { @Override public void init(Properties props) { props.setProperty( "mail.imap.closefoldersonstorefailure", "false"); }  @Override public void test(Store store, TestServer server) throws MessagingException, IOException { store.connect("test", "test"); Folder test = store.getFolder("INBOX"); test.open(Folder.READ_ONLY); try { ((IMAPStore) store).getSharedNamespaces(); fail("MessagingException expected"); } catch (MessagingException mex) { // expected } assertTrue(test.isOpen()); store.close(); "<AssertPlaceHolder>"; assertEquals(2, server.clientCount()); server.waitForClients(2); // test will timeout if clients don't terminate } }, new IMAPHandler() { { { capabilities += " NAMESPACE"; } }  @Override public void namespace() throws IOException { exit(); } }); }
close() throws MessagingException { cleanup(); // do these again in case cleanup returned early // because we were already closed due to a failure, // in which case we force close everything closeAllFolders(true); emptyConnectionPool(true); }
[*] target: assertFalse(test.isOpen())
[-] pred: org. junit. Assert. assertNotNull ( test )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. isValid ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. exists ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. isEmpty ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. isConnected ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. containsKey ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. assertTrue ( test. get ( ) )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit. Assert. )

[*] target: assertFalse(test.isOpen())
[-] pred:  org. junit )

[*] target: assertFalse(test.isOpen())
[-] pred:  org
************************************
************************************
[+] input: testCloseAfterFailure() { testWithHandler( new IMAPTest() { @Override public void init(Properties props) { props.setProperty( "mail.imap.closefoldersonstorefailure", "false"); }  @Override public void test(Store store, TestServer server) throws MessagingException, IOException { store.connect("test", "test"); Folder test = store.getFolder("INBOX"); test.open(Folder.READ_ONLY); try { ((IMAPStore) store).getSharedNamespaces(); fail("MessagingException expected"); } catch (MessagingException mex) { // expected } assertTrue(test.isOpen()); test.close();    // put it back in the pool store.close(); "<AssertPlaceHolder>"; server.waitForClients(2); // test will timeout if clients don't terminate } }, new IMAPHandler() { { { capabilities += " NAMESPACE"; } }  @Override public void namespace() throws IOException { exit(); } }); }
close() throws MessagingException { cleanup(); // do these again in case cleanup returned early // because we were already closed due to a failure, // in which case we force close everything closeAllFolders(true); emptyConnectionPool(true); }
[*] target: assertEquals(2, server.clientCount())
[-] pred: org. junit. Assert. assertTrue ( test. isTrusted ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isEmpty ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isClosed ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. containsKey ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. exists ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isClose )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. fail )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. proceed ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isException ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org
************************************
************************************
[+] input: testStoreFailureDoesCloseFolder() { testWithHandler( new IMAPTest() { @Override public void init(Properties props) { props.setProperty( // the default, but just to be sure... "mail.imap.closefoldersonstorefailure", "true"); }  @Override public void test(Store store, TestServer server) throws MessagingException, IOException { store.connect("test", "test"); Folder test = store.getFolder("INBOX"); test.open(Folder.READ_ONLY); try { ((IMAPStore) store).getSharedNamespaces(); fail("MessagingException expected"); } catch (MessagingException mex) { // expected } assertFalse(test.isOpen()); store.close(); "<AssertPlaceHolder>"; server.waitForClients(2); // test will timeout if clients don't terminate } }, new IMAPHandler() { { { capabilities += " NAMESPACE"; } }  @Override public void namespace() throws IOException { exit(); } }); }
close() throws MessagingException { cleanup(); // do these again in case cleanup returned early // because we were already closed due to a failure, // in which case we force close everything closeAllFolders(true); emptyConnectionPool(true); }
[*] target: assertEquals(2, server.clientCount())
[-] pred: org. junit. Assert. assertNotNull ( test )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isTrusted ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. containsKey ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isEmpty ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. exists ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. containsKey ( 0 ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. containsKey ( 100 ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org. junit. Assert. assertTrue ( test. isValid ( ) )

[*] target: assertEquals(2, server.clientCount())
[-] pred:  org

[*] target: assertEquals(2, server.clientCount())
[-] pred:  )
************************************
************************************
[+] input: Exception { Properties props = new Properties(); props.setProperty("mail.imap.reusetagprefix", "true"); IMAPProtocol p = new IMAPProtocol( new AsciiStringInputStream(response), new PrintStream(new ByteArrayOutputStream()), props, debug); BODY b = p.fetchBody(1, "1.1"); "<AssertPlaceHolder>"; //System.out.println(b); //System.out.write(b.getByteArray().getNewBytes()); String result = new String(b.getByteArray().getNewBytes(), StandardCharsets.US_ASCII); assertEquals("getByteArray.getNewBytes", content, result); InputStream is = b.getByteArrayInputStream(); byte[] ba = new byte[is.available()]; is.read(ba); result = new String(ba, StandardCharsets.US_ASCII); assertEquals("getByteArrayInputStream", content, result); }
fetchBody(int msgno, String section) throws ProtocolException { return fetchBody(msgno, section, false); }
[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred: org. junit. Assert. assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit ) { assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert :: assertNotNull, b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert ; assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit ). assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit, b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org
************************************
************************************
[+] input: Exception { Properties props = new Properties(); props.setProperty("mail.imap.reusetagprefix", "true"); IMAPProtocol p = new IMAPProtocol( new AsciiStringInputStream(response), new PrintStream(new ByteArrayOutputStream()), props, debug); BODY b = p.fetchBody(1, "1.1", 0, content.length(), null); "<AssertPlaceHolder>"; //System.out.println(b); //System.out.write(b.getByteArray().getNewBytes()); String result = new String(b.getByteArray().getNewBytes(), StandardCharsets.US_ASCII); assertEquals("getByteArray.getNewBytes", content, result); InputStream is = b.getByteArrayInputStream(); byte[] ba = new byte[is.available()]; is.read(ba); result = new String(ba, StandardCharsets.US_ASCII); assertEquals("getByteArrayInputStream", content, result); }
fetchBody(int msgno, String section, int start, int size, ByteArray ba) throws ProtocolException { return fetchBody(msgno, section, start, size, false, ba); }
[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred: org. junit. Assert. assertNotNull ( b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, p. getBody ( ) )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, p. getSchemaBody ( ) )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, p. fetchBody ( ) )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, assertNotNull ( b ) )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b. get ( 0 ), b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, b )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, body )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, IDENT_9 )

[*] target: assertEquals("section number", "1.1", b.getSection())
[-] pred:  org. junit. Assert. assertEquals ( b, c )
************************************
************************************
[+] input: IOException { for (String s : lines) { LineInputStream is = createStream(s); assertEquals("line1", is.readLine()); assertEquals("line2", is.readLine()); assertEquals("line3", is.readLine()); "<AssertPlaceHolder>"; } }
readLine() throws IOException { //InputStream in = this.in; byte[] buf = lineBuffer;  if (buf == null) buf = lineBuffer = new byte[128];  int c1; int room = buf.length; int offset = 0;  while ((c1 = in.read()) != -1) { if (c1 == '\n') // Got NL, outa here. break; else if (c1 == '\r') { // Got CR, is the next char NL ? boolean twoCRs = false; if (in.markSupported()) in.mark(2); int c2 = in.read(); if (c2 == '\r') {        // discard extraneous CR twoCRs = true; c2 = in.read(); } if (c2 != '\n') { /* * If the stream supports it (which we hope will always * be the case), reset to after the first CR.  Otherwise, * we wrap a PushbackInputStream around the stream so we * can unread the characters we don't need.  The only * problem with that is that the caller might stop * reading from this LineInputStream, throw it away, * and then start reading from the underlying stream. * If that happens, the pushed back characters will be * lost forever. */ if (in.markSupported()) in.reset(); else { if (!(in instanceof PushbackInputStream)) in /*= this.in*/ = new PushbackInputStream(in, 2); if (c2 != -1) ((PushbackInputStream) in).unread(c2); if (twoCRs) ((PushbackInputStream) in).unread('\r'); } } break; // outa here. }  // Not CR, NL or CR-NL ... // .. Insert the byte into our byte buffer if (--room < 0) { // No room, need to grow. if (buf.length < MAX_INCR) buf = new byte[buf.length * 2]; else buf = new byte[buf.length + MAX_INCR]; room = buf.length - offset - 1; System.arraycopy(lineBuffer, 0, buf, 0, offset); lineBuffer = buf; } buf[offset++] = (byte) c1; }  if ((c1 == -1) && (offset == 0)) return null;  if (allowutf8) return new String(buf, 0, offset, StandardCharsets.UTF_8); else { if (defaultutf8) { // try to decode it as UTF-8 try { return decoder.decode(ByteBuffer.wrap(buf, 0, offset)). toString(); } catch (CharacterCodingException cex) { // looks like it's not valid UTF-8 data, // fall through and treat it as an 8-bit charset } } return new String(buf, 0, 0, offset); } }
[*] target: assertEquals(null, is.readLine())
[-] pred: org. junit. Assert. assertThat ( is. readLine() ( ), org. hamcrest. CoreMatchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is. readLine(), org. hamcrest. CoreMatchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is, org. hamcrest. CoreMatchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is, org. hamcrest. CoreMatchers. is ( s. readLine ( ) ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is. readLine() ( ), org. hamcrest. Matchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(). toString ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 ) )
************************************
************************************
[+] input: IOException { for (String s : empty) { LineInputStream is = createStream(s); assertEquals("", is.readLine()); assertEquals("", is.readLine()); assertEquals("", is.readLine()); "<AssertPlaceHolder>"; } }
readLine() throws IOException { //InputStream in = this.in; byte[] buf = lineBuffer;  if (buf == null) buf = lineBuffer = new byte[128];  int c1; int room = buf.length; int offset = 0;  while ((c1 = in.read()) != -1) { if (c1 == '\n') // Got NL, outa here. break; else if (c1 == '\r') { // Got CR, is the next char NL ? boolean twoCRs = false; if (in.markSupported()) in.mark(2); int c2 = in.read(); if (c2 == '\r') {        // discard extraneous CR twoCRs = true; c2 = in.read(); } if (c2 != '\n') { /* * If the stream supports it (which we hope will always * be the case), reset to after the first CR.  Otherwise, * we wrap a PushbackInputStream around the stream so we * can unread the characters we don't need.  The only * problem with that is that the caller might stop * reading from this LineInputStream, throw it away, * and then start reading from the underlying stream. * If that happens, the pushed back characters will be * lost forever. */ if (in.markSupported()) in.reset(); else { if (!(in instanceof PushbackInputStream)) in /*= this.in*/ = new PushbackInputStream(in, 2); if (c2 != -1) ((PushbackInputStream) in).unread(c2); if (twoCRs) ((PushbackInputStream) in).unread('\r'); } } break; // outa here. }  // Not CR, NL or CR-NL ... // .. Insert the byte into our byte buffer if (--room < 0) { // No room, need to grow. if (buf.length < MAX_INCR) buf = new byte[buf.length * 2]; else buf = new byte[buf.length + MAX_INCR]; room = buf.length - offset - 1; System.arraycopy(lineBuffer, 0, buf, 0, offset); lineBuffer = buf; } buf[offset++] = (byte) c1; }  if ((c1 == -1) && (offset == 0)) return null;  if (allowutf8) return new String(buf, 0, offset, StandardCharsets.UTF_8); else { if (defaultutf8) { // try to decode it as UTF-8 try { return decoder.decode(ByteBuffer.wrap(buf, 0, offset)). toString(); } catch (CharacterCodingException cex) { // looks like it's not valid UTF-8 data, // fall through and treat it as an 8-bit charset } } return new String(buf, 0, 0, offset); } }
[*] target: assertEquals(null, is.readLine())
[-] pred: org. junit. Assert. assertThat ( is. readLine(), org. hamcrest. CoreMatchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is. readLine(), org. hamcrest. CoreMatchers. is ( look ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is. readLine(), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(). toString ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(). charAt ( 0 ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org
************************************
************************************
[+] input: IOException { for (String s : mixed) { LineInputStream is = createStream(s); assertEquals("line1", is.readLine()); assertEquals("", is.readLine()); assertEquals("line3", is.readLine()); "<AssertPlaceHolder>"; } }
readLine() throws IOException { //InputStream in = this.in; byte[] buf = lineBuffer;  if (buf == null) buf = lineBuffer = new byte[128];  int c1; int room = buf.length; int offset = 0;  while ((c1 = in.read()) != -1) { if (c1 == '\n') // Got NL, outa here. break; else if (c1 == '\r') { // Got CR, is the next char NL ? boolean twoCRs = false; if (in.markSupported()) in.mark(2); int c2 = in.read(); if (c2 == '\r') {        // discard extraneous CR twoCRs = true; c2 = in.read(); } if (c2 != '\n') { /* * If the stream supports it (which we hope will always * be the case), reset to after the first CR.  Otherwise, * we wrap a PushbackInputStream around the stream so we * can unread the characters we don't need.  The only * problem with that is that the caller might stop * reading from this LineInputStream, throw it away, * and then start reading from the underlying stream. * If that happens, the pushed back characters will be * lost forever. */ if (in.markSupported()) in.reset(); else { if (!(in instanceof PushbackInputStream)) in /*= this.in*/ = new PushbackInputStream(in, 2); if (c2 != -1) ((PushbackInputStream) in).unread(c2); if (twoCRs) ((PushbackInputStream) in).unread('\r'); } } break; // outa here. }  // Not CR, NL or CR-NL ... // .. Insert the byte into our byte buffer if (--room < 0) { // No room, need to grow. if (buf.length < MAX_INCR) buf = new byte[buf.length * 2]; else buf = new byte[buf.length + MAX_INCR]; room = buf.length - offset - 1; System.arraycopy(lineBuffer, 0, buf, 0, offset); lineBuffer = buf; } buf[offset++] = (byte) c1; }  if ((c1 == -1) && (offset == 0)) return null;  if (allowutf8) return new String(buf, 0, offset, StandardCharsets.UTF_8); else { if (defaultutf8) { // try to decode it as UTF-8 try { return decoder.decode(ByteBuffer.wrap(buf, 0, offset)). toString(); } catch (CharacterCodingException cex) { // looks like it's not valid UTF-8 data, // fall through and treat it as an 8-bit charset } } return new String(buf, 0, 0, offset); } }
[*] target: assertEquals(null, is.readLine())
[-] pred: org. junit. Assert. assertThat ( is, org. hamcrest. CoreMatchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine() )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertThat ( is, org. hamcrest. Matchers. is ( s ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(). toString ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine ( ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(). charAt ( 0 ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org. junit. Assert. assertEquals ( s, is. readLine(), 0 ) )

[*] target: assertEquals(null, is.readLine())
[-] pred:  org
************************************
************************************
[+] input: IOException { String imapResponse = "* OK NAME IMAP4rev1 Server  Server 1ece50b148c8 is ready."; StringBuilder message = new StringBuilder(); message.append("HTTP/1.0 200 Connection established\r\n"); message.append("More things\r\n"); message.append("\r\n"); message.append(imapResponse).append("\r\n"); InputStream proxyResponse = new ByteArrayInputStream(message.toString().getBytes(StandardCharsets.UTF_8)); "<AssertPlaceHolder>"; LineInputStream r = new LineInputStream(proxyResponse, true); /* IMAP response was not read yet. * Next line would fail if SocketFetcher.readProxyResponse uses a BufferedInputStream * because all the input is read and buffered. */ assertEquals(imapResponse, r.readLine()); }
readProxyResponse(InputStream input, StringBuilder errorLine) throws IOException { LineInputStream r = new LineInputStream(input, true);  String line; boolean first = true; while ((line = r.readLine()) != null) { if (line.length() == 0) { // End of HTTP response break; } logger.finest(line); if (first) { StringTokenizer st = new StringTokenizer(line); String http = st.nextToken(); String code = st.nextToken(); if (!code.equals("200")) { errorLine.append(line); return false; } first = false; } } return true; }
[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred: org. junit. Assert. assertTrue ( proxyResponse. toString ( ). contains ( message. toString ( ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. toString ( ), ( ( int ) ( proxyResponse. get ( ) ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. toString ( ), ( ( int ) ( proxyResponse. METHOD_8 ( ) ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. isValid ( message. toString ( ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. toString ( ), ( ( message. length ( ) ) > 0 ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. toString ( ), ( ( int ) ( proxyResponse. length ( ) ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertEquals ( true, proxyResponse. readProxyResponse ( message. toString ( ) ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. isPassed ( ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org. junit. Assert. assertTrue ( proxyResponse. receive ( message ) )

[*] target: assertTrue(SocketFetcher.readProxyResponse(proxyResponse, new StringBuilder()))
[-] pred:  org
************************************
************************************
[+] input: Exception { testServer = getActiveTestServer(false);  WriteTimeoutSocket writeTimeoutSocket = new WriteTimeoutSocket("localhost", testServer.getPort(), 10000); writeTimeoutSockets.add(writeTimeoutSocket);  Object isExternalSes = ReflectionUtil.getPrivateFieldValue(writeTimeoutSocket, "isExternalSes"); "<AssertPlaceHolder>"; assertFalse((Boolean) isExternalSes); }
getPort() { return socket.getPort(); }
[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred: org. junit. Assert. assertEquals ( isExternalSes, isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes == null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, testServerSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, true )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes > 0 ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertNotNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  )
************************************
************************************
[+] input: Exception { testServer = getActiveTestServer(false); WriteTimeoutSocket writeTimeoutSocket = new WriteTimeoutSocket(InetAddress.getLocalHost(), testServer.getPort(), 10000); writeTimeoutSockets.add(writeTimeoutSocket);  Object isExternalSes = ReflectionUtil.getPrivateFieldValue(writeTimeoutSocket, "isExternalSes"); "<AssertPlaceHolder>"; assertFalse((Boolean) isExternalSes); }
getPort() { return socket.getPort(); }
[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred: org. junit. Assert. assertNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes == null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes!= null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes > 0 ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes instanceof boolean ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertNotNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org
************************************
************************************
[+] input: Exception { testServer = getActiveTestServer(false);  WriteTimeoutSocket writeTimeoutSocket = new WriteTimeoutSocket("localhost", testServer.getPort(), (InetAddress) null, getRandomFreePort(), 10000); writeTimeoutSockets.add(writeTimeoutSocket);  Object isExternalSes = ReflectionUtil.getPrivateFieldValue(writeTimeoutSocket, "isExternalSes"); "<AssertPlaceHolder>"; assertFalse((Boolean) isExternalSes); }
getPort() { return socket.getPort(); }
[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred: org. junit. Assert. assertNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes == null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes > 0 ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, testServerSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes!= null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, true )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  )
************************************
************************************
[+] input: Exception { testServer = getActiveTestServer(false);  WriteTimeoutSocket writeTimeoutSocket = new WriteTimeoutSocket(InetAddress.getByName("localhost"), testServer.getPort(), (InetAddress) null, getRandomFreePort(), 10000); writeTimeoutSockets.add(writeTimeoutSocket);  Object isExternalSes = ReflectionUtil.getPrivateFieldValue(writeTimeoutSocket, "isExternalSes"); "<AssertPlaceHolder>"; assertFalse((Boolean) isExternalSes); }
getPort() { return socket.getPort(); }
[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred: org. junit. Assert. assertNull ( isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes == null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, isExternalSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes!= null ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( isExternalSes. getPort ( ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertEquals ( isExternalSes, testServerSes )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. assertFalse ( ( isExternalSes > 0 ) )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org. junit. Assert. )

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  org

[*] target: assertTrue(isExternalSes instanceof Boolean)
[-] pred:  )
************************************
************************************
[+] input: Exception { final String loggerName = CollectorFormatterTest.class.getName(); final Class<?> k = CollectorFormatter.class; assertNotNull(LogManagerProperties.newFormatter(k.getName()));  Logger l; LogManager m = LogManager.getLogManager(); try { Properties props = new Properties(); String p = ConsoleHandler.class.getName(); props.put(loggerName.concat(".handlers"), p); props.put(p.concat(".formatter"), k.getName()); read(m, props);  l = Logger.getLogger(loggerName); final Handler[] handlers = l.getHandlers(); assertEquals(1, handlers.length); for (Handler h : handlers) { assertEquals(p, h.getClass().getName()); "<AssertPlaceHolder>"; } } finally { m.reset(); } assertNotNull(l); //Enusre handler is closed by reset }
getFormatter() { LogManagerProperties.checkLogManagerAccess(); return this.formatter; }
[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred: org. junit. Assert. assertEquals ( h, m )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, h. getFormatterFormatter )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, h. getFormatter(); )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, h. getFormatterFormatter ( ) )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, h. getFormatter(); ( ) )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( loggerName, h. getFormatterFormatter ( ) )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( loggerName, h. getFormatterFormatter )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, h. getFormatterSecond ( ) )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( h, p )

[*] target: assertEquals(k, h.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertEquals ( loggerName, h. getFormatter(); ( ) )
************************************
************************************
[+] input: testFormatHead() { String msg = "message"; XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter("{0}", xml, (Comparator<LogRecord>) null); assertEquals("", f.getHead((Handler) null)); f.format(new LogRecord(Level.SEVERE, msg));  String result = f.getTail((Handler) null); String expect = f.finish(xml.getHead((Handler) null)); "<AssertPlaceHolder>"; assertEquals("", f.getHead((Handler) null)); }
finish(String s) { return s.trim(); }
[*] target: assertEquals(result, expect)
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( expect, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( msg, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertTrue ( msg, expect. equals ( result ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. retrieve ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert., expect )
************************************
************************************
[+] input: Exception { final CollectorFormatter f = new CollectorFormatter( "{1}{3}{5}{7}{8}{13}", new CompactFormatter("%4$s"), new SeverityComparator()); LogRecord first = new LogRecord(Level.INFO, ""); first.setThrown(new Throwable()); setEpochMilli(first, 1L); f.format(first);  TestFormatterAccept r = new TestFormatterAccept(Level.FINE, f); setEpochMilli(r, 2L); r.setThrown(new Throwable()); f.format(r); assertEquals(1, r.inferred); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertNull ( r. getTail(final Handler h ) )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertSame ( first, f. getTail(final Handler h ) )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( first. getTail(final Handler h ), r. getTail( final Handler h )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNull ( f. getTail(final Handler h ) )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( first. getTail(final Handler h ), r. getTail(final Handler h )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( first, f. getTail(final Handler h ) )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNull ( r. getTail(final Handler h )

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  constructs the first

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  retrieves the first

[*] target: assertEquals(Level.FINE.getLocalizedName().concat("11222"), f.getTail((Handler) null))
[-] pred:  org
************************************
************************************
[+] input: Exception { final CollectorFormatter f = new CollectorFormatter( "{1}{3}{5}{7}{8}{13}", new CompactFormatter("%4$s"), new SeverityComparator());  TestFormatAcceptAndUpdate r = new TestFormatAcceptAndUpdate(Level.SEVERE, f); setEpochMilli(r, 2L); r.setThrown(new Throwable()); f.format(r); assertEquals(2, r.inferred); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertThat ( f. getTail(final Handler h ).()); ( org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(final Handler h ), org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(final Handler h()); org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(final Handler h ).()); ( new org. apache. hadoop. fs. UTF_8 ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(final Handler h ).()); ( org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNull ( f. getTail(final Handler h ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(final Handler h ).()); ( org. hamcrest. CoreMatchers. is ( """" ) ) )

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  getTail(final Handler2

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  getTail(final Handler

[*] target: assertEquals(Level.SEVERE.getLocalizedName().concat("21121"), f.getTail((Handler) null))
[-] pred:  org
************************************
************************************
[+] input: testFormatFormat() { String msg = "message"; XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter("{1}", xml, (Comparator<LogRecord>) null); assertEquals("", f.getTail((Handler) null)); LogRecord r; r = new LogRecord(Level.SEVERE, msg); f.format(r);  String result = f.getTail((Handler) null); String expect = f.finish(xml.format(r)); assertEquals(result, expect); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. core. Is. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( results, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( error, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( handle, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) ) in
************************************
************************************
[+] input: Exception { String msg = "message"; XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter("{1}", xml, (Comparator<LogRecord>) null);  assertEquals("", f.getTail((Handler) null)); LogRecord r; r = new LogRecord(Level.SEVERE, LOG_CFG_KEY); Properties props = new Properties(); props.put(LOG_CFG_KEY, msg);  r.setResourceBundle(new LocaleResource(props, Locale.US)); assertNotNull(r.getResourceBundle().getLocale()); f.format(r);  String result = f.getTail((Handler) null); String expect = f.finish(xml.format(r)); assertEquals(result, expect); assertEquals(msg, f.formatMessage(r)); assertEquals(msg, xml.formatMessage(r)); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, is ( expect ) )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert.. assertEquals ( expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. ), expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. is ( expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert., expect, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( expect, result, result )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. ), expect )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. )

[*] target: assertEquals("", f.getTail((Handler) null))
[-] pred:  org
************************************
************************************
[+] input: testFormatOneRecord() { XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter((String) null, xml, (Comparator<LogRecord>) null); LogRecord record = new LogRecord(Level.SEVERE, "message"); assertEquals("", f.format(record)); String result = f.getTail((Handler) null); String expect = f.finish(xml.getHead((Handler) null)) + f.finish(xml.format(record)) + f.finish(xml.getTail((Handler) null)) + '\n'; "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(result, expect)
[-] pred: org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result. getTail(final Handler h )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result. getTail(restrest ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result ; }

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert.. assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. ), expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit ). assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit, expect )

[*] target: assertEquals(result, expect)
[-] pred:  , result )

[*] target: assertEquals(result, expect)
[-] pred:  org
************************************
************************************
[+] input: testFormatTwoRecords() { XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter((String) null, xml, (Comparator<LogRecord>) null); LogRecord record = new LogRecord(Level.SEVERE, "first"); assertEquals("", f.format(record));  record = new LogRecord(Level.SEVERE, "second"); assertEquals("", f.format(record)); String result = f.getTail((Handler) null); String expect = f.finish(xml.getHead((Handler) null)) + f.finish(xml.format(record)) + f.finish(xml.getTail((Handler) null)) + "... 1 more\n"; "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(result, expect)
[-] pred: org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( f. getTail(restrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertThat ( xml. getTail(restrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result. substring ( 0, expect. length ( ) ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. assertEquals ( expect, result. trim ( ) )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit. Assert. )

[*] target: assertEquals(result, expect)
[-] pred:  org. junit, expect )

[*] target: assertEquals(result, expect)
[-] pred:  org
************************************
************************************
[+] input: testFinish() { CollectorFormatter f = new CollectorFormatter(); String format = LINE_SEP + f.getClass().getName() + LINE_SEP; assertFalse(f.getClass().getName().equals(format)); "<AssertPlaceHolder>"; }
finish(String s) { return s.trim(); }
[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred: org. junit. Assert. assertEquals ( format, f. finish(String s )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( f, f )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( format, f. finish(hub )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( format, f. finish(f ) )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( f, f. finish(String s )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( format, f. finish(String s ) )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( format, f. finish( f ) )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( f, f. finish(f ) )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( f. finish(String s ), format )

[*] target: assertEquals(f.getClass().getName(), f.finish(format))
[-] pred:  org. junit. Assert. assertEquals ( format, f. finish(Object ) )
************************************
************************************
[+] input: testFormatTail() { String msg = "message"; XMLFormatter xml = new XMLFormatter(); CollectorFormatter f = new CollectorFormatter("{2}", xml, (Comparator<LogRecord>) null); f.format(new LogRecord(Level.SEVERE, msg));  String result = f.getTail((Handler) null); String expect = f.finish(xml.getTail((Handler) null)); assertEquals(result, expect); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( expect, result. getTail(final Handler h )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( expect, result. getTail(final Handler h ) )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( expect, result. getTail(final Handler h) )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler h ) )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler h )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. f. getTail(final Handler h )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. ) ( expect, result )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. isSame ( expect, result )

[*] target: assertEquals(expect, f.getTail((Handler) null))
[-] pred:  org. junit. Assert. ), result )
************************************
************************************
[+] input: testFormatCount() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{3}", (Formatter) null, (Comparator<LogRecord>) null); assertEquals("0", f.getTail((Handler) null)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  String result = f.getTail((Handler) null); assertEquals(result, "4"); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertEquals ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. getTail(final Handler h )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result, f. getTail(final Handler h )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. getTail(final Handler h > 0 )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. trim ( ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. getTail(final Handler h

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertSame ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result, msg )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. msg, result )
************************************
************************************
[+] input: testFormatRemaing() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{4}", (Formatter) null, (Comparator<LogRecord>) null); assertEquals("-1", f.getTail((Handler) null)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  String result = f.getTail((Handler) null); assertEquals(result, "3"); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( msg ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( msg, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( msg, org. hamcrest. Matchers. is ( result ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( input, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( message, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. getTail(final Handler h )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( msg, result. isEmpty ( ) )

[*] target: assertEquals("-1", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. msg, result )
************************************
************************************
[+] input: testFormatThrown() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{5}", (Formatter) null, (Comparator<LogRecord>) null); assertEquals("0", f.getTail((Handler) null)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  LogRecord r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  String result = f.getTail((Handler) null); assertEquals(result, "3"); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertEquals ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( msg ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertSame ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. message ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert.. msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org
************************************
************************************
[+] input: testFormatNormal() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{6}", (Formatter) null, (Comparator<LogRecord>) null);  assertEquals("0", f.getTail((Handler) null)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  LogRecord r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  r = new LogRecord(Level.SEVERE, msg); r.setThrown(new Exception()); f.format(r);  String result = f.getTail((Handler) null); assertEquals(result, "2"); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertEquals ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler h ).()); ( ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler2 ).()); ( ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler h ). isEmpty ( ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( msg ) )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertSame ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. message ( msg, result )

[*] target: assertEquals("0", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. )
************************************
************************************
[+] input: Exception { CollectorFormatter minF = new CollectorFormatter("{7}", (Formatter) null, (Comparator<LogRecord>) null);  tickMilli(); //Make sure the max not equal to the start time.  final String min = minF.getTail((Handler) null); NumberFormat.getIntegerInstance().parse(min); tickMilli();  //Next min is not old min. String next = minF.getTail((Handler) null); assertFalse(min + ' ' + next, min.equals(next));  //All mins start at the init time. CollectorFormatter initF = new CollectorFormatter("{10}", (Formatter) null, (Comparator<LogRecord>) null);  next = initF.getTail((Handler) null); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(min, next)
[-] pred: org. junit. Assert. assertEquals ( min, next )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( min, next. getTail(final Handler h )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( min, next. getTail( min Handler ) )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( min, next. getTail( final Handler h )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( min, next. getTail( min ) )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( minimal, next )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( max, next )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( minimum, next )

[*] target: assertEquals(min, next)
[-] pred:  org. junit. Assert. assertEquals ( first, next )

[*] target: assertEquals(min, next)
[-] pred:  org
************************************
************************************
[+] input: Exception { CollectorFormatter f = new CollectorFormatter("{8}", (Formatter) null, (Comparator<LogRecord>) null);  String now = f.getTail((Handler) null); Number num = NumberFormat.getIntegerInstance().parse(now); assertNotEquals(Long.MIN_VALUE, num.longValue()); tickMilli(); String next = f.getTail((Handler) null); "<AssertPlaceHolder>"; assertFalse(now.equals(next)); }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred: org. junit. Assert. assertEquals ( now, next )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( ( num == next ), now )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( ( num + num ), next )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( now, ( num == next ) )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( from, now, next )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( in, next )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org. junit. Assert. assertEquals ( ask, next )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  , now )

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  org

[*] target: assertNotEquals(Long.MIN_VALUE, NumberFormat.getIntegerInstance().parse(now).longValue())
[-] pred:  )
************************************
************************************
[+] input: Exception { CollectorFormatter f = new CollectorFormatter("{7}_{8}", (Formatter) null, (Comparator<LogRecord>) null);  LogRecord r = new LogRecord(Level.SEVERE, ""); setEpochMilli(r, 100); f.format(r);  r = new LogRecord(Level.SEVERE, ""); setEpochMilli(r, 200); f.format(r);  //Check that the min and max are different. String output = f.getTail((Handler) null); int fence = output.indexOf('_'); assertFalse(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1));  r = new LogRecord(Level.SEVERE, ""); setEpochMilli(r, 400); f.format(r);  //Previous max is 200 so at this point the min and max better be 400. output = f.getTail((Handler) null); fence = output.indexOf('_'); "<AssertPlaceHolder>"; assertEquals("400_400", output); }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred: org. junit. Assert. assertEquals ( r,fence. getTail(5959 ( 0 ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(QOK ( ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r, fence. getTail(5959 ( 0 ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(meter ( ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(Q1 ( fence ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(Q1 ( ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(member ( 0 ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r,fence. getTail(member ( ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org. junit. Assert. assertEquals ( r, fence. getTail(Q Handler2 ( ) )

[*] target: assertTrue(output.regionMatches(0, output, fence + 1, (output.length() - fence) - 1))
[-] pred:  org
************************************
************************************
[+] input: testGetSetFormat() { CollectorFormatter cf = new CollectorFormatter(); final String init = cf.getFormat(); String pattern = "foo"; assertNotEquals(pattern, cf.getFormat()); cf.setFormat(pattern); assertEquals(pattern, cf.getFormat()); LogRecord r = new LogRecord(Level.SEVERE, "bar"); cf.format(r); assertEquals(pattern, cf.toString());  cf.setFormat((String) null); "<AssertPlaceHolder>"; }
getFormat() { LogManagerProperties.checkLogManagerAccess(); return this.fmt; }
[*] target: assertEquals(init, cf.getFormat())
[-] pred: org. junit. Assert. assertEquals ( pattern, r. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r, cf. getFormat() ( init ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r, cf. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, r. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r, cf. getFormat() ( init, r ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( ""foo"", r. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r, cf. getFormat() ( initialize ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r. getFormat() ( ), init )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( ""foo"", r. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( r, cf. getFormat() ( init, VAR_1 ) )
************************************
************************************
[+] input: testGetSetFormatter() { CollectorFormatter cf = new CollectorFormatter(); final Formatter init = cf.getFormatter(); Formatter target = new XMLFormatter(); assertNotEquals(target, cf.getFormatter()); cf.setFormatter(target); assertEquals(target, cf.getFormatter());  cf.setFormatter((Formatter) null); "<AssertPlaceHolder>"; }
getFormatter() { LogManagerProperties.checkLogManagerAccess(); return this.formatter; }
[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred: org. junit. Assert. assertThat ( target. getFormatter() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatterFormatter ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatter ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatterSecond ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatter(); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatterException ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatterTimeout ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatter Core ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatter org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(init.getClass(), cf.getFormatter().getClass())
[-] pred:  org. junit. Assert. assertThat ( target. getFormatterFormatter ( ), org. hamcrest. CoreMatchers. is ( 1 ) )
************************************
************************************
[+] input: testGetTail() { CollectorFormatter f = new CollectorFormatter( "{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}", (Formatter) null, (Comparator<LogRecord>) null); assertTrue(f.getTail((Handler) null).length() != 0); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred: org. junit. Assert. assertEquals ( true, f. getTail(final Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( f. getTail(final Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertFalse ( f. getTail(final Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(bin Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(final Handler h) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(gt Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(two Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(final Handler h )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(st Handler h ) )

[*] target: assertTrue(f.getTail((Handler) null).length() != 0)
[-] pred:  org. junit. Assert. assertEquals ( true, f. getTail(HashCode Handler h ) )
************************************
************************************
[+] input: testGetTailExample2() { String p = "These {3} messages occurred between\n" + "{7,date,EEE, MMM dd HH:mm:ss:S ZZZ yyyy} and " + "{8,time,EEE, MMM dd HH:mm:ss:S ZZZ yyyy}\n"; CollectorFormatter cf = new CollectorFormatter(p); LogRecord min = new LogRecord(Level.SEVERE, ""); setEpochMilli(min, 1248203502449L); cf.format(min);  int count = 290; for (int i = 0; i < count; ++i) { LogRecord mid = new LogRecord(Level.SEVERE, ""); setEpochMilli(mid, min.getMillis()); cf.format(mid); }  LogRecord max = new LogRecord(Level.SEVERE, ""); setEpochMilli(max, 1258723764000L); cf.format(max); Object[] args = new Object[9]; args[3] = count + 2L; args[7] = min.getMillis(); args[8] = max.getMillis(); assertEquals(MessageFormat.format(p, args), cf.toString()); String output = cf.getTail((Handler) null); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertNotNull(output)
[-] pred: org. junit. Assert. assertEquals ( output, p )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( p, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( true, output. contains ( p ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( p ), output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( """", output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( true, output. startsWith ( p ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( output ), p )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( true, output. getTail(final Handler h ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertTrue ( output. startsWith ( p ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( b, output )
************************************
************************************
[+] input: Exception { String p = "{13} alert reports since {10,date}.\n"; CollectorFormatter cf = new CollectorFormatter(p);  int count = 4320; for (int i = 1; i < count; ++i) { LogRecord mid = new LogRecord(Level.SEVERE, ""); cf.format(mid); cf.getTail((Handler) null); }  String output = cf.getTail((Handler) null); assertNotNull(output); String jd73 = NumberFormat.getIntegerInstance().format(count); "<AssertPlaceHolder>"; }
format(final LogRecord record) { if (record == null) { throw new NullPointerException(); }  boolean accepted; do { final LogRecord peek = peek(); //The self compare of the first record acts like a type check. LogRecord update = apply(peek != null ? peek : record, record); if (peek != update) { //Not identical. update.getSourceMethodName(); //Infer caller, null check. accepted = acceptAndUpdate(peek, update); } else { accepted = accept(peek, record); } } while (!accepted); return ""; }
[*] target: assertTrue(output.startsWith(jd73))
[-] pred: org. junit. Assert. assertEquals ( jd73, output )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( count ), output )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( jd73, output. substring ( 0, count ) )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( ( count + count ), output. length ( ) )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( orgd73, output )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( jd73, outputs )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( output, jd73 )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( named73, output )

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( jd73, output )s

[*] target: assertTrue(output.startsWith(jd73))
[-] pred:  org. junit. Assert. assertEquals ( jd73, output ) type
************************************
************************************
[+] input: testNewDefaultFormatter() { String msg = ""; CollectorFormatter f = new CollectorFormatter(); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); String result = f.getTail((Handler) null); "<AssertPlaceHolder>"; assertTrue(result, result.contains("...")); assertTrue(result, result.contains("1")); assertTrue(result, result.contains("more")); }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertTrue(result, result.length() != 0)
[-] pred: org. junit. Assert. assertEquals ( msg, result )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( msg, result. isEmpty ( ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(final Handler h )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( msg, result. startsWith ( msg ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( msg ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( msg ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertTrue ( result. getTail(pipi ) )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result, result.length() != 0)
[-] pred:  org
************************************
************************************
[+] input: testToString() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{3}", (Formatter) null, (Comparator<LogRecord>) null);  assertEquals("0", f.toString()); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  String result = f.toString(); assertEquals("4", result); assertEquals(result, f.toString()); assertEquals(result, f.getTail((Handler) null)); "<AssertPlaceHolder>"; }
toString() { String result; try { result = formatRecord((Handler) null, false); } catch (final RuntimeException ignore) { result = super.toString(); } return result; }
[*] target: assertFalse(result.equals(f.toString()))
[-] pred: org. junit. Assert. assertEquals ( msg, result. toString ( ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString() ( ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toStringUnsorted ( ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString F ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString F ( ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString F )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toStringLocked ( ) )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString true )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result )

[*] target: assertFalse(result.equals(f.toString()))
[-] pred:  org. junit. Assert. assertEquals ( msg, result. toString true ) )
************************************
************************************
[+] input: testComparatorGetSet() { CollectorFormatter cf = new CollectorFormatter(); assertEquals(SeverityComparator.getInstance(), cf.getComparator()); cf.setComparator((Comparator<LogRecord>) null); assertNull(cf.getComparator());  cf.setComparator(SeverityComparator.getInstance()); "<AssertPlaceHolder>"; }
getComparator() { LogManagerProperties.checkLogManagerAccess(); return getComparator0(); }
[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred: org. junit. Assert. assertTrue ( ( ( cf. getComparator ( ) ) instanceof java. util. Collection ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( ( ( cf. getComparator_0 ) ) instanceof java. util. Collection ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( ( ( cf. getComparator() ( ) ) instanceof java. util. Collection ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( ( ( cf. getComparator that ( ) ) instanceof java. util. Collection ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. getComparator ( ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( ( ( cf. getComparator ( ) )()); ( ) ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( ( ( cf. getComparator(); ( ) ) instanceof java. util. Collection ) )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  org. junit. Assert. )

[*] target: assertEquals(SeverityComparator.getInstance(), cf.getComparator())
[-] pred:  )
************************************
************************************
[+] input: Exception { final String p = CollectorFormatter.class.getName(); Properties props = new Properties(); final String expect = CollectorFormatterTest.class.getName(); props.put(p.concat(".format"), expect); LogManager manager = LogManager.getLogManager(); try { read(manager, props); CollectorFormatter cf = new CollectorFormatter(); LogRecord first = new LogRecord(Level.SEVERE, Level.SEVERE.getName()); assertEquals("", cf.format(first)); String result = cf.getTail((Handler) null); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(expect, result)
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( first, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. equalTo ( expect ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( expect ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( expecting, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( results, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( first, org. hamcrest. CoreMatchers. equalTo ( result ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( prepare, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(expect, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. startsWith ( expect ) )
************************************
************************************
[+] input: Exception { final String p = CollectorFormatter.class.getName(); Properties props = new Properties(); props.put(p.concat(".formatter"), XMLFormatter.class.getName()); LogManager manager = LogManager.getLogManager(); try { read(manager, props); XMLFormatter xml = new XMLFormatter(); CollectorFormatter cf = new CollectorFormatter(); LogRecord first = new LogRecord(Level.SEVERE, Level.SEVERE.getName()); assertEquals("", cf.format(first)); String result = cf.getTail((Handler) null); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred: org. junit. Assert. assertEquals ( result, first )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org. junit. Assert. assertTrue ( result. equals ( p ) )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( p ) )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org. junit. Assert. assertEquals ( result, p )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org. junit. Assert. assertSame ( result, first )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org. junit. Assert. assertEquals ( first, result )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  , result )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  p )

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  org

[*] target: assertEquals(result, cf.finish(xml.getHead((Handler) null)) + cf.finish(xml.format(first)) + cf.finish(xml.getTail((Handler) null)) + '\n')
[-] pred:  )
************************************
************************************
[+] input: Exception { final String p = CollectorFormatter.class.getName(); Properties props = new Properties(); props.put(p.concat(".formatter"), "null"); props.put(p.concat(".format"), "{1}"); LogManager manager = LogManager.getLogManager(); try { read(manager, props); CollectorFormatter cf = new CollectorFormatter(); LogRecord first = new LogRecord(Level.SEVERE, Level.SEVERE.getName()); assertEquals("", cf.format(first)); String result = cf.getTail((Handler) null); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
finish(String s) { return s.trim(); }
[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred: org. junit. Assert. assertThat ( first, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( p ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( first ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertThat ( first, org. hamcrest. CoreMatchers. equalTo ( result ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( p ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertEquals ( first, result )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertTrue ( first. finish(String result ) )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertSame ( first, result )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result, cf.finish(cf.formatMessage(first)))
[-] pred:  , result )
************************************
************************************
[+] input: Exception { CollectorFormatter f = new CollectorFormatter( "{10,date," + DATE_TIME_FMT + "}", (Formatter) null, (Comparator<LogRecord>) null);  String init = f.getTail((Handler) null); DateFormat df = new SimpleDateFormat(DATE_TIME_FMT); Date dt = df.parse(init); tickMilli();  assertTrue(init.equals(f.getTail((Handler) null))); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred: org. junit. Assert. assertEquals ( new java. util. Date ( 2 ), init )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( 2, init. getTail(final Handler h )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Date ( 2 ), init )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( 2, init. getTail(final Handler h ) )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 2 ), init )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new 2, init. getTail(final Handler h )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 2 ), init )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( init ), dt )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( DEFAULT, init )

[*] target: assertTrue(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new DEFAULT, init )
************************************
************************************
[+] input: Exception { CollectorFormatter f = new CollectorFormatter( "{11,date," + DATE_TIME_FMT + "}", (Formatter) null, (Comparator<LogRecord>) null);  String init = f.getTail((Handler) null); DateFormat df = new SimpleDateFormat(DATE_TIME_FMT); Date dt = df.parse(init); tickMilli();  assertFalse(init.equals(f.getTail((Handler) null))); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred: org. junit. Assert. assertEquals ( new java. util. Date ( 2 ), init )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( 2, init. getTail(final Handler h )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Date ( 2 ), init )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( 2, init. getTail(final Handler h ) )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( init ), dt )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 2 ), init )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new 2, init. getTail(final Handler h )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 2 ), init )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( newDate ( 2, 2, 2 ), init )

[*] target: assertFalse(dt.equals(df.parse(f.getTail((Handler) null))))
[-] pred:  org. junit. Assert. assertEquals ( DEFAULT, init )
************************************
************************************
[+] input: testFormatGeneration() { String msg = "message"; CollectorFormatter f = new CollectorFormatter("{13}", (Formatter) null, (Comparator<LogRecord>) null);  assertEquals("1", f.getTail((Handler) null)); assertEquals("1", f.toString()); assertEquals("1", f.getTail((Handler) null)); assertEquals("1", f.toString());  f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  assertEquals("1", f.getTail((Handler) null)); //reset  assertEquals("2", f.getTail((Handler) null)); assertEquals("2", f.toString()); assertEquals("2", f.getTail((Handler) null)); assertEquals("2", f.toString());  f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg)); f.format(new LogRecord(Level.SEVERE, msg));  assertEquals("2", f.getTail((Handler) null)); //reset assertEquals("3", f.getTail((Handler) null)); assertEquals("3", f.toString()); assertEquals("3", f.toString()); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred: org. junit. Assert. assertThat ( f. getTail(restrest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ), org. hamcrest. CoreMatchers. equalTo ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ), org. hamcrest. CoreMatchers. equalTo ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ), org. hamcrest. CoreMatchers. equalTo ( true ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(GameOver ( ), org. hamcrest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(Sh((Handler ), org. hamcrest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest. CoreMatchers. is ( msg ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("3", f.getTail((Handler) null))
[-] pred:  org. junit. Assert. assertThat ( f. getTail(rest"" ), org. hamcrest. CoreMatchers. is ( msg ) )
************************************
************************************
[+] input: testGetSetFormat() { CompactFormatter cf = new CompactFormatter(); final String init = cf.getFormat(); String pattern = "foo"; assertNotEquals(pattern, cf.getFormat()); cf.setFormat(pattern); assertEquals(pattern, cf.getFormat()); LogRecord r = new LogRecord(Level.SEVERE, "bar"); assertEquals(pattern, cf.format(r));  cf.setFormat((String) null); "<AssertPlaceHolder>"; }
getFormat() { LogManagerProperties.checkLogManagerAccess(); return fmt; }
[*] target: assertEquals(init, cf.getFormat())
[-] pred: org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( init ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( init ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( initialize ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( initialize ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf. getFormat() ( init, r ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, r. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org. junit. Assert. assertEquals ( pattern, cf.setFormat. getFormat() ( ) )

[*] target: assertEquals(init, cf.getFormat())
[-] pred:  org
************************************
************************************
[+] input: testFormatWithMessage() { LogRecord record = new LogRecord(Level.SEVERE, "message"); CompactFormatter cf = new CompactFormatter(); String result = cf.format(record); "<AssertPlaceHolder>"; assertTrue(result, result.endsWith(LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. format ( record ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. format(LINE_SEP)); )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( startsWith ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( LoadDuration ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. formatted ( ). isEmpty ( ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( LoadUtil ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertTrue ( result. format(LINE_SEP)); ) )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  _1 )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  )
************************************
************************************
[+] input: testFormatWithMessageUpperCase() { LogRecord record = new LogRecord(Level.SEVERE, "message"); CompactFormatter cf = new CompactFormatter("%7$#.160S%n"); String result = cf.format(record); String upper = record.getMessage().toUpperCase(Locale.US); "<AssertPlaceHolder>"; assertTrue(result, result.startsWith(upper)); assertTrue(result, result.endsWith(LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred: org. junit. Assert. assertTrue ( ( upper == null ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( result. equals ( upper ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertEquals ( upper, result )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( upper ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( result. format ( top ). isEmpty ( ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( result. format ( ). isEmpty ( ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( upper. equals ( result ) )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org. junit. Assert. assertTrue ( result. format(LINE_SEP));, upper )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  )

[*] target: assertFalse(record.getMessage().equals(upper))
[-] pred:  org
************************************
************************************
[+] input: testFormatWithMessageLeftJustifiedPad() { LogRecord record = new LogRecord(Level.SEVERE, "message"); CompactFormatter cf = new CompactFormatter("%7$#-12.6s%n"); String result = cf.format(record); "<AssertPlaceHolder>"; assertTrue(result, result.contains("\u0020\u0020\u0020" + "\u0020\u0020\u0020")); assertTrue(result, result.endsWith(LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( result, format ( record ) )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( format, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  org. junit. Assert. assertEquals ( testName, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  assertEquals ( record, result )

[*] target: assertTrue(result, result.startsWith("messag|"))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageSurrogateEvenLess() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertTrue(result, result.startsWith("a\ud801\udc00")); assertTrue(result, result.endsWith("|Thro" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertTrue ( m. equals ( result ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertTrue ( m. startsWith ( result ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertTrue ( message, result. startsWith ( m ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertTrue ( ( m == result ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( m ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( COLUMN_Called, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageNoSurrogateEvenLess() { LogRecord record = new LogRecord(Level.SEVERE, "abbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("ab")); assertTrue(result, result.endsWith("|Thro" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEP)); ), result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEPMechanism ), result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageNoSurrogateOddEqual() { LogRecord record = new LogRecord(Level.SEVERE, "abbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.5s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("ab")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( error, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEPMechanism ), result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEP)); ), result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEPConverter ), result )
************************************
************************************
[+] input: testFormatMessageSurrogateOddLess() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.7s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertTrue(result, result.startsWith("a\ud801\udc00")); assertTrue(result, result.endsWith("|Throw" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( COLUMN_Called, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( numberOf, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageSurrogateOddEqual() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.5s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( report, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageSurrogateOddMore() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00" + "\ud801\udc00\ud801\udc00" + "\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.7s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00\ud801\udc00")); assertTrue(result, result.endsWith("|Thro" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( report, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageNoSurrogateEvenEqual() { LogRecord record = new LogRecord(Level.SEVERE, "abbbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("abb")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEP)); ), result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEPConverter ), result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEP warnings ), result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( error, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageSurrogateEvenEqual() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00" + "\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00\ud801\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, m )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( composite, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( report, result )

[*] target: assertEquals(6, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageNoSurrogateEvenMore() { LogRecord record = new LogRecord(Level.SEVERE, "abbbbbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("abb")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEP)); ), result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( error, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + CHAR_SEP)); ), result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEPConverter ), result )
************************************
************************************
[+] input: testFormatMessageSurrogateEvenMore() { LogRecord record = new LogRecord(Level.SEVERE, "a\ud801\udc00\ud801\udc00\ud801\udc00" + "\ud801\udc00\ud801\udc00" + "\ud801\udc00\ud801\udc00"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00\ud801\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( composite, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( most, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageNoSurrogateEvenHuge() { int cap = 202; LogRecord record = new LogRecord(Level.SEVERE, rpad("a", cap, "b")); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("abb")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( cap + LINE_SEP)); ), result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( cap + LINE_SEP warnings ), result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( sql, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ln, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( cap + LINE_SEPConverter ), result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )
************************************
************************************
[+] input: testFormatMessageSurrogateEvenHuge() { int cap = 202; LogRecord record = new LogRecord(Level.SEVERE, rpad("a", cap, "\ud801\udc00")); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.6s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00\ud801\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( resultSet, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result. substring ( 0, cap ), m )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageNoSurrogateOddHuge() { int cap = 201; LogRecord record = new LogRecord(Level.SEVERE, rpad("a", cap, "b")); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.5s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("ab")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ln, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( sql, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageNoSurrogateOddLess() { LogRecord record = new LogRecord(Level.SEVERE, "abbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.7s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("ab")); assertTrue(result, result.endsWith("|Throw" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( 12, result. compareTo ( m ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( 12, result. length ( ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( 12, result. indexOf ( m ) )

[*] target: assertEquals(5, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatMessageNoSurrogateOddMore() { LogRecord record = new LogRecord(Level.SEVERE, "abbbbbbb"); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.7s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(3, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("abb")); assertTrue(result, result.endsWith("|Thro" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEP)); ), result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( error, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEPConverter ), result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( m + LINE_SEP warnings ), result )

[*] target: assertEquals(8, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( sql, result )
************************************
************************************
[+] input: testFormatMessageSurrogateOddHuge() { int cap = 201; LogRecord record = new LogRecord(Level.SEVERE, rpad("a", cap, "\ud801\udc00")); String m = record.getMessage(); record.setThrown(new Throwable(m)); CompactFormatter cf = new CompactFormatter("%7$#.5s%n"); String result = cf.format(record);  "<AssertPlaceHolder>"; assertEquals(2, result.codePointCount(0, result.indexOf('|'))); assertTrue(result, result.startsWith("a\ud801\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred: org. junit. Assert. assertEquals ( m, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( result, m )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ln, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org. junit. Assert. assertEquals ( ( cap + 0 ), result )

[*] target: assertEquals(cap, m.codePointCount(0, m.length()))
[-] pred:  org
************************************
************************************
[+] input: testFormatWithMessageAndThrownLeftToRight() { LogRecord record = new LogRecord(Level.SEVERE, "message"); record.setThrown(new Throwable("thrown")); CompactFormatter cf = new CompactFormatter(); String result = cf.format(record); "<AssertPlaceHolder>"; assertTrue(result, result.contains("|")); assertTrue(result, result.contains(Throwable.class.getSimpleName())); assertTrue(result, result.contains(CompactFormatterTest.class.getSimpleName())); assertTrue(result, result.contains("testFormatWithMessageAndThrown")); assertTrue(result, result.contains(String.valueOf( record.getThrown().getStackTrace()[0].getLineNumber()))); assertTrue(result, result.endsWith(LINE_SEP)); }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( format(LINE_SEP));, result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( log, result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( input, result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  retrieves the content of a

[*] target: assertTrue(result, result.startsWith(record.getMessage()))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessage_LogRecordEvil() { LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(createEvilThrowable()); CompactFormatter cf = new CompactFormatter("%5$s"); String result = cf.formatMessage(record); assertNotNull(result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, either )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( either, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  format ( record ) ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  TYPE_1. format ( record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  format ( record ) ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatMaxThrowableWidthLeftToRight() { String fmt = LEFT_TO_RIGHT; int width = MAX_PRE; assertTrue(fmt, fmt.contains(Integer.toString(width))); assertTrue(String.valueOf(width), width < Integer.MAX_VALUE / 4);  CompactFormatter cf = new CompactFormatter(fmt); LogRecord record = new LogRecord(Level.SEVERE, ""); int padding = LINE_SEP.length(); for (int i = 0; i < width; i++) { record.setThrown(new Throwable(rpad("", i, "A"))); String result = cf.format(record); assertTrue(result, result.length() <= width + padding);  assertTrue(result, result.endsWith(LINE_SEP)); }  for (int i = width; i <= (width * 4); i++) { record.setThrown(new Throwable(rpad("", i, "A"))); String result = cf.format(record); "<AssertPlaceHolder>"; assertTrue(result, result.endsWith(LINE_SEP)); } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred: org. junit. Assert. assertEquals ( fmt, result )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( fmt ) )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit. Assert. assertTrue ( ( result == fmt ) )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( format ) )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit. Assert. assertTrue ( result. equals ( fmt ) )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org. junit, result )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  , result )

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  org

[*] target: assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding)
[-] pred:  )
************************************
************************************
[+] input: testFormatThrownClassDotSpace() { String msg = "test"; String prefix = IllegalStateException.class.getName() + ". "; Throwable t = new PrefixException(prefix, null, null); assertEquals(prefix, t.toString()); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  String cns = t.getClass().getSimpleName() + ": " + IllegalStateException.class.getSimpleName(); assertTrue(result, result.startsWith(cns)); assertTrue(result, result.indexOf(cns) == result.lastIndexOf(cns)); assertTrue(result, result.contains(msg)); assertTrue(result, result.indexOf(msg) == result.lastIndexOf(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( ste ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cns, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( stacktrace ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cns, cf. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cns, cf. format(l, cns ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, new java. lang. String ( cns ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cns, cf. format(l ; )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, log )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, expecting. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org
************************************
************************************
[+] input: testFormatThrownSimpleClassNameNullMessage() { //javax.management.BadStringOperationException String op = "some op"; Throwable t = new PrefixException(PrefixException.class.getSimpleName() + ": " + op, (String) null, null); assertNull(t.getMessage()); assertNotNull(t.toString()); assertTrue(t.toString().startsWith(t.getClass().getSimpleName()));  LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  String sn = t.getClass().getSimpleName(); assertTrue(result, result.startsWith(sn)); assertTrue(result, result.indexOf(sn) == result.lastIndexOf(sn)); assertTrue(result, result.contains(op)); assertTrue(result, result.indexOf(op) == result.lastIndexOf(op)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( exception, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( error, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( e, cf. format(l, null )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( expecting, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( error, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( f, cf. format(l, null )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( e, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( f, cf. format(l, ste )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( expecting, cf. format(l, ste )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org
************************************
************************************
[+] input: testFormatServerSidetMetroException() { //com.sun.xml.ws.developer.ServerSideException String msg = "server error"; NullPointerException npe = new NullPointerException(msg); Throwable t = new PrefixException(npe.getClass().getName(), msg, null); assertEquals(msg, npe.getMessage()); assertEquals(msg, t.getMessage()); assertEquals(npe.toString(), t.toString());  LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  String cns = t.getClass().getSimpleName() + ": " + npe.getClass().getSimpleName(); assertTrue(result, result.startsWith(cns)); assertTrue(result, result.indexOf(cns) == result.lastIndexOf(cns)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( stacktrace ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( stacktraces ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( stacktraces ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang3. StringUtils. format(l, cf ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l,strs )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang3. StringUtils. format(l, cf )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatThrownPrefixMessageRetainsFqn() { String msg = "java.io.tmpdir"; NullPointerException npe = new NullPointerException(msg); Throwable t = new PrefixException(npe.getClass().getName(), msg, null); assertEquals(msg, npe.getMessage()); assertEquals(msg, t.getMessage()); assertEquals(npe.toString(), t.toString());  LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  String cns = t.getClass().getSimpleName() + ": " + npe.getClass().getSimpleName(); assertTrue(result, result.startsWith(cns)); assertTrue(result, result.indexOf(cns) == result.lastIndexOf(cns)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( stacktraces ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( stacktraces ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( descr ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(cnsPlugin ( ste ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(cns)); ( ste ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(cns"" )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatThrownHiddenMessageRetainsFqn() { String msg = "java.io.tmpdir"; NullPointerException npe = new NullPointerException(msg); Throwable t = new ToStringException(npe.getClass().getName(), msg); assertEquals(msg, npe.getMessage()); assertEquals(msg, t.getMessage());  LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  String cns = t.getClass().getSimpleName() + ": " + npe.getClass().getSimpleName(); assertTrue(result, result.startsWith(cns)); assertTrue(result, result.indexOf(cns) == result.lastIndexOf(cns)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, cf. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cns, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, expecting. format(l, cns )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, new java. lang. String ( cns ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, expecting. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, assertNotNull, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, expecting. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatXMLParseXercesException() { //com.sun.org.apache.xerces.internal.xni.parser.XMLParseException String msg = "XML"; String prefix = "1:two:3:four"; Throwable t = new PrefixException(prefix, msg, null);  LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  assertTrue(prefix, t.toString().startsWith(prefix)); String cn = t.getClass().getSimpleName(); assertTrue(result, result.startsWith(cn)); assertTrue(result, result.indexOf(cn) == result.lastIndexOf(cn)); assertTrue(result, result.contains(prefix)); assertTrue(result, result.indexOf(prefix) == result.lastIndexOf(prefix)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, cn, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l"" )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l, frame ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ; )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l"" ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatGSSException() { //org.ietf.jgss.GSSException String msg = "Invalid name provided"; String prefix = PrefixException.class.getSimpleName(); Throwable t = new PrefixException(prefix, msg, null); assertTrue(t.toString().startsWith(t.getClass().getSimpleName())); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  assertTrue(prefix, t.toString().startsWith(prefix)); String cn = t.getClass().getSimpleName(); assertTrue(result, result.startsWith(cn)); assertTrue(result, result.indexOf(cn) == result.lastIndexOf(cn)); assertTrue(result, result.contains(prefix)); assertTrue(result, result.indexOf(prefix) == result.lastIndexOf(prefix)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, cn, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l, exception )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( ste, cn, cf ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( ste, cn ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( stacktrace ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. String. format ( stacktrace, cn, cf ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, org. apache. commons. lang. StringUtils. format ( ste, cn, cf ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(lPositionPosition ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, log )
************************************
************************************
[+] input: testFormatMismatchedTreeNodeException() { //org.antlr.runtime.MismatchedTreeNodeException String prefix = ToStringException.class.getSimpleName() + '(' + String.class.getName() + "!=" + Throwable.class.getName() + ')';  Throwable t = new ToStringException(prefix, (String) null); assertNull(t.getLocalizedMessage()); assertNull(t.getMessage()); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  assertTrue(prefix, t.toString().startsWith(prefix)); String cn = t.getClass().getSimpleName(); assertTrue(result, result.startsWith(cn)); assertTrue(result, result.indexOf(cn) == result.lastIndexOf(cn)); assertTrue(result, result.contains(prefix)); assertTrue(result, result.indexOf(prefix) == result.lastIndexOf(prefix)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( cn, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l, exception )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l, tx )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l"" )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( cn, cf. format(l ; }

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatInnerException() { String msg = "inner class"; String prefix = '(' + String.class.getName() + "!=" + Throwable.class.getName() + ')';  Throwable t = new ToStringException(ToStringException.class.getName() + prefix, msg); assertFalse(t.toString().contains(t.getLocalizedMessage())); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(t); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.format(record); StackTraceElement[] ste = t.getStackTrace(); String frame = CompactFormatterTest.class.getSimpleName() + '.' + ste[0].getMethodName() + "(:" + ste[0].getLineNumber() + ")";  assertTrue(prefix, t.toString().contains(prefix)); String cn = t.getClass().getSimpleName(); assertTrue(result, result.startsWith(cn)); assertTrue(result, result.indexOf(cn) == result.lastIndexOf(cn)); assertTrue(result, result.contains(prefix)); assertTrue(result, result.indexOf(prefix) == result.lastIndexOf(prefix)); assertTrue(result, result.contains(msg)); assertTrue(result, result.endsWith(frame));  cf = new CompactFormatter("%11$s %14$s"); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( msg, cn, cf. format(l )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l, frame )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l"" )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l, exception )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ; }

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(lConcurrency )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ; )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( msg, cn, cf. format(l) )
************************************
************************************
[+] input: testFormatMessage_ThrowableEvil() { CompactFormatter cf = new CompactFormatter("%6$s"); LogRecord r = new LogRecord(Level.SEVERE, ""); r.setThrown(createEvilThrowable()); String result = cf.formatMessage(r.getThrown()); assertNotNull(result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertTrue(cf.format(r).contains(result))
[-] pred: org. junit. Assert. assertEquals ( """", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""\n"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""Age"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""a"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( "" "", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""shed<sp>"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""shed"", result )

[*] target: assertTrue(cf.format(r).contains(result))
[-] pred:  org. junit. Assert. assertEquals ( ""Age"", result. length ( ) )
************************************
************************************
[+] input: testFormatLevel() { CompactFormatter cf = new CompactFormatter("%4$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); String result = cf.formatLevel(record); assertEquals(record.getLevel().getLocalizedName(), result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, cf. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( final LogRecord record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(bl LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( LogRecord record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(l, LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( CollectionUtils LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( rs ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(final LogRecord record ) )
************************************
************************************
[+] input: testFormatLogger() { CompactFormatter cf = new CompactFormatter("%3$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setSourceMethodName(null); record.setSourceClassName(null); record.setLoggerName(Object.class.getName()); String result = cf.formatLoggerName(record); assertNotNull(result); assertEquals(Object.class.getSimpleName(), result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, either. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  . assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )
************************************
************************************
[+] input: testFormatLoggerSurrogate() { CompactFormatter cf = new CompactFormatter("%3$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setSourceMethodName(null); record.setSourceClassName(null); record.setLoggerName("mail.Foo\ud801\udc00$\ud801\udc00Holder"); String result = cf.formatLoggerName(record); assertNotNull(result); assertEquals("\ud801\udc00Holder", result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( expecting ( record ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( Double. MAX_VALUE, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( AttributeType. DIRECTED, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( S. FINISHED, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( Fill, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ArrayConverter. DROP, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( In. IS_VALUE, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( In. IS_MILLIS, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit, result )
************************************
************************************
[+] input: testFormatSourceByLogger() { CompactFormatter cf = new CompactFormatter("%2$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setSourceMethodName(null); record.setSourceClassName(null); record.setLoggerName(Object.class.getName()); String result = cf.formatSource(record); assertEquals(Object.class.getSimpleName(), result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""19"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( "" "", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  . assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  formats the given result )
************************************
************************************
[+] input: testFormatSourceByClass() { CompactFormatter cf = new CompactFormatter("%2$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setSourceMethodName(null); record.setSourceClassName(Object.class.getName()); record.setLoggerName(""); String result = cf.formatSource(record); assertEquals(Object.class.getSimpleName(), result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. format(final LogRecord record ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format( final LogRecord record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( "" "", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )
************************************
************************************
[+] input: testFormatSourceByClassAndMethod() { CompactFormatter cf = new CompactFormatter("%2$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setSourceMethodName("method"); record.setSourceClassName(Object.class.getName()); record.setLoggerName(""); String result = cf.formatSource(record); assertFalse(result, record.getSourceClassName() .equals(record.getSourceMethodName())); assertTrue(result, result.startsWith(Object.class.getSimpleName())); assertTrue(result, result.endsWith(record.getSourceMethodName())); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, record. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, record. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""<sp>"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""2"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org
************************************
************************************
[+] input: testFormatThrownNullThrown() { CompactFormatter cf = new CompactFormatter("%6$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); String result = cf.formatThrown(record); assertTrue(result, result.startsWith(cf.formatMessage(record.getThrown()))); assertTrue(result, result.endsWith(cf.formatBackTrace(record))); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( "" "", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  TYPE_1. is ( null ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  . assertNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertNull result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertNull result
************************************
************************************
[+] input: testFormatThrownEvilThrown() { LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(createEvilThrowable()); CompactFormatter cf = new CompactFormatter("%6$s"); String result = cf.formatThrown(record); assertNotNull(result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, either )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ColorilThrowable, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, """" )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( either, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, either. log )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  TYPE_1. format ( record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatThrown() { Exception e = new IOException("Fake I/O"); e = new Exception(e.toString(), e); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%6$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e); String result = cf.formatThrown(record); assertTrue(result, result.startsWith(e.getCause().getClass().getSimpleName())); assertTrue(result, result.contains(cf.formatMessage(record.getThrown()))); assertTrue(result, result.endsWith(cf.formatBackTrace(record))); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. toString ( ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( 12, result. length ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. getName ( ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( records, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( 12, result. size ( ) )
************************************
************************************
[+] input: testFormatThrownEmptyEmpty() { //E[0] -> IOE[0] Exception e = new IOException("Fake I/O"); e.setStackTrace(new StackTraceElement[0]); e = new Exception(e.toString(), e); e.setStackTrace(new StackTraceElement[0]); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%6$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e);  String result = cf.formatThrown(record); assertEquals("IOException: Fake I/O", result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( Double. MAX_VALUE, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( recorder, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( Step. Status. quot, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( Object. Status. quot, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, record. format(l ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatThrownLocalized() { //sun.security.provider.PolicyParser$ParsingException CountLocalizedException cle = new CountLocalizedException(); CompactFormatter cf = new CompactFormatter(); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(cle); String result = cf.formatThrown(record); "<AssertPlaceHolder>"; assertTrue(cle.localizedMessage > 0); }
formatThrown(final LogRecord record) { String msg; final Throwable t = record.getThrown(); if (t != null) { String site = formatBackTrace(record); msg = formatMessage(t) + (isNullOrSpaces(site) ? "" : ' ' + site); } else { msg = ""; } return msg; }
[*] target: assertNotNull(result, result)
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( result. startsWith ( """" ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( """" ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( """". equals ( result ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( ( result == null ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( message, result. isEmpty ( ) )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result, result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertNotNull(result, result)
[-] pred:  assertNotNull ( result ) )

[*] target: assertNotNull(result, result)
[-] pred:  , result )
************************************
************************************
[+] input: testInheritsFormatMessage() { InheritsFormatMessage cf = new InheritsFormatMessage(); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(new Throwable()); String result = cf.formatThrown(record); assertNotNull(cf.getClass().getName(), result);  result = cf.formatError(record); "<AssertPlaceHolder>"; }
formatError(final LogRecord record) { return formatMessage(record.getThrown()); }
[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred: org. junit. Assert. assertEquals ( result, result )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert. assertEquals ( result, null )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert. assertEquals ( result, retrieved )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert. assertEquals ( absolutePath, result )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  org. junit. Assert.

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  retrieves a string representing a

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  retrieves the result from a

[*] target: assertNotNull(cf.getClass().getName(), result)
[-] pred:  retrieves the result of a
************************************
************************************
[+] input: Exception { LogRecord record = new LogRecord(Level.SEVERE, ""); try { long expected = 10L; if (Thread.currentThread().getId() == expected) { ++expected; } setLongThreadID(record, expected); assertNotEquals(expected, Thread.currentThread().getId());  CompactFormatter cf = new CompactFormatter("%10$d"); String output = cf.format(record); String expect = Long.toString(expected); assertEquals(expect, output);  setLongThreadID(record, -1L); output = cf.format(record); expect = Long.toString(-1L); assertEquals(expect, output);  //Test that downcast works right. Number id = cf.formatThreadID(record); assertEquals(-1, id.intValue()); assertEquals(expect, Long.toString(id.longValue()));  setLongThreadID(record, Long.MAX_VALUE >>> 1L); output = cf.format(record); expect = Long.toString(Long.MAX_VALUE >>> 1L); "<AssertPlaceHolder>";  int tid = getIntThreadID(record); assertTrue(String.valueOf(tid), tid < 0); } catch (NoSuchMethodException JDK8245302) { try { Method m = LogRecord.class.getMethod("getLongThreadID"); fail(m.toString()); } catch (NoSuchMethodException expect) { assertNull(LogManagerProperties.getLongThreadID(record)); } } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. Matchers. is ( expected ) )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertEquals ( expect, output. format( final LogRecord record )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. Matchers. is ( expect ) )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( expect ) )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertEquals ( expect, output. format(final LogRecord record )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertTrue ( ( ( format. format( LogRecord record ) ) == expected ) )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertEquals ( expected, output. format( final LogRecord record )

[*] target: assertEquals(expect, output)
[-] pred:  org. junit. Assert. assertEquals ( expect, output. format( Property LogRecord record )
************************************
************************************
[+] input: testFormatThreadID() { CompactFormatter cf = new CompactFormatter("%10$d"); LogRecord record = new LogRecord(Level.SEVERE, ""); setIntThreadID(record, 10); String output = cf.format(record); String expect = Long.toString(record.getThreadID()); assertEquals(expect, output);  setIntThreadID(record, -1); output = cf.format(record); Long ltid = LogManagerProperties.getLongThreadID(record); if (ltid == null) { expect = Long.toString((1L << 32L) - 1L); assertEquals(expect, output); } else { expect = Long.toString(-1L); assertEquals(expect, output); }  //Test that downcast works right. Number id = cf.formatThreadID(record); "<AssertPlaceHolder>"; assertEquals(expect, Long.toString(id.longValue())); }
formatThreadID(final LogRecord record) { Long id = LogManagerProperties.getLongThreadID(record); if (id == null) { id = Integer.toUnsignedLong(record.getThreadID()); } return id; }
[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred: org. junit. Assert. assertEquals ( expect, id )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertTrue ( expect. equals ( id ) )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertEquals ( expect, actual. toString ( ) )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertEquals ( expect, actual )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertSame ( expect, id )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertEquals ( expect, ids )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertNull ( id )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org. junit. Assert. assertNotNull ( id )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  , id )

[*] target: assertEquals(getIntThreadID(record), id.intValue())
[-] pred:  org
************************************
************************************
[+] input: testFormatThreadIDReturnsNull() { CompactFormatter cf = new ThreadIDReturnsNull(); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThreadID(10); assertNull(cf.formatThreadID(record)); String output = cf.format(record); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals("null", output)
[-] pred: org. junit. Assert. assertNull ( output )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertEquals ( null, output )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( logger. format(final LogRecord record )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( outputs )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( input )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( logger. format(l,record )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( logger. format(st)); )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( buffer )

[*] target: assertEquals("null", output)
[-] pred:  org. junit. Assert. assertNull ( writer )

[*] target: assertEquals("null", output)
[-] pred:  org
************************************
************************************
[+] input: testFormatError() { CompactFormatter cf = new CompactFormatter("%11$s"); LogRecord record = new LogRecord(Level.SEVERE, "message"); record.setThrown(new Throwable("error")); String output = cf.format(record); assertTrue(output.startsWith(record.getThrown() .getClass().getSimpleName())); assertTrue(output.endsWith(record.getThrown().getMessage())); "<AssertPlaceHolder>"; }
formatError(final LogRecord record) { return formatMessage(record.getThrown()); }
[*] target: assertEquals(output, cf.formatError(record))
[-] pred: org. junit. Assert. assertEquals ( formatError(record.getThrown().getClass, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( output, formatError(record.getThrown().getClass, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( output, cf.format(record.getThrown().getClass, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( GuidedDecisionTableConstants. err, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( output, formatter. formatError(final LogRecord record )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( output, cf.format ( record ) )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatting, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( expected, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  , output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org
************************************
************************************
[+] input: testFormatErrorNullMessage() { CompactFormatter cf = new CompactFormatter("%11$s"); LogRecord record = new LogRecord(Level.SEVERE, "message"); record.setThrown(new Throwable()); String output = cf.format(record); assertNotNull(output); "<AssertPlaceHolder>"; }
formatError(final LogRecord record) { return formatMessage(record.getThrown()); }
[*] target: assertEquals(output, cf.formatError(record))
[-] pred: org. junit. Assert. assertEquals ( formatMessage(record.getThrown());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatError(new Throwable());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( """", output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatError(final LogRecord record ), output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formattingError(new Throwable());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatMessage(record.getFailed());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatMessage(record.getRuntimeException());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( formatError(new throw());, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  org. junit. Assert. assertEquals ( null, output )

[*] target: assertEquals(output, cf.formatError(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatMessageError() { CompactFormatter cf = new CompactFormatter("%12$s"); LogRecord record = new LogRecord(Level.SEVERE, "message"); record.setThrown(new Throwable("error")); String output = cf.format(record); int t = output.indexOf(record.getThrown().getClass().getSimpleName()); int f = output.indexOf('|'); int m = output.indexOf(record.getThrown().getMessage());  assertTrue(output, t > -1); assertTrue(output, m > -1); assertTrue(output, f > -1); assertTrue(output, t < m); assertTrue(output, t > f); assertTrue(output, f < m); assertTrue(output, output.startsWith(record.getMessage())); "<AssertPlaceHolder>"; }
formatError(final LogRecord record) { return formatMessage(record.getThrown()); }
[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred: org. junit. Assert. assertEquals ( t, output. formatError(final LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError( LogRecord record ) )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError(Linear LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( output, formatter. formatError(final LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError(Current LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( output, formatError(final LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError( LogRecord record )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( output, t )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  , output )

[*] target: assertTrue(output, output.endsWith(cf.formatError(record)))
[-] pred:  org
************************************
************************************
[+] input: testFormatErrorMessage() { CompactFormatter cf = new CompactFormatter("%13$s"); LogRecord record = new LogRecord(Level.SEVERE, "message"); record.setThrown(new Throwable("error")); String output = cf.format(record); int t = output.indexOf(record.getThrown().getClass().getSimpleName()); int f = output.indexOf('|'); int m = output.indexOf(record.getThrown().getMessage());  assertTrue(output, t > -1); assertTrue(output, m > -1); assertTrue(output, f > -1); assertTrue(output, t < m); assertTrue(output, t < f); assertTrue(output, f > m); assertTrue(output, output.endsWith(record.getMessage())); "<AssertPlaceHolder>"; }
formatError(final LogRecord record) { return formatMessage(record.getThrown()); }
[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred: org. junit. Assert. assertEquals ( t, output. formatError(final LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, formatter. formatError(final LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError(Linear LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, record. formatError(final LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( output, formatError(final LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError( LogRecord record ) )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( t, output. formatError(Current LogRecord record )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org. junit. Assert. assertEquals ( output, t )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  , output )

[*] target: assertTrue(output, output.startsWith(cf.formatError(record)))
[-] pred:  org
************************************
************************************
[+] input: testErrorApplyReturnsNull() { CompactFormatter cf = new ApplyReturnsNull(); LogRecord r = new LogRecord(Level.SEVERE, ""); for (int i = 0; i < 10; i++) { String output = cf.formatError(r); assertNotNull(output); r.setThrown(new Throwable(Integer.toString(i), r.getThrown())); "<AssertPlaceHolder>"; } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertNotNull(cf.format(r))
[-] pred: org. junit. Assert. assertNull ( output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( null, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( i, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( N. MAX_VALUE, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( N. toString ( i ), output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( i, output. substring ( i ) )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( outputs )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( e, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org

[*] target: assertNotNull(cf.format(r))
[-] pred:  )
************************************
************************************
[+] input: testFormatApplyReturnsNull() { CompactFormatter cf = new ApplyReturnsNull(); LogRecord r = new LogRecord(Level.SEVERE, ""); for (int i = 0; i < 10; i++) { String output = cf.format(r); assertNotNull(output); r.setThrown(new Throwable(Integer.toString(i), r.getThrown())); "<AssertPlaceHolder>"; } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertNotNull(cf.format(r))
[-] pred: org. junit. Assert. assertNull ( output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( cf. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( formatter. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( formatter. format(final LogRecord record ) )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( fr. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( outputs )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( delegate. format(final LogRecord record ) )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( delegate. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( null, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( fr. format(final LogRecord record ) )
************************************
************************************
[+] input: testFormatBackTrace() { Exception e = new IOException("Fake I/O"); e = new Exception(e.toString(), e); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e);  String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith("CompactFormatterTest")); assertTrue(result, result.contains("testFormatBackTrace")); assertTrue(result, Character.isDigit(result.charAt(result.length() - 2))); assertFalse(result, result.contains(".java")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( 2, result. length ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ( - 2 ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( 2, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( two, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( 2.0, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ( - 2 2 ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""2"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( concatenation, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( 2, result. size ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  2, result )
************************************
************************************
[+] input: testBackTraceApplyReturnsNull() { CompactFormatter cf = new ApplyReturnsNull(); LogRecord r = new LogRecord(Level.SEVERE, ""); for (int i = 0; i < 10; i++) { String output = cf.formatBackTrace(r); assertNotNull(output); r.setThrown(new Throwable(Integer.toString(i), r.getThrown())); "<AssertPlaceHolder>"; } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertNotNull(cf.format(r))
[-] pred: org. junit. Assert. assertNull ( output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( cf. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( outputs )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( formatter. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( formatter. format(final LogRecord record ) )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertEquals ( null, output )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( Utils. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( delegate. format(final LogRecord record ) )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( delegate. format(final LogRecord record )

[*] target: assertNotNull(cf.format(r))
[-] pred:  org. junit. Assert. assertNull ( Utils. format(csvcsvY' )
************************************
************************************
[+] input: testFormatBackTraceUnknown() { Exception e = new IOException("Fake I/O"); e.setStackTrace(new StackTraceElement[]{ new StackTraceElement(CompactFormatterTest.class.getName(), "testFormatBackTrace", null, -2)}); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e); String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith("CompactFormatterTest")); assertTrue(result, result.contains("testFormatBackTrace")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( records, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( recorder, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( rec, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( recording, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org
************************************
************************************
[+] input: testFormatBackTracePunt() { final Class<?> k = Collections.class; Exception e = new NullPointerException("Fake NPE"); e.setStackTrace(new StackTraceElement[]{ new StackTraceElement(k.getName(), "newSetFromMap", null, 3878)}); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e); String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith(k.getSimpleName())); assertTrue(result, result.contains("newSetFromMap")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, new org. apache. hadoop. fs. Path ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new org. apache. hadoop. fs. util. LogRecord ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. hadoop. util. Utils. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new org. apache. hadoop. fs. format(l, result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new LogRecord ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, java. lang. String. format ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new LogRecord ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. hadoop. util. Files. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )
************************************
************************************
[+] input: testFormatBackTraceChainPunt() { final Class<?> k = Collections.class; Throwable e = new NullPointerException("Fake NPE"); e.setStackTrace(new StackTraceElement[0]); e = new RuntimeException(e); e.setStackTrace(new StackTraceElement[]{ new StackTraceElement(k.getName(), "newSetFromMap", k.getSimpleName() + ".java", 3878)}); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e); String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith(k.getSimpleName())); assertTrue(result, result.contains("newSetFromMap")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, org. apache. hadoop. util. Utils. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. commons. lang. System. format ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. commons. lang. StringUtils. format ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new org. apache. hadoop. fs. Path ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. hadoop. util. Utils. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. hadoop. util. StringUtils. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, formatter. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatBackTraceEmptyEmpty() { //E[0] -> IOE[0] Exception e = new IOException("Fake I/O"); e.setStackTrace(new StackTraceElement[0]); e = new Exception(e.toString(), e); e.setStackTrace(new StackTraceElement[0]); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e);  String result = cf.formatBackTrace(record); assertTrue(result, result.isEmpty()); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. format(l, fmt"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. format(l, fmt2 ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record. format(l, fmt_EMPTY, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( records, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( separator, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  . isEmpty ( ) )
************************************
************************************
[+] input: testFormatBackTraceNonEmptyEmpty() { final Class<?> k = Collection.class; //RE[1] -> NPE[0] Throwable e = new NullPointerException("Fake NPE"); e.setStackTrace(new StackTraceElement[0]); e = new RuntimeException(e); e.setStackTrace(new StackTraceElement[]{ new StackTraceElement(k.getName(), "contains", k.getSimpleName() + ".java", 288)}); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e);  //When root trace is empty the parent trace is used. String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith(k.getSimpleName())); assertTrue(result, result.contains("contains")); assertTrue(result, result.contains(":288")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, cf. format( final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(final LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( joiner ( ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( joiner joiner )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(bl LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( HttpClient LogRecord record )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, cf. format( joiner )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatBackTraceNoFileExt() { final Class<?> k = Collection.class; //RE[1] -> NPE[0] Throwable e = new NullPointerException("Fake NPE"); e.setStackTrace(new StackTraceElement[0]); e = new RuntimeException(e); e.setStackTrace(new StackTraceElement[]{ new StackTraceElement(k.getName(), "contains", "Foo", 288)}); assertNotNull(e.getMessage(), e.getMessage());  CompactFormatter cf = new CompactFormatter("%14$s"); LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(e); String result = cf.formatBackTrace(record); assertTrue(result, result.startsWith(k.getSimpleName())); assertTrue(result, result.contains("contains")); assertTrue(result, result.contains(":288")); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new org. apache. hadoop. fs. Path ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. commons. lang. StringUtils. format ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. commons. lang. System. format ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, org. apache. ph191919. format(l, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, new LogRecord ( result ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertSame ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( record, output )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  )
************************************
************************************
[+] input: testFormatBackTraceEvil() { LogRecord record = new LogRecord(Level.SEVERE, ""); record.setThrown(createEvilThrowable()); CompactFormatter cf = new CompactFormatter("%14$s"); String result = cf.formatBackTrace(record); assertNotNull(result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( record, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, format ( record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( result, either )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ColorilThrowable, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( type, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( either, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  TYPE_1. format ( record ) )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  format ( record ) ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  assertEquals ( record, result )
************************************
************************************
[+] input: testFormatBackTraceEvilIgnore() { LogRecord record = new LogRecord(Level.SEVERE, ""); Throwable second = new Throwable(); Throwable first = new Throwable(second); second.initCause(first); //Pure Evil. first.setStackTrace(new StackTraceElement[0]); second.setStackTrace(new StackTraceElement[]{ new StackTraceElement(CompactFormatterTest.class.getName(), "dummy$bridge", null, -1)}); record.setThrown(first); CompactFormatter cf = new CompactFormatter("%14$s"); String result = cf.formatBackTrace(record); assertNotNull(result); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(result, cf.format(record))
[-] pred: org. junit. Assert. assertEquals ( first, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( first. format(st ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( first. format ( first ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( first. format( first ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( first. toString ( ), result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( first. format(st, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals(result, cf.format(record))
[-] pred:  org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testApply() { CompactFormatter cf = new CompactFormatter(); "<AssertPlaceHolder>";  final Throwable t = new Throwable(); Throwable e = cf.apply(t); assertSame(t, e); }
apply(final Throwable t) { return SeverityComparator.getInstance().apply(t); }
[*] target: assertNull(cf.apply((Throwable) null))
[-] pred: org. junit. Assert. assertEquals ( 1, cf. apply( final Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply(final Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply ( new Throwable ) )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 5, cf. apply(final Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply((t ) )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( true, cf. apply(final Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply(Delta Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply(final Throwable code )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( true, cf. apply( final Throwable t )

[*] target: assertNull(cf.apply((Throwable) null))
[-] pred:  org. junit. Assert. assertEquals ( 1, cf. apply(st )
************************************
************************************
[+] input: testIgnorePrivateInnerClass() { CompactFormatter cf = new CompactFormatter(); String n = Arrays.asList("foo", "bar", "baz").getClass().getName(); assertTrue(n, n.contains("$"));  String f = n.concat(".java"); StackTraceElement s = new StackTraceElement(n, "size", f, 20); "<AssertPlaceHolder>"; }
ignore(final StackTraceElement s) { return isUnknown(s) || defaultIgnore(s); }
[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred: org. junit. Assert. assertTrue ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(final StackTraceElement s )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(final StackTraceElement s )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(finalJPElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(finalJPElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. whether ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert..False ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. boolean value ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(finalJPElement s )
************************************
************************************
[+] input: testIgnorePrivateStaticInnerClass() { CompactFormatter cf = new CompactFormatter(); String n = Collections.emptySet().getClass().getName(); assertTrue(n, n.contains("$"));  String f = n.concat(".java"); StackTraceElement s = new StackTraceElement(n, "size", f, 20); "<AssertPlaceHolder>"; }
ignore(final StackTraceElement s) { return isUnknown(s) || defaultIgnore(s); }
[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred: org. junit. Assert. assertFalse ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(final StackTraceElement s )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(finalJPElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(finalJPElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertTrue ( cf. ignore(final StackTraceElement s )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(finalJPElement s )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert..False ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. whether ( cf. ignore(final StackTraceElement s ) )

[*] target: assertFalse(s.toString(), cf.ignore(s))
[-] pred:  org. junit. Assert. assertFalse ( cf. ignore(final StackTraceElement s) )
************************************
************************************
[+] input: Exception { DurationFilterExt source = new DurationFilterExt(); final Filter clone = source.clone(); assertNotNull(clone); assertFalse(source == clone); assertTrue(source.equals(clone)); assertEquals(source.getClass(), clone.getClass());  LogRecord r = new LogRecord(Level.INFO, ""); assertTrue(source.isLoggable(r)); assertFalse(source.equals(clone)); "<AssertPlaceHolder>"; }
equals(final Object obj) { if (this == obj) { //Avoid locks and deal with rapid state changes. return true; }  if (obj == null || getClass() != obj.getClass()) { return false; }  final long r; final long d; final long c; final long p; final long s; synchronized (this) { r = this.records; d = this.duration; c = this.count; p = this.peak; s = this.start; }  final DurationFilter other = (DurationFilter) obj; synchronized (other) { if (r != other.records || d != other.duration || c != other.count || p != other.peak || s != other.start) { return false; } } return true; }
[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred: org. junit. Assert. assertTrue ( r. equals ( org. hamcrest. CoreMatchers. is ( true ) ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. apache. hadoop. util. LogRecord. class ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. RO(), clone.getClass()); LogRecord. object ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. RO canvas. clone.getClass()); LogRecord. object ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. apache. hadoop. util. StringUtils. class ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. some. rs. c. util. LogRecord. class ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. hamcrest. CoreMatchers. is ( false ) ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. RO 0 ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( org. RO(), clone.getClass ) )

[*] target: assertTrue(((DurationFilterExt) clone).clone().equals(clone))
[-] pred:  org. junit. Assert. assertTrue ( r. equals ( r ) )
************************************
************************************
[+] input: Exception { long millis = 0; final int records = 10; final int duration = 5 * 60 * 1000; Level lvl = Level.INFO; DurationFilterExt sf = new DurationFilterExt(records, duration); String msg = Long.toString(millis); LogRecord r = new LogRecord(lvl, msg);  //Allow for (int i = 0; i < records; i++) { setEpochMilli(r, millis); assertTrue(Integer.toString(i), sf.isLoggable(r)); }  Filter clone = sf.clone(); for (int i = 0; i < records; i++) { setEpochMilli(r, millis); String m = Integer.toString(i); assertFalse(m, sf.isLoggable(r)); assertTrue(m, clone.isLoggable(r)); }  assertFalse(sf.isLoggable(r)); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertFalse(clone.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( msg, clone. isLoggable(final LogRecord record )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable(LinearLayout ( ) )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable(final LogRecord record ) )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable( NOMATCH )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable(Record ( ) )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable(LinearObject ( ) )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable(cancano )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable( logRecords )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, clone. isLoggable( NOMATCH, record )

[*] target: assertFalse(clone.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, rev )
************************************
************************************
[+] input: Exception { final int records = 10; final int duration = 1000; Level lvl = Level.INFO; DurationFilter sf = new DurationFilter(records, duration); assertTrue(sf.isLoggable());  LogRecord r = new LogRecord(lvl, ""); assertTrue(sf.isLoggable(r)); assertTrue(sf.isLoggable());  //Allow for (int i = 1; i < records; i++) { r = new LogRecord(lvl, ""); String msg = Integer.toString(i); assertTrue(msg, sf.isLoggable()); assertTrue(msg, sf.isLoggable(r)); }  assertFalse(sf.isLoggable()); assertFalse(sf.isLoggable(r));  tickMilli(duration + 100); //Cool down and allow.  for (int i = 0; i < records; i++) { r = new LogRecord(lvl, ""); String msg = Integer.toString(i); assertTrue(msg, sf.isLoggable()); assertTrue(msg, sf.isLoggable(r)); }  assertFalse(sf.isLoggable()); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertFalse(sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( msg, r. isLoggable(final LogRecord.()); ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(final LogRecords ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable( final LogRecord.()); ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(LinearLayout msg )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(final LogRecordBuilder )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(Record ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(final LogRecords )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(LinearLayout )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. msg, msg )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org
************************************
************************************
[+] input: Exception { final int records = 10; final int duration = 1000; Level lvl = Level.INFO; DurationFilter sf = new DurationFilter(records, duration); LogRecord r = new LogRecord(lvl, ""); assertTrue(sf.isIdle()); assertTrue(sf.isLoggable(r)); assertFalse(sf.isIdle());  //Allow for (int i = 1; i < records; i++) { r = new LogRecord(lvl, ""); String msg = Integer.toString(i); assertFalse(msg, sf.isIdle()); assertTrue(msg, sf.isLoggable(r)); }  assertFalse(sf.isIdle()); assertFalse(sf.isLoggable(r));  tickMilli(duration + 100); //Cool down and allow.  assertTrue(sf.isIdle()); for (int i = 0; i < records; i++) { r = new LogRecord(lvl, ""); String msg = Integer.toString(i); assertTrue(msg, sf.isLoggable(r)); assertFalse(msg, sf.isIdle()); }  assertFalse(sf.isIdle()); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertFalse(sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( msg, r. isLoggable(Record ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(records()); ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(records());. length )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable( instant ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable( instant instant ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable( Registration.toString ( ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable(RepresentationRepresentation ( records ) )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, r. isLoggable( records());. length )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( msg, records )

[*] target: assertFalse(sf.isLoggable(r))
[-] pred:  org
************************************
************************************
[+] input: testSaturation() { long millis = 0; final int records = 10; final int duration = 5 * 60 * 1000; Level lvl = Level.INFO; DurationFilter sf = new DurationFilter(records, duration); LogRecord r;  //Allow for (int i = 0; i < records; i++) { ++millis; r = new LogRecord(lvl, Long.toString(millis)); setEpochMilli(r, millis); assertTrue(Integer.toString(i), sf.isLoggable(r)); }  //Saturate. for (int i = 0; i < records * 10; i++) { r = new LogRecord(lvl, Long.toString(millis)); setEpochMilli(r, millis); assertFalse(Integer.toString(i), sf.isLoggable(r)); }  //Cool down and allow. millis += duration; for (int i = 0; i < records; i++) { ++millis; r = new LogRecord(lvl, Long.toString(millis)); setEpochMilli(r, millis); "<AssertPlaceHolder>"; } }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, r. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( lvl, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable( getActivity ( ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable(Deadline ( ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable(cancancan_BYTES )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record. isLoggable(final LogRecord record ), r. isLoggable(Deadline ( ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable(cancano )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable(cancan_BYTES )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), r. isLoggable(cancancan_VALUE )
************************************
************************************
[+] input: testPredictedOverflow() { int records = 4; int duration = 4; DurationFilter sf = new DurationFilter(records, duration); for (int i = 0; i < records; i++) { LogRecord r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MAX_VALUE); assertTrue(sf.isLoggable(r)); }  LogRecord r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MAX_VALUE); assertFalse(sf.isLoggable(r));  r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MAX_VALUE + duration); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertTrue(sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), r )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), r. isLoggable(RecordIds )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), r. isLoggable( isDirtyResponse )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), r. isLoggable( joException )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, sf. isLoggable(final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( records, sf. isLoggable(final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), records )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 12, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, sf. isLoggable(final LogRecord record ) )
************************************
************************************
[+] input: testMillisNegativeSaturation() { int records = 4; int duration = 4; DurationFilter sf = new DurationFilter(records, duration); for (int i = 0; i < records; i++) { LogRecord r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MIN_VALUE); assertTrue(Integer.toString(i), sf.isLoggable(r)); }  LogRecord r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MIN_VALUE); assertFalse(sf.isLoggable(r));  r = new LogRecord(Level.INFO, ""); setEpochMilli(r, Long.MIN_VALUE + duration); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertTrue(sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( record, r. isLoggable(final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( records, r. isLoggable(final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, r. isLoggable(final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(final LogRecord record ), records )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( records, r. isLoggable(final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, r. isLoggable( final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( record, r. isLoggable( final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( records, r. isLoggable( final LogRecord record )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( records, r. isLoggable( final LogRecord record ) )

[*] target: assertTrue(sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 12, r. isLoggable(final LogRecord record ) )
************************************
************************************
[+] input: Exception { long millis = System.currentTimeMillis(); final int records = 1000; final int duration = 5 * 60 * 1000; Level lvl = Level.INFO; DurationFilter sf = new DurationFilter(records, duration); LogRecord r;  int period = duration / records; assertEquals(period, (double) duration / (double) records, 0.0); for (int i = 0; i < records * records; i++) { r = new LogRecord(lvl, Long.toString(millis)); setEpochMilli(r, millis); "<AssertPlaceHolder>"; millis += period; } }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( 15, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 19, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( sf. isLoggable(final LogRecord record ), period )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( lvl, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 19, sf. isLoggable(final LogRecord record )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 19, sf. isLoggable(Linear LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 12, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 255, sf. isLoggable(final LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( 15, sf. isLoggable(Linear LogRecord record ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org
************************************
************************************
[+] input: testFloorRate() { double millis = 0.0d; final int records = 30; final int duration = 400; Level lvl = Level.INFO; DurationFilter sf = new DurationFilter(records, duration); LogRecord r; long period = duration / records; for (int i = 0; i < records; i++) { r = new LogRecord(lvl, Long.toString((long) millis)); setEpochMilli(r, (long) millis); assertTrue(Integer.toString(i), sf.isLoggable(r)); millis += period; }  //Saturated for records + one. for (int i = 0; i <= records; i++) { r = new LogRecord(lvl, Long.toString((long) millis)); setEpochMilli(r, (long) millis); assertFalse(Integer.toString(i), sf.isLoggable(r)); millis += period; }  for (int i = 0; i < records; i++) { r = new LogRecord(lvl, Long.toString((long) millis)); setEpochMilli(r, (long) millis); "<AssertPlaceHolder>"; millis += period; } }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( r. isLoggable( period;, ( millis + period; ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(cancanoness ( ), millis )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. isLoggable(2424Record ( ) ) >= millis ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(cancancans ( ), millis )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. isLoggable(LinearLayout ) && ( r. isLoggable( period ) ) ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r, r. isLoggable(LinearLayout ( ) )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( r. isLoggable(2424 ( record ), millis )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( new LogRecord(lvl, Long.toString((long ), r. isLoggable( logRecords )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( new LogRecord(lvl, Long.toString((long ), r. isLoggable( FreePosition )

[*] target: assertTrue(Integer.toString(i), sf.isLoggable(r))
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. isLoggable(2424Record ( ) ) > 0 ) )
************************************
************************************
[+] input: testEquals() { DurationFilter one = new DurationFilter(); DurationFilter two = new DurationFilter(); assertFalse(one.equals((Object) null)); assertFalse(two.equals((Object) null)); assertTrue(one.equals(one)); assertTrue(two.equals(two)); assertTrue(one.equals(two)); assertTrue(two.equals(one));  LogRecord r = new LogRecord(Level.INFO, ""); assertTrue(one.isLoggable(r)); assertTrue(one.equals(one)); assertTrue(two.equals(two)); assertFalse(one.equals(two)); assertFalse(two.equals(one));  assertTrue(two.isLoggable(r)); assertTrue(two.equals(two)); assertTrue(one.equals(two)); assertTrue(two.equals(one));  assertTrue(two.isLoggable(r)); assertTrue(one.equals(one)); assertTrue(two.equals(two)); assertFalse(one.equals(two)); assertFalse(two.equals(one));   final long then = r.getMillis(); one = new DurationFilter(); two = new DurationFilter(); assertTrue(one.isLoggable(r)); setEpochMilli(r, then + 1); assertTrue(one.isLoggable(r)); assertTrue(two.isLoggable(r)); setEpochMilli(r, then); assertTrue(two.isLoggable(r)); assertFalse(one.equals(two)); assertFalse(two.equals(one));  one = new DurationFilter(); two = new DurationFilterExt(); assertFalse(one.equals(two)); assertFalse(two.equals(one));  one = new DurationFilter(1, 1); two = new DurationFilter(2, 1); assertFalse(one.equals(two)); assertFalse(two.equals(one));  one = new DurationFilter(1, 1); two = new DurationFilter(1, 2); assertFalse(one.equals(two)); "<AssertPlaceHolder>"; }
equals(final Object obj) { if (this == obj) { //Avoid locks and deal with rapid state changes. return true; }  if (obj == null || getClass() != obj.getClass()) { return false; }  final long r; final long d; final long c; final long p; final long s; synchronized (this) { r = this.records; d = this.duration; c = this.count; p = this.peak; s = this.start; }  final DurationFilter other = (DurationFilter) obj; synchronized (other) { if (r != other.records || d != other.duration || c != other.count || p != other.peak || s != other.start) { return false; } } return true; }
[*] target: assertFalse(two.equals(one))
[-] pred: org. junit. Assert. assertTrue ( one. equals ( two ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( one ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( two. equals ( one ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( three ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( many ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( second ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( first ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( another ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( more ) )

[*] target: assertFalse(two.equals(one))
[-] pred:  org. junit. Assert. assertTrue ( one. equals ( to ) )
************************************
************************************
[+] input: testHashCode() { DurationFilter one = new DurationFilter(10, 10); DurationFilter two = new DurationFilter(10, 10); DurationFilter three = new DurationFilter(3, 3);  assertTrue(one.hashCode() == two.hashCode()); assertFalse(one.hashCode() == three.hashCode());  LogRecord r = new LogRecord(Level.INFO, ""); assertTrue(one.isLoggable(r)); assertTrue(one.hashCode() == two.hashCode()); "<AssertPlaceHolder>"; }
hashCode() { int hash = 3; hash = 89 * hash + Long.hashCode(records); hash = 89 * hash + Long.hashCode(duration); return hash; }
[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred: org. junit. Assert. assertEquals ( one. hashCode(), r. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode(), two. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode(), three. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode ( ), three. hashCode ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode() ( ), three. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode() ( ), two. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode(), one. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode(), a. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( one. hashCode ( ), two. hashCode() ( ) )

[*] target: assertFalse(one.hashCode() == three.hashCode())
[-] pred:  org
************************************
************************************
[+] input: testRecords() { DurationFilter one = new DurationFilter(); DurationFilter two = new DurationFilter(); final long records = 1000L; assertEquals(records, one.getRecords()); assertEquals(records, two.getRecords()); assertEquals(one, two);  one.setRecords(1L); assertEquals(1L, one.getRecords()); assertNotEquals(one, two);  two.setRecords(one.getRecords()); assertEquals(one, two);  one.setRecords(-1L); assertEquals(records, one.getRecords()); one.setRecords(0L); "<AssertPlaceHolder>"; }
getRecords() { LogManagerProperties.checkLogManagerAccess(); return this.records; }
[*] target: assertEquals(records, one.getRecords())
[-] pred: org. junit. Assert. assertEquals ( records, one. getRecords() ( ) )

[*] target: assertEquals(records, one.getRecords())
[-] pred:  org. junit. Assert. assertEquals ( records, two. getRecords() ( ) )

[*] target: assertEquals(records, one.getRecords())
[-] pred:  org. junit. Assert. assertEquals ( records, ( ( records * 1 ) - records ) )

[*] target: assertEquals(records, one.getRecords())
[-] pred:  org. junit. Assert. assertEquals ( records, ( ( records - 1 ) * 10 ) )

[*] target: assertEquals(records, one.getRecords())
[-] pred:  org. junit. Assert. assertEquals ( records, ( ( records - 1 ) * 1000 ) )

[*] target: assertEquals(records, one.getRecords())
[-] pred:  tests how many records are in the one

[*] target: assertEquals(records, one.getRecords())
[-] pred:  tests how many records are in one

[*] target: assertEquals(records, one.getRecords())
[-] pred:  tests how many records are 0

[*] target: assertEquals(records, one.getRecords())
[-] pred:  the number of records in one

[*] target: assertEquals(records, one.getRecords())
[-] pred:  returns the records
************************************
************************************
[+] input: testCountExceedsRecords() { DurationFilter one = new DurationFilter(10L, 15L * 60L * 1000L); LogRecord r = new LogRecord(Level.INFO, ""); final long now = r.getMillis(); for (long i = 1L; i <= one.getRecords() / 2L; ++i) { assertTrue(one.isLoggable(r)); setEpochMilli(r, now + i); } one.setRecords(1L); "<AssertPlaceHolder>"; }
isLoggable(final LogRecord record) { return accept(record.getMillis()); }
[*] target: assertFalse(one.isLoggable(r))
[-] pred: org. junit. Assert. assertEquals ( one. isLoggable(final LogRecord record ), a. isLoggable( getActivity ( ) )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable(final LogRecord record ), result )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable( final LogRecord record ), result )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable(final LogRecord record ),

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable( final LogRecord record ), now )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable(final LogRecord record ), appropriate. isLoggable( getActivity ( ) )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable( final LogRecord record ), a. isLoggable( getActivity ( ) )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertEquals ( one. isLoggable(final LogRecord record ), now )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertTrue ( one. isLoggable( final LogRecord record ) )

[*] target: assertFalse(one.isLoggable(r))
[-] pred:  org. junit. Assert. assertTrue ( one. isLoggable( LogRecord record ) )
************************************
************************************
[+] input: testDurationMillis() { DurationFilter one = new DurationFilter(); DurationFilter two = new DurationFilter(); final long duration = 15L * 60L * 1000L; assertEquals(duration, one.getDurationMillis()); assertEquals(duration, two.getDurationMillis()); assertEquals(one, two);  one.setDurationMillis(1L); assertEquals(1L, one.getDurationMillis()); assertNotEquals(one, two);  two.setDurationMillis(one.getDurationMillis()); assertEquals(one, two);  one.setDurationMillis(-1L); assertEquals(duration, one.getDurationMillis());  one.setDurationMillis(0L); "<AssertPlaceHolder>"; }
getDurationMillis() { LogManagerProperties.checkLogManagerAccess(); return this.duration; }
[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred: org. junit. Assert. assertThat ( two. getDurationMillis() ( ), org. hamcrest. CoreMatchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillis ( ), org. hamcrest. CoreMatchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillisMillis ( ), org. hamcrest. CoreMatchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillisWrapper ( ), org. hamcrest. CoreMatchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillis() ( ), org. hamcrest. Matchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillis() ( org. hamcrest. CoreMatchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillis ( ), org. hamcrest. Matchers. is ( duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertTrue ( ( ( two. getDurationMillis() ( ) ) > duration ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertThat ( two. getDurationMillis() ( org. hamcrest. CoreMatchers. is ( duration ) ) )

[*] target: assertEquals(duration, one.getDurationMillis())
[-] pred:  org. junit. Assert. assertEquals ( duration, two. getDurationMillis() ( ) )
************************************
************************************
[+] input: testRun() { PrivilegedAction<Boolean> p = () -> { assertFalse(isInvokeAccessController()); assertFalse(isAccessController()); return true; }; "<AssertPlaceHolder>"; }
runOrDoPrivileged(final PrivilegedAction<T> a) { Objects.requireNonNull(a); try { return a.run(); } catch (SecurityException sandbox) { return invokeAccessController(a); } }
[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred: org. junit. Assert. assertTrue ( p. runOrDoPrivileged(final, null ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(orgorg )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(st, null ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(400400 ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(st, true ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(400400 )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(RepRep());, true )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  true; }

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  true; }

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  )
************************************
************************************
[+] input: testDoPrivileged() { PrivilegedAction<Boolean> p = () -> { if (isInvokeAccessController()) { return isAccessController(); } throw new SecurityException(); };  try { "<AssertPlaceHolder>"; } catch (UndeclaredThrowableException removed) { assertTrue(removed.getCause() instanceof ClassNotFoundException); } catch (UnsupportedOperationException terminal) { } }
runOrDoPrivileged(final PrivilegedAction<T> a) { Objects.requireNonNull(a); try { return a.run(); } catch (SecurityException sandbox) { return invokeAccessController(a); } }
[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred: org. junit. Assert. assertTrue ( p. runOrDoPrivileged(orgorg. hamcrest. Matchers. is ( true ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(orgorg. hamcrest. Matchers. is ( true ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(orgorg. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged( context )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( ( ( invokeOrDoPrivileged(orgorg. mock ( ) ) > 0 ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(context ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(local, new io. File ( 6 ) ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(org )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged(orgorg. f ) )

[*] target: assertTrue(LogManagerProperties.runOrDoPrivileged(p))
[-] pred:  org. junit. Assert. assertTrue ( p. runOrDoPrivileged( input, p ) )
************************************
************************************
[+] input: testDoPrivilegedRuntimeException() { RuntimeException cause = new RuntimeException(); PrivilegedAction<Boolean> p = () -> { if (isInvokeAccessController()) { throw cause; } throw new SecurityException(); };  boolean ran = false; try { LogManagerProperties.runOrDoPrivileged(p); ran = true; } catch (UndeclaredThrowableException removed) { "<AssertPlaceHolder>"; } catch (UnsupportedOperationException terminal) { } catch (RuntimeException re) { assertSame(re, cause); } assertFalse(ran); }
runOrDoPrivileged(final PrivilegedAction<T> a) { Objects.requireNonNull(a); try { return a.run(); } catch (SecurityException sandbox) { return invokeAccessController(a); } }
[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred: org. junit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ( ran == true ) )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ( ran && ran ) )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertEquals ( true, ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ran, true )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junitunit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( startTime )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit ( Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit ) { assertTrue ( ran )
************************************
************************************
[+] input: testDoPrivilegedError() { Error cause = new Error(); PrivilegedAction<Boolean> p = () -> { if (isInvokeAccessController()) { throw cause; } throw new SecurityException(); };  boolean ran = false; try { LogManagerProperties.runOrDoPrivileged(p); ran = true; } catch (UndeclaredThrowableException removed) { "<AssertPlaceHolder>"; } catch (UnsupportedOperationException terminal) { } catch (Error e) { assertSame(e, cause); } assertFalse(ran); }
runOrDoPrivileged(final PrivilegedAction<T> a) { Objects.requireNonNull(a); try { return a.run(); } catch (SecurityException sandbox) { return invokeAccessController(a); } }
[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred: org. junit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ( ran == true ) )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ( ran && ran ) )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ran, true )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junitunit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( startTime )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit ( Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit. Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit ; Assert. assertTrue ( ran )

[*] target: assertTrue(removed.getCause() instanceof ClassNotFoundException)
[-] pred:  org. junit ) { assertTrue ( ran )
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); String value = "value"; String emptyValue = "empty"; Properties parent = new Properties(); parent.put(key, value); parent.put("", emptyValue);  read(manager, parent); assertTrue(LogManagerProperties.hasLogManager()); assertEquals(value, LogManagerProperties.fromLogManager(key)); "<AssertPlaceHolder>"; } finally { manager.reset(); }  try { LogManagerProperties.fromLogManager((String) null); fail(""); } catch (NullPointerException expect) { } }
fromLogManager(final String name) { Objects.requireNonNull(name); final Object m = LOG_MANAGER; try { if (m instanceof Properties) { return ((Properties) m).getProperty(name); } } catch (final RuntimeException unexpected) { }  if (m != null) { try { if (m instanceof LogManager) { return ((LogManager) m).getProperty(name); } } catch (final LinkageError | RuntimeException restricted) { } //GAE will forbid access to LogManager } return null; }
[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred: org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( emptyValue ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertThat ( value, org. hamcrest. CoreMatchers. is ( emptyValue ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( key, value ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertThat ( e, org. hamcrest. CoreMatchers. is ( emptyValue ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertThat ( manager. fromLogManager ( key ), org. hamcrest. CoreMatchers. is ( value ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( emptyValue, value ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( emptyValue, key ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertThat ( driver. fromLogManager ( key ), org. hamcrest. CoreMatchers. is ( value ) )

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org. junit. Assert. assertThat ( org. apache. commons. lang3. StringUtils. contains ( key, value ), org

[*] target: assertEquals(emptyValue, LogManagerProperties.fromLogManager(""))
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent; LogManagerProperties mp; LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); parent = new Properties(); parent.put(key, "value");  read(manager, parent);  parent = new Properties(); mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertEquals("value", mp.getProperty(key)); assertTrue(contains(mp, key, "value")); //ensure copy worked. } finally { manager.reset(); }  Properties clone = (Properties) mp.clone(); assertFalse(clone instanceof LogManagerProperties); assertEquals(Properties.class, clone.getClass()); assertNotSame(clone, parent); assertNotSame(clone, mp); assertEquals(mp.size(), clone.size()); "<AssertPlaceHolder>"; //don't call mp.equals. }
equals(final Object o) { if (o == null) { return false; } if (o == this) { return true; } if (o instanceof Properties == false) { return false; } assert false : prefix; return super.equals(o); }
[*] target: assertTrue(clone.equals(mp))
[-] pred: org. junit. Assert. assertTrue ( clone. equals ( null ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org. junit. Assert. assertTrue ( clone. equals ( key ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org. junit. Assert. assertTrue ( clone. equals ( clone ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org. junit. Assert. assertTrue ( clone. equals ( obj ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org. junit. Assert. assertTrue ( prefix. equals ( clone ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org. junit. Assert. assertTrue ( clone. equals ( object ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  . equals ( clone ) )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  true )

[*] target: assertTrue(clone.equals(mp))
[-] pred:  org

[*] target: assertTrue(clone.equals(mp))
[-] pred:  )
************************************
************************************
[+] input: Exception { assertTrue(LogManagerProperties.isReflectionClass(Constructor.class.getName())); "<AssertPlaceHolder>"; }
isReflectionClass(String name) throws Exception { String[] names = REFLECT_NAMES; if (names == null) { //Benign data race. REFLECT_NAMES = names = reflectionClassNames(); }  for (String rf : names) { //The set of names is small. if (name.equals(rf)) { return true; } }  findClass(name); //Fail late instead of normal return. return false; }
[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred: org. junit. Assert. assertFalse ( page. isReflectionClass(Constructor.class.getNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert. assertFalse ( isReflectionClass(Constructor.class.getNamegetNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert. assertFalse ( isReflectionClass(Constructor.class.getNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert. assertFalse ( this. isReflectionClass(Constructor.class.getNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert. assertFalse ( page. isReflectionClass(Constructor.class.getNamegetNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert. assertFalse ( this. isReflectionClass(Constructor.class.getNamegetNamegetName"" ) )

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert.

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org. junit. Assert

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  org

[*] target: assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()))
[-] pred:  )
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties.parseDurationToMillis("PT0.345S"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals(345L, ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), ms )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 200, ms )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )s 0 )

[*] target: assertEquals(345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0L ) )
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties.parseDurationToMillis("PT20.345S"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 200, ms )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )s

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals((20L * 1000L) + 345L, ms)
[-] pred:  millis )
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties.parseDurationToMillis("PT15M"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), ms )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 200, ms )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )s 0 )

[*] target: assertEquals(15L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0L ) )
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties.parseDurationToMillis("PT10H"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. cas. runtime. 2, ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. cas. rs. 0, ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals(10L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 200, ms )
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties.parseDurationToMillis("P2D"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms!= 0 ) )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 5, ms )

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )s

[*] target: assertEquals(2L * 24L * 60L * 60L * 1000L, ms)
[-] pred:  org
************************************
************************************
[+] input: Exception { try { long ms = LogManagerProperties .parseDurationToMillis("P2DT3H4M20.345S"); "<AssertPlaceHolder>"; } catch (ClassNotFoundException | NoClassDefFoundError ignore) { assertFalse(ignore.toString(), hasJavaTimeModule()); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred: org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertEquals ( 2, ms )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms == 0 ) )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms >= 0 ) )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertTrue ( ( ms!= 0 ) )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertEquals ( 0L, ms )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertEquals ( 200, ms )

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )s

[*] target: assertEquals((2L * 24L * 60L * 60L * 1000L) + (3L * 60L * 60L * 1000L) + (4L * 60L * 1000L) + ((20L * 1000L) + 345), ms)
[-] pred:  org
************************************
************************************
[+] input: Exception { try { String name = LogManagerPropertiesTest.class.getName(); long ms = LogManagerProperties.parseDurationToMillis(name); fail(Long.toString(ms)); } catch (ClassNotFoundException | NoClassDefFoundError ignore) { "<AssertPlaceHolder>"; } catch (InvocationTargetException expected) { Throwable dtpe = expected.getCause(); //Allow subclasses of DTPE Class<?> k = Class.forName( "java.time.format.DateTimeParseException"); assertTrue(k.getName(), k.isAssignableFrom(dtpe.getClass())); } }
parseDurationToMillis(final CharSequence value) throws Exception { Objects.requireNonNull(value); try { final Class<?> k = findClass("java.time.Duration"); final Method parse = k.getMethod("parse", CharSequence.class); if (!k.isAssignableFrom(parse.getReturnType()) || !Modifier.isStatic(parse.getModifiers())) { throw new NoSuchMethodException(parse.toString()); }  final Method toMillis = k.getMethod("toMillis"); if (!Long.TYPE.isAssignableFrom(toMillis.getReturnType()) || Modifier.isStatic(toMillis.getModifiers())) { throw new NoSuchMethodException(toMillis.toString()); } return (Long) toMillis.invoke(parse.invoke(null, value)); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof ArithmeticException) { throw (ArithmeticException) cause; } else { throw paramOrError(ite); } } }
[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred: org. junit. Assert. assertEquals ( com. google. common. collect. 0, ms )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( 0, ms )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( com. google. common. collect. CoreMatchers. is ( name ) )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( com. google. common. collect. CoreMatchers. is ( 5 ) )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertTrue ( ( ms > 0 ) )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( com. google. common. collect. feed.

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), ms )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( 5, ms )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org. junit. Assert. assertEquals ( name, ms )

[*] target: assertFalse(ignore.toString(), hasJavaTimeModule())
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); Properties parent = new Properties(); parent.put(key, "value"); parent.put("", "empty");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertEquals("value", mp.getProperty(key)); assertTrue(contains(mp, key, "value")); //ensure copy worked. parent.put(key, "newValue"); assertEquals("newValue", mp.getProperty(key)); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
getProperty(final String key) { String value = defaults.getProperty(key); if (value == null) { if (key.length() > 0) { value = fromLogManager(prefix + '.' + key); }  if (value == null) { value = fromLogManager(key); }  /** * Copy the log manager properties as we read them. If a value is no * longer present in the LogManager read it from here. The reason * this works is because LogManager.reset() closes all attached * handlers therefore, stale values only exist in closed handlers. */ if (value != null) { super.put(key, value); } else { Object v = super.get(key); //defaults are not used. value = v instanceof String ? (String) v : null; } } return value; }
[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred: org. junit. Assert. assertEquals ( key, mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( key ), mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( null, mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( key ), mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( null, mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Long. valueOf ( key ), mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty(""))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Long. valueOf ( key ), mp. getProperty( key ) )
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); Properties parent = new Properties(); parent.put(key, "value"); parent.put("", "empty");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertEquals("value", mp.getProperty(key, null)); assertTrue(contains(mp, key, "value")); //ensure copy worked. parent.put(key, "newValue"); assertEquals("newValue", mp.getProperty(key, null)); assertEquals("default", mp.getProperty("unknown", "default")); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
getProperty(final String key, final String def) { final String value = this.getProperty(key); return value == null ? def : value; }
[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred: org. junit. Assert. assertEquals ( key, mp. getProperty( key, 0 ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty ( key ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty(key, key ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. getProperty( key ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty(key, 0 ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. getProperty( key, 0 ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty( key, null ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. getProperty(key ) )

[*] target: assertEquals("empty", mp.getProperty("", null))
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); Properties parent = new Properties(); parent.put(key, "value"); parent.put("", "empty");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertEquals("value", mp.get(key)); assertTrue(contains(mp, key, "value")); //ensure copy worked. parent.put(key, "newValue"); assertEquals("newValue", mp.get(key)); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
get(final Object key) { Object value; if (key instanceof String) { value = getProperty((String) key); } else { value = null; }  //Search for non-string value. if (value == null) { value = defaults.get(key); if (value == null && !defaults.containsKey(key)) { value = super.get(key); } } return value; }
[*] target: assertEquals("empty", mp.get(""))
[-] pred: org. junit. Assert. assertEquals ( key, mp. get ( key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. get(key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. get( key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. get( key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( 0, mp. get(key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. get ( key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertNotNull ( mp. get(key, key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. get(key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org. junit. Assert. assertNotNull ( mp. get(key ) )

[*] target: assertEquals("empty", mp.get(""))
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); Properties parent = new Properties(); parent.put(key, "value"); parent.put("", "empty");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertTrue(mp.containsKey(key)); assertTrue(contains(mp, key, "value")); //ensure copy worked. parent.put(key, "newValue"); assertEquals("newValue", mp.get(key)); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
containsKey(final Object key) { boolean found = key instanceof String && getProperty((String) key) != null; if (!found) { found = defaults.containsKey(key) || super.containsKey(key); } return found; }
[*] target: assertTrue(mp.containsKey(""))
[-] pred: org. junit. Assert. assertTrue ( mp. containsKey ( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. containsKey( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( playlist. containsKey ( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. containsKey containsKey( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( song. containsKey ( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. containsKey(key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( move. containsKey ( key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. containsKeyWith key ) )

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. containsKey ( key ) ) 0

[*] target: assertTrue(mp.containsKey(""))
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String key = prefix.concat(".dummy"); Properties parent = new Properties(); parent.put(key, "value"); parent.put("", "empty");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix);  assertFalse(contains(mp, key, null)); assertEquals("value", mp.remove(key)); assertFalse(contains(mp, key, "value")); //ensure copy worked. parent.put(key, "newValue"); assertEquals("newValue", mp.remove(key)); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
remove(final Object key) { final Object def = preWrite(key); final Object man = super.remove(key); return man == null ? def : man; }
[*] target: assertEquals("empty", mp.remove(""))
[-] pred: org. junit. Assert. assertEquals ( key, mp. remove( key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove ( key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(Key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( 0, mp. remove( key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( 0, mp. remove(key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertTrue ( copy. remove( key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertTrue ( mp. remove( key ) )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove( key )

[*] target: assertEquals("empty", mp.remove(""))
[-] pred:  org
************************************
************************************
[+] input: testRemoveObject() { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); String key = "key"; Object value = new Object(); parent.put(key, value); assertEquals(value, parent.remove(key)); assertEquals(parent.containsKey(key), mp.containsKey(key)); "<AssertPlaceHolder>"; }
remove(final Object key) { final Object def = preWrite(key); final Object man = super.remove(key); return man == null ? def : man; }
[*] target: assertNull(parent.remove(key))
[-] pred: org. junit. Assert. assertEquals ( key, mp. remove(finalObject key )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(final Object key )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(gt ) )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( null, mp. remove(finalObject key )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(final Object key ) )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(gt, key )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( null, mp. remove(gtgt, key )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(final ) )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(gt, key ) )

[*] target: assertNull(parent.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( key, mp. remove(finalObject key ) )
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); String key = "key"; Object value = TimeUnit.MILLISECONDS; assertNull(mp.put(key, value)); Object newValue = TimeUnit.NANOSECONDS; assertEquals(value, mp.put(key, newValue)); "<AssertPlaceHolder>"; }
get(final Object key) { Object value; if (key instanceof String) { value = getProperty((String) key); } else { value = null; }  //Search for non-string value. if (value == null) { value = defaults.get(key); if (value == null && !defaults.containsKey(key)) { value = super.get(key); } } return value; }
[*] target: assertEquals(newValue, mp.get(key))
[-] pred: org. junit. Assert. assertEquals ( newValue, mp. get( key ) )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get(finalObject value )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get(final ) )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get(key ) )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get ( key ) )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get(final, key )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( value, mp. get(finalObject newValue )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org. junit. Assert. assertEquals ( newValue, mp. get(WebElementObject value )

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  value and property

[*] target: assertEquals(newValue, mp.get(key))
[-] pred:  org
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); LogManager manager = LogManager.getLogManager(); try { String keyShort = "mail.smtp.reportsuccess"; String key = prefix + '.' + keyShort; Properties parent = new Properties(); parent.put(key, "true");  read(manager, parent);  parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); assertFalse(contains(mp, keyShort, null));  final Session session = Session.getInstance(mp); final Object t = session.getTransport("smtp"); if (isPrivateSpec(t.getClass())) { final String clazzName = "org.eclipse.angus.mail.smtp.SMTPTransport"; assertEquals(clazzName, t.getClass().getName()); } else { assertNotNull(t); session.getProperty(keyShort); //Force a read through session. } "<AssertPlaceHolder>"; } finally { manager.reset(); } }
getProperty(final String key) { String value = defaults.getProperty(key); if (value == null) { if (key.length() > 0) { value = fromLogManager(prefix + '.' + key); }  if (value == null) { value = fromLogManager(key); }  /** * Copy the log manager properties as we read them. If a value is no * longer present in the LogManager read it from here. The reason * this works is because LogManager.reset() closes all attached * handlers therefore, stale values only exist in closed handlers. */ if (value != null) { super.put(key, value); } else { Object v = super.get(key); //defaults are not used. value = v instanceof String ? (String) v : null; } } return value; }
[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred: org. junit. Assert. assertEquals ( clazzName, mp. getProperty ( clazzName ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty(keyName ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty( key ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty( clazzName ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty( keyName ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty(keyStates ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty(keyStr ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty(key ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org. junit. Assert. assertEquals ( clazzName, mp. getProperty(keyShort ) )

[*] target: assertTrue(contains(mp, keyShort, "true"))
[-] pred:  org
************************************
************************************
[+] input: Exception { assertEquals("en-US", LogManagerProperties.toLanguageTag(Locale.US)); assertEquals("en", LogManagerProperties.toLanguageTag(Locale.ENGLISH)); assertEquals("", LogManagerProperties.toLanguageTag(new Locale("", "", ""))); Locale l = new Locale("en", "US", "slang"); assertEquals("en-US-slang", LogManagerProperties.toLanguageTag(l)); l = new Locale("en", "", "slang"); "<AssertPlaceHolder>";  try { LogManagerProperties.toLanguageTag(null); fail("Null was allowed."); } catch (NullPointerException expect) { } }
toLanguageTag(final Locale locale) { final String l = locale.getLanguage(); final String c = locale.getCountry(); final String v = locale.getVariant(); final char[] b = new char[l.length() + c.length() + v.length() + 2]; int count = l.length(); l.getChars(0, count, b, 0); if (c.length() != 0 || (l.length() != 0 && v.length() != 0)) { b[count] = '-'; ++count; //be nice to the client compiler. c.getChars(0, c.length(), b, count); count += c.length(); }  if (v.length() != 0 && (l.length() != 0 || c.length() != 0)) { b[count] = '-'; ++count; //be nice to the client compiler. v.getChars(0, v.length(), b, count); count += v.length(); } return String.valueOf(b, 0, count); }
[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred: org. junit. Assert. assertEquals ( l, l )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertEquals ( l, l. toLanguageTag ( l ) )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertEquals ( l, text )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertNotNull ( l )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertEquals ( ln, l )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertEquals ( l, a )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org. junit. Assert. assertEquals ( l, null )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  , l )

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  org

[*] target: assertEquals("en--slang", LogManagerProperties.toLanguageTag(l))
[-] pred:  )
************************************
************************************
[+] input: Exception { try { LogManagerProperties.newObjectFrom((String) null, Object.class); fail("Null name was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newObjectFrom(Object.class.getName(), (Class<Object>) null); fail("Null class was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newObjectFrom((String) null, (Class<Object>) null); fail("Null was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newObjectFrom("", Object.class); fail("Empty class was allowed."); } catch (ClassNotFoundException expect) { }  try { LogManagerProperties.newObjectFrom(Object.class.getName(), String.class); fail("Wrong type was allowed."); } catch (ClassCastException expect) { }  Object o = LogManagerProperties. newObjectFrom(String.class.getName(), Object.class); assertEquals(String.class, o.getClass());  String n = LogManagerProperties. newObjectFrom(String.class.getName(), String.class); "<AssertPlaceHolder>"; }
newObjectFrom(String name, Class<T> type) throws Exception { try { final Class<?> clazz = LogManagerProperties.findClass(name); //This check avoids additional side effects when the name parameter //is a literal name and not a class name. if (type.isAssignableFrom(clazz)) { try { return type.cast(clazz.getConstructor().newInstance()); } catch (final InvocationTargetException ITE) { throw paramOrError(ITE); } } else { throw new ClassCastException(clazz.getName() + " cannot be cast to " + type.getName()); } } catch (final NoClassDefFoundError NCDFE) { //No class def found can occur on filesystems that are //case insensitive (BUG ID 6196068).  In some cases, we allow class //names or literal names, this code guards against the case where a //literal name happens to match a class name in a different case. //This is also a nice way to adapt this error for the error manager. throw new ClassNotFoundException(NCDFE.toString(), NCDFE); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } }
[*] target: assertEquals(String.class, n.getClass())
[-] pred: org. junit. Assert. assertEquals ( assertEquals ( o.getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( o. getClass ( ), n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( o.getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( o.getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( org. getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( assertEquals ( o.getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( org. marian, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( o. getClass ( ), n. getClass ( ) )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org. junit. Assert. assertEquals ( org.getClass());, n )

[*] target: assertEquals(String.class, n.getClass())
[-] pred:  org
************************************
************************************
[+] input: Exception { Authenticator a = LogManagerProperties.newObjectFrom( EmptyAuthenticator.class.getName(), Authenticator.class); assertEquals(EmptyAuthenticator.class, a.getClass());  final Class<?> type = ErrorAuthenticator.class; a = LogManagerProperties.newObjectFrom( type.getName(), Authenticator.class); assertEquals(type, a.getClass());  setPending(new RuntimeException()); try { LogManagerProperties.newObjectFrom(type.getName(), Authenticator.class); fail("Exception was not thrown."); } catch (InvocationTargetException expect) { "<AssertPlaceHolder>"; } finally { setPending(null); } }
newObjectFrom(String name, Class<T> type) throws Exception { try { final Class<?> clazz = LogManagerProperties.findClass(name); //This check avoids additional side effects when the name parameter //is a literal name and not a class name. if (type.isAssignableFrom(clazz)) { try { return type.cast(clazz.getConstructor().newInstance()); } catch (final InvocationTargetException ITE) { throw paramOrError(ITE); } } else { throw new ClassCastException(clazz.getName() + " cannot be cast to " + type.getName()); } } catch (final NoClassDefFoundError NCDFE) { //No class def found can occur on filesystems that are //case insensitive (BUG ID 6196068).  In some cases, we allow class //names or literal names, this code guards against the case where a //literal name happens to match a class name in a different case. //This is also a nice way to adapt this error for the error manager. throw new ClassNotFoundException(NCDFE.toString(), NCDFE); } catch (final ExceptionInInitializerError EIIE) { throw wrapOrThrow(EIIE); } }
[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred: org. junit. Assert. assertTrue ( ( type instanceof java. lang. Class ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertSame ( a, type )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( a instanceof org. apache. hadoop. util. Map ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( a instanceof org. apache. hadoop. io. IOException ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( a instanceof java. lang. Class ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( a instanceof org. apache. commons. lang. Class ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( type instanceof org. apache. commons. lang. Class ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( type instanceof org. apache. hadoop. util. Map ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( a == a ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( a )
************************************
************************************
[+] input: Exception { try { LogManagerProperties.newComparator(null); fail("Null was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newComparator(""); fail("Empty class was allowed."); } catch (ClassNotFoundException expect) { }  try { LogManagerProperties.newComparator(Object.class.getName()); fail("Wrong type was allowed."); } catch (ClassCastException expect) { }  final Class<?> type = ErrorComparator.class; final Comparator<? super LogRecord> c = LogManagerProperties.newComparator(type.getName()); assertEquals(type, c.getClass());  setPending(new RuntimeException()); try { LogManagerProperties.newComparator(type.getName()); fail("Exception was not thrown."); } catch (InvocationTargetException expect) { "<AssertPlaceHolder>"; } finally { setPending(null); } }
newComparator(String name) throws Exception { return newObjectFrom(name, Comparator.class); }
[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred: org. junit. Assert. assertTrue ( ( type instanceof java. lang. String ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( type instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertFalse ( ( type instanceof java. lang. String ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( type instanceof java. lang. Class ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( c. getClass ( ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( out )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( type instanceof org. apache. hadoop. util. Maps ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( type )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org
************************************
************************************
[+] input: Exception { try { LogManagerProperties.reverseOrder(null); fail("Null was allowed."); } catch (NullPointerException expect) { }  Comparator<LogRecord> c = new ErrorComparator(); Comparator<LogRecord> r = LogManagerProperties.reverseOrder(c); assertTrue(c.getClass() != r.getClass()); assertFalse(r instanceof ErrorComparator); assertFalse(r instanceof AscComparator); assertFalse(r instanceof DescComparator);  c = new AscComparator(); r = LogManagerProperties.reverseOrder(c); assertTrue(r instanceof DescComparator);  c = new AscComparator(); r = LogManagerProperties.reverseOrder(c); "<AssertPlaceHolder>"; }
reverseOrder(final Comparator<T> c) { Objects.requireNonNull(c); Comparator<T> reverse = null; //Comparator in JDK8 has 'reversed' as a default method. //This code calls that method first to allow custom //code to define what reverse order means in versions older than JDK8. try { //assert Modifier.isPublic(c.getClass().getModifiers()) : //        Modifier.toString(c.getClass().getModifiers()); final Method m = c.getClass().getMethod("reversed"); if (!Modifier.isStatic(m.getModifiers()) && Comparator.class.isAssignableFrom(m.getReturnType())) { try { reverse = (Comparator<T>) m.invoke(c); } catch (final ExceptionInInitializerError eiie) { throw wrapOrThrow(eiie); } } } catch (final NoSuchMethodException | RuntimeException | IllegalAccessException ignore) { } catch (final InvocationTargetException ite) { paramOrError(ite); //Ignore invocation bugs (returned values). }  if (reverse == null) { reverse = Collections.reverseOrder(c); } return reverse; }
[*] target: assertTrue(r instanceof DescComparator)
[-] pred: org. junit. Assert. assertEquals ( r, c. reverseOrder(c.getClass )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, r )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, c. reverseOrder(st )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, c. reverseOrder(c ) )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, c. reverseOrder(c:getClass )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, c. reverseOrder(c.getClass )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, c. reverseOrder(c )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, rec )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, col )

[*] target: assertTrue(r instanceof DescComparator)
[-] pred:  org. junit. Assert. assertEquals ( r, bc )
************************************
************************************
[+] input: Exception { try { LogManagerProperties.newErrorManager(null); fail("Null was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newErrorManager(""); fail("Empty class was allowed."); } catch (ClassNotFoundException expect) { }  try { LogManagerProperties.newErrorManager(Object.class.getName()); fail("Wrong type was allowed."); } catch (ClassCastException expect) { }  final Class<?> type = ErrorManager.class; ErrorManager f = LogManagerProperties.newErrorManager(type.getName()); assertEquals(type, f.getClass());  setPending(new RuntimeException()); try { final String name = ErrorErrorManager.class.getName(); LogManagerProperties.newErrorManager(name); fail("Exception was not thrown."); } catch (InvocationTargetException expect) { "<AssertPlaceHolder>"; } finally { setPending(null); } }
newErrorManager(String name) throws Exception { return newObjectFrom(name, ErrorManager.class); }
[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred: org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNotNull ( name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( false )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( f. name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNotNull ( f )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertEquals ( name, f. name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( f )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  )
************************************
************************************
[+] input: Exception { try { LogManagerProperties.newFilter(null); fail("Null was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newFilter(""); fail("Empty class was allowed."); } catch (ClassNotFoundException expect) { }  try { LogManagerProperties.newFilter(Object.class.getName()); fail("Wrong type was allowed."); } catch (ClassCastException expect) { }  final Class<?> type = ErrorFilter.class; final Filter f = LogManagerProperties.newFilter(type.getName()); assertEquals(type, f.getClass());  setPending(new RuntimeException()); try { LogManagerProperties.newFilter(type.getName()); fail("Exception was not thrown."); } catch (InvocationTargetException expect) { "<AssertPlaceHolder>"; } finally { setPending(null); } }
newFilter(String name) throws Exception { return newObjectFrom(name, Filter.class); }
[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred: org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( f instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( ( f instanceof org. apache. tomcat. util. Context ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( f ) )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( f )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertFalse ( true )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNotNull ( f )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertSame ( f, n )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  )
************************************
************************************
[+] input: Exception { try { LogManagerProperties.newFormatter(null); fail("Null was allowed."); } catch (NullPointerException expect) { }  try { LogManagerProperties.newFormatter(""); fail("Empty class was allowed."); } catch (ClassNotFoundException expect) { }  try { LogManagerProperties.newFormatter(Object.class.getName()); fail("Wrong type was allowed."); } catch (ClassCastException expect) { }  final Class<?> type = SimpleFormatter.class; final Formatter f = LogManagerProperties.newFormatter(type.getName()); assertEquals(type, f.getClass());  setPending(new RuntimeException()); try { final String name = ErrorFormatter.class.getName(); LogManagerProperties.newFormatter(name); fail("Exception was not thrown."); } catch (InvocationTargetException expect) { "<AssertPlaceHolder>"; } finally { setPending(null); } }
newFormatter(String name) throws Exception { return newObjectFrom(name, Formatter.class); }
[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred: org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. parquet. util. StringUtils. class, name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. hadoop. util. StringUtils. class, name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertEquals ( name, org. apache. commons. lang. String. class )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertEquals ( f, name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNotNull ( name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertNull ( name )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  org

[*] target: assertEquals(RuntimeException.class, expect.getCause().getClass())
[-] pred:  )
************************************
************************************
[+] input: Exception { long id = Thread.currentThread().getId(); if (id <= Integer.MAX_VALUE) { id = ((long) Integer.MAX_VALUE) + 1L; } else { id++; }  LogRecord r1 = new LogRecord(Level.SEVERE, ""); LogRecord r2 = new LogRecord(Level.SEVERE, ""); try { setLongThreadID(r1, id); setLongThreadID(r2, id); assertEquals(id, (long) LogManagerProperties.getLongThreadID(r1)); assertEquals(id, (long) LogManagerProperties.getLongThreadID(r2)); } catch (final NoSuchMethodException preJdkSixteen) { try { Method m = LogRecord.class.getMethod("getLongThreadID"); fail(m.toString()); } catch (NoSuchMethodException expect) { "<AssertPlaceHolder>"; } } }
getLongThreadID(final LogRecord record) { Objects.requireNonNull(record); final Method m = LR_GET_LONG_TID; if (m != null) { try { return (Long) m.invoke(record); } catch (final InvocationTargetException ite) { final Throwable cause = ite.getCause(); if (cause instanceof Error) { throw (Error) cause; } else if (cause instanceof RuntimeException) { throw (RuntimeException) cause; } else { //Should never happen. throw new UndeclaredThrowableException(ite); } } catch (final RuntimeException ignore) { } catch (final Exception ignore) { } } return null; }
[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred: org. junit. Assert. assertEquals ( null, m )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( null, m. getLongThreadID ( ) )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertNotNull ( m )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( msg, expect, m )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( null, m. getLongThreadID(st )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( name, m. getLongThreadID ( ) )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( expect, m )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit. Assert. assertEquals ( msg, expect )

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org. junit { } }

[*] target: assertNull(LogManagerProperties.getLongThreadID(r1))
[-] pred:  org
************************************
************************************
[+] input: Exception { final String loggerName = MailHandlerTest.class.getName(); final Class<?> k = MailHandler.class; assertNotNull(LogManagerProperties.newObjectFrom(k.getName(), k));  Logger l; LogManager m = LogManager.getLogManager(); try { Properties props = new Properties(); String p = k.getName(); props.put(loggerName.concat(".handlers"), p); read(m, props);  l = Logger.getLogger(loggerName); final Handler[] handlers = l.getHandlers(); assertEquals(1, handlers.length); for (Handler h : handlers) { assertEquals(p, h.getClass().getName()); } } finally { m.reset(); } "<AssertPlaceHolder>"; //Enusre handler is closed by reset }
reset() { assert Thread.holdsLock(this); if (size < data.length) { Arrays.fill(data, 0, size, (LogRecord) null); } else { Arrays.fill(data, (LogRecord) null); } this.size = 0; }
[*] target: assertNotNull(l)
[-] pred: org. junit. Assert. assertEquals ( loggerName, handler. reset() ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. reset() )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertNull ( handler. reset() ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertNull ( handler. reset() )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. resetContainer ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. resetSuspended ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. reset F )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, event. reset() ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. resetPattern ( ) )

[*] target: assertNotNull(l)
[-] pred:  org. junit. Assert. assertEquals ( loggerName, handler. resetPattern )
************************************
************************************
[+] input: testEquals() { MailHandler h = new MailHandler(); assertFalse(h.equals((Object) null)); assertNotEquals(h, new MailHandler()); "<AssertPlaceHolder>"; }
equals(Object o) { if (o instanceof TailNameFormatter) { return name.equals(((TailNameFormatter) o).name); } return false; }
[*] target: assertTrue(h.equals(h))
[-] pred: org. junit. Assert. assertTrue ( h. equals(h ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals ( h ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals(Object ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals(h2 ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals(h ( null ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals(h ( h ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals(h) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert. assertTrue ( h. equals=h ) )

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit. Assert

[*] target: assertTrue(h.equals(h))
[-] pred:  org. junit )
************************************
************************************
[+] input: testToString() { MailHandler h = new MailHandler(); String s = h.toString(); assertTrue(s, s.startsWith(MailHandler.class.getName())); "<AssertPlaceHolder>"; }
hashCode() { return getClass().hashCode() + name.hashCode(); }
[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred: org. junit. Assert. assertEquals ( s. hashCode(), h. hashCode() )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode(), h. hashCode() ( ) )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode ( ), s. hashCode ( ) )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode ( ), s. hashCode() )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode() ( ), s. hashCode() )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode ( ), h. hashCode() )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode(), s. hashCode() ( ) )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( s. hashCode, h. hashCode() )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( 0, s. hashCode() ( ) )

[*] target: assertTrue(s, s.endsWith(Integer.toHexString(h.hashCode())))
[-] pred:  org. junit. Assert. assertEquals ( h. hashCode() ( ), s. hashCode() )
************************************
************************************
[+] input: testPublishNullAsTrue() { MailHandler instance = new MailHandler() { public boolean isLoggable(LogRecord r) { return true; } }; InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em); instance.setLevel(Level.ALL); instance.publish((LogRecord) null); instance.close(); "<AssertPlaceHolder>"; assertEquals(1, em.exceptions.size()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred: org. junit. Assert. assertTrue ( em. click )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. assertTrue ( em. set )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. assertTrue ( em. count )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. assertTrue ( em. true )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. assertTrue ( em. down )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. assertTrue ( em. rec )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. whether true )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit. Assert. )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  org. junit )

[*] target: assertEquals(true, em.exceptions.get(0) instanceof NullPointerException)
[-] pred:  true )
************************************
************************************
[+] input: testPublishDuringClose() { final Level[] lvls = getAllLevels(); for (int levelIndex = 0; levelIndex < lvls.length; levelIndex++) { MailHandler instance = new MailHandler(lvls.length + 2); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em); Properties props = createInitProperties(""); instance.setMailProperties(props);  Authenticator auth = new EmptyAuthenticator(); Filter filter = BooleanFilter.TRUE; Formatter formatter = new SimpleFormatter(); instance.setSubject("publishDuringClose"); Formatter subject = instance.getSubject();  instance.setAuthenticator(auth); instance.setLevel(Level.ALL); instance.setFormatter(formatter); instance.setFilter(filter); instance.setPushLevel(Level.OFF); instance.setPushFilter(filter); instance.setAttachmentFormatters(formatter); instance.setAttachmentFilters(filter); instance.setAttachmentNames(subject);  assertTrue(em.exceptions.isEmpty());  final String msg = instance.toString(); for (int j = 0; j < lvls.length; j++) { Level oldLevel = instance.getLevel(); Level lvl = lvls[(levelIndex + j) % lvls.length]; CloseLogRecord r = new CloseLogRecord(lvl, msg, instance); assertFalse(r.isClosed()); instance.publish(r); if (!oldLevel.equals(Level.OFF)) { assertEquals(Level.OFF, instance.getLevel()); assertTrue(r.isClosed()); } }  //Close is not allowed to change any settings. assertEquals(Level.OFF, instance.getLevel()); assertEquals(props, instance.getMailProperties()); assertEquals(auth, instance.getAuthenticator()); assertEquals(subject, instance.getSubject()); assertEquals(filter, instance.getFilter()); assertEquals(formatter, instance.getFormatter()); assertEquals(Level.OFF, instance.getPushLevel()); assertEquals(filter, instance.getPushFilter()); assertEquals(formatter, instance.getAttachmentFormatters()[0]); assertEquals(filter, instance.getAttachmentFilters()[0]); "<AssertPlaceHolder>";  //ensure one transport error. assertEquals(1, em.exceptions.size()); assertTrue(em.exceptions.get(0) instanceof MessagingException); } }
getAttachmentNames() { final Formatter[] formatters; synchronized (this) { formatters = this.attachmentNames; } return formatters.clone(); }
[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred: org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( r ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. Matchers. equalTo ( r ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( r ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( res ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( new Properties ( ) ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( new org. bson. Document ( msg ) ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( new org. apache. hadoop. conf. 0 ) ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() ( ), org. hamcrest. Matchers. is ( r ) )

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames() (

[*] target: assertEquals(subject, instance.getAttachmentNames()[0])
[-] pred:  org
************************************
************************************
[+] input: testThrowFormatters() { MailHandler instance = new MailHandler(createInitProperties("")); instance.setLevel(Level.ALL); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em); instance.setComparator(new ThrowComparator()); instance.setFormatter(new ThrowFormatter()); instance.setSubject(new ThrowFormatter()); instance.setAttachmentFormatters(new ThrowFormatter()); instance.setAttachmentNames(new ThrowFormatter());  LogRecord record = new LogRecord(Level.INFO, ""); instance.publish(record); instance.close();  final int size = em.exceptions.size(); if (size > 0) { for (int i = 0; i < em.exceptions.size() - 1; i++) { "<AssertPlaceHolder>"; } assertEquals(true, em.exceptions.get(size - 1) instanceof MessagingException); return; } fail("No runtime exceptions reported"); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred: org. junit. Assert. assertEquals ( i, rec. getClass ( ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, record. get ( i ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, record. count )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, records. get ( i ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, rec. get ( i ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, rec. getInt ( i ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, record. getClass ( ) )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, record. position )

[*] target: assertEquals(true, em.exceptions.get(i) instanceof RuntimeException)
[-] pred:  org. junit. Assert. assertEquals ( i, rec. count )
************************************
************************************
[+] input: testErrorFilters() { LogRecord record = new LogRecord(Level.INFO, ""); MemoryHandler mh = new MemoryHandler(new ConsoleHandler(), 100, Level.OFF); mh.setFilter(new ErrorFilter()); MailHandler instance = null; try { boolean expect = mh.isLoggable(record); instance = new MailHandler(createInitProperties("")); instance.setLevel(Level.ALL); instance.setFilter(new ErrorFilter()); boolean result = instance.isLoggable(record); assertEquals(expect, result); } catch (Error expectEx) { if (instance == null) { try { instance = new MailHandler(createInitProperties("")); instance.setLevel(Level.ALL); instance.setFilter(new ErrorFilter()); instance.isLoggable(record); fail("Doesn't match the memory handler."); } catch (Error resultEx) { assertEquals(expectEx.getClass(), resultEx.getClass()); } } else { fail("Doesn't match the memory handler."); } }  assert instance != null; instance.setFilter((Filter) null);  Properties props = new Properties(); props.put("mail.smtp.host", UNKNOWN_HOST); instance.setMailProperties(props);  InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  instance.setAttachmentFormatters(new SimpleFormatter()); instance.setAttachmentFilters(new ErrorFilter()); instance.setAttachmentNames("test.txt");  instance.publish(record); try { instance.close(); fail("Error was swallowed."); } catch (Error expect) { if (expect.getClass() != Error.class) { throw expect; } }  "<AssertPlaceHolder>"; }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred: org. junit. Assert. assertEquals ( resultEx.getClass());, result )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expect, resultEx.getClass()); )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expected, resultEx.getClass()); )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( msg, resultEx.getClass()); )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( resultEx.getClass());, true )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( resultEx.getClass());, state )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertEquals(true, em.exceptions.isEmpty())
[-] pred:  org
************************************
************************************
[+] input: testSingleSortComparator() { MailHandler instance = new MailHandler(createInitProperties("")); instance.setComparator(new SequenceComparator()); instance.setErrorManager(new InternalErrorManager()); try { instance.publish(new LogRecord(Level.SEVERE, "")); } finally { instance.close(); }  InternalErrorManager em = internalErrorManagerFrom(instance); boolean failed = false; for (Throwable t : em.exceptions) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. whether whether failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. whether ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. true ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. whether true )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failures )

[*] target: assertFalse(failed)
[-] pred:  whether failed ) { true ; } }

[*] target: assertFalse(failed)
[-] pred:  whether failed )

[*] target: assertFalse(failed)
[-] pred:  is failed )
************************************
************************************
[+] input: testSingleSortViolateContract() { MailHandler instance = new MailHandler(createInitProperties("")); instance.setComparator(new GreaterComparator()); instance.setErrorManager(new InternalErrorManager()); try { instance.publish(new LogRecord(Level.SEVERE, "")); } finally { instance.close(); }  boolean seenError = false; InternalErrorManager em = internalErrorManagerFrom(instance); boolean failed = false; for (Throwable t : em.exceptions) { if (isConnectOrTimeout(t)) { continue; } if (t.getClass() == IllegalArgumentException.class && t.getMessage().contains(instance.getComparator() .getClass().getName())) { seenError = true; //See Arrays.sort(T[], Comparator<? super T>) continue; //expect. } dump(t); failed = true; } "<AssertPlaceHolder>"; assertTrue("Exception was not thrown.", seenError); assertFalse(em.exceptions.isEmpty()); }
getComparator() { return this.comparator; }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( ( failed == seenError ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( (! seenError ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( found )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( ( failed && seenError ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( caughtError )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( errMsg, passed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( ( seenError == failed ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit, failed )

[*] target: assertFalse(failed)
[-] pred:  true )
************************************
************************************
[+] input: testThrowFilters() { LogRecord record = new LogRecord(Level.INFO, ""); MemoryHandler mh = new MemoryHandler(new ConsoleHandler(), 100, Level.OFF); mh.setFilter(new ThrowFilter()); MailHandler instance = null; try { boolean expect = mh.isLoggable(record); instance = new MailHandler(createInitProperties("")); instance.setLevel(Level.ALL); instance.setFilter(new ThrowFilter()); boolean result = instance.isLoggable(record); assertEquals(expect, result); } catch (RuntimeException expectEx) { if (instance == null) { try { instance = new MailHandler(createInitProperties("")); instance.setLevel(Level.ALL); instance.setFilter(new ThrowFilter()); instance.isLoggable(record); fail("Doesn't match the memory handler."); } catch (RuntimeException resultEx) { assertEquals(expectEx.getClass(), resultEx.getClass()); } } else { fail("Doesn't match the memory handler."); } }  assert instance != null; instance.setFilter((Filter) null);  Properties props = new Properties(); props.put("mail.smtp.host", UNKNOWN_HOST); instance.setMailProperties(props);  InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  instance.setAttachmentFormatters(new SimpleFormatter()); instance.setAttachmentFilters(new ThrowFilter()); instance.setAttachmentNames("test.txt");  instance.publish(record); instance.close();  "<AssertPlaceHolder>"; }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred: org. junit. Assert. assertEquals ( expect, resultEx.getClass()); )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( resultEx.getClass());, result )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expected, resultEx.getClass()); )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( resultEx.getClass());, expect )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expect, result )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expect, resultEx.getClass()); )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expecting, resultEx.getClass()); )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( expect, resultEx_getClass()); )

[*] target: assertEquals(true, !em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( exception, result )
************************************
************************************
[+] input: testErrorManager() { MailHandler h = new MailHandler(); assertNotNull(h.getErrorManager()); try { h.setErrorManager((ErrorManager) null); } catch (NullPointerException expect) { assertNotNull(h); } assertNotNull(h.getErrorManager());  ErrorManager em = new ErrorManager(); h.setErrorManager(em); "<AssertPlaceHolder>"; }
getErrorManager() { checkAccess(); return this.errorManager; //Volatile access. }
[*] target: assertSame(em, h.getErrorManager())
[-] pred: org. junit. Assert. assertTrue ( em. getErrorManager() ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManager ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManager TYPE ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManagerPin ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManagerSuspended ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManagerProxy ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( em. getErrorManagerWrapper ( ) )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  ) { } }

[*] target: assertSame(em, h.getErrorManager())
[-] pred:  )
************************************
************************************
[+] input: testFormatter() { MailHandler h = new MailHandler(); assertNotNull(h.getFormatter()); try { h.setFormatter((Formatter) null); } catch (NullPointerException expect) { assertNotNull(h); } assertNotNull(h.getFormatter());  SimpleFormatter f = new SimpleFormatter(); h.setFormatter(f); "<AssertPlaceHolder>"; }
getFormatter() { return this.formatter; }
[*] target: assertSame(f, h.getFormatter())
[-] pred: org. junit. Assert. assertTrue ( f. getFormatter() ( ).()); ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( f. getFormatter() ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( f. getFormatter() ).()); ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( f. getFormatter() ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertEquals ( h, f. getFormatter() ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( f. getFormatterFormatter ( ).()); ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFormatter() ) )()); ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertEquals ( true, f. getFormatter() ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( h. getFormatter() ( ).()); ( ) )

[*] target: assertSame(f, h.getFormatter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFormatter() )()); ) )
************************************
************************************
[+] input: testFilter() { MailHandler h = new MailHandler(); assertNull(h.getFilter()); h.setFilter((Filter) null); assertNull(h.getFilter());  BooleanFilter f = new BooleanFilter(); h.setFilter(f); assertSame(f, h.getFilter());  h.setFilter((Filter) null); "<AssertPlaceHolder>"; }
getFilter() { return this.filter; //Volatile access. }
[*] target: assertNull(h.getFilter())
[-] pred: org. junit. Assert. assertTrue ( f. getFilter() ( ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ) ) instanceof javax. stream. Document ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ) ) instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ( ) ) instanceof javax. stream. Document ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ( ) ) instanceof java. lang. Double ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ) ) instanceof java. lang. Double ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ( ) ) > 0 ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( ( ( f. getFilter() ( ) ) instanceof java. lang. Math ) )

[*] target: assertNull(h.getFilter())
[-] pred:  org. junit. Assert. assertTrue ( f. getFilter() ) )

[*] target: assertNull(h.getFilter())
[-] pred:  )
************************************
************************************
[+] input: testStatefulFilter() { MailHandler h = new MailHandler(); h.setMailProperties(createInitProperties("")); InternalErrorManager em = new FlushErrorManager(h); h.setErrorManager(em); CountingFilter cf = new CountingFilter(); h.setFilter(cf); int MAX_RECORDS = 100; for (int i = 0; i < MAX_RECORDS; i++) { LogRecord r = new LogRecord(Level.SEVERE, ""); h.publish(r); } h.close(); "<AssertPlaceHolder>"; boolean failed = false; for (Exception exception : em.exceptions) { if (!isConnectOrTimeout(exception)) { dump(exception); failed = true; } } assertFalse(failed); assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred: org. junit. Assert. assertTrue ( em. close() ( ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( org. MAX_RECORDS ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( org. apache. commons_RECORDS ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( org. apache. commons.RECORDS ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( cf ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( startsWith ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( ( MAX_RECORDS - i ) ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( org. uk_RECORDS ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( org. wms50 ) )

[*] target: assertEquals(MAX_RECORDS, cf.count)
[-] pred:  org. junit ) )
************************************
************************************
[+] input: testStatefulAttachmentFilter() { MailHandler h = new MailHandler(); h.setMailProperties(createInitProperties("")); InternalErrorManager em = new FlushErrorManager(h); h.setErrorManager(em); CountingFilter negativeOne = new CountingFilter(BooleanFilter.FALSE); h.setFilter(negativeOne); h.setAttachmentFormatters(new SimpleFormatter(), new SimpleFormatter(), new SimpleFormatter()); CountingFilter one = new CountingFilter(BooleanFilter.FALSE); CountingFilter two = new CountingFilter(); h.setAttachmentFilters(BooleanFilter.FALSE, one, two); int MAX_RECORDS = 100; for (int i = 0; i < MAX_RECORDS; i++) { LogRecord r = new LogRecord(Level.SEVERE, ""); h.publish(r); } h.close();  "<AssertPlaceHolder>"; assertEquals(MAX_RECORDS, one.count); assertEquals(MAX_RECORDS, two.count); boolean failed = false; for (Exception exception : em.exceptions) { if (!isConnectOrTimeout(exception)) { dump(exception); failed = true; } } assertFalse(failed); assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred: org. junit. Assert. assertTrue ( em. close() ( some ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ( MAX_RECORDS - 100 ) ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ( MAX_RECORDS * 100 ) ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ( MAX_RECORDS - i ) ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( some, max_RECORDS ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( a ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( 100 ) )

[*] target: assertEquals(MAX_RECORDS, negativeOne.count)
[-] pred:  org
************************************
************************************
[+] input: testStatefulPushFilter() { MailHandler h = new MailHandler(); h.setMailProperties(createInitProperties("")); InternalErrorManager em = new PushErrorManager(h); h.setErrorManager(em); CountingFilter cf = new CountingFilter(); h.setFilter(cf); h.setPushLevel(Level.ALL); h.setPushFilter(cf); LogRecord r = new LogRecord(Level.SEVERE, ""); h.publish(r); h.close(); "<AssertPlaceHolder>"; boolean failed = false; for (Exception exception : em.exceptions) { if (!isConnectOrTimeout(exception)) { dump(exception); failed = true; } } assertFalse(failed); assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(1, cf.count)
[-] pred: org. junit. Assert. assertTrue ( em. close ( cf ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close() ( r ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. closeContainer ( cf ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertEquals ( true, em. close ( cf ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertEquals ( true, em. close ( ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( instant ) )

[*] target: assertEquals(1, cf.count)
[-] pred:  true )

[*] target: assertEquals(1, cf.count)
[-] pred:  org

[*] target: assertEquals(1, cf.count)
[-] pred:  )
************************************
************************************
[+] input: testPushInsidePush() { final Level[] lvls = getAllLevels();  MailHandler instance = new MailHandler(lvls.length + 2); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em); instance.setMailProperties(createInitProperties("")); instance.setLevel(Level.ALL); instance.setFilter((Filter) null); instance.setPushLevel(Level.OFF); instance.setPushFilter((Filter) null);  instance.setFormatter(new SimpleFormatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; try { h.flush(); } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String getTail(Handler h) { assert h instanceof MailHandler : h; final Filter filter = h.getFilter(); try { h.setFilter(filter); } catch (Throwable T) { fail(T.toString()); }  final Level lvl = h.getLevel(); try { h.setLevel(lvl); } catch (Throwable T) { fail(T.toString()); }  final String enc = h.getEncoding(); try { h.setEncoding(enc); } catch (Throwable T) { fail(T.toString()); }  try { h.setFormatter(new SimpleFormatter()); } catch (Throwable T) { fail(T.toString()); }  try { h.close(); assertEquals(h.getLevel(), Level.OFF); } catch (Throwable T) { fail(T.toString()); } return super.getTail(h); } });  Formatter push = new SimpleFormatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; pushTest((MailHandler) h); return super.getHead(h); }  @Override public String getTail(Handler h) { assert h instanceof MailHandler : h; pushTest((MailHandler) h); return super.getTail(h); }  private void pushTest(MailHandler h) { try { h.setPushLevel(Level.ALL); fail("Push level mutable during push"); } catch (IllegalStateException expect) { }  try { h.setPushFilter((Filter) null); fail("Push filter mutable during push"); } catch (IllegalStateException expect) { }  try { h.setPushFilter(new ErrorFilter()); fail("Push filter mutable during push"); } catch (IllegalStateException expect) { }  try { h.push(); } catch (Throwable T) { fail(T.toString()); } } };  Formatter atFor = new SimpleFormatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; MailHandler mh = (MailHandler) h; Formatter[] f = mh.getAttachmentFormatters(); try { mh.setAttachmentFormatters(f); fail("Mutable formatter."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String getTail(Handler h) { getHead(h); return super.getTail(h); } };  Formatter atName = new SimpleFormatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; nameTest((MailHandler) h); return super.getHead(h); }  @Override public String getTail(Handler h) { assert h instanceof MailHandler : h; nameTest((MailHandler) h); return super.getTail(h); }  private void nameTest(MailHandler h) { Formatter[] f = h.getAttachmentNames(); try { h.setAttachmentNames(f); fail("Mutable formatter"); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); }  try { String[] names = new String[f.length]; for (int i = 0; i < names.length; ++i) { names[i] = f[i].toString(); } h.setAttachmentNames(names); fail("Mutable names"); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); }  } };  Formatter atFilter = new SimpleFormatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler; MailHandler mh = (MailHandler) h; Filter[] f = mh.getAttachmentFilters(); try { mh.setAttachmentFilters(f); fail("Mutable filters."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String getTail(Handler h) { getHead(h); return super.getTail(h); } };  Formatter nameComp = new Formatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; MailHandler mh = (MailHandler) h; Comparator<? super LogRecord> c = mh.getComparator(); try { mh.setComparator(c); fail("Mutable comparator."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String format(LogRecord r) { return ""; }  @Override public String getTail(Handler h) { getHead(h); return "name.txt"; } };  Formatter nameMail = new Formatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; MailHandler mh = (MailHandler) h; Properties props = mh.getMailProperties(); try { mh.setMailProperties(props); fail("Mutable props."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String format(LogRecord r) { return ""; }  @Override public String getTail(Handler h) { getHead(h); return "name.txt"; } };  Formatter nameSub = new Formatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; MailHandler mh = (MailHandler) h; Formatter f = mh.getSubject(); try { mh.setSubject(f); fail("Mutable subject."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String format(LogRecord r) { return ""; }  @Override public String getTail(Handler h) { getHead(h); return "name.txt"; } };  Formatter nameAuth = new Formatter() {  @Override public String getHead(Handler h) { assert h instanceof MailHandler : h; MailHandler mh = (MailHandler) h; Authenticator a = mh.getAuthenticator(); try { mh.setAuthenticator(a); fail("Mutable Authenticator."); } catch (IllegalStateException pass) { } catch (Throwable T) { fail(T.toString()); } return super.getHead(h); }  @Override public String format(LogRecord r) { return ""; }  @Override public String getTail(Handler h) { getHead(h); return "name.txt"; } };  instance.setAttachmentFormatters( push, atFor, atName, atFilter); instance.setAttachmentNames( nameComp, nameMail, nameSub, nameAuth);  String SOURCE_CLASS = MailHandlerTest.class.getName(); String SOURCE_METHOD = "testPushInsidePush"; for (Level lvl : lvls) { LogRecord r = new LogRecord(lvl, ""); r.setSourceClassName(SOURCE_CLASS); r.setSourceMethodName(SOURCE_METHOD); instance.publish(r); } instance.flush();  boolean failed = false; for (Exception exception : em.exceptions) { Throwable t = exception; if ((t instanceof MessagingException == false) && (t instanceof IllegalStateException == false)) { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
flush() { push(false, ErrorManager.FLUSH_FAILURE); }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( isIsomorphic ( lvls ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. mozilla. isnt());d )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( e. getMessage ( ), true )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( is()); )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( msg, true )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( is )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(failed)
[-] pred:  test what happens when a new

[*] target: assertFalse(failed)
[-] pred:  test. happens when a new

[*] target: assertFalse(failed)
[-] pred:  )
************************************
************************************
[+] input: testEnabled() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertEquals(true, instance.isEnabled()); final Level[] lvls = getAllLevels(); for (Level lvl : lvls) { instance.setEnabled(false); instance.setLevel(lvl); assertEquals(Level.OFF, instance.getLevel()); assertEquals(false, instance.isEnabled());  instance.setEnabled(true); assertEquals(instance.getLevel(), lvl);  //2nd enable must not produce a null level. instance.setEnabled(true); assertEquals(instance.getLevel(), lvl);  //2nd disable must not produce OFF on re-enable. if (!Level.OFF.equals(lvl)) { instance.setEnabled(false); instance.setEnabled(false); instance.setEnabled(true); assertEquals(instance.getLevel(), lvl); }  }  instance.setLevel(Level.WARNING); instance.close(); assertEquals(Level.OFF, instance.getLevel()); assertEquals(false, instance.isEnabled()); for (Level lvl : lvls) { instance.setLevel(lvl); assertEquals(Level.OFF, instance.getLevel()); assertEquals(false, instance.isEnabled());  instance.setEnabled(true); assertEquals(false, instance.isEnabled()); assertEquals(Level.OFF, instance.getLevel());  instance.setEnabled(false); assertEquals(false, instance.isEnabled()); "<AssertPlaceHolder>"; } assertEquals(true, em.exceptions.isEmpty()); }
getLevel() { //For a this-escape, this value will be OFF. //No need to check that construction completed. return logLevel; //Volatile access. }
[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred: org. junit. Assert. assertEquals ( 11, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 1, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 8, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 9, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 1, em. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 8, em. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( depth, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 24, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org
************************************
************************************
[+] input: testLevel() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getLevel()); try { instance.setLevel((Level) null); fail("Null level was allowed"); } catch (NullPointerException pass) { assertNotNull(instance); } catch (RuntimeException re) { fail(re.toString()); } assertNotNull(instance.getLevel());  final Level[] lvls = getAllLevels(); for (Level lvl : lvls) { instance.setLevel(lvl); assertEquals(instance.getLevel(), lvl); }  instance.setLevel(Level.WARNING); instance.close(); assertEquals(Level.OFF, instance.getLevel()); for (Level lvl : lvls) { instance.setLevel(lvl); "<AssertPlaceHolder>"; } assertEquals(true, em.exceptions.isEmpty()); }
getLevel() { //For a this-escape, this value will be OFF. //No need to check that construction completed. return logLevel; //Volatile access. }
[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred: org. junit. Assert. assertEquals ( 20, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 0, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 1, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 9, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( lvl, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( 11, instance. getLevel() ( ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertEquals ( true, instance. getLevel() ( lvl ) )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  org

[*] target: assertEquals(Level.OFF, instance.getLevel())
[-] pred:  )
************************************
************************************
[+] input: testLevelBeforeClose() { MailHandler instance = this.createHandlerWithRecords(); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  final Level expect = Level.WARNING; instance.setLevel(expect);  instance.setFormatter(new LevelCheckingFormatter(expect)); instance.close();  boolean failed = false; for (Exception exception : em.exceptions) { Throwable t = exception; if (t instanceof MessagingException) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } else { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( em. close ( ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( expect, em. close )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( errMsg, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( msg, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failures )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( em. close )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failure )

[*] target: assertFalse(failed)
[-] pred:  org

[*] target: assertFalse(failed)
[-] pred:  )
************************************
************************************
[+] input: testLevelAfterClose() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  instance.setLevel(Level.WARNING); instance.setFormatter(new LevelCheckingFormatter(Level.OFF)); instance.publish(new CloseLogRecord(Level.SEVERE, "", instance)); assertEquals(Level.OFF, instance.getLevel());  instance.close(); boolean failed = false; for (Exception exception : em.exceptions) { Throwable t = exception; if (t instanceof MessagingException) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } else { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( em. close org. hamcrest. CoreMatchers. is ( failed ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertFalse ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( true, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failures )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( failure )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( success )

[*] target: assertFalse(failed)
[-] pred:  true )

[*] target: assertFalse(failed)
[-] pred:  org

[*] target: assertFalse(failed)
[-] pred:  )
************************************
************************************
[+] input: testPushLevel() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getPushLevel()); instance.setPushLevel((Level) null); assertEquals(Level.OFF, instance.getPushLevel());  final Level[] lvls = getAllLevels(); for (Level lvl : lvls) { instance.setPushLevel(lvl); assertEquals(instance.getPushLevel(), lvl); }  instance.close(); for (Level lvl : lvls) { instance.setPushLevel(lvl); "<AssertPlaceHolder>"; } assertEquals(true, em.exceptions.isEmpty()); }
getPushLevel() { return this.pushLevel; }
[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred: org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )());Count ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )()); ( lvl ) ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )()); 0 ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )()); ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )());Level ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) ) > 0 ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )());Time ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getPushLevel() ( ) )());_PushLevel ) )

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  org

[*] target: assertEquals(instance.getPushLevel(), lvl)
[-] pred:  )
************************************
************************************
[+] input: Exception {  class Base extends MessageErrorManager {  private final String bundleName;  Base(Properties props, final String bundleName) { super(props); this.bundleName = bundleName; }  @Override protected void error(MimeMessage msg, Throwable t, int code) { try { assertNotNull(bundleName); MimeMultipart mp = (MimeMultipart) msg.getContent(); Locale l = Locale.getDefault(); assertEquals(LogManagerProperties.toLanguageTag(l), msg.getHeader("Accept-Language", null)); String[] lang = msg.getContentLanguage(); assertNotNull(lang); assertEquals(LogManagerProperties.toLanguageTag(l), lang[0]); assertEquals(1, mp.getCount()); MimePart part;  part = (MimePart) mp.getBodyPart(0); lang = part.getContentLanguage(); assertNotNull(lang); assertEquals(LogManagerProperties.toLanguageTag(l), lang[0]); assertEquals(LogManagerProperties.toLanguageTag(l), part.getHeader("Accept-Language", null)); } catch (Exception ex) { dump(ex); throw new AssertionError(ex); } } }  MailHandler target = new MailHandler(createInitProperties("")); target.setAttachmentFormatters(new SimpleFormatter()); target.setAttachmentFilters(BooleanFilter.FALSE);  Properties props = new Properties(); props.put("motd", "Hello MailHandler!"); final String p = MailHandler.class.getName(); final Locale l = Locale.getDefault(); final String name = MailHandler.class.getSimpleName().concat("base"); final File f = File.createTempFile(name, ".properties", findClassPathDir()); Locale.setDefault(Locale.US); try { try (FileOutputStream fos = new FileOutputStream(f)) { props.store(fos, "No Comment"); }  String bundleName = f.getName().substring(0, f.getName().lastIndexOf('.')); target.setErrorManager(new Base(target.getMailProperties(), bundleName)); final Logger log = Logger.getLogger(p + '.' + f.getName(), bundleName); hardRef = log; try { assertNotNull(log.getResourceBundle()); assertNotNull(log.getResourceBundleName());  log.addHandler(target); try { log.setUseParentHandlers(false); log.log(Level.SEVERE, "motd"); } finally { log.removeHandler(target); } } finally { hardRef = null; }  target.close();  boolean failed = false; InternalErrorManager em = internalErrorManagerFrom(target); for (Exception t : em.exceptions) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); } finally { Locale.setDefault(l); if (!f.delete() && f.exists()) { f.deleteOnExit(); } } }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( true )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( e. getMessage ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( e. getMessage ( ), org. hamcrest. CoreMatchers. is ( message ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( e. getMessage ( ), org. hamcrest. CoreMatchers. is ( error ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( true, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( e ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( MailHandler. class, result )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. happens )

[*] target: assertFalse(failed)
[-] pred:  panalizes the logger

[*] target: assertFalse(failed)
[-] pred:  utility class for logging stuff
************************************
************************************
[+] input: Exception { MailHandler target = new MailHandler(createInitProperties("")); target.setErrorManager(new MessageErrorManager(target.getMailProperties()) {  @Override protected void error(MimeMessage msg, Throwable t, int code) { try { MimeMultipart mp = (MimeMultipart) msg.getContent(); Locale l = Locale.getDefault(); assertEquals(LogManagerProperties.toLanguageTag(l), msg.getHeader("Accept-Language", null)); String[] lang = msg.getContentLanguage(); assertEquals(LogManagerProperties.toLanguageTag(Locale.ENGLISH), lang[0]); assertEquals(LogManagerProperties.toLanguageTag(Locale.GERMAN), lang[1]); assertEquals(LogManagerProperties.toLanguageTag(Locale.FRANCE), lang[2]); assertEquals(4, mp.getCount()); MimePart part;  part = (MimePart) mp.getBodyPart(0); assertEquals(LogManagerProperties.toLanguageTag(l), part.getHeader("Accept-Language", null)); assertNull(part.getHeader("Content-Language", ","));  part = (MimePart) mp.getBodyPart(1); assertEquals(LogManagerProperties.toLanguageTag(l), part.getHeader("Accept-Language", null)); assertEquals(LogManagerProperties.toLanguageTag(Locale.ENGLISH), part.getHeader("Content-Language", ","));  part = (MimePart) mp.getBodyPart(2); assertEquals(LogManagerProperties.toLanguageTag(l), part.getHeader("Accept-Language", null)); assertEquals(LogManagerProperties.toLanguageTag(Locale.GERMAN), part.getHeader("Content-Language", ","));  part = (MimePart) mp.getBodyPart(3); assertEquals(LogManagerProperties.toLanguageTag(l), part.getHeader("Accept-Language", null)); assertEquals(LogManagerProperties.toLanguageTag(Locale.FRANCE), part.getHeader("Content-Language", ",")); } catch (Exception ex) { dump(ex); throw new AssertionError(ex); } } });  target.setLevel(Level.ALL); target.setFilter(new LocaleFilter(Locale.JAPANESE, true)); target.setPushLevel(Level.OFF); target.setAttachmentFormatters(new SimpleFormatter(), new SimpleFormatter(), new SimpleFormatter()); target.setAttachmentFilters(new LocaleFilter(Locale.ENGLISH, false), new LocaleFilter(Locale.GERMAN, false), new LocaleFilter(Locale.FRANCE, false)); //just the language.  assertEquals(3, target.getAttachmentFormatters().length); assertEquals(3, target.getAttachmentFilters().length);  final List<File> files = new ArrayList<>(); final Properties props = new Properties(); final Locale current = Locale.getDefault(); try { File f; Locale.setDefault(new Locale("", "", "")); f = testContentLangExact(target, props, "_"); files.add(f);  props.put("motd", "Hello MailHandler!"); Locale.setDefault(Locale.ENGLISH); f = testContentLangExact(target, props, "_"); files.add(f);  props.put("motd", "Hallo MailHandler!"); Locale.setDefault(Locale.GERMAN); f = testContentLangExact(target, props, "_"); files.add(f);  props.put("motd", "Bonjour MailHandler!"); Locale.setDefault(Locale.FRANCE); //just the language. f = testContentLangExact(target, props, "_"); files.add(f);  Locale.setDefault(new Locale("", "", "")); f = testContentLangExact(target, props, "_"); files.add(f);  Locale.setDefault(new Locale("", "", "")); f = testContentLangExact(target, props, "."); files.add(f);  props.put("motd", "Hello MailHandler!"); Locale.setDefault(Locale.ENGLISH); f = testContentLangExact(target, props, "."); files.add(f);  props.put("motd", "Hallo MailHandler!"); Locale.setDefault(Locale.GERMAN); f = testContentLangExact(target, props, "."); files.add(f);  props.put("motd", "Bonjour MailHandler!"); Locale.setDefault(Locale.FRANCE); //just the language. f = testContentLangExact(target, props, "."); files.add(f);  Locale.setDefault(new Locale("", "", "")); f = testContentLangExact(target, props, "."); files.add(f); } finally { Locale.setDefault(current); for (File f : files) { if (!f.delete() && f.exists()) { f.deleteOnExit(); } } }  target.close();  boolean failed = false; InternalErrorManager em = internalErrorManagerFrom(target); for (Exception t : em.exceptions) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( target ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( target ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( result ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( output ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( target. isIsomorphic ( ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( target. is()); ( ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( target. isValid ( ) )
************************************
************************************
[+] input: testAuthentication() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  instance.setAuthentication((String) null); assertNull(instance.getAuthenticator());  instance.setAuthentication(EmptyAuthenticator.class.getName()); assertEquals(EmptyAuthenticator.class, instance.getAuthenticator().getClass());  instance.setAuthentication(""); assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"));  instance.setAuthentication("foo"); "<AssertPlaceHolder>";  for (Exception t : em.exceptions) { dump(t); } assertTrue(em.exceptions.isEmpty()); }
getAuthenticator() { checkAccess(); return this.auth; }
[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred: org. junit. Assert. assertNotNull ( em. getAuthenticator() ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticator ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticatorContainer ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticatorInternal ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticatorFuture ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticatorManager ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticatorSame ( ) )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticator_ )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticator() )

[*] target: assertTrue(instance.getAuthenticator().getClass().getName() .contains("DefaultAuthenticator"))
[-] pred:  org. junit. Assert. assertNotNull ( em. getAuthenticator() ) )
************************************
************************************
[+] input: testAuthenticator_Authenticator_Arg() { Authenticator auth = new EmptyAuthenticator();  MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  try { instance.setAuthenticator((Authenticator) null); } catch (RuntimeException RE) { fail(RE.toString()); }  try { instance.setAuthenticator(instance.getAuthenticator()); } catch (RuntimeException RE) { fail(RE.toString()); }  try { instance.setAuthenticator(auth); assertEquals(auth, instance.getAuthenticator()); } catch (RuntimeException RE) { fail(RE.toString()); }  assertEquals(true, em.exceptions.isEmpty());  instance = createHandlerWithRecords(); instance.setAuthenticator(new ThrowAuthenticator()); em = internalErrorManagerFrom(instance); instance.close();  "<AssertPlaceHolder>"; assertEquals(true, em.exceptions.get(0) instanceof MessagingException); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(1, em.exceptions.size())
[-] pred: org. junit. Assert. assertNotNull ( em )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getFrequencyMapping ( ) ) == ( 3 * 1000 ) ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getRoutes ( ). size ( ) ) > 0 ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getFrequencyMapping ( ) ) == 2 ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getFrequencySchema ( ) ) == ( 3 * 1000 ) ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. get ( 0 ) ) instanceof org. apache. CoreMatchers ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getFrequencyMapping ( ) ) == ( 3 * 5 ) ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( em. getFrequencyMapping ( ) ) == 0 ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  )
************************************
************************************
[+] input: testAuthenticator_Char_Array_Arg() { PasswordAuthentication pa; MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  //Null literal means actual password value here. instance.setAuthenticator("null".toCharArray()); pa = passwordAuthentication(instance.getAuthenticator(), "user"); assertEquals("user", pa.getUserName()); assertEquals("null", pa.getPassword());  instance.setAuthenticator("Null".toCharArray()); pa = passwordAuthentication(instance.getAuthenticator(), "user"); assertEquals("user", pa.getUserName()); assertEquals("Null", pa.getPassword());  instance.setAuthenticator("NULL".toCharArray()); pa = passwordAuthentication(instance.getAuthenticator(), "user"); assertEquals("user", pa.getUserName()); assertEquals("NULL", pa.getPassword());  try { instance.setAuthenticator((char[]) null); } catch (RuntimeException RE) { fail(RE.toString()); }  try { instance.setAuthenticator(instance.getAuthenticator()); } catch (RuntimeException RE) { fail(RE.toString()); }  try { instance.setAuthenticator("password".toCharArray()); pa = passwordAuthentication( instance.getAuthenticator(), "user"); assertEquals("user", pa.getUserName()); assertEquals("password", pa.getPassword()); } catch (RuntimeException RE) { fail(RE.toString()); }  assertEquals(true, em.exceptions.isEmpty());  instance = createHandlerWithRecords(); instance.setAuthenticator("password".toCharArray()); em = internalErrorManagerFrom(instance); instance.close();  "<AssertPlaceHolder>"; assertEquals(true, em.exceptions.get(0) instanceof MessagingException); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertEquals(1, em.exceptions.size())
[-] pred: org. junit. Assert. assertNotNull ( em )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. get ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. build ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. toString ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. getTarget ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. getSchema ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. getContext ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit. Assert. assertNotNull ( em. getMessage ( ) )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org. junit { assertNotNull ( em )

[*] target: assertEquals(1, em.exceptions.size())
[-] pred:  org
************************************
************************************
[+] input: Exception { Properties props = new Properties(); MailHandler instance = new MailHandler(); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getMailProperties()); assertEquals(Properties.class, instance.getMailProperties().getClass());   instance.setMailProperties((Properties) null); assertTrue(instance.getMailProperties().isEmpty());  instance.setMailProperties(props); Properties stored = instance.getMailProperties();  assertNotNull(stored); assertNotSame(props, stored); assertEquals(props.getClass(), stored.getClass());  assertEquals(true, em.exceptions.isEmpty()); instance.close();  instance = createHandlerWithRecords(); props = instance.getMailProperties(); em = new InternalErrorManager(); instance.setErrorManager(em);  props.setProperty("mail.from", "localhost@localdomain"); props.setProperty("mail.to", "localhost@localdomain"); instance.setMailProperties(props); instance.flush(); boolean failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } assertFalse(failed); assertFalse(em.exceptions.isEmpty());  props.setProperty("mail.from", "localhost@localdomain"); props.setProperty("mail.to", "::1@@"); instance.setMailProperties(props);  em = new InternalErrorManager(); instance.setErrorManager(em);  instance.publish(new LogRecord(Level.SEVERE, "test")); instance.close(); failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (t instanceof AddressException || isConnectOrTimeout(t)) { continue; } dump(t); failed = true; } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( failed, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( failures, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertFalse ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( failed, org. hamcrest. CoreMatchers. is ( failed ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( failed, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertTrue ( msg, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. boolean failed, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( failed, failures )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. message ( failed )
************************************
************************************
[+] input: Exception { Properties props = new Properties(); MailHandler instance = new MailHandler(); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getMailProperties()); assertEquals(Properties.class, instance.getMailProperties().getClass());  instance.setMailEntries( "mail.from=localhost@localdomain\n" + "mail.to=remotehost@remotedomain#!" + "mail.host=localhost#!" + "mail.user=mailuser");  Properties stored = instance.getMailProperties();  assertNotNull(stored); assertNotSame(props, stored); assertEquals(props.getClass(), stored.getClass());  assertEquals(true, em.exceptions.isEmpty()); assertEquals("localhost@localdomain", stored.getProperty("mail.from")); assertEquals("remotehost@remotedomain", stored.getProperty("mail.to")); assertEquals("localhost", stored.getProperty("mail.host")); assertEquals("mailuser", stored.getProperty("mail.user"));  assertEquals(false, stored.isEmpty()); instance.setMailEntries((String) null); assertEquals(true, instance.getMailProperties().isEmpty()); assertEquals("", instance.getMailEntries());  instance.setMailEntries( "mail.from:localhost@localdomain\n" + "mail.to:remotehost@remotedomain#!" + "mail.host:localhost#!" + "mail.user:remoteuser"); stored = instance.getMailProperties();  //Ensure properties are not cleared. assertEquals("localhost@localdomain", stored.getProperty("mail.from")); assertEquals("remotehost@remotedomain", stored.getProperty("mail.to")); assertEquals("localhost", stored.getProperty("mail.host")); assertEquals("remoteuser", stored.getProperty("mail.user"));  instance.setMailEntries(""); //Clears all properties assertTrue(instance.getMailProperties().isEmpty()); assertEquals("", instance.getMailEntries());  instance.setMailProperties(stored); assertEquals(false, instance.getMailProperties().isEmpty());  instance.setMailEntries("null"); //null literal is treated as empty assertEquals(true, instance.getMailProperties().isEmpty()); assertEquals("", instance.getMailEntries());  instance.setMailProperties(stored); assertEquals(false, stored.isEmpty());  instance.setMailEntries("mail.user=root"); //single entry stored = instance.getMailProperties(); assertEquals(1, stored.size()); assertEquals("root", stored.getProperty("mail.user")); assertEquals("mail.user=root" + System.lineSeparator(), instance.getMailEntries());  instance.setMailEntries("mail.user"); //key with empty value stored = instance.getMailProperties();  //Ensure properties are not cleared. assertEquals(1, stored.size()); assertEquals("", stored.getProperty("mail.user")); assertEquals("mail.user=" + System.lineSeparator(), instance.getMailEntries());  final String test = "test\u03b1"; final String saddr = test + '@' + UNKNOWN_HOST; instance.setMailEntries("mail.user="+ saddr + "#!mail.mime.allowutf8=true");  stored = instance.getMailProperties(); assertEquals("true", stored.getProperty("mail.mime.allowutf8")); assertEquals(saddr, stored.getProperty("mail.user"));  instance.setMailEntries(instance.getMailEntries()); assertEquals(stored, instance.getMailProperties());  instance.close();  for (Exception exception : em.exceptions) { dump(exception); } "<AssertPlaceHolder>"; }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( stored ) ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( props ) ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( stored ) ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( props ) ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( properties ) ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( 0, rendered )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( prop ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( properties ) )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  org. junit. Assert. assertNull ( rendered )

[*] target: assertTrue(em.exceptions.isEmpty())
[-] pred:  gets the name of the application
************************************
************************************
[+] input: Exception { Properties props = createInitProperties(""); props.put("mail.from", ".invalid@@address."); props.remove("mail.to"); props.remove("mail.cc"); props.remove("mail.bcc");  //Ensure from can not be computed. assertNull(InternetAddress.getLocalAddress(Session.getInstance(props))); MailHandler instance = createHandlerWithRecords(); instance.setErrorManager(new InternalErrorManager()); instance.setMailProperties(props); instance.close(); InternalErrorManager em = internalErrorManagerFrom(instance); boolean failed = false; for (Exception exception : em.exceptions) { if (exception instanceof MessagingException) { if (exception instanceof AddressException || exception.getCause() instanceof AddressException) { continue; }  if (exception.getMessage().contains("From")) { continue; }  if (exception.getMessage().contains("No recipient addresses")) { continue; } } dump(exception); failed = true; } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. true, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. true ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. whether failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. message ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit )

[*] target: assertFalse(failed)
[-] pred:  whether failed )

[*] target: assertFalse(failed)
[-] pred:  is failed )

[*] target: assertFalse(failed)
[-] pred:  org

[*] target: assertFalse(failed)
[-] pred:  )
************************************
************************************
[+] input: testAttachmentFiltersDefaults() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em); instance.setFilter(new ErrorFilter()); final Formatter f = new SimpleFormatter(); instance.setAttachmentFormatters(f, f, f, f);  for (Exception exception : em.exceptions) { dump(exception); } assertTrue(em.exceptions.isEmpty());  assertEquals(ErrorFilter.class, instance.getFilter().getClass()); assertEquals(instance.getFilter(), instance.getAttachmentFilters()[0]); assertEquals(instance.getFilter(), instance.getAttachmentFilters()[1]); assertEquals(instance.getFilter(), instance.getAttachmentFilters()[2]); assertEquals(instance.getFilter(), instance.getAttachmentFilters()[3]);  instance.setAttachmentFilters(null, null, null, null); assertEquals(ErrorFilter.class, instance.getFilter().getClass()); assertNull(instance.getAttachmentFilters()[0]); assertNull(instance.getAttachmentFilters()[1]); assertNull(instance.getAttachmentFilters()[2]); "<AssertPlaceHolder>"; }
getAttachmentFilters() { return readOnlyAttachmentFilters().clone(); }
[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred: org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ). isEmpty ( ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ). equals ( f ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ).()); ( ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ). contains ( f ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ).()); ( true ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ), null )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters ( ). isEmpty ( ) )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ( ). 0 )

[*] target: assertNull(instance.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFilters() ) )
************************************
************************************
[+] input: testAttachmentNames_StringArr() { Formatter[] names; MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  names = instance.getAttachmentNames(); assertNotNull(names);  instance.setAttachmentNames((String[]) null); assertEquals(0, instance.getAttachmentNames().length);  instance.setAttachmentFormatters(); try { instance.setAttachmentNames(new String[0]); } catch (RuntimeException re) { fail(re.toString()); }   instance.setAttachmentNames(new String[1]); assertEquals(instance.getAttachmentFormatters().length, 1); assertNotNull(instance.getAttachmentNames()[0]);   instance.setAttachmentNames("foo.txt", ""); assertFalse(instance.getAttachmentNames()[1].toString().isEmpty());   instance.setAttachmentFormatters( new SimpleFormatter(), new XMLFormatter());  instance.setAttachmentNames(new String[2]);  Formatter[] formatters = instance.getAttachmentFormatters(); names = instance.getAttachmentNames();  assertEquals(names[0].toString(), String.valueOf(formatters[0])); assertEquals(names[1].toString(), String.valueOf(formatters[1]));  String[] stringNames = new String[]{"error.txt", "error.xml"}; instance.setAttachmentNames(stringNames); assertEquals(stringNames[0], instance.getAttachmentNames()[0].toString()); assertEquals(stringNames[1], instance.getAttachmentNames()[1].toString());  stringNames[0] = "info.txt"; assertEquals(stringNames[0].equals( instance.getAttachmentNames()[0].toString()), false);   instance.setAttachmentNames(new String[0]); "<AssertPlaceHolder>"; assertEquals(true, em.exceptions.isEmpty()); }
getAttachmentNames() { final Formatter[] formatters; synchronized (this) { formatters = this.attachmentNames; } return formatters.clone(); }
[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred: org. junit. Assert. assertThat ( em. getAttachmentNames ( ), org. hamcrest. CoreMatchers. is ( stringNames ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNamesNames ( ), org. hamcrest. CoreMatchers. is ( stringNames ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames ( ), org. hamcrest. CoreMatchers. is ( stringNames[0] ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentNames ( ). isEmpty ( ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertEquals ( em. getAttachmentNames ( ), stringNames[0] )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames ( ), org. hamcrest. Matchers. is ( stringNames ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNamesNumber ( ), org. hamcrest. CoreMatchers. is ( stringNames ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertNull ( em. getAttachmentNames ( ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentNames ( stringNames[0] ) )

[*] target: assertEquals(0, instance.getAttachmentNames().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentNames (
************************************
************************************
[+] input: testAttachmentNames_FormatterArr() { Formatter[] formatters; MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getAttachmentNames());   instance.setAttachmentNames((Formatter[]) null); assertEquals(0, instance.getAttachmentNames().length);   instance.setAttachmentFormatters(); instance.setAttachmentNames(new Formatter[2]); assertEquals(2, instance.getAttachmentNames().length); assertEquals(2, instance.getAttachmentFormatters().length);   instance.setAttachmentFormatters( new SimpleFormatter(), new XMLFormatter());  assertEquals(instance.getAttachmentFormatters().length, instance.getAttachmentNames().length);  formatters = new Formatter[]{new SimpleFormatter(), new XMLFormatter()}; instance.setAttachmentNames(formatters); formatters[0] = new XMLFormatter(); assertEquals(formatters[0].equals(instance.getAttachmentNames()[0]), false);  instance.setAttachmentNames(new ThrowFormatter[]{new ThrowFormatter(), new ThrowFormatter()}); assertEquals(Formatter[].class, instance.getAttachmentNames().getClass()); assertEquals(em.exceptions.isEmpty(), true); instance.close();   instance.setAttachmentNames(new Formatter[0]); "<AssertPlaceHolder>"; }
getAttachmentFormatters() { Formatter[] formatters; synchronized (this) { formatters = this.attachmentFormatters; } return formatters.clone(); }
[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred: org. junit. Assert. assertNull ( em. getAttachmentFormatters ( ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertEquals ( em. getAttachmentFormatters ( ), formatters[0] )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentFormatters ( ), org. hamcrest. CoreMatchers. is ( instance ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertThat ( em. getAttachmentFormatters ( ), org. hamcrest. CoreMatchers. is ( factory ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertSame ( em. getAttachmentFormatters ( ), formatters[0] )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertEquals ( instance. getAttachmentFormatters ( ), formatters[0] )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertTrue ( em. getAttachmentFormatters ( ). isEmpty ( ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertEquals ( behavior, em. getAttachmentFormatters ( ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertSame ( behavior, em. getAttachmentFormatters ( ) )

[*] target: assertEquals(0, instance.getAttachmentFormatters().length)
[-] pred:  org. junit. Assert. assertNull ( em. getAttachmentFormatters[0] ( ) )
************************************
************************************
[+] input: testAttachmentFilterSwapBeforePush() { MailHandler instance = new MailHandler(10); instance.setMailProperties(createInitProperties("")); instance.setLevel(Level.ALL); instance.setPushLevel(Level.OFF); instance.setPushFilter((Filter) null); instance.setFilter(BooleanFilter.FALSE); instance.setAttachmentFormatters(new XMLFormatter()); instance.setAttachmentFilters(new Filter[]{null}); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  LogRecord record = new LogRecord(Level.SEVERE, "lost record"); assertTrue(instance.isLoggable(record));  instance.publish(record); instance.setAttachmentFilters(BooleanFilter.FALSE); assertFalse(instance.isLoggable(record)); instance.close();  int seenFormat = 0; boolean failed = false; for (Exception exception : em.exceptions) { if (exception instanceof MessagingException) { continue; } if (exception instanceof RuntimeException && exception.getMessage().contains(instance.getFilter().toString()) && exception.getMessage().contains(Arrays.asList(instance.getAttachmentFilters()).toString())) { seenFormat++; continue; //expected. } failed = true; } "<AssertPlaceHolder>"; assertFalse(failed); }
toString() { return name; }
[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( true, failed )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertTrue ( failure )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertTrue ( down )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertTrue ( fatal )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit, failed )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  true, failed )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  true )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  )
************************************
************************************
[+] input: testFilterSwapBeforePush() { MailHandler instance = new MailHandler(10); instance.setMailProperties(createInitProperties("")); instance.setLevel(Level.ALL); instance.setPushLevel(Level.OFF); instance.setPushFilter((Filter) null); instance.setAttachmentFormatters(new SimpleFormatter()); instance.setAttachmentFilters(BooleanFilter.FALSE); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  LogRecord record = new LogRecord(Level.SEVERE, "lost record"); assertTrue(instance.isLoggable(record));  instance.publish(record); instance.setFilter(BooleanFilter.FALSE); assertFalse(instance.isLoggable(record)); instance.close();  int seenFormat = 0; for (Exception exception : em.exceptions) { if (exception instanceof MessagingException) { continue; } else if (exception instanceof RuntimeException && exception.getMessage().contains(instance.getFilter().toString())) { seenFormat++; continue; //expected. } else { fail(String.valueOf(exception)); } } "<AssertPlaceHolder>"; }
toString() { return name; }
[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred: org. junit. Assert. assertNotNull ( em. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toString() ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toStringScheme ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toStringBootstrap ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toString toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toStringEqual ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( em. toString Dyn ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  , em. toString() ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  , em. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  } }
************************************
************************************
[+] input: testFilterFlipFlop() { MailHandler instance = new MailHandlerOverride(10); instance.setMailProperties(createInitProperties("")); instance.setLevel(Level.ALL); instance.setPushLevel(Level.OFF); instance.setPushFilter((Filter) null); FlipFlopFilter badFilter = new FlipFlopFilter(); instance.setFilter(badFilter); instance.setAttachmentFormatters(new SimpleFormatter());  InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  LogRecord record = new LogRecord(Level.SEVERE, "lost record");  assertSame(badFilter, instance.getFilter()); badFilter.value = true; assertSame(badFilter, instance.getFilter());  assertTrue(instance.isLoggable(record)); instance.publish(record); badFilter.value = false;  assertSame(badFilter, instance.getFilter()); assertFalse(instance.isLoggable(record)); instance.close(); assertSame(badFilter, instance.getFilter());  int seenFormat = 0; for (Exception exception : em.exceptions) { if (exception instanceof MessagingException) { continue; } else if (exception instanceof RuntimeException && exception.getMessage().contains(instance.getFilter().toString())) { seenFormat++; continue; //expected. } else { fail(String.valueOf(exception)); } } "<AssertPlaceHolder>"; }
toString() { return name; }
[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred: org. junit. Assert. assertEquals ( badFilter. toString ( ), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString() ( ), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString toString ( ), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString(), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toStringminus ( ), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toStringFetch ( ), badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString, badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertNotNull ( badFilter. toString ( ) )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString() ( ), badFilter. toString F )

[*] target: assertTrue("No format error", seenFormat > 0)
[-] pred:  org. junit. Assert. assertEquals ( badFilter. toString ( ), badFilter. toString F )
************************************
************************************
[+] input: Exception { Properties props = createInitProperties("");  MailHandler target = new MailHandler(props); Session session = Session.getInstance(props); MimeMessage msg = new MimeMessage(session); Address[] from = InternetAddress.parse("me@localhost", false); msg.addFrom(from); msg.setRecipients(Message.RecipientType.TO, from); msg.setHeader("Content-Transfer-Encoding", EncoderTypes.BASE_64.getEncoder()); msg.saveChanges(); try { msg.writeTo(new ByteArrayOutputStream(384)); fail("Verify type 'remote' may hide remote exceptions."); } catch (RuntimeException re) { throw re; //Avoid catch all. } catch (Exception expect) { assertNotNull(expect.getMessage()); assertTrue(expect.getMessage().length() != 0); assertTrue(target.isMissingContent(msg, expect)); assertTrue(target.isMissingContent(msg, new Exception(expect))); assertTrue(target.isMissingContent(msg, new MessagingException("", expect))); assertFalse(target.isMissingContent(msg, new Exception())); "<AssertPlaceHolder>"; } }
isMissingContent(Message msg, Throwable t) { final Object ccl = getAndSetContextClassLoader(MAILHANDLER_LOADER); try { msg.writeTo(new ByteArrayOutputStream(MIN_HEADER_SIZE)); } catch (final RuntimeException RE) { throw RE; //Avoid catch all. } catch (final Exception noContent) { final String txt = noContent.getMessage(); if (!isEmpty(txt)) { int limit = 0; while (t != null) { if (noContent.getClass() == t.getClass() && txt.equals(t.getMessage())) { return true; }  //Not all Jakarta Mail implementations support JDK 1.4 //exception chaining. final Throwable cause = t.getCause(); if (cause == null && t instanceof MessagingException) { t = ((MessagingException) t).getNextException(); } else { t = cause; }  //Deal with excessive cause chains and cyclic throwables. if (++limit == (1 << 16)) { break; //Give up. } } } } finally { getAndSetContextClassLoader(ccl); } return false; }
[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred: org. junit. Assert. assertTrue ( target. isMissingContent(msg, expect ) )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertTrue ( target. isMissingContent(event, expect ) )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertTrue ( target. isMissingContent(msg, expected ) )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertTrue ( target. isMissingContent(msg, expect )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertTrue ( target. isMissingContent(eventevent )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertTrue ( target. isMissingContent(event, expect )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertEquals ( target, msg )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit. Assert. assertEquals ( target, from )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  org. junit ) )

[*] target: assertFalse(target.isMissingContent(msg, new RuntimeException()))
[-] pred:  , target )
************************************
************************************
[+] input: Exception { final String p = MailHandler.class.getName(); Properties props = createInitProperties(p); props.put(p.concat(".errorManager"), InternFilterErrorManager.class.getName()); props.put(p.concat(".comparator"), InternFilterFormatterComparator.class.getName()); props.put(p.concat(".filter"), InternFilter.class.getName()); props.put(p.concat(".pushFilter"), InternFilterErrorManager.class.getName());  props.put(p.concat(".attachment.formatters"), SimpleFormatter.class.getName() + ", " + InternFilterFormatter.class.getName() + ", " + InternFormatter.class.getName() + ", " + XMLFormatter.class.getName() + ", " + InternFormatter.class.getName() + ", " + SimpleFormatter.class.getName() + ", " + SimpleFormatter.class.getName());  props.put(p.concat(".attachment.filters"), null + ", " + InternFilterFormatter.class.getName() + ", " + InternFilterFormatter.class.getName() + ", " + InternFilter.class.getName() + ", " + InternFilter.class.getName() + ", " + InternBadSubFilter.class.getName() + ", " + InternBadFilter.class.getName());  final String txt = "Intern test"; props.put(p.concat(".attachment.names"), txt + ", " + InternFilterFormatter.class.getName() + ", " + InternFilterFormatter.class.getName() + ", " + txt + ", " + InternFormatter.class.getName() + ", " + InternFilterFormatterComparator.class.getName() + ", " + InternFilterFormatterComparator.class.getName()); props.put(p.concat(".subject"), txt);  MailHandler instance = testIntern(p, props); instance.close();  Formatter[] formatter = instance.getAttachmentFormatters(); Filter[] filter = instance.getAttachmentFilters(); Formatter[] names = instance.getAttachmentNames();  assertSame(instance.getErrorManager(), instance.getPushFilter()); assertNull(filter[0]); assertSame(filter[1], filter[2]); assertSame(filter[1], formatter[1]); assertSame(filter[2], formatter[1]); assertSame(names[1], filter[1]); assertSame(names[1], formatter[1]); assertSame(names[2], filter[2]); assertSame(names[2], formatter[1]); assertSame(names[1], filter[2]); assertNotNull(instance.getSubject()); assertSame(instance.getSubject(), names[0]); assertSame(instance.getSubject(), names[3]); assertSame(names[0], names[3]); assertNotNull(instance.getFilter()); assertSame(instance.getFilter(), filter[3]); assertSame(instance.getFilter(), filter[4]); assertSame(filter[3], filter[4]); assertNotSame(filter[5], filter[6]); //Bad equals method. assertNotNull(instance.getComparator());  //Comparator is not interned. assertNotSame(instance.getComparator(), names[5]); "<AssertPlaceHolder>"; assertSame(names[5], names[6]);  InternalErrorManager em = internalErrorManagerFrom(instance); boolean failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (t instanceof IllegalArgumentException && String.valueOf(t.getMessage()).contains("equal")) { continue; } dump(t); failed = true; } assertFalse(failed); assertFalse(em.exceptions.isEmpty()); }
getComparator() { return this.comparator; }
[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred: org. junit. Assert. assertThat ( errors, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. empty ( ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( p ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( c ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( p ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. empty ( ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( p ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. any ( ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( p, org. hamcrest. Matchers. is ( org. hamcrest. CoreMatchers. equalTo ( p ) ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( errors. isEmpty ( ), org. hamcrest. Matchers. is ( true ) )

[*] target: assertNotSame(instance.getComparator(), names[6])
[-] pred:  org. junit. Assert. assertThat ( event. getMessage ( ), org. hamcrest. Matchers. is ( p ) )
************************************
************************************
[+] input: Exception { final String p = MailHandler.class.getName(); Properties props = createInitProperties(p); props.put(p.concat(".attachment.formatters"), InternFormatter.class.getName() + ", " + NonDiscriminatingFormatter1.class.getName() + ", " + NonDiscriminatingFormatter2.class.getName() + ", " + NonDiscriminatingFormatter3.class.getName() ); MailHandler instance = testIntern(p, props); instance.close();  InternalErrorManager em = internalErrorManagerFrom(instance); boolean failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (t instanceof IllegalArgumentException && String.valueOf(t.getMessage()).contains("equal")) { continue; } dump(t); failed = true; } "<AssertPlaceHolder>"; assertEquals(2, em.exceptions.size()); }
close() { checkAccess(); try { Message msg = null; synchronized (this) { try { msg = writeLogRecords(ErrorManager.CLOSE_FAILURE); } finally {  //Change level after formatting. this.logLevel = Level.OFF; this.disabledLevel = null; //free reference /** * The sign bit of the capacity is set to ensure that * records that have passed isLoggable, but have yet to be * added to the internal buffer, are immediately pushed as * an email. */ if (this.capacity > 0) { this.capacity = -this.capacity; }  //Only need room for one record after closed //Ensure not inside a push. if (size == 0 && data.length != 1) { initLogRecords(1); } } }  if (msg != null) { send(msg, false, ErrorManager.CLOSE_FAILURE); } } catch (final LinkageError JDK8152515) { reportLinkageError(JDK8152515, ErrorManager.CLOSE_FAILURE); } catch (final ServiceConfigurationError sce) { reportConfigurationError(sce, ErrorManager.CLOSE_FAILURE); } }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertTrue ( failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. dump(t); failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. flush ( p ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. flush ( failed ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. stream ( p ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. flush ( ) )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertThat ( em. dump(t); failed )

[*] target: assertFalse(failed)
[-] pred:  org. junit. Assert. assertEquals ( continue;, em. retrieve ( p ) )

[*] target: assertFalse(failed)
[-] pred:  org
************************************
************************************
[+] input: Exception { InternalErrorManager em; MailHandler target; final String p = MailHandler.class.getName(); final LogManager manager = LogManager.getLogManager(); final Properties props = createInitProperties(p); props.put(p.concat(".errorManager"), InternalErrorManager.class.getName()); props.put(p.concat(".filter"), ErrorFilter.class.getName()); props.put(p.concat(".attachment.formatters"), SimpleFormatter.class.getName()); props.put(p.concat(".attachment.names"), Properties.class.getName()); assertNull(props.getProperty(p.concat(".attachment.filters")));  read(manager, props); try { target = new MailHandler(); try { em = internalErrorManagerFrom(target); for (Exception exception : em.exceptions) { dump(exception); } assertTrue(em.exceptions.isEmpty()); } finally { target.close(); } } finally { manager.reset(); }  assertEquals(ErrorFilter.class, target.getFilter().getClass()); assertEquals(target.getFilter(), target.getAttachmentFilters()[0]);  props.put(p.concat(".attachment.formatters"), SimpleFormatter.class.getName() + ", " + SimpleFormatter.class.getName() + ", " + SimpleFormatter.class.getName() + ", " + SimpleFormatter.class.getName()); props.put(p.concat(".attachment.names"), "a.txt, b.txt, c.txt, d.txt"); props.put(p.concat(".attachment.filters"), "null, " + ThrowFilter.class.getName());  read(manager, props); try { target = new MailHandler(); try { em = internalErrorManagerFrom(target); boolean failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (t instanceof IndexOutOfBoundsException) { continue; } dump(t); failed = true; } assertFalse(failed); assertFalse(em.exceptions.isEmpty()); } finally { target.close(); } } finally { manager.reset(); }  assertEquals(ErrorFilter.class, target.getFilter().getClass()); assertNull(target.getAttachmentFilters()[0]); assertEquals(ThrowFilter.class, target.getAttachmentFilters()[1].getClass()); assertEquals(target.getFilter(), target.getAttachmentFilters()[2]); "<AssertPlaceHolder>"; }
getAttachmentFilters() { return readOnlyAttachmentFilters().clone(); }
[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( target. containsKey ( p ) )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( found )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( msg, found )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( msg, true )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( msg, received )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( target. is()); ( ) )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  org. junit. Assert. assertTrue ( target. is()); )

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  retrieves the source of this connection

[*] target: assertEquals(target.getFilter(), target.getAttachmentFilters()[3])
[-] pred:  )
************************************
************************************
[+] input: Exception { final String encoding = System.getProperty("file.encoding", "8859_1"); final String test = MailHandlerTest.class.getName(); final String p = MailHandler.class.getName(); final Properties props = createInitProperties(p); String key;  setPending(new RuntimeException()); try { key = p.concat(".errorManager"); props.put(key, test.concat("$StaticInitReErrorManager"));  final LogManager manager = LogManager.getLogManager(); try { read(manager, props); ByteArrayOutputStream oldErrors = new ByteArrayOutputStream(); PrintStream newErr = new PrintStream(oldErrors, false, encoding); @SuppressWarnings("UseOfSystemOutOrSystemErr") final PrintStream err = System.err; System.setErr(newErr); try { final MailHandler target = new MailHandler(); try { System.setErr(err); target.setErrorManager(new ErrorManager()); } finally { target.close(); } } finally { System.setErr(err); }  //java.util.logging.ErrorManager: 4 //java.lang.reflect.InvocationTargetException // at .... //Caused by: java.lang.ExceptionInInitializerError // at... //Caused by: java.lang.RuntimeException final String data = oldErrors.toString(encoding); assertTrue(data, data.contains(ErrorManager.class.getName())); int ite, eiie, re; ite = data.indexOf(InvocationTargetException.class.getName()); eiie = data.indexOf(ExceptionInInitializerError.class.getName(), ite); if (eiie < 0) { re = data.indexOf(RuntimeException.class.getName(), ite); assertTrue(data, ite < re); } else { re = data.indexOf(RuntimeException.class.getName(), eiie); assertTrue(data, ite < eiie); assertTrue(data, eiie < re); } } finally { manager.reset(); } "<AssertPlaceHolder>"; } finally { setPending((Throwable) null); } }
reset() { assert Thread.holdsLock(this); if (size < data.length) { Arrays.fill(data, 0, size, (LogRecord) null); } else { Arrays.fill(data, (LogRecord) null); } this.size = 0; }
[*] target: assertNotNull(props.remove(key))
[-] pred: org. junit. Assert. assertEquals ( oldErr, newErr )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( data, oldErrors. toString ( ) )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( data, newErr )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( oldErrors. toString ( ), p )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( 0, newErr. size ( ) )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( 0, oldErrors. size ( ) )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( oldErrors. size ( ), size )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( oldErrors, newErr )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( oldErr, re )

[*] target: assertNotNull(props.remove(key))
[-] pred:  org. junit. Assert. assertEquals ( oldErrors. toString ( ), re )
************************************
************************************
[+] input: testCompareThrownDoesNotApply() { SeverityComparator a = new SeverityComparator(); Throwable tc1 = new Error(new Exception()); Throwable tc2 = new Exception(new Exception()); assertTrue(a.compareThrowable(tc1, tc2) > 0); assertTrue(a.compareThrowable(tc2, tc1) < 0);  tc1 = new RuntimeException(tc1); assertTrue(a.compareThrowable(tc1, tc2) > 0); "<AssertPlaceHolder>";  }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred: org. junit. Assert. assertNull ( a. compareThrowable ( tc2 ) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( tc1. compareThrowable ( tc2 ) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable(st22 )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( tc2. compareThrowable ( tc1 ) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertFalse ( a. compareThrowable ( tc2 ) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable(t1) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable(st2 ) )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertSame ( tc1, tc2 )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( tc1 )

[*] target: assertTrue(a.compareThrowable(tc2, tc1) < 0)
[-] pred:  org. junit. Assert. assertNull ( tc2 )
************************************
************************************
[+] input: testCompareThrownNull() { SeverityComparator a = new SeverityComparator(); assertEquals(0, a.compareThrowable((Throwable) null, (Throwable) null)); assertTrue(a.compareThrowable(new Throwable(), (Throwable) null) > 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred: org. junit. Assert. assertEquals ( 0, a. compareThrowable ( new Throwable ( ) ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( Throwable ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( Throwable :: exception ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( throw ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( catch ( exception ) ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( Throwable ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( exception ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( Throwable :: RuntimeException ) )

[*] target: assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0)
[-] pred:  org
************************************
************************************
[+] input: testCompareNormalNormal() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new InterruptedException(), new InterruptedIOException()) == 0); assertTrue(a.compareThrowable(new InterruptedIOException(), new InterruptedException()) == 0); "<AssertPlaceHolder>";  }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new InterruptedException()) ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new InterruptedException()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException()) ( ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( null ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException()) ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(ststExceptionException ( ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException()) ( null ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException()) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(2Exception ( null ) )

[*] target: assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0)
[-] pred:  org
************************************
************************************
[+] input: testCompareNormalError() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new InterruptedException(), new Error()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Error()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException ( null ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( newException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newRecordException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  org

[*] target: assertTrue(a.compareThrowable(new Error(), new InterruptedException()) > 0)
[-] pred:  )
************************************
************************************
[+] input: testCompareNormalRuntimeException() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new InterruptedException(), new RuntimeException()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( new Exception()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newMapping ( ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newException ( ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newAttempt1 )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException ( null ) )

[*] target: assertTrue(a.compareThrowable(new RuntimeException(), new InterruptedException()) > 0)
[-] pred:  org
************************************
************************************
[+] input: testCompareNormalNonNormal() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new InterruptedException(), new Throwable()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred: org. junit. Assert. assertNull ( a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertFalse ( a. compareThrowable ( new Throwable()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable ( new Throwable()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertFalse ( a. compareThrowable ( new Exception()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertFalse ( a. compareThrowable(new InterruptedException ( ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertNull ( a. compareThrowable ( new Exception()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org. junit. Assert. assertFalse ( a. compareThrowable(newException ( ) )

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  org

[*] target: assertTrue(a.compareThrowable(new Throwable(), new InterruptedException()) > 0)
[-] pred:  )
************************************
************************************
[+] input: testCompareRuntimeRuntime() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new NullPointerException(), new IllegalArgumentException()) == 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new IllegalArgumentException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new NullPointerException ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( null ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable( new IllegalArgumentException ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( null, null ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 5, a. compareThrowable ( new IllegalArgumentException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( exception ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( a ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new NullPointerException()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new NullPointerException ( null ) )
************************************
************************************
[+] input: testCompareThrowableRuntime() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new Throwable(), new IllegalArgumentException()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new IllegalArgumentException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable ( new IllegalArgumentException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newException()) ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new ExceptionContainer ( ) ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  org

[*] target: assertTrue(a.compareThrowable(new IllegalArgumentException(), new Throwable()) > 0)
[-] pred:  )
************************************
************************************
[+] input: testCompareThrowableError() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new Throwable(), new Error()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( newException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( new Error()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new IOException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new error ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( newException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new Throwable()) > 0)
[-] pred:  org
************************************
************************************
[+] input: testCompareRuntimeError() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new RuntimeException(), new Error()) < 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable(new RuntimeException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new RuntimeException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Error()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable( new Error()) ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( null ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( newException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new IllegalArgumentException ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(dRuntimeException ( ) )

[*] target: assertTrue(a.compareThrowable(new Error(), new RuntimeException()) > 0)
[-] pred:  org
************************************
************************************
[+] input: testCompareThrowableException() { SeverityComparator a = new SeverityComparator(); assertTrue(a.compareThrowable(new Throwable(), new Exception()) == 0); "<AssertPlaceHolder>"; }
compareThrowable(final Throwable t1, final Throwable t2) { if (t1 == t2) { //Reflexive test including null. return 0; } else { //Only one or the other is null at this point. //Force normal occurrence to be lower than null. if (t1 == null) { return isNormal(t2) ? 1 : -1; } else { if (t2 == null) { return isNormal(t1) ? -1 : 1; } }  //From this point on neither are null. //Follow the shortcut if we can. if (t1.getClass() == t2.getClass()) { return 0; }  //Ensure normal occurrence flow control is ordered low. if (isNormal(t1)) { return isNormal(t2) ? 0 : -1; } else { if (isNormal(t2)) { return 1; } }  //Rank the two unidenticial throwables using the rules from //JLS 11.1.1. The Kinds of Exceptions and //JLS 11.5 The Exception Hierarchy. if (t1 instanceof Error) { return t2 instanceof Error ? 0 : 1; } else if (t1 instanceof RuntimeException) { return t2 instanceof Error ? -1 : t2 instanceof RuntimeException ? 0 : 1; } else { return t2 instanceof Error || t2 instanceof RuntimeException ? -1 : 0; } } }
[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred: org. junit. Assert. assertEquals ( 1, a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( new Exception()) ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception()) ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable(new Throwable ( ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertTrue ( a. compareThrowable ( new Exception()) ( 3 ) ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Exception ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable ( new Throwable ( ) ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, a. compareThrowable(newException ( ) )

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  org

[*] target: assertTrue(a.compareThrowable(new Exception(), new Throwable()) == 0)
[-] pred:  )
************************************
************************************
[+] input: testIsNormal() { SeverityComparator a = new SeverityComparator(); assertTrue(a.isNormal(this.headIeChain(null))); assertTrue(a.isNormal(this.headIioeChain(null))); assertTrue(a.isNormal(this.headCbieChain(null))); assertTrue(a.isNormal(this.headFlieChain(null))); assertTrue(a.isNormal(this.headSubIeChain(null))); assertTrue(a.isNormal(this.headSubIioeChain(null))); assertTrue(a.isNormal(this.headSubTdChain(null))); assertTrue(a.isNormal(this.headSubTdChain(null))); assertTrue(a.isNormal(this.headWidChain(null))); "<AssertPlaceHolder>"; }
isNormal(final Throwable t) { if (t == null) { //This is only needed when called directly. return false; }  /** * Use the class names to avoid loading more classes. */ final Class<?> root = Throwable.class; final Class<?> error = Error.class; for (Class<?> c = t.getClass(); c != root; c = c.getSuperclass()) { if (error.isAssignableFrom(c)) { if (c.getName().equals("java.lang.ThreadDeath")) { return true; } } else { //Interrupt, Interrupted or Interruption. if (c.getName().contains("Interrupt")) { return true; } } } return false; }
[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred: org. junit. Assert. assertTrue ( a. isNormal(final Throwable t ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(LinearException ( null ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(Phone.headSubTdChain ( null ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(two.headSubTdChain ( null ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(LinearException ( ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(st.headSubTdChain ( null ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(28.headSubTdChain ( null ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(LatLonLatLon ( any ) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(Phone.headSubTdChain(null) )

[*] target: assertTrue(a.isNormal(this.headWitChain(null)))
[-] pred:  org. junit. Assert. assertTrue ( a. isNormal(Phone.headSubTdChain(null ) )
************************************
************************************
[+] input: testHashCode() { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = new SeverityComparator(); assertNotSame(a, b);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
hashCode() { return 31 * getClass().hashCode(); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ( ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ( ), a. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ), b. hashCode() ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(), a. hashCode() ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(), a. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ; )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org
************************************
************************************
[+] input: Exception { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = serialClone(a);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
hashCode() { return 31 * getClass().hashCode(); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode, b. hashCode ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(); ( ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCodeWith ( ), b. hashCode ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ( ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(); ( ), b. hashCode ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ), b. hashCode() ( ) )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode() ), b. hashCode() )

[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( a. hashCode(); ( ), b. hashCode F )
************************************
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert.assertNotNull(apkModule); ApkModuleXmlEncoder encoder = new ApkModuleXmlEncoder(); encoder.scanDirectory(mDir_xml); ApkModule apkModule_encoded = encoder.getApkModule(); apkModule_encoded.getTableBlock().getStringPool().sort(); Assert."<AssertPlaceHolder>"; apkModule_encoded.getAndroidManifest().refreshFull(); apkModule.getAndroidManifest().removeUnusedNamespaces(); apkModule.getAndroidManifest().getStringPool().removeUnusedStrings(); apkModule.getAndroidManifest().refreshFull();  apkModule_encoded.getTableBlock().refreshFull(); // Preserve generated apk for signing and install on device File apk = new File(TestUtils.getTesApkDirectory(), "encoded_xml.apk");  apkModule_encoded.writeApk(apk); apkModule_encoded = ApkModule.loadApkFile(apk); TestUtils.log("Generated apk: " + apk.getAbsolutePath());  FileUtil.deleteDirectory(mDir_xml); Assert.assertFalse("Failed to delete: " + mDir_xml, mDir_xml.exists()); compare(apkModule, apkModule_encoded); }
getApkModule(); public void setApkLogger(APKLogger apkLogger) { this.apkLogger = apkLogger; }
[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred: org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( unfiltered ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( e ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( ep ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( omModule_encoded ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. Matchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( unfilteredRecord ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( eca. copy ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( eca. deep ) )
************************************
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert.assertNotNull(apkModule); ApkModuleJsonEncoder encoder = new ApkModuleJsonEncoder(); encoder.scanDirectory(mDir_json); ApkModule apkModule_encoded = encoder.getApkModule(); Assert."<AssertPlaceHolder>"; apkModule_encoded.getAndroidManifest().refreshFull(); apkModule.getAndroidManifest().removeUnusedNamespaces(); apkModule.getAndroidManifest().getStringPool().removeUnusedStrings(); apkModule.getAndroidManifest().refreshFull();  // Preserve generated apk for signing and install on device File apk = new File(TestUtils.getTesApkDirectory(), "encoded_json.apk");  apkModule_encoded.writeApk(apk); TestUtils.log("Generated apk: " + apk.getAbsolutePath());  apkModule_encoded = ApkModule.loadApkFile(apk); FileUtil.deleteDirectory(mDir_json); Assert.assertFalse("Failed to delete: " + mDir_json, mDir_json.exists()); compare(apkModule, apkModule_encoded); }
getApkModule(); public void setApkLogger(APKLogger apkLogger) { this.apkLogger = apkLogger; }
[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred: org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( e ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( unfiltered ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( ep ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( decoder. getApkModule(); ( ), org. hamcrest. CoreMatchers. is (()); ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( ApkModule_encoded, org. hamcrest. CoreMatchers. is ( omModule ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( proto, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( decoder. getApkModule(); ( ), org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( decoder. getApkModule(); ( ), org. hamcrest. CoreMatchers. is ( unfiltered ) )

[*] target: assertNotNull(apkModule_encoded.getAndroidManifest())
[-] pred:  org. junit. Assert. assertThat ( decoder. getApkModule(); ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: IOException {  if(last_apkModule != null){ return; } ApkModule apkModule = createApkModule();  Assert.assertNotNull("Manifest block", apkModule.getAndroidManifest()); Assert."<AssertPlaceHolder>";  ApkModuleXmlDecoder decoder = new ApkModuleXmlDecoder(apkModule); File dir = TestUtils.getTempDir(); decoder.decode(dir); }
getTableBlock() { if(mTableBlock != null){ return mTableBlock; } checkExternalFramework(); checkSelfFramework(); return getTableBlock(!mDisableLoadFramework); }
[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred: org. junit. Assert. assertTrue ( ( ( getTableBlock() )!= null ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( 12, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( expected, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( null, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( 5, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( 4, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( start, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org. junit. Assert. assertEquals ( sn, apkModule. getTableBlock() ( ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  ) )

[*] target: assertNotNull("Table block", apkModule.getTableBlock())
[-] pred:  org
************************************
************************************
[+] input: IOException { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); getApkModule().writeApk(outputStream); outputStream.close();  ApkModule apkModule2 = ApkModule.readApkBytes(outputStream.toByteArray());  AndroidManifestBlock manifestBlock = apkModule2.getAndroidManifest(); Assert."<AssertPlaceHolder>"; TableBlock tableBlock = apkModule2.getTableBlock(); Assert.assertNotNull("Missing table",tableBlock); InputSource inputSource = apkModule2.getInputSource("classes.dex"); Assert.assertNotNull("Missing classes.dex", inputSource); }
close() throws IOException { this.zipOutput.close(); }
[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred: org. junit. Assert. assertNotNull ( manifestBlock )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertTrue ( ( manifestBlock!= null ) )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertEquals ( manifestBlock, manifestBlock )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertTrue ( ( manifestBlock!= manifest ) )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertTrue ( ( manifestBlock == manifest ) )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertTrue ( ( manifestBlock!= manifest2 ) )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertEquals ( null, manifestBlock )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org. junit. Assert. assertEquals ( 0, manifestBlock. crosspa )

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  org

[*] target: assertNotNull("Missing manifest", manifestBlock)
[-] pred:  )
************************************
************************************
[+] input: testXmlNodes() { ResXmlDocument document = new ResXmlDocument(); ResXmlElement root = document.getOrCreateElement("manifest"); ResXmlElement child = root.createChildElement("child"); child.setNamespace(ResourceLibrary.URI_RES_AUTO, "prefix");  Assert."<AssertPlaceHolder>";  child.setNamespace(null, null);  Assert.assertEquals("child", child.getName(true));  String text = "Xml text node"; child.addResXmlText(text);  Assert.assertEquals(1, child.listXmlTextNodes().size()); Assert.assertEquals(text, child.listXmlTextNodes().get(0).getText());  child.remove(child.listXmlTextNodes().get(0));  Assert.assertEquals(0, child.listXmlTextNodes().size()); Assert.assertEquals(0, child.listXmlNodes().size());  root.createChildElement("child"); root.createChildElement("child-2");  Assert.assertEquals(3, root.listElements().size()); Assert.assertEquals(2, root.listElements("child").size()); Assert.assertEquals(1, root.listElements("child-2").size()); Assert.assertEquals(0, root.listElements("child-3").size()); Assert.assertEquals(3, root.listXmlNodes().size());  Assert.assertNotNull("Element not found <child>", root.getElement("child")); root.remove(root.getElement("child")); Assert.assertEquals(1, root.listElements("child").size()); root.clear(); Assert.assertEquals("Child nodes cleared", 0, root.listXmlNodes().size()); }
getOrCreateElement(String tag){ ResXmlElement element = getElement(tag); if(element == null){ element = createRootElement(tag); }else if(tag != null){ element.setName(tag); } return element; }
[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred: org. junit. Assert. assertNotNull ( child )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( root )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( node )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( child )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( children )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert :: assertNotNull, child )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( named )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit. Assert. assertNotNull ( child )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org. junit ). assertNotNull ( child )

[*] target: assertEquals("prefix:child", child.getName(true))
[-] pred:  org
************************************
************************************
[+] input: testAddAttribute() { ResXmlDocument document = new ResXmlDocument(); ResXmlElement root = document.getOrCreateElement("manifest"); ResXmlAttribute attribute = root.getOrCreateAttribute( null, null, "package", 0); attribute.setValueAsString("com.example.package"); Assert."<AssertPlaceHolder>";  attribute = root.getOrCreateAttribute( ResourceLibrary.URI_RES_AUTO, ResourceLibrary.PREFIX_APP, "attr_1", 0x7f010000); attribute.setValueAsBoolean(true);  Assert.assertNotNull(root.searchAttributeByResourceId(0x7f010000)); }
getOrCreateElement(String tag){ ResXmlElement element = getElement(tag); if(element == null){ element = createRootElement(tag); }else if(tag != null){ element.setName(tag); } return element; }
[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred: org. junit. Assert. assertNotNull ( attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attributes )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attr )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( field )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert :: assertNotNull, attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org. junit ). assertNotNull ( attribute )

[*] target: assertNotNull(root.searchAttributeByName("package"))
[-] pred:  org
************************************
************************************
[+] input: testRemoveAttribute() { ResXmlDocument document = new ResXmlDocument(); ResXmlElement root = document.getOrCreateElement("manifest"); ResXmlAttribute attribute = root.getOrCreateAttribute( null, null, "package", 0); attribute.setValueAsString("com.example.package"); root.removeAttribute(attribute);  Assert."<AssertPlaceHolder>";  attribute = root.getOrCreateAttribute( ResourceLibrary.URI_RES_AUTO, ResourceLibrary.PREFIX_APP, "attr_1", 0x7f010000); attribute.setValueAsBoolean(true);  root.removeAttribute(attribute);  Assert.assertNull(root.searchAttributeByResourceId(0x7f010000));  attribute = root.getOrCreateAttribute( ResourceLibrary.URI_ANDROID, ResourceLibrary.PREFIX_ANDROID, "attr_1", 0x7f010000); attribute.setValueAsBoolean(true);  attribute = root.getOrCreateAttribute( ResourceLibrary.URI_RES_AUTO, ResourceLibrary.PREFIX_APP, "attr_2", 0x7f010000); attribute.setValueAsBoolean(true);  attribute = root.searchAttributeByResourceId(0x7f010000);  root.removeAttribute(attribute); Assert.assertEquals("Attribute count", 0, root.getAttributeCount()); }
getOrCreateElement(String tag){ ResXmlElement element = getElement(tag); if(element == null){ element = createRootElement(tag); }else if(tag != null){ element.setName(tag); } return element; }
[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred: org. junit. Assert. assertNotNull ( attribute )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertEquals ( root, attribute )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertTrue ( ( root!= attribute ) )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( field )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNull ( attribute )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attributes )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( attr )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertTrue ( ( root == attribute ) )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertNotNull ( root )

[*] target: assertNull(root.searchAttributeByName("package"))
[-] pred:  org. junit. Assert. assertTrue ( ( root > attribute ) )
************************************
************************************
[+] input: IOException { ResXmlDocument document = new ResXmlDocument(); document.setApkFile(createEmptyApkModule());  XmlPullParser parser = XMLFactory.newPullParser(XML_STRING); document.parse(parser);  ResXmlElement root = document.getDocumentElement(); Assert.assertNotNull(root); Assert.assertEquals(3, root.countElements()); Assert.assertEquals(2, root.getNamespaceCount()); Assert.assertEquals(12, root.getAttributeCount());  ResXmlAttribute attribute = root.searchAttributeByName("style"); Assert.assertNotNull(attribute);  StringWriter writer = new StringWriter(); XmlSerializer serializer = XMLFactory.newSerializer(writer); document.serialize(serializer); writer.close(); document.refreshFull();  String org = XML_STRING; String decoded = writer.toString(); org = org.replaceAll("\\s+", ""); decoded = decoded.replaceAll("\\s+", ""); Assert."<AssertPlaceHolder>"; }
refreshFull(){ int sizeOld = getHeaderBlock().getChunkSize(); StringBuilder message = new StringBuilder(); boolean appendOnce = false; int count; getStringPool().compressDuplicates(); Iterator<ResXmlElement> iterator = getElements(); while (iterator.hasNext()){ ResXmlElement element = iterator.next(); count = element.removeUndefinedAttributes(); if(count != 0){ message.append("Removed undefined attributes = "); message.append(count); appendOnce = true; } } count = removeUnusedNamespaces(); if(count != 0){ if(appendOnce){ message.append("\n"); } message.append("Removed unused namespaces = "); message.append(count); appendOnce = true; } if(getStringPool().removeUnusedStrings()){ if(appendOnce){ message.append("\n"); } message.append("Removed unused xml strings"); appendOnce = true; } refresh(); int sizeNew = getHeaderBlock().getChunkSize(); if(sizeOld != sizeNew){ if(appendOnce){ message.append("\n"); } message.append("Xml size changed = "); message.append(sizeOld); message.append(", "); message.append(sizeNew); appendOnce = true; } if(appendOnce){ return message.toString(); } return null; }
[*] target: assertEquals(org, decoded)
[-] pred: org. junit. Assert. assertEquals ( decoded, org )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, null )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, IDENT_3 )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, IDENT_4 )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, net )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, organization )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, body )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded, IDENT_2 )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertNull ( decoded )

[*] target: assertEquals(org, decoded)
[-] pred:  org. junit. Assert. assertEquals ( decoded )
************************************
************************************
[+] input: testCoder() { for(String decoded : DECODED_VALUES){ EncodeResult encodeResult = ValueCoder.encode(decoded); Assert."<AssertPlaceHolder>"; String decoded2 = ValueCoder.decode(encodeResult.valueType, encodeResult.value); Assert.assertEquals(decoded, decoded2); } }
encode(String text); public abstract String decode(int data); public abstract ValueType getValueType(); abstract boolean canStartWith(char first);  static Integer parseInteger(String text){ try{ return Integer.parseInt(text); }catch (NumberFormatException ignored){ return null; } }
[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred: org. junit. Assert. assertNotNull ( encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( decoded, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( decodeResult, decodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( decodeResult, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( decode, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( null, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( component, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org. junit. Assert. assertEquals ( page, encodeResult )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  decode decode decode decode ) )

[*] target: assertNotNull("Fail to encode: " + decoded, encodeResult)
[-] pred:  org
************************************
************************************
[+] input: testResConfig() { for(String qualifier : QUALIFIERS){ ResConfig resConfig = new ResConfig(); String[] errors = resConfig.parseQualifiers(qualifier);  Assert.assertNull("Qualifier = " + qualifier + ", error " + Arrays.toString(errors) + ", parsed = " + resConfig, errors);  Assert.assertEquals(qualifier, resConfig.getQualifiers()); } for(String qualifier : ERROR_QUALIFIERS){ ResConfig resConfig = new ResConfig(); String[] errors = resConfig.parseQualifiers(qualifier);  Assert."<AssertPlaceHolder>";  } }
parseQualifiers(String qualifiers){ QualifierParser parser = new QualifierParser(this, qualifiers); parser.parse(); return parser.getErrors(); }
[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors. length )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertNull ( errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ( dense errors, errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ([] errors, errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ( resultSet, errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ( prepare[] errors, errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ( full errors, errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org. junit. Assert. assertEquals ( 50, errors. length )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  , errors )

[*] target: assertNotNull("Error qualifier = " + qualifier + ", parsed = " + resConfig, errors)
[-] pred:  org
************************************
************************************
[+] input: XmlPullParserException { StyleDocument styleDocument = StyleDocument.parseStyledString("<u>복사하기</u>"); TableBlock tableBlock = new TableBlock(); TableString tableString = tableBlock.getTableStringPool().getOrCreate(styleDocument); tableString.getXml(); Assert.assertNotNull(tableString); styleDocument = StyleDocument.parseStyledString(STYLED_XML_STRING_1); String xml = styleDocument.getXml(true); Assert.assertEquals(STYLED_XML_STRING_1, xml); String styled = styleDocument.getStyledString(); Assert.assertEquals(STYLED_STRING_1, styled); String html = styleDocument.getHtml(); Assert."<AssertPlaceHolder>"; }
getHtml(){ return getText(false, false); }
[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred: org. junit. Assert. assertNull ( tableBlock. getHtml(){ ( styled, html ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( html. getHtml(){ ( styled, styled ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableBlock. getHtml(){ ( html, styled ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableBlock. getHtml(){ )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableClient. getHtml(){ ( styled, html ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( html. getHtml(){ )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableSource. getHtml(){ ( styled, html ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableBlock. getHtml(){ ( element, styled ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableBlock. getHtml(){ ( null, html ) )

[*] target: assertEquals(STYLED_HTML_STRING_1, html)
[-] pred:  org. junit. Assert. assertNull ( tableBlock. getHtml(){ ( page, styled ) )
************************************
************************************
[+] input: testMethodDeclarationsAnalysis() { FindMethodDeclarationsAnalysis analysis = new FindMethodDeclarationsAnalysis(getMethodMatcherSet()); List<MatchedMethodResult> matches = Arrays.asList( new MatchedMethodResult("public void baseMethod(){\n}\n", "org.alfasoftware.astra.core.analysis.methods.ExampleMethodAnalysis", 4) );  List<MethodAnalysisResult> expectedResult = Arrays.asList( new MethodAnalysisResult(getMethodMatcher(), matches) );  assertAnalysis(ExampleMethodAnalysis.class, analysis, expectedResult); "<AssertPlaceHolder>"; }
getPrintableResults() { List<String> results = new LinkedList<>(); for (Map.Entry<MethodMatcher, List<MatchedMethodResult>> methodEntry : matchedNodes.entrySet()) { StringBuilder sb = new StringBuilder(); sb.append("\r\n"); sb.append(methodEntry.getKey()); for (MatchedMethodResult result : methodEntry.getValue()) { sb.append("\r\n"); sb.append(result.toString()); } results.add(sb.toString()); } return results; }
[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred: org. junit. Assert. assertTrue ( analysis. getPrintableResults() ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults() ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults ( ). contains ( expectedResult ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertEquals ( 0, analysis. getPrintableResults ( ). size ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertEquals ( 1, analysis. getPrintableResults ( ). size ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertEquals ( 0, analysis. getPrintableResults() ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. return true ; }

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org
************************************
************************************
[+] input: testMethodInvocationsAnalysis() { FindMethodInvocationsAnalysis analysis = new FindMethodInvocationsAnalysis(getMethodMatcherSet()); List<MatchedMethodResult> matches = Arrays.asList( new MatchedMethodResult("baseMethod()", "org.alfasoftware.astra.core.analysis.methods.ExampleMethodAnalysis", 7) );  List<MethodAnalysisResult> expectedResult = Arrays.asList( new MethodAnalysisResult(getMethodMatcher(), matches) );  assertAnalysis(ExampleMethodAnalysis.class, analysis, expectedResult); "<AssertPlaceHolder>";  }
getPrintableResults() { List<String> results = new LinkedList<>(); for (Entry<MethodMatcher, List<MatchedMethodResult>> method : matchedNodes.entrySet()) { StringBuilder sb = new StringBuilder(); sb.append("\r\n"); sb.append(method.getKey()); for (MatchedMethodResult result : method.getValue()) { sb.append("\r\n"); sb.append(result.toString()); } results.add(sb.toString()); }  results.add("\r\n ============ SUMMARY =========== "); matchedNodes.entrySet().stream() .sorted(Collections.reverseOrder(Map.Entry.comparingByValue(Comparator.comparingInt(List::size)))) .forEach(e -> results.add("\r\n Usages: [" + e.getValue().size() + "], Method: [" + e.getKey() + "]"));  return results; }
[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred: org. junit. Assert. assertTrue ( analysis. getPrintableResults() ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults() ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertEquals ( expectedResult, analysis. getPrintableResults() ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertEquals ( expectedResult, analysis. getPrintableResults ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertFalse ( analysis. getPrintableResults() ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertFalse ( analysis. getPrintableResults() ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. assertTrue ( analysis. getPrintableResults() ( ). isEmpty ( ) )

[*] target: assertNotNull(analysis.getPrintableResults())
[-] pred:  org. junit. Assert. } }
************************************
************************************
[+] input: testAnnotationWithMultipleAnnotationsOfDifferentTypesWithFullMatch() { // Given String annotation = "import org.alfasoftware.astra.exampleTypes.AnnotationA;\r\b" + "@Annotation\r\n" + "@Annotation2("test")\r\n" + "@Annotation3(marker = "test")\r\n" + "class x{}"; Matcher matcher1 = AnnotationMatcher.builder() .withFullyQualifiedName("Annotation") .build(); Matcher matcher2 = AnnotationMatcher.builder() .withFullyQualifiedName("Annotation2") .withValue("test") .build(); Matcher matcher3 = AnnotationMatcher.builder() .withFullyQualifiedName("Annotation3") .withWithMemberAndValue("marker", "test") .build();  // When ClassVisitor visitor = parse(annotation);  // Then final List<MarkerAnnotation> markerAnnotations = visitor.getMarkerAnnotations(); Assert.assertTrue(matcher1.matches(markerAnnotations.get(0))); final List<SingleMemberAnnotation> singleMemberAnnotations = visitor.getSingleMemberAnnotations(); Assert.assertTrue(matcher2.matches(singleMemberAnnotations.get(0))); final List<NormalAnnotation> normalAnnotations = visitor.getNormalAnnotations(); Assert."<AssertPlaceHolder>"; }
matches(ASTNode node) { Annotation annotation = (Annotation) node;  // Check annotation name ITypeBinding annotationTypeBinding = annotation.getTypeName().resolveTypeBinding(); boolean typeNameMatches = annotationTypeBinding != null && annotationTypeBinding.getQualifiedName().equals(annotationBuilder.annotationName); if (! typeNameMatches) { return false; }  // Check annotation properties if (annotationBuilder.properties != null) { if (node instanceof SingleMemberAnnotation) { SingleMemberAnnotation singleMemberAnnotation = (SingleMemberAnnotation) node; if (! checkProperties(singleMemberAnnotation)) { return false; } } else if (node instanceof NormalAnnotation) { NormalAnnotation normalAnnotation = (NormalAnnotation) node; if (! checkProperties(normalAnnotation)) { return false; } } }  // Check annotation predicate return ! annotationBuilder.annotationPredicate.isPresent() || annotationBuilder.annotationPredicate.get().test((Annotation) node); }
[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred: org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotation> normalAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotations ( singleMemberAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher1. matches(ASTAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(QAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(QAnnotations ( singleMemberAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotations, normalAnnotations ) )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotations )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( matcher3. matches(ASTAnnotation> normalAnnotations )

[*] target: assertTrue(matcher3.matches(normalAnnotations.get(0)))
[-] pred:  org
************************************
************************************
[+] input: testMethodMatcherPredicateLogging() {  MethodMatcher matcherWithDefaultPredicateDescriptions = MethodMatcher.builder() .withFullyQualifiedDeclaringType("com.Foo") .withMethodName("doFoo") .build();  String customFQTypeDescription = "CUSTOM! package contains 'com'"; String customNameDescription = "CUSTOM! starts with 'do'";  MethodMatcher matcherWithDescribedPredicates = MethodMatcher.builder() .withFullyQualifiedDeclaringType(describedPredicate(customFQTypeDescription, t -> t.contains("com"))) .withMethodName(describedPredicate(customNameDescription, n -> n.startsWith("do"))) .withReturnType(describedPredicate("CUSTOM! returns Foobinator", r -> r.equals("Foobinator"))) .build();  assertEquals("MethodMatcher [" + "methodName=Optional[method name is [doFoo]], " + "fullyQualifiedDeclaringType=Optional[FQ type is [com.Foo]], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDefaultPredicateDescriptions.toString());  "<AssertPlaceHolder>"; }
toString() { return "MethodMatcher [methodName=" + methodNamePredicate + ", fullyQualifiedDeclaringType=" + fullyQualifiedDeclaringTypePredicate + ", fullyQualifiedParameterNames=" + fullyQualifiedParameterNames + ", varArgs=" + isVarargs + ", parentContext=" + parentContextMatcher + "]"; }
[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred: org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithDefaultPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithDescribedDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithDescribedPredicates. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherAllPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithLinearPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithOffsetsPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherDesiredPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherLinearPredicateDescriptions. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherWithAllRules. toString ( ) )

[*] target: assertEquals("MethodMatcher [" + "methodName=Optional[" + customNameDescription + "], " + "fullyQualifiedDeclaringType=Optional[" + customFQTypeDescription + "], " + "fullyQualifiedParameterNames=Optional.empty, " + "varArgs=Optional.empty, " + "parentContext=Optional.empty]", matcherWithDescribedPredicates.toString())
[-] pred:  org. junit. Assert. assertEquals ( customFQTypeDescription, matcherExpirationPredicateDescriptions. toString ( ) )
************************************
************************************
[+] input: testMethodMatcherBuiltFromFQSignature() { MethodMatcher noParams = MethodMatcher.buildMethodMatcherForFQSignature("com.Foo.doFoo()"); MethodMatcher paramsNoSpaces = MethodMatcher.buildMethodMatcherForFQSignature("com.Foo.doFoo(int,com.Bar)"); MethodMatcher paramsWithSpaces = MethodMatcher.buildMethodMatcherForFQSignature("com.Foo.doFoo(int, com.Bar)");  assertEquals("FQ Type", "com.Foo", noParams.getFullyQualifiedDeclaringTypeExactName().get()); assertEquals("FQ Type", "com.Foo", paramsNoSpaces.getFullyQualifiedDeclaringTypeExactName().get()); assertEquals("FQ Type", "com.Foo", paramsWithSpaces.getFullyQualifiedDeclaringTypeExactName().get());  assertEquals("Method name", "doFoo", noParams.getMethodNameExactName().get()); assertEquals("Method name", "doFoo", paramsNoSpaces.getMethodNameExactName().get()); assertEquals("Method name", "doFoo", paramsWithSpaces.getMethodNameExactName().get());  assertEquals("Parameters", new ArrayList<>(), noParams.getFullyQualifiedParameterNames().get()); assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsNoSpaces.getFullyQualifiedParameterNames().get()); "<AssertPlaceHolder>"; }
getFullyQualifiedParameterNames() { return fullyQualifiedParameterNames; }
[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred: org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ( ). size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertEquals ( 0, paramsWithSpaces. getFullyQualifiedParameterNames(). size ( ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames(). getFullyQualifiedParameterNames ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ( ). isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertEquals ( 0, paramsWithSpaces. getFullyQualifiedParameterNames() ( ). size ( ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ( ), org. hamcrest. Matchers. is ( 0 ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertEquals ( 0, paramsWithSpaces. getFullyQualifiedParameterNames(). getFullyQualifiedParameterNames ( ). size ( ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("Parameters", new ArrayList<>(Arrays.asList("int", "com.Bar")), paramsWithSpaces.getFullyQualifiedParameterNames().get())
[-] pred:  org. junit. Assert. assertThat ( paramsWithSpaces. getFullyQualifiedParameterNames() ), org. hamcrest. CoreMatchers. is ( 0 ) )
************************************
************************************
[+] input: testTypeMatcherForParameterizedInterface() { // Given String classWithName = "package x;" + "import java.util.List;" + "public class TestName implements List<String> {}"; Matcher simpleMatcher = TypeMatcher.builder() .asClass() .implementingInterfaces(Set.of("java.util.List")) .build(); Matcher parameterizedMatcher = TypeMatcher.builder() .asClass() .implementingInterfaces(Set.of("java.util.List<java.lang.String>")) .build();  // When ClassVisitor visitor = parse(classWithName);  // Then List<TypeDeclaration> typeDeclarations = visitor.getTypeDeclarations(); assertTrue(simpleMatcher.matches(typeDeclarations.get(0))); "<AssertPlaceHolder>"; }
matches(ASTNode node) {  if (!(node instanceof TypeDeclaration)) { return false; } TypeDeclaration typeDeclaration = (TypeDeclaration) node;  if (! checkIsInterface(typeDeclaration)) { return false; } if (! checkIsClass(typeDeclaration)) { return false; } if (! checkTypeName(typeDeclaration)) { return false; } if (! checkClassNameRegex(typeDeclaration)) { return false; } if (! checkTypeNamePredicate(typeDeclaration)) { return false; } if (! checkInterfaces(typeDeclaration)) { return false; } if (! checkAnnotations(typeDeclaration)) { return false; } if (! checkVisibility(typeDeclaration)) { return false; } if (! checkIsStatic(typeDeclaration)) { return false; } if (! checkIsAbstract(typeDeclaration)) { return false; } if (! checkIsFinal(typeDeclaration)) { return false; } return checkSuperclass(typeDeclaration); }
[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred: org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher ( typeDeclarations ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedMatcher. matches(ASTNode node ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher ( simpleMatcher ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTNode node ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher methodDeclarations ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedMatcher. matches(ASTNode node) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher ( simpleExecutor ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher typeDeclarations ) )

[*] target: assertTrue(parameterizedMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( simpleMatcher. matches(ASTMatcher
************************************
************************************
[+] input: testParameterizedTypeWithoutTypeParameterSpecified() { // Given String extendsMatcher = "package x;\r\n" + "import java.util.List;\r\n" + "public class Y extends List<Integer>{}";  String extendsMatcherNoTypeParameter = "package x;\r\n" + "import java.util.List;\r\n" + "public class Y extends List{}";  Matcher parameterizedTypeMatcher = TypeMatcher.builder() .extending("java.util.List") .build();  // When ClassVisitor visitor = parse(extendsMatcher); ClassVisitor visitorNoTypeParameter = parse(extendsMatcherNoTypeParameter);  // Then List<TypeDeclaration> typeDeclarations = visitor.getTypeDeclarations(); assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0))); typeDeclarations = visitorNoTypeParameter.getTypeDeclarations(); "<AssertPlaceHolder>"; }
matches(ASTNode node) {  if (!(node instanceof TypeDeclaration)) { return false; } TypeDeclaration typeDeclaration = (TypeDeclaration) node;  if (! checkIsInterface(typeDeclaration)) { return false; } if (! checkIsClass(typeDeclaration)) { return false; } if (! checkTypeName(typeDeclaration)) { return false; } if (! checkClassNameRegex(typeDeclaration)) { return false; } if (! checkTypeNamePredicate(typeDeclaration)) { return false; } if (! checkInterfaces(typeDeclaration)) { return false; } if (! checkAnnotations(typeDeclaration)) { return false; } if (! checkVisibility(typeDeclaration)) { return false; } if (! checkIsStatic(typeDeclaration)) { return false; } if (! checkIsAbstract(typeDeclaration)) { return false; } if (! checkIsFinal(typeDeclaration)) { return false; } return checkSuperclass(typeDeclaration); }
[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred: org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode node) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode nodeDeclarations ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode node ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode ( extendsMatcher ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode ( typeDeclarations ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode nodecur ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode elementDeclarations ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( extendDeclarations. matches(ASTNode nodeDeclarations ) )

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( typeDeclarations. matches(ASTNode

[*] target: assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org
************************************
************************************
[+] input: testParameterizedTypeWithTypeParameterSpecified() { // Given String extendsMatcher = "package x;\r\n" + "import java.util.List;\r\n" + "public class Y extends List<Integer>{}";  Matcher parameterizedTypeMatcher = TypeMatcher.builder() .extending("java.util.List<java.lang.Integer>") .build();  Matcher incorrectParameterizedTypeMatcher = TypeMatcher.builder() .extending("java.util.List<java.lang.Long>") .build();  // When ClassVisitor visitor = parse(extendsMatcher);  // Then List<TypeDeclaration> typeDeclarations = visitor.getTypeDeclarations(); assertTrue(parameterizedTypeMatcher.matches(typeDeclarations.get(0))); "<AssertPlaceHolder>"; }
matches(ASTNode node) {  if (!(node instanceof TypeDeclaration)) { return false; } TypeDeclaration typeDeclaration = (TypeDeclaration) node;  if (! checkIsInterface(typeDeclaration)) { return false; } if (! checkIsClass(typeDeclaration)) { return false; } if (! checkTypeName(typeDeclaration)) { return false; } if (! checkClassNameRegex(typeDeclaration)) { return false; } if (! checkTypeNamePredicate(typeDeclaration)) { return false; } if (! checkInterfaces(typeDeclaration)) { return false; } if (! checkAnnotations(typeDeclaration)) { return false; } if (! checkVisibility(typeDeclaration)) { return false; } if (! checkIsStatic(typeDeclaration)) { return false; } if (! checkIsAbstract(typeDeclaration)) { return false; } if (! checkIsFinal(typeDeclaration)) { return false; } return checkSuperclass(typeDeclaration); }
[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred: org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode node) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode node ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode typeDeclarations ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode elementDeclarations ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode tokenDeclarations ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode object ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode element ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode item ) )

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode node

[*] target: assertFalse(incorrectParameterizedTypeMatcher.matches(typeDeclarations.get(0)))
[-] pred:  org. junit. Assert. assertTrue ( parameterizedTypeMatcher. matches(ASTNode
************************************
************************************
[+] input: compare_isEqual_hashcode() { Recording rec1 = new Recording(); rec1.setName("rec1"); rec1.setPath(PATH); rec1.setDuration(100); rec1.setDurationDetailedInString("100 millis"); rec1.setDurationShortInString("100 m"); rec1.setModifiedDateMilliSec(11111111111111L); rec1.setModifiedDateInString("01-JAN-2020"); rec1.setSize(1000); rec1.setSizeInString("1000 bytes"); rec1.setPlaying(false);  Recording rec2 = new Recording(); rec2.setName(rec1.getName()); rec2.setPath(rec1.getPath()); rec2.setDuration(rec1.getDuration()); rec2.setDurationDetailedInString(rec1.getDurationDetailedInString()); rec2.setDurationShortInString(rec1.getDurationShortInString()); rec2.setModifiedDateMilliSec(rec1.getModifiedDateMilliSec()); rec2.setModifiedDateInString(rec1.getModifiedDateInString()); rec2.setSize(rec1.getSize()); rec2.setSizeInString(rec1.getSizeInString()); rec2.setPlaying(rec1.isPlaying());  Recording rec3 = new Recording(); rec3.setName("rec3"); rec3.setPath(PATH); rec3.setDuration(300); rec3.setDurationDetailedInString("300 millis"); rec3.setDurationShortInString("300 m"); rec3.setModifiedDateMilliSec(3333333333L); rec3.setModifiedDateInString("03-JAN-2020"); rec3.setSize(3000); rec3.setSizeInString("3000 bytes"); rec3.setPlaying(true);  Recording rec4 = new Recording(); rec4.setPath(PATH);  assertEquals(rec1, rec1); assertEquals(rec1.hashCode(), rec1.hashCode());  assertEquals(rec1, rec2); assertEquals(rec1.hashCode(), rec2.hashCode());  assertEquals(rec1, rec3); assertEquals(rec1.hashCode(), rec3.hashCode());  assertEquals(rec1, rec4); "<AssertPlaceHolder>";  assertNotEquals(rec1, null); }
hashCode() { return Objects.hash(path); }
[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred: org. junit. Assert. assertEquals ( rec2. hashCode ( ), rec3. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec1. hashCode ( ), rec2. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec2. hashCode(), rec3. hashCode() ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec2. hashCode ( ), rec2. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec2. hashCode ( ), rec1. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec4. hashCode ( ), rec2. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec3. hashCode ( ), rec2. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( rec2. hashCode ( ), rec4. hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  . hashCode ( ) )

[*] target: assertEquals(rec1.hashCode(), rec4.hashCode())
[-] pred:  )
************************************
************************************
[+] input: testNameString() { StorageItem storageItem = new StorageItem("test", "/abc/test"); assertEquals("test", storageItem.getName()); assertEquals("/abc/test", storageItem.getPath()); assertEquals(StorageItem.CHILD_DIR_PREFIX + "test", storageItem.getStylishName());  // Override the constructor set params storageItem.setName("test2"); storageItem.setPath("/abc/test2");  assertEquals("test2", storageItem.getName()); assertEquals("/abc/test2", storageItem.getPath()); assertEquals(StorageItem.CHILD_DIR_PREFIX + "test2", storageItem.getStylishName());  // Set name to parent dir syntax storageItem.setName(".."); assertEquals("..", storageItem.getName()); "<AssertPlaceHolder>"; }
getStylishName() { return getName().equals(PARENT_DIR_NAME) ? getName() : CHILD_DIR_PREFIX + getName(); }
[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred: org. junit. Assert. assertThat ( storageItem. getStylishName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( storageItem. getStylishName()); ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertEquals ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( storageItem. getStylishName() ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( storageItem. getStylishName ( ) ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( storageItem. getStylishName());()); ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName(). toString ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( 1.0 ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( 1.0 ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName(). is ( org. hamcrest. CoreMatchers. equalTo ( storageItem. getStylishName()); ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertThat ( storageItem. getStylishName(). is ( org. hamcrest. Matchers. equalTo ( storageItem. getStylishName()); ) ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  org. junit. Assert. assertEquals ( 1.0, storageItem. getStylishName(). toString ( ) )

[*] target: assertEquals("..", storageItem.getStylishName())
[-] pred:  )
************************************
************************************
[+] input: testRuleIsNotBroken() { UserRegistration userRegistration = new UserRegistration(); userRegistration.setRecoveryCodeExpirationDate(LocalDateTime.now().minusSeconds(60));  assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(userRegistration)).isRuleComplied()); "<AssertPlaceHolder>"; }
isRuleComplied() { return userRegistration.isRecoveryCodeExpired() || userRegistration.getRecoveryCode() == null; }
[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred: org. junit. Assert. assertFalse ( userRegistration. isRuleComplied() )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() ( ) )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( userRegistration. isRuleComplied() { }

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( userRegistration. isRuleComplied() ) )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( userRegistration. isRuleComplied() { )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() ) )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( userRegistration. isRuleComplied()

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. isRuleComplied() ( ) )

[*] target: assertTrue((new PasswordRecoveryCodeShouldBeExpiredOrNull(new UserRegistration())).isRuleComplied())
[-] pred:  org
************************************
************************************
[+] input: testRuleIsBroken() { UserRegistration userRegistration = new UserRegistration(); userRegistration.setRecoveryCodeExpirationDate(LocalDateTime.now());  assertFalse((new PasswordRecoveryCodeShouldNotExpired(userRegistration)).isRuleComplied()); "<AssertPlaceHolder>"; }
isRuleComplied() { return userRegistration.isRecoveryCodeUnexpired(); }
[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred: org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() ) )

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() )

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() { )

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied() { }

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( userRegistration. isRuleComplied()

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert.testtest isRuleComplied() { }

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  org. junit. Assert. isRuleComplied() ( true ) )

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  test whether the userRegistration. isRuleComplied() ) )

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  test whether the userRegistration. isRuleComplied()

[*] target: assertFalse((new PasswordRecoveryCodeShouldNotExpired(new UserRegistration())).isRuleComplied())
[-] pred:  test the isRuleComplied() method
************************************
************************************
[+] input: testRuleIsNotBroken() { LocalDateTime registerDate1 = LocalDateTime.now(); assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate1)).isRuleComplied());  LocalDateTime registerDate2 = LocalDateTime.now().minusDays(CONFIRMATION_LINK_DURATION).plusSeconds(5); "<AssertPlaceHolder>"; }
isRuleComplied() { return LocalDateTime.now().isBefore(this.registerDate.plusDays(CONFIRMATION_LINK_DURATION)); }
[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred: org. junit. Assert. assertTrue ( isRuleComDate2. isRuleComplied() ( ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( isRuleComDate1. isRuleComplied() ( ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( isRuleComDate1. isRuleComplied2 )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( isRuleComDate2. isRuleComplied() ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( fixture. isRuleComplied() ( ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( isRuleComDate2. isRuleComplied() )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( the

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  isRuleComplied()

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedAfterExpiration(registerDate2)).isRuleComplied())
[-] pred:  org
************************************
************************************
[+] input: testRuleIsNotBroken() { assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.WaitingForConfirmation)).isRuleComplied()); "<AssertPlaceHolder>"; }
isRuleComplied() { return !this.status.equals(UserRegistrationStatus.Confirmed); }
[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred: org. junit. Assert. assertFalse ( testRuleComplied(). isRuleComplied() ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( isRuleComplied() )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRuleComplied(). isRuleComplied() )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRuleComplied(). isRuleComplied()

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( fixture. isRuleComplied() ( ) )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRuleComplied()

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRuleComplied() )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  a unit test for junit

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  )

[*] target: assertTrue((new UserRegistrationCannotBeConfirmedMoreThanOnce(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org
************************************
************************************
[+] input: testRuleIsBroken() { assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.WaitingForConfirmation)).isRuleComplied()); "<AssertPlaceHolder>"; }
isRuleComplied() { return userRegistrationStatus.equals(UserRegistrationStatus.Confirmed); }
[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred: org. junit. Assert. assertTrue ( testRule isRuleComplied() )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRule isRuleComplied() )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( testRule isRuleComplied() ) )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( fixture. isRuleComplied() ( ) )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( testRule isRuleComplied() ( ) )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( testRuleIsRuleComplied() )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( testRule isRuleComplied() ) )

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  a unit test for junit

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  org. junit. Assert

[*] target: assertFalse((new UserRegistrationMustBeConfirmed(UserRegistrationStatus.Expired)).isRuleComplied())
[-] pred:  isRuleComplied() )
************************************
************************************
[+] input: testRuleIsNotBroken() { Session session1 = new Session(); session1.setExpirationDate(LocalDateTime.now().plusDays(2));   Session session2 = new Session(); session2.setExpirationDate(LocalDateTime.now().minusDays(2)); session2.setRefreshToken("randomToken");  assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session1)).isRuleComplied()); "<AssertPlaceHolder>"; }
isRuleComplied() { return (!session.isExpired()) || (session.isExpired() && session.getRefreshToken() != null); }
[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred: org. junit. Assert. assertFalse ( isRuleComplied() ( ) )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( session1. isRuleComplied() )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( isRuleComplied() )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( session1. isRuleComplied() { }

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertTrue ( session1. isRuleComplied() ( ) )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( session1. isRuleComplied() { )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( isRuleComplied() { return false )

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( isRuleComplied() { }

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org. junit. Assert. assertFalse ( isRuleComplied()

[*] target: assertTrue((new SessionCannotBeExpiredWhenRefreshTokenIsMissing(session2)).isRuleComplied())
[-] pred:  org
************************************
************************************
[+] input: build_userProvidedHeadersEmpty_throwsIllegalArgumentException() { var iaexp = "<AssertPlaceHolder>";  assertThat(iaexp) .hasMessageThat() .contains("User defined headers should be absent or non-empty"); }
of() { return new CsvRowCoder(); }
[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred: org. junit. Assert. assertEquals ( new java. lang. Integer ( 0 ), iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 1 ), iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 1 ), iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertTrue ( ( iaexp instanceof java. lang. String ) )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Object ( ), iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertNotNull ( iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertTrue ( ( iaexp > 0 ) )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertTrue ( ( iaexp!= null ) )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  org. junit. Assert. assertThat ( iaexp )

[*] target: assertThrows( IllegalArgumentException.class, () -> CsvIO.read("some_file_path").withHeaders(ImmutableList.of()))
[-] pred:  return new CsvRowCoder(); object
************************************
************************************
[+] input: build_nullEncryptedColumns_throwsException() {  Schema testSchema = TestResourceLoader.classPath() .forAvro() .asSchema("avro_records/union_with_array_schema.json");  var builderWithNoEncryptedColumns = withOriginalSchema(testSchema);  IllegalStateException illegalStateException = "<AssertPlaceHolder>";  assertThat(illegalStateException) .hasMessageThat() .contains("schema and encrypt columns can't be null or empty"); }
withOriginalSchema(Schema schema) { return new Builder().setOriginalSchema(schema).build(); }
[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred: org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( testSchema ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. conf. Configuration ( testSchema ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( new org. build (setOriginalSchema, builderWithNoEncryptedColumns ), illegalStateException )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( new javax. ws. rs. core. Response ( testSchema ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. Date ( 2 ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. Date ( ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( sb. build ( ), builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( builderWithNoEncryptedColumns, builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( builderWithNoEncryptedColumns )

[*] target: assertThrows(IllegalStateException.class, builderWithNoEncryptedColumns::updatedSchema)
[-] pred:  org
************************************
************************************
[+] input: build_emptyEncryptedColumns_throwsException() {  Schema testSchema = TestResourceLoader.classPath() .forAvro() .asSchema("avro_records/union_with_array_schema.json");  var emptyColumnsBuilder = withOriginalSchema(testSchema).withEncryptColumnKeys(ImmutableList.of());  IllegalStateException illegalStateException = "<AssertPlaceHolder>";  assertThat(illegalStateException) .hasMessageThat() .contains("schema and encrypt columns can't be null or empty"); }
withEncryptColumnKeys(Collection<String> schemaKeys) { return toBuilder().setEncryptColumnNames(schemaKeys).build(); }
[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred: org. junit. Assert. assertEquals ( emptyColumnsBuilder. build ( ), illegalStateException )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( emptyColumnsBuilder. toString ( ), illegalStateException )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( emptyColumnsBuilder. get ( 0 ) )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( emptyColumnsBuilder. get ( 0 ), illegalStateException )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( emptyColumnsBuilder. toString ( ), illegalStateException. getMessage ( ) )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( emptyColumnsBuilder. get()); IllegalStateException illegalStateException )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( emptyColumnsBuilder. toString ( ) )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( emptyColumnsBuilder. build ( ) )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( emptyColumnsBuilder, illegalStateException )

[*] target: assertThrows(IllegalStateException.class, emptyColumnsBuilder::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( emptyColumnsBuilder. build ( new android. Document ( 0 ) ) )
************************************
************************************
[+] input: build_noSchema_throwsNullPointerException() { NullPointerException nullPointerException = "<AssertPlaceHolder>";  assertThat(nullPointerException).hasMessageThat().contains("original schema can't be null"); }
withOriginalSchema(Schema schema) { return new Builder().setOriginalSchema(schema).build(); }
[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred: org. junit. Assert. assertThat ( nullPointerException. getMessage ( ), org. hamcrest. CoreMatchers. is ( 1.0 ) )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException. getMessage ( ), org. hamcrest. CoreMatchers. is ( isNull ) )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException. getMessage ( ), org. hamcrest. CoreMatchers. is ( STRING_0 ) )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException, org. hamcrest. CoreMatchers. is ( factory ) )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException : : build )

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat ( nullPointerException.

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org. junit. Assert. assertThat (

[*] target: assertThrows(NullPointerException.class, () -> withOriginalSchema(null))
[-] pred:  org
************************************
************************************
[+] input: build_noSchemaNoColumn_throwsException() {  var schemaConverter = withOriginalSchema( TestResourceLoader.classPath() .forAvro() .asSchema("avro_records/union_with_array_schema.json"));  IllegalStateException illegalStateException = "<AssertPlaceHolder>";  assertThat(illegalStateException) .hasMessageThat() .contains("schema and encrypt columns can't be null or empty"); }
withOriginalSchema(Schema schema) { return new Builder().setOriginalSchema(schema).build(); }
[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred: org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. get ( 0 ). getIndex ( ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertNotNull ( illegalStateException )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. get ( 0 ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. get ( 0 ). getDataType ( ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. get ( ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. getOriginalSchema ( ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. execute ( illegalStateException ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, schemaConverter. getClass ( ) )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  org. junit. Assert. assertNull ( illegalStateException )

[*] target: assertThrows(IllegalStateException.class, schemaConverter::updatedSchema)
[-] pred:  constructs a code javax
************************************
************************************
[+] input: updatedSchema_throwsException() {  Exception osoEx = "<AssertPlaceHolder>";  assertThat(osoEx).hasMessageThat().contains(errorMessage); }
updatedSchema() { checkState( originalSchema != null && encryptColumnSchemaKeys != null && !encryptColumnSchemaKeys.isEmpty(), "schema and encrypt columns can't be null or empty");  var updatedRecordDoc = String.format( "%s%n%s %s", originalSchema.getDoc(), "Updated for encryption at", DateTimeFormatter.ISO_INSTANT.format(clock.instant())); return makeRecord( recordBuilder(originalSchema).doc(updatedRecordDoc), originalSchema, ROOT_SYMBOL); }
[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred: org. junit. Assert. assertTrue ( ( osoEx instanceof java. lang. String ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof org. apache. commons. lang. String ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof org. apache. commons. lang. Long ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof java. lang. IllegalArgumentException ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof org. apache. commons. lang. Integer ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof javax. json. Context ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof org. apache. commons. lang. Context ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertTrue ( ( osoEx instanceof java. lang. Long ) )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertNotNull ( osoEx )

[*] target: assertThrows( exceptionClass, () -> withOriginalSchema(testSchema) .withEncryptColumnKeys(DUMMY_ENCRYPT_COLUMN) .updatedSchema())
[-] pred:  org. junit. Assert. assertThat ( osoEx )
************************************
************************************
[+] input: convert_unsupportedSchema() { assertThat( "<AssertPlaceHolder>"; }
flatten(GenericRecord genericRecord) { return new TypeFlattener(genericRecord).convert(); }
[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred: org. junit. Assert. assertThat ( target. flatten(GenericRecord ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( flatten(GenericRecord ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( converter. flatten(GenericRecord ( genericRecord ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( target. flatten(GenericRecord ( ), org. hamcrest. CoreMatchers. is ( 6 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( target. flatten(GenericRecord ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( flatten(GenericRecord. flatten(genericRecord ( ), org. hamcrest. CoreMatchers. is ( 5 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( flatten(GenericRecord. flatten(genericRecord ( ), org. hamcrest. CoreMatchers. is ( course ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org. junit. Assert. assertThat ( flatten(GenericRecord. flatten(genericRecord ( ), org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  org

[*] target: assertThrows( exceptionClass, () -> new GenericRecordFlattener() .flatten( TestResourceLoader.classPath() .forAvro() .withSchemaFile(avroSchemaJsonFile) .loadRecord(avroRecordJsonFile)))) .hasMessageThat() .contains(expectedExceptionMessage)
[-] pred:  )
************************************
************************************
[+] input: expand_schemaAndSensitiveColumns_valid() { var inspectionReport = InspectionReport.newBuilder() .setAvroSchema(expectedSchema) .addAllColumnReport(expectedColumnInformation) .setInputPattern("gs://bucket/files*") .setSourceType(SourceType.AVRO) .build();  testPipeline .apply(Create.of(inspectionReport).withCoder(ProtoCoder.of(InspectionReport.class))) .apply(InspectionReportFileWriter.create(testOutputFolder));  testPipeline.run().waitUntilFinish();  JsonSubject."<AssertPlaceHolder>"; ProtoTruth.assertThat( TestResourceLoader.absolutePath() .forProto(ColumnInformation.class) .loadAllJsonFilesLike(testOutputFolder, "col-*")) .containsExactlyElementsIn(expectedColumnInformation); }
create(String reportLocation) { checkArgument(isNotBlank(reportLocation), "Report location is blank.");  return new AutoValue_InspectionReportFileWriter(reportLocation); }
[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred: org. junit. Assert. assertThat ( testPipeline.socket. create( reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.run. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.run. create( reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.label. create( reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.Request. create( reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.err. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( cls ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.err. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( cls. create( impactInformationInformation); ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.run. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( cls. create(messagemessage ( ) ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline.err. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( cls. create(messagemessage ( ) ) )

[*] target: assertThat( TestResourceLoader.absolutePath().loadAsString(testOutputFolder + "/schema.json")) .isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertThat ( testPipeline. METHOD_8 ( request. create(String reportLocation ), org. hamcrest. CoreMatchers. is ( class ) )
************************************
************************************
[+] input: create_singleList_valid() { var list1 = ImmutableList.of("element1", "element2", "element3"); var expectedList1 = list1.stream().map(x -> ImmutableList.of(Optional.of(x))).collect(toImmutableList()); var zippingIterator = ZippingIterator.create(ImmutableList.of(list1));  var zippedList = ImmutableList.copyOf(zippingIterator);  "<AssertPlaceHolder>"; assertThat(zippedList).containsExactlyElementsIn(expectedList1); }
create(List<List<T>> inputLists) { return new ZippingIterator<>(inputLists); }
[*] target: assertThat(zippedList).hasSize(3)
[-] pred: org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List<T>> inputLists )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List ( 0, expectedList1 ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertThat ( var, org. hamcrest. CoreMatchers. is ( expectedList1 ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List<T>> inputLists ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List <T>> > emptyList ( ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List ( 0 ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( expectedList1, var zippedList. create(List<T>> inputLists ( ) )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertThat ( var zippedList. create(List<T>> inputLists )

[*] target: assertThat(zippedList).hasSize(3)
[-] pred:  org. junit. Assert. assertThat ( var. create(List <T>> > list1 )
************************************
************************************
[+] input: create_twoLists_valid() {  var list1 = ImmutableList.of("element1", "element2", "element3"); var list2 = ImmutableList.of("element4", "element5", "element6");  var zippingIterator = ZippingIterator.create(ImmutableList.of(list1, list2));  int i = 0;  while (zippingIterator.hasNext()) { var item = zippingIterator.next();  "<AssertPlaceHolder>"; assertThat(item.get(1)).isEqualTo(Optional.of(list2.get(i))); i++; }  assertThat(i).isEqualTo(3); }
next() { if (!hasNext()) { throw new NoSuchElementException("no element at " + iterIndex + ", size: " + maxSize); }  ImmutableList<Optional<T>> elements = inputLists.stream() .map(l -> (iterIndex < l.size()) ? Optional.of(l.get(iterIndex)) : Optional.<T>empty()) .collect(toImmutableList());  // Point the iterator to the next element iterIndex++;  return elements; }
[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred: org. junit. Assert. assertNotNull ( item )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertEquals ( list1, item )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( var )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( item. nextContainer )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( var item )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( items )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( param )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit. Assert. assertNotNull ( action )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org. junit, item )

[*] target: assertThat(item.get(0)).isEqualTo(Optional.of(list1.get(i)))
[-] pred:  org
************************************
************************************
[+] input: create_twoUnEqualLists_valid() {  var list1 = ImmutableList.of("element1", "element2", "element3"); var list2 = ImmutableList.of("element4", "element5");  var zippingIterator = ZippingIterator.create(ImmutableList.of(list1, list2));  int i = 0;  while (zippingIterator.hasNext()) { var item = zippingIterator.next();  "<AssertPlaceHolder>";  if (i < list2.size()) { assertThat(item.get(1).get()).isEqualTo(list2.get(i)); } else { Truth8.assertThat(item.get(1)).isEmpty(); }  i++; }  assertThat(i).isEqualTo(3); }
next() { if (!hasNext()) { throw new NoSuchElementException("no element at " + iterIndex + ", size: " + maxSize); }  ImmutableList<Optional<T>> elements = inputLists.stream() .map(l -> (iterIndex < l.size()) ? Optional.of(l.get(iterIndex)) : Optional.<T>empty()) .collect(toImmutableList());  // Point the iterator to the next element iterIndex++;  return elements; }
[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred: org. junit. Assert. assertNotNull ( item )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit. Assert. assertNotNull ( var )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit. Assert. assertNotNull ( var item )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit. Assert. assertNotNull ( label )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit. Assert. assertNotNull ( param )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit. Assert. assertNotNull ( items )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org. junit, item )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  , item )

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  org

[*] target: assertThat(item.get(0).get()).isEqualTo(list1.get(i))
[-] pred:  )
************************************
************************************
[+] input: addElement_exceedsSize_returnsFalse() { PartialBatchAccumulator accumulator = PartialBatchAccumulator.withConfig( NUMBER_TOKENIZE_CONFIG.toBuilder() .addTransforms( ColumnTransform.newBuilder() .setColumnId("$.name") .setTransform(CRYPTO_UNWRAPPED_TRANSFORM) .build()) .build());  Value testValue = get1KByteString(); FlatRecord testRecord = FlatRecord.newBuilder() .setRecordId("!24") .putFlatKeySchema("$.name", "$.name") .putValues("$.name", testValue) .build();  // Fill the accumulator till its full. while (accumulator.addElement(testRecord)) ;  assertThat(accumulator.addElement(testRecord)).isFalse(); "<AssertPlaceHolder>"; }
makeBatch() {  var dlpDeidentifyConfig = DeidetifyConfigMaker.of(dlpEncryptConfig()).makeForMapping(columnSchemaKeyMap);  PartialColumnDlpTable tableWithDeidentifyConfig = accumulatedRecords.toBuilder() .setRecordIdColumnName(recordIdColumnName()) .setDeidentifyConfig(dlpDeidentifyConfig) .build();  return BatchPartialColumnDlpTable.create(tableWithDeidentifyConfig); }
[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred: org. junit. Assert. assertFalse ( testRecord. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertNull ( testRecord )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertFalse ( accumulator. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertNull ( testRecord. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertFalse ( testRecord. makesBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertFalse ( sampleRecord. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertNull ( accumulator. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertFalse ( testP. makeBatch ( ) )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit. Assert. assertNull ( accumulator )

[*] target: assertThat( accumulator.makeBatch().get().getTable().getSerializedSize() + testValue.getSerializedSize()) .isGreaterThan(PartialBatchAccumulator.MAX_DLP_PAYLOAD_SIZE_BYTES)
[-] pred:  org. junit )
************************************
************************************
[+] input: Exception {  var dlpStub = new Base64EncodingDlpStub( PartialBatchAccumulator.RECORD_ID_COLUMN_NAME, deidColumns, testOptions.getProject(), testOptions.getDlpRegion());  // Build Pipeline new CsvTokenizationAndOrderingPipeline( testOptions, testPipeline, new StubbingDlpClientFactory(dlpStub), SecretsClient.of(), KeyManagementServiceClient.create( new Base64DecodingKmsStub(testOptions.getMainKmsKeyUri()))) .run() .waitUntilFinish();  // Read output and verify var outputRecords = readFilesAsGrouped(listOutputFiles(), primaryOrderingColumn); var expectedFile = TestResourceLoader.classPath() .copyTo(new File(testTempFolder)) .createFileTestCopy(expectedFilePath) .getAbsolutePath();  if (expectedFileShards != -1) { assertThat(listOutputFiles()).hasLength(expectedFileShards); }  if (testOptions.getOrderingColumns() != null || testOptions.getOrderingColumnNames() != null) { var expectedRecords = readFilesAsGrouped(new String[] {expectedFile}, 0); "<AssertPlaceHolder>"; } else { var outputRows = outputRecords.values().stream().flatMap(List::stream).collect(Collectors.toList()); assertThat(outputRows).containsExactlyElementsIn(readCsvFileAsRecords(expectedFile)); } }
getOrderingColumnNames();  void setOrderingColumnNames(List<String> orderingColumnName); }  public static void main(String[] args) throws Exception { PipelineOptionsFactory.register(CsvTokenizationAndOrderingPipelineOptions.class);  var options = PipelineOptionsFactory.fromArgs(args).as(CsvTokenizationAndOrderingPipelineOptions.class); checkArgument(isNotBlank(options.getOutputDirectory()), "Provide a valid GCS Destination");  new CsvTokenizationAndOrderingPipeline( options, Pipeline.create(options), DlpClientFactory.defaultFactory(), SecretsClient.of(), KeyManagementServiceClient.create()) .run(); }
[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred: org. junit. Assert. assertEquals ( expectedRecords, var )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, var expectedRecords )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, var. getCompleted ( ) )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, varCnt )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, var VAR_8 )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, var. getCompletedLine )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit. Assert. assertEquals ( expectedRecords, var VARRecords )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org. junit, expectedRecords )

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  org

[*] target: assertThat(outputRecords).containsExactlyEntriesIn(expectedRecords)
[-] pred:  )
************************************
************************************
[+] input: makePipeline_valid() { var dlpStub = new ItemShapeValidatingDlpStub( pipelineOptions.getProject(), pipelineOptions.getDlpRegion(), schemaKeyInfoTypeMap);  new DlpInspectionPipeline( pipelineOptions, testPipeline, new StubbingDlpClientFactory(dlpStub), secretsClient, fixedClock) .makePipeline() .run() .waitUntilFinish();  var actualSchema = TestResourceLoader.absolutePath().loadAsString(outputFolder + "/schema.json");  JsonSubject."<AssertPlaceHolder>"; assertExpectedColumnInformation(pipelineOptions.getReportLocation()); }
makePipeline() { TupleTag<FlatRecord> recordsTag = new TupleTag<>(); TupleTag<String> avroSchemaTag = new TupleTag<>();  PCollectionTuple recordSchemaTuple = pipeline.apply( "Read" + SourceNames.forType(options.getSourceType()).asCamelCase(), TransformingReader.forSourceType(options.getSourceType()) .from(options.getInputPattern()) .withJdbcConfiguration( JdbcConfigurationExtractor.using(options).jdbcConfiguration()) .withSecretsClient(secretsClient) .withRecordsTag(recordsTag) .withAvroSchemaTag(avroSchemaTag));  // Sample and Identify columns var columnInfoTag = new TupleTag<ColumnInformation>(); var errorTag = new TupleTag<KV<ShardedKey<String>, Table>>();  var dlpInspectResults = recordSchemaTuple .get(recordsTag) .apply("RandomColumnarSample", RandomColumnarSampler.any(options.getSampleSize())) .apply("BatchForDlp", new BatchColumnsForDlp()) .apply( "DlpIdentify", DlpIdentify.builder() .batchIdentifierFactory(makeDlpBatchIdentifierFactory()) .columnInfoTag(columnInfoTag) .errorTag(errorTag) .build());  dlpInspectResults .get(errorTag) .setCoder(KvCoder.of(ShardedKey.Coder.of(StringUtf8Coder.of()), ProtoCoder.of(Table.class))) .apply("MakeErrorTableJson", ParDo.of(new ConvertTableToJsonFn())) .setCoder(KvCoder.of(StringUtf8Coder.of(), StringUtf8Coder.of())) .apply( "WriteErrorElements", FileIO.<String, KV<String, String>>writeDynamic() .via(Contextful.fn(KV::getValue), Contextful.fn(col -> TextIO.sink())) .by(KV::getKey) .withDestinationCoder(StringUtf8Coder.of()) .withNaming( Contextful.fn( colName -> defaultNaming( /* prefix= */ String.format( "col-%s", colName.replaceAll("[\\.\\$\\[\\]]+", "-")) .replaceAll("[-]+", "-"), /* suffix= */ ".json"))) .to(options.getReportLocation() + "/error"));  var inspectionReport = dlpInspectResults .get(columnInfoTag) .apply( "ExtractReport", MakeInspectionReport.builder() .setAvroSchema(recordSchemaTuple.get(avroSchemaTag).apply(View.asSingleton())) .setSourceType(options.getSourceType()) .setClock(clock) .setInputPattern(options.getInputPattern()) .setJdbcConfiguration( JdbcConfigurationExtractor.using(options).jdbcConfiguration()) .build());  recordSchemaTuple .get(avroSchemaTag) .apply( "WriteSchema", TextIO.write() .to(options.getReportLocation() + "/schema") .withSuffix(".json") .withoutSharding());  writeReportToGcs(inspectionReport); writeReportToBigQuery(inspectionReport); writeReportToDataCatalog(inspectionReport);  return pipeline; }
[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred: org. junit. Assert. assertNull ( actualSchema. makePipeline ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertNull ( actualSchema. makePipelineContainer ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertNull ( actualSchema. makePipelineRoot ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertFalse ( var actualSchema. makePipeline ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertNull ( actualSchema. makePipeline() ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertSame ( actualSchema, dlpStub. makePipeline ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertSame ( actualSchema, thisSchema. makePipeline ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertFalse ( var. makePipeline() ( ) )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org. junit. Assert. assertNull ( actualSchema )

[*] target: assertThat(actualSchema).isEqualTo(expectedSchema)
[-] pred:  org
************************************
************************************
[+] input: getPageTest() { try { for (int i = 0; i < 2; i++) { autoCardService.login(USERNAME, PASSWORD); String page = autoCardService.getPage(); Assert.assertNotNull(page); Assert."<AssertPlaceHolder>"; } } catch (Exception e) { e.printStackTrace(); } }
formValidation(String html) { try { if (html != null) { Document document = Jsoup.parse(html); Element form = document.getElementsByClass("form-detail2").last(); if (form != null) { String digest = DigestUtils.digest(form.html(), "MD5"); if (appConfig.getCacheItem(FORM_MD5_VALUE) == null) { appConfig.addCacheItem(FORM_MD5_VALUE, digest); } if (appConfig.getCacheItem(FORM_MD5_VALUE).equals(digest)) { return true; } } else { LogUtils.printMessage("未捕获表单信息，捕获信息如下", LogUtils.Level.ERROR); System.out.println(html); } } } catch (Exception e) { LogUtils.printMessage(e.getMessage(), e, LogUtils.Level.ERROR); } return false; }
[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred: org. junit. Assert. assertEquals ( true, page. formValidation(String i )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation(String i ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation( page ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation( ( i ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation(page ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation ( ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation( encode )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation( ( page ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation(String html ) )

[*] target: assertTrue(autoCardService.formValidation(page))
[-] pred:  org. junit. Assert. assertEquals ( true, page. formValidation( page )
************************************
************************************
[+] input: test() { Client client = Client // .s3() // .region("us-west-1") // .accessKey("123") // .secretKey("456") // .httpClient(hc) // .build(); // create a bucket client // .path("MyBucket") // .metadata("category", "something") // .query("type", "thing") // .attribute("color", "red") // .attribute("color", "blue") // .attributePrefix("Message") // .attribute("name", "hi") // .attribute("name", "there") // .method(HttpMethod.PUT) // .requestBody("hi there") // .region("ap-southeast-2") // .connectTimeout(5, TimeUnit.SECONDS) // .readTimeout(6, TimeUnit.SECONDS) // .retryMaxAttempts(1) // .retryBackoffFactor(1.0) // .retryInitialInterval(10, TimeUnit.MILLISECONDS) // .retryMaxInterval(1, TimeUnit.SECONDS) // .retryJitter(0) // .execute(); "<AssertPlaceHolder>"; assertEquals("PUT", hc.httpMethod); assertEquals("9b96a1fe1d548cbbc960cc6a0286668fd74a763667b06366fb2324269fcabaa4", hc.headers.get("x-amz-content-sha256")); String authorization = hc.headers.get("Authorization"); assertTrue(authorization.startsWith("AWS4-HMAC-SHA256 Credential=")); assertTrue(authorization.contains( "/ap-southeast-2/s3/aws4_request, SignedHeaders=content-length;host;x-amz-content-sha256;x-amz-date;x-amz-meta-category")); assertEquals("8", hc.headers.get("content-length")); assertEquals("s3.ap-southeast-2.amazonaws.com", hc.headers.get("Host")); assertTrue(hc.headers.get("x-amz-date").endsWith("Z")); assertEquals("something", hc.headers.get("x-amz-meta-category")); assertEquals("hi there", hc.requestBodyString()); assertEquals(5000, hc.connectTimeoutMs); assertEquals(6000, hc.readTimeoutMs); }
retryJitter(double jitter) { Preconditions.checkArgument(jitter >= 0 && jitter <= 1, "jitter must be between 0 and 1"); b.retries = b.retries.withJitter(jitter); return this; }
[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred: org. junit. Assert. assertNotNull ( client )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)Json ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)Data ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)Tests ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)Source ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)from ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitterPagePage ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. retryJitter(0)Encoder ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client )
************************************
************************************
[+] input: testQueryParameterWithoutValue() { Client client = Client // .s3() // .region("us-west-1") // .accessKey("123") // .secretKey("456") // .httpClient(hc) // .build(); client // .path("mybucket", "myobject") // .query("uploads") // .method(HttpMethod.POST) // .execute(); // normally returns uploadId but just want to check url and signature // right "<AssertPlaceHolder>"; assertEquals("POST", hc.httpMethod); assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", hc.headers.get("x-amz-content-sha256")); String authorization = hc.headers.get("Authorization"); assertTrue(authorization.startsWith("AWS4-HMAC-SHA256 Credential=")); assertTrue(authorization.contains( "/us-west-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date")); assertEquals("s3.us-west-1.amazonaws.com", hc.headers.get("Host")); assertTrue(hc.headers.get("x-amz-date").endsWith("Z")); }
build() { return new Client(b.clock, b.serviceName, b.region, b.credentials, b.httpClient, b.connectTimeoutMs, b.readTimeoutMs, b.exceptionFactory, b.baseUrlFactory, b.retries); }
[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred: org. junit. Assert. assertEquals ( client. build() ( ), null )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client. build() ( ), right )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client, right )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client, right. build() ( ) )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client, project. build() ( ) )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client. build() ( ), result )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client, travel )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertEquals ( client, to )

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  org

[*] target: assertEquals("https://s3.us-west-1.amazonaws.com/mybucket/myobject?uploads", hc.endpointUrl.toString())
[-] pred:  )
************************************
************************************
[+] input: testUnsignedPayload() { Client client = Client // .s3() // .region("us-west-1") // .accessKey("123") // .secretKey("456") // .httpClient(hc) // .build(); // create a bucket client // .path("MyBucket") // .metadata("category", "something") // .query("type", "thing") // .attribute("color", "red") // .attribute("color", "blue") // .attributePrefix("Message") // .attribute("name", "hi") // .attribute("name", "there") // .method(HttpMethod.PUT) // .requestBody("hi there") // .unsignedPayload() // .region("ap-southeast-2") // .connectTimeout(5, TimeUnit.SECONDS) // .readTimeout(6, TimeUnit.SECONDS) // .execute(); "<AssertPlaceHolder>"; assertEquals("PUT", hc.httpMethod); assertEquals("UNSIGNED-PAYLOAD", hc.headers.get("x-amz-content-sha256")); String authorization = hc.headers.get("Authorization"); assertTrue(authorization.startsWith("AWS4-HMAC-SHA256 Credential=")); assertTrue(authorization.contains( "/ap-southeast-2/s3/aws4_request, SignedHeaders=content-length;host;x-amz-content-sha256;x-amz-date;x-amz-meta-category")); assertEquals("8", hc.headers.get("content-length")); assertEquals("s3.ap-southeast-2.amazonaws.com", hc.headers.get("Host")); assertTrue(hc.headers.get("x-amz-date").endsWith("Z")); assertEquals("something", hc.headers.get("x-amz-meta-category")); assertEquals("hi there", hc.requestBodyString()); assertEquals(5000, hc.connectTimeoutMs); assertEquals(6000, hc.readTimeoutMs); }
readTimeout(long duration, TimeUnit unit) { Preconditions.checkArgument(duration >= 0, "duration cannot be negative"); Preconditions.checkNotNull(unit, "unit cannot be null"); b.readTimeoutMs = (int) unit.toMillis(duration); return this; }
[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred: org. junit. Assert. assertNotNull ( client )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client. readTimeout(st.path("My rebuild rebuildQueriesTest. waitForShards ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. synchronized ( client ) { client. readTimeout(ststststst-2 getConfig getConfig ( ). isEmpty ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. synchronized ( client ) { client. readTimeout(ststststst-2 getConfig getConfig ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. synchronized ( client ) { client. readTimeout(ststststst-2PostRequestPostRequest. shard ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( client. readTimeout(28. size ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNotNull ( client. readTimeout(28. size ( ) )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. synchronized ( client )

[*] target: assertEquals( "https://s3.ap-southeast-2.amazonaws.com/MyBucket?type=thing&Attribute.1.Name=color&Attribute.1.Value=red&Attribute.2.Name=color&Attribute.2.Value=blue&Message.1.Name=name&Message.1.Value=hi&Message.2.Name=name&Message.2.Value=there", hc.endpointUrl.toString())
[-] pred:  org
************************************
************************************
[+] input: testRegionNoneUsesUsEast1InSignature() { Client client = Client // .iam() // .regionNone() .accessKey("123") // .secretKey("456") // .httpClient(hc) // .build(); // create a bucket client // .query("Action", "GetUser") // .query("Version", "2010-05-08") // .execute(); "<AssertPlaceHolder>"; String authorization = hc.headers.get("Authorization"); assertTrue(authorization.contains("/us-east-1/iam/aws4_request")); assertEquals("iam.amazonaws.com", hc.headers.get("Host")); }
query(String name, String value) { Preconditions.checkNotNull(name, "name cannot be null"); Preconditions.checkNotNull(value, "value cannot be null"); return path("").query(name, value); }
[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred: org. junit. Assert. assertNotNull ( client )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client. getCluster ( ) )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( ( client!= null ) )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertTrue ( ( client == null ) )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client. connection ( ) )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNull ( client. connection )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org. junit. Assert. assertNotNull ( server )

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  org

[*] target: assertEquals( "https://iam.amazonaws.com/?Action=GetUser&Version=2010-05-08", hc.endpointUrl.toString())
[-] pred:  )
************************************
************************************
[+] input: testTimeoutsAtClientLevel() { Client client = Client // .s3() // .region("ap-southeast-2") // .accessKey("123") // .secretKey("456") // .connectTimeout(5, TimeUnit.SECONDS) // .readTimeout(6, TimeUnit.SECONDS) // .httpClient(hc) // .build(); // create a bucket client // .path("MyBucket") // .method(HttpMethod.PUT) // .requestBody("hi there") // .execute();  "<AssertPlaceHolder>"; assertEquals(6000, hc.readTimeoutMs); }
path(String... segments) { Preconditions.checkNotNull(segments, "segments cannot be null"); return new Request(this, null, segments); }
[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred: org. junit. Assert. assertNotNull ( client. path(String... segments )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client. path(String...52 )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client. path(weekweekweek )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client. path(weekweeks )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client. path(String...123 )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( a bucket )

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org. junit. Assert. assertNotNull ( client

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  org

[*] target: assertEquals(5000, hc.connectTimeoutMs)
[-] pred:  )
************************************
************************************
[+] input: testDefaultClientFromEnvironment() { Map<String, String> map = new HashMap<>(); map.put("AWS_REGION", "ap-southeast-2"); map.put("AWS_ACCESS_KEY_ID", "123"); map.put("AWS_SECRET_ACCESS_KEY", "abc"); Client client = Client.s3().environment(name -> map.get(name)).defaultClient().build(); assertEquals("ap-southeast-2", client.region().get()); Credentials c = client.credentials(); "<AssertPlaceHolder>"; assertEquals("abc", c.secretKey()); assertFalse(c.sessionToken().isPresent()); }
credentials() { return credentials; }
[*] target: assertEquals("123", c.accessKey())
[-] pred: org. junit. Assert. assertNull ( c )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNotNull ( c )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials ( ) )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials()); )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c, map )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials: )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentialsMenu )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials_should )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentialsCol )
************************************
************************************
[+] input: testDefaultClientFromSystemProperties() { System.setProperty("aws.accessKeyId", "123"); System.setProperty("aws.secretKey", "abc"); Client client = Client.s3().region("ap-southeast-2").credentialsFromSystemProperties() .build(); assertEquals("ap-southeast-2", client.region().get()); Credentials c = client.credentials(); "<AssertPlaceHolder>"; assertEquals("abc", c.secretKey()); assertFalse(c.sessionToken().isPresent()); }
credentials() { return credentials; }
[*] target: assertEquals("123", c.accessKey())
[-] pred: org. junit. Assert. assertNotNull ( c )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials ( ) )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials() )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials_()); )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c.()); )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentialsNull )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org. junit. Assert. assertNull ( c. credentials: )

[*] target: assertEquals("123", c.accessKey())
[-] pred:  org
************************************
************************************
[+] input: IOException { Client client = Client // .s3() // .region("ap-southeast-2") // .accessKey("123") // .secretKey("456") // .clock(() -> 1622695846902L) // .retryMaxAttempts(1) // .build(); try (Server server = Server.start()) { server.response().body("hello").statusCode(500).add(); try { client.url(server.baseUrl()) // .requestBody("hi there") // .responseAsUtf8(); // Assert.fail(); } catch (ServiceException e) { "<AssertPlaceHolder>"; assertEquals("hello", e.message()); } } }
url(String url) { Preconditions.checkNotNull(url); return new Request(this, url); }
[*] target: assertEquals(500, e.statusCode())
[-] pred: org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertNotNull ( e) )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( e), true )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertNotNull ( e) {

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertTrue ( e!= null )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertNotNull ( e) { e )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org. junit. Assert. assertTrue ( false )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  )

[*] target: assertEquals(500, e.statusCode())
[-] pred:  org
************************************
************************************
[+] input: testAuthorizationSignedRequest() { Client s3 = Client // .s3() // .region("ap-southeast-2") // .credentials(Credentials.of("123", "456", "789")).clock(() -> 1622695846902L) // .httpClient(hc) // .build();  s3 // .path("myBucket/myObject.txt") // .query("Type", "Thing") // .header("my-header", "blah") // .header("my-header", "blah2") // .requestBody("something") // .response();  "<AssertPlaceHolder>"; assertEquals("something", hc.requestBodyString()); assertEquals("https://s3.ap-southeast-2.amazonaws.com/myBucket/myObject.txt?Type=Thing", hc.endpointUrl.toString()); Map<String, String> a = new HashMap<>(); a.put("my-header", "blah,blah2"); a.put("x-amz-content-sha256", "3fc9b689459d738f8c88a3a48aa9e33542016b7a4052e001aaa536fca74813cb"); a.put("Authorization", "AWS4-HMAC-SHA256 Credential=123/20210603/ap-southeast-2/s3/aws4_request, SignedHeaders=content-length;host;my-header;x-amz-content-sha256;x-amz-date;x-amz-security-token, Signature=72983b3d44575f7b8fea5dd7148a764a7031122154387a30764c56d171906c80"); a.put("Host", "s3.ap-southeast-2.amazonaws.com"); a.put("x-amz-date", "20210603T045046Z"); a.put("content-length", "" + 9); a.put("x-amz-security-token", "789"); for (Entry<String, String> entry : hc.headers.entrySet()) { assertEquals(a.get(entry.getKey()), entry.getValue()); } assertEquals(a.size(), hc.headers.size()); }
query(String name, String value) { Preconditions.checkNotNull(name, "name cannot be null"); Preconditions.checkNotNull(value, "value cannot be null"); return path("").query(name, value); }
[*] target: assertEquals("GET", hc.httpMethod)
[-] pred: org. junit. Assert. assertTrue ( ( s3 instanceof org. bluetooth bluetooth.clock(() ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. util. CoreMatchers ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. neccess2L ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. lang3. util. Map ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. mozilla. io. File ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. lang3. TestUtils. METHOD_8 ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. lang3. TestUtils. METHOD_7 ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. lang3. TestUtils. METHOD_11 ) )

[*] target: assertEquals("GET", hc.httpMethod)
[-] pred:  org. junit. Assert. assertTrue ( ( s3 instanceof org. apache. commons. lang3. TestUtils. MockInputStream ) )
************************************
************************************
[+] input: testOtherServiceNames() { Client s3 = Client.s3().region("ap-southeast-2").accessKey("123").secretKey("abc").build(); assertEquals("iam", Client.iam().from(s3).build().serviceName()); assertEquals("ec2", Client.ec2().from(s3).build().serviceName()); assertEquals("lambda", Client.lambda().from(s3).build().serviceName()); assertEquals("s3", Client.s3().from(s3).build().serviceName()); assertEquals("sns", Client.sns().from(s3).build().serviceName()); assertEquals("sqs", Client.sqs().from(s3).build().serviceName()); "<AssertPlaceHolder>"; }
serviceName() { return serviceName; }
[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred: org. junit. Assert. assertNull ( s3. serviceName() ( ) )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName() )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName() { )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName() { }

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName(): )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName(), null )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org. junit. Assert. assertNull ( s3. serviceName()

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  . serviceName() ( ) )

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  the serviceName() is the org

[*] target: assertEquals("hi", Client.service("hi").from(s3).build().serviceName())
[-] pred:  org
************************************
************************************
[+] input: IOException { HttpClientTestingWithQueue h = new HttpClientTestingWithQueue(); Client s3 = Client // .s3() // .region("ap-southeast-2") // .accessKey("123") // .secretKey("456") // .httpClient(h) // .retryMaxAttempts(1) // .build();  h.add(startMultipartUpload()); h.add(submitPart1()); h.add(submitPart2Fails()); h.add(abortMultipartUpload());  try (MultipartOutputStream out = Multipart.s3(s3) // .bucket("mybucket") // .key("mykey") // .executor(Executors.newFixedThreadPool(1)) // .maxAttemptsPerAction(1) // .retryInitialInterval(1, TimeUnit.SECONDS) // .retryBackoffFactor(1.0) // .retryMaxInterval(10, TimeUnit.SECONDS) // .retryJitter(0) // .outputStream()) { for (int i = 0; i < 600000; i++) { out.write("0123456789".getBytes(StandardCharsets.UTF_8)); } } catch (RuntimeException e) { "<AssertPlaceHolder>"; }  assertEquals(Arrays.asList( // "POST:https://s3.ap-southeast-2.amazonaws.com/mybucket/mykey?uploads", "PUT:https://s3.ap-southeast-2.amazonaws.com/mybucket/mykey?partNumber=1&uploadId=abcde", "PUT:https://s3.ap-southeast-2.amazonaws.com/mybucket/mykey?partNumber=2&uploadId=abcde", "DELETE:https://s3.ap-southeast-2.amazonaws.com/mybucket/mykey?uploadId=abcde"), // h.urls()); }
outputStream() { if (b.executor == null) { b.executor = Executors.newCachedThreadPool(); } return new MultipartOutputStream(b.s3, b.bucket, b.key, b.transform, b.executor, b.timeoutMs, b.retries, b.partSize); }
[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred: org. junit. Assert. assertEquals ( 12, e. getCause ( ) )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( 12, e. getMessage ( ) )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( e. getMessage ( ), true )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( true, true )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( e, ""org. getMessage ( ) )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( e, e )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( e, 2.0 )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org. junit. Assert. assertEquals ( e, ""org )

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  org

[*] target: assertTrue(e.getCause().getCause() instanceof ServiceException)
[-] pred:  )
************************************
************************************
[+] input: testIsEmpty() { assertTrue(RequestHelper.isEmpty(null)); assertTrue(RequestHelper.isEmpty(new byte[0])); "<AssertPlaceHolder>"; }
isEmpty(byte[] array) { return array == null || array.length == 0; }
[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred: org. junit. Assert. assertTrue ( there. isEmpty ( 0 ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( there. isEmpty(byte[] array ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( array. isEmpty(byte[] array ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( there. isEmpty ( buffer ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( isEqual ( 0, 12, 0 ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( exception. isEmpty(byte[] array )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( there. isEmpty ( byte[0] ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( exception. isEmpty(byte[] array ) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit. Assert. assertTrue ( there. isEmpty(byte[] array) )

[*] target: assertFalse(RequestHelper.isEmpty(new byte[2]))
[-] pred:  org. junit )
************************************
************************************
[+] input: test() { byte[] content = "hi there".getBytes(StandardCharsets.UTF_8); Map<String, List<String>> headers = new HashMap<>(); headers.put("x-amz-meta-color", Collections.singletonList("red")); headers.put("x-amz-meta-thing", Collections.singletonList("under")); headers.put("blah", Collections.singletonList("stuff")); Response r = new Response(headers, content, 200); assertEquals("hi there", r.contentUtf8()); assertTrue(r.isOk()); assertEquals("red", r.metadata("color").get()); assertEquals("under", r.metadata("thing").get()); assertEquals(2, r.metadata().entrySet().size()); assertEquals(3, r.headers().size()); "<AssertPlaceHolder>"; }
statusCode() { return statusCode; }
[*] target: assertEquals(200, r.statusCode())
[-] pred: org. junit. Assert. assertThat ( r. statusCode(), org. hamcrest. CoreMatchers. is ( 200 ) )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertThat ( r. statusCode(), org. hamcrest. CoreMatchers. is ( 100 ) )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, r. statusCode() ( ) )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, r. statusCode() )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 100, r. statusCode() )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. statusCode() ) > 0 ) )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org. junit. Assert. assertTrue ( ( ( r. statusCode() ) > 200 ) )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  returns the org

[*] target: assertEquals(200, r.statusCode())
[-] pred:  )

[*] target: assertEquals(200, r.statusCode())
[-] pred:  org
************************************
************************************
[+] input: testFilterNullKeys() { byte[] content = "hi there".getBytes(StandardCharsets.UTF_8); Map<String, List<String>> headers = new HashMap<>(); headers.put("x-amz-meta-color", Collections.singletonList("red")); headers.put((String) null, Collections.singletonList("thing")); Response r = new Response(headers, content, 200); assertEquals(1, r.metadata().entrySet().size()); "<AssertPlaceHolder>"; }
headers() { return headers; }
[*] target: assertEquals(2, r.headers().size())
[-] pred: org. junit. Assert. assertEquals ( headers, r. headers() ( ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertNull ( r. headers() )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertNull ( r. headers() ( ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertEquals ( headers, r. headers() )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertSame ( headers, r. headers() )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertTrue ( r. headers() ( ). isEmpty ( ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertSame ( headers, r. headers() ( ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertNull ( r. headers() { get ( 0 ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertNull ( r. headers() { get ( headers ) )

[*] target: assertEquals(2, r.headers().size())
[-] pred:  org. junit. Assert. assertNull ( r. headers() { return headers ; }
************************************
************************************
[+] input: IOException { HttpURLConnection connection = Mockito.mock(HttpURLConnection.class); when(connection.getInputStream()).thenReturn(null); when(connection.getOutputStream()).thenReturn(new ByteArrayOutputStream()); when(connection.getResponseCode()).thenReturn(200); try (ResponseInputStream response = HttpClientDefault.request(connection, new byte[0])) { "<AssertPlaceHolder>"; assertEquals(-1, response.read()); assertTrue(response.headers().isEmpty()); } }
request(HttpURLConnection connection, byte[] requestBody) { int responseCode; Map<String, List<String>> responseHeaders; InputStream is; try { if (requestBody != null) { OutputStream out = connection.getOutputStream(); out.write(requestBody); out.flush(); } responseHeaders = connection.getHeaderFields(); responseCode = connection.getResponseCode(); if (isOk(responseCode)) { is = connection.getInputStream(); } else { is = connection.getErrorStream(); } if (is == null) { is = Util.emptyInputStream(); } } catch (IOException e) { try { connection.disconnect(); } catch (Throwable e2) { // ignore } throw new UncheckedIOException(e); } return new ResponseInputStream(connection, responseCode, responseHeaders, is); }
[*] target: assertEquals(200, response.statusCode())
[-] pred: org. junit. Assert. assertEquals ( 200, response. getStatus ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getStatusCode ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. body ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getClass ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. statusCode ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getIntent ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getCode ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. status ( ) )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. 200 )

[*] target: assertEquals(200, response.statusCode())
[-] pred:  org. junit, response )
************************************
************************************
[+] input: IOException { HttpURLConnection connection = Mockito.mock(HttpURLConnection.class); when(connection.getInputStream()).thenReturn(null); when(connection.getOutputStream()).thenReturn(new ByteArrayOutputStream()); when(connection.getResponseCode()).thenReturn(500); try (ResponseInputStream response = HttpClientDefault.request(connection, new byte[0])) { "<AssertPlaceHolder>"; assertEquals(-1, response.read()); assertTrue(response.headers().isEmpty()); } }
request(HttpURLConnection connection, byte[] requestBody) { int responseCode; Map<String, List<String>> responseHeaders; InputStream is; try { if (requestBody != null) { OutputStream out = connection.getOutputStream(); out.write(requestBody); out.flush(); } responseHeaders = connection.getHeaderFields(); responseCode = connection.getResponseCode(); if (isOk(responseCode)) { is = connection.getInputStream(); } else { is = connection.getErrorStream(); } if (is == null) { is = Util.emptyInputStream(); } } catch (IOException e) { try { connection.disconnect(); } catch (Throwable e2) { // ignore } throw new UncheckedIOException(e); } return new ResponseInputStream(connection, responseCode, responseHeaders, is); }
[*] target: assertEquals(500, response.statusCode())
[-] pred: org. junit. Assert. assertEquals ( 200, response. getStatus ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getStatusCode ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. body ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. statusCode ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getClass ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getCode ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getIntent ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. status ( ) )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. 200 )

[*] target: assertEquals(500, response.statusCode())
[-] pred:  org. junit, response )
************************************
************************************
[+] input: IOException { HttpURLConnection connection = Mockito.mock(HttpURLConnection.class); when(connection.getInputStream()).thenReturn(null); when(connection.getOutputStream()).thenReturn(new ByteArrayOutputStream()); when(connection.getResponseCode()).thenReturn(100); try (ResponseInputStream response = HttpClientDefault.request(connection, new byte[0])) { "<AssertPlaceHolder>"; assertEquals(-1, response.read()); assertTrue(response.headers().isEmpty()); } }
request(HttpURLConnection connection, byte[] requestBody) { int responseCode; Map<String, List<String>> responseHeaders; InputStream is; try { if (requestBody != null) { OutputStream out = connection.getOutputStream(); out.write(requestBody); out.flush(); } responseHeaders = connection.getHeaderFields(); responseCode = connection.getResponseCode(); if (isOk(responseCode)) { is = connection.getInputStream(); } else { is = connection.getErrorStream(); } if (is == null) { is = Util.emptyInputStream(); } } catch (IOException e) { try { connection.disconnect(); } catch (Throwable e2) { // ignore } throw new UncheckedIOException(e); } return new ResponseInputStream(connection, responseCode, responseHeaders, is); }
[*] target: assertEquals(100, response.statusCode())
[-] pred: org. junit. Assert. assertEquals ( 200, response. getStatus ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getStatusCode ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. body ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. statusCode ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getClass ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getCode ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getIntent ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. status ( ) )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. 200 )

[*] target: assertEquals(100, response.statusCode())
[-] pred:  org. junit, response )
************************************
************************************
[+] input: testNoContent() { XmlElement x = XmlElement.parse("<a/>"); assertEquals("a", x.name()); assertFalse(x.hasChildren()); assertTrue(x.attributeNames().isEmpty()); "<AssertPlaceHolder>"; }
content() { return this.content; }
[*] target: assertEquals("", x.content())
[-] pred: org. junit. Assert. assertNull ( x. content() ( ) )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() { )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() { }

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() { } )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() ) )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content()

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content(): )

[*] target: assertEquals("", x.content())
[-] pred:  org

[*] target: assertEquals("", x.content())
[-] pred:  )
************************************
************************************
[+] input: testEmptyContent() { XmlElement x = XmlElement.parse("<a></a>"); assertEquals("a", x.name()); assertFalse(x.hasChildren()); assertTrue(x.attributeNames().isEmpty()); "<AssertPlaceHolder>"; }
content() { return this.content; }
[*] target: assertEquals("", x.content())
[-] pred: org. junit. Assert. assertEquals ( """", x. content() )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content() < java. lang. String > is ( """" ) )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content().());<sp>ous<sp> behavior<sp>

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() ( ) )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content():::"" )

[*] target: assertEquals("", x.content())
[-] pred:  org. junit. Assert. assertNull ( x. content() )

[*] target: assertEquals("", x.content())
[-] pred:  ) { return 0 ; } content()

[*] target: assertEquals("", x.content())
[-] pred:  ) { return null ; } content()

[*] target: assertEquals("", x.content())
[-] pred:  ) { return the content()

[*] target: assertEquals("", x.content())
[-] pred:  returns the content()
************************************
************************************
[+] input: testEmptyContent2() { XmlElement x = XmlElement.parse("<a><b></b></a>", false); assertEquals("a", x.name()); "<AssertPlaceHolder>"; }
hasChildren() { return !children.isEmpty(); }
[*] target: assertTrue(x.hasChildren())
[-] pred: org. junit. Assert. assertFalse ( x. hasChildren() ( ) )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertThat ( x. hasChildren() { org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertThat ( x. hasChildren(), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertThat ( x. hasChildren() { org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertFalse ( x. hasChildren() )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertTrue ( x. hasChildren() ( ) )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertFalse ( x. hasChildren() { } }

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertFalse ( x. hasChildren() { )

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertFalse ( x. hasChildren() { } else { return false ; } }

[*] target: assertTrue(x.hasChildren())
[-] pred:  org. junit. Assert. assertFalse ( x. hasChildren() { } )
************************************
************************************
[+] input: testHasContentAndWhiteSpaceTrimmed() { XmlElement x = XmlElement.parse("<a>\t\n hi there -&gt; 1 \n\t</a>"); assertEquals("a", x.name()); assertFalse(x.hasChildren()); assertTrue(x.attributeNames().isEmpty()); "<AssertPlaceHolder>"; }
content() { return this.content; }
[*] target: assertEquals("hi there -> 1", x.content())
[-] pred: org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content() ( ), org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( ""bar"" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content() ( ), org. hamcrest. CoreMatchers. is ( "" "" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( ""<sp>"" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( "" "" ) )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  org. junit. Assert. assertEquals ( """", x. content() )

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  the junit setup method

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  gets the content()

[*] target: assertEquals("hi there -> 1", x.content())
[-] pred:  test content()
************************************
************************************
[+] input: testHasChild() { XmlElement x = XmlElement.parse("<a><b/></a>"); assertEquals("a", x.name()); assertTrue(x.hasChildren()); assertTrue(x.attributeNames().isEmpty()); assertEquals("b", x.firstChild().name()); "<AssertPlaceHolder>"; }
content() { return this.content; }
[*] target: assertEquals("", x.firstChild().content())
[-] pred: org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( ""test"" ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertTrue ( ( ( x. content() ) instanceof java. lang. String ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertTrue ( ( ( x. content() ) instanceof java. lang. Long ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertTrue ( ( ( x. content() ) instanceof java. lang. Double ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( ""b"" ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertTrue ( ( ( x. content() ) instanceof java. util. Optional ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertTrue ( ( ( x. content() ) instanceof java. util. Document ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertThat ( x. content(), org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  org. junit. Assert. assertEquals ( ""test"", x. content() )

[*] target: assertEquals("", x.firstChild().content())
[-] pred:  the junit setup method
************************************
************************************
[+] input: testHasTwoChildren() { String xml = "<a><b>boo</b><c step="large">bingo</c><d>&amp;&gt;&lt;&quot;&apos;&#x7;&#x130;zz</d></a>"; XmlElement x = XmlElement.parse(xml); assertEquals("a", x.name()); assertTrue(x.hasChildren()); assertEquals(3, x.countChildren()); assertEquals(3, x.children().size()); assertEquals("bingo", x.content("c")); assertTrue(x.attributeNames().isEmpty()); assertEquals("b", x.firstChild().name()); assertEquals("boo", x.firstChild().content()); assertEquals("c", x.child("c").name()); assertEquals("bingo", x.child(1).content()); assertEquals("large", x.child("c").attribute("step")); assertEquals( "<a><b>boo</b><c step="large">bingo</c><d>&amp;&gt;&lt;&quot;&apos;&#x7;&#x130;zz</d></a>", x.toString()); "<AssertPlaceHolder>"; }
lineNumber() { return this.lineNr; }
[*] target: assertEquals(0, x.lineNumber())
[-] pred: org. junit. Assert. assertTrue ( ( ( xml. length ( ) ) > 0 ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( ( xml. length ( ) ) == 2 ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( xml == ( t. lineNumberII ) ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( ( xml. length ( ) ) > 2 ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( xml == ( x. lineNumber() ) ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( xml == ( epsg ) ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  org. junit. Assert. assertTrue ( ( ( xml. length ( ) ) > 100 ) )

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  testHasTwoChildren()

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  testHas 2Children()

[*] target: assertEquals(0, x.lineNumber())
[-] pred:  the junit setup method
************************************
************************************
[+] input: IllegalAccessException { String expectedQuery = "test-query"; boolean adaptiveFetch = true;  adaptiveFetchCache.addNewQuery(adaptiveFetch, new MockUpQuery(expectedQuery));  Map<String, AdaptiveFetchCacheEntry> map = getInfoMapVariable();  "<AssertPlaceHolder>"; assertNotNull(map.get(expectedQuery)); }
addNewQuery(boolean adaptiveFetch, @NonNull Query query) { if (adaptiveFetch && maximumResultBufferSize != -1) { String sql = query.getNativeSql().trim(); AdaptiveFetchCacheEntry adaptiveFetchCacheEntry = adaptiveFetchInfoMap.get(sql); if (adaptiveFetchCacheEntry == null) { adaptiveFetchCacheEntry = new AdaptiveFetchCacheEntry(); } adaptiveFetchCacheEntry.incrementCounter();  adaptiveFetchInfoMap.put(sql, adaptiveFetchCacheEntry); } }
[*] target: assertEquals(1, map.size())
[-] pred: org. junit. Assert. assertNotNull ( map )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQuery ( ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQueryWithLine ( ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQuery ( 0 ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertTrue ( adaptiveFetchCacheEntry )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( mapping )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( maps )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org

[*] target: assertEquals(1, map.size())
[-] pred:  )
************************************
************************************
[+] input: IllegalAccessException { String expectedQuery = "test-query"; boolean adaptiveFetch = true;  adaptiveFetchCache.addNewQuery(adaptiveFetch, new MockUpQuery(expectedQuery)); adaptiveFetchCache.addNewQuery(adaptiveFetch, new MockUpQuery(expectedQuery));  Map<String, AdaptiveFetchCacheEntry> map = getInfoMapVariable();  "<AssertPlaceHolder>"; assertNotNull(map.get(expectedQuery)); assertEquals(2, map.get(expectedQuery).getCounter()); }
addNewQuery(boolean adaptiveFetch, @NonNull Query query) { if (adaptiveFetch && maximumResultBufferSize != -1) { String sql = query.getNativeSql().trim(); AdaptiveFetchCacheEntry adaptiveFetchCacheEntry = adaptiveFetchInfoMap.get(sql); if (adaptiveFetchCacheEntry == null) { adaptiveFetchCacheEntry = new AdaptiveFetchCacheEntry(); } adaptiveFetchCacheEntry.incrementCounter();  adaptiveFetchInfoMap.put(sql, adaptiveFetchCacheEntry); } }
[*] target: assertEquals(1, map.size())
[-] pred: org. junit. Assert. assertNotNull ( map )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQuery ( ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertTrue ( map. addNewQuery ( expectedQuery ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( map. addNewQuery ( expectedQuery ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( map. addNewQuery ( ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertTrue ( map. addNewQuery ( ) )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( mapping )

[*] target: assertEquals(1, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( maps )

[*] target: assertEquals(1, map.size())
[-] pred:  )

[*] target: assertEquals(1, map.size())
[-] pred:  org
************************************
************************************
[+] input: IllegalAccessException { String expectedQuery = "test-query-1"; String expectedQuery2 = "test-query-2"; boolean adaptiveFetch = true;  adaptiveFetchCache.addNewQuery(adaptiveFetch, new MockUpQuery(expectedQuery)); adaptiveFetchCache.addNewQuery(adaptiveFetch, new MockUpQuery(expectedQuery2));  Map<String, AdaptiveFetchCacheEntry> map = getInfoMapVariable();  "<AssertPlaceHolder>"; assertNotNull(map.get(expectedQuery)); assertEquals(1, map.get(expectedQuery).getCounter()); assertNotNull(map.get(expectedQuery2)); assertEquals(1, map.get(expectedQuery).getCounter()); }
addNewQuery(boolean adaptiveFetch, @NonNull Query query) { if (adaptiveFetch && maximumResultBufferSize != -1) { String sql = query.getNativeSql().trim(); AdaptiveFetchCacheEntry adaptiveFetchCacheEntry = adaptiveFetchInfoMap.get(sql); if (adaptiveFetchCacheEntry == null) { adaptiveFetchCacheEntry = new AdaptiveFetchCacheEntry(); } adaptiveFetchCacheEntry.incrementCounter();  adaptiveFetchInfoMap.put(sql, adaptiveFetchCacheEntry); } }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertNotNull ( map )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQuery ( ) )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertEquals ( expectedQuery, map. addNewQuery ( 0 ) )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertTrue ( map. addNewQuery ( expectedQuery ) )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertNull ( map )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. Assert. assertNotNull ( map )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( mapping )

[*] target: assertEquals(2, map.size())
[-] pred:  org. junit. Assert. assertNotNull ( maps )

[*] target: assertEquals(2, map.size())
[-] pred:  org

[*] target: assertEquals(2, map.size())
[-] pred:  )
************************************
************************************
[+] input: Exception { LogSequenceNumber first = LogSequenceNumber.valueOf("0/15D690F8"); LogSequenceNumber second = LogSequenceNumber.valueOf("0/15D690F8");  assertThat(first.compareTo(second), equalTo(0)); "<AssertPlaceHolder>"; }
compareTo(LogSequenceNumber o) { if (value == o.value) { return 0; } //Unsigned comparison return value + Long.MIN_VALUE < o.value + Long.MIN_VALUE ? -1 : 1; }
[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred: org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber2 ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber. valueOf ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber. compare ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), 0 )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf ( first ), second )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber. of ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber. valueOf ( first ) )

[*] target: assertThat(second.compareTo(first), equalTo(0))
[-] pred:  org. junit. Assert. assertEquals ( 0, first. compareTo(LogSequenceNumber o ) )
************************************
************************************
[+] input: Exception { LogSequenceNumber first = LogSequenceNumber.valueOf(1234); LogSequenceNumber second = LogSequenceNumber.valueOf(4321);  assertThat(first.compareTo(second), equalTo(-1)); "<AssertPlaceHolder>"; }
compareTo(LogSequenceNumber o) { if (value == o.value) { return 0; } //Unsigned comparison return value + Long.MIN_VALUE < o.value + Long.MIN_VALUE ? -1 : 1; }
[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred: org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. of ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf ( first ), second. compareTo ( first ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. o ), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. o ), second. compareTo(LogSequenceNumber o )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. o), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. o ), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o ) )
************************************
************************************
[+] input: Exception { LogSequenceNumber first = LogSequenceNumber.valueOf(0x8000000000000000L); LogSequenceNumber second = LogSequenceNumber.valueOf(0x8000000000000001L);  assertThat(first.compareTo(second), equalTo(-1)); "<AssertPlaceHolder>"; }
compareTo(LogSequenceNumber o) { if (value == o.value) { return 0; } //Unsigned comparison return value + Long.MIN_VALUE < o.value + Long.MIN_VALUE ? -1 : 1; }
[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred: org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. of ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf ( first ), second. compareTo ( first ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. o ), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber1 ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. of ( first ), second. compareTo ( first ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber first ) )
************************************
************************************
[+] input: Exception { LogSequenceNumber first = LogSequenceNumber.valueOf(1); LogSequenceNumber second = LogSequenceNumber.valueOf(0x8000000000000001L);  assertThat(first.compareTo(second), equalTo(-1)); "<AssertPlaceHolder>"; }
compareTo(LogSequenceNumber o) { if (value == o.value) { return 0; } //Unsigned comparison return value + Long.MIN_VALUE < o.value + Long.MIN_VALUE ? -1 : 1; }
[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred: org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf valueOf ( first ), second )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber2 ), first. compareTo(LogSequenceNumber2 )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf ( first ), second )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber. valueOf valueOf valueOf ( first ), second )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first )
************************************
************************************
[+] input: Exception { LogSequenceNumber first = LogSequenceNumber.INVALID_LSN; LogSequenceNumber second = LogSequenceNumber.valueOf(1);  assertThat(first.compareTo(second), equalTo(-1)); "<AssertPlaceHolder>"; }
compareTo(LogSequenceNumber o) { if (value == o.value) { return 0; } //Unsigned comparison return value + Long.MIN_VALUE < o.value + Long.MIN_VALUE ? -1 : 1; }
[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred: org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo ( second ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), 1 )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o ), second. compareTo(LogSequenceNumber o ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o ), second. compareTo ( first ) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo(LogSequenceNumber o ), second. compareTo(LogSequenceNumber o) )

[*] target: assertThat(second.compareTo(first), equalTo(1))
[-] pred:  org. junit. Assert. assertEquals ( first. compareTo ( second ), first )
************************************
************************************
[+] input: IOException { fixedLengthStream.write((byte) 1); assertEquals("Incorrect remaining value", 9, fixedLengthStream.remaining()); fixedLengthStream.write((byte) 2); "<AssertPlaceHolder>"; verifyExpectedOutput(new byte[]{1, 2}); }
remaining() { return size - written; }
[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred: org. junit. Assert. assertEquals ( 0, actual. remaining() )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, size )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actual. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, bounds. remaining() )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actualSass. remaining() )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, res. remaining() )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, size - remaining;

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actualIpv. remaining() )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actual, size )

[*] target: assertEquals("Incorrect remaining value", 8, fixedLengthStream.remaining())
[-] pred:  org
************************************
************************************
[+] input: IOException { fixedLengthStream.write(new byte[]{1, 2, 3, 4}); assertEquals("Incorrect remaining value", 6, fixedLengthStream.remaining()); fixedLengthStream.write(new byte[]{5, 6, 7, 8}); "<AssertPlaceHolder>"; verifyExpectedOutput(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}); }
remaining() { return size - written; }
[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred: org. junit. Assert. assertEquals ( 0, bounds. remaining() )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, bounds. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actual. remaining() )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, buf. remaining() )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, actual. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertFalse ( properties. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, properties. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, getIntent ( ). remaining() )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertFalse ( ( ( size ) - written ) )

[*] target: assertEquals("Incorrect remaining value", 2, fixedLengthStream.remaining())
[-] pred:  , bounds )
************************************
************************************
[+] input: IOException { byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}; fixedLengthStream.write(data); assertEquals("Incorrect remaining value", 0, fixedLengthStream.remaining()); try { fixedLengthStream.write((byte) 'a'); fail("Expected exception not thrown"); } catch (IOException e) { assertEquals("Incorrect exception message", "Attempt to write more than the specified 10 bytes", e.getMessage()); } "<AssertPlaceHolder>"; verifyExpectedOutput(data); }
remaining() { return size - written; }
[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred: org. junit. Assert. assertEquals ( data, fixedLengthStream.write ( data ) )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write ( stream ) )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write. remaining()); )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write ( metadata ) )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write.round()); )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write ( bytes ) )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write. large()); )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, fixedLengthStream.write.Attempt2 )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( data, size )

[*] target: assertEquals("Incorrect remaining value after exception", 0, fixedLengthStream.remaining())
[-] pred:  org
************************************
************************************
[+] input: IOException { byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8}; fixedLengthStream.write(data); assertEquals(2, fixedLengthStream.remaining()); try { fixedLengthStream.write(new byte[]{'a', 'b', 'c', 'd'}); fail("Expected exception not thrown"); } catch (IOException e) { assertEquals("Incorrect exception message", "Attempt to write more than the specified 10 bytes", e.getMessage()); } "<AssertPlaceHolder>"; verifyExpectedOutput(data); }
remaining() { return size - written; }
[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred: org. junit. Assert. assertEquals ( 0, data. size ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. remaining() ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. remaining ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. length ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. remaining() )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. maximum ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. maximum ( 1000 ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 4, data. size ( ) )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org. junit. Assert. assertEquals ( 0, data. length )

[*] target: assertEquals("Incorrect remaining value after exception", 2, fixedLengthStream.remaining())
[-] pred:  org
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put("currentSchema", "schema"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof SimpleDataSource); SimpleDataSource simpleDataSource = (SimpleDataSource) dataSource; Assert.assertEquals("db", simpleDataSource.getDatabaseName()); Assert.assertEquals("schema", simpleDataSource.getCurrentSchema()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert :: assertNotNull, dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org> junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert ; assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert ) assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit, assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put(DataSourceFactory.JDBC_INITIAL_POOL_SIZE, "5"); properties.put(DataSourceFactory.JDBC_MAX_POOL_SIZE, "10"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PoolingDataSource); PoolingDataSource poolingDataSource = (PoolingDataSource) dataSource; Assert.assertEquals("db", poolingDataSource.getDatabaseName()); Assert.assertEquals(5, poolingDataSource.getInitialConnections()); Assert.assertEquals(10, poolingDataSource.getMaxConnections()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert ; assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org> junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert :: assertNotNull assertNotNull dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit, assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit { assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof ConnectionPool); ConnectionPool connectionPoolDataSource = (ConnectionPool) dataSource; Assert.assertEquals("db", connectionPoolDataSource.getDatabaseName()); }
createConnectionPoolDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); ConnectionPool dataSource = new ConnectionPool(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert :: assertNotNull, dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit ). assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit here. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit { assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit, dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); XADataSource dataSource = dataSourceFactory.createXADataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PGXADataSource); PGXADataSource xaDataSource = (PGXADataSource) dataSource; Assert.assertEquals("db", xaDataSource.getDatabaseName()); }
createXADataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); PGXADataSource dataSource = new PGXADataSource(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit { Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit ; Assert. assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit ). assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit. Assert. assertNotNull ( dataSource

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit { assertNotNull ( dataSource )

[*] target: assertNotNull(dataSource)
[-] pred:  org. junit, 0 )
************************************
************************************
[+] input: testServiceNameResourceKey() { String serviceName = "foo bar"; String resourceType = "CODE_PIPELINE";  assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey(null, resourceType); }); assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey("", resourceType); }); assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey(" ", resourceType); }); assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey(serviceName, null); }); assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey(serviceName, ""); }); assertThrows(IllegalArgumentException.class, () -> { OnboardingAppStackListener.serviceNameResourceKey(serviceName, "  "); });  String expected = "SERVICE_FOO_BAR_CODE_PIPELINE"; "<AssertPlaceHolder>"; }
serviceNameResourceKey(String serviceName, String resourceType) { if (Utils.isBlank(serviceName)) { throw new IllegalArgumentException("Service name must not be blank"); } if (Utils.isBlank(resourceType)) { throw new IllegalArgumentException("Resource type must not be blank"); } return "SERVICE_" + Utils.toUpperSnakeCase(serviceName) + "_" + resourceType; }
[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred: org. junit. Assert. assertEquals ( expected, serviceName )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( the expected, serviceName )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( expected, testName )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( input, expected )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( default, serviceName )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( STRING_2, expected )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit. Assert. assertEquals ( expected, serviceName ) type

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit, expected, serviceName )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org. junit, expected )

[*] target: assertEquals(expected, OnboardingAppStackListener.serviceNameResourceKey(serviceName, resourceType))
[-] pred:  org
************************************
************************************
[+] input: Exception { ArgumentCaptor<PutObjectRequest> putObjectRequestArgumentCaptor = ArgumentCaptor.forClass(PutObjectRequest.class); ArgumentCaptor<RequestBody> requestBodyArgumentCaptor = ArgumentCaptor.forClass(RequestBody.class);  SaaSBoostArtifactsBucket testBucket = SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.US_EAST_1); Path localPathToTestPut = Path.of(this.getClass().getClassLoader().getResource("template.yaml").toURI()); Path exampleRemotePath = Path.of("dir", "dir2"); testBucket.putFile(mockS3, localPathToTestPut, exampleRemotePath); Mockito.verify(mockS3).putObject(putObjectRequestArgumentCaptor.capture(), requestBodyArgumentCaptor.capture()); assertEquals("Put object to the wrong bucket.", testBucket.getBucketName(), putObjectRequestArgumentCaptor.getValue().bucket()); "<AssertPlaceHolder>"; assertEquals("Put different length object to remote location. Wrong file?", localPathToTestPut.toFile().length(), requestBodyArgumentCaptor.getValue().contentLength()); }
toString() { return getBucketName(); }
[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred: org. junit. Assert. assertEquals ( localPathToTestPut, exampleRemotePath. toString ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut. toString ( ), exampleRemotePath. toString ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut. toString()); ( ), exampleRemotePath. toString ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertTrue ( exampleRemotePath. toString ( ). contains ( exampleRemotePath. toString ( ) ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertTrue ( localPathToTestPut. toString ( ). contains ( exampleRemotePath ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut. toStringAttribute ( ), exampleRemotePath. toString ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut, exampleRemotePath. toString()); ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertTrue ( exampleRemotePath. toString ( ). contains ( exampleRemotePath ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut, exampleRemotePath. toStringAttribute ( ) )

[*] target: assertEquals("Put object to the wrong location.", exampleRemotePath.toString().replace('\', '/'), putObjectRequestArgumentCaptor.getValue().key())
[-] pred:  org. junit. Assert. assertEquals ( localPathToTestPut, exampleRemotePath. toStringUnsorted ( ) )
************************************
************************************
[+] input: createBucketLocationConstraintTest() { ArgumentCaptor<CreateBucketRequest> createBucketRequestArgumentCaptor = ArgumentCaptor.forClass(CreateBucketRequest.class);  SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.US_EAST_1); Mockito.verify(mockS3).createBucket(createBucketRequestArgumentCaptor.capture()); // expected, actual CreateBucketRequest capturedCreateBucketRequest = createBucketRequestArgumentCaptor.getValue(); if (capturedCreateBucketRequest.createBucketConfiguration() != null) { // if no createBucketConfiguration is passed in the createBucketRequest, // there is implicitly no location constraint (because constraint must be part of the config) assertNull("No location constraint should be provided for buckets in us-east-1", createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint()); } Mockito.reset(mockS3);  SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.US_WEST_2); Mockito.verify(mockS3).createBucket(createBucketRequestArgumentCaptor.capture()); "<AssertPlaceHolder>"; }
createS3ArtifactBucket(S3Client s3, String envName, Region awsRegion) { String s3ArtifactBucketName = "sb-" + envName + "-artifacts-" + Utils.randomString(12, "[^a-z0-9]"); LOGGER.info("Creating S3 Artifact Bucket {}", s3ArtifactBucketName); try { CreateBucketRequest.Builder createBucketRequestBuilder = CreateBucketRequest.builder(); // LocationConstraint is not valid in US_EAST_1 // https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/BucketLocationConstraint.html if (!(awsRegion.equals(Region.AWS_GLOBAL) || awsRegion.equals(Region.US_EAST_1))) { createBucketRequestBuilder.createBucketConfiguration(config -> config.locationConstraint(BucketLocationConstraint.fromValue(awsRegion.id()))); } createBucketRequestBuilder.bucket(s3ArtifactBucketName); s3.createBucket(createBucketRequestBuilder.build()); s3.putBucketNotificationConfiguration(PutBucketNotificationConfigurationRequest.builder() .bucket(s3ArtifactBucketName) .notificationConfiguration(NotificationConfiguration.builder() .eventBridgeConfiguration(EventBridgeConfiguration.builder().build()) .build()) .build()); s3.putBucketEncryption(PutBucketEncryptionRequest.builder() .bucket(s3ArtifactBucketName) .serverSideEncryptionConfiguration(ServerSideEncryptionConfiguration.builder() .rules(ServerSideEncryptionRule.builder() .applyServerSideEncryptionByDefault(ServerSideEncryptionByDefault.builder() .sseAlgorithm(ServerSideEncryption.AES256) .build()) .build()) .build()) .build()); final String partitionName = awsRegion.metadata().partition().id(); s3.putBucketPolicy(PutBucketPolicyRequest.builder() .policy("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:" + partitionName + ":s3:::" + s3ArtifactBucketName + "/*",\n" + "                "arn:" + partitionName + ":s3:::" + s3ArtifactBucketName + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}") .bucket(s3ArtifactBucketName) .build()); } catch (SdkServiceException s3Error) { LOGGER.error("s3 error {}", s3Error.getMessage()); LOGGER.error(getFullStackTrace(s3Error)); throw s3Error; } return new SaaSBoostArtifactsBucket(s3ArtifactBucketName, awsRegion); }
[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred: org. junit. Assert. assertThat ( capturedCreateBucketRequest, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());JobExecution ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());JobExecution ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());OnRemoteWorker ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());Line ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());Executions ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest.());Executions ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  org. junit. Assert. assertThat ( capturedCreateBucketRequest, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected, actual CreateBucketRequest ) ) )

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  createBucketRequestArgumentCaptor

[*] target: assertEquals("Location constraint should be provided for buckets in us-west-2", BucketLocationConstraint.US_WEST_2, createBucketRequestArgumentCaptor.getValue().createBucketConfiguration().locationConstraint())
[-] pred:  constructs an example from a
************************************
************************************
[+] input: createBucketServerSideEncryptionTest() { ArgumentCaptor<PutBucketEncryptionRequest> putBucketEncryptionRequestArgumentCaptor = ArgumentCaptor.forClass(PutBucketEncryptionRequest.class); SaaSBoostArtifactsBucket createdBucket = SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.US_EAST_1); Mockito.verify(mockS3).putBucketEncryption(putBucketEncryptionRequestArgumentCaptor.capture()); PutBucketEncryptionRequest capturedPutBucketEncryptionRequest = putBucketEncryptionRequestArgumentCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(capturedPutBucketEncryptionRequest.serverSideEncryptionConfiguration()); assertNotNull(capturedPutBucketEncryptionRequest.serverSideEncryptionConfiguration().rules()); assertTrue(capturedPutBucketEncryptionRequest.serverSideEncryptionConfiguration().rules().contains( ServerSideEncryptionRule.builder().applyServerSideEncryptionByDefault( ServerSideEncryptionByDefault.builder().sseAlgorithm(ServerSideEncryption.AES256).build() ).build())); }
getBucketName() { return bucketName; }
[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred: org. junit. Assert. assertNotNull ( capturedPutBucketEncryptionRequest )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertTrue ( capturedPutBucketEncryptionRequest.());URL ( ) )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketEncryptionRequest )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertTrue ( createdBucket.());URL ( capturedPutBucketEncryptionRequest ) )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertTrue ( capturedPutBucketEncryptionRequest.());Geliencing )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertTrue ( capturedPutBucketEncryptionRequest.());GeligatedBucket )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertTrue ( capturedPutBucketEncryptionRequest.());Geliencing ) )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org. junit. Assert. assertNotNull ( createdBucket )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  )

[*] target: assertEquals("Put encryption to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketEncryptionRequest.bucket())
[-] pred:  org
************************************
************************************
[+] input: createBucketBucketPolicyTest() { ArgumentCaptor<PutBucketPolicyRequest> putBucketPolicyArgumentCaptor = ArgumentCaptor.forClass(PutBucketPolicyRequest.class); SaaSBoostArtifactsBucket createdBucket = SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.US_EAST_1); Mockito.verify(mockS3).putBucketPolicy(putBucketPolicyArgumentCaptor.capture()); PutBucketPolicyRequest capturedPutBucketPolicyRequest = putBucketPolicyArgumentCaptor.getValue(); assertEquals("Put bucket policy to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketPolicyRequest.bucket()); assertNotNull(capturedPutBucketPolicyRequest.policy()); "<AssertPlaceHolder>"; }
getBucketName() { return bucketName; }
[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred: org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName() ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName() )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNamePresent ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameAttribute ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameVo )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameSubscription ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName: )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketobe )
************************************
************************************
[+] input: createBucketBucketPolicyTest_china() { ArgumentCaptor<PutBucketPolicyRequest> putBucketPolicyArgumentCaptor = ArgumentCaptor.forClass(PutBucketPolicyRequest.class); SaaSBoostArtifactsBucket createdBucket = SaaSBoostArtifactsBucket.createS3ArtifactBucket(mockS3, ENV_NAME, Region.CN_NORTHWEST_1); Mockito.verify(mockS3).putBucketPolicy(putBucketPolicyArgumentCaptor.capture()); PutBucketPolicyRequest capturedPutBucketPolicyRequest = putBucketPolicyArgumentCaptor.getValue(); assertEquals("Put bucket policy to the wrong bucket.", createdBucket.getBucketName(), capturedPutBucketPolicyRequest.bucket()); assertNotNull(capturedPutBucketPolicyRequest.policy()); "<AssertPlaceHolder>"; }
getBucketName() { return bucketName; }
[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred: org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName() ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName() )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameAttribute ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNamePresent ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameVo )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketNameSubscription ( ) )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketPolicyRequest. getBucketName: )

[*] target: assertEquals("{\n" + "    "Version": "2012-10-17",\n" + "    "Statement": [\n" + "        {\n" + "            "Sid": "DenyNonHttps",\n" + "            "Effect": "Deny",\n" + "            "Principal": "*",\n" + "            "Action": "s3:*",\n" + "            "Resource": [\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + "/*",\n" + "                "arn:aws-cn:s3:::" + createdBucket.getBucketName() + ""\n" + "            ],\n" + "            "Condition": {\n" + "                "Bool": {\n" + "                    "aws:SecureTransport": "false"\n" + "                }\n" + "            }\n" + "        }\n" + "    ]\n" + "}", capturedPutBucketPolicyRequest.policy())
[-] pred:  org. junit. Assert. assertEquals ( createdBucket, capturedPutBucketobe )
************************************
************************************
[+] input: Exception { // The input map represents the existing CloudFormation parameter values. // These will either be the template defaults, or they will be the parameter // values read from a created stack with the describeStacks call. // We'll pretend that the RequiredStringParameter parameter is newly added // to the template on disk so the user should be prompted for a value Map<String, String> input = new LinkedHashMap<>(); input.put("DefaultStringParameter", "foobar"); input.put("NumericParameter", "1"); // Let's pretend that we overwrote the default the first time around  // Fill up standard input with a response for the Keyboard class System.setIn(new ByteArrayInputStream(("keyboard input" + System.lineSeparator()).getBytes(StandardCharsets.UTF_8)));  Path cloudFormationTemplate = Path.of(this.getClass().getClassLoader().getResource("template.yaml").toURI()); Map<String, String> actual = UpdateWorkflow.getCloudFormationParameterMap(cloudFormationTemplate, input);  Map<String, String> expected = new LinkedHashMap<>(); expected.put("RequiredStringParameter", "keyboard input"); expected.put("DefaultStringParameter", "foobar"); expected.put("NumericParameter", "1");  "<AssertPlaceHolder>"; for (Map.Entry<String, String> entry : expected.entrySet()) { assertEquals(entry.getKey() + " equals " + entry.getValue(), entry.getValue(), actual.get(entry.getKey())); } }
getCloudFormationParameterMap( Path cloudFormationTemplateFile, Map<String, String> stackParamsMap) {  if (!Files.exists(cloudFormationTemplateFile)) { outputMessage("Unable to find file " + cloudFormationTemplateFile.toString()); throw new RuntimeException("Could not find base CloudFormation stack: " + cloudFormationTemplateFile); } // Open CFN template yaml file and prompt for values of params that are not in the existing stack LOGGER.info("Building map of parameters for template " + cloudFormationTemplateFile); Map<String, String> cloudFormationParamMap = new LinkedHashMap<>();  ObjectMapper mapper = new ObjectMapper(new YAMLFactory()); try (InputStream cloudFormationTemplate = Files.newInputStream(cloudFormationTemplateFile)) { LinkedHashMap<String, Object> template = mapper.readValue(cloudFormationTemplate, LinkedHashMap.class); LinkedHashMap<String, Map<String, Object>> parameters = (LinkedHashMap<String, Map<String, Object>>) template.get("Parameters"); for (Map.Entry<String, Map<String, Object>> parameter : parameters.entrySet()) { String parameterKey = parameter.getKey(); LinkedHashMap<String, Object> parameterProperties = (LinkedHashMap<String, Object>) parameter.getValue();  // For each parameter in the template file, set the value to any existing value // otherwise prompt the user to set the value. Object existingParameter = stackParamsMap.get(parameterKey); if (existingParameter != null) { // We're running an update. Start with reusing the current value for this parameter. // The calling code can override this parameter's value before executing update stack. LOGGER.info("Reuse existing value for parameter {} => {}", parameterKey, existingParameter); cloudFormationParamMap.put(parameterKey, stackParamsMap.get(parameterKey)); } else { // This is a new parameter added to the template file on disk. Prompt the user for a value. Object defaultValue = parameterProperties.get("Default"); String parameterType = (String) parameterProperties.get("Type"); System.out.print("Enter a " + parameterType + " value for parameter " + parameterKey); if (defaultValue != null) { // No default value for this property System.out.print(". (Press Enter for '" + defaultValue + "'): "); } else { System.out.print(": "); } String enteredValue = Keyboard.readString(); if (Utils.isEmpty(enteredValue) && defaultValue != null) { cloudFormationParamMap.put(parameterKey, String.valueOf(defaultValue)); LOGGER.info("Using default value for parameter {} => {}", parameterKey, cloudFormationParamMap.get(parameterKey)); } else if (Utils.isEmpty(enteredValue) && defaultValue == null) { cloudFormationParamMap.put(parameterKey, ""); LOGGER.info("Using entered value for parameter {} => {}", parameterKey, cloudFormationParamMap.get(parameterKey)); } else { cloudFormationParamMap.put(parameterKey, enteredValue); LOGGER.info("Using entered value for parameter {} => {}", parameterKey, cloudFormationParamMap.get(parameterKey)); } } } } catch (IOException ioe) { LOGGER.error("Error parsing YAML file from path", ioe); LOGGER.error(Utils.getFullStackTrace(ioe)); throw new RuntimeException(ioe); } return cloudFormationParamMap; }
[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( o, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( xsd, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit ). assertEquals ( expected, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual }

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit_3. assertEquals ( expected, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org. junit, expected, actual )

[*] target: assertEquals("Template has 3 parameters", expected.size(), actual.size())
[-] pred:  org
************************************
************************************
[+] input: testUpdateActionsFromPaths_basic() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.FUNCTIONS) { assertEquals(1, action.getTargets().size()); assertEquals(1, UpdateAction.FUNCTIONS.getTargets().size()); assertTrue(action.getTargets().contains("onboarding-app-stack-listener")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( actualActions. isEmpty ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actual actions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expected actions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actual action )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )s

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions ) in

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org
************************************
************************************
[+] input: testUpdateActionsFromPaths_layersFirst() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.LAYERS, UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml"), Path.of("layers/apigw-helper/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; // the first item in the set iterator should always be LAYERS // (meaning we update layers first) regardless of changedPath ordering assertTrue(actualActions.iterator().next().name().equals("LAYERS")); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions. size ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions. getItems ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions. toString ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions. entrySet ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions. getResult ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actual actions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualEntries )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions
************************************
************************************
[+] input: testUpdateActionsFromPaths_customResourcesPath() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CUSTOM_RESOURCES, UpdateAction.RESOURCES); List<Path> changedPaths = List.of( Path.of("resources/saas-boost.yaml"), Path.of("resources/custom-resources/app-services-macro/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost.yaml")); } if (action == UpdateAction.CUSTOM_RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("app-services-macro")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( actualActions. contains ( expectedActions ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( expectedActions. equals ( actualActions ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( actualActions. isEmpty ( ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( actualActions. equals ( expectedActions ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertTrue ( expectedActions. contains ( actualActions ) )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actual actions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org
************************************
************************************
[+] input: testUpdateActionsFromPaths_newPath() { Path newResource = Path.of("resources/saas-boost-newtemplate.yaml"); createFile(newResource); Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.RESOURCES); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(List.of(newResource)); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost-newtemplate.yaml")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actual actions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expected actions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions and actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions )s

[*] target: assertEquals(expectedActions, actualActions)
[-] pred:  org. junit. Assert. assertEquals ( expectedActions, actualActions ) in
************************************
************************************
[+] input: Exception { ApiRequest request = ApiRequest.builder() .resource("settings?setting=SAAS_BOOST_STACK&setting=DOMAIN_NAME") .method("GET") .build();  String protocol = "https"; String host = "xxxxxxxxxx.execute-api.us-east-2.amazonaws.com"; String stage = "v1";  URL url = new URL(protocol, host, stage + "/" + request.getResource());  SdkHttpFullRequest.Builder sdkRequestBuilder = SdkHttpFullRequest.builder() .protocol(protocol) .host(host) .encodedPath(url.getPath()) .method(request.getMethod());  ApiGatewayHelper.appendQueryParams(sdkRequestBuilder, url);  Map<String, List<String>> actual = sdkRequestBuilder.rawQueryParameters(); "<AssertPlaceHolder>"; assertEquals("2 query params with same name", 2, actual.get("setting").size()); assertTrue("query parameter is named", actual.containsKey("setting")); assertTrue("multivalue param", actual.get("setting").contains("SAAS_BOOST_STACK")); assertTrue("multivalue param", actual.get("setting").contains("DOMAIN_NAME")); }
appendQueryParams(SdkHttpFullRequest.Builder sdkRequestBuilder, URL url) throws URISyntaxException { List<NameValuePair> queryParams = URLEncodedUtils.parse(url.toURI(), StandardCharsets.UTF_8); if (queryParams != null) { for (NameValuePair queryParam : queryParams) { sdkRequestBuilder.appendRawQueryParameter(queryParam.getName(), queryParam.getValue()); } } }
[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 0, actual. size ( ) )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 1 ), actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Object ( ), actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( request, actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( 15, actual. size ( ) )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertNotNull ( actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( build ( ), actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit. Assert. assertEquals ( null, actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org. junit, actual )

[*] target: assertEquals("2 query params with same name", 1, actual.size())
[-] pred:  org
************************************
************************************
[+] input: testDeserializeNoResourceProperties() { String snsMessage = "StackId='arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17'\n" + "Timestamp='2022-01-10T22:23:41.278Z'\n" + "EventId='f700b430-7263-11ec-b90e-0adccbefb08b'\n" + "LogicalResourceId='sb-env-core-D8CPRXEBJBCV'\n" + "Namespace='444455556666'\n" + "PhysicalResourceId='arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17'\n" + "PrincipalId='abcdef01234567890'\n" + "ResourceProperties='null'\n" + "ResourceStatus='CREATE_COMPLETE'\n" + "ResourceStatusReason=''\n" + "ResourceType='AWS::CloudFormation::Stack'\n" + "StackName='sb-env-core-D8CPRXEBJBCV'\n" + "ClientRequestToken='null'\n";  CloudFormationEvent event = CloudFormationEventDeserializer.deserialize(snsMessage); "<AssertPlaceHolder>"; assertEquals("2022-01-10T22:23:41.278Z", event.getTimestamp()); assertEquals("f700b430-7263-11ec-b90e-0adccbefb08b", event.getEventId()); assertEquals("sb-env-core-D8CPRXEBJBCV", event.getLogicalResourceId()); assertEquals("444455556666", event.getNamespace()); assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getPhysicalResourceId()); assertEquals("abcdef01234567890", event.getPrincipalId()); assertEquals("CREATE_COMPLETE", event.getResourceStatus()); assertEquals("", event.getResourceStatusReason()); assertEquals("AWS::CloudFormation::Stack", event.getResourceType()); assertEquals("sb-env-core-D8CPRXEBJBCV", event.getStackName()); assertNull(event.getClientRequestToken()); assertNotNull(event.getResourceProperties()); assertEquals(0, event.getResourceProperties().size()); }
deserialize(String snsMessage) { // Raw SNS message values are escaped JSON strings with \n instead of newlines and // single quotes instead of doubles around values CloudFormationEvent.Builder builder = CloudFormationEvent.builder(); for (String keyValue : snsMessage.split("\\n")) { // Each line will look like Key='Value' e.g. ResourceStatus='CREATE_COMPLETE' // We'll be reckless and use substring instead of a regex to break it apart. String key = keyValue.substring(0, keyValue.indexOf("=")); String value = keyValue.substring(keyValue.indexOf("=") + 2, keyValue.length() - 1); //LOGGER.info(key + " => " + value); if ("StackId".equals(key)) { builder.stackId(nullIf(value)); } else if ("Timestamp".equals(key)) { builder.timestamp(nullIf(value)); } else if ("EventId".equals(key)) { builder.eventId(nullIf(value)); } else if ("LogicalResourceId".equals(key)) { builder.logicalResourceId(nullIf(value)); } else if ("Namespace".equals(key)) { builder.namespace(nullIf(value)); } else if ("PhysicalResourceId".equals(key)) { builder.physicalResourceId(nullIf(value)); } else if ("PrincipalId".equals(key)) { builder.principalId(value); } else if ("ResourceProperties".equals(key)) { if (!"null".equals(value) && Utils.isNotBlank(value)) { LinkedHashMap<String, Object> resourceProperties = Utils.fromJson(value, LinkedHashMap.class); if (resourceProperties == null) { LOGGER.error("Can't deserialize JSON {}", value); } builder.resourceProperties(resourceProperties); } } else if ("ResourceStatus".equals(key)) { builder.resourceStatus(nullIf(value)); } else if ("ResourceStatusReason".equals(key)) { builder.resourceStatusReason(nullIf(value)); } else if ("ResourceType".equals(key)) { builder.resourceType(nullIf(value)); } else if ("StackName".equals(key)) { builder.stackName(nullIf(value)); } else if ("ClientRequestToken".equals(key)) { builder.clientRequestToken(nullIf(value)); } } return builder.build(); }
[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred: org. junit. Assert. assertNotNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getTitle ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getMessage ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, event. getMessage ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getCode ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getName ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertNotNull ( event. getMessage ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertNotNull ( event. getClass ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-east-1:444455556666:stack/sb-env-core-D8CPRXEBJBCV/a80dacc0-7263-11ec-8a77-026f030e7a17", event.getStackId())
[-] pred:  org. junit. Assert. assertNotNull ( event )
************************************
************************************
[+] input: testDeserializeResourcePropertiesJson() { String snsMessage = "StackId='arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715'\n" + "Timestamp='2022-03-08T23:16:42.901Z'\n" + "EventId='ServiceDiscoveryNamespace-CREATE_IN_PROGRESS-2022-03-08T23:16:42.901Z'\n" + "LogicalResourceId='ServiceDiscoveryNamespace'\n" + "Namespace='444455556666'\n" + "ResourceProperties='{"Vpc":"vpc-057dbff238eb056ed","Name":"local"}'\n" + "ResourceStatus='CREATE_IN_PROGRESS'\n" + "ResourceStatusReason=''\n" + "ResourceType='AWS::ServiceDiscovery::PrivateDnsNamespace'\n" + "StackName='sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5'\n" + "ClientRequestToken='null'\n";  CloudFormationEvent event = CloudFormationEventDeserializer.deserialize(snsMessage); "<AssertPlaceHolder>"; assertEquals("2022-03-08T23:16:42.901Z", event.getTimestamp()); assertEquals("ServiceDiscoveryNamespace-CREATE_IN_PROGRESS-2022-03-08T23:16:42.901Z", event.getEventId()); assertEquals("ServiceDiscoveryNamespace", event.getLogicalResourceId()); assertEquals("444455556666", event.getNamespace()); assertEquals("CREATE_IN_PROGRESS", event.getResourceStatus()); assertEquals("", event.getResourceStatusReason()); assertEquals("AWS::ServiceDiscovery::PrivateDnsNamespace", event.getResourceType()); assertEquals("sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5", event.getStackName()); assertNull(event.getClientRequestToken()); assertNotNull(event.getResourceProperties()); assertEquals(2, event.getResourceProperties().size()); assertTrue(event.getResourceProperties().containsKey("Vpc")); assertEquals("vpc-057dbff238eb056ed", event.getResourceProperties().get("Vpc")); assertTrue(event.getResourceProperties().containsKey("Name")); assertEquals("local", event.getResourceProperties().get("Name")); }
deserialize(String snsMessage) { // Raw SNS message values are escaped JSON strings with \n instead of newlines and // single quotes instead of doubles around values CloudFormationEvent.Builder builder = CloudFormationEvent.builder(); for (String keyValue : snsMessage.split("\\n")) { // Each line will look like Key='Value' e.g. ResourceStatus='CREATE_COMPLETE' // We'll be reckless and use substring instead of a regex to break it apart. String key = keyValue.substring(0, keyValue.indexOf("=")); String value = keyValue.substring(keyValue.indexOf("=") + 2, keyValue.length() - 1); //LOGGER.info(key + " => " + value); if ("StackId".equals(key)) { builder.stackId(nullIf(value)); } else if ("Timestamp".equals(key)) { builder.timestamp(nullIf(value)); } else if ("EventId".equals(key)) { builder.eventId(nullIf(value)); } else if ("LogicalResourceId".equals(key)) { builder.logicalResourceId(nullIf(value)); } else if ("Namespace".equals(key)) { builder.namespace(nullIf(value)); } else if ("PhysicalResourceId".equals(key)) { builder.physicalResourceId(nullIf(value)); } else if ("PrincipalId".equals(key)) { builder.principalId(value); } else if ("ResourceProperties".equals(key)) { if (!"null".equals(value) && Utils.isNotBlank(value)) { LinkedHashMap<String, Object> resourceProperties = Utils.fromJson(value, LinkedHashMap.class); if (resourceProperties == null) { LOGGER.error("Can't deserialize JSON {}", value); } builder.resourceProperties(resourceProperties); } } else if ("ResourceStatus".equals(key)) { builder.resourceStatus(nullIf(value)); } else if ("ResourceStatusReason".equals(key)) { builder.resourceStatusReason(nullIf(value)); } else if ("ResourceType".equals(key)) { builder.resourceType(nullIf(value)); } else if ("StackName".equals(key)) { builder.stackName(nullIf(value)); } else if ("ClientRequestToken".equals(key)) { builder.clientRequestToken(nullIf(value)); } } return builder.build(); }
[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred: org. junit. Assert. assertNotNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, event. getTitle ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getTitle ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, event. getMessage ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( """", event. getName ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, event. getClass ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit "org. junit. Assert. assertNotNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit, org. Assert. assertNotNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertNotNull ( event )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-internal-106JUDH6M0O5/cb888e50-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit ). assertNotNull ( event )
************************************
************************************
[+] input: testDeserializeResourcePropertiesNestedJson() { String snsMessage = "StackId='arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715'\n" + "Timestamp='2022-03-08T23:17:33.184Z'\n" + "EventId='CodePipeline-CREATE_COMPLETE-2022-03-08T23:17:33.184Z'\n" + "LogicalResourceId='CodePipeline'\n" + "Namespace='444455556666'\n" + "PhysicalResourceId='sb-multi-tenant-34f463df-feature'\n" + "ResourceProperties='{"ArtifactStore":{"Type":"S3","Location":"sb-multi-codepipelinebucket-1hnsl5p5az131"},"Stages":[{"Actions":[{"ActionTypeId":{"Owner":"AWS","Category":"Source","Version":"1","Provider":"S3"},"Configuration":{"PollForSourceChanges":"false","S3Bucket":"sb-multi-codepipelinebucket-1hnsl5p5az131","S3ObjectKey":"34f463df-67db-489b-b0bf-ed7ca70e3ba4/sb-multi-tenant-34f463df-feature"},"OutputArtifacts":[{"Name":"imgdef"}],"Name":"SourceAction"}],"Name":"Source"},{"Actions":[{"ActionTypeId":{"Owner":"AWS","Category":"Invoke","Version":"1","Provider":"Lambda"},"Configuration":{"FunctionName":"sb-multi-update-ecs","UserParameters":"{\\"cluster\\":\\"sb-multi-tenant-34f463df\\",\\"service\\":\\"feature\\",\\"desiredCount\\":1}"},"RunOrder":"1","Name":"PreDeployAction"},{"ActionTypeId":{"Owner":"AWS","Category":"Deploy","Version":"1","Provider":"ECS"},"Configuration":{"ServiceName":"feature","FileName":"imagedefinitions.json","ClusterName":"sb-multi-tenant-34f463df"},"InputArtifacts":[{"Name":"imgdef"}],"RunOrder":"2","Name":"DeployAction"}],"Name":"Deploy"}],"RestartExecutionOnUpdate":"false","RoleArn":"arn:aws:iam::444455556666:role/sb-multi-tenant-pipeline-role-us-west-2","Tags":[{"Value":"34f463df-67db-489b-b0bf-ed7ca70e3ba4","Key":"Tenant"},{"Value":"sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y","Key":"Stack"}],"Name":"sb-multi-tenant-34f463df-feature"}'\n" + "ResourceStatus='CREATE_COMPLETE'\n" + "ResourceStatusReason=''\n" + "ResourceType='AWS::CodePipeline::Pipeline'\n" + "StackName='sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y'\n" + "ClientRequestToken='null'\n";  CloudFormationEvent event = CloudFormationEventDeserializer.deserialize(snsMessage); "<AssertPlaceHolder>"; assertEquals("2022-03-08T23:17:33.184Z", event.getTimestamp()); assertEquals("CodePipeline-CREATE_COMPLETE-2022-03-08T23:17:33.184Z", event.getEventId()); assertEquals("CodePipeline", event.getLogicalResourceId()); assertEquals("444455556666", event.getNamespace()); assertEquals("CREATE_COMPLETE", event.getResourceStatus()); assertEquals("", event.getResourceStatusReason()); assertEquals("AWS::CodePipeline::Pipeline", event.getResourceType()); assertEquals("sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y", event.getStackName()); assertNull(event.getClientRequestToken()); assertNotNull(event.getResourceProperties()); assertEquals(6, event.getResourceProperties().size()); assertTrue(event.getResourceProperties().containsKey("ArtifactStore")); assertTrue(event.getResourceProperties().containsKey("Stages")); assertTrue(event.getResourceProperties().containsKey("Name")); assertTrue(event.getResourceProperties().containsKey("RestartExecutionOnUpdate")); assertTrue(event.getResourceProperties().containsKey("RoleArn")); assertTrue(event.getResourceProperties().containsKey("Tags"));  List<Object> stages = (List<Object>) event.getResourceProperties().get("Stages"); Map<String, Object> deployStage = (Map<String, Object>) stages.get(1); List<Object> actions = (List<Object>) deployStage.get("Actions"); for (Object a : actions) { Map<String, Object> action = (Map<String, Object>) a; Map<String, Object> configuration = (Map<String, Object>) action.get("Configuration"); if (configuration.containsKey("UserParameters")) { String userParameters = (String) configuration.get("UserParameters"); assertNotNull(Utils.fromJson(userParameters, LinkedHashMap.class)); } } }
deserialize(String snsMessage) { // Raw SNS message values are escaped JSON strings with \n instead of newlines and // single quotes instead of doubles around values CloudFormationEvent.Builder builder = CloudFormationEvent.builder(); for (String keyValue : snsMessage.split("\\n")) { // Each line will look like Key='Value' e.g. ResourceStatus='CREATE_COMPLETE' // We'll be reckless and use substring instead of a regex to break it apart. String key = keyValue.substring(0, keyValue.indexOf("=")); String value = keyValue.substring(keyValue.indexOf("=") + 2, keyValue.length() - 1); //LOGGER.info(key + " => " + value); if ("StackId".equals(key)) { builder.stackId(nullIf(value)); } else if ("Timestamp".equals(key)) { builder.timestamp(nullIf(value)); } else if ("EventId".equals(key)) { builder.eventId(nullIf(value)); } else if ("LogicalResourceId".equals(key)) { builder.logicalResourceId(nullIf(value)); } else if ("Namespace".equals(key)) { builder.namespace(nullIf(value)); } else if ("PhysicalResourceId".equals(key)) { builder.physicalResourceId(nullIf(value)); } else if ("PrincipalId".equals(key)) { builder.principalId(value); } else if ("ResourceProperties".equals(key)) { if (!"null".equals(value) && Utils.isNotBlank(value)) { LinkedHashMap<String, Object> resourceProperties = Utils.fromJson(value, LinkedHashMap.class); if (resourceProperties == null) { LOGGER.error("Can't deserialize JSON {}", value); } builder.resourceProperties(resourceProperties); } } else if ("ResourceStatus".equals(key)) { builder.resourceStatus(nullIf(value)); } else if ("ResourceStatusReason".equals(key)) { builder.resourceStatusReason(nullIf(value)); } else if ("ResourceType".equals(key)) { builder.resourceType(nullIf(value)); } else if ("StackName".equals(key)) { builder.stackName(nullIf(value)); } else if ("ClientRequestToken".equals(key)) { builder.clientRequestToken(nullIf(value)); } } return builder.build(); }
[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred: org. junit. Assert. assertEquals ( snsMessage, certificate. getRoutes ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getSolverAbsoluteAccuracy ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getMergeResource ( snsMessage ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getMergeFeature ( snsMessage ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getModified ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getDeserializeResourcePropertiesNestedJson ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getExit ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, figure. getRoutes ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, certificate. getMapByResourceFPosition ( ) )

[*] target: assertEquals("arn:aws:cloudformation:us-west-2:444455556666:stack/sb-multi-tenant-34f463df-app-feature-6NIE29OV500Y/ca8ffd80-9f35-11ec-84c4-06699cbc5715", event.getStackId())
[-] pred:  org. junit. Assert. assertEquals ( snsMessage, uri )
************************************
************************************
[+] input: testFromProperties_basic() { GitVersionInfo info = GitVersionInfo.fromProperties(properties); assertNotNull(info); assertEquals(VALID_TAG, info.getTag()); assertEquals(VALID_COMMIT, info.getCommit()); "<AssertPlaceHolder>"; }
getDescribe() { return describe; }
[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred: org. junit. Assert. assertTrue ( info. getDescribe() ( ) )

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org. junit. Assert. assertTrue ( info. getDescribe() ) )

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org. junit. Assert. assertEquals ( 2, info. getDescribe() ( ) )

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org. junit. Assert. assertTrue ( info. getDescribe()()); ) )

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org. junit. Assert. assertTrue ( info. getDescribe() )

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org. junit. Assert. assertTrue ( info. getDescribe()

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  getDescribe() ) { }

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  getDescribe() object

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  getDescribe()

[*] target: assertEquals(VALID_DESC, info.getDescribe())
[-] pred:  org
************************************
************************************
[+] input: testToSnakeCase() { assertNull(Utils.toSnakeCase(null)); assertEquals("", Utils.toSnakeCase("")); assertEquals("  ", Utils.toSnakeCase("  ")); assertEquals("a", Utils.toSnakeCase("a")); assertEquals("a", Utils.toSnakeCase("A")); assertEquals("?", Utils.toSnakeCase("?")); assertEquals("snake_case", Utils.toSnakeCase("snake_case")); assertEquals("camel_case", Utils.toSnakeCase("camelCase")); assertEquals("pascal_case", Utils.toSnakeCase("PascalCase")); assertEquals("snake_case", Utils.toSnakeCase("Snake Case")); assertEquals("foo_bar", Utils.toSnakeCase("foo baR")); assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBaz")); "<AssertPlaceHolder>"; }
toSnakeCase(String str) { if (str == null) { return null; } if (str.isBlank()) { return str; } if (str.length() == 1) { return str.toLowerCase(); } StringBuilder buffer = new StringBuilder(); boolean skip = false; char[] chars = str.toCharArray(); for (int ch = 0; ch < chars.length; ch++) { char character = chars[ch]; if (ch == 0) { buffer.append(Character.toLowerCase(character)); continue; } if ('_' == character || '-' == character || ' ' == character) { buffer.append('_'); skip = true; continue; } if (Character.isLowerCase(character) || Character.isDigit(character)) { buffer.append(character); continue; } char previous = chars[(ch - 1)]; if (!Character.isLetter(previous) || Character.isLowerCase(previous)) { if (skip) { skip = false; } else { buffer.append('_'); } buffer.append(Character.toLowerCase(character)); continue; } if (ch < (chars.length - 1)) { char last = chars[(ch + 1)]; if (Character.isLowerCase(last)) { if (skip) { skip = false; } else { buffer.append('_'); } buffer.append(Character.toLowerCase(character)); continue; } } buffer.append(Character.toLowerCase(character)); } return buffer.toString(); }
[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred: org. junit. Assert. assertEquals ( null, org. apache. commons. lang3. StringUtils. toSnakeCase ( null ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( null, org. mozilla. apache. commons. lang3. StringUtils. toSnakeCase ( null ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( 3, org. apache. commons. lang3. StringUtils. toSnakeCase ( null ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( 3, org. apache. commons. lang. StringUtils. toSnakeCase ( null ). size ( ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( null, org. apache. commons. lang. StringUtils. toSnakeCase ( null ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( null, org. apache. commons. lang3. StringUtils. toSnakeCase ( ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( 3, org. apache. commons. lang. StringUtils. toSnakeCase ( ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( 3, org. apache. commons. lang. StringUtils. toSnakeCase ( null ) )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org. junit. Assert. assertEquals ( 3, 3 )

[*] target: assertEquals("foo_bar_baz", Utils.toSnakeCase("fooBarBAZ"))
[-] pred:  org
************************************
************************************
[+] input: testResourceName() { String serviceName = "foo"; String expected = "foo"; String actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo"; expected = "Foo"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo_Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo-Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); "<AssertPlaceHolder>"; }
ecrResourceName(String serviceName) { if (Utils.isBlank(serviceName)) { throw new IllegalArgumentException("service name cannot be blank"); } return cloudFormationResourceName(serviceName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( expected. trim ( ), actual. trim ( ) )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( ecrResourceName(d, expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( expected. equals ( actual ), true )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( expected. equals ( actual ), expected )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( STRING_1, expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit, expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org
************************************
************************************
[+] input: Exception { try (InputStream json = Files.newInputStream(Path.of(this.getClass().getClassLoader().getResource("template.json").toURI()))) { LinkedHashMap<String, Object> template = Utils.fromJson(json, LinkedHashMap.class);  ApplicationServicesMacro macro = new ApplicationServicesMacro();  // Blank ApplicationServices parameter should return the same template Map<String, Object> response = macro.handleRequest(buildEvent(template), null); assertTrue(response.containsKey("fragment")); LinkedHashMap<String, Object> modifiedTemplate = (LinkedHashMap<String, Object>) response.get("fragment");  assertEquals("Size unequal", template.size(), modifiedTemplate.size()); for (Map.Entry<String, Object> entry : template.entrySet()) { assertEquals("Value mismatch for '" + entry.getKey() + "'", template.get(entry.getKey()), modifiedTemplate.get(entry.getKey())); }  // No ApplicationServices parameter should return failure Map<String, Object> applicationServices = (Map<String, Object>) ((LinkedHashMap<String, Object>) template.get("Parameters")).get("ApplicationServices"); ((LinkedHashMap<String, Object>) template.get("Parameters")).remove("ApplicationServices"); response = macro.handleRequest(buildEvent(template), null); assertEquals("No ApplicationServices parameter is an error", "FAILURE", response.get("status"));  // List of ApplicationServices should return new resources in the fragment applicationServices.put("Default", "foo, Bar,baz Oole"); ((LinkedHashMap<String, Object>) template.get("Parameters")).put("ApplicationServices", applicationServices); response = macro.handleRequest(buildEvent(template), null); "<AssertPlaceHolder>"; modifiedTemplate = (LinkedHashMap<String, Object>) response.get("fragment"); LinkedHashMap<String, Object> resources = (LinkedHashMap<String, Object>) modifiedTemplate.get("Resources"); assertEquals(9, resources.size()); assertTrue(resources.containsKey("foo")); assertTrue(resources.containsKey("ImageEventRulefoo")); assertTrue(resources.containsKey("ImageEventPermissionfoo")); assertTrue(resources.containsKey("Bar")); assertTrue(resources.containsKey("ImageEventRuleBar")); assertTrue(resources.containsKey("ImageEventPermissionBar")); assertTrue(resources.containsKey("bazOole")); assertTrue(resources.containsKey("ImageEventRulebazOole")); assertTrue(resources.containsKey("ImageEventPermissionbazOole"));  // There should be a single tag for Name and it should have the non-modified application service name // for its Value List<Map<String, Object>> tags = (List<Map<String, Object>>) ((LinkedHashMap<String, Object>) ((LinkedHashMap<String, Object>) resources.get("bazOole")).get("Properties")).get("Tags"); assertEquals(1, tags.size()); assertEquals("baz Oole", tags.get(0).get("Value")); } }
handleRequest(Map<String, Object> event, Context context) { Utils.logRequestEvent(event);  Map<String, Object> response = new HashMap<>(); response.put(REQUEST_ID, event.get(REQUEST_ID)); response.put(STATUS, FAILURE);  Map<String, Object> templateParameters = (Map<String, Object>) event.get(TEMPLATE_PARAMETERS); Map<String, Object> template = (Map<String, Object>) event.get(FRAGMENT);  String ecrError = updateTemplateForEcr(templateParameters, template); if (ecrError != null) { LOGGER.error("Encountered error updating template for ECR repositories: {}"); response.put(ERROR_MSG, ecrError); return response; } LOGGER.info("Successfully altered template for ECR repositories");  String extensionsError = updateTemplateForPooledExtensions(templateParameters, template); if (extensionsError != null) { LOGGER.error("Encountered error updating template for pooled extensions: {}"); response.put(ERROR_MSG, extensionsError); return response; } LOGGER.info("Successfully altered template for extensions");  response.put(FRAGMENT, template); response.put(STATUS, SUCCESS); return response; }
[*] target: assertTrue(response.containsKey("fragment"))
[-] pred: org. junit. Assert. assertEquals ( response. get ( 0 ), url )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. get ( 0 ), applicationServices )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. get ( 0 ), response )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. getStatus ( ), 200 )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response, applicationServices )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. size ( ), 0 )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. METHOD_8 ( ), 200 )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit. Assert. assertEquals ( response. getStatusCode ( ), 200 )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org. junit, response )

[*] target: assertTrue(response.containsKey("fragment"))
[-] pred:  org
************************************
************************************
[+] input: getOnboardingId_basic() { final ArgumentCaptor<ScanRequest> scanCaptor = ArgumentCaptor.forClass(ScanRequest.class); final AttributeValue onboardingId = AttributeValue.builder().s("onb-123-456").build(); final AttributeValue tenantIdAttributeValue = AttributeValue.builder().s(TENANT_ID).build(); doReturn(ScanResponse.builder().items(List.of(Map.of("id", onboardingId))).build()) .when(mockDdb).scan(scanCaptor.capture()); AttributeValue foundOnboardingId = testLock.currentOnboardingId(TEST_CONTEXT); assertEquals(onboardingId, foundOnboardingId); assertTrue("scan for onboarding ID should include the tenant id passed in request context", scanCaptor.getValue().expressionAttributeValues().values().contains(tenantIdAttributeValue));  doReturn(ScanResponse.builder().build()).when(mockDdb).scan(any(ScanRequest.class)); // assert that we cache onboardingId, since it should not change for the lifetime of the lambda "<AssertPlaceHolder>"; verify(mockDdb, times(1)).scan(any(ScanRequest.class)); }
currentOnboardingId(RequestContext requestContext) { if (onboardingId == null) { try { ScanRequest scanRequest = ScanRequest.builder() .tableName(requestContext.onboardingDdbTable) .filterExpression("tenant_id = :tenantid") .expressionAttributeValues((Map<String, AttributeValue>) Map.of( ":tenantid", AttributeValue.builder().s(requestContext.tenantId).build())) .build(); LOGGER.debug("sending scan with ScanRequest {}", scanRequest); ScanResponse scanResponse = ddb.scan(ScanRequest.builder() .tableName(requestContext.onboardingDdbTable) .filterExpression("tenant_id = :tenantid") .expressionAttributeValues((Map<String, AttributeValue>) Map.of( ":tenantid", AttributeValue.builder().s(requestContext.tenantId).build())) .build()); this.onboardingId = scanResponse.items().get(0).get("id"); } catch (DynamoDbException ddbe) { LOGGER.error("Error trying to scan for current onboarding id: {}", ddbe.getMessage()); LOGGER.error(Utils.getFullStackTrace(ddbe)); throw new RuntimeException(ddbe); } } return this.onboardingId; }
[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred: org. junit. Assert. assertThat ( foundOnboardingId, org. hamcrest. CoreMatchers. is ( onboardingId ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertEquals ( onboardingId, foundOnboardingId )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertThat ( foundOnboardingId, org. hamcrest. CoreMatchers. is ( tenantIdAttributeValue ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertThat ( foundOnboardingId, org. hamcrest. CoreMatchers. is ( throughDS ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertThat ( foundOnboardingId, org. hamcrest. CoreMatchers. is ( fromboardingId ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertTrue ( foundOnboardingId. currentOnboardingId ( impact impact ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertTrue ( foundOnboardingId. contains ( onboardingId ) )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertEquals ( fromboardingId, foundOnboardingId )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org. junit. Assert. assertEquals ( throughboardingId, foundOnboardingId )

[*] target: assertEquals(onboardingId, testLock.currentOnboardingId(TEST_CONTEXT))
[-] pred:  org
************************************
************************************
[+] input: tryLockUnlock_basic() { final AttributeValue onboardingId = AttributeValue.builder().s(ONBOARDING_ID).build(); doReturn(ScanResponse.builder().items(List.of(Map.of("id", onboardingId))).build()) .when(mockDdb).scan(any(ScanRequest.class));  final ArgumentCaptor<UpdateItemRequest> updateCaptor = ArgumentCaptor.forClass(UpdateItemRequest.class); doReturn(UpdateItemResponse.builder().build()).when(mockDdb).updateItem(updateCaptor.capture());  boolean success = testLock.tryLockUnlock(TEST_CONTEXT, true); UpdateItemRequest actualRequest = updateCaptor.getValue(); assertEquals(onboardingId, actualRequest.key().get("id")); assertEquals("ecs_cluster_locked = :lock_expected", actualRequest.conditionExpression()); assertEquals("SET ecs_cluster_locked = :new_lock", actualRequest.updateExpression()); assertEquals(AttributeValue.builder().bool(false).build(), actualRequest.expressionAttributeValues().get(":lock_expected")); assertEquals(AttributeValue.builder().bool(true).build(), actualRequest.expressionAttributeValues().get(":new_lock")); assertTrue(success);  success = testLock.tryLockUnlock(TEST_CONTEXT, false); actualRequest = updateCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("ecs_cluster_locked = :lock_expected", actualRequest.conditionExpression()); assertEquals("SET ecs_cluster_locked = :new_lock", actualRequest.updateExpression()); assertEquals(AttributeValue.builder().bool(true).build(), actualRequest.expressionAttributeValues().get(":lock_expected")); assertEquals(AttributeValue.builder().bool(false).build(), actualRequest.expressionAttributeValues().get(":new_lock")); assertTrue(success); }
tryLockUnlock(RequestContext requestContext, boolean tryLock) { try { UpdateItemRequest updateItemRequest = UpdateItemRequest.builder() .tableName(requestContext.onboardingDdbTable) .key(Map.of("id", currentOnboardingId(requestContext))) .conditionExpression("ecs_cluster_locked = :lock_expected") .updateExpression("SET ecs_cluster_locked = :new_lock") .expressionAttributeValues(Map.of( ":lock_expected", AttributeValue.builder().bool(!tryLock).build(), ":new_lock", AttributeValue.builder().bool(tryLock).build())) .build(); LOGGER.debug("trying to {} with updateItemRequest {}", tryLock ? "lock" : "unlock", updateItemRequest); ddb.updateItem(UpdateItemRequest.builder() .tableName(requestContext.onboardingDdbTable) .key(Map.of("id", currentOnboardingId(requestContext))) .conditionExpression("ecs_cluster_locked = :lock_expected") .updateExpression("SET ecs_cluster_locked = :new_lock") .expressionAttributeValues(Map.of( ":lock_expected", AttributeValue.builder().bool(!tryLock).build(), ":new_lock", AttributeValue.builder().bool(tryLock).build())) .build()); } catch (ConditionalCheckFailedException ccfe) { LOGGER.error("Could not {} ecs_cluster_locked, conditional check failed: {}", tryLock ? "lock" : "unlock", ccfe.getMessage()); return false; } catch (DynamoDbException ddbe) { LOGGER.error("Error trying to update lock for current onboarding id: {}", ddbe.getMessage()); LOGGER.error(Utils.getFullStackTrace(ddbe)); throw new RuntimeException(ddbe); } return true; }
[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred: org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext ( boolean tryLock ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, boolean tryLock) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext ( boolean tryLock) ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, boolean tryLock ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, boolean tryLock) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, tryLock) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, boolean tryLock ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, actualRequest ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext ( boolean isEmpty ) )

[*] target: assertEquals(onboardingId, actualRequest.key().get("id"))
[-] pred:  org. junit. Assert. assertTrue ( success. tryLockUnlock(RequestContext requestContext, boolean tryLock) ) )
************************************
************************************
[+] input: testGenerateBatches() { List<List<WriteRequest>> batches = CidrDynamoDB.generateBatches(); // Max batch write size for DynamoDB is 25 and we're batching up 256 items // We should have 11 batches total "<AssertPlaceHolder>"; // The first 10 batches should be filled to the limit for (int i = 0; i < 10; i++) { assertEquals(25, batches.get(i).size()); } // and one remainder batch of 6 assertEquals(6, batches.get(10).size()); }
generateBatches() { final int batchWriteItemLimit = 25; final int maxOctet = 255; int octet = -1; List<List<WriteRequest>> batches = new ArrayList<>(); List<WriteRequest> batch = new ArrayList<>(); while (octet <= maxOctet) { octet++; if (batch.size() == batchWriteItemLimit || octet > maxOctet) { batches.add(new ArrayList<>(batch)); // shallow copy is ok here batch.clear(); // clear out our working batch so we can fill it up again to the limit } String cidr = String.format("10.%d.0.0", octet); WriteRequest putRequest = WriteRequest.builder() .putRequest(PutRequest.builder() .item(Map.of("cidr_block", AttributeValue.builder().s(cidr).build())) .build()) .build(); batch.add(putRequest); } return batches; }
[*] target: assertEquals(11, batches.size())
[-] pred: org. junit. Assert. assertEquals ( java. util. Arrays. asList ( expected ), output )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( expected ), generated )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 0, 1, 2, 3 ), batches )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 1, 2, 3 ), batches )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( expected ), resources )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, batches. size ( ) )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit. Assert. assertEquals ( List. size ( ), batches )

[*] target: assertEquals(11, batches.size())
[-] pred:  org. junit )

[*] target: assertEquals(11, batches.size())
[-] pred:  org

[*] target: assertEquals(11, batches.size())
[-] pred:  )
************************************
************************************
[+] input: testToAttributeValueMap() { Onboarding onboarding = new Onboarding(); LocalDateTime created = LocalDateTime.now(); LocalDateTime modified = LocalDateTime.now();  onboarding.setId(onboardingId); onboarding.setCreated(created); onboarding.setModified(modified); onboarding.setStatus(OnboardingStatus.created); onboarding.setTenantId(tenantId); onboarding.setRequest(new OnboardingRequest("Unit Test", "default")); onboarding.setStacks(stacks); onboarding.setZipFile("foobar"); onboarding.setEcsClusterLocked(false);  Map<String, AttributeValue> expected = new HashMap<>(); expected.put("id", AttributeValue.builder().s(onboardingId.toString()).build()); expected.put("created", AttributeValue.builder().s(created.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); expected.put("modified", AttributeValue.builder().s(modified.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); expected.put("status", AttributeValue.builder().s(OnboardingStatus.created.name()).build()); expected.put("tenant_id", AttributeValue.builder().s(tenantId.toString()).build()); expected.put("zip_file", AttributeValue.builder().s("foobar").build()); expected.put("request", AttributeValue.builder().m(Map.of( "name", AttributeValue.builder().s("Unit Test").build(), "tier", AttributeValue.builder().s("default").build()) ).build()); expected.put("stacks", AttributeValue.builder().l(stacks.stream() .map(stack -> AttributeValue.builder().m(Map.of( "name", AttributeValue.builder().s(stack.getName()).build(), "baseStack", AttributeValue.builder().bool(stack.isBaseStack()).build() )).build()) .collect(Collectors.toList()) ).build()); expected.put("ecs_cluster_locked", AttributeValue.builder().bool(false).build());  Map<String, AttributeValue> actual = OnboardingServiceDAL.toAttributeValueMap(onboarding);  // DynamoDB marshalling "<AssertPlaceHolder>"; expected.keySet().stream().forEach(key -> { assertEquals("Value mismatch for '" + key + "'", expected.get(key), actual.get(key)); });  // Have we reflected all class properties we serialize for API calls in DynamoDB? Map<String, Object> json = Utils.fromJson(Utils.toJson(onboarding), LinkedHashMap.class); json.keySet().stream() .map(key -> Utils.toSnakeCase(key)) .forEach(key -> { assertTrue("Class property '" + key + "' does not exist in DynamoDB attribute map", actual.containsKey(key)); }); }
toAttributeValueMap(Onboarding onboarding) { Map<String, AttributeValue> item = new HashMap<>(); item.put("id", AttributeValue.builder().s(onboarding.getId().toString()).build()); if (onboarding.getCreated() != null) { item.put("created", AttributeValue.builder().s(onboarding.getCreated().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); } if (onboarding.getModified() != null) { item.put("modified", AttributeValue.builder().s(onboarding.getModified().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); } if (onboarding.getStatus() != null) { item.put("status", AttributeValue.builder().s(onboarding.getStatus().toString()).build()); } if (onboarding.getTenantId() != null) { item.put("tenant_id", AttributeValue.builder().s(onboarding.getTenantId().toString()).build()); } if (onboarding.getZipFile() != null) { item.put("zip_file", AttributeValue.builder().s(onboarding.getZipFile()).build()); } if (onboarding.getRequest() != null) { OnboardingRequest request = onboarding.getRequest(); Map<String, AttributeValue> requestMap = new HashMap<>(); if (Utils.isNotBlank(request.getName())) { requestMap.put("name", AttributeValue.builder().s(request.getName()).build()); } if (Utils.isNotBlank(request.getTier())) { requestMap.put("tier", AttributeValue.builder().s(request.getTier()).build()); } if (Utils.isNotBlank(request.getSubdomain())) { requestMap.put("subdomain", AttributeValue.builder().s(request.getSubdomain()).build()); } if (Utils.isNotBlank(request.getBillingPlan())) { requestMap.put("billing_plan", AttributeValue.builder().s(request.getBillingPlan()).build()); } if (request.getAttributes() != null && !request.getAttributes().isEmpty()) { requestMap.put("attributes", AttributeValue.builder().m(request.getAttributes().entrySet() .stream() .collect(Collectors.toMap( Map.Entry::getKey, entry -> AttributeValue.builder().s(entry.getValue()).build()) ) ).build()); } item.put("request", AttributeValue.builder().m(requestMap).build()); } if (!onboarding.getStacks().isEmpty()) { item.put("stacks", AttributeValue.builder().l(onboarding.getStacks() .stream() .map(stack -> { Map<String, AttributeValue> stackItem = new HashMap<>(); if (stack.getService() != null) { stackItem.put("service", AttributeValue.builder().s(stack.getService()).build()); } if (stack.getName() != null) { stackItem.put("name", AttributeValue.builder().s(stack.getName()).build()); } if (stack.getArn() != null) { stackItem.put("arn", AttributeValue.builder().s(stack.getArn()).build()); } stackItem.put("baseStack", AttributeValue.builder().bool(stack.isBaseStack()).build()); if (stack.getStatus() != null) { stackItem.put("status", AttributeValue.builder().s(stack.getStatus()).build()); } if (stack.getPipeline() != null) { stackItem.put("pipeline", AttributeValue.builder().s(stack.getPipeline()).build()); } if (stack.getPipelineStatus() != null) { stackItem.put("pipelineStatus", AttributeValue.builder().s(stack.getPipelineStatus()).build()); } return AttributeValue.builder().m(stackItem).build(); }) .collect(Collectors.toList()) ).build() ); } item.put("ecs_cluster_locked", AttributeValue.builder().bool(onboarding.isEcsClusterLocked()).build()); return item; }
[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred: org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( actual.()); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( actual ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertNull ( actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  , actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org
************************************
************************************
[+] input: testGetPathPriority() { InputStream json = getClass().getClassLoader().getResourceAsStream("appConfig.json"); Map<String, Object> appConfig = Utils.fromJson(json, LinkedHashMap.class);  Map<String, Object> applicationServices = new HashMap<>(); for (int i = 1; i <= 10; i++) { applicationServices.put(String.format("Service%02d", i), Map.of( "public", Boolean.TRUE, "path", Utils.randomString((i * 10)) )); } appConfig.put("services", applicationServices);  Map<String, Integer> expected = Map.of( "Service01", 10, "Service02", 9, "Service03", 8, "Service04", 7, "Service05", 6, "Service06", 5, "Service07", 4, "Service08", 3, "Service09", 2, "Service10", 1 );  Map<String, Integer> actual = OnboardingService.getPathPriority(appConfig);  "<AssertPlaceHolder>"; expected.keySet().stream().forEach(key -> { assertEquals("Value mismatch for '" + key + "'", expected.get(key), actual.get(key)); }); }
getPathPriority(Map<String, Object> appConfig) { Map<String, Object> services = (Map<String, Object>) appConfig.get("services"); Map<String, Integer> pathLength = new HashMap<>();  // Collect the string length of the path for each public service for (Map.Entry<String, Object> serviceConfig : services.entrySet()) { String serviceName = serviceConfig.getKey(); Map<String, Object> service = (Map<String, Object>) serviceConfig.getValue(); Boolean isPublic = (Boolean) service.get("public"); if (isPublic) { String pathPart = Objects.toString(service.get("path"), ""); pathLength.put(serviceName, pathPart.length()); } } // Order the services by longest (most specific) to shortest (least specific) path length LinkedHashMap<String, Integer> pathPriority = pathLength.entrySet().stream() .sorted(Map.Entry.comparingByValue(Collections.reverseOrder())) .collect(Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue, (value1, value2) -> value1, LinkedHashMap::new )); // Set the ALB listener rule priority so that the most specific paths (the longest ones) have // a higher priority than the less specific paths so the rules are evaluated in the proper order // i.e. a path of /feature* needs to be evaluate before a catch all path of /* or you'll never // route to the /feature* rule because /* will have already matched int priority = 0; for (String publicService : pathPriority.keySet()) { pathPriority.put(publicService, ++priority); } return pathPriority; }
[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected. size ( ), actual. size ( ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected. length ( ), actual. length ( ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expected, actual ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. apache. commons. lang. StringUtils. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. apache. commons. lang. StringUtils. join ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expected, actual )
************************************
************************************
[+] input: testIsComplete() { for (String status : CLOUDFORMAION_STACK_STATUSES) { OnboardingStack stack = OnboardingStack.builder().build(); assertFalse(stack.isComplete()); stack.setStatus(status); if ("CREATE_COMPLETE".equals(status)) { assertTrue(stack.isComplete()); } else if ("UPDATE_COMPLETE".equals(status)) { assertTrue(stack.isComplete()); } else { "<AssertPlaceHolder>"; } } }
isComplete() { return "CREATE_COMPLETE".equals(getStatus()) || "UPDATE_COMPLETE".equals(getStatus()); }
[*] target: assertFalse(stack.isComplete())
[-] pred: org. junit. Assert. assertTrue ( stack. isComplete() ( ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() ( ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertFalse ( stack. isComplete() ( ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  UPDATE_COMPLETE".equals(stack.isComplete()); }

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isCompleteContainer ( ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() { return )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() { return ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() ) )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() { return true )

[*] target: assertFalse(stack.isComplete())
[-] pred:  org. junit. Assert. assertTrue ( stack. isComplete() ( ),
************************************
************************************
[+] input: testIsDeployed() { for (String status : CLOUDFORMAION_STACK_STATUSES) { for (String pipelineStatus : CODEPIPELINE_STATES) { OnboardingStack stack = OnboardingStack.builder().build(); assertFalse(stack.isDeployed()); stack.setStatus(status); stack.setPipelineStatus(pipelineStatus);  // Base stacks don't get workloads deployed to them, they just need to be complete OnboardingStack baseStack = OnboardingStack.builder().baseStack(true).build(); baseStack.setStatus(status); baseStack.setPipelineStatus(pipelineStatus); if ("CREATE_COMPLETE".equals(status)) { assertTrue(baseStack.isDeployed()); } else if ("UPDATE_COMPLETE".equals(status)) { assertTrue(baseStack.isDeployed()); } else { assertFalse(baseStack.isDeployed()); }  // Application stacks get workloads deployed OnboardingStack appStack = OnboardingStack.builder().baseStack(false).build(); appStack.setStatus(status); appStack.setPipelineStatus(pipelineStatus); if ("SUCCEEDED".equals(appStack.getPipelineStatus())) { if ("CREATE_COMPLETE".equals(status)) { assertTrue(appStack.isDeployed()); } else if ("UPDATE_COMPLETE".equals(status)) { assertTrue(appStack.isDeployed()); } else { assertFalse(appStack.isDeployed()); } } else { "<AssertPlaceHolder>"; } } } }
isDeployed() { return (isComplete() && isBaseStack()) || (isComplete() && "SUCCEEDED".equals(getPipelineStatus())); }
[*] target: assertFalse(appStack.isDeployed())
[-] pred: org. junit. Assert. assertTrue ( stack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( appStack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( applicationStack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( baseStack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( stack. is asDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( theStack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( frStack. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( stream. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( exception. isDeployed() ( ) )

[*] target: assertFalse(appStack.isDeployed())
[-] pred:  org. junit. Assert. assertTrue ( stack. isDeployed() ( ) )
************************************
************************************
[+] input: testBaseStacksComplete() { OnboardingStack stack1 = OnboardingStack.builder().baseStack(true).build(); OnboardingStack stack2 = OnboardingStack.builder().baseStack(false).build();  Onboarding onboarding = new Onboarding(); assertFalse("No stacks", onboarding.baseStacksComplete());  onboarding.setStacks(Arrays.asList(stack1, stack2)); assertFalse("Empty stacks", onboarding.baseStacksComplete());  stack1.setStatus("CREATE_COMPLETE"); stack2.setStatus("UPDATE_COMPLETE"); assertTrue("All base stacks complete", onboarding.baseStacksComplete());  OnboardingStack stack3 = OnboardingStack.builder().baseStack(true).build(); onboarding.addStack(stack3); "<AssertPlaceHolder>"; }
baseStacksComplete() { return stacksComplete(true); }
[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred: org. junit. Assert. assertThat ( stack1, org. hamcrest. CoreMatchers. is ( stack2 ) )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertThat ( stack3, org. hamcrest. CoreMatchers. is ( stack1 ) )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertThat ( stack2, org. hamcrest. CoreMatchers. is ( stack3 ) )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertSame ( stack1, stack3 )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertTrue ( ( stack1 == stack2 ) )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertSame ( stack2, stack3 )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org. junit. Assert. assertEquals ( stack2, stack3 )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  , stack2 )

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  org

[*] target: assertFalse("Not every base stack is complete", onboarding.baseStacksComplete())
[-] pred:  )
************************************
************************************
[+] input: testStacksComplete() { OnboardingStack stack1 = OnboardingStack.builder().build(); OnboardingStack stack2 = OnboardingStack.builder().build();  Onboarding onboarding = new Onboarding(); assertFalse("No stacks", onboarding.stacksComplete());  onboarding.setStacks(Arrays.asList(stack1, stack2)); assertFalse("Empty stacks", onboarding.stacksComplete());  stack1.setStatus("CREATE_COMPLETE"); assertFalse("Not every stack is complete", onboarding.stacksComplete());  stack2.setStatus("UPDATE_COMPLETE"); assertTrue("All stacks complete", onboarding.stacksComplete());  onboarding.addStack(OnboardingStack.builder().build()); "<AssertPlaceHolder>"; }
stacksComplete() { return stacksComplete(false); }
[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred: org. junit. Assert. assertThat ( stack1, org. hamcrest. CoreMatchers. is ( stack2 ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertTrue ( ( ( stack1 == stack2 ) && ( stack1 == stack2 ) ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertTrue ( ( ( stack1. stacksComplete() ( ) ) == stack2 ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertSame ( stack1, stack2 )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertTrue ( ( ( stack1. stacksCompleteWrapper ) instanceof onboarding ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertFalse ( ( stack1 == stack2 ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert. assertTrue ( ( stack1 == stack2 ) )

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org. junit. Assert.

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  org

[*] target: assertFalse("Not every stack is complete", onboarding.stacksComplete())
[-] pred:  )
************************************
************************************
[+] input: testHasAppStacks() { OnboardingStack baseStack = OnboardingStack.builder().baseStack(true).build(); OnboardingStack appStack = OnboardingStack.builder().baseStack(false).build();  Onboarding onboarding = new Onboarding(); assertFalse("No stacks", onboarding.hasAppStacks());  onboarding.addStack(baseStack); assertFalse("Only base stacks", onboarding.hasAppStacks());  onboarding.addStack(appStack); "<AssertPlaceHolder>"; }
hasAppStacks() { return !getStacks() .stream() .filter(s -> !s.isBaseStack()) .collect(Collectors.toList()) .isEmpty(); }
[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred: org. junit. Assert. assertTrue ( appStack. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertTrue ( applicationStack. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertFalse ( appStack. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertTrue ( onboarding. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertThat ( appStack, hasAppStacks() )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertTrue ( appStack. hasAppStacks() ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertTrue ( apStack. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertFalse ( applicationStack. hasAppStacks() ( ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertThat ( appStack, hasAppStacks() ) )

[*] target: assertTrue("App stacks", onboarding.hasAppStacks())
[-] pred:  org. junit. Assert. assertFalse ( onboarding. hasAppStacks() )
************************************
************************************
[+] input: testAppStacksDeleted() { OnboardingStack baseStack = OnboardingStack.builder().baseStack(true).status("CREATE_COMPLETE").build(); OnboardingStack appStack1 = OnboardingStack.builder().baseStack(false).status("DELETE_IN_PROGRESS").build(); OnboardingStack appStack2 = OnboardingStack.builder().baseStack(false).status("DELETE_COMPLETE").build(); OnboardingStack appStack3 = OnboardingStack.builder().baseStack(false).status("DELETE_COMPLETE").build();  Onboarding onboarding = new Onboarding(); assertTrue("No Stacks", onboarding.appStacksDeleted());  onboarding.addStack(baseStack); onboarding.appStacksDeleted(); assertTrue("Only base stacks", onboarding.appStacksDeleted());  onboarding.addStack(appStack1); assertFalse("App stacks not deleted", onboarding.appStacksDeleted());  onboarding.addStack(appStack2); assertFalse("App stacks not deleted", onboarding.appStacksDeleted());  onboarding.addStack(appStack3); assertFalse("App stacks not deleted", onboarding.appStacksDeleted());  appStack1.setStatus("DELETE_COMPLETE"); "<AssertPlaceHolder>"; }
appStacksDeleted() { return !hasAppStacks() || getStacks() .stream() .filter(s -> !s.isBaseStack()) .filter(s -> !"DELETE_COMPLETE".equals(s.getStatus())) .collect(Collectors.toList()) .isEmpty(); }
[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred: org. junit. Assert. assertTrue ( onboarding. appStacksDeleted() ( ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( onboarding. appStacksDeleted() )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( applicationStack2. appStacksDeleted() ( ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( org. hamcrest. CoreMatchers. is ( appStack2 ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( applicationStack1. appStacksDeleted() ( ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( theStack2. appStacksDeleted() ( ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( applicationStack2. appStacksDeleted() )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( org. hamcrest. CoreMatchers. is ( appStack1 ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org. junit. Assert. assertTrue ( onboarding. appStacksDeleted() ) )

[*] target: assertTrue("App stacks deleted", onboarding.appStacksDeleted())
[-] pred:  org
************************************
************************************
[+] input: testIsDomainChanged() { AppConfig existing = AppConfig.builder().build(); AppConfig altered = AppConfig.builder().build(); assertFalse("Both null", AppConfigHelper.isDomainChanged(existing, altered));  existing = AppConfig.builder().domainName("").build(); altered = AppConfig.builder().domainName("").build(); assertFalse("Both empty", AppConfigHelper.isDomainChanged(existing, altered));  existing = AppConfig.builder().domainName("ABC").build(); altered = AppConfig.builder().domainName("abc").build(); assertFalse("Ignore case", AppConfigHelper.isDomainChanged(existing, altered));  existing = AppConfig.builder().build(); altered = AppConfig.builder().domainName("abc").build(); assertTrue("null != non-empty", AppConfigHelper.isDomainChanged(existing, altered));  existing = AppConfig.builder().domainName("abc").build(); altered = AppConfig.builder().build(); assertTrue("null != non-empty", AppConfigHelper.isDomainChanged(existing, altered));  existing = AppConfig.builder().domainName("abc").build(); altered = AppConfig.builder().domainName("xzy").build(); "<AssertPlaceHolder>"; }
isDomainChanged(AppConfig existing, AppConfig altered) { return ((existing.getDomainName() != null && !existing.getDomainName().equalsIgnoreCase(altered.getDomainName())) || (altered.getDomainName() != null && !altered.getDomainName().equalsIgnoreCase(existing.getDomainName()))); }
[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred: org. junit. Assert. assertThat ( altered, org. hamcrest. CoreMatchers. is ( altered ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertTrue ( altered. isDomainChanged(AppConfig existing, altered ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. CoreMatchers. is ( isCompatible ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertTrue ( altered. isDomainChanged(AppConfig existing, altered )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertTrue ( altered. isDomainChanged(AppConfig existing ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, isDomainChanged(AppConfig existing ) )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered. isDomainChanged(AppConfig existing, altered )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, isDomainChanged(AppConfig existing )

[*] target: assertTrue("Different values", AppConfigHelper.isDomainChanged(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( altered, altered )
************************************
************************************
[+] input: testIsBillingProviderChanged() { AppConfig existing = AppConfig.builder().build(); AppConfig altered = AppConfig.builder().build(); assertFalse("Both null", AppConfigHelper.isBillingChanged(existing, altered));  existing = AppConfig.builder().billing(BillingProvider.builder().build()).build(); altered =  AppConfig.builder().billing(BillingProvider.builder().build()).build(); assertFalse("Both null keys", AppConfigHelper.isBillingChanged(existing, altered));  String apiKey1 = "AQICAHhcs1hgJKpJfeso9W7CCTmyCVulso9PlceBD2lnnVksMwFVwWN3pbig0jooa4LJ2IbtAAAAzjCBywYJKoZIhvcNAQcGoIG9MIG6AgEAMIG0BgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDGHgQErKnkEmp2kVkQIBEICBhlZ2lux43UJUx2R0Q3DdK80od7FHeWpA5mCLr7uWipkaQ79lxsx2ffRbwAPRbcves2NEWznQJsCm2+bgJRpE1mPEJtSfXwGVCsbf1RUGIAiB0+k+NKCih8qAlBcBsA9iFvRm0kVqoo9acz3ay56pImzWrg8wrjkhGkspnXZhvK7BZg5/zvxZ != AQICAHhcs1hgJKpJfeso9W7CCTmyCVulso9PlceBD2lnnVksMwFVwWN3pbig0jooa4LJ2IbtAAAAzjCBywYJKoZIhvcNAQcGoIG9MIG6AgEAMIG0BgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDGHgQErKnkEmp2kVkQIBEICBhlZ2lux43UJUx2R0Q3DdK80od7FHeWpA5mCLr7uWipkaQ79lxsx2ffRbwAPRbcves2NEWznQJsCm2+bgJRpE1mPEJtSfXwGVCsbf1RUGIAiB0+k+NKCih8qAlBcBsA9iFvRm0kVqoo9acz3ay56pImzWrg8wrjkhGkspnXZhvK7BZg5/zvxZ"; existing = AppConfig.builder().billing(BillingProvider.builder().build()).build(); altered = AppConfig.builder().billing(BillingProvider.builder().apiKey(apiKey1).build()).build(); assertTrue("One null, one not null", AppConfigHelper.isBillingChanged(existing, altered)); "<AssertPlaceHolder>"; }
isBillingFirstTime(AppConfig existing, AppConfig altered) { return ((existing.getBilling() == null || !existing.getBilling().hasApiKey()) && (altered.getBilling() != null && altered.getBilling().hasApiKey())); }
[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred: org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, found )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, find )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, generated )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, output )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, map )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, resulting )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, estimated )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertTrue("First time set", AppConfigHelper.isBillingFirstTime(existing, altered))
[-] pred:  org. junit. Assert. assertNotNull ( existing )
************************************
************************************
[+] input: testIsSslCertArnChanged() { AppConfig existing = AppConfig.builder().build(); AppConfig altered = AppConfig.builder().build(); assertFalse("Both null", AppConfigHelper.isSslArnChanged(existing, altered));  existing = AppConfig.builder().sslCertificate("").build(); altered = AppConfig.builder().sslCertificate("").build(); assertFalse("Both empty", AppConfigHelper.isSslArnChanged(existing, altered));  existing = AppConfig.builder().sslCertificate("ABC").build(); altered = AppConfig.builder().sslCertificate("abc").build(); assertFalse("Ignore case", AppConfigHelper.isSslArnChanged(existing, altered));  existing = AppConfig.builder().build(); altered = AppConfig.builder().sslCertificate("abc").build(); assertTrue("null != non-empty", AppConfigHelper.isSslArnChanged(existing, altered));  existing = AppConfig.builder().sslCertificate("abc").build(); altered = AppConfig.builder().build(); assertTrue("null != non-empty", AppConfigHelper.isSslArnChanged(existing, altered));  existing = AppConfig.builder().sslCertificate("abc").build(); altered = AppConfig.builder().sslCertificate("xzy").build(); "<AssertPlaceHolder>"; }
isSslArnChanged(AppConfig existing, AppConfig altered) { return ((existing.getSslCertificate() != null && !existing.getSslCertificate().equalsIgnoreCase(altered.getSslCertificate())) || (altered.getSslCertificate() != null && !altered.getSslCertificate().equalsIgnoreCase(existing.getSslCertificate()))); }
[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred: org. junit. Assert. assertThat ( altered, org. hamcrest. Matchers. is ( existing ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. Matchers. is ( altered ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. CoreMatchers. is ( existing ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. CoreMatchers. is ( altered ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. Matchers. equalTo ( existing ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered, org. hamcrest. Matchers. is ( startsWith ) )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( altered. isSslArnChanged(AppConfig existing )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( altered, altered )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( existing, altered )

[*] target: assertTrue("Different values", AppConfigHelper.isSslArnChanged(existing, altered))
[-] pred:  org. junit. Assert. assertEquals ( altered, existing )
************************************
************************************
[+] input: testIsServicesChanged() { AppConfig existing = AppConfig.builder().build(); AppConfig altered = AppConfig.builder().build(); assertFalse(AppConfigHelper.isServicesChanged(existing, altered));  Map<String, ServiceConfig> services1 = new HashMap<>(); services1.put("foo", ServiceConfig.builder().build()); Map<String, ServiceConfig> services2 = new HashMap<>(); services2.put("foo", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertFalse(AppConfigHelper.isServicesChanged(existing, altered));  services2.put("bar", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertTrue(AppConfigHelper.isServicesChanged(existing, altered));  services2.remove("bar"); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertFalse(AppConfigHelper.isServicesChanged(existing, altered));  services1.clear(); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); "<AssertPlaceHolder>"; }
isServicesChanged(AppConfig existing, AppConfig altered) { return !AppConfig.servicesEqual(existing.getServices(), altered.getServices()); }
[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred: org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing, altered )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing ), org. hamcrest. CoreMatchers. is ( altered ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing ), org. hamcrest. CoreMatchers. is ( existing ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertTrue ( existing. isServicesChanged(AppConfig existing, altered ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing ), org. hamcrest. CoreMatchers. is ( isCompatible ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertThat ( existing. isServicesChanged(AppConfig existing, org. hamcrest. CoreMatchers. is ( altered ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  org. junit. Assert. assertTrue ( existing. isServicesChanged(AppConfig existing ) )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  , existing )

[*] target: assertTrue(AppConfigHelper.isServicesChanged(existing, altered))
[-] pred:  isCompatible )
************************************
************************************
[+] input: testRemovedServices() { AppConfig existing = AppConfig.builder().build(); AppConfig altered = AppConfig.builder().build(); assertTrue(AppConfigHelper.removedServices(existing, altered).isEmpty());  Map<String, ServiceConfig> services1 = new HashMap<>(); services1.put("foo", ServiceConfig.builder().build()); Map<String, ServiceConfig> services2 = new HashMap<>(); services2.put("FOO", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); // foo | FOO assertTrue(AppConfigHelper.removedServices(existing, altered).isEmpty());  // foo | FOO,bar services2.put("bar", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertTrue(AppConfigHelper.removedServices(existing, altered).isEmpty());  // foo | FOO services2.remove("bar"); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertTrue(AppConfigHelper.removedServices(existing, altered).isEmpty());  // foo | bar services2.remove("FOO"); services2.put("bar", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty());  // christmas,easter | bar,baz services1.clear(); services1.put("christmas", ServiceConfig.builder().build()); services1.put("easter", ServiceConfig.builder().build()); services2.clear(); services2.put("bar", ServiceConfig.builder().build()); services2.put("baz", ServiceConfig.builder().build()); existing = AppConfig.builder().services(services1).build(); altered = AppConfig.builder().services(services2).build(); "<AssertPlaceHolder>"; }
removedServices(AppConfig existing, AppConfig altered) { Set<String> removed = new HashSet<>(); for (String existingKey : existing.getServices().keySet()) { boolean found = false; for (String alteredKey : altered.getServices().keySet()) { if (existingKey.equalsIgnoreCase(alteredKey)) { found = true; break; } } if (!found) { removed.add(existingKey); } } return removed; }
[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred: org. junit. Assert. assertEquals ( altered, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( existing, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( altered, alter )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( alter, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( copy, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( old, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( over, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org. junit, altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  , altered )

[*] target: assertFalse(AppConfigHelper.removedServices(existing, altered).isEmpty())
[-] pred:  org
************************************
************************************
[+] input: testEquals() { AppConfig config1 = AppConfig.builder().build(); AppConfig config2 = null;  assertFalse("NULL is not equal", config1.equals(config2));  config2 = config1; assertTrue("Same instance", config1.equals(config2));  assertFalse("Different types are not equal", config1.equals(new HashMap<>()));  config2 = AppConfig.builder().build(); assertTrue("Empty config objects are equal", config1.equals(config2));  Map<String, ServiceConfig> services1 = new HashMap<>(); Map<String, ServiceConfig> services2 = new HashMap<>(); services1.put("foo", null); services2.put("foo", null); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertTrue("Both null services", config1.equals(config2));  services1.put("foo", ServiceConfig.builder().build()); services2.put("foo", ServiceConfig.builder().build()); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertTrue("Same services", config1.equals(config2));  services2.put("foo", null); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertFalse("One service null", config1.equals(config2));  services1.put("foo", null); services2.put("foo", ServiceConfig.builder().build()); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertFalse("One service null", config1.equals(config2));  services1.put("foo", ServiceConfig.builder().build()); services2.remove("foo"); services2.put("bar", ServiceConfig.builder().build()); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertFalse("Different service names", config1.equals(config2));  services2.put("foo", ServiceConfig.builder().build()); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertFalse("Different number of services", config1.equals(config2));  services1.clear(); services2.clear(); services1.put("foo", ServiceConfig.builder().name("foo").build()); services2.put("foo", ServiceConfig.builder().name("bar").build()); config1 = AppConfig.builder().services(services1).build(); config2 = AppConfig.builder().services(services2).build(); assertFalse("Different service configs", config1.equals(config2));  config1 = AppConfig.builder() .name("foo") .domainName("bar") .sslCertificate("baz") .services(Map.of("foo", ServiceConfig.builder().build())) .billing(BillingProvider.builder().build()) .build(); config2 = AppConfig.builder() .name("foo") .domainName("bar") .sslCertificate("baz") .services(Map.of("foo", ServiceConfig.builder().build())) .billing(BillingProvider.builder().build()) .build(); "<AssertPlaceHolder>"; }
equals(Object obj) { if (obj == null) { return false; } // Same reference? if (this == obj) { return true; } // Same type? if (getClass() != obj.getClass()) { return false; } final AppConfig other = (AppConfig) obj; return (Utils.nullableEquals(name, other.getName()) && Utils.nullableEquals(domainName, other.getDomainName()) && Utils.nullableEquals(hostedZone, other.getHostedZone()) && Utils.nullableEquals(sslCertificate, other.getSslCertificate()) && ((services == null && other.services == null) || (servicesEqual(services, other.services))) && Utils.nullableEquals(billing, other.getBilling())); }
[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( 1.0 ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( value ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( body ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( evaluated ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( element ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( screenshot ) )

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  returns the", of the test case

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  retrieves the", from the input

[*] target: assertTrue("Same name", config1.equals(config2))
[-] pred:  retrieves the", of the interaction
************************************
************************************
[+] input: testIsEmpty() { AppConfig config = AppConfig.builder().build(); assertTrue(config.isEmpty());  AppConfig config2 = AppConfig.builder().name("test").build(); assertFalse(config2.isEmpty());  AppConfig config3 = AppConfig.builder().domainName("example.com").build(); assertFalse(config3.isEmpty());  AppConfig config4 = AppConfig.builder().hostedZone("123456").build(); assertFalse(config4.isEmpty());  AppConfig config5 = AppConfig.builder().sslCertificate("arn:aws:acm:xxxxx").build(); assertFalse(config5.isEmpty());  AppConfig config6 = AppConfig.builder().services(Map.of("foo", ServiceConfig.builder().build())).build(); assertFalse(config6.isEmpty());  AppConfig config7 = AppConfig.builder().billing(BillingProvider.builder().build()).build(); assertTrue(config7.isEmpty());  AppConfig config8 = AppConfig.builder().billing(BillingProvider.builder().apiKey("test").build()).build(); "<AssertPlaceHolder>"; }
isEmpty() { return (Utils.isBlank(name) && Utils.isBlank(domainName) && Utils.isBlank(hostedZone) && Utils.isBlank(sslCertificate) && (billing == null || !billing.hasApiKey()) && (services == null || services.isEmpty())); }
[*] target: assertFalse(config8.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( config7. isEmpty ( ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( (! ( config7. isEmpty ( ) ) ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( config7. isEmpty() ( config8 ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( (! ( config8. isEmpty ( ) ) ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( config8. isEmpty() ( ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertFalse ( config7. isEmpty ( ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( config7. isEmpty() ( config8. isEmpty F ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( configuration7. isEmpty ( ) )

[*] target: assertFalse(config8.isEmpty())
[-] pred:  org

[*] target: assertFalse(config8.isEmpty())
[-] pred:  )
************************************
************************************
[+] input: testFromParameterStore() { String settingName = "SAAS_BOOST_BUCKET"; String parameterName = "/" + SettingsServiceDAL.SAAS_BOOST_PREFIX + "/" + env + "/" + settingName; String parameterValue = "sb-" + env + "-artifacts-test";  assertTrue("null parameter returns null setting", SettingsServiceDAL.fromParameterStore(null) == null); assertThrows("null parameter name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.fromParameterStore(Parameter.builder().build());}); assertThrows("Empty parameter name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.fromParameterStore(Parameter.builder().name("").build());}); assertThrows("Blank parameter name is invalid pattern throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.fromParameterStore(Parameter.builder().name(" ").build());}); assertThrows("Invalid pattern parameter name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.fromParameterStore(Parameter.builder().name("foobar").build());});  Parameter validParam = Parameter.builder() .name(parameterName) .value(parameterValue) .type(ParameterType.STRING) .version(null) .build(); Setting expectedValidSetting = Setting.builder() .name(settingName) .value(parameterValue) .readOnly(true) .secure(false) .version(null) .description(null) .build(); assertEquals("Valid " + parameterName + " param equals " + settingName + " setting", expectedValidSetting, SettingsServiceDAL.fromParameterStore(validParam));  String readWriteParameterName ="/" + SettingsServiceDAL.SAAS_BOOST_PREFIX + "/" + env + "/APP_NAME"; Parameter readWriteParameter = Parameter.builder() .name(readWriteParameterName) .value("foobar") .type(ParameterType.STRING) .version(null) .build(); Setting expectedReadWriteSetting = Setting.builder() .name("APP_NAME") .value("foobar") .readOnly(false) .secure(false) .version(null) .description(null) .build(); assertEquals("Read/Write param " + readWriteParameterName + " equals APP_NAME setting", expectedReadWriteSetting, SettingsServiceDAL.fromParameterStore(readWriteParameter));  Parameter emptyParameter = Parameter.builder() .name(parameterName) .value("N/A") .type(ParameterType.STRING) .version(null) .build(); Setting expectedEmptySetting = Setting.builder() .name(settingName) .value("") .readOnly(true) .secure(false) .version(null) .description(null) .build(); assertEquals("Empty " + parameterName + " param equals blank setting", expectedEmptySetting, SettingsServiceDAL.fromParameterStore(emptyParameter));  Parameter secretParameter = Parameter.builder() .name(parameterName) .value(parameterValue) .type(ParameterType.SECURE_STRING) .version(null) .build(); Setting expectedSecretSetting = Setting.builder() .name(settingName) .value(parameterValue) .readOnly(true) .secure(true) .version(null) .description(null) .build(); "<AssertPlaceHolder>"; }
fromParameterStore(Parameter parameter) { Setting setting = null; if (parameter != null) { String parameterStoreName = parameter.name(); if (Utils.isEmpty(parameterStoreName)) { throw new RuntimeException("Can't get Setting name for blank Parameter Store name [" + parameter.toString() + "]"); } String settingName = null; Matcher regex = SAAS_BOOST_PARAMETER_PATTERN.matcher(parameterStoreName); if (regex.matches()) { settingName = regex.group(1); } if (settingName == null) { throw new RuntimeException("Parameter Store Parameter " + parameter.name() + " does not match SaaS Boost pattern"); }  setting = Setting.builder() .name(settingName) // name now might be <serviceName>/SETTING .value(!"N/A".equals(parameter.value()) ? parameter.value() : "") .readOnly(!SettingsService.READ_WRITE_PARAMS.contains(settingName)) .secure(ParameterType.SECURE_STRING == parameter.type()) .version(parameter.version()) .build(); } return setting; }
[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred: org. junit. Assert. assertFalse ( properties. isEmpty ( ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( properties. contains ( expectedValidSetting ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( properties. get ( ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( target. toString ( ). contains ( setting ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( parameters. isEmpty ( ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertEquals ( expectedValidSetting, properties )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertEquals ( expectedValidSetting, actualQuery )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( arc. toString ( ). contains ( message ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( arc. toString ( ). contains ( error ) )

[*] target: assertEquals("Valid secret param equals secure setting", expectedSecretSetting, SettingsServiceDAL.fromParameterStore(secretParameter))
[-] pred:  org. junit. Assert. assertFalse ( target. toString ( ). isEmpty ( ) )
************************************
************************************
[+] input: testToParameterStore() { String settingName = "SAAS_BOOST_BUCKET"; String parameterName = "/" + SettingsServiceDAL.SAAS_BOOST_PREFIX + "/" + env + "/" + settingName; String parameterValue = "sb-" + env + "-artifacts-test";  assertThrows("null setting throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.toParameterStore(null);}); assertThrows("null setting name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.toParameterStore(Setting.builder().build());}); assertThrows("Empty setting name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.toParameterStore(Setting.builder().name("").build());}); assertThrows("Blank setting name throws RuntimeException", RuntimeException.class, () -> {SettingsServiceDAL.toParameterStore(Setting.builder().name(" ").build());});  Parameter expectedEmptyParameter = Parameter.builder() .name(parameterName) .type(ParameterType.STRING) .value("N/A") .build(); Setting settingNullValue = Setting.builder() .name(settingName) .value(null) .description(null) .version(null) .secure(false) .readOnly(false) .build(); assertEquals("null setting value equals N/A parameter value", expectedEmptyParameter, SettingsServiceDAL.toParameterStore(settingNullValue));  Setting settingEmptyValue = Setting.builder() .name(settingName) .value("") .description(null) .version(null) .secure(false) .readOnly(false) .build(); assertEquals("Empty setting value equals N/A parameter value", expectedEmptyParameter, SettingsServiceDAL.toParameterStore(settingEmptyValue));  Parameter expectedBlankParameter = Parameter.builder() .name(parameterName) .type(ParameterType.STRING) .value(" ") .build(); Setting settingBlankValue = Setting.builder() .name(settingName) .value(" ") .description(null) .version(null) .secure(false) .readOnly(false) .build(); assertEquals("Blank setting value equals N/A parameter value", expectedBlankParameter, SettingsServiceDAL.toParameterStore(settingBlankValue));  Parameter expectedValueParameter = Parameter.builder() .name(parameterName) .type(ParameterType.STRING) .value(parameterValue) .build(); Setting settingWithValue = Setting.builder() .name(settingName) .value(parameterValue) .description(null) .version(null) .secure(false) .readOnly(false) .build(); assertEquals("Setting value equals parameter value", expectedValueParameter, SettingsServiceDAL.toParameterStore(settingWithValue));  Parameter expectedSecretParameter = Parameter.builder() .name(parameterName) .type(ParameterType.SECURE_STRING) .value(parameterValue) .build(); Setting settingSecretValue = Setting.builder() .name(settingName) .value(parameterValue) .description(null) .version(null) .secure(true) .readOnly(false) .build(); "<AssertPlaceHolder>"; }
toParameterStore(Setting setting) { if (setting == null || !Setting.isValidSettingName(setting.getName())) { throw new RuntimeException("Can't create Parameter Store parameter with invalid Setting name"); } String parameterName = PARAMETER_STORE_PREFIX + setting.getName(); String parameterValue = (Utils.isEmpty(setting.getValue())) ? "N/A" : setting.getValue(); Parameter parameter = Parameter.builder() .type(setting.isSecure() ? ParameterType.SECURE_STRING : ParameterType.STRING) .name(parameterName) .value(parameterValue) .build(); return parameter; }
[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred: org. junit. Assert. assertFalse ( properties. get ( ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( bound )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( target. isTrusted ( ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( properties. contains ( setting ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( target. isPassed ( ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( target. getRequestExists ( ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( METHOD_11 ( item ) )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit. Assert. assertFalse ( METHOD_11 )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org. junit, render )

[*] target: assertEquals("Setting secret value equals secure parameter", expectedSecretParameter, SettingsServiceDAL.toParameterStore(settingSecretValue))
[-] pred:  org
************************************
************************************
[+] input: deserialize_ecsCompute_basic() { String ecsJson = "{"type":"ECS", "ecsExecEnabled": true, "tiers":{" + ""Free":{"instanceType":"t3.medium", "cpu":512, "memory":1024, "min":1, "max":2, "ec2min":0, "ec2max":5}," + ""Gold":{"instanceType":"t3.large", "cpu":1024, "memory":2048, "min":2, "max":4, "ec2min":5, "ec2max":9}}}"; AbstractCompute compute = Utils.fromJson(ecsJson, AbstractCompute.class); assertEquals(EcsCompute.class, compute.getClass()); assertEquals(Boolean.TRUE, ((EcsCompute) compute).getEcsExecEnabled()); "<AssertPlaceHolder>"; for (Map.Entry<String, ? extends AbstractComputeTier> tierEntry : compute.getTiers().entrySet()) { String tierName = tierEntry.getKey(); assertEquals(EcsComputeTier.class, tierEntry.getValue().getClass()); EcsComputeTier tier = (EcsComputeTier) tierEntry.getValue(); switch (tierName) { case "Free": { assertEquals("t3.medium", tier.getInstanceType()); assertEquals(Integer.valueOf(512), tier.getCpu()); assertEquals(Integer.valueOf(1024), tier.getMemory()); assertEquals(Integer.valueOf(1), tier.getMin()); assertEquals(Integer.valueOf(2), tier.getMax()); assertEquals(Integer.valueOf(0), tier.getEc2min()); assertEquals(Integer.valueOf(5), tier.getEc2max()); break; } case "Gold": { assertEquals("t3.large", tier.getInstanceType()); assertEquals(Integer.valueOf(1024), tier.getCpu()); assertEquals(Integer.valueOf(2048), tier.getMemory()); assertEquals(Integer.valueOf(2), tier.getMin()); assertEquals(Integer.valueOf(4), tier.getMax()); assertEquals(Integer.valueOf(5), tier.getEc2min()); assertEquals(Integer.valueOf(9), tier.getEc2max()); break; } default: fail("Deserialize ecs compute JSON found an unexpected tier. " + "Wanted [Free|Gold] but found " + tierName); } } }
getTiers();  protected Builder fillBuilder(Builder b) { return b.containerPort(containerPort) .containerRepo(containerRepo) .containerTag(containerTag) .healthCheckUrl(healthCheckUrl) .operatingSystem(operatingSystem); }
[*] target: assertNotNull(compute.getTiers())
[-] pred: org. junit. Assert. assertThat ( compute, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( internet ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. get());Line ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( """" ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. get());XML ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( """" ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. readFileIfItExists ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( network. get ( 0 ) ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. getDimensionException ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( 5 ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. get());Location ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( """" ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. getDimensionException ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( TestUtils. INSTANCE ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. build ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ""memory"" ) ) )

[*] target: assertNotNull(compute.getTiers())
[-] pred:  org. junit. Assert. assertThat ( compute. out, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( internet ) ) )
************************************
************************************
[+] input: deserialize_efsFilesystem_basic() { String efsJson = "{"type":"EFS", "mountPoint":"/mnt", "tiers":{" + ""Free":{"encrypt":false, "lifecycle":"NEVER"}, " + ""Gold":{"encrypt":true, "lifecycle":"AFTER_7_DAYS", "encryptionKey":"encryptionARN"}}}"; AbstractFilesystem fs = Utils.fromJson(efsJson, AbstractFilesystem.class); assertEquals(EfsFilesystem.class, fs.getClass()); assertEquals("/mnt", fs.getMountPoint()); "<AssertPlaceHolder>"; for (Map.Entry<String, ? extends AbstractFilesystemTierConfig> tierEntry : fs.getTiers().entrySet()) { String tierName = tierEntry.getKey(); assertEquals(EfsFilesystemTierConfig.class, tierEntry.getValue().getClass()); EfsFilesystemTierConfig tier = (EfsFilesystemTierConfig) tierEntry.getValue(); switch (tierName) { case "Free": { assertEquals(false, tier.getEncrypt()); assertNull(tier.getEncryptionKey()); assertEquals(EfsFilesystemTierConfig.EfsLifecycle.NEVER.name(), tier.getLifecycle()); break; } case "Gold": { assertEquals(true, tier.getEncrypt()); assertEquals("encryptionARN", tier.getEncryptionKey()); assertEquals(EfsFilesystemTierConfig.EfsLifecycle.AFTER_7_DAYS.name(), tier.getLifecycle()); break; } default: fail("Deserialize filesystem JSON found an unexpected tier. " + "Wanted [Free|Gold] but found " + tierName); } } }
getTiers();  @Override public boolean equals(Object obj) { if (obj == null) { return false; } // Same reference? if (this == obj) { return true; } // Same type? if (getClass() != obj.getClass()) { return false; } final AbstractFilesystem other = (AbstractFilesystem) obj;  return Utils.nullableEquals(this.getMountPoint(), other.getMountPoint()); }
[*] target: assertNotNull(fs.getTiers())
[-] pred: org. junit. Assert. assertTrue ( fs. getTiers(); ( efsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertThat ( fs. getTiers();, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fs. getTiers(); )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fs. getTiers();. equals ( efsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertFalse ( fs. getTiers(); ( efsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fs. getTiers(); ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fs. getTiers();, efsJson )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fs. getTiers(); ( efsJson ).()); ( ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org

[*] target: assertNotNull(fs.getTiers())
[-] pred:  )
************************************
************************************
[+] input: deserialize_fsxWindowsFilesystem_basic() { String fsxWindowsJson = "{"type":"FSX_WINDOWS", "mountPoint":"/mnt", "windowsMountDrive":"G:\\\\\\\\", "configureManagedAd":true," + ""tiers":{" + ""Free":{"encrypt":false, "storageGb":100, "throughputMbs":"200", "backupRetentionDays":1, "dailyBackupTime":"12:00", "weeklyMaintenanceTime":"3:09:00"}," + ""Gold":{"encrypt":true, "encryptionKey":"encryptionARN", "storageGb":1000, "throughputMbs":"2000", "backupRetentionDays":10, "dailyBackupTime":"23:55", "weeklyMaintenanceTime":"6:12:00"}}}"; AbstractFilesystem fs = Utils.fromJson(fsxWindowsJson, AbstractFilesystem.class); assertEquals(FsxWindowsFilesystem.class, fs.getClass()); FsxWindowsFilesystem fsxWindowsFs = (FsxWindowsFilesystem) fs; assertEquals("/mnt", fs.getMountPoint()); assertEquals("G:\\\", fsxWindowsFs.getWindowsMountDrive()); assertEquals(true, fsxWindowsFs.getConfigureManagedAd()); "<AssertPlaceHolder>"; for (Map.Entry<String, ? extends AbstractFilesystemTierConfig> tierEntry : fs.getTiers().entrySet()) { String tierName = tierEntry.getKey(); assertEquals(FsxWindowsFilesystemTierConfig.class, tierEntry.getValue().getClass()); FsxWindowsFilesystemTierConfig tier = (FsxWindowsFilesystemTierConfig) tierEntry.getValue(); switch (tierName) { case "Free": { assertEquals(false, tier.getEncrypt()); assertNull(tier.getEncryptionKey()); assertEquals(Integer.valueOf(100), tier.getStorageGb()); assertEquals(Integer.valueOf(200), tier.getThroughputMbs()); assertEquals(Integer.valueOf(1), tier.getBackupRetentionDays()); assertEquals("12:00", tier.getDailyBackupTime()); assertEquals("3:09:00", tier.getWeeklyMaintenanceTime()); break; } case "Gold": { assertEquals(true, tier.getEncrypt()); assertEquals("encryptionARN", tier.getEncryptionKey()); assertEquals(Integer.valueOf(1000), tier.getStorageGb()); assertEquals(Integer.valueOf(2000), tier.getThroughputMbs()); assertEquals(Integer.valueOf(10), tier.getBackupRetentionDays()); assertEquals("23:55", tier.getDailyBackupTime()); assertEquals("6:12:00", tier.getWeeklyMaintenanceTime()); break; } default: fail("Deserialize filesystem JSON found an unexpected tier. " + "Wanted [Free|Gold] but found " + tierName); } } }
getTiers();  @Override public boolean equals(Object obj) { if (obj == null) { return false; } // Same reference? if (this == obj) { return true; } // Same type? if (getClass() != obj.getClass()) { return false; } final AbstractFilesystem other = (AbstractFilesystem) obj;  return Utils.nullableEquals(this.getMountPoint(), other.getMountPoint()); }
[*] target: assertNotNull(fs.getTiers())
[-] pred: org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson.()); ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( """" ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertEquals ( ""true"", fsxWindowsJson )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson.()); ( ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertEquals ( true, fsxWindowsJson.()); ( ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsFs. get ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertNotNull ( fsxWindowsJson )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( fsxWindowsJson ) ) in
************************************
************************************
[+] input: deserialize_fsxOntapFilesystem_basic() { String fsxWindowsJson = "{"type":"FSX_ONTAP", "mountPoint":"/mnt", "windowsMountDrive":"G:\\\\\\\\", "configureManagedAd":true," + ""tiers":{" + ""Free":{"encrypt":false, "storageGb":100, "throughputMbs":"200", "backupRetentionDays":1, "dailyBackupTime":"12:00", "weeklyMaintenanceTime":"3:09:00", "volumeSize":300}," + ""Gold":{"encrypt":true, "encryptionKey":"encryptionARN", "storageGb":1000, "throughputMbs":"2000", "backupRetentionDays":10, "dailyBackupTime":"23:55", "weeklyMaintenanceTime":"6:12:00", "volumeSize":3000}}}"; AbstractFilesystem fs = Utils.fromJson(fsxWindowsJson, AbstractFilesystem.class); assertEquals(FsxOntapFilesystem.class, fs.getClass()); FsxOntapFilesystem fsxOntapFs = (FsxOntapFilesystem) fs; assertEquals("/mnt", fs.getMountPoint()); assertEquals("G:\\\", fsxOntapFs.getWindowsMountDrive()); assertEquals(true, fsxOntapFs.getConfigureManagedAd()); "<AssertPlaceHolder>"; for (Map.Entry<String, ? extends AbstractFilesystemTierConfig> tierEntry : fs.getTiers().entrySet()) { String tierName = tierEntry.getKey(); assertEquals(FsxOntapFilesystemTierConfig.class, tierEntry.getValue().getClass()); FsxOntapFilesystemTierConfig tier = (FsxOntapFilesystemTierConfig) tierEntry.getValue(); switch (tierName) { case "Free": { assertEquals(false, tier.getEncrypt()); assertNull(tier.getEncryptionKey()); assertEquals(Integer.valueOf(100), tier.getStorageGb()); assertEquals(Integer.valueOf(200), tier.getThroughputMbs()); assertEquals(Integer.valueOf(1), tier.getBackupRetentionDays()); assertEquals("12:00", tier.getDailyBackupTime()); assertEquals("3:09:00", tier.getWeeklyMaintenanceTime()); assertEquals(Integer.valueOf(300), tier.getVolumeSize()); break; } case "Gold": { assertEquals(true, tier.getEncrypt()); assertEquals("encryptionARN", tier.getEncryptionKey()); assertEquals(Integer.valueOf(1000), tier.getStorageGb()); assertEquals(Integer.valueOf(2000), tier.getThroughputMbs()); assertEquals(Integer.valueOf(10), tier.getBackupRetentionDays()); assertEquals("23:55", tier.getDailyBackupTime()); assertEquals("6:12:00", tier.getWeeklyMaintenanceTime()); assertEquals(Integer.valueOf(3000), tier.getVolumeSize()); break; } default: fail("Deserialize filesystem JSON found an unexpected tier. " + "Wanted [Free|Gold] but found " + tierName); } } }
getTiers();  @Override public boolean equals(Object obj) { if (obj == null) { return false; } // Same reference? if (this == obj) { return true; } // Same type? if (getClass() != obj.getClass()) { return false; } final AbstractFilesystem other = (AbstractFilesystem) obj;  return Utils.nullableEquals(this.getMountPoint(), other.getMountPoint()); }
[*] target: assertNotNull(fs.getTiers())
[-] pred: org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson.()); ( fsxWindowsJson ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( ( fsxWindowsJson!= null ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( ( fsxWindowsJson!= fsxOntapFs ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson.()); ( ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( ( fsxWindowsJson instanceof java. lang. String ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( fsxWindowsJson. contains ( """" ) )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertNotNull ( fsxWindowsJson )

[*] target: assertNotNull(fs.getTiers())
[-] pred:  org. junit. Assert. assertTrue ( ( fsxWindowsJson instanceof ie ) )
************************************
************************************
[+] input: InterruptedException { final String adminGroupName = "admin"; String expectedPath = "/admin"; Map<String, Object> mockAdminGroup = Map.of("name", adminGroupName, "path", expectedPath); doReturn(mockResponse(HttpURLConnection.HTTP_OK, Utils.toJson(List.of(mockAdminGroup)))) .when(mockClient).send(requestCaptor.capture(), any(BodyHandler.class)); String actualPath = api.getAdminGroupPath(TEST_EVENT); "<AssertPlaceHolder>"; assertEquals("Path should match", expectedPath, actualPath); }
getAdminGroupPath(Map<String, Object> event) { // GET /{realm}/groups try { HttpRequest getGroups = keycloakRequest(event, groupSearchEndpoint("admin")).GET().build(); LOGGER.info("Invoking Keycloak realm group endpoint {}", getGroups.uri()); HttpResponse<String> response = client.send(getGroups, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8)); if (HttpURLConnection.HTTP_OK == response.statusCode()) { LOGGER.info("getGroups response: {}", response.body()); List<Map<String, Object>> groups = Utils.fromJson(response.body(), ArrayList.class); if (groups != null) { if (groups.size() == 1) { return (String) groups.get(0).get("path"); } else { LOGGER.error("Expected only exactly one group {}", response.body()); throw new RuntimeException("Unexpected response from " + getGroups.uri()); } } else { LOGGER.error("Can't parse realm groups response {}", response.body()); throw new RuntimeException("Invalid response from " + getGroups.uri()); } } else { LOGGER.error("Received HTTP status " + response.statusCode()); LOGGER.error(response.body()); throw new RuntimeException("Keycloak realm groups failed HTTP " + response.statusCode()); } } catch (IOException | InterruptedException e) { throw new RuntimeException(e); } }
[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, actualPath )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert. assertTrue ( actualPath. contains ( expectedPath ) )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expectedPath ) )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert. assertTrue ( actualPath. startsWith ( expectedPath ) )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert. assertNull ( actualPath )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert. assertThat ( actualPath )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit. Assert :: assertThat )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org. junit, actualPath )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  retrieves the actualPath )

[*] target: assertRequest(requestCaptor.getValue(), "GET", endpoint("/groups?search=" + adminGroupName), null)
[-] pred:  org
************************************
************************************
[+] input: insertUserTest() { final String username = "user"; final String groupPath = "/testadmin"; final SystemUser user = mockSystemUser(username); doReturn(mockKeycloakUser(username)).when(mockApi).createUser(any(Map.class), userCaptor.capture()); doReturn(groupPath).when(mockApi).getAdminGroupPath(any(Map.class)); dal.insertUser(Map.of(), user); UserRepresentation capturedUser = userCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("Created user should have exactly 1 credential", capturedUser.getCredentials().size(), 1); assertEquals("Credential type should be password", capturedUser.getCredentials().get(0).getType(), "password"); assertTrue("Credential should be temporary", capturedUser.getCredentials().get(0).isTemporary()); assertEquals("Credential should be 12 characters long", capturedUser.getCredentials().get(0).getValue().length(), 12); assertNotNull("Created user should have required actions", capturedUser.getRequiredActions()); assertEquals("Created user should have exactly 1 required action", capturedUser.getRequiredActions().size(), 1); assertEquals("Required action should be UPDATE_PASSWORD", capturedUser.getRequiredActions().get(0), "UPDATE_PASSWORD"); assertTrue("Created user should be enabled", capturedUser.isEnabled()); assertNotNull("Created user should have groups", capturedUser.getGroups()); assertEquals("Created user should have exactly 1 group", capturedUser.getGroups().size(), 1); assertEquals("Created user should have admin group", capturedUser.getGroups().get(0), groupPath); }
insertUser(Map<String, Object> event, SystemUser user) { // Create new users with a temp password that must be changed on first sign in CredentialRepresentation tempPassword = new CredentialRepresentation(); tempPassword.setType("password"); tempPassword.setTemporary(Boolean.TRUE); tempPassword.setValue(Utils.randomString(12));  UserRepresentation keycloakUser = toKeycloakUser(user); keycloakUser.setCredentials(List.of(tempPassword)); keycloakUser.setRequiredActions(List.of("UPDATE_PASSWORD")); keycloakUser.setEnabled(Boolean.TRUE); keycloakUser.setGroups(List.of(keycloak.getAdminGroupPath(event)));  UserRepresentation createdUser = keycloak.createUser(event, keycloakUser); return toSystemUser(createdUser); }
[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred: org. junit. Assert. assertNotNull ( capturedUser )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser!= null ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser == null ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertEquals ( user, capturedUser )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser instanceof UserRepresentation ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser > 0 ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser instanceof org. openLine ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser == user ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser instanceof org. openClass ) )

[*] target: assertNotNull("Created user should have credentials", capturedUser.getCredentials())
[-] pred:  org. junit. Assert. assertTrue ( ( capturedUser instanceof org. openhub ) )
************************************
************************************
[+] input: toSystemUserTest() { UserRepresentation keycloakUser = mockKeycloakUser("user"); final String requiredAction = "UPDATE_PASSWORD"; keycloakUser.setRequiredActions(List.of(requiredAction)); SystemUser sysUser = KeycloakUserDataAccessLayer.toSystemUser(keycloakUser); "<AssertPlaceHolder>"; assertEquals("Created Long timestamp should match", keycloakUser.getCreatedTimestamp().longValue(), sysUser.getCreated().toInstant(ZoneOffset.UTC).toEpochMilli()); assertEquals("Modified should be null", null, sysUser.getModified()); assertEquals("Active should match enabled", keycloakUser.isEnabled(), sysUser.getActive()); assertEquals("Usernames should match", keycloakUser.getUsername(), sysUser.getUsername()); assertEquals("FirstName should match", keycloakUser.getFirstName(), sysUser.getFirstName()); assertEquals("LastName should match", keycloakUser.getLastName(), sysUser.getLastName()); assertEquals("Email should match", keycloakUser.getEmail(), sysUser.getEmail()); assertEquals("Email verified should match", keycloakUser.isEmailVerified(), sysUser.getEmailVerified()); assertEquals("RequiredAction should match", requiredAction, sysUser.getStatus()); }
toSystemUser(UserRepresentation keycloakUser) { SystemUser user = null; if (keycloakUser != null) { user = new SystemUser(); user.setId(keycloakUser.getId()); user.setCreated(LocalDateTime.ofInstant( Instant.ofEpochMilli(keycloakUser.getCreatedTimestamp()), ZoneId.of("UTC"))); // Keycloak doesn't track when a user was last modified user.setModified(null); user.setActive(keycloakUser.isEnabled()); user.setUsername(keycloakUser.getUsername()); user.setFirstName(keycloakUser.getFirstName()); user.setLastName(keycloakUser.getLastName()); user.setEmail(keycloakUser.getEmail()); user.setEmailVerified(keycloakUser.isEmailVerified()); if (!keycloakUser.getRequiredActions().isEmpty()) { user.setStatus(keycloakUser.getRequiredActions().get(0)); } } return user; }
[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred: org. junit. Assert. assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit. Assert. assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit. Assert. assertNotNull ( systemUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit, Assert. assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit_3 Assert. assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit ; Assert. assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit. Assert :: assertNotNull, sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org. junit ). assertNotNull ( sysUser )

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  org

[*] target: assertEquals("Ids should match", keycloakUser.getId(), sysUser.getId())
[-] pred:  )
************************************
************************************
[+] input: updateUserRepresentationTest() { final String username = "user"; UserRepresentation existingUser = mockKeycloakUser(username); UserRepresentation editedUser = mockKeycloakUser(username); SystemUser edits = new SystemUser(); UnaryOperator<String> alteration = (str) -> "different" + str; edits.setId(alteration.apply(editedUser.getId())); edits.setUsername(alteration.apply(editedUser.getUsername())); edits.setFirstName(alteration.apply(editedUser.getFirstName())); edits.setLastName(alteration.apply(editedUser.getLastName())); edits.setActive(!editedUser.isEnabled()); edits.setEmail(alteration.apply(editedUser.getEmail())); edits.setEmailVerified(!editedUser.isEmailVerified()); edits.setCreated(LocalDateTime.now()); editedUser = KeycloakUserDataAccessLayer.updateUserRepresentation(edits, editedUser); "<AssertPlaceHolder>"; assertNotEquals("Username should have changed", existingUser.getUsername(), editedUser.getUsername()); assertNotEquals("FirstName should have changed", existingUser.getFirstName(), editedUser.getFirstName()); assertNotEquals("LastName should have changed", existingUser.getLastName(), editedUser.getLastName()); assertNotEquals("Active should have changed", existingUser.isEnabled(), editedUser.isEnabled()); assertNotEquals("Email should have changed", existingUser.getEmail(), editedUser.getEmail()); assertNotEquals("EmailVerified should have changed", existingUser.isEmailVerified(), editedUser.isEmailVerified()); assertNotEquals("CreatedTimestamp should have changed", existingUser.getCreatedTimestamp(), editedUser.getCreatedTimestamp()); }
updateUserRepresentation(SystemUser user, UserRepresentation keycloakUser) { if (user != null) { keycloakUser.setUsername(user.getUsername()); keycloakUser.setFirstName(user.getFirstName()); keycloakUser.setLastName(user.getLastName()); keycloakUser.setEnabled(user.getActive()); keycloakUser.setEmail(user.getEmail()); keycloakUser.setEmailVerified(Boolean.TRUE.equals(user.getEmailVerified())); if (user.getCreated() == null) { keycloakUser.setCreatedTimestamp(LocalDateTime.now().toInstant(ZoneOffset.UTC).toEpochMilli()); } else { keycloakUser.setCreatedTimestamp(user.getCreated().toInstant(ZoneOffset.UTC).toEpochMilli()); } // TODO should we attempt to map Cognito UserStatusType to Keycloak Required Actions? if ("FORCE_CHANGE_PASSWORD".equals(user.getStatus())) { keycloakUser.setRequiredActions(List.of("UPDATE_PASSWORD")); } } return keycloakUser; }
[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred: org. junit. Assert. assertNotNull ( editedUser )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation ( existingUser ) )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation ( ) )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation ( username ) )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation ( existenceUser ) )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation ( existedUser ) )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org. junit. Assert. assertTrue ( editedUser. updateUserRepresentation(LocalDateTime.now()); )

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  partner partner partner

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  org

[*] target: assertEquals("Id should not have changed", existingUser.getId(), editedUser.getId())
[-] pred:  )
************************************
************************************
[+] input: testToAttributeValueMap() { Tenant tenant = new Tenant(); LocalDateTime created = LocalDateTime.now(); LocalDateTime modified = LocalDateTime.now();  tenant.setId(tenantId); tenant.setActive(Boolean.TRUE); tenant.setCreated(created); tenant.setModified(modified); tenant.setTier("default"); tenant.setName("Test Tenant"); tenant.setOnboardingStatus("succeeded"); tenant.setBillingPlan("Billing Plan"); tenant.setHostname("test-tenant.saas-example.com"); tenant.setSubdomain("test-tenant"); tenant.setAttributes(attributes); tenant.setResources(resources);  Map<String, AttributeValue> expected = new HashMap<>(); expected.put("id", AttributeValue.builder().s(tenantId.toString()).build()); expected.put("active", AttributeValue.builder().bool(Boolean.TRUE).build()); expected.put("created", AttributeValue.builder().s(created.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); expected.put("modified", AttributeValue.builder().s(modified.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); expected.put("tier", AttributeValue.builder().s("default").build()); expected.put("name", AttributeValue.builder().s("Test Tenant").build()); expected.put("onboarding_status", AttributeValue.builder().s("succeeded").build()); expected.put("hostname", AttributeValue.builder().s("test-tenant.saas-example.com").build()); expected.put("subdomain", AttributeValue.builder().s("test-tenant").build()); expected.put("billing_plan", AttributeValue.builder().s("Billing Plan").build()); expected.put("attributes", AttributeValue.builder().m(attributes.entrySet() .stream() .collect(Collectors.toMap( entry -> entry.getKey(), entry -> AttributeValue.builder().s( String.valueOf(entry.getValue()) ).build() )) ).build()); expected.put("resources", AttributeValue.builder().m(resources.entrySet() .stream() .collect(Collectors.toMap( entry -> entry.getKey(), entry -> AttributeValue.builder().m( Map.of( "name", AttributeValue.builder().s(entry.getValue().getName()).build(), "arn", AttributeValue.builder().s(entry.getValue().getArn()).build(), "consoleUrl", AttributeValue.builder().s(entry.getValue().getConsoleUrl()).build() )).build() )) ).build());  Map<String, AttributeValue> actual = TenantServiceDAL.toAttributeValueMap(tenant);  // DynamoDB marshalling "<AssertPlaceHolder>"; expected.keySet().stream().forEach(key -> { assertEquals("Value mismatch for '" + key + "'", expected.get(key), actual.get(key)); });  // Ignore read only properties from JSON serialization Collection<String> ignoreProperties = new HashSet<>(); try { for (PropertyDescriptor reflection : Introspector.getBeanInfo(Tenant.class).getPropertyDescriptors()) { Method getter = reflection.getReadMethod(); if (getter != null) { JsonProperty jsonProperty = getter.getDeclaredAnnotation(JsonProperty.class); if (jsonProperty != null && jsonProperty.access() == JsonProperty.Access.READ_ONLY) { ignoreProperties.add(reflection.getName()); } } } } catch (IntrospectionException ie) { System.err.println(Utils.getFullStackTrace(ie)); } // Have we reflected all class properties we serialize for API calls in DynamoDB? Map<String, Object> json = Utils.fromJson(Utils.toJson(tenant), LinkedHashMap.class); json.keySet().stream() .filter(key -> !ignoreProperties.contains(key)) .map(key -> Utils.toSnakeCase(key)) .forEach(key -> { assertTrue("Class property '" + key + "' does not exist in DynamoDB attribute map", actual.containsKey(key)); }); }
toAttributeValueMap(Tenant tenant) { Map<String, AttributeValue> item = new HashMap<>(); item.put("id", AttributeValue.builder().s(tenant.getId().toString()).build()); if (tenant.getCreated() != null) { item.put("created", AttributeValue.builder().s(tenant.getCreated().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); } if (tenant.getModified() != null) { item.put("modified", AttributeValue.builder().s(tenant.getModified().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).build()); } if (tenant.getActive() != null) { item.put("active", AttributeValue.builder().bool(tenant.getActive()).build()); } if (Utils.isNotBlank(tenant.getOnboardingStatus())) { item.put("onboarding_status", AttributeValue.builder().s(tenant.getOnboardingStatus()).build()); } if (Utils.isNotBlank(tenant.getName())) { item.put("name", AttributeValue.builder().s(tenant.getName()).build()); } if (Utils.isNotBlank(tenant.getHostname())) { item.put("hostname", AttributeValue.builder().s(tenant.getHostname()).build()); } if (Utils.isNotBlank(tenant.getSubdomain())) { item.put("subdomain", AttributeValue.builder().s(tenant.getSubdomain()).build()); } if (Utils.isNotBlank(tenant.getTier())) { item.put("tier", AttributeValue.builder().s(tenant.getTier()).build()); } if (Utils.isNotBlank(tenant.getBillingPlan())) { item.put("billing_plan", AttributeValue.builder().s(tenant.getBillingPlan()).build()); } if (tenant.getAttributes() != null) { item.put("attributes", AttributeValue.builder().m(tenant.getAttributes().entrySet() .stream() .collect(Collectors.toMap( entry -> entry.getKey(), entry -> AttributeValue.builder().s(entry.getValue()).build() )) ).build() ); } if (tenant.getResources() != null) { item.put("resources", AttributeValue.builder().m(tenant.getResources().entrySet() .stream() .collect(Collectors.toMap( entry -> entry.getKey(), entry -> AttributeValue.builder().m( Map.of( "name", AttributeValue.builder().s(entry.getValue().getName()).build(), "arn", AttributeValue.builder().s(entry.getValue().getArn()).build(), "consoleUrl", AttributeValue.builder().s(entry.getValue().getConsoleUrl()).build() )).build() )) ).build() ); } return item; }
[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( ""1"" ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( ""part"" ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( ""partner"" ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( ""partner"" ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( ""partner"" ) )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  gets the name of the rendered element

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  gets the name of the arc

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  gets the name of the element

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  gets the result of a",
************************************
************************************
[+] input: testMapAttributeExpressionName() { assertThrows(IllegalArgumentException.class, () -> TenantServiceDAL.mapAttributeExpressionName(null)); assertThrows(IllegalArgumentException.class, () -> TenantServiceDAL.mapAttributeExpressionName("")); assertThrows(IllegalArgumentException.class, () -> TenantServiceDAL.mapAttributeExpressionName("  "));  "<AssertPlaceHolder>"; }
mapAttributeExpressionName(String keyName) { if (Utils.isBlank(keyName)) { throw new IllegalArgumentException("Missing arguments"); } return "#" + keyName; }
[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred: org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(nullContig ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( mapAttributeExpressionName(nullContig )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( clazz. mapAttributeExpressionName(String keyName ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(String keyName ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( context. mapAttributeExpressionName(nullContig ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(null classNameId )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( configuration. mapAttributeExpressionName(String keyName ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(nullnull )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(nullnull ) )

[*] target: assertEquals("#ECS_CLUSTER", TenantServiceDAL.mapAttributeExpressionName("ECS_CLUSTER"))
[-] pred:  org. junit. Assert. assertNull ( factory. mapAttributeExpressionName(null"" )
************************************
************************************
[+] input: testFromTenantResourcesChangedEvent() { Map<String, Tenant.Resource> expected = resources; Map<String, Tenant.Resource> actual = TenantService.fromTenantResourcesChangedEvent(event);  "<AssertPlaceHolder>"; expected.keySet().stream().forEach((key) -> { assertEquals("Value mismatch for '" + key + "'", expected.get(key), actual.get(key)); }); }
fromTenantResourcesChangedEvent(Map<String, Object> event) { Map<String, Object> detail = (Map<String, Object>) event.get("detail"); Map<String, Object> resources = Utils.fromJson((String) detail.get("resources"), LinkedHashMap.class); if (resources != null) { return resources.entrySet().stream() .collect(Collectors.toMap( entry -> entry.getKey(), entry -> { Map<String, String> res = (Map<String, String>) entry.getValue(); return new Tenant.Resource(res.get("name"), res.get("arn"), res.get("consoleUrl")); } )); } else { LOGGER.error("Resources is invalid Json"); } return null; }
[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit, Assert. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected and actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit_3. assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual }

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  org. junit, assertEquals ( expected, actual )

[*] target: assertEquals("Size unequal", expected.size(), actual.size())
[-] pred:  , expected )
************************************
************************************
[+] input: testIsProvisioned() { Tenant tenant = new Tenant(); assertFalse("Null onboarding status tenants are not provisioned", tenant.isProvisioned());  Collection<String> provisionedStates = Arrays.asList("created", "validating", "validated", "provisioning", "provisioned", "updating", "updated", "deploying", "deployed"); Collection<String> unProvisionedStates = Arrays.asList("failed", "deleting", "deleted");  for (String onboardingStatus : provisionedStates) { tenant.setOnboardingStatus(onboardingStatus); assertTrue(onboardingStatus + " tenants are provisioned", tenant.isProvisioned()); assertTrue("Serialized tenant has provisioned property", Utils.toJson(tenant).contains(""provisioned":true")); } for (String onboardingStatus : unProvisionedStates) { tenant.setOnboardingStatus(onboardingStatus); assertFalse(onboardingStatus + " tenants are not provisioned", tenant.isProvisioned()); assertTrue("Serialized tenant has provisioned property", Utils.toJson(tenant).contains(""provisioned":false")); }  String json = "{"id":"" + UUID.randomUUID() + """ + ", "active":true" + ", "name":"Unit Test"" + ", "provisioned":true" + "}"; assertFalse("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned());  json = "{"id":"" + UUID.randomUUID() + """ + ", "active":true" + ", "name":"Unit Test"" + ", "provisioned":false" + ", "onboardingStatus": "deployed"" + "}"; "<AssertPlaceHolder>"; }
isProvisioned() { return onboardingStatus != null && !Arrays.asList("failed", "deleting", "deleted").contains(onboardingStatus); }
[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred: org. junit. Assert. assertTrue ( json. isProvisioned() ( ) )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json, isProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json, tenant. isProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json, isProvisioned() ) )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json. isProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json, on. isProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org. junit. Assert. assertTrue ( json, areProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  isProvisioned() )

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  isProvisioned()

[*] target: assertTrue("Deserialized tenant doesn't write provisioned", Utils.fromJson(json, Tenant.class).isProvisioned())
[-] pred:  org
************************************
************************************
[+] input: created_fromTier_null() { Tier nullCreatedTier = Tier.builder(VALID_TIER).created(null).build(); AttributeValue nullCreatedAttributeValue = AttributeValue.builder().s(null).build(); "<AssertPlaceHolder>"; }
fromTier(Tier tier) { // if Tier.created or Tier.modified is null, this might throw a NullPointer return fromTierFunction.apply(tier); }
[*] target: assertEquals(nullCreatedAttributeValue, DynamoTierAttribute.created.fromTier(nullCreatedTier))
[-] pred: org. junit. Assert. assertEquals ( nullCreatedTier, nullCreatedAttributeValue. fromTier(TierTier )

[*] target: assertEquals(nullCreatedAttributeValue, DynamoTierAttribute.created.fromTier(nullCreatedTier))
[-] pred:  org. junit. Assert. assertEquals ( nullCreatedTier, nullCreatedAttributeValue. fromTier(TierTier ) )

[*] target: assertEquals(nullCreatedAttributeValue, DynamoTierAttribute.created.fromTier(nullCreatedTier))
[-] pred:  org. junit. Assert. assertEquals ( nullCreatedTier, nullCreatedAttributeValue. fromTier(TierTier tier )

[*] target: assertEquals(nullCreatedAttributeValue, DynamoTierAttribute.created.fromTier(nullCreatedTier))
[-]
