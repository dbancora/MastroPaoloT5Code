************************************
************************************
[+] input: IOException { List<ExcelDto> excelDtoList = new ArrayList<ExcelDto>(); for(int i = 0; i < 100; i++) { ExcelDto excelDto = new ExcelDto(); excelDto.setFieldString("字符串" + RandomUtil.randomStringFixLength(10)); excelDto.setFieldInteger(RandomUtil.nextInt(1, 100000)); Double doubleValue = RandomUtil.nextDouble(0, 100000); String doubleText = NumericUtil.formatNumericInNeed(String.valueOf(doubleValue), 4); excelDto.setFieldDouble(Double.parseDouble(doubleText)); excelDto.setFieldDate(new Date(System.currentTimeMillis() + i * 60 * 1000)); excelDtoList.add(excelDto); }  Path path = FileUtil.createTempFile(); File file = path.toFile(); ExcelUtil.write(new FileOutputStream(file), excelDtoList);  List<ExcelDto> readExcelDtoList = ExcelUtil.read(new FileInputStream(file), ExcelDto.class); Assert."<AssertPlaceHolder>"; Assert.assertEquals(excelDtoList.size(), readExcelDtoList.size()); for(int i = 0; i < excelDtoList.size(); i++) { ExcelDto originalDto = excelDtoList.get(i); ExcelDto readDto = readExcelDtoList.get(i); Assert.assertEquals(originalDto.getFieldString(), readDto.getFieldString()); Assert.assertEquals(originalDto.getFieldInteger(), readDto.getFieldInteger()); Assert.assertEquals(originalDto.getFieldDouble(), readDto.getFieldDouble()); Assert.assertEquals(originalDto.getFieldDate().getTime(), readDto.getFieldDate().getTime()); } }
read(InputStream inputStream, Class<T> rowType) { if (inputStream == null) { throw new IllegalArgumentException("inputStream must not be null"); } if (rowType == null) { throw new IllegalArgumentException("rowType must not be null"); }  return ExcelReaderFactory.read(inputStream, rowType); }
[*] target: assertNotNull(readExcelDtoList)
[-] pred: org. junit. Assert. assertEquals ( new java. util. HashSet ( java. util. Arrays. asList ( file. get ( 0 ), doubleText ) ), readExcelDtoList )
************************************
************************************
[+] input: testInsertAndRemove() { // Crear un comparador de prioridades Comparator<Integer> comparator = new ComparadorNumeros<>();  // Crear un heap utilizando el árbol binario iterativo HeapUsingIterativeBinaryTree<Integer, String> heap = new HeapUsingIterativeBinaryTree<>(comparator);  // Prueba Insert y remove con elementos heap.Insert(10, "A"); heap.Insert(20, "B"); heap.Insert(15, "C");  assertEquals(3, heap.count());  assertEquals("A", heap.remove()); assertEquals(2, heap.count());  assertEquals("C", heap.remove()); assertEquals(1, heap.count());  assertEquals("B", heap.remove()); "<AssertPlaceHolder>"; }
count() { return _count; }
[*] target: assertEquals(0, heap.count())
[-] pred: org. junit. Assert. assertEquals ( 0, heap. count() ( ) )
************************************
************************************
[+] input: testCreate() { //GIVEN CorporateEdsLoginAuthenticatorFactory factory = new CorporateEdsLoginAuthenticatorFactory();  // Mock the KeycloakSession KeycloakSession session = Mockito.mock(KeycloakSession.class);  //WHEN var authenticator = factory.create(session);  //THEN "<AssertPlaceHolder>"; assertEquals("Class of the created authenticator should be CorporateEdsLoginAuthenticator", CorporateEdsLoginAuthenticator.class, authenticator.getClass()); }
create(KeycloakSession session) { logger.info("Trying to create {} via factory.", this.getClass().getSimpleName()); return SINGLETON; }
[*] target: assertNotNull("Created Authenticator should not be null", authenticator)
[-] pred: org. junit. Assert. assertEquals ( SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON SINGLETON
************************************
************************************
[+] input: testArrayInt0() { Random r = new Random(1); for (int i = 0; i < COUNT; ++i) { int t = 0; ArrayInt ss = new ArrayInt(r.nextInt(INITIAL_SIZE)); for (int j = 0; j < KEYS; ++j) { int v = r.nextInt(KEYS); ss.add(v); t += 1; } assertThat("At least one item should have been added", t, greaterThan(0)); //$NON-NLS-1$ assertThat("Size should equal added items", ss.size(), equalTo(t)); //$NON-NLS-1$ "<AssertPlaceHolder>"; } }
isEmpty() { return size == 0; }
[*] target: assertFalse("Not empty", ss.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( r. isEmpty() ( ) )
************************************
************************************
[+] input: testArrayInt7() { int s1 = HUGE_SIZE; ArrayInt huge = new ArrayInt(s1); assertThat(huge.size(), equalTo(0)); assertTrue(huge.isEmpty()); int s2 = s1 / 3 * 2; for (int i = 0; i < s2; ++i) { huge.add(i * 2); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertThat(huge.size(), equalTo(s2))
[-] pred: org. junit. Assert. assertEquals ( s2, huge. size() )
************************************
************************************
[+] input: testArrayLong0() { Random r = new Random(1); for (int i = 0; i < COUNT; ++i) { int t = 0; ArrayLong ss = new ArrayLong(r.nextInt(INITIAL_SIZE)); for (int j = 0; j < KEYS; ++j) { long v = r.nextLong(); ss.add(v); t += 1; } assertThat("At least one item should have been added", t, greaterThan(0)); //$NON-NLS-1$ assertThat("Size should equal added items", ss.size(), equalTo(t)); //$NON-NLS-1$ "<AssertPlaceHolder>"; //$NON-NLS-1$ } }
isEmpty() { return size == 0; }
[*] target: assertFalse("Not empty", ss.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( r. isEmpty() ( ) )
************************************
************************************
[+] input: testArrayLong7() { int s1 = HUGE_SIZE; ArrayLong huge = new ArrayLong(s1); assertThat(huge.size(), equalTo(0)); assertTrue(huge.isEmpty()); int s2 = s1 / 3 * 2; for (int i = 0; i < s2; ++i) { huge.add(i * 2); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertThat(huge.size(), equalTo(s2))
[-] pred: org. junit. Assert. assertEquals ( s1, huge. size() )
************************************
************************************
[+] input: testQueueInt0() { Random r = new Random(1); for (int i = 0; i < COUNT; ++i) { int t = 0; QueueInt ss = new QueueInt(r.nextInt(INITIAL_SIZE)); for (int j = 0; j < KEYS; ++j) { int v = r.nextInt(KEYS); ss.put(v); t += 1; } assertTrue("At least one item should have been added", t > 0); //$NON-NLS-1$ "<AssertPlaceHolder>"; //$NON-NLS-1$ } }
size() { return size; }
[*] target: assertEquals("Added items should equal size", t, ss.size())
[-] pred: org. junit. Assert. assertTrue ( ( ( t >= 1 ) && ( t <= t ) ) )
************************************
************************************
[+] input: testQueueInt7() { int s1 = HUGE_SIZE; QueueInt huge = new QueueInt(s1); assertThat(huge.size(), equalTo(0)); int s2 = s1 / 3 * 2; for (int i = 0; i < s2; ++i) { huge.put(i * 2); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertThat(huge.size(), equalTo(s2))
[-] pred: org. junit. Assert. assertEquals ( ( s1 + s2 ), huge. size() ( ) )
************************************
************************************
[+] input: testSetInt0() { Random r = new Random(1); for (int i = 0; i < COUNT; ++i) { int t = 0; SetInt ss = new SetInt(r.nextInt(INITIAL_SIZE)); for (int j = 0; j < KEYS; ++j) { int v = r.nextInt(KEYS); t += ss.add(v) ? 1 : 0; } assertTrue("At least one item should have been added", t > 0); //$NON-NLS-1$ "<AssertPlaceHolder>"; //$NON-NLS-1$ } }
size() { return size; }
[*] target: assertEquals("Added items should equal size", t, ss.size())
[-] pred: org. junit. Assert. assertTrue ( ( ( t >= 0 ) && ( t <= t ) ) )
************************************
************************************
[+] input: testSetInt7() { int s1 = HUGE_SIZE; SetInt huge = new SetInt(s1); int s2 = s1 / 3 * 2; for (int i = 0; i < s2; ++i) { huge.add(i * 2); } assertThat(huge.size(), equalTo(s2)); for (int i = 0; i < s2; ++i) { boolean removed = huge.remove(i * 2); assertTrue("Should have removed " + (i * 2), removed); //$NON-NLS-1$ } assertThat(huge.size(), equalTo(0)); "<AssertPlaceHolder>"; }
isEmpty() { return size() == 0; }
[*] target: assertTrue(huge.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( (! removed ) )
************************************
************************************
[+] input: testSetLong0() { Random r = new Random(1); for (int i = 0; i < COUNT; ++i) { int t = 0; SetLong ss = new SetLong(r.nextInt(INITIAL_SIZE)); for (int j = 0; j < KEYS; ++j) { int v = r.nextInt(KEYS); t += ss.add(v) ? 1 : 0; } assertTrue("At least one item should have been added", t > 0); //$NON-NLS-1$ "<AssertPlaceHolder>"; //$NON-NLS-1$ } }
size() { return size; }
[*] target: assertEquals("Added items should equal size", t, ss.size())
[-] pred: org. junit. Assert. assertTrue ( ( ( t >= 0 ) && ( t <= t ) ) )
************************************
************************************
[+] input: testSetLong7() { int s1 = HUGE_SIZE; SetLong huge = new SetLong(s1); int s2 = s1 / 3 * 2; for (int i = 0; i < s2; ++i) { huge.add(i * 2); } assertThat(huge.size(), equalTo(s2)); for (int i = 0; i < s2; ++i) { boolean removed = huge.remove(i * 2); assertTrue("Should have removed " + (i * 2), removed); //$NON-NLS-1$ } assertThat(huge.size(), equalTo(0)); "<AssertPlaceHolder>"; }
isEmpty() { return size() == 0; }
[*] target: assertTrue(huge.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( removed )
************************************
************************************
[+] input: testOQLunion4() { StringBuilder sb = new StringBuilder(); for (int i = 0; i < 20000; ++i) { OQL.union(sb, ("select s from "+i+" s")); } "<AssertPlaceHolder>"; assertTrue(sb.length() < 20000 * 10); }
union(StringBuilder query, String other) { if ((query.length() > 0)) { int end = query.length(); while (query.charAt(end - 1) == ')') { int start = query.lastIndexOf(" UNION (", end - 1); //$NON-NLS-1$ if (start == -1) break; if (union(query, start + 8, end - 1, other)) return; if (start < 1) break; end = start; } if (union(query, 0, end, other)) return; // Default query.append(" UNION (").append(other).append(")"); //$NON-NLS-1$ //$NON-NLS-2$ } else query.append(other); }
[*] target: assertEquals(-1, sb.indexOf("UNION"))
[-] pred: org. junit. Assert. assertTrue ( sb. union(StringBuilder query, JsonObject ( ) )
************************************
************************************
[+] input: SnapshotException { String dump = TestSnapshots.SUN_JDK6_18_32BIT; StringBuilder sb = new StringBuilder(); sb.append("SELECT a.t.s.value FROM OBJECTS (SELECT * FROM OBJECTS ( SELECT (SELECT ${snapshot}.getObject(2839) AS s FROM OBJECTS ( null ) ) AS t FROM OBJECTS ( null ) a  ) a )  a"); OQL.union(sb, "SELECT a.t.s.value FROM OBJECTS (SELECT * FROM OBJECTS ( SELECT (SELECT ${snapshot}.getObject(2896) AS s FROM OBJECTS ( null ) ) AS t FROM OBJECTS ( null ) a  ) a )  a"); OQL.union(sb, "SELECT a.t.s.value FROM OBJECTS (SELECT * FROM OBJECTS ( SELECT (SELECT ${snapshot}.getObject(2796) AS s FROM OBJECTS ( null ) ) AS t FROM OBJECTS ( null ) a  ) a )  a"); String s1 = sb.toString(); "<AssertPlaceHolder>"; assertThat(s1, containsString("2896")); assertThat(s1, containsString("2796")); IResultTable irt = (IResultTable)execute(s1, dump); assertThat(irt.getRowCount(), equalTo(3)); checkGetOQL(irt, dump); }
union(StringBuilder query, String other) { if ((query.length() > 0)) { int end = query.length(); while (query.charAt(end - 1) == ')') { int start = query.lastIndexOf(" UNION (", end - 1); //$NON-NLS-1$ if (start == -1) break; if (union(query, start + 8, end - 1, other)) return; if (start < 1) break; end = start; } if (union(query, 0, end, other)) return; // Default query.append(" UNION (").append(other).append(")"); //$NON-NLS-1$ //$NON-NLS-2$ } else query.append(other); }
[*] target: assertThat(s1, containsString("2839"))
[-] pred: org. junit. Assert. assertEquals ( dump, s1 )
************************************
************************************
[+] input: onlyLocalPlaylists() { final List<PlaylistMetadataEntry> localPlaylists = new ArrayList<>(); final List<PlaylistRemoteEntity> remotePlaylists = new ArrayList<>(); localPlaylists.add(new PlaylistMetadataEntry(1, "name1", "", false, -1, 0, 1)); localPlaylists.add(new PlaylistMetadataEntry(2, "name2", "", false, -1, 1, 1)); localPlaylists.add(new PlaylistMetadataEntry(3, "name3", "", false, -1, 3, 1)); final List<PlaylistLocalItem> mergedPlaylists = MergedPlaylistManager.merge(localPlaylists, remotePlaylists);  assertEquals(3, mergedPlaylists.size()); assertEquals(0, mergedPlaylists.get(0).getDisplayIndex()); assertEquals(1, mergedPlaylists.get(1).getDisplayIndex()); "<AssertPlaceHolder>"; }
getDisplayIndex();
[*] target: assertEquals(3, mergedPlaylists.get(2).getDisplayIndex())
[-] pred: org. junit. Assert. assertThat ( mergedPlaylists. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )
************************************
************************************
[+] input: onlyRemotePlaylists() { final List<PlaylistMetadataEntry> localPlaylists = new ArrayList<>(); final List<PlaylistRemoteEntity> remotePlaylists = new ArrayList<>(); remotePlaylists.add(new PlaylistRemoteEntity( 1, "name1", "url1", "", "", 1, 1L)); remotePlaylists.add(new PlaylistRemoteEntity( 2, "name2", "url2", "", "", 2, 1L)); remotePlaylists.add(new PlaylistRemoteEntity( 3, "name3", "url3", "", "", 4, 1L)); final List<PlaylistLocalItem> mergedPlaylists = MergedPlaylistManager.merge(localPlaylists, remotePlaylists);  assertEquals(3, mergedPlaylists.size()); assertEquals(1, mergedPlaylists.get(0).getDisplayIndex()); assertEquals(2, mergedPlaylists.get(1).getDisplayIndex()); "<AssertPlaceHolder>"; }
getDisplayIndex();
[*] target: assertEquals(4, mergedPlaylists.get(2).getDisplayIndex())
[-] pred: org. junit. Assert. assertThat ( mergedPlaylists. size ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( localPlaylists. size ( ) ) ) )
************************************
************************************
[+] input: getReturnActivity() { Class<? extends Activity> returnActivity; returnActivity = ErrorActivity.getReturnActivity(MainActivity.class); assertEquals(MainActivity.class, returnActivity);  returnActivity = ErrorActivity.getReturnActivity(RouterActivity.class); assertEquals(RouterActivity.class, returnActivity);  returnActivity = ErrorActivity.getReturnActivity(null); assertNull(returnActivity);  returnActivity = ErrorActivity.getReturnActivity(Integer.class); assertEquals(MainActivity.class, returnActivity);  returnActivity = ErrorActivity.getReturnActivity(VideoDetailFragment.class); "<AssertPlaceHolder>"; }
getReturnActivity(final Class<?> returnActivity) { Class<? extends Activity> checkedReturnActivity = null; if (returnActivity != null) { if (Activity.class.isAssignableFrom(returnActivity)) { checkedReturnActivity = returnActivity.asSubclass(Activity.class); } else { checkedReturnActivity = MainActivity.class; } } return checkedReturnActivity; }
[*] target: assertEquals(MainActivity.class, returnActivity)
[-] pred: org. junit. Assert. assertEquals ( returnActivity, returnActivity. getReturnActivity(VideoDetailFragment.class, returnActivity )
************************************
************************************
[+] input: negative() { nonEmptyQueue.setIndex(-5); assertEquals(0, nonEmptyQueue.getIndex());  emptyQueue.setIndex(-5); "<AssertPlaceHolder>"; }
getIndex() { return queueIndex.get(); }
[*] target: assertEquals(0, nonEmptyQueue.getIndex())
[-] pred: org. junit. Assert. assertEquals ( 50, emptyQueue.setIndex (-5 ) )
************************************
************************************
[+] input: outOfBoundIsComplete() { doReturn(true).when(nonEmptyQueue).isComplete(); nonEmptyQueue.setIndex(7); assertEquals(2, nonEmptyQueue.getIndex());  doReturn(true).when(emptyQueue).isComplete(); emptyQueue.setIndex(2); "<AssertPlaceHolder>"; }
getIndex() { return queueIndex.get(); }
[*] target: assertEquals(0, emptyQueue.getIndex())
[-] pred: org. junit. Assert. assertThat ( assertEquals ( getIndex(), org. hamcrest. CoreMatchers. is ( 20 ) )
************************************
************************************
[+] input: outOfBoundsNotComplete() { doReturn(false).when(nonEmptyQueue).isComplete(); nonEmptyQueue.setIndex(7); assertEquals(SIZE - 1, nonEmptyQueue.getIndex());  doReturn(false).when(emptyQueue).isComplete(); emptyQueue.setIndex(2); "<AssertPlaceHolder>"; }
getIndex() { return queueIndex.get(); }
[*] target: assertEquals(0, emptyQueue.getIndex())
[-] pred: org. junit. Assert. assertThat ( function. getIndex() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( 1 ) ) )
************************************
************************************
[+] input: indexZero() { nonEmptyQueue.setIndex(0); assertEquals(0, nonEmptyQueue.getIndex());  doReturn(true).when(emptyQueue).isComplete(); emptyQueue.setIndex(0); assertEquals(0, emptyQueue.getIndex());  doReturn(false).when(emptyQueue).isComplete(); emptyQueue.setIndex(0); "<AssertPlaceHolder>"; }
getIndex() { return queueIndex.get(); }
[*] target: assertEquals(0, emptyQueue.getIndex())
[-] pred: org. junit. Assert. assertEquals ( 0, emptyQueue. getIndex(). getIndex() ( ) )
************************************
************************************
[+] input: addToHistory() { nonEmptyQueue.setIndex(0); assertFalse(nonEmptyQueue.previous());  nonEmptyQueue.setIndex(3); assertTrue(nonEmptyQueue.previous()); "<AssertPlaceHolder>"; }
getItem() { return getItem(getIndex()); }
[*] target: assertEquals("URL_0", Objects.requireNonNull(nonEmptyQueue.getItem()).getUrl())
[-] pred: org. junit. Assert. assertThat ( nonEmptyQueue. getItem() ( ), org. hamcrest. CoreMatchers. is ((0); ) )
************************************
************************************
[+] input: outOfBounds() { assertNull(queue.getItem(-1)); "<AssertPlaceHolder>"; }
getItem(final int index) { if (index < 0 || index >= streams.size()) { return null; } return streams.get(index); }
[*] target: assertNull(queue.getItem(5))
[-] pred: org. junit. Assert. assertNull ( clazz. getItem(final int index )
************************************
************************************
[+] input: sameStreams() { final List<PlayQueueItem> streams = Collections.nCopies(5, item1); final PlayQueue queue1 = makePlayQueue(0, streams); final PlayQueue queue2 = makePlayQueue(0, streams); assertTrue(queue1.equalStreams(queue2)); "<AssertPlaceHolder>"; }
equalStreamsAndIndex(@Nullable final PlayQueue other) { if (equalStreams(other)) { //noinspection ConstantConditions return other.getIndex() == getIndex(); //NOSONAR: other is not null } return false; }
[*] target: assertTrue(queue1.equalStreamsAndIndex(queue2))
[-] pred: org. junit. Assert. assertTrue ( streams. equalStreamsAndIndex(@Nullable final PlayQueue2 ) )
************************************
************************************
[+] input: sameStreamsDifferentIndex() { final List<PlayQueueItem> streams = Collections.nCopies(5, item1); final PlayQueue queue1 = makePlayQueue(1, streams); final PlayQueue queue2 = makePlayQueue(4, streams); assertTrue(queue1.equalStreams(queue2)); "<AssertPlaceHolder>"; }
equalStreamsAndIndex(@Nullable final PlayQueue other) { if (equalStreams(other)) { //noinspection ConstantConditions return other.getIndex() == getIndex(); //NOSONAR: other is not null } return false; }
[*] target: assertFalse(queue1.equalStreamsAndIndex(queue2))
[-] pred: org. junit. Assert. assertTrue ( queue1. equalStreamsAndIndex(@Nullable final PlayQueue2 ) )
************************************
************************************
[+] input: TabsJsonHelper.InvalidJsonException { final List<Tab> defaultTabs = TabsJsonHelper.getDefaultTabs();  final String emptyTabsJson = "{"" + JSON_TABS_ARRAY_KEY + "":[]}"; List<Tab> items = TabsJsonHelper.getTabsFromJson(emptyTabsJson); assertEquals(items, defaultTabs);  final String nullSource = null; items = TabsJsonHelper.getTabsFromJson(nullSource); "<AssertPlaceHolder>"; }
getTabsFromJson(@Nullable final String tabsJson) throws InvalidJsonException { if (tabsJson == null || tabsJson.isEmpty()) { return getDefaultTabs(); }  final List<Tab> returnTabs = new ArrayList<>();  final JsonObject outerJsonObject; try { outerJsonObject = JsonParser.object().from(tabsJson);  if (!outerJsonObject.has(JSON_TABS_ARRAY_KEY)) { throw new InvalidJsonException("JSON doesn't contain "" + JSON_TABS_ARRAY_KEY + "" array"); }  final JsonArray tabsArray = outerJsonObject.getArray(JSON_TABS_ARRAY_KEY);  for (final Object o : tabsArray) { if (!(o instanceof JsonObject)) { continue; }  final Tab tab = Tab.from((JsonObject) o);  if (tab != null) { returnTabs.add(tab); } } } catch (final JsonParserException e) { throw new InvalidJsonException(e); }  if (returnTabs.isEmpty()) { return getDefaultTabs(); }  return returnTabs; }
[*] target: assertEquals(items, defaultTabs)
[-] pred: org. junit. Assert. assertEquals ( emptyTabsJson, nullSource )
************************************
************************************
[+] input: TabsJsonHelper.InvalidJsonException { final int blankTabId = Tab.Type.BLANK.getTabId(); final String emptyTabsJson = "{"" + JSON_TABS_ARRAY_KEY + "":[" + "{"" + JSON_TAB_ID_KEY + "":" + blankTabId + "}," + "{"" + JSON_TAB_ID_KEY + "":" + 12345678 + "}" + "]}"; final List<Tab> items = TabsJsonHelper.getTabsFromJson(emptyTabsJson);  "<AssertPlaceHolder>"; assertEquals(blankTabId, items.get(0).getTabId()); }
getTabsFromJson(@Nullable final String tabsJson) throws InvalidJsonException { if (tabsJson == null || tabsJson.isEmpty()) { return getDefaultTabs(); }  final List<Tab> returnTabs = new ArrayList<>();  final JsonObject outerJsonObject; try { outerJsonObject = JsonParser.object().from(tabsJson);  if (!outerJsonObject.has(JSON_TABS_ARRAY_KEY)) { throw new InvalidJsonException("JSON doesn't contain "" + JSON_TABS_ARRAY_KEY + "" array"); }  final JsonArray tabsArray = outerJsonObject.getArray(JSON_TABS_ARRAY_KEY);  for (final Object o : tabsArray) { if (!(o instanceof JsonObject)) { continue; }  final Tab tab = Tab.from((JsonObject) o);  if (tab != null) { returnTabs.add(tab); } } } catch (final JsonParserException e) { throw new InvalidJsonException(e); }  if (returnTabs.isEmpty()) { return getDefaultTabs(); }  return returnTabs; }
[*] target: assertEquals("Should ignore the tab with invalid id", 1, items.size())
[-] pred: org. junit. Assert. assertEquals ( new java. util. ArrayList < org. bpm. py. redis. connection. Entity<sp>get(0).getTabId ), new java. util. ArrayList < org. apache. hadoop. fs. Path ( items ) )
************************************
************************************
[+] input: JsonParserException { final List<Tab> emptyList = Collections.emptyList(); String returnedJson = TabsJsonHelper.getJsonToSave(emptyList); assertTrue(isTabsArrayEmpty(returnedJson));  final List<Tab> nullList = null; returnedJson = TabsJsonHelper.getJsonToSave(nullList); "<AssertPlaceHolder>"; }
getJsonToSave(@Nullable final List<Tab> tabList) { final JsonStringWriter jsonWriter = JsonWriter.string(); jsonWriter.object();  jsonWriter.array(JSON_TABS_ARRAY_KEY); if (tabList != null) { for (final Tab tab : tabList) { tab.writeJsonOn(jsonWriter); } } jsonWriter.end();  jsonWriter.end(); return jsonWriter.done(); }
[*] target: assertTrue(isTabsArrayEmpty(returnedJson))
[-] pred: org. junit. Assert. assertEquals ( returnedJson, returnedJson )
************************************
************************************
[+] input: JsonParserException { // Saving final Tab.BlankTab blankTab = new Tab.BlankTab(); final Tab.DefaultKioskTab defaultKioskTab = new Tab.DefaultKioskTab(); final Tab.SubscriptionsTab subscriptionsTab = new Tab.SubscriptionsTab(); final Tab.ChannelTab channelTab = new Tab.ChannelTab( 666, "https://example.org", "testName"); final Tab.KioskTab kioskTab = new Tab.KioskTab(123, "trending_key");  final List<Tab> tabs = Arrays.asList( blankTab, defaultKioskTab, subscriptionsTab, channelTab, kioskTab); final String returnedJson = TabsJsonHelper.getJsonToSave(tabs);  // Reading final JsonObject jsonObject = JsonParser.object().from(returnedJson); "<AssertPlaceHolder>"; final JsonArray tabsFromArray = jsonObject.getArray(JSON_TABS_ARRAY_KEY);  assertEquals(tabs.size(), tabsFromArray.size());  final Tab.BlankTab blankTabFromReturnedJson = requireNonNull((Tab.BlankTab) Tab.from( (JsonObject) tabsFromArray.get(0))); assertEquals(blankTab.getTabId(), blankTabFromReturnedJson.getTabId());  final Tab.DefaultKioskTab defaultKioskTabFromReturnedJson = requireNonNull( (Tab.DefaultKioskTab) Tab.from((JsonObject) tabsFromArray.get(1))); assertEquals(defaultKioskTab.getTabId(), defaultKioskTabFromReturnedJson.getTabId());  final Tab.SubscriptionsTab subscriptionsTabFromReturnedJson = requireNonNull( (Tab.SubscriptionsTab) Tab.from((JsonObject) tabsFromArray.get(2))); assertEquals(subscriptionsTab.getTabId(), subscriptionsTabFromReturnedJson.getTabId());  final Tab.ChannelTab channelTabFromReturnedJson = requireNonNull((Tab.ChannelTab) Tab.from( (JsonObject) tabsFromArray.get(3))); assertEquals(channelTab.getTabId(), channelTabFromReturnedJson.getTabId()); assertEquals(channelTab.getChannelServiceId(), channelTabFromReturnedJson.getChannelServiceId()); assertEquals(channelTab.getChannelUrl(), channelTabFromReturnedJson.getChannelUrl()); assertEquals(channelTab.getChannelName(), channelTabFromReturnedJson.getChannelName());  final Tab.KioskTab kioskTabFromReturnedJson = requireNonNull((Tab.KioskTab) Tab.from( (JsonObject) tabsFromArray.get(4))); assertEquals(kioskTab.getTabId(), kioskTabFromReturnedJson.getTabId()); assertEquals(kioskTab.getKioskServiceId(), kioskTabFromReturnedJson.getKioskServiceId()); assertEquals(kioskTab.getKioskId(), kioskTabFromReturnedJson.getKioskId()); }
getJsonToSave(@Nullable final List<Tab> tabList) { final JsonStringWriter jsonWriter = JsonWriter.string(); jsonWriter.object();  jsonWriter.array(JSON_TABS_ARRAY_KEY); if (tabList != null) { for (final Tab tab : tabList) { tab.writeJsonOn(jsonWriter); } } jsonWriter.end();  jsonWriter.end(); return jsonWriter.done(); }
[*] target: assertTrue(jsonObject.containsKey(JSON_TABS_ARRAY_KEY))
[-] pred: org. junit. Assert. assertTrue ( returnedJson. contains ( final JsonObject ) )
************************************
************************************
[+] input: getSortedStreamVideosListTest() { List<VideoStream> result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, true, VIDEO_STREAMS_TEST_LIST, VIDEO_ONLY_STREAMS_TEST_LIST, true, false);  List<String> expected = List.of("144p", "240p", "360p", "480p", "720p", "720p60", "1080p", "1080p60", "1440p60", "2160p", "2160p60");  assertEquals(expected.size(), result.size()); for (int i = 0; i < result.size(); i++) { assertEquals(result.get(i).getResolution(), expected.get(i)); assertEquals(expected.get(i), result.get(i).getResolution()); }  //////////////////// // Reverse Order // //////////////////  result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, true, VIDEO_STREAMS_TEST_LIST, VIDEO_ONLY_STREAMS_TEST_LIST, false, false); expected = List.of("2160p60", "2160p", "1440p60", "1080p60", "1080p", "720p60", "720p", "480p", "360p", "240p", "144p"); "<AssertPlaceHolder>"; for (int i = 0; i < result.size(); i++) { assertEquals(expected.get(i), result.get(i).getResolution()); } }
getSortedStreamVideosList( @Nullable final MediaFormat defaultFormat, final boolean showHigherResolutions, @Nullable final List<VideoStream> videoStreams, @Nullable final List<VideoStream> videoOnlyStreams, final boolean ascendingOrder, final boolean preferVideoOnlyStreams ) { // Determine order of streams // The last added list is preferred final List<List<VideoStream>> videoStreamsOrdered = preferVideoOnlyStreams ? Arrays.asList(videoStreams, videoOnlyStreams) : Arrays.asList(videoOnlyStreams, videoStreams);  final List<VideoStream> allInitialStreams = videoStreamsOrdered.stream() // Ignore lists that are null .filter(Objects::nonNull) .flatMap(List::stream) // Filter out higher resolutions (or not if high resolutions should always be shown) .filter(stream -> showHigherResolutions || !HIGH_RESOLUTION_LIST.contains(stream.getResolution() // Replace any frame rate with nothing .replaceAll("p\\d+$", "p"))) .collect(Collectors.toList());  final HashMap<String, VideoStream> hashMap = new HashMap<>(); // Add all to the hashmap for (final VideoStream videoStream : allInitialStreams) { hashMap.put(videoStream.getResolution(), videoStream); }  // Override the values when the key == resolution, with the defaultFormat for (final VideoStream videoStream : allInitialStreams) { if (videoStream.getFormat() == defaultFormat) { hashMap.put(videoStream.getResolution(), videoStream); } }  // Return the sorted list return sortStreamList(new ArrayList<>(hashMap.values()), ascendingOrder); }
[*] target: assertEquals(expected.size(), result.size())
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getSortedStreamVideosListWithPreferVideoOnlyStreamsTest() { List<VideoStream> result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, true, null, VIDEO_ONLY_STREAMS_TEST_LIST, true, true);  List<String> expected = List.of("720p", "720p60", "1080p", "1080p60", "1440p60", "2160p", "2160p60");  assertEquals(expected.size(), result.size()); for (int i = 0; i < result.size(); i++) { assertEquals(expected.get(i), result.get(i).getResolution()); assertTrue(result.get(i).isVideoOnly()); }  ////////////////////////////////////////////////////////// // No video only streams -> should return mixed streams // //////////////////////////////////////////////////////////  result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, true, VIDEO_STREAMS_TEST_LIST, null, false, true); expected = List.of("720p", "480p", "360p", "240p", "144p"); assertEquals(expected.size(), result.size()); for (int i = 0; i < result.size(); i++) { assertEquals(expected.get(i), result.get(i).getResolution()); assertFalse(result.get(i).isVideoOnly()); }  ///////////////////////////////////////////////////////////////// // Both types of  streams -> should return correct one streams // /////////////////////////////////////////////////////////////////  result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, true, VIDEO_STREAMS_TEST_LIST, VIDEO_ONLY_STREAMS_TEST_LIST, true, true); expected = List.of("144p", "240p", "360p", "480p", "720p", "720p60", "1080p", "1080p60", "1440p60", "2160p", "2160p60"); final List<String> expectedVideoOnly = List.of("720p", "720p60", "1080p", "1080p60", "1440p60", "2160p", "2160p60");  "<AssertPlaceHolder>"; for (int i = 0; i < result.size(); i++) { assertEquals(expected.get(i), result.get(i).getResolution()); assertEquals(expectedVideoOnly.contains(result.get(i).getResolution()), result.get(i).isVideoOnly()); } }
getSortedStreamVideosList( @Nullable final MediaFormat defaultFormat, final boolean showHigherResolutions, @Nullable final List<VideoStream> videoStreams, @Nullable final List<VideoStream> videoOnlyStreams, final boolean ascendingOrder, final boolean preferVideoOnlyStreams ) { // Determine order of streams // The last added list is preferred final List<List<VideoStream>> videoStreamsOrdered = preferVideoOnlyStreams ? Arrays.asList(videoStreams, videoOnlyStreams) : Arrays.asList(videoOnlyStreams, videoStreams);  final List<VideoStream> allInitialStreams = videoStreamsOrdered.stream() // Ignore lists that are null .filter(Objects::nonNull) .flatMap(List::stream) // Filter out higher resolutions (or not if high resolutions should always be shown) .filter(stream -> showHigherResolutions || !HIGH_RESOLUTION_LIST.contains(stream.getResolution() // Replace any frame rate with nothing .replaceAll("p\\d+$", "p"))) .collect(Collectors.toList());  final HashMap<String, VideoStream> hashMap = new HashMap<>(); // Add all to the hashmap for (final VideoStream videoStream : allInitialStreams) { hashMap.put(videoStream.getResolution(), videoStream); }  // Override the values when the key == resolution, with the defaultFormat for (final VideoStream videoStream : allInitialStreams) { if (videoStream.getFormat() == defaultFormat) { hashMap.put(videoStream.getResolution(), videoStream); } }  // Return the sorted list return sortStreamList(new ArrayList<>(hashMap.values()), ascendingOrder); }
[*] target: assertEquals(expected.size(), result.size())
[-] pred: org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( expected ) )
************************************
************************************
[+] input: getSortedStreamVideosExceptHighResolutionsTest() { //////////////////////////////////// // Don't show Higher resolutions // //////////////////////////////////  final List<VideoStream> result = ListHelper.getSortedStreamVideosList(MediaFormat.MPEG_4, false, VIDEO_STREAMS_TEST_LIST, VIDEO_ONLY_STREAMS_TEST_LIST, false, false); final List<String> expected = List.of( "1080p60", "1080p", "720p60", "720p", "480p", "360p", "240p", "144p"); "<AssertPlaceHolder>"; for (int i = 0; i < result.size(); i++) { assertEquals(expected.get(i), result.get(i).getResolution()); } }
getSortedStreamVideosList( @Nullable final MediaFormat defaultFormat, final boolean showHigherResolutions, @Nullable final List<VideoStream> videoStreams, @Nullable final List<VideoStream> videoOnlyStreams, final boolean ascendingOrder, final boolean preferVideoOnlyStreams ) { // Determine order of streams // The last added list is preferred final List<List<VideoStream>> videoStreamsOrdered = preferVideoOnlyStreams ? Arrays.asList(videoStreams, videoOnlyStreams) : Arrays.asList(videoOnlyStreams, videoStreams);  final List<VideoStream> allInitialStreams = videoStreamsOrdered.stream() // Ignore lists that are null .filter(Objects::nonNull) .flatMap(List::stream) // Filter out higher resolutions (or not if high resolutions should always be shown) .filter(stream -> showHigherResolutions || !HIGH_RESOLUTION_LIST.contains(stream.getResolution() // Replace any frame rate with nothing .replaceAll("p\\d+$", "p"))) .collect(Collectors.toList());  final HashMap<String, VideoStream> hashMap = new HashMap<>(); // Add all to the hashmap for (final VideoStream videoStream : allInitialStreams) { hashMap.put(videoStream.getResolution(), videoStream); }  // Override the values when the key == resolution, with the defaultFormat for (final VideoStream videoStream : allInitialStreams) { if (videoStream.getFormat() == defaultFormat) { hashMap.put(videoStream.getResolution(), videoStream); } }  // Return the sorted list return sortStreamList(new ArrayList<>(hashMap.values()), ascendingOrder); }
[*] target: assertEquals(expected.size(), result.size())
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getHighestQualityAudioFormatTest() { Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(MediaFormat.M4A, false); AudioStream stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); assertEquals(320, stream.getAverageBitrate()); assertEquals(MediaFormat.M4A, stream.getFormat());  cmp = ListHelper.getAudioFormatComparator(MediaFormat.WEBMA, false); stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); assertEquals(320, stream.getAverageBitrate()); assertEquals(MediaFormat.WEBMA, stream.getFormat());  cmp = ListHelper.getAudioFormatComparator(MediaFormat.MP3, false); stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); "<AssertPlaceHolder>"; assertEquals(MediaFormat.MP3, stream.getFormat()); }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(192, stream.getAverageBitrate())
[-] pred: org. junit. Assert. assertEquals ( Control, stream. getAudioIndex ( ) )
************************************
************************************
[+] input: getHighestQualityAudioFormatPreferredAbsent() { final Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(MediaFormat.MP3, false);  ////////////////////////////////////////// // Doesn't contain the preferred format // ////////////////////////////////////////  List<AudioStream> testList = List.of( generateAudioStream("m4a-128", MediaFormat.M4A, 128), generateAudioStream("webma-192", MediaFormat.WEBMA, 192)); // List doesn't contains this format // It should fallback to the highest bitrate audio no matter what format it is AudioStream stream = testList.get(ListHelper.getAudioIndexByHighestRank(testList, cmp)); assertEquals(192, stream.getAverageBitrate()); assertEquals(MediaFormat.WEBMA, stream.getFormat());  //////////////////////////////////////////////////////// // Multiple not-preferred-formats and equal bitrates // //////////////////////////////////////////////////////  testList = new ArrayList<>(List.of( generateAudioStream("webma-192-1", MediaFormat.WEBMA, 192), generateAudioStream("m4a-192-1", MediaFormat.M4A, 192), generateAudioStream("webma-192-2", MediaFormat.WEBMA, 192), generateAudioStream("m4a-192-2", MediaFormat.M4A, 192), generateAudioStream("webma-192-3", MediaFormat.WEBMA, 192), generateAudioStream("m4a-192-3", MediaFormat.M4A, 192), generateAudioStream("webma-192-4", MediaFormat.WEBMA, 192))); // List doesn't contains this format, it should fallback to the highest bitrate audio and // the highest quality format. stream = testList.get(ListHelper.getAudioIndexByHighestRank(testList, cmp)); assertEquals(192, stream.getAverageBitrate()); assertEquals(MediaFormat.M4A, stream.getFormat());  // Adding a new format and bitrate. Adding another stream will have no impact since // it's not a preferred format. testList.add(generateAudioStream("webma-192-5", MediaFormat.WEBMA, 192)); stream = testList.get(ListHelper.getAudioIndexByHighestRank(testList, cmp)); "<AssertPlaceHolder>"; assertEquals(MediaFormat.M4A, stream.getFormat()); }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(192, stream.getAverageBitrate())
[-] pred: org. junit. Assert. assertNull ( stream )
************************************
************************************
[+] input: getHighestQualityAudioNull() { final Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(null, false); assertEquals(-1, ListHelper.getAudioIndexByHighestRank(null, cmp)); "<AssertPlaceHolder>"; }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(-1, ListHelper.getAudioIndexByHighestRank(new ArrayList<>(), cmp))
[-] pred: org. junit. Assert. assertEquals ( null, cmp. getAudioIndexByHighestRank(null, cmp)); "<
************************************
************************************
[+] input: getLowestQualityAudioFormatTest() { Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(MediaFormat.M4A, true); AudioStream stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); assertEquals(128, stream.getAverageBitrate()); assertEquals(MediaFormat.M4A, stream.getFormat());  cmp = ListHelper.getAudioFormatComparator(MediaFormat.WEBMA, true); stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); assertEquals(64, stream.getAverageBitrate()); assertEquals(MediaFormat.WEBMA, stream.getFormat());  cmp = ListHelper.getAudioFormatComparator(MediaFormat.MP3, true); stream = AUDIO_STREAMS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_STREAMS_TEST_LIST, cmp)); "<AssertPlaceHolder>"; assertEquals(MediaFormat.MP3, stream.getFormat()); }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(64, stream.getAverageBitrate())
[-] pred: org. junit. Assert. assertTrue ( stream. getAudioIndex ( ).()); ( ) )
************************************
************************************
[+] input: getLowestQualityAudioFormatPreferredAbsent() { Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(MediaFormat.MP3, true);  ////////////////////////////////////////// // Doesn't contain the preferred format // ////////////////////////////////////////  List<AudioStream> testList = new ArrayList<>(List.of( generateAudioStream("m4a-128", MediaFormat.M4A, 128), generateAudioStream("webma-192-1", MediaFormat.WEBMA, 192))); // List doesn't contains this format // It should fallback to the most compact audio no matter what format it is. AudioStream stream = testList.get(ListHelper.getAudioIndexByHighestRank(testList, cmp)); assertEquals(128, stream.getAverageBitrate()); assertEquals(MediaFormat.M4A, stream.getFormat());  // WEBMA is more compact than M4A testList.add(generateAudioStream("webma-192-2", MediaFormat.WEBMA, 128)); stream = testList.get(ListHelper.getAudioIndexByHighestRank(testList, cmp)); assertEquals(128, stream.getAverageBitrate()); assertEquals(MediaFormat.WEBMA, stream.getFormat());  //////////////////////////////////////////////////////// // Multiple not-preferred-formats and equal bitrates // //////////////////////////////////////////////////////  testList = new ArrayList<>(List.of( generateAudioStream("webma-192-1", MediaFormat.WEBMA, 192), generateAudioStream("m4a-192-1",   MediaFormat.M4A, 192), generateAudioStream("webma-256", MediaFormat.WEBMA, 256), generateAudioStream("m4a-192-2", MediaFormat.M4A, 192), generateAudioStream("webma-192-2", MediaFormat.WEBMA, 192), generateAudioStream("m4a-192-3", MediaFormat.M4A, 192))); // List doesn't contain this format // It should fallback to the most compact audio no matter what format it is. stream = testList.get( ListHelper.getAudioIndexByHighestRank(testList, cmp)); assertEquals(192, stream.getAverageBitrate()); assertEquals(MediaFormat.WEBMA, stream.getFormat());  // Should be same as above cmp = ListHelper.getAudioFormatComparator(null, true); stream = testList.get( ListHelper.getAudioIndexByHighestRank(testList, cmp)); "<AssertPlaceHolder>"; assertEquals(MediaFormat.WEBMA, stream.getFormat()); }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(192, stream.getAverageBitrate())
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )
************************************
************************************
[+] input: getLowestQualityAudioNull() { final Comparator<AudioStream> cmp = ListHelper.getAudioFormatComparator(null, false); assertEquals(-1, ListHelper.getAudioIndexByHighestRank(null, cmp)); "<AssertPlaceHolder>"; }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals(-1, ListHelper.getAudioIndexByHighestRank(new ArrayList<>(), cmp))
[-] pred: org. junit. Assert. assertEquals ( null, impl. getAudioIndexByHighestRank(null, cmp)); "< 0 ) )
************************************
************************************
[+] input: getAudioTrack() { // English language Comparator<AudioStream> cmp = ListHelper.getAudioTrackComparator(Locale.ENGLISH, false, false); AudioStream stream = AUDIO_TRACKS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_TRACKS_TEST_LIST, cmp)); assertEquals("en.or", stream.getId());  // German language cmp = ListHelper.getAudioTrackComparator(Locale.GERMAN, false, false); stream = AUDIO_TRACKS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_TRACKS_TEST_LIST, cmp)); assertEquals("de.du", stream.getId());  // German language, but prefer original cmp = ListHelper.getAudioTrackComparator(Locale.GERMAN, true, false); stream = AUDIO_TRACKS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_TRACKS_TEST_LIST, cmp)); assertEquals("en.or", stream.getId());  // Prefer descriptive audio cmp = ListHelper.getAudioTrackComparator(Locale.ENGLISH, false, true); stream = AUDIO_TRACKS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_TRACKS_TEST_LIST, cmp)); assertEquals("en.ds", stream.getId());  // Japanese language, fall back to original cmp = ListHelper.getAudioTrackComparator(Locale.JAPANESE, true, false); stream = AUDIO_TRACKS_TEST_LIST.get(ListHelper.getAudioIndexByHighestRank( AUDIO_TRACKS_TEST_LIST, cmp)); "<AssertPlaceHolder>"; }
getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams, final Comparator<AudioStream> comparator) { if (audioStreams == null || audioStreams.isEmpty()) { return -1; }  final AudioStream highestRankedAudioStream = audioStreams.stream() .max(comparator).orElse(null);  return audioStreams.indexOf(highestRankedAudioStream); }
[*] target: assertEquals("en.or", stream.getId())
[-] pred: org. junit. Assert. assertEquals ( stream. getAudioIndexByHighestRankedAudioStream ( ), stream. getAudioIndex ( ) )
************************************
************************************
[+] input: testExtract() { final Matcher m = TimestampExtractor.TIMESTAMPS_PATTERN.matcher(this.stringToProcess);  if (!m.find()) { if (expected == null) { return; } fail("No match found but expected one"); }  final TimestampExtractor.TimestampMatchDTO timestampMatchDTO = TimestampExtractor .getTimestampFromMatcher(m, this.stringToProcess);  if (timestampMatchDTO == null) { if (expected == null) { return; } fail("Result shouldn't be null"); } else if (expected == null) { assertNull("Expected that the dto is null, but it isn't", timestampMatchDTO); return; }  final int actualSeconds = timestampMatchDTO.seconds();  "<AssertPlaceHolder>"; }
seconds() { return seconds; }
[*] target: assertEquals(expected.getSeconds(), actualSeconds)
[-] pred: org. junit. Assert. assertTrue ( ( ( m. seconds() ( actualSeconds ) ) > 0 ) )
************************************
************************************
[+] input: test0() { DogDay d = SolarDay.fromYmd(2011, 7, 14).getDogDay(); Assert.assertEquals("初伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("初伏第1天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("初伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test1() { DogDay d = SolarDay.fromYmd(2011, 7, 23).getDogDay(); Assert.assertEquals("初伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("初伏第10天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("初伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test2() { DogDay d = SolarDay.fromYmd(2011, 7, 24).getDogDay(); Assert.assertEquals("中伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("中伏第1天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("中伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test3() { DogDay d = SolarDay.fromYmd(2011, 8, 12).getDogDay(); Assert.assertEquals("中伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("中伏第20天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("中伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test4() { DogDay d = SolarDay.fromYmd(2011, 8, 13).getDogDay(); Assert.assertEquals("末伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("末伏第1天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("末伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test5() { DogDay d = SolarDay.fromYmd(2011, 8, 22).getDogDay(); Assert.assertEquals("末伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("末伏第10天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("末伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test8() { DogDay d = SolarDay.fromYmd(2012, 7, 18).getDogDay(); Assert.assertEquals("初伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("初伏第1天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("初伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test9() { DogDay d = SolarDay.fromYmd(2012, 8, 5).getDogDay(); Assert.assertEquals("中伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("中伏第9天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("中伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test10() { DogDay d = SolarDay.fromYmd(2012, 8, 8).getDogDay(); Assert.assertEquals("末伏", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("末伏第2天", d.toString()); }
getDog() { return (Dog)culture; }
[*] target: assertEquals("末伏", d.getDog().toString())
[-] pred: org. junit. Assert. assertThat ( d. getDog() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test0() { TwelveStar star = SolarDay.fromYmd(2023, 10, 30).getLunarDay().getTwelveStar(); Assert.assertEquals("天德", star.getName()); Assert.assertEquals("黄道", star.getEcliptic().getName()); Assert."<AssertPlaceHolder>"; }
getLuck() { return Luck.fromIndex(index); }
[*] target: assertEquals("吉", star.getEcliptic().getLuck().getName())
[-] pred: org. junit. Assert. assertThat ( star. getLuck() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test1() { TwelveStar star = SolarDay.fromYmd(2023, 10, 19).getLunarDay().getTwelveStar(); Assert.assertEquals("白虎", star.getName()); Assert.assertEquals("黑道", star.getEcliptic().getName()); Assert."<AssertPlaceHolder>"; }
getLuck() { return Luck.fromIndex(index); }
[*] target: assertEquals("凶", star.getEcliptic().getLuck().getName())
[-] pred: org. junit. Assert. assertThat ( star. getLuck() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test2() { TwelveStar star = SolarDay.fromYmd(2023, 10, 7).getLunarDay().getTwelveStar(); Assert.assertEquals("天牢", star.getName()); Assert.assertEquals("黑道", star.getEcliptic().getName()); Assert."<AssertPlaceHolder>"; }
getLuck() { return Luck.fromIndex(index); }
[*] target: assertEquals("凶", star.getEcliptic().getLuck().getName())
[-] pred: org. junit. Assert. assertThat ( star. getLuck() ( ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test3() { TwelveStar star = SolarDay.fromYmd(2023, 10, 8).getLunarDay().getTwelveStar(); Assert.assertEquals("玉堂", star.getName()); Assert.assertEquals("黄道", star.getEcliptic().getName()); Assert."<AssertPlaceHolder>"; }
getLuck() { return Luck.fromIndex(index); }
[*] target: assertEquals("吉", star.getEcliptic().getLuck().getName())
[-] pred: org. junit. Assert. assertThat ( star. getLuck() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( star. name()); ) ) )
************************************
************************************
[+] input: test1() { // 八字 EightChar eightChar = new EightChar("丙寅", "癸巳", "癸酉", "己未");  // 年柱 SixtyCycle year = eightChar.getYear(); // 月柱 SixtyCycle month = eightChar.getMonth(); // 日柱 SixtyCycle day = eightChar.getDay(); // 时柱 SixtyCycle hour = eightChar.getHour();  // 日元(日主、日干) HeavenStem me = day.getHeavenStem();  // 年柱天干十神 Assert.assertEquals("正财", me.getTenStar(year.getHeavenStem()).getName()); // 月柱天干十神 Assert.assertEquals("比肩", me.getTenStar(month.getHeavenStem()).getName()); // 时柱天干十神 Assert.assertEquals("七杀", me.getTenStar(hour.getHeavenStem()).getName());  // 年柱地支十神（本气) Assert.assertEquals("伤官", me.getTenStar(year.getEarthBranch().getHideHeavenStemMain()).getName()); // 年柱地支十神（中气) Assert.assertEquals("正财", me.getTenStar(year.getEarthBranch().getHideHeavenStemMiddle()).getName()); // 年柱地支十神（余气) Assert.assertEquals("正官", me.getTenStar(year.getEarthBranch().getHideHeavenStemResidual()).getName());  // 日柱地支十神（本气) Assert.assertEquals("偏印", me.getTenStar(day.getEarthBranch().getHideHeavenStemMain()).getName()); // 日柱地支藏干（中气) Assert.assertNull(day.getEarthBranch().getHideHeavenStemMiddle()); // 日柱地支藏干（余气) Assert.assertNull(day.getEarthBranch().getHideHeavenStemResidual());  // 指定任意天干的十神 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("正财", me.getTenStar(HeavenStem.fromName("丙")).getName())
[-] pred: org. junit. Assert. assertThat ( me. getName() ( ), org. hamcrest. CoreMatchers. is ( ightChar. getName() ( ) ) )
************************************
************************************
[+] input: test2() { // 八字 EightChar eightChar = new EightChar("丙寅", "癸巳", "癸酉", "己未");  // 年柱 SixtyCycle year = eightChar.getYear(); // 月柱 SixtyCycle month = eightChar.getMonth(); // 日柱 SixtyCycle day = eightChar.getDay(); // 时柱 SixtyCycle hour = eightChar.getHour();  // 日元(日主、日干) HeavenStem me = day.getHeavenStem();  // 年柱地势 Assert.assertEquals("沐浴", me.getTerrain(year.getEarthBranch()).getName()); // 月柱地势 Assert.assertEquals("胎", me.getTerrain(month.getEarthBranch()).getName()); // 日柱地势 Assert.assertEquals("病", me.getTerrain(day.getEarthBranch()).getName()); // 时柱地势 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("墓", me.getTerrain(hour.getEarthBranch()).getName())
[-] pred: org. junit. Assert. assertThat ( me. getName() ( ), org. hamcrest. Matchers. is ( eightChar. getName() ( ) ) )
************************************
************************************
[+] input: test3() { // 八字 EightChar eightChar = new EightChar("癸卯", "辛酉", "己亥", "癸酉");  // 胎元 SixtyCycle taiYuan = eightChar.getFetalOrigin(); Assert.assertEquals("壬子", taiYuan.getName()); // 胎元纳音 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("桑柘木", taiYuan.getSound().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName() ( ), org. hamcrest. CoreMatchers. is ( taiYuan. getName() ( ) ) )
************************************
************************************
[+] input: test4() { // 八字 EightChar eightChar = new EightChar("癸卯", "辛酉", "己亥", "癸酉");  // 胎息 SixtyCycle taiXi = eightChar.getFetalBreath(); Assert.assertEquals("甲寅", taiXi.getName()); // 胎息纳音 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("大溪水", taiXi.getSound().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName() ( ), org. hamcrest. CoreMatchers. is ( taiXi. getName() ( ) ) )
************************************
************************************
[+] input: test5() { // 八字 EightChar eightChar = new EightChar("癸卯", "辛酉", "己亥", "癸酉");  // 命宫 SixtyCycle mingGong = eightChar.getOwnSign(); Assert.assertEquals("癸亥", mingGong.getName()); // 命宫纳音 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("大海水", mingGong.getSound().getName())
[-] pred: org. junit. Assert. assertThat ( mingGong. getName() ( ), org. hamcrest. CoreMatchers. is ( mingGong. getName() ( ) ) )
************************************
************************************
[+] input: test6() { // 八字 EightChar eightChar = new EightChar("癸卯", "辛酉", "己亥", "癸酉");  // 身宫 SixtyCycle shenGong = eightChar.getBodySign(); Assert.assertEquals("己未", shenGong.getName()); // 身宫纳音 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("天上火", shenGong.getSound().getName())
[-] pred: org. junit. Assert. assertThat ( sightGong. getName() ( ), org. hamcrest. CoreMatchers. is ( eightChar. getName() ( ) ) )
************************************
************************************
[+] input: test7() { // 八字 EightChar eightChar = new EightChar("乙酉", "戊子", "辛巳", "壬辰");  // 日干 HeavenStem me = eightChar.getDay().getHeavenStem(); // 年柱地势 Assert.assertEquals("临官", me.getTerrain(eightChar.getYear().getEarthBranch()).getName()); // 月柱地势 Assert.assertEquals("长生", me.getTerrain(eightChar.getMonth().getEarthBranch()).getName()); // 日柱地势 Assert.assertEquals("死", me.getTerrain(eightChar.getDay().getEarthBranch()).getName()); // 时柱地势 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("墓", me.getTerrain(eightChar.getHour().getEarthBranch()).getName())
[-] pred: org. junit. Assert. assertThat ( me. getName() ( ), org. hamcrest. Matchers. is ( eightChar. getName() ( ) ) )
************************************
************************************
[+] input: test8() { EightChar eightChar = SolarTime.fromYmdHms(2005, 12, 23, 8, 37, 0).getLunarHour().getEightChar(); Assert.assertEquals("乙酉", eightChar.getYear().getName()); Assert.assertEquals("戊子", eightChar.getMonth().getName()); Assert.assertEquals("辛巳", eightChar.getDay().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("壬辰", eightChar.getHour().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName(), org. hamcrest. CoreMatchers. is ( eightChar. getName()); ) )
************************************
************************************
[+] input: test9() { EightChar eightChar = SolarTime.fromYmdHms(1988, 2, 15, 23, 30, 0).getLunarHour().getEightChar(); Assert.assertEquals("戊辰", eightChar.getYear().getName()); Assert.assertEquals("甲寅", eightChar.getMonth().getName()); Assert.assertEquals("辛丑", eightChar.getDay().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("戊子", eightChar.getHour().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName(), org. hamcrest. CoreMatchers. is ( eightChar. getName()); ) )
************************************
************************************
[+] input: test13() { // 童限 ChildLimit childLimit = ChildLimit.fromSolarTime(SolarTime.fromYmdHms(1983, 2, 15, 20, 0, 0), Gender.WOMAN); // 八字 Assert.assertEquals("癸亥 甲寅 甲戌 甲戌", childLimit.getEightChar().toString()); // 童限年数 Assert.assertEquals(6, childLimit.getYearCount()); // 童限月数 Assert.assertEquals(2, childLimit.getMonthCount()); // 童限日数 Assert.assertEquals(18, childLimit.getDayCount()); // 童限结束(即开始起运)的公历时刻 Assert.assertEquals("1989年5月4日 18:24:00", childLimit.getEndTime().toString()); // 童限开始(即出生)的农历年干支 Assert.assertEquals("癸亥", childLimit.getStartTime().getLunarHour().getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName()); // 童限结束(即开始起运)的农历年干支 Assert.assertEquals("己巳", childLimit.getEndTime().getLunarHour().getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName());  // 第1轮大运 DecadeFortune decadeFortune = childLimit.getStartDecadeFortune(); // 开始年龄 Assert.assertEquals(7, decadeFortune.getStartAge()); // 结束年龄 Assert.assertEquals(16, decadeFortune.getEndAge()); // 开始年 Assert.assertEquals(1989, decadeFortune.getStartLunarYear().getYear()); // 结束年 Assert.assertEquals(1998, decadeFortune.getEndLunarYear().getYear()); // 干支 Assert.assertEquals("乙卯", decadeFortune.getName()); // 下一大运 Assert.assertEquals("丙辰", decadeFortune.next(1).getName()); // 上一大运 Assert.assertEquals("甲寅", decadeFortune.next(-1).getName()); // 第9轮大运 Assert.assertEquals("癸亥", decadeFortune.next(8).getName());  // 小运 Fortune fortune = childLimit.getStartFortune(); // 年龄 Assert.assertEquals(7, fortune.getAge()); // 农历年 Assert.assertEquals(1989, fortune.getLunarYear().getYear()); // 干支 Assert.assertEquals("辛巳", fortune.getName());  // 流年 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("己巳", fortune.getLunarYear().getSixtyCycle().getName())
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( childLimit. toString ( ) ) ) )
************************************
************************************
[+] input: test14() { // 童限 ChildLimit childLimit = ChildLimit.fromSolarTime(SolarTime.fromYmdHms(1992, 2, 2, 12, 0, 0), Gender.MAN); // 八字 Assert.assertEquals("辛未 辛丑 戊申 戊午", childLimit.getEightChar().toString()); // 童限年数 Assert.assertEquals(9, childLimit.getYearCount()); // 童限月数 Assert.assertEquals(0, childLimit.getMonthCount()); // 童限日数 Assert.assertEquals(9, childLimit.getDayCount()); // 童限结束(即开始起运)的公历时刻 Assert.assertEquals("2001年2月11日 18:58:00", childLimit.getEndTime().toString()); // 童限开始(即出生)的农历年干支 Assert.assertEquals("辛未", childLimit.getStartTime().getLunarHour().getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName()); // 童限结束(即开始起运)的农历年干支 Assert.assertEquals("辛巳", childLimit.getEndTime().getLunarHour().getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName());  // 第1轮大运 DecadeFortune decadeFortune = childLimit.getStartDecadeFortune(); // 开始年龄 Assert.assertEquals(10, decadeFortune.getStartAge()); // 结束年龄 Assert.assertEquals(19, decadeFortune.getEndAge()); // 开始年 Assert.assertEquals(2001, decadeFortune.getStartLunarYear().getYear()); // 结束年 Assert.assertEquals(2010, decadeFortune.getEndLunarYear().getYear()); // 干支 Assert.assertEquals("庚子", decadeFortune.getName()); // 下一大运 Assert.assertEquals("己亥", decadeFortune.next(1).getName());  // 小运 Fortune fortune = childLimit.getStartFortune(); // 年龄 Assert.assertEquals(10, fortune.getAge()); // 农历年 Assert.assertEquals(2001, fortune.getLunarYear().getYear()); // 干支 Assert.assertEquals("戊申", fortune.getName()); // 小运推移 Assert.assertEquals("丙午", fortune.next(2).getName()); Assert.assertEquals("庚戌", fortune.next(-2).getName());  // 流年 Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("辛巳", fortune.getLunarYear().getSixtyCycle().getName())
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( childLimit. toString ( ) ) ) )
************************************
************************************
[+] input: test20() { EightChar eightChar = ChildLimit.fromSolarTime(SolarTime.fromYmdHms(2024, 1, 29, 9, 33, 0), Gender.MAN).getEightChar(); Assert.assertEquals("癸亥", eightChar.getOwnSign().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("己未", eightChar.getBodySign().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( eightChar. getName() ) ) )
************************************
************************************
[+] input: test29() { EightChar eightChar = new EightChar("丙寅", "庚寅", "辛卯", "壬辰"); Assert.assertEquals("己亥", eightChar.getOwnSign().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%s %s %s %s", year, month, day, hour); }
[*] target: assertEquals("乙未", eightChar.getBodySign().getName())
[-] pred: org. junit. Assert. assertThat ( eightChar. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( eightChar. getName() ) ) )
************************************
************************************
[+] input: test3() { // 地支寅的五行为木 Assert.assertEquals("木", EarthBranch.fromName("寅").getElement().getName());  // 地支寅的五行(木)生火 Assert."<AssertPlaceHolder>"; }
getReinforce() { return next(1); }
[*] target: assertEquals(Element.fromName("火"), EarthBranch.fromName("寅").getElement().getReinforce())
[-] pred: org. junit. Assert. assertThat ( GCgetElement. getReinforce() ( ), org. hamcrest. CoreMatchers. is ( ", ) )
************************************
************************************
[+] input: test0() { LunarDay lunar = SolarDay.fromYmd(2004, 2, 16).getLunarDay(); List<God> gods = lunar.getGods(); List<String> ji = new ArrayList<>(); for (God god : gods) { if ("吉".equals(god.getLuck().getName())) { ji.add(god.getName()); } }  List<String> xiong = new ArrayList<>(); for (God god : gods) { if ("凶".equals(god.getLuck().getName())) { xiong.add(god.getName()); } } Assert."<AssertPlaceHolder>"; Assert.assertEquals(Arrays.asList("月煞", "月虚", "血支", "天贼", "五虚", "土符", "归忌", "血忌"), xiong); }
getLuck() { // 解除后面的为凶神 return Luck.fromIndex(index < 60 ? 0 : 1); }
[*] target: assertEquals(Arrays.asList("天恩", "续世", "明堂"), ji)
[-] pred: org. junit. Assert. assertTrue ( xiong. isEmpty ( ) )
************************************
************************************
[+] input: test1() { LunarDay lunar = SolarDay.fromYmd(2029, 11, 16).getLunarDay(); List<God> gods = lunar.getGods(); List<String> ji = new ArrayList<>(); for (God god : gods) { if ("吉".equals(god.getLuck().getName())) { ji.add(god.getName()); } }  List<String> xiong = new ArrayList<>(); for (God god : gods) { if ("凶".equals(god.getLuck().getName())) { xiong.add(god.getName()); } } Assert."<AssertPlaceHolder>"; Assert.assertEquals(Arrays.asList("月煞", "月虚", "血支", "五虚"), xiong); }
getLuck() { // 解除后面的为凶神 return Luck.fromIndex(index < 60 ? 0 : 1); }
[*] target: assertEquals(Arrays.asList("天德合", "月空", "天恩", "益后", "金匮"), ji)
[-] pred: org. junit. Assert. assertTrue ( xiong. isEmpty ( ) )
************************************
************************************
[+] input: test2() { LunarDay lunar = SolarDay.fromYmd(1954, 7, 16).getLunarDay(); List<God> gods = lunar.getGods();  // 吉神宜趋 List<String> ji = new ArrayList<>(); for (God god : gods) { if ("吉".equals(god.getLuck().getName())) { ji.add(god.getName()); } }  // 凶神宜忌 List<String> xiong = new ArrayList<>(); for (God god : gods) { if ("凶".equals(god.getLuck().getName())) { xiong.add(god.getName()); } }  Assert."<AssertPlaceHolder>"; Assert.assertEquals(Arrays.asList("劫煞", "天贼", "五虚", "五离"), xiong); }
getLuck() { // 解除后面的为凶神 return Luck.fromIndex(index < 60 ? 0 : 1); }
[*] target: assertEquals(Arrays.asList("民日", "天巫", "福德", "天仓", "不将", "续世", "除神", "鸣吠"), ji)
[-] pred: org. junit. Assert. assertTrue ( ji. isEmpty ( ) )
************************************
************************************
[+] input: test3() { LunarDay lunar = SolarDay.fromYmd(2024, 12, 27).getLunarDay(); List<God> gods = lunar.getGods(); List<String> ji = new ArrayList<>(); for (God god : gods) { if ("吉".equals(god.getLuck().getName())) { ji.add(god.getName()); } }  List<String> xiong = new ArrayList<>(); for (God god : gods) { if ("凶".equals(god.getLuck().getName())) { xiong.add(god.getName()); } } Assert."<AssertPlaceHolder>"; Assert.assertEquals(Arrays.asList("三丧", "鬼哭"), xiong); }
getLuck() { // 解除后面的为凶神 return Luck.fromIndex(index < 60 ? 0 : 1); }
[*] target: assertEquals(Arrays.asList("天恩", "四相", "阴德", "守日", "吉期", "六合", "普护", "宝光"), ji)
[-] pred: org. junit. Assert. assertTrue ( xiong. isEmpty ( ) )
************************************
************************************
[+] input: test0() { LegalHoliday d = LegalHoliday.fromYmd(2011, 5, 1); Assert.assertNotNull(d); Assert.assertEquals("2011年5月1日 劳动节(休)", d.toString());  Assert.assertEquals("2011年5月2日 劳动节(休)", d.next(1).toString()); Assert.assertEquals("2011年6月4日 端午节(休)", d.next(2).toString()); Assert.assertEquals("2011年4月30日 劳动节(休)", d.next(-1).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s(%s)", day, name, work ? "班" : "休"); }
[*] target: assertEquals("2011年4月5日 清明节(休)", d.next(-2).toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( 1 52)"Test d.next(1).toString()); ) ) )
************************************
************************************
[+] input: test3() { LegalHoliday d = LegalHoliday.fromYmd(2001, 12, 29); Assert.assertNotNull(d); Assert.assertEquals("2001年12月29日 元旦节(班)", d.toString()); Assert."<AssertPlaceHolder>"; }
next(int n) { int year = day.getYear(); int month = day.getMonth(); if (n == 0) { return fromYmd(year, month, day.getDay()); } List<String> data = new ArrayList<>(); String reg = "%04d\\d{4}[0-1][0-8][\\+|-]\\d{2}"; String today = String.format("%04d%02d%02d", year, month, day.getDay()); Matcher matcher = Pattern.compile(String.format(reg, year)).matcher(DATA); while (matcher.find()) { data.add(matcher.group()); } int index = -1; int size = data.size(); for (int i = 0; i < size; i++) { if (data.get(i).startsWith(today)) { index = i; break; } } if (index == -1) { return null; } index += n; int y = year; if (n > 0) { while (index >= size) { index -= size; y += 1; data.clear(); matcher = Pattern.compile(String.format(reg, y)).matcher(DATA); while (matcher.find()) { data.add(matcher.group()); } size = data.size(); if (size < 1) { return null; } } } else { while (index < 0) { y -= 1; data.clear(); matcher = Pattern.compile(String.format(reg, y)).matcher(DATA); while (matcher.find()) { data.add(matcher.group()); } size = data.size(); if (size < 1) { return null; } index += size; } } String d = data.get(index); return new LegalHoliday(Integer.parseInt(d.substring(0, 4)), Integer.parseInt(d.substring(4, 6)), Integer.parseInt(d.substring(6, 8)), d); }
[*] target: assertNull(d.next(-1))
[-] pred: org. junit. Assert. assertThat ( d. next(number ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test4() { LegalHoliday d = LegalHoliday.fromYmd(2022, 10, 5); Assert.assertNotNull(d); Assert.assertEquals("2022年10月5日 国庆节(休)", d.toString()); Assert.assertEquals("2022年10月4日 国庆节(休)", d.next(-1).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s(%s)", day, name, work ? "班" : "休"); }
[*] target: assertEquals("2022年10月6日 国庆节(休)", d.next(1).toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( 105 12o(14)" ) )
************************************
************************************
[+] input: test5() { LegalHoliday d = SolarDay.fromYmd(2010, 10, 1).getLegalHoliday(); Assert.assertNotNull(d); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s(%s)", day, name, work ? "班" : "休"); }
[*] target: assertEquals("2010年10月1日 国庆节(休)", d.toString())
[-] pred: org. junit. Assert. assertNotNull ( d. toString() ( ) )
************************************
************************************
[+] input: test24() { LunarDay d = LunarDay.fromYmd(2020, 4, 13); TwentyEightStar star = d.getTwentyEightStar(); Assert.assertEquals("南", star.getZone().getName()); Assert.assertEquals("朱雀", star.getZone().getBeast().getName()); Assert.assertEquals("翼", star.getName()); Assert.assertEquals("火", star.getSevenStar().getName()); Assert.assertEquals("蛇", star.getAnimal().getName()); Assert.assertEquals("凶", star.getLuck().getName());  Assert.assertEquals("阳天", star.getLand().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return NAMES[day - 1]; }
[*] target: assertEquals("东南", star.getLand().getDirection().getName())
[-] pred: org. junit. Assert. assertThat ( star. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( star. getName() ) ) )
************************************
************************************
[+] input: test25() { LunarDay d = LunarDay.fromYmd(2023, 9, 28); TwentyEightStar star = d.getTwentyEightStar(); Assert.assertEquals("南", star.getZone().getName()); Assert.assertEquals("朱雀", star.getZone().getBeast().getName()); Assert.assertEquals("柳", star.getName()); Assert.assertEquals("土", star.getSevenStar().getName()); Assert.assertEquals("獐", star.getAnimal().getName()); Assert.assertEquals("凶", star.getLuck().getName());  Assert.assertEquals("炎天", star.getLand().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return NAMES[day - 1]; }
[*] target: assertEquals("南", star.getLand().getDirection().getName())
[-] pred: org. junit. Assert. assertThat ( star. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( star. getName() ) ) )
************************************
************************************
[+] input: test26() { LunarDay lunar = LunarDay.fromYmd(2005, 11, 23); Assert.assertEquals("戊子", lunar.getLunarMonth().getSixtyCycle().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return NAMES[day - 1]; }
[*] target: assertEquals("戊子", lunar.getMonthSixtyCycle().getName())
[-] pred: org. junit. Assert. assertThat ( lunar. getName() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( lunar. getName() ( ) ) ) )
************************************
************************************
[+] input: test0() { for (int i = 0, j = LunarFestival.NAMES.length; i < j; i++) { LunarFestival f = LunarFestival.fromIndex(2023, i); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; } }
getName() { return name; }
[*] target: assertEquals(LunarFestival.NAMES[i], f.getName())
[-] pred: org. junit. Assert. assertEquals ( ( i + 1 ), f. getName() ( ) )
************************************
************************************
[+] input: test1() { LunarFestival f = LunarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); for (int i = 0, j = LunarFestival.NAMES.length; i < j; i++) { Assert."<AssertPlaceHolder>"; } }
getName() { return name; }
[*] target: assertEquals(LunarFestival.NAMES[i], f.next(i).getName())
[-] pred: org. junit. Assert. assertEquals ( i, f. getName() ( ) )
************************************
************************************
[+] input: test2() { LunarFestival f = LunarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); Assert.assertEquals("农历甲辰年正月初一 春节", f.next(13).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("农历壬寅年十一月廿九 冬至节", f.next(-3).toString())
[-] pred: org. junit. Assert. assertThat ( f. toString() ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test3() { LunarFestival f = LunarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("农历壬寅年三月初五 清明节", f.next(-9).toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test4() { LunarFestival f = LunarDay.fromYmd(2010, 1, 15).getFestival(); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("农历庚寅年正月十五 元宵节", f.toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test5() { LunarFestival f = LunarDay.fromYmd(2021, 12, 29).getFestival(); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("农历辛丑年十二月廿九 除夕", f.toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test1() { LunarHour h = LunarHour.fromYmdHms(2020, -4, 5, 23, 0, 0); Assert.assertEquals("子时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年闰四月初五戊子时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test2() { LunarHour h = LunarHour.fromYmdHms(2020, -4, 5, 0, 59, 0); Assert.assertEquals("子时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年闰四月初五丙子时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test3() { LunarHour h = LunarHour.fromYmdHms(2020, -4, 5, 1, 0, 0); Assert.assertEquals("丑时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年闰四月初五丁丑时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test4() { LunarHour h = LunarHour.fromYmdHms(2020, -4, 5, 21, 30, 0); Assert.assertEquals("亥时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年闰四月初五丁亥时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test5() { LunarHour h = LunarHour.fromYmdHms(2020, -4, 2, 23, 30, 0); Assert.assertEquals("子时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年闰四月初二壬子时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test6() { LunarHour h = LunarHour.fromYmdHms(2020, 4, 28, 23, 30, 0); Assert.assertEquals("子时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年四月廿八甲子时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test7() { LunarHour h = LunarHour.fromYmdHms(2020, 4, 29, 0, 0, 0); Assert.assertEquals("子时", h.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return day + getSixtyCycle().getName() + "时"; }
[*] target: assertEquals("农历庚子年四月廿九甲子时", h.toString())
[-] pred: org. junit. Assert. assertThat ( h. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( h. toString() ( ) ) ) )
************************************
************************************
[+] input: test8() { LunarHour h = LunarHour.fromYmdHms(2023, 11, 14, 23, 0, 0); Assert.assertEquals("甲子", h.getSixtyCycle().getName());  Assert.assertEquals("己未", h.getDaySixtyCycle().getName()); Assert.assertEquals("戊午", h.getLunarDay().getSixtyCycle().getName()); Assert.assertEquals("农历癸卯年十一月十四", h.getLunarDay().toString());  Assert.assertEquals("甲子", h.getMonthSixtyCycle().getName()); Assert.assertEquals("农历癸卯年十一月", h.getLunarDay().getLunarMonth().toString()); Assert.assertEquals("乙丑", h.getLunarDay().getLunarMonth().getSixtyCycle().getName());  Assert.assertEquals("癸卯", h.getYearSixtyCycle().getName()); Assert.assertEquals("农历癸卯年", h.getLunarDay().getLunarMonth().getLunarYear().toString()); Assert."<AssertPlaceHolder>"; }
getName() { return EarthBranch.fromIndex(getIndexInDay()).getName() + "时"; }
[*] target: assertEquals("癸卯", h.getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName())
[-] pred: org. junit. Assert. assertThat ( h. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ", ) ) )
************************************
************************************
[+] input: test9() { LunarHour h = LunarHour.fromYmdHms(2023, 11, 14, 6, 0, 0); Assert.assertEquals("乙卯", h.getSixtyCycle().getName());  Assert.assertEquals("戊午", h.getDaySixtyCycle().getName()); Assert.assertEquals("戊午", h.getLunarDay().getSixtyCycle().getName()); Assert.assertEquals("农历癸卯年十一月十四", h.getLunarDay().toString());  Assert.assertEquals("甲子", h.getMonthSixtyCycle().getName()); Assert.assertEquals("农历癸卯年十一月", h.getLunarDay().getLunarMonth().toString()); Assert.assertEquals("乙丑", h.getLunarDay().getLunarMonth().getSixtyCycle().getName());  Assert.assertEquals("癸卯", h.getYearSixtyCycle().getName()); Assert.assertEquals("农历癸卯年", h.getLunarDay().getLunarMonth().getLunarYear().toString()); Assert."<AssertPlaceHolder>"; }
getName() { return EarthBranch.fromIndex(getIndexInDay()).getName() + "时"; }
[*] target: assertEquals("癸卯", h.getLunarDay().getLunarMonth().getLunarYear().getSixtyCycle().getName())
[-] pred: org. junit. Assert. assertThat ( h. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( """" ) ) )
************************************
************************************
[+] input: test29() { LunarDay d = SolarDay.fromYmd(2023, 10, 7).getLunarDay(); Assert.assertEquals("壬戌", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("辛酉", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test30() { LunarDay d = SolarDay.fromYmd(2023, 10, 8).getLunarDay(); Assert.assertEquals("壬戌", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("壬戌", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( d. toString ( ) ) ) )
************************************
************************************
[+] input: test31() { LunarDay d = SolarDay.fromYmd(2023, 10, 15).getLunarDay(); Assert.assertEquals("九月", d.getLunarMonth().getName()); Assert.assertEquals("癸亥", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("壬戌", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( d. toString ( ) ) ) )
************************************
************************************
[+] input: test32() { LunarDay d = SolarDay.fromYmd(2023, 11, 7).getLunarDay(); Assert.assertEquals("癸亥", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("壬戌", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test33() { LunarDay d = SolarDay.fromYmd(2023, 11, 8).getLunarDay(); Assert.assertEquals("癸亥", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("癸亥", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test34() { // 2023年闰2月 LunarMonth m = LunarMonth.fromYm(2023, 12); Assert.assertEquals("农历癸卯年十二月", m.toString()); Assert.assertEquals("农历癸卯年十一月", m.next(-1).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("农历癸卯年十月", m.next(-2).toString())
[-] pred: org. junit. Assert. assertThat ( m. toString ( ), org. hamcrest. CoreMatchers. is ( m. toString ( ) ) )
************************************
************************************
[+] input: test35() { // 2023年闰2月 LunarMonth m = LunarMonth.fromYm(2023, 3); Assert.assertEquals("农历癸卯年三月", m.toString()); Assert.assertEquals("农历癸卯年闰二月", m.next(-1).toString()); Assert.assertEquals("农历癸卯年二月", m.next(-2).toString()); Assert.assertEquals("农历癸卯年正月", m.next(-3).toString()); Assert.assertEquals("农历壬寅年十二月", m.next(-4).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("农历壬寅年十一月", m.next(-5).toString())
[-] pred: org. junit. Assert. assertThat ( m. toString());, org. hamcrest. CoreMatchers. is ( m. toString()); ) )
************************************
************************************
[+] input: test36() { LunarDay d = SolarDay.fromYmd(1983, 2, 15).getLunarDay(); Assert.assertEquals("甲寅", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("甲寅", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test37() { LunarDay d = SolarDay.fromYmd(2023, 10, 30).getLunarDay(); Assert.assertEquals("癸亥", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("壬戌", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test38() { LunarDay d = SolarDay.fromYmd(2023, 10, 19).getLunarDay(); Assert.assertEquals("癸亥", d.getLunarMonth().getSixtyCycle().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("壬戌", d.getMonthSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( d. toString ( ), org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test39() { LunarMonth m = LunarMonth.fromYm(2023, 11); Assert.assertEquals("农历癸卯年十一月", m.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("乙丑", m.getSixtyCycle().toString())
[-] pred: org. junit. Assert. assertThat ( m. toString ( ), org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test7() { LunarYear y = LunarYear.fromYear(2023); Assert.assertEquals("癸卯", y.getSixtyCycle().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("农历%s年", getSixtyCycle()); }
[*] target: assertEquals("兔", y.getSixtyCycle().getEarthBranch().getZodiac().getName())
[-] pred: org. junit. Assert. assertThat ( y. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ", ) ) )
************************************
************************************
[+] input: test21() { LunarYear year = LunarYear.fromYear(1); Assert.assertEquals("六运", year.getTwenty().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("农历%s年", getSixtyCycle()); }
[*] target: assertEquals("中元", year.getTwenty().getSixty().getName())
[-] pred: org. junit. Assert. assertThat ( year. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( year. getName() ) ) )
************************************
************************************
[+] input: test22() { LunarYear year = LunarYear.fromYear(1863); Assert.assertEquals("九运", year.getTwenty().getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("农历%s年", getSixtyCycle()); }
[*] target: assertEquals("下元", year.getTwenty().getSixty().getName())
[-] pred: org. junit. Assert. assertThat ( year. getName(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( year. getName() ) ) )
************************************
************************************
[+] input: test0() { NineDay d = SolarDay.fromYmd(2020, 12, 21).getNineDay(); Assert.assertEquals("一九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("一九第1天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("一九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test1() { NineDay d = SolarDay.fromYmd(2020, 12, 22).getNineDay(); Assert.assertEquals("一九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("一九第2天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("一九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test2() { NineDay d = SolarDay.fromYmd(2020, 1, 7).getNineDay(); Assert.assertEquals("二九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("二九第8天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("二九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test3() { NineDay d = SolarDay.fromYmd(2021, 1, 6).getNineDay(); Assert.assertEquals("二九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("二九第8天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("二九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test4() { NineDay d = SolarDay.fromYmd(2021, 1, 8).getNineDay(); Assert.assertEquals("三九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("三九第1天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("三九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test5() { NineDay d = SolarDay.fromYmd(2021, 3, 5).getNineDay(); Assert.assertEquals("九九", d.getName()); Assert."<AssertPlaceHolder>"; Assert.assertEquals("九九第3天", d.toString()); }
getNine() { return (Nine) culture; }
[*] target: assertEquals("九九", d.getNine().toString())
[-] pred: org. junit. Assert. assertThat ( d. getNine(), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. any ( d ) ) )
************************************
************************************
[+] input: test0() { NineStar nineStar = LunarYear.fromYear(1985).getNineStar(); Assert.assertEquals("六", nineStar.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("六白金", nineStar.toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString() ( ), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test1() { NineStar nineStar = LunarYear.fromYear(2022).getNineStar(); Assert.assertEquals("五黄土", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("玉衡", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test2() { NineStar nineStar = LunarYear.fromYear(2033).getNineStar(); Assert.assertEquals("三碧木", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天玑", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test3() { NineStar nineStar = LunarMonth.fromYm(1985, 2).getNineStar(); Assert.assertEquals("四绿木", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天权", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test4() { NineStar nineStar = LunarMonth.fromYm(1985, 2).getNineStar(); Assert.assertEquals("四绿木", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天权", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test5() { NineStar nineStar = LunarMonth.fromYm(2022, 1).getNineStar(); Assert.assertEquals("二黒土", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天璇", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test6() { NineStar nineStar = LunarMonth.fromYm(2033, 1).getNineStar(); Assert.assertEquals("五黄土", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("玉衡", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test7() { NineStar nineStar = SolarDay.fromYmd(1985, 2, 19).getLunarDay().getNineStar(); Assert.assertEquals("五黄土", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("玉衡", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test8() { NineStar nineStar = LunarDay.fromYmd(2022, 1, 1).getNineStar(); Assert.assertEquals("四绿木", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天权", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test9() { NineStar nineStar = LunarDay.fromYmd(2033, 1, 1).getNineStar(); Assert.assertEquals("一白水", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("天枢", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test10() { NineStar nineStar = LunarHour.fromYmdHms(2033, 1, 1, 12, 0, 0).getNineStar(); Assert.assertEquals("七赤金", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("摇光", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test11() { NineStar nineStar = LunarHour.fromYmdHms(2011, 5, 3, 23, 0, 0).getNineStar(); Assert.assertEquals("七赤金", nineStar.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getName() + getColor() + getElement(); }
[*] target: assertEquals("摇光", nineStar.getDipper().toString())
[-] pred: org. junit. Assert. assertThat ( nineStar. toString(), org. hamcrest. CoreMatchers. is ( nineStar. toString ( ) ) )
************************************
************************************
[+] input: test0() { SolarDay solarDay = SolarDay.fromYmd(2020, 4, 23); // 七十二候 PhenologyDay phenology = solarDay.getPhenologyDay(); // 三候 ThreePhenology threePhenology = phenology.getPhenology().getThreePhenology(); Assert."<AssertPlaceHolder>"; Assert.assertEquals("初候", threePhenology.getName()); Assert.assertEquals("萍始生", phenology.getName()); // 该候的第5天 Assert.assertEquals(4, phenology.getDayIndex()); }
getThreePhenology() { return ThreePhenology.fromIndex(index % 3); }
[*] target: assertEquals("谷雨", solarDay.getTerm().getName())
[-] pred: org. junit. Assert. assertThat ( threePhenology, org. hamcrest. CoreMatchers. is ( threePhenology ) )
************************************
************************************
[+] input: test1() { SolarDay solarDay = SolarDay.fromYmd(2021, 12, 26); // 七十二候 PhenologyDay phenology = solarDay.getPhenologyDay(); // 三候 ThreePhenology threePhenology = phenology.getPhenology().getThreePhenology(); Assert."<AssertPlaceHolder>"; Assert.assertEquals("二候", threePhenology.getName()); Assert.assertEquals("麋角解", phenology.getName()); // 该候的第1天 Assert.assertEquals(0, phenology.getDayIndex()); }
getThreePhenology() { return ThreePhenology.fromIndex(index % 3); }
[*] target: assertEquals("冬至", solarDay.getTerm().getName())
[-] pred: org. junit. Assert. assertThat ( threePhenology, org. hamcrest. CoreMatchers. is ( threePhenology ) )
************************************
************************************
[+] input: test1() { PlumRainDay d = SolarDay.fromYmd(2024, 6, 11).getPlumRainDay(); Assert.assertEquals("入梅", d.getName()); Assert.assertEquals("入梅", d.getPlumRain().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getPlumRain().getIndex() == 0 ? super.toString() : culture.getName(); }
[*] target: assertEquals("入梅第1天", d.toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( d. toString()); ) ) )
************************************
************************************
[+] input: test2() { PlumRainDay d = SolarDay.fromYmd(2024, 7, 6).getPlumRainDay(); Assert.assertEquals("出梅", d.getName()); Assert.assertEquals("出梅", d.getPlumRain().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getPlumRain().getIndex() == 0 ? super.toString() : culture.getName(); }
[*] target: assertEquals("出梅", d.toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( d. toString()); ) ) )
************************************
************************************
[+] input: test3() { PlumRainDay d = SolarDay.fromYmd(2024, 7, 5).getPlumRainDay(); Assert.assertEquals("入梅", d.getName()); Assert.assertEquals("入梅", d.getPlumRain().toString()); Assert."<AssertPlaceHolder>"; }
toString() { return getPlumRain().getIndex() == 0 ? super.toString() : culture.getName(); }
[*] target: assertEquals("入梅第25天", d.toString())
[-] pred: org. junit. Assert. assertThat ( d. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( d. toString()); ) ) )
************************************
************************************
[+] input: test2() { Assert.assertEquals("石榴木", SixtyCycle.fromName("辛酉").getSound().getName()); Assert.assertEquals("剑锋金", SixtyCycle.fromName("癸酉").getSound().getName()); Assert."<AssertPlaceHolder>"; }
getSound() { return Sound.fromIndex(index / 2); }
[*] target: assertEquals("平地木", SixtyCycle.fromName("己亥").getSound().getName())
[-] pred: org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ", SixtyCycle.fromIndex(index / 2 ) ) )
************************************
************************************
[+] input: test3() { Assert.assertEquals("甲子", SixtyCycle.fromName("甲子").getTen().getName()); Assert.assertEquals("甲寅", SixtyCycle.fromName("乙卯").getTen().getName()); Assert."<AssertPlaceHolder>"; }
getTen() { return Ten.fromIndex((getHeavenStem().getIndex() - getEarthBranch().getIndex()) / 2); }
[*] target: assertEquals("甲申", SixtyCycle.fromName("癸巳").getTen().getName())
[-] pred: org. junit. Assert. assertThat ( org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( ",SixtyCycle.fromIndex ( 8 ) ) ) )
************************************
************************************
[+] input: test4() { Assert.assertArrayEquals(new EarthBranch[]{EarthBranch.fromName("戌"), EarthBranch.fromName("亥")}, SixtyCycle.fromName("甲子").getExtraEarthBranches()); Assert.assertArrayEquals(new EarthBranch[]{EarthBranch.fromName("子"), EarthBranch.fromName("丑")}, SixtyCycle.fromName("乙卯").getExtraEarthBranches()); Assert."<AssertPlaceHolder>"; }
getExtraEarthBranches() { EarthBranch[] l = new EarthBranch[2]; l[0] = EarthBranch.fromIndex(10 + getEarthBranch().getIndex() - getHeavenStem().getIndex()); l[1] = l[0].next(1); return l; }
[*] target: assertArrayEquals(new EarthBranch[]{EarthBranch.fromName("午"), EarthBranch.fromName("未")}, SixtyCycle.fromName("癸巳").getExtraEarthBranches())
[-] pred: org. junit. Assert. assertThat ( byteArray. getExtraEarthBranches ( ), org. hamcrest. CoreMatchers. is ( new EarthBranch[]{EarthBranch.fromName(" ( ) ) )
************************************
************************************
[+] input: test0() { Assert.assertEquals("1日", SolarDay.fromYmd(2023, 1, 1).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return month + getName(); }
[*] target: assertEquals("2023年1月1日", SolarDay.fromYmd(2023, 1, 1).toString())
[-] pred: org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test1() { Assert.assertEquals("29日", SolarDay.fromYmd(2000, 2, 29).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return month + getName(); }
[*] target: assertEquals("2000年2月29日", SolarDay.fromYmd(2000, 2, 29).toString())
[-] pred: org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test2() { Assert.assertEquals(0, SolarDay.fromYmd(2023, 1, 1).getIndexInYear()); Assert.assertEquals(364, SolarDay.fromYmd(2023, 12, 31).getIndexInYear()); Assert."<AssertPlaceHolder>"; }
getIndexInYear() { return subtract(fromYmd(getYear(), 1, 1)); }
[*] target: assertEquals(365, SolarDay.fromYmd(2020, 12, 31).getIndexInYear())
[-] pred: org. junit. Assert. assertThat ( builder. getIndexInYear() ( ), org. hamcrest. CoreMatchers. is ( 0 ) )
************************************
************************************
[+] input: test0() { for (int i = 0, j = SolarFestival.NAMES.length; i < j; i++) { SolarFestival f = SolarFestival.fromIndex(2023, i); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; } }
getName() { return name; }
[*] target: assertEquals(SolarFestival.NAMES[i], f.getName())
[-] pred: org. junit. Assert. assertEquals ( ( i + 1 ), f. getName() ( ) )
************************************
************************************
[+] input: test1() { SolarFestival f = SolarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); for (int i = 0, j = SolarFestival.NAMES.length; i < j; i++) { Assert."<AssertPlaceHolder>"; } }
getName() { return name; }
[*] target: assertEquals(SolarFestival.NAMES[i], f.next(i).getName())
[-] pred: org. junit. Assert. assertEquals ( f. getName() ( ), i )
************************************
************************************
[+] input: test2() { SolarFestival f = SolarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); Assert.assertEquals("2024年5月1日 五一劳动节", f.next(13).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("2022年8月1日 八一建军节", f.next(-3).toString())
[-] pred: org. junit. Assert. assertThat ( f. toString() ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test3() { SolarFestival f = SolarFestival.fromIndex(2023, 0); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("2022年3月8日 三八妇女节", f.next(-9).toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test4() { SolarFestival f = SolarDay.fromYmd(2010, 1, 1).getFestival(); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("2010年1月1日 元旦", f.toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test5() { SolarFestival f = SolarDay.fromYmd(2021, 5, 4).getFestival(); Assert.assertNotNull(f); Assert."<AssertPlaceHolder>"; }
toString() { return String.format("%s %s", day, name); }
[*] target: assertEquals("2021年5月4日 五四青年节", f.toString())
[-] pred: org. junit. Assert. assertNotNull ( f. toString() ( ) )
************************************
************************************
[+] input: test0() { Assert.assertEquals("上半年", SolarHalfYear.fromIndex(2023, 0).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2023年上半年", SolarHalfYear.fromIndex(2023, 0).toString())
[-] pred: org. junit. Assert. assertThat ( 1. toString() ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test1() { Assert.assertEquals("下半年", SolarHalfYear.fromIndex(2023, 1).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2023年下半年", SolarHalfYear.fromIndex(2023, 1).toString())
[-] pred: org. junit. Assert. assertThat ( 1. toString() ( ), org. hamcrest. CoreMatchers. is ( ""1"" ) )
************************************
************************************
[+] input: test2() { Assert.assertEquals("下半年", SolarHalfYear.fromIndex(2023, 0).next(1).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2023年下半年", SolarHalfYear.fromIndex(2023, 0).next(1).toString())
[-] pred: org. junit. Assert. assertThat ( figure. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test3() { Assert.assertEquals("上半年", SolarHalfYear.fromIndex(2023, 0).next(2).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2024年上半年", SolarHalfYear.fromIndex(2023, 0).next(2).toString())
[-] pred: org. junit. Assert. assertThat ( figure. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test4() { Assert.assertEquals("上半年", SolarHalfYear.fromIndex(2023, 0).next(-2).getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2022年上半年", SolarHalfYear.fromIndex(2023, 0).next(-2).toString())
[-] pred: org. junit. Assert. assertThat ( figure. toString ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test5() { Assert.assertEquals("2021年上半年", SolarHalfYear.fromIndex(2023, 0).next(-4).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2021年下半年", SolarHalfYear.fromIndex(2023, 0).next(-3).toString())
[-] pred: org. junit. Assert. assertThat ( 1. toString() ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test0() { SolarMonth m = SolarMonth.fromYm(2019, 5); Assert.assertEquals("5月", m.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2019年5月", m.toString())
[-] pred: org. junit. Assert. assertThat ( m. toString() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( m. toString ( ) ) ) )
************************************
************************************
[+] input: test3() { SolarMonth m = SolarMonth.fromYm(2023, 10).next(1); Assert.assertEquals("11月", m.getName()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2023年11月", m.toString())
[-] pred: org. junit. Assert. assertThat ( m. toString() ( ), org. hamcrest. CoreMatchers. is ( """" ) )
************************************
************************************
[+] input: test4() { SolarMonth m = SolarMonth.fromYm(2023, 10); Assert.assertEquals("2023年12月", m.next(2).toString()); Assert.assertEquals("2024年1月", m.next(3).toString()); Assert.assertEquals("2023年5月", m.next(-5).toString()); Assert.assertEquals("2023年1月", m.next(-9).toString()); Assert.assertEquals("2022年12月", m.next(-10).toString()); Assert.assertEquals("2025年10月", m.next(24).toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2021年10月", m.next(-24).toString())
[-] pred: org. junit. Assert. assertThat ( m. toString ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( m.next(2 ) ) )
************************************
************************************
[+] input: test0() { SolarSeason season = SolarSeason.fromIndex(2023, 0); Assert.assertEquals("2023年一季度", season.toString()); Assert."<AssertPlaceHolder>"; }
toString() { return year + getName(); }
[*] target: assertEquals("2021年四季度", season.next(-5).toString())
[-] pred: org. junit. Assert. assertThat ( season. toString ( ), org. hamcrest. CoreMatchers. is ( season. toString ( ) ) )
************************************
************************************
[+] input: test0() { // 冬至在去年，2022-12-22 05:48:11 SolarTerm dongZhi = SolarTerm.fromName(2023, "冬至"); Assert.assertEquals("冬至", dongZhi.getName()); Assert.assertEquals(0, dongZhi.getIndex()); // 儒略日 Assert.assertEquals(2459935.7417939813, dongZhi.getJulianDay().getDay(), 0.00001); // 公历日 Assert.assertEquals("2022年12月22日", dongZhi.getJulianDay().getSolarDay().toString());  // 冬至顺推23次，就是大雪 2023-12-07 17:32:55 SolarTerm daXue = dongZhi.next(23); Assert.assertEquals("大雪", daXue.getName()); Assert.assertEquals(23, daXue.getIndex()); Assert.assertEquals(2460286.2311921297, daXue.getJulianDay().getDay(), 0.00001); Assert.assertEquals("2023年12月7日", daXue.getJulianDay().getSolarDay().toString());  // 冬至逆推2次，就是上一年的小雪 2022-11-22 16:20:28 SolarTerm xiaoXue = dongZhi.next(-2); Assert.assertEquals("小雪", xiaoXue.getName()); Assert.assertEquals(22, xiaoXue.getIndex()); Assert.assertEquals(2459906.1808796297, xiaoXue.getJulianDay().getDay(), 0.00001); Assert.assertEquals("2022年11月22日", xiaoXue.getJulianDay().getSolarDay().toString());  // 冬至顺推24次，就是下一个冬至 2023-12-22 11:27:20 SolarTerm dongZhi2 = dongZhi.next(24); Assert.assertEquals("冬至", dongZhi2.getName()); Assert.assertEquals(0, dongZhi2.getIndex()); Assert.assertEquals(2460300.977314815, dongZhi2.getJulianDay().getDay(), 0.00001); Assert."<AssertPlaceHolder>"; }
getJulianDay() { return JulianDay.fromJulianDay(ShouXingUtil.qiAccurate2(cursoryJulianDay) + JulianDay.J2000); }
[*] target: assertEquals("2023年12月22日", dongZhi2.getJulianDay().getSolarDay().toString())
[-] pred: org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( il ) )
************************************
************************************
[+] input: test1() { // 公历2023年的雨水，2023-02-19 06:34:16 SolarTerm jq = SolarTerm.fromName(2023, "雨水"); Assert.assertEquals("雨水", jq.getName()); Assert.assertEquals(4, jq.getIndex()); Assert."<AssertPlaceHolder>"; }
getJulianDay() { return JulianDay.fromJulianDay(ShouXingUtil.qiAccurate2(cursoryJulianDay) + JulianDay.J2000); }
[*] target: assertEquals(2459994.773796296, jq.getJulianDay().getDay(), 0.00001)
[-] pred: org. junit. Assert. assertEquals ( jq. getJulianDay() ( ), JulianDay22000);. getJulianDay() ( ) )
************************************
************************************
[+] input: test0() { SolarTime time = SolarTime.fromYmdHms(2023, 1, 1, 13, 5, 20); Assert.assertEquals("13:05:20", time.getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%02d:%02d:%02d", hour, minute, second); }
[*] target: assertEquals("13:04:59", time.next(-21).getName())
[-] pred: org. junit. Assert. assertThat ( time. getName() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( time. getName() ( ) ) ) )
************************************
************************************
[+] input: test1() { SolarTime time = SolarTime.fromYmdHms(2023, 1, 1, 13, 5, 20); Assert.assertEquals("13:05:20", time.getName()); Assert."<AssertPlaceHolder>"; }
getName() { return String.format("%02d:%02d:%02d", hour, minute, second); }
[*] target: assertEquals("14:06:01", time.next(3641).getName())
[-] pred: org. junit. Assert. assertThat ( time. getName() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( time. getName() ( ) ) ) )
************************************
************************************
[+] input: test7() { SolarWeek w = SolarWeek.fromYm(2023, 10, 0, 0).next(4); Assert."<AssertPlaceHolder>"; Assert.assertEquals("2023年10月第五周", w.toString()); }
next(int n) { return fromIndex(nextIndex(n)); }
[*] target: assertEquals("第五周", w.getName())
[-] pred: org. junit. Assert. assertThat ( w. next(int n ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test8() { SolarWeek w = SolarWeek.fromYm(2023, 10, 0, 0).next(5); Assert."<AssertPlaceHolder>"; Assert.assertEquals("2023年11月第二周", w.toString()); }
next(int n) { return fromIndex(nextIndex(n)); }
[*] target: assertEquals("第二周", w.getName())
[-] pred: org. junit. Assert. assertThat ( w. next(int n ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test9() { SolarWeek w = SolarWeek.fromYm(2023, 10, 0, 0).next(-1); Assert."<AssertPlaceHolder>"; Assert.assertEquals("2023年9月第五周", w.toString()); }
next(int n) { return fromIndex(nextIndex(n)); }
[*] target: assertEquals("第五周", w.getName())
[-] pred: org. junit. Assert. assertThat ( w. next(int n ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: test10() { SolarWeek w = SolarWeek.fromYm(2023, 10, 0, 0).next(-5); Assert."<AssertPlaceHolder>"; Assert.assertEquals("2023年9月第一周", w.toString()); }
next(int n) { return fromIndex(nextIndex(n)); }
[*] target: assertEquals("第一周", w.getName())
[-] pred: org. junit. Assert. assertThat ( w. next(int n ), org. hamcrest. CoreMatchers. is ( 1.0 ) )
************************************
************************************
[+] input: test11() { SolarWeek w = SolarWeek.fromYm(2023, 10, 0, 0).next(-6); Assert."<AssertPlaceHolder>"; Assert.assertEquals("2023年8月第四周", w.toString()); }
next(int n) { return fromIndex(nextIndex(n)); }
[*] target: assertEquals("第四周", w.getName())
[-] pred: org. junit. Assert. assertThat ( w. next(int n ), org. hamcrest. CoreMatchers. is ( true ) )
************************************
************************************
[+] input: Exception { final CardPolymorph poly = mapper.read(readFixture("poly-pseudo/pip"), CardPolymorph.class);  assertEquals("2.16.528.1.1003.10.9.3.3", poly.getIdentifier()); assertNotNull(poly.getPoint0()); assertNotNull(poly.getPoint1()); assertNotNull(poly.getPoint2()); assertEquals(1, poly.getSchemeVersion()); assertEquals(1, poly.getSchemeKeyVersion()); assertEquals("SSSSSSSSSSSSSSSSSSSS", poly.getCreator()); assertEquals("SSSSSSSSSSSSSSSSSSSS", poly.getRecipient()); assertEquals(1, poly.getRecipientKeySetVersion()); assertEquals('B', poly.getType()); "<AssertPlaceHolder>"; }
getSequenceNo() { return sequenceNo; }
[*] target: assertEquals("SSSSSSSSSSSSSS", poly.getSequenceNo())
[-] pred: org. junit. Assert. assertThat ( poly. getSequenceNo() ( ), org. hamcrest. Matchers. is ( 1 ) )
************************************
************************************
[+] input: Exception { final CardPolymorph poly = mapper.read(readFixture("poly-pseudo/pp"), CardPolymorph.class);  assertEquals("2.16.528.1.1003.10.9.4.3", poly.getIdentifier()); assertNotNull(poly.getPoint0()); assertNull(poly.getPoint1()); assertNotNull(poly.getPoint2()); assertEquals(1, poly.getSchemeVersion()); assertEquals(1, poly.getSchemeKeyVersion()); assertEquals("SSSSSSSSSSSSSSSSSSSS", poly.getCreator()); assertEquals("SSSSSSSSSSSSSSSSSSSS", poly.getRecipient()); assertEquals(1, poly.getRecipientKeySetVersion()); assertEquals('B', poly.getType()); "<AssertPlaceHolder>"; }
getSequenceNo() { return sequenceNo; }
[*] target: assertEquals("SSSSSSSSSSSSSS", poly.getSequenceNo())
[-] pred: org. junit. Assert. assertThat ( poly. getSequenceNo() ( ), org. hamcrest. CoreMatchers. is ( 1 ) )
************************************
************************************
[+] input: Exception { final SecurityInfos infos = mapper.read(readFixture("secinfos/dl2"), SecurityInfos.class);  checkEcParameters(BRAINPOOLP320r1, infos.getEcPublicKey().getParameters()); assertEquals("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(infos.getEcPublicKey().getKey()) ); assertArrayEquals(infos.getEcPublicKey().getKey(), infos.getEcPublicKey().getPublicPoint().getEncoded(false)); assertEquals(1, infos.getEcPublicKeyId());  assertEquals(0, infos.getTaVersion());  assertEquals(null, infos.getCaEcParameters()); assertEquals(0, infos.getCaKeyId());  assertEquals(1, infos.getCaVersion()); assertEquals(1, infos.getCaId());  assertEquals(2, infos.getPaceVersion()); assertEquals(14, infos.getPaceParameterId());  assertEquals(1, infos.getAaVersion()); "<AssertPlaceHolder>"; }
getAaAlgorithm() { return aaAlgorithm; }
[*] target: assertEquals("0.4.0.127.0.7.1.1.4.1.3", infos.getAaAlgorithm())
[-] pred: org. junit. Assert. assertSame ( infos. getAaAlgorithm() ( ), infos. getAaAlgorithm ( ) )
************************************
************************************
[+] input: Exception { final SecurityInfos infos = mapper.read(readFixture("secinfos/rvig2011"), SecurityInfos.class);  checkEcParameters(BRAINPOOLP256r1, infos.getEcPublicKey().getParameters()); assertEquals("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(infos.getEcPublicKey().getKey()) ); assertArrayEquals(infos.getEcPublicKey().getKey(), infos.getEcPublicKey().getPublicPoint().getEncoded(false)); assertEquals(0, infos.getEcPublicKeyId());  assertEquals(1, infos.getTaVersion());  assertEquals(null, infos.getCaEcParameters()); assertEquals(0, infos.getCaKeyId());  assertEquals(0, infos.getCaVersion()); assertEquals(0, infos.getCaId());  assertEquals(0, infos.getPaceVersion()); assertEquals(0, infos.getPaceParameterId());  assertEquals(0, infos.getAaVersion()); "<AssertPlaceHolder>"; }
getAaAlgorithm() { return aaAlgorithm; }
[*] target: assertEquals(null, infos.getAaAlgorithm())
[-] pred: org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. join ( infos. getAaAlgorithm ( ), infos. getAaAlgorithm ( ) ), org. apache. commons. lang. SecurityInfos. parse ( infos. getblueblueString ( ) ) )
************************************
************************************
[+] input: Exception { final SecurityInfos infos = mapper.read(readFixture("secinfos/rvig2014"), SecurityInfos.class);  checkEcParameters(BRAINPOOLP320r1, infos.getEcPublicKey().getParameters()); assertEquals("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(infos.getEcPublicKey().getKey()) ); assertArrayEquals(infos.getEcPublicKey().getKey(), infos.getEcPublicKey().getPublicPoint().getEncoded(false)); assertEquals(0, infos.getEcPublicKeyId());  assertEquals(1, infos.getTaVersion());  assertEquals(null, infos.getCaEcParameters()); assertEquals(0, infos.getCaKeyId());  assertEquals(1, infos.getCaVersion()); assertEquals(0, infos.getCaId());  assertEquals(2, infos.getPaceVersion()); assertEquals(14, infos.getPaceParameterId());  assertEquals(1, infos.getAaVersion()); "<AssertPlaceHolder>"; }
getAaAlgorithm() { return aaAlgorithm; }
[*] target: assertEquals("0.4.0.127.0.7.1.1.4.1.3", infos.getAaAlgorithm())
[-] pred: org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. join ( infos. getAaAlgorithm() ( ), infos. getAaAlgorithm ( ) ), org. apache. commons. lang. SecurityInfos. parse ( infos. getblueblue_nlpnlp ( ) ) )
************************************
************************************
[+] input: Exception { final SecurityInfos infos = mapper.read(readFixture("secinfos/pca-rdw"), SecurityInfos.class);  assertEquals(null, infos.getEcPublicKey()); assertEquals(0, infos.getEcPublicKeyId());  assertEquals(2, infos.getTaVersion());  checkEcParameters(BRAINPOOLP320r1, infos.getCaEcParameters()); assertEquals(2, infos.getCaKeyId());  assertEquals(2, infos.getCaVersion()); assertEquals(2, infos.getCaId());  assertEquals(2, infos.getPaceVersion()); assertEquals(14, infos.getPaceParameterId());  assertEquals(0, infos.getAaVersion()); "<AssertPlaceHolder>"; }
getAaAlgorithm() { return aaAlgorithm; }
[*] target: assertEquals(null, infos.getAaAlgorithm())
[-] pred: org. junit. Assert. assertEquals ( 0, infos. getAaAlgorithm() ( ) )
************************************
************************************
[+] input: Exception { final SecurityInfos infos = mapper.read(readFromCms("pca-rdw"), SecurityInfos.class);  checkEcParameters(BRAINPOOLP320r1, infos.getEcPublicKey().getParameters()); assertEquals("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(infos.getEcPublicKey().getKey()) ); assertArrayEquals(infos.getEcPublicKey().getKey(), infos.getEcPublicKey().getPublicPoint().getEncoded(false)); assertEquals(2, infos.getEcPublicKeyId());  assertEquals(2, infos.getTaVersion());  checkEcParameters(BRAINPOOLP320r1, infos.getCaEcParameters()); assertEquals(2, infos.getCaKeyId());  assertEquals(2, infos.getCaVersion()); assertEquals(2, infos.getCaId());  assertEquals(2, infos.getPaceVersion()); assertEquals(14, infos.getPaceParameterId());  assertEquals(0, infos.getAaVersion()); "<AssertPlaceHolder>"; }
getAaAlgorithm() { return aaAlgorithm; }
[*] target: assertEquals(null, infos.getAaAlgorithm())
[-] pred: org. junit. Assert. assertEquals ( org. apache. tomcat. util. buf. Constants. class, infos. getAaAlgorithm(). getAaAlgorithm ( ). getClass ( ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("rvig2011")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals(LdsSecurityObject.OID, message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("rvig2014")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals(LdsSecurityObject.OID, message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("dl1")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals(LdsSecurityObject.OID, message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("dl2")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals(LdsSecurityObject.OID, message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("pca-rdw")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals("0.4.0.127.0.7.3.2.1", message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final ContentInfo signedMessage = ContentInfo.getInstance(fixture("pca-rvig")); final ContentInfo message = new CmsVerifier(new CertificateVerifier.None()).verify(signedMessage); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString( DigestUtils.digest("SHA1").digest(((ASN1OctetString) message.getContent()).getOctets()) )); }
verify(ContentInfo signedMessage) { return verify(signedMessage, null); }
[*] target: assertEquals(LdsSecurityObject.OID, message.getContentType().getId())
[-] pred: org. junit. Assert. assertTrue ( message. verify(ContentInfo signedMessage ) )
************************************
************************************
[+] input: Exception { final AtomicBoolean called = new AtomicBoolean(); final AtomicReference<Date> calledDate = new AtomicReference<>(); final Date verifyDate = new Date();  final ContentInfo signedMessage = ContentInfo.getInstance(fixture()); new CmsVerifier((certificate, date) -> { called.set(true); calledDate.set(date); }).verify(signedMessage, verifyDate);  "<AssertPlaceHolder>"; assertEquals(verifyDate, calledDate.get()); }
verify(ContentInfo signedMessage, Date date) { final SignedData signedData = SignedData.getInstance(signedMessage.getContent()); final X509Certificate cert = certificate(signedData); certificateVerifier.verify(cert, date);  final X500Name name = X500Name.getInstance(cert.getIssuerX500Principal().getEncoded()); try { final CMSSignedData cms = new CMSSignedData(signedMessage); cms.verifySignatures(signerId -> { if (!name.equals(signerId.getIssuer())) { throw new VerificationException("Issuer does not match certificate"); } if (!cert.getSerialNumber().equals(signerId.getSerialNumber())) { throw new VerificationException("Serial number does not match certificate"); } return new JcaSignerInfoVerifierBuilder(digestProvider).setProvider(bcProvider).build(cert); }); } catch (CMSException e) { throw new VerificationException("Could not verify CMS", e); } return signedData.getEncapContentInfo(); }
[*] target: assertEquals(true, called.get())
[-] pred: org. junit. Assert. assertTrue ( called. get ( ) )
************************************
************************************
[+] input: adjustParity() { assertArrayEquals(Hex.decode("010102020404070708080b0b0d0d0e0e101013131515161619191a1a1c1c1f1f"), CryptoUtils.adjustParity( Hex.decode("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f") ) ); assertArrayEquals(Hex.decode("202023232525262629292a2a2c2c2f2f313132323434373738383b3b3d3d3e3e"), CryptoUtils.adjustParity( Hex.decode("202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f") ) ); assertArrayEquals(Hex.decode("404043434545464649494a4a4c4c4f4f515152525454575758585b5b5d5d5e5e"), CryptoUtils.adjustParity( Hex.decode("404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f") ) ); assertArrayEquals(Hex.decode("616162626464676768686b6b6d6d6e6e707073737575767679797a7a7c7c7f7f"), CryptoUtils.adjustParity( Hex.decode("606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f") ) ); assertArrayEquals(Hex.decode("808083838585868689898a8a8c8c8f8f919192929494979798989b9b9d9d9e9e"), CryptoUtils.adjustParity( Hex.decode("808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f") ) ); assertArrayEquals(Hex.decode("a1a1a2a2a4a4a7a7a8a8ababadadaeaeb0b0b3b3b5b5b6b6b9b9bababcbcbfbf"), CryptoUtils.adjustParity( Hex.decode("a0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf") ) ); assertArrayEquals(Hex.decode("c1c1c2c2c4c4c7c7c8c8cbcbcdcdceced0d0d3d3d5d5d6d6d9d9dadadcdcdfdf"), CryptoUtils.adjustParity( Hex.decode("c0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf") ) ); "<AssertPlaceHolder>"; }
adjustParity(byte[] data) { for (int i = 0; i < data.length; i++) { // Mask with fe to get first 7 bits int b = data[i] & 0xfe; data[i] = (byte) (b | ((Integer.bitCount(b) & 1) ^ 1)); } return data; }
[*] target: assertArrayEquals(Hex.decode("e0e0e3e3e5e5e6e6e9e9eaeaececefeff1f1f2f2f4f4f7f7f8f8fbfbfdfdfefe"), CryptoUtils.adjustParity( Hex.decode("e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff") ) )
[-] pred: org. junit. Assert. assertTrue ( ( ( adjustParity. get ( 0 ) ) == 1 ) )
************************************
************************************
[+] input: shouldConvertPublicPoint() { final EcPrivateKey key = new EcPrivateKey(new ECPrivateKeySpec(D, SPEC)); assertEquals(Q, key.getQ()); "<AssertPlaceHolder>"; }
getQ() { return q; }
[*] target: assertEquals(true, key.getQ().isNormalized())
[-] pred: org. junit. Assert. assertNotNull ( key. getQ() ( ) )
************************************
************************************
[+] input: select() { // 请求参数 Map<String, Object> requestParams = new HashMap<>(); requestParams.put("methodName", "apple"); // 服务列表 ServiceMetaInfo serviceMetaInfo1 = new ServiceMetaInfo(); serviceMetaInfo1.setServiceName("myService"); serviceMetaInfo1.setServiceVersion("1.0"); serviceMetaInfo1.setServiceHost("localhost"); serviceMetaInfo1.setServicePort(1234); ServiceMetaInfo serviceMetaInfo2 = new ServiceMetaInfo(); serviceMetaInfo2.setServiceName("myService"); serviceMetaInfo2.setServiceVersion("1.0"); serviceMetaInfo2.setServiceHost("yupi.icu"); serviceMetaInfo2.setServicePort(80); List<ServiceMetaInfo> serviceMetaInfoList = Arrays.asList(serviceMetaInfo1, serviceMetaInfo2); // 连续调用 3 次 ServiceMetaInfo serviceMetaInfo = loadBalancer.select(requestParams, serviceMetaInfoList); System.out.println(serviceMetaInfo); Assert.assertNotNull(serviceMetaInfo); serviceMetaInfo = loadBalancer.select(requestParams, serviceMetaInfoList); System.out.println(serviceMetaInfo); Assert.assertNotNull(serviceMetaInfo); serviceMetaInfo = loadBalancer.select(requestParams, serviceMetaInfoList); System.out.println(serviceMetaInfo); Assert."<AssertPlaceHolder>"; }
select(Map<String, Object> requestParams, List<ServiceMetaInfo> serviceMetaInfoList);
[*] target: assertNotNull(serviceMetaInfo)
[-] pred: org. junit. Assert. assertNull ( serviceMetaInfo )
