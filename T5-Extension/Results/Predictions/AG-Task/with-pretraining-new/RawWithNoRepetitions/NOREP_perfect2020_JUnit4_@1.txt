[+] input: testNormalizeInvalidPhoneNumber() { String inputPhoneNumber = "  johndoe@gmail.com  "; String expectedTrimmedPhoneNumber = inputPhoneNumber.trim(); String actualNormalizedPhoneNumber = io.supertokens.utils.Utils.normalizeIfPhoneNumber(inputPhoneNumber); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTrimmedPhoneNumber, actualNormalizedPhoneNumber)
[-] pred: org. junit. Assert. assertEquals ( expectedTrimmedPhoneNumber, actualNormalizedPhoneNumber )
************************************
[+] input: IOException { BlameCommandRequest request = new BlameCommandRequest();  request.setPath("a.txt");  BlameResult result = createCommand().getBlameResult(request);  "<AssertPlaceHolder>"; assertEquals(2, result.getTotal());  BlameLine line = result.getLine(0);  checkFirstLine(line); line = result.getLine(1); assertEquals(2, line.getLineNumber()); assertEquals("2baab8e80280ef05a9aa76c49c76feca2872afb7", line.getRevision()); checkDate(line.getWhen()); assertEquals("line for blame", line.getCode()); assertEquals("added new line for blame", line.getDescription()); assertEquals("Zaphod Beeblebrox", line.getAuthor().getName()); assertEquals("zaphod.beeblebrox@hitchhiker.com", line.getAuthor().getMail()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testNullPlot() { double[] nums = new double[]{2710, 2755}; BoxPlot plot = BoxPlotUtil.plot(nums); TestCase."<AssertPlaceHolder>"; }
[*] target: assertNull(plot)
[-] pred: org. junit. Assert. assertNull ( plot )
************************************
[+] input: Exception { parsingAttributes.setApplicationParserSpecification(simpleSingleApplicationParser.replace( ""parse_metadata" : false", ""parse_metadata" : true" )); parsingApplicationBolt = new ParsingApplicationBolt(attributes, parsingAttributes, zooKeeperConnectorFactory, metricsTestRegistrarFactory); parsingApplicationBolt.prepare(null, null, collector);  when(tuple.getStringByField(eq(ParsingApplicationTuples.METADATA.toString()))).thenReturn("INVALID"); parsingApplicationBolt.execute(tuple); Values values = argumentEmitCaptor.getValue(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(2, values.size()); Assert.assertTrue(values.get(0) instanceof KafkaWriterMessages); KafkaWriterMessages messages = (KafkaWriterMessages)values.get(0); Assert.assertEquals(1, messages.size()); Assert.assertEquals("error", messages.get(0).getTopic());  Map<String, Object> parsed = JSON_READER.readValue(messages.get(0).getMessage()); Assert.assertEquals("RAW_LOG", parsed.get("raw_message")); Assert.assertEquals("error", parsed.get(SiembolMessageFields.SENSOR_TYPE.toString())); Assert.assertEquals("parser_error", parsed.get("error_type"));  Assert.assertTrue(values.get(1) instanceof SiembolMetricsCounters); var counters = (SiembolMetricsCounters)values.get(1); Assert.assertTrue(counters.contains(SiembolMetrics.PARSING_APP_ERROR_MESSAGES.getMetricName())); }
[*] target: assertNotNull(values)
[-] pred: org. junit. Assert. assertNotNull ( values )
************************************
[+] input: ClassNotFoundException { String cvc4_path = System.getenv("cvc4_path"); if (cvc4_path != null) { Properties.CVC4_PATH = cvc4_path; } Assume.assumeTrue(Properties.CVC4_PATH!=null); Properties.DSE_SOLVER = Properties.SolverType.CVC4_SOLVER; Properties.CRITERION = new Properties.Criterion[] { Criterion.BRANCH }; Properties.TARGET_CLASS = Foo.class.getName();  TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  BranchCoverageSuiteFitness branchCoverageSuiteFitness = new BranchCoverageSuiteFitness(); TestSuiteChromosome suite = new TestSuiteChromosome(); suite.addFitness(branchCoverageSuiteFitness); branchCoverageSuiteFitness.getFitness(suite);  // no goals covered yet int coveredGoals0 = suite.getNumOfCoveredGoals(); int notCoveredGoals0 = suite.getNumOfNotCoveredGoals(); assertEquals(0, coveredGoals0); assertNotEquals(0, notCoveredGoals0);  DefaultTestCase testCase0 = buildTestCase0(); TestChromosome testChromosome0 = new TestChromosome(); testChromosome0.setTestCase(testCase0); suite.addTest(testChromosome0);  double fitnessBeforeLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsBeforeLocalSearch = suite.getNumOfCoveredGoals();  // some goal was covered assertTrue(coveredGoalsBeforeLocalSearch > 0);  DefaultTestCase duplicatedTestCase0 = buildTestCase0(); TestChromosome duplicatedTestChromosome0 = new TestChromosome(); duplicatedTestChromosome0.setTestCase(duplicatedTestCase0); suite.addTest(duplicatedTestChromosome0);  TestSuiteLocalSearchObjective localSearchObjective = TestSuiteLocalSearchObjective .buildNewTestSuiteLocalSearchObjective(Collections.singletonList(branchCoverageSuiteFitness), suite, 1);  DSETestCaseLocalSearch localSearch = new DSETestCaseLocalSearch(); boolean improved = localSearch.doSearch(duplicatedTestChromosome0, localSearchObjective); "<AssertPlaceHolder>";  double fitnessAfterLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsAfterLocalSearch = suite.getNumOfCoveredGoals();  assertTrue(fitnessAfterLocalSearch < fitnessBeforeLocalSearch); assertTrue(coveredGoalsAfterLocalSearch > coveredGoalsBeforeLocalSearch);  }
[*] target: assertTrue(improved)
[-] pred: org. junit. Assert. assertTrue ( improved )
************************************
[+] input: getSchemaNameOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final String actual = objectUnderTest.getSchemaName();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: givenTotalMsgsRateLimitsEnabled_whenRateLimitReached_thenFailure() { when(totalMsgsRateLimitsConfiguration.isEnabled()).thenReturn(true); when(rateLimitCacheService.tryConsumeTotalMsg()).thenReturn(false);  boolean result = rateLimitService.checkTotalMsgsLimit(); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { String message = "1";  KeyPair kp2048 = RSA.generateKeyPair(); PublicKey pk = kp2048.getPublic(); PrivateKey sk = kp2048.getPrivate();  byte[] sign = RSA.signAsBytes(message, sk); assertEquals(sign.length, 256);  boolean valid = RSA.verifyAsBytes(message, sign, pk); "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: Exception {  EvoSuiteLocalAddress addr = new EvoSuiteLocalAddress("127.42.42.42",42); NetworkHandling.sendDataOnTcp(addr,null);  MockServerSocket sut = new MockServerSocket(addr.getPort(), 1, MockInetAddress.getByName(addr.getHost())); Socket socket = sut.accept(); //should not block, should not timeout Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(socket)
[-] pred: org. junit. Assert. assertNotNull ( socket )
************************************
[+] input: toRst() { final ConfigDef def = new ConfigDef() .define("opt1", Type.STRING, "a", ValidString.in("a", "b", "c"), Importance.HIGH, "docs1") .define("opt2", Type.INT, Importance.MEDIUM, "docs2") .define("opt3", Type.LIST, Arrays.asList("a", "b"), Importance.LOW, "docs3");  final String expectedRst = "" + "``opt2``\n" + "  docs2\n" + "\n" + "  * Type: int\n" + "  * Importance: medium\n" + "\n" + "``opt1``\n" + "  docs1\n" + "\n" + "  * Type: string\n" + "  * Default: a\n" + "  * Valid Values: [a, b, c]\n" + "  * Importance: high\n" + "\n" + "``opt3``\n" + "  docs3\n" + "\n" + "  * Type: list\n" + "  * Default: a,b\n" + "  * Importance: low\n" + "\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRst, def.toRst())
[-] pred: org. junit. Assert. assertEquals ( expectedRst, def. toRst ( ) )
************************************
[+] input: validateAccess() { String modelStr = EntityBuilder.buildModelStringAccess(); boolean access = false; try { modelValidator.validate(modelStr); access = true; Assert."<AssertPlaceHolder>"; } catch (DefinitionException e) { LOGGER.error("", e); Assert.assertTrue(access); } catch (ProcessException e) { LOGGER.error("", e); Assert.assertTrue(access); }   }
[*] target: assertTrue(access)
[-] pred: org. junit. Assert. assertTrue ( access )
************************************
[+] input: failedConsensusMessage() { ConsensusEventMessage msg1 = new ConsensusEventMessage(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(msg1.getConsensusMessage())
[-] pred: org. junit. Assert. assertNotNull ( msg1. getConsensusMessage ( ) )
************************************
[+] input: testToString() { for (int i = 0; i < LOOP_MAX; i++) { final long number = ThreadLocalRandom.current().nextLong(); final String string0 = toString(number); final String string1 = Tsid.from(number).toString(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(string0, string1)
[-] pred: org. junit. Assert. assertEquals ( string0, string1 )
************************************
[+] input: testOssSecurityRatingIsImmutable() { Rating rating = RatingRepository.INSTANCE.rating(OssSecurityRating.class); "<AssertPlaceHolder>"; ImmutabilityChecker checker = new ImmutabilityChecker(); rating.accept(checker); assertTrue(checker.allImmutable()); }
[*] target: assertNotNull(rating)
[-] pred: org. junit. Assert. assertNotNull ( rating )
************************************
[+] input: DecodingException { SMLReader smlReader = new SMLReader(); SMLSignature signature = smlReader.parsePayloadData(EncodingType.BASE64.decode(SML_DATA_TECHNAGON)); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(signature.getProvidedSignature()); Assert.assertEquals(46201, signature.getMeterPositionAsLong()); Assert.assertEquals("09 01 45 4D 48 00 00 7F 92 03", Utils.toFormattedHex(signature.getServerId())); Assert.assertEquals(14, new BigInteger(Utils.reverseByteOrder(signature.getPagination())).intValue()); Assert.assertEquals(83696, new BigInteger(Utils.reverseByteOrder(signature.getSecondsIndex())).intValue()); Assert.assertEquals(59, new BigInteger(signature.getBytesLog()).intValue()); Assert.assertEquals(8, new BigInteger(new byte[]{signature.getStatus()}).intValue());  LocalDateTime dateTime = LocalDateTime.of(2017, Month.NOVEMBER, 23, 15, 13, 07); OffsetDateTime offsetDateTime = OffsetDateTime.of(dateTime, ZoneOffset.of("+00:00")); Assert.assertEquals(offsetDateTime, signature.getTimestampAsDate());   }
[*] target: assertNotNull(signature)
[-] pred: org. junit. Assert. assertNotNull ( signature )
************************************
[+] input: queryJobConfig() { JobConfigParam jobConfigParam=new JobConfigParam(); jobConfigParam.setPageNum(2); PageModel<JobConfigDTO> pageModel = jobConfigService.queryJobConfig(jobConfigParam); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(pageModel)
[-] pred: org. junit. Assert. assertNotNull ( pageModel )
************************************
[+] input: RepositoryException { JwtClaim jwtClaim = jwtReader.readClaim(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(jwtClaim)
[-] pred: org. junit. Assert. assertNull ( jwtClaim )
************************************
[+] input: load_SearchRetrievesPackFloorBelow_CorrectResourcesFoundInPacks() { OrderedResourceRepository repository = makeMockRepository( Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta" ), Set.of( "textures/bat_efgh.png" ) );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png"), ResourceLocation.parse("textures/bat_efgh.png") ); assertTrue(pack.isPresent()); assertTrue(pack.get().resource(ResourceLocation.parse("zombie.png")).isPresent()); assertFalse(pack.get().resource(ResourceLocation.parse("zombie2.png")).isPresent()); assertFalse(resourceRepository.highestPackWith(ResourceLocation.parse("dummy")).isPresent());  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: construct_EmptyHeightArea_ConstructedCorrectly() { Area rect = new Area(0, 0, 10, 0); assertFalse(rect.iterator().hasNext()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, rect.size())
[-] pred: org. junit. Assert. assertEquals ( 0, rect. size ( ) )
************************************
[+] input: isMale() { mockServerReturnString(true); Boolean male = userService.isMale(Long100); "<AssertPlaceHolder>"; }
[*] target: assertTrue(male)
[-] pred: org. junit. Assert. assertTrue ( male )
************************************
[+] input: givenMaxAliasesNotReached_whenGetNextTopicAlias_thenReturnNewAlias() { topicAliasCtx = new TopicAliasCtx(true, 2, new ConcurrentHashMap<>(), new ConcurrentHashMap<>(Map.of("1", 1)));  int topicAlias = topicAliasCtx.getNextTopicAlias("test/topic/1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, topicAlias)
[-] pred: org. junit. Assert. assertEquals ( 2, topicAlias )
************************************
[+] input: shouldReturnNullForInvalidUrl() { PatientIdentifierType actualIdentifierType = dao.getPatientIdentifierTypeByUrl("invalidUrl"); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualIdentifierType)
[-] pred: org. junit. Assert. assertNull ( actualIdentifierType )
************************************
[+] input: testDeserializePrimitives() { Schema schema = new Schema(required(1, "string_type", Types.StringType.get()), required(2, "int_type", Types.IntegerType.get()), required(3, "long_type", Types.LongType.get()), required(4, "boolean_type", Types.BooleanType.get()), required(5, "float_type", Types.FloatType.get()), required(6, "double_type", Types.DoubleType.get()), required(7, "date_type", Types.DateType.get()));  List<?> expected = Arrays.asList("foo", 12, 3000L, true, 3.01F, 3.0D, "1998-11-13");  Record record = TestHelpers.createCustomRecord(schema, expected); IcebergWritable writable = new IcebergWritable(); writable.setRecord(record); writable.setSchema(schema);  IcebergSerDe serDe = new IcebergSerDe(); List<Object> result = (List<Object>) serDe.deserialize(writable);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: createNoRowsTest() { ExampleTable table = new ColumnarExampleTable(Arrays.asList(ExampleTestTools.attributeInt()));  assertEquals(1, table.getAttributeCount()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, table.size())
[-] pred: org. junit. Assert. assertEquals ( 0, table. size() )
************************************
[+] input: Exception { ConfigSchemaService service = EnrichmentSchemaService .createEnrichmentsSchemaService(new ConfigEditorUiLayout()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(service)
[-] pred: org. junit. Assert. assertNotNull ( service )
************************************
[+] input: canScanForMigrationChain() { MigrationChain<ChronoDBInternal> chain = MigrationChain.fromPackage("org.chronos.chronodb.test.cases.migration.chainA"); List<Class<? extends ChronosMigration<ChronoDBInternal>>> actualClasses = chain.getMigrationClasses(); List<Class<? extends ChronosMigration<ChronoDBInternal>>> expectedClasses = Lists.newArrayList(); expectedClasses.add(MigrationA1.class); expectedClasses.add(MigrationA2.class); expectedClasses.add(MigrationA3.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedClasses, actualClasses)
[-] pred: org. junit. Assert. assertEquals ( expectedClasses, actualClasses )
************************************
[+] input: InvocationTargetException { Field f = RestrictionBypass.getDeclaredField(this.getClass(), "testField2"); "<AssertPlaceHolder>"; assertSame(f.get(this), testField2); }
[*] target: assertNotNull(f)
[-] pred: org. junit. Assert. assertNotNull ( f )
************************************
[+] input: testLimit() { BrowseCommandRequest request = new BrowseCommandRequest(); request.setLimit(1); BrowserResult result = createCommand().getBrowserResult(request);  "<AssertPlaceHolder>";  Collection<FileObject> foList = result.getFile().getChildren();  assertThat(foList).extracting("name").containsExactly("c", "a.txt"); assertThat(result.getFile().isTruncated()).isTrue(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testApplyTotalMsgsRateLimits_whenTotalMsgsLimitDisabled() { when(rateLimitService.isTotalMsgsLimitEnabled()).thenReturn(false);  List<ValueWithTopicFilter<ClientSubscription>> list = List.of( newValueWithTopicFilter("c1", 0, "t1"), newValueWithTopicFilter("c2", 1, "t2"), newValueWithTopicFilter("c3", 2, "t3") ); List<ValueWithTopicFilter<ClientSubscription>> result = msgDispatcherService.applyTotalMsgsRateLimits(list);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(list, result)
[-] pred: org. junit. Assert. assertEquals ( list, result )
************************************
[+] input: getTypeOutputZero() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final int actual = objectUnderTest.getType();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual)
[-] pred: org. junit. Assert. assertEquals ( 0, actual )
************************************
[+] input: testDevicePersistedMsgsBucketConfiguration() { DevicePersistedMsgsRateLimitsConfiguration config = new DevicePersistedMsgsRateLimitsConfiguration(); config.setEnabled(true); config.setConfig("100:60,200:120");  BucketConfiguration bucketConfig = config.devicePersistedMsgsBucketConfiguration();  "<AssertPlaceHolder>"; assertEquals(2, bucketConfig.getBandwidths().length);  Bandwidth bw1 = bucketConfig.getBandwidths()[0]; assertEquals(100, bw1.getCapacity()); assertEquals(TimeUnit.SECONDS.toNanos(60), bw1.getRefillPeriodNanos());  Bandwidth bw2 = bucketConfig.getBandwidths()[1]; assertEquals(200, bw2.getCapacity()); assertEquals(TimeUnit.SECONDS.toNanos(120), bw2.getRefillPeriodNanos()); }
[*] target: assertNotNull(bucketConfig)
[-] pred: org. junit. Assert. assertNotNull ( bucketConfig )
************************************
[+] input: load_SearchRetrievesPack_CorrectResourcesFoundInPacks() { OrderedResourceRepository repository = makeMockRepository(Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta" ));  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png") ); assertTrue(pack.isPresent()); assertTrue(pack.get().resource(ResourceLocation.parse("zombie.png")).isPresent()); assertFalse(pack.get().resource(ResourceLocation.parse("zombie2.png")).isPresent()); assertFalse(resourceRepository.highestPackWith(ResourceLocation.parse("dummy")).isPresent());  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: Exception { final WebClient client = getWebClient(); final WebWindow window = client.openWindow(UrlUtils.URL_ABOUT_BLANK, "TestingWindow"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(window)
[-] pred: org. junit. Assert. assertNotNull ( window )
************************************
[+] input: Exception { String[] args = {"../"}; TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  // create a user AuthRecipeUserInfo userInfo = EmailPassword.signUp(process.main, "test@example.com", "testPassword");  String externalUserId = "external-test";  UserIdMapping.createUserIdMapping(process.main, userInfo.getSupertokensUserId(), externalUserId, null, false);  { // duplicate exception with both supertokensUserId and externalUserId Exception error = null; try { UserIdMapping.createUserIdMapping(process.main, userInfo.getSupertokensUserId(), externalUserId, null, false); } catch (Exception e) { error = e; }  assertNotNull(error); assertTrue(error instanceof UserIdMappingAlreadyExistsException);  UserIdMappingAlreadyExistsException usersIdMappingExistsError = (UserIdMappingAlreadyExistsException) error; assertTrue(usersIdMappingExistsError.doesExternalUserIdExist); assertTrue(usersIdMappingExistsError.doesSuperTokensUserIdExist); }  { // duplicate exception with superTokensUserId Exception error = null; try { UserIdMapping.createUserIdMapping(process.main, userInfo.getSupertokensUserId(), "newExternalId", null, false); } catch (Exception e) { error = e; }  assertNotNull(error); assertTrue(error instanceof UserIdMappingAlreadyExistsException);  UserIdMappingAlreadyExistsException usersIdMappingExistsError = (UserIdMappingAlreadyExistsException) error; assertFalse(usersIdMappingExistsError.doesExternalUserIdExist); assertTrue(usersIdMappingExistsError.doesSuperTokensUserIdExist);  }  { // duplicate exception with externalUserId  AuthRecipeUserInfo newUser = EmailPassword.signUp(process.main, "test2@example.com", "testPass123"); Exception error = null; try { UserIdMapping.createUserIdMapping(process.main, newUser.getSupertokensUserId(), externalUserId, null, false); } catch (Exception e) { error = e; }  "<AssertPlaceHolder>"; assertTrue(error instanceof UserIdMappingAlreadyExistsException);  UserIdMappingAlreadyExistsException usersIdMappingExistsError = (UserIdMappingAlreadyExistsException) error; assertTrue(usersIdMappingExistsError.doesExternalUserIdExist); assertFalse(usersIdMappingExistsError.doesSuperTokensUserIdExist);  }  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: runTest() { final String key = "key for idea"; final String plainText = "Hello world input text"; final String encrypted = IDEA.encrypt(plainText, key); final String decrypted = IDEA.decrypt(encrypted, key);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(plainText, decrypted)
[-] pred: org. junit. Assert. assertEquals ( plainText, decrypted )
************************************
[+] input: Exception { // create account Alias alias = AliasStorageServiceTest.createAlias(); boolean result = aliasService.aliasTxCommit(chainId,alias); "<AssertPlaceHolder>"; Account account = accountService.getAccount(chainId, AddressTool.getStringAddressByBytes(alias.getAddress())); assertNotNull(account); assertEquals(account.getAlias(),alias.getAlias()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSchemaSerializationSchema() { final JsonRowDataSerializationSchema expectedSer = JsonRowDataSerializationSchema.builder(PHYSICAL_TYPE).build();  final DynamicTableSink actualSink = createTableSink(SCHEMA, getAllOptions()); assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock; TestDynamicTableFactory.DynamicTableSinkMock sinkMock = (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;  SerializationSchema<RowData> actualSer = sinkMock.valueFormat.createRuntimeEncoder( new SinkRuntimeProviderContext(false), PHYSICAL_DATA_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSer, actualSer)
[-] pred: org. junit. Assert. assertEquals ( expectedSer, actualSer )
************************************
[+] input: test_read_public_key() { final SignatureOnlyVerificationParser parser = new SignatureOnlyVerificationParser(); final String s = parser.parsePublicKey(TestUtils.TEST_SIG_ONLY); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: getUserAsync() { mockServerReturnObject(USER_MIKE); CompletableFuture<User> userCompletableFuture = userService.getUserAsync(Long100); "<AssertPlaceHolder>"; User user; try { user = userCompletableFuture.get(); } catch (Exception e) { throw new IllegalStateException("userCompletableFuture get error"); } assertNotNull(user); assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(userCompletableFuture)
[-] pred: org. junit. Assert. assertNotNull ( userCompletableFuture )
************************************
[+] input: sizeObject_Empty_0() { JsonMetadataView view = new JsonMetadataView(new JsonObject(), String::compareTo); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, view.size())
[-] pred: org. junit. Assert. assertEquals ( 0, view. size() )
************************************
[+] input: canCreateEmptyDiff() { MutableIndexValueDiff diff = new MutableIndexValueDiff(null, null); assertNotNull(diff); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertFalse(diff.isEntryUpdate()); }
[*] target: assertTrue(diff.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( diff. isEmpty() )
************************************
[+] input: equals_SameColors_Symmetric() { int first = Color.pack(1, 2, 3, 4); int second = Color.pack(1, 2, 3, 4); "<AssertPlaceHolder>"; assertEquals(second, first); }
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
[+] input: emptyPeriodIsSingleton() { Period empty1 = Period.empty(); Period empty2 = Period.empty(); "<AssertPlaceHolder>"; assertNotNull(empty2); assertTrue(empty1 == empty2); }
[*] target: assertNotNull(empty1)
[-] pred: org. junit. Assert. assertNotNull ( empty1 )
************************************
[+] input: equals_SameColors_Transitive() { int first = Color.pack(1, 2, 3, 4); int second = Color.pack(1, 2, 3, 4); int third = Color.pack(1, 2, 3, 4); "<AssertPlaceHolder>"; assertEquals(second, third); assertEquals(first, third); }
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
[+] input: givenTotalMsgsRateLimitsEnabled_whenRateLimitNotReached_thenSuccess() { when(totalMsgsRateLimitsConfiguration.isEnabled()).thenReturn(true); when(rateLimitCacheService.tryConsumeTotalMsg()).thenReturn(true);  boolean result = rateLimitService.checkTotalMsgsLimit(); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { Class<?> SWTClass = m_lastLoader.loadClass("org.eclipse.swt.SWT"); ColorInfo info = ColorSupport.createInfo(ReflectionUtils.getFieldByName(SWTClass, "COLOR_RED")); // check create "<AssertPlaceHolder>"; // check color name assertEquals("COLOR_RED", info.m_name); // check special data assertEquals("org.eclipse.swt.SWT.COLOR_RED", info.getData()); // check RGB assertNotNull(info.m_rgb); assertEquals(255, info.m_rgb.red); assertEquals(0, info.m_rgb.green); assertEquals(0, info.m_rgb.blue); }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: testAppendedChecksumMagicV0AndV1() { for (byte magic : Arrays.asList(MAGIC_VALUE_V0, MAGIC_VALUE_V1)) { MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(128), magic, CompressionType.NONE, TimestampType.CREATE_TIME, 0L); ProducerBatch batch = new ProducerBatch(new TopicPartition("topic", 1), builder, now); byte[] key = "hi".getBytes(); byte[] value = "there".getBytes();  FutureRecordMetadata future = batch.tryAppend(now, key, value, Record.EMPTY_HEADERS, null, now); "<AssertPlaceHolder>"; byte attributes = LegacyRecord.computeAttributes(magic, CompressionType.NONE, TimestampType.CREATE_TIME); long expectedChecksum = LegacyRecord.computeChecksum(magic, attributes, now, key, value); assertEquals(expectedChecksum, future.checksumOrNull().longValue()); } }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: URISyntaxException { PugConfiguration config = new PugConfiguration(); config.setTemplateLoader(new FileTemplateLoader(TestFileHelper.getRootResourcePath() + "/parser/", "jade")); PugTemplate template = config.getTemplate("assignment"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(template)
[-] pred: org. junit. Assert. assertNotNull ( template )
************************************
[+] input: IOException { NettyTransportClient client = (NettyTransportClient) this.oneClient(); ConnectionId connectionId = ConnectionId.parseConnectionId(host, port); ConnectionId clientConnectionId = client.connectionId(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(connectionId, clientConnectionId)
[-] pred: org. junit. Assert. assertEquals ( connectionId, clientConnectionId )
************************************
[+] input: testPutIfAbsent() { ConcurrentHashMapOrdered<String, String> map = new ConcurrentHashMapOrdered<>(); assertNull(map.putIfAbsent("key1", "value1")); assertEquals("value1", map.get("key1")); assertEquals("value1", map.putIfAbsent("key1", "value2")); assertEquals("value1", map.get("key1")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, map.size())
[-] pred: org. junit. Assert. assertEquals ( 1, map. size() )
************************************
[+] input: JSONException { OpenWeatherMapSource source = new OpenWeatherMapSource(context); Location location = new SimpleLocation("q=omsk", false); JSONObject json = source.queryCurrentWeather(location); "<AssertPlaceHolder>"; assertEquals("Omsk", json.getString("name")); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: Exception { ContainerInfo panel = parseContainer( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "  }", "}"); RootAssociation association = (RootAssociation) panel.getAssociation(); assertSame(panel, association.getJavaInfo()); assertTrue(association.canDelete()); // try to remove() "<AssertPlaceHolder>"; assertSame(association, panel.getAssociation()); }
[*] target: assertFalse(association.remove())
[-] pred: org. junit. Assert. assertFalse ( association. remove ( ) )
************************************
[+] input: testNorthWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.compactNine(population, 5);  Chromosome exepcted_individual = population.get(0); Chromosome returned_individual = neighbors.get(4);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: getCurrentGtidLastCommitOutputNull() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final String actual = objectUnderTest.getCurrentGtidLastCommit();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: IOException { // Making a task that is not in PENDING state. IJobKey jobKey = IJobKey.build(new JobKey("role", "test", "nonPendingJob")); IScheduledTask task = TestUtils.makeTask(jobKey, "task0", 0, ScheduleStatus.ASSIGNED, 10, 10, 10);  PubsubEvent.TaskStateChange taskStateChange = PubsubEvent.TaskStateChange.transition( task, ScheduleStatus.INIT);  pendingTaskGroups.taskChangedState(taskStateChange); expectLastCall();  // Recording the return value of pendingTaskGroups.getGroups(). List<TaskGroup> taskGroupList = new ArrayList<>(); expect(pendingTaskGroups.getGroups()).andReturn(taskGroupList).anyTimes();  replay(pendingTaskGroups);  // Testing. pendingTaskGroups.taskChangedState(taskStateChange); PendingTasks pendingTasks = new PendingTasks(pendingTaskGroups, nearestFit); JsonNode mimicResponseNoPendingTaskJson = new ObjectMapper().createArrayNode(); JsonNode actualResponseJson = new ObjectMapper().valueToTree( pendingTasks.getOffers().getEntity()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(mimicResponseNoPendingTaskJson, actualResponseJson)
[-] pred: org. junit. Assert. assertEquals ( mimicResponseNoPendingTaskJson, actualResponseJson )
************************************
[+] input: testRingTopology_mostRightNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.ringTopology(population, 15);  Chromosome exepcted_individual = population.get(0); Chromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.emptyTreatment(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_FORWARDING_ROUTING_V4); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_FORWARDING_NOP_ROUTING_V4) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.builder() .wipeDeferred() .build(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_ACL_ACL); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_ACL_DROP) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: testOther() { final TablePassThroughRule tablePassThroughRule = new TablePassThroughRule(generateDummyInputPort(), generateDummyOutputPort(), SetRelation.SUBSET); final PredictionModelMetaData modelMetaData = new PredictionModelMetaData(PredictionModel.class); final MetaData result = tablePassThroughRule.modifyMetaData(modelMetaData); "<AssertPlaceHolder>"; }
[*] target: assertSame(modelMetaData, result)
[-] pred: org. junit. Assert. assertSame ( modelMetaData, result )
************************************
[+] input: IOException { String hdbtiSample = org.apache.commons.io.IOUtils .toString(XSKHDBTIParserTest.class.getResourceAsStream("/invalidTablePropertySyntax.hdbti"), StandardCharsets.UTF_8); XSKHDBTIParser xskhdbtiParser = new XSKHDBTIParser();  try { xskhdbtiParser.parse("/test/xsk/com/sap/invalidTablePropertySyntax.hdbti", hdbtiSample); } catch (TablePropertySyntaxException parseErrorException) { "<AssertPlaceHolder>"; } catch (Exception e) { fail(); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: RepositoryException { PackageModel packageModelByPath = packageInfoService.getPackageModelByPath("/etc/packages/testGroup/testPackage-3.zip", resourceResolver);  "<AssertPlaceHolder>"; }
[*] target: assertNull(packageModelByPath)
[-] pred: org. junit. Assert. assertNull ( packageModelByPath )
************************************
[+] input: Exception { // prepare objects List<Object> objects; { objects = new ArrayList<>(); objects.add("123"); objects.add(555); } // prepare selection provider ISelectionProvider selectionProvider; { final ISelection selection = new StructuredSelection(objects); selectionProvider = new ISelectionProvider() { @Override public ISelection getSelection() { return selection; }  @Override public void setSelection(ISelection _selection) { }  @Override public void removeSelectionChangedListener(ISelectionChangedListener listener) { }  @Override public void addSelectionChangedListener(ISelectionChangedListener listener) { } }; } // get iterable Iterable<Object> iterable = GenericsUtils.iterableSelection(selectionProvider); // iterate { // prepare iterator Iterator<Object> iterator = iterable.iterator(); // first element assertTrue(iterator.hasNext()); assertSame(objects.get(0), iterator.next()); // second element assertTrue(iterator.hasNext()); assertSame(objects.get(1), iterator.next()); // not more elements "<AssertPlaceHolder>"; } }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: JSONException { final JSONObject o = new JSONObject(); final FeatureList list = FeatureList.parse(o); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty ( ) )
************************************
[+] input: shouldNotCheckpointOffsetsOnCommitIfEosIsEnabled() { task = createStatefulTask(createConfig(true), true); task.initializeStateStores(); task.initializeTopology(); task.commit(); final File checkpointFile = new File( stateDirectory.directoryForTask(taskId00), ProcessorStateManager.CHECKPOINT_FILE_NAME );  "<AssertPlaceHolder>"; }
[*] target: assertFalse(checkpointFile.exists())
[-] pred: org. junit. Assert. assertFalse ( checkpointFile. exists ( ) )
************************************
[+] input: UnsupportedEncodingException { BigDecimal decimal = new BigDecimal("1234567890123456789012345678901234567890.1234567809"); byte[] bytes = SerializeUtils.bigDecimal2Bytes(decimal); BigDecimal decimal1 = SerializeUtils.bytes2BigDecimal(bytes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(decimal,decimal1)
[-] pred: org. junit. Assert. assertEquals ( decimal, decimal1 )
************************************
[+] input: Exception { ContainerInfo panel = parseContainer( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "  }", "}"); GenericProperty property = (GenericProperty) panel.getPropertyByTitle("enabled"); SetterAccessor accessor = (SetterAccessor) getGenericPropertyAccessors(property).get(0); // check that IAccessibleExpressionAccessor is available // note, that we don't check it, I just don't know how to do this more easy than perform full check // but we expect that it should be from IAccessibleExpressionAccessor.Utils.forMethod() IAccessibleExpressionAccessor accessibleAccessor = accessor.getAdapter(IAccessibleExpressionAccessor.class); "<AssertPlaceHolder>"; assertNotNull(ReflectionUtils.getFieldByName(accessibleAccessor.getClass(), "val$method")); }
[*] target: assertNotNull(accessibleAccessor)
[-] pred: org. junit. Assert. assertNotNull ( accessibleAccessor )
************************************
[+] input: testExtractMessages_MacbookProUnderflow() { final Data raw = Data.fromHexEncodedString("02011a0aff4c001005031c0b4c"); final List<Data> messages = BLEDeviceFilter.extractMessages(raw.value); "<AssertPlaceHolder>"; }
[*] target: assertNull(messages)
[-] pred: org. junit. Assert. assertNull ( messages )
************************************
[+] input: IOException { String webpathStr = "projects/foo/location/earth/datasets/bar/dicomStores/" + "fee/dicomWeb/studies/abc/series/xyz/instances/123";  WebPathParser parser = new WebPathParser(); WebPathParser.DicomWebPath dicomWebPath = parser.parseDicomWebpath(webpathStr);  Assert."<AssertPlaceHolder>"; Assert.assertEquals("foo", dicomWebPath.project); Assert.assertEquals("earth", dicomWebPath.location); Assert.assertEquals("bar", dicomWebPath.dataset); Assert.assertEquals("fee", dicomWebPath.storeId); Assert.assertEquals("abc", dicomWebPath.studyId); Assert.assertEquals("xyz", dicomWebPath.seriesId); Assert.assertEquals("123", dicomWebPath.instanceId); Assert.assertEquals( "projects/foo/location/earth/datasets/bar/dicomStores/fee", dicomWebPath.dicomStorePath); }
[*] target: assertNotNull(dicomWebPath)
[-] pred: org. junit. Assert. assertNotNull ( dicomWebPath )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.getParameterList(anyString())).thenReturn(Arrays.asList(new String[]{"bla","real"}, new String[]{"bla","int"})); List<MetaDataError> errors = new ArrayList<>(); final ColumnSetPrecondition precondition = new ColumnSetPrecondition(generateDummyInputPort(errors), ColumnSetPrecondition.getColumnsByParameterListEntry(handler, "some_key",1), Column.Category.OBJECT); precondition.check(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: getGtidSetStrOutputNull() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final String actual = objectUnderTest.getGtidSetStr();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testUpdate() { dao.insert(entity);  entity.setActive(true);  dao.update(entity);  ExecutionInstanceEntity result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; Assert.assertTrue(entity.isActive());  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenPubMsgWithoutTopicAlias_whenGetTopicNameByAlias_thenNoTopicReturned() { topicAliasCtx = new TopicAliasCtx(true, 5);  MqttProperties properties = new MqttProperties(); PublishMsg publishMsg = PublishMsg.builder().properties(properties).build(); String topicNameByAlias = topicAliasCtx.getTopicNameByAlias(publishMsg);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(topicNameByAlias)
[-] pred: org. junit. Assert. assertNull ( topicNameByAlias )
************************************
[+] input: Exception { Map<String, Object> javagm = this.configMap.get("javagm"); Object testdata = javagm.get("testdata");  String cert = (String) ((Map<String, Object>) testdata).get("cert"); Assert.assertNotNull(cert);  X509Certificate certificate = SM2Util.loadX509CertificateFromString(cert); Assert."<AssertPlaceHolder>"; Assert.assertEquals("SM3WITHSM2", certificate.getSigAlgName()); }
[*] target: assertNotNull(certificate)
[-] pred: org. junit. Assert. assertNotNull ( certificate )
************************************
[+] input: testAnyLabelEqualToWildcardLabel() { Label testLabel = new Label("Test");  WildcardLabel wildcardLabel = new WildcardLabel();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(testLabel.equals(wildcardLabel))
[-] pred: org. junit. Assert. assertTrue ( testLabel. equals ( wildcardLabel ) )
************************************
[+] input: testRenderAcceptContentType() { String expected = "text/html, application/xhtml+xml, application/xml; q=0.9, image/webp, */*; q=0.8"; ByteBuf buf = ByteBuf.wrapForWriting(new byte[expected.length()]); List<AcceptMediaType> acts = new ArrayList<>(); acts.add(AcceptMediaType.of(HTML)); acts.add(AcceptMediaType.of(XHTML_APP)); acts.add(AcceptMediaType.of(MediaTypes.XML_APP, 90)); acts.add(AcceptMediaType.of(WEBP)); acts.add(AcceptMediaType.of(MediaTypes.ANY, 80)); AcceptMediaType.render(acts, buf); String actual = asAscii(buf); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: formatHijriDate() { String str = UiUtils.formatHijriDate(10, "Safar", 1415); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(str)
[-] pred: org. junit. Assert. assertNotNull ( str )
************************************
[+] input: loadPersistedMsgCtxTest() { ApplicationSessionCtx applicationSessionCtx = buildApplicationSessionCtx(); when(sessionCtxService.findApplicationSessionCtx(CLIENT_ID)).thenReturn(Optional.of(applicationSessionCtx));  ApplicationPersistedMsgCtx actual = applicationPersistedMsgCtxService.loadPersistedMsgCtx(CLIENT_ID); ApplicationPersistedMsgCtx expected = new ApplicationPersistedMsgCtx(getPendingMsgIdsMap(), getPendingMsgIdsMap()); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { { TestInput input = new TestInput("value"); io.supertokens.utils.Utils.PubPriKey rsa = io.supertokens.utils.Utils.generateNewPubPriKey(); String token = JWT.createAndSignLegacyAccessToken(new Gson().toJsonTree(input), rsa.privateKey, AccessToken.VERSION.V1); TestInput output = new Gson().fromJson( JWT.verifyJWTAndGetPayload(JWT.preParseJWTInfo(token), rsa.publicKey).payload, TestInput.class); assertEquals(input, output); }  { TestInput input = new TestInput("value"); io.supertokens.utils.Utils.PubPriKey rsa = io.supertokens.utils.Utils.generateNewPubPriKey(); String token = JWT.createAndSignLegacyAccessToken(new Gson().toJsonTree(input), rsa.privateKey, AccessToken.VERSION.V2); TestInput output = new Gson().fromJson( JWT.verifyJWTAndGetPayload(JWT.preParseJWTInfo(token), rsa.publicKey).payload, TestInput.class); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(input, output)
[-] pred: org. junit. Assert. assertEquals ( input, output )
************************************
[+] input: SemanticException { SubstringDomain assume1 = domainB.assume(YSubstringOfX, null, null, null); SubstringDomain assume2 = domainB.assume(XEndsWithY, null, null, null); SubstringDomain assume3 = domainB.assume(XStartsWithY, null, null, null);  "<AssertPlaceHolder>"; assertEquals(assume1, assume3); assertTrue(assume1.getState(x).contains(y)); assertTrue(assume1.getState(x).contains(w)); assertTrue(assume1.getState(x).contains(z)); assertTrue(assume1.getState(y).contains(z)); }
[*] target: assertEquals(assume1, assume2)
[-] pred: org. junit. Assert. assertEquals ( assume1, assume2 )
************************************
[+] input: testInitializeClasses() {   EvoClassLoader loader = new EvoClassLoader(); String className = "com.examples.with.different.packagename.classhandling.TimeA"; //no mocking RuntimeSettings.deactivateAllMocking(); boolean problem = ClassStateSupport.initializeClasses(loader, className); Assert.assertFalse(problem);  //with mocking RuntimeSettings.mockJVMNonDeterminism = true; className = "com.examples.with.different.packagename.classhandling.TimeB"; problem = ClassStateSupport.initializeClasses(loader,className); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(problem)
[-] pred: org. junit. Assert. assertFalse ( problem )
************************************
[+] input: IOException { ByteArrayOutputStream buffer = new ByteArrayOutputStream(); ZipOutputStream zipout = new ZipOutputStream(buffer); zipout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF")); zipout.putNextEntry(new ZipEntry("META-INF/ALIAS.SF")); zipout.finish(); ByteArrayOutputStream out = new ByteArrayOutputStream();  int count = instrumenter.instrumentAll( new ByteArrayInputStream(buffer.toByteArray()), out, "Test");  "<AssertPlaceHolder>"; ZipInputStream zipin = new ZipInputStream(new ByteArrayInputStream( out.toByteArray())); assertEquals("META-INF/MANIFEST.MF", zipin.getNextEntry().getName()); assertNull(zipin.getNextEntry()); }
[*] target: assertEquals(0, count)
[-] pred: org. junit. Assert. assertEquals ( 0, count )
************************************
[+] input: givenNoSessionsLimit_whenCheckSessionsLimit_thenSuccess() { rateLimitService.setSessionsLimit(0);  boolean result = rateLimitService.checkSessionsLimit(CLIENT_ID); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { Object shell = ContainerSupport.createShell(); Image rcpImage = ImageDescriptor.createFromFile(Object.class, "/javax/swing/plaf/basic/icons/JavaCup16.png") .createImage(); try { assertNull(ReflectionUtils.invokeMethod(shell, "getImage()")); // ContainerSupport.setShellImage(shell, rcpImage); // check newly set image { Object image = ReflectionUtils.invokeMethod(shell, "getImage()"); // exists... "<AssertPlaceHolder>"; // ..and has same size { Object bounds = ReflectionUtils.invokeMethod(image, "getBounds()"); assertEquals(rcpImage.getBounds().width, ReflectionUtils.getFieldInt(bounds, "width")); assertEquals(rcpImage.getBounds().height, ReflectionUtils.getFieldInt(bounds, "height")); } } } finally { rcpImage.dispose(); ControlSupport.dispose(shell); } }
[*] target: assertNotNull(image)
[-] pred: org. junit. Assert. assertNotNull ( image )
************************************
[+] input: shouldReturnObjectsByClassAndPattern() { Point point1 = new Point("Point-00001"); pool.addObject(point1); Point point2 = new Point("Point-00002"); pool.addObject(point2); Path path1 = new Path("Point-00003", point1.getReference(), point2.getReference()); pool.addObject(path1);  Set<Point> points = pool.getObjects(Point.class, Pattern.compile("Point.*"));  assertEquals(2, points.size()); assertTrue(points.contains(point1)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(points.contains(point2))
[-] pred: org. junit. Assert. assertTrue ( points. contains ( point2 ) )
************************************
[+] input: Exception { final String topicPath = DEFAULT_TENANT + InlongConstants.SLASH + DEFAULT_NAMESPACE + InlongConstants.SLASH + "testGetPartitionedTopicMetadata"; PulsarUtils.createPartitionedTopic(client, pulsarCluster, topicPath, DEFAULT_PARTITIONS_NUM); Thread.sleep(500); PulsarTopicMetadata metadata = PulsarUtils.getPartitionedTopicMetadata(client, pulsarCluster, topicPath); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(metadata)
[-] pred: org. junit. Assert. assertNotNull ( metadata )
************************************
[+] input: Exception { APIConnector connector = getApiConnectorMock(); JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(result.organization); Assert.assertNull(result.organization.name);  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: listResources_FilterNoMatch_NoMatches() { List<ResourceCollection> collections = new ArrayList<>(); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("textures/one.png")))); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("textures/two.png")))); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("textures/three.png"))));  OrderedResourceRepository repository = new OrderedResourceRepository(PackType.CLIENT_RESOURCES, collections);  Collection<ResourceLocation> results = repository.list("textures", (file) -> file.endsWith(".jpg")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, results.size())
[-] pred: org. junit. Assert. assertEquals ( 0, results. size ( ) )
************************************
[+] input: findExistingRechargePosition() { Point currentVehiclePoint = new Point("Current vehicle point") .withType(Point.Type.HALT_POSITION); Vehicle vehicle = new Vehicle("Some vehicle") .withRechargeOperation("Do some recharging") .withCurrentPosition(currentVehiclePoint.getReference());  Point locationAccessPoint = new Point("Location access point") .withType(Point.Type.HALT_POSITION);  LocationType rechargeLocType = new LocationType("Recharge location type") .withAllowedOperations(Collections.singletonList(vehicle.getRechargeOperation())); Location location = new Location("Recharge location", rechargeLocType.getReference());  Location.Link link = new Location.Link(location.getReference(), locationAccessPoint.getReference()); location = location.withAttachedLinks(new HashSet<>(Arrays.asList(link)));  locationAccessPoint = locationAccessPoint.withAttachedLinks(new HashSet<>(Arrays.asList(link)));  when(plantModelService.fetchObjects(Location.class)) .thenReturn(Collections.singleton(location)); when(plantModelService.fetchObject(LocationType.class, rechargeLocType.getReference())) .thenReturn(rechargeLocType); when(plantModelService.fetchObject(Point.class, currentVehiclePoint.getReference())) .thenReturn(currentVehiclePoint); when(plantModelService.fetchObject(Point.class, locationAccessPoint.getReference())) .thenReturn(locationAccessPoint);  rechargePosSupplier.initialize();  List<Destination> result = rechargePosSupplier.findRechargeSequence(vehicle); "<AssertPlaceHolder>"; assertThat(result, is(not(empty()))); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testToStringEdgePatternWithLabelDisjunction() { ArrayList<ArrayList<Label>> labelSetList = new ArrayList<>(); addLabelSetTo(labelSetList, new String[]{"AreColleagues"}); addLabelSetTo(labelSetList, new String[]{"Does"}); EdgePattern edgePattern = new EdgePattern(null, labelSetList, null, Direction.LEFT_TO_RIGHT, 1);  String expectedResult = "(->, nil, {{AreColleagues}, {Does}}, {}, (1, 1))"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, edgePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, edgePattern. toString ( ) )
************************************
[+] input: testUpdate() { dao.insert(entity);  entity.setProcessDefinitionContent("abc_content");  dao.update( entity);  DeploymentInstanceEntity result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>";   Assert.assertTrue("abc_content".equals(result.getProcessDefinitionContent())); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { Reservation expectedResponse = Reservation.newBuilder() .setName(ReservationName.of("[PROJECT]", "[LOCATION]", "[RESERVATION]").toString()) .setThroughputCapacity(-1174790353) .build(); mockAdminService.addResponse(expectedResponse);  Reservation reservation = Reservation.newBuilder().build(); FieldMask updateMask = FieldMask.newBuilder().build();  Reservation actualResponse = client.updateReservation(reservation, updateMask); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockAdminService.getRequests(); Assert.assertEquals(1, actualRequests.size()); UpdateReservationRequest actualRequest = ((UpdateReservationRequest) actualRequests.get(0));  Assert.assertEquals(reservation, actualRequest.getReservation()); Assert.assertEquals(updateMask, actualRequest.getUpdateMask()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: Exception { Map<String, String> map = new HashMap<String, String>(); map.put("h1", "1");  PowerMockito.doReturn(401).when(connection).getResponseCode(); PowerMockito.doReturn(new ByteArrayOutputStream()).when(connection).getOutputStream(); PowerMockito.doReturn(new ByteArrayInputStream("{}".getBytes())).when(connection).getInputStream(); HttpClientTest response = new HttpClient("http://localhost") .path("/api") .param(map) .header(map) .timeout(100) .body(new ByteArrayInputStream(new byte[]{})) .get(HttpClientTest.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: IOException { manager.saveDiff(100, 10L, 25, 1L);  int integer = manager.loadDiff(25, 1L, 10L); "<AssertPlaceHolder>"; }
[*] target: assertEquals(100, integer)
[-] pred: org. junit. Assert. assertEquals ( 100, integer )
************************************
[+] input: testInsert() { Temperature one = new Temperature(); one.setTs(new Timestamp(1605024000000l)); one.setTemperature(random.nextFloat() * 50); one.setLocation("望京"); int affectRows = mapper.insertOne(one); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, affectRows)
[-] pred: org. junit. Assert. assertEquals ( 1, affectRows )
************************************
[+] input: testToStringNodePatternWithLabelConjunction() { ArrayList<ArrayList<Label>> labelSetList = new ArrayList<>(); addLabelSetTo(labelSetList, new String[]{"Person", "Professor"}); NodePattern nodePattern = new NodePattern(null, labelSetList, null);  String expectedResult = "(nil, {{Person, Professor}}, {})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: testGetById() { try (SqlSession sqlSession = getSqlSession()) { UserMapper userMapper = sqlSession.getMapper(UserMapper.class); User user = userMapper.getById(1L); Assert."<AssertPlaceHolder>"; Assert.assertEquals("张无忌", user.getUsername()); Assert.assertEquals("男", user.getSex()); Assert.assertEquals("明教", user.getAddress().get(0)); Assert.assertEquals("教主", user.getAddress().get(1)); } }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: IOException { JKongAdmin admin = new JKongAdmin(adminUrl); boolean contains = admin .containsTarget("ba4ccac7-8d9c-4d05-b282-e0e113c29852", "192.168.0.120:8800"); Assert."<AssertPlaceHolder>"; System.out.println(contains); }
[*] target: assertTrue(contains)
[-] pred: org. junit. Assert. assertTrue ( contains )
************************************
[+] input: testBootstrap() { String ipAddress = "140.211.11.105"; String hostName = "www.example.com"; Cluster cluster = Cluster.bootstrap(Arrays.asList( new InetSocketAddress(ipAddress, 9002), new InetSocketAddress(hostName, 9002) )); Set<String> expectedHosts = Utils.mkSet(ipAddress, hostName); Set<String> actualHosts = new HashSet<>(); for (Node node : cluster.nodes()) actualHosts.add(node.host()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedHosts, actualHosts)
[-] pred: org. junit. Assert. assertEquals ( expectedHosts, actualHosts )
************************************
[+] input: shouldMergeDriveOrders() { DriveOrder orderA = createDriveOrder(10, "A", "B", "C", "D", "E", "F", "G"); DriveOrder orderB = createDriveOrder(10, "D", "H", "I", "J");  when(router.getCosts(any(Vehicle.class), any(Point.class), any(Point.class))).thenReturn(20L);  Route expected = createDriveOrder(20, "A", "B", "C", "D", "H", "I", "J").getRoute(); Route actual = rerouteUtil.mergeDriveOrders(orderA, orderB, new Vehicle("Vehicle")).getRoute();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { PackageManagersFeature feature = new PackageManagersFeature("test"); PackageManagersValue value = new PackageManagersValue( feature, new PackageManagers(PackageManager.MAVEN, PackageManager.OTHER)); PackageManagersValue clone = Json.read(Json.toBytes(value), PackageManagersValue.class); assertTrue(value.equals(clone) && clone.equals(value)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value.hashCode(), clone.hashCode())
[-] pred: org. junit. Assert. assertEquals ( value. hashCode ( ), clone. hashCode ( ) )
************************************
[+] input: getUser() { mockServerReturnObject(USER_MIKE); User user = userService.getUser(Long100); "<AssertPlaceHolder>"; assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: testFindOne() { dao.insert(entity);  TaskInstanceEntity result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(result.getClaimTime()); Assert.assertEquals("comment",result.getComment()); Assert.assertEquals("extension",result.getExtension()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: dumpSites() { final Context context = ServiceLocator.getInstance().getAppContext();  for (final Site.Type type : Site.Type.values()) { final List<Site> sites = type.getSites(); Log.d(TAG, "\n------------------------------------------\n\n" + type);  for (final Site site : sites) { final EngineId engineId = site.getEngineId(); final SearchEngineConfig config = engineId.getConfig(); assertNotNull(config); final SearchEngine searchEngine = engineId.createSearchEngine(context); "<AssertPlaceHolder>";  Log.d(TAG, "\n" + config + "\n\n" + site + "\n\n" + searchEngine); } } }
[*] target: assertNotNull(searchEngine)
[-] pred: org. junit. Assert. assertNotNull ( searchEngine )
************************************
[+] input: IOException { ByteArrayOutputStream buffer = new ByteArrayOutputStream(); ZipOutputStream zipout = new ZipOutputStream(buffer); zipout.putNextEntry(new ZipEntry("META-INF/ALIAS.SF")); zipout.finish(); ByteArrayOutputStream out = new ByteArrayOutputStream();  instrumenter.setRemoveSignatures(false); int count = instrumenter.instrumentAll( new ByteArrayInputStream(buffer.toByteArray()), out, "Test");  "<AssertPlaceHolder>"; ZipInputStream zipin = new ZipInputStream(new ByteArrayInputStream( out.toByteArray())); assertEquals("META-INF/ALIAS.SF", zipin.getNextEntry().getName()); assertNull(zipin.getNextEntry()); }
[*] target: assertEquals(0, count)
[-] pred: org. junit. Assert. assertEquals ( 0, count )
************************************
[+] input: evaluateWhenExpressionVarIsUndefined() { String expression = "dummy.intValue"; Map<String, Object> vars = new HashMap<>(); ExpressionEvaluator expressionEvaluator = new JexlExpressionEvaluator(); Object result = expressionEvaluator.evaluate( expression, vars ); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception { final String html = "<html><head><title>foo</title></head><body>\n" + "<form id='form1' method='post'>\n" + "  <input type='text' name='textfield' value='*'/>\n" + "  <input type='submit' name='button' value='foo'/>\n" + "</form></body></html>"; final HtmlPage page = loadPage(html); final MockWebConnection webConnection = getMockConnection(page);  final HtmlForm form = page.getHtmlElementById("form1");  final HtmlSubmitInput button = form.getInputByName("button"); button.click();  final List<NameValuePair> expectedParameters = Arrays.asList(new NameValuePair[]{ new NameValuePair("textfield", "*"), new NameValuePair("button", "foo") }); final List<NameValuePair> collectedParameters = webConnection.getLastParameters();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedParameters, collectedParameters)
[-] pred: org. junit. Assert. assertEquals ( expectedParameters, collectedParameters )
************************************
[+] input: list_NoneMatchPathStart_NoneFound() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "minecraft", "other", (file) -> file.endsWith(".png"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 0, resources. size ( ) )
************************************
[+] input: Exception { APIConnector connector = getApiConnectorMock(); final IdentityStoreInterface identityStore = getIdentityStoreInterfaceMock(); when(identityStore.getIdentity()).thenReturn("IDENTITY"); JSONObject requiredObject = new JSONObject(); requiredObject .put("username", "u") .put("password", "eric") .put("identity", "IDENTITY") .put("query", "Query String") .put("categories", (new JSONArray()).put("c100")) .put("sort", (new JSONObject()) .put("asc", true) .put("by", "firstName")) .put("page", 1);  when(connector.fetchWorkDirectory(any(), any(), any(), any())).thenCallRealMethod(); when(connector.postJson( eq("https://api-work.threema.ch/directory"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn( "{\n" + "   "contacts": [\n" + "      {\n" + "         "id": "ECHOECHO",\n" + "         "pk": "base64",\n" + "         "first": "Hans",\n" + "         "last": "Nötig",\n" + "         "csi": "CSI_NR",\n" + "         "org": { "name": "Name der Firma/Organisation" },\n" + "         "cat": [\n" + "            "catId1",\n" + "            "catId2"\n" + "         ]\n" + "      }\n" + "   ],\n" + "   "paging": {\n" + "      "size": 10,\n" + "      "total": 8923,\n" + "      "next": 2,\n" + "      "prev": 0\n" + "   }\n" + "}" );  WorkDirectoryFilter filter = new WorkDirectoryFilter(); filter.addCategory(new WorkDirectoryCategory("c100", "Category 100")); filter.query("Query String"); filter.page(1); WorkDirectory result = connector.fetchWorkDirectory("u", "eric", identityStore, filter);  Assert."<AssertPlaceHolder>"; Assert.assertEquals(1, result.workContacts.size()); Assert.assertEquals("ECHOECHO", result.workContacts.get(0).threemaId); Assert.assertEquals("Hans", result.workContacts.get(0).firstName); Assert.assertEquals("Nötig", result.workContacts.get(0).lastName); Assert.assertEquals("CSI_NR", result.workContacts.get(0).csi); Assert.assertEquals("Name der Firma/Organisation", result.workContacts.get(0).organization.name); Assert.assertEquals(2, result.workContacts.get(0).categoryIds.size()); Assert.assertEquals("catId1", result.workContacts.get(0).categoryIds.get(0)); Assert.assertEquals("catId2", result.workContacts.get(0).categoryIds.get(1)); Assert.assertEquals(10, result.pageSize); Assert.assertEquals(8923, result.totalRecord); Assert.assertEquals(2, result.nextFilter.getPage()); Assert.assertEquals(filter.getQuery(), result.nextFilter.getQuery()); Assert.assertEquals(filter.getCategories(), result.nextFilter.getCategories()); Assert.assertEquals(0, result.previousFilter.getPage()); Assert.assertEquals(filter.getQuery(), result.previousFilter.getQuery()); Assert.assertEquals(filter.getCategories(), result.previousFilter.getCategories()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testSendMessage_toUser_success() { // mock get token String getTokenUrl = String.format(this.getTokenUrl, corpid, corpsecret); WeComGetTokenResult weComGetTokenResult = MockWeComGetTokenResultFactory.create(); ResponseEntity<WeComGetTokenResult> weComGetTokenResultResponseEntity = new ResponseEntity(weComGetTokenResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(getTokenUrl), Mockito.eq(HttpMethod.GET), Mockito.any(), Mockito.any(Class.class))).willReturn(weComGetTokenResultResponseEntity);  // mock send msg to user String url = String.format(sendToUserUrl, weComGetTokenResult.getAccessToken()); WeComBaseResult weComBaseResult = MockWeComBaseResultFactory.create(); ResponseEntity<WeComBaseResult> weComBaseResultResponseEntity = new ResponseEntity(weComBaseResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(url), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.any(Class.class))).willReturn(weComBaseResultResponseEntity);  List<String> weComIds = ImmutableList.of("user1", "user2"); String msg = "test msg"; boolean result = weComSender.sendMessageToUsers(weComIds, msg);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: given_existing_user_when_getUserById_returnUser() { Long userId = 1L;  User user = getUserTestData(userId, "andrea", "Andrea", "Giassi", "andrea.test@gmail.com", "+3531122334455");  given(userRepository.findById(userId)).willReturn(Optional.of(user));  User userRet = userService.getUserById(userId);  "<AssertPlaceHolder>"; assertEquals(userId, userRet.getId()); assertEquals("andrea", userRet.getUsername()); assertEquals("Andrea", userRet.getName()); assertEquals("Giassi", userRet.getSurname()); assertEquals("andrea.test@gmail.com", userRet.getContact().getEmail()); assertEquals("+3531122334455", userRet.getContact().getPhone()); }
[*] target: assertNotNull(userRet)
[-] pred: org. junit. Assert. assertNotNull ( userRet )
************************************
[+] input: InvocationTargetException { Field f = RestrictionBypass.getDeclaredField(this.getClass(), "testField1"); "<AssertPlaceHolder>"; assertSame(f.get(this), testField1); }
[*] target: assertNotNull(f)
[-] pred: org. junit. Assert. assertNotNull ( f )
************************************
[+] input: emptyListShouldNotFail() { Object theException = null; try { InsertManager manager = new InsertManager( new MockDataSource(), new ValidationUtils(16, Duration.ofDays(14), Duration.ofHours(2).toMillis())); manager.insertIntoDatabase(new ArrayList<>(), null, null, null); } catch (Exception ex) { theException = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNull(theException)
[-] pred: org. junit. Assert. assertNull ( theException )
************************************
[+] input: checkOutgoingAccess() {  FlowElement sequenceFlow = EntityBuilder.buildSequenceFlow(); Map<String, FlowElement> flowElementMap = new HashMap<>(); flowElementMap.put(sequenceFlow.getKey(), sequenceFlow); boolean access = false; try { sequenceFlowValidator.checkOutgoing(flowElementMap, sequenceFlow); access = true; Assert."<AssertPlaceHolder>"; } catch (DefinitionException e) { LOGGER.error("", e); Assert.assertTrue(access); } }
[*] target: assertTrue(access)
[-] pred: org. junit. Assert. assertTrue ( access )
************************************
[+] input: testToStringNodePatternWithProperties() { HashMap<GqlIdentifier, Value> properties = new HashMap<>(); properties.put(new GqlIdentifier("name"), new GqlString("Olof Morra")); properties.put(new GqlIdentifier("studies"), new GqlString("Data Science")); NodePattern nodePattern = new NodePattern(null, null, properties);  String expectedResult = "(nil, {}, {(studies: "Data Science"), (name: "Olof Morra")})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: testDeserializeNestedList() { Schema schema = new Schema(required(1, "map_type", Types.MapType .ofRequired(18, 19, Types.StringType.get(), Types.ListType.ofRequired(17, Types.LongType.get())))); Map<String, List> expected = ImmutableMap.of("foo", Arrays.asList(1000L, 2000L, 3000L)); List<Map> data = new ArrayList<>(); data.add(expected);  Record record = TestHelpers.createCustomRecord(schema, data); IcebergWritable writable = new IcebergWritable(); writable.setRecord(record); writable.setSchema(schema);  IcebergSerDe serDe = new IcebergSerDe(); List<Object> deserialized = (List<Object>) serDe.deserialize(writable); Map result = (Map) deserialized.get(0);  "<AssertPlaceHolder>"; assertTrue(result.containsKey("foo")); assertTrue(result.containsValue(Arrays.asList(1000L, 2000L, 3000L))); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.builder() .setMpls(MPLS_10) .build(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_PRE_NEXT_NEXT_MPLS); PiActionParam mplsParam = new PiActionParam( P4InfoConstants.LABEL, MPLS_10.toInt()); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_PRE_NEXT_SET_MPLS_LABEL) .withParameter(mplsParam) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  when(connector.fetchIdentity(eq("ERIC4911"))).thenCallRealMethod(); when(connector.doGet(eq("https://server.url/identity/ERIC4911"))) .thenReturn("{" + ""identity": "ERIC4911"," + ""publicKey": "aGVsbG8="," + ""featureLevel": 3," + ""featureMask": 15," + ""state": 1," + ""type": 2" + "}"); APIConnector.FetchIdentityResult result = connector.fetchIdentity("ERIC4911"); Assert."<AssertPlaceHolder>"; Assert.assertEquals("ERIC4911", result.identity); Assert.assertEquals(15, result.featureMask); Assert.assertEquals(1, result.state); Assert.assertEquals(2, result.type); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testGetClientValidAddress() { PeerClientPool pool = PeerClientPool.getInstance(); pool.setPort(PORT);  TraceServiceGrpc.TraceServiceBlockingStub client = pool.getClient(VALID_ADDRESS);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: IOException { when(httpProvider.post(any(), any())).thenReturn(null); boolean response = stormProvider.killTopology("topology"); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(response)
[-] pred: org. junit. Assert. assertFalse ( response )
************************************
[+] input: authorize() { Mockito.when(session.principal()).thenReturn(customPrincipal); Mockito.when(customPrincipal.getOauthBearerTokenJwt()).thenReturn(jwt);  Set<String> set = new HashSet<>(); set.add("urn:kafka:topic:test:write");  Mockito.when(jwt.scope()).thenReturn(set); Mockito.when(resource.name()).thenReturn("test"); Mockito.when(resource.resourceType()).thenReturn(ResourceType.fromString("topic")); Mockito.when(operation.toJava()).thenReturn(AclOperation.fromString("write")); boolean result = customAuthorizer.authorize(session, operation, resource);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{"logo":{"light": "the-light-logo"}}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNull(result.supportUrl); Assert.assertNull(result.logoDark); Assert.assertEquals("the-light-logo", result.logoLight); Assert.assertEquals(0, result.workContacts.size()); Assert.assertNotNull(result.mdm); Assert.assertFalse(result.mdm.override); Assert.assertNotNull(result.mdm.parameters); Assert.assertEquals(0, result.mdm.parameters.size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: verify_that_tobytearray_returns_same_as_passed_in_constructor() { byte[] bytes = Bytes.fromHexString("dead000000000000000000000000beef"); EUID euid = new EUID(bytes); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(bytes, euid.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( bytes, euid. toByteArray ( ) )
************************************
[+] input: Exception { OpenWeatherMapWeather weather = WeatherUtils.createIncompleteOpenWeather(context); assertNotNull(weather); "<AssertPlaceHolder>"; }
[*] target: assertFalse(weather.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( weather. isEmpty() )
************************************
[+] input: backupAccountToKeyStoreTest() { //Create password accounts Chain chain = new Chain(); chain.setConfig(new ConfigBean(chainId, assetId)); List<Account> accountList = accountService.createAccount(chain, 1, password); String address = accountList.get(0).getAddress().getBase58(); //Test not specifying backup path String pathDir = ""; //Backup accountkeystore  backup account keyStore String path = accountKeyStoreService.backupAccountToKeyStore(pathDir, chainId, address, password); assertNotNull(path);  //Test specified nonwindowsBackup path pathDir = "test1/back/up"; //Backup accountkeystore  backup account keyStore path = accountKeyStoreService.backupAccountToKeyStore(pathDir, chainId, address, password); assertNotNull(path);  //Test specifiedwindowsBackup path pathDir = "D:\\workspace\\github\\nuls_2.0\\test2\\back\\up"; //Create an unencrypted account for test accountList = accountService.createAccount(chain, 1, null); address = accountList.get(0).getAddress().getBase58(); //Backup accountkeystore  backup account keyStore path = accountKeyStoreService.backupAccountToKeyStore(pathDir, chainId, address, password); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(path)
[-] pred: org. junit. Assert. assertNotNull ( path )
************************************
[+] input: givenClientContextAndNotAllowPublishToTopic_whenValidateClientAccess_thenFailure() { when(authorizationRuleService.isPubAuthorized(any(), any(), any())).thenReturn(false); boolean result = publishMsgValidationService.validateClientAccess(ctx, "clientId", "topic/1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: getOriTableNameOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final String actual = objectUnderTest.getOriTableName();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testTimeWindowSerdeFrom() { final Windowed<Integer> timeWindowed = new Windowed<>(10, new TimeWindow(0, Long.MAX_VALUE)); final Serde<Windowed<Integer>> timeWindowedSerde = WindowedSerdes.timeWindowedSerdeFrom(Integer.class); final byte[] bytes = timeWindowedSerde.serializer().serialize(topic, timeWindowed); final Windowed<Integer> windowed = timeWindowedSerde.deserializer().deserialize(topic, bytes); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(timeWindowed, windowed)
[-] pred: org. junit. Assert. assertEquals ( timeWindowed, windowed )
************************************
[+] input: Exception { MessageId messageId1 = new MessageId(getRandomId()); Collection<MessageId> ids = asList(messageId, messageId1); context.checking(new Expectations() {{ oneOf(database).startTransaction(); will(returnValue(txn)); oneOf(database).containsContact(txn, contactId); will(returnValue(true)); oneOf(database).getMessagesToOffer(txn, contactId, 123, maxLatency); will(returnValue(ids)); oneOf(database).updateRetransmissionData(txn, contactId, messageId, maxLatency); oneOf(database).updateRetransmissionData(txn, contactId, messageId1, maxLatency); oneOf(database).commitTransaction(txn); }}); DatabaseComponent db = createDatabaseComponent(database, eventBus, eventExecutor, shutdownManager);  db.transaction(false, transaction -> { Offer o = db.generateOffer(transaction, contactId, 123, maxLatency); "<AssertPlaceHolder>"; assertEquals(ids, o.getMessageIds()); }); }
[*] target: assertNotNull(o)
[-] pred: org. junit. Assert. assertNotNull ( o )
************************************
[+] input: Exception { //     TrafficTreatment treatment = DefaultTrafficTreatment.builder() //             .setOutput(PORT_1) //             .build(); //     PiAction mappedAction = interpreter.mapTreatment( //             treatment, P4InfoConstants.FABRIC_INGRESS_NEXT_SIMPLE); //     PiActionParam param = new PiActionParam(P4InfoConstants.PORT_NUM, PORT_1.toLong()); //     PiAction expectedAction = PiAction.builder() //             .withId(P4InfoConstants.FABRIC_INGRESS_NEXT_OUTPUT_SIMPLE) //             .withParameter(param) //             .build(); //     "<AssertPlaceHolder>"; // }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: compoundExpressionTest() { // Create the mock data. Map<String, Object> argMaps = createCompoundFilterArgMap();  // Invoke method under test. FilterExpressionParser expressionParser = new FilterExpressionParser(); Expression expression = expressionParser.parseFilterExpression(argMaps);  // Verify assertions. Assert."<AssertPlaceHolder>"; Assert.assertEquals("((firstName contains ABC) or (lastName equals XYZ))", expression.infix()); }
[*] target: assertNotNull(expression)
[-] pred: org. junit. Assert. assertNotNull ( expression )
************************************
[+] input: testChoose() { Clorus p = new Clorus(2); HashMap<Direction, Occupant> surrounded = new HashMap<Direction, Occupant>(); surrounded.put(Direction.TOP, new Plip()); surrounded.put(Direction.BOTTOM, new Impassible()); surrounded.put(Direction.LEFT, new Impassible()); surrounded.put(Direction.RIGHT, new Impassible());  Action actual = p.chooseAction(surrounded); Action expected = new Action(Action.ActionType.STAY);  assertEquals(expected, actual);  p = new Clorus(2); surrounded = new HashMap<>(); surrounded.put(Direction.TOP, new Plip()); surrounded.put(Direction.BOTTOM, new Impassible()); surrounded.put(Direction.LEFT, new Impassible()); surrounded.put(Direction.RIGHT, new Empty()); actual = p.chooseAction(surrounded); expected = new Action(Action.ActionType.ATTACK, Direction.TOP);  assertEquals(expected, actual);  p = new Clorus(1); surrounded = new HashMap<>(); surrounded.put(Direction.TOP, new Impassible()); surrounded.put(Direction.BOTTOM, new Impassible()); surrounded.put(Direction.LEFT, new Impassible()); surrounded.put(Direction.RIGHT, new Empty()); actual = p.chooseAction(surrounded); expected = new Action(Action.ActionType.REPLICATE, Direction.RIGHT);  assertEquals(expected, actual);  p = new Clorus(0.5); surrounded = new HashMap<>(); surrounded.put(Direction.TOP, new Impassible()); surrounded.put(Direction.BOTTOM, new Impassible()); surrounded.put(Direction.LEFT, new Impassible()); surrounded.put(Direction.RIGHT, new Empty()); actual = p.chooseAction(surrounded); expected = new Action(Action.ActionType.MOVE, Direction.RIGHT);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMapConstantLabelWithBooleanValueSucceeds() { LabelDescriptor actualLabel = MetricTranslator.mapAttribute(booleanKey("label1"), CUSTOM_PREFIX); LabelDescriptor expectedLabel = LabelDescriptor.newBuilder().setKey("label1").setValueType(ValueType.BOOL).build(); assertEquals(expectedLabel, actualLabel);  LabelDescriptor actualLabel2 = MetricTranslator.mapAttribute(booleanKey("label1"), CUSTOM_PREFIX); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLabel, actualLabel2)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel2 )
************************************
[+] input: RepositoryException { PackageInfo packageInfo = getDefaultPackageInfo(); DefaultWorkspaceFilter defaultWorkspaceFilter = new DefaultWorkspaceFilter(); defaultWorkspaceFilter.add(new PathFilterSet(PAGE_1)); createPackage(packageInfo, defaultWorkspaceFilter);  PackageInfoModel packageInfoModel = new PackageInfoModel(); packageInfoModel.setPackagePath(PACKAGE_PATH);  boolean result = packageInfoService.packageExists(resourceResolver, packageInfoModel);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSchemaCreate() { boolean schemaCreateFlag = driverSession.schemaCreate("plugin_test1"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(schemaCreateFlag)
[-] pred: org. junit. Assert. assertTrue ( schemaCreateFlag )
************************************
[+] input: givenDevicePersistedMsgsRateLimitsEnabled_whenRateLimitNotReached_thenSuccess() { when(devicePersistedMsgsRateLimitsConfiguration.isEnabled()).thenReturn(true); when(rateLimitCacheService.tryConsumeDevicePersistedMsg()).thenReturn(true);  boolean result = rateLimitService.checkDevicePersistedMsgsLimit(); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { String expectedMesssage = "n,,\u0001auth=Bearer 123.345.567\u0001nineteen=42\u0001\u0001";  Map<String, String> extensions = new HashMap<>(); extensions.put("nineteen", "42"); OAuthBearerClientInitialResponse response = new OAuthBearerClientInitialResponse("123.345.567", new SaslExtensions(extensions));  String message = new String(response.toBytes(), StandardCharsets.UTF_8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMesssage, message)
[-] pred: org. junit. Assert. assertEquals ( expectedMesssage, message )
************************************
[+] input: givenNoDelayedMessages_whenProcessDelayedMsg_thenRemoveClientFromDelayedProcessing() { publishedInFlightCtx.getPublishedInFlightMsgCounter().set(5);  boolean result = publishedInFlightCtx.processMsg(1);  verify(flowControlService, times(1)).removeFromMap("test");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: givenConnectedClient_whenCheckIsAnyOtherDeviceClientConnected_thenTrue() { when(clientSessionInfo1.isConnected()).thenReturn(true); when(clientSessionInfo2.isConnected()).thenReturn(false);  when(clientSessionInfo1.getClientId()).thenReturn(CLIENT_ID_1); when(clientSessionInfo2.getClientId()).thenReturn(CLIENT_ID_2);  sharedSubscriptionCache.put(CLIENT_ID_1, List.of( new TopicSubscription("something", 2, "g1"), new TopicSubscription("#", 0, "g2") )); sharedSubscriptionCache.put(CLIENT_ID_2, List.of( new TopicSubscription("something", 2, "g1") ));  TopicSharedSubscription topicSharedSubscription = new TopicSharedSubscription("something", "g1"); boolean anyDeviceClientConnected = sharedSubscriptionCache.isAnyOtherDeviceClientConnected(CLIENT_ID_3, topicSharedSubscription); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyDeviceClientConnected)
[-] pred: org. junit. Assert. assertTrue ( anyDeviceClientConnected )
************************************
[+] input: MalformedURLException { FolderTriplifier tt = new FolderTriplifier(); try { URL url = getClass().getClassLoader().getResource("test").toURI().toURL(); Properties p = new Properties(); p.setProperty(IRIArgument.BLANK_NODES.toString(), "false"); p.setProperty(IRIArgument.LOCATION.toString(), url.toString()); FacadeXGraphBuilder builder = new BaseFacadeXGraphBuilder( p); tt.triplify(p, builder); DatasetGraph dg = builder.getDatasetGraph(); //			ModelFactory.createModelForGraph(dg.getDefaultGraph()).write(System.out, "TTL");  Set<String> expected = new HashSet<>();  expected.add(""); expected.add("test.csv"); expected.add("test.json"); expected.add("test.xml"); expected.add("test.txt");  Set<String> actual = new HashSet<>(); dg.find(null, NodeFactory.createURI(Path.of(url.toURI()).toUri() + "#"), null, null).forEachRemaining(q -> { if (q.getObject().isLiteral()) { try { actual.add(q.getObject().getLiteralLexicalForm() .replace(Paths.get(url.toURI()).toUri().toString(), "")); } catch (URISyntaxException e) { L.error("", e); } } });  "<AssertPlaceHolder>";  } catch (IOException | URISyntaxException e) { L.error("", e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMostNorthEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 3);  Chromosome exepcted_individual = population.get(12); Chromosome returned_individual = neighbors.get(6);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testMultipleSourceDirs() { // to make this a unit test, we need to mock out the computations that would ordinarily involve collaborators // such as Bazel Query, filesystem scanning, and file parsing TestBazelQueryProjectStructureStrategy strategy = new TestBazelQueryProjectStructureStrategy(); addSourcePathForTest(strategy, "source/dev/java"); addSourcePathForTest(strategy, "source/dev2/java"); addSourcePathForTest(strategy, "source/test/java"); addSourcePathForTest(strategy, "src/test/java"); addMainResourcePathForTest(strategy, "projects/libs/apple/source/dev/resources/fruit"); addMainResourcePathForTest(strategy, "projects/libs/apple/source/dev2/resources"); addTestResourcePathForTest(strategy, "projects/libs/apple/source/test/resources");  addSimQueryResult(strategy, "source/dev/java/com/salesforce/apple/api/Apple.java"); addSimQueryResult(strategy, "source/dev2/java/com/salesforce/apple/api/ApplePie.java"); addSimQueryResult(strategy, "source/dev/resources/fruit/kinds.properties"); addSimQueryResult(strategy, "source/dev2/resources/recipes/pies.properties"); addSimQueryResult(strategy, "source/dev2/resources/recipes/cakes.properties"); addSimQueryResult(strategy, "source/dev2/resources/recipes/sauces.properties"); addSimQueryResult(strategy, "source/test/java/com/salesforce/apple/api/AppleTest.java"); addSimQueryResult(strategy, "src/test/java/com/salesforce/apple/api/ApplePieTest.java"); addSimQueryResult(strategy, "source/test/resources/test.properties");  // run the test String relPath = FSPathHelper.osSeps("projects/libs/apple"); InMemoryPackageLocation packageLocation = new InMemoryPackageLocation(relPath); ProjectStructure structure = strategy.doStructureAnalysis(bazelWorkspace, packageLocation, nullCommandRunner);  // validate "<AssertPlaceHolder>"; assertContains(structure.mainSourceDirFSPaths, "projects/libs/apple/source/dev/java"); assertContains(structure.mainSourceDirFSPaths, "projects/libs/apple/source/dev2/java"); assertContains(structure.mainResourceDirFSPaths, "projects/libs/apple/source/dev/resources/fruit"); assertContains(structure.mainResourceDirFSPaths, "projects/libs/apple/source/dev2/resources"); assertContains(structure.testSourceDirFSPaths, "projects/libs/apple/source/test/java"); assertContains(structure.testSourceDirFSPaths, "projects/libs/apple/src/test/java"); assertContains(structure.testResourceDirFSPaths, "projects/libs/apple/source/test/resources"); }
[*] target: assertNotNull(structure)
[-] pred: org. junit. Assert. assertNotNull ( structure )
************************************
[+] input: ScriptException { LarkyScriptEngineFactory factory = new LarkyScriptEngineFactory(); LarkyScriptEngine engine = (LarkyScriptEngine) factory.getScriptEngine(); String script = "print("Hello World!!!")"; LarkyCompiledScript instance = (LarkyCompiledScript) engine.compile(script);  Object expResult = "Larky ScriptEngine"; Object result = instance.getEngine().getFactory().getEngineName(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: eventSplitsRestriction() { // The event should split the day into two options (before and after the event). Collection<Event> events = Arrays.asList(new Event("Event 1", TimeRange.fromStartDuration(TIME_0830AM, DURATION_30_MINUTES), Arrays.asList(PERSON_A)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), TimeRange.fromStartEnd(TIME_0900AM, TimeRange.END_OF_DAY, true));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: load_DiffFormatMetadataInPackAboveTexture_Conflict() { OrderedResourceRepository repository = makeMockRepository( Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png", "textures/zombie.png.moremcmeta", "textures/creeper.png.other"), Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta") );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, MOCK_READERS, LOGGER );  Map<ResourceLocation, Integer> results = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(results.containsKey(ResourceLocation.parse("textures/bat.png"))); assertTrue(results.containsKey(ResourceLocation.parse("textures/zombie.png"))); }
[*] target: assertEquals(2, results.size())
[-] pred: org. junit. Assert. assertEquals ( 2, results. size() )
************************************
[+] input: isInNetRange() { final boolean isInNet = ProxyAutoConfig.isInNet("172.22.0.7", "172.16.0.0", "255.240.0.0"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isInNet)
[-] pred: org. junit. Assert. assertTrue ( isInNet )
************************************
[+] input: testFindUserById() { User user = userService.findUserByEmail("sysadmin@thingsboard.org"); Assert.assertNotNull(user); User foundUser = userService.findUserById(user.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(user, foundUser); }
[*] target: assertNotNull(foundUser)
[-] pred: org. junit. Assert. assertNotNull ( foundUser )
************************************
[+] input: Exception { ContainerInfo panel = parseContainer( "class Test extends JPanel {", "  Test() {", "    addKeyListener(new KeyAdapter() {", "      public void keyReleased(KeyEvent e) {", "      }", "    });", "  }", "}"); DesignPageSite.Helper.setSite(panel, DesignPageSite.EMPTY); // prepare properties Property keyPressedProperty = getEventsListenerMethod(panel, "key", "pressed"); Property keyReleasedProperty = getEventsListenerMethod(panel, "key", "released"); assertNull(getPropertyText(keyPressedProperty)); assertEquals("line 8", getPropertyText(keyReleasedProperty)); // prepare context menu IMenuManager manager; { manager = getDesignerMenuManager(); panel.getBroadcastObject().addContextMenu(null, panel, manager); } // check action for existing "keyReleased" event { IAction keyReleasedAction = findChildAction(manager, "keyReleased -> line 8"); "<AssertPlaceHolder>"; assertSame( EventsPropertyUtils.LISTENER_METHOD_IMAGE_DESCRIPTOR, keyReleasedAction.getImageDescriptor()); // run, no change expected String expectedSource = m_lastEditor.getSource(); keyReleasedAction.run(); assertEditor(expectedSource, m_lastEditor); } // add new handler using action { IMenuManager manager2 = findChildMenuManager(manager, "Add event handler"); manager2 = findChildMenuManager(manager2, "key"); assertSame(EventsPropertyUtils.EXISTING_CLASS_IMAGE, ((MenuManagerEx) manager2).getImage()); // IAction keyPressedAction = findChildAction(manager2, "keyPressed"); assertNotNull(keyPressedAction); // run, new handler should be added keyPressedAction.run(); assertEditor( "class Test extends JPanel {", "  Test() {", "    addKeyListener(new KeyAdapter() {", "      public void keyReleased(KeyEvent e) {", "      }", "      @Override", "      public void keyPressed(KeyEvent e) {", "      }", "    });", "  }", "}"); } // check for images { IMenuManager manager2 = findChildMenuManager(manager, "Add event handler"); assertSame( EventsPropertyUtils.LISTENER_INTERFACE_IMAGE, ((MenuManagerEx) findChildMenuManager(manager2, "ancestor")).getImage()); } }
[*] target: assertNotNull(keyReleasedAction)
[-] pred: org. junit. Assert. assertNotNull ( keyReleasedAction )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn( new PostJsonResult( "{"contacts":[" + "{"id":"id1","pk":"AQ=="}," + "{"id":"id2","pk":"Aq==","first":"id2-firstname"}," + "{"id":"id3","pk":"Aw==","last":"id3-lastname"}," + "{"id":"id4","pk":"BA==","first": "id4-firstname", "last":"id4-lastname"}" + "]}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNull(result.supportUrl); Assert.assertNull(result.logoDark); Assert.assertNull(result.logoLight); Assert.assertEquals(4, result.workContacts.size()); Assert.assertNotNull(result.mdm); Assert.assertFalse(result.mdm.override); Assert.assertNotNull(result.mdm.parameters); Assert.assertEquals(0, result.mdm.parameters.size());  // Verify contacts Assert.assertEquals("id1", result.workContacts.get(0).threemaId); Assert.assertArrayEquals(new byte[]{0x01}, result.workContacts.get(0).publicKey); Assert.assertNull(result.workContacts.get(0).firstName); Assert.assertNull(result.workContacts.get(0).lastName);  Assert.assertEquals("id2", result.workContacts.get(1).threemaId); Assert.assertArrayEquals(new byte[]{0x02}, result.workContacts.get(1).publicKey); Assert.assertEquals("id2-firstname", result.workContacts.get(1).firstName); Assert.assertNull(result.workContacts.get(1).lastName);  Assert.assertEquals("id3", result.workContacts.get(2).threemaId); Assert.assertArrayEquals(new byte[]{0x03}, result.workContacts.get(2).publicKey); Assert.assertNull(result.workContacts.get(2).firstName); Assert.assertEquals("id3-lastname", result.workContacts.get(2).lastName);  Assert.assertEquals("id4", result.workContacts.get(3).threemaId); Assert.assertArrayEquals(new byte[]{0x04}, result.workContacts.get(3).publicKey); Assert.assertEquals("id4-firstname", result.workContacts.get(3).firstName); Assert.assertEquals("id4-lastname", result.workContacts.get(3).lastName); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: checkLogin() { String cookieId = userService.login("admin", "123456"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(cookieId)
[-] pred: org. junit. Assert. assertNotNull ( cookieId )
************************************
[+] input: Exception { SeekSubscriptionResponse expectedResponse = SeekSubscriptionResponse.newBuilder().build(); Operation resultOperation = Operation.newBuilder() .setName("seekSubscriptionTest") .setDone(true) .setResponse(Any.pack(expectedResponse)) .build(); mockAdminService.addResponse(resultOperation);  SeekSubscriptionRequest request = SeekSubscriptionRequest.newBuilder() .setName(SubscriptionName.of("[PROJECT]", "[LOCATION]", "[SUBSCRIPTION]").toString()) .build();  SeekSubscriptionResponse actualResponse = client.seekSubscriptionAsync(request).get(); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockAdminService.getRequests(); Assert.assertEquals(1, actualRequests.size()); SeekSubscriptionRequest actualRequest = ((SeekSubscriptionRequest) actualRequests.get(0));  Assert.assertEquals(request.getName(), actualRequest.getName()); Assert.assertEquals(request.getNamedTarget(), actualRequest.getNamedTarget()); Assert.assertEquals(request.getTimeTarget(), actualRequest.getTimeTarget()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: Exception { APIConnector connector = getApiConnectorMock(); JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{"org":{" + ""name": "monkeybusiness"" + "}}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(result.organization); Assert.assertEquals("monkeybusiness", result.organization.name);  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testRingTopology_mostLeftNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.ringTopology(population, 0);  Chromosome exepcted_individual = population.get(15); Chromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: getUser() { mockServerReturnObject(USER_MIKE); User user = chooserOkHttpUserService.getUser(Long100); "<AssertPlaceHolder>"; assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: testBrowseSubDirectory() { BrowseCommandRequest request = new BrowseCommandRequest();  request.setPath("c");  BrowserResult result = createCommand().getBrowserResult(request);  "<AssertPlaceHolder>";  Collection<FileObject> foList = result.getFile().getChildren();  assertThat(foList).extracting("name").containsExactly("d.txt", "e.txt");  Iterator<FileObject> iterator = foList.iterator(); FileObject d = iterator.next(); FileObject e = iterator.next();  assertNotNull(d); assertFalse(d.isDirectory()); assertEquals("d.txt", d.getName()); assertEquals("c/d.txt", d.getPath()); assertEquals("added d and e in folder c", d.getDescription().get()); assertTrue(d.getLength().getAsLong() > 0); checkDate(d.getCommitDate().getAsLong()); assertNotNull(e); assertFalse(e.isDirectory()); assertEquals("e.txt", e.getName()); assertEquals("c/e.txt", e.getPath()); assertEquals("added d and e in folder c", e.getDescription().get()); assertTrue(e.getLength().getAsLong() > 0); checkDate(e.getCommitDate().getAsLong()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: verifyExporterWorksWithDefaultConfiguration() { try (MockedStatic<ServiceOptions> mockedServiceOptions = Mockito.mockStatic(ServiceOptions.class); MockedStatic<MetricServiceClient> mockedMetricServiceClient = Mockito.mockStatic(MetricServiceClient.class); MockedStatic<GoogleCredentials> mockedGoogleCredentials = Mockito.mockStatic(GoogleCredentials.class)) { mockedServiceOptions.when(ServiceOptions::getDefaultProjectId).thenReturn(PROJECT_ID); mockedMetricServiceClient .when(() -> MetricServiceClient.create(Mockito.any(MetricServiceSettings.class))) .thenReturn(this.mockMetricServiceClient); mockedGoogleCredentials .when(GoogleCredentials::getApplicationDefault) .thenReturn(Mockito.mock(GoogleCredentials.class));  MetricExporter metricExporter = GoogleCloudMetricExporter.createWithDefaultConfiguration(); "<AssertPlaceHolder>"; generateOpenTelemetryUsingGoogleCloudMetricExporter(metricExporter); simulateExport(metricExporter);  mockedMetricServiceClient.verify( Mockito.times(1), () -> MetricServiceClient.create((MetricServiceSettings) Mockito.any())); mockedServiceOptions.verify(Mockito.times(1), ServiceOptions::getDefaultProjectId); Mockito.verify(this.mockMetricServiceClient) .createTimeSeries((ProjectName) Mockito.any(), Mockito.anyList()); } finally { GlobalOpenTelemetry.resetForTest(); } }
[*] target: assertNotNull(metricExporter)
[-] pred: org. junit. Assert. assertNotNull ( metricExporter )
************************************
[+] input: testSouthSouthNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 10);  Chromosome exepcted_individual = population.get(2); Chromosome returned_individual = neighbors.get(9);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: noOptionsForTooLongOfARequest() { // The duration should be longer than a day. This means there should be no options. int duration = TimeRange.WHOLE_DAY.duration() + 1; MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), duration);  Collection<TimeRange> actual = query.query(NO_EVENTS, request); Collection<TimeRange> expected = Arrays.asList();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { Subscription expectedResponse = Subscription.newBuilder() .setName(SubscriptionName.of("[PROJECT]", "[LOCATION]", "[SUBSCRIPTION]").toString()) .setTopic(TopicName.of("[PROJECT]", "[LOCATION]", "[TOPIC]").toString()) .setDeliveryConfig(Subscription.DeliveryConfig.newBuilder().build()) .setExportConfig(ExportConfig.newBuilder().build()) .build(); mockAdminService.addResponse(expectedResponse);  Subscription subscription = Subscription.newBuilder().build(); FieldMask updateMask = FieldMask.newBuilder().build();  Subscription actualResponse = client.updateSubscription(subscription, updateMask); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockAdminService.getRequests(); Assert.assertEquals(1, actualRequests.size()); UpdateSubscriptionRequest actualRequest = ((UpdateSubscriptionRequest) actualRequests.get(0));  Assert.assertEquals(subscription, actualRequest.getSubscription()); Assert.assertEquals(updateMask, actualRequest.getUpdateMask()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: testTryConsumeDevicePersistedMsg() { // Set up bucket proxy Bandwidth limit = Bandwidth.builder().capacity(10).refillGreedy(10, Duration.ofMinutes(1)).build(); BucketConfiguration bucketConfig = BucketConfiguration.builder().addLimit(limit).build(); when(jedisBasedProxyManager.getProxy(anyString(), any())).thenReturn(bucketProxy); rateLimitRedisCacheService = new RateLimitRedisCacheServiceImpl(redisTemplate, jedisBasedProxyManager, bucketConfig, null); setCachePrefixAndInit();  when(bucketProxy.tryConsume(1)).thenReturn(true);  boolean result = rateLimitRedisCacheService.tryConsumeDevicePersistedMsg();  "<AssertPlaceHolder>"; verify(bucketProxy, times(1)).tryConsume(1); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: cleaningCounterVeryOld() { alertCounter.update(new AlertContext(1, new Object[]{"secret", 1})); alertCounter.clean(1002); Assert.assertNull(alertCounter.getOldest()); Assert.assertEquals(0, alertCounter.getSize()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(alertCounter.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( alertCounter. isEmpty() )
************************************
[+] input: testClear() { ConcurrentHashMapOrdered<String, String> map = new ConcurrentHashMapOrdered<>(); map.put("key1", "value1"); map.put("key2", "value2"); map.clear(); assertTrue(map.isEmpty()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, map.size())
[-] pred: org. junit. Assert. assertEquals ( 0, map. size ( ) )
************************************
[+] input: testEquals1() { ICounter c1 = CounterImpl.getInstance(300, 123); ICounter c2 = CounterImpl.getInstance(300, 123); "<AssertPlaceHolder>"; }
[*] target: assertEquals(c1, c2)
[-] pred: org. junit. Assert. assertEquals ( c1, c2 )
************************************
[+] input: IOException { SecurityReview review = new SecurityReview(TEST_REVIEW_DATE, 0.0); SecurityReview clone = Yaml.read(Json.toBytes(review), SecurityReview.class); assertTrue(review.equals(clone) && clone.equals(review)); assertEquals(review.hashCode(), clone.hashCode());  review = new SecurityReview(TEST_REVIEW_DATE, null); clone = Yaml.read(Json.toBytes(review), SecurityReview.class); assertTrue(review.equals(clone) && clone.equals(review)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(review.hashCode(), clone.hashCode())
[-] pred: org. junit. Assert. assertEquals ( review. hashCode ( ), clone. hashCode ( ) )
************************************
[+] input: testSyncMintNFT() { Provider provider = wallet.getProvider(); Token token = defaultToken(); EthSignature ethSignature = new EthSignature(SignatureType.EthereumSignature, "0xac4f8b1ad65ea143dd2a940c72dd778ba3e07ee766355ed237a89a0b7e925fe76ead0a04e23db1cc1593399ee69faeb31b2e7e0c6fbec70d5061d6fbc431d64a1b"); when(provider.getTokens()).thenReturn(new Tokens(Collections.singletonMap(token.getAddress(), token))); when(provider.submitTx(defaultZkSyncTransaction_MintNFT(), ethSignature, false)).thenReturn("success:hash"); String response = wallet.syncMintNFT( "0x19aa2ed8712072e918632259780e587698ef58df", "0x0000000000000000000000000000000000000000000000000000000000000123", defaultTransactionFee(1000000), 12 ); "<AssertPlaceHolder>"; assertEquals(response, "success:hash"); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldInstantiateAndConfigureDefaultHeaderConverter() { props.remove(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG); createConfig();  // Because it's not explicitly set on the supplied configuration, the logic to use the current classloader for the connector // will exit immediately, and so this method always returns null HeaderConverter headerConverter = plugins.newHeaderConverter(config, WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.CURRENT_CLASSLOADER); assertNull(headerConverter); // But we should always find it (or the worker's default) when using the plugins classloader ... headerConverter = plugins.newHeaderConverter(config, WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.PLUGINS); "<AssertPlaceHolder>"; assertTrue(headerConverter instanceof SimpleHeaderConverter); }
[*] target: assertNotNull(headerConverter)
[-] pred: org. junit. Assert. assertNotNull ( headerConverter )
************************************
[+] input: IOException { String[] args = {"../"};  Utils.setValueInConfig("access_token_validity", "-1"); TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false); FeatureFlagTestContent.getInstance(process.getProcess()) .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY}); process.startProcess();  ProcessState.EventAndException e = process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.INIT_FAILURE); "<AssertPlaceHolder>"; assertEquals(e.exception.getCause().getMessage(), "'access_token_validity' must be between 1 and 86400000 seconds inclusive. The config file can be " + "found here: " + getConfigFileLocation(process.getProcess()));  assertNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.LOADING_ALL_TENANT_CONFIG, 1000));  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(e)
[-] pred: org. junit. Assert. assertNotNull ( e )
************************************
[+] input: testMapConstantLabelWithLongValueSucceeds() { LabelDescriptor actualLabel = MetricTranslator.mapAttribute(longKey("label1"), CUSTOM_PREFIX); LabelDescriptor expectedLabel = LabelDescriptor.newBuilder().setKey("label1").setValueType(ValueType.INT64).build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLabel, actualLabel)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel )
************************************
[+] input: Exception { String text = "Hello World!"; EvoSuiteURL url = new EvoSuiteURL("http://evosuite.org/hello.txt");  NetworkHandling.createRemoteTextFile(url,text);  URL mock = MockURL.URL(url.getUrl()); URLConnection connection = mock.openConnection(); Scanner in = new Scanner(connection.getInputStream()); String res = in.nextLine(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(text,res)
[-] pred: org. junit. Assert. assertEquals ( text, res )
************************************
[+] input: testInsert() { Weather one = new Weather(); one.setTs(new Timestamp(1605024000000l)); one.setTemperature(random.nextFloat() * 50); one.setHumidity(random.nextInt(100)); one.setLocation("望京"); int affectRows = mapper.insert(one); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, affectRows)
[-] pred: org. junit. Assert. assertEquals ( 1, affectRows )
************************************
[+] input: IOException { //        final List<String> expectedApkFiles = Arrays.asList("base.apk", //                "split_config.en.apk", //                "split_config.hdpi.apk"); //        Collections.sort(expectedApkFiles); //        Path xmlFile = Paths.get(new File(backupLocation, PACKAGE_NAME_APK_SPLITS + ".xml")); //        SBConverter sbConvert = new SBConverter(xmlFile); //        sbConvert.convert(); //        Path newBackupLocation = Prefs.Storage.getAppManagerDirectory().findFile(PACKAGE_NAME_APK_SPLITS).findFile("0_SB"); //        // Verify source //        List<String> actualApkFiles = TarUtilsTest.getFileNamesGZip(Collections.singletonList( //                newBackupLocation.findFile("source.tar.gz.0"))); //        Collections.sort(actualApkFiles); //        "<AssertPlaceHolder>"; //        assertFalse(newBackupLocation.hasFile("data0.tar.gz.0")); //        assertFalse(newBackupLocation.hasFile("data1.tar.gz.0")); //    }
[*] target: assertEquals(expectedApkFiles, actualApkFiles)
[-] pred: org. junit. Assert. assertEquals ( expectedApkFiles, actualApkFiles )
************************************
[+] input: testMatch_iPhoneX_F() { final Data raw = Data.fromHexEncodedString("02011A020A0C0BFF4C001006071EA3DD89E014FF4C0001000000000000000000002000000000000000000000000000000000000000000000000000000000"); final List<Data> messages = BLEDeviceFilter.extractMessages(raw.value); "<AssertPlaceHolder>"; assertEquals("1006071EA3DD89E0", messages.get(0).hexEncodedString()); assertEquals("0100000000000000000000200000000000", messages.get(1).hexEncodedString()); }
[*] target: assertEquals(2, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 2, messages. size ( ) )
************************************
[+] input: FabricPipelinerException { TrafficTreatment treatment1 = DefaultTrafficTreatment.builder() .setOutput(PORT_1) .build(); TrafficTreatment treatment2 = DefaultTrafficTreatment.builder() .popVlan() .setOutput(PORT_2) .build(); NextObjective nextObjective = DefaultNextObjective.builder() .withId(NEXT_ID_1) .withPriority(PRIORITY) .addTreatment(treatment1) .addTreatment(treatment2) .withMeta(VLAN_META) .withType(NextObjective.Type.BROADCAST) .makePermanent() .fromApp(APP_ID) .add();  ObjectiveTranslation actualTranslation = translatorHashed.doTranslate(nextObjective);  // Should generate 3 flows: // - Multicast table flow that matches on next-id and set multicast group (1) // - Egress VLAN pop handling for treatment2 (0) // - Next VLAN flow (2) // And 2 groups: // - Multicast group  // Expected multicast table flow rule. PiCriterion nextIdCriterion = PiCriterion.builder() .matchExact(P4InfoConstants.HDR_NEXT_ID, NEXT_ID_1) .build(); TrafficSelector nextIdSelector = DefaultTrafficSelector.builder() .matchPi(nextIdCriterion) .build(); PiAction setMcGroupAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_NEXT_SET_MCAST_GROUP_ID) .withParameter(new PiActionParam( P4InfoConstants.GROUP_ID, NEXT_ID_1)) .build(); TrafficTreatment treatment = DefaultTrafficTreatment.builder() .piTableAction(setMcGroupAction) .build(); FlowRule expectedHashedFlowRule = DefaultFlowRule.builder() .forDevice(DEVICE_ID) .fromApp(APP_ID) .makePermanent() .withPriority(nextObjective.priority()) .forTable(P4InfoConstants.FABRIC_INGRESS_NEXT_MULTICAST) .withSelector(nextIdSelector) .withTreatment(treatment) .build();  // Expected egress VLAN_PUSH flow rule. PiCriterion egressVlanTableMatch = PiCriterion.builder() .matchExact(P4InfoConstants.HDR_EG_PORT, PORT_1.toLong()) .build(); TrafficSelector selectorForEgressVlan = DefaultTrafficSelector.builder() .matchPi(egressVlanTableMatch) .matchVlanId(VLAN_100) .build(); PiAction piActionForEgressVlan = PiAction.builder() .withId(P4InfoConstants.FABRIC_EGRESS_EGRESS_NEXT_PUSH_VLAN) .build(); TrafficTreatment treatmentForEgressVlan = DefaultTrafficTreatment.builder() .piTableAction(piActionForEgressVlan) .build(); FlowRule expectedEgressVlanPushRule = DefaultFlowRule.builder() .withSelector(selectorForEgressVlan) .withTreatment(treatmentForEgressVlan) .forTable(P4InfoConstants.FABRIC_EGRESS_EGRESS_NEXT_EGRESS_VLAN) .makePermanent() .withPriority(nextObjective.priority()) .forDevice(DEVICE_ID) .fromApp(APP_ID) .build();  // Expected egress VLAN POP flow rule. egressVlanTableMatch = PiCriterion.builder() .matchExact(P4InfoConstants.HDR_EG_PORT, PORT_2.toLong()) .build(); selectorForEgressVlan = DefaultTrafficSelector.builder() .matchPi(egressVlanTableMatch) .matchVlanId(VLAN_100) .build(); piActionForEgressVlan = PiAction.builder() .withId(P4InfoConstants.FABRIC_EGRESS_EGRESS_NEXT_POP_VLAN) .build(); treatmentForEgressVlan = DefaultTrafficTreatment.builder() .piTableAction(piActionForEgressVlan) .build(); FlowRule expectedEgressVlanPopRule = DefaultFlowRule.builder() .withSelector(selectorForEgressVlan) .withTreatment(treatmentForEgressVlan) .forTable(P4InfoConstants.FABRIC_EGRESS_EGRESS_NEXT_EGRESS_VLAN) .makePermanent() .withPriority(nextObjective.priority()) .forDevice(DEVICE_ID) .fromApp(APP_ID) .build();  // Expected ALL group. TrafficTreatment allGroupTreatment1 = DefaultTrafficTreatment.builder() .setOutput(PORT_1) .build(); TrafficTreatment allGroupTreatment2 = DefaultTrafficTreatment.builder() .setOutput(PORT_2) .build(); List<TrafficTreatment> allTreatments = ImmutableList.of( allGroupTreatment1, allGroupTreatment2); List<GroupBucket> allBuckets = allTreatments.stream() .map(DefaultGroupBucket::createAllGroupBucket) .collect(Collectors.toList()); GroupBuckets allGroupBuckets = new GroupBuckets(allBuckets); GroupKey allGroupKey = new DefaultGroupKey(FabricUtils.KRYO.serialize(NEXT_ID_1)); GroupDescription expectedAllGroup = new DefaultGroupDescription( DEVICE_ID, GroupDescription.Type.ALL, allGroupBuckets, allGroupKey, NEXT_ID_1, APP_ID );  ObjectiveTranslation expectedTranslation = ObjectiveTranslation.builder() .addFlowRule(expectedHashedFlowRule) .addFlowRule(vlanMetaFlowRule) .addFlowRule(expectedEgressVlanPushRule) .addFlowRule(expectedEgressVlanPopRule) .addGroup(expectedAllGroup) .build();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTranslation, actualTranslation)
[-] pred: org. junit. Assert. assertEquals ( expectedTranslation, actualTranslation )
************************************
[+] input: shouldReturnObjectsByClass() { Point point1 = new Point("Point-00001"); pool.addObject(point1); Point point2 = new Point("Point-00002"); pool.addObject(point2); Path path1 = new Path("Path-00001", point1.getReference(), point2.getReference()); pool.addObject(path1);  Set<Point> points = pool.getObjects(Point.class);  assertEquals(2, points.size()); assertTrue(points.contains(point1)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(points.contains(point2))
[-] pred: org. junit. Assert. assertTrue ( points. contains ( point2 ) )
************************************
[+] input: testDelete() { dao.insert(entity);  ProcessInstanceEntity result = dao.findOne(entity.getId()); Assert.assertNotNull(result);  // 返回删除行数,去掉findAll 接口 dao.delete(entity.getId());  result = dao.findOne(entity.getId()); Assert.assertNull(result);  result = dao.findOneForUpdate(entity.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: getUserReturnCall() { mockServerReturnObject(USER_MIKE); Call<User> userReturnCall = userService.getUserReturnCall(Long100); "<AssertPlaceHolder>"; try { Response<User> userResponse = userReturnCall.execute(); assertEquals(SUCCESS_CODE, userResponse.code()); User user = userResponse.body(); assertNotNull(user); assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); } catch (IOException e) { throw new IllegalStateException("userReturnCall execute error"); } }
[*] target: assertNotNull(userReturnCall)
[-] pred: org. junit. Assert. assertNotNull ( userReturnCall )
************************************
[+] input: ExpressionException { graalJsExpressionHandler.evaluateExpression("var what = true", pugModel); boolean what = (boolean) pugModel.get("what"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(what)
[-] pred: org. junit. Assert. assertTrue ( what )
************************************
[+] input: canCalculateEntryAdditionDiff() { Person johnDoe = createJohnDoe(); Set<SecondaryIndex> indices = Sets.newHashSet(); DummyIndex firstNameIndex = new DummyIndex(PersonIndexer.firstName(), "firstName"); DummyIndex lastNameIndex = new DummyIndex(PersonIndexer.lastName(), "lastName"); DummyIndex favoriteColorIndex = new DummyIndex(PersonIndexer.favoriteColor(), "favoriteColor"); DummyIndex hobbiesIndex = new DummyIndex(PersonIndexer.hobbies(), "hobbies"); DummyIndex petsIndex = new DummyIndex(PersonIndexer.pets(), "pets"); indices.add(firstNameIndex); indices.add(lastNameIndex); indices.add(favoriteColorIndex); indices.add(hobbiesIndex); indices.add(petsIndex);  // simulate the addition of John Doe IndexValueDiff diff = IndexingUtils.calculateDiff(indices, null, johnDoe); "<AssertPlaceHolder>"; assertTrue(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertFalse(diff.isEntryUpdate()); assertTrue(diff.isAdditive()); assertFalse(diff.isSubtractive()); assertFalse(diff.isMixed()); assertFalse(diff.isEmpty()); assertEquals(Sets.newHashSet(firstNameIndex, lastNameIndex, hobbiesIndex), diff.getChangedIndices());  assertEquals(Sets.newHashSet("John"), diff.getAdditions(firstNameIndex)); assertEquals(Collections.emptySet(), diff.getRemovals(firstNameIndex));  assertEquals(Sets.newHashSet("Doe"), diff.getAdditions(lastNameIndex)); assertEquals(Collections.emptySet(), diff.getRemovals(lastNameIndex));  assertEquals(Sets.newHashSet("Swimming", "Skiing"), diff.getAdditions(hobbiesIndex)); assertEquals(Collections.emptySet(), diff.getRemovals(hobbiesIndex)); }
[*] target: assertNotNull(diff)
[-] pred: org. junit. Assert. assertNotNull ( diff )
************************************
[+] input: testBasicCompletion() { RequestFuture<String> future = new RequestFuture<>(); String value = "foo"; future.complete(value); assertTrue(future.isDone()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, future.value())
[-] pred: org. junit. Assert. assertEquals ( value, future. value() )
************************************
[+] input: Exception { String base64QrCodeContent = "BTkCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNJzYWx0eXJ0Yy5leGFtcGxlLm9yZw==";  QRCodeParser service = new QRCodeParserImpl(); QRCodeParser.Result result = service.parse(Base64.decode(base64QrCodeContent)); "<AssertPlaceHolder>"; assertEquals("saltyrtc.example.org", result.saltyRtcHost); assertEquals(1234, result.saltyRtcPort); assertEquals(true, result.isPermanent); assertTrue(Arrays.equals(result.authToken, new byte[]{ 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35 })); assertTrue(Arrays.equals(result.key, new byte[]{ 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66 }));  //no server key assertNull(result.serverKey); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { ContainerInfo panel = parseContainer( "public class Test extends JPanel {", "  public Test() {", "    setEnabled(false);", "  }", "}"); GenericProperty property = (GenericProperty) panel.getPropertyByTitle("enabled"); SetterAccessor accessor = (SetterAccessor) getGenericPropertyAccessors(property).get(0); // check Method getter = accessor.getGetter(); "<AssertPlaceHolder>"; assertEquals("isEnabled", getter.getName()); }
[*] target: assertNotNull(getter)
[-] pred: org. junit. Assert. assertNotNull ( getter )
************************************
[+] input: UnknownHostException { // Try connecting connectionStates.connecting(nodeId1, time.milliseconds(), "localhost", ClientDnsLookup.DEFAULT);  time.sleep(100);  connectionStates.authenticationFailed(nodeId1, time.milliseconds(), new AuthenticationException("No path to CA for certificate!")); time.sleep(1000); assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.AUTHENTICATION_FAILED); assertTrue(connectionStates.authenticationException(nodeId1) instanceof AuthenticationException); assertFalse(connectionStates.hasReadyNodes(time.milliseconds())); assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));  time.sleep(connectionStates.connectionDelay(nodeId1, time.milliseconds()) + 1);  assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds())); connectionStates.ready(nodeId1); "<AssertPlaceHolder>"; }
[*] target: assertNull(connectionStates.authenticationException(nodeId1))
[-] pred: org. junit. Assert. assertNull ( connectionStates. authenticationException(nodeId1) )
************************************
[+] input: testGetTaskRunDetail() { TaskRun taskRun = prepareData(); TaskRunVO existedRun = taskRunService.getTaskRunDetail(taskRun.getId()).get(); "<AssertPlaceHolder>"; assertNotNull(existedRun.getTask()); }
[*] target: assertNotNull(existedRun)
[-] pred: org. junit. Assert. assertNotNull ( existedRun )
************************************
[+] input: testGetDistributedId() { String distributedId = distributedIdManager.getDistributedId(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(distributedId)
[-] pred: org. junit. Assert. assertNotNull ( distributedId )
************************************
[+] input: shouldNotFindInvalidCountryCode() { CountryCode cc = OnfidoSdkModule.findCountryCodeByAlpha2("12"); "<AssertPlaceHolder>"; }
[*] target: assertNull(cc)
[-] pred: org. junit. Assert. assertNull ( cc )
************************************
[+] input: Exception { String[] args = {"../"}; TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  // create user 1 AuthRecipeUserInfo user_1 = EmailPassword.signUp(process.main, "test@example.com", "testPass123");  // create user 2 AuthRecipeUserInfo user_2 = EmailPassword.signUp(process.main, "test123@example.com", "testPass123");  // create a mapping between User_1 and User_2 with force UserIdMapping.createUserIdMapping(process.main, user_1.getSupertokensUserId(), user_2.getSupertokensUserId(), null, true);  // try and create a mapping between User_2 and User_1 without force String errorMessage = null; try { UserIdMapping.createUserIdMapping(process.main, user_2.getSupertokensUserId(), user_1.getSupertokensUserId(), null, false); } catch (ServletException e) { errorMessage = e.getRootCause().getMessage(); } "<AssertPlaceHolder>"; assertEquals("Cannot create a userId mapping where the externalId is also a SuperTokens userID", errorMessage);  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(errorMessage)
[-] pred: org. junit. Assert. assertNotNull ( errorMessage )
************************************
[+] input: IOException { ClassLoader classLoader = this.getClass().getClassLoader(); URL resource = classLoader.getResource("test.json"); File f = new File(resource.getPath()); String s = readString(f); StructuredDataEncoder structuredData = new StructuredDataEncoder(s); byte[] msgHash = structuredData.hashStructuredData(); String ownerAddress = "0xE10AA6471B33845FaE88DD7bBeB63c250DA3a639"; String sig = "4f4e0dec5f1d6f99460fea04bc374d96a495d96c0c455d4731902cdbf95525fc77c66ee08346466fe188f521c196f0f06bebb8d1a8df44cb68792514ca24808e2a"; byte[] signatureBytes = Hex.decode(sig); byte v = signatureBytes[64]; Sign.SignatureData sd = new Sign.SignatureData( v, Arrays.copyOfRange(signatureBytes, 0, 32), Arrays.copyOfRange(signatureBytes, 32, 64));  boolean verified = false; for (int i = 0; i < 4; i++) { BigInteger publicKey = Sign.recoverFromSignature( (byte) i, new ECDSASignature( new BigInteger(1, sd.getR()), new BigInteger(1, sd.getS())), msgHash);  if (publicKey != null) { String addressRecovered = Keys.toChecksumAddress(Keys.getAddress(publicKey)); if (addressRecovered.equals(ownerAddress)) { verified = true; break; } } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: IOException { Map<String, FileMetadata> before = client.list("**");  Path tempDir = storagePath.resolve(DEFAULT_TEMP_DIR); Files.createDirectories(tempDir); Files.write(tempDir.resolve("systemFile.txt"), "test data".getBytes()); Path folder = tempDir.resolve("folder"); Files.createDirectories(folder); Files.write(folder.resolve("systemFile2.txt"), "test data".getBytes());  Map<String, FileMetadata> after = client.list("**");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
[+] input: Exception { Map<String, Object> javagm = this.configMap.get("javagm"); Object testdata = javagm.get("testdata"); String privateKey = (String) ((Map<String, Object>) testdata).get("private-key");  PrivateKey privKey = SM2Util.loadPrivFromString(privateKey, ""); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(privKey)
[-] pred: org. junit. Assert. assertNotNull ( privKey )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.getParameterAsString(anyString())).thenReturn("real"); List<MetaDataError> errors = new ArrayList<>(); final ColumnParameterPrecondition precondition = new ColumnParameterPrecondition(generateDummyInputPort(errors), handler, "some_parameter"); final ExampleSetMetaData emd = FromTableMetaDataConverter.convert(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); precondition.check(emd); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: testRemove() { map.put(1, "a"); map.put(2, "b"); Assert.assertEquals("a", map.get(1));  Assert.assertEquals("a", map.remove(1)); Assert.assertEquals(1, map.size()); Assert.assertEquals("b", map.remove(2)); Assert.assertNull(map.remove(2)); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(map.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( map. isEmpty() )
************************************
[+] input: testQuery() { dao.insert(entity); TaskInstanceQueryParam param = new TaskInstanceQueryParam(); param.setExtension("extension1"); List<TaskInstanceEntity> result = dao.findTaskList(param);  Assert.assertNotNull(result); Assert.assertTrue(result.size() == 0);  param = new TaskInstanceQueryParam(); param.setExtension("extension"); param.setTitle("title"); param.setTag("tag"); param.setComment("comment"); param.setPriority(333); param.setClaimUserId("assign_id");  result = dao.findTaskList(param);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(result.size() == 1); Assert.assertTrue(  result.get(0).getExtension().equals("extension")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenSameClient_whenCheckIsAnyOtherDeviceClientConnected_thenFalse() { when(clientSessionInfo1.isConnected()).thenReturn(true); when(clientSessionInfo1.getClientId()).thenReturn(CLIENT_ID_1);  sharedSubscriptionCache.put(CLIENT_ID_1, List.of( new TopicSubscription("something", 2, "g1"), new TopicSubscription("#", 0, "g2") ));  TopicSharedSubscription topicSharedSubscription = new TopicSharedSubscription("something", "g1"); boolean anyDeviceClientConnected = sharedSubscriptionCache.isAnyOtherDeviceClientConnected(CLIENT_ID_1, topicSharedSubscription); "<AssertPlaceHolder>"; }
[*] target: assertFalse(anyDeviceClientConnected)
[-] pred: org. junit. Assert. assertFalse ( anyDeviceClientConnected )
************************************
[+] input: IOException { StringFeature feature = new StringFeature("test"); StringValue value = new StringValue(feature, "2.3.3"); StringValue clone = Json.read(Json.toBytes(value), StringValue.class); assertTrue(value.equals(clone) && clone.equals(value)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value.hashCode(), clone.hashCode())
[-] pred: org. junit. Assert. assertEquals ( value. hashCode ( ), clone. hashCode ( ) )
************************************
[+] input: Exception { MessageId messageId1 = new MessageId(getRandomId()); Collection<MessageId> ids = asList(messageId, messageId1); context.checking(new Expectations() {{ oneOf(database).startTransaction(); will(returnValue(txn)); oneOf(database).containsContact(txn, contactId); will(returnValue(true)); oneOf(database).getMessagesToRequest(txn, contactId, 123); will(returnValue(ids)); oneOf(database).removeOfferedMessages(txn, contactId, ids); oneOf(database).commitTransaction(txn); }}); DatabaseComponent db = createDatabaseComponent(database, eventBus, eventExecutor, shutdownManager);  db.transaction(false, transaction -> { Request r = db.generateRequest(transaction, contactId, 123); "<AssertPlaceHolder>"; assertEquals(ids, r.getMessageIds()); }); }
[*] target: assertNotNull(r)
[-] pred: org. junit. Assert. assertNotNull ( r )
************************************
[+] input: testOffset() { BrowseCommandRequest request = new BrowseCommandRequest(); request.setOffset(1); BrowserResult result = createCommand().getBrowserResult(request);  "<AssertPlaceHolder>";  Collection<FileObject> foList = result.getFile().getChildren();  assertThat(foList).isEmpty(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: if_validator_data_missing_then_retrieved_via_radix_engine() { var self = BFTNode.random(); var radixEngine = TypedMocks.cmock(new TypeLiteral<RadixEngine<LedgerAndBFTProof>>() {}); var systemInfo = new InMemorySystemInfo(null, null, self, radixEngine); var validatorBFTData = Optional.of(new ValidatorBFTDataEvent(self.getKey(), 10, 1));  when(radixEngine.read(any())).thenReturn(validatorBFTData);  var result = systemInfo.getValidatorBFTData(); var expected = Optional.of(new ValidatorBFTDataEvent(self.getKey(), 10, 1));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.getParameterAsString(anyString())).thenReturn("real"); List<MetaDataError> errors = new ArrayList<>(); final ColumnSetPrecondition precondition = new ColumnSetPrecondition(generateDummyInputPort(errors), ColumnSetPrecondition.getColumnsByParameter(handler, "some_key"), ColumnType.REAL); precondition.check(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: Exception { final String htmlContent = "<html>\n" + "<head><title>foo</title></head>\n" + "<body>\n" + "<form><p>hello world</p>\n" + "<input name='foo' type='submit' disabled='disabled' id='foo'/>\n" + "<input name='bar' type='submit' id='bar'/>\n" + "</form></body></html>"; final HtmlPage page = loadPage(htmlContent);  final List<HtmlElement> expectedElements = new ArrayList<>(); expectedElements.add(page.getHtmlElementById("bar"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedElements, page.getTabbableElements())
[-] pred: org. junit. Assert. assertEquals ( expectedElements, page. getTabbableElements ( ) )
************************************
[+] input: shouldReturnFalseWithNonExistingPackage() { PackageInfoModel packageInfoModel = new PackageInfoModel(); packageInfoModel.setPackagePath(TEST_PACKAGE);  boolean result = packageInfoService.packageExists(resourceResolver, packageInfoModel);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: IOException { final Map<TopicPartition, Long> expected = writeCheckpoint();  stateManager.initialize(); final Map<TopicPartition, Long> offsets = stateManager.checkpointed(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, offsets)
[-] pred: org. junit. Assert. assertEquals ( expected, offsets )
************************************
[+] input: testSaveToString() { FileConfiguration config = getConfig();  for (Map.Entry<String, Object> entry : getTestValues().entrySet()) { config.set(entry.getKey(), entry.getValue()); }  String result = config.saveToString(); String expected = getTestValuesString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: ExecutionException { int limit = 10; BlockingReactorExecutor eventloopExecutor = BlockingReactorExecutor.create(eventloop, limit); eventloop.keepAlive(true); Thread eventloopThread = new Thread(eventloop); eventloopThread.start();  List<Integer> actual = new ArrayList<>(); List<Integer> expected = new ArrayList<>();  for (int i = 0; i < 20; i++) { int finalI = i; expected.add(i); eventloopExecutor.submit(() -> actual.add(finalI)).get(); }  eventloopExecutor.execute(() -> eventloop.keepAlive(false));  eventloopThread.join();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testChoose() { Plip p = new Plip(1.2); HashMap<Direction, Occupant> surrounded = new HashMap<Direction, Occupant>(); surrounded.put(Direction.TOP, new Impassible()); surrounded.put(Direction.BOTTOM, new Impassible()); surrounded.put(Direction.LEFT, new Impassible()); surrounded.put(Direction.RIGHT, new Impassible());  //You can create new empties with new Empty(); //Despite what the spec says, you cannot test for Cloruses nearby yet. //Sorry!  Action actual = p.chooseAction(surrounded); Action expected = new Action(Action.ActionType.STAY);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { Topic expectedResponse = Topic.newBuilder() .setName(TopicName.of("[PROJECT]", "[LOCATION]", "[TOPIC]").toString()) .setPartitionConfig(Topic.PartitionConfig.newBuilder().build()) .setRetentionConfig(Topic.RetentionConfig.newBuilder().build()) .setReservationConfig(Topic.ReservationConfig.newBuilder().build()) .build(); mockAdminService.addResponse(expectedResponse);  Topic topic = Topic.newBuilder().build(); FieldMask updateMask = FieldMask.newBuilder().build();  Topic actualResponse = client.updateTopic(topic, updateMask); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockAdminService.getRequests(); Assert.assertEquals(1, actualRequests.size()); UpdateTopicRequest actualRequest = ((UpdateTopicRequest) actualRequests.get(0));  Assert.assertEquals(topic, actualRequest.getTopic()); Assert.assertEquals(updateMask, actualRequest.getUpdateMask()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: checkAuthorization() { List<OAuthScope> list = new ArrayList<>(); OAuthScope scope = new OAuthScope(); scope.setOperation("Write"); scope.setResourceName("test"); scope.setResourceType("topic"); list.add(scope);  Resource resource = new Resource(ResourceType.fromString("Topic"), "TEST");  CustomAuthorizer authorizer = new CustomAuthorizer();  boolean result = authorizer.checkAuthorization(list, resource, "write");  "<AssertPlaceHolder>";  }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: givenSessionsLimitReached_whenCheckSessionsLimitForExistingClient_thenSuccess() { rateLimitService.setSessionsLimit(1); when(rateLimitCacheService.incrementSessionCount()).thenReturn(2L); when(clientSessionService.getClientSessionInfo(CLIENT_ID)).thenReturn(ClientSessionInfo.builder().build());  boolean result = rateLimitService.checkSessionsLimit(CLIENT_ID); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: extractWarehouseLocationRegularTable() { // This is the style of input expected from HiveConf String testLocation = "some/folder/database/table_a"; String testTableName = "database.table_a";  String expected = "some/folder/"; String result = TableResolverUtil.extractWarehousePath(testLocation, testTableName);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { List<TransactionConfirmedPO> list = new ArrayList<>(); for (int i = 0; i < 5; i++) { Transaction tx = TestConstant.getTransaction2(); tx.setRemark(StringUtils.bytes("tx remark" + i)); list.add(new TransactionConfirmedPO(tx, 1, (byte)1)); } boolean result = confirmedTxStorageService.saveTxList(chainId, list); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testBssidSeen() { String protocol = "http"; String bssid = "dk/aau/netsec/hostage/fragment"; record.setProtocol(protocol); record.setBssid(bssid);  daoSession.insert(record);  boolean bssidSeen = attackRecordDAO.bssidSeen(protocol,bssid);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(bssidSeen)
[-] pred: org. junit. Assert. assertTrue ( bssidSeen )
************************************
[+] input: Exception { AsyncServlet servlet = request -> request.loadBody(Integer.MAX_VALUE) .then(body -> HttpResponse.ok200().withBody(body.slice()).toPromise()); Exception exception = new Exception("TestException");  ByteBuf byteBuf = ByteBufPool.allocate(100); byteBuf.put("Test1".getBytes(UTF_8));  HttpRequest testRequest = HttpRequest.post("http://example.com") .withBodyStream(ChannelSuppliers.concat( ChannelSuppliers.ofValue(byteBuf), ChannelSuppliers.ofException(exception) )) .build();  Exception e = awaitException(servlet.serve(testRequest));  "<AssertPlaceHolder>"; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: Exception { initCursor(ITEM_TYPE_APPLICATION, ""); assertTrue(mLoaderCursor.moveToNext());  ComponentName cn = new ComponentName(mContext.getPackageName(), "placeholder-do"); WorkspaceItemInfo info = Executors.MODEL_EXECUTOR.submit(() -> mLoaderCursor.getAppShortcutInfo( new Intent().setComponent(cn), true  /* allowMissingTarget */, true)) .get(); "<AssertPlaceHolder>"; assertTrue(PackageManagerHelper.isLauncherAppTarget(info.getIntent())); }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: givenIncomingRateLimitsDisabled_whenCheckIncomingLimits_thenSuccess() { when(incomingRateLimitsConfiguration.isEnabled()).thenReturn(false);  boolean result = rateLimitService.checkIncomingLimits(CLIENT_ID, UUID.randomUUID(), null); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testValue() { EnumFeature<TestEnum> feature = new EnumFeature<>(TestEnum.class, "test"); EnumValue<TestEnum> value = feature.value(TestEnum.A); "<AssertPlaceHolder>"; assertSame(feature, value.feature()); assertSame(TestEnum.A, value.get()); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
[+] input: testEqualsAndHashCode() { GitHubOrganization firstOrg = new GitHubOrganization("first"); GitHubOrganization theSameOrg = new GitHubOrganization("first"); assertTrue(firstOrg.equals(theSameOrg) && theSameOrg.equals(firstOrg)); "<AssertPlaceHolder>";  GitHubOrganization anotherOrg = new GitHubOrganization("another"); assertNotEquals(anotherOrg, firstOrg); }
[*] target: assertEquals(firstOrg.hashCode(), theSameOrg.hashCode())
[-] pred: org. junit. Assert. assertEquals ( firstOrg. hashCode ( ), theSameOrg. hashCode ( ) )
************************************
[+] input: Exception { initializeStateDirectory(false); final TaskId taskId = new TaskId(0, 0); final File taskDirectory = directory.directoryForTask(taskId); "<AssertPlaceHolder>"; }
[*] target: assertFalse(taskDirectory.exists())
[-] pred: org. junit. Assert. assertFalse ( taskDirectory. exists ( ) )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{"support":"the-support-url"}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertEquals("the-support-url", result.supportUrl); Assert.assertNull(result.logoDark); Assert.assertNull(result.logoLight); Assert.assertEquals(0, result.workContacts.size()); Assert.assertNotNull(result.mdm); Assert.assertFalse(result.mdm.override); Assert.assertNotNull(result.mdm.parameters); Assert.assertEquals(0, result.mdm.parameters.size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testNormalizeValidPhoneNumber() { { String inputPhoneNumber = "+1 650-555-1234"; String expectedNormalizedPhoneNumber = "+16505551234"; String actualNormalizedPhoneNumber = io.supertokens.utils.Utils.normalizeIfPhoneNumber(inputPhoneNumber); assertEquals(expectedNormalizedPhoneNumber, actualNormalizedPhoneNumber); } { String inputPhoneNumber = "+640223334444"; String expectedNormalizedPhoneNumber = "+64223334444"; String actualNormalizedPhoneNumber = io.supertokens.utils.Utils.normalizeIfPhoneNumber(inputPhoneNumber); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedNormalizedPhoneNumber, actualNormalizedPhoneNumber)
[-] pred: org. junit. Assert. assertEquals ( expectedNormalizedPhoneNumber, actualNormalizedPhoneNumber )
************************************
[+] input: mergeReduceFile() { CommonFile.mergeReduceOutFiles(Collections.singletonList(MR_EXPECT_REDUCE)); String expect = FileUtil.readFile(MR_EXPECT_OUT); String act = FileUtil.readFile(CommonFile.MR_MERGE_OUT); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, act)
[-] pred: org. junit. Assert. assertEquals ( expect, act )
************************************
[+] input: testRecursive() { BrowseCommandRequest request = new BrowseCommandRequest(); request.setRecursive(true); BrowserResult result = createCommand().getBrowserResult(request);  "<AssertPlaceHolder>";  Collection<FileObject> foList = result.getFile().getChildren();  assertNotNull(foList); assertFalse(foList.isEmpty()); assertEquals(2, foList.size());  FileObject c = getFileObject(foList, "c"); assertEquals("c", c.getName()); assertTrue(c.isDirectory()); assertEquals(2, c.getChildren().size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testParseJSONtoHdbtiSuccessfullyWithMissingSchemaName() { XSKHDBTIImportConfigModel model = new XSKHDBTIImportConfigModel();  model.setDelimEnclosing("'"); model.setHeader(true); model.setTableName("sap_xsk.test::c_users"); model.setFileName("myData2.csv");  String actualValue = processor.parseJSONtoHdbti(new ArrayList<>(Arrays.asList(model)));  String expectedValue = "import = [\n" + "{\n" + "\tdelimEnclosing="'";\n" + "\theader = true;\n" + "\ttable = "sap_xsk.test::c_users";\n" + "\tfile = "myData2.csv";\n" + "}];";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: testLongValue() { Currency instance = new Currency(1234567890123456L); long expResult = 1234567890123456L; long result = instance.longValue(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: IOException { String hdbtiSample = org.apache.commons.io.IOUtils .toString(XSKHDBTIParserTest.class.getResourceAsStream("/duplicateKeys.hdbti"), StandardCharsets.UTF_8); XSKHDBTIParser xskhdbtiParser = new XSKHDBTIParser();  try { xskhdbtiParser.parse("/test/xsk/com/sap/duplicateKeys.hdbti", hdbtiSample); } catch (DuplicateFieldNameException duplicateFieldNameException) { "<AssertPlaceHolder>"; } catch (Exception e) { fail(); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: IOException { List<Path> pathList = new ArrayList<>(); assert classLoader != null; pathList.add(Paths.get(classLoader.getResource("AppManager_v2.5.22.apks.tar.0").getFile())); pathList.add(Paths.get(classLoader.getResource("AppManager_v2.5.22.apks.tar.1").getFile()));  // Always run tests using SplitInputStream try (SplitInputStream sis = new SplitInputStream(pathList); BufferedInputStream bis = new BufferedInputStream(sis); TarArchiveInputStream tis = new TarArchiveInputStream(bis)) { ArchiveEntry entry; while ((entry = tis.getNextEntry()) != null) { // create a new path, remember check zip slip attack File file = new File("/tmp", entry.getName()); // copy TarArchiveInputStream to newPath try (OutputStream os = Paths.get(file).openOutputStream()) { IoUtils.copy(tis, os); } } }  // Check integrity List<String> expectedHashes = new ArrayList<>(); List<File> fileList = new ArrayList<>(); fileList.add(new File(classLoader.getResource("AppManager_v2.5.22.apks.0").getFile())); fileList.add(new File(classLoader.getResource("AppManager_v2.5.22.apks.1").getFile())); for (File file : fileList) { expectedHashes.add(DigestUtils.getHexDigest(DigestUtils.SHA_256, file)); } List<String> actualHashes = new ArrayList<>(); fileList.clear(); fileList.add(new File("/tmp/AppManager_v2.5.22.apks.0")); fileList.add(new File("/tmp/AppManager_v2.5.22.apks.1")); for (File file : fileList) { if (!file.exists()) { throw new FileNotFoundException(file + " does not exist."); } actualHashes.add(DigestUtils.getHexDigest(DigestUtils.SHA_256, file)); junkFiles.add(file); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedHashes, actualHashes)
[-] pred: org. junit. Assert. assertEquals ( expectedHashes, actualHashes )
************************************
[+] input: Exception {  String userId = "u00001"; String password = "123456"; String keyName = "testKey";  PkeyInfoVO pkeyInfoVO = keysManagerService.createPrivateKey(userId, password, keyName) ; EncryptKeyInfo encryptKey = keysManagerService.getEncryptPrivateKeyByUserIdAndAddress(userId, pkeyInfoVO.getKeyAddress()); String privateKey = keysManagerService.decryptPrivateKey(password, encryptKey.getEncryptKey());  String msg = "test message"; String signStr = signatureService.sign(msg, privateKey); String publicKey = addressHandler.computePublicKey(Numeric.hexStringToByteArray(privateKey)); boolean checkResult = signatureService.verify(msg, signStr, publicKey);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(checkResult)
[-] pred: org. junit. Assert. assertTrue ( checkResult )
************************************
[+] input: test_isStartWithHttpOrHttps() { boolean start = ShortUrlManager.isStartWithHttpOrHttps("http://www.yefan813.github.io"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(start)
[-] pred: org. junit. Assert. assertTrue ( start )
************************************
[+] input: testConnectionDelayWithNoExponentialBackoff() { long now = time.milliseconds(); long delay = clientWithNoExponentialBackoff.connectionDelay(node, now);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, delay)
[-] pred: org. junit. Assert. assertEquals ( 0, delay )
************************************
[+] input: testCompareTo_Currency() { Currency anotherCurrency = new Currency(1234567890123456L); Currency instance = new Currency(1234567890000000L); int expResult = -1; int result = instance.compareTo(anotherCurrency); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: UnknownHostException { final InetAddress addr = controller.getInetAddress("*"); "<AssertPlaceHolder>"; }
[*] target: assertNull(addr)
[-] pred: org. junit. Assert. assertNull ( addr )
************************************
[+] input: testTryConsumeTotalMsg() { // Set up bucket proxy Bandwidth limit = Bandwidth.builder().capacity(10).refillGreedy(10, Duration.ofMinutes(1)).build(); BucketConfiguration bucketConfig = BucketConfiguration.builder().addLimit(limit).build(); when(jedisBasedProxyManager.getProxy(anyString(), any())).thenReturn(bucketProxy); rateLimitRedisCacheService = new RateLimitRedisCacheServiceImpl(redisTemplate, jedisBasedProxyManager, null, bucketConfig); setCachePrefixAndInit();  when(bucketProxy.tryConsume(1)).thenReturn(true);  boolean result = rateLimitRedisCacheService.tryConsumeTotalMsg();  "<AssertPlaceHolder>"; verify(bucketProxy, times(1)).tryConsume(1); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: givenMqttPropertiesWithResponseTopicAndCorrelationData_whenGetMqttPropsProtoBuilder_thenGetExpectedResult() { MqttProperties properties = new MqttProperties(); properties.add(new MqttProperties.BinaryProperty(BrokerConstants.CORRELATION_DATA_PROP_ID, "test".getBytes(StandardCharsets.UTF_8))); properties.add(new MqttProperties.StringProperty(BrokerConstants.RESPONSE_TOPIC_PROP_ID, "test/"));  QueueProtos.MqttPropertiesProto.Builder mqttPropsProtoBuilder = ProtoConverter.getMqttPropsProtoBuilder(properties);  "<AssertPlaceHolder>"; QueueProtos.MqttPropertiesProto proto = mqttPropsProtoBuilder.build(); assertEquals("test/", proto.getResponseTopic()); assertEquals("test", proto.getCorrelationData().toString(StandardCharsets.UTF_8)); }
[*] target: assertNotNull(mqttPropsProtoBuilder)
[-] pred: org. junit. Assert. assertNotNull ( mqttPropsProtoBuilder )
************************************
[+] input: IOException { HgLogCommand command = createCommand(); String revision = "a9bacaf1b7fa0cebfca71fed4e59ed69a6319427"; Changeset c = command.getChangeset(revision, null);  "<AssertPlaceHolder>"; assertEquals(revision, c.getId()); assertEquals("added a and b files", c.getDescription()); checkDate(c.getDate()); assertEquals("Douglas Adams", c.getAuthor().getName()); assertEquals("douglas.adams@hitchhiker.com", c.getAuthor().getMail()); assertEquals("added a and b files", c.getDescription()); ModificationsCommand modificationsCommand = new HgModificationsCommand(cmdContext); Modifications modifications = modificationsCommand.getModifications(revision);  assertNotNull(modifications); assertTrue("modified list should be empty", modifications.getModified().isEmpty()); assertTrue("removed list should be empty", modifications.getRemoved().isEmpty()); assertFalse("added list should not be empty", modifications.getAdded().isEmpty()); assertEquals(2, modifications.getAdded().size()); assertThat(modifications.getAdded()) .extracting("path") .containsExactly("a.txt", "b.txt"); }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
[+] input: givenDisconnectedClients_whenCheckIsAnyOtherDeviceClientConnected_thenFalse() { when(clientSessionInfo1.isConnected()).thenReturn(false); when(clientSessionInfo2.isConnected()).thenReturn(false);  when(clientSessionInfo1.getClientId()).thenReturn(CLIENT_ID_1); when(clientSessionInfo2.getClientId()).thenReturn(CLIENT_ID_2);  sharedSubscriptionCache.put(CLIENT_ID_1, List.of( new TopicSubscription("something", 2, "g1"), new TopicSubscription("#", 0, "g2") )); sharedSubscriptionCache.put(CLIENT_ID_2, List.of( new TopicSubscription("something", 2, "g1") ));  TopicSharedSubscription topicSharedSubscription = new TopicSharedSubscription("something", "g1"); boolean anyDeviceClientConnected = sharedSubscriptionCache.isAnyOtherDeviceClientConnected(CLIENT_ID_3, topicSharedSubscription); "<AssertPlaceHolder>"; }
[*] target: assertFalse(anyDeviceClientConnected)
[-] pred: org. junit. Assert. assertFalse ( anyDeviceClientConnected )
************************************
[+] input: Exception { CommitCursorResponse expectedResponse = CommitCursorResponse.newBuilder().build(); mockCursorService.addResponse(expectedResponse);  CommitCursorRequest request = CommitCursorRequest.newBuilder() .setSubscription("subscription341203229") .setPartition(-1799810326) .setCursor(Cursor.newBuilder().build()) .build();  CommitCursorResponse actualResponse = client.commitCursor(request); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockCursorService.getRequests(); Assert.assertEquals(1, actualRequests.size()); CommitCursorRequest actualRequest = ((CommitCursorRequest) actualRequests.get(0));  Assert.assertEquals(request.getSubscription(), actualRequest.getSubscription()); Assert.assertEquals(request.getPartition(), actualRequest.getPartition()); Assert.assertEquals(request.getCursor(), actualRequest.getCursor()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: givenFailureReasonCode_whenCheckIfReasonCodeFailure_thenReturnTrue() { boolean result = mqttPubRecHandler.reasonCodeFailure(newMqttPubRecMsg(MqttReasonCodes.PubRec.UNSPECIFIED_ERROR)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { String enriched = EnrichmentEvaluatorLibrary.mergeEnrichments(simpleEvent, enrichments, Optional.of("enrichment_timestamp")); Assert."<AssertPlaceHolder>"; Map<String, Object> map = JSON_MAP_READER.readValue(enriched); Assert.assertEquals(6, map.size()); Assert.assertEquals(1, map.get("timestamp")); Assert.assertEquals(true, map.get("dummy_bool")); Assert.assertEquals("test", map.get("dummy_str")); Assert.assertEquals("b", map.get("a")); Assert.assertEquals("d", map.get("c")); Assert.assertTrue(map.get("enrichment_timestamp") instanceof Number); }
[*] target: assertNotNull(enriched)
[-] pred: org. junit. Assert. assertNotNull ( enriched )
************************************
[+] input: itShouldAccumulateProperly() { Duration smoothingWindow = Duration.ofSeconds(10); long currentTimestamp = 0; ValueStats valueStats_1 = ValueStats.create(smoothingWindow); ValueStats valueStats_2 = ValueStats.create(smoothingWindow); int inputValue_1 = 5; int inputValue_2 = 10; int iterations = 1000;  for (int i = 0; i < iterations; i++) { valueStats_1.recordValue(inputValue_1); valueStats_2.recordValue(inputValue_2); currentTimestamp += ONE_SECOND_IN_MILLIS; valueStats_1.refresh(currentTimestamp); valueStats_2.refresh(currentTimestamp); }  ValueStats accumulator = ValueStats.createAccumulator(); accumulator.add(valueStats_1); accumulator.add(valueStats_2);  double acceptableError = 10E-5; double expectedAccumulatedSmoothedAvg = (5 + 10) / 2.0; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAccumulatedSmoothedAvg, accumulator.getSmoothedAverage(), acceptableError)
[-] pred: org. junit. Assert. assertEquals ( expectedAccumulatedSmoothedAvg, accumulator. getSmoothedAverage ( ), acceptableError )
************************************
[+] input: testMetaFields() { Map<MetaField, String> formatMap = new HashMap<>(); formatMap.put(MetaField.PROCESS_TIME, "AS PROCTIME()"); formatMap.put(MetaField.COLLECTION_NAME, "STRING METADATA FROM 'collection_name' VIRTUAL"); formatMap.put(MetaField.DATABASE_NAME, "STRING METADATA FROM 'database_name' VIRTUAL"); formatMap.put(MetaField.OP_TS, "TIMESTAMP_LTZ(3) METADATA FROM 'op_ts' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES_DEBEZIUM, "BYTES METADATA FROM 'meta.data_debezium' VIRTUAL"); formatMap.put(MetaField.DATA_DEBEZIUM, "STRING METADATA FROM 'meta.data_debezium' VIRTUAL"); formatMap.put(MetaField.DATA_CANAL, "STRING METADATA FROM 'meta.data_canal' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES_CANAL, "BYTES METADATA FROM 'meta.data_canal' VIRTUAL"); MongoExtractNode node = getTestObject(); boolean formatEquals = true; for (MetaField metaField : node.supportedMetaFields()) { formatEquals = node.format(metaField).equals(formatMap.get(metaField)); if (!formatEquals) { break; } } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(formatEquals)
[-] pred: org. junit. Assert. assertTrue ( formatEquals )
************************************
[+] input: getTableNameOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final String actual = objectUnderTest.getTableName();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: binaryExpressionTest() { // Create the mock data. Map<String, Object> argMaps = createBinaryFilterArgMap("firstName", "contains", "ABC");  // Invoke method under test. FilterExpressionParser expressionParser = new FilterExpressionParser(); Expression expression = expressionParser.parseFilterExpression(argMaps);  // Verify assertions. Assert."<AssertPlaceHolder>"; Assert.assertEquals("(firstName contains ABC)", expression.infix()); }
[*] target: assertNotNull(expression)
[-] pred: org. junit. Assert. assertNotNull ( expression )
************************************
[+] input: given_existing_email_when_getUserByEmail_return_user() { User userDataForTest = getUserTestData(1L, "andrea", "Andrea", "Giassi", "andrea.test@gmail.com", "+3531122334455");  given(userRepository.findByEmail("andrea.test@gmail.com")).willReturn(userDataForTest);  User user = userService.getUserByEmail("andrea.test@gmail.com");  "<AssertPlaceHolder>"; assertEquals(Long.valueOf(1L), user.getId()); assertEquals("andrea", user.getUsername()); assertEquals("Andrea", user.getName()); assertEquals("Giassi", user.getSurname()); assertEquals("andrea.test@gmail.com", user.getContact().getEmail()); assertEquals("+3531122334455", user.getContact().getPhone()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: Exception { String[] args = {"../"};  TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  String userId = "userId"; JsonObject metadata = UserMetadata.getUserMetadata(process.getProcess(), userId);  "<AssertPlaceHolder>"; assertEquals(metadata.entrySet().size(), 0);  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(metadata)
[-] pred: org. junit. Assert. assertNotNull ( metadata )
************************************
[+] input: CodingException { ScheduledTask original = TaskTestUtil.makeTask("id", TaskTestUtil.JOB).newBuilder();  byte[] deflated = ThriftBinaryCodec.deflateNonNull(original);  ScheduledTask inflated = ThriftBinaryCodec.inflateNonNull(ScheduledTask.class, deflated);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, inflated)
[-] pred: org. junit. Assert. assertEquals ( original, inflated )
************************************
[+] input: Exception { setFileContentSrc( "test/MyAbstractButton.java", getTestSource( "// filler filler filler filler filler", "// filler filler filler filler filler", "public abstract class MyAbstractButton extends JButton {", "}")); setFileContentSrc( "test/MyAbstractButton.wbp-component.xml", getSourceDQ( "<?xml version='1.0' encoding='UTF-8'?>", "<component xmlns='http://www.eclipse.org/wb/WBPComponent'>", "  <creation>", "    <source><![CDATA[new test.MyAbstractButton(){}]]></source>", "    <tag name='createAnonymous' value='true'/>", "  </creation>", "</component>")); waitForAutoBuild(); // prepare palette addPaletteExtension(new String[]{ "<category id='category_1' name='category 1'>", "  <component class='test.MyAbstractButton'/>", "</category>"}); PaletteInfo palette = loadPalette(); // prepare component final CategoryInfo category = palette.getCategory("category_1"); final ComponentEntryInfo componentEntry = (ComponentEntryInfo) category.getEntries().get(0); // set palette site IPaletteSite.Helper.setSite(m_lastParseInfo, new IPaletteSite.Empty() { @Override public Shell getShell() { return DesignerPlugin.getShell(); } }); // do initialize assertTrue(componentEntry.initialize(null, m_lastParseInfo)); // create tool CreationTool creationTool = (CreationTool) componentEntry.createTool(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(creationTool)
[-] pred: org. junit. Assert. assertNotNull ( creationTool )
************************************
[+] input: ClassNotFoundException { Properties.DSE_SOLVER = Properties.SolverType.EVOSUITE_SOLVER; Properties.CRITERION = new Properties.Criterion[] { Criterion.BRANCH }; Properties.TARGET_CLASS = Foo.class.getName();  TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  BranchCoverageSuiteFitness branchCoverageSuiteFitness = new BranchCoverageSuiteFitness(); TestSuiteChromosome suite = new TestSuiteChromosome(); suite.addFitness(branchCoverageSuiteFitness); branchCoverageSuiteFitness.getFitness(suite);  // no goals covered yet int coveredGoals0 = suite.getNumOfCoveredGoals(); int notCoveredGoals0 = suite.getNumOfNotCoveredGoals(); assertEquals(0, coveredGoals0); assertNotEquals(0, notCoveredGoals0);  DefaultTestCase testCase0 = buildTestCase0(); TestChromosome testChromosome0 = new TestChromosome(); testChromosome0.setTestCase(testCase0); suite.addTest(testChromosome0);  double fitnessBeforeLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsBeforeLocalSearch = suite.getNumOfCoveredGoals();  // some goal was covered assertTrue(coveredGoalsBeforeLocalSearch > 0);  DefaultTestCase duplicatedTestCase0 = buildTestCase0(); TestChromosome duplicatedTestChromosome0 = new TestChromosome(); duplicatedTestChromosome0.setTestCase(duplicatedTestCase0); suite.addTest(duplicatedTestChromosome0);  TestSuiteLocalSearchObjective localSearchObjective = TestSuiteLocalSearchObjective .buildNewTestSuiteLocalSearchObjective(Collections.singletonList(branchCoverageSuiteFitness), suite, 1);  DSETestCaseLocalSearch localSearch = new DSETestCaseLocalSearch(); boolean improved = localSearch.doSearch(duplicatedTestChromosome0, localSearchObjective); "<AssertPlaceHolder>";  double fitnessAfterLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsAfterLocalSearch = suite.getNumOfCoveredGoals();  assertTrue(fitnessAfterLocalSearch < fitnessBeforeLocalSearch); assertTrue(coveredGoalsAfterLocalSearch > coveredGoalsBeforeLocalSearch);  }
[*] target: assertTrue(improved)
[-] pred: org. junit. Assert. assertTrue ( improved )
************************************
[+] input: IOException { BlameCommandRequest request = new BlameCommandRequest();  request.setPath("a.txt"); request.setRevision("a9bacaf1b7fa0cebfca71fed4e59ed69a6319427");  BlameResult result = createCommand().getBlameResult(request);  "<AssertPlaceHolder>"; assertEquals(1, result.getTotal());  BlameLine line = result.getLine(0);  checkFirstLine(line); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: canLimitMigrationChainPreciselyAtVersion() { MigrationChain<ChronoDBInternal> chain = MigrationChain.fromPackage("org.chronos.chronodb.test.cases.migration.chainA"); chain = chain.startingAt(ChronosVersion.parse("0.5.1")); List<Class<? extends ChronosMigration<ChronoDBInternal>>> actualClasses = chain.getMigrationClasses(); List<Class<? extends ChronosMigration<ChronoDBInternal>>> expectedClasses = Lists.newArrayList(); expectedClasses.add(MigrationA2.class); expectedClasses.add(MigrationA3.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedClasses, actualClasses)
[-] pred: org. junit. Assert. assertEquals ( expectedClasses, actualClasses )
************************************
[+] input: extractPropertyFromJobConf() { JobConf conf = new JobConf(); String key = "iceberg.catalog"; String value = "hadoop.tables";  conf.set(key, value);  String result = TableResolverUtil.extractProperty(conf, key);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testChecksumNullForMagicV2() { ProducerBatch batch = new ProducerBatch(new TopicPartition("topic", 1), memoryRecordsBuilder, now); FutureRecordMetadata future = batch.tryAppend(now, null, new byte[10], Record.EMPTY_HEADERS, null, now); "<AssertPlaceHolder>"; assertNull(future.checksumOrNull()); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: builderOneMatcherAndMultipleNegatedMatchers() { var nonNegatedMatcher = Mockito.mock(Matcher.class); when(nonNegatedMatcher.isNegated()).thenReturn(false); when(matcher.isNegated()).thenReturn(true); rule = Rule.builder() .matchers(List.of(matcher, matcher, nonNegatedMatcher, matcher, matcher)) .name(name) .version(version) .tags(constants) .protections(protections) .build(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(rule)
[-] pred: org. junit. Assert. assertNotNull ( rule )
************************************
[+] input: IOException { Reactor reactor = Reactor.getCurrentReactor(); Path storageDir = temporaryFolder.newFolder().toPath(); FileSystem fs = FileSystem.create(reactor, newCachedThreadPool(), storageDir); await(fs.start()); IAggregationChunkStorage aggregationChunkStorage = AggregationChunkStorage.create( reactor, stubChunkIdGenerator(), FrameFormats.lz4(), fs);  int nChunks = 100; AggregationChunker<KeyValuePair> chunker = AggregationChunker.create( structure, structure.getMeasures(), KeyValuePair.class, singlePartition(), aggregationChunkStorage, classLoader, 1);  Set<Path> expected = IntStream.range(0, nChunks).mapToObj(i -> Paths.get((i + 1) + AggregationChunkStorage.LOG)).collect(toSet());  Random random = ThreadLocalRandom.current(); StreamSupplier<KeyValuePair> supplier = StreamSuppliers.ofStream( Stream.generate(() -> new KeyValuePair(random.nextInt(), random.nextInt(), random.nextLong())) .limit(nChunks));  List<Path> paths = await(supplier.streamTo(chunker) .then(chunker::getResult) .then(protoAggregationChunks -> aggregationChunkStorage.finish(protoAggregationChunks.stream() .map(ProtoAggregationChunk::protoChunkId) .collect(toSet()))) .map($ -> { try (Stream<Path> list = Files.list(storageDir)) { return list.filter(path -> path.toString().endsWith(AggregationChunkStorage.LOG)).collect(toList()); } catch (IOException e) { throw new AssertionError(e); } }));  Set<Path> actual = paths.stream().filter(Files::isRegularFile).map(Path::getFileName).collect(toSet());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: builderShouldSetValues() { User user = new User("ziltoid"); AuthenticationInfo authInfo = helper.createAuthenticationInfo("unit-test", user);  "<AssertPlaceHolder>"; assertEquals("ziltoid", authInfo.getPrincipals().getPrimaryPrincipal()); assertThat(authInfo.getPrincipals().getRealmNames(), hasItem("unit-test")); assertEquals(user, authInfo.getPrincipals().oneByType(User.class)); }
[*] target: assertNotNull(authInfo)
[-] pred: org. junit. Assert. assertNotNull ( authInfo )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) {  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1, 500); time.sleep(552);  CoordinatorClient coordinatorClient = cluster.coordinatorClient(); NoOpTaskSpec updatedSpec = new NoOpTaskSpec(552, 500); coordinatorClient.createTask(new CreateTaskRequest("fooSpec", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("fooSpec").taskState( new TaskRunning(updatedSpec, 552, new TextNode("receiving")) ).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("fooSpec")); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: Exception { TubeClientConfig clientConfig = mock(TubeClientConfig.class); PowerMockito.mockStatic(AddressUtils.class); PowerMockito.when(AddressUtils.getLocalAddress()).thenReturn("127.0.0.1");  when(clientConfig.getMasterInfo()).thenReturn(new MasterInfo("127.0.0.1:18080")); ConsumerConfig config = new ConsumerConfig("127.0.0.1:18080", "test"); ClientFactory clientFactory = new NettyClientFactory(); TubeBaseSessionFactory factory = new TubeBaseSessionFactory(clientFactory, clientConfig); SimplePushMessageConsumer consumer = new SimplePushMessageConsumer(factory, config); MessageFetchManager fetchManager = new MessageFetchManager(config, consumer);  Assert.assertFalse(fetchManager.isShutdown()); fetchManager.startFetchWorkers(); fetchManager.stopFetchWorkers(true); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(fetchManager.isShutdown())
[-] pred: org. junit. Assert. assertTrue ( fetchManager. isShutdown() )
************************************
[+] input: getOriSchemaNameOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final String actual = objectUnderTest.getOriSchemaName();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: test2() { List<MahjongTileDef> mahjongInHand = List.of( MahjongTileDef._1_WAN, MahjongTileDef._1_WAN, MahjongTileDef._1_WAN, MahjongTileDef._4_TIAO, MahjongTileDef._6_TIAO, MahjongTileDef._3_BING, MahjongTileDef._3_BING, MahjongTileDef._3_BING, MahjongTileDef._4_BING, MahjongTileDef._4_BING, MahjongTileDef._4_BING, MahjongTileDef._5_BING, MahjongTileDef._5_BING );  boolean canHu = HuFormula.test( mahjongInHand, MahjongTileDef._5_TIAO );  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(canHu)
[-] pred: org. junit. Assert. assertTrue ( canHu )
************************************
[+] input: Exception { generator = new OfflineInstrumentationAccessGenerator(); MethodRecorder actual = new MethodRecorder(); generator.generateDataAccessor(987654321, "foo/Bar", 17, actual.getVisitor());  MethodRecorder expected = new MethodRecorder(); expected.getVisitor().visitLdcInsn(Long.valueOf(987654321)); expected.getVisitor().visitLdcInsn("foo/Bar"); expected.getVisitor().visitIntInsn(Opcodes.BIPUSH, 17); String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline"; expected.getVisitor().visitMethodInsn(Opcodes.INVOKESTATIC, rtname, "getProbes", "(JLjava/lang/String;I)[Z", false);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testPlot() { double[] nums = new double[]{2710, 2755, 2850, 2880, 2880, 2890, 2920, 2940, 2950, 3050, 3130, 3325}; BoxPlot plot = BoxPlotUtil.plot(nums); TestCase."<AssertPlaceHolder>"; TestCase.assertEquals(3202.5D, plot.getMaxRegion()); TestCase.assertEquals(3000.0D, plot.getQ3()); TestCase.assertEquals(2905.0, plot.getMedian()); TestCase.assertEquals(2865.0, plot.getQ1()); TestCase.assertEquals(2662.5D, plot.getMinRegion()); }
[*] target: assertNotNull(plot)
[-] pred: org. junit. Assert. assertNotNull ( plot )
************************************
[+] input: givenClientContextAndAllowPublishToTopic_whenValidateClientAccess_thenSuccess() { when(authorizationRuleService.isPubAuthorized(any(), any(), any())).thenReturn(true); boolean result = publishMsgValidationService.validateClientAccess(ctx, "clientId", "topic/1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { try (StringWriter writer = new StringWriter()) { String expected = "1,apple,10,9.99"; CsvWriter csvWriter = new CsvWriter(writer); csvWriter.addField("1"); csvWriter.addField("apple"); csvWriter.addField("10"); csvWriter.addField("9.99"); csvWriter.addLine(); String result = writer.toString(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testFoo() { String targetClassName = Foo.class.getCanonicalName(); GetStaticGraph graph = GetStaticGraphGenerator .generate(targetClassName);  Set<String> expectedClasses = new HashSet<String>(Arrays.asList( Foo.class.getCanonicalName(), Bar1.class.getCanonicalName(), Bar2.class.getCanonicalName(), Bar3.class.getCanonicalName(), Bar4.class.getCanonicalName(), Bar5.class.getCanonicalName(), Bar6.class.getCanonicalName(), Bar7.class.getCanonicalName(), BarBar1.class.getCanonicalName()));  Set<String> allClasses = new HashSet<String>(); allClasses.addAll(graph.getSourceClasses()); allClasses.addAll(graph.getTargetClasses());  assertEquals(expectedClasses, allClasses);  Map<String, Set<String>> expectedStaticFields = new HashMap<String, Set<String>>(); expectedStaticFields.put(Bar2.class.getCanonicalName(), new HashSet<String>(Arrays.asList("fieldBar2"))); expectedStaticFields.put(Bar6.class.getCanonicalName(), new HashSet<String>(Arrays.asList("fieldBar6"))); expectedStaticFields.put(Bar7.class.getCanonicalName(), new HashSet<String>(Arrays.asList("fieldBar7")));  Map<String, Set<String>> staticFields = graph.getStaticFields(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStaticFields, staticFields)
[-] pred: org. junit. Assert. assertEquals ( expectedStaticFields, staticFields )
************************************
[+] input: testNorthNorthNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 10);  Chromosome exepcted_individual = population.get(2); Chromosome returned_individual = neighbors.get(8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testDAGShapedSubplan() { // _/-\_ //  \ / final DataSetType<String> stringDataSetType = DataSetType.createDefault(String.class); TestMapOperator<String, String> map1 = new TestMapOperator<>(stringDataSetType, stringDataSetType); map1.setName("map1"); TestMapOperator<String, String> map2 = new TestMapOperator<>(stringDataSetType, stringDataSetType); map2.setName("map2"); TestMapOperator<String, String> map3 = new TestMapOperator<>(stringDataSetType, stringDataSetType); map3.setName("map3"); TestJoin<String, String, String> join1 = new TestJoin<>(stringDataSetType, stringDataSetType, stringDataSetType); join1.setName("join1"); TestMapOperator<String, String> map4 = new TestMapOperator<>(stringDataSetType, stringDataSetType); map4.setName("map4");  map1.connectTo(0, map2, 0); map1.connectTo(0, map3, 0); map2.connectTo(0, join1, 0); map3.connectTo(0, join1, 1); join1.connectTo(0, map4, 0);  Subplan subplan = (Subplan) Subplan.wrap(map1, map4); OptimizationContext optimizationContext = new DefaultOptimizationContext(this.job, subplan); final OptimizationContext.OperatorContext subplanCtx = optimizationContext.getOperatorContext(subplan); final CardinalityEstimate inputCardinality = new CardinalityEstimate(10, 100, 0.9d); subplanCtx.setInputCardinality(0, inputCardinality); subplan.propagateInputCardinality(0, subplanCtx);  final CardinalityPusher pusher = SubplanCardinalityPusher.createFor(subplan, this.configuration); pusher.push(subplanCtx, this.configuration);  final CardinalityEstimate outputCardinality = subplanCtx.getOutputCardinality(0); final CardinalityEstimate expectedCardinality = new CardinalityEstimate(10 * 10, 100 * 100, 0.9d * 0.7d); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCardinality, outputCardinality)
[-] pred: org. junit. Assert. assertEquals ( expectedCardinality, outputCardinality )
************************************
[+] input: load_SearchRetrievesPackFloorAbove_PackNotFound() { OrderedResourceRepository repository = makeMockRepository( Set.of( "textures/bat_efgh.png" ), Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta" ) );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  assertFalse( resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png"), ResourceLocation.parse("textures/bat_efgh.png") ).isPresent() );  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: load_SearchRetrievesPackSameAsFloor_CorrectResourcesFoundInPacks() { OrderedResourceRepository repository = makeMockRepository( Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta" ) );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png"), ResourceLocation.parse("textures/bat_abcd.png") ); assertTrue(pack.isPresent()); assertTrue(pack.get().resource(ResourceLocation.parse("zombie.png")).isPresent()); assertFalse(pack.get().resource(ResourceLocation.parse("zombie2.png")).isPresent()); assertFalse(resourceRepository.highestPackWith(ResourceLocation.parse("dummy")).isPresent());  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: Exception { Alias alias1 = createAlias(); boolean result = aliasStorageService.saveAlias(chainId,alias1); assertTrue(result); Alias alias2 = createAlias(); result = aliasStorageService.saveAlias(chainId,alias2); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSouthNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.linearFive(population, 5);  Chromosome exepcted_individual = population.get(9); Chromosome returned_individual = neighbors.get(1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testFindTransportWithSelectionHiPriority() { byte[] dummyMessage = new byte[0];  TransportInfo dummyTransport = TransportInfo.of("DUMMY", StaticTransportMetadata.empty()); TransportInfo udpTransport = TransportInfo.of(UDPConstants.NAME, StaticTransportMetadata.empty());  List<TransportInfo> transports = ImmutableList.of(dummyTransport, udpTransport);  Peer peer1 = mock(Peer.class); doAnswer(invocation -> transports.stream()).when(peer1).supportedTransports(); doAnswer( invocation -> "DUMMY".equals(invocation.getArgument(0)) || UDPConstants.NAME.equals(invocation.getArgument(0)) ).when(peer1).supportsTransport(any()); @SuppressWarnings("resource") Transport found = transportManager.findTransport(peer1, dummyMessage); "<AssertPlaceHolder>"; assertEquals("DUMMY", found.name()); }
[*] target: assertNotNull(found)
[-] pred: org. junit. Assert. assertNotNull ( found )
************************************
[+] input: testRingTopology_rightNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.ringTopology(population, 2);  Chromosome exepcted_individual = population.get(3); Chromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { final WebRequest request = new WebRequest(new URL("http://localhost/test")); request.setHttpMethod(HttpMethod.POST); request.setEncodingType(FormEncodingType.MULTIPART);  final List<NameValuePair> requestParams = new ArrayList<>(); requestParams.add(new NameValuePair("test", null)); requestParams.add(new KeyDataPair("file", null, null, null, StandardCharsets.UTF_8)); request.setRequestParameters(requestParams);  final List<NameValuePair> expectedResults = new ArrayList<>(); expectedResults.add(new NameValuePair("test", "")); // the constructor of the KeyDataPair already creates normalized object // where the value is set to empty string if the passed file is null. expectedResults.add(new KeyDataPair("file", null, null, null, StandardCharsets.UTF_8));  final List<NameValuePair> normalizedParams = request.getParameters(); "<AssertPlaceHolder>";  // check that the value of the KeyDataPair is really normalized to empty string assertEquals("", normalizedParams.get(1).getValue()); }
[*] target: assertEquals(expectedResults, normalizedParams)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, normalizedParams )
************************************
[+] input: NoSuchAlgorithmException { //        AESPair keyPair = AES256.generateKeyPairOld(); //        SecretKey key = keyPair.getKey(); //        byte[] IV = keyPair.getIV(); //        byte[] sk = AES256.serializeSecretKey(key); // //        List<byte[]> listofbytes = new ArrayList<>(); //        listofbytes.add(sk); //        listofbytes.add(IV); // //        byte[] shareBetweenUsers = ByteHelper.concat(listofbytes); //        assertEquals(shareBetweenUsers.length, 32+16); //        assertTrue(Arrays.equals(Arrays.copyOfRange(shareBetweenUsers, 0, 32), sk)); //        assertTrue(Arrays.equals(Arrays.copyOfRange(shareBetweenUsers, 32, shareBetweenUsers.length), IV)); // //        SecretKey reconstructedKey = AES256.deserializeSecretKey(sk); //        boolean r = (key.equals(reconstructedKey)); // //        "<AssertPlaceHolder>"; }
[*] target: assertTrue(r)
[-] pred: org. junit. Assert. assertTrue ( r )
************************************
[+] input: IOException { try (StringWriter writer = new StringWriter()) { List<String[]> records = new ArrayList<String[]>() {{ add(new String[]{"1", "apple", "10", "9.99"}); add(new String[]{"2", "orange", "5", "4.99"}); }}; String expected = "1,apple,10,9.99\n2,orange,5,4.99"; new CsvWriter(writer).addLines(records); String result = writer.toString(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.isParameterSet(anyString())).thenReturn(true); when(handler.getParameterList(anyString())).thenReturn(Collections.singletonList(new String[]{"bla","real"})); List<MetaDataError> errors = new ArrayList<>(); final ColumnSetPrecondition precondition = new ColumnSetPrecondition(generateDummyInputPort(errors), ColumnSetPrecondition.getColumnsByParameterListEntry(handler, "some_key", 1), ColumnType.REAL); precondition.check(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: testEquals() { Object o = new Object(); Currency instance = new Currency(1234567890123456L); boolean expResult = false; boolean result = instance.equals(o); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: testRequestHeader() { RequestHeader header = new RequestHeader(ApiKeys.FIND_COORDINATOR, (short) 1, "", 10); ByteBuffer buffer = toBuffer(header.toStruct()); RequestHeader deserialized = RequestHeader.parse(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(header, deserialized)
[-] pred: org. junit. Assert. assertEquals ( header, deserialized )
************************************
[+] input: list_EmptyPathStart_NoExceptionIfOriginalAccepts() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "minecraft", "", (file) -> file.endsWith(".png"));  "<AssertPlaceHolder>"; assertTrue(resources.contains(ResourceLocation.parse("textures/hello.png"))); assertTrue(resources.contains(ResourceLocation.parse("textures/block/sea/rock/gravel.png"))); }
[*] target: assertEquals(2, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 2, resources. size ( ) )
************************************
[+] input: IOException { NettyTransportClient client = (NettyTransportClient) this.oneClient(); client.startSession();  Mockito.doThrow(new RuntimeException("test exception")).when(serverHandler) .handle(Mockito.any(), Mockito.anyInt(), Mockito.any());  ByteBuffer buffer = ByteBuffer.wrap(StringEncodeUtil.encode("test data")); boolean send = client.send(MessageType.MSG, 1, buffer); Assert."<AssertPlaceHolder>";  Whitebox.setInternalState(client, "timeoutFinishSession", 1000L);  Assert.assertThrows(TransportException.class, client::finishSession, e -> { Assert.assertContains("finish-response", e.getMessage()); });  Mockito.verify(serverHandler, Mockito.timeout(10_000L).times(1)) .exceptionCaught(Mockito.any(), Mockito.any()); }
[*] target: assertTrue(send)
[-] pred: org. junit. Assert. assertTrue ( send )
************************************
[+] input: testMapLabelWithPeriodInNameSucceeds() { LabelDescriptor actualLabel = MetricTranslator.mapAttribute(longKey("label.test"), CUSTOM_PREFIX); LabelDescriptor expectedLabel = LabelDescriptor.newBuilder().setKey("label_test").setValueType(ValueType.INT64).build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLabel, actualLabel)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel )
************************************
[+] input: Exception { Transaction tx = TestConstant.getTransaction2(); boolean result = unconfirmedTxStorageService.putTx(chainId, tx); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSendMessage_toChat_success() { // mock get token String getTokenUrl = String.format(this.getTokenUrl, corpid, corpsecret); WeComGetTokenResult weComGetTokenResult = MockWeComGetTokenResultFactory.create(); ResponseEntity<WeComGetTokenResult> weComGetTokenResultResponseEntity = new ResponseEntity(weComGetTokenResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(getTokenUrl), Mockito.eq(HttpMethod.GET), Mockito.any(), Mockito.any(Class.class))).willReturn(weComGetTokenResultResponseEntity);  // mock send msg to user String url = String.format(sendToChatUrl, weComGetTokenResult.getAccessToken()); WeComBaseResult weComBaseResult = MockWeComBaseResultFactory.create(); ResponseEntity<WeComBaseResult> weComBaseResultResponseEntity = new ResponseEntity(weComBaseResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(url), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.any(Class.class))).willReturn(weComBaseResultResponseEntity);  String chatid = "1"; String msg = "test msg"; boolean result = weComSender.sendMessageToChat(chatid, msg);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { PugConfiguration config = new PugConfiguration(); config.setPrettyPrint(true); PugTemplate template = config.getTemplate(templatePath); "<AssertPlaceHolder>"; }
[*] target: assertTrue(template.isPrettyPrint())
[-] pred: org. junit. Assert. assertTrue ( template. isPrettyPrint() )
************************************
[+] input: testInjectValuesSuccessful() { MacroValueProviderHandler handler = MacroValueProviderHandler.getInstance(); ValueProvider provider = handler.createNewProvider("provider", PREFIX); Operator operator = getOperatorWithMacros(); Map<String, String> result = handler.injectValues(provider, REQUESTED, operator, null);  Map<String, String> expected = new HashMap<>(); expected.put("first", "first"); expected.put("second", "other");  // Test equals "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: SemanticException { ValueExpression abcd = new Constant(StringType.INSTANCE, "abcd", SyntheticLocation.INSTANCE); ValueExpression ab = new Constant(StringType.INSTANCE, "ab", SyntheticLocation.INSTANCE); ValueExpression cd = new Constant(StringType.INSTANCE, "cd", SyntheticLocation.INSTANCE); ValueExpression ABConcatCD = new BinaryExpression(StringType.INSTANCE, ab, cd, StringConcat.INSTANCE, SyntheticLocation.INSTANCE);  SubstringDomain empty = new SubstringDomain(); SubstringDomain assigned1 = empty.assign(x, abcd, null, null); SubstringDomain assigned2 = empty.assign(x, ABConcatCD, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(assigned1, assigned2)
[-] pred: org. junit. Assert. assertEquals ( assigned1, assigned2 )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) { CoordinatorClient coordinatorClient = cluster.coordinatorClient();  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1, 500); coordinatorClient.createTask(new CreateTaskRequest("foo", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("foo").taskState(new TaskPending(fooSpec)).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("foo")); "<AssertPlaceHolder>";   time.sleep(2); new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskRunning(fooSpec, 2, new TextNode("active"))). workerState(new WorkerRunning("foo", fooSpec, 2, new TextNode("active"))). build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02"));  cluster.restartAgent("node02"); time.sleep(550); // coordinator heartbeat sees that the agent is back up, re-schedules the task but the agent expires it new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskDone(fooSpec, 2, 552, "worker expired", false, null)). workerState(new WorkerDone("foo", fooSpec, 552, 552, null, "worker expired")). build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02"));  cluster.restartAgent("node02"); // coordinator heartbeat sees that the agent is back up but does not re-schedule the task as it is DONE new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskDone(fooSpec, 2, 552, "worker expired", false, null)). // no worker states build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02")); } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: Exception { initializeStateDirectory(false); final File globalStateDir = directory.globalStateDir(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(globalStateDir.exists())
[-] pred: org. junit. Assert. assertFalse ( globalStateDir. exists ( ) )
************************************
[+] input: canLimitMigrationChainArbitrarilyBetweenVersions() { MigrationChain<ChronoDBInternal> chain = MigrationChain.fromPackage("org.chronos.chronodb.test.cases.migration.chainA"); chain = chain.startingAt(ChronosVersion.parse("0.6.0")); List<Class<? extends ChronosMigration<ChronoDBInternal>>> actualClasses = chain.getMigrationClasses(); List<Class<? extends ChronosMigration<ChronoDBInternal>>> expectedClasses = Lists.newArrayList(); expectedClasses.add(MigrationA3.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedClasses, actualClasses)
[-] pred: org. junit. Assert. assertEquals ( expectedClasses, actualClasses )
************************************
[+] input: testFindUserCredentials() { User user = userService.findUserByEmail("sysadmin@thingsboard.org"); Assert.assertNotNull(user); UserCredentials userCredentials = userService.findUserCredentialsByUserId(user.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(userCredentials)
[-] pred: org. junit. Assert. assertNotNull ( userCredentials )
************************************
[+] input: testRemove() { ConcurrentHashMapOrdered<String, String> map = new ConcurrentHashMapOrdered<>(); map.put("key1", "value1"); assertEquals("value1", map.remove("key1")); assertNull(map.remove("key1")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, map.size())
[-] pred: org. junit. Assert. assertEquals ( 0, map. size ( ) )
************************************
[+] input: createNoRowsTwoAttributesRemoveTest() { ExampleTable table = new ColumnarExampleTable( Arrays.asList(ExampleTestTools.attributeInt(), ExampleTestTools.attributeReal())); table.removeAttribute(1);  assertEquals(1, table.getAttributeCount()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, table.size())
[-] pred: org. junit. Assert. assertEquals ( 0, table. size() )
************************************
[+] input: testHibernateConfiguration() { EntityManagerFactory factory = MockPersistence.createEntityManagerFactory("foo"); EntityManager em = factory.createEntityManager(); factory.close(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(em)
[-] pred: org. junit. Assert. assertNotNull ( em )
************************************
[+] input: shouldFlushDirtyEntriesForNamespace() { final ThreadCache cache = new ThreadCache(logContext, 100000, new MockStreamsMetrics(new Metrics())); final List<byte[]> received = new ArrayList<>(); cache.addDirtyEntryFlushListener(namespace1, new ThreadCache.DirtyEntryFlushListener() { @Override public void apply(final List<ThreadCache.DirtyEntry> dirty) { for (final ThreadCache.DirtyEntry dirtyEntry : dirty) { received.add(dirtyEntry.key().get()); } } }); final List<byte[]> expected = Arrays.asList(new byte[]{0}, new byte[]{1}, new byte[]{2}); for (final byte[] bytes : expected) { cache.put(namespace1, Bytes.wrap(bytes), dirtyEntry(bytes)); } cache.put(namespace2, Bytes.wrap(new byte[]{4}), dirtyEntry(new byte[]{4}));  cache.flush(namespace1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, received)
[-] pred: org. junit. Assert. assertEquals ( expected, received )
************************************
[+] input: testExampleSetMD() { List<MetaDataError> errors = new ArrayList<>(); final TablePrecondition tablePrecondition = new TablePrecondition(generateDummyInputPort(errors)); tablePrecondition.check(new ExampleSetMetaData()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: testRemoteConnectionIDWithNull() { Channel channel = null; ConnectionId connectionId = TransportUtil.remoteConnectionId(channel); Assert.assertNull(connectionId);  Channel channel2 = new EmbeddedChannel(); channel2.close(); ConnectionId connectionId2 = TransportUtil.remoteConnectionId(channel2); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(connectionId2)
[-] pred: org. junit. Assert. assertNull ( connectionId2 )
************************************
[+] input: testNoOutputField() { RegexSelectExtractor extractor = RegexSelectExtractor.builder() .patterns(patterns) .outputField(null) .defaultValue("default_topic") .extractorFlags(extractorFlags) .name(name) .field(field) .build(); Map<String, Object> out = extractor.extract(simpleMessage.trim()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(out)
[-] pred: org. junit. Assert. assertNull ( out )
************************************
[+] input: testToStringNodePatternWithWildCardLabel() { ArrayList<ArrayList<Label>> label = new ArrayList<>(); addLabelSetTo(label, new String[]{"%"}); NodePattern nodePattern = new NodePattern(null, label, null);  String expectedResult = "(nil, {{%}}, {})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: InterruptedException { int limit = 10; BlockingReactorExecutor eventloopExecutor = BlockingReactorExecutor.create(eventloop, limit); eventloop.keepAlive(true); Thread eventloopThread = new Thread(eventloop); eventloopThread.start();  List<Integer> actual = new ArrayList<>(); List<Integer> expected = new ArrayList<>();  for (int i = 0; i < 20; i++) { int finalI = i; expected.add(i); eventloopExecutor.execute(() -> actual.add(finalI)); }  eventloopExecutor.execute(() -> eventloop.keepAlive(false));  eventloopThread.join();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getCurrentGtidSnOutputNull() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final String actual = objectUnderTest.getCurrentGtidSn();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: Exception { var bout = new ByteArrayOutputStream(); var out = new BytesOut(bout, 15);  out.writeLong(Long.MAX_VALUE); out.writeLong(Long.MIN_VALUE);  out.flush(); byte[] result = bout.toByteArray(); byte[] expect = {127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, result )
************************************
[+] input: testDelete() { dao.insert(entity);  ActivityInstanceEntity result = dao.findOne(entity.getId()); Assert.assertNotNull(result);  dao.delete(entity.getId());  result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>";   }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception { final WebClient client = getWebClient(); final WebWindow window = client.openWindow(null, "TestingWindow"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(window)
[-] pred: org. junit. Assert. assertNotNull ( window )
************************************
[+] input: load_DiffFormatMetadataInPackWithTexture_Conflict() { OrderedResourceRepository repository = makeMockRepository( Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png", "textures/zombie.png.moremcmeta", "textures/zombie.png.other"), Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta") );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, MOCK_READERS, LOGGER );  Map<ResourceLocation, Integer> results = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(results.containsKey(ResourceLocation.parse("textures/bat.png"))); assertTrue(results.containsKey(ResourceLocation.parse("textures/creeper.png"))); }
[*] target: assertEquals(2, results.size())
[-] pred: org. junit. Assert. assertEquals ( 2, results. size() )
************************************
[+] input: canCalculateAdditiveDiff() { Person p1 = new Person(); p1.setFirstName("John"); p1.setLastName("Doe"); p1.setHobbies("Swimming", "Skiing"); Person p2 = new Person(); p2.setFirstName("John"); p2.setLastName("Doe"); p2.setHobbies("Swimming", "Skiing", "Cinema", "Reading"); p2.setPets("Cat", "Dog", "Fish"); Set<SecondaryIndex> indices = Sets.newHashSet(); DummyIndex firstNameIndex = new DummyIndex(PersonIndexer.firstName(), "firstName"); DummyIndex lastNameIndex = new DummyIndex(PersonIndexer.lastName(), "lastName"); DummyIndex hobbiesIndex = new DummyIndex(PersonIndexer.hobbies(), "hobbies"); DummyIndex petsIndex = new DummyIndex(PersonIndexer.pets(), "pets"); indices.add(firstNameIndex); indices.add(lastNameIndex); indices.add(hobbiesIndex); indices.add(petsIndex); IndexValueDiff diff = IndexingUtils.calculateDiff(indices, p1, p2); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertTrue(diff.isEntryUpdate()); assertTrue(diff.isAdditive()); assertFalse(diff.isSubtractive()); assertFalse(diff.isMixed()); assertFalse(diff.isEmpty()); assertEquals(Sets.newHashSet(hobbiesIndex, petsIndex), diff.getChangedIndices()); assertEquals(Sets.newHashSet("Cinema", "Reading"), diff.getAdditions(hobbiesIndex)); assertEquals(Sets.newHashSet("Cat", "Dog", "Fish"), diff.getAdditions(petsIndex)); }
[*] target: assertNotNull(diff)
[-] pred: org. junit. Assert. assertNotNull ( diff )
************************************
[+] input: testSessionWindowedSerdeFrom() { final Windowed<Integer> sessionWindowed = new Windowed<>(10, new SessionWindow(0, 1)); final Serde<Windowed<Integer>> sessionWindowedSerde = WindowedSerdes.sessionWindowedSerdeFrom(Integer.class); final byte[] bytes = sessionWindowedSerde.serializer().serialize(topic, sessionWindowed); final Windowed<Integer> windowed = sessionWindowedSerde.deserializer().deserialize(topic, bytes); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(sessionWindowed, windowed)
[-] pred: org. junit. Assert. assertEquals ( sessionWindowed, windowed )
************************************
[+] input: testMetaFields() { Map<MetaField, String> formatMap = new HashMap<>(); formatMap.put(MetaField.PROCESS_TIME, "AS PROCTIME()"); formatMap.put(MetaField.TABLE_NAME, "STRING METADATA FROM 'meta.table_name' VIRTUAL"); formatMap.put(MetaField.TABLE_NAME, "STRING METADATA FROM 'meta.table_name' VIRTUAL"); formatMap.put(MetaField.DATABASE_NAME, "STRING METADATA FROM 'meta.database_name' VIRTUAL"); formatMap.put(MetaField.SCHEMA_NAME, "STRING METADATA FROM 'meta.schema_name' VIRTUAL"); formatMap.put(MetaField.OP_TS, "TIMESTAMP_LTZ(3) METADATA FROM 'meta.op_ts' VIRTUAL"); formatMap.put(MetaField.OP_TYPE, "STRING METADATA FROM 'meta.op_type' VIRTUAL"); formatMap.put(MetaField.DATA, "STRING METADATA FROM 'meta.data' VIRTUAL"); formatMap.put(MetaField.DATA_CANAL, "STRING METADATA FROM 'meta.data_canal' VIRTUAL"); formatMap.put(MetaField.DATA_DEBEZIUM, "STRING METADATA FROM 'meta.data_debezium' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES, "BYTES METADATA FROM 'meta.data' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES_CANAL, "BYTES METADATA FROM 'meta.data_canal' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES_DEBEZIUM, "BYTES METADATA FROM 'meta.data_debezium' VIRTUAL"); formatMap.put(MetaField.IS_DDL, "BOOLEAN METADATA FROM 'meta.is_ddl' VIRTUAL"); formatMap.put(MetaField.TS, "TIMESTAMP_LTZ(3) METADATA FROM 'meta.ts' VIRTUAL"); formatMap.put(MetaField.SQL_TYPE, "MAP<STRING, INT> METADATA FROM 'meta.sql_type' VIRTUAL"); formatMap.put(MetaField.PK_NAMES, "ARRAY<STRING> METADATA FROM 'meta.pk_names' VIRTUAL"); PostgresExtractNode node = getTestObject(); boolean formatEquals = true; for (MetaField metaField : node.supportedMetaFields()) { formatEquals = node.format(metaField).equals(formatMap.get(metaField)); if (!formatEquals) { break; } } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(formatEquals)
[-] pred: org. junit. Assert. assertTrue ( formatEquals )
************************************
[+] input: test_getmainstr1() { String s = cnid.getmainstr(f); "<AssertPlaceHolder>"; System.out.println(s); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: canCreateAMiss() { CacheGetResult<Object> miss = CacheGetResult.miss(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(miss)
[-] pred: org. junit. Assert. assertNotNull ( miss )
************************************
[+] input: testBrowse() { BrowserResult result = createCommand().getBrowserResult(new BrowseCommandRequest());  "<AssertPlaceHolder>";  Collection<FileObject> foList = result.getFile().getChildren();  assertThat(foList).extracting("name").containsExactly("c", "a.txt");  Iterator<FileObject> iterator = foList.iterator(); FileObject c = iterator.next(); FileObject a = iterator.next();  assertFalse(a.isDirectory()); assertEquals("a.txt", a.getName()); assertEquals("a.txt", a.getPath()); assertEquals("added line for blame test", a.getDescription().get()); assertTrue(a.getLength().getAsLong() > 0); checkDate(a.getCommitDate().getAsLong()); assertTrue(c.isDirectory()); assertEquals("c", c.getName()); assertEquals("c", c.getPath()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenPubMsgAndSubscriptionWithSameQosAndFalseRetainAsPublish_whenProcessUpdatePublishMsg_thenReturnSameMsg() { Subscription subscription = new Subscription("test/topic", 1, ClientSessionInfo.builder().build()); QueueProtos.PublishMsgProto beforePublishMsgProto = QueueProtos.PublishMsgProto.newBuilder().setQos(1).setRetain(false).build();  QueueProtos.PublishMsgProto afterPublishMsgProto = downLinkProxy.updatePublishMsg(subscription, beforePublishMsgProto);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(beforePublishMsgProto, afterPublishMsgProto)
[-] pred: org. junit. Assert. assertEquals ( beforePublishMsgProto, afterPublishMsgProto )
************************************
[+] input: shouldReturnFalseWhenSuppliedNullTopicDescription() { Cluster cluster = createCluster(1); try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) { TopicAdmin admin = new TopicAdmin(null, mockAdminClient); boolean created = admin.createTopic(null); "<AssertPlaceHolder>"; } }
[*] target: assertFalse(created)
[-] pred: org. junit. Assert. assertFalse ( created )
************************************
[+] input: run() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  // trigger data final TriggerParam triggerParam = new TriggerParam(); triggerParam.setJobId(1); triggerParam.setExecutorHandler("demoJobHandler"); triggerParam.setExecutorParams(null); triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name()); triggerParam.setGlueType(GlueTypeEnum.BEAN.name()); triggerParam.setGlueSource(null); triggerParam.setGlueUpdatetime(System.currentTimeMillis()); triggerParam.setLogId(1); triggerParam.setLogDateTime(System.currentTimeMillis());  // Act final ReturnT<String> retval = executorBiz.run(triggerParam);  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: test_getmainstr2() { String s = cnid.getmainstr(f); "<AssertPlaceHolder>"; System.out.println(s); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: nestedEvents() { // Have an event for each person, but have one person's event fully contain another's event. We // should see two options. // // Events  :       |----A----| //                   |--B--| // Day     : |---------------------| // Options : |--1--|         |--2--|  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartDuration(TIME_0830AM, DURATION_90_MINUTES), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartDuration(TIME_0900AM, DURATION_30_MINUTES), Arrays.asList(PERSON_B)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A, PERSON_B), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), TimeRange.fromStartEnd(TIME_1000AM, TimeRange.END_OF_DAY, true));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { ActivityRuleConfig config = new ActivityRuleConfig(); config.setActivityId(1L); config.setConfigKey("city"); config.setConfigValue("1,2,3");  ActivityRule activityRule = ActivityRuleRegistrar.parseRule(config); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(activityRule)
[-] pred: org. junit. Assert. assertNotNull ( activityRule )
************************************
[+] input: getTypeOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final EventType actual = objectUnderTest.getType();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testPolymorphicDifference2() { VariableSet pDiff2 = VariableSet.polymorphicDifference2(fA, fB);  // everything in pDiff2 must be in A assertTrue(fA.containsAll(pDiff2));  // the normal difference is a subset of the second polymorphic difference // (it removes everything a normal difference would + possibly some more) // we want to take a look everything that gets only removed by the // second polymorphic difference  VariableSet diff = VariableSet.difference(fA, fB); VariableSet pDiffExcl = VariableSet.difference(diff, pDiff2);  // for each element in pDiffExcl the following must hold: // - element of A // - not element of B // - B has a variable with that name // - one of its types must be a subtype of the current elements type for (String name : pDiffExcl.getNames()) { for (Type type : pDiffExcl.getTypes(name)) { assertTrue(fA.contains(name, type)); assertFalse(fB.contains(name, type)); assertTrue(fB.contains(name)); boolean containsSubType = false; for (Type otherType : fB.getTypes(name)) { if (otherType.conformsTo(type)) { containsSubType = true; break; } } "<AssertPlaceHolder>"; } } }
[*] target: assertTrue(containsSubType)
[-] pred: org. junit. Assert. assertTrue ( containsSubType )
************************************
[+] input: listResources_PathStartDifferent_NoMatches() { List<ResourceCollection> collections = new ArrayList<>(); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("textures/one.png")))); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("texture/two.png")))); collections.add(new MockResourceCollection(Set.of(ResourceLocation.parse("text/three.png"))));  OrderedResourceRepository repository = new OrderedResourceRepository(PackType.CLIENT_RESOURCES, collections);  Collection<ResourceLocation> results = repository.list("ext", (file) -> true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, results.size())
[-] pred: org. junit. Assert. assertEquals ( 0, results. size ( ) )
************************************
[+] input: canGeneratePerson() { Person person = PersonGenerator.generateRandomPerson(); "<AssertPlaceHolder>"; assertNotNull(person.getFirstName()); assertNotNull(person.getLastName()); assertTrue(person.getFirstName().length() > 0); assertTrue(person.getLastName().length() > 0); }
[*] target: assertNotNull(person)
[-] pred: org. junit. Assert. assertNotNull ( person )
************************************
[+] input: shouldReturnNullForNullUrl() { PatientIdentifierType actualIdentifierType = dao.getPatientIdentifierTypeByUrl(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualIdentifierType)
[-] pred: org. junit. Assert. assertNull ( actualIdentifierType )
************************************
[+] input: shouldNotReturnChangesetWithIdZero() { ChangesetPagingResult result = createCommand().getChangesets(new LogCommandRequest()); boolean found = StreamSupport.stream(result.spliterator(), false).anyMatch(c -> "0".equals(c.getId())); "<AssertPlaceHolder>"; }
[*] target: assertFalse(found)
[-] pred: org. junit. Assert. assertFalse ( found )
************************************
[+] input: canCalculateSubtractiveDiff() { Person p1 = new Person(); p1.setFirstName("John"); p1.setLastName("Doe"); p1.setHobbies("Swimming", "Skiing", "Cinema", "Reading"); p1.setPets("Cat", "Dog", "Fish"); Person p2 = new Person(); p2.setFirstName("John"); p2.setLastName("Doe"); p2.setHobbies("Swimming", "Skiing"); Set<SecondaryIndex> indices = Sets.newHashSet(); DummyIndex firstNameIndex = new DummyIndex(PersonIndexer.firstName(), "firstName"); DummyIndex lastNameIndex = new DummyIndex(PersonIndexer.lastName(), "lastName"); DummyIndex hobbiesIndex = new DummyIndex(PersonIndexer.hobbies(), "hobbies"); DummyIndex petsIndex = new DummyIndex(PersonIndexer.pets(), "pets"); indices.add(firstNameIndex); indices.add(lastNameIndex); indices.add(hobbiesIndex); indices.add(petsIndex); IndexValueDiff diff = IndexingUtils.calculateDiff(indices, p1, p2); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertTrue(diff.isEntryUpdate()); assertFalse(diff.isAdditive()); assertTrue(diff.isSubtractive()); assertFalse(diff.isMixed()); assertFalse(diff.isEmpty()); assertEquals(Sets.newHashSet(hobbiesIndex, petsIndex), diff.getChangedIndices()); assertEquals(Sets.newHashSet("Cinema", "Reading"), diff.getRemovals(hobbiesIndex)); assertEquals(Sets.newHashSet("Cat", "Dog", "Fish"), diff.getRemovals(petsIndex)); }
[*] target: assertNotNull(diff)
[-] pred: org. junit. Assert. assertNotNull ( diff )
************************************
[+] input: givenNoApplicationClientsLimit_whenCheckApplicationClientsLimit_thenSuccess() { rateLimitService.setApplicationClientsLimit(0);  SessionInfo sessionInfo = SessionInfo.builder().build(); boolean result = rateLimitService.checkApplicationClientsLimit(sessionInfo); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: containsKey_True_content_based() { // same hash and different content final OrderedFastHashMap<MockKey<String>, String> m = new OrderedFastHashMap<>(); final MockKey<String> mockKey1 = new MockKey<>(10, "akey1"); m.put(mockKey1, "any1"); m.put(new MockKey<>(10, "akey2"), "any2"); m.put(new MockKey<>(10, "akey3"), "any3"); m.put(new MockKey<>(10, "akey4"), "any4"); "<AssertPlaceHolder>"; assertTrue(m.containsKey(new MockKey<>(10, "akey1"))); }
[*] target: assertTrue(m.containsKey(mockKey1))
[-] pred: org. junit. Assert. assertTrue ( m. containsKey ( mockKey1 ) )
************************************
[+] input: should_throw_exception_if_directive_class_not_a_wiring1() { directivePostProcessor.postProcessBeforeInitialization(new CorrectDirective(), "a"); Map<String, SchemaDirectiveWiring> map = (Map<String, SchemaDirectiveWiring>) ReflectionTestUtils.getField(RuntimeWiringRegistry.class, "NAME_AND_DIRECTIVE_WIRING"); "<AssertPlaceHolder>"; assertEquals(1, map.size()); assertTrue(map.containsKey("b")); }
[*] target: assertNotNull(map)
[-] pred: org. junit. Assert. assertNotNull ( map )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.builder().wipeDeferred().build(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_FORWARDING_ROUTING_V4); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_FORWARDING_DROP_ROUTING_V4) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: Exception { ComputeHeadCursorResponse expectedResponse = ComputeHeadCursorResponse.newBuilder().setHeadCursor(Cursor.newBuilder().build()).build(); mockTopicStatsService.addResponse(expectedResponse);  ComputeHeadCursorRequest request = ComputeHeadCursorRequest.newBuilder() .setTopic(TopicName.of("[PROJECT]", "[LOCATION]", "[TOPIC]").toString()) .setPartition(-1799810326) .build();  ComputeHeadCursorResponse actualResponse = client.computeHeadCursor(request); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockTopicStatsService.getRequests(); Assert.assertEquals(1, actualRequests.size()); ComputeHeadCursorRequest actualRequest = ((ComputeHeadCursorRequest) actualRequests.get(0));  Assert.assertEquals(request.getTopic(), actualRequest.getTopic()); Assert.assertEquals(request.getPartition(), actualRequest.getPartition()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: InterruptedException { for (int i = 0; i < (Integer.MAX_VALUE - 500); i+=100) { BigInteger s = BigInteger.valueOf(i);  byte[] bytes = ConverterUtil.bigIntegerToByte(s); BigInteger l = ConverterUtil.byteToBigInteger(bytes); Assert."<AssertPlaceHolder>"; }  }
[*] target: assertEquals(s, l)
[-] pred: org. junit. Assert. assertEquals ( s, l )
************************************
[+] input: copyConstructorTest() { PlayerState source = new PlayerState(); source.setPlayProgress(1000); source.setPlayProgressUpdateTime(SystemClock.elapsedRealtime()); source.setMusicItem(new MusicItem()); source.setPlayPosition(15); source.setPlayMode(PlayMode.LOOP); source.setPlaybackState(PlaybackState.ERROR); source.setPreparing(false); source.setPrepared(true); source.setAudioSessionId(12); source.setBufferedProgress(100); source.setStalled(true); source.setErrorCode(ErrorCode.PLAYER_ERROR); source.setErrorMessage("player error"); source.setSleepTimerStarted(true); source.setSleepTimerTime(60_000); source.setSleepTimerStartTime(System.currentTimeMillis()); source.setTimeoutAction(SleepTimer.TimeoutAction.STOP);  PlayerState copy = new PlayerState(source);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(source, copy)
[-] pred: org. junit. Assert. assertEquals ( source, copy )
************************************
[+] input: testTimeoutOverflow() { Timer timer = time.timer(Long.MAX_VALUE); assertEquals(Long.MAX_VALUE - timer.currentTimeMs(), timer.remainingMs()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, timer.elapsedMs())
[-] pred: org. junit. Assert. assertEquals ( 0, timer. elapsedMs() )
************************************
[+] input: JSONException { OpenWeatherMapSource source = new OpenWeatherMapSource(context); Location location = new SimpleLocation("lat=54.96&lon=73.38", true); JSONObject json = source.queryCurrentWeather(location); "<AssertPlaceHolder>"; assertEquals("Omsk", json.getString("name")); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: overlappingEvents() { // Have an event for each person, but have their events overlap. We should only see two options. // // Events  :       |--A--| //                     |--B--| // Day     : |---------------------| // Options : |--1--|         |--2--|  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartDuration(TIME_0830AM, DURATION_60_MINUTES), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartDuration(TIME_0900AM, DURATION_60_MINUTES), Arrays.asList(PERSON_B)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A, PERSON_B), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), TimeRange.fromStartEnd(TIME_1000AM, TimeRange.END_OF_DAY, true));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldCreateTaskStateDirectory() { final TaskId taskId = new TaskId(0, 0); final File taskDirectory = directory.directoryForTask(taskId); "<AssertPlaceHolder>"; assertTrue(taskDirectory.isDirectory()); }
[*] target: assertTrue(taskDirectory.exists())
[-] pred: org. junit. Assert. assertTrue ( taskDirectory. exists ( ) )
************************************
[+] input: updateSchemaOfNonStruct() { Object value = new Integer(1); Object updatedValue = SetSchemaMetadata.updateSchemaIn(value, Schema.INT32_SCHEMA); "<AssertPlaceHolder>"; }
[*] target: assertSame(value, updatedValue)
[-] pred: org. junit. Assert. assertSame ( value, updatedValue )
************************************
[+] input: regexPreprocessorTest() { RegexPreprocessor rpp = new RegexPreprocessor("^.*(fakebook\\.com.*)/$", "$1"); String test = "https://www.fakebook.com/personOne/"; String res = "fakebook.com/personOne"; Assert.assertEquals(res, rpp.applyProcessor(test));  test = "www.fakebook.com/personOne/"; res = "fakebook.com/personOne"; Assert.assertEquals(res, rpp.applyProcessor(test));  test = "fakebook.com/personOne/"; res = "fakebook.com/personOne"; Assert.assertEquals(res, rpp.applyProcessor(test));  test = "personOne/"; res = "personOne/"; Assert.assertEquals(res, rpp.applyProcessor(test));  test = "insertedWithoutAppliedRegex"; res = "insertedWithoutAppliedRegex"; Assert.assertEquals(res, rpp.applyProcessor(test));  test = ""; res = ""; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(res, rpp.applyProcessor(test))
[-] pred: org. junit. Assert. assertEquals ( res, rpp. applyProcessor( test ) )
************************************
[+] input: testParse() { Map<String, MysqlGTIDSet> cases = new HashMap<String, MysqlGTIDSet>(5); cases.put("726757ad-4455-11e8-ae04-0242ac110002:1", buildForTest(new Material("726757ad-4455-11e8-ae04-0242ac110002", 1, 2))); cases.put("726757ad-4455-11e8-ae04-0242ac110002:1-3", buildForTest(new Material("726757ad-4455-11e8-ae04-0242ac110002", 1, 4))); cases.put("726757ad-4455-11e8-ae04-0242ac110002:1-3:4", buildForTest(new Material("726757ad-4455-11e8-ae04-0242ac110002", 1, 5))); cases.put("726757ad-4455-11e8-ae04-0242ac110002:1-3:7-9", buildForTest(new Material("726757ad-4455-11e8-ae04-0242ac110002", 1, 4, 7, 10))); cases.put("726757ad-4455-11e8-ae04-0242ac110002:1-3,726757ad-4455-11e8-ae04-0242ac110003:4", buildForTest(Arrays.asList(new Material("726757ad-4455-11e8-ae04-0242ac110002", 1, 4), new Material("726757ad-4455-11e8-ae04-0242ac110003", 4, 5))));  for (Map.Entry<String, MysqlGTIDSet> entry : cases.entrySet()) { MysqlGTIDSet expected = entry.getValue(); MysqlGTIDSet actual = MysqlGTIDSet.parse(entry.getKey());  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: MalformedURLException { FolderTriplifier tt = new FolderTriplifier(); try { URL url = getClass().getClassLoader().getResource("test").toURI().toURL();  Properties p = new Properties(); p.setProperty(IRIArgument.LOCATION.toString(), url.toString()); FacadeXGraphBuilder builder = new BaseFacadeXGraphBuilder( p); tt.triplify(p, builder); DatasetGraph dg = builder.getDatasetGraph(); Set<String> expected = new HashSet<>();  expected.add(""); expected.add("test.csv"); expected.add("test.json"); expected.add("test.xml"); expected.add("test.txt");  Set<String> actual = new HashSet<>(); dg.find(null, null, null, null).forEachRemaining(q -> { if (q.getObject().isLiteral()) { try { actual.add(q.getObject().getLiteralLexicalForm() .replace(Paths.get(url.toURI()).toUri().toString(), "")); } catch (URISyntaxException e) { L.error("", e); } } });  "<AssertPlaceHolder>";  } catch (IOException | URISyntaxException e) { L.error("", e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: SemanticException { List<Brick> bricksList = new ArrayList<>(); List<Brick> bricksList1 = new ArrayList<>();  Set<String> treeSet = new TreeSet<>(); treeSet.add("mo"); treeSet.add("de");  Brick brick = new Brick(1, 4, treeSet);  Set<String> treeSet1 = new TreeSet<>(); treeSet1.add("mo"); treeSet1.add("de"); treeSet1.add("re");  Brick brick1 = new Brick(0, 5, treeSet1);  Set<String> treeSet2 = new TreeSet<>(); treeSet2.add("ge"); treeSet2.add("ze");  Brick brick2 = new Brick(1, 3, treeSet2);  Set<String> treeSet3 = new TreeSet<>(); treeSet3.add("ge"); treeSet3.add("ze"); treeSet3.add("le");  Brick brick3 = new Brick(1, 4, treeSet3);  bricksList.add(brick); bricksList.add(brick2);  bricksList1.add(brick1); bricksList1.add(brick3);  Bricks bricks = new Bricks(bricksList); Bricks bricks1 = new Bricks(bricksList1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(bricks.lessOrEqualAux(bricks1))
[-] pred: org. junit. Assert. assertTrue ( bricks. lessOrEqualAux ( bricks1 ) )
************************************
[+] input: InterruptedException {  long second = Instant.parse("2021-12-31T23:59:59.000Z").getEpochSecond(); long leapSecond = second - 1; // simulate a leap second long times[] = { second, leapSecond };  Clock clock = new Clock() { private int i;  @Override public long millis() { return times[i++ % times.length] * 1000; }  @Override public ZoneId getZone() { return null; }  @Override public Clock withZone(ZoneId zone) { return null; }  @Override public Instant instant() { return null; } };  // a function that forces the clock to restart to ZERO IntFunction<byte[]> randomFunction = x -> new byte[x];  TsidFactory factory = TsidFactory.builder().withClock(clock).withRandomFunction(randomFunction).build();  long ms1 = factory.create().getUnixMilliseconds(); // second long ms2 = factory.create().getUnixMilliseconds(); // leap second  "<AssertPlaceHolder>"; // LEAP SECOND! DON'T MOVE BACKWARDS! }
[*] target: assertEquals(ms1, ms2)
[-] pred: org. junit. Assert. assertEquals ( ms1, ms2 )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.builder() .setVlanId(VLAN_100) .build(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_PRE_NEXT_NEXT_VLAN); PiActionParam vlanParam = new PiActionParam( P4InfoConstants.VLAN_ID, VLAN_100.toShort()); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_PRE_NEXT_SET_VLAN) .withParameter(vlanParam) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: testToStringEdgePatternWithLabelConjunction() { ArrayList<ArrayList<Label>> labelSetList = new ArrayList<>(); addLabelSetTo(labelSetList, new String[]{"Does", "AreColleagues"}); EdgePattern edgePattern = new EdgePattern(null, labelSetList, null, Direction.UNDIRECTED, 1);  String expectedResult = "(-, nil, {{Does, AreColleagues}}, {}, (1, 1))"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, edgePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, edgePattern. toString ( ) )
************************************
[+] input: testGetBlameResultWithRevision() { BlameCommandRequest request = new BlameCommandRequest();  request.setPath("a.txt"); request.setRevision("3");  BlameResult result = createCommand().getBlameResult(request);  "<AssertPlaceHolder>"; assertEquals(1, result.getTotal());  BlameLine line = result.getLine(0);  checkFirstLine(line); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { var bout = new ByteArrayOutputStream(); var out = new BytesOut(bout, 8); out.flush();  byte[] b1 = "hello".getBytes("UTF-8"); out.write(b1, 0, b1.length);  byte[] b2 = "world".getBytes("UTF-8"); out.write(b2, 0, b2.length);  byte[] b3 = "hello, world!!!".getBytes("UTF-8"); out.write(b3, 0, b3.length);  out.flush(); byte[] result = bout.toByteArray(); byte[] expect = "helloworldhello, world!!!".getBytes("UTF-8"); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, result )
************************************
[+] input: Exception { ContainerInfo panel = parseContainer( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "  }", "}"); final GenericProperty enabledProperty = (GenericProperty) panel.getPropertyByTitle("enabled"); final AtomicBoolean wasFired = new AtomicBoolean(); // add listener panel.addBroadcastListener(new JavaEventListener() { @Override public void propertyValueWasSet(GenericPropertyImpl property) throws Exception { if (property == enabledProperty) { wasFired.set(true); } } }); // set value for "enabled" to "false" wasFired.set(false); enabledProperty.setValue(false); assertTrue(wasFired.get()); assertEditor( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "    setEnabled(false);", "  }", "}"); // set value for "enabled" to "true" wasFired.set(false); enabledProperty.setValue(true); "<AssertPlaceHolder>"; assertEditor( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "  }", "}"); // set value for "enabled" to "false" wasFired.set(false); enabledProperty.setExpression("false", Property.UNKNOWN_VALUE); assertTrue(wasFired.get()); assertEditor( "// filler filler filler", "public class Test extends JPanel {", "  public Test() {", "    setEnabled(false);", "  }", "}"); }
[*] target: assertTrue(wasFired.get())
[-] pred: org. junit. Assert. assertTrue ( wasFired. get ( ) )
************************************
[+] input: testSouthWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.compactNine(population, 5);  Chromosome exepcted_individual = population.get(8); Chromosome returned_individual = neighbors.get(5);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { HttpDownloader downloader = Mockito.spy(new HttpDownloader()); PowerMockito.whenNew(HttpDownloader.class).withAnyArguments().thenReturn(downloader); Mockito.doNothing().when(downloader).download(); File file = Mockito.mock(File.class); PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(file); Mockito.when(file.exists()).thenReturn(true); Mockito.when(file.canExecute()).thenReturn(false); Mockito.when(file.renameTo(Mockito.any(File.class))).thenReturn(true); PowerMockito.mock(FileUtils.class, new DoesNothing()); boolean result = UpgraderExecutor.prepare(Context.getServerContext().getAgentUpdateInfo()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { APIConnector connector = getApiConnectorMock(); JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{" + "directory:{" + "enabled: true," + "cat: {" + ""c1": "Category 1"," + ""c2": "Category 2"," + ""c3": "Category 3"" + "}}}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(result.organization); Assert.assertNull(result.organization.name); Assert.assertTrue(result.directory.enabled); Assert.assertNotNull(result.directory.categories); Assert.assertEquals(3, result.directory.categories.size());  boolean c1 = false; boolean c2 = false; boolean c3 = false;  for(WorkDirectoryCategory c: result.directory.categories) { switch (c.id) { case "c1": Assert.assertFalse("c1 already found", c1); c1 = true; Assert.assertEquals("Category 1", c.name); break; case "c2": Assert.assertFalse("c1 already found", c2); c2 = true; Assert.assertEquals("Category 2", c.name); break; case "c3": Assert.assertFalse("c1 already found", c3); c3 = true; Assert.assertEquals("Category 3", c.name); break; default: Assert.fail("Invalid category " + c.id); } } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getJobConfigById() { JobConfigDTO jobConfigDTO = jobConfigService.getJobConfigById(1L); System.out.println(jobConfigDTO); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jobConfigDTO)
[-] pred: org. junit. Assert. assertNotNull ( jobConfigDTO )
************************************
[+] input: NulsException { ProtocolVersion version1 = new ProtocolVersion(); version1.setVersion((byte) 1); version1.setEffectiveRatio((byte) 85); version1.setContinuousIntervalCount((short) 260); String hex = HexUtil.encode(version1.serialize()); ProtocolVersion version2 = new ProtocolVersion(); version2.parse(new NulsByteBuffer(HexUtil.decode(hex))); assertEquals(version1.getVersion(), version2.getVersion()); assertEquals(version1.getEffectiveRatio(), version2.getEffectiveRatio()); "<AssertPlaceHolder>"; assertEquals(version1, version2); }
[*] target: assertEquals(version1.getContinuousIntervalCount(), version2.getContinuousIntervalCount())
[-] pred: org. junit. Assert. assertEquals ( version1. getContinuousIntervalCount ( ), version2. getContinuousIntervalCount ( ) )
************************************
[+] input: getUser() { mockServerReturnObject(USER_MIKE); User user = metaAnnotationUserService.getUser(Long100); "<AssertPlaceHolder>"; assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: test() { BinarySerializer<ExternalClass> serializer = SerializerFactory.builder() .with(ExternalComponent.class, ctx -> new SimpleSerializerDef<ExternalComponent>() { @Override protected BinarySerializer<ExternalComponent> createSerializer(int version, CompatibilityLevel compatibilityLevel) { return new BinarySerializer<>() { @Override public void encode(BinaryOutput out, ExternalComponent item) { out.writeVarInt(item.getX()); out.writeUTF8(item.getY()); }  @Override public ExternalComponent decode(BinaryInput in) throws CorruptedDataException { int x = in.readVarInt(); String y = in.readUTF8();  return new ExternalComponent(x, y); } }; } }) .build() .create(DEFINING_CLASS_LOADER, ExternalClass.class);  ExternalClass original = new ExternalClass( "test", new ExternalComponent( 123, "inner test 1" ), new ExternalComponent( 456, "inner test 2" ) );  ExternalClass copy = doTest(original, serializer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, copy)
[-] pred: org. junit. Assert. assertEquals ( original, copy )
************************************
[+] input: testEmoji() { String webInsert = "{"emoji":"100"}"; String mobileExpected = "{"insert":"\uD83D\uDCAF"}"; LinkedHashMap emojiMap = GSON.fromJson(webInsert, LinkedHashMap.class); String res = GSON.toJson(DeltaConverter.WebToMobile.webToMobileEmoji(emojiMap)); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(mobileExpected, res)
[-] pred: org. junit. Assert. assertEquals ( mobileExpected, res )
************************************
[+] input: testFetchingExecutorForValidCommand() { final CommandExecutor commandExecutor = factory.getCommandExecutor(new Command("leave 1")); "<AssertPlaceHolder>"; assertTrue(commandExecutor instanceof LeaveCommandExecutor); }
[*] target: assertNotNull(commandExecutor)
[-] pred: org. junit. Assert. assertNotNull ( commandExecutor )
************************************
[+] input: Exception { int start = 1; int count = 10; List<Block> blocks = new ArrayList<>();  GenesisBlock genesisBlock = GenesisBlock.getInstance(0, 0); blocks.add(genesisBlock);  Block preBlock = genesisBlock; do{ Block block = BlockGenerator.generate(preBlock); blocks.add(block); preBlock = block; start++; } while (start < count);  for (int i = 0; i < blocks.size()-1; i++) { NulsHash prehash = blocks.get(i).getHeader().getHash(); NulsHash hash = blocks.get(i+1).getHeader().getPreHash(); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(prehash, hash)
[-] pred: org. junit. Assert. assertEquals ( prehash, hash )
************************************
[+] input: CantAddOptionalAttendeeWhoIsAlsoMandatory() { MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), DURATION_1_HOUR); request.addOptionalAttendee(PERSON_A);  int actual = request.getOptionalAttendees().size(); int expected = 0; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { Map<String, Object> values = new HashMap<String, Object>(); values.put("intValue", 1); values.put("booleanValue", true); values.put("stringArray", new String[] { "a", "b", "c" }); TypedMap map = new TypedMap(recordType, values);  map.clear(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, map.size())
[-] pred: org. junit. Assert. assertEquals ( 0, map. size ( ) )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock(); final IdentityStoreInterface identityStore = getIdentityStoreInterfaceMock();  when(identityStore.getIdentity()).thenReturn("FOOBAR12"); when(identityStore.calcSharedSecret(any())).thenReturn(new byte[32]); System.out.println(identityStore.getIdentity()); when(connector.obtainTurnServers(eq(identityStore), eq("voip"))).thenCallRealMethod(); when(connector.postJson(eq("https://server.url/identity/turn_cred"), ArgumentMatchers.any())) .thenReturn("{" + ""token": "/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="," + ""tokenRespKeyPub": "dummy"" + "}") .thenReturn("{" + ""success": true," + ""turnUrls": ["turn:foo", "turn:bar"]," + ""turnUrlsDualStack": ["turn:ds-foo", "turn:ds-bar"]," + ""turnUsername": "s00perturnuser"," + ""turnPassword": "t0psecret"," + ""expiration": 86400" + "}");  APIConnector.TurnServerInfo result = connector.obtainTurnServers(identityStore, "voip"); Assert."<AssertPlaceHolder>"; Assert.assertArrayEquals(new String[] {"turn:foo", "turn:bar"}, result.turnUrls); Assert.assertArrayEquals(new String[] {"turn:ds-foo", "turn:ds-bar"}, result.turnUrlsDualStack); Assert.assertEquals("s00perturnuser", result.turnUsername); Assert.assertEquals("t0psecret", result.turnPassword);  Date expectedExpirationDate = new Date(new Date().getTime() + 86400*1000); Assert.assertTrue(Math.abs(expectedExpirationDate.getTime() - result.expirationDate.getTime()) < 10000); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getEventLenOutputZero() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final int actual = objectUnderTest.getEventLen();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual)
[-] pred: org. junit. Assert. assertEquals ( 0, actual )
************************************
[+] input: list_SomeMatchAllFiltersClient_MatchingFound() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "minecraft", "textures", (file) -> file.endsWith(".png"));  "<AssertPlaceHolder>"; assertTrue(resources.contains(ResourceLocation.parse("textures/hello.png"))); assertTrue(resources.contains(ResourceLocation.parse("textures/block/sea/rock/gravel.png"))); }
[*] target: assertEquals(2, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 2, resources. size ( ) )
************************************
[+] input: testShouldProduceTheSameMnemonic() { final String expected = "clinic excuse minimum until indoor flower fun concert inquiry letter audit patrol"; final String actual = MnemonicUtils.generateMnemonic(MnemonicUtils.generateEntropy(expected)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMostSouthWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 12);  Chromosome exepcted_individual = population.get(3); Chromosome returned_individual = neighbors.get(5);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: IOException { BrowseCommandRequest request = new BrowseCommandRequest();  request.setPath("c");  BrowserResult result = new HgBrowseCommand(cmdContext).getBrowserResult(request);  "<AssertPlaceHolder>";  FileObject c = result.getFile(); assertEquals("c", c.getName()); Collection<FileObject> foList = c.getChildren();  assertThat(foList) .extracting("name") .containsExactly("d.txt", "e.txt");  assertNotNull(foList); assertFalse(foList.isEmpty()); assertEquals(2, foList.size());  FileObject d = null; FileObject e = null;  for (FileObject f : foList) { if ("d.txt".equals(f.getName())) { d = f; } else if ("e.txt".equals(f.getName())) { e = f; } }  assertNotNull(d); assertFalse(d.isDirectory()); assertEquals("d.txt", d.getName()); assertEquals("c/d.txt", d.getPath()); assertEquals("added file d and e in folder c", d.getDescription().get()); assertTrue(d.getLength().getAsLong() > 0); checkDate(d.getCommitDate().getAsLong()); assertNotNull(e); assertFalse(e.isDirectory()); assertEquals("e.txt", e.getName()); assertEquals("c/e.txt", e.getPath()); assertEquals("added file d and e in folder c", e.getDescription().get()); assertTrue(e.getLength().getAsLong() > 0); checkDate(e.getCommitDate().getAsLong()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: given_validUserAndRoleIds_when_removeRole_returnUser() { User userDataForTest = getUserTestData(1L, "andrea", "Andrea", "Giassi", "andrea.test@gmail.com", "+3531122334455");  Role roleAdmin = new Role(Role.ADMINISTRATOR, "Administrator"); userDataForTest.getRoles().add(roleAdmin);  given(userRepository.findById(1L)).willReturn(Optional.of(userDataForTest)); given(roleRepository.findById(2L)).willReturn(Optional.of(roleAdmin));  User user = userService.removeRole(1L, 2L);  "<AssertPlaceHolder>";  // check the remove role Set<Role> roleSet = user.getRoles();  assertNotNull(roleSet); assertEquals(1, roleSet.size()); assertTrue(!roleSet.contains(roleAdmin)); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: optionsForNoAttendees() { MeetingRequest request = new MeetingRequest(NO_ATTENDEES, DURATION_1_HOUR);  Collection<TimeRange> actual = query.query(NO_EVENTS, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.WHOLE_DAY);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { String message = "1"; KeyPair kp4096 = RSA.generateKeyPair(4096); PublicKey pk = kp4096.getPublic(); PrivateKey sk = kp4096.getPrivate();  byte[] sign = RSA.signAsBytes(message, sk); assertEquals(sign.length, 512);  boolean valid = RSA.verifyAsBytes(message, sign, pk); "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: ignoresPeopleNotAttending() { // Add an event, but make the only attendee someone different from the person looking to book // a meeting. This event should not affect the booking. Collection<Event> events = Arrays.asList(new Event("Event 1", TimeRange.fromStartDuration(TIME_0900AM, DURATION_30_MINUTES), Arrays.asList(PERSON_A))); MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_B), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.WHOLE_DAY);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testParseJSONtoHdbtiSuccessfullyWithFileNameWithoutPath() { XSKHDBTIImportConfigModel model = new XSKHDBTIImportConfigModel(); model.setDelimEnclosing("'"); model.setSchemaName("schema"); model.setHeader(true); model.setTableName("table"); model.setFileName("myData2.csv");  String expectedValue = "import = [\n" + "{\n" + "\tdelimEnclosing="'";\n" + "\tschema = "schema";\n" + "\theader = true;\n" + "\ttable = "table";\n" + "\tfile = "myData2.csv";\n" + "}];";  String actualResult = processor.parseJSONtoHdbti(new ArrayList<>(Arrays.asList(model))); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualResult )
************************************
[+] input: testHashCode() { InputStruct inputStruct = Mockito.mock(InputStruct.class); FileInputSplit split1 = new FileInputSplit(ElemType.VERTEX, inputStruct, "/tmp/test"); FileInputSplit split2 = new FileInputSplit(ElemType.VERTEX, inputStruct, "/tmp/test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(split1.hashCode(), split2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( split1. hashCode(), split2. hashCode() )
************************************
[+] input: testWildcards() { CrontabEntry wildcardMinuteEntry = CrontabEntry.parse("* 1 1 1 *"); assertEquals("*", wildcardMinuteEntry.getMinuteAsString()); assertTrue(wildcardMinuteEntry.hasWildcardMinute()); assertFalse(wildcardMinuteEntry.hasWildcardHour()); assertFalse(wildcardMinuteEntry.hasWildcardDayOfMonth()); assertFalse(wildcardMinuteEntry.hasWildcardMonth()); assertTrue(wildcardMinuteEntry.hasWildcardDayOfWeek());  CrontabEntry wildcardHourEntry = CrontabEntry.parse("1 * 1 1 *"); assertEquals("*", wildcardHourEntry.getHourAsString()); assertFalse(wildcardHourEntry.hasWildcardMinute()); assertTrue(wildcardHourEntry.hasWildcardHour()); assertFalse(wildcardHourEntry.hasWildcardDayOfMonth()); assertFalse(wildcardHourEntry.hasWildcardMonth()); assertTrue(wildcardHourEntry.hasWildcardDayOfWeek());  CrontabEntry wildcardDayOfMonth = CrontabEntry.parse("1 1 * 1 *"); assertEquals("*", wildcardDayOfMonth.getDayOfMonthAsString()); assertFalse(wildcardDayOfMonth.hasWildcardMinute()); assertFalse(wildcardDayOfMonth.hasWildcardHour()); assertTrue(wildcardDayOfMonth.hasWildcardDayOfMonth()); assertFalse(wildcardDayOfMonth.hasWildcardMonth()); assertTrue(wildcardDayOfMonth.hasWildcardDayOfWeek());  CrontabEntry wildcardMonth = CrontabEntry.parse("1 1 1 * *"); assertEquals("*", wildcardMonth.getMonthAsString()); assertFalse(wildcardMonth.hasWildcardMinute()); assertFalse(wildcardMonth.hasWildcardHour()); assertFalse(wildcardMonth.hasWildcardDayOfMonth()); assertTrue(wildcardMonth.hasWildcardMonth()); assertTrue(wildcardMonth.hasWildcardDayOfWeek());  CrontabEntry wildcardDayOfWeek = CrontabEntry.parse("1 1 1 1 *"); assertEquals("*", wildcardDayOfWeek.getDayOfWeekAsString()); assertFalse(wildcardDayOfWeek.hasWildcardMinute()); assertFalse(wildcardDayOfWeek.hasWildcardHour()); assertFalse(wildcardDayOfWeek.hasWildcardDayOfMonth()); assertFalse(wildcardDayOfWeek.hasWildcardMonth()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(wildcardDayOfWeek.hasWildcardDayOfWeek())
[-] pred: org. junit. Assert. assertTrue ( wildcardDayOfWeek. hasWildcardDayOfWeek ( ) )
************************************
[+] input: testDelete() { dao.insert(entity);  DeploymentInstanceEntity result = dao.findOne(entity.getId()); Assert.assertNotNull(result);  dao.delete(entity.getId());  result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: IOException { when(zooKeeperConnector.getData()).thenReturn(Collections.singletonList(rulesForCorrelation)); AlertingEngineBolt.prepare(null, null, collector);  AlertingEngineBolt.execute(tuple); Values values = argumentEmitCaptor.getValue(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(2, values.size()); Assert.assertTrue(values.get(0) instanceof AlertMessages); Assert.assertTrue(values.get(1) instanceof ExceptionMessages);  AlertMessages alerts = (AlertMessages)values.get(0); Assert.assertEquals(1, alerts.size()); Assert.assertTrue(alerts.get(0).isCorrelationAlert()); Assert.assertFalse(alerts.get(0).isVisibleAlert());  Assert.assertEquals("siembol_alert_generic_v1", alerts.get(0).getFullRuleName()); Assert.assertTrue(alerts.get(0).getCorrelationKey().isPresent()); Assert.assertEquals("1", alerts.get(0).getCorrelationKey().get()); Assert.assertEquals(100, alerts.get(0).getMaxDayMatches()); Assert.assertEquals(30, alerts.get(0).getMaxHourMatches());  Map<String, Object> parsed = JSON_READER.readValue(alerts.get(0).getAlertJson()); Assert.assertEquals("siembol_alert_generic_v1", parsed.get(AlertingFields.FULL_RULE_NAME.getAlertingName())); Assert.assertEquals(100, parsed.get(AlertingFields.MAX_PER_DAY_FIELD.getAlertingName())); Assert.assertEquals(30, parsed.get(AlertingFields.MAX_PER_HOUR_FIELD.getAlertingName())); Assert.assertEquals("secret", parsed.get(SiembolMessageFields.SENSOR_TYPE.toString())); Assert.assertEquals("secret", parsed.get("sensor")); Assert.assertEquals(1, parsed.get("dummy_field_int")); Assert.assertEquals(false, parsed.get("dummy_field_boolean")); verify(collector, times(1)).ack(eq(tuple)); }
[*] target: assertNotNull(values)
[-] pred: org. junit. Assert. assertNotNull ( values )
************************************
[+] input: list_EmptyNamespace_NoExceptionIfOriginalAccepts() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "", "textures", (file) -> file.endsWith(".png"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 0, resources. size ( ) )
************************************
[+] input: Exception { final Future<Socket> f = executor.submit(new Callable<Socket>() { public Socket call() throws Exception { return serverSocket.accept(); } }); assertBlocks(f); connect().getOutputStream().write(123); final Socket socket = f.get(); "<AssertPlaceHolder>"; assertEquals(123, socket.getInputStream().read()); }
[*] target: assertNotNull(socket)
[-] pred: org. junit. Assert. assertNotNull ( socket )
************************************
[+] input: testEmptyPathSequence() { PathSequence pathSequence = new PathSequence(pathSequenceList); assertTrue(pathSequence.pathSequence.isEmpty()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, pathSequence.size())
[-] pred: org. junit. Assert. assertEquals ( 0, pathSequence. size ( ) )
************************************
[+] input: Exception { byte[] bytes = new byte[64]; bytes[0] = 15; Node nearNode = new Node(bytes, "127.0.0.19", 18888, 18888); bytes[0] = 70; Node farNode = new Node(bytes, "127.0.0.20", 18888, 18888); nodeTable.addNode(nearNode); nodeTable.addNode(farNode); for (int i = 0; i < KademliaOptions.BUCKET_SIZE - 1; i++) { //To control totally 17 nodes, however closest's capacity is 16 nodeTable.addNode(new Node(ids.get(i), ips[i], 18888, 18888)); TimeUnit.MILLISECONDS.sleep(10); } Assert.assertTrue(nodeTable.getBucketsCount() > 1); //3 buckets, nearnode's distance is 252, far's is 255, others' are 253 List<Node> closest = nodeTable.getClosestNodes(homeNode.getId()); Assert."<AssertPlaceHolder>"; //the farest node should be excluded }
[*] target: assertTrue(closest.contains(nearNode))
[-] pred: org. junit. Assert. assertTrue ( closest. contains ( nearNode ) )
************************************
[+] input: getUser() { User user = userMapper.selectByUsername("admin"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: getFlagsOutputZero() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final int actual = objectUnderTest.getFlags();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual)
[-] pred: org. junit. Assert. assertEquals ( 0, actual )
************************************
[+] input: Exception { ComponentName cn = new ComponentName(getContext(), TEST_ACTIVITY); initCursor(ITEM_TYPE_APPLICATION, ""); assertTrue(mLoaderCursor.moveToNext());  WorkspaceItemInfo info = Executors.MODEL_EXECUTOR.submit(() -> mLoaderCursor.getAppShortcutInfo( new Intent().setComponent(cn), false  /* allowMissingTarget */, true)) .get(); "<AssertPlaceHolder>"; assertTrue(PackageManagerHelper.isLauncherAppTarget(info.getIntent())); }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: testDelete() { dao.insert(entity);  ExecutionInstanceEntity result = dao.findOne(entity.getId()); Assert.assertNotNull(result);  dao.delete(entity.getId());  result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: width_WidthProvided_SameWidthReturned() { CloseableImageFrame frame = new CloseableImageFrame( new FrameReader.FrameData(100, 200, 0, 0), ImmutableList.of(new MockCloseableImage(100, 200)), 1 );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(100, frame.width())
[-] pred: org. junit. Assert. assertEquals ( 100, frame. width() )
************************************
[+] input: testToStringNodePatternWithIdAndLabelsAndProperties() { ArrayList<ArrayList<Label>> labelSetList = new ArrayList<>(); addLabelSetTo(labelSetList, new String[]{"Person", "Professor"}); addLabelSetTo(labelSetList, new String[]{"Internship"});  HashMap<GqlIdentifier, Value> properties = new HashMap<>(); properties.put(new GqlIdentifier("name"), new GqlString("Olof Morra")); properties.put(new GqlIdentifier("studies"), new GqlString("Data Science"));  NodePattern nodePattern = new NodePattern(new VariableName("x"), labelSetList, properties);  String expectedResult = "(x, {{Person, Professor}, {Internship}}, {(studies: "Data Science"), (name: "Olof Morra")})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: testSubmitJob() { Map<String, String> params = new HashMap<>(); params.put(KubeSpecOptions.WORKER_INSTANCES.name(), "10"); String jobId = this.driver.submitJob("PageRank", params); HugeGraphComputerJob computerJob = this.operation.withName(KubeUtil.crName(jobId)).get(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(computerJob.getSpec().getAlgorithmName(), "PageRank"); Assert.assertEquals(computerJob.getSpec().getJobId(), jobId); }
[*] target: assertNotNull(computerJob)
[-] pred: org. junit. Assert. assertNotNull ( computerJob )
************************************
[+] input: list_NoneMatchNamespace_NoneFound() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "other", "textures", (file) -> file.endsWith(".png"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 0, resources. size ( ) )
************************************
[+] input: testApplyTotalMsgsRateLimits_whenTotalMsgsLimitEnabledAndLimitNotUsed() { when(rateLimitService.isTotalMsgsLimitEnabled()).thenReturn(true); when(rateLimitService.tryConsumeAsMuchAsPossibleTotalMsgs(eq(3L))).thenReturn(3L);  List<ValueWithTopicFilter<ClientSubscription>> list = List.of( newValueWithTopicFilter("c1", 0, "t1"), newValueWithTopicFilter("c2", 1, "t2"), newValueWithTopicFilter("c3", 2, "t3") ); List<ValueWithTopicFilter<ClientSubscription>> result = msgDispatcherService.applyTotalMsgsRateLimits(list);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(list, result)
[-] pred: org. junit. Assert. assertEquals ( list, result )
************************************
[+] input: everyAttendeeIsConsidered() { // Have each person have different events. We should see two options because each person has // split the restricted times. // // Events  :       |--A--|     |--B--| // Day     : |-----------------------------| // Options : |--1--|     |--2--|     |--3--|  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartDuration(TIME_0800AM, DURATION_30_MINUTES), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartDuration(TIME_0900AM, DURATION_30_MINUTES), Arrays.asList(PERSON_B)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A, PERSON_B), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0800AM, false), TimeRange.fromStartEnd(TIME_0830AM, TIME_0900AM, false), TimeRange.fromStartEnd(TIME_0930AM, TimeRange.END_OF_DAY, true));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getCurrentGtidOutputNull() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final String actual = objectUnderTest.getCurrentGtid();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader() { assertNotNull(props.get(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG)); HeaderConverter headerConverter = plugins.newHeaderConverter(config, WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.CURRENT_CLASSLOADER); assertNotNull(headerConverter); assertTrue(headerConverter instanceof TestHeaderConverter); this.headerConverter = (TestHeaderConverter) headerConverter;  // Validate extra configs got passed through to overridden converters assertConverterType(ConverterType.HEADER, this.headerConverter.configs); assertEquals("baz", this.headerConverter.configs.get("extra.config"));  headerConverter = plugins.newHeaderConverter(config, WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.PLUGINS); "<AssertPlaceHolder>"; assertTrue(headerConverter instanceof TestHeaderConverter); this.headerConverter = (TestHeaderConverter) headerConverter;  // Validate extra configs got passed through to overridden converters assertConverterType(ConverterType.HEADER, this.headerConverter.configs); assertEquals("baz", this.headerConverter.configs.get("extra.config")); }
[*] target: assertNotNull(headerConverter)
[-] pred: org. junit. Assert. assertNotNull ( headerConverter )
************************************
[+] input: testSchemaCreate() { boolean schemaCreateFlag = driverSession.schemaCreate("test1234"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(schemaCreateFlag)
[-] pred: org. junit. Assert. assertTrue ( schemaCreateFlag )
************************************
[+] input: Exception { Map<String, String> map = new HashMap<String, String>(); map.put("h1", "1");  PowerMockito.doReturn(401).when(connection).getResponseCode(); PowerMockito.doReturn(new ByteArrayOutputStream()).when(connection).getOutputStream(); PowerMockito.doReturn(new ByteArrayInputStream("{}".getBytes())).when(connection).getInputStream();  InputStream inputStreamBody = Mockito.spy(new ByteArrayInputStream(new byte[]{})); Mockito.doThrow(new IOException()).when(inputStreamBody).close();  HttpClientTest response = new HttpClient("http://localhost") .path("/api") .param(map) .header(map) .timeout(100) .body(inputStreamBody) .post(HttpClientTest.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: canCalculateMixedDiff() { Person p1 = new Person(); p1.setFirstName("John"); p1.setLastName("Doe"); p1.setHobbies("Swimming", "Skiing"); Person p2 = new Person(); p2.setFirstName("John"); p2.setLastName("Smith"); p2.setHobbies("Skiing", "Cinema"); Set<SecondaryIndex> indices = Sets.newHashSet(); DummyIndex firstNameIndex = new DummyIndex(PersonIndexer.firstName(), "firstName"); DummyIndex lastNameIndex = new DummyIndex(PersonIndexer.lastName(), "lastName"); DummyIndex hobbiesIndex = new DummyIndex(PersonIndexer.hobbies(), "hobbies"); indices.add(firstNameIndex); indices.add(lastNameIndex); indices.add(hobbiesIndex); IndexValueDiff diff = IndexingUtils.calculateDiff(indices, p1, p2); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertTrue(diff.isEntryUpdate()); assertFalse(diff.isAdditive()); assertFalse(diff.isSubtractive()); assertTrue(diff.isMixed()); assertFalse(diff.isEmpty()); assertEquals(Collections.emptySet(), diff.getAdditions(firstNameIndex)); assertEquals(Collections.emptySet(), diff.getRemovals(firstNameIndex)); assertFalse(diff.isIndexChanged(firstNameIndex)); assertEquals(Collections.singleton("Smith"), diff.getAdditions(lastNameIndex)); assertEquals(Collections.singleton("Doe"), diff.getRemovals(lastNameIndex)); assertTrue(diff.isIndexChanged(lastNameIndex)); assertEquals(Collections.singleton("Cinema"), diff.getAdditions(hobbiesIndex)); assertEquals(Collections.singleton("Swimming"), diff.getRemovals(hobbiesIndex)); assertTrue(diff.isIndexChanged(hobbiesIndex)); assertEquals(Sets.newHashSet(lastNameIndex, hobbiesIndex), diff.getChangedIndices()); assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertTrue(diff.isEntryUpdate()); }
[*] target: assertNotNull(diff)
[-] pred: org. junit. Assert. assertNotNull ( diff )
************************************
[+] input: testSetOnLeaveResetXP() { assertFalse(s.isOnLeaveResetXP()); s.setOnLeaveResetXP(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(s.isOnLeaveResetXP())
[-] pred: org. junit. Assert. assertTrue ( s. isOnLeaveResetXP() )
************************************
[+] input: Exception { Account account = AccountTool.createAccount(chainId); boolean result = accountStorageService.saveAccount(new AccountPO(account)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { disposeLastModel(); CompositeInfo shellInfo = (CompositeInfo) parseSource( "test", "Test2.java", getTestSource( "public class Test2 extends Shell {", "  public Test2() {", "    setLayout(new RowLayout());", "    Button button = new Button(this, SWT.NONE);", "    button.setLayoutData(new RowData(100, 50));", "  }", "}")); shellInfo.refresh(); ControlInfo buttonInfo = shellInfo.getChildrenControls().get(0); Object button = buttonInfo.getObject(); // call getLayoutData() Object layoutData = ControlSupport.getLayoutData(button); "<AssertPlaceHolder>"; assertEquals("org.eclipse.swt.layout.RowData", layoutData.getClass().getName()); }
[*] target: assertNotNull(layoutData)
[-] pred: org. junit. Assert. assertNotNull ( layoutData )
************************************
[+] input: testToStringNodePatternWithLabel() { ArrayList<ArrayList<Label>> label = new ArrayList<>(); addLabelSetTo(label, new String[]{"Person"}); NodePattern nodePattern = new NodePattern(null, label, null);  String expectedResult = "(nil, {{Person}}, {})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: notEnoughRoom() { // Have one person, but make it so that there is not enough room at any point in the day to // have the meeting. // // Events  : |--A-----| |-----A----| // Day     : |---------------------| // Options :  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartEnd(TIME_0900AM, TimeRange.END_OF_DAY, true), Arrays.asList(PERSON_A)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), DURATION_60_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEquals() { RoleDTO roleDTO = new RoleDTO(1L, "USER"); RoleDTO roleDTO2 = new RoleDTO(1L, "USER");  assertTrue(roleDTO.equals(roleDTO)); assertFalse(roleDTO.equals("WRONG")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(roleDTO.equals(roleDTO2))
[-] pred: org. junit. Assert. assertTrue ( roleDTO. equals ( roleDTO2 ) )
************************************
[+] input: returnNullWithApiVersionMismatch() { final NewTopic newTopic = TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build(); Cluster cluster = createCluster(1); try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(new MockTime(), cluster)) { env.kafkaClient().setNodeApiVersions(NodeApiVersions.create()); env.kafkaClient().prepareResponse(createTopicResponseWithUnsupportedVersion(newTopic)); TopicAdmin admin = new TopicAdmin(null, env.adminClient()); boolean created = admin.createTopic(newTopic); "<AssertPlaceHolder>"; } }
[*] target: assertFalse(created)
[-] pred: org. junit. Assert. assertFalse ( created )
************************************
[+] input: IOException { JsonRowDataSerializationSchema.Builder serBuilder = JsonRowDataSerializationSchema.builder(rowType); JsonRowDataSerializationSchema serializationSchema = serBuilder.setCharset(CHARSET.defaultValue()) .setTimestampFormat(ISO_8601) .build(); byte[] serialize = serializationSchema.serialize(testRowData);  ObjectMapper objectMapper = new ObjectMapper(); JsonNode expectedNode = objectMapper.readTree(testJson); JsonNode actualNode = objectMapper.readTree(new String(serialize)); "<AssertPlaceHolder>"; assertFalse(serializationSchema.skipCurrentRecord(testRowData)); }
[*] target: assertEquals(expectedNode, actualNode)
[-] pred: org. junit. Assert. assertEquals ( expectedNode, actualNode )
************************************
[+] input: shouldParseSingleKeyValuePairString() { final Map<String, String> expectedSinglePairMap = new HashMap<>(); expectedSinglePairMap.put("foo", "bar"); final String singleValueString = "foo=bar"; final Map<String, String> parsedMap = SystemTestUtil.parseConfigs(singleValueString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSinglePairMap, parsedMap)
[-] pred: org. junit. Assert. assertEquals ( expectedSinglePairMap, parsedMap )
************************************
[+] input: testGetSlotsForAParticularCarColorWhenNoCarMatches() { final Map<Integer, Slot> allSlots = new HashMap<>(); final Slot slot1 = new Slot(1); slot1.assignCar(new Car("test-car-no1", "blue")); final Slot slot2 = new Slot(2); final Slot slot3 = new Slot(3); slot3.assignCar(new Car("test-car-no2", "red"));  allSlots.put(1, slot1); allSlots.put(2, slot2); allSlots.put(3, slot3);  when(parkingLot.getSlots()).thenReturn(allSlots); when(parkingLot.getCapacity()).thenReturn(10);  final List<Slot> slots = parkingLotService.getSlotsForColor("white"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, slots.size())
[-] pred: org. junit. Assert. assertEquals ( 0, slots. size ( ) )
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assert."<AssertPlaceHolder>"; Assert.assertNull(((ReturnT<String>) retval).getContent()); Assert.assertEquals(200, retval.getCode()); Assert.assertNull(retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: Exception { File file = Mockito.mock(File.class); PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(file); Mockito.when(file.isAbsolute()).thenReturn(true);  DirFileScanner scanner = Mockito.mock(DirFileScanner.class); PowerMockito.whenNew(DirFileScanner.class).withAnyArguments().thenReturn(scanner); Mockito.when(scanner.scan(Mockito.anyString())).thenReturn(Arrays.asList("f1"));  Artifact artifact = new Artifact(); artifact.setPatternType(PatternType.DIR);  FileUploader fileUploader = new FileUploader() { @Override public void upload(File file, String toFile) { } };  int filesCount = new JobArtifact("u1", "ws", new SaAsyncLogger("uuid", true)) .artifact(artifact) .fileUploader(fileUploader) .toDir("d1") .upload();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, filesCount)
[-] pred: org. junit. Assert. assertEquals ( 1, filesCount )
************************************
[+] input: Exception { Map<String, String> options = ProjectUtils.getOptions(m_testProject.getJavaProject()); "<AssertPlaceHolder>"; // check one option assertEquals("error", options.get("org.eclipse.jdt.core.incompleteClasspath")); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: Exception { String[] args = {"../"};  TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  String userId = "userId"; JsonObject update = new JsonObject(); update.addProperty("test", "123"); update.add("testNull", JsonNull.INSTANCE); JsonObject updateResult = UserMetadata.updateUserMetadata(process.getProcess(), userId, update);  JsonObject newMetadata = UserMetadata.getUserMetadata(process.getProcess(), userId);  "<AssertPlaceHolder>"; assertEquals(1, updateResult.entrySet().size()); assertEquals("123", updateResult.get("test").getAsString()); assert (!updateResult.has("testNull"));  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertEquals(updateResult, newMetadata)
[-] pred: org. junit. Assert. assertEquals ( updateResult, newMetadata )
************************************
[+] input: IOException { String binaryFile = "laptop.bin"; Laptop laptop1 = new Generator().NewLaptop();  Serializer serializer = new Serializer(); serializer.WriteBinaryFile(laptop1, binaryFile);  Laptop laptop2 = serializer.ReadBinaryFile(binaryFile); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(laptop1, laptop2)
[-] pred: org. junit. Assert. assertEquals ( laptop1, laptop2 )
************************************
[+] input: Exception { final String htmlContent = "<html>\n" + "<head><title>foo</title></head><body>\n" + "<a id='a' accesskey='a'>foo</a>\n" + "<a id='b' accesskey='a'>foo</a>\n" + "<form>\n" + "<a id='c' accesskey='c'>foo</a>\n" + "</form></body></html>"; final HtmlPage page = loadPage(htmlContent);  final List<HtmlElement> expectedElements = Arrays.asList(new HtmlElement[] {page.getHtmlElementById("a"), page.getHtmlElementById("b")}); final List<HtmlElement> collectedElements = page.getHtmlElementsByAccessKey('a'); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedElements, collectedElements)
[-] pred: org. junit. Assert. assertEquals ( expectedElements, collectedElements )
************************************
[+] input: Exception { String[] args = {"../"}; TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  ArrayList<String> nonAuthRecipesWhichDontNeedUserIdMapping = new ArrayList<>( List.of("io.supertokens.pluginInterface.jwt.JWTRecipeStorage", ActiveUsersStorage.class.getName())); Reflections reflections = new Reflections("io.supertokens.pluginInterface"); Set<Class<? extends NonAuthRecipeStorage>> classes = reflections.getSubTypesOf(NonAuthRecipeStorage.class); List<String> names = classes.stream().map(Class::getCanonicalName).collect(Collectors.toList()); List<String> classNames = new ArrayList<>(); for (String name : names) { if (!name.contains("SQLStorage")) { classNames.add(name); } } String externalId = "externalId"; for (String className : classNames) { // Create a User AuthRecipeUserInfo user = EmailPassword.signUp(process.main, "test@example.com", "testPass123");  // create a mapping with the user UserIdMapping.createUserIdMapping(process.main, user.getSupertokensUserId(), externalId, null, false);  // create entry in nonAuth table with externalId StorageLayer.getStorage(process.main) .addInfoToNonAuthRecipesBasedOnUserId(TenantIdentifier.BASE_TENANT, className, externalId);  // try to delete UserIdMapping String errorMessage = null; try { UserIdMapping.deleteUserIdMapping(process.main, user.getSupertokensUserId(), UserIdType.SUPERTOKENS, false); } catch (ServletException e) { errorMessage = e.getRootCause().getMessage(); } if (!nonAuthRecipesWhichDontNeedUserIdMapping.contains(className)) { "<AssertPlaceHolder>"; assertTrue(errorMessage.contains("UserId is already in use")); } // delete user data AuthRecipe.deleteUser(process.main, user.getSupertokensUserId()); }  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(errorMessage)
[-] pred: org. junit. Assert. assertNotNull ( errorMessage )
************************************
[+] input: construct_EmptyWidthArea_ConstructedCorrectly() { Area rect = new Area(0, 0, 0, 10); assertFalse(rect.iterator().hasNext()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, rect.size())
[-] pred: org. junit. Assert. assertEquals ( 0, rect. size ( ) )
************************************
[+] input: shouldInstantiateAndConfigureConnectRestExtension() { props.put(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG, TestConnectRestExtension.class.getName()); createConfig();  List<ConnectRestExtension> connectRestExtensions = plugins.newPlugins(config.getList(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG), config, ConnectRestExtension.class); "<AssertPlaceHolder>"; assertEquals("One Rest Extension expected", 1, connectRestExtensions.size()); assertNotNull(connectRestExtensions.get(0)); assertTrue("Should be instance of TestConnectRestExtension", connectRestExtensions.get(0) instanceof TestConnectRestExtension); assertNotNull(((TestConnectRestExtension) connectRestExtensions.get(0)).configs); assertEquals(config.originals(), ((TestConnectRestExtension) connectRestExtensions.get(0)).configs); }
[*] target: assertNotNull(connectRestExtensions)
[-] pred: org. junit. Assert. assertNotNull ( connectRestExtensions )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  JSONObject requiredObject = new JSONObject(); requiredObject.put("username", "u").put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{"mdm":{" + ""override": true," + ""params":{" + ""param-string": "string-param"," + ""param-bool": true," + ""param-int": 123" + "}}}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNull(result.supportUrl); Assert.assertNull(result.logoDark); Assert.assertNull(result.logoLight); Assert.assertEquals(0, result.workContacts.size()); Assert.assertNotNull(result.mdm); Assert.assertTrue(result.mdm.override); Assert.assertNotNull(result.mdm.parameters); Assert.assertEquals(3, result.mdm.parameters.size());  Assert.assertTrue(result.mdm.parameters.containsKey("param-string")); Assert.assertEquals("string-param", result.mdm.parameters.get("param-string")); Assert.assertTrue(result.mdm.parameters.containsKey("param-bool")); Assert.assertEquals(true, result.mdm.parameters.get("param-bool")); Assert.assertTrue(result.mdm.parameters.containsKey("param-int")); Assert.assertEquals(123, result.mdm.parameters.get("param-int")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testParseJson() { String json = "[\n" + "{\n" + ""id": "Source__TableSourceScan(table=[[default_catalog__default_database__nexmark]]__fi.numRecordsOutPerSecond",\n" + ""min": 5003.2,\n" + ""max": 5003.2,\n" + ""avg": 5003.2,\n" + ""sum": 10006.3\n" + "}\n" + "]";  TpsMetric tps = TpsMetric.fromJson(json); TpsMetric expected = new TpsMetric( "Source__TableSourceScan(table=[[default_catalog__default_database__nexmark]]__fi.numRecordsOutPerSecond", 5003.2, 5003.2, 5003.2, 10006.3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tps)
[-] pred: org. junit. Assert. assertEquals ( expected, tps )
************************************
[+] input: testServicesEmpty() { Collection<Service> services = collector.services(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, services.size())
[-] pred: org. junit. Assert. assertEquals ( 0, services. size ( ) )
************************************
[+] input: NoSuchAlgorithmException { byte[] seed = { 1, 2, 3, 4, 5, 6, 7, 8 }; // String str = "e3619321c1a937c46a0d8bd1dac39f93b27d4458"; // canal // passwd String str = SecurityUtil.scrambleGenPass("canal".getBytes()); byte[] client = SecurityUtil.scramble411("canal".getBytes(), seed); boolean check = SecurityUtil.scrambleServerAuth(client, SecurityUtil.hexStr2Bytes(str), seed); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: Exception { String[] args = {"../"};  TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  // format for Firebase SCrypt hashes stored in supertokens. // $f_scrypt$passwordHash$salt$m=memory$r=rounds$s=saltSeparator  String passwordHash = "passwordHash"; String salt = "salt"; int memory = 14; int rounds = 8; String saltSeparator = "Bw==";  // when password hash is in the regular format { String validPasswordHash = "$" + ParsedFirebaseSCryptResponse.FIREBASE_SCRYPT_PREFIX + "$" + passwordHash + "$" + salt + "$" + "m=" + memory + "$" + "r=" + rounds + "$" + "s=" + saltSeparator;  ParsedFirebaseSCryptResponse response = ParsedFirebaseSCryptResponse.fromHashString(validPasswordHash); assertNotNull(response);  assertEquals(passwordHash, response.passwordHash); assertEquals(salt, response.salt); assertEquals(memory, response.memCost); assertEquals(saltSeparator, response.saltSeparator); }  // with memory, rounds and saltSeparator switched around { String validPasswordHash = "$" + ParsedFirebaseSCryptResponse.FIREBASE_SCRYPT_PREFIX + "$" + passwordHash + "$" + salt + "$" + "s=" + saltSeparator + "$" + "m=" + memory + "$" + "r=" + rounds;  ParsedFirebaseSCryptResponse response = ParsedFirebaseSCryptResponse.fromHashString(validPasswordHash); "<AssertPlaceHolder>";  assertEquals(passwordHash, response.passwordHash); assertEquals(salt, response.salt); assertEquals(memory, response.memCost); assertEquals(saltSeparator, response.saltSeparator); }  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: Exception { LarkyScriptEngineFactory factory = new LarkyScriptEngineFactory(); LarkyScriptEngine engine = (LarkyScriptEngine) factory.getScriptEngine(); ScriptContext context = new SimpleScriptContext(); StringWriter writer = new StringWriter(); StringWriter errorWriter = new StringWriter(); context.setWriter(writer); context.setErrorWriter(errorWriter);  context.setAttribute("message", "Hello World!!!!!", ScriptContext.ENGINE_SCOPE); engine.setContext(context); String script = "print(message)"; LarkyCompiledScript instance = (LarkyCompiledScript) engine.compile(script); Object expResult = "Hello World!!!!!"; instance.eval(context); Object result = writer.toString().trim(); "<AssertPlaceHolder>"; writer.close(); errorWriter.close(); }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: testNorthEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.compactNine(population, 5);  Chromosome exepcted_individual = population.get(2); Chromosome returned_individual = neighbors.get(6);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assert."<AssertPlaceHolder>"; Assert.assertNull(((ReturnT<String>) retval).getContent()); Assert.assertEquals(500, retval.getCode()); Assert.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: DecodingException { AlfenSignatureVerifier verifier = new AlfenSignatureVerifier(); AlfenReader reader = new AlfenReader(); AlfenSignature signature = reader.parseString(ALFEN_TEST_STRING); String publicKey = signature.getPublicKey();  boolean result = verifier.verify(EncodingType.base32Decode(publicKey), signature.getSignature(), signature.getDataset()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: given_validUserAndRoleIds_when_addRole_returnUser() { User userDataForTest = getUserTestData(1L, "andrea", "Andrea", "Giassi", "andrea.test@gmail.com", "+3531122334455");  given(userRepository.findById(1L)).willReturn(Optional.of(userDataForTest));  Role roleAdmin = new Role(Role.ADMINISTRATOR, "Administrator");  given(roleRepository.findById(2L)).willReturn(Optional.of(roleAdmin));  User user = userService.addRole(1L, 2L);  "<AssertPlaceHolder>";  // check the new added role Set<Role> roleSet = user.getRoles();  assertNotNull(roleSet); assertEquals(2, roleSet.size()); assertTrue(roleSet.contains(roleAdmin)); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: keyPairWithPasswd() { try { SM2Util instance = new SM2Util(); KeyPair keyPair = instance.generatekeyPair(); String privateKeyPem = SM2Util.pemFrom(keyPair.getPrivate(), passwd); Files.write(Paths.get(encryptedprivFileName), privateKeyPem.getBytes()); PrivateKey key = SM2Util.loadPrivFromFile(encryptedprivFileName, passwd); Assert."<AssertPlaceHolder>"; Assert.assertEquals(keyEqualHint, keyPair.getPrivate(), key); } catch (Exception e) { e.printStackTrace(); Assert.fail(exceptionHappened); } }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
[+] input: givenSessionsLimitReached_whenCheckSessionsLimit_thenFailure() { rateLimitService.setSessionsLimit(1); when(rateLimitCacheService.incrementSessionCount()).thenReturn(2L);  boolean result = rateLimitService.checkSessionsLimit(CLIENT_ID); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { CategoryInfo category = new CategoryInfo(); assertFalse(category.isOpen()); category.setOpen(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(category.isOpen())
[-] pred: org. junit. Assert. assertTrue ( category. isOpen() )
************************************
[+] input: canCalculateEntryRemovalDiff() { Person johnDoe = createJohnDoe(); Set<SecondaryIndex> indices = Sets.newHashSet(); DummyIndex firstNameIndex = new DummyIndex(PersonIndexer.firstName(), "firstName"); DummyIndex lastNameIndex = new DummyIndex(PersonIndexer.lastName(), "lastName"); DummyIndex favoriteColorIndex = new DummyIndex(PersonIndexer.favoriteColor(), "favoriteColor"); DummyIndex hobbiesIndex = new DummyIndex(PersonIndexer.hobbies(), "hobbies"); DummyIndex petsIndex = new DummyIndex(PersonIndexer.pets(), "pets"); indices.add(firstNameIndex); indices.add(lastNameIndex); indices.add(favoriteColorIndex); indices.add(hobbiesIndex); indices.add(petsIndex); // simulate the deletion of John Doe IndexValueDiff diff = IndexingUtils.calculateDiff(indices, johnDoe, null); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertTrue(diff.isEntryRemoval()); assertFalse(diff.isEntryUpdate()); assertFalse(diff.isAdditive()); assertTrue(diff.isSubtractive()); assertFalse(diff.isMixed()); assertFalse(diff.isEmpty()); assertEquals(Sets.newHashSet(firstNameIndex, lastNameIndex, hobbiesIndex), diff.getChangedIndices());  assertEquals(Collections.emptySet(), diff.getAdditions(firstNameIndex)); assertEquals(Sets.newHashSet("John"), diff.getRemovals(firstNameIndex));  assertEquals(Collections.emptySet(), diff.getAdditions(lastNameIndex)); assertEquals(Sets.newHashSet("Doe"), diff.getRemovals(lastNameIndex));  assertEquals(Collections.emptySet(), diff.getAdditions(hobbiesIndex)); assertEquals(Sets.newHashSet("Swimming", "Skiing"), diff.getRemovals(hobbiesIndex)); }
[*] target: assertNotNull(diff)
[-] pred: org. junit. Assert. assertNotNull ( diff )
************************************
[+] input: emptyListShouldNotFail() { Object theException = null; try { InsertManager manager = new InsertManager( new MockDataSource(), new ValidationUtils(16, Duration.ofDays(14), Duration.ofHours(2).toMillis())); manager.insertIntoDatabase(new ArrayList<>(), null, null, null, false); } catch (Exception ex) { theException = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNull(theException)
[-] pred: org. junit. Assert. assertNull ( theException )
************************************
[+] input: getUserError() { mockServerReturnObject(USER_MIKE, 0, ERROR_CODE); User user = userService.getUser(Long100); "<AssertPlaceHolder>"; assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: givenApplicationClientsLimitReached_whenCheckApplicationClientsLimitForExistingClient_thenSuccess() { rateLimitService.setApplicationClientsLimit(1); when(rateLimitCacheService.incrementApplicationClientsCount()).thenReturn(2L);  SessionInfo sessionInfo = SessionInfo.builder().clientInfo(ClientInfo.builder().type(ClientType.APPLICATION).clientId(CLIENT_ID).build()).cleanStart(false).build(); ClientSessionInfo clientSessionInfo = ClientSessionInfo.builder().type(ClientType.APPLICATION).cleanStart(false).build(); when(clientSessionService.getClientSessionInfo(CLIENT_ID)).thenReturn(clientSessionInfo);  boolean result = rateLimitService.checkApplicationClientsLimit(sessionInfo); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSendMessage_toUser_failed() { // mock get token String getTokenUrl = String.format(this.getTokenUrl, corpid, corpsecret); WeComGetTokenResult weComGetTokenResult = MockWeComGetTokenResultFactory.create(); ResponseEntity<WeComGetTokenResult> weComGetTokenResultResponseEntity = new ResponseEntity(weComGetTokenResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(getTokenUrl), Mockito.eq(HttpMethod.GET), Mockito.any(), Mockito.any(Class.class))).willReturn(weComGetTokenResultResponseEntity);  // mock send msg to user String url = String.format(sendToUserUrl, weComGetTokenResult.getAccessToken()); WeComBaseResult weComBaseResult = MockWeComBaseResultFactory.create(1, "invalid token"); ResponseEntity<WeComBaseResult> weComBaseResultResponseEntity = new ResponseEntity(weComBaseResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(url), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.any(Class.class))).willReturn(weComBaseResultResponseEntity);  List<String> weComIds = ImmutableList.of("user1", "user2"); String msg = "test msg"; boolean result = weComSender.sendMessageToUsers(weComIds, msg);  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { IFile file = getFileSrc("test/messages.properties"); // prepare file in UTF-8 with Russian characters String key = "key"; String value = "" + (char) 0x410 + (char) 0x411 + (char) 0x412; String newValue = "" + (char) 0x430 + (char) 0x431 + (char) 0x432; { String content = key + "=" + value; setFileContent(file, content.getBytes("UTF-8")); file.setCharset("UTF-8", null); } // use BundleInfo, session #1 // check for initial value { BundleInfo bundle = BundleInfo.createBundle( StandardPropertiesAccessor.INSTANCE, "test.messages", LocaleInfo.DEFAULT, new IFile[]{file}); assertNotNull(bundle); assertEquals(value, bundle.getValue(key)); // set new value bundle.setValue(key, newValue); bundle.save(""); assertEquals("UTF-8", file.getCharset()); } // use BundleInfo, session #2 // check for new value { BundleInfo bundle = BundleInfo.createBundle( StandardPropertiesAccessor.INSTANCE, "test.messages", LocaleInfo.DEFAULT, new IFile[]{file}); assertNotNull(bundle); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(newValue, bundle.getValue(key))
[-] pred: org. junit. Assert. assertEquals ( newValue, bundle. getValue( key ) )
************************************
[+] input: NoSuchAlgorithmException { String message = "1"; byte[] messageHash = SHA256.hash(message);  String actualHashHex = "6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b"; byte[] actualHash = ByteHelper.hexStringToByteArray(actualHashHex);  boolean valid = Arrays.equals(messageHash, actualHash); "<AssertPlaceHolder>";  assertEquals(messageHash.length, 32); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: testValueOfNull() { // test：when passValue is null ParamTracking paramTracking1 = ParamTracking.build( "param", "source", ScopeTypeEnum.REQUEST, null, String.class, "converter" );  FieldSerializeTracking fieldSerializeTracking1 = new FieldSerializeTracking(); String serializedValue1 = fieldSerializeTracking1.valueSerialize(paramTracking1); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(serializedValue1)
[-] pred: org. junit. Assert. assertNull ( serializedValue1 )
************************************
[+] input: DecodingException { SMLReader smlReader = new SMLReader(); SMLSignature signature = smlReader.parsePayloadData(EncodingType.BASE64.decode(SML_DATA_FULL_NEW)); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(signature.getProvidedSignature()); Assert.assertEquals(2918, signature.getMeterPositionAsLong()); Assert.assertEquals("09 01 45 4D 48 00 00 7A C6 62", Utils.toFormattedHex(signature.getServerId())); Assert.assertEquals(65, new BigInteger(Utils.reverseByteOrder(signature.getPagination())).intValue()); Assert.assertEquals(340285, new BigInteger(Utils.reverseByteOrder(signature.getSecondsIndex())).intValue()); Assert.assertEquals(10, new BigInteger(signature.getBytesLog()).intValue()); Assert.assertEquals(8, new BigInteger(new byte[]{signature.getStatus()}).intValue());  LocalDateTime dateTime = LocalDateTime.of(2018, Month.AUGUST, 28, 18, 57, 37); OffsetDateTime offsetDateTime = OffsetDateTime.of(dateTime, ZoneOffset.of("+02:00")); Assert.assertEquals(offsetDateTime, signature.getTimestampAsDate());   }
[*] target: assertNotNull(signature)
[-] pred: org. junit. Assert. assertNotNull ( signature )
************************************
[+] input: testEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.linearFive(population, 5);  Chromosome exepcted_individual = population.get(6); Chromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testNotNullLocation() { OpenWeatherMapWeather weather = new OpenWeatherMapWeather(context); assertNotNull(weather.getLocation()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(weather.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( weather. isEmpty() )
************************************
[+] input: shouldNotForwardCleanEntryOnEviction() { final ThreadCache cache = new ThreadCache(logContext, 0, new MockStreamsMetrics(new Metrics())); final List<ThreadCache.DirtyEntry> received = new ArrayList<>(); cache.addDirtyEntryFlushListener(namespace, new ThreadCache.DirtyEntryFlushListener() { @Override public void apply(final List<ThreadCache.DirtyEntry> dirty) { received.addAll(dirty); } }); cache.put(namespace, Bytes.wrap(new byte[]{1}), cleanEntry(new byte[]{0})); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, received.size())
[-] pred: org. junit. Assert. assertEquals ( 0, received. size ( ) )
************************************
[+] input: testConfirmToString() { String res = new OverrideToString().toString(); String diff = res + " a different string";  OverrideToString obj = mock(OverrideToString.class); when(obj.toString()).thenReturn(diff);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(diff, obj.toString())
[-] pred: org. junit. Assert. assertEquals ( diff, obj. toString ( ) )
************************************
[+] input: testDoubleInit() { int n = ShutdownHookHandler.getInstance().getNumberOfAllExistingHooks();  Runtime.getRuntime().addShutdownHook(new Thread(){});  //this should remove the above hook thread ShutdownHookHandler.getInstance().initHandler();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(n, ShutdownHookHandler.getInstance().getNumberOfAllExistingHooks())
[-] pred: org. junit. Assert. assertEquals ( n, ShutdownHookHandler.getInstance ( ). getNumberOfAllExistingHooks() )
************************************
[+] input: IOException { try (StringWriter writer = new StringWriter()) { String expected = "1,apple,10,9.99\n2,orange,5,4.99"; CsvWriter csvWriter = new CsvWriter(writer); csvWriter.addField("1"); csvWriter.addField("apple"); csvWriter.addField("10"); csvWriter.addField("9.99"); csvWriter.addLine(); csvWriter.addField("2"); csvWriter.addField("orange"); csvWriter.addField("5"); csvWriter.addField("4.99"); csvWriter.addLine(); String result = writer.toString(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testEmptyList() { DynamicArray<Integer> list = new DynamicArray<>(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: Exception { Transaction txn = new Transaction(null, true);  context.checking(new Expectations() {{ oneOf(settingsManager).getSettings(txn, SETTINGS_NAMESPACE); will(returnValue(pairedSettings)); }});  MailboxProperties properties = manager.getOwnMailboxProperties(txn); "<AssertPlaceHolder>"; assertEquals(onion, properties.getOnion()); assertEquals(token, properties.getAuthToken()); assertEquals(serverSupports, properties.getServerSupports()); assertTrue(properties.isOwner()); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: testMetaFields() { Map<MetaField, String> formatMap = new HashMap<>(); formatMap.put(MetaField.PROCESS_TIME, "AS PROCTIME()"); formatMap.put(MetaField.TABLE_NAME, "STRING METADATA FROM 'meta.table_name' VIRTUAL"); formatMap.put(MetaField.DATABASE_NAME, "STRING METADATA FROM 'meta.database_name' VIRTUAL"); formatMap.put(MetaField.SCHEMA_NAME, "STRING METADATA FROM 'meta.schema_name' VIRTUAL"); formatMap.put(MetaField.OP_TS, "TIMESTAMP_LTZ(3) METADATA FROM 'meta.op_ts' VIRTUAL"); formatMap.put(MetaField.OP_TYPE, "STRING METADATA FROM 'meta.op_type' VIRTUAL"); formatMap.put(MetaField.DATA, "STRING METADATA FROM 'meta.data' VIRTUAL"); formatMap.put(MetaField.DATA_CANAL, "STRING METADATA FROM 'meta.data_canal' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES, "BYTES METADATA FROM 'meta.data' VIRTUAL"); formatMap.put(MetaField.DATA_BYTES_CANAL, "BYTES METADATA FROM 'meta.data_canal' VIRTUAL"); formatMap.put(MetaField.IS_DDL, "BOOLEAN METADATA FROM 'meta.is_ddl' VIRTUAL"); formatMap.put(MetaField.TS, "TIMESTAMP_LTZ(3) METADATA FROM 'meta.ts' VIRTUAL"); formatMap.put(MetaField.SQL_TYPE, "MAP<STRING, INT> METADATA FROM 'meta.sql_type' VIRTUAL"); formatMap.put(MetaField.ORACLE_TYPE, "MAP<STRING, STRING> METADATA FROM 'meta.oracle_type' VIRTUAL"); formatMap.put(MetaField.PK_NAMES, "ARRAY<STRING> METADATA FROM 'meta.pk_names' VIRTUAL"); OracleExtractNode node = getTestObject(); boolean formatEquals = true; for (MetaField metaField : node.supportedMetaFields()) { formatEquals = node.format(metaField).equals(formatMap.get(metaField)); if (!formatEquals) { break; } } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(formatEquals)
[-] pred: org. junit. Assert. assertTrue ( formatEquals )
************************************
[+] input: testMapConstantLabelWithStringValueSucceeds() { LabelDescriptor actualLabel = MetricTranslator.mapAttribute(stringKey("label1"), CUSTOM_PREFIX); LabelDescriptor expectedLabel = LabelDescriptor.newBuilder().setKey("label1").setValueType(ValueType.STRING).build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLabel, actualLabel)
[-] pred: org. junit. Assert. assertEquals ( expectedLabel, actualLabel )
************************************
[+] input: testToStringNodePatternWithLabelDisjunction() { ArrayList<ArrayList<Label>> labelSetList = new ArrayList<>(); addLabelSetTo(labelSetList, new String[]{"Person", "Professor"}); addLabelSetTo(labelSetList, new String[]{"Internship"}); NodePattern nodePattern = new NodePattern(null, labelSetList, null);  String expectedResult = "(nil, {{Person, Professor}, {Internship}}, {})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: Exception { File trustStoreFile = File.createTempFile("truststore", ".jks"); Map<String, Object> serverSslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, "server"); SslFactory sslFactory = new SslFactory(Mode.SERVER); sslFactory.configure(serverSslConfig); //host and port are hints SSLEngine engine = sslFactory.createSslEngine("localhost", 0); "<AssertPlaceHolder>"; String[] expectedProtocols = {"TLSv1.2"}; assertArrayEquals(expectedProtocols, engine.getEnabledProtocols()); assertEquals(false, engine.getUseClientMode()); }
[*] target: assertNotNull(engine)
[-] pred: org. junit. Assert. assertNotNull ( engine )
************************************
[+] input: DecodingException { AlfenSignatureVerifier verifier = new AlfenSignatureVerifier(); AlfenReader reader = new AlfenReader(); AlfenSignature signature = reader.parseString(ALFEN_TEST_STRING_2); boolean result = verifier.verify(EncodingType.base32Decode(signature.getPublicKey()), signature.getSignature(), signature.getDataset()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testTotalMsgsBucketConfiguration() { TotalMsgsRateLimitsConfiguration config = new TotalMsgsRateLimitsConfiguration(); config.setEnabled(true); config.setConfig("100:60,200:120");  BucketConfiguration bucketConfig = config.totalMsgsBucketConfiguration();  "<AssertPlaceHolder>"; assertEquals(2, bucketConfig.getBandwidths().length);  Bandwidth bw1 = bucketConfig.getBandwidths()[0]; assertEquals(100, bw1.getCapacity()); assertEquals(TimeUnit.SECONDS.toNanos(60), bw1.getRefillPeriodNanos());  Bandwidth bw2 = bucketConfig.getBandwidths()[1]; assertEquals(200, bw2.getCapacity()); assertEquals(TimeUnit.SECONDS.toNanos(120), bw2.getRefillPeriodNanos()); }
[*] target: assertNotNull(bucketConfig)
[-] pred: org. junit. Assert. assertNotNull ( bucketConfig )
************************************
[+] input: given_existing_username_when_getUserByUsername_return_user() { User userDataForTest = getUserTestData(1L, "andrea", "Andrea", "Giassi", "andrea.test@gmail.com", "+3531122334455");  given(userRepository.findByUsername("andrea")).willReturn(userDataForTest);  User user = userService.getUserByUsername("andrea");  "<AssertPlaceHolder>"; assertEquals(Long.valueOf(1L), user.getId()); assertEquals("andrea", user.getUsername()); assertEquals("Andrea", user.getName()); assertEquals("Giassi", user.getSurname()); assertEquals("andrea.test@gmail.com", user.getContact().getEmail()); assertEquals("+3531122334455", user.getContact().getPhone()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: testToStringEdgePatternWithLabel() { ArrayList<ArrayList<Label>> label = new ArrayList<>(); addLabelSetTo(label, new String[]{"Does"}); EdgePattern edgePattern = new EdgePattern(null, label, null, Direction.LEFT_TO_RIGHT, 1);  String expectedResult = "(->, nil, {{Does}}, {}, (1, 1))"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, edgePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, edgePattern. toString ( ) )
************************************
[+] input: Exception { final String html = "<html>\n" + "<head>\n" + "<base href='" + URL_SECOND + "'>\n" + "<base href='" + URL_THIRD + "'>\n" + "</head>\n" + "<body>\n" + "  <a href='somepage.html'>\n" + "</body></html>";  final WebClient webClient = getWebClient(); final List<String> collectedIncorrectness = new ArrayList<>(); final IncorrectnessListener listener = new IncorrectnessListener() { @Override public void notify(final String message, final Object origin) { collectedIncorrectness.add(message); } }; webClient.setIncorrectnessListener(listener);  final MockWebConnection webConnection = new MockWebConnection(); webClient.setWebConnection(webConnection); webConnection.setDefaultResponse(html); final HtmlPage page = webClient.getPage(URL_FIRST); page.getAnchors().get(0).click();  final String[] expectedIncorrectness = {"Multiple 'base' detected, only the first is used.", "Multiple 'base' detected, only the first is used."}; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedIncorrectness, collectedIncorrectness)
[-] pred: org. junit. Assert. assertEquals ( expectedIncorrectness, collectedIncorrectness )
************************************
[+] input: test_atom_content_transformation_to_byte_array_and_back() { LedgerHeader ledgerHeader = LedgerHeader.genesis(HashUtils.zero256(), null); VerifiedLedgerHeaderAndProof proof = new VerifiedLedgerHeaderAndProof( new BFTHeader(View.of(1), HashUtils.random256(), ledgerHeader), new BFTHeader(View.of(1), HashUtils.random256(), ledgerHeader), 1L, HashUtils.random256(), ledgerHeader, new TimestampedECDSASignatures() ); StoredCommittedCommand committedCommand = new StoredCommittedCommand( new Command(new byte[] {0, 1, 2, 3}), proof );  byte[] serializedCommand = commandToBinaryConverter.toLedgerEntryContent(committedCommand); StoredCommittedCommand deserializedCommand = commandToBinaryConverter.toCommand(serializedCommand); "<AssertPlaceHolder>"; }
[*] target: assertEquals(committedCommand, deserializedCommand)
[-] pred: org. junit. Assert. assertEquals ( committedCommand, deserializedCommand )
************************************
[+] input: testMostNorthWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 0);  Chromosome exepcted_individual = population.get(15); Chromosome returned_individual = neighbors.get(4);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testGetCommit() { Changeset c = createCommand().getChangeset("3", null);  "<AssertPlaceHolder>"; assertEquals("3", c.getId()); assertEquals("remove b and modified a", c.getDescription()); checkDate(c.getDate()); assertEquals("perfect", c.getAuthor().getName()); assertNull("douglas.adams@hitchhiker.com", c.getAuthor().getMail()); SvnModificationsCommand modificationsCommand = new SvnModificationsCommand(createContext()); Modifications modifications = modificationsCommand.getModifications("3");  assertNotNull(modifications); assertEquals(1, modifications.getModified().size()); assertEquals(1, modifications.getRemoved().size()); assertTrue("added list should be empty", modifications.getAdded().isEmpty()); assertEquals("a.txt", modifications.getModified().get(0).getPath()); assertEquals("b.txt", modifications.getRemoved().get(0).getPath()); }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
[+] input: IOException { String hdbtiSample = org.apache.commons.io.IOUtils .toString(XSKHDBTIParserTest.class.getResourceAsStream("/multipleTableDeclarations.hdbti"), StandardCharsets.UTF_8); XSKHDBTIParser xskhdbtiParser = new XSKHDBTIParser();  try { xskhdbtiParser.parse("/test/xsk/com/sap/duplicateKeys.hdbti", hdbtiSample); } catch (DuplicateFieldNameException duplicateFieldNameException) { "<AssertPlaceHolder>"; } catch (Exception e) { fail(); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: testNoMatchTransitWithResult() { Map<States, State<States, Events>> stateMap = new HashMap<>(); Transition<States, Events> newTransition = new TransitionImpl<>(); newTransition.setSource(StateHelper.getState(stateMap,States.STATE1)); newTransition.setTarget(StateHelper.getState(stateMap,States.STATE2)); newTransition.setEvent(Events.EVENT1); newTransition.setType(TransitionType.EXTERNAL); newTransition.setCondition(context -> false); Object result = newTransition.transitWithResult(new Object(), true); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: load_SearchRetrievesPackFloorInSame_CorrectResourcesFoundInPacks() { OrderedResourceRepository repository = makeMockRepository( Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta", "textures/bat_efgh.png" ) );  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png"), ResourceLocation.parse("textures/bat_efgh.png") ); assertTrue(pack.isPresent()); assertTrue(pack.get().resource(ResourceLocation.parse("zombie.png")).isPresent()); assertFalse(pack.get().resource(ResourceLocation.parse("zombie2.png")).isPresent()); assertFalse(resourceRepository.highestPackWith(ResourceLocation.parse("dummy")).isPresent());  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: justEnoughRoom() { // Have one person, but make it so that there is just enough room at one point in the day to // have the meeting. // // Events  : |--A--|     |----A----| // Day     : |---------------------| // Options :       |-----|  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartEnd(TIME_0900AM, TimeRange.END_OF_DAY, true), Arrays.asList(PERSON_A)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartDuration(TIME_0830AM, DURATION_30_MINUTES));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetNoMatchClasses() { MethodCoverageImpl m = new MethodCoverageImpl("doit", "()V", null); m.increment(CounterImpl.COUNTER_1_0, CounterImpl.COUNTER_0_0, 1); addClass(1, true, "Sample1", null, m);  m = new MethodCoverageImpl("doit", "()V", null); m.increment(CounterImpl.COUNTER_1_0, CounterImpl.COUNTER_0_0, 2); addClass(2, true, "Sample2", null, m);  m = new MethodCoverageImpl("doit", "()V", null); m.increment(CounterImpl.COUNTER_1_0, CounterImpl.COUNTER_0_0, 3); addClass(3, false, "Sample3", null, m);  final Set<String> actual = getNames(coverageBuilder.getNoMatchClasses()); final Set<String> expected = new HashSet<String>(Arrays.asList( "Sample1", "Sample2"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: load_SilencedInvalidMetadataDuringRead_LoadsValidTextures() { OrderedResourceRepository repository = makeMockRepository(Set.of( "textures/bat.png", "textures/bat.png.moremcmeta", "textures/creeper.png", "textures/zombie.png", "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta" ));  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { if (metadataLocation.getPath().contains("creeper")) { throw new InvalidMetadataException("Dummy exception", new Exception(), true); }  return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures"); "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/zombie.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size() )
************************************
[+] input: getRenameTableResultOutputNull() {  // Arrange final DdlResult objectUnderTest = new DdlResult();  // Act final DdlResult actual = objectUnderTest.getRenameTableResult();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: IOException { BrowseCommandRequest request = new BrowseCommandRequest();  request.setRecursive(true);  BrowserResult result = new HgBrowseCommand(cmdContext).getBrowserResult(request);  "<AssertPlaceHolder>";  FileObject root = result.getFile(); Collection<FileObject> foList = root.getChildren();  assertNotNull(foList); assertFalse(foList.isEmpty()); assertEquals(4, foList.size());  FileObject c = getFileObject(foList, "c"); assertTrue(c.isDirectory()); assertEquals(2, c.getChildren().size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { ActivityRuleConfig config = new ActivityRuleConfig(); config.setActivityId(1L); config.setConfigKey("abc"); config.setConfigValue("1,2,3");  ActivityRule activityRule = ActivityRuleRegistrar.parseRule(config); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(activityRule)
[-] pred: org. junit. Assert. assertNotNull ( activityRule )
************************************
[+] input: givenMaxAliasesReached_whenGetNextTopicAlias_thenDoNotReturnNewAlias() { topicAliasCtx = new TopicAliasCtx(true, 2, new ConcurrentHashMap<>(Map.of(1, "1", 2, "2")), new ConcurrentHashMap<>());  int topicAlias = topicAliasCtx.getNextTopicAlias("test/topic/1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, topicAlias)
[-] pred: org. junit. Assert. assertEquals ( 0, topicAlias )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.getParameterAsString(anyString())).thenReturn("real"); List<MetaDataError> errors = new ArrayList<>(); final ColumnSetPrecondition precondition = new ColumnSetPrecondition(generateDummyInputPort(errors), ColumnSetPrecondition.getColumnsByParameter(handler, "some_key")); final ExampleSetMetaData emd = FromTableMetaDataConverter.convert(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); precondition.check(emd); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: Exception { final String html = "<html><head>\n" + "  <script src='script.js'></script>\n" + "</head>\n" + "<body>\n" + "</body>\n" + "</html>";  final WebClient webClient = getWebClient();  final List<String> collectedIncorrectness = new ArrayList<>(); final IncorrectnessListener listener = new IncorrectnessListener() { @Override public void notify(final String message, final Object origin) { collectedIncorrectness.add(message); } }; webClient.setIncorrectnessListener(listener);  final MockWebConnection webConnection = new MockWebConnection(); webClient.setWebConnection(webConnection); webConnection.setResponse(URL_FIRST, html); webConnection.setDefaultResponse("alert('Hello');", "application/x-javascript"); webClient.getPage(URL_FIRST);  final String[] expectedIncorrectness = { "Obsolete content type encountered: 'application/x-javascript' for " + "remotely loaded JavaScript element at 'http://localhost:22222/script.js'." }; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedIncorrectness, collectedIncorrectness)
[-] pred: org. junit. Assert. assertEquals ( expectedIncorrectness, collectedIncorrectness )
************************************
[+] input: runTest() { final String key = "test key"; final String plainText = "hello world input"; final String encrypted = ARIA.encrypt(plainText, key); final String decrypted = ARIA.decrypt(encrypted, key); "<AssertPlaceHolder>"; }
[*] target: assertEquals(plainText, decrypted)
[-] pred: org. junit. Assert. assertEquals ( plainText, decrypted )
************************************
[+] input: canCreateEmtpyUpdate() { MutableIndexValueDiff diff = new MutableIndexValueDiff(new Object(), new Object()); assertNotNull(diff); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertTrue(diff.isEntryUpdate()); }
[*] target: assertTrue(diff.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( diff. isEmpty() )
************************************
[+] input: testGetCurrentDirectory() {  JFileChooser chooser = new MockJFileChooser(); File dir = chooser.getCurrentDirectory();  Assert."<AssertPlaceHolder>"; Assert.assertTrue(dir instanceof MockFile); }
[*] target: assertTrue(dir.exists())
[-] pred: org. junit. Assert. assertTrue ( dir. exists ( ) )
************************************
[+] input: Exception { ComputeTimeCursorResponse expectedResponse = ComputeTimeCursorResponse.newBuilder().setCursor(Cursor.newBuilder().build()).build(); mockTopicStatsService.addResponse(expectedResponse);  ComputeTimeCursorRequest request = ComputeTimeCursorRequest.newBuilder() .setTopic(TopicName.of("[PROJECT]", "[LOCATION]", "[TOPIC]").toString()) .setPartition(-1799810326) .setTarget(TimeTarget.newBuilder().build()) .build();  ComputeTimeCursorResponse actualResponse = client.computeTimeCursor(request); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockTopicStatsService.getRequests(); Assert.assertEquals(1, actualRequests.size()); ComputeTimeCursorRequest actualRequest = ((ComputeTimeCursorRequest) actualRequests.get(0));  Assert.assertEquals(request.getTopic(), actualRequest.getTopic()); Assert.assertEquals(request.getPartition(), actualRequest.getPartition()); Assert.assertEquals(request.getTarget(), actualRequest.getTarget()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: Exception { OutgoingSessionRecord sessionRecord = new OutgoingSessionRecord();  expectCheckForOrphans(); manager.eventOccurred(new TransportActiveEvent(ID));  context.checking(new Expectations() {{ oneOf(pluginManager).getPlugin(ID); will(returnValue(plugin)); oneOf(plugin).createWriter(with(any(TransportProperties.class))); will(returnValue(transportConnectionWriter)); oneOf(transportConnectionWriter).dispose(false); oneOf(connectionManager).manageOutgoingConnection(with(contactId), with(ID), with(any(TransportConnectionWriter.class)), with(sessionRecord)); // The session succeeds. We need to use an action for this, as // createAndWriteTempFileForUpload() waits for it to happen before // returning will(new ConsumeArgumentAction<>(TransportConnectionWriter.class, 2, writer -> { try { writer.dispose(false); } catch (IOException e) { fail(); } } )); }});  File f = manager.createAndWriteTempFileForUpload(contactId, sessionRecord); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.exists())
[-] pred: org. junit. Assert. assertTrue ( f. exists ( ) )
************************************
[+] input: validateElementKeyNotUnique() { List<FlowElement> flowElementsList = EntityBuilder.buildFlowElementList(); SequenceFlow sequenceFlow1 = new SequenceFlow(); sequenceFlow1.setKey("sequenceFlow1"); sequenceFlow1.setType(FlowElementType.SEQUENCE_FLOW); List<String> sfIncomings = new ArrayList<>(); sfIncomings.add("startEvent1"); sequenceFlow1.setIncoming(sfIncomings); List<String> sfOutgoings = new ArrayList<>(); sfOutgoings.add("userTask1"); sequenceFlow1.setOutgoing(sfOutgoings); flowElementsList.add(sequenceFlow1); FlowModel flowModel = new FlowModel(); flowModel.setFlowElementList(flowElementsList); boolean access = false; try { flowModelValidator.validate(flowModel); access = true; Assert."<AssertPlaceHolder>"; } catch (ProcessException e) { LOGGER.error("", e); Assert.assertFalse(access); } catch (DefinitionException e) { LOGGER.error("", e); Assert.assertFalse(access); } }
[*] target: assertFalse(access)
[-] pred: org. junit. Assert. assertFalse ( access )
************************************
[+] input: test3() { List<MahjongTileDef> mahjongInHand = List.of( MahjongTileDef._3_WAN, MahjongTileDef._4_WAN, MahjongTileDef._5_WAN, MahjongTileDef._1_TIAO, MahjongTileDef._2_TIAO, MahjongTileDef._3_TIAO, MahjongTileDef._4_TIAO, MahjongTileDef._5_TIAO, MahjongTileDef._6_TIAO, MahjongTileDef._7_TIAO );  boolean canHu = HuFormula.test( mahjongInHand, MahjongTileDef._1_TIAO );  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(canHu)
[-] pred: org. junit. Assert. assertTrue ( canHu )
************************************
[+] input: InterruptedException { int limit = 10; BlockingReactorExecutor eventloopExecutor = BlockingReactorExecutor.create(eventloop, limit); eventloop.keepAlive(true); Thread eventloopThread = new Thread(eventloop); eventloopThread.start();  List<Integer> actual = new ArrayList<>(); List<Integer> expected = new ArrayList<>();  for (int i = 0; i < 20; i++) { int finalI = i; expected.add(i); Integer actualI = eventloopExecutor.<Integer>submit(() -> cb -> cb.accept(finalI, null)).get(); actual.add(actualI); }  eventloopExecutor.execute(() -> eventloop.keepAlive(false));  eventloopThread.join();  "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getUserReturnResponse() { mockServerReturnObject(USER_MIKE); Response<User> userReturnResponse = userService.getUserReturnResponse(Long100); "<AssertPlaceHolder>"; assertEquals(SUCCESS_CODE, userReturnResponse.code()); User user = userReturnResponse.body(); assertNotNull(user); assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(userReturnResponse)
[-] pred: org. junit. Assert. assertNotNull ( userReturnResponse )
************************************
[+] input: IOException { String hdbtiSample = org.apache.commons.io.IOUtils .toString(XSKHDBTIParserTest.class.getResourceAsStream("/invalidSyntax.hdbti"), StandardCharsets.UTF_8); XSKHDBTIParser xskhdbtiParser = new XSKHDBTIParser();  try { xskhdbtiParser.parse("/test/xsk/com/sap/invalidSyntax.hdbti", hdbtiSample); } catch (XSKArtifactParserException parseErrorException) { "<AssertPlaceHolder>"; } catch (Exception e) { fail(); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: Exception { ComputeMessageStatsResponse expectedResponse = ComputeMessageStatsResponse.newBuilder() .setMessageCount(-1229303081) .setMessageBytes(-1229929933) .setMinimumPublishTime(Timestamp.newBuilder().build()) .setMinimumEventTime(Timestamp.newBuilder().build()) .build(); mockTopicStatsService.addResponse(expectedResponse);  ComputeMessageStatsRequest request = ComputeMessageStatsRequest.newBuilder() .setTopic(TopicName.of("[PROJECT]", "[LOCATION]", "[TOPIC]").toString()) .setPartition(-1799810326) .setStartCursor(Cursor.newBuilder().build()) .setEndCursor(Cursor.newBuilder().build()) .build();  ComputeMessageStatsResponse actualResponse = client.computeMessageStats(request); Assert."<AssertPlaceHolder>";  List<AbstractMessage> actualRequests = mockTopicStatsService.getRequests(); Assert.assertEquals(1, actualRequests.size()); ComputeMessageStatsRequest actualRequest = ((ComputeMessageStatsRequest) actualRequests.get(0));  Assert.assertEquals(request.getTopic(), actualRequest.getTopic()); Assert.assertEquals(request.getPartition(), actualRequest.getPartition()); Assert.assertEquals(request.getStartCursor(), actualRequest.getStartCursor()); Assert.assertEquals(request.getEndCursor(), actualRequest.getEndCursor()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: testReadUnsignedInt() { ByteBuffer buffer = ByteBuffer.allocate(4); long writeValue = 133444; ByteUtils.writeUnsignedInt(buffer, writeValue); buffer.flip(); long readValue = ByteUtils.readUnsignedInt(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(writeValue, readValue)
[-] pred: org. junit. Assert. assertEquals ( writeValue, readValue )
************************************
[+] input: MalformedURLException { FolderTriplifier tt = new FolderTriplifier();   //		System.out.println("test/".matches("[^t]*"));   try { URL url = getClass().getClassLoader().getResource("test").toURI().toURL();  Properties p = new Properties(); p.setProperty(ZipTriplifier.MATCHES.toString(), ".*(?<!\\.json)"); p.setProperty(IRIArgument.LOCATION.toString(), url.toString()); FacadeXGraphBuilder builder = new BaseFacadeXGraphBuilder(p); tt.triplify(p, builder); DatasetGraph dg = builder.getDatasetGraph();  Set<String> expected = new HashSet<>();  expected.add(""); expected.add("test.csv");  expected.add("test.xml"); expected.add("test.txt");  Set<String> actual = new HashSet<>(); dg.find(null, null, null, null).forEachRemaining(q -> { if (q.getObject().isLiteral()) { try { actual.add(q.getObject().getLiteralLexicalForm() .replace(Paths.get(url.toURI()).toUri().toString(), "")); } catch (URISyntaxException e) { L.error("", e); } } });  "<AssertPlaceHolder>";  } catch (IOException | URISyntaxException e) { L.error("", e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldFailOnInvalidInput() { Collection<String> expressions = Arrays.asList( // TODO: For some reason this is not failing on my machine //"2x", "f(x,)", "~3", "", "*2", "f(3, x" ); for (String expression : expressions) { boolean isFailed = false; try { ExpressionBuilder.parse(expression); } catch (ParseException e) { isFailed = true; } finally { Assert."<AssertPlaceHolder>"; } } }
[*] target: assertTrue(isFailed)
[-] pred: org. junit. Assert. assertTrue ( isFailed )
************************************
[+] input: testDelete() { dao.insert(entity);  TaskInstanceEntity result = dao.findOne(entity.getId()); Assert.assertNotNull(result);  dao.delete(entity.getId());  result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception {  File file = Mockito.mock(File.class); PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(file); Mockito.when(file.isAbsolute()).thenReturn(false); Mockito.when(file.exists()).thenReturn(true); Mockito.when(file.isFile()).thenReturn(true);  DirFileScanner scanner = Mockito.mock(DirFileScanner.class); PowerMockito.whenNew(DirFileScanner.class).withAnyArguments().thenReturn(scanner); Mockito.when(scanner.scan(Mockito.anyString())).thenReturn(Arrays.asList("f1"));  Artifact artifact = new Artifact(); artifact.setFilePattern("/sss/sss"); artifact.setPatternType(PatternType.DIR); new SaAsyncLogger("uuid", true); FileUploader fileUploader = new FileUploader() { @Override public void upload(File file, String toFile) { } };  int filesCount = new JobArtifact("u1", "ws", new SaAsyncLogger("uuid", true)) .artifact(artifact) .fileUploader(fileUploader) .toDir("d1") .upload();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, filesCount)
[-] pred: org. junit. Assert. assertEquals ( 1, filesCount )
************************************
[+] input: acceptingNullInputs() { final ConnectionConfiguration accept = new ConnectionConfigurationBuilder("accept nulls", CONFIGURATION_TYPE_TEST) .withDescription(null) .withTags(null) .withValueProviders(null) .withKeys(null) .build(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(accept)
[-] pred: org. junit. Assert. assertNotNull ( accept )
************************************
[+] input: getLogFileNameOutputNull() {  // Arrange final LogHeader objectUnderTest = new LogHeader(0);  // Act final String actual = objectUnderTest.getLogFileName();  // Assert result Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: test5() { List<MahjongTileDef> mahjongInHand = Arrays.asList( MahjongTileDef._2_WAN, MahjongTileDef._3_WAN, MahjongTileDef._4_WAN, MahjongTileDef._6_TIAO, MahjongTileDef._7_TIAO, MahjongTileDef._1_BING, MahjongTileDef._2_BING, MahjongTileDef._3_BING, MahjongTileDef._3_BING, MahjongTileDef._3_BING, MahjongTileDef._4_BING, MahjongTileDef._5_BING, MahjongTileDef._6_BING );  // 测试是否可以胡牌 boolean canHu = HuFormula.test(mahjongInHand, MahjongTileDef._5_TIAO); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(canHu)
[-] pred: org. junit. Assert. assertTrue ( canHu )
************************************
[+] input: testMapMetricWithWierdAttributeNameSucceeds() { String type = DEFAULT_PREFIX + "/" + anInstrumentationLibraryInfo.getName(); Attributes attributes = io.opentelemetry.api.common.Attributes.of(stringKey("test.bad"), "value"); Metric expectedMetric = Metric.newBuilder().setType(type).putLabels("test_bad", "value").build(); Metric actualMetric = MetricTranslator.mapMetric(attributes, type); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMetric, actualMetric)
[-] pred: org. junit. Assert. assertEquals ( expectedMetric, actualMetric )
************************************
[+] input: returnNullWithClusterAuthorizationFailure() { final NewTopic newTopic = TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build(); Cluster cluster = createCluster(1); try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(new MockTime(), cluster)) { env.kafkaClient().prepareResponse(createTopicResponseWithClusterAuthorizationException(newTopic)); TopicAdmin admin = new TopicAdmin(null, env.adminClient()); boolean created = admin.createTopic(newTopic); "<AssertPlaceHolder>"; } }
[*] target: assertFalse(created)
[-] pred: org. junit. Assert. assertFalse ( created )
************************************
[+] input: returnGraphPathStepsForExistingRoute() { List<Step> steps = pointRouter.getRouteSteps(pointA, pointC); "<AssertPlaceHolder>"; assertThat(steps, is(not(empty()))); }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
[+] input: testSouthEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.compactNine(population, 5);  Chromosome exepcted_individual = population.get(10); Chromosome returned_individual = neighbors.get(7);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: InterruptedException { Path file = Paths.get(getTestLog("utf8.log"));  byte[] data = Files.readAllBytes(file);  int nonLatinCharOffset = -1; for (int i = 0; i < data.length; i++) { if (data[i] < 0) { assert data[i + 1] < 0; nonLatinCharOffset = i; break; } }  assert nonLatinCharOffset >= 0;  Log log = getLogService().openLog(file, new SimpleLogFormat(StandardCharsets.UTF_8));  Pair<String, Integer> pair = log.loadContent(0, nonLatinCharOffset + 1).get();  int dataLen = pair.getSecond();  "<AssertPlaceHolder>"; assertEquals(new String(Arrays.copyOf(data, dataLen), StandardCharsets.UTF_8), pair.getFirst()); }
[*] target: assertEquals(nonLatinCharOffset, dataLen)
[-] pred: org. junit. Assert. assertEquals ( nonLatinCharOffset, dataLen )
************************************
[+] input: testSchemaCreate() { boolean schemaCreateFlag = driverSession.schemaCreate("test123"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(schemaCreateFlag)
[-] pred: org. junit. Assert. assertTrue ( schemaCreateFlag )
************************************
[+] input: noConflicts() { MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A, PERSON_B), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(NO_EVENTS, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.WHOLE_DAY);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLabelTreeKeyRegressionShare_sharedNodesShouldBeEqual() { int depth = 20; int from = 2000; int to = 3000; IPRF aesni = PRFFactory.getDefaultPRF(); TreeKeyRegression reg = (TreeKeyRegression) TreeKeyRegressionFactory.getNewDefaultTESTKeyRegression(aesni, depth); LabelTreeKeyRegression reg2 = new LabelTreeKeyRegression(aesni, depth, new byte[16]); ArrayList<SeedNode> nodes = reg.revealSeeds(from, to); List<SeedNode> nodes2 = reg2.constrainNodes(from, to + 1);  for (SeedNode tn : nodes2) { boolean ok = false; for (SeedNode sn : nodes) { if (Arrays.equals(sn.getSeed(), tn.getSeed())) { ok = true; break; } } "<AssertPlaceHolder>"; } }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: shouldCreateWriteBatches() { final String key = "a"; final Collection<KeyValue<byte[], byte[]>> records = new ArrayList<>(); records.add(new KeyValue<>(serializeKey(new Windowed<>(key, windows[0])).get(), serializeValue(50L))); records.add(new KeyValue<>(serializeKey(new Windowed<>(key, windows[3])).get(), serializeValue(100L))); final Map<KeyValueSegment, WriteBatch> writeBatchMap = bytesStore.getWriteBatches(records); "<AssertPlaceHolder>"; for (final WriteBatch batch : writeBatchMap.values()) { assertEquals(1, batch.count()); } }
[*] target: assertEquals(2, writeBatchMap.size())
[-] pred: org. junit. Assert. assertEquals ( 2, writeBatchMap. size ( ) )
************************************
[+] input: testMetaFields() { Map<MetaField, String> formatMap = new HashMap<>(); formatMap.put(MetaField.PROCESS_TIME, "AS PROCTIME()"); formatMap.put(MetaField.DATA_CANAL, "STRING METADATA FROM 'value.data_canal'"); formatMap.put(MetaField.DATA, "STRING METADATA FROM 'value.data_canal'"); formatMap.put(MetaField.TABLE_NAME, "STRING METADATA FROM 'value.table'"); formatMap.put(MetaField.DATABASE_NAME, "STRING METADATA FROM 'value.database'"); formatMap.put(MetaField.OP_TYPE, "STRING METADATA FROM 'value.type'"); formatMap.put(MetaField.OP_TS, "TIMESTAMP_LTZ(3) METADATA FROM 'value.event-timestamp'"); formatMap.put(MetaField.IS_DDL, "BOOLEAN METADATA FROM 'value.is-ddl'"); formatMap.put(MetaField.TS, "TIMESTAMP_LTZ(3) METADATA FROM 'value.ingestion-timestamp'"); formatMap.put(MetaField.SQL_TYPE, "MAP<STRING, INT> METADATA FROM 'value.sql-type'"); formatMap.put(MetaField.MYSQL_TYPE, "MAP<STRING, STRING> METADATA FROM 'value.mysql-type'"); formatMap.put(MetaField.PK_NAMES, "ARRAY<STRING> METADATA FROM 'value.pk-names'"); formatMap.put(MetaField.BATCH_ID, "BIGINT METADATA FROM 'value.batch-id'"); formatMap.put(MetaField.UPDATE_BEFORE, "ARRAY<MAP<STRING, STRING>> METADATA FROM 'value.update-before'"); KafkaLoadNode node = getTestObject(); boolean formatEquals = true; for (MetaField metaField : node.supportedMetaFields()) { formatEquals = node.format(metaField).equals(formatMap.get(metaField)); if (!formatEquals) { break; } } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(formatEquals)
[-] pred: org. junit. Assert. assertTrue ( formatEquals )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) {  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1000, 500); time.sleep(999);  CoordinatorClient coordinatorClient = cluster.coordinatorClient(); coordinatorClient.createTask(new CreateTaskRequest("fooSpec", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("fooSpec").taskState( new TaskPending(fooSpec) ).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("fooSpec")); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: sizeArray_Empty_0() { JsonMetadataView view = new JsonMetadataView(new JsonArray()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, view.size())
[-] pred: org. junit. Assert. assertEquals ( 0, view. size() )
************************************
[+] input: getFirstLine() { // assign variables with test data String expectedLine = "First Line";  // allocate test objects StackTrace stackTrace = new StackTrace(expectedLine, null);  // execute methods to be tested String actualLine = stackTrace.getFirstLine();  // assign result Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLine, actualLine)
[-] pred: org. junit. Assert. assertEquals ( expectedLine, actualLine )
************************************
[+] input: shouldCallRocksDbConfigSetter() { MockRocksDbConfigSetter.called = false;  rocksDBStore.openDB(context);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(MockRocksDbConfigSetter.called)
[-] pred: org. junit. Assert. assertTrue ( MockRocksDbConfigSetter.called )
************************************
[+] input: testUnsignedLongToBigInteger() { final BigInteger bigInteger = new BigInteger("18446744073709551610"); final long unsignedLong = bigInteger.longValue(); Assert.assertTrue(unsignedLong < 0); final BigInteger bigInteger2 = UnsignedHelper.unsignedLongToBigInteger(unsignedLong); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(bigInteger, bigInteger2)
[-] pred: org. junit. Assert. assertEquals ( bigInteger, bigInteger2 )
************************************
[+] input: testHappyPath() { // to make this a unit test, we need to mock out the computations that would ordinarily involve collaborators // such as Bazel Query, filesystem scanning, and file parsing TestBazelQueryProjectStructureStrategy strategy = new TestBazelQueryProjectStructureStrategy(); addSourcePathForTest(strategy, "source/main/java"); addSourcePathForTest(strategy, "source/test/java"); addMainResourcePathForTest(strategy, "projects/libs/apple/source/main/resources"); addTestResourcePathForTest(strategy, "projects/libs/apple/source/test/resources");  addSimQueryResult(strategy, "source/main/java/com/salesforce/apple/api/Apple.java"); addSimQueryResult(strategy, "source/main/java/com/salesforce/apple/api/ApplePie.java"); addSimQueryResult(strategy, "source/main/resources/fruit/kinds.properties"); addSimQueryResult(strategy, "source/main/resources/recipes/pies.properties"); addSimQueryResult(strategy, "source/main/resources/recipes/cakes.properties"); addSimQueryResult(strategy, "source/main/resources/recipes/sauces.properties"); addSimQueryResult(strategy, "source/test/java/com/salesforce/apple/api/AppleTest.java"); addSimQueryResult(strategy, "source/test/java/com/salesforce/apple/api/ApplePieTest.java"); addSimQueryResult(strategy, "source/test/resources/test.properties");  // run the test String relPath = FSPathHelper.osSeps("projects/libs/apple"); InMemoryPackageLocation packageLocation = new InMemoryPackageLocation(relPath); ProjectStructure structure = null; try { structure = strategy.doStructureAnalysis(bazelWorkspace, packageLocation, nullCommandRunner); } catch (Exception anyE) { anyE.printStackTrace(); }  // validate "<AssertPlaceHolder>"; assertContains(structure.mainSourceDirFSPaths, "projects/libs/apple/source/main/java"); assertContains(structure.mainResourceDirFSPaths, "projects/libs/apple/source/main/resources"); assertContains(structure.testSourceDirFSPaths, "projects/libs/apple/source/test/java"); assertContains(structure.testResourceDirFSPaths, "projects/libs/apple/source/test/resources"); }
[*] target: assertNotNull(structure)
[-] pred: org. junit. Assert. assertNotNull ( structure )
************************************
[+] input: IOException { String testStr = "( defun test () "hi there")"; Sexp parsedExpression = SexpFactory.parse(testStr); Sexp expectedExpression = SexpFactory.newNonAtomicSexp(); expectedExpression.add(SexpFactory.newAtomicSexp("defun")); expectedExpression.add(SexpFactory.newAtomicSexp("test")); expectedExpression.add(SexpFactory.newNonAtomicSexp()); expectedExpression.add(SexpFactory.newAtomicSexp(""hi there"")); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedExpression, parsedExpression)
[-] pred: org. junit. Assert. assertEquals ( expectedExpression, parsedExpression )
************************************
[+] input: testIsRootPage1() { "<AssertPlaceHolder>"; }
[*] target: assertFalse(page.isRootPage())
[-] pred: org. junit. Assert. assertFalse ( page. isRootPage() )
************************************
[+] input: testCleanUpBySize() { int maxPersistedMessages = 10;  deviceMsgCleanUpDao.cleanUpBySize(maxPersistedMessages);  List<DevicePublishMsgEntity> remainingMessages = deviceMsgRepository.findAll(); Assert."<AssertPlaceHolder>";  for (int i = 0; i < maxPersistedMessages; i++) { Assert.assertEquals(i + 10, remainingMessages.get(i).getSerialNumber().intValue()); } }
[*] target: assertEquals(maxPersistedMessages, remainingMessages.size())
[-] pred: org. junit. Assert. assertEquals ( maxPersistedMessages, remainingMessages. size ( ) )
************************************
[+] input: doubleBookedPeople() { // Have one person, but have them registered to attend two events at the same time. // // Events  :       |----A----| //                     |--A--| // Day     : |---------------------| // Options : |--1--|         |--2--|  Collection<Event> events = Arrays.asList( new Event("Event 1", TimeRange.fromStartDuration(TIME_0830AM, DURATION_60_MINUTES), Arrays.asList(PERSON_A)), new Event("Event 2", TimeRange.fromStartDuration(TIME_0900AM, DURATION_30_MINUTES), Arrays.asList(PERSON_A)));  MeetingRequest request = new MeetingRequest(Arrays.asList(PERSON_A), DURATION_30_MINUTES);  Collection<TimeRange> actual = query.query(events, request); Collection<TimeRange> expected = Arrays.asList(TimeRange.fromStartEnd(TimeRange.START_OF_DAY, TIME_0830AM, false), TimeRange.fromStartEnd(TIME_0930AM, TimeRange.END_OF_DAY, true));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEquals1() { line = line.increment(CounterImpl.getInstance(111, 222), CounterImpl.getInstance(333, 444)); LineImpl line2 = LineImpl.EMPTY; line2 = line2.increment(CounterImpl.getInstance(111, 222), CounterImpl.getInstance(333, 444)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(line, line2)
[-] pred: org. junit. Assert. assertEquals ( line, line2 )
************************************
[+] input: evaluateWhenExpressionVarIsUndefined() { String expression = "dummy.intValue"; Map<String, Object> vars = new HashMap<>(); ExpressionEvaluator expressionEvaluator = new JexlExpressionEvaluatorNoThreadLocal(); Object result = expressionEvaluator.evaluate( expression, vars ); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testToStringNodePatternWithProperty() { HashMap<GqlIdentifier, Value> properties = new HashMap<>(); properties.put(new GqlIdentifier("name"), new GqlString("Olof Morra")); NodePattern nodePattern = new NodePattern(null, null, properties);  String expectedResult = "(nil, {}, {(name: "Olof Morra")})"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, nodePattern.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedResult, nodePattern. toString ( ) )
************************************
[+] input: testNorthNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.linearFive(population, 5);  Chromosome exepcted_individual = population.get(1); Chromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: getUser() { mockServerReturnObject(USER_MIKE); User user = logUserService.getUser(Long100); "<AssertPlaceHolder>"; assertEquals(Long100, user.getId()); assertEquals(MIKE, user.getName()); assertEquals(INT20, user.getAge()); assertTrue(user.isMale()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: Exception { final String firstContent = "<html><head>\n" + "<script>\n" + "var foo = 'foo';\n" + "var test = new Function('alert(foo);');\n" + "</script>\n" + "</head>\n" + "<body onload='test()'>\n" + "  <iframe src='page2.html'/>\n" + "</body>\n" + "</html>";  final String secondContent = "<html><head><script>\n" + "var foo = 'foo2';\n" + "parent.test();\n" + "var f = parent.test;\n" + "f();\n" + "</script></head></html>";  final WebClient client = getWebClient(); final MockWebConnection webConnection = new MockWebConnection(); webConnection.setDefaultResponse(secondContent); webConnection.setResponse(URL_FIRST, firstContent); client.setWebConnection(webConnection);  final String[] expectedAlerts = {"foo", "foo", "foo"};  final List<String> collectedAlerts = new ArrayList<>(); client.setAlertHandler(new CollectingAlertHandler(collectedAlerts)); client.getPage(URL_FIRST);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAlerts, collectedAlerts)
[-] pred: org. junit. Assert. assertEquals ( expectedAlerts, collectedAlerts )
************************************
[+] input: testClear() { GitHubDataCache<String> cache = new GitHubDataCache<>();  String data = "data to be cached"; GitHubProject project = new GitHubProject(new GitHubOrganization(data), data); cache.put(project, data); assertEquals(1, cache.size()); String cached = cache.get(project).orElseThrow(RuntimeException::new); assertEquals(data, cached);  // fill out the cache for (int i = 1, cacheSize = cache.size(); cacheSize < cache.maxSize(); cacheSize++, i++) { project = new GitHubProject(String.format("org%d", i), String.format("project%d", i)); data = String.format("data%d", i); cache.put(project, data); }  assertEquals(cache.size(), cache.maxSize());  cache.clear(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, cache.size())
[-] pred: org. junit. Assert. assertEquals ( 0, cache. size ( ) )
************************************
[+] input: distribution() {  SLD.Distribution<Object> actual = SLD.extractDistributions(graph)[0];  SLD.Distribution<Object> expected = new DistributionBuilder(""). access("ws://localhost:4567/access/colours", false) .format(Format.STRING) .license(License.CC) .protocol(Protocol.WebSocket) .security(Security.SSL) .publisher(SLD.extractPublisher(g)) .buildSource(g);   //        expected.describe().stream().forEach(triple -> { //            assertTrue(actual.describe().contains(triple)); //        }); // //        actual.describe().stream().forEach(triple -> { //            assertTrue(expected.describe().contains(triple)); // //        });   SLD.WebDataStream<Object> expectedWebStream = expected.getWebStream(); SLD.WebDataStream<Object> actualWebStream = actual.getWebStream();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWebStream, actualWebStream)
[-] pred: org. junit. Assert. assertEquals ( expectedWebStream, actualWebStream )
************************************
[+] input: shouldReturnFutureSteps() { List<DriveOrder> driveOrders = Arrays.asList(createDriveOrder(10, "A", "B", "C"), createDriveOrder(20, "C", "D", "E", "F", "G", "H"), createDriveOrder(20, "H", "I", "J", "K", "L")); TransportOrder transportOrder = new TransportOrder("TransportOrder", driveOrders) .withCurrentDriveOrderIndex(1); Vehicle vehicle = new Vehicle("Vehicle") .withTransportOrder(transportOrder.getReference());  VehicleController controller = mock(VehicleController.class); when(transportOrderService.fetchObject(TransportOrder.class, transportOrder.getReference())) .thenReturn(transportOrder); when(vehicleControllerPool.getVehicleController(vehicle.getName())).thenReturn(controller); when(controller.getCommandsSent()).thenReturn(commandsSentToVehicle(driveOrders));  List<String> expected = Arrays.asList("H", "I", "J", "K", "L"); List<String> actual = rerouteUtil.getFutureSteps(vehicle).stream() .map(step -> step.getDestinationPoint().getName()) .collect(Collectors.toList());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final APIConnector connector = getApiConnectorMock();  JSONObject requiredObject = new JSONObject(); requiredObject .put("username", "u") .put("password", "eric") .put("contacts", (new JSONArray()).put("identity1").put("identity2"));  when(connector.fetchWorkData(any(), any(), any())).thenCallRealMethod(); when(connector.postJsonWithResult( eq("https://api-work.threema.ch/fetch2"), argThat(new ToStringEqualityArgumentMatcher<>(requiredObject)) )).thenReturn(new PostJsonResult("{"logo":{"dark": "the-dark-logo"}}", 0)); WorkData result = connector.fetchWorkData("u", "eric", new String[]{ "identity1", "identity2" }); Assert."<AssertPlaceHolder>"; Assert.assertNull(result.supportUrl); Assert.assertEquals("the-dark-logo", result.logoDark); Assert.assertNull(result.logoLight); Assert.assertEquals(0, result.workContacts.size()); Assert.assertNotNull(result.mdm); Assert.assertFalse(result.mdm.override); Assert.assertNotNull(result.mdm.parameters); Assert.assertEquals(0, result.mdm.parameters.size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: list_NoneMatchFilter_NoneFound() { PackResourcesAdapter adapter = makeAdapterWithResources();  Collection<ResourceLocation> resources = adapter.list(PackType.CLIENT_RESOURCES, "minecraft", "textures", (file) -> file.endsWith(".jpg"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, resources.size())
[-] pred: org. junit. Assert. assertEquals ( 0, resources. size ( ) )
************************************
[+] input: print_json_diffInputNotNullZeroNotNullZeroNotNullOutputNotNull() {  // Arrange final LogBuffer buffer = new LogBuffer(); final long len = 0L; final String columnName = ","; final int columnIndex = 0; final String charsetName = "1a 2b 3c";  // Act final StringBuilder actual = JsonDiffConversion.print_json_diff(buffer, len, columnName, columnIndex, charsetName);  // Assert result Assert."<AssertPlaceHolder>"; Assert.assertEquals(",", actual.toString()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testCopartitioning() { final Random rand = new Random(); final DefaultPartitioner defaultPartitioner = new DefaultPartitioner(); final WindowedSerializer<Integer> timeWindowedSerializer = new TimeWindowedSerializer<>(intSerializer); final WindowedStreamPartitioner<Integer, String> streamPartitioner = new WindowedStreamPartitioner<>(timeWindowedSerializer);  for (int k = 0; k < 10; k++) { final Integer key = rand.nextInt(); final byte[] keyBytes = intSerializer.serialize(topicName, key);  final String value = key.toString(); final byte[] valueBytes = stringSerializer.serialize(topicName, value);  final Integer expected = defaultPartitioner.partition("topic", key, keyBytes, value, valueBytes, cluster);  for (int w = 1; w < 10; w++) { final TimeWindow window = new TimeWindow(10 * w, 20 * w);  final Windowed<Integer> windowedKey = new Windowed<>(key, window); final Integer actual = streamPartitioner.partition(topicName, windowedKey, value, infos.size());  "<AssertPlaceHolder>"; } }  defaultPartitioner.close(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: canCreateEmptyRemoval() { MutableIndexValueDiff diff = new MutableIndexValueDiff(new Object(), null); assertNotNull(diff); "<AssertPlaceHolder>"; assertFalse(diff.isEntryAddition()); assertTrue(diff.isEntryRemoval()); assertFalse(diff.isEntryUpdate()); }
[*] target: assertTrue(diff.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( diff. isEmpty() )
************************************
[+] input: generateToken() { SingleJWT jwt = new SingleJWT("secret", 1000); String token = jwt.generateToken("test", 1, "test", 1000); "<AssertPlaceHolder>"; log.info(token); }
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
[+] input: Exception { Collection<MessageId> messagesToAck = asList(messageId, messageId1); context.checking(new Expectations() {{ oneOf(database).startTransaction(); will(returnValue(txn)); oneOf(database).containsContact(txn, contactId); will(returnValue(true)); oneOf(database).getMessagesToAck(txn, contactId, 123); will(returnValue(messagesToAck)); oneOf(database).lowerAckFlag(txn, contactId, messagesToAck); oneOf(database).commitTransaction(txn); }}); DatabaseComponent db = createDatabaseComponent(database, eventBus, eventExecutor, shutdownManager);  db.transaction(false, transaction -> { Ack a = db.generateAck(transaction, contactId, 123); "<AssertPlaceHolder>"; assertEquals(messagesToAck, a.getMessageIds()); }); }
[*] target: assertNotNull(a)
[-] pred: org. junit. Assert. assertNotNull ( a )
************************************
[+] input: givenDevicePersistedMsgsRateLimitsEnabled_whenRateLimitReached_thenFailure() { when(devicePersistedMsgsRateLimitsConfiguration.isEnabled()).thenReturn(true); when(rateLimitCacheService.tryConsumeDevicePersistedMsg()).thenReturn(false);  boolean result = rateLimitService.checkDevicePersistedMsgsLimit(); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { final String htmlContent = "<html><head><title>foo</title></head><body>\n" + "<form id='form1'><select name='select1' id='select1' multiple>\n" + "<option value='option1'>Option1</option>\n" + "<option value='option2' >Option2</option>\n" + "<option value='option3'>Option3</option>\n" + "</select>\n" + "<input type='submit' name='button' value='foo'/>\n" + "</form></body></html>"; final HtmlPage page = loadPage(htmlContent);  final HtmlSelect select = page.getHtmlElementById("select1"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(select.isMultipleSelectEnabled())
[-] pred: org. junit. Assert. assertTrue ( select. isMultipleSelectEnabled ( ) )
************************************
[+] input: test4() { List<MahjongTileDef> mahjongInHand = Arrays.asList( MahjongTileDef._1_WAN, MahjongTileDef._1_WAN, MahjongTileDef._1_WAN, MahjongTileDef._2_WAN, MahjongTileDef._3_WAN, MahjongTileDef._4_WAN, MahjongTileDef._5_WAN, MahjongTileDef._6_WAN, MahjongTileDef._7_WAN, MahjongTileDef._8_WAN, MahjongTileDef._9_WAN, MahjongTileDef._9_WAN, MahjongTileDef._9_WAN );  // 测试是否可以胡牌 boolean canHu = HuFormula.test(mahjongInHand, MahjongTileDef._5_WAN); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(canHu)
[-] pred: org. junit. Assert. assertTrue ( canHu )
************************************
[+] input: canCreateEmptyAddition() { MutableIndexValueDiff diff = new MutableIndexValueDiff(null, new Object()); assertNotNull(diff); "<AssertPlaceHolder>"; assertTrue(diff.isEntryAddition()); assertFalse(diff.isEntryRemoval()); assertFalse(diff.isEntryUpdate()); }
[*] target: assertTrue(diff.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( diff. isEmpty() )
************************************
[+] input: checkIncomingAccess() { FlowElement sequenceFlow = EntityBuilder.buildSequenceFlow(); Map<String, FlowElement> flowElementMap = new HashMap<>(); flowElementMap.put(sequenceFlow.getKey(), sequenceFlow); boolean access = false; try { sequenceFlowValidator.checkIncoming(flowElementMap, sequenceFlow); access = true; Assert."<AssertPlaceHolder>"; } catch (DefinitionException e) { LOGGER.error("", e); Assert.assertTrue(access); } }
[*] target: assertTrue(access)
[-] pred: org. junit. Assert. assertTrue ( access )
************************************
[+] input: load_InvalidMetadataDuringRead_LoadsValidTextures() { OrderedResourceRepository repository = makeMockRepository(Set.of( "textures/bat.png", "textures/bat.png.moremcmeta", "textures/creeper.png", "textures/zombie.png", "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta" ));  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { if (metadataLocation.getPath().contains("creeper")) { throw new InvalidMetadataException("Dummy exception"); }  return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures"); "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/zombie.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size() )
************************************
[+] input: IOException { try (SplitInputStream splitInputStream = new SplitInputStream(fileList)) { // For 1 KB long expectedSkipBytes = 10024; long actualSkipBytes = splitInputStream.skip(expectedSkipBytes); assertEquals(expectedSkipBytes, actualSkipBytes); // For 1 MB expectedSkipBytes = 1024 * 1024; actualSkipBytes = splitInputStream.skip(expectedSkipBytes); assertEquals(expectedSkipBytes, actualSkipBytes); // For 2 MB expectedSkipBytes = 1024 * 1024 * 2; actualSkipBytes = splitInputStream.skip(expectedSkipBytes); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedSkipBytes, actualSkipBytes)
[-] pred: org. junit. Assert. assertEquals ( expectedSkipBytes, actualSkipBytes )
************************************
[+] input: Exception { setFileContentSrc( "test/MyPanel.java", getTestSource( "// filler filler filler filler filler", "// filler filler filler filler filler", "public class MyPanel extends JPanel {", "  public int foo;", "}")); waitForAutoBuild(); // parse // parse ContainerInfo panel = parseContainer( "// filler filler filler", "public class Test extends MyPanel {", "  public Test() {", "  }", "}"); GenericProperty property = (GenericProperty) panel.getPropertyByTitle("foo"); FieldAccessor accessor = (FieldAccessor) getGenericPropertyAccessors(property).get(0); // check that IAccessibleExpressionAccessor is available // note, that we don't check it, I just don't know how to do this more easy than perform full check // but we expect that it should be from IAccessibleExpressionAccessor.Utils.forField() IAccessibleExpressionAccessor accessibleAccessor = accessor.getAdapter(IAccessibleExpressionAccessor.class); "<AssertPlaceHolder>"; assertNotNull(ReflectionUtils.getFieldByName(accessibleAccessor.getClass(), "val$field")); }
[*] target: assertNotNull(accessibleAccessor)
[-] pred: org. junit. Assert. assertNotNull ( accessibleAccessor )
************************************
[+] input: testFindOne() { dao.insert(entity);  ActivityInstanceEntity result = dao.findOne(entity.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenSuccessReasonCode_whenCheckIfReasonCodeFailure_thenReturnFalse() { boolean result = mqttPubRecHandler.reasonCodeFailure(newMqttPubRecMsg(MqttReasonCodes.PubRec.SUCCESS)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: InactiveSensorException { sensor = new TempSensor("TEST"); String testString = "TempSensor{name='TEST', alias='test', address='28-456A123654xxx', sensorOffset=2, gpio=null, lastReadTime=null, lastTempRead=0}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(testString,sensor.toString())
[-] pred: org. junit. Assert. assertEquals ( testString, sensor. toString ( ) )
************************************
[+] input: IOException { ArtifactVersion version = new ArtifactVersion("2.0.2", LocalDateTime.now()); ArtifactVersion clone = Json.read(Json.toBytes(version), ArtifactVersion.class); assertTrue(version.equals(clone) && clone.equals(version)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version.hashCode(), clone.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode ( ), clone. hashCode ( ) )
************************************
[+] input: IOException { ArtifactVersion version = new ArtifactVersion("MIGHTY-1.2", LocalDateTime.now()); ArtifactVersion clone = Yaml.read(Yaml.toBytes(version), ArtifactVersion.class); assertTrue(version.equals(clone) && clone.equals(version)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(version.hashCode(), clone.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode ( ), clone. hashCode ( ) )
************************************
[+] input: testSaveToStringWithIndent() { YamlConfiguration config = getConfig(); config.options().indent(9);  config.set("section.key", 1);  String result = config.saveToString(); String expected = "section:\n         key: 1\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { OpenWeatherMapWeather weather = WeatherUtils.createIncompleteOpenWeather(context); Location location = weather.getLocation(); assertNotNull(location); "<AssertPlaceHolder>"; assertEquals("Omsk", location.getText()); // geo coordinates are taken from the response assertTrue(location.isGeo()); assertEquals("lat=55.0&lon=73.4", location.getQuery()); }
[*] target: assertFalse(location.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( location. isEmpty() )
************************************
[+] input: UndefinedParameterError { ParameterHandler handler = mock(ParameterHandler.class); when(handler.isParameterSet(anyString())).thenReturn(true); when(handler.getParameterList(anyString())).thenReturn(Arrays.asList(new String[]{"bla","real"}, new String[]{"bla","int"})); List<MetaDataError> errors = new ArrayList<>(); final ColumnSetPrecondition precondition = new ColumnSetPrecondition(generateDummyInputPort(errors), ColumnSetPrecondition.getColumnsByParameterListEntry(handler, "some_key",1), Column.Category.NUMERIC); precondition.check(new TableMetaDataBuilder(10) .addReal("real", null, SetRelation.EQUAL, null) .addInteger("int", null, SetRelation.EQUAL, null) .add("nominal", ColumnType.NOMINAL, null) .addColumnMetaData("nominal", ColumnRole.LABEL) .build()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, errors. size ( ) )
************************************
[+] input: testMazeSolution() {  int ret_val = MazeClient.walk('s', 's', 's', 's', 'd', 'd', 'd', 'd', 'w', 'w', 'a', 'a', 'w', 'w', 'd', 'd', 'd', 'd', 's', 's', 's', 's', 'd', 'd', 'w', 'w', 'w', 'w', (char) 0, (char) 0, 28); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret_val)
[-] pred: org. junit. Assert. assertEquals ( 1, ret_val )
************************************
[+] input: IOException { // without default branch, the repository head should be used FileObject root = createCommand().getBrowserResult(new BrowseCommandRequest()).getFile(); assertNotNull(root);  Collection<FileObject> foList = root.getChildren(); "<AssertPlaceHolder>"; assertFalse(foList.isEmpty());  assertThat(foList) .extracting("name") .containsExactly("c", "a.txt", "b.txt", "f.txt"); }
[*] target: assertNotNull(foList)
[-] pred: org. junit. Assert. assertNotNull ( foList )
************************************
[+] input: initModel() { boolean res = activityActivityTestRule.getActivity().initModel(); Log.d("EnhancementTest", "res:" + res); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: Exception { String serverMessage = "n,,\u0001auth=Bearer 123.345.567\u0001nineteen=42\u0001\u0001"; OAuthBearerClientInitialResponse response = new OAuthBearerClientInitialResponse(serverMessage.getBytes(StandardCharsets.UTF_8));  String message = new String(response.toBytes(), StandardCharsets.UTF_8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(serverMessage, message)
[-] pred: org. junit. Assert. assertEquals ( serverMessage, message )
************************************
[+] input: shouldLogAWarningIfCheckpointThrowsAnIOException() { final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();  final ProcessorStateManager stateMgr; try { stateMgr = new ProcessorStateManager( taskId, noPartitions, false, stateDirectory, Collections.singletonMap(persistentStore.name(), persistentStoreTopicName), changelogReader, false, logContext); } catch (final IOException e) { e.printStackTrace(); throw new AssertionError(e); } stateMgr.register(persistentStore, persistentStore.stateRestoreCallback);  stateDirectory.clean(); stateMgr.checkpoint(Collections.singletonMap(persistentStorePartition, 10L)); LogCaptureAppender.unregister(appender);  boolean foundExpectedLogMessage = false; for (final LogCaptureAppender.Event event : appender.getEvents()) { if ("WARN".equals(event.getLevel()) && event.getMessage().startsWith("process-state-manager-test Failed to write offset checkpoint file to [") && event.getMessage().endsWith(".checkpoint]") && event.getThrowableInfo().get().startsWith("java.io.FileNotFoundException: ")) {  foundExpectedLogMessage = true; break; } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(foundExpectedLogMessage)
[-] pred: org. junit. Assert. assertTrue ( foundExpectedLogMessage )
************************************
[+] input: Exception { File directory = Files.createTempDirectory("chronodb-test").toFile(); try { // without additional configuration try (ChronoGraph graph = ChronoGraph.FACTORY.create().exodusGraph(directory.getAbsolutePath()).build()) { assertNotNull(graph); } // with additional configuration try (ChronoGraph graph = ChronoGraph.FACTORY.create().exodusGraph(directory.getAbsolutePath(), config -> config.assumeCachedValuesAreImmutable(true)).build()) { "<AssertPlaceHolder>"; } } finally { FileUtils.deleteDirectory(directory); } }
[*] target: assertNotNull(graph)
[-] pred: org. junit. Assert. assertNotNull ( graph )
************************************
[+] input: testMax0() { limit.setMaximum("0"); limit.setMaximum((String) null); "<AssertPlaceHolder>"; }
[*] target: assertNull(limit.getMaximum())
[-] pred: org. junit. Assert. assertNull ( limit. getMaximum() )
************************************
[+] input: Exception { TrafficTreatment treatment = DefaultTrafficTreatment.emptyTreatment(); PiAction mappedAction = interpreter.mapTreatment( treatment, P4InfoConstants.FABRIC_INGRESS_ACL_ACL); PiAction expectedAction = PiAction.builder() .withId(P4InfoConstants.FABRIC_INGRESS_ACL_NOP_ACL) .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAction, mappedAction)
[-] pred: org. junit. Assert. assertEquals ( expectedAction, mappedAction )
************************************
[+] input: testMetaFields() { Map<MetaField, String> formatMap = new HashMap<>(); formatMap.put(MetaField.PROCESS_TIME, "AS PROCTIME()"); formatMap.put(MetaField.TABLE_NAME, "STRING METADATA FROM 'table_name' VIRTUAL"); formatMap.put(MetaField.DATABASE_NAME, "STRING METADATA FROM 'database_name' VIRTUAL"); formatMap.put(MetaField.OP_TS, "TIMESTAMP_LTZ(3) METADATA FROM 'op_ts' VIRTUAL"); formatMap.put(MetaField.SCHEMA_NAME, "STRING METADATA FROM 'schema_name' VIRTUAL"); SqlServerExtractNode node = getTestObject(); boolean formatEquals = true; for (MetaField metaField : node.supportedMetaFields()) { formatEquals = node.format(metaField).equals(formatMap.get(metaField)); if (!formatEquals) { break; } } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(formatEquals)
[-] pred: org. junit. Assert. assertTrue ( formatEquals )
************************************
[+] input: testEastEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 10);  Chromosome exepcted_individual = population.get(8); Chromosome returned_individual = neighbors.get(10);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testEstimate() { OptimizationContext optimizationContext = mock(OptimizationContext.class); when(optimizationContext.getConfiguration()).thenReturn(new Configuration());  CardinalityEstimator partialEstimator1 = new DefaultCardinalityEstimator(0.9, 1, false, cards -> cards[0] * 2); CardinalityEstimator partialEstimator2 = new DefaultCardinalityEstimator(0.8, 1, false, cards -> cards[0] * 3); CardinalityEstimator estimator = new AggregatingCardinalityEstimator( Arrays.asList(partialEstimator1, partialEstimator2) );  CardinalityEstimate inputEstimate = new CardinalityEstimate(10, 100, 0.3); CardinalityEstimate outputEstimate = estimator.estimate(optimizationContext, inputEstimate); CardinalityEstimate expectedEstimate = new CardinalityEstimate(2 * 10, 2 * 100, 0.3 * 0.9);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEstimate, outputEstimate)
[-] pred: org. junit. Assert. assertEquals ( expectedEstimate, outputEstimate )
************************************
[+] input: testWestWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 5);  Chromosome exepcted_individual = population.get(7); Chromosome returned_individual = neighbors.get(11);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: createCustomMusicList() { final String name = "TestMusicList";  MusicList musicList = mMusicStore.createCustomMusicList(name);  assertEquals(name, musicList.getName());  boolean exception = false; try { mMusicStore.createCustomMusicList(MusicStore.MUSIC_LIST_FAVORITE); } catch (IllegalArgumentException e) { exception = true; }  "<AssertPlaceHolder>"; }
[*] target: assertTrue(exception)
[-] pred: org. junit. Assert. assertTrue ( exception )
************************************
[+] input: Exception { String[] args = {"../"}; TestingProcessManager.TestingProcess process = TestingProcessManager.start(args); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) { return; }  // create an EmailPassword User AuthRecipeUserInfo user_1 = EmailPassword.signUp(process.main, "test@example.com", "testPass123"); // create a mapping for the EmailPassword User UserIdMapping.createUserIdMapping(process.main, user_1.getSupertokensUserId(), "externalId", null, false);  // create some metadata for the user JsonObject data = new JsonObject(); data.addProperty("test", "testData"); UserMetadata.updateUserMetadata(process.main, "externalId", data);  // Create another User AuthRecipeUserInfo user_2 = EmailPassword.signUp(process.main, "test123@example.com", "testPass123");  // try and map user_2 to user_1s superTokensUserId String errorMessage = null; try { UserIdMapping.createUserIdMapping(process.main, user_2.getSupertokensUserId(), user_1.getSupertokensUserId(), null, false); } catch (ServletException e) { errorMessage = e.getRootCause().getMessage(); } "<AssertPlaceHolder>"; assertEquals("Cannot create a userId mapping where the externalId is also a SuperTokens userID", errorMessage);  process.kill(); assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED)); }
[*] target: assertNotNull(errorMessage)
[-] pred: org. junit. Assert. assertNotNull ( errorMessage )
************************************
[+] input: testSetOnJoinResetMoney() { s.setOnJoinResetMoney(false); assertFalse(s.isOnJoinResetMoney()); s.setOnJoinResetMoney(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(s.isOnJoinResetMoney())
[-] pred: org. junit. Assert. assertTrue ( s. isOnJoinResetMoney() )
************************************
[+] input: givenOtherFailureReasonCode_whenCheckIfReasonCodeFailure_thenReturnTrue() { boolean result = mqttPubRecHandler.reasonCodeFailure(newMqttPubRecMsg(MqttReasonCodes.PubRec.PAYLOAD_FORMAT_INVALID)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { Object imageDescriptor = null; Object image = ReflectionUtils.invokeMethod( ManagerClass, "getImage(org.eclipse.jface.resource.ImageDescriptor)", imageDescriptor); "<AssertPlaceHolder>"; }
[*] target: assertNull(image)
[-] pred: org. junit. Assert. assertNull ( image )
************************************
[+] input: testWithCustomTemplate() {  // Needed to ensure that decimal points are exactly as expected below... Locale.setDefault(new Locale("en", "US"));  RatingValue ratingValue = RATING.calculate(TEST_VALUES); GitHubProject project = new GitHubProject("org", "test"); project.set(ratingValue);  String template = "%RATING_LABEL%|%SCORE_VALUE%|%MAX_SCORE%|%CONFIDENCE_LABEL%" + "|%CONFIDENCE_VALUE%|%MAX_CONFIDENCE%|%MAIN_SCORE_NAME%" + "|%MAIN_SCORE_DESCRIPTION%|%MAIN_SCORE_EXPLANATION%";  OssSecurityRatingMarkdownFormatter formatter = new OssSecurityRatingMarkdownFormatter(new OssSecurityGithubAdvisor(), template); String text = formatter.print(project);  "<AssertPlaceHolder>"; assertEquals("BAD|3.4|10.0|Max|10.0|10.0|security score for open-source projects||", text); }
[*] target: assertNotNull(text)
[-] pred: org. junit. Assert. assertNotNull ( text )
************************************
[+] input: canCreateInMemoryDatabaseEasily() { // without additional configuration try (ChronoGraph graph = ChronoGraph.FACTORY.create().inMemoryGraph().build()) { assertNotNull(graph); } // with additional configuration try (ChronoGraph graph = ChronoGraph.FACTORY.create().inMemoryGraph(config -> config.assumeCachedValuesAreImmutable(true)).build()) { "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(graph)
[-] pred: org. junit. Assert. assertNotNull ( graph )
************************************
[+] input: testFixInstance() { ICounter c1 = CounterImpl.getInstance(30, 30); ICounter c2 = CounterImpl.getInstance(30, 30); "<AssertPlaceHolder>"; }
[*] target: assertSame(c1, c2)
[-] pred: org. junit. Assert. assertSame ( c1, c2 )
************************************
[+] input: givenClientSessionDetails_whenGetSessionInfo_thenReturnExpectedResult() { UUID sessionId = UUID.randomUUID(); String clientId = "clientId"; MqttConnectMsg msg = getMqttConnectMsg(sessionId, clientId); SessionInfo actualSessionInfo = connectService.getSessionInfo(msg, sessionId, clientId, ClientType.DEVICE, 0, BrokerConstants.LOCAL_ADR);  SessionInfo expectedSessionInfo = ClientSessionInfoFactory.getSessionInfo( sessionId, false, SERVICE_ID, getClientInfo(clientId), getConnectionInfo(1000, actualSessionInfo.getConnectionInfo().getConnectedAt()), 0);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSessionInfo, actualSessionInfo)
[-] pred: org. junit. Assert. assertEquals ( expectedSessionInfo, actualSessionInfo )
************************************
[+] input: testSendMessage_toChat_failed() { // mock get token String getTokenUrl = String.format(this.getTokenUrl, corpid, corpsecret); WeComGetTokenResult weComGetTokenResult = MockWeComGetTokenResultFactory.create(); ResponseEntity<WeComGetTokenResult> weComGetTokenResultResponseEntity = new ResponseEntity(weComGetTokenResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(getTokenUrl), Mockito.eq(HttpMethod.GET), Mockito.any(), Mockito.any(Class.class))).willReturn(weComGetTokenResultResponseEntity);  // mock send msg to user String url = String.format(sendToChatUrl, weComGetTokenResult.getAccessToken()); WeComBaseResult weComBaseResult = MockWeComBaseResultFactory.create(1, "invalid token"); ResponseEntity<WeComBaseResult> weComBaseResultResponseEntity = new ResponseEntity(weComBaseResult, HttpStatus.OK); BDDMockito.given(restTemplate.exchange(Mockito.eq(url), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.any(Class.class))).willReturn(weComBaseResultResponseEntity);  String chatid = "1"; String msg = "test msg"; boolean result = weComSender.sendMessageToChat(chatid, msg);  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testRingTopology_leftNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.ringTopology(population, 2);  Chromosome exepcted_individual = population.get(1); Chromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: WeatherException { JSONTokener parser = new JSONTokener("{ "cod": "404"}"); OpenWeatherMapWeather weather = new OpenWeatherMapWeather(context, (JSONObject)parser.nextValue()); //        assertNotNull(weather); //        "<AssertPlaceHolder>"; }
[*] target: assertTrue(weather.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( weather. isEmpty() )
************************************
[+] input: checkOutgoingAccess() { FlowElement exclusiveGateway= EntityBuilder.buildExclusiveGateway(); FlowElement outgoningSequence = EntityBuilder.buildSequenceFlow2(); FlowElement outgoningSequence1 = EntityBuilder.buildSequenceFlow3(); Map<String, FlowElement> map = new HashMap<>(); map.put(exclusiveGateway.getKey(), exclusiveGateway); map.put(outgoningSequence.getKey(), outgoningSequence); map.put(outgoningSequence1.getKey(), outgoningSequence1); boolean access = false; try { exclusiveGatewayValidator.checkOutgoing(map, exclusiveGateway); access = true; Assert."<AssertPlaceHolder>"; } catch (DefinitionException e) { LOGGER.error("", e); Assert.assertTrue(access); } }
[*] target: assertTrue(access)
[-] pred: org. junit. Assert. assertTrue ( access )
************************************
[+] input: IOException { when(httpProvider.post(any(), any())).thenReturn("{"status": "success"}"); boolean response = stormProvider.killTopology("topology"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(response)
[-] pred: org. junit. Assert. assertTrue ( response )
************************************
[+] input: givenApplicationClientsLimitReached_whenCheckApplicationClientsLimit_thenFailure() { rateLimitService.setApplicationClientsLimit(1); when(rateLimitCacheService.incrementApplicationClientsCount()).thenReturn(2L);  SessionInfo sessionInfo = SessionInfo.builder().clientInfo(ClientInfo.builder().type(ClientType.APPLICATION).clientId(CLIENT_ID).build()).cleanStart(false).build(); boolean result = rateLimitService.checkApplicationClientsLimit(sessionInfo); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception {  String PEMContentsOriginal = "-----BEGIN PUBLIC KEY-----\n" + "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEVQ6XXBFwG9mAqijwD2DN9Pgq62l0\n" + "oJmXwpptVDHsonyZ3Wl4J5DHBKfRVgD7KUPEwN9lEMjBqVGNSYbI7KP3mw==\n" + "-----END PUBLIC KEY-----";  PublicKey publicKey = PEMToKey.getPemPublicKey(PEMContentsOriginal, "ECDSA");  String PEMContents = PEM.PublicKeyToPEMFormat(publicKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(PEMContentsOriginal, PEMContents)
[-] pred: org. junit. Assert. assertEquals ( PEMContentsOriginal, PEMContents )
************************************
[+] input: ExecutionException { Context ctx = ContextAdapter.adapt(studioContext); List<Callable<String>> callables = new ArrayList<>(); for (int i = 0; i < 20; i++) { String val = "" + i; callables.add(() -> val); } List<String> result = ctx.call(callables); List<String> expected = IntStream.range(0, 20).mapToObj(i -> "" + i).collect(Collectors.toList()); TestCase."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testWestNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.linearFive(population, 5);  Chromosome exepcted_individual = population.get(4); Chromosome returned_individual = neighbors.get(3);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testNullClass() { Config config = UnitTestBase.updateWithRequiredOptions( ComputerOptions.WORKER_COMBINER_CLASS, Null.class.getName() ); Object combiner = config.createObject( ComputerOptions.WORKER_COMBINER_CLASS, false); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(combiner)
[-] pred: org. junit. Assert. assertNull ( combiner )
************************************
[+] input: testSchemaDeserializationSchema() { final JsonRowDataDeserializationSchema expectedDeser = JsonRowDataDeserializationSchema.builder(PHYSICAL_TYPE, InternalTypeInfo.of(PHYSICAL_TYPE)).build();  final DynamicTableSource actualSource = createTableSource(SCHEMA, getAllOptions()); assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock; TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock = (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;  DeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat.createRuntimeDecoder( ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDeser, actualDeser)
[-] pred: org. junit. Assert. assertEquals ( expectedDeser, actualDeser )
************************************
[+] input: Exception { IPath workspacePath = new Path("/noSuchProject/andNoFolder"); IPath osPath = ProjectUtils.getOSPath(workspacePath); "<AssertPlaceHolder>"; }
[*] target: assertNull(osPath)
[-] pred: org. junit. Assert. assertNull ( osPath )
************************************
[+] input: testMostSouthEastNeighbour() {  this.constructPopulation();  Neighbourhood<Chromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<Chromosome> neighbors = new ArrayList<>();  neighbors = neighbourhood.CompactThirteen(population, 15);  Chromosome exepcted_individual = population.get(0); Chromosome returned_individual = neighbors.get(7);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: load_SearchRetrievesPackFloorNotPresent_CorrectResourcesFoundInPacks() { OrderedResourceRepository repository = makeMockRepository(Set.of( "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta", "textures/creeper_abcd.png", "zombie.png", "zombie.png.moremcmeta", "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta" ));  TextureLoader<Integer> loader = new TextureLoader<>( (texStream, metadata) -> 1, ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> { Set<? extends ResourceLocation> locations = resourceRepository.list( (fileName) -> fileName.endsWith("_abcd.png") );  Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith( ResourceLocation.parse("textures/bat_abcd.png"), ResourceLocation.parse("textures/bat_efgh.png") ); assertTrue(pack.isPresent()); assertTrue(pack.get().resource(ResourceLocation.parse("zombie.png")).isPresent()); assertFalse(pack.get().resource(ResourceLocation.parse("zombie2.png")).isPresent()); assertFalse(resourceRepository.highestPackWith(ResourceLocation.parse("dummy")).isPresent());  return locations.stream().collect(Collectors.toMap( Function.identity(), (location) -> new MockMetadataView(List.of(location.getPath())) )); }), LOGGER );  Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");  "<AssertPlaceHolder>"; assertTrue(locations.containsKey(ResourceLocation.parse("textures/bat_abcd.png"))); assertTrue(locations.containsKey(ResourceLocation.parse("textures/creeper_abcd.png"))); }
[*] target: assertEquals(2, locations.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locations. size ( ) )
************************************
[+] input: Exception { PowerMockito.mockStatic(Watcher.class); String[] args = {"echo hello"}; Process process = PowerMockito.mock(Process.class); PowerMockito.mockStatic(Runtime.class); PowerMockito.when(Runtime.getRuntime().exec(args)).thenReturn(process); UpgradeStatus upgradeStatus = new UpgradeStatus(); PowerMockito.when(Watcher.watch(process)).thenReturn(upgradeStatus); UpgradeStatus result = UpgraderExecutor.executeUpgrade(args); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(upgradeStatus, result)
[-] pred: org. junit. Assert. assertEquals ( upgradeStatus, result )
************************************
[+] input: InterruptedException { Node node1 = Node.instanceOf("127.0.0.1:10001"); NodeEntry ne1 = new NodeEntry(node1); Thread.sleep(1); Node node2 = Node.instanceOf("127.0.0.1:10002"); NodeEntry ne2 = new NodeEntry(node2); TimeComparator tc = new TimeComparator(); int result = tc.compare(ne1, ne2); Assert."<AssertPlaceHolder>";  }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: Exception { qifParserTest.should_parse_multiple_accounts(); doImport();  List<Account> accounts = db.getAllAccountsList(); "<AssertPlaceHolder>";  Account a = accounts.get(0); assertEquals("My Bank Account", a.title); assertEquals(AccountType.BANK.name(), a.type);  List<TransactionInfo> transactions = db.getTransactionsForAccount(a.id); assertEquals(2, transactions.size());  TransactionInfo t = transactions.get(0); assertEquals(DateTime.date(2011, 2, 8).atMidnight().asLong(), t.dateTime); assertEquals(-2000, t.fromAmount);  t = transactions.get(1); assertEquals(DateTime.date(2011, 1, 2).atMidnight().asLong(), t.dateTime); assertEquals(5400, t.fromAmount);  a = accounts.get(1); assertEquals("My Cash Account", a.title); assertEquals(AccountType.CASH.name(), a.type);  transactions = db.getTransactionsForAccount(a.id); assertEquals(3, transactions.size());  t = transactions.get(0); assertEquals(DateTime.date(2011, 2, 8).atMidnight().asLong(), t.dateTime); assertEquals(1000, t.fromAmount);  t = transactions.get(1); assertEquals(DateTime.date(2011, 2, 7).atMidnight().asLong(), t.dateTime); assertEquals(-2345, t.fromAmount);  t = transactions.get(2); assertEquals(DateTime.date(2011, 1, 1).atMidnight().asLong(), t.dateTime); assertEquals(-6780, t.fromAmount); }
[*] target: assertEquals(2, accounts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, accounts. size ( ) )
************************************
