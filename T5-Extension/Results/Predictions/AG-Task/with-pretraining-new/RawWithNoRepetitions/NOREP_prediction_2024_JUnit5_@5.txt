************************************
[+] input: emptyBytesHasSize0() { CodePointCharStream s = CharStreams.fromString(""); assertEquals(0, s.size()); assertEquals(0, s.index()); "<AssertPlaceHolder>"; }
toString() { return getText(Interval.Companion.of(0, size - 1)); }
[*] target: assertEquals("", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( """", s. toString ( ) )

[*] target: assertEquals("", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( """", s. toString() ( ) )

[*] target: assertEquals("", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( """", s. toString() ) )

[*] target: assertEquals("", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. toString() ( ). length ( ) )

[*] target: assertEquals("", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( 0 ), s )

************************************
************************************
[+] input: emptyBytesLookAheadReturnsEOF() { CodePointCharStream s = CharStreams.fromString(""); assertEquals(IntStream.EOF, s.LA(1)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 6, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 3, s. index() ( ) )

************************************
************************************
[+] input: singleLatinCodePointHasSize1() { CodePointCharStream s = CharStreams.fromString("X"); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(1, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size() )

[*] target: assertEquals(1, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. size() )

[*] target: assertEquals(1, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size()

[*] target: assertEquals(1, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size() ) )

[*] target: assertEquals(1, s.size())
[-] pred:  . size()

************************************
************************************
[+] input: consumingSingleLatinCodePointShouldMoveIndex() { CodePointCharStream s = CharStreams.fromString("X"); assertEquals(0, s.index()); s.consume(); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 0 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index(). get ( 0 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() { 0 )

************************************
************************************
[+] input: consumingPastSingleLatinCodePointShouldThrow() { CodePointCharStream s = CharStreams.fromString("X"); s.consume(); IllegalStateException illegalStateException = "<AssertPlaceHolder>"; assertEquals("cannot consume EOF", illegalStateException.getMessage()); }
consume() { if (size - position == 0) { assert LA(1) == IntStream.EOF; throw new IllegalStateException("cannot consume EOF"); } position = position + 1; }
[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertNotNull ( illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( null, illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( 0, illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( s, illegalStateException. consume() ( ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( s ), illegalStateException )

************************************
************************************
[+] input: singleLatinCodePointLookAheadShouldReturnCodePoint() { CodePointCharStream s = CharStreams.fromString("X"); assertEquals('X', s.LA(1)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 4, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

************************************
************************************
[+] input: multipleLatinCodePointsLookAheadShouldReturnCodePoints() { CodePointCharStream s = CharStreams.fromString("XYZ"); assertEquals('X', s.LA(1)); assertEquals(0, s.index()); assertEquals('Y', s.LA(2)); assertEquals(0, s.index()); assertEquals('Z', s.LA(3)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertThat ( s. index() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertThat ( s. index() ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertThat ( s. index() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertThat ( s. index() ( ). 0 ), org. hamcrest. CoreMatchers. is ( 0 ) )

************************************
************************************
[+] input: singleCJKCodePointHasSize1() { CodePointCharStream s = CharStreams.fromString("\u611B"); assertEquals(1, s.size()); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 4, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  . index()

************************************
************************************
[+] input: consumingSingleCJKCodePointShouldMoveIndex() { CodePointCharStream s = CharStreams.fromString("\u611B"); assertEquals(0, s.index()); s.consume(); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 0 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 2 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 6 ) )

************************************
************************************
[+] input: consumingPastSingleCJKCodePointShouldThrow() { CodePointCharStream s = CharStreams.fromString("\u611B"); s.consume(); IllegalStateException illegalStateException = "<AssertPlaceHolder>"; assertEquals("cannot consume EOF", illegalStateException.getMessage()); }
consume() { if (size - position == 0) { assert LA(1) == IntStream.EOF; throw new IllegalStateException("cannot consume EOF"); } position = position + 1; }
[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertNotNull ( illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertTrue ( illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( 0, illegalStateException. consume() ( s ) )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( s ), illegalStateException )

[*] target: assertThrows(IllegalStateException.class, s::consume)
[-] pred:  org. junit. Assert. assertEquals ( 0, illegalStateException. consume() ( s, null ) )

************************************
************************************
[+] input: singleCJKCodePointLookAheadShouldReturnCodePoint() { CodePointCharStream s = CharStreams.fromString("\u611B"); assertEquals(0x611B, s.LA(1)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 3, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 6, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() ( ) )

************************************
************************************
[+] input: singleCJKCodePointLookAheadPastEndShouldReturnEOF() { CodePointCharStream s = CharStreams.fromString("\u611B"); assertEquals(IntStream.EOF, s.LA(2)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() { } )

************************************
************************************
[+] input: singleEmojiCodePointHasSize1() { CodePointCharStream s = CharStreams.fromString( new StringBuilder().appendCodePoint(0x1F4A9).toString()); assertEquals(1, s.size()); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  0, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  0 ) { } index()

************************************
************************************
[+] input: consumingSingleEmojiCodePointShouldMoveIndex() { CodePointCharStream s = CharStreams.fromString( new StringBuilder().appendCodePoint(0x1F4A9).toString()); assertEquals(0, s.index()); s.consume(); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 0 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 6 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 0 ). index ( ) )

************************************
************************************
[+] input: consumingPastEndOfEmojiCodePointWithShouldThrow() { CodePointCharStream s = CharStreams.fromString( new StringBuilder().appendCodePoint(0x1F4A9).toString()); assertEquals(0, s.index()); s.consume(); "<AssertPlaceHolder>"; IllegalStateException illegalStateException = assertThrows(IllegalStateException.class, s::consume); assertEquals("cannot consume EOF", illegalStateException.getMessage()); }
index() { return position; }
[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( 0 ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(1, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index(). get ( ) )

[*] target: assertEquals(1, s.index())
[-] pred:  org

************************************
************************************
[+] input: singleEmojiCodePointLookAheadShouldReturnCodePoint() { CodePointCharStream s = CharStreams.fromString( new StringBuilder().appendCodePoint(0x1F4A9).toString()); assertEquals(0x1F4A9, s.LA(1)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( ""0x1F4A9, s.LA(1)"", s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( false ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  . index() ( ) )

************************************
************************************
[+] input: singleEmojiCodePointLookAheadPastEndShouldReturnEOF() { CodePointCharStream s = CharStreams.fromString( new StringBuilder().appendCodePoint(0x1F4A9).toString()); assertEquals(IntStream.EOF, s.LA(2)); "<AssertPlaceHolder>"; }
index() { return position; }
[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() ( ) )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. index() )

[*] target: assertEquals(0, s.index())
[-] pred:  org

************************************
************************************
[+] input: getTextWithEmoji() { CodePointCharStream s = CharStreams.fromString( new StringBuilder("01234") .appendCodePoint(0x1F522) .append("6789") .toString()); "<AssertPlaceHolder>"; }
toString() { return getText(Interval.Companion.of(0, size - 1)); }
[*] target: assertEquals("34\uD83D\uDD2267", s.getText(Interval.Companion.of(3, 7)))
[-] pred:  org. junit. Assert. assertEquals ( 6, s. toString ( ) )

[*] target: assertEquals("34\uD83D\uDD2267", s.getText(Interval.Companion.of(3, 7)))
[-] pred:  org. junit. Assert. assertEquals ( 6, s. toString() ( ) )

[*] target: assertEquals("34\uD83D\uDD2267", s.getText(Interval.Companion.of(3, 7)))
[-] pred:  org. junit. Assert. assertEquals ( 12, s. toString ( ) )

[*] target: assertEquals("34\uD83D\uDD2267", s.getText(Interval.Companion.of(3, 7)))
[-] pred:  . toString ( ) )

[*] target: assertEquals("34\uD83D\uDD2267", s.getText(Interval.Companion.of(3, 7)))
[-] pred:  )

************************************
************************************
[+] input: toStringWithLatin() { CodePointCharStream s = CharStreams.fromString("0123456789"); "<AssertPlaceHolder>"; }
toString() { return getText(Interval.Companion.of(0, size - 1)); }
[*] target: assertEquals("0123456789", s.toString())
[-] pred:  org. junit. Assert. assertNotNull ( s. toString() ( ) )

[*] target: assertEquals("0123456789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( assertNotNull, s. toString() ( ) )

[*] target: assertEquals("0123456789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( repository, s. toString() ( ) )

[*] target: assertEquals("0123456789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, s. toString() ) )

[*] target: assertEquals("0123456789", s.toString())
[-] pred:  . toString ( ) )

************************************
************************************
[+] input: toStringWithCJK() { CodePointCharStream s = CharStreams.fromString("01234\u40946789"); "<AssertPlaceHolder>"; }
toString() { return getText(Interval.Companion.of(0, size - 1)); }
[*] target: assertEquals("01234\u40946789", s.toString())
[-] pred:  org. junit. Assert. assertNotNull ( s. toString() ( ) )

[*] target: assertEquals("01234\u40946789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( string, s. toString() ( ) )

[*] target: assertEquals("01234\u40946789", s.toString())
[-] pred:  org. junit. Assert. assertNotNull ( s. toString ( ) )

[*] target: assertEquals("01234\u40946789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( assertNotNull, s. toString() ( ) )

[*] target: assertEquals("01234\u40946789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, s. toString ( ) )

************************************
************************************
[+] input: toStringWithEmoji() { CodePointCharStream s = CharStreams.fromString( new StringBuilder("01234") .appendCodePoint(0x1F522) .append("6789") .toString()); "<AssertPlaceHolder>"; }
toString() { return getText(Interval.Companion.of(0, size - 1)); }
[*] target: assertEquals("01234\uD83D\uDD226789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( 6, s. toString ( ) )

[*] target: assertEquals("01234\uD83D\uDD226789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( 6, s. toString() ( ) )

[*] target: assertEquals("01234\uD83D\uDD226789", s.toString())
[-] pred:  org. junit. Assert. assertEquals ( 12, s. toString() ( ) )

[*] target: assertEquals("01234\uD83D\uDD226789", s.toString())
[-] pred:  . toString ( ) )

[*] target: assertEquals("01234\uD83D\uDD226789", s.toString())
[-] pred:  )

************************************
************************************
[+] input: asciiContentsShouldUse8BitBuffer() { CodePointCharStream s = CharStreams.fromString("hello"); assertTrue(s.getInternalStorage() instanceof byte[]); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size() )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 8, s. size() )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size()

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 8, s. size() ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org

************************************
************************************
[+] input: bmpContentsShouldUse16BitBuffer() { CodePointCharStream s = CharStreams.fromString("hello \u4E16\u754C"); assertTrue(s.getInternalStorage() instanceof char[]); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 16, s. size() )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 4, s. size() )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. size() )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 8, s. size() )

[*] target: assertEquals(8, s.size())
[-] pred:  org

************************************
************************************
[+] input: smpContentsShouldUse32BitBuffer() { CodePointCharStream s = CharStreams.fromString("hello \uD83C\uDF0D"); assertTrue(s.getInternalStorage() instanceof int[]); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size() )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 4, s. size() )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, s. size() )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 4, s. size() ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. size() ) )

************************************
************************************
[+] input: fromBMPStringHasExpectedSize() { CharStream s = CharStreams.fromString("hello"); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello", s.toString()); }
fromString(String s) { return fromString(s, IntStream.UNKNOWN_SOURCE_NAME); }
[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(String s ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(Strings )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(String s )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(Strings ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org

************************************
************************************
[+] input: fromSMPStringHasExpectedSize() { CharStream s = CharStreams.fromString( "hello \uD83C\uDF0E"); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); }
fromString(String s) { return fromString(s, IntStream.UNKNOWN_SOURCE_NAME); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(Strings ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(String ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(String s ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromString(String. length )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path test = new File(tempDir.toString(), "test").toPath(); Files.write(test, "hello".getBytes(StandardCharsets.UTF_8)); CharStream s = CharStreams.fromPath(test); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello", s.toString()); assertEquals(test.toString(), s.getSourceName()); }
fromPath(Path path) throws IOException { return fromPath(path, StandardCharsets.UTF_8); }
[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. length ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( test, CharStream )

[*] target: assertEquals(5, s.size())
[-] pred:  org

[*] target: assertEquals(5, s.size())
[-] pred:  )

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); CharStream s = CharStreams.fromPath(p); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); assertEquals(p.toString(), s.getSourceName()); }
fromPath(Path path) throws IOException { return fromPath(path, StandardCharsets.UTF_8); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. length ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( p ), new java. lang. String ( s ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( p ), text )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello".getBytes(StandardCharsets.UTF_8)); try (InputStream is = Files.newInputStream(p)) { CharStream s = CharStreams.fromStream(is); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello", s.toString()); } }
fromStream(InputStream is) throws IOException { return fromStream(is, StandardCharsets.UTF_8); }
[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. getWindowingStrategy ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. compareTo ( p ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s..()); ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. compareTo ( b ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); try (InputStream is = Files.newInputStream(p)) { CharStream s = CharStreams.fromStream(is); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); } }
fromStream(InputStream is) throws IOException { return fromStream(is, StandardCharsets.UTF_8); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. compareTo ( p ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s..()); ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. getWindowingStrategy ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. VAR_0 ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello".getBytes(StandardCharsets.UTF_8)); try (SeekableByteChannel c = Files.newByteChannel(p)) { CharStream s = CharStreams.fromChannel( c, 4096, CodingErrorAction.REPLACE, "foo"); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello", s.toString()); assertEquals("foo", s.getSourceName()); } }
fromChannel( ReadableByteChannel channel, int bufferSize, CodingErrorAction decodingErrorAction, String sourceName) throws IOException { return fromChannel(channel, StandardCharsets.UTF_8, bufferSize, decodingErrorAction, sourceName, -1); }
[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteErrorAction ( p ). position ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteChannel channel, java.lang.Float. toString ( p ). length ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteChannel channel, java.lang.Float. toString ( c ). length ( ) )

[*] target: assertEquals(5, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); try (SeekableByteChannel c = Files.newByteChannel(p)) { CharStream s = CharStreams.fromChannel( c, 4096, CodingErrorAction.REPLACE, "foo"); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); assertEquals("foo", s.getSourceName()); } }
fromChannel( ReadableByteChannel channel, int bufferSize, CodingErrorAction decodingErrorAction, String sourceName) throws IOException { return fromChannel(channel, StandardCharsets.UTF_8, bufferSize, decodingErrorAction, sourceName, -1); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteChannel channel, and decodingErrorAction, c )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( p. fromChannel( ReadableByteChannelxx ), s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteChannel channel, and decodingErrorAction )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); try (SeekableByteChannel c = Files.newByteChannel(p)) { CharStream s = CharStreams.fromChannel( c, // Note this buffer size ensures the SMP code point // straddles the boundary of two buffers 8, CodingErrorAction.REPLACE, "foo"); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); } }
fromChannel( ReadableByteChannel channel, int bufferSize, CodingErrorAction decodingErrorAction, String sourceName) throws IOException { return fromChannel(channel, StandardCharsets.UTF_8, bufferSize, decodingErrorAction, sourceName, -1); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s. fromChannel( ReadableByteErrorAction ( p ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s. fromChannel( ReadableByteChannel channel, and decodingErrorAction )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s. fromChannel( ReadableByteChannel channel, and decodingErrorAction, c )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromChannel( ReadableByteChannel channel, and decodingErrorAction, c )

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); CharStream s = CharStreams.fromFileName(p.toString()); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); assertEquals(p.toString(), s.getSourceName());  }
fromFileName(String fileName) throws IOException { return fromPath(Paths.get(fileName), StandardCharsets.UTF_8); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStreams )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, assertNotNull )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \u00CA\u00FE".getBytes(StandardCharsets.ISO_8859_1)); CharStream s = CharStreams.fromFileName(p.toString(), StandardCharsets.ISO_8859_1); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \u00CA\u00FE", s.toString()); assertEquals(p.toString(), s.getSourceName()); }
fromFileName(String fileName, Charset charset) throws IOException { return fromPath(Paths.get(fileName), charset); }
[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p,, s )

[*] target: assertEquals(8, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, w )

[*] target: assertEquals(8, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_8)); try (Reader r = Files.newBufferedReader(p, StandardCharsets.UTF_8)) { CharStream s = CharStreams.fromReader(r); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); } }
fromReader(Reader r) throws IOException { return fromReader(r, IntStream.UNKNOWN_SOURCE_NAME); }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromReader ( p ).()); ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 0 ), s. fromReader ( p ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, s. fromReader(rs. get());Count ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 0 ), s. fromReader ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); Files.write(p, "hello \uD83C\uDF0E".getBytes(StandardCharsets.UTF_16LE)); CharStream s = CharStreams.fromPath(p, StandardCharsets.UTF_16LE); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); assertEquals(p.toString(), s.getSourceName()); }
fromPath(Path path, Charset charset) throws IOException { long size = Files.size(path); try (ReadableByteChannel channel = Files.newByteChannel(path)) { return fromChannel( channel, charset, DEFAULT_BUFFER_SIZE, CodingErrorAction.REPLACE, path.toString(), size); } }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream. get ( ) )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream. position )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStreams )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream. array ( ) )

************************************
************************************
[+] input: Exception { Path p = getTestFile(tempDir); // UTF-32 isn't popular enough to have an entry in StandardCharsets. Charset c = Charset.forName("UTF-32LE"); Files.write(p, "hello \uD83C\uDF0E".getBytes(c)); CharStream s = CharStreams.fromPath(p, c); "<AssertPlaceHolder>"; assertEquals(0, s.index()); assertEquals("hello \uD83C\uDF0E", s.toString()); assertEquals(p.toString(), s.getSourceName()); }
fromPath(Path path, Charset charset) throws IOException { long size = Files.size(path); try (ReadableByteChannel channel = Files.newByteChannel(path)) { return fromChannel( channel, charset, DEFAULT_BUFFER_SIZE, CodingErrorAction.REPLACE, path.toString(), size); } }
[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStream )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertNotNull ( s )

[*] target: assertEquals(7, s.size())
[-] pred:  org. junit. Assert. assertEquals ( p, CharStreams )

[*] target: assertEquals(7, s.size())
[-] pred:  org

************************************
************************************
[+] input: org.antlr.runtime.RecognitionException { Grammar g = new Grammar( "grammar Calc;\n" + "s :  expr EOF\n" + "  ;\n" + "expr\n" + "  :  INT            # number\n" + "  |  expr (MUL | DIV) expr  # multiply\n" + "  |  expr (ADD | SUB) expr  # add\n" + "  ;\n" + "\n" + "INT : [0-9]+;\n" + "MUL : '*';\n" + "DIV : '/';\n" + "ADD : '+';\n" + "SUB : '-';\n" + "WS : [ \\t]+ -> channel(HIDDEN);"); String interpString = Tool.generateInterpreterData(g); Path interpFile = Files.createTempFile(null, null); Files.write(interpFile, interpString.getBytes(StandardCharsets.UTF_8));  InterpreterDataReader.InterpreterData interpreterData = InterpreterDataReader.parseFile(interpFile.toString()); Field atnField = interpreterData.getClass().getDeclaredField("atn"); Field vocabularyField = interpreterData.getClass().getDeclaredField("vocabulary"); Field ruleNamesField = interpreterData.getClass().getDeclaredField("ruleNames"); Field channelsField = interpreterData.getClass().getDeclaredField("channels"); Field modesField = interpreterData.getClass().getDeclaredField("modes");  atnField.setAccessible(true); vocabularyField.setAccessible(true); ruleNamesField.setAccessible(true); channelsField.setAccessible(true); modesField.setAccessible(true);  ATN atn = (ATN) atnField.get(interpreterData); Vocabulary vocabulary = (Vocabulary) vocabularyField.get(interpreterData); String[] literalNames = ((VocabularyImpl) vocabulary).getLiteralNames(); String[] symbolicNames = ((VocabularyImpl) vocabulary).getSymbolicNames(); List<String> ruleNames = castList(ruleNamesField.get(interpreterData), String.class); List<String> channels = castList(channelsField.get(interpreterData), String.class); List<String> modes = castList(modesField.get(interpreterData), String.class);  "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"s","expr"}, ruleNames.toArray()); assertArrayEquals(new String[]{"", "", "'*'", "'/'", "'+'", "'-'", ""}, literalNames); assertArrayEquals(new String[]{"", "INT", "MUL", "DIV", "ADD", "SUB", "WS"}, symbolicNames); assertNull(channels); assertNull(modes);  IntegerList serialized = ATNSerializer.Companion.getSerialized(atn); assertEquals(ATNDeserializer.SERIALIZED_VERSION, serialized.get(0)); }
parseFile(String fileName) { InterpreterData result = new InterpreterData(); result.ruleNames = new ArrayList<String>();  try (BufferedReader br = new BufferedReader(new FileReader(fileName))) { String line; List<String> literalNames = new ArrayList<>(); List<String> symbolicNames = new ArrayList<>();  line = br.readLine(); if ( !line.equals("token literal names:") ) throw new RuntimeException("Unexpected data entry"); while ((line = br.readLine()) != null) { if ( line.isEmpty() ) break; literalNames.add(line.equals("null") ? "" : line); }  line = br.readLine(); if ( !line.equals("token symbolic names:") ) throw new RuntimeException("Unexpected data entry"); while ((line = br.readLine()) != null) { if ( line.isEmpty() ) break; symbolicNames.add(line.equals("null") ? "" : line); }  result.vocabulary = new VocabularyImpl(literalNames.toArray(new String[0]), symbolicNames.toArray(new String[0]), null);  line = br.readLine(); if ( !line.equals("rule names:") ) throw new RuntimeException("Unexpected data entry"); while ((line = br.readLine()) != null) { if ( line.isEmpty() ) break; result.ruleNames.add(line); }  line = br.readLine(); if ( line.equals("channel names:") ) { // Additional lexer data. result.channels = new ArrayList<String>(); while ((line = br.readLine()) != null) { if ( line.isEmpty() ) break; result.channels.add(line); }  line = br.readLine(); if ( !line.equals("mode names:") ) throw new RuntimeException("Unexpected data entry"); result.modes = new ArrayList<String>(); while ((line = br.readLine()) != null) { if ( line.isEmpty() ) break; result.modes.add(line); } }  line = br.readLine(); if ( !line.equals("atn:") ) throw new RuntimeException("Unexpected data entry"); line = br.readLine(); String[] elements = line.substring(1,line.length()-1).split(","); int[] serializedATN = new int[elements.length];  for (int i = 0; i < elements.length; ++i) { // ignore [...] on ends serializedATN[i] = Integer.parseInt(elements[i].trim()); }  ATNDeserializer deserializer = new ATNDeserializer(); result.atn = deserializer.deserialize(serializedATN); } catch (java.io.IOException e) { // We just swallow the error and return empty objects instead. }  return result; }
[*] target: assertEquals(6, vocabulary.getMaxTokenType())
[-] pred:  org. junit. Assert. assertEquals ( 0, modes. size ( ) )

[*] target: assertEquals(6, vocabulary.getMaxTokenType())
[-] pred:  org. junit. Assert. assertEquals ( 5, modes. size ( ) )

[*] target: assertEquals(6, vocabulary.getMaxTokenType())
[-] pred:  org. junit. Assert. assertEquals ( 2, modes. size ( ) )

[*] target: assertEquals(6, vocabulary.getMaxTokenType())
[-] pred:  org. junit. Assert. assertEquals ( 0, mode. size ( ) )

[*] target: assertEquals(6, vocabulary.getMaxTokenType())
[-] pred:  org. junit. Assert. assertEquals ( 1, modes. size ( ) )

************************************
************************************
[+] input: Exception { LexerGrammar g = new LexerGrammar( "lexer grammar T;\n"+ "A : 'a';\n" + "B : 'b';\n" + "C : 'c';\n"); LexerInterpreter lexEngine = g.createLexerInterpreter(CharStreams.fromString("abc")); CommonTokenStream stream = new CommonTokenStream(lexEngine); stream.fill(); TokenStreamRewriter tokens = new TokenStreamRewriter(stream); tokens.insertBefore(0, "0"); String result = tokens.getText(); String expecting = "0abc"; "<AssertPlaceHolder>"; }
getText() { return getText(DEFAULT_PROGRAM_NAME, Interval.Companion.of(0,tokens.size()-1)); }
[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText() ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertEquals(expecting, result)
[-] pred:  org

************************************
************************************
[+] input: Exception { LexerGrammar g = new LexerGrammar( "lexer grammar T;\n"+ "A : 'a';\n" + "B : 'b';\n" + "C : 'c';\n"); String input = "aa"; LexerInterpreter lexEngine = g.createLexerInterpreter(CharStreams.fromString(input)); CommonTokenStream stream = new CommonTokenStream(lexEngine); stream.fill(); TokenStreamRewriter tokens = new TokenStreamRewriter(stream); tokens.insertBefore(0, "<b>"); tokens.insertAfter(0, "</b>"); tokens.insertBefore(1, "<b>"); tokens.insertAfter(1, "</b>"); String result = tokens.getText(); String expecting = "<b>a</b><b>a</b>"; // fails with <b>a<b></b>a</b>" "<AssertPlaceHolder>"; }
getText() { return getText(DEFAULT_PROGRAM_NAME, Interval.Companion.of(0,tokens.size()-1)); }
[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText() ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getTextDelta ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertEquals(expecting, result)
[-] pred:  org

************************************
************************************
[+] input: Exception { LexerGrammar g = new LexerGrammar( "lexer grammar T;\n"+ "A : 'a';\n" + "B : 'b';\n" + "C : 'c';\n"); String input = "aa"; LexerInterpreter lexEngine = g.createLexerInterpreter(CharStreams.fromString(input)); CommonTokenStream stream = new CommonTokenStream(lexEngine); stream.fill(); TokenStreamRewriter tokens = new TokenStreamRewriter(stream); tokens.insertBefore(0, "<p>"); tokens.insertBefore(0, "<b>"); tokens.insertAfter(0, "</p>"); tokens.insertAfter(0, "</b>"); tokens.insertBefore(1, "<b>"); tokens.insertAfter(1, "</b>"); String result = tokens.getText(); String expecting = "<b><p>a</p></b><b>a</b>"; "<AssertPlaceHolder>"; }
getText() { return getText(DEFAULT_PROGRAM_NAME, Interval.Companion.of(0,tokens.size()-1)); }
[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText() ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText MONTH ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

[*] target: assertEquals(expecting, result)
[-] pred:  org

************************************
************************************
[+] input: Exception { LexerGrammar g = new LexerGrammar( "lexer grammar T;\n"+ "A : 'a';\n" + "B : 'b';\n" + "C : 'c';\n"); String input = "ab"; LexerInterpreter lexEngine = g.createLexerInterpreter(CharStreams.fromString(input)); CommonTokenStream stream = new CommonTokenStream(lexEngine); stream.fill(); TokenStreamRewriter tokens = new TokenStreamRewriter(stream); tokens.insertBefore(0, "<p>"); tokens.insertBefore(0, "<b>"); tokens.insertBefore(0, "<div>"); tokens.insertAfter(0, "</p>"); tokens.insertAfter(0, "</b>"); tokens.insertAfter(0, "</div>"); tokens.insertBefore(1, "!"); String result = tokens.getText(); String expecting = "<div><b><p>a</p></b></div>!b"; "<AssertPlaceHolder>"; }
getText() { return getText(DEFAULT_PROGRAM_NAME, Interval.Companion.of(0,tokens.size()-1)); }
[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText() ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getText MONTH ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result. getTextScheme ( ) )

[*] target: assertEquals(expecting, result)
[-] pred:  org. junit. Assert. assertEquals ( expecting, result )

************************************
************************************
[+] input: testParseCharValueFromGrammarStringLiteral() { assertInstanceOf(CharParseResult.Invalid.class, GrammarLiteralParser.parseCharFromStringLiteral(null)); assertInstanceOf(CharParseResult.Invalid.class, GrammarLiteralParser.parseCharFromStringLiteral("")); assertInstanceOf(CharParseResult.Invalid.class, GrammarLiteralParser.parseCharFromStringLiteral("b")); "<AssertPlaceHolder>"; }
parseCharFromStringLiteral(String s) { return parseChar(s, true, true); }
[*] target: assertEquals(111, ((CharParseResult.CodePoint)GrammarLiteralParser.parseCharFromStringLiteral("'o'")).codePoint)
[-] pred:  org. junit. Assert. assertNotNull ( parser. parseCharFromStringLiteralFromStringLiteral(null)); ) )

[*] target: assertEquals(111, ((CharParseResult.CodePoint)GrammarLiteralParser.parseCharFromStringLiteral("'o'")).codePoint)
[-] pred:  org. junit. Assert. assertNotNull ( clazz. parseCharFromStringLiteralFromStringLiteral(null)); ) )

[*] target: assertEquals(111, ((CharParseResult.CodePoint)GrammarLiteralParser.parseCharFromStringLiteral("'o'")).codePoint)
[-] pred:  org. junit. Assert. assertNotNull ( clazz. parseCharFromStringLiteralFromStringLiteralFromStringLiteral(null)); )

[*] target: assertEquals(111, ((CharParseResult.CodePoint)GrammarLiteralParser.parseCharFromStringLiteral("'o'")).codePoint)
[-] pred:  )

[*] target: assertEquals(111, ((CharParseResult.CodePoint)GrammarLiteralParser.parseCharFromStringLiteral("'o'")).codePoint)
[-] pred:  org

************************************
************************************
[+] input: testSeekPastEOF() { CharStream input = createStream(""); assertEquals(0, input.index()); input.seek(1); "<AssertPlaceHolder>"; }
index() { return currentCharIndex; }
[*] target: assertEquals(0, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, input. index() ( ) )

[*] target: assertEquals(0, input.index())
[-] pred:  org. junit. Assert. assertEquals ((0, input.index()); input.seek(1); "< }, input. index() )

[*] target: assertEquals(0, input.index())
[-] pred:  org. junit. Assert. assertTrue ( ( ( input. index() ( ) ) > 0 ) )

[*] target: assertEquals(0, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 0, input. index() ( 0 ) )

[*] target: assertEquals(0, input.index())
[-] pred:  org

************************************
************************************
[+] input: testGetTextBeforeBufferStart() { CharStream input = createStream("xyz"); input.consume(); int m1 = input.mark(); "<AssertPlaceHolder>"; assertThrows(UnsupportedOperationException.class, () -> input.getText(new Interval(0, 1))); }
index() { return currentCharIndex; }
[*] target: assertEquals(1, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, m1 )

[*] target: assertEquals(1, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, input. index() ( ) )

[*] target: assertEquals(1, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 1, input. index() ( ) )

[*] target: assertEquals(1, input.index())
[-] pred:  org. junit. Assert. assertEquals ( 2, input. index() )

[*] target: assertEquals(1, input.index())
[-] pred:  org

************************************
************************************
[+] input: testGetTextInMarkedRange() { CharStream input = createStream("xyz"); input.consume(); int m1 = input.mark(); assertEquals(1, input.index()); input.consume(); input.consume(); "<AssertPlaceHolder>"; }
consume() { if (LA(1) == IntStream.EOF) { throw new IllegalStateException("cannot consume EOF"); }  // buf always has at least data[p==0] in this method due to ctor lastChar = data[p];   // track last char for LA(-1)  if (p == n-1 && numMarkers==0) { n = 0; p = -1; // p++ will leave this at 0 lastCharBufferStart = lastChar; }  p++; currentCharIndex++; sync(1); }
[*] target: assertEquals("yz", input.getText(new Interval(1, 2)))
[-] pred:  org. junit. Assert. assertEquals ( m1, input. consume() ( ) )

[*] target: assertEquals("yz", input.getText(new Interval(1, 2)))
[-] pred:  org. junit. Assert. assertEquals ( m1, input. consume() { } )

[*] target: assertEquals("yz", input.getText(new Interval(1, 2)))
[-] pred:  org. junit. Assert. assertEquals ( input. consume() ( ), m1 )

[*] target: assertEquals("yz", input.getText(new Interval(1, 2)))
[-] pred:  org. junit. Assert. assertEquals ( m1, input. consume() )

[*] target: assertEquals("yz", input.getText(new Interval(1, 2)))
[-] pred:  org

************************************
************************************
[+] input: testLastChar() { CharStream input = createStream("abcdef");  input.consume(); assertEquals('a', input.LA(-1));  int m1 = input.mark(); input.consume(); input.consume(); input.consume(); assertEquals('d', input.LA(-1));  input.seek(2); assertEquals('b', input.LA(-1));  input.release(m1); input.seek(3); assertEquals('c', input.LA(-1)); // this special case is not required by the IntStream interface, but // UnbufferedCharStream allows it so we have to make sure the resulting // state is consistent input.seek(2); "<AssertPlaceHolder>"; }
LA(int i) { if ( i==-1 ) return lastChar; // special case sync(i); int index = p + i - 1; if ( index < 0 ) throw new IndexOutOfBoundsException(); if ( index >= n ) return IntStream.EOF; return data[index]; }
[*] target: assertEquals('b', input.LA(-1))
[-] pred:  org. junit. Assert. assertEquals ( m1, input. LA(int i ) )

[*] target: assertEquals('b', input.LA(-1))
[-] pred:  org. junit. Assert. assertEquals ( 15, input. LA(int i ) )

[*] target: assertEquals('b', input.LA(-1))
[-] pred:  org. junit. Assert. assertEquals ( input. LA(int i ), m1 )

[*] target: assertEquals('b', input.LA(-1))
[-] pred:  org. junit. Assert. assertEquals ( processor. LA(int i ), expected )

[*] target: assertEquals('b', input.LA(-1))
[-] pred:  org

************************************
************************************
[+] input: testStripFileExtension() { assertNull(Utils.stripFileExtension(null)); assertEquals("foo", Utils.stripFileExtension("foo")); "<AssertPlaceHolder>"; }
stripFileExtension(String name) { if ( name==null ) return null; int lastDot = name.lastIndexOf('.'); if ( lastDot<0 ) return name; return name.substring(0, lastDot); }
[*] target: assertEquals("foo", Utils.stripFileExtension("foo.txt"))
[-] pred:  org. junit. Assert. assertNull ( clazz. stripFileExtension(String name) )

[*] target: assertEquals("foo", Utils.stripFileExtension("foo.txt"))
[-] pred:  org. junit. Assert. assertEquals ( null, clazz. stripFileExtension(String name) )

[*] target: assertEquals("foo", Utils.stripFileExtension("foo.txt"))
[-] pred:  org. junit. Assert. assertNull ( clazz. stripFileExtension(String name )

[*] target: assertEquals("foo", Utils.stripFileExtension("foo.txt"))
[-] pred:  org. junit. Assert. assertEquals ( null, clazz. stripFileExtension(String name ) )

[*] target: assertEquals("foo", Utils.stripFileExtension("foo.txt"))
[-] pred:  org. junit. Assert. assertEquals ( null, clazz. stripFileExtension(String name )

************************************
************************************
[+] input: testNodesToStrings() { ArrayList<GrammarAST> values = new ArrayList<>(); values.add(new GrammarAST(Token.EOR_TOKEN_TYPE)); values.add(new GrammarAST(Token.DOWN)); values.add(new GrammarAST(Token.UP));  assertNull(Utils.nodesToStrings(null)); "<AssertPlaceHolder>"; }
nodesToStrings(List<T> nodes) { if ( nodes == null ) return null; List<String> a = new ArrayList<String>(); for (T t : nodes) a.add(t.getText()); return a; }
[*] target: assertNotNull(Utils.nodesToStrings(values))
[-] pred:  org. junit. Assert. assertThat ( clazz. nodesToStrings(List < java. lang. String > values ), org. hamcrest. CoreMatchers. is ( values ) )

[*] target: assertNotNull(Utils.nodesToStrings(values))
[-] pred:  org. junit. Assert. assertThat ( clazz. nodesToStrings(List<T> nodes), org. hamcrest. CoreMatchers. is ( values ) )

[*] target: assertNotNull(Utils.nodesToStrings(values))
[-] pred:  org. junit. Assert. assertThat ( clazz. nodesToStrings ( values ), org. hamcrest. CoreMatchers. is ( values ) )

[*] target: assertNotNull(Utils.nodesToStrings(values))
[-] pred:  org. junit. Assert. assertNull ( clazz. nodesToStrings(List<T> nodes) )

[*] target: assertNotNull(Utils.nodesToStrings(values))
[-] pred:  org

************************************
************************************
[+] input: testSelect() { ArrayList<String> strings = new ArrayList<>(); strings.add("foo"); strings.add("bar");  Utils.Func1<String, String> func1 = new Utils.Func1() { @Override public Object exec(Object arg1) { return "baz"; } };  ArrayList<String> retval = new ArrayList<>(); retval.add("baz"); retval.add("baz");  assertEquals(retval, Utils.select(strings, func1)); "<AssertPlaceHolder>"; }
select(List<From> list, Func1<From, To> selector) { if ( list==null ) return null; List<To> b = new ArrayList<To>(); for (From f : list) { b.add(selector.exec(f)); } return b; }
[*] target: assertNull(Utils.select(null, null))
[-] pred:  org. junit. Assert. assertEquals ( strings, retval )

[*] target: assertNull(Utils.select(null, null))
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( ), retval )

[*] target: assertNull(Utils.select(null, null))
[-] pred:  org. junit. Assert. assertEquals ( sp, retval )

[*] target: assertNull(Utils.select(null, null))
[-] pred:  org. junit. Assert. assertEquals ( string, retval )

[*] target: assertNull(Utils.select(null, null))
[-] pred:  org

************************************
************************************
[+] input: testFind() { ArrayList<String> strings = new ArrayList<>(); strings.add("foo"); strings.add("bar"); assertEquals("foo", Utils.find(strings, String.class));  "<AssertPlaceHolder>"; }
find(List<?> ops, Class<T> cl) { for (Object o : ops) { if ( cl.isInstance(o) ) return cl.cast(o); //			if ( o.getClass() == cl ) return o; } return null; }
[*] target: assertNull(Utils.find(new ArrayList<>(), String.class))
[-] pred:  org. junit. Assert. assertNull ( Utils. find(List<?> ops ( java. lang. String. class ) )

[*] target: assertNull(Utils.find(new ArrayList<>(), String.class))
[-] pred:  org. junit. Assert. assertNull ( Utils. find(List<?> ops ( getClass ( ), java. lang. String. class ) )

[*] target: assertNull(Utils.find(new ArrayList<>(), String.class))
[-] pred:  org. junit. Assert. assertNull ( Utils. find(List<?> ops ( getClass ( ), java. lang. String.class)); "< ) )

[*] target: assertNull(Utils.find(new ArrayList<>(), String.class))
[-] pred:  org. junit. Assert. assertNull ( Utils. find(List<?> ops ( getClass ( ) ) )

[*] target: assertNull(Utils.find(new ArrayList<>(), String.class))
[-] pred:  org

************************************
************************************
[+] input: testIndexOf() { ArrayList<String> strings = new ArrayList<>(); strings.add("foo"); strings.add("bar"); Utils.Filter filter = new Utils.Filter() { @Override public boolean select(Object o) { return true; } }; assertEquals(0, Utils.indexOf(strings, filter)); "<AssertPlaceHolder>"; }
indexOf(List<? extends T> elems, Filter<T> filter) { for (int i=0; i<elems.size(); i++) { if ( filter.select(elems.get(i)) ) return i; } return -1; }
[*] target: assertEquals(-1, Utils.indexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( 0, strings. indexOf ( new java. lang. String ( ) ) )

[*] target: assertEquals(-1, Utils.indexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( 0, strings. indexOf ( Utils.indexOf(strings, filterContig "< ) )

[*] target: assertEquals(-1, Utils.indexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( 0, strings. indexOf ( Utils.indexOf(strings, filterSAX "< ) )

[*] target: assertEquals(-1, Utils.indexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( 0, strings. indexOf ( Utils.indexOf(strings, filterAppConfiguration "< ) )

[*] target: assertEquals(-1, Utils.indexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( 0, strings. indexOf ( Utils.indexOf(strings, filtersForResource contexts ) )

************************************
************************************
[+] input: testLastIndexOf() { ArrayList<String> strings = new ArrayList<>(); strings.add("foo"); strings.add("bar"); Utils.Filter filter = new Utils.Filter() { @Override public boolean select(Object o) { return true; } }; assertEquals(1, Utils.lastIndexOf(strings, filter)); "<AssertPlaceHolder>"; }
lastIndexOf(List<? extends T> elems, Filter<T> filter) { for (int i=elems.size()-1; i>=0; i--) { if ( filter.select(elems.get(i)) ) return i; } return -1; }
[*] target: assertEquals(-1, Utils.lastIndexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertTrue ( strings. lastIndexOf ( filter. lastIndexOf ( strings ) ) )

[*] target: assertEquals(-1, Utils.lastIndexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( true, strings. lastIndexOf ( 0 ) )

[*] target: assertEquals(-1, Utils.lastIndexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertTrue ( strings. lastIndexOf ( commons. lang. String. valueOf ( 0 ) ) )

[*] target: assertEquals(-1, Utils.lastIndexOf(new ArrayList<>(), null))
[-] pred:  org. junit. Assert. assertEquals ( true, strings. lastIndexOf ( new java. lang. String ( ) ) )

[*] target: assertEquals(-1, Utils.lastIndexOf(new ArrayList<>(), null))
[-] pred:  org

************************************
************************************
[+] input: canCreateAvailabilitySlots() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1);  //when availabilityFacade.createResourceSlots(resourceId, oneDay);  //then TimeSlot entireMonth = TimeSlot.createMonthlyTimeSlotAtUTC(2021, 1); Calendar monthlyCalendar = availabilityFacade.loadCalendar(resourceId, entireMonth); "<AssertPlaceHolder>"; }
loadCalendar(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return availabilityReadModel.load(resourceId, normalized); }
[*] target: assertThat(monthlyCalendar).isEqualTo(Calendar.withAvailableSlots(resourceId, oneDay))
[-] pred:  org. junit. Assert. assertThat ( monthlyCalendar. getTime ( ), org. hamcrest. Matchers. is ( oneDay. getTime ( ) ) )

[*] target: assertThat(monthlyCalendar).isEqualTo(Calendar.withAvailableSlots(resourceId, oneDay))
[-] pred:  org. junit. Assert. assertEquals ( monthlyCalendar. getTime ( ), oneMonth. getTime ( ) )

[*] target: assertThat(monthlyCalendar).isEqualTo(Calendar.withAvailableSlots(resourceId, oneDay))
[-] pred:  org. junit. Assert. assertEquals ( monthlyCalendar. getTime ( ), resourceId )

[*] target: assertThat(monthlyCalendar).isEqualTo(Calendar.withAvailableSlots(resourceId, oneDay))
[-] pred:  org. junit. Assert. assertThat ( monthlyCalendar, org. hamcrest. Matchers. is ( oneDay ) )

[*] target: assertThat(monthlyCalendar).isEqualTo(Calendar.withAvailableSlots(resourceId, oneDay))
[-] pred:  org

************************************
************************************
[+] input: canCreateNewAvailabilitySlotsWithParentId() { //given ResourceId resourceId = ResourceId.newOne(); ResourceId resourceId2 = ResourceId.newOne(); ResourceId parentId = ResourceId.newOne(); ResourceId differentParentId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1);  //when availabilityFacade.createResourceSlots(resourceId, parentId, oneDay); availabilityFacade.createResourceSlots(resourceId2, differentParentId, oneDay);  //then assertThat(availabilityFacade.findByParentId(parentId, oneDay).isEntirelyWithParentId(parentId)).isTrue(); "<AssertPlaceHolder>";  }
findByParentId(ResourceId parentId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return new ResourceGroupedAvailability(availabilityRepository.loadAllByParentIdWithinSlot(parentId, normalized)); }
[*] target: assertThat(availabilityFacade.findByParentId(differentParentId, oneDay).isEntirelyWithParentId(differentParentId)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( oneDay, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( resourceId2 ) ) )

[*] target: assertThat(availabilityFacade.findByParentId(differentParentId, oneDay).isEntirelyWithParentId(differentParentId)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( resourceId2, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( oneDay ) ) )

[*] target: assertThat(availabilityFacade.findByParentId(differentParentId, oneDay).isEntirelyWithParentId(differentParentId)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( oneDay, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertThat(availabilityFacade.findByParentId(differentParentId, oneDay).isEntirelyWithParentId(differentParentId)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( twoDay, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( oneDay ) ) )

[*] target: assertThat(availabilityFacade.findByParentId(differentParentId, oneDay).isEntirelyWithParentId(differentParentId)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( oneDay, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( oneDay ) ) )

************************************
************************************
[+] input: canBlockAvailabilities() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, oneDay);  //when boolean result = availabilityFacade.block(resourceId, oneDay, owner);  //then assertTrue(result); TimeSlot entireMonth = TimeSlot.createMonthlyTimeSlotAtUTC(2021, 1); Calendar monthlyCalendar = availabilityFacade.loadCalendar(resourceId, entireMonth); "<AssertPlaceHolder>"; assertThat(monthlyCalendar.takenBy(owner)).containsExactly(oneDay); }
loadCalendar(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return availabilityReadModel.load(resourceId, normalized); }
[*] target: assertThat(monthlyCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(monthlyCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( true ) )

[*] target: assertThat(monthlyCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(monthlyCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertThat(monthlyCalendar.availableSlots()).isEmpty()
[-] pred:  org

************************************
************************************
[+] input: cantBlockWhenNoSlotsCreated() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne();  //when boolean result = availabilityFacade.block(resourceId, oneDay, owner);  //then "<AssertPlaceHolder>"; }
block(ResourceId resourceId, TimeSlot timeSlot, Owner requester) { ResourceGroupedAvailability toBlock = findGrouped(resourceId, timeSlot); return block(requester, toBlock); }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. boolean result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. whether result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: canDisableAvailabilities() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, oneDay);  //when boolean result = availabilityFacade.disable(resourceId, oneDay, owner);  //then assertTrue(result); ResourceGroupedAvailability resourceAvailabilities = availabilityFacade.find(resourceId, oneDay); "<AssertPlaceHolder>"; }
find(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return new ResourceGroupedAvailability(availabilityRepository.loadAllWithinSlot(resourceId, normalized)); }
[*] target: assertThat(resourceAvailabilities.isDisabledEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(resourceAvailabilities.isDisabledEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( resourceAvailabilities )

[*] target: assertThat(resourceAvailabilities.isDisabledEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertNull ( resourceAvailabilities )

[*] target: assertThat(resourceAvailabilities.isDisabledEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(resourceAvailabilities.isDisabledEntirelyBy(owner)).isTrue()
[-] pred:  org

************************************
************************************
[+] input: cantDisableWhenNoSlotsCreated() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne();  //when boolean result = availabilityFacade.disable(resourceId, oneDay, owner);  //then "<AssertPlaceHolder>"; }
disable(ResourceId resourceId, TimeSlot timeSlot, Owner requester) { ResourceGroupedAvailability toDisable = findGrouped(resourceId, timeSlot); if (toDisable.hasNoSlots()) { return false; } Set<Owner> previousOwners = toDisable.owners(); boolean result = toDisable.disable(requester); if (result) { result = availabilityRepository.saveCheckingVersion(toDisable); if (result) { eventsPublisher.publish(new ResourceTakenOver(resourceId, previousOwners, timeSlot, Instant.now(clock))); } } return result; }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. boolean result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: cantBlockEvenWhenJustSmallSegmentOfRequestedSlotIsBlocked() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, oneDay); //and availabilityFacade.block(resourceId, oneDay, owner); TimeSlot fifteenMinutes = new TimeSlot(oneDay.from(), oneDay.from().plus(15, ChronoUnit.MINUTES));  //when boolean result = availabilityFacade.block(resourceId, fifteenMinutes, Owner.newOne());  //then assertFalse(result); ResourceGroupedAvailability resourceAvailability = availabilityFacade.find(resourceId, oneDay); "<AssertPlaceHolder>";  }
find(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return new ResourceGroupedAvailability(availabilityRepository.loadAllWithinSlot(resourceId, normalized)); }
[*] target: assertThat(resourceAvailability.blockedEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. CoreMatchers. is ( result )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(owner)).isTrue()
[-] pred:  org. junit. Assert. CoreMatchers. is ( result ) )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(owner)).isTrue()
[-] pred:  org

************************************
************************************
[+] input: canReleaseAvailability() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); TimeSlot fifteenMinutes = new TimeSlot(oneDay.from(), oneDay.from().plus(15, ChronoUnit.MINUTES)); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, fifteenMinutes); //and availabilityFacade.block(resourceId, fifteenMinutes, owner);  //when boolean result = availabilityFacade.release(resourceId, oneDay, owner);  //then assertTrue(result); ResourceGroupedAvailability resourceAvailability = availabilityFacade.find(resourceId, oneDay); "<AssertPlaceHolder>"; }
find(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return new ResourceGroupedAvailability(availabilityRepository.loadAllWithinSlot(resourceId, normalized)); }
[*] target: assertThat(resourceAvailability.isEntirelyAvailable()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(resourceAvailability.isEntirelyAvailable()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( result, resourceAvailability. find(ResourceId resourceId ( ) )

[*] target: assertThat(resourceAvailability.isEntirelyAvailable()).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(resourceAvailability.isEntirelyAvailable()).isTrue()
[-] pred:  org. junit. Assert. assertEquals ( result, resourceAvailability )

[*] target: assertThat(resourceAvailability.isEntirelyAvailable()).isTrue()
[-] pred:  org

************************************
************************************
[+] input: cantReleaseWhenNoSlotsCreated() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner owner = Owner.newOne();  //when boolean result = availabilityFacade.release(resourceId, oneDay, owner);  //then "<AssertPlaceHolder>"; }
release(ResourceId resourceId, TimeSlot timeSlot, Owner requester) { ResourceGroupedAvailability toRelease = findGrouped(resourceId, timeSlot); if (toRelease.hasNoSlots()) { return false; } boolean result = toRelease.release(requester); if (result) { return availabilityRepository.saveCheckingVersion(toRelease); } return result; }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. boolean result = true ; if ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. boolean result = true ; }

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: cantReleaseEvenWhenJustPartOfSlotIsOwnedByTheRequester() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot jan_1 = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); TimeSlot jan_2 = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 2); TimeSlot jan_1_2 = new TimeSlot(jan_1.from(), jan_2.to()); Owner jan1owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, jan_1_2); //and availabilityFacade.block(resourceId, jan_1, jan1owner); //and Owner jan2owner = Owner.newOne(); availabilityFacade.block(resourceId, jan_2, jan2owner);  //when boolean result = availabilityFacade.release(resourceId, jan_1_2, jan1owner);  //then assertFalse(result); ResourceGroupedAvailability resourceAvailability = availabilityFacade.find(resourceId, jan_1); "<AssertPlaceHolder>"; }
find(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return new ResourceGroupedAvailability(availabilityRepository.loadAllWithinSlot(resourceId, normalized)); }
[*] target: assertThat(resourceAvailability.blockedEntirelyBy(jan1owner)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(jan1owner)).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(jan1owner)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( true ) )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(jan1owner)).isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(resourceAvailability.blockedEntirelyBy(jan1owner)).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org

************************************
************************************
[+] input: oneSegmentCanBeTakenBySomeoneElseAfterRealising() { //given ResourceId resourceId = ResourceId.newOne(); Duration durationOfSevenSlots = Duration.ofMinutes(7 * Segments.DEFAULT_SEGMENT_DURATION_IN_MINUTES); TimeSlot sevenSlots = TimeSlot.createTimeSlotAtUTCOfDuration(2021, 1, 1, durationOfSevenSlots); TimeSlot minimumSlot = new TimeSlot(sevenSlots.from(), sevenSlots.from().plus(Segments.DEFAULT_SEGMENT_DURATION_IN_MINUTES, ChronoUnit.MINUTES)); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, sevenSlots); //and availabilityFacade.block(resourceId, sevenSlots, owner); //and availabilityFacade.release(resourceId, minimumSlot, owner);  //when Owner newRequester = Owner.newOne(); boolean result = availabilityFacade.block(resourceId, minimumSlot, newRequester);  //then assertTrue(result); Calendar entireCalendar = availabilityFacade.loadCalendar(resourceId, sevenSlots); "<AssertPlaceHolder>"; assertThat(entireCalendar.takenBy(owner)).containsExactlyElementsOf(sevenSlots.leftoverAfterRemovingCommonWith(minimumSlot)); assertThat(entireCalendar.takenBy(newRequester)).containsExactly(minimumSlot); }
loadCalendar(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return availabilityReadModel.load(resourceId, normalized); }
[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( entireCalendar. getTime ( ) ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( entireCalendar. getTime ( ) ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( entireCalendar ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit, result )

************************************
************************************
[+] input: resourceTakenOverEventIsEmittedAfterTakingOverTheResource() { //given ResourceId resourceId = ResourceId.newOne(); TimeSlot oneDay = TimeSlot.createDailyTimeSlotAtUTC(2021, 1, 1); Owner initialOwner = Owner.newOne(); Owner newOwner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, oneDay); availabilityFacade.block(resourceId, oneDay, initialOwner);  //when boolean result = availabilityFacade.disable(resourceId, oneDay, newOwner);  //then "<AssertPlaceHolder>"; Mockito.verify(eventsPublisher) .publish(Mockito.argThat(takenOver(resourceId, initialOwner, oneDay))); }
disable(ResourceId resourceId, TimeSlot timeSlot, Owner requester) { ResourceGroupedAvailability toDisable = findGrouped(resourceId, timeSlot); if (toDisable.hasNoSlots()) { return false; } Set<Owner> previousOwners = toDisable.owners(); boolean result = toDisable.disable(requester); if (result) { result = availabilityRepository.saveCheckingVersion(toDisable); if (result) { eventsPublisher.publish(new ResourceTakenOver(resourceId, previousOwners, timeSlot, Instant.now(clock))); } } return result; }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert.TakenOverEventIsEmitted according to the

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert.TakenOverEventIsEmittedAfterTaking

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert.TakenOverEventIsEmitted )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: canBeBlockedWhenIsAvailable() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //when boolean result = resourceAvailability.block(OWNER_ONE);  //then "<AssertPlaceHolder>"; }
block(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.ownedBy(requester); return true; } else { return false; } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. if ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. boolean result )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: cantBeBlockedWhenAlreadyBlockedBySomeoneElse() { //given ResourceAvailability resourceAvailability = resourceAvailability(); //and resourceAvailability.block(OWNER_ONE);  //when boolean result = resourceAvailability.block(OWNER_TWO);  //then "<AssertPlaceHolder>"; }
block(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.ownedBy(requester); return true; } else { return false; } }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertEquals ( false, result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. is ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: canBeReleasedOnlyByInitialOwner() { //given ResourceAvailability resourceAvailability = resourceAvailability(); //and resourceAvailability.block(OWNER_ONE);  //when boolean result = resourceAvailability.release(OWNER_ONE);  //then "<AssertPlaceHolder>"; }
release(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.none(); return true; } else { return false; } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertThat ( result, is ( true ) )

************************************
************************************
[+] input: cantBeReleaseBySomeoneElse() { //given ResourceAvailability resourceAvailability = resourceAvailability(); //and resourceAvailability.block(OWNER_ONE);  //when boolean result = resourceAvailability.release(OWNER_TWO);  //then "<AssertPlaceHolder>"; }
release(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.none(); return true; } else { return false; } }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertEquals ( false, result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. return false, result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. b false, result )

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: canBeBlockedBySomeoneElseAfterReleasing() { //given ResourceAvailability resourceAvailability = resourceAvailability(); //and resourceAvailability.block(OWNER_ONE); //and resourceAvailability.release(OWNER_ONE);  //when boolean result = resourceAvailability.release(OWNER_TWO);  //then "<AssertPlaceHolder>"; }
release(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.none(); return true; } else { return false; } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertEquals ( false, result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert.Some ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. return false, result )

[*] target: assertTrue(result)
[-] pred:  is result )

************************************
************************************
[+] input: canDisableWhenAvailable() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and boolean result = resourceAvailability.disable(OWNER_ONE);  //then assertTrue(result); assertTrue(resourceAvailability.isDisabled()); "<AssertPlaceHolder>"; }
isDisabledBy(Owner owner) { return blockade.isDisabledBy(owner); }
[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. boolean result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org

************************************
************************************
[+] input: canDisableWhenBlocked() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and boolean resultBlocking = resourceAvailability.block(OWNER_ONE);  //when boolean resultDisabling = resourceAvailability.disable(OWNER_TWO);  //then assertTrue(resultBlocking); assertTrue(resultDisabling); assertTrue(resourceAvailability.isDisabled()); "<AssertPlaceHolder>"; }
isDisabledBy(Owner owner) { return blockade.isDisabledBy(owner); }
[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_TWO))
[-] pred:  org. junit. Assert. assertTrue ( resultDisabling )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_TWO))
[-] pred:  org. junit. Assert. assertTrue ( result assertTrue )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_TWO))
[-] pred:  org. junit. Assert. assertTrue ( resultCT )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_TWO))
[-] pred:  org. junit. Assert. whether ( resultDisabling )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_TWO))
[-] pred:  org

************************************
************************************
[+] input: cantBeBlockedWhileDisabled() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and boolean resultDisabling = resourceAvailability.disable(OWNER_ONE);  //when boolean resultBlocking = resourceAvailability.block(OWNER_TWO); boolean resultBlockingBySameOwner = resourceAvailability.block(OWNER_ONE);  //then assertTrue(resultDisabling); assertFalse(resultBlocking); assertFalse(resultBlockingBySameOwner); assertTrue(resourceAvailability.isDisabled()); "<AssertPlaceHolder>"; }
isDisabledBy(Owner owner) { return blockade.isDisabledBy(owner); }
[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( resultDisabling )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertFalse ( resultDisabling )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( result assertTrue )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( resultDisabling && resultBlocking )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org

************************************
************************************
[+] input: canBeEnabledByInitialRequester() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and resourceAvailability.disable(OWNER_ONE);  //and boolean result = resourceAvailability.enable(OWNER_ONE);  //then assertTrue(result); assertFalse(resourceAvailability.isDisabled()); "<AssertPlaceHolder>"; }
isDisabledBy(Owner owner) { return blockade.isDisabledBy(owner); }
[*] target: assertFalse(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertFalse(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertFalse(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( result && ( result ) )

[*] target: assertFalse(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. boolean result )

************************************
************************************
[+] input: cantBeEnabledByAnotherRequester() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and resourceAvailability.disable(OWNER_ONE);  //and boolean result = resourceAvailability.enable(OWNER_TWO);  //then assertFalse(result); assertTrue(resourceAvailability.isDisabled()); "<AssertPlaceHolder>"; }
isDisabledBy(Owner owner) { return blockade.isDisabledBy(owner); }
[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org. junit. Assert. boolean result )

[*] target: assertTrue(resourceAvailability.isDisabledBy(OWNER_ONE))
[-] pred:  org

************************************
************************************
[+] input: canBeBlockedAgainAfterEnabling() { //given ResourceAvailability resourceAvailability = resourceAvailability();  //and resourceAvailability.disable(OWNER_ONE);  //and resourceAvailability.enable(OWNER_ONE);  //when boolean result = resourceAvailability.block(OWNER_TWO);  //then "<AssertPlaceHolder>"; }
block(Owner requester) { if (isAvailableFor(requester)) { blockade = Blockade.ownedBy(requester); return true; } else { return false; } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. boolean result, result )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: slotsAreNormalizedBeforeSplitting() { //given Instant start = Instant.parse("2023-09-09T00:10:00Z"); Instant end = Instant.parse("2023-09-09T00:59:00Z"); TimeSlot timeSlot = new TimeSlot(start, end); SegmentInMinutes oneHour = SegmentInMinutes.of(60, FIFTEEN_MINUTES_SEGMENT_DURATION);  //when List<TimeSlot> segments = Segments.split(timeSlot, oneHour);  //then "<AssertPlaceHolder>"; assertEquals(Instant.parse("2023-09-09T00:00:00Z"), segments.get(0).from()); assertEquals(Instant.parse("2023-09-09T01:00:00Z"), segments.get(0).to());  }
split(TimeSlot timeSlot, SegmentInMinutes unit) { TimeSlot normalizedSlot = normalizeToSegmentBoundaries(timeSlot, unit); return new SlotToSegments().apply(normalizedSlot, unit); }
[*] target: assertEquals(1, segments.size())
[-] pred:  org. junit. Assert. assertEquals ( 3, segments. size ( ) )

[*] target: assertEquals(1, segments.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. util. HashSet < org. apache. hadoop. data. element. String > ( ), segments )

[*] target: assertEquals(1, segments.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. util. HashSet < org. apache. hadoop. data. element. Person > ( ), segments )

[*] target: assertEquals(1, segments.size())
[-] pred:  org. junit. Assert. assertEquals ( newArrayList ( start, end ), segments )

[*] target: assertEquals(1, segments.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, segments. size ( ) )

************************************
************************************
[+] input: hasNoEffectWhenSlotAlreadyNormalized() { //given Instant start = Instant.parse("2023-09-09T00:00:00Z"); Instant end = Instant.parse("2023-09-09T01:00:00Z"); TimeSlot timeSlot = new TimeSlot(start, end); SegmentInMinutes oneHour = SegmentInMinutes.of(60, FIFTEEN_MINUTES_SEGMENT_DURATION);  //when TimeSlot normalized = new SlotToNormalizedSlot().apply(timeSlot, oneHour);  //then "<AssertPlaceHolder>"; }
apply(TimeSlot timeSlot, SegmentInMinutes segmentInMinutes) {  int segmentInMinutesDuration = segmentInMinutes.value(); Instant segmentStart = normalizeStart(timeSlot.from(), segmentInMinutesDuration); Instant segmentEnd = normalizeEnd(timeSlot.to(), segmentInMinutesDuration); TimeSlot normalized = new TimeSlot(segmentStart, segmentEnd); TimeSlot minimalSegment = new TimeSlot(segmentStart, segmentStart.plus(segmentInMinutes.value(), ChronoUnit.MINUTES)); if (normalized.within(minimalSegment)) { return minimalSegment; } return normalized; }
[*] target: assertEquals(timeSlot, normalized)
[-] pred:  org. junit. Assert. assertEquals ( normalized, timeSlot )

[*] target: assertEquals(timeSlot, normalized)
[-] pred:  org. junit. Assert. assertEquals ( normalized. apply(TimeSlot, timeSlot )

[*] target: assertEquals(timeSlot, normalized)
[-] pred:  org. junit. Assert. assertEquals ( normalized. apply(TimeSlot, start )

[*] target: assertEquals(timeSlot, normalized)
[-] pred:  org. junit. Assert. assertEquals ( normalized )

[*] target: assertEquals(timeSlot, normalized)
[-] pred:  org

************************************
************************************
[+] input: normalizedToTheHour() { //given Instant start = Instant.parse("2023-09-09T00:10:00Z"); Instant end = Instant.parse("2023-09-09T00:59:00Z"); TimeSlot timeSlot = new TimeSlot(start, end); SegmentInMinutes oneHour = SegmentInMinutes.of(60, FIFTEEN_MINUTES_SEGMENT_DURATION);  //when TimeSlot normalized = SLOT_TO_NORMALIZED_SLOT.apply(timeSlot, oneHour);  //then "<AssertPlaceHolder>"; assertEquals(Instant.parse("2023-09-09T01:00:00Z"), normalized.to()); }
apply(TimeSlot timeSlot, SegmentInMinutes segmentInMinutes) {  int segmentInMinutesDuration = segmentInMinutes.value(); Instant segmentStart = normalizeStart(timeSlot.from(), segmentInMinutesDuration); Instant segmentEnd = normalizeEnd(timeSlot.to(), segmentInMinutesDuration); TimeSlot normalized = new TimeSlot(segmentStart, segmentEnd); TimeSlot minimalSegment = new TimeSlot(segmentStart, segmentStart.plus(segmentInMinutes.value(), ChronoUnit.MINUTES)); if (normalized.within(minimalSegment)) { return minimalSegment; } return normalized; }
[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( twoHour, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( oneHour, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( 0, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  )

************************************
************************************
[+] input: normalizedWhenShortSlotOverlappingTwoSegments() { //given Instant start = Instant.parse("2023-09-09T00:29:00Z"); Instant end = Instant.parse("2023-09-09T00:31:00Z"); TimeSlot timeSlot = new TimeSlot(start, end); SegmentInMinutes oneHour = SegmentInMinutes.of(60, FIFTEEN_MINUTES_SEGMENT_DURATION);  //when TimeSlot normalized = SLOT_TO_NORMALIZED_SLOT.apply(timeSlot, oneHour);  //then "<AssertPlaceHolder>"; assertEquals(Instant.parse("2023-09-09T01:00:00Z"), normalized.to()); }
apply(TimeSlot timeSlot, SegmentInMinutes segmentInMinutes) {  int segmentInMinutesDuration = segmentInMinutes.value(); Instant segmentStart = normalizeStart(timeSlot.from(), segmentInMinutesDuration); Instant segmentEnd = normalizeEnd(timeSlot.to(), segmentInMinutesDuration); TimeSlot normalized = new TimeSlot(segmentStart, segmentEnd); TimeSlot minimalSegment = new TimeSlot(segmentStart, segmentStart.plus(segmentInMinutes.value(), ChronoUnit.MINUTES)); if (normalized.within(minimalSegment)) { return minimalSegment; } return normalized; }
[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( twoHour, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( oneHour, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( 0, normalized. apply ( start, end ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  org

[*] target: assertEquals(Instant.parse("2023-09-09T00:00:00Z"), normalized.from())
[-] pred:  )

************************************
************************************
[+] input: noNormalizationWhenSlotStartsAtSegmentStart() { //given Instant start = Instant.parse("2023-09-09T00:15:00Z"); Instant end = Instant.parse("2023-09-09T00:30:00Z"); TimeSlot timeSlot = new TimeSlot(start, end); Instant start2 = Instant.parse("2023-09-09T00:30:00Z"); Instant end2 = Instant.parse("2023-09-09T00:45:00Z"); TimeSlot timeSlot2 = new TimeSlot(start2, end2); SegmentInMinutes fifteenMinutes = SegmentInMinutes.of(15, FIFTEEN_MINUTES_SEGMENT_DURATION);  //when TimeSlot normalized = SLOT_TO_NORMALIZED_SLOT.apply(timeSlot, fifteenMinutes); TimeSlot normalized2 = SLOT_TO_NORMALIZED_SLOT.apply(timeSlot2, fifteenMinutes);  //then "<AssertPlaceHolder>"; assertEquals(Instant.parse("2023-09-09T00:30:00Z"), normalized.to()); assertEquals(Instant.parse("2023-09-09T00:30:00Z"), normalized2.from()); assertEquals(Instant.parse("2023-09-09T00:45:00Z"), normalized2.to()); }
apply(TimeSlot timeSlot, SegmentInMinutes segmentInMinutes) {  int segmentInMinutesDuration = segmentInMinutes.value(); Instant segmentStart = normalizeStart(timeSlot.from(), segmentInMinutesDuration); Instant segmentEnd = normalizeEnd(timeSlot.to(), segmentInMinutesDuration); TimeSlot normalized = new TimeSlot(segmentStart, segmentEnd); TimeSlot minimalSegment = new TimeSlot(segmentStart, segmentStart.plus(segmentInMinutes.value(), ChronoUnit.MINUTES)); if (normalized.within(minimalSegment)) { return minimalSegment; } return normalized; }
[*] target: assertEquals(Instant.parse("2023-09-09T00:15:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( normalized2, normalized )

[*] target: assertEquals(Instant.parse("2023-09-09T00:15:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertEquals ( normalized2, normalized2 )

[*] target: assertEquals(Instant.parse("2023-09-09T00:15:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertTrue ( normalized2. apply ( normalized ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:15:00Z"), normalized.from())
[-] pred:  org. junit. Assert. assertTrue ( normalized2. apply ( normalized2 ) )

[*] target: assertEquals(Instant.parse("2023-09-09T00:15:00Z"), normalized.from())
[-] pred:  )

************************************
************************************
[+] input: testCreateLoan_InterestBearing() { int term = 4; BigDecimal originatedAmount = BigDecimal.valueOf(100.0); String currency = "USD"; BigDecimal targetInterestRate = BigDecimal.valueOf(0.1); BigDecimal effectiveInterestRate = BigDecimal.valueOf(0.1); String externalReference = UUID.randomUUID().toString(); LocalDate startDate = LocalDate.of(2023, 1, 1); LocalDate endDate = startDate; String timezone = "America/Los_Angeles"; String region = "USA"; String state = "CA";  CreateLoanRequest createLoanRequest = new CreateLoanRequest( term, originatedAmount, currency, targetInterestRate, effectiveInterestRate, externalReference, startDate, endDate, timezone, region, state );  GetLoanResponse loanResponse = loanResourceManager.createLoan(createLoanRequest);  // Verify that all expected fields are set correctly in the response "<AssertPlaceHolder>"; assertEquals(loanResponse.loanInfo().targetInterestRate(), targetInterestRate); assertEquals(loanResponse.loanInfo().effectiveInterestRate(), effectiveInterestRate); assertEquals(loanResponse.loanInfo().currency(), currency); assertEquals(loanResponse.loanInfo().externalReference(), externalReference); assertEquals(loanResponse.loanInfo().startDate(), startDate); assertEquals(loanResponse.loanInfo().endDate(), endDate); assertEquals(loanResponse.loanInfo().timezone(), timezone); assertEquals(loanResponse.loanInfo().region(), region); assertEquals(loanResponse.loanInfo().state(), state);  // Verify that the installment schedule is correct List<LoanInstallmentInfo> loanInstallmentInfoList = loanResponse.loanInfo().loanInstallments(); assertEquals(loanInstallmentInfoList.size(), 4);  loanInstallmentInfoList.forEach(loanInstallmentInfo -> { assertEquals(loanInstallmentInfo.loanId(), loanResponse.loanInfo().loanId()); assertEquals(loanInstallmentInfo.status(), InstallmentStatus.OWED); });  LoanInstallmentInfo installment1 = loanInstallmentInfoList.get(0); assertEquals(installment1.principalAmount(), BigDecimal.valueOf(24.67)); assertEquals(installment1.interestAmount(), BigDecimal.valueOf(0.85));  LoanInstallmentInfo installment2 = loanInstallmentInfoList.get(1); assertEquals(installment2.principalAmount(), BigDecimal.valueOf(24.94)); assertEquals(installment2.interestAmount(), BigDecimal.valueOf(0.58));  LoanInstallmentInfo installment3 = loanInstallmentInfoList.get(2); assertEquals(installment3.principalAmount(), BigDecimal.valueOf(25.09)); assertEquals(installment3.interestAmount(), BigDecimal.valueOf(0.43));  LoanInstallmentInfo installment4 = loanInstallmentInfoList.get(3); assertEquals(installment4.principalAmount(), BigDecimal.valueOf(25.3).setScale(2)); assertEquals(installment4.interestAmount(), BigDecimal.valueOf(0.21)); }
createLoan(CreateLoanRequest createLoanRequest) { String loanId = UUID.randomUUID().toString(); LoanDto loanDto = new LoanDto( loanId, createLoanRequest.term(), createLoanRequest.originatedAmount(), createLoanRequest.currency(), createLoanRequest.targetInterestRate(), createLoanRequest.effectiveInterestRate(), createLoanRequest.externalReference(), createLoanRequest.startDate(), createLoanRequest.endDate(), LoanStatus.CREATED, createLoanRequest.timezone(), createLoanRequest.region(), createLoanRequest.state() ); List<Installment> newInstallments = calculator.newInstallments(LoanTransformer.transformForNewInstallments(createLoanRequest)); List<LoanInstallmentDto> loanInstallmentDtos = LoanInstallmentTransformer.transform(newInstallments, loanId); // TODO(hubert): Add transactions loanInstallmentDtos.forEach(loanInstallmentDao::insert); loanDao.insert(loanDto); loanInstallmentDtos = loanInstallmentDao.findByLoanId(loanId); LOGGER.info("Creating new Loan: %s\nInstallments: %s".formatted(loanDto, loanInstallmentDtos));  return new GetLoanResponse( LoanTransformer.transformToLoanInfo( loanDto, loanInstallmentDtos ));  }
[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( targetInterestRate, loanResponse )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( targetInterestRate, loanResponse. getId ( ) )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( ( term + 1 ), loanResponse. numberOfRows ( ) )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( targetInterestRate, loanResponse. getVHomst ( ) )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( targetInterestRate, loanResponse. getVimateate ( ) )

************************************
************************************
[+] input: testCreateLoan_BNPL() { int term = 4; BigDecimal originatedAmount = BigDecimal.valueOf(100.0); String currency = "USD"; String externalReference = UUID.randomUUID().toString(); LocalDate startDate = LocalDate.of(2023, 1, 1); LocalDate endDate = startDate; String timezone = "America/Los_Angeles"; String region = "USA"; String state = "CA";  CreateLoanRequest createLoanRequest = new CreateLoanRequest( term, originatedAmount, currency, BigDecimal.valueOf(0), BigDecimal.valueOf(0), externalReference, startDate, endDate, timezone, region, state );  GetLoanResponse loanResponse = loanResourceManager.createLoan(createLoanRequest);  // Verify that all expected fields are set correctly in the response "<AssertPlaceHolder>"; assertEquals(loanResponse.loanInfo().targetInterestRate(), BigDecimal.valueOf(0)); assertEquals(loanResponse.loanInfo().effectiveInterestRate(), BigDecimal.valueOf(0)); assertEquals(loanResponse.loanInfo().currency(), currency); assertEquals(loanResponse.loanInfo().externalReference(), externalReference); assertEquals(loanResponse.loanInfo().startDate(), startDate); assertEquals(loanResponse.loanInfo().endDate(), endDate); assertEquals(loanResponse.loanInfo().timezone(), timezone); assertEquals(loanResponse.loanInfo().region(), region); assertEquals(loanResponse.loanInfo().state(), state);  // Verify that the installment schedule is correct List<LoanInstallmentInfo> loanInstallmentInfoList = loanResponse.loanInfo().loanInstallments(); assertEquals(loanInstallmentInfoList.size(), 4);  // Each installment's principal should be $100/4 = $25 and its interest should be $0 for (int i = 0; i < 4; i++) { LoanInstallmentInfo installment = loanInstallmentInfoList.get(i); assertEquals(installment.loanId(), loanResponse.loanInfo().loanId()); assertEquals(installment.status(), InstallmentStatus.OWED); assertEquals(installment.principalAmount(), BigDecimal.valueOf(25).setScale(2)); assertEquals(installment.interestAmount(), BigDecimal.valueOf(0).setScale(2)); } }
createLoan(CreateLoanRequest createLoanRequest) { String loanId = UUID.randomUUID().toString(); LoanDto loanDto = new LoanDto( loanId, createLoanRequest.term(), createLoanRequest.originatedAmount(), createLoanRequest.currency(), createLoanRequest.targetInterestRate(), createLoanRequest.effectiveInterestRate(), createLoanRequest.externalReference(), createLoanRequest.startDate(), createLoanRequest.endDate(), LoanStatus.CREATED, createLoanRequest.timezone(), createLoanRequest.region(), createLoanRequest.state() ); List<Installment> newInstallments = calculator.newInstallments(LoanTransformer.transformForNewInstallments(createLoanRequest)); List<LoanInstallmentDto> loanInstallmentDtos = LoanInstallmentTransformer.transform(newInstallments, loanId); // TODO(hubert): Add transactions loanInstallmentDtos.forEach(loanInstallmentDao::insert); loanDao.insert(loanDto); loanInstallmentDtos = loanInstallmentDao.findByLoanId(loanId); LOGGER.info("Creating new Loan: %s\nInstallments: %s".formatted(loanDto, loanInstallmentDtos));  return new GetLoanResponse( LoanTransformer.transformToLoanInfo( loanDto, loanInstallmentDtos ));  }
[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( term, loanResponse )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( ( term + 1 ), loanResponse. getText ( ) )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( 6, loanResponse. size ( ) )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org. junit. Assert. assertEquals ( ( term / 2 ), loanResponse. getContent ( ). length )

[*] target: assertEquals(loanResponse.loanInfo().term(), term)
[-] pred:  org

************************************
************************************
[+] input: testDoMakePayment() { LoanInfo loanInfo = initLoan(); BigDecimal principalAmount = BigDecimal.valueOf(14.33); BigDecimal interestAmount = BigDecimal.valueOf(41.10);  ZonedDateTime paymentDate = ZonedDateTime.of(loanInfo.startDate().plusMonths(1), LocalTime.MIDNIGHT, zoneId);  MakePaymentRequest makePaymentRequest = new MakePaymentRequest( loanInfo.loanId(), principalAmount.add(interestAmount), PaymentType.PAYMENT.toString(), paymentDate );  GetLoanResponse loanResponse = paymentResourceManager.doMakePayment(makePaymentRequest); List<LoanInstallmentInfo> loanInstallmentInfoList = loanResponse.loanInfo().loanInstallments();  LoanInstallmentInfo firstInstallment = loanInstallmentInfoList.get(0); "<AssertPlaceHolder>"; }
doMakePayment(MakePaymentRequest makePaymentRequest) { String loanId = makePaymentRequest.loanId(); LOGGER.info("Making payment to loanId %s with %s".formatted(loanId, makePaymentRequest)); validateMakePaymentRequest(makePaymentRequest); List<LoanInstallmentDto> loanInstallmentDtoList = loanInstallmentDao.findByLoanId(loanId); Optional<LoanInstallmentDto> firstUnpaidInstallmentOptional = loanInstallmentDtoList.stream() .filter(c -> c.status() == InstallmentStatus.OWED) .findFirst(); if (firstUnpaidInstallmentOptional.isEmpty()) { throw new CorefinException("No unpaid installments"); } LoanInstallmentDto firstUnpaidInstallment = firstUnpaidInstallmentOptional.get(); //validateMakePaymentRequestDate(makePaymentRequest, firstUnpaidInstallment); BigDecimal installmentAmount = firstUnpaidInstallment.interestAmount() .add(firstUnpaidInstallment.principalAmount()); //validateMakePaymentRequestAmount(installmentAmount, makePaymentRequest.amount()); String paymentId = UUID.randomUUID().toString(); PaymentDto paymentDto = new PaymentDto( paymentId, loanId, makePaymentRequest.amount(), PaymentType.valueOf(makePaymentRequest.paymentType()), makePaymentRequest.paymentDateTime() );  paymentDao.insert(paymentDto);  // Convert LoanDao to Loan LoanDto loanDto = loanDao.findById(loanId); List<PaymentDto> paymentDtoList = paymentDao.findByLoanId(loanId); Loan loan = LoanTransformer.transform(loanDto, paymentDtoList);  // Call the calculator's updateInstallments with Loan, calculation date = now() Loan updatedLoan = calculator.updateInstallments(loan, LocalDate.now()); List<Installment> installments = updatedLoan.installments(); LOGGER.info("Generated updated installments %s".formatted(installments));  // For each installment in the updated loan, update the associated LoanInstallment ArrayList<LoanInstallmentDto> updatedLoanInstallmentDtos = new ArrayList<>();  // Reconcile the loanInstallmentDtoList with calculator's installments for (int i = 0; i < loanInstallmentDtoList.size(); i++) { LoanInstallmentDto originalLoanInstallmentDto = loanInstallmentDtoList.get(i); Installment updatedInstallment = installments.get(i); updatedLoanInstallmentDtos.add( new LoanInstallmentDto( originalLoanInstallmentDto.installmentId(), updatedInstallment.status(), loanId, updatedInstallment.numTerm(), updatedInstallment.principalAmount(), updatedInstallment.interestAmount(), originalLoanInstallmentDto.startDate(), originalLoanInstallmentDto.dueDate(), originalLoanInstallmentDto.endDate() ) ); }  updatedLoanInstallmentDtos.forEach(loanInstallmentDao::updateInstallmentForPayment); return loanResourceManager.doGetLoan(loanId); }
[*] target: assertEquals(firstInstallment.status(), InstallmentStatus.PAID)
[-] pred:  org. junit. Assert. assertEquals ( loanResponse, firstInstallment )

[*] target: assertEquals(firstInstallment.status(), InstallmentStatus.PAID)
[-] pred:  org. junit. Assert. assertEquals ( firstInstallment, loanResponse )

[*] target: assertEquals(firstInstallment.status(), InstallmentStatus.PAID)
[-] pred:  org. junit. Assert. assertEquals ( interestAmount, firstInstallment )

[*] target: assertEquals(firstInstallment.status(), InstallmentStatus.PAID)
[-] pred:  org. junit. Assert. assertEquals ( firstInstallment, firstInstallment )

[*] target: assertEquals(firstInstallment.status(), InstallmentStatus.PAID)
[-] pred:  org

************************************
************************************
[+] input: testDoMakePayment_InvalidPaymentType() { LoanInfo loanInfo = initLoan(); MakePaymentRequest invalidMakePaymentRequest = new MakePaymentRequest( loanInfo.loanId(), BigDecimal.valueOf(0), "INVALID_PAYMENT_TYPE", ZonedDateTime.of(loanInfo.startDate().plusMonths(1), LocalTime.MIDNIGHT, zoneId) ); CorefinException exception = "<AssertPlaceHolder>"; }); assertEquals(exception.getMessage(), "Invalid payment type INVALID_PAYMENT_TYPE"); }
doMakePayment(MakePaymentRequest makePaymentRequest) { String loanId = makePaymentRequest.loanId(); LOGGER.info("Making payment to loanId %s with %s".formatted(loanId, makePaymentRequest)); validateMakePaymentRequest(makePaymentRequest); List<LoanInstallmentDto> loanInstallmentDtoList = loanInstallmentDao.findByLoanId(loanId); Optional<LoanInstallmentDto> firstUnpaidInstallmentOptional = loanInstallmentDtoList.stream() .filter(c -> c.status() == InstallmentStatus.OWED) .findFirst(); if (firstUnpaidInstallmentOptional.isEmpty()) { throw new CorefinException("No unpaid installments"); } LoanInstallmentDto firstUnpaidInstallment = firstUnpaidInstallmentOptional.get(); //validateMakePaymentRequestDate(makePaymentRequest, firstUnpaidInstallment); BigDecimal installmentAmount = firstUnpaidInstallment.interestAmount() .add(firstUnpaidInstallment.principalAmount()); //validateMakePaymentRequestAmount(installmentAmount, makePaymentRequest.amount()); String paymentId = UUID.randomUUID().toString(); PaymentDto paymentDto = new PaymentDto( paymentId, loanId, makePaymentRequest.amount(), PaymentType.valueOf(makePaymentRequest.paymentType()), makePaymentRequest.paymentDateTime() );  paymentDao.insert(paymentDto);  // Convert LoanDao to Loan LoanDto loanDto = loanDao.findById(loanId); List<PaymentDto> paymentDtoList = paymentDao.findByLoanId(loanId); Loan loan = LoanTransformer.transform(loanDto, paymentDtoList);  // Call the calculator's updateInstallments with Loan, calculation date = now() Loan updatedLoan = calculator.updateInstallments(loan, LocalDate.now()); List<Installment> installments = updatedLoan.installments(); LOGGER.info("Generated updated installments %s".formatted(installments));  // For each installment in the updated loan, update the associated LoanInstallment ArrayList<LoanInstallmentDto> updatedLoanInstallmentDtos = new ArrayList<>();  // Reconcile the loanInstallmentDtoList with calculator's installments for (int i = 0; i < loanInstallmentDtoList.size(); i++) { LoanInstallmentDto originalLoanInstallmentDto = loanInstallmentDtoList.get(i); Installment updatedInstallment = installments.get(i); updatedLoanInstallmentDtos.add( new LoanInstallmentDto( originalLoanInstallmentDto.installmentId(), updatedInstallment.status(), loanId, updatedInstallment.numTerm(), updatedInstallment.principalAmount(), updatedInstallment.interestAmount(), originalLoanInstallmentDto.startDate(), originalLoanInstallmentDto.dueDate(), originalLoanInstallmentDto.endDate() ) ); }  updatedLoanInstallmentDtos.forEach(loanInstallmentDao::updateInstallmentForPayment); return loanResourceManager.doGetLoan(loanId); }
[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( exception, invalidMakePaymentRequest )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( exception, loanInfo )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( error, invalidMakePaymentRequest )

************************************
************************************
[+] input: testDoMakePayment_LoanDoesNotExist() { LoanInfo loanInfo = initLoan(); MakePaymentRequest invalidMakePaymentRequest = new MakePaymentRequest( "INVALID_LOAN_ID", BigDecimal.valueOf(0), PaymentType.PAYMENT.toString(), ZonedDateTime.of(loanInfo.startDate().plusMonths(1), LocalTime.MIDNIGHT, zoneId) ); CorefinException exception = "<AssertPlaceHolder>"; }); assertEquals(exception.getMessage(), "Invalid loan id INVALID_LOAN_ID"); }
doMakePayment(MakePaymentRequest makePaymentRequest) { String loanId = makePaymentRequest.loanId(); LOGGER.info("Making payment to loanId %s with %s".formatted(loanId, makePaymentRequest)); validateMakePaymentRequest(makePaymentRequest); List<LoanInstallmentDto> loanInstallmentDtoList = loanInstallmentDao.findByLoanId(loanId); Optional<LoanInstallmentDto> firstUnpaidInstallmentOptional = loanInstallmentDtoList.stream() .filter(c -> c.status() == InstallmentStatus.OWED) .findFirst(); if (firstUnpaidInstallmentOptional.isEmpty()) { throw new CorefinException("No unpaid installments"); } LoanInstallmentDto firstUnpaidInstallment = firstUnpaidInstallmentOptional.get(); //validateMakePaymentRequestDate(makePaymentRequest, firstUnpaidInstallment); BigDecimal installmentAmount = firstUnpaidInstallment.interestAmount() .add(firstUnpaidInstallment.principalAmount()); //validateMakePaymentRequestAmount(installmentAmount, makePaymentRequest.amount()); String paymentId = UUID.randomUUID().toString(); PaymentDto paymentDto = new PaymentDto( paymentId, loanId, makePaymentRequest.amount(), PaymentType.valueOf(makePaymentRequest.paymentType()), makePaymentRequest.paymentDateTime() );  paymentDao.insert(paymentDto);  // Convert LoanDao to Loan LoanDto loanDto = loanDao.findById(loanId); List<PaymentDto> paymentDtoList = paymentDao.findByLoanId(loanId); Loan loan = LoanTransformer.transform(loanDto, paymentDtoList);  // Call the calculator's updateInstallments with Loan, calculation date = now() Loan updatedLoan = calculator.updateInstallments(loan, LocalDate.now()); List<Installment> installments = updatedLoan.installments(); LOGGER.info("Generated updated installments %s".formatted(installments));  // For each installment in the updated loan, update the associated LoanInstallment ArrayList<LoanInstallmentDto> updatedLoanInstallmentDtos = new ArrayList<>();  // Reconcile the loanInstallmentDtoList with calculator's installments for (int i = 0; i < loanInstallmentDtoList.size(); i++) { LoanInstallmentDto originalLoanInstallmentDto = loanInstallmentDtoList.get(i); Installment updatedInstallment = installments.get(i); updatedLoanInstallmentDtos.add( new LoanInstallmentDto( originalLoanInstallmentDto.installmentId(), updatedInstallment.status(), loanId, updatedInstallment.numTerm(), updatedInstallment.principalAmount(), updatedInstallment.interestAmount(), originalLoanInstallmentDto.startDate(), originalLoanInstallmentDto.dueDate(), originalLoanInstallmentDto.endDate() ) ); }  updatedLoanInstallmentDtos.forEach(loanInstallmentDao::updateInstallmentForPayment); return loanResourceManager.doGetLoan(loanId); }
[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( exception, loanInfo )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( invalidMakePaymentRequest, exception )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertEquals ( error, loanInfo )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(CorefinException.class, () -> { paymentResourceManager.doMakePayment(invalidMakePaymentRequest)
[-] pred:  org

************************************
************************************
[+] input: canSaveCashFlow() { //given ProjectAllocationsId projectId = ProjectAllocationsId.newOne();  //when cashFlowFacade.addIncomeAndCost(projectId, Income.of(100), Cost.of(50));  //then "<AssertPlaceHolder>"; }
find(ProjectAllocationsId projectId) { Cashflow byId = cashflowRepository.findById(projectId).orElseThrow(); return byId.earnings(); }
[*] target: assertEquals(Earnings.of(50), cashFlowFacade.find(projectId))
[-] pred:  org. junit. Assert. assertThat ( clazz. find(ProjectAllocationsId projectId ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(Earnings.of(50), cashFlowFacade.find(projectId))
[-] pred:  org. junit. Assert. assertThat ( counts. find(ProjectAllocationsId projectId ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(Earnings.of(50), cashFlowFacade.find(projectId))
[-] pred:  org. junit. Assert. assertThat ( counts. find(ProjectAllocationsId projectId ), org. hamcrest. CoreMatchers. is ( can ( true ) )

[*] target: assertEquals(Earnings.of(50), cashFlowFacade.find(projectId))
[-] pred:  org. junit. Assert. assertThat ( container. find(ProjectAllocationsId projectId ), org. hamcrest. CoreMatchers. is ( can ( true ) )

[*] target: assertEquals(Earnings.of(50), cashFlowFacade.find(projectId))
[-] pred:  org

************************************
************************************
[+] input: oneSegmentCanBeTakenBySomeoneElseAfterRealising() { //given ResourceId resourceId = ResourceId.newOne(); Duration durationOfSevenSlots = Duration.ofMinutes(7 * DEFAULT_SEGMENT_DURATION_IN_MINUTES); TimeSlot sevenSlots = TimeSlot.createTimeSlotAtUTCOfDuration(2021, 1, 1, durationOfSevenSlots); TimeSlot minimumSlot = new TimeSlot(sevenSlots.from(), sevenSlots.from().plus(DEFAULT_SEGMENT_DURATION_IN_MINUTES, ChronoUnit.MINUTES)); Owner owner = Owner.newOne(); availabilityFacade.createResourceSlots(resourceId, sevenSlots); //and availabilityFacade.block(resourceId, sevenSlots, owner); //and availabilityFacade.release(resourceId, minimumSlot, owner);  //when Owner newRequester = Owner.newOne(); boolean result = availabilityFacade.block(resourceId, minimumSlot, newRequester);  //then assertTrue(result); Calendar entireCalendar = availabilityFacade.loadCalendar(resourceId, sevenSlots); "<AssertPlaceHolder>"; assertThat(entireCalendar.takenBy(owner)).containsExactlyElementsOf(sevenSlots.leftoverAfterRemovingCommonWith(minimumSlot)); assertThat(entireCalendar.takenBy(newRequester)).containsExactly(minimumSlot); }
loadCalendar(ResourceId resourceId, TimeSlot within) { TimeSlot normalized = Segments.normalizeToSegmentBoundaries(within, defaultSegment()); return availabilityReadModel.load(resourceId, normalized); }
[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( entireCalendar. getTime ( ) ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( entireCalendar. getTime ( ) ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( entireCalendar ) )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertThat(entireCalendar.availableSlots()).isEmpty()
[-] pred:  org. junit, result )

************************************
************************************
[+] input: canCreateProjectAndLoadProjectCard() { //given ProjectId projectId = projectFacade.addNewProject("project", new Stage("Stage1"));  //when ProjectCard loaded = projectFacade.load(projectId);  //then "<AssertPlaceHolder>"; assertEquals("project", loaded.name()); assertEquals("Stage1", loaded.parallelizedStages().print()); }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals(projectId, loaded.projectId())
[-] pred:  org. junit. Assert. assertNotNull ( loaded )

[*] target: assertEquals(projectId, loaded.projectId())
[-] pred:  org. junit. Assert. assertNotNull ( loaded. load(ProjectId projectId )

[*] target: assertEquals(projectId, loaded.projectId())
[-] pred:  org. junit. Assert. assertNotNull ( loaded, loaded )

[*] target: assertEquals(projectId, loaded.projectId())
[-] pred:  org. junit, loaded. load(ProjectId projectId )

[*] target: assertEquals(projectId, loaded.projectId())
[-] pred:  org

************************************
************************************
[+] input: canCreateAndSaveMoreComplexParallelization() { //given Stage stage1 = new Stage("Stage1"); Stage stage2 = new Stage("Stage2"); Stage stage3 = new Stage("Stage3"); stage2 = stage2.dependsOn(stage1); stage3 = stage3.dependsOn(stage2);  //and ProjectId projectId = projectFacade.addNewProject("project", stage1, stage2, stage3);  //when ProjectCard loaded = projectFacade.load(projectId);  //then "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals("Stage1 | Stage2 | Stage3", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertNotNull ( loaded )

[*] target: assertEquals("Stage1 | Stage2 | Stage3", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertEquals ( stage2, loaded. load(ProjectIdId projectId )

[*] target: assertEquals("Stage1 | Stage2 | Stage3", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertTrue ( loaded. load(ProjectIdId projectId ) )

[*] target: assertEquals("Stage1 | Stage2 | Stage3", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertEquals ( stage2, loaded )

[*] target: assertEquals("Stage1 | Stage2 | Stage3", loaded.parallelizedStages().print())
[-] pred:  org

************************************
************************************
[+] input: canPlanDemands() { //given ProjectId projectId = projectFacade.addNewProject("project", new Stage("Stage1"));  //when Demands demandForJava = Demands.of(demandFor(skill("JAVA"))); projectFacade.addDemands(projectId, demandForJava);  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals(demandForJava, loaded.demands())
[-] pred:  org. junit. Assert. assertSame ( demandForJava, loaded )

[*] target: assertEquals(demandForJava, loaded.demands())
[-] pred:  org. junit. Assert. assertSame ( demandForJava, loaded. load(ProjectId projectId ) )

[*] target: assertEquals(demandForJava, loaded.demands())
[-] pred:  org. junit. Assert. assertSame ( Demands demandForJava, loaded )

[*] target: assertEquals(demandForJava, loaded.demands())
[-] pred:  org. junit. Assert. assertSame ( demandForJava, loaded. load(ProjectId projectId )

[*] target: assertEquals(demandForJava, loaded.demands())
[-] pred:  org

************************************
************************************
[+] input: canPlanNewDemands() { //given ProjectId projectId = projectFacade.addNewProject("project", new Stage("Stage1"));  //when Demand java = demandFor(skill("JAVA")); Demand csharp = demandFor(skill("C#")); projectFacade.addDemands(projectId, Demands.of(java)); projectFacade.addDemands(projectId, Demands.of(csharp));  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals(Demands.of(java, csharp), loaded.demands())
[-] pred:  org. junit. Assert. assertEquals ( java, loaded )

[*] target: assertEquals(Demands.of(java, csharp), loaded.demands())
[-] pred:  org. junit. Assert. assertEquals ( java, loaded. load(ProjectId projectId ) )

[*] target: assertEquals(Demands.of(java, csharp), loaded.demands())
[-] pred:  org. junit. Assert. assertEquals ( java, loaded. load(ProjectId projectId )

[*] target: assertEquals(Demands.of(java, csharp), loaded.demands())
[-] pred:  org. junit. Assert. assertEquals ( java, load. load(ProjectId projectId ) )

[*] target: assertEquals(Demands.of(java, csharp), loaded.demands())
[-] pred:  org. junit. Assert. assertEquals ( java, load )

************************************
************************************
[+] input: canPlanDemandsPerStage() { //given ProjectId projectId = projectFacade.addNewProject("project", new Stage("Stage1"));  //when Demands java = Demands.of(demandFor(skill("JAVA"))); DemandsPerStage demandsPerStage = new DemandsPerStage(Map.of("Stage1", java)); projectFacade.defineDemandsPerStage(projectId, demandsPerStage);  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; assertEquals(java, loaded.demands()); }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals(demandsPerStage, loaded.demandsPerStage())
[-] pred:  org. junit. Assert. assertEquals ( java, loaded )

[*] target: assertEquals(demandsPerStage, loaded.demandsPerStage())
[-] pred:  org. junit. Assert. assertSame ( java, loaded )

[*] target: assertEquals(demandsPerStage, loaded.demandsPerStage())
[-] pred:  org. junit. Assert. assertEquals ( java, load )

[*] target: assertEquals(demandsPerStage, loaded.demandsPerStage())
[-] pred:  org

[*] target: assertEquals(demandsPerStage, loaded.demandsPerStage())
[-] pred:  )

************************************
************************************
[+] input: canPlanNeededResourcesInTime() { //given ProjectId projectId = projectFacade.addNewProject("project");  //when Set<ResourceId> neededResources = Set.of(ResourceId.newOne()); TimeSlot firstHalfOfTheYear = new TimeSlot(Instant.parse("2021-01-01T00:00:00.00Z"), Instant.parse("2021-06-01T00:00:00.00Z")); projectFacade.defineResourcesWithinDates(projectId, neededResources, firstHalfOfTheYear);  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals(new ChosenResources(neededResources, firstHalfOfTheYear), loaded.neededResources())
[-] pred:  org. junit. Assert. assertNotNull ( loaded )

[*] target: assertEquals(new ChosenResources(neededResources, firstHalfOfTheYear), loaded.neededResources())
[-] pred:  org. junit. Assert. assertNotNull ( ProjectCard loaded )

[*] target: assertEquals(new ChosenResources(neededResources, firstHalfOfTheYear), loaded.neededResources())
[-] pred:  org. junit. Assert. assertNull ( loaded )

[*] target: assertEquals(new ChosenResources(neededResources, firstHalfOfTheYear), loaded.neededResources())
[-] pred:  org

[*] target: assertEquals(new ChosenResources(neededResources, firstHalfOfTheYear), loaded.neededResources())
[-] pred:  )

************************************
************************************
[+] input: canRedefineStages() { //given ProjectId projectId = projectFacade.addNewProject("project", new Stage("Stage1"));  //when projectFacade.defineProjectStages(projectId, new Stage("Stage2"));  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertEquals("Stage2", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertNotNull ( loaded )

[*] target: assertEquals("Stage2", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertEquals ( ProjectCard. load(ProjectId projectId ), loaded )

[*] target: assertEquals("Stage2", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertTrue ( loaded. load(ProjectId projectId ) )

[*] target: assertEquals("Stage2", loaded.parallelizedStages().print())
[-] pred:  org. junit. Assert. assertSame ( ProjectCard, loaded )

[*] target: assertEquals("Stage2", loaded.parallelizedStages().print())
[-] pred:  org

************************************
************************************
[+] input: canCalculateScheduleAfterPassingPossibleStart() { //given Stage stage1 = new Stage("Stage1").ofDuration(Duration.ofDays(2)); Stage stage2 = new Stage("Stage2").ofDuration(Duration.ofDays(5)); Stage stage3 = new Stage("Stage3").ofDuration(Duration.ofDays(7));  //and ProjectId projectId = projectFacade.addNewProject("project", stage1, stage2, stage3);  //when projectFacade.defineStartDate(projectId, Instant.parse("2021-01-01T00:00:00.00Z"));  //then Map<String, TimeSlot> expectedSchedule = Map.of( "Stage1", new TimeSlot(Instant.parse("2021-01-01T00:00:00.00Z"), Instant.parse("2021-01-03T00:00:00.00Z")), "Stage2", new TimeSlot(Instant.parse("2021-01-01T00:00:00.00Z"), Instant.parse("2021-01-06T00:00:00.00Z")), "Stage3", new TimeSlot(Instant.parse("2021-01-01T00:00:00.00Z"), Instant.parse("2021-01-08T00:00:00.00Z"))); ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(expectedSchedule)
[-] pred:  org. junit. Assert. assertEquals ( expectedSchedule, loaded. getClass ( ) )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(expectedSchedule)
[-] pred:  org. junit. Assert. assertEquals ( expectedSchedule, loaded )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(expectedSchedule)
[-] pred:  org. junit. Assert. assertEquals ( expectedSchedule, loaded. get ( ) )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(expectedSchedule)
[-] pred:  org

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(expectedSchedule)
[-] pred:  )

************************************
************************************
[+] input: canManuallyAddSchedule() { //given Stage stage1 = new Stage("Stage1").ofDuration(Duration.ofDays(2)); Stage stage2 = new Stage("Stage2").ofDuration(Duration.ofDays(5)); Stage stage3 = new Stage("Stage3").ofDuration(Duration.ofDays(7)); //and ProjectId projectId = projectFacade.addNewProject("project", stage1, stage2, stage3);  //when Map<String, TimeSlot> dates = Map.of( "Stage1", new TimeSlot(Instant.parse("2021-01-01T00:00:00.00Z"), Instant.parse("2021-01-03T00:00:00.00Z")), "Stage2", new TimeSlot(Instant.parse("2021-01-03T00:00:00.00Z"), Instant.parse("2021-01-08T00:00:00.00Z")), "Stage3", new TimeSlot(Instant.parse("2021-01-08T00:00:00.00Z"), Instant.parse("2021-01-15T00:00:00.00Z"))); projectFacade.defineManualSchedule(projectId, new Schedule(dates));  //then ProjectCard loaded = projectFacade.load(projectId); "<AssertPlaceHolder>"; }
load(ProjectId projectId) { Project project = projectRepository.findById(projectId).orElseThrow(); return toSummary(project); }
[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(dates)
[-] pred:  org. junit. Assert. assertEquals ( new TimeSlot(Instant.parseInt ( stage1, stage2, stage3, stage2, stage3 ), loaded )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(dates)
[-] pred:  org. junit. Assert. assertEquals ( new TimeSlot(Instant.parseInt ( stage1, stage2, stage3 ), loaded )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(dates)
[-] pred:  org. junit. Assert. assertEquals ( new TimeSlot(Instant.parse14 ( stage1, stage2, stage3, stage2, stage3 ), loaded )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(dates)
[-] pred:  org. junit. Assert. assertEquals ( new TimeSlot(Instant.parseInt ( stage1, stage2 ), loaded )

[*] target: assertThat(loaded.schedule().dates()).containsExactlyInAnyOrderEntriesOf(dates)
[-] pred:  org

************************************
************************************
[+] input: updatesInitialDemandsOnSagaCreation() { //when RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND);  //then "<AssertPlaceHolder>"; }
missingDemands() { return missingDemands; }
[*] target: assertEquals(SINGLE_DEMAND, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( saga. missingDemands() )

[*] target: assertEquals(SINGLE_DEMAND, saga.missingDemands())
[-] pred:  org. junit. Assert. assertSame ( 0, saga. missingDemands() )

[*] target: assertEquals(SINGLE_DEMAND, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( saga. missingDemands() ( ) )

[*] target: assertEquals(SINGLE_DEMAND, saga.missingDemands())
[-] pred:  org. junit. Assert. assertSame ( null, saga. missingDemands() )

[*] target: assertEquals(SINGLE_DEMAND, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( saga. missingDemands() { )

************************************
************************************
[+] input: updatesDeadlineOnDeadlineSet() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));  //then "<AssertPlaceHolder>"; }
deadline() { return deadline; }
[*] target: assertEquals(PROJECT_DATES.to(), saga.deadline())
[-] pred:  org. junit. Assert. assertEquals ( 2, saga. deadline() ( ) )

[*] target: assertEquals(PROJECT_DATES.to(), saga.deadline())
[-] pred:  org. junit. Assert. assertEquals ( saga, saga. deadline() ( ) )

[*] target: assertEquals(PROJECT_DATES.to(), saga.deadline())
[-] pred:  org. junit. Assert. assertEquals ( saga, saga. deadline() )

[*] target: assertEquals(PROJECT_DATES.to(), saga.deadline())
[-] pred:  org. junit. Assert. assertEquals ( stdout, saga. deadline() ( ) )

[*] target: assertEquals(PROJECT_DATES.to(), saga.deadline())
[-] pred:  org. junit. Assert. assertSame ( saga, saga. deadline() )

************************************
************************************
[+] input: updateMissingDemands() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND);  //when RiskPeriodicCheckSagaStep nextStep = saga.missingDemands(MANY_DEMANDS);  //then assertEquals(DO_NOTHING, nextStep); "<AssertPlaceHolder>"; }
missingDemands() { return missingDemands; }
[*] target: assertEquals(MANY_DEMANDS, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( nextStep. missingDemands() )

[*] target: assertEquals(MANY_DEMANDS, saga.missingDemands())
[-] pred:  org. junit. Assert. assertEquals ( null, nextStep. missingDemands() )

[*] target: assertEquals(MANY_DEMANDS, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( nextStep. missingDemands() { }

[*] target: assertEquals(MANY_DEMANDS, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( nextStep. missingDemands()

[*] target: assertEquals(MANY_DEMANDS, saga.missingDemands())
[-] pred:  org. junit. Assert. assertNull ( nextStep )

************************************
************************************
[+] input: noNewStepsOnWhenMissingDemands() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, MANY_DEMANDS);  //when RiskPeriodicCheckSagaStep nextStep = saga.missingDemands(MANY_DEMANDS);  //then "<AssertPlaceHolder>"; }
missingDemands(Demands missingDemands) { this.missingDemands = missingDemands; if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.NOTIFY_ABOUT_DEMANDS_SATISFIED; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertNull ( nextStep. missingDemands(Demands missingDemands )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertNull ( nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, saga )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org

************************************
************************************
[+] input: updatedEarningsOnEarningsRecalculated() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND);  //when RiskPeriodicCheckSagaStep nextStep = saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); assertEquals(DO_NOTHING, nextStep);  //then assertEquals(Earnings.of(1000), saga.earnings());  //when nextStep = saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(900), Instant.now(clock)));  //then "<AssertPlaceHolder>"; assertEquals(DO_NOTHING, nextStep);  }
earnings() { return earnings; }
[*] target: assertEquals(Earnings.of(900), saga.earnings())
[-] pred:  org. junit. Assert. assertEquals ( nextStep, nextStep )

[*] target: assertEquals(Earnings.of(900), saga.earnings())
[-] pred:  org. junit. Assert. assertEquals ( nextStep, nextStep. earnings() )

[*] target: assertEquals(Earnings.of(900), saga.earnings())
[-] pred:  org. junit. Assert. assertEquals ( nextStep, nextStep. earningsRoot )

[*] target: assertEquals(Earnings.of(900), saga.earnings())
[-] pred:  org. junit. Assert. assertEquals ( nextStep, nextStep. earning() )

[*] target: assertEquals(Earnings.of(900), saga.earnings())
[-] pred:  org. junit. Assert. assertEquals ( nextStep. end, nextStep. end )

************************************
************************************
[+] input: informsAboutDemandsSatisfiedWhenNoMissingDemands() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, MANY_DEMANDS); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); //when RiskPeriodicCheckSagaStep stillMissing = saga.missingDemands(SINGLE_DEMAND); RiskPeriodicCheckSagaStep zeroDemands = saga.missingDemands(Demands.none());  //then "<AssertPlaceHolder>"; assertEquals(NOTIFY_ABOUT_DEMANDS_SATISFIED, zeroDemands); }
missingDemands(Demands missingDemands) { this.missingDemands = missingDemands; if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.NOTIFY_ABOUT_DEMANDS_SATISFIED; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, stillMissing)
[-] pred:  org. junit. Assert. assertEquals ( stillMissing, zeroDemands )

[*] target: assertEquals(DO_NOTHING, stillMissing)
[-] pred:  org. junit. Assert. assertEquals ( stillMissing, zeroDemands. missingDemands ( ) )

[*] target: assertEquals(DO_NOTHING, stillMissing)
[-] pred:  org. junit. Assert. assertSame ( stillMissing, zeroDemands )

[*] target: assertEquals(DO_NOTHING, stillMissing)
[-] pred:  org. junit. Assert. assertEquals ( pendingMissing, zeroDemands )

[*] target: assertEquals(DO_NOTHING, stillMissing)
[-] pred:  )

************************************
************************************
[+] input: noNextStepOnCapabilityReleased() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND);  //when RiskPeriodicCheckSagaStep nextStep = saga.missingDemands(SINGLE_DEMAND);  //then "<AssertPlaceHolder>"; }
missingDemands(Demands missingDemands) { this.missingDemands = missingDemands; if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.NOTIFY_ABOUT_DEMANDS_SATISFIED; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertNull ( nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, saga )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertEquals ( nextStep, saga )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org

************************************
************************************
[+] input: weeklyCheckShouldResultInNothingWhenAllDemandsSatisfied() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); //and saga.missingDemands(Demands.none()); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));   //when Instant wayBeforeDeadline = PROJECT_DATES.to().minus(Duration.ofDays(1)); RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(wayBeforeDeadline);  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( wayBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( dfsBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( intendedBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( dfsStep, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( intendedStep, nextStep )

************************************
************************************
[+] input: weeklyCheckShouldResultInNothingWhenAfterDeadline() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));  //when Instant wayAfterDeadline = PROJECT_DATES.to().plus(Duration.ofDays(300)); RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(wayAfterDeadline);  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( wayAfterDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, wayAfterDeadline )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( intendedAfterDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( dfsAfterDeadline, nextStep )

************************************
************************************
[+] input: weeklyCheckDoesNothingWhenNoDeadline() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND);  //when RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(Instant.now(clock));  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, saga )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertNull ( nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertEquals ( nextStep, saga )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  )

************************************
************************************
[+] input: weeklyCheckShouldResultInNothingWhenNotCloseToDeadlineAndDemandsNotSatisfied() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, SINGLE_DEMAND); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));  //when Instant wayBeforeDeadline = PROJECT_DATES.to().minus(Duration.ofDays(300)); RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(wayBeforeDeadline);  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( wayBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( dfsBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertNull ( nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( intendedBeforeDeadline, nextStep )

[*] target: assertEquals(DO_NOTHING, nextStep)
[-] pred:  org. junit. Assert. assertSame ( intendedStep, nextStep )

************************************
************************************
[+] input: weeklyCheckShouldResultInFindAvailableWhenCloseToDeadlineAndDemandsNotSatisfied() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, MANY_DEMANDS); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(1000), Instant.now(clock))); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));  //when Instant closeToDeadline = PROJECT_DATES.to().minus(Duration.ofDays(20)); RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(closeToDeadline);  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(FIND_AVAILABLE, nextStep)
[-] pred:  org. junit. Assert. assertSame ( saga, nextStep )

[*] target: assertEquals(FIND_AVAILABLE, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, nextStep )

[*] target: assertEquals(FIND_AVAILABLE, nextStep)
[-] pred:  org. junit. Assert. assertSame ( uponStep, nextStep )

[*] target: assertEquals(FIND_AVAILABLE, nextStep)
[-] pred:  org. junit. Assert. assertSame ( PORTStep, nextStep )

[*] target: assertEquals(FIND_AVAILABLE, nextStep)
[-] pred:  org. junit. Assert. assertEquals ( saga, nextStep )

************************************
************************************
[+] input: weeklyCheckShouldResultInReplacementSuggestingWhenHighValueProjectReallyCloseToDeadlineAndDemandsNotSatisfied() { //given RiskPeriodicCheckSaga saga = new RiskPeriodicCheckSaga(PROJECT_ID, MANY_DEMANDS); //and saga.handle(new EarningsRecalculated(PROJECT_ID, Earnings.of(10000), Instant.now(clock))); //and saga.handle(new ProjectAllocationScheduled(PROJECT_ID, PROJECT_DATES, Instant.now(clock)));  //when Instant reallyCloseToDeadline = PROJECT_DATES.to().minus(Duration.ofDays(2)); RiskPeriodicCheckSagaStep nextStep = saga.handleWeeklyCheck(reallyCloseToDeadline);  //then "<AssertPlaceHolder>"; }
handleWeeklyCheck(Instant when) { if (deadline == null || when.isAfter(deadline)) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (areDemandsSatisfied()) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } long daysToDeadline = Duration.between(when, deadline).toDays(); if (daysToDeadline > UPCOMING_DEADLINE_AVAILABILITY_SEARCH) { return RiskPeriodicCheckSagaStep.DO_NOTHING; } if (daysToDeadline > UPCOMING_DEADLINE_REPLACEMENT_SUGGESTION) { return RiskPeriodicCheckSagaStep.FIND_AVAILABLE; } if (earnings.greaterThan(RISK_THRESHOLD_VALUE)) { return RiskPeriodicCheckSagaStep.SUGGEST_REPLACEMENT; } return RiskPeriodicCheckSagaStep.DO_NOTHING; }
[*] target: assertEquals(SUGGEST_REPLACEMENT, nextStep)
[-] pred:  org. junit. Assert. assertSame ( nextStep, nextStep )

[*] target: assertEquals(SUGGEST_REPLACEMENT, nextStep)
[-] pred:  org. junit. Assert. assertEquals ( saga, nextStep )

[*] target: assertEquals(SUGGEST_REPLACEMENT, nextStep)
[-] pred:  org. junit. Assert. assertSame ( schedulingStep, nextStep )

[*] target: assertEquals(SUGGEST_REPLACEMENT, nextStep)
[-] pred:  org. junit. Assert. assertEquals ( schedulingStep, nextStep )

[*] target: assertEquals(SUGGEST_REPLACEMENT, nextStep)
[-] pred:  org. junit. Assert. assertSame ( expectingStep, nextStep )

************************************
************************************
[+] input: testTopologicalSortWithSimpleDependencies() { //given Node<String> node1 = new Node<>("Node1"); Node<String> node2 = new Node<>("Node2"); Node<String> node3 = new Node<>("Node3"); Node<String> node4 = new Node<>("Node4"); node2 = node2.dependsOn(node1); node3 = node3.dependsOn(node1); node4 = node4.dependsOn(node2);  Nodes<String> nodes = new Nodes<>(node1, node2, node3, node4);  //when SortedNodes<String> sortedNodes = GRAPH_TOPOLOGICAL_SORT.sort(nodes);  //then "<AssertPlaceHolder>";  assertEquals(1, sortedNodes.all().get(0).nodes().size()); assertTrue(sortedNodes.all().get(0).nodes().contains(node1));  assertEquals(2, sortedNodes.all().get(1).nodes().size()); assertTrue(sortedNodes.all().get(1).nodes().contains(node2)); assertTrue(sortedNodes.all().get(1).nodes().contains(node3));  assertEquals(1, sortedNodes.all().get(2).nodes().size()); assertTrue(sortedNodes.all().get(2).nodes().contains(node4)); }
sort(Nodes<T> nodes) { return createSortedNodesRecursively(nodes, SortedNodes.empty()); }
[*] target: assertEquals(3, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 4, sortedNodes. size ( ) )

[*] target: assertEquals(3, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 2, sortedNodes. size ( ) )

[*] target: assertEquals(3, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 1, sortedNodes. size ( ) )

[*] target: assertEquals(3, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( new org. iLineOLOGICAL_SORT. JsonObject ( ), sortedNodes )

[*] target: assertEquals(3, sortedNodes.all().size())
[-] pred:  org

************************************
************************************
[+] input: testTopologicalSortWithLinearDependencies() { //given Node<String> node1 = new Node<>("Node1"); Node<String> node2 = new Node<>("Node2"); Node<String> node3 = new Node<>("Node3"); Node<String> node4 = new Node<>("Node4"); Node<String> node5 = new Node<>("Node5"); node1 = node1.dependsOn(node2); node2 = node2.dependsOn(node3); node3 = node3.dependsOn(node4); node4 = node4.dependsOn(node5);  Nodes<String> nodes = new Nodes<>(node1, node2, node3, node4, node5);  //when SortedNodes<String> sortedNodes = GRAPH_TOPOLOGICAL_SORT.sort(nodes);  //then "<AssertPlaceHolder>";  assertEquals(1, sortedNodes.all().get(0).nodes().size()); assertThat(sortedNodes.all().get(0).nodes()).contains(node5);  assertEquals(1, sortedNodes.all().get(1).nodes().size()); assertThat(sortedNodes.all().get(1).nodes()).contains(node4);  assertEquals(1, sortedNodes.all().get(2).nodes().size()); assertThat(sortedNodes.all().get(2).nodes()).contains(node3);  assertEquals(1, sortedNodes.all().get(3).nodes().size()); assertThat(sortedNodes.all().get(3).nodes()).contains(node2);  assertEquals(1, sortedNodes.all().get(4).nodes().size()); assertThat(sortedNodes.all().get(4).nodes()).contains(node1); }
sort(Nodes<T> nodes) { return createSortedNodesRecursively(nodes, SortedNodes.empty()); }
[*] target: assertEquals(5, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 4, sortedNodes. size ( ) )

[*] target: assertEquals(5, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( new org. i == 0 ), sortedNodes )

[*] target: assertEquals(5, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 2, sortedNodes. size ( ) )

[*] target: assertEquals(5, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( 4, sortedNodes. sort(Nodes. size ( ) )

[*] target: assertEquals(5, sortedNodes.all().size())
[-] pred:  org

************************************
************************************
[+] input: testNodesWithoutDependencies() { //given Node<String> node1 = new Node<>("Node1"); Node<String> node2 = new Node<>("Node2"); Nodes<String> nodes = new Nodes<>(Set.of(node1, node2));  //when SortedNodes<String> sortedNodes = GRAPH_TOPOLOGICAL_SORT.sort(nodes);  //then "<AssertPlaceHolder>"; }
sort(Nodes<T> nodes) { return createSortedNodesRecursively(nodes, SortedNodes.empty()); }
[*] target: assertEquals(1, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertEquals ( sortedNodes, node1 )

[*] target: assertEquals(1, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertTrue ( sortedNodes. sort(Nodes ( ). isEmpty ( ) )

[*] target: assertEquals(1, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertTrue ( sortedNodes. sort(Nodes ( node2 ) )

[*] target: assertEquals(1, sortedNodes.all().size())
[-] pred:  org. junit. Assert. assertNotNull ( sortedNodes )

[*] target: assertEquals(1, sortedNodes.all().size())
[-] pred:  org

************************************
************************************
[+] input: testCyclicDependency() { //given Node<String> node1 = new Node<>("Node1"); Node<String> node2 = new Node<>("Node2"); node2 = node2.dependsOn(node1); node1 = node1.dependsOn(node2); // making it cyclic Nodes<String> nodes = new Nodes<>(node1, node2);  //when SortedNodes<String> sortedNodes = GRAPH_TOPOLOGICAL_SORT.sort(nodes);  //then "<AssertPlaceHolder>"; }
sort(Nodes<T> nodes) { return createSortedNodesRecursively(nodes, SortedNodes.empty()); }
[*] target: assertTrue(sortedNodes.all().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( sortedNodes, node1 )

[*] target: assertTrue(sortedNodes.all().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( sortedNodes. sort(Nodes ( node1 ) )

[*] target: assertTrue(sortedNodes.all().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( sortedNodes. sort(Nodes ( node1 ). contains ( node2 ) )

[*] target: assertTrue(sortedNodes.all().isEmpty())
[-] pred:  org

[*] target: assertTrue(sortedNodes.all().isEmpty())
[-] pred:  )

************************************
************************************
[+] input: 장바구니_총합_계산() { Cart cart = aCart().items(asList( aCartLineItem() .groups(asList( aCartOptionGroup() .options(asList( aCartOption().price(Money.wons(10000L)).build(), aCartOption().price(Money.wons(20000L)).build())) .build())) .build())) .build();  "<AssertPlaceHolder>"; }
getTotalPrice() { return items.stream().map(item -> item.getTotalPrice()).reduce(Money.ZERO, (first, second) -> first.plus(second)); }
[*] target: assertEquals(Money.wons(30000L), cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertNotNull ( cart. getTotalPrice() ( ) )

[*] target: assertEquals(Money.wons(30000L), cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertEquals ( 3, cart. getTotalPrice() ( ) )

[*] target: assertEquals(Money.wons(30000L), cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertEquals ( 6, cart. getTotalPrice() ( ) )

[*] target: assertEquals(Money.wons(30000L), cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertEquals ( 0L, cart. getTotalPrice() ( ) )

[*] target: assertEquals(Money.wons(30000L), cart.getTotalPrice())
[-] pred:  org

************************************
************************************
[+] input: 주문() { Cart cart = aCart().items(asList( aCartLineItem() .groups(asList( aCartOptionGroup() .options(asList( aCartOption().price(Money.wons(10000L)).build(), aCartOption().price(Money.wons(20000L)).build())) .build())) .build())) .build(); Order order = cart.placeOrder();  assertThat(order.getPrice()).isEqualTo(Money.wons(30000L)); "<AssertPlaceHolder>"; }
getTotalPrice() { return items.stream().map(item -> item.getTotalPrice()).reduce(Money.ZERO, (first, second) -> first.plus(second)); }
[*] target: assertThat(order.getPrice()).isEqualTo(cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertNotNull ( order. getTotalPrice() ( ) )

[*] target: assertThat(order.getPrice()).isEqualTo(cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertSame ( cart, order. getTotalPrice() ( ) )

[*] target: assertThat(order.getPrice()).isEqualTo(cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertSame ( cart, order )

[*] target: assertThat(order.getPrice()).isEqualTo(cart.getTotalPrice())
[-] pred:  org. junit. Assert. assertEquals ( cart. getTotalPrice() ( ), order )

[*] target: assertThat(order.getPrice()).isEqualTo(cart.getTotalPrice())
[-] pred:  org

************************************
************************************
[+] input: 메뉴오픈_빈옵션그룹_에러() { Menu menu = aMenu().groups(list()).build();  Throwable exception = "<AssertPlaceHolder>";  assertEquals("옵션그룹은 하나 이상 존재해야 합니다.", exception.getMessage()); }
open() { if (groups.isEmpty()) { throw new IllegalStateException("옵션그룹은 하나 이상 존재해야 합니다."); }  if (countOfMandatoryOptionGroups() == 0) { throw new IllegalStateException("필수 옵션그룹은 최소 1개는 등록되어 있어야 합니다."); }  if (countOfMandatoryOptionGroups() > 3) { throw new IllegalStateException("필수 옵션그룹은 3개까지만 등록가능 합니다."); }  if (countOfFreeOptionGroups() < 1) { throw new IllegalStateException("금액이 설정된 옵션그룹이 최소 1개는 등록되어 있어야 합니다."); }  open = true; }
[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( 0L ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( 0Lbuild();(); ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( 0Lbuild(); ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( 0L build();(); ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( ) )

************************************
************************************
[+] input: 메뉴오픈_필수옵션그룹_없음_오류() { Menu menu = aMenu() .groups(list(anOptionGroup().mandatory(false).build())) .build();  Throwable exception = "<AssertPlaceHolder>";  assertEquals("필수 옵션그룹은 최소 1개는 등록되어 있어야 합니다.", exception.getMessage()); }
open() { if (groups.isEmpty()) { throw new IllegalStateException("옵션그룹은 하나 이상 존재해야 합니다."); }  if (countOfMandatoryOptionGroups() == 0) { throw new IllegalStateException("필수 옵션그룹은 최소 1개는 등록되어 있어야 합니다."); }  if (countOfMandatoryOptionGroups() > 3) { throw new IllegalStateException("필수 옵션그룹은 3개까지만 등록가능 합니다."); }  if (countOfFreeOptionGroups() < 1) { throw new IllegalStateException("금액이 설정된 옵션그룹이 최소 1개는 등록되어 있어야 합니다."); }  open = true; }
[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. openContainer ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open TYPE ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. openStep ( ) )

************************************
************************************
[+] input: 메뉴오픈_필수옵션그룹_갯수초과_오류() { Menu menu = aMenu() .groups(list( anOptionGroup().name("그룹1").mandatory(true).build(), anOptionGroup().name("그룹2").mandatory(true).build(), anOptionGroup().name("그룹3").mandatory(true).build(), anOptionGroup().name("그룹4").mandatory(true).build())) .build();  Throwable exception = "<AssertPlaceHolder>";  assertEquals("필수 옵션그룹은 3개까지만 등록가능 합니다.", exception.getMessage()); }
open() { if (groups.isEmpty()) { throw new IllegalStateException("옵션그룹은 하나 이상 존재해야 합니다."); }  if (countOfMandatoryOptionGroups() == 0) { throw new IllegalStateException("필수 옵션그룹은 최소 1개는 등록되어 있어야 합니다."); }  if (countOfMandatoryOptionGroups() > 3) { throw new IllegalStateException("필수 옵션그룹은 3개까지만 등록가능 합니다."); }  if (countOfFreeOptionGroups() < 1) { throw new IllegalStateException("금액이 설정된 옵션그룹이 최소 1개는 등록되어 있어야 합니다."); }  open = true; }
[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. empty ( ) ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. openContainer ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. openStep ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org

************************************
************************************
[+] input: 메뉴오픈_금액설정_옵션그룹_미존재_오류() { Menu menu = aMenu() .groups(list( anOptionGroup().name("그룹1").mandatory(true).options(list(anOption().price(Money.ZERO).build())).build(), anOptionGroup().name("그룹2").mandatory(true).options(list(anOption().price(Money.ZERO).build())).build())) .build();  Throwable exception = "<AssertPlaceHolder>";  assertEquals("금액이 설정된 옵션그룹이 최소 1개는 등록되어 있어야 합니다.", exception.getMessage()); }
open() { if (groups.isEmpty()) { throw new IllegalStateException("옵션그룹은 하나 이상 존재해야 합니다."); }  if (countOfMandatoryOptionGroups() == 0) { throw new IllegalStateException("필수 옵션그룹은 최소 1개는 등록되어 있어야 합니다."); }  if (countOfMandatoryOptionGroups() > 3) { throw new IllegalStateException("필수 옵션그룹은 3개까지만 등록가능 합니다."); }  if (countOfFreeOptionGroups() < 1) { throw new IllegalStateException("금액이 설정된 옵션그룹이 최소 1개는 등록되어 있어야 합니다."); }  open = true; }
[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. openStep ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertNull ( exception. open ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertEquals ( exception, menu. open() ( ) )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(IllegalStateException.class, () -> menu.open())
[-] pred:  org

************************************
************************************
[+] input: insertValidData() { final var input = new CategoryDTO("title", "description", "ownerId"); final var category = new Category(input); given(repository.save(category)).willReturn(category);  final var actual = service.insert(input);  "<AssertPlaceHolder>"; then(snsService).should().publish(new MessageDTO(category.toString())); }
insert(CategoryDTO categoryData){ Category newCategory = new Category(categoryData);  this.repository.save(newCategory);  this.snsService.publish(new MessageDTO(newCategory.toString()));  return newCategory; }
[*] target: assertEquals(category, actual)
[-] pred:  org. junit. Assert. assertEquals ( category, actual )

[*] target: assertEquals(category, actual)
[-] pred:  org. junit. Assert. assertEquals ( category and category, actual )

[*] target: assertEquals(category, actual)
[-] pred:  org. junit. Assert. assertEquals ( categories, actual )

[*] target: assertEquals(category, actual)
[-] pred:  org

[*] target: assertEquals(category, actual)
[-] pred:  )

************************************
************************************
[+] input: testCreateChatModel() { // Instance of the class containing the method to be tested var factory = new AnthropicChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("dummy-model"); chatModel.setTemperature(0.7); chatModel.setTopP(0.9); chatModel.setMaxTokens(256); chatModel.setMaxRetries(3);  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; }
createChatModel(@NotNull ChatModel chatModel) { return AnthropicChatModel.builder() .apiKey(getApiKey()) .modelName(chatModel.getModelName()) .temperature(chatModel.getTemperature()) .topP(chatModel.getTopP()) .maxTokens(chatModel.getMaxTokens()) .maxRetries(chatModel.getMaxRetries()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  , result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

[*] target: assertThat(result).isNotNull()
[-] pred:  )

************************************
************************************
[+] input: testModelNames() { AnthropicChatModelFactory factory = new AnthropicChatModelFactory(); Assertions."<AssertPlaceHolder>";  List<LanguageModel> modelNames = factory.getModels(); Assertions.assertThat(modelNames).size().isEqualTo(7); }
getModels() { return getModels(ModelProvider.Anthropic); }
[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertNull ( factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertNotNull ( factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertNull ( factory. getModels() ( null ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertSame ( factory, factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org

************************************
************************************
[+] input: createChatModel() { // Instance of the class containing the method to be tested var factory = new DeepInfraChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("dummy-model"); chatModel.setTemperature(0.7); chatModel.setTopP(0.9); chatModel.setMaxTokens(256); chatModel.setMaxRetries(3);  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); Assertions."<AssertPlaceHolder>"; }
createChatModel(@NotNull ChatModel chatModel) { return OpenAiChatModel.builder() .baseUrl("https://api.deepinfra.com/v1/openai") .apiKey(getApiKey()) .modelName(chatModel.getModelName()) .maxRetries(chatModel.getMaxRetries()) .temperature(chatModel.getTemperature()) .maxTokens(chatModel.getMaxTokens()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .topP(chatModel.getTopP()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

[*] target: assertThat(result).isNotNull()
[-] pred:  )

************************************
************************************
[+] input: testModelNames() { DeepInfraChatModelFactory factory = new DeepInfraChatModelFactory(); Assertions."<AssertPlaceHolder>";  List<LanguageModel> modelNames = factory.getModels(); Assertions.assertThat(modelNames).size().isEqualTo(10); }
getModels() { return getModels(ModelProvider.DeepInfra); }
[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 1, factory. getModels() ( ). size ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertNotNull ( factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertTrue ( ( ( factory. getModels() ( ) ) == null ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertSame ( factory. getModels() ( ), factory. getModels() )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org

************************************
************************************
[+] input: testCreateChatModel() { try (MockedStatic<DevoxxGenieSettingsServiceProvider> mockedSettings = Mockito.mockStatic(DevoxxGenieSettingsServiceProvider.class)) { // Setup the mock for SettingsState DevoxxGenieStateService mockSettingsState = mock(DevoxxGenieStateService.class); when(DevoxxGenieSettingsServiceProvider.getInstance()).thenReturn(mockSettingsState); when(mockSettingsState.getGpt4allModelUrl()).thenReturn("http://localhost:8080");  // Instance of the class containing the method to be tested GPT4AllChatModelFactory factory = new GPT4AllChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("gtp4all");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; } }
createChatModel(@NotNull ChatModel chatModel) { return LocalAiChatModel.builder() .baseUrl(DevoxxGenieSettingsServiceProvider.getInstance().getGpt4allModelUrl()) .modelName(TEST_MODEL) .maxRetries(chatModel.getMaxRetries()) .maxTokens(chatModel.getMaxTokens()) .temperature(chatModel.getTemperature()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .topP(chatModel.getTopP()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( sharedModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: createChatModel() { // Instance of the class containing the method to be tested GroqChatModelFactory factory = new GroqChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setBaseUrl("http://localhost:8080");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; }
createChatModel(@NotNull ChatModel chatModel) { return OpenAiChatModel.builder() .baseUrl("https://api.groq.com/openai/v1") .apiKey(getApiKey()) .modelName(chatModel.getModelName()) .maxRetries(chatModel.getMaxRetries()) .maxTokens(chatModel.getMaxTokens()) .temperature(chatModel.getTemperature()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .topP(chatModel.getTopP()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  , result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

[*] target: assertThat(result).isNotNull()
[-] pred:  )

************************************
************************************
[+] input: testModelNames() { GroqChatModelFactory factory = new GroqChatModelFactory(); Assertions."<AssertPlaceHolder>";  List<LanguageModel> modelNames = factory.getModels(); Assertions.assertThat(modelNames).size().isEqualTo(4); }
getModels() { return getModels(ModelProvider.Groq); }
[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertTrue ( ( ( factory. getModels() ( ). size ( ) ) == 1 ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertFalse ( factory. getModels() ( ). isEmpty ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 1, factory. getModels() ( ). size ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertTrue ( ( ( factory. getModels() ( ). size ( ) ) > 0 ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertTrue ( ( ( factory. getModels() ( ). size ( ) ) > 1 ) )

************************************
************************************
[+] input: testCreateChatModel() { try (MockedStatic<DevoxxGenieSettingsServiceProvider> mockedSettings = Mockito.mockStatic(DevoxxGenieSettingsServiceProvider.class)) { // Setup the mock for SettingsState DevoxxGenieStateService mockSettingsState = mock(DevoxxGenieStateService.class); when(DevoxxGenieSettingsServiceProvider.getInstance()).thenReturn(mockSettingsState); when(mockSettingsState.getJanModelUrl()).thenReturn("http://localhost:8080");  // Instance of the class containing the method to be tested JanChatModelFactory factory = new JanChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("jan"); chatModel.setBaseUrl("http://localhost:8080");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; } }
createChatModel(@NotNull ChatModel chatModel) { return LocalAiChatModel.builder() .baseUrl(DevoxxGenieSettingsServiceProvider.getInstance().getJanModelUrl()) .modelName(chatModel.getModelName()) .maxRetries(chatModel.getMaxRetries()) .temperature(chatModel.getTemperature()) .maxTokens(chatModel.getMaxTokens()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .topP(chatModel.getTopP()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( sharedModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: testCreateChatModel() { try (MockedStatic<DevoxxGenieSettingsServiceProvider> mockedSettings = Mockito.mockStatic(DevoxxGenieSettingsServiceProvider.class)) { // Setup the mock for SettingsState DevoxxGenieStateService mockSettingsState = mock(DevoxxGenieStateService.class); when(DevoxxGenieSettingsServiceProvider.getInstance()).thenReturn(mockSettingsState); when(mockSettingsState.getLmstudioModelUrl()).thenReturn("http://localhost:8080");  // Instance of the class containing the method to be tested LMStudioChatModelFactory factory = new LMStudioChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("lmstudio");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; } }
createChatModel(@NotNull ChatModel chatModel) { return LocalAiChatModel.builder() .baseUrl(DevoxxGenieSettingsServiceProvider.getInstance().getLmstudioModelUrl()) .modelName(TEST_MODEL) .temperature(chatModel.getTemperature()) .topP(chatModel.getTopP()) .maxTokens(chatModel.getMaxTokens()) .maxRetries(chatModel.getMaxRetries()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( sharedModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: createChatModel() { // Instance of the class containing the method to be tested MistralChatModelFactory factory = new MistralChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setBaseUrl("http://localhost:8080");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; }
createChatModel(@NotNull ChatModel chatModel) { return MistralAiChatModel.builder() .apiKey(getApiKey()) .modelName(chatModel.getModelName()) .maxRetries(chatModel.getMaxRetries()) .temperature(chatModel.getTemperature()) .maxTokens(chatModel.getMaxTokens()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .topP(chatModel.getTopP()) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

[*] target: assertThat(result).isNotNull()
[-] pred:  )

************************************
************************************
[+] input: testModelNames() { MistralChatModelFactory factory = new MistralChatModelFactory(); Assertions."<AssertPlaceHolder>";  List<LanguageModel> modelNames = factory.getModels(); Assertions.assertThat(modelNames).size().isEqualTo(5); }
getModels() { return getModels(ModelProvider.Mistral); }
[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 1, factory. getModels() ( ). size ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertSame ( factory, factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertNotNull ( factory. getModels() ( ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org. junit. Assert. assertSame ( factory, factory. getModels() ( 0 ) )

[*] target: assertThat(factory.getModels()).isNotEmpty()
[-] pred:  org

************************************
************************************
[+] input: testCreateChatModel() { try (MockedStatic<DevoxxGenieSettingsServiceProvider> mockedSettings = Mockito.mockStatic(DevoxxGenieSettingsServiceProvider.class)) { // Setup the mock for SettingsState DevoxxGenieStateService mockSettingsState = mock(DevoxxGenieStateService.class); when(DevoxxGenieSettingsServiceProvider.getInstance()).thenReturn(mockSettingsState); when(mockSettingsState.getOllamaModelUrl()).thenReturn("http://localhost:8080");  // Instance of the class containing the method to be tested OllamaChatModelFactory factory = new OllamaChatModelFactory();  // Create a dummy ChatModel ChatModel chatModel = new ChatModel(); chatModel.setModelName("ollama"); chatModel.setBaseUrl("http://localhost:8080");  // Call the method ChatLanguageModel result = factory.createChatModel(chatModel); "<AssertPlaceHolder>"; } }
createChatModel(@NotNull ChatModel chatModel) { return OllamaChatModel.builder() .baseUrl(DevoxxGenieSettingsServiceProvider.getInstance().getOllamaModelUrl()) .modelName(chatModel.getModelName()) .temperature(chatModel.getTemperature()) .topP(chatModel.getTopP()) .maxRetries(chatModel.getMaxRetries()) .timeout(Duration.ofSeconds(chatModel.getTimeout())) .build(); }
[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( chatModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( OllamaChatModel.builder(). createChatModel(@NotNull ChatLanguageModel ( ), result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( chatModel ) ) )

[*] target: assertThat(result).isNotNull()
[-] pred:  org. junit. Assert. assertEquals ( sharedModel, result )

[*] target: assertThat(result).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: testNewSession() { String session = sessionManager.newSession(); Assertions.assertNotNull(session); Assertions.assertEquals(16, session.length());  // Ensure the generated session is unique String newSession = sessionManager.newSession(); Assertions."<AssertPlaceHolder>"; }
newSession() { String session = randomSession(); while (sessionMap.containsKey(session)) { session = randomSession(); } sessionMap.put(session, new PullSession(session)); return session; }
[*] target: assertNotEquals(session, newSession)
[-] pred:  org. junit. Assert. assertTrue ( newSession. equals ( session ) )

[*] target: assertNotEquals(session, newSession)
[-] pred:  org. junit. Assert. assertTrue ( ( session!= newSession ) )

[*] target: assertNotEquals(session, newSession)
[-] pred:  test whether the session is unique

[*] target: assertNotEquals(session, newSession)
[-] pred:  test the newSession method

[*] target: assertNotEquals(session, newSession)
[-] pred:  test the newSession

************************************
************************************
[+] input: testGetSession() { String session = sessionManager.newSession(); PullSession pullSession = sessionManager.getSession(session); Assertions.assertNotNull(pullSession); Assertions."<AssertPlaceHolder>"; }
getSession() { return session; }
[*] target: assertEquals(session, pullSession.getSession())
[-] pred:  org. junit. Assert. assertEquals ( session, pullSession. getSession() )

[*] target: assertEquals(session, pullSession.getSession())
[-] pred:  org. junit. Assert. assertNull ( pullSession. getSession() ( ) )

[*] target: assertEquals(session, pullSession.getSession())
[-] pred:  org. junit. Assert. assertEquals ( session, pullSession. getSession() { )

[*] target: assertEquals(session, pullSession.getSession())
[-] pred:  org. junit. Assert. assertNotNull ( pullSession. getSession() ( ) )

[*] target: assertEquals(session, pullSession.getSession())
[-] pred:  org. junit. Assert. assertEquals ( session, pullSession. getSession() { }

************************************
************************************
[+] input: testUpdateProgress() { String session = sessionManager.newSession(); float progress = 0.5f; sessionManager.updateProgress(session, progress);  PullSession pullSession = sessionManager.getSession(session); Assertions."<AssertPlaceHolder>"; }
getProgress() { return progress; }
[*] target: assertEquals(progress, pullSession.getProgress(), 0.01)
[-] pred:  org. junit. Assert. assertEquals ( progress, pullSession. getProgress() ( ), 0 )

[*] target: assertEquals(progress, pullSession.getProgress(), 0.01)
[-] pred:  org. junit. Assert. assertEquals ( duration, pullSession. getProgress() ( ), 0 )

[*] target: assertEquals(progress, pullSession.getProgress(), 0.01)
[-] pred:  org. junit. Assert. assertEquals ( progress, pullSession. getProgress() ( ) )

[*] target: assertEquals(progress, pullSession.getProgress(), 0.01)
[-] pred:  org. junit. Assert. assertEquals ( data. getProgress() ( ), progress )

[*] target: assertEquals(progress, pullSession.getProgress(), 0.01)
[-] pred:  org. junit. Assert. assertEquals ( progress, pullSession. getProgress() ( ), 0.0 )

************************************
************************************
[+] input: testChangeStatus() { String session = sessionManager.newSession(); String status = "completed"; sessionManager.changeStatus(session, status);  PullSession pullSession = sessionManager.getSession(session); Assertions."<AssertPlaceHolder>"; }
getStatus() { return status; }
[*] target: assertEquals(status, pullSession.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( status, pullSession. getStatus()

[*] target: assertEquals(status, pullSession.getStatus())
[-] pred:  . getStatus() ( session ), status )

[*] target: assertEquals(status, pullSession.getStatus())
[-] pred:  the status of the pullSession

[*] target: assertEquals(status, pullSession.getStatus())
[-] pred:  . getStatus() method )

[*] target: assertEquals(status, pullSession.getStatus())
[-] pred:  )

************************************
************************************
[+] input: Exception { ExtensionException e; DefaultExtContext<Object> context = new DefaultExtContext<>(true, true);  context.registerBusiness(new BusinessX()); e = "<AssertPlaceHolder>"; assertEquals("business BusinessX already registered", e.getMessage());  context.registerBusiness(new BusinessY()); context.registerBusiness(new BusinessZ());  e = assertThrows(ExtensionException.class, () -> context.registerAbility(new AbilityL())); assertEquals("ability AbilityL should implement at least one interface that annotated with @ExtensionPoint", e.getMessage());  context.registerAbility(new AbilityM()); e = assertThrows(ExtensionException.class, () -> context.registerAbility(new AbilityM())); assertEquals("ability AbilityM already registered", e.getMessage());  context.registerAbility(new AbilityN()); context.registerAbility(new ExtDefaultAbility());  context.registerBusiness(new BusinessPriorityConflict()); }
registerBusiness(IBusiness<T> business) throws ExtensionException { if (enableLogger) { logger.info("[ExtensionFactory] register business: " + business.code()); }  businessManager.registerBusiness(business); extensionManager.registerExtGroupRealization(business, business.code()); }
[*] target: assertThrows(ExtensionException.class, () -> context.registerBusiness(new BusinessX()))
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertThrows(ExtensionException.class, () -> context.registerBusiness(new BusinessX()))
[-] pred:  org. junit. Assert. assertEquals ( new BusinessX()); ( ), e )

[*] target: assertThrows(ExtensionException.class, () -> context.registerBusiness(new BusinessX()))
[-] pred:  org. junit. Assert. assertEquals ( e.()); ( ), e )

[*] target: assertThrows(ExtensionException.class, () -> context.registerBusiness(new BusinessX()))
[-] pred:  org. junit. Assert. assertEquals ( new BusinessX());, e )

[*] target: assertThrows(ExtensionException.class, () -> context.registerBusiness(new BusinessX()))
[-] pred:  org. junit. Assert. assertEquals ( e, e.()); )

************************************
************************************
[+] input: Exception { List<ExtA> extAList; ExtA extA; DefaultExtContext<Object> context = new DefaultExtContext<>(false, false);  context.registerBusiness(new BusinessX()); context.registerBusiness(new BusinessY()); context.registerBusiness(new BusinessZ()); context.registerBusiness(new BusinessZZ()); context.registerAbility(new AbilityM()); context.registerAbility(new AbilityN()); context.registerAbility(new ExtDefaultAbility());  assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class)); assertThrows(ExtensionException.class, () -> context.getFirstMatchedExtension(ExtA.class));  context.initSession("XXX"); extAList = context.getAllMatchedExtension(ExtA.class); assertEquals(1, extAList.size()); extA = context.getFirstMatchedExtension(ExtA.class); assertEquals("ExtDefaultAbility do extA", extA.extA());  context.initSession("BusinessX-BusinessY"); extAList = context.getAllMatchedExtension(ExtA.class); assertEquals(2, extAList.size()); assertEquals("BusinessX exec extA", extAList.get(0).extA()); assertEquals("ExtDefaultAbility do extA", extAList.get(1).extA()); extA = context.getFirstMatchedExtension(ExtA.class); assertEquals("BusinessX exec extA", extA.extA());  context.removeSession(); "<AssertPlaceHolder>"; }
getAllMatchedExtension(Class<E> extensionType) throws ExtensionException { List<String> matchedCodes; try { matchedCodes = session.getMatchedCodes(); } catch (SessionException e) { throw new ExtensionNotFoundException(extensionType.getName() + " not found, getMatchedCodes failed", e); }  if (enableLogger) { logger.info("[ExtensionFactory] get all matched candidate codes: " + String.join(" > ", matchedCodes)); }  List<E> extensions = new ArrayList<>(); for (String code : matchedCodes) { E extension; try { extension = extensionManager.getExtGroupRealization(extensionType, code); } catch (ExtensionNotFoundException e) { continue; } if (extension != null) { extensions.add(extension); } }  if (enableLogger) { logger.info("[ExtensionFactory] get all matched extension instance: " + extensions.stream().map(e -> ((IExtGroupRealization<?>) e).code()).collect(Collectors.joining(" > "))); } return extensions; }
[*] target: assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class))
[-] pred:  org. junit. Assert. assertTrue ( ( ( extA. getAllMatchedExtension ( extA ). size ( ) ) > 0 ) )

[*] target: assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class))
[-] pred:  org. junit. Assert. assertEquals ( 4, extA. getAllMatchedExtension(Class<sp> extAList )

[*] target: assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class))
[-] pred:  org. junit. Assert. assertTrue ( ( ( extA. getAllMatchedExtension(Class<sp> extAList ) instanceof java. lang. String ) )

[*] target: assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class))
[-] pred:  org. junit. Assert. assertTrue ( ( ( extA. getAllMatchedExtension(Class<sp> extAList ) instanceof org. apache. cas. CoreMatchers ) )

[*] target: assertThrows(ExtensionException.class, () -> context.getAllMatchedExtension(ExtA.class))
[-] pred:  org

************************************
************************************
[+] input: AbilityException { AbilityException e; DefaultAbilityManager<Object> manager = new DefaultAbilityManager<>();  e = assertThrows(AbilityException.class, () -> manager.registerAbility(null)); assertEquals("ability can not be null", e.getMessage());  e = assertThrows(AbilityException.class, () -> manager.registerAbility(new Ability1())); assertEquals("ability Ability1 should implement at least one interface that annotated with @ExtensionPoint", e.getMessage());  manager.registerAbility(new Ability2()); e = assertThrows(AbilityException.class, () -> manager.registerAbility(new Ability2())); assertEquals("ability Ability2 already registered", e.getMessage());  e = assertThrows(AbilityException.class, () -> manager.getAbility(null)); assertEquals("abilityCode can not be null", e.getMessage());  e = assertThrows(AbilityException.class, () -> manager.getAbility("x")); assertEquals("ability x not found", e.getMessage());  IAbility<Object> ability2 = manager.getAbility("Ability2"); assertNotNull(ability2);  List<IAbility<Object>> abilities = manager.listAllAbilities(); "<AssertPlaceHolder>"; assertEquals(ability2, abilities.get(0)); }
listAllAbilities() { return new ArrayList<>(abilities.values()); }
[*] target: assertEquals(1, abilities.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, abilities. listAllAbilities ( ). size ( ) )

[*] target: assertEquals(1, abilities.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList < java. lang. Object > ( ), abilities )

[*] target: assertEquals(1, abilities.size())
[-] pred:  org. junit. Assert. assertEquals ( asList ( e, e, abilities ), abilities )

[*] target: assertEquals(1, abilities.size())
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( java. util. Arrays. asList ( e ) ), abilities )

[*] target: assertEquals(1, abilities.size())
[-] pred:  org

************************************
************************************
[+] input: BusinessException { BusinessException exception;  exception = assertThrows(BusinessException.class, () -> manager.getBusiness(null)); assertEquals("businessCode can not be null", exception.getMessage());  exception = assertThrows(BusinessException.class, () -> manager.registerBusiness(null)); assertEquals("business can not be null", exception.getMessage());  manager.registerBusiness(new Business1()); exception = assertThrows(BusinessException.class, () -> manager.registerBusiness(new Business1())); assertEquals("business Business1 already registered", exception.getMessage());  manager.registerBusiness(new Business2());  IBusiness<Object> b = manager.getBusiness("Business2"); assertNotNull(b); assertEquals("Business2", b.code()); assertEquals(1, b.implementsExtensions().size()); assertEquals(Ext1.class, b.implementsExtensions().get(0));  List<IBusiness<Object>> businessList = manager.listAllBusinesses(); "<AssertPlaceHolder>"; assertEquals(b, businessList.get(1)); }
listAllBusinesses() { return new ArrayList<>(businesses.values()); }
[*] target: assertEquals(2, businessList.size())
[-] pred:  org. junit. Assert. assertThat ( businessList. listAllBusinesses() ( ). size ( ), org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertEquals(2, businessList.size())
[-] pred:  org. junit. Assert. assertThat ( businessList. listAllBusinesses ( ). size ( ), org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertEquals(2, businessList.size())
[-] pred:  org. junit. Assert. assertThat ( businessList. listAllBusinesses ( ). size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(2, businessList.size())
[-] pred:  org. junit. Assert. assertThat ( businessList. listAllBusinesses() ( ). size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(2, businessList.size())
[-] pred:  org. junit. Assert. assertThat ( businessList. listAllBusinesses());. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

************************************
************************************
[+] input: ExtensionException { ExtensionException e;  e = assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(null, null)); assertEquals("name can not be null", e.getMessage());  e = assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(null, "extGroupRealization")); assertEquals("instance can not be null", e.getMessage());  manager.registerExtGroupRealization(new ExtGroupRealization1(), "ExtGroupRealization1");  manager.registerExtGroupRealization(new ExtGroupRealization2(), "ExtGroupRealization2");  e = "<AssertPlaceHolder>";  assertEquals("instance io.github.xiaoshicae.extension.core.extension.ExtA with name ExtGroupRealization2 already registered", e.getMessage()); }
registerExtGroupRealization(T instance, String name) throws ExtensionException { if (name == null) { throw new ExtensionException("name can not be null"); }  if (instance == null) { throw new ExtensionTypeException("instance can not be null"); }  for (Class<?> clazz : instance.getClass().getInterfaces()) { if (clazz.isAnnotationPresent(ExtensionPoint.class)) { if (extensionInstances.containsKey(makeKey(clazz, name))) { throw new ExtensionTypeException("instance " + clazz.getName() + " with name " + name + " already registered"); }  extensionInstances.put(makeKey(clazz, name), instance); } } }
[*] target: assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(new ExtGroupRealization3(), "ExtGroupRealization2"))
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(new ExtGroupRealization3(), "ExtGroupRealization2"))
[-] pred:  org. junit. Assert. assertNotNull ( e. getMessage ( ) )

[*] target: assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(new ExtGroupRealization3(), "ExtGroupRealization2"))
[-] pred:  org. junit. Assert. assertNotNull ( e. getCode ( ) )

[*] target: assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(new ExtGroupRealization3(), "ExtGroupRealization2"))
[-] pred:  org. junit. Assert. assertNotNull ( e. getCode()); )

[*] target: assertThrows(ExtensionException.class, () -> manager.registerExtGroupRealization(new ExtGroupRealization3(), "ExtGroupRealization2"))
[-] pred:  org. junit. Assert. assertEquals ( e, e )

************************************
************************************
[+] input: ExtensionException { ExtensionException exception; DefaultExtGroupRealizationManager manager = new DefaultExtGroupRealizationManager();  exception = assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(null, null)); assertEquals("name can not be null", exception.getMessage());  exception = assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(null, "")); assertEquals("extensionType can not be null", exception.getMessage());  exception = assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtGroupRealization1.class, "")); assertEquals("extensionType must be an interface", exception.getMessage());  exception = assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(IBusiness.class, "")); assertEquals("extensionType must be annotated with @ExtensionPoint", exception.getMessage());  exception = "<AssertPlaceHolder>"; assertEquals("extension x not found", exception.getMessage());  manager.registerExtGroupRealization(new ExtGroupRealization2(), "ExtGroupRealization2"); ExtA extA = manager.getExtGroupRealization(ExtA.class, "ExtGroupRealization2"); }
getExtGroupRealization(Class<T> extensionType, String name) throws ExtensionException { if (name == null) { throw new ExtensionException("name can not be null"); } if (extensionType == null) { throw new ExtensionTypeException("extensionType can not be null"); } if (!extensionType.isInterface()) { throw new ExtensionTypeException("extensionType must be an interface"); } if (!extensionType.isAnnotationPresent(ExtensionPoint.class)) { throw new ExtensionTypeException("extensionType must be annotated with @ExtensionPoint"); }  Object instance = extensionInstances.get(makeKey(extensionType, name)); if (instance == null) { throw new ExtensionNotFoundException("extension " + name + " not found"); }  if (!extensionType.isInstance(instance)) { throw new ExtensionTypeException("extension " + name + " is not an instance of " + extensionType.getName()); }  return (T) instance; }
[*] target: assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtA.class, "x"))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtA.class, "x"))
[-] pred:  org. junit. Assert. assertNotNull ( exception.getMessage());Exception )

[*] target: assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtA.class, "x"))
[-] pred:  org. junit. Assert. assertNotNull ( exception. getMessage ( ) )

[*] target: assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtA.class, "x"))
[-] pred:  org. junit. Assert. assertNotNull ( exception, exception )

[*] target: assertThrows(ExtensionException.class, () -> manager.getExtGroupRealization(ExtA.class, "x"))
[-] pred:  org. junit. Assert. assertNotNull ( exception.getMessage()); )

************************************
************************************
[+] input: invokeCount() { boolean b = userInterfaceInfoService.invokeCount(1L, 1L); Assertions."<AssertPlaceHolder>"; }
invokeCount(long interfaceInfoId, long userId);
[*] target: assertTrue(b)
[-] pred:  org. junit. Assert. assertTrue ( b )

[*] target: assertTrue(b)
[-] pred:  org. junit. Assert. assertFalse ( b )

[*] target: assertTrue(b)
[-] pred:  org. junit. Assert. assertTrue ( b )

[*] target: assertTrue(b)
[-] pred:  org. junit. Assert. if ( b )

[*] target: assertTrue(b)
[-] pred:  org

************************************
************************************
[+] input: userRegister() { String userAccount = "api"; String userPassword = ""; String checkPassword = "123456"; try { long result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "api"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "api"; userPassword = "123456"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "api123"; userPassword = "12345678"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); checkPassword = "123456789"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "dog"; checkPassword = "12345678"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "api"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions."<AssertPlaceHolder>"; } catch (Exception e) {  } }
userRegister(String userAccount, String userPassword, String checkPassword);
[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertTrue ( ( result == result ) )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertEquals ( result, userAccount )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertTrue ( ( result!= null ) )

************************************
************************************
[+] input: testFactory() { CommandHandlerFactory.init(); CommandHandler run = CommandHandlerFactory.getCommandHandler("run"); Assertions.assertEquals(run.getCommand().getName(), "run");  HelpCommandHandler helpCommandHandler = new HelpCommandHandler(); CommandHandlerFactory.register(helpCommandHandler); CommandHandler commandHandler = CommandHandlerFactory.getCommandHandler(helpCommandHandler.getCommand().getName()); Assertions."<AssertPlaceHolder>"; }
getCommand();
[*] target: assertEquals(helpCommandHandler.getCommand().getName(), commandHandler.getCommand().getName())
[-] pred:  org. junit. Assert. assertEquals ( run, commandHandler )

[*] target: assertEquals(helpCommandHandler.getCommand().getName(), commandHandler.getCommand().getName())
[-] pred:  org. junit. Assert. assertEquals ( runs, commandHandler )

[*] target: assertEquals(helpCommandHandler.getCommand().getName(), commandHandler.getCommand().getName())
[-] pred:  org. junit. Assert. assertEquals ( running, commandHandler )

[*] target: assertEquals(helpCommandHandler.getCommand().getName(), commandHandler.getCommand().getName())
[-] pred:  org. junit. Assert. assertEquals ( run, commandHandler )

[*] target: assertEquals(helpCommandHandler.getCommand().getName(), commandHandler.getCommand().getName())
[-] pred:  org

************************************
************************************
[+] input: parseCommandTest() { String line = "run com.fast.spring.test.command.CommandParserTest.test"; Command command = new CommandParser().parseCommand(line); Assertions.assertEquals("run", command.getName());  line = "com.fast.spring.test.command.CommandParserTest.test"; command = new CommandParser().parseCommand(line); Assertions.assertEquals("run", command.getName());  line = "1"; command = new CommandParser().parseCommand(line); Assertions."<AssertPlaceHolder>"; }
parseCommand(String line) { return new Command(getCommandStr(line), getOption(line)); }
[*] target: assertEquals("run", command.getName())
[-] pred:  org. junit. Assert. assertEquals ( command, command. parseCommand(line),CharSequence ( line ) )

[*] target: assertEquals("run", command.getName())
[-] pred:  org. junit. Assert. assertEquals ( command, command. parseCommand(line),<sp>"" )

[*] target: assertEquals("run", command.getName())
[-] pred:  org. junit. Assert. assertEquals ( command, command. parseCommand(line),Object ( line ) )

[*] target: assertEquals("run", command.getName())
[-] pred:  org. junit. Assert. assertEquals ( command, command. parseCommand(line),String line ) )

[*] target: assertEquals("run", command.getName())
[-] pred:  org

************************************
************************************
[+] input: testRun() { new JunitRunner().run(this.getClass(), "emptyTest"); Assertions."<AssertPlaceHolder>"; }
run(Class<?> clazz, String method) { Launcher launcher = LauncherFactory.create(); LauncherDiscoveryRequest request = null; if (method != null) { request = LauncherDiscoveryRequestBuilder.request() .selectors(DiscoverySelectors.selectMethod(clazz, method)) .build(); } else { request = LauncherDiscoveryRequestBuilder.request() .selectors(DiscoverySelectors.selectClass(clazz)) .build(); } JunitTestExecutionListener junitTestExecutionListener = new JunitTestExecutionListener(clazz, method); launcher.registerTestExecutionListeners(junitTestExecutionListener); launcher.execute(request); }
[*] target: assertTrue(true)
[-] pred:  org. junit. Assert. assertFalse ( launcher. run(this.getClass(),. isEmpty ( ) )

[*] target: assertTrue(true)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. Long. valueOf ( 0 ), new Junit.().run(this.getClass(),.emptyTestMor Assertions."" )

[*] target: assertTrue(true)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. Long. valueOf ( 0 ), new JunitRunner. run(this.getClass(),.emptyTestMor Assertions."" )

[*] target: assertTrue(true)
[-] pred:  org. junit. Assert. assertEquals ( false, instance. run(this.getClass(),. isEmptyTestMor Assertions."", org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(true)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. Long. valueOf ( 0 ), new JunitRunner. run(this.getClass(), ( ) )

************************************
************************************
[+] input: shouldFindAllRuns() { List<Run> runs = repository.findAll(); "<AssertPlaceHolder>"; }
findAll() { return runs; }
[*] target: assertEquals(2, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, service. findAll() ( ). size ( ) )

[*] target: assertEquals(2, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 5, service. findAll() ( ). size ( ) )

[*] target: assertEquals(2, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, service. findAll() ( ). size ( ) )

[*] target: assertEquals(2, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, s. findAll() ( ). size ( ) )

[*] target: assertEquals(2, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, service. findAll() ( ). size ( ) )s

************************************
************************************
[+] input: shouldFindRunWithValidId() { var run = repository.findById(1).get(); "<AssertPlaceHolder>"; assertEquals(3, run.miles()); }
findById(Integer id) { return Optional.ofNullable(runs.stream() .filter(run -> run.id() == id) .findFirst() .orElseThrow(RunNotFoundException::new)); }
[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertNotNull ( run )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertNotNull ( run. findById(Integer id ) )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertNotNull ( run. findById(Integer id )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( 1, run. findById(Integer id )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org

************************************
************************************
[+] input: shouldCreateNewRun() { repository.create(new Run(3, "Friday Morning Run", LocalDateTime.now(), LocalDateTime.now().plus(30, ChronoUnit.MINUTES), 3, Location.INDOOR)); List<Run> runs = repository.findAll(); "<AssertPlaceHolder>"; }
findAll() { return runs; }
[*] target: assertEquals(3, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( samples, pojo. findAll() ( ) )

[*] target: assertEquals(3, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, runs. findAll() ( ). size ( ) )

[*] target: assertEquals(3, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( samples. size ( ), 1 )

[*] target: assertEquals(3, runs.size())
[-] pred:  org. junit. Assert. assertSame ( runs, repository. findAll() ( ) )

[*] target: assertEquals(3, runs.size())
[-] pred:  org

************************************
************************************
[+] input: shouldUpdateRun() { repository.update(new Run(1, "Monday Morning Run", LocalDateTime.now(), LocalDateTime.now().plus(30, ChronoUnit.MINUTES), 5, Location.OUTDOOR), 1); var run = repository.findById(1).get(); "<AssertPlaceHolder>"; assertEquals(5, run.miles()); assertEquals(Location.OUTDOOR, run.location()); }
findById(Integer id) { return Optional.ofNullable(runs.stream() .filter(run -> run.id() == id) .findFirst() .orElseThrow(RunNotFoundException::new)); }
[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( cls. findById(Integer id), run )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( cls. findById(Integer id ), run )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( cls. findById(Integer id), run. findById(Integer id )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( cls, var run. findById(Integer id ) )

[*] target: assertEquals("Monday Morning Run", run.title())
[-] pred:  org. junit. Assert. assertEquals ( cls. findById(Integer id), run. findById ( 0 ) )

************************************
************************************
[+] input: shouldDeleteRun() { repository.delete(1); List<Run> runs = repository.findAll(); "<AssertPlaceHolder>"; }
findAll() { return runs; }
[*] target: assertEquals(1, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, repository. findAll(). size ( ) )

[*] target: assertEquals(1, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, runs. findAll() ( ). size ( ) )

[*] target: assertEquals(1, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, repository. findAll(). size ( ) )

[*] target: assertEquals(1, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, page. findAll() ( ). size ( ) )

[*] target: assertEquals(1, runs.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, repository. findAll() ( runs ). size )

************************************
************************************
[+] input: shouldNotFindRunWithInvalidId() { var run = repository.findById(3); "<AssertPlaceHolder>"; }
findById(Integer id) { return jdbcClient.sql("SELECT id,title,started_on,completed_on,miles,location FROM Run WHERE id = :id" ) .param("id", id) .query(Run.class) .optional(); }
[*] target: assertTrue(run.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( null, run. findById(Integer id ) )

[*] target: assertTrue(run.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( null, run. findById ( 1 ) )

[*] target: assertTrue(run.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( true, run. findById(Integer id ) )

[*] target: assertTrue(run.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( null, run )

[*] target: assertTrue(run.isEmpty())
[-] pred:  org

************************************
************************************
[+] input: JsonProcessingException { // given User user1 = new User(1, "Leanne", "lgraham", "lgraham@gmail.com", new Address("Kulas Light", "Apt. 556", "Gwenborough", "92998-3874", new Geo(-37.3159, 81.1496)), "1-770-736-8031 x56442", "hildegard.org", new Company("Romaguera-Crona", "Multi-layered client-server neural-net", "harness real-time e-markets"));  List<User> users = List.of(user1);  // when this.server.expect(requestTo("https://jsonplaceholder.typicode.com/users")) .andRespond(withSuccess(objectMapper.writeValueAsString(users), MediaType.APPLICATION_JSON));  // then List<User> allUsers = client.findAll(); "<AssertPlaceHolder>"; }
findAll() { return restClient.get() .uri("/users") .retrieve() .body(new ParameterizedTypeReference<>() {}); }
[*] target: assertEquals(users, allUsers)
[-] pred:  org. junit. Assert. assertEquals ( 0, allUsers. findAll ( ). size ( ) )

[*] target: assertEquals(users, allUsers)
[-] pred:  org. junit. Assert. assertEquals ( 200, allUsers. findAll ( ). size ( ) )

[*] target: assertEquals(users, allUsers)
[-] pred:  org. junit. Assert. assertEquals ( 15, allUsers. findAll ( ). size ( ) )

[*] target: assertEquals(users, allUsers)
[-] pred:  org. junit. Assert. assertEquals ( 50, allUsers. findAll ( ). size ( ) )

[*] target: assertEquals(users, allUsers)
[-] pred:  org

************************************
************************************
[+] input: JsonProcessingException { // given User user = new User(1, "Leanne", "lgraham", "lgraham@gmail.com", new Address("Kulas Light", "Apt. 556", "Gwenborough", "92998-3874", new Geo(-37.3159, 81.1496)), "1-770-736-8031 x56442", "hildegard.org", new Company("Romaguera-Crona", "Multi-layered client-server neural-net", "harness real-time e-markets"));  // when this.server.expect(requestTo("https://jsonplaceholder.typicode.com/users/1")) .andRespond(withSuccess(objectMapper.writeValueAsString(user), MediaType.APPLICATION_JSON));  // then User leanne = client.findById(1); "<AssertPlaceHolder>"; assertEquals(user.username(), "lgraham", "User username should be lgraham"); assertEquals(user.email(), "lgraham@gmail.com"); assertAll("Address", () -> assertEquals(user.address().street(), "Kulas Light"), () -> assertEquals(user.address().suite(), "Apt. 556"), () -> assertEquals(user.address().city(), "Gwenborough"), () -> assertEquals(user.address().zipcode(), "92998-3874"), () -> assertEquals(user.address().geo().lng(), -37.3159), () -> assertEquals(user.address().geo().lat(), 81.1496) ); assertEquals(user.phone(), "1-770-736-8031 x56442"); assertEquals(user.website(), "hildegard.org"); assertAll("Company", () -> assertEquals(user.company().name(), "Romaguera-Crona"), () -> assertEquals(user.company().catchPhrase(), "Multi-layered client-server neural-net"), () -> assertEquals(user.company().bs(), "harness real-time e-markets")); }
findById(Integer id) { return restClient.get() .uri("/users/{id}", id) .retrieve() .body(User.class); }
[*] target: assertEquals(user.name(), "Leanne", "User name should be Leanne")
[-] pred:  org. junit. Assert. assertNotNull ( leanne )

[*] target: assertEquals(user.name(), "Leanne", "User name should be Leanne")
[-] pred:  org. junit. Assert. assertTrue ( ( leanne instanceof User ) )

[*] target: assertEquals(user.name(), "Leanne", "User name should be Leanne")
[-] pred:  org. junit. Assert. assertEquals ( logout, leanne )

[*] target: assertEquals(user.name(), "Leanne", "User name should be Leanne")
[-] pred:  org. junit. Assert. assertTrue ( ( leanne > 0 ) )

[*] target: assertEquals(user.name(), "Leanne", "User name should be Leanne")
[-] pred:  org

************************************
************************************
[+] input: Throwable { String methodName = "methodWithControllerFeatureToggle"; FlagrAnnotationTest flagrAnnotationTest = new FlagrAnnotationTest(); Method method = Arrays.stream(flagrAnnotationTest.getClass().getMethods()).filter(m -> m.getName().equals(methodName)).findFirst().get();  when(joinPoint.getSignature()).thenReturn(signature); when(signature.getMethod()).thenReturn(method); when(joinPoint.getArgs()).thenReturn(args); when(flagrService.isFeatureFlagOn(any(String.class))) .thenReturn(givenPostEvaluationResponse().getVariantKey().equals(EffectiveVariant.ON.toValue())); when(joinPoint.proceed(any(Object[].class))).thenReturn(args);  Object returnArgs = featureToggleAspect.processControllerFeatureToggleAnnotation(joinPoint);  "<AssertPlaceHolder>"; verify(joinPoint, times(1)).getSignature(); verify(signature, times(1)).getMethod(); verify(joinPoint, times(1)).getArgs(); verify(signature, times(1)).getMethod(); verify(flagrService, times(1)).isFeatureFlagOn(any(String.class)); verify(joinPoint, times(1)).proceed(any(Object[].class)); }
processControllerFeatureToggleAnnotation(ProceedingJoinPoint joinPoint) throws Throwable { log.info("start processing controllerFeatureToggle annotation"); MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); Annotation[][] parameterAnnotations = method.getParameterAnnotations(); Object[] args = joinPoint.getArgs(); ControllerFeatureToggle featureToggle = method.getAnnotation(ControllerFeatureToggle.class);  Boolean isFlagOn = flagrService.isFeatureFlagOn(featureToggle.value());  if (Boolean.FALSE.equals(isFlagOn)) { throw new FlagrApiNotFoundException(); }  outerlabel: for (int argIndex = 0; argIndex < args.length; argIndex++) { for (Annotation annotation : parameterAnnotations[argIndex]) { if (annotation instanceof VariantKey) { args[argIndex] = isFlagOn; break outerlabel; } } }  return joinPoint.proceed(args); }
[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, methodArgs )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( method, returnArgs )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, req )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, method )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org

************************************
************************************
[+] input: Throwable { String methodName = "methodWithControllerFeatureToggleWithoutVariantKey"; FlagrAnnotationTest flagrAnnotationTest = new FlagrAnnotationTest(); Method method = Arrays.stream(flagrAnnotationTest.getClass().getMethods()).filter(m -> m.getName().equals(methodName)).findFirst().get(); args = new Object[]{};  when(joinPoint.getSignature()).thenReturn(signature); when(signature.getMethod()).thenReturn(method); when(joinPoint.getArgs()).thenReturn(args); when(flagrService.isFeatureFlagOn(any(String.class))) .thenReturn(givenPostEvaluationResponse().getVariantKey().equals(EffectiveVariant.ON.toValue())); when(joinPoint.proceed(any(Object[].class))).thenReturn(args);  Object returnArgs = featureToggleAspect.processControllerFeatureToggleAnnotation(joinPoint);  "<AssertPlaceHolder>"; verify(joinPoint, times(1)).getSignature(); verify(signature, times(1)).getMethod(); verify(joinPoint, times(1)).getArgs(); verify(signature, times(1)).getMethod(); verify(flagrService, times(1)).isFeatureFlagOn(any(String.class)); verify(joinPoint, times(1)).proceed(any(Object[].class)); }
processControllerFeatureToggleAnnotation(ProceedingJoinPoint joinPoint) throws Throwable { log.info("start processing controllerFeatureToggle annotation"); MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); Annotation[][] parameterAnnotations = method.getParameterAnnotations(); Object[] args = joinPoint.getArgs(); ControllerFeatureToggle featureToggle = method.getAnnotation(ControllerFeatureToggle.class);  Boolean isFlagOn = flagrService.isFeatureFlagOn(featureToggle.value());  if (Boolean.FALSE.equals(isFlagOn)) { throw new FlagrApiNotFoundException(); }  outerlabel: for (int argIndex = 0; argIndex < args.length; argIndex++) { for (Annotation annotation : parameterAnnotations[argIndex]) { if (annotation instanceof VariantKey) { args[argIndex] = isFlagOn; break outerlabel; } } }  return joinPoint.proceed(args); }
[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, methodArgs )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( method, returnArgs )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, req )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org. junit. Assert. assertEquals ( returnArgs, method )

[*] target: assertEquals(args, returnArgs)
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = PostEvaluationResponseFixture.mockSuccessPostEvaluationResponse(); EvaluationContext givenEvaluationContext = new EvaluationContext(); givenEvaluationContext.setFlagKey("exist_feature_flag");  String expectedRequestMethod = HttpMethod.POST.toString();  mockWebServer.enqueue(new MockResponse() .setBody(objectMapper.writeValueAsString(givenResponse)));  PostEvaluationResponse response = flagrEvalClient.evaluate(givenEvaluationContext); RecordedRequest request = mockWebServer.takeRequest();  "<AssertPlaceHolder>";  assertThat(response.getVariantKey()) .as("Check if returned variant is not null.") .isNotNull(); }
evaluate(EvaluationContext evaluationContext);
[*] target: assertThat(request.getMethod()) .as("Check if request method is %s.", expectedRequestMethod) .isEqualTo(expectedRequestMethod)
[-] pred:  org. junit. Assert. assertEquals ( expectedRequestMethod, response. evaluate(EvaluationContext ( ) )

[*] target: assertThat(request.getMethod()) .as("Check if request method is %s.", expectedRequestMethod) .isEqualTo(expectedRequestMethod)
[-] pred:  org. junit. Assert. assertEquals ( expectedRequestMethod, request. evaluate(EvaluationContext ( ) )

[*] target: assertThat(request.getMethod()) .as("Check if request method is %s.", expectedRequestMethod) .isEqualTo(expectedRequestMethod)
[-] pred:  org. junit. Assert. assertEquals ( expectedRequestMethod, request. getValue ( ) )

[*] target: assertThat(request.getMethod()) .as("Check if request method is %s.", expectedRequestMethod) .isEqualTo(expectedRequestMethod)
[-] pred:  org. junit. Assert. assertEquals ( expectedRequestMethod, response. evaluate(EvaluationContext (

[*] target: assertThat(request.getMethod()) .as("Check if request method is %s.", expectedRequestMethod) .isEqualTo(expectedRequestMethod)
[-] pred:  , response )

************************************
************************************
[+] input: handleFlagrException() { final ResponseEntity<FlagrErrorResponse> result = flagrExceptionHandler.handleFlagrException(new FlagrException("flagr exception"));  "<AssertPlaceHolder>"; assertThat(result.getBody()) .extracting(FlagrErrorResponse::getStatus, FlagrErrorResponse::getMessage) .containsExactly(500, "flagr exception"); }
handleFlagrException(FlagrException ex) { FlagrErrorResponse errorResponse = new FlagrErrorResponse(ex); return ResponseEntity.status(HttpResponseStatus.INTERNAL_SERVER_ERROR.getStatusCode()) .body(errorResponse); }
[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(500)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(500)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. size ( ) )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(500)
[-] pred:  org. junit. Assert. assertEquals ( 2, result. size ( ) )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(500)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. getStatusCode ( ) )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(500)
[-] pred:  org. junit. Assert. assertNull ( result )

************************************
************************************
[+] input: handleFlagrApiNotFoundException() { final ResponseEntity<FlagrErrorResponse> result = flagrExceptionHandler.handleFlagrResponseStatusException(new FlagrApiNotFoundException());  "<AssertPlaceHolder>"; assertThat(result.getBody()) .extracting(FlagrErrorResponse::getStatus, FlagrErrorResponse::getMessage) .containsExactly(404, "Not Found"); }
handleFlagrResponseStatusException(FlagrResponseStatusException ex) { FlagrErrorResponse errorResponse = new FlagrErrorResponse(ex); return ResponseEntity.status(ex.getStatus()) .body(errorResponse); }
[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(404)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(404)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(404)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. size ( ) )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(404)
[-] pred:  org. junit. Assert. assertThat ( result.. 0 )

[*] target: assertThat(result.getStatusCodeValue()).isEqualTo(404)
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = mockSuccessPostEvaluationResponse(); String givenFlagKey = "exist_feature_flag";  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Boolean result = flagrEvalService.isFeatureFlagOn(givenFlagKey);  "<AssertPlaceHolder>"; }
isFeatureFlagOn(String flagKey);
[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = mockFlagKeyNotFoundPostEvaluationResponse(); String givenFlagKey = "not_exist_flag";  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Boolean result = flagrEvalService.isFeatureFlagOn(givenFlagKey);  "<AssertPlaceHolder>"; }
isFeatureFlagOn(String flagKey);
[*] target: assertThat(result) .as("Check result is false when flag key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check result is false when flag key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertThat(result) .as("Check result is false when flag key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(result) .as("Check result is false when flag key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check result is false when flag key not found.") .isFalse()
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = mockVariantKeyNotFoundPostEvaluationResponse(); String givenFlagKey = "exist_feature_flag";  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Boolean result = flagrEvalService.isFeatureFlagOn(givenFlagKey);  "<AssertPlaceHolder>"; }
isFeatureFlagOn(String flagKey);
[*] target: assertThat(result) .as("Check result is false when variant key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check result is false when variant key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertThat(result) .as("Check result is false when variant key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(result) .as("Check result is false when variant key not found.") .isFalse()
[-] pred:  org. junit. Assert. assertEquals ( false, result )

[*] target: assertThat(result) .as("Check result is false when variant key not found.") .isFalse()
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = mockVariantKeyNotMatchPostEvaluationResponse(); String givenFlagKey = "exist_feature_flag";  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Boolean result = flagrEvalService.isFeatureFlagOn(givenFlagKey);  "<AssertPlaceHolder>"; }
isFeatureFlagOn(String flagKey);
[*] target: assertThat(result) .as("Check result is false when variant key not match.") .isFalse()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check result is false when variant key not match.") .isFalse()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(result) .as("Check result is false when variant key not match.") .isFalse()
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertThat(result) .as("Check result is false when variant key not match.") .isFalse()
[-] pred:  org. junit. Assert. assertEquals ( false, result )

[*] target: assertThat(result) .as("Check result is false when variant key not match.") .isFalse()
[-] pred:  org

************************************
************************************
[+] input: Exception { PostEvaluationResponse givenResponse = mockSuccessPostEvaluationResponse(); String givenFlagKey = "exist_feature_flag"; String givenVariantKey = "on"; String givenFieldName = "fieldName"; String givenValue = "value"; Map<Object, Object> givenEntityContext = Collections.singletonMap(givenFieldName, givenValue);  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Boolean result = flagrEvalService.isFeatureFlagOn(givenFlagKey, givenVariantKey, givenEntityContext);  "<AssertPlaceHolder>";  verify(flagrEvalClient, times(1)).evaluate( argThat(ec -> ec.getEntityContext().get(givenFieldName).equals(givenValue))); }
isFeatureFlagOn(String flagKey, String variantKey, Map<Object, Object> entityContext);
[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. verify ( result )

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org. junit. Assert. assertTrue ( result )s

[*] target: assertThat(result) .as("Check returned variant is on.") .isTrue()
[-] pred:  org

************************************
************************************
[+] input: Exception { String givenFlagKey = "exist_feature_flag"; String givenVariantKey = "custom_variant_key"; PostEvaluationResponse givenResponse = mockSuccessPostEvaluationResponse(givenFlagKey, givenVariantKey);  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Optional<String> result = flagrEvalService.getVariantKey(givenFlagKey);  "<AssertPlaceHolder>"; }
getVariantKey(String flagKey);
[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenVariantKey, result. get ( ) )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenVariantKey, result )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenVariantKey, result. getValue ( ) )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenVariantKey, result. getText ( ) )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenVariantKey, result. first ( ) )

************************************
************************************
[+] input: Exception { String givenFlagKey = "exist_feature_flag"; String givenVariantKey = "custom_variant_key"; String givenFieldName = "fieldName"; String givenValue = "value"; PostEvaluationResponse givenResponse = mockSuccessPostEvaluationResponse(givenFlagKey, givenVariantKey); Map<Object, Object> givenEntityContext = Collections.singletonMap(givenFieldName, givenValue);  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Optional<String> result = flagrEvalService.getVariantKey(givenFlagKey, givenEntityContext);  "<AssertPlaceHolder>";  verify(flagrEvalClient, times(1)).evaluate( argThat(ec -> ec.getEntityContext().get(givenFieldName).equals(givenValue))); }
getVariantKey(String flagKey, Map<Object, Object> entityContext);
[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( givenResponse, result )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( givenResponse ), result )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( new java. util. Optional ( givenResponse ), result )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. lang. String ( givenResponse ), result )

[*] target: assertThat(result) .hasValue("custom_variant_key")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( givenKey ), result )

************************************
************************************
[+] input: Exception { String givenFlagKey = "exist_feature_flag"; PostEvaluationResponse givenResponse = mockSuccessPostEvaluationResponse(givenFlagKey, null);  when(flagrEvalClient.evaluate(any(EvaluationContext.class))).thenReturn(givenResponse);  Optional<String> result = flagrEvalService.getVariantKey(givenFlagKey);  "<AssertPlaceHolder>"; }
getVariantKey(String flagKey);
[*] target: assertThat(result).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( givenResponse, result )

[*] target: assertThat(result).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( fromResponse, result )

[*] target: assertThat(result).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( factResponse, result )

[*] target: assertThat(result).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( theResponse, result )

[*] target: assertThat(result).isEmpty()
[-] pred:  org

************************************
************************************
[+] input: createUser_validRequest_success() { // GIVEN when(userRepository.existsByUsername(anyString())).thenReturn(false); when(userRepository.save(any())).thenReturn(user);  // WHEN var response = userService.createUser(request); // THEN  Assertions."<AssertPlaceHolder>"; Assertions.assertThat(response.getUsername()).isEqualTo("john"); }
createUser(UserCreationRequest request) { User user = userMapper.toUser(request); user.setPassword(passwordEncoder.encode(request.getPassword()));  HashSet<Role> roles = new HashSet<>(); roleRepository.findById(PredefinedRole.USER_ROLE).ifPresent(roles::add);  user.setRoles(roles);  try { user = userRepository.save(user); } catch (DataIntegrityViolationException exception) { throw new AppException(ErrorCode.USER_EXISTED); }  return userMapper.toUserResponse(user); }
[*] target: assertThat(response.getId()).isEqualTo("cf0600f538b3")
[-] pred:  org. junit. Assert. assertNotNull ( response. createUser(UserCreationRequest ( ) )

[*] target: assertThat(response.getId()).isEqualTo("cf0600f538b3")
[-] pred:  org. junit. Assert. assertNotNull ( response. createUser(UserCreationRequestRequest ( ) )

[*] target: assertThat(response.getId()).isEqualTo("cf0600f538b3")
[-] pred:  org. junit. Assert. assertNotNull ( response. createUser(UserCreationRequest ( request ) )

[*] target: assertThat(response.getId()).isEqualTo("cf0600f538b3")
[-] pred:  org. junit. Assert. assertNotNull ( var. createUser(UserCreationRequestRequest ( ) )

[*] target: assertThat(response.getId()).isEqualTo("cf0600f538b3")
[-] pred:  org. junit. Assert. assertNotNull ( response. createUser(UserCreationRequest request )

************************************
************************************
[+] input: createUser_userExisted_fail() { // GIVEN when(userRepository.existsByUsername(anyString())).thenReturn(true);  // WHEN var exception = "<AssertPlaceHolder>";  // THEN Assertions.assertThat(exception.getErrorCode().getCode()).isEqualTo(1002); }
createUser(UserCreationRequest request) { User user = userMapper.toUser(request); user.setPassword(passwordEncoder.encode(request.getPassword()));  HashSet<Role> roles = new HashSet<>(); roleRepository.findById(PredefinedRole.USER_ROLE).ifPresent(roles::add);  user.setRoles(roles);  try { user = userRepository.save(user); } catch (DataIntegrityViolationException exception) { throw new AppException(ErrorCode.USER_EXISTED); }  return userMapper.toUserResponse(user); }
[*] target: assertThrows(AppException.class, () -> userService.createUser(request))
[-] pred:  org. junit. Assert. assertNull ( exception. createUser(UserCreationRequest ( ) )

[*] target: assertThrows(AppException.class, () -> userService.createUser(request))
[-] pred:  org. junit. Assert. assertFalse ( exception. createUser(UserCreationRequest ( ) )

[*] target: assertThrows(AppException.class, () -> userService.createUser(request))
[-] pred:  org. junit. Assert. assertFalse ( createUser(UserCreationRequest ( exception ) )

[*] target: assertThrows(AppException.class, () -> userService.createUser(request))
[-] pred:  org. junit. Assert. assertNull ( exception. createUser(UserCreationRequest ( request ) )

[*] target: assertThrows(AppException.class, () -> userService.createUser(request))
[-] pred:  org

************************************
************************************
[+] input: shouldWriteValueAsString() { //given Map<String, String> map = new HashMap<>(); map.put("aaa", "111"); map.put("bbb", "222");  //when String json = writeValueAsString(map);  //then "<AssertPlaceHolder>"; }
writeValueAsString(Object obj) { try { return getInstance().writeValueAsString(obj); } catch (JsonGenerationException e) { logger.error(e.getMessage(), e); } catch (JsonMappingException e) { logger.error(e.getMessage(), e); } catch (IOException e) { logger.error(e.getMessage(), e); } return null; }
[*] target: assertEquals(json, "{"aaa":"111","bbb":"222"}")
[-] pred:  org. junit. Assert. assertNotNull ( json )

[*] target: assertEquals(json, "{"aaa":"111","bbb":"222"}")
[-] pred:  org. junit. Assert. assertEquals ( map, json )

[*] target: assertEquals(json, "{"aaa":"111","bbb":"222"}")
[-] pred:  org. junit. Assert. assertEquals ( null, json )

[*] target: assertEquals(json, "{"aaa":"111","bbb":"222"}")
[-] pred:  org. junit. Assert. assertEquals ( json, map )

[*] target: assertEquals(json, "{"aaa":"111","bbb":"222"}")
[-] pred:  org. junit. Assert. assertNull ( json )

************************************
************************************
[+] input: shouldReadValueAsObject() { //given String jsonString = "{"aaa":"111","bbb":"222"}";  //when Map result = JacksonUtil.readValue(jsonString, Map.class);  //then "<AssertPlaceHolder>"; assertEquals(result.get("bbb"),"222");  }
readValue(String jsonStr, Class<T> clazz) { try { return getInstance().readValue(jsonStr, clazz); } catch (JsonParseException e) { logger.error(e.getMessage(), e); } catch (JsonMappingException e) { logger.error(e.getMessage(), e); } catch (IOException e) { logger.error(e.getMessage(), e); } return null; }
[*] target: assertEquals(result.get("aaa"), "111")
[-] pred:  org. junit. Assert. assertEquals ( jsonString, result. get ( Property ) )

[*] target: assertEquals(result.get("aaa"), "111")
[-] pred:  org. junit. Assert. assertEquals ( jsonString, result. keySet ( ) )

[*] target: assertEquals(result.get("aaa"), "111")
[-] pred:  org. junit. Assert. assertEquals ( jsonString, result. containsKey ( Property ) )

[*] target: assertEquals(result.get("aaa"), "111")
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.get("aaa"), "111")
[-] pred:  org

************************************
************************************
[+] input: loadKeysTest() { List<String> keys = JPASearchPaginationFilter.keys(); "<AssertPlaceHolder>"; assertFalse(keys.isEmpty()); assertEquals(3, keys.size()); assertTrue(keys.contains("limit")); assertTrue(keys.contains("sort")); assertTrue(keys.contains("offset")); }
keys() { return Stream.of(JPASearchPaginationFilter.values()).map(JPASearchPaginationFilter::getValue).toList(); }
[*] target: assertNotNull(keys)
[-] pred:  org. junit. Assert. assertEquals ( 0, keys. size ( ) )

[*] target: assertNotNull(keys)
[-] pred:  org. junit. Assert. assertTrue ( ( ( keys. size ( ) ) > 0 ) )

[*] target: assertNotNull(keys)
[-] pred:  org. junit. Assert. assertEquals ( 100, keys. size ( ) )

[*] target: assertNotNull(keys)
[-] pred:  org. junit. Assert. assertEquals ( 6, keys. size ( ) )

[*] target: assertNotNull(keys)
[-] pred:  org. junit. Assert. assertThat ( keys, org. hamcrest. CoreMatchers. is ( 0 ) )

************************************
************************************
[+] input: loadSearchTypeTest() { assertEquals(JPASearchType.LONG, JPASearchType.load(Long.class, null)); assertEquals(JPASearchType.LONG, JPASearchType.load(long.class, null)); assertEquals(JPASearchType.LONG, JPASearchType.load(Collection.class, JPASearchType.LONG)); "<AssertPlaceHolder>";  }
load(Class<?> clazz, JPASearchType defaultType) { return Stream.of(JPASearchType.values()).filter(s -> s.defaultClasses.contains(clazz)).findAny().orElse(defaultType); }
[*] target: assertNull(JPASearchType.load(Collection.class, null))
[-] pred:  org. junit. Assert. assertEquals ( true, clazz. load(Class ( ) )

[*] target: assertNull(JPASearchType.load(Collection.class, null))
[-] pred:  org. junit. Assert. assertEquals ( true, clazz. load(Class>>data ( ) )

[*] target: assertNull(JPASearchType.load(Collection.class, null))
[-] pred:  org. junit. Assert. assertEquals ( true, clazz. load(Class )

[*] target: assertNull(JPASearchType.load(Collection.class, null))
[-] pred:  org. junit. Assert. assertEquals ( true, clazz. load(Class>>Class ( ) )

[*] target: assertNull(JPASearchType.load(Collection.class, null))
[-] pred:  org

************************************
************************************
[+] input: ifOnlyOneClusterProvidedNameIsOptionalAndSetToDefault() { ClustersProperties properties = new ClustersProperties(); properties.getClusters().add(new ClustersProperties.Cluster());  properties.validateAndSetDefaults();  "<AssertPlaceHolder>"; }
validateAndSetDefaults() { if (clusters != null) { validateClusterNames(); flattenClusterProperties(); setMetricsDefaults(); } }
[*] target: assertThat(properties.getClusters()) .element(0) .extracting("name") .isEqualTo("Default")
[-] pred:  org. junit. Assert. assertThat ( properties. getVFirstFirst ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(properties.getClusters()) .element(0) .extracting("name") .isEqualTo("Default")
[-] pred:  org. junit. Assert. assertThat ( properties. getResourcesDefaults(); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(properties.getClusters()) .element(0) .extracting("name") .isEqualTo("Default")
[-] pred:  org. junit. Assert. assertThat ( properties. getResourcesDefaults(); ( ), org. hamcrest. CoreMatchers. is ( new org. apache. ClustersProperties.Cluster()); properties.length ) )

[*] target: assertThat(properties.getClusters()) .element(0) .extracting("name") .isEqualTo("Default")
[-] pred:  org. junit. Assert. assertThat ( properties. getResourcesDefaults(); ( ), org. hamcrest. CoreMatchers. is ( new ClustersProperties.Cluster ) )

[*] target: assertThat(properties.getClusters()) .element(0) .extracting("name") .isEqualTo("Default")
[-] pred:  org

************************************
************************************
[+] input: skewCalculatedBasedOnPartitionsCounts() { Node n1 = new Node(1, "n1", 9092); Node n2 = new Node(2, "n2", 9092); Node n3 = new Node(3, "n3", 9092); Node n4 = new Node(4, "n4", 9092);  var stats = PartitionDistributionStats.create( Statistics.builder() .clusterDescription( new ReactiveAdminClient.ClusterDescription(null, "test", Set.of(n1, n2, n3), null)) .topicDescriptions( Map.of( "t1", new TopicDescription( "t1", false, List.of( new TopicPartitionInfo(0, n1, List.of(n1, n2), List.of(n1, n2)), new TopicPartitionInfo(1, n2, List.of(n2, n3), List.of(n2, n3)) ) ), "t2", new TopicDescription( "t2", false, List.of( new TopicPartitionInfo(0, n1, List.of(n1, n2), List.of(n1, n2)), new TopicPartitionInfo(1, null, List.of(n2, n1), List.of(n1)) ) ) ) ) .build(), 4 );  assertThat(stats.getPartitionLeaders()) .containsExactlyInAnyOrderEntriesOf(Map.of(n1, 2, n2, 1)); assertThat(stats.getPartitionsCount()) .containsExactlyInAnyOrderEntriesOf(Map.of(n1, 3, n2, 4, n3, 1)); assertThat(stats.getInSyncPartitions()) .containsExactlyInAnyOrderEntriesOf(Map.of(n1, 3, n2, 3, n3, 1));  // Node(partitions): n1(3), n2(4), n3(1), n4(0) // average partitions cnt = (3+4+1) / 3 = 2.666 (counting only nodes with partitions!) assertThat(stats.getAvgPartitionsPerBroker()) .isCloseTo(2.666, Percentage.withPercentage(1));  assertThat(stats.partitionsSkew(n1)) .isCloseTo(BigDecimal.valueOf(12.5), Percentage.withPercentage(1)); assertThat(stats.partitionsSkew(n2)) .isCloseTo(BigDecimal.valueOf(50), Percentage.withPercentage(1)); assertThat(stats.partitionsSkew(n3)) .isCloseTo(BigDecimal.valueOf(-62.5), Percentage.withPercentage(1)); assertThat(stats.partitionsSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1));  //  Node(leaders): n1(2), n2(1), n3(0), n4(0) //  average leaders cnt = (2+1) / 2 = 1.5 (counting only nodes with leaders!) assertThat(stats.leadersSkew(n1)) .isCloseTo(BigDecimal.valueOf(33.33), Percentage.withPercentage(1)); assertThat(stats.leadersSkew(n2)) .isCloseTo(BigDecimal.valueOf(-33.33), Percentage.withPercentage(1)); assertThat(stats.leadersSkew(n3)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1)); "<AssertPlaceHolder>"; }
leadersSkew(Node node) { return calculateAvgSkew(partitionLeaders.get(node), avgLeadersCntPerBroker); }
[*] target: assertThat(stats.leadersSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( rendered ) )

[*] target: assertThat(stats.leadersSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( element ) )

[*] target: assertThat(stats.leadersSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1))
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( screenshot ) )

[*] target: assertThat(stats.leadersSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1))
[-] pred:  org. junit. Assert. assertNotNull ( rendered )

[*] target: assertThat(stats.leadersSkew(n4)) .isCloseTo(BigDecimal.valueOf(-100), Percentage.withPercentage(1))
[-] pred:  returns the", of the spot

************************************
************************************
[+] input: transformSetsParseableFields() { var p = new Permission(); p.setResource("toPic"); p.setActions(List.of("vIEW", "EdiT")); p.setValue("patt|ern");  p.transform();  "<AssertPlaceHolder>";  assertThat(p.getCompiledValuePattern()) .isNotNull() .matches(pattern -> pattern.pattern().equals("patt|ern")); }
transform() { if (value != null) { this.compiledValuePattern = Pattern.compile(value); } if (actions.stream().anyMatch(ActionDTO.ALL.name()::equalsIgnoreCase)) { this.parsedActions = resource.allActions(); } else { this.parsedActions = resource.parseActionsWithDependantsUnnest(actions); } }
[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertThat ( p. transform() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertThat ( p. transform() ( ), org. hamcrest. CoreMatchers. is ( new java. lang. Object ( ) ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertThat ( p. transform() ( ), org. hamcrest. CoreMatchers. is ( template ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertThat ( p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org

************************************
************************************
[+] input: transformSetsFullActionsListIfAllActionPassed() { var p = new Permission(); p.setResource("toPic"); p.setActions(List.of("All"));  p.transform();  "<AssertPlaceHolder>"; }
transform() { if (value != null) { this.compiledValuePattern = Pattern.compile(value); } if (actions.stream().anyMatch(ActionDTO.ALL.name()::equalsIgnoreCase)) { this.parsedActions = resource.allActions(); } else { this.parsedActions = resource.parseActionsWithDependantsUnnest(actions); } }
[*] target: assertThat(p.getParsedActions()) .isEqualTo(List.of(TopicAction.values()))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( 6 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .isEqualTo(List.of(TopicAction.values()))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Long. valueOf ( 6 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .isEqualTo(List.of(TopicAction.values()))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Integer. valueOf ( 6 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .isEqualTo(List.of(TopicAction.values()))
[-] pred:  org. junit. Assert. assertEquals ( java. lang. String. valueOf ( 6 ), var. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .isEqualTo(List.of(TopicAction.values()))
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 6 ), p. transform() ( ) )

************************************
************************************
[+] input: transformUnnestsDependantActions() { var p = new Permission(); p.setResource("toPic"); p.setActions(List.of("EDIT"));  p.transform();  "<AssertPlaceHolder>"; }
transform() { if (value != null) { this.compiledValuePattern = Pattern.compile(value); } if (actions.stream().anyMatch(ActionDTO.ALL.name()::equalsIgnoreCase)) { this.parsedActions = resource.allActions(); } else { this.parsedActions = resource.parseActionsWithDependantsUnnest(actions); } }
[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 6 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 5 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Long. valueOf ( 1 ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( ), p. transform() ( ) )

[*] target: assertThat(p.getParsedActions()) .containsExactlyInAnyOrder(TopicAction.VIEW, TopicAction.EDIT)
[-] pred:  org. junit. Assert. assertEquals ( java. math. BigDecimal. valueOf ( 6 ), p. transform() ( ) )

************************************
************************************
[+] input: serdeWithBuiltInNameAndNoPropertiesCantBeInitializedIfSerdeNotSupportAutoConfigure() { ClustersProperties.SerdeConfig serdeConfig = new ClustersProperties.SerdeConfig(); serdeConfig.setName("BuiltIn2"); //auto-configuration not supported serdeConfig.setTopicKeysPattern("keys"); serdeConfig.setTopicValuesPattern("vals");  "<AssertPlaceHolder>"; }
init(Environment env, ClustersProperties clustersProperties, int clusterIndex) { ClustersProperties.Cluster clusterProperties = clustersProperties.getClusters().get(clusterIndex); log.debug("Configuring serdes for cluster {}", clusterProperties.getName());  var globalPropertiesResolver = new PropertyResolverImpl(env); var clusterPropertiesResolver = new PropertyResolverImpl(env, "kafka.clusters." + clusterIndex);  Map<String, SerdeInstance> registeredSerdes = new LinkedHashMap<>(); // initializing serdes from config if (clusterProperties.getSerde() != null) { for (int i = 0; i < clusterProperties.getSerde().size(); i++) { ClustersProperties.SerdeConfig serdeConfig = clusterProperties.getSerde().get(i); if (Strings.isNullOrEmpty(serdeConfig.getName())) { throw new ValidationException("'name' property not set for serde: " + serdeConfig); } if (registeredSerdes.containsKey(serdeConfig.getName())) { throw new ValidationException("Multiple serdes with same name: " + serdeConfig.getName()); } var instance = createSerdeFromConfig( serdeConfig, new PropertyResolverImpl(env, "kafka.clusters." + clusterIndex + ".serde." + i + ".properties"), clusterPropertiesResolver, globalPropertiesResolver ); registeredSerdes.put(serdeConfig.getName(), instance); } }  // initializing remaining built-in serdes with empty selection patters builtInSerdeClasses.forEach((name, clazz) -> { if (!registeredSerdes.containsKey(name)) { BuiltInSerde serde = createSerdeInstance(clazz); if (autoConfigureSerde(serde, clusterPropertiesResolver, globalPropertiesResolver)) { registeredSerdes.put(name, new SerdeInstance(name, serde, null, null, null)); } } });  registerTopicRelatedSerde(registeredSerdes);  return new ClusterSerdes( registeredSerdes, Optional.ofNullable(clusterProperties.getDefaultKeySerde()) .map(name -> Preconditions.checkNotNull(registeredSerdes.get(name), "Default key serde not found")) .orElse(null), Optional.ofNullable(clusterProperties.getDefaultValueSerde()) .map(name -> Preconditions.checkNotNull(registeredSerdes.get(name), "Default value serde not found")) .or(() -> Optional.ofNullable(registeredSerdes.get(SchemaRegistrySerde.name()))) .or(() -> Optional.ofNullable(registeredSerdes.get(ProtobufFileSerde.name()))) .orElse(null), createFallbackSerde() ); }
[*] target: assertThatCode(() -> initializer.init(env, createProperties(serdeConfig), 0)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertFalse ( not supported. init(Environment env, serdeConfig ) )

[*] target: assertThatCode(() -> initializer.init(env, createProperties(serdeConfig), 0)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertFalse ( not supported. init(Environment env, serdeConfig )

[*] target: assertThatCode(() -> initializer.init(env, createProperties(serdeConfig), 0)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertFalse ( not supported. init(Environment env, serdeConfig. setTopicKeysPattern"" ) )

[*] target: assertThatCode(() -> initializer.init(env, createProperties(serdeConfig), 0)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertFalse ( not supported. init(Environment env, serdeConfig. setTopicKeysPattern ) )

[*] target: assertThatCode(() -> initializer.init(env, createProperties(serdeConfig), 0)) .isInstanceOf(ValidationException.class)
[-] pred:  org

************************************
************************************
[+] input: Exception { Schema schema = new Schema.Parser().parse(""" { "type": "record", "name": "TestAvroRecord", "fields": [ { "name": "field1", "type": "string" }, { "name": "field2", "type": "int" } ] } """ ); GenericRecord record = new GenericData.Record(schema); record.put("field1", "this is test msg"); record.put("field2", 100500);  String jsonRecord = new String(AvroSchemaUtils.toJson(record)); byte[] serializedRecordBytes = serializeAvroWithEmbeddedSchema(record);  var deserializer = avroEmbeddedSerde.deserializer("anyTopic", Serde.Target.KEY); DeserializeResult result = deserializer.deserialize(null, serializedRecordBytes); "<AssertPlaceHolder>"; assertThat(result.getAdditionalProperties()).isEmpty(); assertJsonEquals(jsonRecord, result.getResult()); }
deserialize(RecordHeaders headers, byte[] data) { try (var reader = new DataFileReader<>(new SeekableByteArrayInput(data), new GenericDatumReader<>())) { if (!reader.hasNext()) { // this is very strange situation, when only header present in payload // returning null in this case return new DeserializeResult(null, DeserializeResult.Type.JSON, Map.of()); } Object avroObj = reader.next(); String jsonValue = new String(AvroSchemaUtils.toJson(avroObj)); return new DeserializeResult(jsonValue, DeserializeResult.Type.JSON, Map.of()); } }
[*] target: assertThat(result.getType()).isEqualTo(DeserializeResult.Type.JSON)
[-] pred:  org. junit. Assert. assertEquals ( handler. deserialize ( jsonRecord ), result )

[*] target: assertThat(result.getType()).isEqualTo(DeserializeResult.Type.JSON)
[-] pred:  org. junit. Assert. assertTrue ( ( result!= null ) )

[*] target: assertThat(result.getType()).isEqualTo(DeserializeResult.Type.JSON)
[-] pred:  org. junit. Assert. assertEquals ( handler. deserialize(result.getResult());, result )

[*] target: assertThat(result.getType()).isEqualTo(DeserializeResult.Type.JSON)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertThat(result.getType()).isEqualTo(DeserializeResult.Type.JSON)
[-] pred:  org

************************************
************************************
[+] input: deserializeSimpleMessage() { var deserialized = serde.deserializer(DUMMY_TOPIC, Serde.Target.VALUE) .deserialize(null, getProtobufMessage()); "<AssertPlaceHolder>"; }
deserialize(RecordHeaders headers, byte[] data) { try { UnknownFieldSet unknownFields = UnknownFieldSet.parseFrom(data); return new DeserializeResult(unknownFields.toString(), DeserializeResult.Type.STRING, Map.of()); } catch (Exception e) { throw new ValidationException(e.getMessage()); } }
[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n")
[-] pred:  org. junit. Assert. assertNull ( deserialized )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized instanceof DeserializeResult(unknownFields.ArrayList ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized instanceof DeserializeResult(unknownFields.org ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized == null ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized!= null ) )

************************************
************************************
[+] input: deserializeEmptyMessage() { var deserialized = serde.deserializer(DUMMY_TOPIC, Serde.Target.VALUE) .deserialize(null, new byte[0]); "<AssertPlaceHolder>"; }
deserialize(RecordHeaders headers, byte[] data) { try { UnknownFieldSet unknownFields = UnknownFieldSet.parseFrom(data); return new DeserializeResult(unknownFields.toString(), DeserializeResult.Type.STRING, Map.of()); } catch (Exception e) { throw new ValidationException(e.getMessage()); } }
[*] target: assertThat(deserialized.getResult()).isEqualTo("")
[-] pred:  org. junit. Assert. assertNull ( deserialized )

[*] target: assertThat(deserialized.getResult()).isEqualTo("")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized == null ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized instanceof DeserializeResult(unknownFields."" ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized!= null ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("")
[-] pred:  org

************************************
************************************
[+] input: deserializeInvalidMessage() { var deserializer = serde.deserializer(DUMMY_TOPIC, Serde.Target.VALUE); "<AssertPlaceHolder>"; }
deserializer(String topic, Serde.Target type) { return new Serde.Deserializer() { @SneakyThrows @Override public DeserializeResult deserialize(RecordHeaders headers, byte[] data) { try { UnknownFieldSet unknownFields = UnknownFieldSet.parseFrom(data); return new DeserializeResult(unknownFields.toString(), DeserializeResult.Type.STRING, Map.of()); } catch (Exception e) { throw new ValidationException(e.getMessage()); } } }; }
[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, new byte[] { 1, 2, 3 })) .isInstanceOf(ValidationException.class) .hasMessageContaining("Protocol message contained an invalid tag")
[-] pred:  org. junit. Assert. assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, new byte[] { 1, 2, 3 })) .isInstanceOf(ValidationException.class) .hasMessageContaining("Protocol message contained an invalid tag")
[-] pred:  org. junit. Assert. assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, new byte[] { 1, 2, 3 })) .isInstanceOf(ValidationException.class) .hasMessageContaining("Protocol message contained an invalid tag")
[-] pred:  org. junit ) { var deserializer = null ; } }

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, new byte[] { 1, 2, 3 })) .isInstanceOf(ValidationException.class) .hasMessageContaining("Protocol message contained an invalid tag")
[-] pred:  org. junit. Assert :: assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, new byte[] { 1, 2, 3 })) .isInstanceOf(ValidationException.class) .hasMessageContaining("Protocol message contained an invalid tag")
[-] pred:  org

************************************
************************************
[+] input: deserializeNullMessage() { var deserializer = serde.deserializer(DUMMY_TOPIC, Serde.Target.VALUE); "<AssertPlaceHolder>"; }
deserialize(RecordHeaders headers, byte[] data) { try { UnknownFieldSet unknownFields = UnknownFieldSet.parseFrom(data); return new DeserializeResult(unknownFields.toString(), DeserializeResult.Type.STRING, Map.of()); } catch (Exception e) { throw new ValidationException(e.getMessage()); } }
[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, null)) .isInstanceOf(ValidationException.class) .hasMessageContaining("Cannot read the array length")
[-] pred:  org. junit. Assert. assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, null)) .isInstanceOf(ValidationException.class) .hasMessageContaining("Cannot read the array length")
[-] pred:  org. junit. Assert. assertNull ( deserializer, null )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, null)) .isInstanceOf(ValidationException.class) .hasMessageContaining("Cannot read the array length")
[-] pred:  org. junit. Assert. assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, null)) .isInstanceOf(ValidationException.class) .hasMessageContaining("Cannot read the array length")
[-] pred:  org. junit. Assert. assertNull ( deserializer )

[*] target: assertThatThrownBy(() -> deserializer.deserialize(null, null)) .isInstanceOf(ValidationException.class) .hasMessageContaining("Cannot read the array length")
[-] pred:  org. junit. Assert. assertNull ( deserializer, msg )

************************************
************************************
[+] input: deserializeNestedMessage() { var deserialized = serde.deserializer(DUMMY_TOPIC, Serde.Target.VALUE) .deserialize(null, getComplexProtobufMessage()); "<AssertPlaceHolder>"; }
deserialize(RecordHeaders headers, byte[] data) { try { UnknownFieldSet unknownFields = UnknownFieldSet.parseFrom(data); return new DeserializeResult(unknownFields.toString(), DeserializeResult.Type.STRING, Map.of()); } catch (Exception e) { throw new ValidationException(e.getMessage()); } }
[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n2: {\n  1: 10\n}\n")
[-] pred:  org. junit. Assert. assertNull ( deserialized )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n2: {\n  1: 10\n}\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized instanceof DeserializeResult(unknownFields.toString ( ) ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n2: {\n  1: 10\n}\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized == null ) )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n2: {\n  1: 10\n}\n")
[-] pred:  org. junit. Assert. assertEquals ( new DeserializeResult(unknownFields.toString ( ), deserialized )

[*] target: assertThat(deserialized.getResult()).isEqualTo("1: 5\n2: {\n  1: 10\n}\n")
[-] pred:  org. junit. Assert. assertTrue ( ( deserialized instanceof DeserializeResult(unknownFields. toString ( ) ) )

************************************
************************************
[+] input: sanitizeConnectorConfigDoNotFailOnNullableValues() { Map<String, Object> originalConfig = new HashMap<>(); originalConfig.put("password", "secret"); originalConfig.put("asIs", "normal"); originalConfig.put("nullVal", null);  var sanitizedConfig = new KafkaConfigSanitizer(true, List.of()) .sanitizeConnectorConfig(originalConfig);  "<AssertPlaceHolder>"; }
sanitizeConnectorConfig(@Nullable Map<String, Object> original) { var result = new HashMap<String, Object>(); //null-values supporting map! if (original != null) { original.forEach((k, v) -> result.put(k, sanitize(k, v))); } return result; }
[*] target: assertThat(sanitizedConfig) .hasSize(3) .containsEntry("password", "******") .containsEntry("asIs", "normal") .containsEntry("nullVal", null)
[-] pred:  org. junit. Assert. assertEquals ( var sanitizedConfig, originalConfig )

[*] target: assertThat(sanitizedConfig) .hasSize(3) .containsEntry("password", "******") .containsEntry("asIs", "normal") .containsEntry("nullVal", null)
[-] pred:  org. junit. Assert. assertEquals ( var sanitizedConfig, originalConfig. sanitizeConnectorConfig(@Nullable Map<sp> originalConfig, var sanitizedConfig )

[*] target: assertThat(sanitizedConfig) .hasSize(3) .containsEntry("password", "******") .containsEntry("asIs", "normal") .containsEntry("nullVal", null)
[-] pred:  org. junit. Assert. assertEquals ( var sanitizedConfig, org. apache. commons. lang. StringUtils. sanitizeConnectorConfig( originalConfig, var sanitizedConfig )

[*] target: assertThat(sanitizedConfig) .hasSize(3) .containsEntry("password", "******") .containsEntry("asIs", "normal") .containsEntry("nullVal", null)
[-] pred:  org. junit. Assert. assertEquals ( var sanitizedConfig, com. google. common. collect. Map. valueOf ( originalConfig ) )

[*] target: assertThat(sanitizedConfig) .hasSize(3) .containsEntry("password", "******") .containsEntry("asIs", "normal") .containsEntry("nullVal", null)
[-] pred:  org

************************************
************************************
[+] input: transformAndParseUseSameFormat() { String csv = AclCsv.transformToCsvString(TEST_BINDINGS); Collection<AclBinding> parsedBindings = AclCsv.parseCsv(csv); "<AssertPlaceHolder>"; }
parseCsv(String csvString) { String[] lines = csvString.split(LINE_SEPARATOR); if (lines.length == 0) { throw new ValidationException("Error parsing ACL csv file: no lines in file"); } boolean firstLineIsHeader = HEADER.equalsIgnoreCase(lines[0].trim().replace(" ", "")); Set<AclBinding> result = new HashSet<>(); for (int i = firstLineIsHeader ? 1 : 0; i < lines.length; i++) { String line = lines[i]; if (!line.isBlank()) { AclBinding aclBinding = parseCsvLine(line, i); result.add(aclBinding); } } return result; }
[*] target: assertThat(parsedBindings).containsExactlyInAnyOrderElementsOf(TEST_BINDINGS)
[-] pred:  org. junit. Assert. assertEquals ( new HashSet < org.AclBinding > ( ), parsedBindings )

[*] target: assertThat(parsedBindings).containsExactlyInAnyOrderElementsOf(TEST_BINDINGS)
[-] pred:  org. junit. Assert. assertEquals ( new HashSet < org<AclBinding > ( ), parsedBindings )

[*] target: assertThat(parsedBindings).containsExactlyInAnyOrderElementsOf(TEST_BINDINGS)
[-] pred:  org. junit. Assert. assertEquals ( new HashSet ( ), parsedBindings )

[*] target: assertThat(parsedBindings).containsExactlyInAnyOrderElementsOf(TEST_BINDINGS)
[-] pred:  org

[*] target: assertThat(parsedBindings).containsExactlyInAnyOrderElementsOf(TEST_BINDINGS)
[-] pred:  )

************************************
************************************
[+] input: createsConsumerDependantAclsWhenTopicsAndGroupsSpecifiedByPrefix() { ArgumentCaptor<Collection<AclBinding>> createdCaptor = ArgumentCaptor.forClass(Collection.class); when(adminClientMock.createAcls(createdCaptor.capture())) .thenReturn(Mono.empty());  var principal = UUID.randomUUID().toString(); var host = UUID.randomUUID().toString();  aclsService.createConsumerAcl( CLUSTER, new CreateConsumerAclDTO() .principal(principal) .host(host) .consumerGroupsPrefix("cgPref") .topicsPrefix("topicPref") ).block();  //Read, Describe on topics, Read on consumerGroups Collection<AclBinding> createdBindings = createdCaptor.getValue(); "<AssertPlaceHolder>"; }
createConsumerAcl(KafkaCluster cluster, CreateConsumerAclDTO request) { return adminClientService.get(cluster) .flatMap(ac -> createAclsWithLogging(ac, createConsumerBindings(request))) .then(); }
[*] target: assertThat(createdBindings) .hasSize(3) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.GROUP, "cgPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( host, createdBindings )

[*] target: assertThat(createdBindings) .hasSize(3) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.GROUP, "cgPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( host, createdBindings. createConsumerAcl(bndbndbnd )

[*] target: assertThat(createdBindings) .hasSize(3) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.GROUP, "cgPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( host, createdBindings, principal )

[*] target: assertThat(createdBindings) .hasSize(3) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.GROUP, "cgPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( hosts, createdBindings )

[*] target: assertThat(createdBindings) .hasSize(3) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.GROUP, "cgPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.READ, AclPermissionType.ALLOW)))
[-] pred:  org

************************************
************************************
[+] input: createsProducerDependantAcls() { ArgumentCaptor<Collection<AclBinding>> createdCaptor = ArgumentCaptor.forClass(Collection.class); when(adminClientMock.createAcls(createdCaptor.capture())) .thenReturn(Mono.empty());  var principal = UUID.randomUUID().toString(); var host = UUID.randomUUID().toString();  aclsService.createProducerAcl( CLUSTER, new CreateProducerAclDTO() .principal(principal) .host(host) .topics(List.of("t1")) .idempotent(true) .transactionalId("txId1") ).block();  //Write, Describe, Create permission on topics, Write, Describe on transactionalIds //IDEMPOTENT_WRITE on cluster if idempotent is enabled (true) Collection<AclBinding> createdBindings = createdCaptor.getValue(); "<AssertPlaceHolder>"; }
createProducerAcl(KafkaCluster cluster, CreateProducerAclDTO request) { return adminClientService.get(cluster) .flatMap(ac -> createAclsWithLogging(ac, createProducerBindings(request))) .then(); }
[*] target: assertThat(createdBindings) .hasSize(6) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.CLUSTER, Resource.CLUSTER_NAME, PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.IDEMPOTENT_WRITE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertThat ( createdBindings, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( host ) ) )

[*] target: assertThat(createdBindings) .hasSize(6) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.CLUSTER, Resource.CLUSTER_NAME, PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.IDEMPOTENT_WRITE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertThat ( createdBindings, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( hosts ) ) )

[*] target: assertThat(createdBindings) .hasSize(6) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.CLUSTER, Resource.CLUSTER_NAME, PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.IDEMPOTENT_WRITE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( host, createdBindings )

[*] target: assertThat(createdBindings) .hasSize(6) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.CLUSTER, Resource.CLUSTER_NAME, PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.IDEMPOTENT_WRITE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertThat ( createdBindings, org. hamcrest. Matchers. is ( org. hamcrest. Matchers. equalTo ( host ) ) )

[*] target: assertThat(createdBindings) .hasSize(6) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "t1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txId1", PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.CLUSTER, Resource.CLUSTER_NAME, PatternType.LITERAL), new AccessControlEntry(principal, host, AclOperation.IDEMPOTENT_WRITE, AclPermissionType.ALLOW)))
[-] pred:  org

************************************
************************************
[+] input: createsProducerDependantAclsWhenTopicsAndTxIdSpecifiedByPrefix() { ArgumentCaptor<Collection<AclBinding>> createdCaptor = ArgumentCaptor.forClass(Collection.class); when(adminClientMock.createAcls(createdCaptor.capture())) .thenReturn(Mono.empty());  var principal = UUID.randomUUID().toString(); var host = UUID.randomUUID().toString();  aclsService.createProducerAcl( CLUSTER, new CreateProducerAclDTO() .principal(principal) .host(host) .topicsPrefix("topicPref") .transactionsIdPrefix("txIdPref") .idempotent(false) ).block();  //Write, Describe, Create permission on topics, Write, Describe on transactionalIds //IDEMPOTENT_WRITE on cluster if idempotent is enabled (false) Collection<AclBinding> createdBindings = createdCaptor.getValue(); "<AssertPlaceHolder>"; }
createProducerAcl(KafkaCluster cluster, CreateProducerAclDTO request) { return adminClientService.get(cluster) .flatMap(ac -> createAclsWithLogging(ac, createProducerBindings(request))) .then(); }
[*] target: assertThat(createdBindings) .hasSize(5) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( host, createdBindings )

[*] target: assertThat(createdBindings) .hasSize(5) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertThat ( createdBindings, org. hamcrest. Matchers. is ( createdCaptor ) )

[*] target: assertThat(createdBindings) .hasSize(5) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( createdBindings, createdCaptor. createProducerAcls (createdCaptor, principal ) )

[*] target: assertThat(createdBindings) .hasSize(5) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW)))
[-] pred:  org. junit. Assert. assertEquals ( createdBindings, createdCaptor )

[*] target: assertThat(createdBindings) .hasSize(5) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TOPIC, "topicPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.CREATE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.WRITE, AclPermissionType.ALLOW))) .contains(new AclBinding( new ResourcePattern(ResourceType.TRANSACTIONAL_ID, "txIdPref", PatternType.PREFIXED), new AccessControlEntry(principal, host, AclOperation.DESCRIBE, AclPermissionType.ALLOW)))
[-] pred:  org

************************************
************************************
[+] input: savesResultWhenAnalysisIsCompleted() { String topic = "analyze_test_" + UUID.randomUUID(); createTopic(new NewTopic(topic, 2, (short) 1)); fillTopic(topic, 1_000);  var cluster = clustersStorage.getClusterByName(LOCAL).get(); topicAnalysisService.analyze(cluster, topic).block();  Awaitility.await() .atMost(Duration.ofSeconds(20)) .untilAsserted(() -> { "<AssertPlaceHolder>"; assertThat(state.getResult()).isNotNull(); var completedAnalyze = state.getResult(); assertThat(completedAnalyze.getTotalStats().getTotalMsgs()).isEqualTo(1_000); assertThat(completedAnalyze.getPartitionStats().size()).isEqualTo(2); }); }); }
getTopicAnalysis(KafkaCluster cluster, String topicName) { return analysisTasksStore.getTopicAnalysis(new TopicIdentity(cluster, topicName)); }
[*] target: assertThat(topicAnalysisService.getTopicAnalysis(cluster, topic)) .hasValueSatisfying(state -> { assertThat(state.getProgress()).isNull()
[-] pred:  org. junit. Assert. assertThat ( topicAnalysisService. getTopicAnalysis(KafkaCluster,, topicName topicName )

[*] target: assertThat(topicAnalysisService.getTopicAnalysis(cluster, topic)) .hasValueSatisfying(state -> { assertThat(state.getProgress()).isNull()
[-] pred:  org. junit. Assert. assertNotNull ( cluster )

[*] target: assertThat(topicAnalysisService.getTopicAnalysis(cluster, topic)) .hasValueSatisfying(state -> { assertThat(state.getProgress()).isNull()
[-] pred:  org. junit. Assert. assertThat ( cluster. getTopicAnalysis(KafkaCluster,, topicName topicName )

[*] target: assertThat(topicAnalysisService.getTopicAnalysis(cluster, topic)) .hasValueSatisfying(state -> { assertThat(state.getProgress()).isNull()
[-] pred:  org. junit. Assert. assertNotNull ( cluster. getTopicAnalysis(KafkaCluster,, topicName topicName )

[*] target: assertThat(topicAnalysisService.getTopicAnalysis(cluster, topic)) .hasValueSatisfying(state -> { assertThat(state.getProgress()).isNull()
[-] pred:  org

************************************
************************************
[+] input: exportsConnectorsAsDataTransformers() { ConnectDTO connect = new ConnectDTO(); connect.setName("testConnect"); connect.setAddress("http://kconnect:8083");  ConnectorDTO sinkConnector = new ConnectorDTO(); sinkConnector.setName("testSink"); sinkConnector.setType(ConnectorTypeDTO.SINK); sinkConnector.setConnect(connect.getName()); sinkConnector.setConfig( Map.of( "connector.class", "FileStreamSink", "file", "filePathHere", "topic", "inputTopic" ) );  ConnectorDTO sourceConnector = new ConnectorDTO(); sourceConnector.setName("testSource"); sourceConnector.setConnect(connect.getName()); sourceConnector.setType(ConnectorTypeDTO.SOURCE); sourceConnector.setConfig( Map.of( "connector.class", "FileStreamSource", "file", "filePathHere", "topic", "outputTopic" ) );  when(kafkaConnectService.getConnects(CLUSTER)) .thenReturn(Flux.just(connect));  when(kafkaConnectService.getConnectorNamesWithErrorsSuppress(CLUSTER, connect.getName())) .thenReturn(Flux.just(sinkConnector.getName(), sourceConnector.getName()));  when(kafkaConnectService.getConnector(CLUSTER, connect.getName(), sinkConnector.getName())) .thenReturn(Mono.just(sinkConnector));  when(kafkaConnectService.getConnector(CLUSTER, connect.getName(), sourceConnector.getName())) .thenReturn(Mono.just(sourceConnector));  when(kafkaConnectService.getConnectorTopics(CLUSTER, connect.getName(), sourceConnector.getName())) .thenReturn(Mono.just(new ConnectorTopics().topics(List.of("outputTopic"))));  when(kafkaConnectService.getConnectorTopics(CLUSTER, connect.getName(), sinkConnector.getName())) .thenReturn(Mono.just(new ConnectorTopics().topics(List.of("inputTopic"))));  StepVerifier.create(exporter.export(CLUSTER)) ."<AssertPlaceHolder>";  assertThat(dataEntityList.getItems()) .hasSize(2);  assertThat(dataEntityList.getItems()) .filteredOn(DataEntity::getOddrn, "//kafkaconnect/host/kconnect:8083/connectors/testSink") .singleElement() .satisfies(sink -> { assertThat(sink.getMetadata().get(0).getMetadata()) .containsOnlyKeys("type", "connector.class", "file", "topic"); assertThat(sink.getDataTransformer().getInputs()).contains( "//kafka/cluster/localhost:9092/topics/inputTopic"); });  assertThat(dataEntityList.getItems()) .filteredOn(DataEntity::getOddrn, "//kafkaconnect/host/kconnect:8083/connectors/testSource") .singleElement() .satisfies(source -> { assertThat(source.getMetadata().get(0).getMetadata()) .containsOnlyKeys("type", "connector.class", "file", "topic"); assertThat(source.getDataTransformer().getOutputs()).contains( "//kafka/cluster/localhost:9092/topics/outputTopic"); });  }) .verifyComplete(); }
export(KafkaCluster cluster) { return kafkaConnectService.getConnects(cluster) .flatMap(connect -> kafkaConnectService.getConnectorNamesWithErrorsSuppress(cluster, connect.getName()) .flatMap(connectorName -> kafkaConnectService.getConnector(cluster, connect.getName(), connectorName)) .flatMap(connectorDTO -> kafkaConnectService.getConnectorTopics(cluster, connect.getName(), connectorDTO.getName()) .map(topics -> createConnectorDataEntity(cluster, connect, connectorDTO, topics))) .buffer(100) .map(connectDataEntities -> { String dsOddrn = Oddrn.connectDataSourceOddrn(connect.getAddress()); return new DataEntityList() .dataSourceOddrn(dsOddrn) .items(connectDataEntities); }) ); }
[*] target: assertNext(dataEntityList -> { assertThat(dataEntityList.getDataSourceOddrn()) .isEqualTo("//kafkaconnect/host/kconnect:8083")
[-] pred:  org. junit. Assert. assertThat ( sinkConnector. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertNext(dataEntityList -> { assertThat(dataEntityList.getDataSourceOddrn()) .isEqualTo("//kafkaconnect/host/kconnect:8083")
[-] pred:  org. junit. Assert. assertThat ( sinkConnector. size ( ), org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertNext(dataEntityList -> { assertThat(dataEntityList.getDataSourceOddrn()) .isEqualTo("//kafkaconnect/host/kconnect:8083")
[-] pred:  org. junit. Assert. assertThat ( sinkConnector.getName ( ), org. hamcrest. CoreMatchers. is ( 12 ) )

[*] target: assertNext(dataEntityList -> { assertThat(dataEntityList.getDataSourceOddrn()) .isEqualTo("//kafkaconnect/host/kconnect:8083")
[-] pred:  org. junit. Assert. assertThat ( sinkConnector. getErrors ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertNext(dataEntityList -> { assertThat(dataEntityList.getDataSourceOddrn()) .isEqualTo("//kafkaconnect/host/kconnect:8083")
[-] pred:  org. junit. Assert. assertThat ( sinkConnector. size ( ), org. hamcrest. CoreMatchers. is ( 5 ) )

************************************
************************************
[+] input: doesNotExportTopicsWhichDontFitFiltrationRule() { when(schemaRegistryClientMock.getSubjectVersion(anyString(), anyString(), anyBoolean())) .thenReturn(Mono.error(WebClientResponseException.create(404, "NF", new HttpHeaders(), null, null, null))); stats = Statistics.empty() .toBuilder() .topicDescriptions( Map.of( "_hidden", new TopicDescription("_hidden", false, List.of( new TopicPartitionInfo(0, null, List.of(), List.of()) )), "visible", new TopicDescription("visible", false, List.of( new TopicPartitionInfo(0, null, List.of(), List.of()) )) ) ) .build();  StepVerifier.create(topicsExporter.export(cluster)) ."<AssertPlaceHolder>";  assertThat(entityList.getItems()) .hasSize(1) .allSatisfy(e -> e.getOddrn().contains("visible")); }) .verifyComplete(); }
export(KafkaCluster cluster) { String clusterOddrn = Oddrn.clusterOddrn(cluster); Statistics stats = statisticsCache.get(cluster); return Flux.fromIterable(stats.getTopicDescriptions().keySet()) .filter(topicFilter) .flatMap(topic -> createTopicDataEntity(cluster, topic, stats)) .onErrorContinue( (th, topic) -> log.warn("Error exporting data for topic {}, cluster {}", topic, cluster.getName(), th)) .buffer(100) .map(topicsEntities -> new DataEntityList() .dataSourceOddrn(clusterOddrn) .items(topicsEntities)); }
[*] target: assertNext(entityList -> { assertThat(entityList.getDataSourceOddrn()) .isNotEmpty()
[-] pred:  org. junit. Assert. assertThat ( stats. export(KafkaCluster cluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getDataSourceOddrn()) .isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( null, stats. export(KafkaCluster cluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getDataSourceOddrn()) .isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 0, stats. export(KafkaCluster cluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getDataSourceOddrn()) .isNotEmpty()
[-] pred:  org. junit. Assert. assertEquals ( null, stats. export(KafkaCluster cluster) )

[*] target: assertNext(entityList -> { assertThat(entityList.getDataSourceOddrn()) .isNotEmpty()
[-] pred:  org

************************************
************************************
[+] input: doesExportTopicData() { when(schemaRegistryClientMock.getSubjectVersion("testTopic-value", "latest", false)) .thenReturn(Mono.just( new SchemaSubject() .schema(""string"") .schemaType(SchemaType.AVRO) ));  when(schemaRegistryClientMock.getSubjectVersion("testTopic-key", "latest", false)) .thenReturn(Mono.just( new SchemaSubject() .schema(""int"") .schemaType(SchemaType.AVRO) ));  stats = Statistics.empty() .toBuilder() .topicDescriptions( Map.of( "testTopic", new TopicDescription( "testTopic", false, List.of( new TopicPartitionInfo( 0, null, List.of( new Node(1, "host1", 9092), new Node(2, "host2", 9092) ), List.of()) )) ) ) .topicConfigs( Map.of( "testTopic", List.of( new ConfigEntry( "custom.config", "100500", ConfigEntry.ConfigSource.DYNAMIC_TOPIC_CONFIG, false, false, List.of(), ConfigEntry.ConfigType.INT, null ) ) ) ) .build();  StepVerifier.create(topicsExporter.export(cluster)) ."<AssertPlaceHolder>";  DataEntity topicEntity = entityList.getItems().get(0); assertThat(topicEntity.getName()).isNotEmpty(); assertThat(topicEntity.getOddrn()) .isEqualTo("//kafka/cluster/localhost:19092,localhost:9092/topics/testTopic"); assertThat(topicEntity.getType()).isEqualTo(DataEntityType.KAFKA_TOPIC); assertThat(topicEntity.getMetadata()) .hasSize(1) .singleElement() .satisfies(e -> assertThat(e.getMetadata()) .containsExactlyInAnyOrderEntriesOf( Map.of( "partitions", 1, "replication_factor", 2, "custom.config", "100500")));  assertThat(topicEntity.getDataset()).isNotNull(); assertThat(topicEntity.getDataset().getFieldList()) .hasSize(4); // 2 field for key, 2 for value }) .verifyComplete(); }
export(KafkaCluster cluster) { String clusterOddrn = Oddrn.clusterOddrn(cluster); Statistics stats = statisticsCache.get(cluster); return Flux.fromIterable(stats.getTopicDescriptions().keySet()) .filter(topicFilter) .flatMap(topic -> createTopicDataEntity(cluster, topic, stats)) .onErrorContinue( (th, topic) -> log.warn("Error exporting data for topic {}, cluster {}", topic, cluster.getName(), th)) .buffer(100) .map(topicsEntities -> new DataEntityList() .dataSourceOddrn(clusterOddrn) .items(topicsEntities)); }
[*] target: assertNext(entityList -> { assertThat(entityList.getItems()) .hasSize(1)
[-] pred:  org. junit. Assert. assertNotNull ( stats )

[*] target: assertNext(entityList -> { assertThat(entityList.getItems()) .hasSize(1)
[-] pred:  org. junit. Assert. assertEquals ( 1, stats. export(KafkaCluster cluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getItems()) .hasSize(1)
[-] pred:  org. junit. Assert. assertEquals ( 12, stats. export(KafkaCluster cluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getItems()) .hasSize(1)
[-] pred:  org. junit. Assert. assertEquals ( 12, stats. export(KafkaCluster )

[*] target: assertNext(entityList -> { assertThat(entityList.getItems()) .hasSize(1)
[-] pred:  org. junit. Assert. assertEquals ( 1, stats. export(KafkaCluster )

************************************
************************************
[+] input: listStreamsReturnsAllKsqlStreams() { var streamName = "stream_" + System.currentTimeMillis(); STREAMS_TO_DELETE.add(streamName);  ksqlClient() .execute( String.format("CREATE STREAM %s ( " + "  c1 BIGINT KEY, " + "  c2 VARCHAR " + " ) WITH ( " + "  KAFKA_TOPIC = '%s_topic', " + "  PARTITIONS = 1, " + "  VALUE_FORMAT = 'JSON' " + " );", streamName, streamName), Map.of()) .blockLast();  var streams = ksqlService.listStreams(cluster()).collectList().block(); "<AssertPlaceHolder>"; }
listStreams(KafkaCluster cluster) { return cluster.getKsqlClient() .flux(client -> client.execute("LIST STREAMS;", Map.of())) .flatMap(resp -> { if (!resp.getHeader().equals("Streams")) { log.error("Unexpected result header: {}", resp.getHeader()); log.debug("Unexpected result {}", resp); return Flux.error(new KsqlApiException("Error retrieving streams list")); } return Flux.fromIterable(resp.getValues() .stream() .map(row -> new KsqlStreamDescriptionDTO() .name(resp.getColumnValue(row, "name").map(JsonNode::asText).orElse(null)) .topic(resp.getColumnValue(row, "topic").map(JsonNode::asText).orElse(null)) .keyFormat(resp.getColumnValue(row, "keyFormat").map(JsonNode::asText).orElse(null)) .valueFormat( // for old versions (<0.13) "format" column is filled, // for new version "keyFormat" & "valueFormat" columns should be filled resp.getColumnValue(row, "valueFormat") .or(() -> resp.getColumnValue(row, "format")) .map(JsonNode::asText) .orElse(null)) ) .collect(Collectors.toList())); }); }
[*] target: assertThat(streams).contains( new KsqlStreamDescriptionDTO() .name(streamName.toUpperCase()) .topic(streamName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") )
[-] pred:  org. junit. Assert. assertEquals ( 1, streams. listStreams ( 0L ). size ( ) )

[*] target: assertThat(streams).contains( new KsqlStreamDescriptionDTO() .name(streamName.toUpperCase()) .topic(streamName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") )
[-] pred:  org. junit. Assert. assertEquals ( new KsqlStreamDescription::asText ( ), streams )

[*] target: assertThat(streams).contains( new KsqlStreamDescriptionDTO() .name(streamName.toUpperCase()) .topic(streamName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") )
[-] pred:  org. junit. Assert. assertEquals ( new KsqlStreamDescriptionDescription:: var streamName, streams )

[*] target: assertThat(streams).contains( new KsqlStreamDescriptionDTO() .name(streamName.toUpperCase()) .topic(streamName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") )
[-] pred:  org. junit. Assert. assertEquals ( vars, received )

[*] target: assertThat(streams).contains( new KsqlStreamDescriptionDTO() .name(streamName.toUpperCase()) .topic(streamName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") )
[-] pred:  org

************************************
************************************
[+] input: listTablesReturnsAllKsqlTables() { var tableName = "table_" + System.currentTimeMillis(); TABLES_TO_DELETE.add(tableName);  ksqlClient() .execute( String.format("CREATE TABLE %s ( " + "   c1 BIGINT PRIMARY KEY, " + "   c2 VARCHAR " + " ) WITH ( " + "  KAFKA_TOPIC = '%s_topic', " + "  PARTITIONS = 1, " + "  VALUE_FORMAT = 'JSON' " + " );", tableName, tableName), Map.of()) .blockLast();  var tables = ksqlService.listTables(cluster()).collectList().block(); "<AssertPlaceHolder>"; }
listTables(KafkaCluster cluster) { return cluster.getKsqlClient() .flux(client -> client.execute("LIST TABLES;", Map.of())) .flatMap(resp -> { if (!resp.getHeader().equals("Tables")) { log.error("Unexpected result header: {}", resp.getHeader()); log.debug("Unexpected result {}", resp); return Flux.error(new KsqlApiException("Error retrieving tables list")); } return Flux.fromIterable(resp.getValues() .stream() .map(row -> new KsqlTableDescriptionDTO() .name(resp.getColumnValue(row, "name").map(JsonNode::asText).orElse(null)) .topic(resp.getColumnValue(row, "topic").map(JsonNode::asText).orElse(null)) .keyFormat(resp.getColumnValue(row, "keyFormat").map(JsonNode::asText).orElse(null)) .valueFormat(resp.getColumnValue(row, "valueFormat").map(JsonNode::asText).orElse(null)) .isWindowed(resp.getColumnValue(row, "isWindowed").map(JsonNode::asBoolean).orElse(null))) .collect(Collectors.toList())); }); }
[*] target: assertThat(tables).contains( new KsqlTableDescriptionDTO() .name(tableName.toUpperCase()) .topic(tableName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") .isWindowed(false) )
[-] pred:  org. junit. Assert. assertTrue ( ( var tables. size ( ) ) > 0 ) )

[*] target: assertThat(tables).contains( new KsqlTableDescriptionDTO() .name(tableName.toUpperCase()) .topic(tableName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") .isWindowed(false) )
[-] pred:  org. junit. Assert. assertNotNull ( var tables )

[*] target: assertThat(tables).contains( new KsqlTableDescriptionDTO() .name(tableName.toUpperCase()) .topic(tableName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") .isWindowed(false) )
[-] pred:  org. junit. Assert. assertFalse ( var tables. listTables ( 0L ). isEmpty ( ) )

[*] target: assertThat(tables).contains( new KsqlTableDescriptionDTO() .name(tableName.toUpperCase()) .topic(tableName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") .isWindowed(false) )
[-] pred:  org. junit. Assert. assertTrue ( ( var tables instanceof KsqlTableDescriptionDTO ) )

[*] target: assertThat(tables).contains( new KsqlTableDescriptionDTO() .name(tableName.toUpperCase()) .topic(tableName + "_topic") .keyFormat("KAFKA") .valueFormat("JSON") .isWindowed(false) )
[-] pred:  org. junit. Assert. assertTrue ( ( var tables instanceof org. apache. hadoop. util. HashSet ) )

************************************
************************************
[+] input: throwsExceptionIfBothFieldListAndPatternProvided() { var properties = new ClustersProperties.Masking(); properties.setFieldsNamePattern("f1|f2"); properties.setFields(List.of("f3", "f4"));  "<AssertPlaceHolder>"; }
create(ClustersProperties.Masking property) { if (StringUtils.hasText(property.getFieldsNamePattern()) && !CollectionUtils.isEmpty(property.getFields())) { throw new ValidationException("You can't provide both fieldNames & fieldsNamePattern for masking"); } if (StringUtils.hasText(property.getFieldsNamePattern())) { Pattern pattern = Pattern.compile(property.getFieldsNamePattern()); return f -> pattern.matcher(f).matches(); } if (!CollectionUtils.isEmpty(property.getFields())) { return f -> property.getFields().contains(f); } //no pattern, no field names - mean all fields should be masked return fieldName -> true; }
[*] target: assertThatThrownBy(() -> FieldsSelector.create(properties)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertTrue ( properties. create(ClustersProperties.Masking property ) )

[*] target: assertThatThrownBy(() -> FieldsSelector.create(properties)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertFalse ( properties. create(ClustersProperties.Masking property )

[*] target: assertThatThrownBy(() -> FieldsSelector.create(properties)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertTrue ( properties. create(ClustersProperties.Masking property )

[*] target: assertThatThrownBy(() -> FieldsSelector.create(properties)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertTrue ( properties. create(ClustersProperties_Masking property ) )

[*] target: assertThatThrownBy(() -> FieldsSelector.create(properties)) .isInstanceOf(ValidationException.class)
[-] pred:  org. junit. Assert. assertTrue ( properties. create(ClustersProperties ( property ) )

************************************
************************************
[+] input: test() { String metricsString = "kafka_server_BrokerTopicMetrics_FifteenMinuteRate" + "{name="BytesOutPerSec",topic="__confluent.support.metrics",} 123.1234";  Optional<RawMetric> parsedOpt = PrometheusEndpointMetricsParser.parse(metricsString);  Assertions."<AssertPlaceHolder>"; assertThat(metric.value()).isEqualTo("123.1234"); assertThat(metric.labels()).containsExactlyEntriesOf( Map.of( "name", "BytesOutPerSec", "topic", "__confluent.support.metrics" )); }); }
parse(String s) { Matcher matcher = PATTERN.matcher(s); if (matcher.matches()) { String value = matcher.group("value"); String metricName = matcher.group("metricName"); if (metricName == null || !NumberUtils.isCreatable(value)) { return Optional.empty(); } var labels = Arrays.stream(matcher.group("properties").split(",")) .filter(str -> !"".equals(str)) .map(str -> str.split("=")) .filter(spit -> spit.length == 2) .collect(Collectors.toUnmodifiableMap( str -> str[0].trim(), str -> str[1].trim().replace(""", "")));  return Optional.of(RawMetric.create(metricName, labels, new BigDecimal(value))); } return Optional.empty(); }
[*] target: assertThat(parsedOpt).hasValueSatisfying(metric -> { assertThat(metric.name()).isEqualTo("kafka_server_BrokerTopicMetrics_FifteenMinuteRate")
[-] pred:  org. junit. Assert. assertThat ( parsedOpt, org. hamcrest. CoreMatchers. is ( java. util. Optional. empty ( ) ) )

[*] target: assertThat(parsedOpt).hasValueSatisfying(metric -> { assertThat(metric.name()).isEqualTo("kafka_server_BrokerTopicMetrics_FifteenMinuteRate")
[-] pred:  org. junit. Assert. assertThat ( parsedOpt, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( true ) ) )

[*] target: assertThat(parsedOpt).hasValueSatisfying(metric -> { assertThat(metric.name()).isEqualTo("kafka_server_BrokerTopicMetrics_FifteenMinuteRate")
[-] pred:  org. junit. Assert. assertThat ( parsedOpt, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( non ) ) )

[*] target: assertThat(parsedOpt).hasValueSatisfying(metric -> { assertThat(metric.name()).isEqualTo("kafka_server_BrokerTopicMetrics_FifteenMinuteRate")
[-] pred:  org. junit. Assert. assertThat ( parsedOpt. get ( ), org. hamcrest. CoreMatchers. is ( metricsString ) )

[*] target: assertThat(parsedOpt).hasValueSatisfying(metric -> { assertThat(metric.name()).isEqualTo("kafka_server_BrokerTopicMetrics_FifteenMinuteRate")
[-] pred:  org. junit. Assert. assertThat ( parsedOpt, org. hamcrest. CoreMatchers. is ( getExpected ) )

************************************
************************************
[+] input: appliesInnerStateToMetricsBuilder() { //filling per topic io rates wellKnownMetrics.bytesInFifteenMinuteRate.put("topic", new BigDecimal(1)); wellKnownMetrics.bytesOutFifteenMinuteRate.put("topic", new BigDecimal(2));  //filling per broker io rates wellKnownMetrics.brokerBytesInFifteenMinuteRate.put(1, new BigDecimal(1)); wellKnownMetrics.brokerBytesOutFifteenMinuteRate.put(1, new BigDecimal(2)); wellKnownMetrics.brokerBytesInFifteenMinuteRate.put(2, new BigDecimal(10)); wellKnownMetrics.brokerBytesOutFifteenMinuteRate.put(2, new BigDecimal(20));  Metrics.MetricsBuilder builder = Metrics.builder(); wellKnownMetrics.apply(builder); var metrics = builder.build();  // checking per topic io rates "<AssertPlaceHolder>"; assertThat(metrics.getTopicBytesOutPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesOutFifteenMinuteRate);  // checking per broker io rates assertThat(metrics.getBrokerBytesInPerSec()).containsExactlyInAnyOrderEntriesOf( Map.of(1, new BigDecimal(1), 2, new BigDecimal(10))); assertThat(metrics.getBrokerBytesOutPerSec()).containsExactlyInAnyOrderEntriesOf( Map.of(1, new BigDecimal(2), 2, new BigDecimal(20))); }
apply(Metrics.MetricsBuilder metricsBuilder) { metricsBuilder.topicBytesInPerSec(bytesInFifteenMinuteRate); metricsBuilder.topicBytesOutPerSec(bytesOutFifteenMinuteRate); metricsBuilder.brokerBytesInPerSec(brokerBytesInFifteenMinuteRate); metricsBuilder.brokerBytesOutPerSec(brokerBytesOutFifteenMinuteRate); }
[*] target: assertThat(metrics.getTopicBytesInPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesInFifteenMinuteRate)
[-] pred:  org. junit. Assert. assertThat ( metrics. apply(Metrics.MetricsBuilder metricsBuilder )

[*] target: assertThat(metrics.getTopicBytesInPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesInFifteenMinuteRate)
[-] pred:  org. junit. Assert. assertThat ( metrics. apply(Metrics.MetricsBuilder ( ), org. hamcrest. CoreMatchers. is ( new BigDecimal(20normalize ) )

[*] target: assertThat(metrics.getTopicBytesInPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesInFifteenMinuteRate)
[-] pred:  org. junit. Assert. assertThat ( metrics. apply(Metrics. metricsBuilder )

[*] target: assertThat(metrics.getTopicBytesInPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesInFifteenMinuteRate)
[-] pred:  org. junit. Assert. assertNotNull ( metrics )

[*] target: assertThat(metrics.getTopicBytesInPerSec()).containsExactlyEntriesOf(wellKnownMetrics.bytesInFifteenMinuteRate)
[-] pred:  org

************************************
************************************
[+] input: Exception { Path propsFilePath = tmpDir.resolve("props.yaml"); Files.writeString(propsFilePath, SAMPLE_YAML_CONFIG, StandardOpenOption.CREATE);  MutablePropertySources propertySources = new MutablePropertySources(); propertySources.addFirst(new MapPropertySource("test", Map.of("testK", "testV")));  when(envMock.getPropertySources()).thenReturn(propertySources); mockEnvWithVars(Map.of( DYNAMIC_CONFIG_ENABLED_ENV_PROPERTY, "true", DYNAMIC_CONFIG_PATH_ENV_PROPERTY, propsFilePath.toString() ));  DynamicConfigOperations.dynamicConfigPropertiesInitializer().initialize(ctxMock);  "<AssertPlaceHolder>"; assertThat(propertySources.stream()) .element(0) .extracting(PropertySource::getName) .isEqualTo("dynamicProperties"); }
dynamicConfigPropertiesInitializer() { return appCtx -> new DynamicConfigOperations(appCtx) .loadDynamicPropertySource() .ifPresent(source -> appCtx.getEnvironment().getPropertySources().addFirst(source)); }
[*] target: assertThat(propertySources.size()).isEqualTo(2)
[-] pred:  org. junit. Assert. assertEquals ( 2, propertySources. size ( ) )

[*] target: assertThat(propertySources.size()).isEqualTo(2)
[-] pred:  org. junit. Assert. assertEquals ( 2, propertySources. resolution )

[*] target: assertThat(propertySources.size()).isEqualTo(2)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. String. class, propsFilePath. getClass ( ) )

[*] target: assertThat(propertySources.size()).isEqualTo(2)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, propsFilePath. getClass ( ) )

[*] target: assertThat(propertySources.size()).isEqualTo(2)
[-] pred:  org

************************************
************************************
[+] input: testTrafficThrottled() { var throttler = new PollingThrottler("test", RateLimiter.create(1000)); long polledBytes = 0; var stopwatch = Stopwatch.createStarted(); while (stopwatch.elapsed(TimeUnit.SECONDS) < 1) { int newPolled = ThreadLocalRandom.current().nextInt(10); throttler.throttleAfterPoll(newPolled); polledBytes += newPolled; } "<AssertPlaceHolder>"; }
throttleAfterPoll(int polledBytes) { if (polledBytes > 0) { double sleptSeconds = rateLimiter.acquire(polledBytes); if (!throttled && sleptSeconds > 0.0) { throttled = true; log.debug("Polling throttling enabled for cluster {} at rate {} bytes/sec", clusterName, rateLimiter.getRate()); return true; } } return false; }
[*] target: assertThat(polledBytes).isCloseTo(1000, withPercentage(3.0))
[-] pred:  org. junit. Assert. assertEquals ( polledBytes, polledBytes )

[*] target: assertThat(polledBytes).isCloseTo(1000, withPercentage(3.0))
[-] pred:  org. junit. Assert. assertTrue ( ( newPolled > polledBytes ) )

[*] target: assertThat(polledBytes).isCloseTo(1000, withPercentage(3.0))
[-] pred:  org. junit. Assert. assertTrue ( ( newPolled >= polledBytes ) )

[*] target: assertThat(polledBytes).isCloseTo(1000, withPercentage(3.0))
[-] pred:  org. junit. Assert. assertEquals ( polledBytes, newPolled )

[*] target: assertThat(polledBytes).isCloseTo(1000, withPercentage(3.0))
[-] pred:  org

************************************
************************************
[+] input: noopThrottlerDoNotLimitPolling() { var noopThrottler = PollingThrottler.noop(); var stopwatch = Stopwatch.createStarted(); // emulating that we polled 1GB for (int i = 0; i < 1024; i++) { noopThrottler.throttleAfterPoll(1024 * 1024); } // checking that were are able to "poll" 1GB in less than a second "<AssertPlaceHolder>"; }
throttleAfterPoll(int polledBytes) { if (polledBytes > 0) { double sleptSeconds = rateLimiter.acquire(polledBytes); if (!throttled && sleptSeconds > 0.0) { throttled = true; log.debug("Polling throttling enabled for cluster {} at rate {} bytes/sec", clusterName, rateLimiter.getRate()); return true; } } return false; }
[*] target: assertThat(stopwatch.elapsed().getSeconds()).isLessThan(1)
[-] pred:  org. junit. Assert. assertTrue ( noopThrottler. throttleAfterPoll(1024 * 1024 ) )

[*] target: assertThat(stopwatch.elapsed().getSeconds()).isLessThan(1)
[-] pred:  org. junit. Assert. assertFalse ( noopThrottler. throttleAfterPoll(1024 * 1024 )

[*] target: assertThat(stopwatch.elapsed().getSeconds()).isLessThan(1)
[-] pred:  org. junit. Assert. assertEquals ( stopwatch, noopThrottler. throttleAfterPoll(1024 * 1024 )

[*] target: assertThat(stopwatch.elapsed().getSeconds()).isLessThan(1)
[-] pred:  org. junit. Assert. assertFalse ( noopThrottler. throttleAfterPoll(1024 * 1024 ) )

[*] target: assertThat(stopwatch.elapsed().getSeconds()).isLessThan(1)
[-] pred:  org. junit. Assert. assertEquals ( false, noopThrottler. throttleAfterPoll(1024 * 1024 )

************************************
************************************
[+] input: testIsIndividual() { CorporateEdsLoginAuthenticator authenticator = new CorporateEdsLoginAuthenticator(); "<AssertPlaceHolder>"; }
isIndividual() { return false; }
[*] target: assertThat(authenticator.isIndividual()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() )

[*] target: assertThat(authenticator.isIndividual()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() ( ) )

[*] target: assertThat(authenticator.isIndividual()).isFalse()
[-] pred:  org. junit. Assert. assertFalse ( authenticator. isIndividual() )

[*] target: assertThat(authenticator.isIndividual()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() ) )

[*] target: assertThat(authenticator.isIndividual()).isFalse()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() { } )

************************************
************************************
[+] input: testCreateMethod() { KeycloakSession session = mock(KeycloakSession.class); Authenticator authenticator = factory.create(session); "<AssertPlaceHolder>"; }
create(KeycloakSession session) { logger.info("Trying to create {} via factory.", this.getClass().getSimpleName()); return SINGLETON; }
[*] target: assertTrue(authenticator instanceof IndividualEdsLoginAuthenticator, "The created Authenticator is not an instance of IndividualEdsLoginAuthenticator.")
[-] pred:  org. junit. Assert. assertEquals ( SINGLETON;, authenticator. create(KeycloakSession session )

[*] target: assertTrue(authenticator instanceof IndividualEdsLoginAuthenticator, "The created Authenticator is not an instance of IndividualEdsLoginAuthenticator.")
[-] pred:  org. junit. Assert. assertEquals ( session, authenticator. create(KeycloakSession session )

[*] target: assertTrue(authenticator instanceof IndividualEdsLoginAuthenticator, "The created Authenticator is not an instance of IndividualEdsLoginAuthenticator.")
[-] pred:  org. junit. Assert. assertEquals ( callback, authenticator. create(KeycloakSession session )

[*] target: assertTrue(authenticator instanceof IndividualEdsLoginAuthenticator, "The created Authenticator is not an instance of IndividualEdsLoginAuthenticator.")
[-] pred:  org. junit. Assert. assertEquals ( session, authenticator. create(KeycloakSession session ) )

[*] target: assertTrue(authenticator instanceof IndividualEdsLoginAuthenticator, "The created Authenticator is not an instance of IndividualEdsLoginAuthenticator.")
[-] pred:  org

************************************
************************************
[+] input: testGetIdMethod() { "<AssertPlaceHolder>"; }
getId() { return ID; }
[*] target: assertEquals("keycloak-individual-eds-login", factory.getId(), "The ID does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( ID;, test. getId() ( ) )

[*] target: assertEquals("keycloak-individual-eds-login", factory.getId(), "The ID does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( ( ( java. lang. Long ) ( ID;. getId() ) ), example. getId() ( ) )

[*] target: assertEquals("keycloak-individual-eds-login", factory.getId(), "The ID does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( ( ( java. lang. Integer ) ( ID;. getId() ) ), example. getId() ( ) )

[*] target: assertEquals("keycloak-individual-eds-login", factory.getId(), "The ID does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( ID;. getId() ( ), value. getId() ( ) )

[*] target: assertEquals("keycloak-individual-eds-login", factory.getId(), "The ID does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( ID;. getId() ( ), value )

************************************
************************************
[+] input: testGetReferenceCategory() { "<AssertPlaceHolder>"; }
getReferenceCategory() { return "IndividualEdsLogin"; }
[*] target: assertEquals("IndividualEdsLogin", factory.getReferenceCategory(), "The Reference Category does not match the expected.")
[-] pred:  org. junit. Assert. assertNotNull ( context. getReferenceCategory() )

[*] target: assertEquals("IndividualEdsLogin", factory.getReferenceCategory(), "The Reference Category does not match the expected.")
[-] pred:  org. junit. Assert. assertNotNull ( context. getReferenceCategory() ( ) )

[*] target: assertEquals("IndividualEdsLogin", factory.getReferenceCategory(), "The Reference Category does not match the expected.")
[-] pred:  org. junit. Assert. assertNotNull ( builder. getReferenceCategory() ( ) )

[*] target: assertEquals("IndividualEdsLogin", factory.getReferenceCategory(), "The Reference Category does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( null, parser. getReferenceCategory() )

[*] target: assertEquals("IndividualEdsLogin", factory.getReferenceCategory(), "The Reference Category does not match the expected.")
[-] pred:  . from java

************************************
************************************
[+] input: testGetDisplayType() { "<AssertPlaceHolder>"; }
getDisplayType() { return "Individual EDS Login"; }
[*] target: assertEquals("Individual EDS Login", factory.getDisplayType(), "The Display Type does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( ( ( short ) ( 0 ) ) ), ( ( short ) ( 0 ) ) )

[*] target: assertEquals("Individual EDS Login", factory.getDisplayType(), "The Display Type does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( ( ( short ) ( 1 ) ) ), ( ( short ) ( 2 ) ) )

[*] target: assertEquals("Individual EDS Login", factory.getDisplayType(), "The Display Type does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( ( ( short ) ( 0 ) ) ), ( ( short ) ( 10 ) ) )

[*] target: assertEquals("Individual EDS Login", factory.getDisplayType(), "The Display Type does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 1 ), this. getDisplayType(). getDisplayType() )

[*] target: assertEquals("Individual EDS Login", factory.getDisplayType(), "The Display Type does not match the expected.")
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 2 ), command. getDisplayType() )

************************************
************************************
[+] input: testGetHelpText() { "<AssertPlaceHolder>"; }
getHelpText() { return "Individual EDS Login"; }
[*] target: assertEquals("Individual EDS Login", factory.getHelpText(), "The Help Text does not match the expected.")
[-] pred:  org. junit. Assert. assertTrue ( ( ( dummy. getHelpText() ) == 0 ) )

[*] target: assertEquals("Individual EDS Login", factory.getHelpText(), "The Help Text does not match the expected.")
[-] pred:  org. junit. Assert. assertTrue ( ( ( out. getHelpText() ) == 0 ) )

[*] target: assertEquals("Individual EDS Login", factory.getHelpText(), "The Help Text does not match the expected.")
[-] pred:  org. junit. Assert. assertTrue ( ( ( getHelpText() ) == 0 ) )

[*] target: assertEquals("Individual EDS Login", factory.getHelpText(), "The Help Text does not match the expected.")
[-] pred:  org. junit. Assert. assertTrue ( ( ( instance. getHelpText() ) == 0 ) )

[*] target: assertEquals("Individual EDS Login", factory.getHelpText(), "The Help Text does not match the expected.")
[-] pred:  TYPE_1. getHelpText()

************************************
************************************
[+] input: testIsIndividual() { IndividualEdsLoginAuthenticator authenticator = new IndividualEdsLoginAuthenticator(); "<AssertPlaceHolder>"; }
isIndividual() { return true; }
[*] target: assertThat(authenticator.isIndividual()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() )

[*] target: assertThat(authenticator.isIndividual()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() ) )

[*] target: assertThat(authenticator.isIndividual()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() { } )

[*] target: assertThat(authenticator.isIndividual()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual() { true )

[*] target: assertThat(authenticator.isIndividual()).isTrue()
[-] pred:  org. junit. Assert. assertTrue ( authenticator. isIndividual()

************************************
************************************
[+] input: testVerifyWhenTaxCodeIsNull() { // Creating a mocked user model UserModel currentUser = Mockito.mock(UserModel.class);  // Creating certificate metadata with null tax code CertificateMetadata edsMetadata = new CertificateMetadata().withTaxCode(null);  // Test "verify" method boolean isValid = IndividualUserVerifierImpl.verify(currentUser, edsMetadata);  "<AssertPlaceHolder>"; }
verify(UserModel currentUser, CertificateMetadata edsMetadata) { logger.info("Trying to match via username and taxcode."); Map<String, List<String>> attrs = currentUser.getAttributes(); String taxCode = edsMetadata.getTaxCode(); if (null == taxCode) { logger.warn("Input taxCode {} is null", taxCode); return false; } if (attrs != null && !attrs.isEmpty()) { List<String> taxCodeValues = attrs.get(KeycloakAttributes.TAX_CODE); logger.info("Trying to match taxCode {} in values {}", taxCode, taxCodeValues); boolean isValidTaxCode = null == taxCodeValues ? false : taxCodeValues.contains(taxCode); if (isValidTaxCode) { return true; } logger.info("Not matched by this verifier."); } return false; }
[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is null")
[-] pred:  org. junit. Assert. assertTrue ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is null")
[-] pred:  org. junit. Assert. assertTrue ( isValid && ( verify ) )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is null")
[-] pred:  org. junit. Assert. assertFalse ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is null")
[-] pred:  org

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is null")
[-] pred:  )

************************************
************************************
[+] input: testVerifyWhenAttributesAreEmpty() { // Creating a mocked user model UserModel currentUser = Mockito.mock(UserModel.class);  // Creating certificate metadata CertificateMetadata edsMetadata = new CertificateMetadata().withTaxCode("123456789");  when(currentUser.getAttributes()).thenReturn(new HashMap<>());  // Test "verify" method boolean isValid = IndividualUserVerifierImpl.verify(currentUser, edsMetadata);  "<AssertPlaceHolder>"; }
verify(UserModel currentUser, CertificateMetadata edsMetadata) { logger.info("Trying to match via username and taxcode."); Map<String, List<String>> attrs = currentUser.getAttributes(); String taxCode = edsMetadata.getTaxCode(); if (null == taxCode) { logger.warn("Input taxCode {} is null", taxCode); return false; } if (attrs != null && !attrs.isEmpty()) { List<String> taxCodeValues = attrs.get(KeycloakAttributes.TAX_CODE); logger.info("Trying to match taxCode {} in values {}", taxCode, taxCodeValues); boolean isValidTaxCode = null == taxCodeValues ? false : taxCodeValues.contains(taxCode); if (isValidTaxCode) { return true; } logger.info("Not matched by this verifier."); } return false; }
[*] target: assertEquals(false, isValid, "Expected verification to be false when user attributes are empty")
[-] pred:  org. junit. Assert. assertTrue ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when user attributes are empty")
[-] pred:  org. junit. Assert. assertFalse ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when user attributes are empty")
[-] pred:  org. junit. Assert. whether ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when user attributes are empty")
[-] pred:  org

[*] target: assertEquals(false, isValid, "Expected verification to be false when user attributes are empty")
[-] pred:  )

************************************
************************************
[+] input: testVerifyWhenTaxCodeIsNotInAttributes() { // Creating a mocked user model UserModel currentUser = Mockito.mock(UserModel.class);  // Creating certificate metadata CertificateMetadata edsMetadata = new CertificateMetadata().withTaxCode("123456789");  Map<String, List<String>> attributes = new HashMap<>(); attributes.put(KeycloakAttributes.TAX_CODE, Arrays.asList("987654321"));  when(currentUser.getAttributes()).thenReturn(attributes);  // Test "verify" method boolean isValid = IndividualUserVerifierImpl.verify(currentUser, edsMetadata);  "<AssertPlaceHolder>"; }
verify(UserModel currentUser, CertificateMetadata edsMetadata) { logger.info("Trying to match via username and taxcode."); Map<String, List<String>> attrs = currentUser.getAttributes(); String taxCode = edsMetadata.getTaxCode(); if (null == taxCode) { logger.warn("Input taxCode {} is null", taxCode); return false; } if (attrs != null && !attrs.isEmpty()) { List<String> taxCodeValues = attrs.get(KeycloakAttributes.TAX_CODE); logger.info("Trying to match taxCode {} in values {}", taxCode, taxCodeValues); boolean isValidTaxCode = null == taxCodeValues ? false : taxCodeValues.contains(taxCode); if (isValidTaxCode) { return true; } logger.info("Not matched by this verifier."); } return false; }
[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is not in user attributes")
[-] pred:  org. junit. Assert. assertTrue ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is not in user attributes")
[-] pred:  org. junit. Assert. verify ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is not in user attributes")
[-] pred:  org. junit. Assert. if ( isValid )

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is not in user attributes")
[-] pred:  org

[*] target: assertEquals(false, isValid, "Expected verification to be false when tax code is not in user attributes")
[-] pred:  )

************************************
************************************
[+] input: testVerifyWhenTaxCodeIsValid() { // Creating a mocked user model UserModel currentUser = Mockito.mock(UserModel.class);  // Creating certificate metadata CertificateMetadata edsMetadata = new CertificateMetadata().withTaxCode("123456789");  Map<String, List<String>> attributes = new HashMap<>(); attributes.put(KeycloakAttributes.TAX_CODE, Arrays.asList("123456789"));  when(currentUser.getAttributes()).thenReturn(attributes);  // Test "verify" method boolean isValid = IndividualUserVerifierImpl.verify(currentUser, edsMetadata);  "<AssertPlaceHolder>"; }
verify(UserModel currentUser, CertificateMetadata edsMetadata) { logger.info("Trying to match via username and taxcode."); Map<String, List<String>> attrs = currentUser.getAttributes(); String taxCode = edsMetadata.getTaxCode(); if (null == taxCode) { logger.warn("Input taxCode {} is null", taxCode); return false; } if (attrs != null && !attrs.isEmpty()) { List<String> taxCodeValues = attrs.get(KeycloakAttributes.TAX_CODE); logger.info("Trying to match taxCode {} in values {}", taxCode, taxCodeValues); boolean isValidTaxCode = null == taxCodeValues ? false : taxCodeValues.contains(taxCode); if (isValidTaxCode) { return true; } logger.info("Not matched by this verifier."); } return false; }
[*] target: assertEquals(true, isValid, "Expected verification to be true when tax code is valid")
[-] pred:  org. junit. Assert. assertTrue ( isValid )

[*] target: assertEquals(true, isValid, "Expected verification to be true when tax code is valid")
[-] pred:  org. junit. Assert. assertTrue ( isValid, (! isValid ) )

[*] target: assertEquals(true, isValid, "Expected verification to be true when tax code is valid")
[-] pred:  org. junit. Assert. assertTrue ( isValid && ( isValid ) )

[*] target: assertEquals(true, isValid, "Expected verification to be true when tax code is valid")
[-] pred:  org. junit. Assert. assertTrue ( isValid && (! isValid ) )

[*] target: assertEquals(true, isValid, "Expected verification to be true when tax code is valid")
[-] pred:  org

************************************
************************************
[+] input: LibCertificateException { try (MockedStatic<DateUtils> dateUtilsMock = Mockito.mockStatic(DateUtils.class)) { String certificateValue = "<?xml version="1.0" encoding="UTF-8" standalone="no"?><login><timeTicket>1714813040235</timeTicket><sessionid>1e118c1b-a8a8-47d0-8c16-d1a61fcc282e</sessionid><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">\n" + "<ds:SignedInfo>\n" + "<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>\n" + "<ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/>\n" + "<ds:Reference URI="">\n" + "<ds:Transforms>\n" + "<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>\n" + "<ds:Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"/>\n" + "</ds:Transforms>\n" + "<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>\n" + "<ds:DigestValue>XZi1+7/71b1kG/TKcBIIwM57VYuOMXA+lDqAXxrW68s=</ds:DigestValue>\n" + "</ds:Reference>\n" + "</ds:SignedInfo>\n" + "<ds:SignatureValue>\n" + "jA7Oxr0cMA6jEyErXXUc42iS7q8e9fQVUBLb7ved2YkaSCxnS/W2ucXFcaHz4l93Udhww3vJ9XDy\n" + "KcLuAMeBW9CS8WCKjakFZtaWjaSmJl5lU/OEo9yEAyfN9ZyCkakpMQ7O1cMLQqcng1dZyFuSGx/I\n" + "j/SPDg8q3hj99Ry/1qoeFhJRnykfYV6hQZGkwOSHpj3QnXKvFUq760U2NMP8ZtrGvwyrD3w6akZ9\n" + "DSqcURcEZGUasdDKgycBzOunBPrm3HYH4PFiRirIoFXspKUeAg2b4XLwycgsNOxs1O9o0Roh65td\n" + "yfAaikjcxrkLuVmpp0n76fV6TvdmWGehYGX9lA==\n" + "</ds:SignatureValue>\n" + "<ds:KeyInfo>\n" + "<ds:X509Data>\n" + "<ds:X509Certificate>\n" + "MIIGEzCCA/ugAwIBAgIUHRc/YSRcGg/FfNz+aWAyqR49zw0wDQYJKoZIhvcNAQELBQAwLTELMAkG\n" + "A1UEBhMCS1oxHjAcBgNVBAMMFdKw0JrQniAzLjAgKFJTQSBURVNUKTAeFw0yMjExMTcxMTI0MjFa\n" + "Fw0yMzExMTcxMTI0MjFaMHkxHjAcBgNVBAMMFdCi0JXQodCi0J7QkiDQotCV0KHQojEVMBMGA1UE\n" + "BAwM0KLQldCh0KLQntCSMRgwFgYDVQQFEw9JSU4xMjM0NTY3ODkwMTExCzAJBgNVBAYTAktaMRkw\n" + "FwYDVQQqDBDQotCV0KHQotCe0JLQmNCnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\n" + "mC6NLbWcRlVSq+mdTvUVhRnC1bTSmgc6YQ9pMCkM4/jTSDL3OqFtYu0QmbyR8/gnWgTl9lRL2xyx\n" + "renYn7slSPXIzMOzqiDzG4bTD43kTl04NtRDs3mZH320vB4m0uvR809bog+QOCYswsqKq/oAdnWs\n" + "bbUsnlKt3WfwEiAZgptqLZIw/B/3jxx3to2XxtHh+PpPNRvvaS0HmUwuBNLIkIOX5McmMG4FgprD\n" + "QGluHuQV3WE3do0kbWylUtmBg1yk+qGqzlEiQCKtpfMRyfG+foOyODwrHxfkQZHVZf25qaC4dpSL\n" + "V4pRP0p9SxV9jx/KKlI59oYgLePzfC8J0rFMhwIDAQABo4IB3TCCAdkwPAYDVR0fBDUwMzAxoC+g\n" + "LYYraHR0cDovL3Rlc3QucGtpLmdvdi5rei9jcmwvbmNhX3JzYV90ZXN0LmNybDA+BgNVHS4ENzA1\n" + "MDOgMaAvhi1odHRwOi8vdGVzdC5wa2kuZ292Lmt6L2NybC9uY2FfZF9yc2FfdGVzdC5jcmwwcgYI\n" + "KwYBBQUHAQEEZjBkMDgGCCsGAQUFBzAChixodHRwOi8vdGVzdC5wa2kuZ292Lmt6L2NlcnQvbmNh\n" + "X3JzYV90ZXN0LmNlcjAoBggrBgEFBQcwAYYcaHR0cDovL3Rlc3QucGtpLmdvdi5rei9vY3NwLzAO\n" + "BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCqDDgMDBAEBMF4GA1UdIARXMFUw\n" + "UwYHKoMOAwMCBDBIMCEGCCsGAQUFBwIBFhVodHRwOi8vcGtpLmdvdi5rei9jcHMwIwYIKwYBBQUH\n" + "AgIwFwwVaHR0cDovL3BraS5nb3Yua3ovY3BzMB0GA1UdDgQWBBQNFz9hJFwaD8V83P5pYDKpHj3P\n" + "DTAfBgNVHSMEGDAWgBSmjBYzfLjoNWcGPl5BV1WirzRQaDAWBgYqgw4DAwUEDDAKBggqgw4DAwUB\n" + "ATANBgkqhkiG9w0BAQsFAAOCAgEA04XM2heTWDrAwiJMysiKxUd6JTnBGdEK1wXi8H3XRfTXW3Tk\n" + "Kj9phbpdU3NJ1goic8rd5nsrPqcWFRD38ptdYRgzRYB2VPPFfEhNlwUmFpeif8qWbN25HClFIrzx\n" + "uDn4Y0AslqD/XeTnpUg4tCM0tYgRttir9CYXg3ofj2YsGlfp4zGgT3SZHLhfds/l+UYgNb8B5Jjp\n" + "akiErwDWoX5JivCN48rQt3hjg9uXruveNQOBSlvBUuffeyDRYIV/lsRVpA7Gjju+oapLsHtlbpSa\n" + "Mm72SinBXzS42NpcPviAUjEq1YYySufA25jhWxFuwm+CMHV92sF+rsFFamJpyghfcNZVCSx7t8as\n" + "p7KqEtpPq6NfzPyjMvi14MVzuHnUrhOO9oRwdDGqQcdvPeM+lMJd4JU7FItEUrD0I0FYuJAuUATt\n" + "iLlYOYbl7aDVGvFSoHEkn0RYt1qlzR88X5bwuvMiQgZSFo0H2PT5Wyjw82gF1ffRWRW+/S2mI1Ov\n" + "q9Zu8xD7+/CR/zwi6GUPfu+hEJqTKAVsmgQzJq/Tv1OLMrazi27v/W4fdAWQKFpFJ0jld/ErR9pM\n" + "NgGBEUNDiZL00sLqUh1Fk/l/Ov1defG7Y9xWmVS9Uat2zf1RZCnEH2V86gJdXMCrDaPJwVvl03W1\n" + "d9myXSZaHO+L97guwBJ1pGJJU3U=\n" + "</ds:X509Certificate>\n" + "</ds:X509Data>\n" + "</ds:KeyInfo>\n" + "</ds:Signature></login>\n";  Date expireDateDayBefore = Date.from(LocalDate.of(2023, 11, 16).atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()); dateUtilsMock.when(() -> DateUtils.getCurrentDate()).thenReturn(expireDateDayBefore); CertificateMetadata metadata = CertificateParser.parseMetadata(certificateValue, true); "<AssertPlaceHolder>";  // Validate individual fields of the parsed certificate (replace dummy values with actual expected ones) assertEquals("123456789011", metadata.getTaxCode(), "Tax code not matched."); assertEquals("ТЕСТ", metadata.getName(), "Name not matched."); assertEquals("ТЕСТОВ", metadata.getSurname(), "Surname not matched."); assertEquals("ТЕСТОВИЧ", metadata.getPatronymic(), "Patronymic not matched."); assertEquals("", metadata.getEmail(), "Email not matched."); assertEquals("", metadata.getBirtDate(), "Birth date not matched."); assertEquals("KZ", metadata.getCountry(), "Country not matched."); assertEquals("", metadata.getGender(), "Gender not matched."); assertEquals("", metadata.getNotBefore(), "Not before date not matched."); assertEquals("", metadata.getNotAfter(), "Not after date not matched."); assertEquals("CN=ТЕСТОВ ТЕСТ,SURNAME=ТЕСТОВ,SERIALNUMBER=IIN123456789011,C=KZ,G=ТЕСТОВИЧ", metadata.getDn(), "DN not matched."); assertEquals("", metadata.getOrganization(), "Organization not matched."); assertEquals("", metadata.getBin(), "BIN not matched."); } }
parseMetadata(String certificateValue, boolean isIndividual) throws LibCertificateException { SecurityProviderInitializer.initKalkanProvider(); try { DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setFeature(XML_DISALLOW_DOCTYPE_DECL_FEATURE, true); dbf.setFeature(XML_LOAD_EXTERNAL_DTD_FEATURE, false); Element rootEl = getRootElement(dbf, certificateValue); return extractDataFromSignature(rootEl, isIndividual); } catch (LibCertificateException lce) { throw lce; } catch (Exception e) { throw new LibCertificateException("Failed to parse certificate", e); } }
[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( ev. getMessage ( ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( org. apache. commons. lang. StringUtils. valueOf ( certificateValue ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( certificateValue ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( ev. certificateValue )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( e. getMessage ( ) )

************************************
************************************
[+] input: LibCertificateException { try (MockedStatic<DateUtils> dateUtilsMock = Mockito.mockStatic(DateUtils.class)) { String certificateValue = "<?xml version="1.0" encoding="UTF-8" standalone="no"?><login><timeTicket>1714814361503</timeTicket><sessionid>86ed9a1d-c753-444b-a5a0-d0370ef32a5a</sessionid><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">\n" + "<ds:SignedInfo>\n" + "<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>\n" + "<ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/>\n" + "<ds:Reference URI="">\n" + "<ds:Transforms>\n" + "<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>\n" + "<ds:Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"/>\n" + "</ds:Transforms>\n" + "<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>\n" + "<ds:DigestValue>/Bg+fR7MjDLjd6cSq+PC/d5tKBlN5OJwXwBgv3FOCQU=</ds:DigestValue>\n" + "</ds:Reference>\n" + "</ds:SignedInfo>\n" + "<ds:SignatureValue>\n" + "fJnVStCdI3iYWxy4mQaVt+xcy67FUjRl4V9N1wlge6q67CR11Q1UaCpvaAN/Fgb8GvTmeGJXCScJ\n" + "s/t8suCep08AGwxDNOJbBuZzBPGS/Cm3gBG8j8QiXFzzsBj+sxGHUA1kZAXG4KTJ492+X+5fsfKZ\n" + "rjZCm9TJim7NBj+ts08v0GvZOywbs5/N49EKG8QgnKv2gOh8bnMc1Mlfe9e9r479FHiEcdoJVs3S\n" + "RwzemzFqxp6lSkXT7UDgBamDvarYHJAmFvBG9lpSEE5fLYHePVFM4WPyV7MjUYVTqsKRuAmzp9f0\n" + "eeyCk2RzvrDBLzlFb/kXAW4vMdW8PCL5WZ40hg==\n" + "</ds:SignatureValue>\n" + "<ds:KeyInfo>\n" + "<ds:X509Data>\n" + "<ds:X509Certificate>\n" + "MIIGVDCCBDygAwIBAgIUfxaIMGG09/JaVUyUY1vNFc0gg38wDQYJKoZIhvcNAQELBQAwLTELMAkG\n" + "A1UEBhMCS1oxHjAcBgNVBAMMFdKw0JrQniAzLjAgKFJTQSBURVNUKTAeFw0yMzAyMDExMDQ0Mjha\n" + "Fw0yNDAyMDExMDQ0MjhaMIGtMR4wHAYDVQQDDBXQotCV0KHQotCe0JIg0KLQldCh0KIxFTATBgNV\n" + "BAQMDNCi0JXQodCi0J7QkjEYMBYGA1UEBRMPSUlOMTIzNDU2Nzg5MDExMQswCQYDVQQGEwJLWjEY\n" + "MBYGA1UECgwP0JDQniAi0KLQldCh0KIiMRgwFgYDVQQLDA9CSU4xMjM0NTY3ODkwMjExGTAXBgNV\n" + "BCoMENCi0JXQodCi0J7QktCY0KcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsrfZW\n" + "m/1c6mvwrn8xxeU6GqKLUfVcxO5p330lSPT3iCkQgXK93DAPnB2FEhQHWIOo8w7exGpvxzXUNQfL\n" + "oWod/8o0Gcx+WhogZ8jSUwnkftDUD/LkgJkw6fp5r/ZNFTbZmpEakIWJiHmRgN26STvZAHFRsad6\n" + "LfrzlpKjlE+v8Lw1gCZRbQ+yh2hG+1l33AzZDM1tV+rzeX9AL5gzelt6oLWLvZgSofol8CoPYy02\n" + "9eEmY6vCqd1SJ3608Hqa0jwxUNd5oCPWEUwtphncawI5Y5Tvy1NTOCTOd/N4BJpALV0w1HFU7sec\n" + "daFbSl6Ho/c7ZKVYlHalUdxaENi0/nlFAgMBAAGjggHpMIIB5TAOBgNVHQ8BAf8EBAMCBaAwKAYD\n" + "VR0lBCEwHwYIKwYBBQUHAwIGCCqDDgMDBAECBgkqgw4DAwQBAgEwXgYDVR0gBFcwVTBTBgcqgw4D\n" + "AwICMEgwIQYIKwYBBQUHAgEWFWh0dHA6Ly9wa2kuZ292Lmt6L2NwczAjBggrBgEFBQcCAjAXDBVo\n" + "dHRwOi8vcGtpLmdvdi5rei9jcHMwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL3Rlc3QucGtpLmdv\n" + "di5rei9jcmwvbmNhX3JzYV90ZXN0LmNybDA+BgNVHS4ENzA1MDOgMaAvhi1odHRwOi8vdGVzdC5w\n" + "a2kuZ292Lmt6L2NybC9uY2FfZF9yc2FfdGVzdC5jcmwwcwYIKwYBBQUHAQEEZzBlMDkGCCsGAQUF\n" + "BzAChi1odHRwOi8vdGVzdC5wa2kuZ292Lmt6L2NlcnQvbmNhX2dvc3RfdGVzdC5jZXIwKAYIKwYB\n" + "BQUHMAGGHGh0dHA6Ly90ZXN0LnBraS5nb3Yua3ovb2NzcC8wHQYDVR0OBBYEFH8WiDBhtPfyWlVM\n" + "lGNbzRXNIIN/MB8GA1UdIwQYMBaAFKaMFjN8uOg1ZwY+XkFXVaKvNFBoMBYGBiqDDgMDBQQMMAoG\n" + "CCqDDgMDBQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCSfrHvobShE6ZZVuzf3QL2E6j9+m5vUOVk/eCP\n" + "wkkCPcEANRT9gUHxM1ZAv01lR2lkOwDOPUWoBlmXxtBhqY7Aeg48HA1vfDR4YH1fRLu9EX9n2ctx\n" + "vWN8IOU8ZtELCKumwkwESy8c5URC+N9xtpzdMIm95Q9+hDjG6Fs533/EtdUsq1kE0RjKYQ7AFa31\n" + "tPzrVgW94QPqFhKvq3okDeAoX+mmE4cN+HC0fqWubS+5tedTDRNQuzQmFJOueo1nmWFE1oJWAg4P\n" + "PljM+Kbp8pZPq59IDfkcYuWmUJ+B6VDgN2N09xrZ+zUyvhdm/RJ5ky5qKVD6kStpq7SCceBrC1pE\n" + "fgZRrtCSuTRweWWf+i0eJhFnhcUDORBugDkitymPU5Oz3FtGG7+dv6l1zd5Doh7TNNaZe6aWFTKq\n" + "56jUIMamanOJMM2SKTiF8aWcACAlKc3TOKfw0Sx9dO4Df/xnSudxhDMq62f4uxL4juQ0jFwufs+z\n" + "O9KkRf2r6UHPtKfQJCEzLDUdt3zw8XX3P2Yy26sjYDGVnv/Eor0x5hjeH9iyL/JamfqHpYXjXR1R\n" + "VRRzvMNUH2s/3PZsTc/UaHOJYPbr+WHIa/ywKmFq8Yfe07ElvyjrjdAYBn4/24vszTdEn2qAxBHD\n" + "/HWTyQm1aXbVaPbd7ZF/kVt04gDSVE2wz2G/Tg==\n" + "</ds:X509Certificate>\n" + "</ds:X509Data>\n" + "</ds:KeyInfo>\n" + "</ds:Signature></login>";  Date expireDateDayBefore = Date.from(LocalDate.of(2023, 11, 16).atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()); dateUtilsMock.when(() -> DateUtils.getCurrentDate()).thenReturn(expireDateDayBefore); CertificateMetadata metadata = CertificateParser.parseMetadata(certificateValue, false); "<AssertPlaceHolder>";  assertEquals("123456789011", metadata.getTaxCode(), "Tax code not matched."); assertEquals("ТЕСТ", metadata.getName(), "Name not matched."); assertEquals("ТЕСТОВ", metadata.getSurname(), "Surname not matched."); assertEquals("ТЕСТОВИЧ", metadata.getPatronymic(), "Patronymic not matched."); assertEquals("", metadata.getEmail(), "Email not matched."); assertEquals("", metadata.getBirtDate(), "Birth date not matched."); assertEquals("KZ", metadata.getCountry(), "Country not matched."); assertEquals("", metadata.getGender(), "Gender not matched."); assertEquals("", metadata.getNotBefore(), "Not before date not matched."); assertEquals("", metadata.getNotAfter(), "Not after date not matched."); assertEquals("CN=ТЕСТОВ ТЕСТ,SURNAME=ТЕСТОВ,SERIALNUMBER=IIN123456789011,C=KZ,O=АО \\"ТЕСТ\\",OU=BIN123456789021,G=ТЕСТОВИЧ", metadata.getDn(), "DN not matched."); assertEquals("АО "ТЕСТ"", metadata.getOrganization(), "Organization not matched."); assertEquals("123456789021", metadata.getBin(), "BIN not matched."); } }
parseMetadata(String certificateValue, boolean isIndividual) throws LibCertificateException { SecurityProviderInitializer.initKalkanProvider(); try { DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setFeature(XML_DISALLOW_DOCTYPE_DECL_FEATURE, true); dbf.setFeature(XML_LOAD_EXTERNAL_DTD_FEATURE, false); Element rootEl = getRootElement(dbf, certificateValue); return extractDataFromSignature(rootEl, isIndividual); } catch (LibCertificateException lce) { throw lce; } catch (Exception e) { throw new LibCertificateException("Failed to parse certificate", e); } }
[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( modelNode )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( org. apache. commons. lang. StringUtils. valueOf ( certificateValue ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( org. apache. commons. lang. StringUtils. toString ( certificateValue ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) == 2 ) )

[*] target: assertNotNull(metadata, "Failed to parse certificate metadata.")
[-] pred:  org. junit. Assert. assertNotNull ( strategy. getSolverAbsoluteAccuracy ( ) )

************************************
************************************
[+] input: parseDnTest() { // Mock the certificate X509Certificate mockedCert = mock(X509Certificate.class); when(mockedCert.getNotBefore()).thenReturn(Date.from(LocalDate.of(2024, 1, 1).atStartOfDay(ZoneId.systemDefault()).toInstant())); when(mockedCert.getNotAfter()).thenReturn(Date.from(LocalDate.of(2024, 12, 31).atStartOfDay(ZoneId.systemDefault()).toInstant()));  // Test parsing of DN String dn = "CN=John Doe,SURNAME=Doe,C=US,O=Test,L=Test City,S=Test State,OU=1234,G=Doe,SERIALNUMBER=BIN5678"; JSONObject result = EdsUtils.parseDn(dn, mockedCert);  "<AssertPlaceHolder>"; assertEquals("Doe", result.get(ICertificateFieldName.SURNAME)); assertEquals("US", result.get(ICertificateFieldName.COUNTRY)); assertEquals("Test", result.get(ICertificateFieldName.ORGANIZATION)); assertEquals("Test City", result.get(ICertificateFieldName.LOCALITY)); assertEquals("Test State", result.get(ICertificateFieldName.STATE)); assertEquals("1234", result.get(ICertificateFieldName.BIN)); assertEquals("Doe", result.get(ICertificateFieldName.LASTNAME)); assertTrue(result.containsKey(ICertificateFieldName.NOT_BEFORE)); assertTrue(result.containsKey(ICertificateFieldName.NOT_AFTER)); }
parseDn(String dn, X509Certificate cert) { JSONObject subject = new JSONObject(); subject.put(ICertificateFieldName.DN, dn); LdapName ldapName;  try { ldapName = new LdapName(dn); for (Rdn rdn : ldapName.getRdns()) { rdnTypeConsumerMap.getOrDefault(rdn.getType().toUpperCase(), (rdnElement, subjectElement) -> { }).accept(rdn, subject); } } catch (InvalidNameException e) { logger.warn("Error during parsing rdn. Process will be continued.", e); }  subject.put(ICertificateFieldName.NOT_BEFORE, DateUtils.dateTime(cert.getNotBefore())); subject.put(ICertificateFieldName.NOT_AFTER, DateUtils.dateTime(cert.getNotAfter()));  return subject; }
[*] target: assertEquals("John Doe", result.get(ICertificateFieldName.COMMON_NAME))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("John Doe", result.get(ICertificateFieldName.COMMON_NAME))
[-] pred:  org. junit. Assert :: assertNotNull, result )

[*] target: assertEquals("John Doe", result.get(ICertificateFieldName.COMMON_NAME))
[-] pred:  org. junit ). assertNotNull ( result )

[*] target: assertEquals("John Doe", result.get(ICertificateFieldName.COMMON_NAME))
[-] pred:  org. junit, result )

[*] target: assertEquals("John Doe", result.get(ICertificateFieldName.COMMON_NAME))
[-] pred:  org

************************************
************************************
[+] input: CertificateVerifierException { // Arrange RandomCommonCertificateVerifier randomCommonCertificateVerifier = new RandomCommonCertificateVerifier();  // Act boolean verificationResult = randomCommonCertificateVerifier.verifyCertificateRevocation("1001");  // Assert Assertions."<AssertPlaceHolder>"; // As random can return either less or greater than 0.5, the method could return either true or false. }
verifyCertificateRevocation(String certificateSerialNumber) throws CertificateVerifierException { logger.info("It's about verify via random mechanism."); if (certificateSerialNumber == null) { throw new CertificateVerifierException("Certificate serial number is null"); } return Math.random() < 0.5; }
[*] target: assertTrue(verificationResult || !verificationResult)
[-] pred:  org. junit. Assert. assertTrue ( verificationResult )

[*] target: assertTrue(verificationResult || !verificationResult)
[-] pred:  org. junit. Assert. assertFalse ( verificationResult )

[*] target: assertTrue(verificationResult || !verificationResult)
[-] pred:  org. junit. Assert. assertNotNull ( verificationResult )

[*] target: assertTrue(verificationResult || !verificationResult)
[-] pred:  org. junit. Assert. true, verificationResult )

[*] target: assertTrue(verificationResult || !verificationResult)
[-] pred:  )

************************************
************************************
[+] input: Exception { Field singleton = CertificateVerifierHolder.class.getDeclaredField("individualVerifier"); singleton.setAccessible(true); singleton.set(null, null); CommonCertificateVerifier verifier = CertificateVerifierHolder.getVerifier(true); "<AssertPlaceHolder>"; }
getVerifier(boolean isIndividual) { if (isIndividual) { if (individualVerifier == null) { individualVerifier = loadClass(System.getProperty("INDIVIDUAL_CERT_VERIFIER_CLASS_NAME")); } return individualVerifier; } else { if (corporateVerifier == null) { corporateVerifier = loadClass(System.getProperty("CORPORATE_CERT_VERIFIER_CLASS_NAME")); } return corporateVerifier; } }
[*] target: assertThat(verifier).isInstanceOf(NullCommonCertificateVerifier.class)
[-] pred:  org. junit. Assert. assertEquals ( singleton. getVerifier(boolean isIndividual), verifier. getVerifier(boolean isIndividual) )

[*] target: assertThat(verifier).isInstanceOf(NullCommonCertificateVerifier.class)
[-] pred:  org. junit. Assert. assertEquals ( singleton, verifier. getVerifier(boolean isIndividual) )

[*] target: assertThat(verifier).isInstanceOf(NullCommonCertificateVerifier.class)
[-] pred:  org. junit. Assert. assertEquals ( singleton. getVerifier(boolean isIndividual) ( singleton. getVerifier(boolean isIndividual) )

[*] target: assertThat(verifier).isInstanceOf(NullCommonCertificateVerifier.class)
[-] pred:  org. junit. Assert. assertEquals ( singleton. getVerifier(boolean isIndividual) )

[*] target: assertThat(verifier).isInstanceOf(NullCommonCertificateVerifier.class)
[-] pred:  org

************************************
************************************
[+] input: Exception { Field singleton = CertificateVerifierHolder.class.getDeclaredField("individualVerifier"); singleton.setAccessible(true); singleton.set(null, null);  String verifierClassName = CustomIndividualCertificateVerifier.class.getName(); System.setProperty("INDIVIDUAL_CERT_VERIFIER_CLASS_NAME", verifierClassName);  CommonCertificateVerifier verifier = CertificateVerifierHolder.getVerifier(true); CommonCertificateVerifier anotherVerifier = CertificateVerifierHolder.getVerifier(true);  "<AssertPlaceHolder>"; assertThat(verifier).isInstanceOf(CustomIndividualCertificateVerifier.class); assertThat(anotherVerifier).isInstanceOf(CustomIndividualCertificateVerifier.class); }
getVerifier(boolean isIndividual) { if (isIndividual) { if (individualVerifier == null) { individualVerifier = loadClass(System.getProperty("INDIVIDUAL_CERT_VERIFIER_CLASS_NAME")); } return individualVerifier; } else { if (corporateVerifier == null) { corporateVerifier = loadClass(System.getProperty("CORPORATE_CERT_VERIFIER_CLASS_NAME")); } return corporateVerifier; } }
[*] target: assertThat(verifier).isEqualTo(anotherVerifier)
[-] pred:  org. junit. Assert. assertEquals ( verifier, anotherVerifier )

[*] target: assertThat(verifier).isEqualTo(anotherVerifier)
[-] pred:  org. junit. Assert. assertEquals ( verifier, anotherVerifier. getVerifier ( ) )

[*] target: assertThat(verifier).isEqualTo(anotherVerifier)
[-] pred:  org. junit. Assert. assertNotNull ( verifierVerifier )

[*] target: assertThat(verifier).isEqualTo(anotherVerifier)
[-] pred:  org

[*] target: assertThat(verifier).isEqualTo(anotherVerifier)
[-] pred:  )

************************************
************************************
[+] input: valueOfAlwaysPointsOnTheCurrentObject() { var graph = ReferenceGraph.graph();  var value1 = graph.graph.valueOf(graph.node1()); var currentObject = graph.object1(); "<AssertPlaceHolder>";  graph.refresh(graph.node1()); currentObject = graph.object1(); assertThat(value1.get()).isSameAs(currentObject);  graph.refresh(graph.node1()); currentObject = graph.object1(); assertThat(value1.get()).isSameAs(currentObject);  graph.refresh(graph.node1()); currentObject = graph.object1(); assertThat(value1.get()).isSameAs(currentObject); }
valueOf(Node<? extends T> node);  <T> PromiseOf<T> promiseOf(Node<T> node);  interface Factory<T> { T get(Graph graph) throws Exception; }
[*] target: assertThat(value1.get()).isSameAs(currentObject)
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(GraphGraph ), org. hamcrest. CoreMatchers. is ( currentObject ) )

[*] target: assertThat(value1.get()).isSameAs(currentObject)
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Graph2()); currentObject ), org. hamcrest. CoreMatchers. is ( currentObject ) )

[*] target: assertThat(value1.get()).isSameAs(currentObject)
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(GraphGraph2()); currentObject, org. hamcrest. CoreMatchers. is ( currentObject ) )

[*] target: assertThat(value1.get()).isSameAs(currentObject)
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Graph

[*] target: assertThat(value1.get()).isSameAs(currentObject)
[-] pred:  org

************************************
************************************
[+] input: valueOfRefreshLeadsToRefresh() { var graph = ReferenceGraph.graph();  var value1 = graph.graph.valueOf(graph.node1()); var oldObject1 = graph.object1();  value1.refresh();  "<AssertPlaceHolder>"; }
valueOf(Node<? extends T> node);  <T> PromiseOf<T> promiseOf(Node<T> node);  interface Factory<T> { T get(Graph graph) throws Exception; }
[*] target: assertThat(oldObject1).isNotSameAs(graph.object1())
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Node<? extends T>node1());Object1 ), org. hamcrest. CoreMatchers. is ( value1 ) )

[*] target: assertThat(oldObject1).isNotSameAs(graph.object1())
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Node<? extends javax. ws. rs. core. Person1());Object1 ), org. hamcrest. CoreMatchers. is ( oldObject1 ) )

[*] target: assertThat(oldObject1).isNotSameAs(graph.object1())
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Node<? extends T> node);. valueOf(Node<? oldObject1 ), org. hamcrest. CoreMatchers. is ( value1 ) )

[*] target: assertThat(oldObject1).isNotSameAs(graph.object1())
[-] pred:  org. junit. Assert. assertThat ( value1. valueOf(Node<? extends javax

[*] target: assertThat(oldObject1).isNotSameAs(graph.object1())
[-] pred:  org

************************************
************************************
[+] input: graphRefreshCallsRefreshListeners() { var graph = ReferenceGraph.graph();  var object2 = graph.object2(); var beforeRefresh = System.nanoTime();  graph.graph.valueOf(graph.node4()).refresh();  "<AssertPlaceHolder>"; }
valueOf(Node<? extends T> node);  <T> PromiseOf<T> promiseOf(Node<T> node);  interface Factory<T> { T get(Graph graph) throws Exception; }
[*] target: assertThat(object2.refreshTime).isGreaterThan(beforeRefresh)
[-] pred:  org. junit. Assert. assertEquals ( beforeRefresh, object2 )

[*] target: assertThat(object2.refreshTime).isGreaterThan(beforeRefresh)
[-] pred:  org. junit. Assert. assertEquals ( beforeRefresh, obj2 )

[*] target: assertThat(object2.refreshTime).isGreaterThan(beforeRefresh)
[-] pred:  org. junit. Assert. assertEquals ( beforeRefresh, org. springframework. data. redis. connection. Long. valueOf ( object2. getId ( ) ) )

[*] target: assertThat(object2.refreshTime).isGreaterThan(beforeRefresh)
[-] pred:  org. junit. Assert. assertEquals ( beforeRefresh, instance2 )

[*] target: assertThat(object2.refreshTime).isGreaterThan(beforeRefresh)
[-] pred:  org

************************************
************************************
[+] input: testSystemProperties() { Assertions."<AssertPlaceHolder>"; }
systemProperties() { return MapConfigFactory.fromProperties(new SystemPropertiesOrigin("System Properties"), System.getProperties()); }
[*] target: assertNotNull(new CommonConfigModule() {}.systemProperties())
[-] pred:  org. junit. Assert. assertThat ( System. systemProperties(). systemProperties() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(new CommonConfigModule() {}.systemProperties())
[-] pred:  org. junit. Assert. assertThat ( System. systemProperties(). systemProperties() ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(new CommonConfigModule() {}.systemProperties())
[-] pred:  org. junit. Assert. assertThat ( System. systemProperties(). systemProperties() ( ), org. hamcrest. CoreMatchers. is ( System. warning ) )

[*] target: assertNotNull(new CommonConfigModule() {}.systemProperties())
[-] pred:  org. junit. Assert. assertThat ( System. systemProperties(). systemProperties() ( ), org. hamcrest. CoreMatchers. is ( System. props ) )

[*] target: assertNotNull(new CommonConfigModule() {}.systemProperties())
[-] pred:  org. junit. Assert. assertTrue ( ( ( Properties. systemProperties() )!= null ) )

************************************
************************************
[+] input: params) { params.execute("create table test_table(id int, value varchar, primary key (id));\n"); params.execute("insert into test_table(id, value) values (1,'test1');\n");  record Entity(Integer id, String value) {} var qctx = new QueryContext( "SELECT id, value FROM test_table WHERE value = :value allow filtering", "SELECT id, value FROM test_table WHERE value = ? allow filtering" );  withDb(params, db -> { var result = db.query(qctx, stmt -> { var s = stmt.bind("test1"); return db.currentSession().execute(s).map(row -> { var __id = row.isNull("id") ? null : row.getInt("id"); var __value = row.getString("value"); return new Entity(__id, __value); }); }); Assertions."<AssertPlaceHolder>"; }); }
currentSession() { return cqlSession; }
[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, result )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, new Entity(__id, __value )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, var __value )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, var )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, new Entity(__id, __value )

************************************
************************************
[+] input: params) { params.execute("create table test_table(id int, value varchar, primary key (id));\n"); params.execute("insert into test_table(id, value) values (1,'test1');\n");  record Entity(Integer id, String value) {} var qctx = new QueryContext( "SELECT id, value FROM test_table WHERE value = :value allow filtering", "SELECT id, value FROM test_table WHERE value = ? allow filtering" );  withDb(params, db -> { var result = db.query(qctx, stmt -> { var s = stmt.bind("test1"); return db.currentSession().execute(s).map(row -> { var __id = row.isNull("id") ? null : row.getInt("id"); var __value = row.getString("value"); return new Entity(__id, __value); }); });  Assertions."<AssertPlaceHolder>";  }); }
currentSession() { return cqlSession; }
[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, result )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, new Entity(__id, __value )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, var __value )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, var )

[*] target: assertThat(result) .hasSize(1) .first() .isEqualTo(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( qctx, new Entity(__id, __value )

************************************
************************************
[+] input: SQLException { var config = new $JdbcDatabaseConfig_ConfigValueExtractor.JdbcDatabaseConfig_Impl( params.user(), params.password(), params.jdbcUrl(), "testPool", null, Duration.ofMillis(1000L), Duration.ofMillis(1000L), Duration.ofMillis(1000L), Duration.ofMillis(1000L), Duration.ofMillis(1000L), 2, // flyway uses two connections for migration and schema management 0, Duration.ofMillis(1000L), false, new Properties(), new $TelemetryConfig_ConfigValueExtractor.TelemetryConfig_Impl( new $TelemetryConfig_LogConfig_ConfigValueExtractor.LogConfig_Impl(true), new $TelemetryConfig_TracingConfig_ConfigValueExtractor.TracingConfig_Impl(true), new $TelemetryConfig_MetricsConfig_ConfigValueExtractor.MetricsConfig_Impl(null, null) ) ); var dataBase = new JdbcDatabase(config, new DefaultDataBaseTelemetryFactory(null, null, null)); dataBase.init(); try {  var interceptor = new FlywayJdbcDatabaseInterceptor(); Assertions.assertSame(dataBase, interceptor.init(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on init");  dataBase.inTx((Connection connection) -> { var resultSet = connection .createStatement() .executeQuery("SELECT * FROM test_migrated_table WHERE id = 100");  Assertions.assertTrue(resultSet.next(), "test_migrated_table should contain row with id = 100"); Assertions.assertAll( () -> Assertions.assertEquals(100, resultSet.getLong("id"), "id should be equal to 100"), () -> Assertions.assertEquals("foo", resultSet.getString("name"), "name should be equal to 'foo'") ); });  Assertions."<AssertPlaceHolder>"; } finally { dataBase.release(); }  }
release(JdbcDatabase value) { return value; }
[*] target: assertSame(dataBase, interceptor.release(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on release")
[-] pred:  org. junit. Assert. assertTrue ( var. execute ( ) )

[*] target: assertSame(dataBase, interceptor.release(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on release")
[-] pred:  org. junit. Assert. assertTrue ( var. isSuccessful ( ) )

[*] target: assertSame(dataBase, interceptor.release(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on release")
[-] pred:  org. junit. Assert. assertTrue ( context. release(JdbcDatabase value )

[*] target: assertSame(dataBase, interceptor.release(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on release")
[-] pred:  )

[*] target: assertSame(dataBase, interceptor.release(dataBase), "FlywayJdbcDatabaseInterceptor should return same reference on release")
[-] pred:  org

************************************
************************************
[+] input: SQLException { var tableName = PostgresTestContainer.randomName("test_table"); params.execute(""" CREATE TABLE %s(id BIGSERIAL, value VARCHAR); INSERT INTO %s(value) VALUES ('test1'); INSERT INTO %s(value) VALUES ('test2'); """.formatted(tableName, tableName, tableName));  var id = "SELECT * FROM %s WHERE value = :value".formatted(tableName); var sql = "SELECT * FROM %s WHERE value = ?".formatted(tableName); record Entity(long id, String value) {}   withDb(params, db -> { var result = db.withConnection(() -> { var r = new ArrayList<Entity>(); try (var stmt = db.currentConnection().prepareStatement(sql);) { stmt.setString(1, "test1"); var rs = stmt.executeQuery(); while (rs.next()) { r.add(new Entity(rs.getInt(1), rs.getString(2))); } } return r; }); Assertions."<AssertPlaceHolder>"; }); }
currentConnection() { var ctx = Context.current(); return ctx.get(this.connectionKey); }
[*] target: assertThat(result).containsExactly(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), result )

[*] target: assertThat(result).containsExactly(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), var result )

[*] target: assertThat(result).containsExactly(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), var )

[*] target: assertThat(result).containsExactly(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( new ArrayList ( ), result )

[*] target: assertThat(result).containsExactly(new Entity(1, "test1"))
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), var. )

************************************
************************************
[+] input: SQLException { var tableName = "test_table_" + PostgresTestContainer.randomName("test_table"); params.execute("CREATE TABLE %s(id BIGSERIAL, value VARCHAR);".formatted(tableName)); var id = "INSERT INTO %s(value) VALUES ('test1');".formatted(tableName); var sql = "INSERT INTO %s(value) VALUES ('test1');".formatted(tableName); PostgresParams.ResultSetMapper<List<String>, RuntimeException> extractor = rs -> { var result = new ArrayList<String>(); try { while (rs.next()) { result.add(rs.getString(1)); } } catch (SQLException sqlException) { throw new RuntimeException(sqlException); } return result; };  withDb(params, db -> { Assertions."<AssertPlaceHolder>"; } throw new RuntimeException(); }));   var values = params.query("SELECT value FROM %s".formatted(tableName), extractor); Assertions.assertThat(values).hasSize(0);  db.inTx(() -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute(); } });  values = params.query("SELECT value FROM %s".formatted(tableName), extractor); Assertions.assertThat(values).hasSize(1); }); }
currentConnection() { var ctx = Context.current(); return ctx.get(this.connectionKey); }
[*] target: assertThatThrownBy(() -> db.inTx((JdbcHelper.SqlRunnable) () -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute()
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), result )

[*] target: assertThatThrownBy(() -> db.inTx((JdbcHelper.SqlRunnable) () -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute()
[-] pred:  org. junit. Assert. assertNotNull ( db. currentConnection() ( var tableName ) )

[*] target: assertThatThrownBy(() -> db.inTx((JdbcHelper.SqlRunnable) () -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute()
[-] pred:  org. junit. Assert. assertNull ( db. currentConnection() ( var tableName ) )

[*] target: assertThatThrownBy(() -> db.inTx((JdbcHelper.SqlRunnable) () -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute()
[-] pred:  org. junit. Assert. assertEquals ( var, result )

[*] target: assertThatThrownBy(() -> db.inTx((JdbcHelper.SqlRunnable) () -> { try (var stmt = db.currentConnection().prepareStatement(sql)) { stmt.execute()
[-] pred:  org

************************************
************************************
[+] input: testReload() { var ref = new AtomicReference<BindableService>(); ref.set(new EventService("test1")); var bindableService = new DynamicBindableService(new ValueOf<BindableService>() { @Override public BindableService get() { return ref.get(); }  @Override public void refresh() {  } });  var service = bindableService.bindService(); var request = SendEventRequest.getDefaultInstance(); assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test1");  ref.set(new EventService("test2")); bindableService.graphRefreshed(); "<AssertPlaceHolder>"; }
graphRefreshed() { service.get().bindService().getMethods().forEach(this::replaceMethod); }
[*] target: assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test2")
[-] pred:  org. junit. Assert. assertThat ( request, org. hamcrest. CoreMatchers. is ( ref ) )

[*] target: assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test2")
[-] pred:  org. junit. Assert. assertThat ( sample, org. hamcrest. CoreMatchers. is ( request ) )

[*] target: assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test2")
[-] pred:  org. junit. Assert. assertThat ( request, org. hamcrest. CoreMatchers. equalTo ( ref ) )

[*] target: assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test2")
[-] pred:  org. junit. Assert. assertNotNull ( request )

[*] target: assertThat(this.<SendEventRequest, SendEventResponse>call(service, "Events/sendEvent", request).getRes()).isEqualTo("test2")
[-] pred:  org

************************************
************************************
[+] input: testGenericResponseMapper() { compileClient(List.of(newGeneratedObject("TestMapper")), """ @HttpClient public interface TestClient { @ResponseCodeMapper(code = 201, mapper = TestMapper.class) @ResponseCodeMapper(code = 404, mapper = NullMapper.class) @HttpRoute(method = "GET", path = "/test") String test(); } """, """ public class TestMapper implements HttpClientResponseMapper<String> { public String apply(HttpClientResponse rs) { return "test-string-from-mapper"; } } """, """ public final class NullMapper <T> implements HttpClientResponseMapper<T> { public T apply(HttpClientResponse rs) { return null; } } """);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(201)); "<AssertPlaceHolder>";  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(404)); assertThat(client.<String>invoke("test")) .isNull();  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(200)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(500)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class); }
apply(HttpClientResponse response) { return null; }
[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertEquals ( 0, 1 )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertEquals ( 0, 0 )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org

************************************
************************************
[+] input: testCodeMappersByType() { compileClient(List.of(newGeneratedObject("Mappers$Rs1Mapper"), newGeneratedObject("Mappers$Rs2Mapper")), """ @HttpClient public interface TestClient { sealed interface TestResponse { record Rs1() implements TestResponse {} record Rs2() implements TestResponse {} }  @ResponseCodeMapper(code = 201, type = TestResponse.Rs1.class) @ResponseCodeMapper(code = 404, type = TestResponse.Rs2.class) @HttpRoute(method = "GET", path = "/test") TestResponse test(); } """, """ public class Mappers { public static class Rs1Mapper implements HttpClientResponseMapper<TestClient.TestResponse.Rs1> { @Override public TestClient.TestResponse.Rs1 apply(HttpClientResponse response) { return new TestClient.TestResponse.Rs1(); } } public static class Rs2Mapper implements HttpClientResponseMapper<TestClient.TestResponse.Rs2> { @Override public TestClient.TestResponse.Rs2 apply(HttpClientResponse response) { return new TestClient.TestResponse.Rs2(); } } } """);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(201)); "<AssertPlaceHolder>";  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(404)); assertThat(client.<Object>invoke("test")) .hasToString("Rs2[]");  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(200)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class); }
apply(HttpClientResponse response) { return null; }
[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. size ( ) )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. count ( ) )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. count )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. getResponseCode ( ) )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit )

************************************
************************************
[+] input: testCodeMappersByTypeWithTag() { compileClient(List.of(newGeneratedObject("Mappers$Rs1Mapper"), newGeneratedObject("Mappers$Rs2Mapper")), """ @HttpClient public interface TestClient { sealed interface TestResponse { record Rs1() implements TestResponse {} record Rs2() implements TestResponse {} }  @Tag(TestResponse.class) @ResponseCodeMapper(code = 201, type = TestResponse.Rs1.class) @ResponseCodeMapper(code = 404, type = TestResponse.Rs2.class) @HttpRoute(method = "GET", path = "/test") TestResponse test(); } """, """ public class Mappers { public static class Rs1Mapper implements HttpClientResponseMapper<TestClient.TestResponse.Rs1> { @Override public TestClient.TestResponse.Rs1 apply(HttpClientResponse response) { return new TestClient.TestResponse.Rs1(); } } public static class Rs2Mapper implements HttpClientResponseMapper<TestClient.TestResponse.Rs2> { @Override public TestClient.TestResponse.Rs2 apply(HttpClientResponse response) { return new TestClient.TestResponse.Rs2(); } } } """);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(201)); "<AssertPlaceHolder>";  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(404)); assertThat(client.<Object>invoke("test")) .hasToString("Rs2[]");  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(200)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class); }
apply(HttpClientResponse response) { return null; }
[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. size ( ) )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. count ( ) )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit. Assert. assertEquals ( 0, rs. count )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org. junit )

[*] target: assertThat(client.<Object>invoke("test")) .hasToString("Rs1[]")
[-] pred:  org

************************************
************************************
[+] input: testExceptionType() { compileClient(List.of(newGeneratedObject("TestMapper"), newGeneratedObject("ExceptionMapper")), """ import java.util.concurrent.CompletionStage; @HttpClient public interface TestClient { @ResponseCodeMapper(code = 201, mapper = TestMapper.class) @ResponseCodeMapper(code = 404, type = RuntimeException.class) @HttpRoute(method = "GET", path = "/test") String test(); } """, """ public class TestMapper implements HttpClientResponseMapper<String> { public String apply(HttpClientResponse rs) { return "test-string-from-mapper"; } } """, """ public class ExceptionMapper implements HttpClientResponseMapper<RuntimeException> { public RuntimeException apply(HttpClientResponse rs) { return new RuntimeException("test"); } } """);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(201)); "<AssertPlaceHolder>";  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(404)); assertThatThrownBy(() -> client.<String>invoke("test")) .isExactlyInstanceOf(RuntimeException.class) .hasMessage("test");  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(200)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(500)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class); }
apply(HttpClientResponse response) { return null; }
[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertTrue ( ( rs!= null ) )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertNotNull ( rs )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org

************************************
************************************
[+] input: testExceptionMapperType() { compileClient(List.of(newGeneratedObject("TestMapper"), newGeneratedObject("ExceptionMapper")), """ @HttpClient public interface TestClient { @ResponseCodeMapper(code = 201, mapper = TestMapper.class) @ResponseCodeMapper(code = 404, mapper = ExceptionMapper.class) @HttpRoute(method = "GET", path = "/test") String test(); } """, """ public class TestMapper implements HttpClientResponseMapper<String> { public String apply(HttpClientResponse rs) { return "test-string-from-mapper"; } } """, """ public class ExceptionMapper implements HttpClientResponseMapper<RuntimeException> { public RuntimeException apply(HttpClientResponse rs) { return new RuntimeException("test"); } } """);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(201)); "<AssertPlaceHolder>";  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(404)); assertThatThrownBy(() -> client.<String>invoke("test")) .isExactlyInstanceOf(RuntimeException.class) .hasMessage("test");  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(200)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class);  reset(httpClient); onRequest("GET", "http://test-url:8080/test", rs -> rs.withCode(500)); assertThatThrownBy(() -> client.invoke("test")).isInstanceOf(HttpClientResponseException.class); }
apply(HttpClientResponse response) { return null; }
[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertNotNull ( event )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit. Assert. assertNotNull ( rs )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org. junit )

[*] target: assertThat(client.<String>invoke("test")) .isEqualTo("test-string-from-mapper")
[-] pred:  org

************************************
************************************
[+] input: testBuildWithQuery() { var result = HttpClientRequest.post("/foo/{bar}/baz") .templateParam("bar", "rab") .queryParam("qw+e", "a+sd") .queryParam("zxc", "cxz") .build();  "<AssertPlaceHolder>"; }
build() { var resolved = resolveUri(this.fromUri, this.uriTemplate, this.templateParams, this.queryParams);  return new DefaultHttpClientRequest( this.method, resolved.uri, resolved.uriTemplate, this.headers, this.body, this.requestTimeout ); }
[*] target: assertAll( () -> assertEquals("POST", result.method()), () -> assertEquals(URI.create("/foo/rab/baz?qw%2Be=a%2Bsd&zxc=cxz"), result.uri()) )
[-] pred:  org. junit. Assert. assertNotNull ( result. build() ( ) )

[*] target: assertAll( () -> assertEquals("POST", result.method()), () -> assertEquals(URI.create("/foo/rab/baz?qw%2Be=a%2Bsd&zxc=cxz"), result.uri()) )
[-] pred:  org. junit. Assert. assertEquals ( result, var. build() ( ) )

[*] target: assertAll( () -> assertEquals("POST", result.method()), () -> assertEquals(URI.create("/foo/rab/baz?qw%2Be=a%2Bsd&zxc=cxz"), result.uri()) )
[-] pred:  org. junit. Assert. assertEquals ( 1, result. build() ( ) )

[*] target: assertAll( () -> assertEquals("POST", result.method()), () -> assertEquals(URI.create("/foo/rab/baz?qw%2Be=a%2Bsd&zxc=cxz"), result.uri()) )
[-] pred:  org. junit. Assert. assertEquals ( result, variable. build() ( ) )

[*] target: assertAll( () -> assertEquals("POST", result.method()), () -> assertEquals(URI.create("/foo/rab/baz?qw%2Be=a%2Bsd&zxc=cxz"), result.uri()) )
[-] pred:  org. junit. Assert. assertEquals ( 0, result. build() ( ) )

************************************
************************************
[+] input: test() { var string = "val1=2112&val1=3232&val2=test";  var map = FormUrlEncodedServerRequestMapper.read(string);  "<AssertPlaceHolder>"; }
read(String body) { var parts = new HashMap<String, FormUrlEncoded.FormPart>(); for (var s : body.split("&")) { if (s.isBlank()) { continue; } var pair = s.split("="); var name = URLDecoder.decode(pair[0].trim(), StandardCharsets.UTF_8); var part = parts.computeIfAbsent(name, n -> new FormUrlEncoded.FormPart(n, new ArrayList<>())); if (pair.length > 1) { var value = URLDecoder.decode(pair[1].trim(), StandardCharsets.UTF_8); part.values().add(value); } } return parts; }
[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).containsExactly("test"))
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(String string )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).containsExactly("test"))
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(String string ) )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).containsExactly("test"))
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(StringString )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).containsExactly("test"))
[-] pred:  org. junit. Assert. assertSame ( string, map. read(String string )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).containsExactly("test"))
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(StringString ) )

************************************
************************************
[+] input: testNoValue() { var string = "val1=2112&val1=3232&val2";  var map = FormUrlEncodedServerRequestMapper.read(string);  "<AssertPlaceHolder>"; }
read(String body) { var parts = new HashMap<String, FormUrlEncoded.FormPart>(); for (var s : body.split("&")) { if (s.isBlank()) { continue; } var pair = s.split("="); var name = URLDecoder.decode(pair[0].trim(), StandardCharsets.UTF_8); var part = parts.computeIfAbsent(name, n -> new FormUrlEncoded.FormPart(n, new ArrayList<>())); if (pair.length > 1) { var value = URLDecoder.decode(pair[1].trim(), StandardCharsets.UTF_8); part.values().add(value); } } return parts; }
[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(String string )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(String string ) )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).isEmpty())
[-] pred:  org. junit. Assert. assertSame ( string, map. read(String string )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(StringString )

[*] target: assertThat(map) .hasSize(2) .hasEntrySatisfying("val1", v -> assertThat(v.values()).containsExactly("2112", "3232")) .hasEntrySatisfying("val2", v -> assertThat(v.values()).isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( string, map. read(StringString ) )

************************************
************************************
[+] input: IOException { compile(""" @Json public record TestRecord(@JsonField("test_field") String testField){} """);  var o = reader("TestRecord").read(""" {"test_field":"test"}""");  "<AssertPlaceHolder>"; }
read(JsonParser gen) { return null; }
[*] target: assertThat(o).isEqualTo(newObject("TestRecord", "test"))
[-] pred:  org. junit. Assert. assertNotNull ( o )

[*] target: assertThat(o).isEqualTo(newObject("TestRecord", "test"))
[-] pred:  org. junit. Assert. assertNull ( o )

[*] target: assertThat(o).isEqualTo(newObject("TestRecord", "test"))
[-] pred:  org. junit. Assert. assertEquals ( o, testField )

[*] target: assertThat(o).isEqualTo(newObject("TestRecord", "test"))
[-] pred:  org

[*] target: assertThat(o).isEqualTo(newObject("TestRecord", "test"))
[-] pred:  )

************************************
************************************
[+] input: IOException { var rawJson = new RawJson(""" {"key": "value"} """); var writer = new RawJsonWriter(); var baos = new ByteArrayOutputStream(); try (var gen = JsonCommonModule.JSON_FACTORY.createGenerator(baos, JsonEncoding.UTF8)) { writer.write(gen, rawJson); } Assertions."<AssertPlaceHolder>"; }
value() { return value; }
[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertEquals ( 0, baos. value() ( ) )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertNotNull ( baos. value() ( ) )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertNotNull ( baos. value() )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertEquals ( value, baos. value() ( ) )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertEquals ( null, baos. value() ( ) )

************************************
************************************
[+] input: IOException { var rawJson = new RawJson(""" {"key": "value"} """);  var baos = new ByteArrayOutputStream(); try (var gen = JsonCommonModule.JSON_FACTORY.createGenerator(baos, JsonEncoding.UTF8)) { JsonObjectCodec.write(gen, rawJson); } Assertions."<AssertPlaceHolder>"; }
value() { return value; }
[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertNotNull ( baos. value() ( ) )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertNotNull ( baos. value() )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertEquals ( value, baos. value() )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org. junit. Assert. assertNull ( baos. value() )

[*] target: assertThat(rawJson.value()).isEqualTo(baos.toByteArray())
[-] pred:  org

************************************
************************************
[+] input: testGraphInterceptor() { var draw = compile(""" import ru.tinkoff.kora.application.graph.GraphInterceptor; import reactor.core.publisher.Mono;  @KoraApp public interface ExampleApplication { class TestRoot {} class TestClass {} class TestInterceptor implements GraphInterceptor<TestClass> { public TestClass init(TestClass value) { return value; }  public TestClass release(TestClass value) { return value; } }  @Root default TestRoot root(TestClass testClass) { return new TestRoot(); }  default TestInterceptor interceptor() { return new TestInterceptor(); }  default TestClass testClass() { return new TestClass(); } } """); "<AssertPlaceHolder>"; draw.init(); assertThat(((NodeImpl<?>) draw.getNodes().get(1)).getInterceptors()).hasSize(1); }
release(T value);
[*] target: assertThat(draw.getNodes()).hasSize(3)
[-] pred:  org. junit. Assert. assertNotNull ( draw )

[*] target: assertThat(draw.getNodes()).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new TestClass(); ( ), draw )

[*] target: assertThat(draw.getNodes()).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new TestClass();, var draw )

[*] target: assertThat(draw.getNodes()).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new TestClass(); ( 1 ), draw )

[*] target: assertThat(draw.getNodes()).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new TestClass(); ( ), var draw )

************************************
************************************
[+] input: testGraphInterceptorForRoot() { var draw = compile(""" import ru.tinkoff.kora.application.graph.GraphInterceptor; import reactor.core.publisher.Mono;  @KoraApp public interface ExampleApplication { class TestRoot {} class TestInterceptor implements GraphInterceptor<TestRoot> { public TestRoot init(TestRoot value) { return value; }  public TestRoot release(TestRoot value) { return value; } }  @Root default TestRoot root() { return new TestRoot(); }  default TestInterceptor interceptor() { return new TestInterceptor(); } } """); "<AssertPlaceHolder>"; draw.init(); assertThat(((NodeImpl<?>) draw.getNodes().get(1)).getInterceptors()).hasSize(1); }
release(T value);
[*] target: assertThat(draw.getNodes()).hasSize(2)
[-] pred:  org. junit. Assert. assertNotNull ( draw )

[*] target: assertThat(draw.getNodes()).hasSize(2)
[-] pred:  org. junit. Assert. assertEquals ( new TestInterceptor(); ( ), draw )

[*] target: assertThat(draw.getNodes()).hasSize(2)
[-] pred:  org. junit. Assert. assertEquals ( 6, draw. size ( ) )

[*] target: assertThat(draw.getNodes()).hasSize(2)
[-] pred:  org. junit. Assert. assertTrue ( draw. isGeniated ( ) )

[*] target: assertThat(draw.getNodes()).hasSize(2)
[-] pred:  org

************************************
************************************
[+] input: Exception {  var states = executeAgent("what is the result of test with messages: 'MY FIRST TEST'"); var state = states.get( states.size() - 1 ); assertNotNull(state); assertFalse(state.intermediateSteps().isEmpty()); assertEquals( 1, state.intermediateSteps().size()); assertTrue(state.agentOutcome().isPresent()); assertNotNull(state.agentOutcome().get().finish()); "<AssertPlaceHolder>"; var returnValues = state.agentOutcome().get().finish().returnValues().get("returnValues").toString(); assertTrue( returnValues.contains( "MY FIRST TEST") ); System.out.println(returnValues); }
agentOutcome() { return value("agent_outcome"); }
[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertNull ( var states )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertEquals ( 0, var states. size ( ) )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertNull ( state )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertSame ( states, state )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org

************************************
************************************
[+] input: Exception {  var states = executeAgent("what is the result of test with messages: 'MY FIRST TEST' and the result of test with message: 'MY SECOND TEST'"); var state = states.get( states.size() - 1 ); assertNotNull(state); assertFalse(state.intermediateSteps().isEmpty()); assertEquals( 2, state.intermediateSteps().size()); assertTrue(state.agentOutcome().isPresent()); assertNotNull(state.agentOutcome().get().finish()); "<AssertPlaceHolder>"; var returnValues = state.agentOutcome().get().finish().returnValues().get("returnValues").toString(); assertTrue( returnValues.contains( "MY FIRST TEST") ); assertTrue( returnValues.contains( "MY SECOND TEST") ); System.out.println(returnValues);  }
agentOutcome() { return value("agent_outcome"); }
[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertNull ( state )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertNull ( var states )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertSame ( states, state )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertEquals ( 2, var states )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org

************************************
************************************
[+] input: Exception {  var saver = new MemorySaver(); var states = executeAgent( "what is the result of test with messages: 'MY FIRST TEST' and the result of test with message: 'MY SECOND TEST'", "thread_1", saver ); assertEquals( 7, states.size() ); // iterations var state = states.get( states.size() - 1 ); assertNotNull(state); assertFalse(state.intermediateSteps().isEmpty()); assertEquals( 2, state.intermediateSteps().size()); assertTrue(state.agentOutcome().isPresent()); assertNotNull(state.agentOutcome().get().finish()); assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues")); var returnValues = state.agentOutcome().get().finish().returnValues().get("returnValues").toString(); assertTrue( returnValues.contains( "MY FIRST TEST") ); assertTrue( returnValues.contains( "MY SECOND TEST") ); System.out.println(returnValues);  states = executeAgent( "what is the result of test with messages: 'MY FIRST TEST' and the result of test with message: 'MY SECOND TEST'", "thread_1", saver ); assertEquals( 3, states.size() ); // iterations state = states.get( states.size() - 1 ); assertNotNull(state); assertTrue(state.agentOutcome().isPresent()); assertNotNull(state.agentOutcome().get().finish()); "<AssertPlaceHolder>"; returnValues = state.agentOutcome().get().finish().returnValues().get("returnValues").toString(); assertTrue( returnValues.contains( "MY FIRST TEST") ); assertTrue( returnValues.contains( "MY SECOND TEST") ); System.out.println(returnValues); }
agentOutcome() { return value("agent_outcome"); }
[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertTrue ( ( iterations instanceof java. lang. String ) )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertTrue ( ( iterations instanceof java. util. List ) )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertTrue ( ( iterations instanceof java. util. HashSet ) )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org. junit. Assert. assertTrue ( ( iterations == null ) )

[*] target: assertTrue( state.agentOutcome().get().finish().returnValues().containsKey("returnValues"))
[-] pred:  org

************************************
************************************
[+] input: Exception {  var workflow = new StateGraph<>(AgentState::new) .addEdge( START,"agent_1") .addNode("agent_1", node_async( state -> { System.out.print( "agent_1"); System.out.println( state ); return mapOf("prop1", "test"); })) .addEdge( "agent_1",  END) ;  var app = workflow.compile();  var result = app.invoke( mapOf( "input", "test1") ); "<AssertPlaceHolder>";  var  expected = mapOf("input", "test1","prop1","test");  assertIterableEquals( sortMap(expected), sortMap(result.get().data()) ); //assertDictionaryOfAnyEqual( expected, result.data )  }
compile() throws GraphStateException { return compile(CompileConfig.builder().build()); }
[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertTrue ( ( result == null ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertTrue ( ( result!= null ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org

************************************
************************************
[+] input: Exception {  var workflow = new StateGraph<>(AgentState::new) .addEdge( START,"agent_1") .addNode("agent_1", node_async( state -> { System.out.print( "agent_1"); return mapOf("agent_1:prop1", "agent_1:test"); })) .addEdge( "agent_1",  END) ;  var saver = new MemorySaver();  var compileConfig = CompileConfig.builder().checkpointSaver(saver).build();  var app = workflow.compile( compileConfig );  Map<String, Object> inputs = mapOf( "input", "test1");  var initState = app.getInitialState( inputs );  assertEquals( 1, initState.data().size() ); assertTrue(  initState.value("input").isPresent() ); assertEquals( "test1", initState.value("input").get() );  // // Test checkpoint not override inputs // var newState = new AgentState( mapOf( "input", "test2") ); saver.put( new Checkpoint( Checkpoint.Value.of( newState, "start" ) ) );  app = workflow.compile( compileConfig ); initState = app.getInitialState( inputs );  assertEquals( 1, initState.data().size() ); assertTrue(  initState.value("input").isPresent() ); assertEquals( "test1", initState.value("input").get() );  // Test checkpoints are saved newState = new AgentState( mapOf( "input", "test2", "agent_1:prop1", "agent_1:test") ); saver.put( new Checkpoint( Checkpoint.Value.of( newState, "agent_1" ) ) );  app = workflow.compile( compileConfig ); initState = app.getInitialState( inputs );  "<AssertPlaceHolder>"; assertTrue(  initState.value("input").isPresent() ); assertEquals( "test1", initState.value("input").get() ); assertTrue(  initState.value("agent_1:prop1").isPresent() ); assertEquals( "agent_1:test", initState.value("agent_1:prop1").get() );  var checkpoints = saver.list(); assertEquals( 2, checkpoints.size() ); var last = saver.getLast(); assertTrue( last.isPresent() ); assertEquals( "agent_1", last.get().getValue().getNodeId() ); assertTrue( last.get().getValue().getState().value("agent_1:prop1").isPresent() ); assertEquals( "agent_1:test", last.get().getValue().getState().value("agent_1:prop1").get() );  }
compile( CompileConfig config ) throws GraphStateException { Objects.requireNonNull(config, "config cannot be null");  if (entryPoint == null) { throw Errors.missingEntryPoint.exception(); }  if( entryPoint.id()!=null && !nodes.contains(makeFakeNode(entryPoint.id()))) { throw Errors.entryPointNotExist.exception(entryPoint.id()); }  if (finishPoint != null) { if (!nodes.contains(makeFakeNode(finishPoint))) { throw Errors.finishPointNotExist.exception(finishPoint); } }  for (Edge<State> edge : edges) {  if (!nodes.contains(makeFakeNode(edge.sourceId()))) { throw Errors.missingNodeReferencedByEdge.exception(edge.sourceId()); }  if (edge.target().id() != null) { if (!Objects.equals(edge.target().id(), END) && !nodes.contains(makeFakeNode(edge.target().id()))) { throw Errors.missingNodeReferencedByEdge.exception(edge.target().id()); } } else if (edge.target().value() != null) { for (String nodeId : edge.target().value().mappings().values()) { if (!Objects.equals(nodeId, END) && !nodes.contains(makeFakeNode(nodeId))) { throw Errors.missingNodeInEdgeMapping.exception(edge.sourceId(), nodeId); } } } else { throw Errors.invalidEdgeTarget.exception(edge.sourceId()); } }  return new CompiledGraph<>(this, config); }
[*] target: assertEquals( 2, initState.data().size() )
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( initState ) )

[*] target: assertEquals( 2, initState.data().size() )
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( initState ) )

[*] target: assertEquals( 2, initState.data().size() )
[-] pred:  org. junit. Assert. assertTrue ( ( initState == null ) )

[*] target: assertEquals( 2, initState.data().size() )
[-] pred:  org. junit. Assert. assertTrue ( initState. isEmpty ( ) )

[*] target: assertEquals( 2, initState.data().size() )
[-] pred:  org

************************************
************************************
[+] input: Exception {  var workflow = new StateGraph<>(MessagesStateDeprecated::new) .addNode("agent_1", node_async( state -> { System.out.println( "agent_1" ); return mapOf("messages", "message1"); })) .addNode("agent_2", node_async( state -> { System.out.println( "agent_2" ); return mapOf( "messages", "message2"); })) .addNode("agent_3", node_async( state -> { System.out.println( "agent_3" ); var messages = state.messages(); var steps = messages.size() +1 ; return mapOf("messages", "message3","steps", steps); })) .addEdge("agent_1", "agent_2") .addEdge( "agent_2", "agent_3") .addEdge( START, "agent_1") .addEdge( "agent_3", END);  var app = workflow.compile();  Optional<MessagesStateDeprecated> result = app.invoke( mapOf() );  "<AssertPlaceHolder>"; System.out.println( result.get().data() ); assertEquals( 3, result.get().steps() ); assertEquals( 3, result.get().messages().size() ); assertIterableEquals( listOf( "message1", "message2", "message3"), result.get().messages().values() ); }
compile() throws GraphStateException { return compile(CompileConfig.builder().build()); }
[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertTrue ( ( result == null ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( true, result. get ( ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( true, result. compile ( ) )

************************************
************************************
[+] input: Exception {  var workflow = new StateGraph<>( MessagesState.SCHEMA, MessagesState::new) .addNode("agent_1", node_async( state -> { System.out.println( "agent_1" ); return mapOf("messages", "message1"); })) .addNode("agent_2", node_async( state -> { System.out.println( "agent_2" ); return mapOf( "messages", "message2"); })) .addNode("agent_3", node_async( state -> { System.out.println( "agent_3" ); var steps = state.messages().size() +1 ; return mapOf("messages", "message3","steps", steps); })) .addEdge("agent_1", "agent_2") .addEdge( "agent_2", "agent_3") .addEdge( START, "agent_1") .addEdge( "agent_3", END);  var app = workflow.compile();  Optional<MessagesState> result = app.invoke( mapOf() );  "<AssertPlaceHolder>"; System.out.println( result.get().data() ); assertEquals( 3, result.get().steps() ); assertEquals( 3, result.get().messages().size() ); assertIterableEquals( listOf( "message1", "message2", "message3"), result.get().messages() ); }
compile() throws GraphStateException { return compile(CompileConfig.builder().build()); }
[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( 0, result. get ( ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertTrue( result.isPresent() )
[-] pred:  org. junit. Assert. assertTrue ( ( result == null ) )

************************************
************************************
[+] input: Exception { var STEPS_COUNT = 5;  var workflow = new StateGraph<>(MessagesState.SCHEMA, MessagesState::new) .addEdge(START, "agent_1") .addNode("agent_1", node_async( state -> { System.out.println( "agent_1"); var steps = state.steps() + 1; return mapOf("steps", steps, "messages", format( "agent_1:step %d", steps )); })) .addConditionalEdges( "agent_1", edge_async( state -> { var steps = state.steps(); if( steps >= STEPS_COUNT) { return "exit"; } return "next"; }), mapOf( "next", "agent_1", "exit", END) ); ;   var saver = new MemorySaver();  var compileConfig = CompileConfig.builder() .checkpointSaver(saver) .build();  var app = workflow.compile( compileConfig );  Map<String, Object> inputs = mapOf( "steps", 0 );  var invokeConfig = InvokeConfig.builder().checkpointThreadId("thread_1").build();  var state = app.invoke( inputs, invokeConfig );  "<AssertPlaceHolder>"; assertEquals( STEPS_COUNT, state.get().steps() );  var messages = state.get().messages(); assertFalse( messages.isEmpty() );  System.out.println( messages );  assertEquals( STEPS_COUNT, messages.size() ); for( int i = 0; i < messages.size(); i++ ) { assertEquals( format("agent_1:step %d", i+1), messages.get(i) ); }  state = app.invoke( emptyMap(), invokeConfig );  assertTrue( state.isPresent() ); assertEquals( STEPS_COUNT + 1, state.get().steps() ); messages = state.get().messages();  System.out.println( messages ); assertEquals( STEPS_COUNT + 1, messages.size() ); for( int i = 0; i < messages.size(); i++ ) { assertEquals( format("agent_1:step %d", i+1), messages.get(i) ); } }
compile( CompileConfig config ) throws GraphStateException { Objects.requireNonNull(config, "config cannot be null");  if (entryPoint == null) { throw Errors.missingEntryPoint.exception(); }  if( entryPoint.id()!=null && !nodes.contains(makeFakeNode(entryPoint.id()))) { throw Errors.entryPointNotExist.exception(entryPoint.id()); }  if (finishPoint != null) { if (!nodes.contains(makeFakeNode(finishPoint))) { throw Errors.finishPointNotExist.exception(finishPoint); } }  for (Edge<State> edge : edges) {  if (!nodes.contains(makeFakeNode(edge.sourceId()))) { throw Errors.missingNodeReferencedByEdge.exception(edge.sourceId()); }  if (edge.target().id() != null) { if (!Objects.equals(edge.target().id(), END) && !nodes.contains(makeFakeNode(edge.target().id()))) { throw Errors.missingNodeReferencedByEdge.exception(edge.target().id()); } } else if (edge.target().value() != null) { for (String nodeId : edge.target().value().mappings().values()) { if (!Objects.equals(nodeId, END) && !nodes.contains(makeFakeNode(nodeId))) { throw Errors.missingNodeInEdgeMapping.exception(edge.sourceId(), nodeId); } } } else { throw Errors.invalidEdgeTarget.exception(edge.sourceId()); } }  return new CompiledGraph<>(this, config); }
[*] target: assertTrue( state.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), var state )

[*] target: assertTrue( state.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), var. value )

[*] target: assertTrue( state.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), var )

[*] target: assertTrue( state.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( 50, var state )

[*] target: assertTrue( state.isPresent() )
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), var, 0 )

************************************
************************************
[+] input: getMonthlyOrderStatistics_success() { // Given LocalDate startDate = LocalDate.of(2022, 1, 1); LocalDate endDate = LocalDate.of(2022, 2, 28); StatisticsRequest request = new StatisticsRequest(startDate, endDate);  List<MonthlyOrderStatisticsVo> list = List.of( new MonthlyOrderStatisticsVo("202201", 100L, BigDecimal.valueOf(1234), 100L, BigDecimal.valueOf(1234)), new MonthlyOrderStatisticsVo("202202", 100L, BigDecimal.valueOf(1234), 100L, BigDecimal.valueOf(1234)) );  List<MonthlyOrderStatisticsVo> threadSafeList = new ArrayList<>(list);  // When when(statisticsRepository.getMonthlyOrderStatistics(any())).thenReturn(threadSafeList); List<MonthlyOrderStatistics> result = sut.getMonthlyOrderStatistics(request).getData(); // Then "<AssertPlaceHolder>"; }
getMonthlyOrderStatistics(StatisticsRequest request) { LocalDate startedAt = request.getStartedAt(); LocalDate endedAt = request.getEndedAt(); validateStartDateIsBeforeEndDate(startedAt, endedAt); List<MonthlyOrderStatistics> monthlyStatisticsList = getMonthlyStatistics(startedAt, endedAt);  // 월별로 정렬 return ResponseDTO.getSuccessResult(monthlyStatisticsList .stream() .sorted(Comparator.comparing(MonthlyOrderStatistics::getYearMonth)) .toList()); }
[*] target: assertAll( () -> assertEquals(YearMonth.of(2022, 01), result.get(0).getYearMonth()), () -> assertEquals(100L, result.get(0).getTotalOrderCnt()), () -> assertEquals(BigDecimal.valueOf(1234), result.get(0).getTotalPaymentPrice()) )
[-] pred:  org. junit. Assert. assertThat ( result. getMonthlyOrderStatisticsVo> list )

[*] target: assertAll( () -> assertEquals(YearMonth.of(2022, 01), result.get(0).getYearMonth()), () -> assertEquals(100L, result.get(0).getTotalOrderCnt()), () -> assertEquals(BigDecimal.valueOf(1234), result.get(0).getTotalPaymentPrice()) )
[-] pred:  org. junit. Assert. assertThat ( result. getMonthlyOrderStatisticsVo> list. size ( ), org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertAll( () -> assertEquals(YearMonth.of(2022, 01), result.get(0).getYearMonth()), () -> assertEquals(100L, result.get(0).getTotalOrderCnt()), () -> assertEquals(BigDecimal.valueOf(1234), result.get(0).getTotalPaymentPrice()) )
[-] pred:  org. junit. Assert. assertThat ( result. getMonthlyOrderStatisticsVo> list, org. hamcrest. CoreMatchers. is ( getMonthlyOrderStatistics ( ) ) )

[*] target: assertAll( () -> assertEquals(YearMonth.of(2022, 01), result.get(0).getYearMonth()), () -> assertEquals(100L, result.get(0).getTotalOrderCnt()), () -> assertEquals(BigDecimal.valueOf(1234), result.get(0).getTotalPaymentPrice()) )
[-] pred:  org. junit. Assert. assertEquals ( list, result )

[*] target: assertAll( () -> assertEquals(YearMonth.of(2022, 01), result.get(0).getYearMonth()), () -> assertEquals(100L, result.get(0).getTotalOrderCnt()), () -> assertEquals(BigDecimal.valueOf(1234), result.get(0).getTotalPaymentPrice()) )
[-] pred:  org

************************************
************************************
[+] input: getMonthlyOrderStatistics_fail_invalid_request() { // Given LocalDate startDate = LocalDate.of(2022, 4, 1); LocalDate endDate = LocalDate.of(2022, 2, 28); StatisticsRequest request = new StatisticsRequest(startDate, endDate); LocalDateBadRequestException exception = "<AssertPlaceHolder>"; assertNotNull(exception); assertEquals(START_MUST_BE_BEFORE_THANT_END.formatted(startDate, endDate), exception.getMessage()); }
getMonthlyOrderStatistics(StatisticsRequest request) { LocalDate startedAt = request.getStartedAt(); LocalDate endedAt = request.getEndedAt(); validateStartDateIsBeforeEndDate(startedAt, endedAt); List<MonthlyOrderStatistics> monthlyStatisticsList = getMonthlyStatistics(startedAt, endedAt);  // 월별로 정렬 return ResponseDTO.getSuccessResult(monthlyStatisticsList .stream() .sorted(Comparator.comparing(MonthlyOrderStatistics::getYearMonth)) .toList()); }
[*] target: assertThrows(LocalDateBadRequestException.class, () -> sut.getMonthlyOrderStatistics(request))
[-] pred:  org. junit. Assert. assertEquals ( startDate. getMonthlyOrderStatistics ( ), exception. getMessage ( ) )

[*] target: assertThrows(LocalDateBadRequestException.class, () -> sut.getMonthlyOrderStatistics(request))
[-] pred:  org. junit. Assert. assertTrue ( ( ( java. lang. System. currentTimeMillis ( ) ) > 0 ) )

[*] target: assertThrows(LocalDateBadRequestException.class, () -> sut.getMonthlyOrderStatistics(request))
[-] pred:  org. junit. Assert. assertEquals ( startDate. getMonthlyOrderStatistics ( time ), exception. getMessage ( ) )

[*] target: assertThrows(LocalDateBadRequestException.class, () -> sut.getMonthlyOrderStatistics(request))
[-] pred:  org. junit. Assert. assertTrue ( ( ( exception. getMonthlyOrderStatistics ( ) ) > 0 ) )

[*] target: assertThrows(LocalDateBadRequestException.class, () -> sut.getMonthlyOrderStatistics(request))
[-] pred:  org

************************************
************************************
[+] input: availableCoupons_return_success() { // Given long memberId = 1L; long productId = 1L; LocalDateTime now = LocalDateTime.now(); availableCouponData = OrderServiceFixtures.availableCoupons();  when(couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now))) .thenReturn(availableCouponData);  // When ResponseDTO<List<AvailableCouponsByMemberIdResponse>> response = sut.getAvailableCoupons(memberId, productId, now);  // Then "<AssertPlaceHolder>"; assertEquals(2, response.getData().size()); }
getAvailableCoupons(final long memberId, final long productId, final LocalDateTime now) { validateMemberIdAndProductId(memberId, productId);  List<AvailableCouponsByMemberIdVo> availableCouponData = couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now));  // 할인가격 기준으로 내림차순 List<AvailableCouponInfo> availableCouponInfos = availableCouponData.stream() .map(AvailableCouponInfo::new) .sorted(Comparator.comparing(AvailableCouponInfo::getAppliedDiscountPrice).reversed()) .toList();  return ResponseDTO.getSuccessResult(filterAvailableCoupons(availableCouponInfos)); }
[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getStatus ( ) )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. getClass ( ) )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertEquals ( 200, response. size ( ) )

[*] target: assertNotNull(response.getData())
[-] pred:  org

************************************
************************************
[+] input: availableCoupons_return_success_descending_based_on_appliedDiscountPrice() { // Given long memberId = 1L; long productId = 1L; LocalDateTime now = LocalDateTime.now(); availableCouponData = OrderServiceFixtures.availableCoupons();  when(couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now))) .thenReturn(availableCouponData);  // When ResponseDTO<List<AvailableCouponsByMemberIdResponse>> response = sut.getAvailableCoupons(memberId, productId, now);  // Then "<AssertPlaceHolder>";  List<AvailableCouponsByMemberIdResponse> responseData = response.getData(); // 응답이 내림차순으로 정렬되어 있는지 확인하기 위해 stream 사용 boolean isSortedDescending = IntStream.range(0, responseData.size() - 1) .allMatch(i -> responseData.get(i).getAppliedDiscountPrice() .compareTo(responseData.get(i + 1).getAppliedDiscountPrice()) >= 0);  assertTrue(isSortedDescending, "appliedDiscountPrice 기준으로 내림차순 되어있습니다."); }
getAvailableCoupons(final long memberId, final long productId, final LocalDateTime now) { validateMemberIdAndProductId(memberId, productId);  List<AvailableCouponsByMemberIdVo> availableCouponData = couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now));  // 할인가격 기준으로 내림차순 List<AvailableCouponInfo> availableCouponInfos = availableCouponData.stream() .map(AvailableCouponInfo::new) .sorted(Comparator.comparing(AvailableCouponInfo::getAppliedDiscountPrice).reversed()) .toList();  return ResponseDTO.getSuccessResult(filterAvailableCoupons(availableCouponInfos)); }
[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit. Assert. assertNotNull ( response

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit ), response )

[*] target: assertNotNull(response.getData())
[-] pred:  org. junit, response )

************************************
************************************
[+] input: availableCoupons_return_failure_when_no_coupons() { // Given long memberId = 1L; long productId = 1L; LocalDateTime now = LocalDateTime.now();  when(couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now))) .thenReturn(Collections.emptyList());  // When ResponseDTO<List<AvailableCouponsByMemberIdResponse>> response = sut.getAvailableCoupons(memberId, productId, now);  // Then "<AssertPlaceHolder>"; }
getAvailableCoupons(final long memberId, final long productId, final LocalDateTime now) { validateMemberIdAndProductId(memberId, productId);  List<AvailableCouponsByMemberIdVo> availableCouponData = couponIssueRepository.getAvailableCoupons(new MemberIdProductIdNowVo(memberId, productId, now));  // 할인가격 기준으로 내림차순 List<AvailableCouponInfo> availableCouponInfos = availableCouponData.stream() .map(AvailableCouponInfo::new) .sorted(Comparator.comparing(AvailableCouponInfo::getAppliedDiscountPrice).reversed()) .toList();  return ResponseDTO.getSuccessResult(filterAvailableCoupons(availableCouponInfos)); }
[*] target: assertTrue(response.getData().isEmpty(), "사용 가능한 쿠폰이 없을 경우 쿠폰 목록이 비어 있어야 합니다.")
[-] pred:  org. junit. Assert. assertNull ( response )

[*] target: assertTrue(response.getData().isEmpty(), "사용 가능한 쿠폰이 없을 경우 쿠폰 목록이 비어 있어야 합니다.")
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertTrue(response.getData().isEmpty(), "사용 가능한 쿠폰이 없을 경우 쿠폰 목록이 비어 있어야 합니다.")
[-] pred:  org. junit. Assert. assertSame ( now, response )

[*] target: assertTrue(response.getData().isEmpty(), "사용 가능한 쿠폰이 없을 경우 쿠폰 목록이 비어 있어야 합니다.")
[-] pred:  org. junit. Assert. assertSame ( re, response )

[*] target: assertTrue(response.getData().isEmpty(), "사용 가능한 쿠폰이 없을 경우 쿠폰 목록이 비어 있어야 합니다.")
[-] pred:  org

************************************
************************************
[+] input: validateCouponIsAvailable() { // Given request = OrderServiceFixtures.orderProductRequest(); LocalDateTime now = LocalDateTime.now(); List<CouponIssuesAreActiveVo> list = OrderServiceFixtures.couponIssuesAreActive();  when(couponIssueRepository.validateStatusIsActive(request.getCouponIssueId())) .thenReturn(list); // When & Then CouponStatusException exception = "<AssertPlaceHolder>"; assertNotNull(exception); assertEquals(COUPON_IS_NOT_ACTIVE.formatted(List.of(list.get(1).couponIssueId())), exception.getMessage()); }
orderProduct(final long productId, final OrderProductRequest request, final LocalDateTime now) { validateCouponIsAvailable(request, now); // 3. 주문 정보 저장 OrderInfo orderInfo = createOrderInfo( productRepository.getProductById(productId), request.getQuantity(), couponRepository.findCouponsByIds(request.getCouponId())); OrderDetail orderDetail = createOrderDetail(orderInfo); orderDetailRepository.save(orderDetail); long orderDetailId = orderDetail.getId();  // 4. 주문에 사용된 쿠폰 저장 for (AppliedCouponInfo couponInfo : orderInfo.getAppliedCouponInfos()) { orderCouponRepository.save(createOrderCoupon(orderDetailId, couponInfo)); }  // 5. 쿠폰 사용 처리 couponIssueRepository.useCoupon(request.getCouponIssueId()); return ResponseDTO.getSuccessResult("쿠폰 처리 및 주문이 완료되었습니다."); }
[*] target: assertThrows(CouponStatusException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(CouponStatusException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertSame ( exception, request )

[*] target: assertThrows(CouponStatusException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(CouponStatusException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertSame ( exception, tx )

[*] target: assertThrows(CouponStatusException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  validates the exception

************************************
************************************
[+] input: validateCouponIsAvailable2() { // Given request = OrderServiceFixtures.orderProductRequest(); LocalDateTime invalidNow = LocalDateTime.of(2020, 01, 01, 0, 0, 0);  List<CouponValidationPeriodVo> list = OrderServiceFixtures.couponValidationPeriodVo(); when(couponRepository.getCouponValidationPeriod(request.getCouponId())) .thenReturn(list); // When & Then CouponUsageInvalidPeriodException exception = "<AssertPlaceHolder>"; assertNotNull(exception); assertTrue(exception.getMessage().startsWith(COUPON_USAGE_INVALID_PERIOD)); }
orderProduct(final long productId, final OrderProductRequest request, final LocalDateTime now) { validateCouponIsAvailable(request, now); // 3. 주문 정보 저장 OrderInfo orderInfo = createOrderInfo( productRepository.getProductById(productId), request.getQuantity(), couponRepository.findCouponsByIds(request.getCouponId())); OrderDetail orderDetail = createOrderDetail(orderInfo); orderDetailRepository.save(orderDetail); long orderDetailId = orderDetail.getId();  // 4. 주문에 사용된 쿠폰 저장 for (AppliedCouponInfo couponInfo : orderInfo.getAppliedCouponInfos()) { orderCouponRepository.save(createOrderCoupon(orderDetailId, couponInfo)); }  // 5. 쿠폰 사용 처리 couponIssueRepository.useCoupon(request.getCouponIssueId()); return ResponseDTO.getSuccessResult("쿠폰 처리 및 주문이 완료되었습니다."); }
[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, invalidNow))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, invalidNow))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, invalidNow))
[-] pred:  org. junit. Assert. assertSame ( exception, exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, invalidNow))
[-] pred:  org. junit. Assert. assertSame ( exception, request )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, invalidNow))
[-] pred:  )

************************************
************************************
[+] input: validateCouponIsAvailable3() { // Given request = OrderServiceFixtures.orderProductRequest(); LocalDateTime now = LocalDateTime.now();  List<CouponValidationPeriodVo> list = OrderServiceFixtures.couponValidationPeriodVoWithNull(); when(couponRepository.getCouponValidationPeriod(request.getCouponId())) .thenReturn(list); // When & Then CouponUsageInvalidPeriodException exception = "<AssertPlaceHolder>"; assertNotNull(exception); assertTrue(exception.getMessage().startsWith(COUPON_USAGE_INVALID_PERIOD)); }
orderProduct(final long productId, final OrderProductRequest request, final LocalDateTime now) { validateCouponIsAvailable(request, now); // 3. 주문 정보 저장 OrderInfo orderInfo = createOrderInfo( productRepository.getProductById(productId), request.getQuantity(), couponRepository.findCouponsByIds(request.getCouponId())); OrderDetail orderDetail = createOrderDetail(orderInfo); orderDetailRepository.save(orderDetail); long orderDetailId = orderDetail.getId();  // 4. 주문에 사용된 쿠폰 저장 for (AppliedCouponInfo couponInfo : orderInfo.getAppliedCouponInfos()) { orderCouponRepository.save(createOrderCoupon(orderDetailId, couponInfo)); }  // 5. 쿠폰 사용 처리 couponIssueRepository.useCoupon(request.getCouponIssueId()); return ResponseDTO.getSuccessResult("쿠폰 처리 및 주문이 완료되었습니다."); }
[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org. junit. Assert. assertSame ( now, exception )

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  org

[*] target: assertThrows(CouponUsageInvalidPeriodException.class, () -> sut.orderProduct(1L, request, now))
[-] pred:  )

************************************
************************************
[+] input: executeHappyPath() { CompletionResult expected = new CompletionResult(); Single<CompletionResult> single = Single.just(expected);  CompletionResult actual = OpenAiService.execute(single); "<AssertPlaceHolder>"; }
execute(Single<T> apiCall) { try { return apiCall.blockingGet(); } catch (HttpException e) { try { if (e.response() == null || e.response().errorBody() == null) { throw e; } String errorBody = e.response().errorBody().string();  OpenAiError error = mapper.readValue(errorBody, OpenAiError.class); throw new OpenAiHttpException(error, e, e.code()); } catch (IOException ex) { // couldn't parse OpenAI error throw e; } } }
[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit, Assert. assertEquals ( expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertSame ( expected, actual )

[*] target: assertEquals(expected, actual)
[-] pred:  org. junit. Assert. assertEquals ( expected, actual ) the

[*] target: assertEquals(expected, actual)
[-] pred:  org

************************************
************************************
[+] input: executeParseHttpError() { String errorBody = "{"error":{"message":"Invalid auth token","type":"type","param":"param","code":"code"}}"; HttpException httpException = createException(errorBody, 401); Single<CompletionResult> single = Single.error(httpException);  OpenAiHttpException exception = "<AssertPlaceHolder>";  assertEquals("Invalid auth token", exception.getMessage()); assertEquals("type", exception.type); assertEquals("param", exception.param); assertEquals("code", exception.code); assertEquals(401, exception.statusCode); }
execute(Single<T> apiCall) { try { return apiCall.blockingGet(); } catch (HttpException e) { try { if (e.response() == null || e.response().errorBody() == null) { throw e; } String errorBody = e.response().errorBody().string();  OpenAiError error = mapper.readValue(errorBody, OpenAiError.class); throw new OpenAiHttpException(error, e, e.code()); } catch (IOException ex) { // couldn't parse OpenAI error throw e; } } }
[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertEquals ( error, exception. getMessage ( ) )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertEquals ( exception, error )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertEquals ( error, exception. getCause ( ) )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertEquals ( exception. getMessage ( ), error )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertEquals ( exception. getClass ( ), error )

************************************
************************************
[+] input: executeParseUnknownProperties() { // error body contains one unknown property and no message String errorBody = "{"error":{"unknown":"Invalid auth token","type":"type","param":"param","code":"code"}}"; HttpException httpException = createException(errorBody, 401); Single<CompletionResult> single = Single.error(httpException);  OpenAiHttpException exception = "<AssertPlaceHolder>"; assertNull(exception.getMessage()); assertEquals("type", exception.type); assertEquals("param", exception.param); assertEquals("code", exception.code); assertEquals(401, exception.statusCode); }
execute(Single<T> apiCall) { try { return apiCall.blockingGet(); } catch (HttpException e) { try { if (e.response() == null || e.response().errorBody() == null) { throw e; } String errorBody = e.response().errorBody().string();  OpenAiError error = mapper.readValue(errorBody, OpenAiError.class); throw new OpenAiHttpException(error, e, e.code()); } catch (IOException ex) { // couldn't parse OpenAI error throw e; } } }
[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertNull ( exception. getMessage ( ) )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertNull ( exception. execute(RestRest )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org. junit. Assert. assertNull ( exception. execute(RestRest ( ) )

[*] target: assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single))
[-] pred:  org

************************************
************************************
[+] input: FileNotFoundException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-response.txt"); AssistantStreamManager manager = AssistantStreamManager.start(assistantStreamExample, mockEventHandler);   manager.waitForCompletion();  // Verify that the event handler received the correct method calls verify(mockEventHandler, times(39)).onEvent(isA(AssistantSSE.class)); verify(mockEventHandler, times(1)).onRunCreated(isA(Run.class)); verify(mockEventHandler, times(1)).onRunInProgress(isA(Run.class)); verify(mockEventHandler, times(1)).onRunCompleted(isA(Run.class)); verify(mockEventHandler, times(1)).onRunStepCreated(isA(RunStep.class)); verify(mockEventHandler, times(1)).onRunStepCompleted(isA(RunStep.class)); verify(mockEventHandler, times(1)).onMessageCreated(isA(Message.class)); verify(mockEventHandler, times(1)).onMessageInProgress(isA(Message.class)); verify(mockEventHandler, times(1)).onMessageCompleted(isA(Message.class)); verify(mockEventHandler, atLeast(1)).onMessageDelta(isA(MessageDelta.class)); verify(mockEventHandler, times(1)).onEnd(); verify(mockEventHandler, never()).onError(any(Throwable.class)); verify(mockEventHandler, never()).onRunStepDelta(any(RunStepDelta.class));  Message complectionMessage = manager.getCurrentMessage().get(); assertEquals("completed", complectionMessage.getStatus()); MessageDelta messageDelta = manager.getAccumulatedMsg().get(); assertEquals(messageDelta.getId(), complectionMessage.getId()); Delta accumulatedDelata = messageDelta.getDelta(); assertEquals(accumulatedDelata.getRole(), complectionMessage.getRole()); assertEquals(accumulatedDelata.getContent().get(0).getType(), complectionMessage.getContent().get(0).getType()); assertEquals(accumulatedDelata.getContent().get(0).getText().getValue(), complectionMessage.getContent().get(0).getText().getValue()); assertEquals(StreamEvent.DONE, manager.getCurrentEvent().get());  List<MessageDelta> msgDeltas = manager.getMsgDeltas(); MessageDelta first = msgDeltas.get(0); for (int i = 1; i < msgDeltas.size(); i++) { first = DeltaUtil.accumulatMessageDelta(first, msgDeltas.get(i)); } "<AssertPlaceHolder>";  }
getMsgDeltas() { return new ArrayList<>(msgDeltas); }
[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertNull ( first )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertTrue ( first. is()); )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertTrue ( shouldCompare )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertTrue ( first.());Line )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  )

************************************
************************************
[+] input: FileNotFoundException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-error.txt"); AssistantStreamManager manager = AssistantStreamManager.syncStart(assistantStreamExample, mockEventHandler);  // Verify that the event handler received the correct method calls verify(mockEventHandler, times(1)).onError(isA(OpenAiHttpException.class)); verify(mockEventHandler, times(1)).onEnd();  AssistantSSE errorSse = manager.getEventMsgsHolder().stream().filter(sse -> StreamEvent.ERROR.equals(sse.getEvent())).findFirst().orElse(null); "<AssertPlaceHolder>"; }
getEventMsgsHolder() { return new ArrayList<>(eventMsgsHolder); }
[*] target: assertNotNull(errorSse, "Error event not found")
[-] pred:  org. junit. Assert. assertEquals ( errorSse, manager. getEventMsgsHolder() ( ). size ( ) )

[*] target: assertNotNull(errorSse, "Error event not found")
[-] pred:  org. junit. Assert. assertEquals ( errorSse, manager. getEventMsgsHolder() ( ) )

[*] target: assertNotNull(errorSse, "Error event not found")
[-] pred:  org. junit. Assert. assertEquals ( errorSse. getEventMsgsHolder() ( ). size ( ), 0 )

[*] target: assertNotNull(errorSse, "Error event not found")
[-] pred:  org. junit. Assert. assertEquals ( 0, errorSse. getEventMsgsHolder() ( ). size ( ) )

[*] target: assertNotNull(errorSse, "Error event not found")
[-] pred:  org

************************************
************************************
[+] input: InterruptedException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-response.txt"); AssistantStreamManager manager = AssistantStreamManager.start(assistantStreamExample, mockEventHandler);  Thread.sleep(200); manager.shutDown(); assertFalse(manager.isCompleted());  // Thread.sleep(1000); List<AssistantSSE> eventMsgsHolder = manager.getEventMsgsHolder(); assertFalse(eventMsgsHolder.isEmpty()); verify(mockEventHandler, never()).onEnd(); verify(mockEventHandler, times(1)).onRunCreated(any(Run.class)); Thread.sleep(1000); "<AssertPlaceHolder>"; }
getEventMsgsHolder() { return new ArrayList<>(eventMsgsHolder); }
[*] target: assertEquals(eventMsgsHolder.size(), manager.getEventMsgsHolder().size(), "eventMsgsHolder should not be updated after shutdown")
[-] pred:  org. junit. Assert. assertEquals ( 1, manager. getEventMsgsHolder ( ). size ( ) )

[*] target: assertEquals(eventMsgsHolder.size(), manager.getEventMsgsHolder().size(), "eventMsgsHolder should not be updated after shutdown")
[-] pred:  org. junit. Assert. assertEquals ( 1, manager. getEventMsgsHolder() ( ). size ( ) )

[*] target: assertEquals(eventMsgsHolder.size(), manager.getEventMsgsHolder().size(), "eventMsgsHolder should not be updated after shutdown")
[-] pred:  org. junit. Assert. assertEquals ( 1, strategy. getEventMsgsHolder ( ). size ( ) )

[*] target: assertEquals(eventMsgsHolder.size(), manager.getEventMsgsHolder().size(), "eventMsgsHolder should not be updated after shutdown")
[-] pred:  org. junit. Assert. assertEquals ( 1, eventMsgsHolder. getEventMsgsHolder() ( ). size )

[*] target: assertEquals(eventMsgsHolder.size(), manager.getEventMsgsHolder().size(), "eventMsgsHolder should not be updated after shutdown")
[-] pred:  org. junit. Assert. assertEquals ( 1, eventMsgsHolder. getEventMsgsHolder ( ). size ( )

************************************
************************************
[+] input: FileNotFoundException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-fileSearch.txt"); AssistantStreamManager manager = AssistantStreamManager.syncStart(assistantStreamExample, mockEventHandler);  // Verify that the event handler received the correct method calls verify(mockEventHandler, times(1)).onRunCreated(isA(Run.class)); verify(mockEventHandler, times(1)).onRunInProgress(isA(Run.class)); verify(mockEventHandler, times(1)).onRunCompleted(isA(Run.class)); verify(mockEventHandler, times(2)).onRunStepCreated(isA(RunStep.class)); verify(mockEventHandler, times(2)).onRunStepInProgress(isA(RunStep.class)); verify(mockEventHandler, times(2)).onRunStepCompleted(isA(RunStep.class)); verify(mockEventHandler, atLeastOnce()).onRunStepDelta(isA(RunStepDelta.class)); verify(mockEventHandler, times(1)).onMessageCreated(isA(Message.class)); verify(mockEventHandler, times(1)).onMessageInProgress(isA(Message.class)); verify(mockEventHandler, times(1)).onMessageCompleted(isA(Message.class)); verify(mockEventHandler, atLeastOnce()).onMessageDelta(isA(MessageDelta.class)); verify(mockEventHandler, times(1)).onEnd();  //runStepDelta should be accumulated correctly List<RunStepDelta> runStepDeltas = manager.getRunStepDeltas(); assertFalse(runStepDeltas.isEmpty()); RunStepDelta accumulatedRsd = manager.getAccumulatedRsd().orElse(null); assertNotNull(accumulatedRsd); assertEquals("tool_calls", accumulatedRsd.getDelta().getStepDetails().getType()); assertEquals("file_search", accumulatedRsd.getDelta().getStepDetails().getToolCalls().get(0).getType());  Message complectionMessage = manager.getCurrentMessage().get(); assertEquals("completed", complectionMessage.getStatus()); MessageDelta messageDelta = manager.getAccumulatedMsg().get(); assertEquals(messageDelta.getId(), complectionMessage.getId()); Delta accumulatedDelata = messageDelta.getDelta(); assertEquals(accumulatedDelata.getRole(), complectionMessage.getRole()); assertEquals(accumulatedDelata.getContent().get(0).getType(), complectionMessage.getContent().get(0).getType()); assertEquals(accumulatedDelata.getContent().get(0).getText().getValue(), complectionMessage.getContent().get(0).getText().getValue()); List<Annotation> accumulateAnnotations = accumulatedDelata.getContent().get(0).getText().getAnnotations(); assertNotNull(accumulateAnnotations, "MessageDelta should be accumulated correctly"); List<Annotation> responseAnnotations = complectionMessage.getContent().get(0).getText().getAnnotations(); assertNotNull(responseAnnotations, "MessageDelta should be accumulated correctly"); assertEquals(accumulateAnnotations.size(), responseAnnotations.size(), "MessageDelta should be accumulated correctly"); for (Annotation accumulateAnnotation : accumulateAnnotations) { Annotation raItem = responseAnnotations.stream().filter(ra -> ra.getText().equals(accumulateAnnotation.getText())).findFirst().orElse(null); assertNotNull(raItem, "MessageDelta should be accumulated correctly"); assertEquals(raItem.getFileCitation().getFileId(), accumulateAnnotation.getFileCitation().getFileId(), "MessageDelta should be accumulated correctly"); assertEquals(raItem.getStartIndex(), accumulateAnnotation.getStartIndex(), "MessageDelta should be accumulated correctly"); assertEquals(raItem.getEndIndex(), accumulateAnnotation.getEndIndex(), "MessageDelta should be accumulated correctly"); }  List<MessageDelta> msgDeltas = manager.getMsgDeltas(); MessageDelta first = msgDeltas.get(0); for (int i = 1; i < msgDeltas.size(); i++) { first = DeltaUtil.accumulatMessageDelta(first, msgDeltas.get(i)); } "<AssertPlaceHolder>"; }
getMsgDeltas() { return new ArrayList<>(msgDeltas); }
[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertFalse ( accumulatedStepDeltas.());Json ( ) )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertFalse ( accumulatedStepDeltas.());OnBroker ( ) )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertFalse ( accumulatedStepDeltas.()); )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertTrue ( consumed )

[*] target: assertEquals(first.getDelta().getContent().get(0).getText().getValue(), accumulatedDelata.getContent().get(0).getText().getValue(), "MessageDelta should be accumulated correctly")
[-] pred:  org. junit. Assert. assertFalse ( consumed )

************************************
************************************
[+] input: FileNotFoundException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-tool-require.txt"); AssistantStreamManager manager = AssistantStreamManager.syncStart(assistantStreamExample, mockEventHandler);  // Verify that the event handler received the correct method calls verify(mockEventHandler, times(1)).onRunCreated(isA(Run.class)); verify(mockEventHandler, times(1)).onRunInProgress(isA(Run.class)); verify(mockEventHandler, times(1)).onRunStepCreated(isA(RunStep.class)); verify(mockEventHandler, times(1)).onRunStepInProgress(isA(RunStep.class)); verify(mockEventHandler, atLeastOnce()).onRunStepDelta(isA(RunStepDelta.class)); verify(mockEventHandler, never()).onMessageCreated(isA(Message.class)); verify(mockEventHandler, never()).onMessageInProgress(isA(Message.class)); verify(mockEventHandler, never()).onMessageCompleted(isA(Message.class)); verify(mockEventHandler, never()).onMessageDelta(isA(MessageDelta.class)); verify(mockEventHandler, times(1)).onRunRequiresAction(isA(Run.class)); verify(mockEventHandler, times(1)).onEnd();  //runStepDelta should be accumulated correctly List<RunStepDelta> runStepDeltas = manager.getRunStepDeltas(); assertFalse(runStepDeltas.isEmpty()); RunStepDelta accumulatedRsd = manager.getAccumulatedRsd().orElse(null); assertNotNull(accumulatedRsd); assertEquals("tool_calls", accumulatedRsd.getDelta().getStepDetails().getType()); ToolCall accumulateTool = accumulatedRsd.getDelta().getStepDetails().getToolCalls().get(0); assertEquals("function", accumulateTool.getType());  Run lastRun = manager.getCurrentRun().orElse(null); "<AssertPlaceHolder>"; assertEquals("requires_action", lastRun.getStatus()); List<ToolCall> responseToolCalls = lastRun.getRequiredAction().getSubmitToolOutputs().getToolCalls(); assertNotNull(responseToolCalls); assertEquals(1, responseToolCalls.size());  ToolCall respTool = responseToolCalls.get(0);  //for use equals method,index should be null accumulateTool.setIndex(null); assertEquals(respTool, accumulateTool); }
getCurrentRun() { return Optional.ofNullable(currentRun); }
[*] target: assertNotNull(lastRun)
[-] pred:  org. junit. Assert. assertSame ( accumulateTool, lastRun )

[*] target: assertNotNull(lastRun)
[-] pred:  org. junit. Assert. assertEquals ( accumulateTool, lastRun )

[*] target: assertNotNull(lastRun)
[-] pred:  org. junit. Assert. assertFalse ( accumulateTool.()); ToolCall )

[*] target: assertNotNull(lastRun)
[-] pred:  org

[*] target: assertNotNull(lastRun)
[-] pred:  )

************************************
************************************
[+] input: FileNotFoundException { AssistantEventHandler mockEventHandler = mock(AssistantEventHandler.class); Flowable<AssistantSSE> assistantStreamExample = getAssistantStreamExample("assistant-stream-code-interpreter.txt"); AssistantStreamManager manager = AssistantStreamManager.syncStart(assistantStreamExample, mockEventHandler);  // Verify that the event handler received the correct method calls verify(mockEventHandler, atLeastOnce()).onRunStepDelta(isA(RunStepDelta.class)); verify(mockEventHandler, times(1)).onEnd();  //runStepDelta should be accumulated correctly List<RunStepDelta> runStepDeltas = manager.getRunStepDeltas(); assertFalse(runStepDeltas.isEmpty()); RunStepDelta accumulatedRsd = manager.getAccumulatedRsd().orElse(null); assertNotNull(accumulatedRsd); assertEquals("tool_calls", accumulatedRsd.getDelta().getStepDetails().getType()); ToolCall accumulateTool = accumulatedRsd.getDelta().getStepDetails().getToolCalls().get(0); assertEquals("code_interpreter", accumulateTool.getType());  AssistantSSE respRsd = manager.getEventMsgsHolder().stream().filter(sse -> sse.getEvent().equals(StreamEvent.THREAD_RUN_STEP_COMPLETED) && ((RunStep) sse.getPojo()).getId().equals(accumulatedRsd.getId())).findFirst().orElse(null); "<AssertPlaceHolder>"; RunStep codeInterpreterRunStep = respRsd.getPojo(); ToolCall respTool = codeInterpreterRunStep.getStepDetails().getToolCalls().get(0);  assertEquals("code_interpreter", respTool.getType());   //for use equals method,index should be null accumulateTool.setIndex(null); accumulateTool.getCodeInterpreter().getOutputs().get(0).setIndex(null); assertEquals(respTool, accumulateTool);   }
getEventMsgsHolder() { return new ArrayList<>(eventMsgsHolder); }
[*] target: assertNotNull(respRsd)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( respRsd ) )

[*] target: assertNotNull(respRsd)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( respRsd ) )

[*] target: assertNotNull(respRsd)
[-] pred:  org. junit. Assert. assertTrue ( org. hamcrest. CoreMatchers. is ( accumulatedRsd ) )

[*] target: assertNotNull(respRsd)
[-] pred:  org. junit. Assert. assertEquals ( accumulatedRsd, respRsd )

[*] target: assertNotNull(respRsd)
[-] pred:  org

************************************
************************************
[+] input: testLaunch() { // check success JobResponseBody responseBody = new JobResponseBody(); responseBody.setJobId(TEST_JOB_ID); Mono<JobResponseBody> responseMock = (Mono<JobResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(responseBody); Mockito.when(apiMock.createJob(Mockito.any(CreateJobRequestBody.class))) .thenReturn(responseMock);  List<String> testArgs = Arrays.asList("-t", "test_table"); Assertions.assertEquals( TEST_JOB_ID, client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).orElse(null));  ArgumentCaptor<CreateJobRequestBody> argumentCaptor = ArgumentCaptor.forClass(CreateJobRequestBody.class); Mockito.verify(apiMock, Mockito.times(1)).createJob(argumentCaptor.capture()); CreateJobRequestBody actualRequest = argumentCaptor.getValue(); Assertions.assertEquals(TEST_CLUSTER_ID, actualRequest.getClusterId()); Assertions.assertEquals(TEST_JOB_NAME, actualRequest.getJobName()); Assertions.assertNotNull(actualRequest.getJobConf()); Assertions.assertEquals(testArgs, actualRequest.getJobConf().getArgs()); Assertions.assertEquals(JobConf.JobTypeEnum.RETENTION, actualRequest.getJobConf().getJobType());  // check no response Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(null); Mockito.when(apiMock.createJob(Mockito.any(CreateJobRequestBody.class))) .thenReturn(responseMock); Assertions."<AssertPlaceHolder>"; }
launch( String jobName, JobConf.JobTypeEnum jobType, String proxyUser, List<String> args) { final CreateJobRequestBody request = new CreateJobRequestBody(); request.setClusterId(clusterId); request.setJobName(jobName); JobConf jobConf = new JobConf(); jobConf.setJobType(jobType); jobConf.setProxyUser(proxyUser); jobConf.setArgs(args); request.setJobConf(jobConf); return Optional.ofNullable( RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<String, Exception>) context -> { JobResponseBody response = api.createJob(request).block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return response != null ? response.getJobId() : null; }, null)); }
[*] target: assertFalse( client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( testArgs, actualRequest. launch( String String ) )

[*] target: assertFalse( client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( testArgs, actualRequest. launch( String ) )

[*] target: assertFalse( client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( testArgs, actualRequest )

[*] target: assertFalse( client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( testArgs, actualRequest. launch( String String )

[*] target: assertFalse( client.launch(TEST_JOB_NAME, TEST_JOB_TYPE, TEST_PROXY_USER, testArgs).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( testArgs, actualRequest. launch( Stringglgl )

************************************
************************************
[+] input: testGetState() { // check running JobResponseBody responseBody = new JobResponseBody(); responseBody.setState(JobResponseBody.StateEnum.RUNNING); Mono<JobResponseBody> responseMock = (Mono<JobResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(responseBody); Mockito.when(apiMock.getJob(TEST_JOB_ID)).thenReturn(responseMock); Assertions.assertEquals(JobState.RUNNING, client.getState(TEST_JOB_ID).orElse(null));  // check succeeded responseBody = new JobResponseBody(); responseBody.setState(JobResponseBody.StateEnum.SUCCEEDED); Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(responseBody); Mockito.when(apiMock.getJob(TEST_JOB_ID)).thenReturn(responseMock); Assertions.assertEquals(JobState.SUCCEEDED, client.getState(TEST_JOB_ID).orElse(null));  // check no response Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(null); Mockito.when(apiMock.getJob(TEST_JOB_ID)).thenReturn(responseMock); Assertions."<AssertPlaceHolder>"; }
getState(String jobId) { return Optional.ofNullable( RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<JobState, Exception>) context -> { JobResponseBody response = api.getJob(jobId).block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return response != null ? Enum.valueOf(JobState.class, response.getState().getValue()) : null; }, null)); }
[*] target: assertFalse(client.getState(TEST_JOB_ID).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. String. class, check. getState(String jobId). getState(String jobId )

[*] target: assertFalse(client.getState(TEST_JOB_ID).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. Integer. valueOf ( 8 ), check succeeded responseBody. getState(String jobId) )

[*] target: assertFalse(client.getState(TEST_JOB_ID).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. Integer. valueOf ( 8 ), check succeeded responseBody. getState(String jobId ) )

[*] target: assertFalse(client.getState(TEST_JOB_ID).isPresent())
[-] pred:  org. junit. Assert. assertEquals ( clazz, check succeeded responseBody. getState(String jobId )

[*] target: assertFalse(client.getState(TEST_JOB_ID).isPresent())
[-] pred:  org

************************************
************************************
[+] input: testCancel() { // check success Mono<Void> responseMock = (Mono<Void>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(Mockito.any(Duration.class))).thenReturn(null); Mockito.when(apiMock.cancelJob(TEST_JOB_ID)).thenReturn(responseMock); Assertions.assertTrue(client.cancelJob(TEST_JOB_ID));  // check failure Mockito.when(apiMock.cancelJob(TEST_JOB_ID)).thenThrow(WebClientResponseException.class); Assertions."<AssertPlaceHolder>"; }
cancelJob(String jobId) { return RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<Boolean, Exception>) context -> { api.cancelJob(jobId).block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return true; }, false); }
[*] target: assertFalse(client.cancelJob(TEST_JOB_ID))
[-] pred:  org. junit. Assert. assertTrue ( responseMock. cancelJob(String jobId) )

[*] target: assertFalse(client.cancelJob(TEST_JOB_ID))
[-] pred:  org. junit. Assert. assertTrue ( responseMock. cancelJob( jobId) )

[*] target: assertFalse(client.cancelJob(TEST_JOB_ID))
[-] pred:  org. junit. Assert. assertTrue ( responseMock. cancelJob(String jobId ) )

[*] target: assertFalse(client.cancelJob(TEST_JOB_ID))
[-] pred:  org

[*] target: assertFalse(client.cancelJob(TEST_JOB_ID))
[-] pred:  )

************************************
************************************
[+] input: testGetTables() { GetAllTablesResponseBody allTablesResponseBodyMock = Mockito.mock(GetAllTablesResponseBody.class); GetAllDatabasesResponseBody allDatabasesResponseBodyMock = Mockito.mock(GetAllDatabasesResponseBody.class); GetTableResponseBody unPartitionedTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableName); GetTableResponseBody partitionedTableResponseBodyMock = createPartitionedTableResponseBodyMock( testDbName, testTableNamePartitioned, testPartitionColumnName, testRetentionTTLDays); GetDatabaseResponseBody databaseResponseMock = createGetDatabaseResponseBodyMock(testDbName); GetTableResponseBody unPartitionedTableIdentifierMock = createTableResponseBodyMock(testDbName, testTableName); GetTableResponseBody partitionedTableIdentifierMock = createTableResponseBodyMock(testDbName, testTableNamePartitioned);  Mockito.when(allDatabasesResponseBodyMock.getResults()) .thenReturn(Arrays.asList(databaseResponseMock)); Mockito.when(allTablesResponseBodyMock.getResults()) .thenReturn( Arrays.asList(unPartitionedTableIdentifierMock, partitionedTableIdentifierMock));  Mono<GetAllTablesResponseBody> responseMock = (Mono<GetAllTablesResponseBody>) Mockito.mock(Mono.class); Mono<GetAllDatabasesResponseBody> dbResponseMock = (Mono<GetAllDatabasesResponseBody>) Mockito.mock(Mono.class); Mono<GetTableResponseBody> unPartitionedTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mono<GetTableResponseBody> partitionedTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(allTablesResponseBodyMock); Mockito.when(dbResponseMock.block(any(Duration.class))) .thenReturn(allDatabasesResponseBodyMock); Mockito.when(unPartitionedTableResponseMock.block(any(Duration.class))) .thenReturn(unPartitionedTableResponseBodyMock); Mockito.when(partitionedTableResponseMock.block(any(Duration.class))) .thenReturn(partitionedTableResponseBodyMock); Mockito.when(dbApiMock.getAllDatabasesV1()).thenReturn(dbResponseMock); Mockito.when(apiMock.searchTablesV1(testDbName)).thenReturn(responseMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNamePartitioned)) .thenReturn(unPartitionedTableResponseMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)) .thenReturn(partitionedTableResponseMock); List<TableMetadata> tableMetadataList = client.getTables(); Assertions."<AssertPlaceHolder>"; for (TableMetadata tableMetadata : tableMetadataList) { Assertions.assertFalse(tableMetadata.getTableName().contains(testTableNameOlder)); } Mockito.verify(unPartitionedTableResponseMock, Mockito.times(1)).block(any(Duration.class)); Mockito.verify(partitionedTableResponseMock, Mockito.times(1)).block(any(Duration.class)); Mockito.verify(responseMock, Mockito.times(1)).block(any(Duration.class)); Mockito.verify(dbResponseMock, Mockito.times(1)).block(any(Duration.class)); Mockito.verify(allTablesResponseBodyMock, Mockito.times(1)).getResults(); }
getTables() { List<TableMetadata> ret = new ArrayList<>(); for (String dbName : getDatabases()) { if (databaseFilter.applyDatabaseName(dbName)) { ret.addAll( RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<List<TableMetadata>, Exception>) context -> { GetAllTablesResponseBody response = tableApi .searchTablesV1(dbName) .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return Optional.ofNullable(response.getResults()) .map(Collection::stream) .orElseGet(Stream::empty) .map(this::mapTableResponseToTableMetadata) .filter(databaseFilter::apply) .collect(Collectors.toList()); }, Collections.emptyList())); } } return ret; }
[*] target: assertEquals( Arrays.asList( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build(), TableMetadata.builder().dbName(testDbName).tableName(testTableNamePartitioned).build()), tableMetadataList)
[-] pred:  org. junit. Assert. assertEquals ( 6, results. size ( ) )

[*] target: assertEquals( Arrays.asList( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build(), TableMetadata.builder().dbName(testDbName).tableName(testTableNamePartitioned).build()), tableMetadataList)
[-] pred:  org. junit. Assert. assertEquals ( 2, results. size ( ) )

[*] target: assertEquals( Arrays.asList( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build(), TableMetadata.builder().dbName(testDbName).tableName(testTableNamePartitioned).build()), tableMetadataList)
[-] pred:  org. junit. Assert. assertEquals ( 2, result. size ( ) )

[*] target: assertEquals( Arrays.asList( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build(), TableMetadata.builder().dbName(testDbName).tableName(testTableNamePartitioned).build()), tableMetadataList)
[-] pred:  org. junit. Assert. assertEquals ( 2, data. size ( ) )

[*] target: assertEquals( Arrays.asList( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build(), TableMetadata.builder().dbName(testDbName).tableName(testTableNamePartitioned).build()), tableMetadataList)
[-] pred:  org

************************************
************************************
[+] input: testGetTableNamesforDBName() { String tableLocation = testDbName + "/" + testTableName + "-" + testTableUUID; String tableLocationMetadata = tableLocation + "/" + testTableUUID + ".metadata.json"; GetAllTablesResponseBody allTablesResponseBodyMock = Mockito.mock(GetAllTablesResponseBody.class); GetTableResponseBody tableResponseBodyMock = createTableWithLocationResponseBodyMock(testDbName, testTableName, tableLocationMetadata); GetTableResponseBody tableIdentifierMock = createTableResponseBodyMock(testDbName, testTableName); Mockito.when(allTablesResponseBodyMock.getResults()) .thenReturn(Arrays.asList(tableIdentifierMock)); Mono<GetAllTablesResponseBody> responseMock = (Mono<GetAllTablesResponseBody>) Mockito.mock(Mono.class); Mono<GetTableResponseBody> tableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(allTablesResponseBodyMock); Mockito.when(tableResponseMock.block(any(Duration.class))).thenReturn(tableResponseBodyMock); Mockito.when(apiMock.searchTablesV1(testDbName)).thenReturn(responseMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(tableResponseMock);  Assertions."<AssertPlaceHolder>"; }
getTableNamesForDbName(String dbName) { Set<String> tableNames = new HashSet<>(); if (databaseFilter.applyDatabaseName(dbName)) { tableNames.addAll( RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<Set<String>, Exception>) context -> { GetAllTablesResponseBody response = tableApi .searchTablesV1(dbName) .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return Optional.ofNullable(response.getResults()) .map(Collection::stream) .orElseGet(Stream::empty) .map(this::mapTableResponseToTableDirectoryName) .filter(databaseFilter::applyTableDirectoryPath) .collect(Collectors.toSet()); }, Collections.emptySet())); } return tableNames; }
[*] target: assertEquals( Stream.of(testTableName + "-" + testTableUUID).collect(Collectors.toSet()), client.getTableNamesForDbName(testDbName))
[-] pred:  org. junit. Assert. assertNull ( tableLocationMetadata. getTableNamesForDbName(String tableLocationMetadata ) )

[*] target: assertEquals( Stream.of(testTableName + "-" + testTableUUID).collect(Collectors.toSet()), client.getTableNamesForDbName(testDbName))
[-] pred:  org. junit. Assert. assertEquals ( tableLocationMetadata, tableauth. getTableNamesForDbName(String tableLocationMetadata ) )

[*] target: assertEquals( Stream.of(testTableName + "-" + testTableUUID).collect(Collectors.toSet()), client.getTableNamesForDbName(testDbName))
[-] pred:  org. junit. Assert. assertEquals ( tableLocationMetadata, tableauth. getTableNamesForDbName(String tableLocationMetadata )

[*] target: assertEquals( Stream.of(testTableName + "-" + testTableUUID).collect(Collectors.toSet()), client.getTableNamesForDbName(testDbName))
[-] pred:  org. junit. Assert. assertEquals ( tableLocationMetadata, tableauth. getTableNamesForDbName(String tableLocationMetadata ( ) )

[*] target: assertEquals( Stream.of(testTableName + "-" + testTableUUID).collect(Collectors.toSet()), client.getTableNamesForDbName(testDbName))
[-] pred:  org

************************************
************************************
[+] input: IOException { String tableLocation = testDbName + "/" + testTableName + "-" + testTableUUID; String tableLocationMetadata = tableLocation + "/" + testTableUUID + ".metadata.json"; GetAllTablesResponseBody allTablesResponseBodyMock = Mockito.mock(GetAllTablesResponseBody.class); GetTableResponseBody tableResponseBodyMock = createTableWithLocationResponseBodyMock(testDbName, testTableName, tableLocationMetadata); GetTableResponseBody tableIdentifierMock = createTableResponseBodyMock(testDbName, testTableName); Mockito.when(allTablesResponseBodyMock.getResults()) .thenReturn(Arrays.asList(tableIdentifierMock)); Mono<GetAllTablesResponseBody> responseMock = (Mono<GetAllTablesResponseBody>) Mockito.mock(Mono.class); Mono<GetTableResponseBody> tableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(allTablesResponseBodyMock); Mockito.when(tableResponseMock.block(any(Duration.class))).thenReturn(tableResponseBodyMock); Mockito.when(apiMock.searchTablesV1(testDbName)).thenReturn(responseMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(tableResponseMock);  Mockito.when(storageClient.getSubDirectoriesWithOwners(Mockito.any(Path.class))) .thenAnswer( new Answer<List<DirectoryMetadata>>() { @Override public List<DirectoryMetadata> answer(InvocationOnMock invocation) throws Throwable { return createTableDirectoryStatusMock( testDbName, Arrays.asList(testTableName, testOrphanDirectoryName)); } });  Assertions."<AssertPlaceHolder>"; }
getOrphanTableDirectories(Path dbPath) { // a set of directory names Set<String> registeredTableDirectories = getTableNamesForDbName(dbPath.getName()); List<DirectoryMetadata> allTableDirectories = storageClient.getSubDirectoriesWithOwners(dbPath); return allTableDirectories.stream() .filter( directoryMetadata -> !registeredTableDirectories.contains(directoryMetadata.getDirectoryName())) .collect(Collectors.toList()); }
[*] target: assertEquals( Arrays.asList( DirectoryMetadata.of( new Path(testDbName + "/" + testOrphanDirectoryName + "-" + testTableUUID), testTableCreator)), client.getOrphanTableDirectories(new Path(testDbName)))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. getOrphanTableDirectories(Path dbPath ). contains ( tableLocationMetadata ) )

[*] target: assertEquals( Arrays.asList( DirectoryMetadata.of( new Path(testDbName + "/" + testOrphanDirectoryName + "-" + testTableUUID), testTableCreator)), client.getOrphanTableDirectories(new Path(testDbName)))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. getOrphanTableDirectories(Path dbPath ).()); ( ) )

[*] target: assertEquals( Arrays.asList( DirectoryMetadata.of( new Path(testDbName + "/" + testOrphanDirectoryName + "-" + testTableUUID), testTableCreator)), client.getOrphanTableDirectories(new Path(testDbName)))
[-] pred:  org. junit. Assert. assertNull ( org. apache. commons. lang3. StringUtils. getOrphanTableDirectories(Path dbPath ) )

[*] target: assertEquals( Arrays.asList( DirectoryMetadata.of( new Path(testDbName + "/" + testOrphanDirectoryName + "-" + testTableUUID), testTableCreator)), client.getOrphanTableDirectories(new Path(testDbName)))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. getOrphanTableDirectories(Path dbPath ). contains ( tableLocationMetadata )

[*] target: assertEquals( Arrays.asList( DirectoryMetadata.of( new Path(testDbName + "/" + testOrphanDirectoryName + "-" + testTableUUID), testTableCreator)), client.getOrphanTableDirectories(new Path(testDbName)))
[-] pred:  org

************************************
************************************
[+] input: testCanExpireSnapshots() { GetTableResponseBody primaryTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableName); Mono<GetTableResponseBody> responseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(primaryTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(responseMock);  GetTableResponseBody replicaTableResponseBodyMock = createReplicaTableResponseBodyMock(testDbName, testReplicaTableName); Mono<GetTableResponseBody> replicaResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(replicaResponseMock.block(any(Duration.class))) .thenReturn(replicaTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testReplicaTableName)) .thenReturn(replicaResponseMock);  Assertions.assertTrue( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build())); Assertions."<AssertPlaceHolder>"; }
canExpireSnapshots(TableMetadata tableMetadata) { GetTableResponseBody response = getTable(tableMetadata); return response != null && checkCreationTimeEligibility(response) && isPrimaryTable(response); }
[*] target: assertFalse( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. canExpireSnapshots(TableMetadata tableMetadata ) )

[*] target: assertFalse( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( service. canExpireSnapshots(TableMetadata tableMetadata ) )

[*] target: assertFalse( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. canExpireSnapshots(TableMetadata tableMetadata) )

[*] target: assertFalse( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( service. canExpireSnapshots(TableMetadata tableMetadata) )

[*] target: assertFalse( client.canExpireSnapshots( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( instance. canExpireSnapshots(TableMetadata tableMetadata ) )

************************************
************************************
[+] input: testCanRunOrphanFilesDeletion() { GetTableResponseBody olderTableResponseBodyMock = createTableResponseBodyMockWithCreationTime( testDbName, testTableNameOlder, testPartitionColumnName, testRetentionTTLDays, 2); Mono<GetTableResponseBody> olderTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(olderTableResponseMock.block(any(Duration.class))) .thenReturn(olderTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNameOlder)) .thenReturn(olderTableResponseMock);  GetTableResponseBody newerTableResponseBodyMock = createTableResponseBodyMockWithCreationTime( testDbName, testTableNameNewer, testPartitionColumnName, testRetentionTTLDays, 0); Mono<GetTableResponseBody> newerTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(newerTableResponseMock.block(any(Duration.class))) .thenReturn(newerTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNameNewer)) .thenReturn(newerTableResponseMock);  Assertions.assertTrue( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build())); Assertions."<AssertPlaceHolder>"; }
canRunOrphanFileDeletion(@NonNull TableMetadata tableMetadata) { GetTableResponseBody response = getTable(tableMetadata); return response != null && checkCreationTimeEligibility(response); }
[*] target: assertFalse( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameNewer).build()))
[-] pred:  org. junit. Assert. assertTrue ( newerTableResponseBodyMock. canRunOrphanFileDeletion( TableMetadata.builder ( null ) )

[*] target: assertFalse( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameNewer).build()))
[-] pred:  org. junit. Assert. assertTrue ( newerTableResponseBodyMock. canRunOrphanFileDeletion( TableMetadata.builder ( repo, testDbName ) )

[*] target: assertFalse( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameNewer).build()))
[-] pred:  org. junit. Assert. assertTrue ( newerTableResponseBodyMock. canRunOrphanFileDeletion( TableMetadata.builder ( us, newerTableResponseMock ) )

[*] target: assertFalse( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameNewer).build()))
[-] pred:  org. junit. Assert. assertTrue ( newerTableResponseBodyMock. canRunOrphanFileDeletion( TableMetadata.builder ( repo, newerTableResponseMock ) )

[*] target: assertFalse( client.canRunOrphanFileDeletion( TableMetadata.builder().dbName(testDbName).tableName(testTableNameNewer).build()))
[-] pred:  org. junit. Assert. assertTrue ( newerTableResponseBodyMock. canRunOrphanFileDeletion( TableMetadata.builder ( persistenceMock ) )

************************************
************************************
[+] input: testCanRunRetention() { GetTableResponseBody partitionedTableResponseBodyMock = createPartitionedTableResponseBodyMock( testDbName, testTableNamePartitioned, testPartitionColumnName, testRetentionTTLDays); Mono<GetTableResponseBody> partitionedTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(partitionedTableResponseMock.block(any(Duration.class))) .thenReturn(partitionedTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNamePartitioned)) .thenReturn(partitionedTableResponseMock); // Retention should be executed for a primary  table that has retention config Assertions.assertTrue( client.canRunRetention( TableMetadata.builder() .dbName(testDbName) .tableName(testTableNamePartitioned) .build()));  GetTableResponseBody olderTableResponseBodyMock = createTableResponseBodyMockWithCreationTime( testDbName, testTableNameOlder, testPartitionColumnName, testRetentionTTLDays, 2); Mono<GetTableResponseBody> olderTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(olderTableResponseMock.block(any(Duration.class))) .thenReturn(olderTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNameOlder)) .thenReturn(olderTableResponseMock); // Retention skipped for a table recently created despite retention config being set. Assertions.assertTrue( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()));  GetTableResponseBody primaryTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableName); Mono<GetTableResponseBody> responseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(primaryTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(responseMock); // Retention skipped for a replica table that is un-partitioned. Assertions.assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build()));  GetTableResponseBody partitionedReplicaTableResponseBodyMock = createPartitionedReplicaTableResponseBodyMock( testDbName, testTableNamePartitioned, testPartitionColumnName, testRetentionTTLDays); Mono<GetTableResponseBody> partitionedReplicaTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))) .thenReturn(partitionedReplicaTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNamePartitioned)) .thenReturn(partitionedReplicaTableResponseMock); // Retention skipped for a replica table despite retention config being set. Assertions.assertFalse( client.canRunRetention( TableMetadata.builder() .dbName(testDbName) .tableName(testTableNamePartitioned) .build()));  GetTableResponseBody newerTableResponseBodyMock = createTableResponseBodyMockWithCreationTime( testDbName, testTableNameOlder, testPartitionColumnName, testRetentionTTLDays, 0); Mono<GetTableResponseBody> newerTableResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(newerTableResponseMock.block(any(Duration.class))) .thenReturn(newerTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNameOlder)) .thenReturn(newerTableResponseMock); // Retention skipped for a table recently created despite retention config being set. Assertions."<AssertPlaceHolder>"; }
canRunRetention(TableMetadata tableMetadata) { GetTableResponseBody response = getTable(tableMetadata);  if (response == null || !checkCreationTimeEligibility(response) || !isPrimaryTable(response)) { return false; } Optional<RetentionConfig> config = getTableRetention(response); return config.isPresent(); }
[*] target: assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()))
[-] pred:  org. junit. Assert. assertEquals ( 4, results. size ( ) )

[*] target: assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()))
[-] pred:  org. junit. Assert. assertEquals ( 1, results. size ( ) )

[*] target: assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()))
[-] pred:  org. junit. Assert. assertEquals ( 0, results. size ( ) )

[*] target: assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()))
[-] pred:  org. junit. Assert. assertEquals ( 4, result. size ( ) )

[*] target: assertFalse( client.canRunRetention( TableMetadata.builder().dbName(testDbName).tableName(testTableNameOlder).build()))
[-] pred:  org. junit. Assert. assertEquals ( 4, n )

************************************
************************************
[+] input: testCanRunDataLayoutStrategyGeneration() { GetTableResponseBody primaryPartitionedTableResponseBodyMock = createPartitionedTableResponseBodyMock( testDbName, testTableNamePartitioned, testPartitionColumnName, 1); Mono<GetTableResponseBody> partitionedResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(partitionedResponseMock.block(any(Duration.class))) .thenReturn(primaryPartitionedTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNamePartitioned)) .thenReturn(partitionedResponseMock);  GetTableResponseBody primaryTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableName); Mono<GetTableResponseBody> responseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(primaryTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(responseMock);  GetTableResponseBody primaryClusteredTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableNameClustered, true); Mono<GetTableResponseBody> clusteredResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(clusteredResponseMock.block(any(Duration.class))) .thenReturn(primaryClusteredTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableNameClustered)) .thenReturn(clusteredResponseMock);  GetTableResponseBody replicaTableResponseBodyMock = createReplicaTableResponseBodyMock(testDbName, testReplicaTableName); Mono<GetTableResponseBody> replicaResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(replicaResponseMock.block(any(Duration.class))) .thenReturn(replicaTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testReplicaTableName)) .thenReturn(replicaResponseMock);  Assertions.assertTrue( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder() .dbName(testDbName) .tableName(testTableNamePartitioned) .build())); Assertions.assertTrue( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testTableNameClustered).build())); Assertions.assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build())); Assertions."<AssertPlaceHolder>"; }
canRunDataLayoutStrategyGeneration(TableMetadata tableMetadata) { GetTableResponseBody response = getTable(tableMetadata); return response != null && checkCreationTimeEligibility(response) && isPrimaryTable(response) && (response.getTimePartitioning() != null || response.getClustering() != null); }
[*] target: assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertEquals (Generation( TableMetadata.builder ( ), expected )

[*] target: assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertEquals ( expected, metadataDDL )

[*] target: assertFalse( client.canRunDataLayoutStrategyGeneration( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org

************************************
************************************
[+] input: testCanRunDataCompaction() { GetTableResponseBody primaryTableResponseBodyMock = createUnpartitionedTableResponseBodyMock(testDbName, testTableName); Mono<GetTableResponseBody> responseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(responseMock.block(any(Duration.class))).thenReturn(primaryTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testTableName)).thenReturn(responseMock);  GetTableResponseBody replicaTableResponseBodyMock = createReplicaTableResponseBodyMock(testDbName, testReplicaTableName); Mono<GetTableResponseBody> replicaResponseMock = (Mono<GetTableResponseBody>) Mockito.mock(Mono.class); Mockito.when(replicaResponseMock.block(any(Duration.class))) .thenReturn(replicaTableResponseBodyMock); Mockito.when(apiMock.getTableV1(testDbName, testReplicaTableName)) .thenReturn(replicaResponseMock);  Assertions.assertTrue( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testTableName).build())); Assertions."<AssertPlaceHolder>"; }
canRunDataCompaction(TableMetadata tableMetadata) { GetTableResponseBody response = getTable(tableMetadata); return response != null && checkCreationTimeEligibility(response) && isPrimaryTable(response); }
[*] target: assertFalse( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( service. canRunDataCompaction(TableMetadata tableMetadata ) )

[*] target: assertFalse( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. canRunDataCompaction(TableMetadata tableMetadata ) )

[*] target: assertFalse( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( service. canRunDataCompaction(TableMetadata tableMetadata )

[*] target: assertFalse( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( instance. canRunDataCompaction(TableMetadata tableMetadata ) )

[*] target: assertFalse( client.canRunDataCompaction( TableMetadata.builder().dbName(testDbName).tableName(testReplicaTableName).build()))
[-] pred:  org. junit. Assert. assertTrue ( service. canRunDataCompaction(TableMetadata tableMetadata) )

************************************
************************************
[+] input: getDatabases() { GetAllDatabasesResponseBody allDatabasesResponseBodyMock = Mockito.mock(GetAllDatabasesResponseBody.class); GetDatabaseResponseBody databaseResponseMock = createGetDatabaseResponseBodyMock("db"); Mockito.when(allDatabasesResponseBodyMock.getResults()) .thenReturn(Arrays.asList(databaseResponseMock)); Mono<GetAllDatabasesResponseBody> dbResponseMock = (Mono<GetAllDatabasesResponseBody>) Mockito.mock(Mono.class); Mockito.when(dbResponseMock.block(any(Duration.class))) .thenReturn(allDatabasesResponseBodyMock); Mockito.when(dbApiMock.getAllDatabasesV1()).thenReturn(dbResponseMock); Assertions."<AssertPlaceHolder>"; Mockito.verify(dbResponseMock, Mockito.times(1)).block(any(Duration.class)); }
getDatabases() { return RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<List<String>, Exception>) context -> { GetAllDatabasesResponseBody response = databaseApi .getAllDatabasesV1() .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return Optional.ofNullable(response == null ? null : response.getResults()) .map(Collection::stream) .orElseGet(Stream::empty) .map(GetDatabaseResponseBody::getDatabaseId) .collect(Collectors.toList()); }, Collections.emptyList()); }
[*] target: assertEquals(Arrays.asList("db"), client.getDatabases())
[-] pred:  org. junit. Assert. assertTrue ( ( ( databaseResponseMock. getDatabases() ( ). size ( ) ) > 0 ) )

[*] target: assertEquals(Arrays.asList("db"), client.getDatabases())
[-] pred:  org. junit. Assert. assertTrue ( ( ( databaseResponseMock. getDatabases() ( ). stream ( 0L ). size ( ) ) > 0 ) )

[*] target: assertEquals(Arrays.asList("db"), client.getDatabases())
[-] pred:  org. junit. Assert. assertTrue ( ( ( databaseResponseMock. getDatabasesRoot ( ). size ( ) ) > 0 ) )

[*] target: assertEquals(Arrays.asList("db"), client.getDatabases())
[-] pred:  org. junit. Assert. assertTrue ( ( ( databaseResponseMock. getDatabases ( ). size ( ) ) > 0 ) )

[*] target: assertEquals(Arrays.asList("db"), client.getDatabases())
[-] pred:  org

************************************
************************************
[+] input: getDatabasesWithEmptyResponse() { GetAllDatabasesResponseBody allDatabasesResponseBodyMock = Mockito.mock(GetAllDatabasesResponseBody.class); Mockito.when(allDatabasesResponseBodyMock.getResults()).thenReturn(Collections.emptyList()); Mono<GetAllDatabasesResponseBody> dbResponseMock = (Mono<GetAllDatabasesResponseBody>) Mockito.mock(Mono.class); Mockito.when(dbResponseMock.block(any(Duration.class))) .thenReturn(allDatabasesResponseBodyMock); Mockito.when(dbApiMock.getAllDatabasesV1()).thenReturn(dbResponseMock); Assertions."<AssertPlaceHolder>"; Mockito.verify(dbResponseMock, Mockito.times(1)).block(any(Duration.class)); }
getDatabases() { return RetryUtil.executeWithRetry( retryTemplate, (RetryCallback<List<String>, Exception>) context -> { GetAllDatabasesResponseBody response = databaseApi .getAllDatabasesV1() .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)); return Optional.ofNullable(response == null ? null : response.getResults()) .map(Collection::stream) .orElseGet(Stream::empty) .map(GetDatabaseResponseBody::getDatabaseId) .collect(Collectors.toList()); }, Collections.emptyList()); }
[*] target: assertEquals(client.getDatabases().size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( getDatabases(). getDatabases() ( ).()); ( ) )

[*] target: assertEquals(client.getDatabases().size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( getDatabases(). getDatabases() ( ).());Json ( ) )

[*] target: assertEquals(client.getDatabases().size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( getDatabases(). getDatabases() ( ).());Ms ( ) )

[*] target: assertEquals(client.getDatabases().size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( getDatabases(). getDatabases() ( ).());Path ( ) )

[*] target: assertEquals(client.getDatabases().size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( getDatabases(). getDatabases() (

************************************
************************************
[+] input: testRetentionJobArgsForTableWithPattern() { TableRetentionTask tableRetentionTask = new TableRetentionTask(jobsClient, tablesClient, tableMetadata); String columnPattern = "yyyy-MM-DD"; String columnName = "testColumnName"; int count = 1; Retention.GranularityEnum retentionGranularity = Retention.GranularityEnum.DAY; RetentionConfig retentionConfigMock = Mockito.mock(RetentionConfig.class); Mockito.when(retentionConfigMock.getColumnPattern()).thenReturn(columnPattern); Mockito.when(retentionConfigMock.getColumnName()).thenReturn(columnName); Mockito.when(retentionConfigMock.getGranularity()).thenReturn(retentionGranularity); Mockito.when(retentionConfigMock.getCount()).thenReturn(count); Mockito.when(tablesClient.getTableRetention(tableMetadata)) .thenReturn(Optional.of(retentionConfigMock)); List<String> expectedArgs = Stream.of( "--tableName", tableMetadata.fqtn(), "--columnName", columnName, "--granularity", retentionGranularity.getValue(), "--count", String.valueOf(count), "--columnPattern", columnPattern) .collect(Collectors.toList()); Assertions."<AssertPlaceHolder>"; }
getArgs() { TableMetadata tableMetadata = getMetadata(); RetentionConfig config = tablesClient.getTableRetention(tableMetadata).get(); String columnName = config.getColumnName(); List<String> jobArgs = Stream.of( "--tableName", tableMetadata.fqtn(), "--columnName", columnName, "--granularity", config.getGranularity().getValue(), "--count", Integer.toString(config.getCount())) .collect(Collectors.toList());  if (!StringUtils.isBlank(config.getColumnPattern())) { jobArgs.add("--columnPattern"); jobArgs.add(config.getColumnPattern()); } return jobArgs; }
[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask. getArgs() ( ), org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask. getArgs() ( org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask, org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org

************************************
************************************
[+] input: testRetentionJobArgsForTableWithoutPattern() { TableRetentionTask tableRetentionTask = new TableRetentionTask(jobsClient, tablesClient, tableMetadata); String columnPattern = ""; String columnName = "testColumnName"; int count = 1; Retention.GranularityEnum retentionGranularity = Retention.GranularityEnum.DAY; RetentionConfig retentionConfigMock = Mockito.mock(RetentionConfig.class); Mockito.when(retentionConfigMock.getColumnPattern()).thenReturn(columnPattern); Mockito.when(retentionConfigMock.getColumnName()).thenReturn(columnName); Mockito.when(retentionConfigMock.getGranularity()).thenReturn(retentionGranularity); Mockito.when(retentionConfigMock.getCount()).thenReturn(count); Mockito.when(tablesClient.getTableRetention(tableMetadata)) .thenReturn(Optional.of(retentionConfigMock)); List<String> expectedArgs = Stream.of( "--tableName", tableMetadata.fqtn(), "--columnName", columnName, "--granularity", retentionGranularity.getValue(), "--count", String.valueOf(count)) .collect(Collectors.toList()); Assertions."<AssertPlaceHolder>"; }
getArgs() { TableMetadata tableMetadata = getMetadata(); RetentionConfig config = tablesClient.getTableRetention(tableMetadata).get(); String columnName = config.getColumnName(); List<String> jobArgs = Stream.of( "--tableName", tableMetadata.fqtn(), "--columnName", columnName, "--granularity", config.getGranularity().getValue(), "--count", Integer.toString(config.getCount())) .collect(Collectors.toList());  if (!StringUtils.isBlank(config.getColumnPattern())) { jobArgs.add("--columnPattern"); jobArgs.add(config.getColumnPattern()); } return jobArgs; }
[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask. getArgs() ( org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask. getArgs() ( ), org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask, org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org. junit. Assert. assertThat ( tableRetentionTask. getArgs ( ), org. hamcrest. Matchers. is ( expectedArgs ) )

[*] target: assertEquals(expectedArgs, tableRetentionTask.getArgs())
[-] pred:  org

************************************
************************************
[+] input: Exception { final String tableName1 = "db.test_retention_string_partition1"; final String tableName2 = "db.test_retention_string_partition2"; final String tableName3 = "db.test_retention_string_partition3"; final String tableName4 = "db.test_retention_string_partition4"; final String tableName5 = "db.test_retention_string_partition5"; final String tableName6 = "db.test_retention_string_partition6";  List<String> rowValue = new ArrayList<>(); try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { rowValue.add("202%s-07-16"); // retention test with default columnPattern. ColumnPattern defaults to "yyyy-MM-dd" // if user does not provide it. runRetentionJobWithStringPartitionColumns( ops, tableName1, rowValue, "datePartition", "yyyy-MM-dd", "day"); verifyRowCount(ops, tableName1, 0); rowValue.clear();  rowValue.add("202%s-07-16-12"); runRetentionJobWithStringPartitionColumns( ops, tableName2, rowValue, "datePartition", "yyyy-MM-dd-HH", "day"); verifyRowCount(ops, tableName2, 0); rowValue.clear();  rowValue.add("202%s-07-2218:46:19-0700"); runRetentionJobWithStringPartitionColumns( ops, tableName3, rowValue, "datePartition", "yyyy-MM-ddHH:mm:ssZ", "day"); verifyRowCount(ops, tableName3, 0); rowValue.clear();  rowValue.add("202%s-07-16-12"); // data is not fully compliant with format. However, the substring part of data till provided // pattern is // in compliance. This record gets deleted. rowValue.add("202%s-07-16-2218:46:189:0700"); runRetentionJobWithStringPartitionColumns( ops, tableName4, rowValue, "datePartition", "yyyy-MM-dd-HH", "day"); verifyRowCount(ops, tableName4, 0); rowValue.clear();  rowValue.add("202%s-07-16-12"); // Rows with format different than the pattern provided. These rows will be deleted even // though formats are // different due to string comparison logic rowValue.add("202%s-07-2218:46:19-0700"); // Rows with current date which are not to be deleted List<Row> currentDates = ops.spark() .sql("select date_format(current_timestamp(),'yyyy-MM-dd-HH') as string") .collectAsList(); String dateToday = currentDates.get(0).toString(); rowValue.add(dateToday); runRetentionJobWithStringPartitionColumns( ops, tableName4, rowValue, "datePartition", "yyyy-MM-dd-HH", "day"); verifyRowCount(ops, tableName4, 3); rowValue.clear();  // Test case to show that difference in data format and columnPattern format is not blocking // delete ops. // Data format and pattern are different in terms of delimiter which makes them inconsistent. List<Row> currentDatesFormatMismatched = ops.spark() .sql( "select date_format(current_timestamp() - INTERVAL 5 DAYS,'yyyy-MM-dd-HH') as string") .collectAsList(); rowValue.add(currentDatesFormatMismatched.get(0).get(0).toString()); runRetentionJobWithStringPartitionColumns( ops, tableName5, rowValue, "datePartition", "yyyy-MM.dd.HH", "day"); ops.spark() .sql("select * from openhouse.db.test_retention_string_partition5") .collectAsList(); verifyRowCount(ops, tableName5, 0); rowValue.clear();  // Test to validate the latest snapshot added by retention delete ops is of type `delete` rowValue.add("202%s-07-16-12"); runRetentionJobWithStringPartitionColumns( ops, tableName6, rowValue, "datePartition", "yyyy-MM-dd-HH", "day"); verifyRowCount(ops, tableName6, 0); rowValue.clear(); List<String> operations = getSnapshotOperationTypes(ops, tableName6); Assertions."<AssertPlaceHolder>"; } }
spark() { return spark; }
[*] target: assertEquals(operations.get(0), "delete")
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals(operations.get(0), "delete")
[-] pred:  org. junit. Assert. assertNotNull ( rendered )

[*] target: assertEquals(operations.get(0), "delete")
[-] pred:  org. junit. Assert. assertEquals ( 0, rendered )

[*] target: assertEquals(operations.get(0), "delete")
[-] pred:  org. junit. Assert. assertEquals ( expected, rendered )

[*] target: assertEquals(operations.get(0), "delete")
[-] pred:  org

************************************
************************************
[+] input: Exception { final String tableName = "db.test_ofd_java"; final String testOrphanFileName = "test_orphan_file.orc"; final int numInserts = 3; try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); populateTable(ops, tableName, numInserts); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); List<Row> snapshots = ops.spark().sql(String.format("SELECT * from %s.history", tableName)).collectAsList(); Assertions.assertEquals(numInserts, snapshots.size()); log.info("Found {} snapshots", snapshots.size()); for (Row metadataFileRow : snapshots) { log.info(metadataFileRow.toString()); } Path orphanFilePath = new Path(table.location(), testOrphanFileName); FileSystem fs = ops.fs(); fs.createNewFile(orphanFilePath); log.info("Created orphan file {}", testOrphanFileName); DeleteOrphanFiles.Result result = ops.deleteOrphanFiles(table, TRASH_DIR, System.currentTimeMillis(), false); List<String> orphanFiles = Lists.newArrayList(result.orphanFileLocations().iterator()); log.info("Detected {} orphan files", orphanFiles.size()); for (String of : orphanFiles) { log.info("File {}", of); } Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, orphanFiles.size()); Assertions.assertTrue( orphanFiles.get(0).endsWith(table.location() + "/" + testOrphanFileName)); Assertions.assertFalse(fs.exists(orphanFilePath)); } }
deleteOrphanFiles( Table table, String trashDir, long olderThanTimestampMillis, boolean skipStaging) {  DeleteOrphanFiles operation = SparkActions.get(spark).deleteOrphanFiles(table); // if time filter is not provided it defaults to 3 days if (olderThanTimestampMillis > 0) { operation = operation.olderThan(olderThanTimestampMillis); } operation = operation.deleteWith( file -> { log.info("Detected orphan file {}", file); if (file.endsWith("metadata.json")) { // Don't remove metadata.json files since current metadata.json is recognized as // orphan because of inclusion of the scheme in its file path returned by catalog. // Also, we want Iceberg commits to remove the metadata.json files not the OFD job. log.info("Skipped deleting metadata file {}", file); } else if (!skipStaging) { // files present in .trash dir should not be considered orphan Path trashFolderPath = getTrashPath(table, file, trashDir); if (!file.contains(trashFolderPath.toString())) { log.info("Moving orphan file {} to {}", file, trashFolderPath); try { rename(new Path(file), trashFolderPath); } catch (IOException e) { log.error(String.format("Move operation failed for file: %s", file), e); } } } else { log.info("Deleting orphan file {}", file); try { fs().delete(new Path(file), false); } catch (IOException e) { log.error(String.format("Delete operation failed for file: %s", file), e); } } }); return operation.execute(); }
[*] target: assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org. junit. Assert. assertTrue ( result.());Json ( ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  0 )

[*] target: assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  )

[*] target: assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org

************************************
************************************
[+] input: Exception { final String tableName = "db.test_ofd_java"; final String testOrphanFileName = "test_orphan_file.orc"; final int numInserts = 3; try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); populateTable(ops, tableName, numInserts); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); Path orphanFilePath = new Path(table.location(), testOrphanFileName); FileSystem fs = ops.fs(); fs.createNewFile(orphanFilePath); log.info("Created orphan file {}", testOrphanFileName); DeleteOrphanFiles.Result result = ops.deleteOrphanFiles(table, TRASH_DIR, System.currentTimeMillis(), false); List<String> orphanFiles = Lists.newArrayList(result.orphanFileLocations().iterator()); log.info("Detected {} orphan files", orphanFiles.size()); for (String of : orphanFiles) { log.info("File {}", of); } Path trashFilePath = new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName)); Assertions.assertTrue(fs.exists(trashFilePath)); // run delete operation again and verify that files in .trash are not listed as Orphan DeleteOrphanFiles.Result result2 = ops.deleteOrphanFiles(table, TRASH_DIR, System.currentTimeMillis(), false); List<String> orphanFiles2 = Lists.newArrayList(result2.orphanFileLocations().iterator()); log.info("Detected {} orphan files", orphanFiles2.size()); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(fs.exists(trashFilePath)); } }
deleteOrphanFiles( Table table, String trashDir, long olderThanTimestampMillis, boolean skipStaging) {  DeleteOrphanFiles operation = SparkActions.get(spark).deleteOrphanFiles(table); // if time filter is not provided it defaults to 3 days if (olderThanTimestampMillis > 0) { operation = operation.olderThan(olderThanTimestampMillis); } operation = operation.deleteWith( file -> { log.info("Detected orphan file {}", file); if (file.endsWith("metadata.json")) { // Don't remove metadata.json files since current metadata.json is recognized as // orphan because of inclusion of the scheme in its file path returned by catalog. // Also, we want Iceberg commits to remove the metadata.json files not the OFD job. log.info("Skipped deleting metadata file {}", file); } else if (!skipStaging) { // files present in .trash dir should not be considered orphan Path trashFolderPath = getTrashPath(table, file, trashDir); if (!file.contains(trashFolderPath.toString())) { log.info("Moving orphan file {} to {}", file, trashFolderPath); try { rename(new Path(file), trashFolderPath); } catch (IOException e) { log.error(String.format("Move operation failed for file: %s", file), e); } } } else { log.info("Deleting orphan file {}", file); try { fs().delete(new Path(file), false); } catch (IOException e) { log.error(String.format("Delete operation failed for file: %s", file), e); } } }); return operation.execute(); }
[*] target: assertEquals(0, orphanFiles2.size())
[-] pred:  org. junit. Assert. assertThat ( result2, org. hamcrest. CoreMatchers. is ( result2 ) )

[*] target: assertEquals(0, orphanFiles2.size())
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( orphanFiles2 ) )

[*] target: assertEquals(0, orphanFiles2.size())
[-] pred:  org. junit. Assert. assertThat ( result2, org. hamcrest. CoreMatchers. is ( result1 ) )

[*] target: assertEquals(0, orphanFiles2.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, result2. size ( ) )

[*] target: assertEquals(0, orphanFiles2.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( result2. size ( ) ) > 0 ) )

************************************
************************************
[+] input: Exception { final String tableName = "db.test_ofd"; final String testOrphanFileName = "test_orphan_file.orc"; final int numInserts = 3; try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); populateTable(ops, tableName, numInserts); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); List<Row> snapshots = ops.spark().sql(String.format("SELECT * from %s.history", tableName)).collectAsList(); Assertions.assertEquals(numInserts, snapshots.size()); log.info("Found {} snapshots", snapshots.size()); for (Row metadataFileRow : snapshots) { log.info(metadataFileRow.toString()); } Path orphanFilePath = new Path(table.location(), testOrphanFileName); FileSystem fs = ops.fs(); fs.createNewFile(orphanFilePath); log.info("Created orphan file {}", testOrphanFileName); DeleteOrphanFiles.Result result = ops.deleteOrphanFiles(table, TRASH_DIR, System.currentTimeMillis(), true); List<String> orphanFiles = Lists.newArrayList(result.orphanFileLocations().iterator()); log.info("Detected {} orphan files", orphanFiles.size()); for (String of : orphanFiles) { log.info("File {}", of); } Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, orphanFiles.size()); Assertions.assertTrue( orphanFiles.get(0).endsWith(table.location() + "/" + testOrphanFileName)); Assertions.assertFalse(fs.exists(orphanFilePath)); } }
deleteOrphanFiles( Table table, String trashDir, long olderThanTimestampMillis, boolean skipStaging) {  DeleteOrphanFiles operation = SparkActions.get(spark).deleteOrphanFiles(table); // if time filter is not provided it defaults to 3 days if (olderThanTimestampMillis > 0) { operation = operation.olderThan(olderThanTimestampMillis); } operation = operation.deleteWith( file -> { log.info("Detected orphan file {}", file); if (file.endsWith("metadata.json")) { // Don't remove metadata.json files since current metadata.json is recognized as // orphan because of inclusion of the scheme in its file path returned by catalog. // Also, we want Iceberg commits to remove the metadata.json files not the OFD job. log.info("Skipped deleting metadata file {}", file); } else if (!skipStaging) { // files present in .trash dir should not be considered orphan Path trashFolderPath = getTrashPath(table, file, trashDir); if (!file.contains(trashFolderPath.toString())) { log.info("Moving orphan file {} to {}", file, trashFolderPath); try { rename(new Path(file), trashFolderPath); } catch (IOException e) { log.error(String.format("Move operation failed for file: %s", file), e); } } } else { log.info("Deleting orphan file {}", file); try { fs().delete(new Path(file), false); } catch (IOException e) { log.error(String.format("Delete operation failed for file: %s", file), e); } } }); return operation.execute(); }
[*] target: assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org. junit. Assert. assertTrue ( result.());Json ( ) )

[*] target: assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  org. junit. Assert. assertTrue ( result.());JobExecution't )

[*] target: assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  0 )

[*] target: assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFileName))))
[-] pred:  )

************************************
************************************
[+] input: Exception { final String tableName = "db.test_staged_delete"; final int numInserts = 3; final String testOrphanFile1 = "data/test_orphan_file1.orc"; final String testOrphanFile2 = "test_orphan_file2.orc"; try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); populateTable(ops, tableName, numInserts); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); Path orphanFilePath1 = new Path(table.location(), testOrphanFile1); Path orphanFilePath2 = new Path(table.location(), testOrphanFile2); FileSystem fs = ops.fs(); fs.createNewFile(orphanFilePath1); fs.createNewFile(orphanFilePath2); log.info("Created orphan file {}", testOrphanFile1); log.info("Created orphan file {}", testOrphanFile2); ops.deleteOrphanFiles(table, TRASH_DIR, System.currentTimeMillis(), false); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( fs.exists((new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile2)))))); Assertions.assertFalse(fs.exists(orphanFilePath1)); Assertions.assertFalse(fs.exists(orphanFilePath2)); // set timestamp for an orphan file in trash dir to 4 days old SparkJobUtil.setModifiedTimeStamp( fs, new Path(table.location(), new Path(TRASH_DIR, testOrphanFile1)), 4); ops.deleteStagedFiles(new Path(table.location(), TRASH_DIR), 3, true); Assertions.assertFalse( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFile1)))); Assertions.assertTrue( fs.exists(new Path(table.location(), new Path(TRASH_DIR, testOrphanFile2)))); } }
deleteOrphanFiles( Table table, String trashDir, long olderThanTimestampMillis, boolean skipStaging) {  DeleteOrphanFiles operation = SparkActions.get(spark).deleteOrphanFiles(table); // if time filter is not provided it defaults to 3 days if (olderThanTimestampMillis > 0) { operation = operation.olderThan(olderThanTimestampMillis); } operation = operation.deleteWith( file -> { log.info("Detected orphan file {}", file); if (file.endsWith("metadata.json")) { // Don't remove metadata.json files since current metadata.json is recognized as // orphan because of inclusion of the scheme in its file path returned by catalog. // Also, we want Iceberg commits to remove the metadata.json files not the OFD job. log.info("Skipped deleting metadata file {}", file); } else if (!skipStaging) { // files present in .trash dir should not be considered orphan Path trashFolderPath = getTrashPath(table, file, trashDir); if (!file.contains(trashFolderPath.toString())) { log.info("Moving orphan file {} to {}", file, trashFolderPath); try { rename(new Path(file), trashFolderPath); } catch (IOException e) { log.error(String.format("Move operation failed for file: %s", file), e); } } } else { log.info("Deleting orphan file {}", file); try { fs().delete(new Path(file), false); } catch (IOException e) { log.error(String.format("Delete operation failed for file: %s", file), e); } } }); return operation.execute(); }
[*] target: assertTrue( fs.exists(new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile1)))))
[-] pred:  org. junit. Assert. assertTrue ( fs. deleteOrphanFiles ( table, orphanFilePath1 ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile1)))))
[-] pred:  org. junit. Assert. assertTrue ( fs. deleteOrphanFiles ( table, orphanFilePath1, testOrphanFile2 ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile1)))))
[-] pred:  org. junit. Assert. assertTrue ( fs. deleteOrphanFiles ( colStr1, orphanFilePath2 ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile1)))))
[-] pred:  org. junit. Assert. assertTrue ( fs. deleteOrphanFiles ( ) )

[*] target: assertTrue( fs.exists(new Path(table.location(), (new Path(TRASH_DIR, testOrphanFile1)))))
[-] pred:  org

************************************
************************************
[+] input: Exception { final String tableName = "db.test_data_compaction"; final int numInserts = 3;  BiFunction<Operations, Table, RewriteDataFiles.Result> rewriteFunc = (ops, table) -> ops.rewriteDataFiles( table, 1024 * 1024, // 1MB 1024, // 1KB 1024 * 1024 * 2, // 2MB 2, 1, true, 10);  try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); populateTable(ops, tableName, numInserts); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); RewriteDataFiles.Result result = rewriteFunc.apply(ops, table); log.info( "Added {} data files, rewritten {} data files, rewritten {} bytes", result.addedDataFilesCount(), result.rewrittenDataFilesCount(), result.rewrittenBytesCount()); Assertions.assertEquals(1, result.addedDataFilesCount()); Assertions.assertEquals(3, result.rewrittenDataFilesCount()); } // restart the app to reload catalog cache try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { long expectedNumSnapshots = numInserts + 1; List<Long> snapshotIds = getSnapshotIds(ops, tableName); Assertions.assertEquals( expectedNumSnapshots, snapshotIds.size(), String.format( "There must be %d snapshot(s) after %d inserts and 1 data files rewrite", expectedNumSnapshots, numInserts)); // check that no rewrite happens second time Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); RewriteDataFiles.Result result = rewriteFunc.apply(ops, table); log.info( "Added {} data files, rewritten {} data files, rewritten {} bytes", result.addedDataFilesCount(), result.rewrittenDataFilesCount(), result.rewrittenBytesCount()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(0, result.rewrittenDataFilesCount()); Assertions.assertEquals(0, result.rewrittenBytesCount()); } }
getTable(String fqtn) { Catalog catalog = getCatalog(); return catalog.loadTable(TableIdentifier.parse(fqtn)); }
[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( result. getTable(table, org. hamcrest. CoreMatchers. is ( expectedNumSnapshots ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( result. getTable(table ( tableName ), org. hamcrest. CoreMatchers. is ( expectedNumSnapshots ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( result. getTable(table ( ), org. hamcrest. CoreMatchers. is ( expectedNumSnapshots ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( result. getTable(table ), org. hamcrest. CoreMatchers. is ( expectedNumSnapshots ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org

************************************
************************************
[+] input: Exception { final String tableName = "db.test_data_compaction_partitioned"; final int numInsertsPerPartition = 3; final int numDailyPartitions = 10; final int maxCommits = 5;  BiFunction<Operations, Table, RewriteDataFiles.Result> rewriteFunc = (ops, table) -> ops.rewriteDataFiles( table, 1024 * 1024, // 1MB 1024, // 1KB 1024 * 1024 * 2, // 2MB 2, 1, true, maxCommits);  try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName, true); long fixedTimestampSeconds = System.currentTimeMillis() / 1000; for (int daysLag = 0; daysLag < numDailyPartitions; ++daysLag) { populateTable(ops, tableName, numInsertsPerPartition, daysLag, fixedTimestampSeconds); } log.info("Produced the following data files:"); getDataFiles(ops, tableName).forEach(f -> log.info(f.toString())); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); RewriteDataFiles.Result result = rewriteFunc.apply(ops, table); log.info( "Added {} data files, rewritten {} data files, rewritten {} bytes", result.addedDataFilesCount(), result.rewrittenDataFilesCount(), result.rewrittenBytesCount()); Assertions.assertEquals(numDailyPartitions, result.addedDataFilesCount()); Assertions.assertEquals( numInsertsPerPartition * numDailyPartitions, result.rewrittenDataFilesCount()); result .rewriteResults() .forEach( fileGroupRewriteResult -> { log.info( "File group {} has {} added files, {} rewritten files, {} rewritten bytes", Operations.groupInfoToString(fileGroupRewriteResult.info()), fileGroupRewriteResult.addedDataFilesCount(), fileGroupRewriteResult.rewrittenDataFilesCount(), fileGroupRewriteResult.rewrittenBytesCount()); }); } // restart the app to reload catalog cache try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { // all rewritten files must be in the same commit long expectedNumSnapshots = numInsertsPerPartition * numDailyPartitions + 5; List<Triple<String, String, Long>> dataFiles = getDataFiles(ops, tableName); Assertions.assertEquals(numDailyPartitions, dataFiles.size()); log.info( String.format("Produced the following %d data files after rewrite:", dataFiles.size())); dataFiles.forEach(f -> log.info(f.toString())); List<Long> snapshotIds = getSnapshotIds(ops, tableName); Assertions.assertEquals( expectedNumSnapshots, snapshotIds.size(), String.format( "There must be %d snapshot(s) after %d inserts and %d commits during 1 data files rewrite", expectedNumSnapshots, numInsertsPerPartition * numDailyPartitions, numDailyPartitions)); Table table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); // check that no rewrite happens second time RewriteDataFiles.Result result = rewriteFunc.apply(ops, table); log.info( "Added {} data files, rewritten {} data files, rewritten {} bytes", result.addedDataFilesCount(), result.rewrittenDataFilesCount(), result.rewrittenBytesCount()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(0, result.rewrittenDataFilesCount()); Assertions.assertEquals(0, result.rewrittenBytesCount()); } }
getTable(String fqtn) { Catalog catalog = getCatalog(); return catalog.loadTable(TableIdentifier.parse(fqtn)); }
[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( dataFiles.());Line ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expectedNumSnapshots ) ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( dataFiles.()); ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expectedNumSnapshots ) ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( dataFiles. getDimensionCount ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expectedNumSnapshots ) ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( dataFiles.());Json ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expectedNumSnapshots ) ) )

[*] target: assertEquals(0, result.addedDataFilesCount())
[-] pred:  org. junit. Assert. assertThat ( dataFiles.());XMLs ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expectedNumSnapshots ) )

************************************
************************************
[+] input: Exception { try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { // test orphan delete Path tbLoc = prepareOrphanTableDirectory(ops, "db1.test_odd_orphan");  long timeThreshold = System.currentTimeMillis(); List<Path> matchingFilesBefore = new ArrayList<>(); ops.listFiles(tbLoc, file -> true, true, matchingFilesBefore); boolean orphaned = ops.deleteOrphanDirectory(tbLoc, ".trash", timeThreshold); Assertions.assertTrue(orphaned); // All files should have been moved to trash dir // Making sure nothing needs to be orphaned again orphaned = ops.deleteOrphanDirectory(tbLoc, ".trash", timeThreshold); Assertions.assertFalse(orphaned); List<Path> matchingFilesAfter = new ArrayList<>(); ops.listFiles(tbLoc, file -> true, true, matchingFilesAfter); Assertions.assertEquals(matchingFilesBefore.size(), matchingFilesAfter.size());  // test stage delete ops.deleteStagedOrphanDirectory(tbLoc, ".trash", timeThreshold); // test table dir no longer exists Assertions."<AssertPlaceHolder>"; } }
fs() throws IOException { return FileSystem.get(spark.sparkContext().hadoopConfiguration()); }
[*] target: assertFalse(ops.fs().exists(tbLoc))
[-] pred:  org. junit. Assert. assertTrue ( fs(). fs() ( timeThreshold ) )

[*] target: assertFalse(ops.fs().exists(tbLoc))
[-] pred:  org. junit. Assert. assertTrue ( fs(). fs() ( upThreshold ) )

[*] target: assertFalse(ops.fs().exists(tbLoc))
[-] pred:  org. junit. Assert. assertTrue ( fs() ( tbLoc ) )

[*] target: assertFalse(ops.fs().exists(tbLoc))
[-] pred:  org. junit. Assert. assertTrue ( fs(). fs() ( tbLoc ) )

[*] target: assertFalse(ops.fs().exists(tbLoc))
[-] pred:  org. junit. Assert. assertTrue ( fs(). fs() ( isException ) )

************************************
************************************
[+] input: Exception { final String tableName = "db.test_collect_table_stats"; final int numInserts = 3; try (Operations ops = Operations.withCatalog(getSparkSession(), meter)) { prepareTable(ops, tableName); IcebergTableStats stats = ops.collectTableStats(tableName);  // Validate empty data files case Assertions.assertEquals(stats.getNumReferencedDataFiles(), 0); Assertions.assertEquals(stats.getNumExistingMetadataJsonFiles(), 1); long modifiedTimeStamp = System.currentTimeMillis();  populateTable(ops, tableName, 1); stats = ops.collectTableStats(tableName); Assertions.assertEquals(stats.getNumReferencedDataFiles(), 1); Assertions.assertTrue(stats.getTableLastUpdatedTimestamp() >= modifiedTimeStamp);  // Capture first snapshot timestamp Table table = ops.getTable(tableName); long oldestSnapshot = table.currentSnapshot().timestampMillis();  // Add more records and validate other stats populateTable(ops, tableName, numInserts); table = ops.getTable(tableName); log.info("Loaded table {}, location {}", table.name(), table.location()); stats = ops.collectTableStats(tableName); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(stats.getNumReferencedDataFiles(), numInserts + 1); Assertions.assertEquals(stats.getNumExistingMetadataJsonFiles(), numInserts + 2); Assertions.assertEquals( stats.getCurrentSnapshotTimestamp(), table.currentSnapshot().timestampMillis()); Assertions.assertEquals(stats.getOldestSnapshotTimestamp(), oldestSnapshot); Assertions.assertEquals( stats.getNumObjectsInDirectory(), stats.getNumReferencedDataFiles() + stats.getNumExistingMetadataJsonFiles() + stats.getNumReferencedManifestFiles() + stats.getNumReferencedManifestLists()); } }
collectTableStats(String fqtn) { Table table = getTable(fqtn);  TableStatsCollector tableStatsCollector; try { tableStatsCollector = new TableStatsCollector(fs(), spark, fqtn, table); } catch (IOException e) { log.error("Unable to initialize file system for table stats collection", e); return null; }  IcebergTableStats tableStats = tableStatsCollector.collectTableStats(); return tableStats; }
[*] target: assertEquals(stats.getCurrentSnapshotId(), table.currentSnapshot().snapshotId())
[-] pred:  org. junit. Assert. assertTrue ( stats. collectTableStats ( ). isEmpty ( ) )

[*] target: assertEquals(stats.getCurrentSnapshotId(), table.currentSnapshot().snapshotId())
[-] pred:  org. junit. Assert. assertTrue ( stats. collectTableStats ( ).()); ( ) )

[*] target: assertEquals(stats.getCurrentSnapshotId(), table.currentSnapshot().snapshotId())
[-] pred:  org. junit. Assert. assertTrue ( stats. collectTableStats ( 0 ).()); ( ) )

[*] target: assertEquals(stats.getCurrentSnapshotId(), table.currentSnapshot().snapshotId())
[-] pred:  org. junit. Assert. assertTrue ( ( stats!= null ) )

[*] target: assertEquals(stats.getCurrentSnapshotId(), table.currentSnapshot().snapshotId())
[-] pred:  org. junit. Assert. assertNotNull ( stats )

************************************
************************************
[+] input: testAcceptAll() { DatabaseTableFilter filter = DatabaseTableFilter.of(".*", ".*"); for (String testName : new String[] {"", "a", "test"}) { Assertions.assertTrue(filter.applyDatabaseName(testName)); Assertions.assertTrue(filter.applyTableName(testName)); } Assertions."<AssertPlaceHolder>"; }
apply(TableMetadata metadata) { return applyDatabaseName(metadata.getDbName()) && applyTableName(metadata.getTableName()); }
[*] target: assertTrue( filter.apply(TableMetadata.builder().dbName("aba").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata metadata ) )

[*] target: assertTrue( filter.apply(TableMetadata.builder().dbName("aba").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertFalse ( filter. apply(TableMetadata metadata ) )

[*] target: assertTrue( filter.apply(TableMetadata.builder().dbName("aba").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata metadata) )

[*] target: assertTrue( filter.apply(TableMetadata.builder().dbName("aba").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertThat ( filter. apply(TableMetadata metadata ), org

[*] target: assertTrue( filter.apply(TableMetadata.builder().dbName("aba").tableName("caba").build()))
[-] pred:  org

************************************
************************************
[+] input: testFilterByDatabaseName() { DatabaseTableFilter filter = DatabaseTableFilter.of("prefix.*", ".*"); Assertions.assertTrue( filter.apply(TableMetadata.builder().dbName("prefix1").tableName("caba").build())); Assertions."<AssertPlaceHolder>"; }
apply(TableMetadata metadata) { return applyDatabaseName(metadata.getDbName()) && applyTableName(metadata.getTableName()); }
[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("prefi").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata.builder ( ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("prefi").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata.builder ( metadata ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("prefi").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata.builder ( null ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("prefi").tableName("caba").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata.builder ( ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("prefi").tableName("caba").build()))
[-] pred:  org

************************************
************************************
[+] input: testFilterByTableName() { DatabaseTableFilter filter = DatabaseTableFilter.of(".*", "prefix.*"); Assertions.assertTrue( filter.apply(TableMetadata.builder().dbName("db").tableName("prefix1").build())); Assertions."<AssertPlaceHolder>"; }
apply(TableMetadata metadata) { return applyDatabaseName(metadata.getDbName()) && applyTableName(metadata.getTableName()); }
[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("prefi").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata metadata) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("prefi").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata metadata ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("prefi").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadata ( metadata ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("prefi").build()))
[-] pred:  org. junit. Assert. assertTrue ( filter. apply(TableMetadataMetadata) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("prefi").build()))
[-] pred:  org

************************************
************************************
[+] input: testFilterExact() { DatabaseTableFilter filter = DatabaseTableFilter.of("db", "table"); Assertions.assertTrue( filter.apply(TableMetadata.builder().dbName("db").tableName("table").build())); Assertions.assertFalse( filter.apply(TableMetadata.builder().dbName("db").tableName("tabl").build())); Assertions."<AssertPlaceHolder>"; }
apply(TableMetadata metadata) { return applyDatabaseName(metadata.getDbName()) && applyTableName(metadata.getTableName()); }
[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("dbs").tableName("table").build()))
[-] pred:  org. junit. Assert. assertFalse ( filter. apply(TableMetadata metadata ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("dbs").tableName("table").build()))
[-] pred:  org. junit. Assert. assertFalse ( filter. apply(TableMetadata ( metadata ) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("dbs").tableName("table").build()))
[-] pred:  org. junit. Assert. assertFalse ( filter. apply(TableMetadata metadata) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("dbs").tableName("table").build()))
[-] pred:  org. junit. Assert. assertFalse ( filter. apply(TableMetadataMetadata) )

[*] target: assertFalse( filter.apply(TableMetadata.builder().dbName("dbs").tableName("table").build()))
[-] pred:  org

************************************
************************************
[+] input: Exception { File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ApiClient apiClient = HousetablesApiClientFactory.getInstance() .createApiClient("http://test.openhouse.com", "", tmpCert.getAbsolutePath()); "<AssertPlaceHolder>"; }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( tmpCert. exists ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( tmpCert. length, apiClient. length ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( tmpCert. length, apiClient. size ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( tmpCert. delete ( ) )

************************************
************************************
[+] input: Exception { SslContext mockSslContext = Mockito.mock(SslContext.class); File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class); HousetablesApiClientFactory housetablesApiClientFactorySpy = Mockito.spy(HousetablesApiClientFactory.getInstance()); Mockito.doReturn(mockSslContext) .when(housetablesApiClientFactorySpy) .createSslContext(anyString());  ApiClient apiClient = housetablesApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath()); Mockito.verify(housetablesApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. get ( 0 ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. getStatus ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. length ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org

************************************
************************************
[+] input: Exception { File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ApiClient apiClient = JobsApiClientFactory.getInstance() .createApiClient("http://test.openhouse.com", "", tmpCert.getAbsolutePath()); "<AssertPlaceHolder>"; }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( tmpCert. exists ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( tmpCert. length, apiClient. length ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( tmpCert. length, apiClient. size ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( tmpCert. delete ( ) )

************************************
************************************
[+] input: Exception { SslContext mockSslContext = Mockito.mock(SslContext.class); File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class); JobsApiClientFactory jobsApiClientFactorySpy = Mockito.spy(JobsApiClientFactory.getInstance()); Mockito.doReturn(mockSslContext).when(jobsApiClientFactorySpy).createSslContext(anyString());  ApiClient apiClient = jobsApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath()); Mockito.verify(jobsApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. getStatus ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient;, tmpCert. getStatus ( ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. get ( 0 ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertEquals ( apiClient, tmpCert. length ( ) )

************************************
************************************
[+] input: Exception { ApiClient apiClient = TablesApiClientFactory.getInstance() .createApiClient("http://test.openhouse.com", "", tmpCert.getAbsolutePath()); "<AssertPlaceHolder>"; }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); if (token != null && !token.isEmpty()) { apiClient.addDefaultHeader(HttpHeaders.AUTHORIZATION, String.format("Bearer %s", token)); } apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( computation )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( client )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( chart )

[*] target: assertNotNull(apiClient)
[-] pred:  org

************************************
************************************
[+] input: Exception { ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class);  ApiClient apiClient = tablesApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath());  Mockito.verify(tablesApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); if (token != null && !token.isEmpty()) { apiClient.addDefaultHeader(HttpHeaders.AUTHORIZATION, String.format("Bearer %s", token)); } apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( ( apiClient!= null ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertTrue ( ( apiClient == null ) )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( over )

[*] target: assertNotNull(apiClient)
[-] pred:  org. junit. Assert. assertNotNull ( apiClient )

************************************
************************************
[+] input: Exception { ArgumentCaptor<String> clientNameCapture = ArgumentCaptor.forClass(String.class);  tablesApiClientFactorySpy.setClientName("trino"); tablesApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath()); Mockito.verify(tablesApiClientFactorySpy, Mockito.times(1)) .setClientName(clientNameCapture.capture()); "<AssertPlaceHolder>"; }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); if (token != null && !token.isEmpty()) { apiClient.addDefaultHeader(HttpHeaders.AUTHORIZATION, String.format("Bearer %s", token)); } apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertEquals("trino", clientNameCapture.getValue())
[-] pred:  org. junit. Assert. assertNotNull ( ArgumentCaptor. clientNameCapture )

[*] target: assertEquals("trino", clientNameCapture.getValue())
[-] pred:  org. junit. Assert. assertNotNull ( clientNameCapture )

[*] target: assertEquals("trino", clientNameCapture.getValue())
[-] pred:  org. junit. Assert. assertNotNull ( ArgumentCaptor. get ( ) )

[*] target: assertEquals("trino", clientNameCapture.getValue())
[-] pred:  org. junit. Assert. assertNotNull ( arg )

[*] target: assertEquals("trino", clientNameCapture.getValue())
[-] pred:  org

************************************
************************************
[+] input: testVersioning() { Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(jobIcebergRow.getNextVersion(), jobIcebergRow.getCurrentVersion()); Assertions.assertEquals(jobIcebergRow.getNextVersion(), jobIcebergRow.getNextVersion()); }
getVersionColumnName() { return "version"; }
[*] target: assertEquals(jobIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertNull ( this. component. getVersionColumnName() )

[*] target: assertEquals(jobIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertNull ( this. component. getVersionColumnName() ( ) )

[*] target: assertEquals(jobIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertNull ( this. builder. getVersionColumnName() ( ) )

[*] target: assertEquals(jobIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertThat ((),. getVersionColumnName() ( ), org. hamcrest. CoreMatchers. is ( ""version"; ) )

[*] target: assertEquals(jobIcebergRow.getVersionColumnName(), "version")
[-] pred:  org

************************************
************************************
[+] input: testSchema() { Assertions."<AssertPlaceHolder>"; }
getSchema() { return new Schema( Types.NestedField.required(1, "jobId", Types.StringType.get()), Types.NestedField.required(2, "state", Types.StringType.get()), Types.NestedField.required(3, "version", Types.StringType.get()), Types.NestedField.required(4, "jobName", Types.StringType.get()), Types.NestedField.required(5, "clusterId", Types.StringType.get()), Types.NestedField.optional(6, "creationTimeMs", Types.LongType.get()), Types.NestedField.optional(7, "startTimeMs", Types.LongType.get()), Types.NestedField.optional(8, "finishTimeMs", Types.LongType.get()), Types.NestedField.optional(9, "lastUpdateTimeMs", Types.LongType.get()), Types.NestedField.optional(10, "jobConf", Types.StringType.get()), Types.NestedField.optional(11, "heartbeatTimeMs", Types.LongType.get()), Types.NestedField.optional(12, "executionId", Types.StringType.get())); }
[*] target: assertTrue( jobIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll( Arrays.asList( "jobId", "state", "version", "jobName", "clusterId", "creationTimeMs", "startTimeMs", "finishTimeMs", "lastUpdateTimeMs", "jobConf", "heartbeatTimeMs", "executionId")))
[-] pred:  org. junit. Assert. assertNotNull ( context. getSchema() ( ) )

[*] target: assertTrue( jobIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll( Arrays.asList( "jobId", "state", "version", "jobName", "clusterId", "creationTimeMs", "startTimeMs", "finishTimeMs", "lastUpdateTimeMs", "jobConf", "heartbeatTimeMs", "executionId")))
[-] pred:  org. junit. Assert. assertNotNull ( face. getSchema() ( ) )

[*] target: assertTrue( jobIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll( Arrays.asList( "jobId", "state", "version", "jobName", "clusterId", "creationTimeMs", "startTimeMs", "finishTimeMs", "lastUpdateTimeMs", "jobConf", "heartbeatTimeMs", "executionId")))
[-] pred:  org. junit. Assert. assertNotNull ( t. getSchema() ( ) )

[*] target: assertTrue( jobIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll( Arrays.asList( "jobId", "state", "version", "jobName", "clusterId", "creationTimeMs", "startTimeMs", "finishTimeMs", "lastUpdateTimeMs", "jobConf", "heartbeatTimeMs", "executionId")))
[-] pred:  testSchema()

[*] target: assertTrue( jobIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll( Arrays.asList( "jobId", "state", "version", "jobName", "clusterId", "creationTimeMs", "startTimeMs", "finishTimeMs", "lastUpdateTimeMs", "jobConf", "heartbeatTimeMs", "executionId")))
[-] pred:  org

************************************
************************************
[+] input: testRecord() { Assertions.assertEquals(jobIcebergRow.getRecord().getField("jobId"), "id1"); Assertions.assertEquals(jobIcebergRow.getRecord().getField("state"), "ENQUEUED"); Assertions.assertEquals(jobIcebergRow.getRecord().getField("version"), "v1"); Assertions.assertEquals(jobIcebergRow.getRecord().getField("jobName"), "jobName"); Assertions.assertEquals(jobIcebergRow.getRecord().getField("jobConf"), "jobConf"); Assertions.assertEquals(jobIcebergRow.getRecord().getField("creationTimeMs"), 1651016746000L); Assertions.assertEquals(jobIcebergRow.getRecord().getField("startTimeMs"), 1651016750000L); Assertions.assertEquals(jobIcebergRow.getRecord().getField("finishTimeMs"), 1651017746000L); Assertions.assertEquals(jobIcebergRow.getRecord().getField("lastUpdateTimeMs"), 1651017746000L); Assertions.assertEquals(jobIcebergRow.getRecord().getField("heartbeatTimeMs"), 1651017746000L); Assertions."<AssertPlaceHolder>"; }
getRecord() { GenericRecord genericRecord = GenericRecord.create(getSchema()); genericRecord.setField("jobId", jobId); genericRecord.setField("state", state); genericRecord.setField("version", version); genericRecord.setField("jobName", jobName); genericRecord.setField("clusterId", clusterId); genericRecord.setField("creationTimeMs", creationTimeMs); genericRecord.setField("startTimeMs", startTimeMs); genericRecord.setField("finishTimeMs", finishTimeMs); genericRecord.setField("lastUpdateTimeMs", lastUpdateTimeMs); genericRecord.setField("jobConf", jobConf); genericRecord.setField("heartbeatTimeMs", heartbeatTimeMs); genericRecord.setField("executionId", executionId); return genericRecord; }
[*] target: assertEquals(jobIcebergRow.getRecord().getField("executionId"), "1")
[-] pred:  org. junit. Assert. assertEquals ( 0, fixture. getRecord() ( ). size ( ) )

[*] target: assertEquals(jobIcebergRow.getRecord().getField("executionId"), "1")
[-] pred:  org. junit. Assert. assertEquals ( 0, item. getRecord() ( ). size ( ) )

[*] target: assertEquals(jobIcebergRow.getRecord().getField("executionId"), "1")
[-] pred:  org. junit. Assert. assertEquals ( 0, properties. getRecord() ( ). size ( ) )

[*] target: assertEquals(jobIcebergRow.getRecord().getField("executionId"), "1")
[-] pred:  org. junit. Assert. assertEquals ( 0, instance. getRecord() ( ). size ( ) )

[*] target: assertEquals(jobIcebergRow.getRecord().getField("executionId"), "1")
[-] pred:  org

************************************
************************************
[+] input: testToPrimaryKey() { IcebergRowPrimaryKey irpk = jobIcebergRow.getIcebergRowPrimaryKey(); Assertions."<AssertPlaceHolder>"; }
getRecord() { GenericRecord genericRecord = GenericRecord.create(getSchema()); genericRecord.setField("jobId", jobId); genericRecord.setField("state", state); genericRecord.setField("version", version); genericRecord.setField("jobName", jobName); genericRecord.setField("clusterId", clusterId); genericRecord.setField("creationTimeMs", creationTimeMs); genericRecord.setField("startTimeMs", startTimeMs); genericRecord.setField("finishTimeMs", finishTimeMs); genericRecord.setField("lastUpdateTimeMs", lastUpdateTimeMs); genericRecord.setField("jobConf", jobConf); genericRecord.setField("heartbeatTimeMs", heartbeatTimeMs); genericRecord.setField("executionId", executionId); return genericRecord; }
[*] target: assertEquals(irpk.getRecord().getField("jobId"), "id1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() ( ). size ( ) )

[*] target: assertEquals(irpk.getRecord().getField("jobId"), "id1")
[-] pred:  org. junit. Assert. assertEquals ( 0, irpk. getRecord() ( ). size ( ) )

[*] target: assertEquals(irpk.getRecord().getField("jobId"), "id1")
[-] pred:  org. junit. Assert. assertNull ( irpk. getRecord() ( ) )

[*] target: assertEquals(irpk.getRecord().getField("jobId"), "id1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() ( ) )

[*] target: assertEquals(irpk.getRecord().getField("jobId"), "id1")
[-] pred:  org

************************************
************************************
[+] input: testVersioning() { Assertions."<AssertPlaceHolder>"; Assertions.assertDoesNotThrow(() -> Integer.parseInt(userTableIcebergRow.getNextVersion())); Assertions.assertEquals(userTableIcebergRow.getCurrentVersion(), "v1"); }
getVersionColumnName() { return "version"; }
[*] target: assertEquals(userTableIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), container. getVersionColumnName() )

[*] target: assertEquals(userTableIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertEquals ( this. getVersionColumnName(), 1 )

[*] target: assertEquals(userTableIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), bean. getVersionColumnName() )

[*] target: assertEquals(userTableIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertEquals ( null, this. component. getVersionColumnName() )

[*] target: assertEquals(userTableIcebergRow.getVersionColumnName(), "version")
[-] pred:  org. junit. Assert. assertNotNull ( bean )

************************************
************************************
[+] input: testSchema() { Assertions."<AssertPlaceHolder>"; }
getSchema() { return new Schema( Types.NestedField.required(1, "databaseId", Types.StringType.get()), Types.NestedField.required(2, "tableId", Types.StringType.get()), Types.NestedField.required(3, "version", Types.StringType.get()), Types.NestedField.required(4, "metadataLocation", Types.StringType.get())); }
[*] target: assertTrue( userTableIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll(Arrays.asList("databaseId", "tableId")))
[-] pred:  org. junit. Assert. assertNotNull ( context. getSchema() ( ) )

[*] target: assertTrue( userTableIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll(Arrays.asList("databaseId", "tableId")))
[-] pred:  org. junit. Assert. assertNotNull ( bean. getSchema() ( ) )

[*] target: assertTrue( userTableIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll(Arrays.asList("databaseId", "tableId")))
[-] pred:  org. junit. Assert. assertNotNull ( t. getSchema() ( ) )

[*] target: assertTrue( userTableIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll(Arrays.asList("databaseId", "tableId")))
[-] pred:  org. junit. Assert. assertNotNull ( page. getSchema() ( ) )

[*] target: assertTrue( userTableIcebergRow.getSchema().columns().stream() .map(Types.NestedField::name) .collect(Collectors.toList()) .containsAll(Arrays.asList("databaseId", "tableId")))
[-] pred:  testSchema()

************************************
************************************
[+] input: testRecord() { Assertions.assertEquals(userTableIcebergRow.getRecord().getField("databaseId"), "db1"); Assertions.assertEquals(userTableIcebergRow.getRecord().getField("tableId"), "tb1"); Assertions.assertEquals(userTableIcebergRow.getRecord().getField("version"), "v1"); Assertions."<AssertPlaceHolder>"; }
getRecord() { GenericRecord genericRecord = GenericRecord.create(getSchema()); genericRecord.setField("databaseId", databaseId); genericRecord.setField("tableId", tableId); genericRecord.setField("version", version); genericRecord.setField("metadataLocation", metadataLocation); return genericRecord; }
[*] target: assertEquals( userTableIcebergRow.getRecord().getField("metadataLocation"), "file:/ml1")
[-] pred:  org. junit. Assert. assertEquals ( 20, fail. getRecord() ( ). size ( ) )

[*] target: assertEquals( userTableIcebergRow.getRecord().getField("metadataLocation"), "file:/ml1")
[-] pred:  org. junit. Assert. assertEquals ( 1, fail. getRecord() ( ) )

[*] target: assertEquals( userTableIcebergRow.getRecord().getField("metadataLocation"), "file:/ml1")
[-] pred:  org. junit. Assert. assertEquals ( 1, fail. getRecord() ( ). size ( ) )

[*] target: assertEquals( userTableIcebergRow.getRecord().getField("metadataLocation"), "file:/ml1")
[-] pred:  org. junit. Assert. assertEquals ( 3, fail. getRecord() ( ). size ( ) )

[*] target: assertEquals( userTableIcebergRow.getRecord().getField("metadataLocation"), "file:/ml1")
[-] pred:  org. junit. Assert. assertEquals ( 0, fail. getRecord() ( ) )

************************************
************************************
[+] input: testToPrimaryKey() { IcebergRowPrimaryKey irpk = userTableIcebergRow.getIcebergRowPrimaryKey(); Assertions.assertEquals(irpk.getRecord().getField("databaseId"), "db1"); Assertions."<AssertPlaceHolder>"; }
getRecord() { GenericRecord genericRecord = GenericRecord.create(getSchema()); genericRecord.setField("databaseId", databaseId); genericRecord.setField("tableId", tableId); genericRecord.setField("version", version); genericRecord.setField("metadataLocation", metadataLocation); return genericRecord; }
[*] target: assertEquals(irpk.getRecord().getField("tableId"), "tb1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() ( ). size ( ) )

[*] target: assertEquals(irpk.getRecord().getField("tableId"), "tb1")
[-] pred:  org. junit. Assert. assertEquals ( 0, irpk. getRecord() ( ). size ( ) )

[*] target: assertEquals(irpk.getRecord().getField("tableId"), "tb1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() )

[*] target: assertEquals(irpk.getRecord().getField("tableId"), "tb1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() ) )

[*] target: assertEquals(irpk.getRecord().getField("tableId"), "tb1")
[-] pred:  org. junit. Assert. assertEquals ( 1, irpk. getRecord() ( ) )

************************************
************************************
[+] input: testCreate() { TestIcebergRow row = ir("testCreate", 1, "data1"); TestIcebergRow putted = GENERIC_READERS_WRITERS.put(TEST_TABLE, row);  Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(row.getCurrentVersion(), putted.getCurrentVersion());  Assertions.assertTrue(row.getSchema().sameSchema(putted.getSchema()));  Assertions.assertTrue(isRecordEqualWithVersionIgnored(row, putted));  GENERIC_READERS_WRITERS.delete(TEST_TABLE, irpk("testCreate", 1)); }
put(Table table, IR icebergRow) { Snapshot snapshot = table.currentSnapshot(); Optional<IR> existingIcebergRow = get(table, snapshot, (IRPK) icebergRow.getIcebergRowPrimaryKey()); if (existingIcebergRow.isPresent() && !existingIcebergRow .get() .getRecord() .getField(existingIcebergRow.get().getVersionColumnName()) .equals(icebergRow.getCurrentVersion())) { throw new CommitFailedException( String.format( "Metadata has changed, can you try again? no longer at version : %s, instead the current " + "version is : %s", icebergRow.getCurrentVersion(), existingIcebergRow.get().getCurrentVersion())); }  Pair<DataFile, IcebergRow> dataFileAndRow = IcebergDataUtils.createRowDeltaDataFileWithNextVersion(table, icebergRow); DeleteFile deleteFile = IcebergDataUtils.createRowDeltaDeleteFile(table, icebergRow.getIcebergRowPrimaryKey());  table .newRowDelta() .addDeletes(deleteFile) .addRows(dataFileAndRow.first()) .conflictDetectionFilter(icebergRow.getIcebergRowPrimaryKey().getSearchExpression()) .validateFromSnapshot(snapshot.snapshotId()) .validateNoConflictingDeleteFiles() .validateNoConflictingDataFiles() .commit();  return (IR) dataFileAndRow.second(); }
[*] target: assertEquals(row.getNextVersion(), putted.getCurrentVersion())
[-] pred:  org. junit. Assert. assertNotNull ( putted )

[*] target: assertEquals(row.getNextVersion(), putted.getCurrentVersion())
[-] pred:  org. junit. Assert. assertNull ( putted )

[*] target: assertEquals(row.getNextVersion(), putted.getCurrentVersion())
[-] pred:  org. junit. Assert. assertFalse ( putted. putted )

[*] target: assertEquals(row.getNextVersion(), putted.getCurrentVersion())
[-] pred:  org. junit. Assert. assertEquals ( row, putted )

[*] target: assertEquals(row.getNextVersion(), putted.getCurrentVersion())
[-] pred:  org

************************************
************************************
[+] input: testUpdate() { TestIcebergRow row1 = ir("testUpdate", 1, "data1"); TestIcebergRow puttedRow1 = GENERIC_READERS_WRITERS.put(TEST_TABLE, row1);  // Test update without specifying correct version TestIcebergRow rowFail = ir("testUpdate", 1, "random", "data2"); Assertions.assertThrows( CommitFailedException.class, () -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowFail));  // Test update with correct version TestIcebergRow rowSuccess = ir("testUpdate", 1, puttedRow1.getCurrentVersion(), "data3"); TestIcebergRow puttedRowSuccess = Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(isRecordEqualWithVersionIgnored(rowSuccess, puttedRowSuccess));  GENERIC_READERS_WRITERS.delete(TEST_TABLE, irpk("testUpdate", 1)); }
put(Table table, IR icebergRow) { Snapshot snapshot = table.currentSnapshot(); Optional<IR> existingIcebergRow = get(table, snapshot, (IRPK) icebergRow.getIcebergRowPrimaryKey()); if (existingIcebergRow.isPresent() && !existingIcebergRow .get() .getRecord() .getField(existingIcebergRow.get().getVersionColumnName()) .equals(icebergRow.getCurrentVersion())) { throw new CommitFailedException( String.format( "Metadata has changed, can you try again? no longer at version : %s, instead the current " + "version is : %s", icebergRow.getCurrentVersion(), existingIcebergRow.get().getCurrentVersion())); }  Pair<DataFile, IcebergRow> dataFileAndRow = IcebergDataUtils.createRowDeltaDataFileWithNextVersion(table, icebergRow); DeleteFile deleteFile = IcebergDataUtils.createRowDeltaDeleteFile(table, icebergRow.getIcebergRowPrimaryKey());  table .newRowDelta() .addDeletes(deleteFile) .addRows(dataFileAndRow.first()) .conflictDetectionFilter(icebergRow.getIcebergRowPrimaryKey().getSearchExpression()) .validateFromSnapshot(snapshot.snapshotId()) .validateNoConflictingDeleteFiles() .validateNoConflictingDataFiles() .commit();  return (IR) dataFileAndRow.second(); }
[*] target: assertDoesNotThrow(() -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowSuccess))
[-] pred:  org. junit. Assert. assertEquals ( puttedRow1, puttedRowSuccess )

[*] target: assertDoesNotThrow(() -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowSuccess))
[-] pred:  org. junit. Assert. assertEquals ( row1, puttedRowSuccess )

[*] target: assertDoesNotThrow(() -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowSuccess))
[-] pred:  org. junit. Assert. assertNotNull ( puttedRowSuccess )

[*] target: assertDoesNotThrow(() -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowSuccess))
[-] pred:  org. junit. Assert. assertEquals ( puttedRow1, putedRowSuccess )

[*] target: assertDoesNotThrow(() -> GENERIC_READERS_WRITERS.put(TEST_TABLE, rowSuccess))
[-] pred:  org

************************************
************************************
[+] input: testPutComplexType() { // setup List<Long> complexType1 = ImmutableList.of(1L); TestIcebergRow.NestedStruct complexType2 = TestIcebergRow.NestedStruct.builder().key1("key1").key2(2L).build(); ImmutableMap<Integer, String> complexType3 = ImmutableMap.of(1, "value1"); GENERIC_READERS_WRITERS.put( TEST_TABLE, ir("testPutComplexType", 1, "v1", "data1", complexType1, complexType2, complexType3));  TestIcebergRow getRow = GENERIC_READERS_WRITERS.get(TEST_TABLE, irpk("testPutComplexType", 1)).get();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(getRow.getComplexType2(), complexType2); Assertions.assertEquals(getRow.getComplexType3(), complexType3);  // test that we can get accurate data GENERIC_READERS_WRITERS.delete(TEST_TABLE, irpk("testPutComplexType", 1)); }
get(Table table, Snapshot snapshot, IRPK primaryKey) { List<Record> records = Lists.newArrayList( IcebergGenerics.read(table) .useSnapshot(snapshot.snapshotId()) .where(primaryKey.getSearchExpression()) .build() .iterator()); if (records.size() > 1) { throw new RuntimeException( String.format( "Corrupt metadata in house table %s, more than 1 entry for primary key: %s", table.name(), primaryKey.getRecord().toString())); } else if (records.size() == 1) { return Optional.of((IR) primaryKey.buildIcebergRow(records.get(0))); } log.debug( "Didn't find requested entity with primary key: {}", primaryKey.getRecord().toString()); return Optional.empty(); }
[*] target: assertEquals(getRow.getComplexType1(), complexType1)
[-] pred:  org. junit. Assert. assertThat ( getRow, org. hamcrest. CoreMatchers. is ( complexType2 ) )

[*] target: assertEquals(getRow.getComplexType1(), complexType1)
[-] pred:  org. junit. Assert. assertThat ( getRow, org. hamcrest. CoreMatchers. is ( complexType3 ) )

[*] target: assertEquals(getRow.getComplexType1(), complexType1)
[-] pred:  org. junit. Assert. assertThat ( getRow. get(Table2, org. hamcrest. CoreMatchers. is ( complexType3 ) )

[*] target: assertEquals(getRow.getComplexType1(), complexType1)
[-] pred:  org. junit. Assert. assertThat ( getRow, org. hamcrest. CoreMatchers. is ( complexType1 ) )

[*] target: assertEquals(getRow.getComplexType1(), complexType1)
[-] pred:  org. junit. Assert. assertThat ( getRow. get(Table2, org. hamcrest. CoreMatchers. is ( complexType2 ) )

************************************
************************************
[+] input: testCreateRowDeltaDeleteFile() { DeleteFile deleteFile = IcebergDataUtils.createRowDeltaDeleteFile(TEST_TABLE, TEST_ROW_PK); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(deleteFile.format(), FileFormat.AVRO); Assertions.assertEquals(deleteFile.content(), FileContent.EQUALITY_DELETES); Assertions.assertEquals( deleteFile.equalityFieldIds(), TEST_ROW.getSchema().select("stringId", "intId").columns().stream() .map(Types.NestedField::fieldId) .collect(Collectors.toList())); }
createRowDeltaDeleteFile( Table table, IcebergRowPrimaryKey icebergRowPrimaryKey) { EncryptedOutputFile outputFile = OutputFileFactory.builderFor( table, ThreadLocalRandom.current().nextInt(), ThreadLocalRandom.current().nextLong()) .format(FileFormat.AVRO) .build() .newOutputFile(); StructLike partitionKey = null; if (!table.spec().isUnpartitioned()) { throw new UnsupportedOperationException( String.format( "Table %s is partitioned, deleting rows from partition table is not supported", table.name())); } EqualityDeleteWriter<Record> deleteWriter = createAppenderFactory(table, icebergRowPrimaryKey) .newEqDeleteWriter(outputFile, FileFormat.AVRO, partitionKey); deleteWriter.write(icebergRowPrimaryKey.getRecord()); try { deleteWriter.close(); } catch (IOException e) { throw new UncheckedIOException( String.format("Couldn't create delete file for table %s", table.name()), e); } return deleteWriter.toDeleteFile(); }
[*] target: assertEquals(deleteFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertNotNull ( deleteFile )

[*] target: assertEquals(deleteFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertTrue ( ( deleteFile!= null ) )

[*] target: assertEquals(deleteFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertNotNull ( deleteFile )

[*] target: assertEquals(deleteFile.recordCount(), 1)
[-] pred:  org. junit ). assertNotNull ( deleteFile )

[*] target: assertEquals(deleteFile.recordCount(), 1)
[-] pred:  org

************************************
************************************
[+] input: testCreateRowDeltaDataFile() { Pair<DataFile, IcebergRow> dataFileAndRow = IcebergDataUtils.createRowDeltaDataFileWithNextVersion(TEST_TABLE, TEST_ROW); DataFile dataFile = dataFileAndRow.first(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(dataFile.format(), FileFormat.AVRO); Assertions.assertEquals(dataFile.content(), FileContent.DATA); }
createRowDeltaDataFileWithNextVersion( Table table, IcebergRow icebergRow) { EncryptedOutputFile outputFile = OutputFileFactory.builderFor( table, ThreadLocalRandom.current().nextInt(), ThreadLocalRandom.current().nextLong()) .format(FileFormat.AVRO) .build() .newOutputFile(); StructLike partitionKey = null; if (!table.spec().isUnpartitioned()) { throw new UnsupportedOperationException( String.format( "Table %s is partitioned, inserting rows to partition table is not supported", table.name())); } DataWriter<Record> dataWriter = createAppenderFactory(table, icebergRow.getIcebergRowPrimaryKey()) .newDataWriter(outputFile, FileFormat.AVRO, partitionKey); GenericRecord genericRecord = icebergRow.getRecord(); genericRecord.setField(icebergRow.getVersionColumnName(), icebergRow.getNextVersion());  IcebergRow updatedIceberg = icebergRow.getIcebergRowPrimaryKey().buildIcebergRow(genericRecord); dataWriter.write(genericRecord); try { dataWriter.close(); } catch (IOException e) { throw new UncheckedIOException( String.format("Couldn't create data file for table %s", table.name()), e); } return Pair.of(dataWriter.toDataFile(), updatedIceberg); }
[*] target: assertEquals(dataFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertNotNull ( dataFile )

[*] target: assertEquals(dataFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertTrue ( dataFile. createRowDeltaDataFile ( dataFile ) )

[*] target: assertEquals(dataFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertTrue ( dataFile. createRowDeltaDataFile ( test ) )

[*] target: assertEquals(dataFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertTrue ( dataFile. createRowDeltaDataFile ( ) )

[*] target: assertEquals(dataFile.recordCount(), 1)
[-] pred:  org. junit. Assert. assertTrue ( TR. createRowDeltaDataFile ( dataFile ) )

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); Map<String, String> properties = new HashMap<>(BASE_TABLE_METADATA.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot( testSnapshots.get(testSnapshots.size() - 1))));  TableMetadata metadata = BASE_TABLE_METADATA.replaceProperties(properties); openHouseInternalTableOperations.doCommit(BASE_TABLE_METADATA, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture());  Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties(); Assertions."<AssertPlaceHolder>"; /*location, lastModifiedTime, version and appended_snapshots*/ Assertions.assertEquals( "INITIAL_VERSION", updatedProperties.get(getCanonicalFieldName("tableVersion"))); Assertions.assertEquals( testSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertTrue(updatedProperties.containsKey(getCanonicalFieldName("tableLocation"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( updatedProperties. size ( ) ) > 0 ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, updatedProperties. size ( ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. get ( 0 ). equals ( metadata ) )

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); // add 1 snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA) .setBranchSnapshot(testSnapshots.get(0), SnapshotRef.MAIN_BRANCH) .build(); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // add all snapshots to new metadata properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot( testSnapshots.get(testSnapshots.size() - 1)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture());  Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties(); Assertions."<AssertPlaceHolder>"; /*location, lastModifiedTime, version and deleted_snapshots*/ Assertions.assertEquals( TEST_LOCATION, updatedProperties.get(getCanonicalFieldName("tableVersion")));  // verify only 3 snapshots are added Assertions.assertEquals( testSnapshots.subList(1, 4).stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertTrue(updatedProperties.containsKey(getCanonicalFieldName("tableLocation"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertThat ( updatedProperties. size ( ), org

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); List<Snapshot> extraTestSnapshots = IcebergTestUtil.getExtraSnapshots(); // add all snapshots to the base metadata TableMetadata base = BASE_TABLE_METADATA; for (Snapshot snapshot : testSnapshots) { base = TableMetadata.buildFrom(base) .setBranchSnapshot(snapshot, SnapshotRef.MAIN_BRANCH) .build(); } Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // all only last 2 snapshots to new metadata List<Snapshot> newSnapshots = new ArrayList<>(); newSnapshots.addAll(testSnapshots.subList(2, 4)); newSnapshots.addAll(extraTestSnapshots); properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(newSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot( newSnapshots.get(newSnapshots.size() - 1)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture());  Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties(); Assertions."<AssertPlaceHolder>"; /*location, lastModifiedTime, version and deleted_snapshots*/ Assertions.assertEquals( TEST_LOCATION, updatedProperties.get(getCanonicalFieldName("tableVersion")));  // verify only 4 snapshots are added Assertions.assertEquals( extraTestSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("appended_snapshots")));  // verify 2 snapshots are deleted Assertions.assertEquals( testSnapshots.subList(0, 2).stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Assertions.assertTrue(updatedProperties.containsKey(getCanonicalFieldName("tableLocation"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( 5, updatedProperties.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, updatedProperties. size ( ) )

[*] target: assertEquals( 5, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

[*] target: assertEquals( 5, updatedProperties.size())
[-] pred:  org. junit. Assert. assertEquals ( 2, updatedProperties. size ( ) )

[*] target: assertEquals( 5, updatedProperties.size())
[-] pred:  org. junit. Assert. assertEquals ( new ones, updatedProperties )

[*] target: assertEquals( 5, updatedProperties.size())
[-] pred:  org. junit. Assert. assertThat ( updatedProperties. size ( ), org

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); // add all snapshots to the base metadata TableMetadata base = BASE_TABLE_METADATA; for (Snapshot snapshot : testSnapshots) { base = TableMetadata.buildFrom(base) .setBranchSnapshot(snapshot, SnapshotRef.MAIN_BRANCH) .build(); } Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // all only last 2 snapshots to new metadata properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testSnapshots.subList(2, 4))); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot( testSnapshots.get(testSnapshots.size() - 1)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture());  Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties(); Assertions."<AssertPlaceHolder>"; /*location, lastModifiedTime, version and deleted_snapshots*/ Assertions.assertEquals( TEST_LOCATION, updatedProperties.get(getCanonicalFieldName("tableVersion")));  // verify 2 snapshots are deleted Assertions.assertEquals( testSnapshots.subList(0, 2).stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Assertions.assertTrue(updatedProperties.containsKey(getCanonicalFieldName("tableLocation"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata. toString ( ) ) )

[*] target: assertEquals( 4, updatedProperties.size())
[-] pred:  org

************************************
************************************
[+] input: testDoCommitDoesntPersistForStagedTable() { TableMetadata metadata = BASE_TABLE_METADATA.replaceProperties( ImmutableMap.of(CatalogConstants.IS_STAGE_CREATE_KEY, "true")); openHouseInternalTableOperations.commit(null, metadata); // Assert TableMetadata is already set for TableOperations Assertions.assertNotNull(openHouseInternalTableOperations.currentMetadataLocation()); Assertions.assertNotNull(openHouseInternalTableOperations.current()); // Assert houseTableRepository.save() was not called for doCommit() verify(mockHouseTableRepository, times(0)).save(null); // Assert houseTableRepository.findById() was not called for doRefresh() verify(mockHouseTableRepository, times(0)).findById(null);  Assertions."<AssertPlaceHolder>"; }
doRefresh() { Optional<HouseTable> houseTable = Optional.empty(); try { houseTable = houseTableRepository.findById( HouseTablePrimaryKey.builder() .databaseId(tableIdentifier.namespace().toString()) .tableId(tableIdentifier.name()) .build()); } catch (HouseTableNotFoundException ne) { // This path is only expected during table-creation, where refresh() before creation is not // avoidable. log.debug( "Currently there's no entry that exists in House table for the key {}.{}", tableIdentifier.namespace().toString(), tableIdentifier.name()); metricsReporter.count(InternalCatalogMetricsConstant.NO_TABLE_WHEN_REFRESH); } if (!houseTable.isPresent() && currentMetadataLocation() != null) { throw new IllegalStateException( String.format( "Cannot find table %s after refresh, maybe another process deleted it", tableName())); } refreshMetadata(houseTable.map(HouseTable::getTableLocation).orElse(null)); }
[*] target: assertFalse( DynFields.builder() .hiddenImpl(BaseMetastoreTableOperations.class, "shouldRefresh") .<Boolean>build(openHouseInternalTableOperations) .get())
[-] pred:  org. junit. Assert. assertNull ( metadata )

[*] target: assertFalse( DynFields.builder() .hiddenImpl(BaseMetastoreTableOperations.class, "shouldRefresh") .<Boolean>build(openHouseInternalTableOperations) .get())
[-] pred:  org. junit. Assert. assertTrue ( ( metadata instanceof org. apache. mp. 2 ) )

[*] target: assertFalse( DynFields.builder() .hiddenImpl(BaseMetastoreTableOperations.class, "shouldRefresh") .<Boolean>build(openHouseInternalTableOperations) .get())
[-] pred:  org. junit. Assert. assertTrue ( ( metadata instanceof java. lang. String ) )

[*] target: assertFalse( DynFields.builder() .hiddenImpl(BaseMetastoreTableOperations.class, "shouldRefresh") .<Boolean>build(openHouseInternalTableOperations) .get())
[-] pred:  org. junit. Assert. assertNotNull ( metadata )

[*] target: assertFalse( DynFields.builder() .hiddenImpl(BaseMetastoreTableOperations.class, "shouldRefresh") .<Boolean>build(openHouseInternalTableOperations) .get())
[-] pred:  org

************************************
************************************
[+] input: IOException { List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots().subList(0, 2); Map<String, String> properties = new HashMap<>(BASE_TABLE_METADATA.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testWapSnapshots)); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = BASE_TABLE_METADATA.replaceProperties(properties); openHouseInternalTableOperations.doCommit(BASE_TABLE_METADATA, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify snapshots are staged but not appended Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertNotNull ( updatedProperties )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertNull ( updatedProperties )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertEquals ( 2, updatedProperties )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots().subList(0, 2); // add 1 snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA) .setBranchSnapshot(testSnapshots.get(0), SnapshotRef.MAIN_BRANCH) .build(); List<Snapshot> newSnapshots = new ArrayList<>(); newSnapshots.add(testSnapshots.get(0)); newSnapshots.addAll(testWapSnapshots); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // add staged snapshots to the new metadata properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(newSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot(newSnapshots.get(0)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify snapshots are staged but not appended Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertEquals ( newSnapshots, updatedProperties )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

[*] target: assertEquals( testWapSnapshots.stream() .map(s -> Long.toString(s.snapshotId())) .collect(Collectors.joining(",")), updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org

************************************
************************************
[+] input: IOException { List<Snapshot> testSnapshots = IcebergTestUtil.getSnapshots(); List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots(); // add 1 snapshot and 1 staged snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA) .setBranchSnapshot(testSnapshots.get(0), SnapshotRef.MAIN_BRANCH) .addSnapshot(testWapSnapshots.get(0)) .build(); List<Snapshot> newSnapshots = new ArrayList<>(); newSnapshots.add(testSnapshots.get(0)); newSnapshots.add(testWapSnapshots.get(0)); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // cherry pick the staged snapshot properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(newSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot(testWapSnapshots.get(0)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify the staged snapshot is cherry picked by use the existing one Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( Long.toString(testWapSnapshots.get(0).snapshotId()), updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertEquals ( newSnapshots, updatedProperties )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( (! ( updatedProperties. isEmpty ( ) ) ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org

************************************
************************************
[+] input: IOException { List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots(); // add 1 snapshot and 1 staged snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA) .setBranchSnapshot(testWapSnapshots.get(0), SnapshotRef.MAIN_BRANCH) .addSnapshot(testWapSnapshots.get(1)) .build(); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // cherry pick the staged snapshot whose base has changed properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testWapSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot( testWapSnapshots.get(2)))); // new snapshot properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify the staged snapshot is cherry picked by creating a new snapshot and append it Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( Long.toString(testWapSnapshots.get(2).snapshotId()), updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( Long.toString(testWapSnapshots.get(1).snapshotId()), updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertEquals ( testWapSnapshots, updatedProperties )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( ( ( updatedProperties. size ( ) ) > 2 ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( ( ( updatedProperties. size ( ) ) == 2 ) )

************************************
************************************
[+] input: IOException { List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots().subList(0, 1); // add 1 staged snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA).addSnapshot(testWapSnapshots.get(0)).build(); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // cherry pick the staged snapshot properties.put( CatalogConstants.SNAPSHOTS_JSON_KEY, SnapshotsUtil.serializedSnapshots(testWapSnapshots)); properties.put( CatalogConstants.SNAPSHOTS_REFS_KEY, SnapshotsUtil.serializeMap( IcebergTestUtil.obtainSnapshotRefsFromSnapshot(testWapSnapshots.get(0)))); properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify the staged snapshot is cherry picked by using the existing one Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( Long.toString(testWapSnapshots.get(0).snapshotId()), updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertEquals ( 2, updatedProperties. size ( ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( ( ( updatedProperties. size ( ) ) > 2 ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( ( ( updatedProperties. size ( ) ) == 2 ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. isEmpty ( ) )

************************************
************************************
[+] input: IOException { List<Snapshot> testWapSnapshots = IcebergTestUtil.getWapSnapshots().subList(0, 1); // add 1 staged snapshot to the base metadata TableMetadata base = TableMetadata.buildFrom(BASE_TABLE_METADATA).addSnapshot(testWapSnapshots.get(0)).build(); Map<String, String> properties = new HashMap<>(base.properties()); try (MockedStatic<TableMetadataParser> ignoreWriteMock = Mockito.mockStatic(TableMetadataParser.class)) { // delete staged snapshots in the new metadata properties.put(getCanonicalFieldName("tableLocation"), TEST_LOCATION);  TableMetadata metadata = base.replaceProperties(properties); openHouseInternalTableOperations.doCommit(base, metadata); Mockito.verify(mockHouseTableMapper).toHouseTable(tblMetadataCaptor.capture()); Map<String, String> updatedProperties = tblMetadataCaptor.getValue().properties();  // verify nothing happens Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("appended_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("cherry_picked_snapshots"))); Assertions.assertEquals( null, updatedProperties.get(getCanonicalFieldName("deleted_snapshots"))); Mockito.verify(mockHouseTableRepository, Mockito.times(1)).save(Mockito.eq(mockHouseTable)); } }
doCommit(TableMetadata base, TableMetadata metadata) { int version = currentVersion() + 1; CommitStatus commitStatus = CommitStatus.FAILURE;  /* This method adds no fs scheme, and it persists in HTS that way. */ final String newMetadataLocation = rootMetadataFileLocation(metadata, version);  HouseTable houseTable = HouseTable.builder().build(); try { // Now that we have metadataLocation we stamp it in metadata property. Map<String, String> properties = new HashMap<>(metadata.properties()); failIfRetryUpdate(properties);  String currentTsString = String.valueOf(Instant.now(Clock.systemUTC()).toEpochMilli()); properties.put(getCanonicalFieldName("lastModifiedTime"), currentTsString); if (base == null) { properties.put(getCanonicalFieldName("creationTime"), currentTsString); } properties.put( getCanonicalFieldName("tableVersion"), properties.getOrDefault( getCanonicalFieldName("tableLocation"), CatalogConstants.INITIAL_VERSION)); properties.put(getCanonicalFieldName("tableLocation"), newMetadataLocation);  String serializedSnapshotsToPut = properties.remove(CatalogConstants.SNAPSHOTS_JSON_KEY); String serializedSnapshotRefs = properties.remove(CatalogConstants.SNAPSHOTS_REFS_KEY); boolean isStageCreate = Boolean.parseBoolean(properties.remove(CatalogConstants.IS_STAGE_CREATE_KEY)); logPropertiesMap(properties);  TableMetadata updatedMetadata = metadata.replaceProperties(properties);  if (serializedSnapshotsToPut != null) { List<Snapshot> snapshotsToPut = SnapshotsUtil.parseSnapshots(fileIO, serializedSnapshotsToPut); Pair<List<Snapshot>, List<Snapshot>> snapshotsDiff = SnapshotsUtil.symmetricDifferenceSplit(snapshotsToPut, updatedMetadata.snapshots()); List<Snapshot> appendedSnapshots = snapshotsDiff.getFirst(); List<Snapshot> deletedSnapshots = snapshotsDiff.getSecond(); snapshotInspector.validateSnapshotsUpdate( updatedMetadata, appendedSnapshots, deletedSnapshots); Map<String, SnapshotRef> snapshotRefs = serializedSnapshotRefs == null ? new HashMap<>() : SnapshotsUtil.parseSnapshotRefs(serializedSnapshotRefs); updatedMetadata = maybeAppendSnapshots(updatedMetadata, appendedSnapshots, snapshotRefs, true); updatedMetadata = maybeDeleteSnapshots(updatedMetadata, deletedSnapshots); }  final TableMetadata updatedMtDataRef = updatedMetadata; metricsReporter.executeWithStats( () -> TableMetadataParser.write(updatedMtDataRef, io().newOutputFile(newMetadataLocation)), InternalCatalogMetricsConstant.METADATA_UPDATE_LATENCY);  houseTable = houseTableMapper.toHouseTable(updatedMetadata);  if (!isStageCreate) { houseTableRepository.save(houseTable); } else { /** * Refresh current metadata for staged tables from newly created metadata file and disable * "forced refresh" in {@link OpenHouseInternalTableOperations#commit(TableMetadata, * TableMetadata)} */ refreshFromMetadataLocation(newMetadataLocation); } commitStatus = CommitStatus.SUCCESS; } catch (InvalidIcebergSnapshotException e) { throw new BadRequestException(e, e.getMessage()); } catch (CommitFailedException e) { throw e; } catch (HouseTableCallerException | HouseTableNotFoundException | HouseTableConcurrentUpdateException e) { throw new CommitFailedException(e); } catch (Throwable persistFailure) { // Try to reconnect and determine the commit status for unknown exception log.error( "Encounter unexpected error while updating metadata.json for table:" + tableIdentifier, persistFailure); commitStatus = checkCommitStatus(newMetadataLocation, metadata); switch (commitStatus) { case SUCCESS: log.debug("Calling doCommit succeeded"); break; case FAILURE: // logging error and exception-throwing co-existence is needed, given the exception // handler in // org.apache.iceberg.BaseMetastoreCatalog.BaseMetastoreCatalogTableBuilder.create swallow // the // nested exception information. log.error("Exception details:", persistFailure); throw new CommitFailedException( persistFailure, String.format( "Persisting metadata file %s at version %s for table %s failed while persisting to house table", newMetadataLocation, version, GSON.toJson(houseTable))); case UNKNOWN: throw new CommitStateUnknownException(persistFailure); } } finally { switch (commitStatus) { case FAILURE: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_FAILED_CTR); break; case UNKNOWN: metricsReporter.count(InternalCatalogMetricsConstant.COMMIT_STATE_UNKNOWN); break; default: break; /*should never happen, kept to silence SpotBugs*/ } } }
[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( metadata ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertTrue ( updatedProperties. contains ( base ) )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org. junit. Assert. assertNotNull ( updatedProperties )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  )

[*] target: assertEquals( null, updatedProperties.get(getCanonicalFieldName("staged_snapshots")))
[-] pred:  org

************************************
************************************
[+] input: IOException { // The default file attribute that sets the permission as 777 when a file is created. FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("rwxrwxrwx"));  // Mock DataFile and ManifestFile Snapshot mockSnapshot = Mockito.mock(org.apache.iceberg.Snapshot.class); Path tempFile1 = Files.createFile(tempDir.resolve("data1.parquet"), attr); Path tempFile2 = Files.createFile(tempDir.resolve("data2.parquet"), attr); Path tempFile3 = Files.createFile(tempDir.resolve("manifest"), attr);  // Mock FileIO FileIO fileIO = Mockito.mock(org.apache.iceberg.io.FileIO.class);  List<DataFile> dataFileList = ImmutableList.of( createDataFile(tempFile1.toString()), createDataFile(tempFile2.toString()));  ManifestWriter<DataFile> manifestWriter = ManifestFiles.write( PartitionSpec.unpartitioned(), HadoopOutputFile.fromLocation(tempFile3.toString(), new Configuration())); manifestWriter.close();  Mockito.when(mockSnapshot.allManifests(fileIO)) .thenReturn(ImmutableList.of(manifestWriter.toManifestFile())); Mockito.when(mockSnapshot.addedDataFiles(fileIO)).thenReturn(dataFileList); snapshotInspector.secureSnapshot(mockSnapshot, fileIO);  /* Verify the perms of files are modified as com.linkedin.openhouse.internal.catalog.MockApplication.perm does */ FileSystem fileSystem = FileSystem.get(new Configuration()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile2.toString())) .getPermission(), MockApplication.perm); Assertions.assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile3.toString())) .getPermission(), MockApplication.perm); }
secureSnapshot(Snapshot providedSnapshot, FileIO fileIO) throws UncheckedIOException { secureDataFile(providedSnapshot.addedDataFiles(fileIO)); secureDeleteFile(providedSnapshot.addedDeleteFiles(fileIO)); secureManifestFile(providedSnapshot.allManifests(fileIO)); }
[*] target: assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile1.toString())) .getPermission(), MockApplication.perm)
[-] pred:  org. junit. Assert. assertNotNull ( fileSystem )

[*] target: assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile1.toString())) .getPermission(), MockApplication.perm)
[-] pred:  org. junit. Assert. assertTrue ( fileSystem. secureFileStatus ( ) )

[*] target: assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile1.toString())) .getPermission(), MockApplication.perm)
[-] pred:  org. junit. Assert. assertTrue ( fileSystem. secureFileStatus ( n ) )

[*] target: assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile1.toString())) .getPermission(), MockApplication.perm)
[-] pred:  org. junit. Assert. assertTrue ( fileSystem. secureFileaction ( ) )

[*] target: assertEquals( fileSystem .getFileStatus(new org.apache.hadoop.fs.Path(tempFile1.toString())) .getPermission(), MockApplication.perm)
[-] pred:  org

************************************
************************************
[+] input: testSymmetricDifference() { Assertions.assertEquals( Pair.of(Collections.emptyList(), Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, testSnapshots)); Assertions.assertEquals( Pair.of(Collections.emptyList(), testSnapshots), SnapshotsUtil.symmetricDifferenceSplit(Collections.emptyList(), testSnapshots)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( Pair.of(testSnapshots.subList(0, 1), testSnapshots.subList(3, 4)), SnapshotsUtil.symmetricDifferenceSplit( testSnapshots.subList(0, 3), testSnapshots.subList(1, 4))); }
symmetricDifferenceSplit( List<Snapshot> first, List<Snapshot> second) { Set<Long> firstSnapshotIds = first.stream().map(Snapshot::snapshotId).collect(Collectors.toSet()); Set<Long> secondSnapshotIds = second.stream().map(Snapshot::snapshotId).collect(Collectors.toSet()); return Pair.of( first.stream() .filter(s -> !secondSnapshotIds.contains(s.snapshotId())) .collect(Collectors.toList()), second.stream() .filter(s -> !firstSnapshotIds.contains(s.snapshotId())) .collect(Collectors.toList())); }
[*] target: assertEquals( Pair.of(testSnapshots, Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, Collections.emptyList()))
[-] pred:  org. junit. Assert. assertTrue ( ( ( testSnapshots)); Assertions.assertEquals( Pair.of(Collections.emptyList ( ) ) == 2 ) )

[*] target: assertEquals( Pair.of(testSnapshots, Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, Collections.emptyList()))
[-] pred:  org. junit. Assert. assertTrue ( ( ( testSnapshots)); Assertions.assertEquals( Pair.of(Collections.emptyList ( ) ) == null ) )

[*] target: assertEquals( Pair.of(testSnapshots, Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, Collections.emptyList()))
[-] pred:  org. junit. Assert. assertTrue ( ( ( testSnapshots)); Assertions. getDimensionList ( ) ) == 2 ) )

[*] target: assertEquals( Pair.of(testSnapshots, Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, Collections.emptyList()))
[-] pred:  org. junit. Assert. assertTrue ( ( ( testSnapshots)); Assertions. getDimensionCount ( ) ) == 2 ) )

[*] target: assertEquals( Pair.of(testSnapshots, Collections.emptyList()), SnapshotsUtil.symmetricDifferenceSplit(testSnapshots, Collections.emptyList()))
[-] pred:  org

************************************
************************************
[+] input: testGetLocalFileIO() { // local storage is configured Assertions."<AssertPlaceHolder>"; }
getFileIO(StorageType.Type storageType) throws IllegalArgumentException { Supplier<? extends RuntimeException> exceptionSupplier = () -> new IllegalArgumentException(storageType.getValue() + " is not configured"); if (HDFS.equals(storageType)) { return Optional.ofNullable(hdfsFileIO).orElseThrow(exceptionSupplier); } else if (LOCAL.equals(storageType)) { return Optional.ofNullable(localFileIO).orElseThrow(exceptionSupplier); } else if (S3.equals(storageType)) { return Optional.ofNullable(s3FileIO).orElseThrow(exceptionSupplier); } else if (ADLS.equals(storageType)) { return Optional.ofNullable(adlsFileIO).orElseThrow(exceptionSupplier); } else { throw new IllegalArgumentException("FileIO not supported for storage type: " + storageType); } }
[*] target: assertNotNull(fileIOManager.getFileIO(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( true, local storage. getFileIO(StorageType ( storageType ) )

[*] target: assertNotNull(fileIOManager.getFileIO(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( true, local storage. getFileIO(StorageType.Type. isExceptionException )

[*] target: assertNotNull(fileIOManager.getFileIO(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( true, local storage. getFileIO(StorageType.Type. getDataType ( ) )

[*] target: assertNotNull(fileIOManager.getFileIO(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( true, local storage. getFileIO(StorageType.Type. is )

[*] target: assertNotNull(fileIOManager.getFileIO(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( true, local storage. getFileIO(StorageType.Type. isExceptionThrown )

************************************
************************************
[+] input: testRepoFindById() { EntityResponseBodyUserTable response = new EntityResponseBodyUserTable(); response.entity(houseTableMapper.toUserTable(HOUSE_TABLE)); mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(response)) .addHeader("Content-Type", "application/json"));  HouseTable result = htsRepo .findById( HouseTablePrimaryKey.builder() .tableId(HOUSE_TABLE.getTableId()) .databaseId(HOUSE_TABLE.getDatabaseId()) .build()) .get();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(result.getDatabaseId(), HOUSE_TABLE.getDatabaseId()); Assertions.assertEquals(result.getTableLocation(), HOUSE_TABLE.getTableLocation()); Assertions.assertEquals(result.getTableVersion(), HOUSE_TABLE.getTableVersion()); }
findById(HouseTablePrimaryKey houseTablePrimaryKey) {  return getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .execute( context -> apiInstance .getUserTable( houseTablePrimaryKey.getDatabaseId(), houseTablePrimaryKey.getTableId()) .map(EntityResponseBodyUserTable::getEntity) .map(houseTableMapper::toHouseTable) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertEquals ( result, response )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertSame ( result, response )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertEquals ( response, result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org

************************************
************************************
[+] input: testRepoSave() { EntityResponseBodyUserTable putResponse = new EntityResponseBodyUserTable(); putResponse.entity(houseTableMapper.toUserTable(HOUSE_TABLE)); mockHtsServer.enqueue( new MockResponse() .setResponseCode(201) .setBody((new Gson()).toJson(putResponse)) .addHeader("Content-Type", "application/json"));  HouseTable result = htsRepo.save(HOUSE_TABLE); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(result.getDatabaseId(), HOUSE_TABLE.getDatabaseId()); Assertions.assertEquals(result.getTableLocation(), HOUSE_TABLE.getTableLocation()); Assertions.assertEquals(result.getTableVersion(), HOUSE_TABLE.getTableVersion()); Assertions.assertEquals(result.getStorageType(), HOUSE_TABLE.getStorageType()); }
save(HouseTable entity) { CreateUpdateEntityRequestBodyUserTable requestBody = new CreateUpdateEntityRequestBodyUserTable().entity(houseTableMapper.toUserTable(entity));  return getHtsRetryTemplate(Arrays.asList(IllegalStateException.class)) .execute( context -> apiInstance .putUserTable(requestBody) .map(EntityResponseBodyUserTable::getEntity) .map(houseTableMapper::toHouseTable) .onErrorResume(this::handleHtsHttpError) .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertEquals ( new new HouseTable ( 0, 0, 2, 2, 3 ), result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( expected ), result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. data. container. HouseTable ( ), result )

[*] target: assertEquals(result.getTableId(), HOUSE_TABLE.getTableId())
[-] pred:  org

************************************
************************************
[+] input: testListOfTablesInDatabase() { List<UserTable> tables = new ArrayList<>(); tables.add(houseTableMapper.toUserTable(HOUSE_TABLE)); tables.add(houseTableMapper.toUserTable(HOUSE_TABLE_SAME_DB)); GetAllEntityResponseBodyUserTable listResponse = new GetAllEntityResponseBodyUserTable();  /** * Need to use the reflection trick to help initializing the object with generated class {@link * GetAllUserTablesResponseBody}, which somehow doesn't provided proper setter in the generated * code. */ Field resultField = ReflectionUtils.findField(GetAllEntityResponseBodyUserTable.class, "results"); Assertions.assertNotNull(resultField); ReflectionUtils.makeAccessible(resultField); ReflectionUtils.setField(resultField, listResponse, tables);  mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(listResponse)) .addHeader("Content-Type", "application/json")); List<HouseTable> returnList = htsRepo.findAllByDatabaseId(HOUSE_TABLE.getDatabaseId()); "<AssertPlaceHolder>"; }
findAllByDatabaseId(String databaseId) { Map<String, String> params = new HashMap<>(); if (Strings.isNotEmpty(databaseId)) { params.put("databaseId", databaseId); }  return getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .execute( context -> apiInstance .getUserTables(params) .map(GetAllEntityResponseBodyUserTable::getResults) .flatMapMany(Flux::fromIterable) .map(houseTableMapper::toHouseTable) .collectList() .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThat(returnList).hasSize(2)
[-] pred:  org. junit. Assert. assertEquals ( new org.>(); tables. size ( ), returnList. size ( ) )

[*] target: assertThat(returnList).hasSize(2)
[-] pred:  org. junit. Assert. assertNotNull ( returnList )

[*] target: assertThat(returnList).hasSize(2)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( millisTable> tables ), returnList )

[*] target: assertThat(returnList).hasSize(2)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList < orgHouseTable > ( ), returnList )

[*] target: assertThat(returnList).hasSize(2)
[-] pred:  org

************************************
************************************
[+] input: testListWithEmptyResult() { // Shouldn't expect failure but gracefully getting an empty list. List<UserTable> tables = new ArrayList<>(); GetAllEntityResponseBodyUserTable listResponse = new GetAllEntityResponseBodyUserTable(); Field resultField = ReflectionUtils.findField(GetAllEntityResponseBodyUserTable.class, "results"); Assertions.assertNotNull(resultField); ReflectionUtils.makeAccessible(resultField); ReflectionUtils.setField(resultField, listResponse, tables);  mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(listResponse)) .addHeader("Content-Type", "application/json"));  List<HouseTable> returnList = htsRepo.findAllByDatabaseId(HOUSE_TABLE.getDatabaseId()); "<AssertPlaceHolder>"; }
findAllByDatabaseId(String databaseId) { Map<String, String> params = new HashMap<>(); if (Strings.isNotEmpty(databaseId)) { params.put("databaseId", databaseId); }  return getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .execute( context -> apiInstance .getUserTables(params) .map(GetAllEntityResponseBodyUserTable::getResults) .flatMapMany(Flux::fromIterable) .map(houseTableMapper::toHouseTable) .collectList() .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThat(returnList).hasSize(0)
[-] pred:  org. junit. Assert. assertNotNull ( returnList )

[*] target: assertThat(returnList).hasSize(0)
[-] pred:  org. junit. Assert. assertEquals ( new<HouseTable> list, returnList )

[*] target: assertThat(returnList).hasSize(0)
[-] pred:  org. junit. Assert. assertNull ( returnList )

[*] target: assertThat(returnList).hasSize(0)
[-] pred:  returnList )

[*] target: assertThat(returnList).hasSize(0)
[-] pred:  )

************************************
************************************
[+] input: testListOfAllTables() { List<UserTable> tables = new ArrayList<>(); tables.add(houseTableMapper.toUserTable(HOUSE_TABLE)); tables.add(houseTableMapper.toUserTable(HOUSE_TABLE_SAME_DB)); tables.add(houseTableMapper.toUserTable(HOUSE_TABLE_DIFF_DB)); GetAllEntityResponseBodyUserTable listResponse = new GetAllEntityResponseBodyUserTable();  Field resultField = ReflectionUtils.findField(GetAllEntityResponseBodyUserTable.class, "results"); Assertions.assertNotNull(resultField); ReflectionUtils.makeAccessible(resultField); ReflectionUtils.setField(resultField, listResponse, tables);  mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(listResponse)) .addHeader("Content-Type", "application/json")); Iterable<HouseTable> returnList = htsRepo.findAll(); "<AssertPlaceHolder>"; }
findAll() { return this.findAllByDatabaseId(""); }
[*] target: assertThat(returnList).hasSize(3)
[-] pred:  org. junit. Assert. assertNotNull ( returnList )

[*] target: assertThat(returnList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), returnList. findAll() ( ) )

[*] target: assertThat(returnList).hasSize(3)
[-] pred:  org. junit. Assert. assertNotNull ( returnList. findAll() ( ) )

[*] target: assertThat(returnList).hasSize(3)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( outputList ), returnList )

[*] target: assertThat(returnList).hasSize(3)
[-] pred:  org

************************************
************************************
[+] input: testRetryForFindByIdHtsCall() { // Injecting a Gateway timeout and an internal server error, will be translated to retryable // error. In fact only 500, 502, 503, 504 are retryable based on // com.linkedin.openhouse.internal.catalog.repository.HtsRetryUtils.getHtsRetryTemplate AND // com.linkedin.openhouse.internal.catalog.repository.HouseTableRepositoryImpl.handleHtsHttpError // All of them are covered in the following two tests. // Then inject a non retryable error(409) which should terminate the retry attempt and exception // will be // thrown directly. mockHtsServer.enqueue( new MockResponse() .setResponseCode(504) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(500) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(409) .setBody("") .addHeader("Content-Type", "application/json"));  HouseTablePrimaryKey testKey = HouseTablePrimaryKey.builder() .tableId(HOUSE_TABLE.getTableId()) .databaseId(HOUSE_TABLE.getDatabaseId()) .build();  CustomRetryListener retryListener = new CustomRetryListener(); ((HouseTableRepositoryImpl) htsRepo) .getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .registerListener(retryListener); Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount();  Assertions.assertEquals(actualRetryCount, HtsRetryUtils.MAX_RETRY_ATTEMPT); }
findById(HouseTablePrimaryKey houseTablePrimaryKey) {  return getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .execute( context -> apiInstance .getUserTable( houseTablePrimaryKey.getDatabaseId(), houseTablePrimaryKey.getTableId()) .map(EntityResponseBodyUserTable::getEntity) .map(houseTableMapper::toHouseTable) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertEquals ( testKey, retryListener )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertNotNull ( retryListener )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertNull ( retryListener )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  )

************************************
************************************
[+] input: testNoRetryForStateUnkown() {  for (int i : Arrays.asList(500, 501, 502, 503, 504)) { mockHtsServer.enqueue( new MockResponse() .setResponseCode(i) .setBody("") .addHeader("Content-Type", "application/json")); CustomRetryListener retryListener = new CustomRetryListener(); ((HouseTableRepositoryImpl) htsRepo) .getHtsRetryTemplate(Arrays.asList(IllegalStateException.class)) .registerListener(retryListener); Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount(); Assertions.assertEquals(actualRetryCount, 1); } }
save(HouseTable entity) { CreateUpdateEntityRequestBodyUserTable requestBody = new CreateUpdateEntityRequestBodyUserTable().entity(houseTableMapper.toUserTable(entity));  return getHtsRetryTemplate(Arrays.asList(IllegalStateException.class)) .execute( context -> apiInstance .putUserTable(requestBody) .map(EntityResponseBodyUserTable::getEntity) .map(houseTableMapper::toHouseTable) .onErrorResume(this::handleHtsHttpError) .block(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThrows( HouseTableRepositoryStateUnkownException.class, () -> htsRepo.save(HOUSE_TABLE))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retriesListener )

[*] target: assertThrows( HouseTableRepositoryStateUnkownException.class, () -> htsRepo.save(HOUSE_TABLE))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, tryListener )

[*] target: assertThrows( HouseTableRepositoryStateUnkownException.class, () -> htsRepo.save(HOUSE_TABLE))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, test )

[*] target: assertThrows( HouseTableRepositoryStateUnkownException.class, () -> htsRepo.save(HOUSE_TABLE))
[-] pred:  org

[*] target: assertThrows( HouseTableRepositoryStateUnkownException.class, () -> htsRepo.save(HOUSE_TABLE))
[-] pred:  )

************************************
************************************
[+] input: testRetryForHtsFindByIdCallOnConcurrentException() { mockHtsServer.enqueue( new MockResponse() .setResponseCode(409) .setBody("") .addHeader("Content-Type", "application/json"));  CustomRetryListener retryListener = new CustomRetryListener(); ((HouseTableRepositoryImpl) htsRepo) .getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .registerListener(retryListener);  HouseTablePrimaryKey testKey = HouseTablePrimaryKey.builder() .tableId(HOUSE_TABLE.getTableId()) .databaseId(HOUSE_TABLE.getDatabaseId()) .build(); Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount(); Assertions.assertEquals(actualRetryCount, 1); }
findById(HouseTablePrimaryKey houseTablePrimaryKey) {  return getHtsRetryTemplate( Arrays.asList( HouseTableRepositoryStateUnkownException.class, IllegalStateException.class)) .execute( context -> apiInstance .getUserTable( houseTablePrimaryKey.getDatabaseId(), houseTablePrimaryKey.getTableId()) .map(EntityResponseBodyUserTable::getEntity) .map(houseTableMapper::toHouseTable) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertEquals ( HouseTablePrimaryKey, testKey )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertEquals ( testKey, retryListener. container )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org. junit. Assert. assertNotNull ( testKey )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  )

[*] target: assertThrows( HouseTableConcurrentUpdateException.class, () -> htsRepo.findById(testKey))
[-] pred:  org

************************************
************************************
[+] input: testNoPoliciesInMetadata() { TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(Collections.emptyMap()); Policies updatedPolicies = mock(OpenHouseTableOperations.class).buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is (()); ) )

[*] target: assertNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNull ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNull ( updatedPolicies. buildUpdatedPolicies(TableMetadata ( metadata ) )

************************************
************************************
[+] input: testPoliciesInMetadataNoUpdate() { Map<String, String> props = new HashMap<>(); props.put("policies", "{"retention": {"count": "1", "granularity": "DAY"}}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.DAY, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( updatedPolicies )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertEquals ( 0, updatedPolicies. buildUpdatedPolicies ( metadata ). size ( ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. Matchers. is ( true ) )

************************************
************************************
[+] input: testNoPoliciesButUpdateExists() { Map<String, String> props = new HashMap<>(); props.put("updated.openhouse.policy", "{"sharingEnabled": true}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getSharingEnabled().booleanValue()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( updatedPolicies )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( 0 ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org

************************************
************************************
[+] input: testPoliciesExistUpdateExist() { Map<String, String> props = new HashMap<>(); props.put("policies", "{"retention": {"count": "1", "granularity": "DAY"}}"); props.put("updated.openhouse.policy", "{"sharingEnabled": true}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getSharingEnabled().booleanValue()); Assertions.assertEquals(1, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.DAY, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( updatedPolicies )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(TableOperations ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(TableOperations )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org

************************************
************************************
[+] input: testPoliciesSharingAndRetentionUpdate() { Map<String, String> props = new HashMap<>(); props.put( "policies", "{"retention": {"count": "1", "granularity": "DAY"}, "sharingEnabled": true}"); props.put( "updated.openhouse.policy", "{"retention": {"count": "5", "granularity": "HOUR"}, "sharingEnabled": false}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(updatedPolicies.getSharingEnabled().booleanValue()); Assertions.assertEquals(5, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.HOUR, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( updatedPolicies )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertEquals ( openHouseTableOperations. buildUpdatedPolicies ( metadata ), updatedPolicies )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(TableOperations. openHouseTableOperations )

************************************
************************************
[+] input: testNoColumnPolicyTagsButUpdateExists() { Map<String, String> props = new HashMap<>(); props.put( "updated.openhouse.policy", "{ "columnTags": " + "{ "col1": {"tags": ["PII"]}} }"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Set<PolicyTag.TagsEnum> tags = new HashSet<PolicyTag.TagsEnum>(Arrays.asList(PolicyTag.TagsEnum.PII)); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getColumnTags().containsKey("col1")); Assertions.assertEquals(tags, updatedPolicies.getColumnTags().get("col1").getTags()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ). isEmpty ( ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertThat ( updatedPolicies. buildUpdatedPolicies ( metadata ), org. hamcrest. CoreMatchers. is ( tags ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ).()); ( ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

************************************
************************************
[+] input: testColumnPolicyTagsExistUpdateExists() { Map<String, String> props = new HashMap<>(); props.put("policies", "{ "columnTags": " + "{ "col1": {"tags": ["PII"]}} }"); props.put( "updated.openhouse.policy", "{ "columnTags": " + "{ "col2": {"tags": ["HC"]}} }"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Set<PolicyTag.TagsEnum> tagPII = new HashSet<PolicyTag.TagsEnum>(Arrays.asList(PolicyTag.TagsEnum.PII)); Set<PolicyTag.TagsEnum> tagHC = new HashSet<PolicyTag.TagsEnum>(Arrays.asList(PolicyTag.TagsEnum.HC)); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getColumnTags().containsKey("col1")); Assertions.assertEquals(tagPII, updatedPolicies.getColumnTags().get("col1").getTags()); Assertions.assertTrue(updatedPolicies.getColumnTags().containsKey("col2")); Assertions.assertEquals(tagHC, updatedPolicies.getColumnTags().get("col2").getTags()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ). isEmpty ( ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertEquals ( tagPII, updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(tagPII )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(tagPII ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org

************************************
************************************
[+] input: testColumnPolicyTagsExistUpdateExistingPolicyTags() { Map<String, String> props = new HashMap<>(); props.put("policies", "{ "columnTags": " + "{ "col1": {"tags": ["PII"]}} }"); props.put( "updated.openhouse.policy", "{ "columnTags": " + "{ "col1": {"tags": ["HC"]}} }"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Set<PolicyTag.TagsEnum> tagHC = new HashSet<PolicyTag.TagsEnum>(Arrays.asList(PolicyTag.TagsEnum.HC)); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getColumnTags().containsKey("col1")); Assertions.assertEquals(tagHC, updatedPolicies.getColumnTags().get("col1").getTags()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies ( metadata ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(tagHC ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(vC ) )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(tagHC )

[*] target: assertNotNull(updatedPolicies)
[-] pred:  org. junit. Assert. assertTrue ( updatedPolicies. buildUpdatedPolicies(vHC ) )

************************************
************************************
[+] input: Exception { final String testTable = "db.test_table_file_stats"; try (SparkSession spark = getSparkSession()) { spark.sql("USE openhouse"); spark.sql(String.format("CREATE TABLE %s (id INT, data STRING)", testTable)); spark.sql(String.format("INSERT INTO %s VALUES (0, '')", testTable)); spark.sql( String.format("INSERT INTO %s VALUES (100000000, '000000000000000000000')", testTable)); TableFileStats tableFileStats = TableFileStats.builder().spark(spark).tableName(testTable).build(); Map<String, Long> stats = tableFileStats.get().collectAsList().stream() .collect(Collectors.toMap(FileStat::getPath, FileStat::getSize)); FileSystem fs = FileSystem.get(spark.sparkContext().hadoopConfiguration()); Path tableDirectory = new Path( spark .sql( String.format( "SHOW TBLPROPERTIES %s ('openhouse.tableLocation')", testTable)) .collectAsList() .get(0) .getString(1)) .getParent(); Map<String, Long> expectedStats = new HashMap<>(); for (FileStatus fileStatus : fs.listStatus(new Path(tableDirectory, "data"))) { expectedStats.put( fileStatus.getPath().toString().substring("file:".length()), fileStatus.getLen()); } Assertions."<AssertPlaceHolder>"; } }
get() { return spark .sql(String.format("SELECT file_path, file_size_in_bytes FROM %s.data_files", tableName)) .map(new FileStatMapper(), Encoders.bean(FileStat.class)); }
[*] target: assertEquals(expectedStats, stats)
[-] pred:  org. junit. Assert. assertEquals ( expectedStats, tableFileStats. get() ( ) )

[*] target: assertEquals(expectedStats, stats)
[-] pred:  org. junit. Assert. assertEquals ( expectedStats, stats. get() ( ) )

[*] target: assertEquals(expectedStats, stats)
[-] pred:  org. junit. Assert. assertEquals ( expectedStats, statistics. get() ( ) )

[*] target: assertEquals(expectedStats, stats)
[-] pred:  org. junit. Assert. assertEquals ( expectedStats, fs. get() ( ) )

[*] target: assertEquals(expectedStats, stats)
[-] pred:  org. junit. Assert. assertEquals ( expectedStats, fs. get() ( tableDirectory ) )

************************************
************************************
[+] input: Exception { final String testTable = "db.test_table_sanity_check"; try (SparkSession spark = getSparkSession()) { spark.sql("USE openhouse"); spark.sql( String.format( "create table %s (id int, data string, ts timestamp) partitioned by (days(ts))", testTable));  // produce 2 partitions for (int i = 0; i < 3; ++i) { spark.sql( String.format( "insert into %s values (0, 'data', cast('2024-07-15 00:1%d:34' as timestamp))", testTable, i)); } for (int i = 0; i < 3; ++i) { spark.sql( String.format( "insert into %s values (0, 'data', cast('2024-07-16 00:1%d:34' as timestamp))", testTable, i)); }  TableFileStats tableFileStats = TableFileStats.builder().tableName(testTable).spark(spark).build(); TablePartitionStats tablePartitionStats = TablePartitionStats.builder().tableName(testTable).spark(spark).build(); OpenHouseDataLayoutStrategyGenerator strategyGenerator = OpenHouseDataLayoutStrategyGenerator.builder() .tableFileStats(tableFileStats) .tablePartitionStats(tablePartitionStats) .build(); List<DataLayoutStrategy> strategies = strategyGenerator.generate(); Assertions."<AssertPlaceHolder>"; DataLayoutStrategy strategy = strategies.get(0); // few groups, expect 1 commit Assertions.assertEquals(1, strategy.getConfig().getPartialProgressMaxCommits()); Assertions.assertTrue(strategy.getConfig().isPartialProgressEnabled());  Assertions.assertTrue( strategy.getGain() == 5, "Gain for 6 files compaction in 2 partitions should be 5"); Assertions.assertTrue( strategy.getCost() < 1.0, "Cost for 6 files compaction should be negligible"); Assertions.assertTrue( strategy.getScore() < 10.0, "Score for 6 files compaction should be negligible"); } }
generate() { // skip single partition and non-partitioned tables if (tablePartitionStats.get().count() <= 1) { return Collections.emptyList(); } return Collections.singletonList(generateCompactionStrategy()); }
[*] target: assertEquals(1, strategies.size())
[-] pred:  org. junit. Assert. assertTrue ( strategies. isEmpty ( ) )

[*] target: assertEquals(1, strategies.size())
[-] pred:  org. junit. Assert. assertEquals ( tablePartitionStats. size ( ), strategies. size ( ) )

[*] target: assertEquals(1, strategies.size())
[-] pred:  org. junit. Assert. assertNotNull ( strategies )

[*] target: assertEquals(1, strategies.size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( strategies. size ( ) ) == 0 ) )

[*] target: assertEquals(1, strategies.size())
[-] pred:  org

************************************
************************************
[+] input: Exception { final String testTable = "db.test_table_strategy_persistence"; try (SparkSession spark = withCatalogSession()) { spark.sql(String.format("CREATE TABLE %s (id INT, data STRING)", testTable)); DataLayoutStrategy strategy = DataLayoutStrategy.builder().config(DataCompactionConfig.builder().build()).build(); // validate up-to 100 strategies can be saved and loaded List<DataLayoutStrategy> strategyList = Collections.nCopies(100, strategy); StrategiesDao dao = StrategiesDaoTableProps.builder().spark(spark).build(); dao.save(testTable, strategyList); Assertions."<AssertPlaceHolder>"; } }
load(String fqtn) { Gson gson = new GsonBuilder().create(); Type type = new TypeToken<ArrayList<DataLayoutStrategy>>() {}.getType(); String propValue = spark .sql( String.format( "SHOW TBLPROPERTIES %s ('%s')", fqtn, DATA_LAYOUT_STRATEGIES_PROPERTY_KEY)) .collectAsList() .get(0) .getString(1); return gson.fromJson(StringEscapeUtils.unescapeJava(propValue), type); }
[*] target: assertEquals(strategyList, dao.load(testTable))
[-] pred:  org. junit. Assert. assertEquals ( testTable, dao. load(String fqtn )

[*] target: assertEquals(strategyList, dao.load(testTable))
[-] pred:  org. junit. Assert. assertEquals ( strategy, dao. load(String fqtn )

[*] target: assertEquals(strategyList, dao.load(testTable))
[-] pred:  org. junit. Assert. assertEquals ( strategy, dao. load(String fqtn) )

[*] target: assertEquals(strategyList, dao.load(testTable))
[-] pred:  org. junit. Assert. assertNotNull ( dao. load(String fqtn )

[*] target: assertEquals(strategyList, dao.load(testTable))
[-] pred:  org. junit. Assert. assertNotNull ( dao. load(String fqtn) )

************************************
************************************
[+] input: Exception { String schemaJsonSimple = getSchemaJsonFromResource("schema.json"); String schemaJsonNoisy = getSchemaJsonFromResource("noisy-schema.json");  Schema schemaSimple = getSchemaFromSchemaJson(schemaJsonSimple); Assertions.assertTrue(schema.sameSchema(schemaSimple));  Schema schemaOneLine = getSchemaFromSchemaJson(schemaJson); Assertions.assertTrue(schema.sameSchema(schemaOneLine));  Schema schemaNoisy = getSchemaFromSchemaJson(schemaJsonNoisy); Assertions."<AssertPlaceHolder>"; }
getSchemaFromSchemaJson(String schemaJson) { return SchemaParser.fromJson(schemaJson); }
[*] target: assertTrue(schema.sameSchema(schemaNoisy))
[-] pred:  org. junit. Assert. assertEquals ( schemaOneLine, schemaNoisy )

[*] target: assertTrue(schema.sameSchema(schemaNoisy))
[-] pred:  org. junit. Assert. assertTrue ( schemaOneLine. equals ( schemaNoisy ) )

[*] target: assertTrue(schema.sameSchema(schemaNoisy))
[-] pred:  org. junit. Assert. assertTrue ( schemaNoisy. equals ( schemaOneLine ) )

[*] target: assertTrue(schema.sameSchema(schemaNoisy))
[-] pred:  org. junit. Assert. assertEquals ( schemaNoisy, schemaNoisy )

[*] target: assertTrue(schema.sameSchema(schemaNoisy))
[-] pred:  org. junit. Assert. assertTrue ( ( schemaNoisy == schemaOneLine ) )

************************************
************************************
[+] input: testGetschemaJsonFromSchema() { String schemaJsonOneLine = getSchemaJsonFromSchema(schema); Assertions."<AssertPlaceHolder>"; }
getSchemaJsonFromSchema(Schema schema) { return SchemaParser.toJson(schema); }
[*] target: assertTrue(schemaJson.equals(schemaJsonOneLine))
[-] pred:  org. junit. Assert. assertNull ( schemaJsonOneLine )

[*] target: assertTrue(schemaJson.equals(schemaJsonOneLine))
[-] pred:  org. junit. Assert. assertNotNull ( schemaJsonOneLine )

[*] target: assertTrue(schemaJson.equals(schemaJsonOneLine))
[-] pred:  org. junit. Assert. assertEquals ( schemaJsonOneLine, schemaJsonOneLine )

[*] target: assertTrue(schemaJson.equals(schemaJsonOneLine))
[-] pred:  org. junit. Assert. assertFalse ( schemaJsonOneLine. isEmpty ( ) )

[*] target: assertTrue(schemaJson.equals(schemaJsonOneLine))
[-] pred:  org

************************************
************************************
[+] input: testUserTableGet() { // TODO: Use service layer function to create/update the repository. Assertions.assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesService.getUserTable( TestHouseTableModelConstants.TEST_DB_ID, TestHouseTableModelConstants.TEST_TABLE_ID))); Assertions.assertTrue( isUserTableDtoEqual( testTuple1_0.get_userTableDto(), userTablesService.getUserTable( testTuple1_0.getDatabaseId(), testTuple1_0.getTableId()))); Assertions.assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId(), TestHouseTableModelConstants.testTuple1_1.getTableId()))); // testing case insensitivity when lookup by repeating the lookup again Assertions.assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesService.getUserTable( TestHouseTableModelConstants.TEST_DB_ID.toLowerCase(), TestHouseTableModelConstants.TEST_TABLE_ID.toLowerCase()))); Assertions.assertTrue( isUserTableDtoEqual( testTuple1_0.get_userTableDto(), userTablesService.getUserTable( testTuple1_0.getDatabaseId().toLowerCase(), testTuple1_0.getTableId().toLowerCase()))); Assertions."<AssertPlaceHolder>"; }
getUserTable(String databaseId, String tableId);  /** * Given a partially filled {@link UserTable}
[*] target: assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId().toUpperCase(), TestHouseTableModelConstants.testTuple1_1.getTableId().toUpperCase())))
[-] pred:  org. junit. Assert. assertTrue ( ( ( isUserTableDtoEqual ( isUserTableDtoEqual( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesService.getUserTable( TestHouseTableModelConstants.TEST_DB_ID, org

[*] target: assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId().toUpperCase(), TestHouseTableModelConstants.testTuple1_1.getTableId().toUpperCase())))
[-] pred:  org. junit. Assert. assertEquals ( 2, com. google. common. collect. Lists. newArrayList ( isUserTableDtoEqual( isUserTableDtoEqual( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesService.getUserTable( TestHouseTableModelConstants.TEST_DB_ID, org

[*] target: assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId().toUpperCase(), TestHouseTableModelConstants.testTuple1_1.getTableId().toUpperCase())))
[-] pred:  org. junit. Assert. assertEquals ( 2, com. google. common. collect. Sets. newHashSet ( userTablesService. getUserTable(String databaseId, com. google. common. collect. Sets. newHashSet ( testTuple1_0.getTableId ) ). size ( ) )

[*] target: assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId().toUpperCase(), TestHouseTableModelConstants.testTuple1_1.getTableId().toUpperCase())))
[-] pred:  org. junit. Assert. assertEquals ( 2, com. google. common. collect. Sets. newHashSet ( userTablesService. getUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesService.getUserTable( TestHouseTableModelConstants.TEST_DB_ID, org

[*] target: assertTrue( isUserTableDtoEqual( TestHouseTableModelConstants.testTuple1_1.get_userTableDto(), userTablesService.getUserTable( TestHouseTableModelConstants.testTuple1_1.getDatabaseId().toUpperCase(), TestHouseTableModelConstants.testTuple1_1.getTableId().toUpperCase())))
[-] pred:  )

************************************
************************************
[+] input: testUserTableQuery() { List<UserTableDto> results = new ArrayList<>(); results.add( testTuple1_0 .get_userTableDto() .toBuilder() .tableVersion(testTuple1_0.get_userTableDto().getMetadataLocation()) .build()); results.add( testTuple2_0 .get_userTableDto() .toBuilder() .tableVersion(testTuple2_0.get_userTableDto().getMetadataLocation()) .build()); results.add( TEST_USER_TABLE_DTO .toBuilder() .tableVersion(TEST_USER_TABLE_DTO.getMetadataLocation()) .build());  // Only specify the database ID to find all tables under this database. List<UserTableDto> actual = userTablesService.getAllUserTables( UserTable.builder().databaseId(testTuple1_0.getDatabaseId()).build()); assertThat(results).hasSameElementsAs(actual);  // Only specify the table Id to find matched tables. // Should only have one table matching. actual = userTablesService.getAllUserTables( UserTable.builder().tableId(testTuple2_0.getTableId()).build()); "<AssertPlaceHolder>"; assertThat(isUserTableDtoEqual(actual.get(0), testTuple2_0.get_userTableDto())).isTrue(); }
getAllUserTables(UserTable userTable);  /** Given a databaseId and tableId, delete the user table entry from the House Table. */ void deleteUserTable(String databaseId, String tableId);  /** * Create or update a {@link UserTable}
[*] target: assertThat(actual.size()).isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( actual. get ( 0 ), org. hamcrest. CoreMatchers. is ( actual. get ( 0 ) ) )

[*] target: assertThat(actual.size()).isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( expected ) ) )

[*] target: assertThat(actual.size()).isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( actual. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertThat(actual.size()).isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( actual ) ) )

[*] target: assertThat(actual.size()).isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( results ) ) )

************************************
************************************
[+] input: testUserTableUpdate() { // testTuple1_0 is one of the table that is created from setup method. String modifiedLocation = testTuple1_0.get_userTableRow().getMetadataLocation() + "/new"; String atVersion = testTuple1_0.get_userTableRow().getMetadataLocation(); UserTable updated_1_0 = UserTable.builder() .tableId(testTuple1_0.get_userTableRow().getTableId()) .databaseId(testTuple1_0.get_userTableRow().getDatabaseId()) .metadataLocation(modifiedLocation) .tableVersion(atVersion) .build(); Pair<UserTableDto, Boolean> result = userTablesService.putUserTable(updated_1_0); "<AssertPlaceHolder>"; assertThat(result.getFirst().getMetadataLocation()).isEqualTo(modifiedLocation); assertThat(result.getFirst().getTableVersion()).isEqualTo(modifiedLocation); }
putUserTable(UserTable userTable);
[*] target: assertThat(result.getSecond()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( true ) )

[*] target: assertThat(result.getSecond()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(result.getSecond()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertThat(result.getSecond()).isTrue()
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. contains ( true ) )

[*] target: assertThat(result.getSecond()).isTrue()
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: toJobDto() { Assertions.assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB_ROW));  Assertions."<AssertPlaceHolder>"; }
toJobDto(Job job);
[*] target: assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB))
[-] pred:  org. junit. Assert. assertThat ( clazz, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB))
[-] pred:  org. junit. Assert. assertThat ( clazz, org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB))
[-] pred:  org. junit. Assert. assertNotNull ( clazz. toJobDto(Job job); )

[*] target: assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB))
[-] pred:  org. junit. Assert. assertNotNull ( clazz )

[*] target: assertEquals(TEST_JOB_DTO, jobMapper.toJobDto(TEST_JOB))
[-] pred:  org. junit. Assert. assertTrue ( clazz. isEmpty ( ) )

************************************
************************************
[+] input: toJob() { Assertions."<AssertPlaceHolder>"; }
toJob(JobDto jobDto);
[*] target: assertEquals(TEST_JOB, jobMapper.toJob(TEST_JOB_DTO))
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(TEST_JOB, jobMapper.toJob(TEST_JOB_DTO))
[-] pred:  org. junit. Assert. assertTrue ( false )

[*] target: assertEquals(TEST_JOB, jobMapper.toJob(TEST_JOB_DTO))
[-] pred:  org. junit. Assert. assertEquals ( true, true )

[*] target: assertEquals(TEST_JOB, jobMapper.toJob(TEST_JOB_DTO))
[-] pred:  a test case

[*] target: assertEquals(TEST_JOB, jobMapper.toJob(TEST_JOB_DTO))
[-] pred:  org

************************************
************************************
[+] input: toUserTableDto() { UserTableRow testUserTableRow = new TestHouseTableModelConstants.TestTuple(0).get_userTableRow(); UserTableDto dtoAfterMapping = userTablesMapper.toUserTableDto(testUserTableRow); // Assert objects are equal ignoring versions Assertions."<AssertPlaceHolder>"; // Assert After Mapping version is same as the source's metadataLocation Assertions.assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.getMetadataLocation(), dtoAfterMapping.getTableVersion()); }
toUserTableDto(UserTableRow userTableRow);  /** * From a source DTO object {@link UserTableDto}
[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.toBuilder().tableVersion("").build(), dtoAfterMapping.toBuilder().tableVersion("").build())
[-] pred:  org. junit. Assert. assertThat ( dtoAfterMapping, org. hamcrest. CoreMatchers. is ( testUserTableRow ) )

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.toBuilder().tableVersion("").build(), dtoAfterMapping.toBuilder().tableVersion("").build())
[-] pred:  org. junit. Assert. assertThat ( dtoAfterMapping, org. hamcrest. Matchers. is ( testUserTableRow ) )

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.toBuilder().tableVersion("").build(), dtoAfterMapping.toBuilder().tableVersion("").build())
[-] pred:  org. junit. Assert. assertNull ( dtoAfterMapping )

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.toBuilder().tableVersion("").build(), dtoAfterMapping.toBuilder().tableVersion("").build())
[-] pred:  org. junit. Assert. assertThat ( dtoAfterMapping, org. hamcrest. CoreMatchers. is ( testUserRet ) )

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO.toBuilder().tableVersion("").build(), dtoAfterMapping.toBuilder().tableVersion("").build())
[-] pred:  org. junit. Assert. assertThat ( dtoAfterMapping, org. hamcrest. CoreMatchers. is ( testUserText ) )

************************************
************************************
[+] input: toUserTable() { Assertions."<AssertPlaceHolder>"; }
toUserTable(UserTableDto userTableDto);  /** * From a source {@link UserTable}
[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE, userTablesMapper.toUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO))
[-] pred:  org. junit. Assert. assertNotNull ( toUserTable(UserTableDto

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE, userTablesMapper.toUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO))
[-] pred:  org. junit. Assert. assertFalse ( toUserTable(UserTableDto userTableDto);Loader. toUserTable(UserTableDto userTableDto

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE, userTablesMapper.toUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO))
[-] pred:  org. junit. Assert. assertFalse ( toUserTable(UserTableDto userTableDto);Select. toUserTable(UserTableDto userTableDto

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE, userTablesMapper.toUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO))
[-] pred:  org. junit. Assert. assertFalse ( toUserTable(UserTableDto userTableDto);city. toUserTable(UserTableDto userTableDto

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE, userTablesMapper.toUserTable(TestHouseTableModelConstants.TEST_USER_TABLE_DTO))
[-] pred:  org. junit. Assert. assertFalse ( toUserTable(UserTableDto userTableDto);Applications * From a source <<= a sourcefilesfiles

************************************
************************************
[+] input: toUserTableRowNullStorageType() { UserTableRow testUserTableRow = new TestHouseTableModelConstants.TestTuple(0).get_userTableRow(); Assertions."<AssertPlaceHolder>"; }
toUserTableRow( UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow);  /** * From a source Table Metadata from House Table, prepare a User Table DTO object. * * @param userTableRow Source Data Model object for User Table Metadata in House Table. * @return Destination User Table DTO to be forwarded to the controller. */ @Mapping(target = "tableVersion", source = "metadataLocation") UserTableDto toUserTableDto(UserTableRow userTableRow);  /** * From a source DTO object {@link UserTableDto}
[*] target: assertEquals( testUserTableRow, userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType(null).build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toUserTableRow ( UserTable. class, testUserTableRow. getClass ( ) ) )

[*] target: assertEquals( testUserTableRow, userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType(null).build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNotNull ( testUserTableRow )

[*] target: assertEquals( testUserTableRow, userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType(null).build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toUserTableRow ( UserTable userTable, null ) )

[*] target: assertEquals( testUserTableRow, userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType(null).build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow )

[*] target: assertEquals( testUserTableRow, userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType(null).build(), Optional.empty()))
[-] pred:  org

************************************
************************************
[+] input: toUserTableRowCustomStorageType() { UserTableRow testUserTableRow = new TestHouseTableModelConstants.TestTuple(0).get_userTableRow(); Assertions."<AssertPlaceHolder>"; }
toUserTableRow( UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow);  /** * From a source Table Metadata from House Table, prepare a User Table DTO object. * * @param userTableRow Source Data Model object for User Table Metadata in House Table. * @return Destination User Table DTO to be forwarded to the controller. */ @Mapping(target = "tableVersion", source = "metadataLocation") UserTableDto toUserTableDto(UserTableRow userTableRow);  /** * From a source DTO object {@link UserTableDto}
[*] target: assertEquals( testUserTableRow.toBuilder().storageType("blobfs").build(), userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType("blobfs").build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNotNull ( testUserTableRow )

[*] target: assertEquals( testUserTableRow.toBuilder().storageType("blobfs").build(), userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType("blobfs").build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNotNull ( testUserTableRow. toUserTableRow ( UserTable userTable, testUserTableRow ) )

[*] target: assertEquals( testUserTableRow.toBuilder().storageType("blobfs").build(), userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType("blobfs").build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNotNull ( testUserTableRow. toUserTableRow2 )

[*] target: assertEquals( testUserTableRow.toBuilder().storageType("blobfs").build(), userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType("blobfs").build(), Optional.empty()))
[-] pred:  org. junit. Assert. assertNotNull ( testUserTX )

[*] target: assertEquals( testUserTableRow.toBuilder().storageType("blobfs").build(), userTablesMapper.toUserTableRow( TestHouseTableModelConstants.TEST_USER_TABLE.toBuilder().storageType("blobfs").build(), Optional.empty()))
[-] pred:  org

************************************
************************************
[+] input: fromUserTable() { Assertions."<AssertPlaceHolder>"; }
fromUserTable(UserTable userTable);  /** * From a source {@link UserTable}
[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesMapper.fromUserTable(TestHouseTableModelConstants.TEST_USER_TABLE))
[-] pred:  org. junit. Assert. assertNull ( provider. fromUserTable(UserTable userTable);CacheSize ( 1 ) )

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesMapper.fromUserTable(TestHouseTableModelConstants.TEST_USER_TABLE))
[-] pred:  org. junit. Assert. assertNull ( provider. fromUserTable(UserTable userTable);AuthorizableAuthorizableAuthorizableretry * From advised

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesMapper.fromUserTable(TestHouseTableModelConstants.TEST_USER_TABLE))
[-] pred:  org. junit. Assert. assertFalse ( fromUserTable(UserTable userTable);Might * From ambassassay

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesMapper.fromUserTable(TestHouseTableModelConstants.TEST_USER_TABLE))
[-] pred:  org. junit. Assert. assertFalse ( fromUserTable(UserTable userTable);Might * From ambassassay apartnerIntegration

[*] target: assertEquals( TestHouseTableModelConstants.TEST_USER_TABLE_DTO, userTablesMapper.fromUserTable(TestHouseTableModelConstants.TEST_USER_TABLE))
[-] pred:  org

************************************
************************************
[+] input: testToVersionWithNoExistingRow() { Assertions."<AssertPlaceHolder>"; }
toVersion(UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow) { if (!existingUserTableRow.isPresent()) { if (!userTable.getTableVersion().equals(ValidatorConstants.INITIAL_TABLE_VERSION)) { throw new EntityConcurrentModificationException( String.format( "databaseId : %s, tableId : %s %s", userTable.getDatabaseId(), userTable.getTableId(), "The requested user table has been deleted by other processes."), new RuntimeException()); } return null; } else { if (existingUserTableRow.get().getMetadataLocation().equals(userTable.getTableVersion())) { return existingUserTableRow.get().getVersion(); } else { throw new EntityConcurrentModificationException( String.format( "databaseId : %s, tableId : %s, version: %s %s", userTable.getDatabaseId(), userTable.getTableId(), userTable.getTableVersion(), "The requested user table has been modified/created by other processes."), new RuntimeException()); } } }
[*] target: assertEquals( null, versionMapper.toVersion(TestHouseTableModelConstants.TEST_USER_TABLE, Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( source. toVersion(UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow) )

[*] target: assertEquals( null, versionMapper.toVersion(TestHouseTableModelConstants.TEST_USER_TABLE, Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( source. toVersion(UserTable userTable, @Context Optional<UserTableRow. existingUserTableRow ) )

[*] target: assertEquals( null, versionMapper.toVersion(TestHouseTableModelConstants.TEST_USER_TABLE, Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( source. toVersion(UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow ) )

[*] target: assertEquals( null, versionMapper.toVersion(TestHouseTableModelConstants.TEST_USER_TABLE, Optional.empty()))
[-] pred:  org. junit. Assert. assertNull ( source. toVersion(UserTable userTable, @Context Optional<UserTableRow. existingUserTableRow) )

[*] target: assertEquals( null, versionMapper.toVersion(TestHouseTableModelConstants.TEST_USER_TABLE, Optional.empty()))
[-] pred:  org

************************************
************************************
[+] input: testToVersionWithExistingRowAndCorrectMetadataLocation() { UserTableRow testUserTableRow = new TestHouseTableModelConstants.TestTuple(0).get_userTableRow(); Assertions."<AssertPlaceHolder>"; }
toVersion(UserTable userTable, @Context Optional<UserTableRow> existingUserTableRow) { if (!existingUserTableRow.isPresent()) { if (!userTable.getTableVersion().equals(ValidatorConstants.INITIAL_TABLE_VERSION)) { throw new EntityConcurrentModificationException( String.format( "databaseId : %s, tableId : %s %s", userTable.getDatabaseId(), userTable.getTableId(), "The requested user table has been deleted by other processes."), new RuntimeException()); } return null; } else { if (existingUserTableRow.get().getMetadataLocation().equals(userTable.getTableVersion())) { return existingUserTableRow.get().getVersion(); } else { throw new EntityConcurrentModificationException( String.format( "databaseId : %s, tableId : %s, version: %s %s", userTable.getDatabaseId(), userTable.getTableId(), userTable.getTableVersion(), "The requested user table has been modified/created by other processes."), new RuntimeException()); } } }
[*] target: assertEquals( versionMapper.toVersion( TestHouseTableModelConstants.TEST_USER_TABLE .toBuilder() .tableVersion(testUserTableRow.getMetadataLocation()) .build(), Optional.of(testUserTableRow)), testUserTableRow.getVersion())
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toVersion(UserTable userTable, @Context Optional<UserTableRow. existingUserTableRow ) )

[*] target: assertEquals( versionMapper.toVersion( TestHouseTableModelConstants.TEST_USER_TABLE .toBuilder() .tableVersion(testUserTableRow.getMetadataLocation()) .build(), Optional.of(testUserTableRow)), testUserTableRow.getVersion())
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toVersion(UserTable userTable, @Context Optional<UserTableRow > existingUserTableRow ) )

[*] target: assertEquals( versionMapper.toVersion( TestHouseTableModelConstants.TEST_USER_TABLE .toBuilder() .tableVersion(testUserTableRow.getMetadataLocation()) .build(), Optional.of(testUserTableRow)), testUserTableRow.getVersion())
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toVersion(UserTable userTable, @Context Optional<UserTableRow > emptyUserTableRow ) )

[*] target: assertEquals( versionMapper.toVersion( TestHouseTableModelConstants.TEST_USER_TABLE .toBuilder() .tableVersion(testUserTableRow.getMetadataLocation()) .build(), Optional.of(testUserTableRow)), testUserTableRow.getVersion())
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toVersion(UserTable userTable, null ) )

[*] target: assertEquals( versionMapper.toVersion( TestHouseTableModelConstants.TEST_USER_TABLE .toBuilder() .tableVersion(testUserTableRow.getMetadataLocation()) .build(), Optional.of(testUserTableRow)), testUserTableRow.getVersion())
[-] pred:  org. junit. Assert. assertNull ( testUserTableRow. toVersion(UserTable userTable, testUserTableRow ) )

************************************
************************************
[+] input: testRepoFindById() { mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(mockResponseBody(TEST_JOB, "v1"))) .addHeader("Content-Type", "application/json"));  JobDto result = jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()) .get();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(result.getState(), TEST_JOB.getState()); }
findById(JobDtoPrimaryKey jobDtoPrimaryKey) { return getHtsRetryTemplate() .execute( context -> jobApi .getJob(jobDtoPrimaryKey.getJobId()) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertEquals ( result, getExpected )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertEquals ( result, getExpectedData )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertEquals ( result, getExpected ( result ) )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertEquals ( result, getExpectedAction )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertEquals ( result, getExpectedData ( ) )

************************************
************************************
[+] input: testRepoSaveNewRow() { mockHtsServer.enqueue( new MockResponse() .setResponseCode(404) .setBody("RESPONSE BODY DOESNT MATTER") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(201) .setBody((new Gson()).toJson(mockResponseBody(TEST_JOB, "v1"))) .addHeader("Content-Type", "application/json"));  JobDto result = jobsInternalRepository.save(TEST_JOB); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(result.getState(), TEST_JOB.getState()); }
save(JobDto entity) { CreateUpdateEntityRequestBodyJob createUpdateEntityRequestBodyJob = new CreateUpdateEntityRequestBodyJob(); createUpdateEntityRequestBodyJob.setEntity( jobsMapper.toJob(entity).version(getCurrentVersion(entity.getJobId()).orElse(null)));  return getHtsRetryTemplate() .execute( context -> jobApi .putJob(createUpdateEntityRequestBodyJob) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)) .get()); }
[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertSame ( result, TEST )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org. junit. Assert. assertSame ( result, transform )

[*] target: assertEquals(result.getJobId(), TEST_JOB.getJobId())
[-] pred:  org

************************************
************************************
[+] input: testFindByIdNotFound() { mockHtsServer.enqueue( new MockResponse() .setResponseCode(404) .setBody("") .addHeader("Content-Type", "application/json")); Assertions."<AssertPlaceHolder>"; }
findById(JobDtoPrimaryKey jobDtoPrimaryKey) { return getHtsRetryTemplate() .execute( context -> jobApi .getJob(jobDtoPrimaryKey.getJobId()) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertFalse( jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId("does_not_exist_id").build()) .isPresent())
[-] pred:  org. junit. Assert. assertEquals ( null, mockHtsServer.engetgetJob(jobjobjobjobjobjobjob). findById(JobDtoPrimaryKey) )

[*] target: assertFalse( jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId("does_not_exist_id").build()) .isPresent())
[-] pred:  org. junit. Assert. assertEquals ( null, mockHtsServer.engetgetJob(jobjobjobjobjobjob). findById(JobDtoPrimaryKey) )

[*] target: assertFalse( jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId("does_not_exist_id").build()) .isPresent())
[-] pred:  org. junit. Assert. assertEquals ( null, mockHtsServer.enqueue(, mr). findById(JobDtoPrimaryKey) )

[*] target: assertFalse( jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId("does_not_exist_id").build()) .isPresent())
[-] pred:  org. junit. Assert. assertEquals ( null, mockHtsServer.engetgetJob(jobjobjobjobjobjobjob). findById(JobDtoPrimaryKey) ( jobDtoPrimaryKey ) )

[*] target: assertFalse( jobsInternalRepository .findById(JobDtoPrimaryKey.builder().jobId("does_not_exist_id").build()) .isPresent())
[-] pred:  org. junit. Assert. assertEquals ( null, mockHtsServer.enqueue( ( LogicalResponse(). setResponseCode(404).setBody("("(" ) )

************************************
************************************
[+] input: testFindAll() { List<Job> jobs = new ArrayList<>(); jobs.add(mockResponseBody(TEST_JOB, "v1").getEntity()); jobs.add( mockResponseBody(TEST_JOB.toBuilder().jobId("jobId2").state(JobState.FAILED).build(), "v2") .getEntity()); GetAllEntityResponseBodyJob listResponse = new GetAllEntityResponseBodyJob();  /** * Need to use the reflection trick to help initializing the object with generated class {@link * GetAllUserTablesResponseBody}, which somehow doesn't provided proper setter in the generated * code. */ Field resultField = ReflectionUtils.findField(GetAllEntityResponseBodyJob.class, "results"); Assertions.assertNotNull(resultField); ReflectionUtils.makeAccessible(resultField); ReflectionUtils.setField(resultField, listResponse, jobs);  mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(listResponse)) .addHeader("Content-Type", "application/json")); List<JobDto> returnList = ImmutableList.copyOf(jobsInternalRepository.findAll()); Assertions."<AssertPlaceHolder>"; }
findAll() { return getHtsRetryTemplate() .execute( context -> jobApi .getAllJobs(ImmutableMap.of()) .map(GetAllEntityResponseBodyJob::getResults) .flatMapMany(Flux::fromIterable) .map(jobsMapper::toJobDto) .onErrorResume(this::handleHtsHttpError) .collectList() .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)) .get()); }
[*] target: assertEquals(returnList.size(), 2)
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultField. findAll() ( ). size ( ) ) > 0 ) )

[*] target: assertEquals(returnList.size(), 2)
[-] pred:  org. junit. Assert. assertNotNull ( resultField. findAll() ( ) )

[*] target: assertEquals(returnList.size(), 2)
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultField. findAll() ( ). size ( ) ) == 2 ) )

[*] target: assertEquals(returnList.size(), 2)
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultField. findAll() ( ). size ( ) ) == 1 ) )

[*] target: assertEquals(returnList.size(), 2)
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultField. findAll() ( ). size ( ) ) == 0 ) )

************************************
************************************
[+] input: testListWithEmptyResult() { GetAllEntityResponseBodyJob listResponse = new GetAllEntityResponseBodyJob(); Field resultField = ReflectionUtils.findField(GetAllEntityResponseBodyJob.class, "results"); Assertions.assertNotNull(resultField); ReflectionUtils.makeAccessible(resultField); ReflectionUtils.setField(resultField, listResponse, new ArrayList<>());  mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody((new Gson()).toJson(listResponse)) .addHeader("Content-Type", "application/json"));  List<JobDto> returnList = ImmutableList.copyOf(jobsInternalRepository.findAll()); Assertions."<AssertPlaceHolder>"; }
findAll() { return getHtsRetryTemplate() .execute( context -> jobApi .getAllJobs(ImmutableMap.of()) .map(GetAllEntityResponseBodyJob::getResults) .flatMapMany(Flux::fromIterable) .map(jobsMapper::toJobDto) .onErrorResume(this::handleHtsHttpError) .collectList() .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)) .get()); }
[*] target: assertEquals(returnList.size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( resultField. findAll() ( ).()); ( ) )

[*] target: assertEquals(returnList.size(), 0)
[-] pred:  org. junit. Assert. assertNull ( resultField. findAll() ( ) )

[*] target: assertEquals(returnList.size(), 0)
[-] pred:  org. junit. Assert. assertFalse ( resultField. findAll() ( ).()); ( ) )

[*] target: assertEquals(returnList.size(), 0)
[-] pred:  org. junit. Assert. assertTrue ( resultField. findAll ( ).()); ( ) )

[*] target: assertEquals(returnList.size(), 0)
[-] pred:  org

************************************
************************************
[+] input: testRetryForFindByIdJobsApiCall() { // Injecting a Gateway timeout and an internal server error, will be translated to retryable // error. In fact only 500, 502, 503, 504 are retryable based on // com.linkedin.openhouse.jobs.repository.JobsInternalRepositoryImpl.getHtsRetryTemplate AND // com.linkedin.openhouse.jobs.repository.JobsInternalRepositoryImpl.handleHtsHttpError // These are covered in the following two tests. // Then inject a non retryable error(409) which should terminate the retry attempt and exception // will be thrown directly. mockHtsServer.enqueue( new MockResponse() .setResponseCode(504) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(500) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(409) .setBody("") .addHeader("Content-Type", "application/json"));  CustomRetryListener retryListener = new CustomRetryListener(); ((JobsInternalRepositoryImpl) jobsInternalRepository) .getHtsRetryTemplate() .registerListener(retryListener); Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount();  Assertions.assertEquals(actualRetryCount, HtsRetryUtils.MAX_RETRY_ATTEMPT); }
findById(JobDtoPrimaryKey jobDtoPrimaryKey) { return getHtsRetryTemplate() .execute( context -> jobApi .getJob(jobDtoPrimaryKey.getJobId()) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, null )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, newAttempt )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertNotNull ( retryListener )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, tryListener )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org

************************************
************************************
[+] input: testRetryForSaveJobsApiCall() { // needed to getCurrentVersion success mockHtsServer.enqueue( new MockResponse() .setResponseCode(200) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(503) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(502) .setBody("") .addHeader("Content-Type", "application/json")); mockHtsServer.enqueue( new MockResponse() .setResponseCode(400) .setBody("") .addHeader("Content-Type", "application/json"));  CustomRetryListener retryListener = new CustomRetryListener(); ((JobsInternalRepositoryImpl) jobsInternalRepository) .getHtsRetryTemplate() .registerListener(retryListener);  Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount(); Assertions.assertEquals(actualRetryCount, HtsRetryUtils.MAX_RETRY_ATTEMPT); }
save(JobDto entity) { CreateUpdateEntityRequestBodyJob createUpdateEntityRequestBodyJob = new CreateUpdateEntityRequestBodyJob(); createUpdateEntityRequestBodyJob.setEntity( jobsMapper.toJob(entity).version(getCurrentVersion(entity.getJobId()).orElse(null)));  return getHtsRetryTemplate() .execute( context -> jobApi .putJob(createUpdateEntityRequestBodyJob) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS)) .get()); }
[*] target: assertThrows( JobsTableCallerException.class, () -> jobsInternalRepository.save(TEST_JOB))
[-] pred:  org. junit. Assert. assertNotNull ( retryListener )

[*] target: assertThrows( JobsTableCallerException.class, () -> jobsInternalRepository.save(TEST_JOB))
[-] pred:  org. junit. Assert. assertTrue ( retryListener. isValid ( ) )

[*] target: assertThrows( JobsTableCallerException.class, () -> jobsInternalRepository.save(TEST_JOB))
[-] pred:  org. junit. Assert. assertNull ( retryListener )

[*] target: assertThrows( JobsTableCallerException.class, () -> jobsInternalRepository.save(TEST_JOB))
[-] pred:  org. junit. Assert. assertTrue ( ( retryListener!= null ) )

[*] target: assertThrows( JobsTableCallerException.class, () -> jobsInternalRepository.save(TEST_JOB))
[-] pred:  org

************************************
************************************
[+] input: testRetryForHtsFindByIdCallOnConcurrentException() { mockHtsServer.enqueue( new MockResponse() .setResponseCode(409) .setBody("") .addHeader("Content-Type", "application/json"));  CustomRetryListener retryListener = new CustomRetryListener(); ((JobsInternalRepositoryImpl) jobsInternalRepository) .getHtsRetryTemplate() .registerListener(retryListener);  Assertions."<AssertPlaceHolder>"; int actualRetryCount = retryListener.getRetryCount(); Assertions.assertEquals(actualRetryCount, 1); }
findById(JobDtoPrimaryKey jobDtoPrimaryKey) { return getHtsRetryTemplate() .execute( context -> jobApi .getJob(jobDtoPrimaryKey.getJobId()) .map(EntityResponseBodyJob::getEntity) .mapNotNull(jobsMapper::toJobDto) .switchIfEmpty(Mono.empty()) .onErrorResume(this::handleHtsHttpError) .blockOptional(Duration.ofSeconds(REQUEST_TIMEOUT_SECONDS))); }
[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retryListener. findById(JobDtoPrimaryKey) )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retryListener. container )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retryListener. findById(JobDtoPrimaryKey). getExpectedRetryCount )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retryListener. findById(JobDtoPrimaryKey). maximumRetryCount )

[*] target: assertThrows( JobsTableConcurrentUpdateException.class, () -> jobsInternalRepository.findById( JobDtoPrimaryKey.builder().jobId(TEST_JOB.getJobId()).build()))
[-] pred:  org. junit. Assert. assertEquals ( retryListener, retryListener. findById(JobDtoPrimaryKey). actualRetryCount )

************************************
************************************
[+] input: testToGetJobResponseBody() { Assertions.assertEquals(GET_JOB_RESPONSE_BODY, mapper.toGetJobResponseBody(JOB_DTO)); Assertions."<AssertPlaceHolder>"; }
toGetJobResponseBody(JobDto jobDto);
[*] target: assertEquals( GET_JOB_RESPONSE_BODY_WITH_CONF, mapper.toGetJobResponseBody(JOB_DTO_WITH_EXECUTION_CONF))
[-] pred:  org. junit. Assert. assertThat ( toGetJobResponseBody(JobResponseBody(JobDto jobDto);, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( java. lang. Object. class ) ) )

[*] target: assertEquals( GET_JOB_RESPONSE_BODY_WITH_CONF, mapper.toGetJobResponseBody(JOB_DTO_WITH_EXECUTION_CONF))
[-] pred:  org. junit. Assert. assertThat ( toGetJobResponseBody(JobResponseBody(JobDto. toGetJobResponseBody(JobDto

[*] target: assertEquals( GET_JOB_RESPONSE_BODY_WITH_CONF, mapper.toGetJobResponseBody(JOB_DTO_WITH_EXECUTION_CONF))
[-] pred:  org. junit. Assert. assertThat ( toGetJobResponseBody(JobResponseBody(JobDto jobDto);. toGetJobResponseBody(JobResponseBody(JobDto

[*] target: assertEquals( GET_JOB_RESPONSE_BODY_WITH_CONF, mapper.toGetJobResponseBody(JOB_DTO_WITH_EXECUTION_CONF))
[-] pred:  org. junit. Assert. assertThat ( toGetJobResponseBody(JobResponseBody(JobDto. toGetJobResponseBody(JobDto jobDto);. toGetJobResponseBody(JobDto

[*] target: assertEquals( GET_JOB_RESPONSE_BODY_WITH_CONF, mapper.toGetJobResponseBody(JOB_DTO_WITH_EXECUTION_CONF))
[-] pred:  org

************************************
************************************
[+] input: testToJobDto() { Assertions.assertEquals( JOB_DTO, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), CREATE_JOB_REQUEST_BODY)); Assertions."<AssertPlaceHolder>"; }
toJobDto(JobDto jobDto, CreateJobRequestBody requestBody);  /** * From a source {@link JobDto}
[*] target: assertEquals( JOB_DTO_WITH_EXECUTION_CONF, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), toCreateJobRequestBody(JOB_DTO_WITH_EXECUTION_CONF)))
[-] pred:  org. junit. Assert. assertThat ( logger. toJobDto(JobDtoBuilder ( build ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ""1"" ) ) )

[*] target: assertEquals( JOB_DTO_WITH_EXECUTION_CONF, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), toCreateJobRequestBody(JOB_DTO_WITH_EXECUTION_CONF)))
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( directly ) ) )

[*] target: assertEquals( JOB_DTO_WITH_EXECUTION_CONF, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), toCreateJobRequestBody(JOB_DTO_WITH_EXECUTION_CONF)))
[-] pred:  org. junit. Assert. assertThat ( logger. toJobDto(JobDtoBuilder (build ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( ""1"" ) ) )

[*] target: assertEquals( JOB_DTO_WITH_EXECUTION_CONF, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), toCreateJobRequestBody(JOB_DTO_WITH_EXECUTION_CONF)))
[-] pred:  org. junit. Assert. assertThat ( logger. toJobDto(JobDtoBuilder (build ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( """" ) ) )

[*] target: assertEquals( JOB_DTO_WITH_EXECUTION_CONF, mapper.toJobDto( JobModelConstants.getPartialJobDtoBuilder().build(), toCreateJobRequestBody(JOB_DTO_WITH_EXECUTION_CONF)))
[-] pred:  org. junit. Assert. assertThat ( logger. toJobDto(JobDtoBuilder ( construct ( ws ), org. hamcrest. CoreMatchers. is ( java. util. Optional. of ( 1 ) ) )

************************************
************************************
[+] input: testToJob() { Assertions."<AssertPlaceHolder>"; }
toJob(JobDto jobDto);
[*] target: assertEquals(JOB, mapper.toJob(JOB_DTO))
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(JOB, mapper.toJob(JOB_DTO))
[-] pred:  org. junit. Assert. assertTrue ( toJob(JobDto

[*] target: assertEquals(JOB, mapper.toJob(JOB_DTO))
[-] pred:  test toJob(JobDto

[*] target: assertEquals(JOB, mapper.toJob(JOB_DTO))
[-] pred:  a unit test for junit

[*] target: assertEquals(JOB, mapper.toJob(JOB_DTO))
[-] pred:  org

************************************
************************************
[+] input: testToJobDtoMapper() { Assertions."<AssertPlaceHolder>"; }
toJobDto(Job job);
[*] target: assertEquals(JOB_DTO, mapper.toJobDto(JOB))
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals(JOB_DTO, mapper.toJobDto(JOB))
[-] pred:  org. junit. Assert. assertTrue ( ( ( toJobDto(Job job); ) > null ) )

[*] target: assertEquals(JOB_DTO, mapper.toJobDto(JOB))
[-] pred:  org. junit. Assert. assertTrue ( ( ( toJobDto(Job job); ) > 0 ) )

[*] target: assertEquals(JOB_DTO, mapper.toJobDto(JOB))
[-] pred:  org. junit. Assert. assertTrue ( ( ( toJobDto(Job job); ) > 1 ) )

[*] target: assertEquals(JOB_DTO, mapper.toJobDto(JOB))
[-] pred:  org. junit. Assert. assertNotNull ( toJobDto(Job job); )

************************************
************************************
[+] input: testShouldCreateLaunchConf() { Map<String, String> propertyMap = fsStorageProvider.storageProperties(); propertyMap.put("fs.defaultFS", "default"); JobsRegistry jr = JobsRegistry.from(properties, propertyMap); Mockito.when(jobConf.getJobType()).thenReturn(JobConf.JobType.RETENTION); Mockito.when(jobConf.getArgs()).thenReturn(new ArrayList<>()); Map<String, String> executionConf = new HashMap<>(); executionConf.put("memory", "5G"); Mockito.when(jobConf.getExecutionConf()).thenReturn(executionConf); JobLaunchConf launchConf = jr.createLaunchConf("jobId", jobConf); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(launchConf.getExecutionTags().keySet().contains("pool")); Assertions.assertFalse(launchConf.getArgs().contains("--trashDir")); Assertions.assertFalse( launchConf .getSparkProperties() .keySet() .contains("spark.sql.catalog.openhouse.auth-token")); Assertions.assertTrue(launchConf.getSparkProperties().keySet().contains("spark.driver.memory")); Assertions.assertTrue( launchConf.getSparkProperties().keySet().contains("spark.executor.memory")); Assertions.assertTrue(launchConf.getSparkProperties().containsKey("fs.defaultFS")); Assertions.assertEquals(launchConf.getArgs().size(), 4); }
createLaunchConf(String jobId, JobConf conf) { final String type = conf.getJobType().name(); if (!jobLaunchDefaultConfByType.containsKey(type)) { throw new JobEngineException(String.format("Job %s is not supported", type)); } JobLaunchConf defaultConf = jobLaunchDefaultConfByType.get(type); Map<String, String> propsMap = defaultConf.getSparkProperties(); /* if properties has authTokenPath, read and set authToken as spark.sql.catalog.openhouse.auth-token in properties */ if (authTokenPath != null) { propsMap.put("spark.sql.catalog.openhouse.auth-token", getToken(authTokenPath)); } if (MapUtils.isNotEmpty(conf.getExecutionConf())) { populateSparkProps(conf.getExecutionConf(), propsMap); } defaultConf.setSparkProperties(propsMap); JobLaunchConf.JobLaunchConfBuilder builder = defaultConf.toBuilder();  // required arguments List<String> extendedArgs = new ArrayList<>(Arrays.asList("--jobId", jobId, "--storageURL", storageUri)); // arguments coming from yaml config extendedArgs.addAll(defaultConf.getArgs()); // runtime arguments provided in the request extendedArgs.addAll(conf.getArgs()); return builder.proxyUser(conf.getProxyUser()).args(extendedArgs).build(); }
[*] target: assertEquals(launchConf.getJarPath(), "default-jar-path")
[-] pred:  org. junit. Assert. assertNotNull ( launchConf )

[*] target: assertEquals(launchConf.getJarPath(), "default-jar-path")
[-] pred:  org. junit. Assert. assertNotNull ( launchConf )

[*] target: assertEquals(launchConf.getJarPath(), "default-jar-path")
[-] pred:  org. junit. Assert :: assertNotNull, launchConf )

[*] target: assertEquals(launchConf.getJarPath(), "default-jar-path")
[-] pred:  org. junit. Assert. assertNotNull ( launchConf )

[*] target: assertEquals(launchConf.getJarPath(), "default-jar-path")
[-] pred:  org

************************************
************************************
[+] input: testLaunchConfSholdHaveTrashDirForOFD() { Map<String, String> propertyMap = fsStorageProvider.storageProperties(); propertyMap.put("fs.defaultFS", "default"); JobsRegistry jr = JobsRegistry.from(properties, propertyMap); Mockito.when(jobConf.getJobType()).thenReturn(JobConf.JobType.ORPHAN_FILES_DELETION); Mockito.when(jobConf.getArgs()).thenReturn(new ArrayList<>()); JobLaunchConf launchConf = jr.createLaunchConf("jobId", jobConf); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(launchConf.getArgs().size(), 6); }
createLaunchConf(String jobId, JobConf conf) { final String type = conf.getJobType().name(); if (!jobLaunchDefaultConfByType.containsKey(type)) { throw new JobEngineException(String.format("Job %s is not supported", type)); } JobLaunchConf defaultConf = jobLaunchDefaultConfByType.get(type); Map<String, String> propsMap = defaultConf.getSparkProperties(); /* if properties has authTokenPath, read and set authToken as spark.sql.catalog.openhouse.auth-token in properties */ if (authTokenPath != null) { propsMap.put("spark.sql.catalog.openhouse.auth-token", getToken(authTokenPath)); } if (MapUtils.isNotEmpty(conf.getExecutionConf())) { populateSparkProps(conf.getExecutionConf(), propsMap); } defaultConf.setSparkProperties(propsMap); JobLaunchConf.JobLaunchConfBuilder builder = defaultConf.toBuilder();  // required arguments List<String> extendedArgs = new ArrayList<>(Arrays.asList("--jobId", jobId, "--storageURL", storageUri)); // arguments coming from yaml config extendedArgs.addAll(defaultConf.getArgs()); // runtime arguments provided in the request extendedArgs.addAll(conf.getArgs()); return builder.proxyUser(conf.getProxyUser()).args(extendedArgs).build(); }
[*] target: assertTrue(launchConf.getArgs().contains("--trashDir"))
[-] pred:  org. junit. Assert. assertTrue ( launchConf. isEmpty ( ) )

[*] target: assertTrue(launchConf.getArgs().contains("--trashDir"))
[-] pred:  org. junit. Assert. assertTrue ( launchConf. contains ( jr ) )

[*] target: assertTrue(launchConf.getArgs().contains("--trashDir"))
[-] pred:  org. junit. Assert. assertNotNull ( launchConf )

[*] target: assertTrue(launchConf.getArgs().contains("--trashDir"))
[-] pred:  org. junit. Assert. assertTrue ( launchConf.());OnLaunchConf ( ) )

[*] target: assertTrue(launchConf.getArgs().contains("--trashDir"))
[-] pred:  org

************************************
************************************
[+] input: testCreate() { JobDto job = JobModelConstants.JOB_DTO; CreateJobRequestBody requestBody = CreateJobRequestBody.builder() .jobName(job.getJobName()) .clusterId(job.getClusterId()) .jobConf(job.getJobConf()) .build(); Mockito.when(repository.save(Mockito.any())).thenReturn(job); Mockito.when(jobsRegistry.createLaunchConf(Mockito.any(), Mockito.any())) .thenReturn(JobLaunchConf.builder().build()); Mockito.when(jobsCoordinator.submit(Mockito.any())).thenReturn(jobHandle); Mockito.when(jobHandle.getInfo()).thenReturn(jobInfo); Mockito.when(jobInfo.getExecutionId()).thenReturn(job.getExecutionId()); Assertions."<AssertPlaceHolder>"; }
create(CreateJobRequestBody createJobRequestBody);
[*] target: assertEquals(job, service.create(requestBody))
[-] pred:  org. junit. Assert. assertEquals ( requestBody, job )

[*] target: assertEquals(job, service.create(requestBody))
[-] pred:  org. junit. Assert. assertEquals ( requestBody, request. create(CreateJobRequestBody ( requestBody ) )

[*] target: assertEquals(job, service.create(requestBody))
[-] pred:  org. junit. Assert. assertEquals ( requestBody, builder. create(CreateJobRequestBody ( job ) )

[*] target: assertEquals(job, service.create(requestBody))
[-] pred:  org. junit. Assert. assertEquals ( requestBody, job. create(CreateJobRequestBody ( requestBody ) )

[*] target: assertEquals(job, service.create(requestBody))
[-] pred:  org

************************************
************************************
[+] input: testGet() { JobDto job = JobModelConstants.JOB_DTO; JobDtoPrimaryKey key = JobDtoPrimaryKey.builder().jobId(job.getJobId()).build(); Mockito.when(repository.findById(key)).thenReturn(Optional.of(job)); Assertions."<AssertPlaceHolder>"; }
get(String jobId);  /** * Given a {@link CreateJobRequestBody}
[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( key. get(String jobId);TestResultTestResult )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( key. get(String jobId);TestResult )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( key. get(String jobId);BitBitBit ( job. get(String jobId);SPEC ) )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertEquals ( job, key. get(String jobId);TestResult )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org

************************************
************************************
[+] input: testCancel() { JobDto job = JobModelConstants.JOB_DTO; JobDtoPrimaryKey key = JobDtoPrimaryKey.builder().jobId(job.getJobId()).build(); Mockito.when(repository.findById(key)).thenReturn(Optional.of(job)); Mockito.when(repository.save(Mockito.any())).thenReturn(job); Assertions."<AssertPlaceHolder>"; }
get(String jobId);  /** * Given a {@link CreateJobRequestBody}
[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( job. get(String jobId);Json ( key ) )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( job. get(String jobId);BO. get(String jobId);BOBO )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( key. get(String jobIdLongLongLongLongLongLongLongLongLongLongLong ) )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org. junit. Assert. assertNotNull ( job. get(String jobIdTLTLFormatFormat ( key ) )

[*] target: assertEquals(job, service.get(job.getJobId()))
[-] pred:  org

************************************
************************************
[+] input: testGetDataSuccess() { final String testExecutionId = "test-id"; JsonObject responseBody = new JsonObject(); responseBody.addProperty("id", testExecutionId); responseBody.addProperty("appId", "application_id"); List<String> logs = Arrays.asList("log1", "log2"); responseBody.add("log", new Gson().toJsonTree(logs).getAsJsonArray()); responseBody.addProperty("state", "running"); JsonObject appInfo = new JsonObject(); appInfo.addProperty("appUrl", "test_url1"); appInfo.addProperty("logUrl", "test_url2"); responseBody.add("appInfo", appInfo); ExchangeFunction exchangeFunction = request -> { Assertions.assertEquals(HttpMethod.GET, request.method()); String[] parts = request.url().getPath().split("/"); Assertions.assertEquals(testExecutionId, parts[parts.length - 1]); return Mono.just( ClientResponse.create(HttpStatus.OK).body(responseBody.toString()).build()); }; WebClient client = WebClient.builder().exchangeFunction(exchangeFunction).build(); LivyJobHandle handle = new LivyJobHandle(client, testExecutionId); JobInfo info = handle.getInfo(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( responseBody.getAsJsonPrimitive("appId").getAsString(), info.getAppId()); // running maps to ACTIVE Assertions.assertEquals(JobState.RUNNING, info.getState()); }
getExecutionId() { return executionId; }
[*] target: assertEquals( responseBody.getAsJsonPrimitive("id").getAsString(), info.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( info. getId ( ), 0 )

[*] target: assertEquals( responseBody.getAsJsonPrimitive("id").getAsString(), info.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( 0, info. getId ( ) )

[*] target: assertEquals( responseBody.getAsJsonPrimitive("id").getAsString(), info.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. HashSet ( ), info. getId ( ) )

[*] target: assertEquals( responseBody.getAsJsonPrimitive("id").getAsString(), info.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( info. getId ( ), 0L )

[*] target: assertEquals( responseBody.getAsJsonPrimitive("id").getAsString(), info.getExecutionId())
[-] pred:  org

************************************
************************************
[+] input: testSubmitSuccess() { final String testExecutionId = "test-id"; final JsonObject responseBody = new JsonObject(); final Map<String, String> executionTags = Maps.newHashMap(); executionTags.put("pool", "dev"); final JobLaunchConf conf = new JobLaunchConf( "test", "org.test.Test", "test_user", executionTags, Collections.emptyList(), "test.jar", Collections.emptyList(), Maps.newHashMap()); responseBody.addProperty("id", testExecutionId); ExchangeFunction exchangeFunction = request -> { Assertions.assertEquals(HttpMethod.POST, request.method()); return Mono.just( ClientResponse.create(HttpStatus.CREATED).body(responseBody.toString()).build()); }; WebClient client = WebClient.builder().exchangeFunction(exchangeFunction).build(); LivyJobsCoordinator coordinator = new LivyJobsCoordinator(client); LivyJobHandle handle = coordinator.submit(conf); Assertions."<AssertPlaceHolder>"; }
submit(JobLaunchConf conf) { return METRICS_REPORTER.executeWithStats( () -> { String responseBody = client .post() .uri("/batches") .bodyValue(createSubmitRequestBodyString(conf)) .retrieve() .onStatus( HttpStatus::is5xxServerError, r -> Mono.error(new JobEngineException("Engine server unavailable"))) .onStatus( status -> !HttpStatus.CREATED.equals(status), r -> Mono.error(new JobEngineException("Could not submit job"))) .bodyToMono(String.class) .onErrorMap( ReadTimeoutException.class, ex -> new JobEngineException("Engine server timeout", ex)) .block(); JsonObject response = new Gson().fromJson(responseBody, JsonObject.class); LivyJobHandle jobHandle = new LivyJobHandle(client, response.get("id").getAsString()); return jobHandle; }, MetricsConstant.SUBMIT); }
[*] target: assertEquals(testExecutionId, handle.getExecutionId())
[-] pred:  org. junit. Assert. assertTrue ( handle. submit(JobLaunchConf conf ) )

[*] target: assertEquals(testExecutionId, handle.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( testArtifact, handle )

[*] target: assertEquals(testExecutionId, handle.getExecutionId())
[-] pred:  org. junit. Assert. assertEquals ( testMapping, handle )

[*] target: assertEquals(testExecutionId, handle.getExecutionId())
[-] pred:  org. junit. Assert. assertTrue ( handle. submit(JobLaunchConf conf )

[*] target: assertEquals(testExecutionId, handle.getExecutionId())
[-] pred:  org

************************************
************************************
[+] input: testSubmitFailure() { final JobLaunchConf conf = new JobLaunchConf( "test", "org.test.Test", "test_user", Maps.newHashMap(), Collections.emptyList(), "test.jar", Collections.emptyList(), Maps.newHashMap()); ExchangeFunction exchangeFunction = request -> { Assertions.assertEquals(HttpMethod.POST, request.method()); return Mono.just(ClientResponse.create(HttpStatus.SERVICE_UNAVAILABLE).build()); }; WebClient client = WebClient.builder().exchangeFunction(exchangeFunction).build(); LivyJobsCoordinator coordinator = new LivyJobsCoordinator(client); Assertions."<AssertPlaceHolder>"; }); }
submit(JobLaunchConf conf) { return METRICS_REPORTER.executeWithStats( () -> { String responseBody = client .post() .uri("/batches") .bodyValue(createSubmitRequestBodyString(conf)) .retrieve() .onStatus( HttpStatus::is5xxServerError, r -> Mono.error(new JobEngineException("Engine server unavailable"))) .onStatus( status -> !HttpStatus.CREATED.equals(status), r -> Mono.error(new JobEngineException("Could not submit job"))) .bodyToMono(String.class) .onErrorMap( ReadTimeoutException.class, ex -> new JobEngineException("Engine server timeout", ex)) .block(); JsonObject response = new Gson().fromJson(responseBody, JsonObject.class); LivyJobHandle jobHandle = new LivyJobHandle(client, response.get("id").getAsString()); return jobHandle; }, MetricsConstant.SUBMIT); }
[*] target: assertThrows( JobEngineException.class, () -> { coordinator.submit(conf)
[-] pred:  org. junit. Assert. assertNull ( coordinator. submit(JobLaunchConf conf )

[*] target: assertThrows( JobEngineException.class, () -> { coordinator.submit(conf)
[-] pred:  org. junit. Assert. assertNull ( coordinator. submit(JobLaunchConf ( ) )

[*] target: assertThrows( JobEngineException.class, () -> { coordinator.submit(conf)
[-] pred:  org. junit. Assert. assertNull ( coordinator. submit(JobLaunchConf val )

[*] target: assertThrows( JobEngineException.class, () -> { coordinator.submit(conf)
[-] pred:  org. junit. Assert. assertNull ( coordinator. submit(JobLaunchConf conf ) )

[*] target: assertThrows( JobEngineException.class, () -> { coordinator.submit(conf)
[-] pred:  org. junit. Assert. assertNull ( coordinator. submit(JobLaunchConf conf ) org

************************************
************************************
[+] input: testValidatePatternPositive() {  // With pattern RetentionColumnPattern pattern = RetentionColumnPattern.builder().pattern("yyyy-mm-dd-hh").columnName("aa").build(); Retention retention1 = Retention.builder() .columnPattern(pattern) .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .build();  Assertions.assertTrue( validator.validatePatternIfPresent( retention1, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  // Without Pattern Retention retention2 = Retention.builder() .columnPattern(null) .count(10) .granularity(TimePartitionSpec.Granularity.DAY) .build(); Assertions.assertTrue( validator.validatePatternIfPresent( retention2, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  // Able to find nested columns in the column existence check pattern = RetentionColumnPattern.builder().pattern("yyyy-mm-dd-hh").columnName("top1.aa").build(); Retention retention3 = Retention.builder() .columnPattern(pattern) .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .build(); Assertions.assertTrue( validator.validatePatternIfPresent( retention3, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)));  // Empty pattern is valid pattern = RetentionColumnPattern.builder().pattern("").columnName("top1.aa").build(); Retention retention4 = Retention.builder() .columnPattern(pattern) .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .build(); Assertions."<AssertPlaceHolder>"; }
validatePatternIfPresent(Retention retention, TableUri tableUri, String schema) { if (retention.getColumnPattern() != null) { if (retention.getColumnPattern().getColumnName() != null && !columnExists( getSchemaFromSchemaJson(schema), retention.getColumnPattern().getColumnName())) { return false; } return isPatternValid(retention.getColumnPattern().getPattern(), tableUri); }  return true; }
[*] target: assertTrue( validator.validatePatternIfPresent( retention4, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( validator.validatePatternIfPresent(bb3, Retention retention2, Retention retention4 ) && ( is valid pattern. equals ( retention3 ) ) ) )

[*] target: assertTrue( validator.validatePatternIfPresent( retention4, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( validator.validatePatternIfPresent(bb3, retention2, Retention retention4 ) && ( is valid pattern. equals ( retention3 ) ) ) )

[*] target: assertTrue( validator.validatePatternIfPresent( retention4, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( validator.validatePatternIfPresent(bb3, Retention retention2, Retention retention4 ) == ( Retention retention3 ) ) )

[*] target: assertTrue( validator.validatePatternIfPresent( retention4, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( validator.validatePatternIfPresent(bb3, Retention retention4 ) && ( is valid pattern. equals ( retention4 ) ) ) )

[*] target: assertTrue( validator.validatePatternIfPresent( retention4, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( validator.validatePatternIfPresent(bb3, Retention retention2, Retention retention4 ) && ( is valid pattern. equals ( retention4 ) ) ) )

************************************
************************************
[+] input: testValidatePatternNegative() { RetentionColumnPattern malformedPattern = RetentionColumnPattern.builder().pattern("random_pattern").columnName("aa").build(); Retention testRetention = Retention.builder() .columnPattern(malformedPattern) .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .build(); Assertions."<AssertPlaceHolder>"; }
validatePatternIfPresent(Retention retention, TableUri tableUri, String schema) { if (retention.getColumnPattern() != null) { if (retention.getColumnPattern().getColumnName() != null && !columnExists( getSchemaFromSchemaJson(schema), retention.getColumnPattern().getColumnName())) { return false; } return isPatternValid(retention.getColumnPattern().getPattern(), tableUri); }  return true; }
[*] target: assertFalse( validator.validatePatternIfPresent( testRetention, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( testRetention. validatePatternIfPresent(malformedPattern).count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). validatePatternIfPresent( ftPattern, schema ) )

[*] target: assertFalse( validator.validatePatternIfPresent( testRetention, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( testRetention. validatePatternIfPresent(malformedPattern).count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). validatePatternIfPresent( wrt wrt schema ) )

[*] target: assertFalse( validator.validatePatternIfPresent( testRetention, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( testRetention. validatePatternIfPresent(malformedPattern).count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). count(1).granularity(TimePartitionSpec.Granularity.DAY). validatePatternIfPresent( wrt wrt schema) { }

[*] target: assertFalse( validator.validatePatternIfPresent( testRetention, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertThat ( testRetention. validatePatternIfPresent(Retention malformedPattern, org. hamcrest. Matchers. is ( false ) )

[*] target: assertFalse( validator.validatePatternIfPresent( testRetention, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org

************************************
************************************
[+] input: testValidate() { // Negative: declared retention column not exists RetentionColumnPattern pattern0 = RetentionColumnPattern.builder() .pattern("yyyy-mm-dd-hh") .columnName("bb") .build(); /* dummySchema doesn't have bb*/ Retention retention0 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .columnPattern(pattern0) .build(); Policies policies0 = Policies.builder().retention(retention0).build(); Assertions.assertFalse( validator.validate( policies0, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  pattern0 = RetentionColumnPattern.builder() .pattern("yyyy-mm-dd-hh") .columnName("Aa") /* casing matters*/ .build(); retention0 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .columnPattern(pattern0) .build(); policies0 = Policies.builder().retention(retention0).build(); Assertions.assertFalse( validator.validate( policies0, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  pattern0 = RetentionColumnPattern.builder() .pattern("yyyy-mm-dd-hh") .columnName("top1.aaa") /* negative case for nested*/ .build(); retention0 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .columnPattern(pattern0) .build(); policies0 = Policies.builder().retention(retention0).build(); Assertions.assertFalse( validator.validate( policies0, null, TableUri.builder().build(), getSchemaJsonFromSchema(nestedSchema)));  // Negative: Missing timepartitionspec AND pattern Retention retention1 = Retention.builder().count(1).granularity(TimePartitionSpec.Granularity.DAY).build(); Policies policies1 = Policies.builder().retention(retention1).build(); Assertions.assertFalse( validator.validate( policies1, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  // Positive: Only have pattern but no timepartitionSpec RetentionColumnPattern pattern = RetentionColumnPattern.builder().pattern("yyyy-mm-dd-hh").build(); Retention retention2 = retention1.toBuilder().columnPattern(pattern).build(); Policies policies2 = Policies.builder().retention(retention2).build(); Assertions.assertTrue( validator.validate( policies2, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  // Negative: Having both timepartitionspec AND pattern Retention retention3 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .columnPattern(pattern) .build(); Policies policies3 = Policies.builder().retention(retention3).build(); Assertions.assertFalse( validator.validate( policies3, TimePartitionSpec.builder() .columnName("ts") .granularity(TimePartitionSpec.Granularity.DAY) .build(), TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  // Negative: Having both timepartitionspec AND invalid-pattern RetentionColumnPattern malformedPattern = RetentionColumnPattern.builder().pattern("random_pattern").columnName("aa").build(); Retention retention4 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.DAY) .columnPattern(malformedPattern) .build(); Policies policies4 = Policies.builder().retention(retention4).build(); Assertions.assertFalse( validator.validate( policies4, TimePartitionSpec.builder() .columnName("ts") .granularity(TimePartitionSpec.Granularity.DAY) .build(), TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)));  Field failedMsg = org.springframework.util.ReflectionUtils.findField( PoliciesSpecValidator.class, "failureMessage"); Assertions.assertNotNull(failedMsg); org.springframework.util.ReflectionUtils.makeAccessible(failedMsg); Assertions.assertTrue( ((String) org.springframework.util.ReflectionUtils.getField(failedMsg, validator)) .contains("You can only specify retention column pattern on non-timestampPartitioned"));  // Negative: having granularity not supported by defaultColumPattern RetentionColumnPattern defaultPattern = RetentionColumnPattern.builder().columnName("aa").pattern("").build(); Retention retention5 = Retention.builder() .count(1) .granularity(TimePartitionSpec.Granularity.MONTH) .columnPattern(defaultPattern) .build(); Policies policies5 = Policies.builder().retention(retention5).build(); Assertions."<AssertPlaceHolder>";  failedMsg = org.springframework.util.ReflectionUtils.findField( PoliciesSpecValidator.class, "failureMessage"); Assertions.assertNotNull(failedMsg); org.springframework.util.ReflectionUtils.makeAccessible(failedMsg); Assertions.assertTrue( ((String) org.springframework.util.ReflectionUtils.getField(failedMsg, validator)) .contains("Please define pattern in retention config"));  // The granularity mismatch is covered in // com.linkedin.openhouse.tables.e2e.h2.TablesControllerTest.testCreateRequestFailsForWithGranularityDifferentFromTimePartitionSpec // with error message validation  }
validate( Policies policies, TimePartitionSpec timePartitioning, TableUri tableUri, String schema) {  if (policies != null && policies.getRetention() != null) { // Two invalid case for timePartitioned table if (timePartitioning != null) { if (policies.getRetention().getColumnPattern() != null) { failureMessage = String.format( "You can only specify retention column pattern on non-timestampPartitioned table (table[%s] is time-partitioned by[%s])", tableUri, timePartitioning.getColumnName()); return false; } if (!policies.getRetention().getGranularity().equals(timePartitioning.getGranularity())) { failureMessage = String.format( "invalid policies retention granularity format for table %s. Policies granularity must be equal to or lesser than" + " time partition spec granularity", tableUri); errorField = "retention"; return false; } }  // invalid cases regarding the integrity of retention object. if (!validateGranularityWithPattern(policies.getRetention())) { failureMessage = String.format( "Provided Retention Granularity[%s] is not supported with default pattern. " + "Please define pattern in retention config or use one of supported granularity: %s", policies.getRetention().getGranularity().name(), Arrays.toString(DefaultColumnPattern.values())); return false; } if (!validatePatternIfPresent(policies.getRetention(), tableUri, schema)) { failureMessage = String.format( "Provided pattern[%s] is not recognizable by OpenHouse for the table[%s]; Also please make sure the declared column is part of table schema.", policies.getRetention().getColumnPattern(), tableUri); return false; } if (timePartitioning == null && policies.getRetention().getColumnPattern() == null) { failureMessage = String.format( "For non timestamp-partitioned table %s, column pattern in retention policy is mandatory", tableUri); return false; } } return true; }
[*] target: assertFalse( validator.validate( policies5, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertEquals ( policies0, PoliciesPolicies1 )

[*] target: assertFalse( validator.validate( policies5, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( ( ( policies0. size ( ) ) == ( retention0. size ( ) ) ) )

[*] target: assertFalse( validator.validate( policies5, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( PoliciesPolicies0. equals ( policies1 ) )

[*] target: assertFalse( validator.validate( policies5, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. METHOD_5 ( elements ) )

[*] target: assertFalse( validator.validate( policies5, null, TableUri.builder().build(), getSchemaJsonFromSchema(dummySchema)))
[-] pred:  org. junit. Assert. assertEquals ( policies0, Policiesj0 )

************************************
************************************
[+] input: testRawPathMapping() { // Following are the actual exhausted list of paths in Tables services at version Set<String> paths = new HashSet<>(); paths.add("/v0/databases"); paths.add("/v0.9/databases"); paths.add("/v1/databases"); paths.add("/databases"); paths.add("/databases/{databaseId}/aclPolicies"); paths.add("/v0/databases/{databaseId}/aclPolicies"); paths.add("/databases/{databaseId}/tables/{tableId}/aclPolicies"); paths.add("/v0/databases/{databaseId}/tables/{tableId}/aclPolicies"); paths.add("/v0/databases/{databaseId}/tables"); paths.add("/databases/{databaseId}/tables"); paths.add("/databases/{databaseId}/tables/{tableId}"); paths.add("/v0/databases/{databaseId}/tables/{tableId}"); paths.add("/v0/databases/{databaseId}/tables/{tableId}/iceberg/v2/snapshots"); paths.add("/databases/{databaseId}/tables/{tableId}/iceberg/v2/snapshots");  Map<String, String> result = MainApplicationConfig.generatePostfix( paths.stream().map(Paths::get).collect(Collectors.toSet())); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(result.get("/v0/databases"), "V0"); Assertions.assertEquals(result.get("/v1/databases"), "V1"); Assertions.assertEquals(result.get("/databases"), ""); Assertions.assertEquals(result.get("/databases/{databaseId}/aclPolicies"), ""); Assertions.assertEquals(result.get("/v0/databases/{databaseId}/aclPolicies"), "V0"); Assertions.assertEquals(result.get("/databases/{databaseId}/tables/{tableId}/aclPolicies"), ""); Assertions.assertEquals( result.get("/v0/databases/{databaseId}/tables/{tableId}/aclPolicies"), "V0"); Assertions.assertEquals(result.get("/v0/databases/{databaseId}/tables"), "V0"); Assertions.assertEquals(result.get("/databases/{databaseId}/tables"), ""); Assertions.assertEquals(result.get("/databases/{databaseId}/tables/{tableId}"), ""); Assertions.assertEquals(result.get("/v0/databases/{databaseId}/tables/{tableId}"), "V0"); Assertions.assertEquals( result.get("/v0/databases/{databaseId}/tables/{tableId}/iceberg/v2/snapshots"), "V0"); Assertions.assertEquals( result.get("/databases/{databaseId}/tables/{tableId}/iceberg/v2/snapshots"), ""); }
generatePostfix(Set<java.nio.file.Path> pathKeys) { Map<String, String> rawPathToMethodVer = new HashMap<>(); for (java.nio.file.Path path : pathKeys) {  java.nio.file.Path firstLevel = path.subpath(0, 1); String version = isVersion(firstLevel.toString()) ? firstLevel.toString() : ""; rawPathToMethodVer.put(path.toString(), version.toUpperCase()); }  return rawPathToMethodVer; }
[*] target: assertEquals(result.size(), paths.size())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.size(), paths.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals(result.size(), paths.size())
[-] pred:  org. junit. Assert. assertEquals ( result. size ( ), 0 )

[*] target: assertEquals(result.size(), paths.size())
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertEquals(result.size(), paths.size())
[-] pred:  org. junit. Assert. assertEquals ( result. size ( ), 50 )

************************************
************************************
[+] input: testTableService() { // Create Table TableDto putResultCreate = verifyPutTableRequest(TABLE_DTO, null, true); TableDto putResultCreateSameDB = verifyPutTableRequest(TABLE_DTO_SAME_DB, null, true); TableDto putResultCreateDiffDB = verifyPutTableRequest(TABLE_DTO_DIFF_DB, null, true);  // Read Table verifyGetTableRequest(TABLE_DTO); verifyGetTableRequest(TABLE_DTO_SAME_DB); verifyGetTableRequest(TABLE_DTO_DIFF_DB);  // Attempt to update table with the exactly same object - Should have no impact on the Table // version verifyPutIdenticalTableRequest(putResultCreate, putResultCreate); verifyPutIdenticalTableRequest(putResultCreateSameDB, putResultCreateSameDB); verifyPutIdenticalTableRequest(putResultCreateSameDB, putResultCreateSameDB);  // Update Table with valid schema change (adding a new required field) TableDto updatedPutResultCreate = verifyPutTableRequest(evolveDummySchema(putResultCreate), putResultCreate, false); Assertions.assertEquals( updatedPutResultCreate.getTableVersion(), stripPathScheme(putResultCreate.getTableLocation())); TableDto updatedPutResultCreateSameDB = verifyPutTableRequest( evolveDummySchema(putResultCreateSameDB), putResultCreateSameDB, false); Assertions.assertEquals( updatedPutResultCreateSameDB.getTableVersion(), stripPathScheme(putResultCreateSameDB.getTableLocation())); TableDto updatedPutResultCreateDiffDB = verifyPutTableRequest( evolveDummySchema(putResultCreateDiffDB), putResultCreateDiffDB, false); Assertions.assertEquals( updatedPutResultCreateDiffDB.getTableVersion(), stripPathScheme(putResultCreateDiffDB.getTableLocation()));  // Delete Table tablesService.deleteTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER); tablesService.deleteTable( TABLE_DTO_SAME_DB.getDatabaseId(), TABLE_DTO_SAME_DB.getTableId(), TEST_USER); tablesService.deleteTable( TABLE_DTO_DIFF_DB.getDatabaseId(), TABLE_DTO_DIFF_DB.getTableId(), TEST_USER);  // Read After Delete Assertions."<AssertPlaceHolder>"; }
getTable(String databaseId, String tableId, String actingPrincipal);  /** * Given a databaseId, prepare list of {@link TableDto}
[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedPutResultCreateDiffDB, updatedPutResultCreateSameDB )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedPutResultCreateSerialDB, updatedPutResultCreateDiffDB )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedPutResultCreateDiffDB, updatedPutResultCreateNoDB )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedPutResultCreateSerialDB, updatedPutResultCreateSameDB )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org

************************************
************************************
[+] input: IOException { String baseSchema = ResourceIoHelper.getSchemaJsonFromResource("field_update/base.json"); TableDto baseResult = verifyPutTableRequest(decorateSchemaEvolution(TABLE_DTO, baseSchema), null, true); String baseInt2Long = ResourceIoHelper.getSchemaJsonFromResource("field_update/base_int2long.json"); TableDto updatedResult = verifyPutTableRequest(decorateSchemaEvolution(baseResult, baseInt2Long), baseResult, false);  // Verify version Assertions.assertEquals( stripPathScheme(baseResult.getTableLocation()), updatedResult.getTableVersion());  // Verify schema updated // Again schema's namespace might be not matching so only compare fields. Assertions.assertTrue( getSchemaFromSchemaJson(updatedResult.getSchema()) .sameSchema(getSchemaFromSchemaJson(baseInt2Long)));  // Clean up tablesService.deleteTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER);  Assertions."<AssertPlaceHolder>"; }
getTable(String databaseId, String tableId, String actingPrincipal);  /** * Given a databaseId, prepare list of {@link TableDto}
[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedResult, baseResult )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( updatedResult, baseResult2Long )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( baseResult, updatedResult )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( newResult, updatedResult )

[*] target: assertThrows( NoSuchUserTableException.class, () -> tablesService.getTable(TABLE_DTO.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  )

************************************
************************************
[+] input: testReplicaTableUpdateAsNonSystemAdmin() { UUID expectedUUID = UUID.randomUUID(); TableDto tableDtoCopy = TABLE_DTO .toBuilder() .tableProperties( ImmutableMap.of( CatalogConstants.OPENHOUSE_UUID_KEY, expectedUUID.toString(), "openhouse.tableId", TABLE_DTO.getTableId(), "openhouse.databaseId", TABLE_DTO.getDatabaseId())) .tableType(TableType.REPLICA_TABLE) .build(); Assertions.assertEquals(tableDtoCopy.getTableType(), TableType.REPLICA_TABLE); TableDto putResultCreate = verifyPutTableRequest(tableDtoCopy, null, true); Assertions.assertEquals(putResultCreate.getTableType(), TableType.REPLICA_TABLE); Assertions.assertEquals(putResultCreate.getTableUUID(), expectedUUID.toString()); // Read Table Assertions.assertEquals( expectedUUID.toString(), tablesService .getTable(tableDtoCopy.getDatabaseId(), tableDtoCopy.getTableId(), TEST_USER) .getTableUUID());  Mockito.when( authorizationHandler.checkAccessDecision( Mockito.any(), Mockito.any(TableDto.class), Mockito.eq(Privileges.SYSTEM_ADMIN))) .thenReturn(false); Assertions."<AssertPlaceHolder>"; Mockito.when( authorizationHandler.checkAccessDecision( Mockito.any(), Mockito.any(TableDto.class), Mockito.eq(Privileges.SYSTEM_ADMIN))) .thenReturn(true); tablesService.deleteTable(tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER); }
deleteTable(String databaseId, String tableId, String actingPrincipal);
[*] target: assertThrows( AccessDeniedException.class, () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( expectedUUID, putResultCreate )

[*] target: assertThrows( AccessDeniedException.class, () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( expectedUUID, putResultCreate. getId ( ) )

[*] target: assertThrows( AccessDeniedException.class, () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( expectedUUID, putResultCreate. putResultCreate )

[*] target: assertThrows( AccessDeniedException.class, () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( expectedUUID, putResultCreate. getBackendWith ( ) )

[*] target: assertThrows( AccessDeniedException.class, () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org

************************************
************************************
[+] input: testPrimaryTableUpdateAsNonSystemAdmin() { TableDto tableDtoCopy = TABLE_DTO.toBuilder().build(); Assertions.assertEquals(tableDtoCopy.getTableType(), TableType.PRIMARY_TABLE); TableDto putResultCreate = verifyPutTableRequest(tableDtoCopy, null, true); Assertions.assertEquals(putResultCreate.getTableType(), TableType.PRIMARY_TABLE);  Mockito.when( authorizationHandler.checkAccessDecision( Mockito.any(), Mockito.any(TableDto.class), Mockito.eq(Privileges.SYSTEM_ADMIN))) .thenReturn(false); Assertions."<AssertPlaceHolder>"; }
deleteTable(String databaseId, String tableId, String actingPrincipal);
[*] target: assertDoesNotThrow( () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertEquals ( tableDtoCopy, putResultCreate )

[*] target: assertDoesNotThrow( () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertTrue ( putResultCreate. deleteTable ( tableDtoCopy ) )

[*] target: assertDoesNotThrow( () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertTrue ( putResultCreate. deleteTable ( tableDtoCopy, putResultCreate ) )

[*] target: assertDoesNotThrow( () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertTrue ( putResultCreate. deleteTable(String databaseId, putResultCreate ) )

[*] target: assertDoesNotThrow( () -> tablesService.deleteTable( tableDtoCopy.getDatabaseId(), TABLE_DTO.getTableId(), TEST_USER))
[-] pred:  org. junit. Assert. assertNull ( putResultCreate )

************************************
************************************
[+] input: testSnapshotsWithStagedCreate() { CreateUpdateTableRequestBody stagedCreateUpdateTableRequestBody = CreateUpdateTableRequestBody.builder() .databaseId("d1") .tableId("t") .clusterId("c") .schema(HEALTH_SCHEMA_LITERAL) .baseTableVersion(INITIAL_TABLE_VERSION) .tableProperties(ImmutableMap.of()) .stageCreate(true) .build();  RequestValidationFailureException requestValidationFailureException = "<AssertPlaceHolder>"; Assertions.assertTrue( requestValidationFailureException .getMessage() .contains("Creating staged table d1.t with putSnapshot is not supported")); }
validatePutSnapshots( String clusterId, String databaseId, String tableId, IcebergSnapshotsRequestBody icebergSnapshotsRequestBody);
[*] target: assertThrows( RequestValidationFailureException.class, () -> icebergSnapshotsApiValidator.validatePutSnapshots( VALID_METADATA_BODY.getClusterId(), VALID_METADATA_BODY.getDatabaseId(), VALID_METADATA_BODY.getTableId(), // Health Request body except base version being null IcebergSnapshotsRequestBody.builder() .createUpdateTableRequestBody(stagedCreateUpdateTableRequestBody) .baseTableVersion(INITIAL_TABLE_VERSION) .jsonSnapshots(Collections.emptyList()) .build()))
[-] pred:  org. junit. Assert. assertNotNull ( requestValidationFailureException )

[*] target: assertThrows( RequestValidationFailureException.class, () -> icebergSnapshotsApiValidator.validatePutSnapshots( VALID_METADATA_BODY.getClusterId(), VALID_METADATA_BODY.getDatabaseId(), VALID_METADATA_BODY.getTableId(), // Health Request body except base version being null IcebergSnapshotsRequestBody.builder() .createUpdateTableRequestBody(stagedCreateUpdateTableRequestBody) .baseTableVersion(INITIAL_TABLE_VERSION) .jsonSnapshots(Collections.emptyList()) .build()))
[-] pred:  org. junit. Assert. assertTrue ( requestValidationFailureException. isValid ( ) )

[*] target: assertThrows( RequestValidationFailureException.class, () -> icebergSnapshotsApiValidator.validatePutSnapshots( VALID_METADATA_BODY.getClusterId(), VALID_METADATA_BODY.getDatabaseId(), VALID_METADATA_BODY.getTableId(), // Health Request body except base version being null IcebergSnapshotsRequestBody.builder() .createUpdateTableRequestBody(stagedCreateUpdateTableRequestBody) .baseTableVersion(INITIAL_TABLE_VERSION) .jsonSnapshots(Collections.emptyList()) .build()))
[-] pred:  org. junit. Assert. assertNotNull ( requestValidationFailureException

[*] target: assertThrows( RequestValidationFailureException.class, () -> icebergSnapshotsApiValidator.validatePutSnapshots( VALID_METADATA_BODY.getClusterId(), VALID_METADATA_BODY.getDatabaseId(), VALID_METADATA_BODY.getTableId(), // Health Request body except base version being null IcebergSnapshotsRequestBody.builder() .createUpdateTableRequestBody(stagedCreateUpdateTableRequestBody) .baseTableVersion(INITIAL_TABLE_VERSION) .jsonSnapshots(Collections.emptyList()) .build()))
[-] pred:  org

[*] target: assertThrows( RequestValidationFailureException.class, () -> icebergSnapshotsApiValidator.validatePutSnapshots( VALID_METADATA_BODY.getClusterId(), VALID_METADATA_BODY.getDatabaseId(), VALID_METADATA_BODY.getTableId(), // Health Request body except base version being null IcebergSnapshotsRequestBody.builder() .createUpdateTableRequestBody(stagedCreateUpdateTableRequestBody) .baseTableVersion(INITIAL_TABLE_VERSION) .jsonSnapshots(Collections.emptyList()) .build()))
[-] pred:  )

************************************
************************************
[+] input: testToGetDatabaseResponseBody() { Assertions."<AssertPlaceHolder>"; }
toGetDatabaseResponseBody(DatabaseDto databaseDto);  /** Construct a {@link DatabaseDto}
[*] target: assertEquals( DatabaseModelConstants.GET_DATABASE_RESPONSE_BODY, databasesMapper.toGetDatabaseResponseBody(DatabaseModelConstants.DATABASE_DTO))
[-] pred:  org. junit. Assert. assertSame ( databaseDto, toGetDatabaseResponseBody(DatabaseDto. toGetDatabaseResponseBody(DatabaseDto

[*] target: assertEquals( DatabaseModelConstants.GET_DATABASE_RESPONSE_BODY, databasesMapper.toGetDatabaseResponseBody(DatabaseModelConstants.DATABASE_DTO))
[-] pred:  org. junit. Assert. assertSame ( databaseDto, toGetDatabaseResponseBody(DatabaseDto. toGetDatabaseResponseBody(DatabaseDto object

[*] target: assertEquals( DatabaseModelConstants.GET_DATABASE_RESPONSE_BODY, databasesMapper.toGetDatabaseResponseBody(DatabaseModelConstants.DATABASE_DTO))
[-] pred:  org. junit. Assert. assertSame ( databaseDto, toGetDatabaseResponseBody(DatabaseDto toGetDatabaseResponseBody(DatabaseDto

[*] target: assertEquals( DatabaseModelConstants.GET_DATABASE_RESPONSE_BODY, databasesMapper.toGetDatabaseResponseBody(DatabaseModelConstants.DATABASE_DTO))
[-] pred:  org. junit. Assert. assertSame ( databaseDto, toGetDatabaseResponseBody(DatabaseDto

[*] target: assertEquals( DatabaseModelConstants.GET_DATABASE_RESPONSE_BODY, databasesMapper.toGetDatabaseResponseBody(DatabaseModelConstants.DATABASE_DTO))
[-] pred:  org

************************************
************************************
[+] input: testToDatabaseDto() { DatabaseDto databaseDto = databasesMapper.toDatabaseDto("d1", "local-cluster"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("local-cluster", databaseDto.getClusterId()); }
toDatabaseDto(String databaseId, String clusterId);
[*] target: assertEquals("d1", databaseDto.getDatabaseId())
[-] pred:  org. junit. Assert. assertNotNull ( databaseDto )

[*] target: assertEquals("d1", databaseDto.getDatabaseId())
[-] pred:  org. junit. Assert. assertTrue ( ( databaseDto!= null ) )

[*] target: assertEquals("d1", databaseDto.getDatabaseId())
[-] pred:  org. junit. Assert. assertNull ( databaseDto )

[*] target: assertEquals("d1", databaseDto.getDatabaseId())
[-] pred:  org. junit. Assert. assertNotNull ( databaseDto )

[*] target: assertEquals("d1", databaseDto.getDatabaseId())
[-] pred:  org

************************************
************************************
[+] input: IOException { for (String transform : ImmutableList.of("identity", "truncate[10]")) { Map<String, String> colTransformMap = new HashMap<>(); colTransformMap.put(timePartitioningColumn, "day"); clusteringColumns.stream().forEach(x -> colTransformMap.put(x, transform)); List<ClusteringColumn> clusteringSpecs = tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)); assertThat( clusteringSpecs.stream().map(x -> x.getColumnName()).collect(Collectors.toList()), containsInAnyOrder(clusteringColumns.toArray())); } recreateTempDir(); for (String transform : ImmutableList.of("bucket[10]", "void")) { Map<String, String> colTransformMap = new HashMap<>(); colTransformMap.put(timePartitioningColumn, "day"); clusteringColumns.stream().forEach(x -> colTransformMap.put(x, transform)); Assertions."<AssertPlaceHolder>"; } }
toClusteringSpec(Table table) { PartitionSpec partitionSpec = table.spec(); List<PartitionField> clusteringFields = partitionSpec.fields().stream() .filter( x -> { validatePartitionField(table.schema(), x); return ALLOWED_CLUSTERING_TYPEIDS.contains( table.schema().findField(x.sourceId()).type().typeId()); }) .collect(Collectors.toList()); if (clusteringFields.size() > ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS) { throw new IllegalStateException( String.format( "Max allowed clustering columns supported %s, actual %s", ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS, clusteringFields.size())); } List<ClusteringColumn> clustering = null; if (!clusteringFields.isEmpty()) { clustering = clusteringFields.stream() .map( x -> ClusteringColumn.builder() .columnName(table.schema().findColumnName(x.sourceId())) .transform(toTransform(x).orElse(null)) .build()) .collect(Collectors.toList()); } return clustering; }
[*] target: assertThrows( IllegalStateException.class, () -> tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)))
[-] pred:  org. junit. Assert. assertTrue ( colTransformMap. isEmpty ( ) )

[*] target: assertThrows( IllegalStateException.class, () -> tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)))
[-] pred:  org. junit. Assert. assertEquals ( 0, colTransformMap. size ( ) )

[*] target: assertThrows( IllegalStateException.class, () -> tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)))
[-] pred:  org. junit. Assert. assertTrue ( org. bmcrest. CoreMatchers. is ( colTransformMap ) )

[*] target: assertThrows( IllegalStateException.class, () -> tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)))
[-] pred:  org. junit. Assert. assertEquals ( new HashMap ( 0, 0, 0 ), colTransformMap )

[*] target: assertThrows( IllegalStateException.class, () -> tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)))
[-] pred:  org. junit. Assert. assertEquals ( new HashMap ( 0, 0, 0, 0 ), colTransformMap )

************************************
************************************
[+] input: testToPartitionSpecClusteringOnly() { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .clustering( clusteringColumns.stream() .map(x -> ClusteringColumn.builder().columnName(x).build()) .collect(Collectors.toList())) .timePartitioning(null) .build());  PartitionSpec partitionSpec = tablesMapper.toPartitionSpec(tableDto); Assertions."<AssertPlaceHolder>"; // Make sure only clustering columns have been captured in the Iceberg // partition spec. assertThat( partitionSpec.fields().stream() .map(x -> schema.findField(x.sourceId()).name()) .collect(Collectors.toList()), containsInAnyOrder(clusteringColumns.toArray())); // Make sure clustering columns have appropriate transforms. assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId(); switch (typeID) { case STRING: case INTEGER: case LONG: return "identity".equals(x.transform().toString()); default: return false; } }) .collect(Collectors.toList()), everyItem(is(oneOf(true)))); }
toPartitionSpec(TableDto tableDto) { Schema schema = getSchemaFromSchemaJson(tableDto.getSchema().trim()); TimePartitionSpec timePartitioning = tableDto.getTimePartitioning(); List<ClusteringColumn> clustering = tableDto.getClustering(); PartitionSpec.Builder partitionSpecBuilder = PartitionSpec.builderFor(schema); try { if (timePartitioning != null) { switch (timePartitioning.getGranularity()) { case DAY: partitionSpecBuilder.day(timePartitioning.getColumnName()); break; case HOUR: partitionSpecBuilder.hour(timePartitioning.getColumnName()); break; case MONTH: partitionSpecBuilder.month(timePartitioning.getColumnName()); break; case YEAR: partitionSpecBuilder.year(timePartitioning.getColumnName()); break; default: throw new IllegalArgumentException( String.format( "Granularity: %s is not supported", timePartitioning.getGranularity())); } } if (clustering != null) { if (clustering.size() > ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS) { throw new IllegalArgumentException( String.format( "Max allowed clustering columns supported are %s, specified are %s", ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS, clustering.size())); } for (ClusteringColumn clusteringField : clustering) { Types.NestedField field = schema.findField(clusteringField.getColumnName()); if (field == null) { throw new IllegalArgumentException( String.format( "Clustering column %s not found in the schema", clusteringField.getColumnName())); } Type.TypeID typeID = field.type().typeId(); if (!ALLOWED_CLUSTERING_TYPEIDS.contains(typeID)) { throw new IllegalArgumentException( String.format( "Column name %s of type %s is not supported clustering type", clusteringField.getColumnName(), typeID.name())); } if (clusteringField.getTransform() != null) { Transform transform = clusteringField.getTransform(); switch (transform.getTransformType()) { case TRUNCATE: partitionSpecBuilder.truncate( clusteringField.getColumnName(), Integer.parseInt(transform.getTransformParams().get(0))); break; default: throw new IllegalArgumentException( String.format( "Unsupported transform %s for clustering column %s", transform.getTransformType().toString(), clusteringField.getColumnName())); } } else { // identity transform partitionSpecBuilder.identity(clusteringField.getColumnName()); } } } } catch (IllegalArgumentException ex) { // iceberg throws this exception for .day()/.hour()/.month()/.year() when column is missing throw new RequestValidationFailureException( "Adding partition spec failed:" + ex.getMessage()); } return partitionSpecBuilder.build(); }
[*] target: assertEquals(4, partitionSpec.fields().size())
[-] pred:  org. junit. Assert. assertNotNull ( partitionSpec )

[*] target: assertEquals(4, partitionSpec.fields().size())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. HashSet ( ), partitionSpec )

[*] target: assertEquals(4, partitionSpec.fields().size())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( ), partitionSpec )

[*] target: assertEquals(4, partitionSpec.fields().size())
[-] pred:  org. junit. Assert. assertEquals ( 2, partitionSpec. size ( ) )

[*] target: assertEquals(4, partitionSpec.fields().size())
[-] pred:  org

************************************
************************************
[+] input: testToPartitionSpecTimePartitioningAndClustering() { for (TimePartitionSpec.Granularity granularity : ImmutableList.of(DAY, MONTH, YEAR, HOUR)) { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .timePartitioning( TimePartitionSpec.builder() .columnName(timePartitioningColumn) .granularity(granularity) .build()) .clustering( clusteringColumns.stream() .map(x -> ClusteringColumn.builder().columnName(x).build()) .collect(Collectors.toList())) .build()); PartitionSpec partitionSpec = tablesMapper.toPartitionSpec(tableDto); Assertions.assertEquals(5, partitionSpec.fields().size()); // Make sure both partitioning and clustering columns have been captured in the Iceberg // partition spec. assertThat( partitionSpec.fields().stream() .map(x -> schema.findField(x.sourceId()).name()) .collect(Collectors.toList()), containsInAnyOrder( Stream.concat( Arrays.asList(timePartitioningColumn).stream(), clusteringColumns.stream()) .collect(Collectors.toList()) .toArray())); // Make sure both partitioning and clustering columns have appropriate transforms. assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId(); switch (typeID) { case TIMESTAMP: return x.transform().toString().equals(granularity.name().toLowerCase()); case STRING: case INTEGER: case LONG: return "identity".equals(x.transform().toString()); default: return false; } }) .collect(Collectors.toList()), everyItem(is(oneOf(true)))); }  PartitionSpec partitionSpec = tablesMapper.toPartitionSpec( TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .timePartitioning(null) .clustering(null) .build())); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(partitionSpec.isUnpartitioned()); }
toPartitionSpec(TableDto tableDto) { Schema schema = getSchemaFromSchemaJson(tableDto.getSchema().trim()); TimePartitionSpec timePartitioning = tableDto.getTimePartitioning(); List<ClusteringColumn> clustering = tableDto.getClustering(); PartitionSpec.Builder partitionSpecBuilder = PartitionSpec.builderFor(schema); try { if (timePartitioning != null) { switch (timePartitioning.getGranularity()) { case DAY: partitionSpecBuilder.day(timePartitioning.getColumnName()); break; case HOUR: partitionSpecBuilder.hour(timePartitioning.getColumnName()); break; case MONTH: partitionSpecBuilder.month(timePartitioning.getColumnName()); break; case YEAR: partitionSpecBuilder.year(timePartitioning.getColumnName()); break; default: throw new IllegalArgumentException( String.format( "Granularity: %s is not supported", timePartitioning.getGranularity())); } } if (clustering != null) { if (clustering.size() > ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS) { throw new IllegalArgumentException( String.format( "Max allowed clustering columns supported are %s, specified are %s", ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS, clustering.size())); } for (ClusteringColumn clusteringField : clustering) { Types.NestedField field = schema.findField(clusteringField.getColumnName()); if (field == null) { throw new IllegalArgumentException( String.format( "Clustering column %s not found in the schema", clusteringField.getColumnName())); } Type.TypeID typeID = field.type().typeId(); if (!ALLOWED_CLUSTERING_TYPEIDS.contains(typeID)) { throw new IllegalArgumentException( String.format( "Column name %s of type %s is not supported clustering type", clusteringField.getColumnName(), typeID.name())); } if (clusteringField.getTransform() != null) { Transform transform = clusteringField.getTransform(); switch (transform.getTransformType()) { case TRUNCATE: partitionSpecBuilder.truncate( clusteringField.getColumnName(), Integer.parseInt(transform.getTransformParams().get(0))); break; default: throw new IllegalArgumentException( String.format( "Unsupported transform %s for clustering column %s", transform.getTransformType().toString(), clusteringField.getColumnName())); } } else { // identity transform partitionSpecBuilder.identity(clusteringField.getColumnName()); } } } } catch (IllegalArgumentException ex) { // iceberg throws this exception for .day()/.hour()/.month()/.year() when column is missing throw new RequestValidationFailureException( "Adding partition spec failed:" + ex.getMessage()); } return partitionSpecBuilder.build(); }
[*] target: assertTrue(partitionSpec.fields().isEmpty())
[-] pred:  org. junit. Assert. assertNotNull ( partitionSpec )

[*] target: assertTrue(partitionSpec.fields().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( wild, partitionSpec )

[*] target: assertTrue(partitionSpec.fields().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( 2, partitionSpec )

[*] target: assertTrue(partitionSpec.fields().isEmpty())
[-] pred:  org

[*] target: assertTrue(partitionSpec.fields().isEmpty())
[-] pred:  )

************************************
************************************
[+] input: testToPartitionSpecTransform() { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .clustering( clusteringColumns.stream() .map( x -> ClusteringColumn.builder() .columnName(x) .transform( Transform.builder() .transformType(Transform.TransformType.TRUNCATE) .transformParams(Arrays.asList("10")) .build()) .build()) .collect(Collectors.toList())) .timePartitioning(null) .build());  PartitionSpec partitionSpec = tablesMapper.toPartitionSpec(tableDto); // Make sure clustering columns have appropriate transforms. "<AssertPlaceHolder>"; switch (typeID) { case STRING: case INTEGER: case LONG: return "truncate[10]".equals(x.transform().toString()); default: return false; } }) .collect(Collectors.toList()), everyItem(is(oneOf(true)))); }
toPartitionSpec(TableDto tableDto) { Schema schema = getSchemaFromSchemaJson(tableDto.getSchema().trim()); TimePartitionSpec timePartitioning = tableDto.getTimePartitioning(); List<ClusteringColumn> clustering = tableDto.getClustering(); PartitionSpec.Builder partitionSpecBuilder = PartitionSpec.builderFor(schema); try { if (timePartitioning != null) { switch (timePartitioning.getGranularity()) { case DAY: partitionSpecBuilder.day(timePartitioning.getColumnName()); break; case HOUR: partitionSpecBuilder.hour(timePartitioning.getColumnName()); break; case MONTH: partitionSpecBuilder.month(timePartitioning.getColumnName()); break; case YEAR: partitionSpecBuilder.year(timePartitioning.getColumnName()); break; default: throw new IllegalArgumentException( String.format( "Granularity: %s is not supported", timePartitioning.getGranularity())); } } if (clustering != null) { if (clustering.size() > ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS) { throw new IllegalArgumentException( String.format( "Max allowed clustering columns supported are %s, specified are %s", ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS, clustering.size())); } for (ClusteringColumn clusteringField : clustering) { Types.NestedField field = schema.findField(clusteringField.getColumnName()); if (field == null) { throw new IllegalArgumentException( String.format( "Clustering column %s not found in the schema", clusteringField.getColumnName())); } Type.TypeID typeID = field.type().typeId(); if (!ALLOWED_CLUSTERING_TYPEIDS.contains(typeID)) { throw new IllegalArgumentException( String.format( "Column name %s of type %s is not supported clustering type", clusteringField.getColumnName(), typeID.name())); } if (clusteringField.getTransform() != null) { Transform transform = clusteringField.getTransform(); switch (transform.getTransformType()) { case TRUNCATE: partitionSpecBuilder.truncate( clusteringField.getColumnName(), Integer.parseInt(transform.getTransformParams().get(0))); break; default: throw new IllegalArgumentException( String.format( "Unsupported transform %s for clustering column %s", transform.getTransformType().toString(), clusteringField.getColumnName())); } } else { // identity transform partitionSpecBuilder.identity(clusteringField.getColumnName()); } } } } catch (IllegalArgumentException ex) { // iceberg throws this exception for .day()/.hour()/.month()/.year() when column is missing throw new RequestValidationFailureException( "Adding partition spec failed:" + ex.getMessage()); } return partitionSpecBuilder.build(); }
[*] target: assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId()
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. HashSet ( asList ( new PartitionSpec ( 0, 0 ) ) ), partitionSpec )

[*] target: assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId()
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. HashSet ( asList ( pSpec ) ), partitionSpec )

[*] target: assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId()
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. util. HashSet ( asList ( collectionSpec ) ), partitionSpec )

[*] target: assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId()
[-] pred:  org. junit. Assert. assertNotNull ( partitionSpec )

[*] target: assertThat( partitionSpec.fields().stream() .map( x -> { Type.TypeID typeID = schema.findField(x.sourceId()).type().typeId()
[-] pred:  org

************************************
************************************
[+] input: IOException { Map<String, String> colTransformMap = new HashMap<>(); clusteringColumns.stream().forEach(x -> colTransformMap.put(x, "identity")); List<ClusteringColumn> clusteringSpecsIdentity = tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)); // Make sure identity transform can be converted appropriately Assertions.assertEquals( 4, clusteringSpecsIdentity.stream() .filter(x -> x.getTransform() == null) .collect(Collectors.toList()) .size());  clusteringColumns.stream().forEach(x -> colTransformMap.put(x, "truncate[10]")); List<ClusteringColumn> clusteringSpecsTruncate = tablesMapper.toClusteringSpec(createDummyIcebergTable(colTransformMap)); // Make sure truncate transform can be converted appropriately Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformParams().get(0).equals("10")) .collect(Collectors.toList()) .size()); }
toClusteringSpec(Table table) { PartitionSpec partitionSpec = table.spec(); List<PartitionField> clusteringFields = partitionSpec.fields().stream() .filter( x -> { validatePartitionField(table.schema(), x); return ALLOWED_CLUSTERING_TYPEIDS.contains( table.schema().findField(x.sourceId()).type().typeId()); }) .collect(Collectors.toList()); if (clusteringFields.size() > ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS) { throw new IllegalStateException( String.format( "Max allowed clustering columns supported %s, actual %s", ValidatorConstants.MAX_ALLOWED_CLUSTERING_COLUMNS, clusteringFields.size())); } List<ClusteringColumn> clustering = null; if (!clusteringFields.isEmpty()) { clustering = clusteringFields.stream() .map( x -> ClusteringColumn.builder() .columnName(table.schema().findColumnName(x.sourceId())) .transform(toTransform(x).orElse(null)) .build()) .collect(Collectors.toList()); } return clustering; }
[*] target: assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformType() == Transform.TransformType.TRUNCATE) .collect(Collectors.toList()) .size())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( clusteringSpecsTruncate ) )

[*] target: assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformType() == Transform.TransformType.TRUNCATE) .collect(Collectors.toList()) .size())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( clusteringSpecsTruncate ) )

[*] target: assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformType() == Transform.TransformType.TRUNCATE) .collect(Collectors.toList()) .size())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( new HashMap ( ) ) ) )

[*] target: assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformType() == Transform.TransformType.TRUNCATE) .collect(Collectors.toList()) .size())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( example ) ) )

[*] target: assertEquals( 4, clusteringSpecsTruncate.stream() .filter(x -> x.getTransform().getTransformType() == Transform.TransformType.TRUNCATE) .collect(Collectors.toList()) .size())
[-] pred:  org

************************************
************************************
[+] input: testToPoliciesSpecJson() { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .policies(TableModelConstants.TABLE_POLICIES) .build()); String policiesSpec = policiesMapper.toPoliciesJsonString(tableDto); Assertions."<AssertPlaceHolder>"; }
toPoliciesJsonString(TableDto tableDto) throws JsonParseException { if (tableDto.getPolicies() != null) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.toJson(tableDto.getPolicies()); } catch (JsonParseException e) { throw new JsonParseException("Malformed policies json"); } } return ""; }
[*] target: assertEquals( (Integer) JsonPath.read(policiesSpec, "$.retention.count"), TableModelConstants.TABLE_POLICIES.getRetention().getCount())
[-] pred:  org. junit. Assert. assertEquals ( """", policiesSpec )

[*] target: assertEquals( (Integer) JsonPath.read(policiesSpec, "$.retention.count"), TableModelConstants.TABLE_POLICIES.getRetention().getCount())
[-] pred:  org. junit. Assert. assertEquals ( """;"", policiesSpec )

[*] target: assertEquals( (Integer) JsonPath.read(policiesSpec, "$.retention.count"), TableModelConstants.TABLE_POLICIES.getRetention().getCount())
[-] pred:  org. junit. Assert. assertEquals ( "" ""());"", policiesSpec )

[*] target: assertEquals( (Integer) JsonPath.read(policiesSpec, "$.retention.count"), TableModelConstants.TABLE_POLICIES.getRetention().getCount())
[-] pred:  org. junit. Assert. assertEquals ( ""1"", policiesSpec )

[*] target: assertEquals( (Integer) JsonPath.read(policiesSpec, "$.retention.count"), TableModelConstants.TABLE_POLICIES.getRetention().getCount())
[-] pred:  org

************************************
************************************
[+] input: testToPoliciesSpecJsonWithNullPolicies() { TableDto tableDtoWithNullPolicies = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY.toBuilder().policies(null).build()); String policiesSpec = policiesMapper.toPoliciesJsonString(tableDtoWithNullPolicies); Assertions."<AssertPlaceHolder>"; }
toPoliciesJsonString(TableDto tableDto) throws JsonParseException { if (tableDto.getPolicies() != null) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.toJson(tableDto.getPolicies()); } catch (JsonParseException e) { throw new JsonParseException("Malformed policies json"); } } return ""; }
[*] target: assertEquals(policiesSpec, "")
[-] pred:  org. junit. Assert. assertEquals ( """", policiesSpec )

[*] target: assertEquals(policiesSpec, "")
[-] pred:  org. junit. Assert. assertEquals ( policiesSpec, tableDtoWithNullPolicies )

[*] target: assertEquals(policiesSpec, "")
[-] pred:  org. junit. Assert. assertEquals ( policiesSpec, policySpec )

[*] target: assertEquals(policiesSpec, "")
[-] pred:  org. junit. Assert. assertNotNull ( policiesSpec )

[*] target: assertEquals(policiesSpec, "")
[-] pred:  org

************************************
************************************
[+] input: testToPoliciesJsonFromObject() { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY .toBuilder() .policies(TableModelConstants.TABLE_POLICIES) .build()); String jsonPolicies = policiesMapper.toPoliciesJsonString(tableDto); Assertions."<AssertPlaceHolder>"; }
toPoliciesJsonString(TableDto tableDto) throws JsonParseException { if (tableDto.getPolicies() != null) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.toJson(tableDto.getPolicies()); } catch (JsonParseException e) { throw new JsonParseException("Malformed policies json"); } } return ""; }
[*] target: assertEquals(3, (Integer) JsonPath.read(jsonPolicies, "$.retention.count"))
[-] pred:  org. junit. Assert. assertEquals ( """", jsonPolicies )

[*] target: assertEquals(3, (Integer) JsonPath.read(jsonPolicies, "$.retention.count"))
[-] pred:  org. junit. Assert. assertEquals ( null, jsonPolicies )

[*] target: assertEquals(3, (Integer) JsonPath.read(jsonPolicies, "$.retention.count"))
[-] pred:  org. junit. Assert. assertEquals ( STRING";, jsonPolicies )

[*] target: assertEquals(3, (Integer) JsonPath.read(jsonPolicies, "$.retention.count"))
[-] pred:  org

[*] target: assertEquals(3, (Integer) JsonPath.read(jsonPolicies, "$.retention.count"))
[-] pred:  )

************************************
************************************
[+] input: testEmptyPoliciesJsonFromObjectWithNullPolicy() { TableDto tableDto = TableModelConstants.buildTableDto( GET_TABLE_RESPONSE_BODY.toBuilder().policies(null).build());  String jsonPolicies = policiesMapper.toPoliciesJsonString(tableDto); Assertions."<AssertPlaceHolder>"; }
toPoliciesJsonString(TableDto tableDto) throws JsonParseException { if (tableDto.getPolicies() != null) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.toJson(tableDto.getPolicies()); } catch (JsonParseException e) { throw new JsonParseException("Malformed policies json"); } } return ""; }
[*] target: assertEquals("", jsonPolicies)
[-] pred:  org. junit. Assert. assertEquals ( null, jsonPolicies )

[*] target: assertEquals("", jsonPolicies)
[-] pred:  org. junit. Assert. assertNull ( jsonPolicies )

[*] target: assertEquals("", jsonPolicies)
[-] pred:  org. junit. Assert. assertNotNull ( jsonPolicies )

[*] target: assertEquals("", jsonPolicies)
[-] pred:  org

[*] target: assertEquals("", jsonPolicies)
[-] pred:  )

************************************
************************************
[+] input: testToPolicyObjectFromJson() { Policies policies = policiesMapper.toPoliciesObject(new Gson().toJson(TableModelConstants.TABLE_POLICIES)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals( policies.getRetention().getCount(), GET_TABLE_RESPONSE_BODY.getPolicies().getRetention().getCount()); }
toPoliciesObject(String policiesString) throws JsonParseException { if (policiesString.length() != 0) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.fromJson(policiesString, Policies.class); } catch (JsonParseException e) { throw new JsonParseException( "Internal server error. Cannot convert policies Object to json"); } } return null; }
[*] target: assertEquals(policies, TableModelConstants.TABLE_POLICIES)
[-] pred:  org. junit. Assert. assertNotNull ( Policies policies )

[*] target: assertEquals(policies, TableModelConstants.TABLE_POLICIES)
[-] pred:  org. junit. Assert. assertEquals ( 0, Policies policies. toPoliciesObject ( policies ) )

[*] target: assertEquals(policies, TableModelConstants.TABLE_POLICIES)
[-] pred:  org. junit. Assert. assertNull ( Policies policies )

[*] target: assertEquals(policies, TableModelConstants.TABLE_POLICIES)
[-] pred:  org. junit. Assert. assertEquals ( 0, Policies policies )

[*] target: assertEquals(policies, TableModelConstants.TABLE_POLICIES)
[-] pred:  org

************************************
************************************
[+] input: testErrorPolicyObjectFromJson() { Policies policies = policiesMapper.toPoliciesObject(getBadJsonString()); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(policies.getRetention()); }
toPoliciesObject(String policiesString) throws JsonParseException { if (policiesString.length() != 0) { try { Gson gson = new GsonBuilder().setPrettyPrinting().create(); return gson.fromJson(policiesString, Policies.class); } catch (JsonParseException e) { throw new JsonParseException( "Internal server error. Cannot convert policies Object to json"); } } return null; }
[*] target: assertNotNull(policies)
[-] pred:  org. junit. Assert. assertNotNull ( Policies policies )

[*] target: assertNotNull(policies)
[-] pred:  org. junit. Assert. assertNotNull ( Policies policies )

[*] target: assertNotNull(policies)
[-] pred:  org. junit. Assert. assertNotNull ( policies )

[*] target: assertNotNull(policies)
[-] pred:  org. junit. Assert. assertNotNull ( policy )

[*] target: assertNotNull(policies)
[-] pred:  org. junit. Assert. assertNotNull ( Policies policies

************************************
************************************
[+] input: testToGetTableResponseBody() { Assertions."<AssertPlaceHolder>"; }
toGetTableResponseBody(TableDto tableDto);  @Mappings({ @Mapping( conditionExpression = "java(tableIdentifier.namespace() != null)", expression = "java(tableIdentifier.namespace().toString())", target = "databaseId"), @Mapping(expression = "java(tableIdentifier.name())", target = "tableId") }
[*] target: assertEquals( TableModelConstants.GET_TABLE_RESPONSE_BODY, tablesMapper.toGetTableResponseBody(TableModelConstants.TABLE_DTO))
[-] pred:  org. junit. Assert. assertEquals ( testToGetTableResponseBody(TableResponseBody(TableDto tableDto);, toGetTableResponseBody(TableDto tableDto); )

[*] target: assertEquals( TableModelConstants.GET_TABLE_RESPONSE_BODY, tablesMapper.toGetTableResponseBody(TableModelConstants.TABLE_DTO))
[-] pred:  org. junit. Assert. assertEquals ( testToGetTableResponseBody(TableResponseBody(TableDto tableDto);. toGetTableResponseBody(TableDto tableDto); )

[*] target: assertEquals( TableModelConstants.GET_TABLE_RESPONSE_BODY, tablesMapper.toGetTableResponseBody(TableModelConstants.TABLE_DTO))
[-] pred:  org. junit. Assert. assertEquals ( testToGetTableResponseBody(TableResponseBody(TableDto tableDto);. toGetTableResponseBody(TableDto tableDto);

[*] target: assertEquals( TableModelConstants.GET_TABLE_RESPONSE_BODY, tablesMapper.toGetTableResponseBody(TableModelConstants.TABLE_DTO))
[-] pred:  org. junit. Assert. assertEquals ( testToGetTableResponseBody(TableDto. json, toGetTableResponseBody(TableDto tableDto); )

[*] target: assertEquals( TableModelConstants.GET_TABLE_RESPONSE_BODY, tablesMapper.toGetTableResponseBody(TableModelConstants.TABLE_DTO))
[-] pred:  org. junit. Assert. assertEquals ( testToGetTableResponseBody(TableDto. toGetTableResponseBody(TableDto tableDto); )

************************************
************************************
[+] input: testToTableDtoPrimaryKey() { TableIdentifier tableIdentifier = TableIdentifier.of("d1", "t1"); TableDtoPrimaryKey tableDtoPrimaryKey = tablesMapper.toTableDtoPrimaryKey(tableIdentifier); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("t1", tableDtoPrimaryKey.getTableId()); }
toTableDtoPrimaryKey(TableIdentifier tableIdentifier);  @Mappings({ @Mapping( conditionExpression = "java(tableIdentifier.namespace() != null)", expression = "java(tableIdentifier.namespace().toString())", target = "databaseId"), @Mapping(expression = "java(tableIdentifier.name())", target = "tableId") }
[*] target: assertEquals("d1", tableDtoPrimaryKey.getDatabaseId())
[-] pred:  org. junit. Assert. assertNotNull ( tableDtoPrimaryKey )

[*] target: assertEquals("d1", tableDtoPrimaryKey.getDatabaseId())
[-] pred:  org. junit. Assert. assertNotNull ( tableDtodescription )

[*] target: assertEquals("d1", tableDtoPrimaryKey.getDatabaseId())
[-] pred:  org. junit. Assert. assertNotNull ( tableDtoParse )

[*] target: assertEquals("d1", tableDtoPrimaryKey.getDatabaseId())
[-] pred:  org. junit ). assertNotNull ( tableDtoPrimaryKey )

[*] target: assertEquals("d1", tableDtoPrimaryKey.getDatabaseId())
[-] pred:  org. junit, tableDtoPrimaryKey )

************************************
************************************
[+] input: testTableCreated() { final IcebergSnapshotsRequestBody requestBody = TEST_ICEBERG_SNAPSHOTS_INITIAL_VERSION_REQUEST_BODY; final String dbId = requestBody.getCreateUpdateTableRequestBody().getDatabaseId(); final String tableId = requestBody.getCreateUpdateTableRequestBody().getTableId(); final TableDtoPrimaryKey key = TableDtoPrimaryKey.builder().databaseId(dbId).tableId(tableId).build(); final TableDto tableDto = TableDto.builder().databaseId(dbId).tableId(tableId).build();  Mockito.when(tableUUIDGenerator.generateUUID(Mockito.any(IcebergSnapshotsRequestBody.class))) .thenReturn(UUID.randomUUID()); Mockito.when(mockRepository.findById(key)).thenReturn(Optional.empty()); Mockito.when(mockRepository.save(tableDtoArgumentCaptor.capture())).thenReturn(tableDto);  Pair<TableDto, Boolean> result = service.putIcebergSnapshots(dbId, tableId, requestBody, TEST_TABLE_CREATOR); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(result.getSecond(), "Table must be created");  verifyCalls(key, TEST_TABLE_CREATOR, requestBody.getCreateUpdateTableRequestBody()); }
putIcebergSnapshots( String databaseId, String tableId, IcebergSnapshotsRequestBody icebergSnapshotRequestBody, String tableCreator);
[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result. )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result ) )

************************************
************************************
[+] input: testTableUpdated() { final IcebergSnapshotsRequestBody requestBody = TEST_ICEBERG_SNAPSHOTS_REQUEST_BODY; final String dbId = requestBody.getCreateUpdateTableRequestBody().getDatabaseId(); final String tableId = requestBody.getCreateUpdateTableRequestBody().getTableId(); final TableDtoPrimaryKey key = TableDtoPrimaryKey.builder().databaseId(dbId).tableId(tableId).build(); final TableDto tableDto = tablesMapper.toTableDto( TableDto.builder() .clusterId(requestBody.getCreateUpdateTableRequestBody().getClusterId()) .databaseId(dbId) .tableId(tableId) .tableLocation(requestBody.getBaseTableVersion()) .tableCreator(TEST_TABLE_CREATOR) .build(), requestBody); Mockito.when(tableUUIDGenerator.generateUUID(Mockito.any(IcebergSnapshotsRequestBody.class))) .thenReturn(UUID.randomUUID()); Mockito.when(mockRepository.findById(key)).thenReturn(Optional.of(tableDto)); Mockito.when(mockRepository.save(tableDtoArgumentCaptor.capture())).thenReturn(tableDto);  Pair<TableDto, Boolean> result = service.putIcebergSnapshots(dbId, tableId, requestBody, null); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(result.getSecond(), "Table must be found in repository");  verifyCalls(key, TEST_TABLE_CREATOR, requestBody.getCreateUpdateTableRequestBody()); }
putIcebergSnapshots( String databaseId, String tableId, IcebergSnapshotsRequestBody icebergSnapshotRequestBody, String tableCreator);
[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit. Assert. assertTrue ( result ) )

[*] target: assertEquals(tableDto, result.getFirst(), "Returned DTO must be the mock value")
[-] pred:  org. junit )

************************************
************************************
[+] input: testRetrievingStagedTableThrowsIllegalStateException() { final String dbId = TEST_CREATE_TABLE_REQUEST_BODY.getDatabaseId(); final String tableId = TEST_CREATE_TABLE_REQUEST_BODY.getTableId(); final TableDtoPrimaryKey key = TableDtoPrimaryKey.builder().databaseId(dbId).tableId(tableId).build(); final TableDto tableDto = TableDto.builder().databaseId(dbId).tableId(tableId).stageCreate(true).build(); Mockito.when(mockRepository.findById(key)).thenReturn(Optional.of(tableDto)); IllegalStateException illegalStateException = Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( illegalStateException .getMessage() .contains(String.format("Staged Table %s.%s was illegally persisted", dbId, tableId))); }
putTable( CreateUpdateTableRequestBody createUpdateTableRequestBody, String tableCreatorUpdater, Boolean failOnExist);
[*] target: assertThrows( IllegalStateException.class, () -> service.putTable(TEST_CREATE_TABLE_REQUEST_BODY, TEST_TABLE_CREATOR, false))
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, tableDto )

[*] target: assertThrows( IllegalStateException.class, () -> service.putTable(TEST_CREATE_TABLE_REQUEST_BODY, TEST_TABLE_CREATOR, false))
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, exceptionStateException )

[*] target: assertThrows( IllegalStateException.class, () -> service.putTable(TEST_CREATE_TABLE_REQUEST_BODY, TEST_TABLE_CREATOR, false))
[-] pred:  org. junit. Assert. assertEquals ( illegalStateException, errorStateException )

[*] target: assertThrows( IllegalStateException.class, () -> service.putTable(TEST_CREATE_TABLE_REQUEST_BODY, TEST_TABLE_CREATOR, false))
[-] pred:  org

[*] target: assertThrows( IllegalStateException.class, () -> service.putTable(TEST_CREATE_TABLE_REQUEST_BODY, TEST_TABLE_CREATOR, false))
[-] pred:  )

************************************
************************************
[+] input: testAdlsStorageClientValidProperties() { when(storageProperties.getTypes()) .thenReturn( new HashMap<>( ImmutableMap.of(StorageType.ADLS.getValue(), getStorageTypeProperties()))); assertDoesNotThrow(() -> adlsStorageClient.init());  // TODO: Fix once DLFC gets initiated: // https://github.com/linkedin/openhouse/issues/148 assert adlsStorageClient.getNativeClient() == null;  "<AssertPlaceHolder>"; assertEquals( "testcontainer@teststorage.dfs.core.windows.net", adlsStorageClient.getRootPrefix()); }
getNativeClient() { return dataLakeClient; }
[*] target: assertEquals("abfs://", adlsStorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertEquals ( message, adlsStorageClient.init());FontFont: FixsOnLinkedList ( 8 ) )

[*] target: assertEquals("abfs://", adlsStorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertEquals ( message, adlsStorageClient.init());FontFont: Fix from org. apache. hadoop. util. Arrays. asList ( 8, true, null, null ) )

[*] target: assertEquals("abfs://", adlsStorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertEquals ( message, adlsStorageClient.init());FontFont: Fix from org. apache. hadoop. util. Arrays. asList ( 8, true, null, true ) )

[*] target: assertEquals("abfs://", adlsStorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertEquals ( message, adlsStorageClient.init());CommandLineCommandLine: Fixs DLFC gets initiated:dia https://github.com/linkedin/openhouse/issues/148

[*] target: assertEquals("abfs://", adlsStorageClient.getEndpoint())
[-] pred:  )

************************************
************************************
[+] input: testAdlsStorageTypeIsCorrect() { "<AssertPlaceHolder>"; }
getType() { return StorageType.ADLS; }
[*] target: assertEquals(StorageType.ADLS, adlsStorage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.ADLS;, item. getType() ( ) )

[*] target: assertEquals(StorageType.ADLS, adlsStorage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.ADLS;, object. getType() ( ) )

[*] target: assertEquals(StorageType.ADLS, adlsStorage.getType())
[-] pred:  org. junit. Assert. assertSame ( StorageType.ADLS;, item. getType() ( ) )

[*] target: assertEquals(StorageType.ADLS, adlsStorage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.ADLS;, transaction. getType() ( ) )

[*] target: assertEquals(StorageType.ADLS, adlsStorage.getType())
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableLocationPattern1() { mockStorageProperties("hdfs://localhost:9000", "/data/openhouse"); "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { Preconditions.checkArgument(databaseId != null, "Database ID cannot be null"); Preconditions.checkArgument(tableId != null, "Table ID cannot be null"); Preconditions.checkArgument(tableUUID != null, "Table UUID cannot be null"); Preconditions.checkState( storageProperties.getTypes().containsKey(getType().getValue()), "Storage properties doesn't contain type: " + getType().getValue()); return URI.create( getClient().getEndpoint() + getClient().getRootPrefix() + "/" + databaseId + "/" + tableId + "-" + tableUUID) .normalize() .toString(); }
[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId,String tableUUID) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,<sp>"", org. apache. commons. lang3. StringUtils. valueOf ( ""1"" ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( fixture. allocateTableLocation(String databaseId,String tableId,String tableUUID,<sp tableCreator) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( fixture. allocateTableLocation(String databaseId,String tableId,String tableUUID,<sp tableCreator ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableLocationPattern2() { mockStorageProperties("hdfs://localhost:9000/", "/data/openhouse"); "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { Preconditions.checkArgument(databaseId != null, "Database ID cannot be null"); Preconditions.checkArgument(tableId != null, "Table ID cannot be null"); Preconditions.checkArgument(tableUUID != null, "Table UUID cannot be null"); Preconditions.checkState( storageProperties.getTypes().containsKey(getType().getValue()), "Storage properties doesn't contain type: " + getType().getValue()); return URI.create( getClient().getEndpoint() + getClient().getRootPrefix() + "/" + databaseId + "/" + tableId + "-" + tableUUID) .normalize() .toString(); }
[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, org. apache. commons. lang. StringUtils. valueOf ( ""org. toString ( ) ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, org. apache. commons. lang. StringUtils. toString ( ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, org. apache. commons. lang3. StringUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtils,AllocateTableLocation( org. apache. hadoop. util. StringUtils. class ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, org. apache. commons. lang3. StringUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtilsUtils,AllocateTableLocation( org. apache. hadoop. util. StringUtils. class ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableLocationPattern3() { mockStorageProperties("hdfs://localhost:9000/", "data/openhouse"); "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { Preconditions.checkArgument(databaseId != null, "Database ID cannot be null"); Preconditions.checkArgument(tableId != null, "Table ID cannot be null"); Preconditions.checkArgument(tableUUID != null, "Table UUID cannot be null"); Preconditions.checkState( storageProperties.getTypes().containsKey(getType().getValue()), "Storage properties doesn't contain type: " + getType().getValue()); return URI.create( getClient().getEndpoint() + getClient().getRootPrefix() + "/" + databaseId + "/" + tableId + "-" + tableUUID) .normalize() .toString(); }
[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, null ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( dao. allocateTableLocation(String databaseId, null ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableLocationPattern4() { mockStorageProperties("hdfs://localhost:9000/", "data"); "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { Preconditions.checkArgument(databaseId != null, "Database ID cannot be null"); Preconditions.checkArgument(tableId != null, "Table ID cannot be null"); Preconditions.checkArgument(tableUUID != null, "Table UUID cannot be null"); Preconditions.checkState( storageProperties.getTypes().containsKey(getType().getValue()), "Storage properties doesn't contain type: " + getType().getValue()); return URI.create( getClient().getEndpoint() + getClient().getRootPrefix() + "/" + databaseId + "/" + tableId + "-" + tableUUID) .normalize() .toString(); }
[*] target: assertEquals( "hdfs://localhost:9000/data/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator )

[*] target: assertEquals( "hdfs://localhost:9000/data/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( dao. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator )

[*] target: assertEquals( "hdfs://localhost:9000/data/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( dao. allocateTableLocation(String databaseId, null ) )

[*] target: assertEquals( "hdfs://localhost:9000/data/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableLocationPattern5() { mockStorageProperties("hdfs:///", "data/openhouse"); "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { Preconditions.checkArgument(databaseId != null, "Database ID cannot be null"); Preconditions.checkArgument(tableId != null, "Table ID cannot be null"); Preconditions.checkArgument(tableUUID != null, "Table UUID cannot be null"); Preconditions.checkState( storageProperties.getTypes().containsKey(getType().getValue()), "Storage properties doesn't contain type: " + getType().getValue()); return URI.create( getClient().getEndpoint() + getClient().getRootPrefix() + "/" + databaseId + "/" + tableId + "-" + tableUUID) .normalize() .toString(); }
[*] target: assertEquals( "hdfs:///data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator )

[*] target: assertEquals( "hdfs:///data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID,<sp tableCreator )

[*] target: assertEquals( "hdfs:///data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId, tableId, tableUUID, tableCreator ) )

[*] target: assertEquals( "hdfs:///data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertNotNull ( manager. allocateTableLocation(String databaseId,String tableId, tableUUID, tableCreator ) )

[*] target: assertEquals( "hdfs:///data/openhouse/db1/table1-uuid1", baseStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testHdfsStorageTypeIsCorrect() { "<AssertPlaceHolder>"; }
getType() { return StorageType.HDFS; }
[*] target: assertEquals(StorageType.HDFS, hdfsStorage.getType())
[-] pred:  org. junit. Assert. assertNotNull ( instance. getType() ( ) )

[*] target: assertEquals(StorageType.HDFS, hdfsStorage.getType())
[-] pred:  org. junit. Assert. assertNotNull ( factory. getType() ( ) )

[*] target: assertEquals(StorageType.HDFS, hdfsStorage.getType())
[-] pred:  org. junit. Assert. assertNotNull (Hdfs. getType() ( ) )

[*] target: assertEquals(StorageType.HDFS, hdfsStorage.getType())
[-] pred:  org. junit. Assert. assertNotNull ( object. getType() ( ) )

[*] target: assertEquals(StorageType.HDFS, hdfsStorage.getType())
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableSpace() { String databaseId = "db1"; String tableId = "table1"; String tableUUID = "uuid1"; String tableCreator = "creator1"; boolean skipProvisioning = false; when(hdfsStorageClient.getRootPrefix()).thenReturn("/data/openhouse"); String expected = "/data/openhouse/db1/table1-uuid1"; "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { return Paths.get(getClient().getRootPrefix(), databaseId, tableId + "-" + tableUUID).toString(); }
[*] target: assertEquals( expected, hdfsStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation ( databaseId, tableId, skipProvisioning ) )

[*] target: assertEquals( expected, hdfsStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation ( databaseId, tableId, tableCreator ) )

[*] target: assertEquals( expected, hdfsStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation( databaseId, tableId, skipProvisioning ) )

[*] target: assertEquals( expected, hdfsStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, handler. allocateTableLocation ( databaseId, tableId, skipProvisioning ) )

[*] target: assertEquals( expected, hdfsStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, connection. allocateTableLocation ( databaseId, tableId, skipProvisioning ) )

************************************
************************************
[+] input: testLocalStorageIsConfiguredWhenDefaultTypeIsNull() { when(storageProperties.getDefaultType()).thenReturn(null); boolean result = localStorage.isConfigured(); "<AssertPlaceHolder>"; }
isConfigured() { if (storageProperties.getDefaultType() == null) { return true; } else if (storageProperties.getTypes() == null || storageProperties.getTypes().isEmpty()) { return true; } else { return storageProperties.getTypes().containsKey(LOCAL_TYPE.getValue()); } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. isConfigured() ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. return true ; }

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: testLocalStorageIsConfiguredWhenTypesIsNull() { when(storageProperties.getDefaultType()).thenReturn(DEFAULT_TYPE); when(storageProperties.getTypes()).thenReturn(null); boolean result = localStorage.isConfigured(); "<AssertPlaceHolder>"; }
isConfigured() { if (storageProperties.getDefaultType() == null) { return true; } else if (storageProperties.getTypes() == null || storageProperties.getTypes().isEmpty()) { return true; } else { return storageProperties.getTypes().containsKey(LOCAL_TYPE.getValue()); } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. isConfigured() ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. whether the result )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: testLocalStorageIsConfiguredWhenTypesIsEmpty() { when(storageProperties.getDefaultType()).thenReturn(DEFAULT_TYPE); when(storageProperties.getTypes()).thenReturn(new HashMap<>()); boolean result = localStorage.isConfigured(); "<AssertPlaceHolder>"; }
isConfigured() { if (storageProperties.getDefaultType() == null) { return true; } else if (storageProperties.getTypes() == null || storageProperties.getTypes().isEmpty()) { return true; } else { return storageProperties.getTypes().containsKey(LOCAL_TYPE.getValue()); } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. isConfigured() ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. isConfigured() ( result ) )

************************************
************************************
[+] input: testLocalStorageIsConfiguredWhenTypesContainsType() { when(storageProperties.getDefaultType()).thenReturn(DEFAULT_TYPE); when(storageProperties.getTypes()) .thenReturn( ImmutableMap.of( StorageType.LOCAL.getValue(), new StorageProperties.StorageTypeProperties())); boolean result = localStorage.isConfigured(); "<AssertPlaceHolder>"; }
isConfigured() { if (storageProperties.getDefaultType() == null) { return true; } else if (storageProperties.getTypes() == null || storageProperties.getTypes().isEmpty()) { return true; } else { return storageProperties.getTypes().containsKey(LOCAL_TYPE.getValue()); } }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. whether ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. whether result )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: testLocalStorageGetType() { "<AssertPlaceHolder>"; }
getType() { return LOCAL_TYPE; }
[*] target: assertTrue(localStorage.getType().equals(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( 9, container. getType() ( 10 ) )

[*] target: assertTrue(localStorage.getType().equals(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( 9, container. getType() ( ) )

[*] target: assertTrue(localStorage.getType().equals(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( 9, map. getType() ( 10 ) )

[*] target: assertTrue(localStorage.getType().equals(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( 9, page. getType() ( ) )

[*] target: assertTrue(localStorage.getType().equals(StorageType.LOCAL))
[-] pred:  org. junit. Assert. assertEquals ( LOCAL_TYPE;, factory. getType() )

************************************
************************************
[+] input: testLocalStorageGetClient() { LocalFileSystem localFileSystem = new LocalFileSystem(); when(localStorageClient.getNativeClient()).thenReturn(localFileSystem); "<AssertPlaceHolder>"; }
getClient() { return localStorageClient; }
[*] target: assertTrue(localStorage.getClient().getNativeClient().equals(localFileSystem))
[-] pred:  org. junit. Assert. assertNotNull ( localFileSystem. getClient() ( ) )

[*] target: assertTrue(localStorage.getClient().getNativeClient().equals(localFileSystem))
[-] pred:  org. junit. Assert. assertNotNull ( localFileSystem. getClient() ( 0L ) )

[*] target: assertTrue(localStorage.getClient().getNativeClient().equals(localFileSystem))
[-] pred:  org. junit. Assert. assertNull ( localFileSystem. getClient() ( ) )

[*] target: assertTrue(localStorage.getClient().getNativeClient().equals(localFileSystem))
[-] pred:  org. junit. Assert. assertEquals ( template, localFileSystem. getClient() ( ) )

[*] target: assertTrue(localStorage.getClient().getNativeClient().equals(localFileSystem))
[-] pred:  org

************************************
************************************
[+] input: testAllocateTableSpace() { String databaseId = "db1"; String tableId = "table1"; String tableUUID = "uuid1"; String tableCreator = "creator1"; boolean skipProvisioning = false; when(localStorageClient.getRootPrefix()).thenReturn("/tmp"); String expected = "/tmp/db1/table1-uuid1"; "<AssertPlaceHolder>"; }
allocateTableLocation( String databaseId, String tableId, String tableUUID, String tableCreator) { return Paths.get(getClient().getRootPrefix(), databaseId, tableId + "-" + tableUUID).toString(); }
[*] target: assertEquals( expected, localStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation( databaseId, tableId, tableCreator ) )

[*] target: assertEquals( expected, localStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation ( databaseId, tableId, skipProvisioning ) )

[*] target: assertEquals( expected, localStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation( databaseId, tableId, skipProvisioning ) )

[*] target: assertEquals( expected, localStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org. junit. Assert. assertEquals ( expected, service. allocateTableLocation ( databaseId, tableId, tableCreator ) )

[*] target: assertEquals( expected, localStorage.allocateTableLocation(databaseId, tableId, tableUUID, tableCreator))
[-] pred:  org

************************************
************************************
[+] input: testS3StorageClientValidProperties() { when(storageProperties.getTypes()) .thenReturn( new HashMap<>(ImmutableMap.of(StorageType.S3.getValue(), getStorageTypeProperties()))); assertDoesNotThrow(() -> s3StorageClient.init()); assert s3StorageClient.getNativeClient() != null; "<AssertPlaceHolder>"; assertEquals("/mybucket", s3StorageClient.getRootPrefix()); }
getNativeClient() { return s3; }
[*] target: assertEquals("http://S3:9000", s3StorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertTrue ( ( ( s3StorageClient.init()); ) && ( s3StorageClient.getNativeClient(). getNativeClient() ( ) ) ) )

[*] target: assertEquals("http://S3:9000", s3StorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertTrue ( ( ( s3StorageClient. getNativeClient() ) && ( s3StorageClient.getNativeClient()!= null ) ) )

[*] target: assertEquals("http://S3:9000", s3StorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertTrue ( ( ( s3StorageClient.init()); ) && ( s3StorageClient. getNativeClient(). getNativeClient() ( ) ) ) )

[*] target: assertEquals("http://S3:9000", s3StorageClient.getEndpoint())
[-] pred:  org. junit. Assert. assertTrue ( ( ( s3StorageClient. getNativeClient() )!= null ) )

[*] target: assertEquals("http://S3:9000", s3StorageClient.getEndpoint())
[-] pred:  )

************************************
************************************
[+] input: testS3StorageTypeIsCorrect() { "<AssertPlaceHolder>"; }
getType() { return StorageType.S3; }
[*] target: assertEquals(StorageType.S3, s3Storage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.S3;, test. getType() ( ) )

[*] target: assertEquals(StorageType.S3, s3Storage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.S3;, page. getType() ( ) )

[*] target: assertEquals(StorageType.S3, s3Storage.getType())
[-] pred:  org. junit. Assert. assertSame ( StorageType.S3;, test. getType() ( ) )

[*] target: assertEquals(StorageType.S3, s3Storage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.S3;, cache. getType() ( 100 ) )

[*] target: assertEquals(StorageType.S3, s3Storage.getType())
[-] pred:  org. junit. Assert. assertEquals ( StorageType.S3;, testS3StorageType.S3;

************************************
************************************
[+] input: testAlterPropIfNeeded() { //    UpdateProperties mockUpdateProperties = Mockito.mock(UpdateProperties.class); //    doReturn(null).when(mockUpdateProperties).set(Mockito.anyString(), Mockito.anyString()); //    doReturn(null).when(mockUpdateProperties).remove(Mockito.anyString()); // //    Map<String, String> existingTableProps = new HashMap<>(); //    Map<String, String> providedTableProps = new HashMap<>(); // //    // Note that the sequence of following test cases matters. // //    // providedTableProps:{} //    // existingTableProps:{} //    Assertions.assertFalse( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps)); // //    // insert //    // providedTableProps:{a:aa} //    // existingTableProps:{} //    providedTableProps.put("a", "aa"); //    Assertions.assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps)); //    existingTableProps.put("a", "aa"); // //    // upsert //    // providedTableProps:{a:bb} //    // existingTableProps:{a:aa} //    providedTableProps.put("a", "bb"); //    Assertions.assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps)); //    existingTableProps.put("a", "bb"); // //    // unset //    // providedTableProps:{} //    // existingTableProps:{a:bb} //    providedTableProps.clear(); //    Assertions."<AssertPlaceHolder>"; //    existingTableProps.remove("a"); //  }
alterPropIfNeeded( UpdateProperties updateProperties, Map<String, String> existingTableProps, Map<String, String> providedTableProps) { boolean propertyUpdated = false;  Set<String> unsetKeys = new HashSet<>(existingTableProps.keySet());  // Due to the SerDe process, null-map is possible. if (providedTableProps != null) { for (Map.Entry<String, String> entry : providedTableProps.entrySet()) { unsetKeys.remove(entry.getKey()); if (!existingTableProps.containsKey(entry.getKey()) || !existingTableProps.get(entry.getKey()).equals(entry.getValue())) { updateProperties.set(entry.getKey(), entry.getValue()); propertyUpdated = true; } }  if (!unsetKeys.isEmpty()) { unsetKeys.forEach(updateProperties::remove); propertyUpdated = true; } } return propertyUpdated; }
[*] target: assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps))
[-] pred:  org. junit. Assert. assertTrue ( providedTableProps. isEmpty ( ) )

[*] target: assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps))
[-] pred:  org. junit. Assert. assertTrue ( providedTableProps. contains ( 0L ) )

[*] target: assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps))
[-] pred:  org. junit. Assert. assertFalse ( providedTableProps. isEmpty ( ) )

[*] target: assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps))
[-] pred:  org. junit. Assert. assertFalse ( providedTableProps. containsKey ( 0 ) )

[*] target: assertTrue( //        InternalRepositoryUtils.alterPropIfNeeded( //            mockUpdateProperties, existingTableProps, providedTableProps))
[-] pred:  org

************************************
************************************
[+] input: Exception { //    Map<String, String> test = new HashMap<>(); //    test.put("openhouse.tableId", "a"); //    test.put("openhouse.databaseId", "b"); //    test.put("openhouse.clusterId", "c"); //    test.put("openhouse.tableUri", "d"); //    test.put("openhouse.tableUUID", "e"); //    test.put("openhouse.tableLocation", "f"); //    test.put("openhouse.tableVersion", "g"); //    test.put("openhouse.tableType", "type"); //    test.put("policies", "po"); //    Map<String, String> result = //        InternalRepositoryUtils.getUserDefinedTblProps(test, new BasePreservedKeyCheckerTest()); //    Assertions."<AssertPlaceHolder>"; //  }
getUserDefinedTblProps( Map<String, String> rawTableProps, PreservedKeyChecker checker) { Map<String, String> result = new HashMap<>(rawTableProps); rawTableProps.forEach( (k, v) -> { if (checker.isKeyPreserved(k)) { result.remove(k); } });  /** * removing keys like policies which are added exclusively into table properties and are not * part of HouseTable */ for (String property : EXCLUDE_PROPERTIES_LIST) { result.remove(property); } return result; }
[*] target: assertTrue(result.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( test, result )

[*] target: assertTrue(result.isEmpty())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertTrue(result.isEmpty())
[-] pred:  org. junit. Assert. assertSame ( test, result )

[*] target: assertTrue(result.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( tests, result )

[*] target: assertTrue(result.isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( test, result )s

************************************
************************************
[+] input: Exception { //    File tmpFile = File.createTempFile("foo", "bar"); // //    final Schema SCHEMA = //        new Schema( //            Types.NestedField.required(1, "id", Types.LongType.get()), //            Types.NestedField.required(2, "ts", Types.TimestampType.withZone())); // //    Map<String, String> tableProps = new HashMap<>(); //    tableProps.put("openhouse.tableId", "a"); //    tableProps.put("openhouse.databaseId", "b"); //    tableProps.put("openhouse.clusterId", "c"); //    tableProps.put("openhouse.tableUri", "d"); //    tableProps.put("openhouse.tableUUID", "e"); //    tableProps.put("openhouse.tableLocation", tmpFile.getAbsolutePath()); //    tableProps.put("openhouse.tableVersion", "g"); //    tableProps.put("openhouse.tableCreator", "f"); //    tableProps.put("openhouse.lastModifiedTime", "1000"); //    tableProps.put("openhouse.creationTime", "1000"); //    tableProps.put("openhouse.tableType", TableType.PRIMARY_TABLE.toString()); // //    Table mockTable = Mockito.mock(Table.class); //    Mockito.doReturn(tableProps).when(mockTable).properties(); //    Mockito.doReturn(SCHEMA).when(mockTable).schema(); //    FsStorageProvider mockFsStorageProvider = Mockito.mock(FsStorageProvider.class); //    Mockito.doReturn(FileSystem.get(new Configuration())) //        .when(mockFsStorageProvider) //        .storageClient(); //    PartitionSpecMapper mockPartitionSpecMapper = Mockito.mock(PartitionSpecMapper.class); //    Mockito.doReturn(null).when(mockPartitionSpecMapper).toPartitionSpec(Mockito.any()); //    Mockito.doReturn(TABLE_DTO.getClustering()) //        .when(mockPartitionSpecMapper) //        .toClusteringSpec(Mockito.any()); //    Mockito.doReturn(TABLE_DTO.getTimePartitioning()) //        .when(mockPartitionSpecMapper) //        .toTimePartitionSpec(Mockito.any()); //    PoliciesSpecMapper mockPolicyMapper = Mockito.mock(PoliciesSpecMapper.class); //    Mockito.doReturn(TABLE_DTO.getPolicies()) //        .when(mockPolicyMapper) //        .toPoliciesObject(Mockito.any()); // //    TableTypeMapper mockTableTypeMapper = Mockito.mock(TableTypeMapper.class); // // Mockito.doReturn(TableType.PRIMARY_TABLE).when(mockTableTypeMapper).toTableType(Mockito.any()); // //    TableDto returnDto = //        InternalRepositoryUtils.convertToTableDto( //            mockTable, //            mockFsStorageProvider, //            mockPartitionSpecMapper, //            mockPolicyMapper, //            mockTableTypeMapper); //    Assertions.assertEquals(returnDto.getTableId(), "a"); //    Assertions.assertEquals(returnDto.getDatabaseId(), "b"); //    Assertions.assertEquals(returnDto.getClusterId(), "c"); //    Assertions.assertEquals(returnDto.getTableUri(), "d"); //    Assertions.assertEquals(returnDto.getTableUUID(), "e"); //    Assertions.assertEquals( //        URI.create(returnDto.getTableLocation()).getPath(), tmpFile.getAbsolutePath()); //    Assertions.assertEquals(returnDto.getTableVersion(), "g"); //    Assertions.assertEquals(returnDto.getTableCreator(), "f"); //    Assertions.assertEquals(returnDto.getCreationTime(), 1000); //    Assertions.assertEquals(returnDto.getLastModifiedTime(), 1000); //    Assertions.assertEquals(returnDto.getTableType(), TableType.valueOf("PRIMARY_TABLE")); // //    // All internal fields of TableDTO has to carry non-null value except jsonSnapshots which is //    // intentional. //    // Point of this check is, if something is added into TableDTO but somehow left explicit //    // handling in convertToTableDto //    // this test shall fail. // //    Arrays.stream(TableDto.class.getDeclaredFields()) //        .filter( //            field -> //                Modifier.isPrivate(field.getModifiers()) //                    && !Modifier.isStatic(field.getModifiers()) //                    && !field.getName().equals("jsonSnapshots") //                    && !field.getName().equals("snapshotRefs")) //        .map(Field::getName) //        .forEach(name -> ensurePrivateFieldNonNull(name, returnDto)); // //    tableProps.remove("openhouse.lastModifiedTime"); //    tableProps.remove("openhouse.creationTime"); //    TableDto returnDto2 = //        InternalRepositoryUtils.convertToTableDto( //            mockTable, //            mockFsStorageProvider, //            mockPartitionSpecMapper, //            mockPolicyMapper, //            mockTableTypeMapper); //    Assertions."<AssertPlaceHolder>"; //    Assertions.assertEquals(returnDto2.getLastModifiedTime(), 0); //  }
convertToTableDto( Table table, FileIOManager fileIOManager, PartitionSpecMapper partitionSpecMapper, PoliciesSpecMapper policiesMapper, TableTypeMapper tableTypeMapper) { /* Contains everything needed to populate dto */ final Map<String, String> megaProps = table.properties(); Storage storage = fileIOManager.getStorage(table.io()); TableDto tableDto = TableDto.builder() .tableId(megaProps.get(getCanonicalFieldName("tableId"))) .databaseId(megaProps.get(getCanonicalFieldName("databaseId"))) .clusterId(megaProps.get(getCanonicalFieldName("clusterId"))) .tableUri(megaProps.get(getCanonicalFieldName("tableUri"))) .tableUUID(megaProps.get(getCanonicalFieldName("tableUUID"))) .tableLocation( URI.create( StringUtils.prependIfMissing( // remove after resolving // https://github.com/linkedin/openhouse/issues/121 megaProps.get(getCanonicalFieldName("tableLocation")), storage.getClient().getEndpoint())) .normalize() .toString()) .tableVersion(megaProps.get(getCanonicalFieldName("tableVersion"))) .tableCreator(megaProps.get(getCanonicalFieldName("tableCreator"))) .schema(IcebergSchemaHelper.getSchemaJsonFromSchema(table.schema())) .lastModifiedTime(safeParseLong("lastModifiedTime", megaProps)) .creationTime(safeParseLong("creationTime", megaProps)) .timePartitioning(partitionSpecMapper.toTimePartitionSpec(table)) .clustering(partitionSpecMapper.toClusteringSpec(table)) .policies(policiesMapper.toPoliciesObject(megaProps.get("policies"))) .tableType(tableTypeMapper.toTableType(table)) .jsonSnapshots(null) .tableProperties(megaProps) .build();  return tableDto; }
[*] target: assertEquals(returnDto2.getCreationTime(), 0)
[-] pred:  org. junit. Assert. assertEquals ( 0, rendered )

[*] target: assertEquals(returnDto2.getCreationTime(), 0)
[-] pred:  org. junit. Assert. assertNotNull ( rendered )

[*] target: assertEquals(returnDto2.getCreationTime(), 0)
[-] pred:  org. junit. Assert. assertEquals ( rendered, rendered )

[*] target: assertEquals(returnDto2.getCreationTime(), 0)
[-] pred:  org. junit. Assert. assertEquals ( org. polishResult, rendered )

[*] target: assertEquals(returnDto2.getCreationTime(), 0)
[-] pred:  org

************************************
************************************
[+] input: testConstructTablePath() { //    FsStorageProvider fsStorageProvider = Mockito.mock(FsStorageProvider.class); //    String someRoot = "root"; //    String dbId = "db"; //    String tbId = "tb"; //    String uuid = UUID.randomUUID().toString(); //    Mockito.when(fsStorageProvider.rootPath()).thenReturn(someRoot); //    Assertions."<AssertPlaceHolder>"; //  }
constructTablePath( StorageManager storageManager, String databaseID, String tableId, String tableUUID) { // TODO: Default storage is used here. Support for non-default storage type per table needs to // be added. return Paths.get( storageManager.getDefaultStorage().getClient().getRootPrefix(), databaseID, tableId + "-" + tableUUID); }
[*] target: assertEquals( //        InternalRepositoryUtils.constructTablePath(fsStorageProvider, dbId, tbId, uuid), //        Paths.get(someRoot, dbId, tbId + "-" + uuid))
[-] pred:  org. junit. Assert. assertEquals ( uuid, fsStorageProvider. constructTablePath( StorageManager storageManager,, tbId, uuid ) )

[*] target: assertEquals( //        InternalRepositoryUtils.constructTablePath(fsStorageProvider, dbId, tbId, uuid), //        Paths.get(someRoot, dbId, tbId + "-" + uuid))
[-] pred:  org. junit. Assert. assertEquals ( uuid, fsStorageProvider. constructTablePath( StorageManager storageManager,, someRoot )

[*] target: assertEquals( //        InternalRepositoryUtils.constructTablePath(fsStorageProvider, dbId, tbId, uuid), //        Paths.get(someRoot, dbId, tbId + "-" + uuid))
[-] pred:  org. junit. Assert. assertEquals ( uuid, fsStorageProvider. constructTablePath( StorageManager storageManager,, someId, uuid ) )

[*] target: assertEquals( //        InternalRepositoryUtils.constructTablePath(fsStorageProvider, dbId, tbId, uuid), //        Paths.get(someRoot, dbId, tbId + "-" + uuid))
[-] pred:  org. junit. Assert. assertEquals ( uuid, fsStorageProvider. constructTablePath( StorageManager storageManager,, someId, uuid )

[*] target: assertEquals( //        InternalRepositoryUtils.constructTablePath(fsStorageProvider, dbId, tbId, uuid), //        Paths.get(someRoot, dbId, tbId + "-" + uuid))
[-] pred:  org. junit. Assert. assertEquals ( uuid, fsStorageProvider. constructTablePath( StorageManager storageManager,String shardId, someRoot )

************************************
************************************
[+] input: testServerStartCustomPortNo() { int portNo = SocketUtils.findAvailableTcpPort(); OpenHouseLocalServer openHouseLocalServer = new OpenHouseLocalServer(portNo); Assertions.assertDoesNotThrow(() -> openHouseLocalServer.start()); Assertions."<AssertPlaceHolder>"; Assertions.assertDoesNotThrow(openHouseLocalServer::stop); }
getPort() { return port; }
[*] target: assertEquals(openHouseLocalServer.getPort(), portNo)
[-] pred:  org. junit. Assert. assertEquals ( 0, openHouseLocalServer. getPort() ( ) )

[*] target: assertEquals(openHouseLocalServer.getPort(), portNo)
[-] pred:  org. junit. Assert. assertEquals ( 0, openHouseLocalServer. getPort() )

[*] target: assertEquals(openHouseLocalServer.getPort(), portNo)
[-] pred:  org. junit. Assert. assertEquals ( 0, openHouseLocalServer. getPort() ) )

[*] target: assertEquals(openHouseLocalServer.getPort(), portNo)
[-] pred:  org. junit. Assert. assertEquals ( openHouseLocalServer. getPort() ( ), portNo

[*] target: assertEquals(openHouseLocalServer.getPort(), portNo)
[-] pred:  org

************************************
************************************
[+] input: givenUnsupportedMediaType_whenThrowHttpMediaTypeNotSupportedException_thenReturnErrorResponse() {  // Given HttpMediaTypeNotSupportedException mockException = new HttpMediaTypeNotSupportedException("Unsupported media type");  // When List<String> errorDetails = new ArrayList<>(); errorDetails.add(mockException.getContentType() + "Unsupported media type is not supported. Supported media types are " + mockException.getSupportedMediaTypes().stream().map(MediaType::toString).collect(Collectors.joining(", ")));  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(errorDetails) .message("Invalid JSON") .statusCode(HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()) .status(HttpStatus.UNSUPPORTED_MEDIA_TYPE) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<Object> responseEntity = globalExceptionHandler.handleHttpMediaTypeNotSupported( mockException, mockException.getHeaders(), HttpStatus.UNSUPPORTED_MEDIA_TYPE, null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), ((ErrorResponse) responseEntity.getBody()).getTimestamp().toLocalDate());  }
handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) { log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>();  StringBuilder builder = new StringBuilder(); builder.append(ex.getContentType()); builder.append("Unsupported media type is not supported. Supported media types are "); ex.getSupportedMediaTypes().forEach(t -> builder.append(t).append(", "));  details.add(builder.toString());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Invalid JSON") .statusCode(status.value()) .status(HttpStatus.valueOf(status.value())) .build();  return ResponseEntity.status(status).body(errorResponse); }
[*] target: assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, responseEntity.getStatusCode())
[-] pred:  )

[*] target: assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, responseEntity.getStatusCode())
[-] pred:  org

************************************
************************************
[+] input: givenMalformedJsonRequest_whenThrowHttpMessageNotReadableException_thenReturnErrorResponse() {  // Given HttpInputMessage httpInputMessage = Mockito.mock(HttpInputMessage.class); HttpMessageNotReadableException mockException = new HttpMessageNotReadableException("Malformed JSON request", httpInputMessage);  // When List<String> errorDetails = new ArrayList<>(); errorDetails.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(errorDetails) .message("Malformed JSON request") .statusCode(HttpStatus.BAD_REQUEST.value()) .status(HttpStatus.BAD_REQUEST) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<Object> responseEntity = globalExceptionHandler.handleHttpMessageNotReadable( mockException, new HttpHeaders(), HttpStatus.BAD_REQUEST, null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), ((ErrorResponse) responseEntity.getBody()).getTimestamp().toLocalDate()); }
handleHttpMessageNotReadable(HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) { log.error(ex.getMessage(), ex);   List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Malformed JSON request") .statusCode(status.value()) .status(HttpStatus.valueOf(status.value())) .build();  return ResponseEntity.status(status).body(errorResponse); }
[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org

************************************
************************************
[+] input: NoSuchMethodException {  // Given Method method = GlobalExceptionHandlerTest.class.getDeclaredMethod("givenValidationErrors_whenThrowMethodArgumentNotValidException_thenReturnErrorResponse"); int parameterIndex = -1;  MethodParameter mockParameter = new MethodParameter(method, parameterIndex); BindingResult mockBindingResult = new BeanPropertyBindingResult(null, null); MethodArgumentNotValidException mockException = new MethodArgumentNotValidException(mockParameter, mockBindingResult);  // When List<String> details = mockException.getBindingResult() .getFieldErrors() .stream() .map(error -> error.getObjectName() + " : " + error.getDefaultMessage()) .toList();  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Validation Errors") .statusCode(HttpStatus.BAD_REQUEST.value()) .status(HttpStatus.BAD_REQUEST) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<Object> responseEntity = globalExceptionHandler.handleMethodArgumentNotValid( mockException, new HttpHeaders(), HttpStatus.BAD_REQUEST, null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), ((ErrorResponse) responseEntity.getBody()).getTimestamp().toLocalDate());  }
handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) { log.error(ex.getMessage(), ex);  List<String> details = ex.getBindingResult() .getFieldErrors() .stream() .map(error -> error.getObjectName() + " : " + error.getDefaultMessage()) .toList();  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Validation Errors") .statusCode(status.value()) .status(HttpStatus.valueOf(status.value())) .build();  return ResponseEntity.status(status).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  )

************************************
************************************
[+] input: givenMissingServletRequestParameter_whenThrowMissingServletRequestParameterException_thenReturnErrorResponse() {  // Given MissingServletRequestParameterException mockException = new MissingServletRequestParameterException( "parameterName", "parameterType");  // When List<String> details = new ArrayList<>(); details.add(mockException.getParameterName() + " parameter is missing");  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Validation Errors") .statusCode(HttpStatus.BAD_REQUEST.value()) .status(HttpStatus.BAD_REQUEST) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<Object> responseEntity = globalExceptionHandler.handleMissingServletRequestParameter( mockException, new HttpHeaders(), HttpStatus.BAD_REQUEST, null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), ((ErrorResponse) responseEntity.getBody()).getTimestamp().toLocalDate());  }
handleMissingServletRequestParameter(MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getParameterName() + " parameter is missing");  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Validation Errors") .statusCode(status.value()) .status(HttpStatus.valueOf(status.value())) .build();  return ResponseEntity.status(status).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity. response )

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  org

[*] target: assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode())
[-] pred:  )

************************************
************************************
[+] input: givenParkNotFoundException_whenThrowParkNotFoundException_thenReturnErrorResponse() {  // Given ParkNotFoundException mockException = new ParkNotFoundException("Park not found");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Park Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handleParkNotFoundException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handleParkNotFoundException(final ParkNotFoundException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Park Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .build();  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertSame ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  )

************************************
************************************
[+] input: givenPriceListNotFoundException_whenThrowPriceListNotFoundException_thenReturnErrorResponse() {  // Given PriceListNotFoundException mockException = new PriceListNotFoundException("Price list not found");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Price List Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handlePriceListNotFoundException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handlePriceListNotFoundException(final PriceListNotFoundException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Price List Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .build();  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit ). assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org

************************************
************************************
[+] input: givenRefreshTokenNotFoundException_whenThrowRefreshTokenNotFoundException_thenReturnErrorResponse() {  // Given RefreshTokenNotFoundException mockException = new RefreshTokenNotFoundException("Refresh token not found");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Refresh Token Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handleRefreshTokenNotFoundException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handleRefreshTokenNotFoundException(final RefreshTokenNotFoundException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Refresh Token Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .build();  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);   }
[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit ). assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  )

************************************
************************************
[+] input: givenUserNotFoundException_whenThrowUserNotFoundException_thenReturnErrorResponse() {  // Given UserNotFoundException mockException = new UserNotFoundException("User not found");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("User Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handleUserNotFoundException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handleUserNotFoundException(final UserNotFoundException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("User Not Found") .statusCode(HttpStatus.NOT_FOUND.value()) .status(HttpStatus.NOT_FOUND) .build();  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity. getMessage ( ) )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity. getRequest ( ) )

[*] target: assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

************************************
************************************
[+] input: givenEmailAlreadyExistsException_whenThrowEmailAlreadyExistsException_thenReturnErrorResponse() {  // Given EmailAlreadyExistsException mockException = new EmailAlreadyExistsException("Email already exists");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("Email Already Exists") .statusCode(HttpStatus.CONFLICT.value()) .status(HttpStatus.CONFLICT) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handleEmailAlreadyExistsException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handleEmailAlreadyExistsException(final EmailAlreadyExistsException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Email Already Exists") .statusCode(HttpStatus.CONFLICT.value()) .status(HttpStatus.CONFLICT) .build();  return ResponseEntity.status(HttpStatus.CONFLICT).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org

************************************
************************************
[+] input: givenParkingAreAlreadyExistException_whenThrowParkingAreAlreadyExistException_thenReturnErrorResponse() {  // Given ParkingAreaAlreadyExistException mockException = new ParkingAreaAlreadyExistException("The Parking Area Name and Location already exist!");  // When List<String> details = new ArrayList<>(); details.add(mockException.getMessage());  ErrorResponse expectedErrorResponse = ErrorResponse.builder() .errorDetails(details) .message("The Parking Area Name and Location already exist!") .statusCode(HttpStatus.CONFLICT.value()) .status(HttpStatus.CONFLICT) .timestamp(LocalDateTime.now()) .build();  // Then ResponseEntity<ErrorResponse> responseEntity = globalExceptionHandler.handleParkingAreAlreadyExistException(mockException);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedErrorResponse.getTimestamp().toLocalDate(), responseEntity.getBody().getTimestamp().toLocalDate());  }
handleParkingAreAlreadyExistException(final ParkingAreaAlreadyExistException ex) {  log.error(ex.getMessage(), ex);  List<String> details = new ArrayList<>(); details.add(ex.getMessage());  ErrorResponse errorResponse = ErrorResponse.builder() .errorDetails(details) .message("Parking area already exists") .statusCode(HttpStatus.CONFLICT.value()) .status(HttpStatus.CONFLICT) .build();  return ResponseEntity.status(HttpStatus.CONFLICT).body(errorResponse);  }
[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNotNull ( responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( expectedErrorResponse, responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org. junit. Assert. assertNull ( responseEntity )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  )

[*] target: assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode())
[-] pred:  org

************************************
************************************
[+] input: givenSignUpRequest_WhenDriverRole_ReturnSuccess() {  // Given SignupRequest request = SignupRequest.builder() .fullName("driver_fullname") .password("driver_password") .username("driver_1") .email("driver_1@parkinglot.com") .role(Role.ROLE_DRIVER) .build();  UserEntity userEntity = UserEntity.builder() .email(request.getEmail()) .fullName(request.getFullName()) .username(request.getUsername()) .password(passwordEncoder.encode(request.getPassword())) .role(request.getRole()) .build();  // When Mockito.when(userRepository.existsByEmail(request.getEmail())).thenReturn(false); Mockito.when(userRepository.save(Mockito.any(UserEntity.class))).thenReturn(userEntity);  // Then String result = authService.register(request);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(userRepository).save(Mockito.any(UserEntity.class)); }
register(SignupRequest request) {  if (userRepository.existsByEmail(request.getEmail())) { throw new EmailAlreadyExistsException(request.getEmail()); }  UserEntity userEntity = UserEntity.builder() .email(request.getEmail()) .fullName(request.getFullName()) .username(request.getUsername()) .password(passwordEncoder.encode(request.getPassword())) .role(request.getRole()) .build();  userRepository.save(userEntity);  return "Success"; }
[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userEntity, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( this. result, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( name, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userEntity. register(userEntity ( request ), result )

[*] target: assertEquals("Success", result)
[-] pred:  org

************************************
************************************
[+] input: givenLoginRequest_WhenDriverRole_ReturnSuccess() {  // Given LoginRequest request = LoginRequest.builder() .email("driver_1@parkinglot.com") .password("driver_password") .build();  UserEntity mockUserEntity = UserEntity.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_DRIVER) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // When Mockito.when(authenticationManager.authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); Mockito.when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); Mockito.when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUserEntity)); Mockito.when(refreshTokenService.createRefreshToken(Mockito.any(UserEntity.class))) .thenReturn("actualRefreshToken");  // Then JWTResponse jwtResponse = authService.login(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(request.getEmail(), jwtResponse.getEmail()); Assertions.assertEquals("mockedToken", jwtResponse.getToken()); Assertions.assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  // Verify Mockito.verify(authenticationManager).authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class)); Mockito.verify(jwtUtils).generateJwtToken(mockAuthentication); Mockito.verify(userRepository).findByEmail(request.getEmail()); Mockito.verify(refreshTokenService).createRefreshToken(Mockito.any(UserEntity.class));  }
login(LoginRequest request) {  UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword());  Authentication auth = authenticationManager.authenticate(authToken); SecurityContextHolder.getContext().setAuthentication(auth); String jwtToken = jwtUtils.generateJwtToken(auth);  UserEntity userEntity = userRepository.findByEmail(request.getEmail()).orElseThrow(UserNotFoundException::new);  return JWTResponse.builder() .email(request.getEmail()) .token(jwtToken) .refreshToken(refreshTokenService.createRefreshToken(userEntity)) .build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit. Assert. assertNotNull ( jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit. Assert. assertNotNull ( jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit ). assertNotNull ( jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit, jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org

************************************
************************************
[+] input: givenTokenRefreshRequest_WhenDriverRole_ReturnSuccess() {  // Given TokenRefreshRequest request = TokenRefreshRequest.builder() .refreshToken("validRefreshToken") .build();  RefreshToken refreshToken = RefreshToken.builder() .token("validRefreshToken") .userEntity(UserEntity.builder().id("1L").build()) .build();  // When Mockito.when(refreshTokenService.findByToken(request.getRefreshToken())) .thenReturn(Optional.of(refreshToken)); Mockito.when(refreshTokenService.isRefreshExpired(refreshToken)).thenReturn(false); Mockito.when(jwtUtils.generateJwtToken(Mockito.any(CustomUserDetails.class))).thenReturn("newMockedToken");  // Then TokenRefreshResponse tokenRefreshResponse = authService.refreshToken(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("newMockedToken", tokenRefreshResponse.getAccessToken()); Assertions.assertEquals("validRefreshToken", tokenRefreshResponse.getRefreshToken());  // Verify Mockito.verify(refreshTokenService).findByToken(request.getRefreshToken()); Mockito.verify(refreshTokenService).isRefreshExpired(refreshToken); Mockito.verify(jwtUtils).generateJwtToken(Mockito.any(CustomUserDetails.class));  }
refreshToken(TokenRefreshRequest request) {  RefreshToken refreshToken = refreshTokenService.findByToken(request.getRefreshToken()) .orElseThrow(RefreshTokenNotFoundException::new);   if (!refreshTokenService.isRefreshExpired(refreshToken)) { CustomUserDetails customUserDetails = new CustomUserDetails(refreshToken.getUserEntity()); String newToken = jwtUtils.generateJwtToken(customUserDetails);  return TokenRefreshResponse.builder() .accessToken(newToken) .refreshToken(refreshToken.getToken()) .build(); }  return null; }
[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNull ( tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( request, tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( null, tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org

************************************
************************************
[+] input: givenTokenRefreshRequest_WhenDriverRole_ReturnRefreshTokenExpired() {  // Given TokenRefreshRequest request = TokenRefreshRequest.builder() .refreshToken("expiredRefreshToken") .build();  RefreshToken refreshToken = RefreshToken.builder() .token("validRefreshToken") .userEntity(UserEntity.builder().id("1L").build()) .build();  // When Mockito.when(refreshTokenService.findByToken(request.getRefreshToken())) .thenReturn(Optional.of(refreshToken)); Mockito.when(refreshTokenService.isRefreshExpired(refreshToken)).thenReturn(true);  // Then TokenRefreshResponse tokenRefreshResponse = authService.refreshToken(request);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService).findByToken(request.getRefreshToken()); Mockito.verify(refreshTokenService).isRefreshExpired(refreshToken);  }
refreshToken(TokenRefreshRequest request) {  RefreshToken refreshToken = refreshTokenService.findByToken(request.getRefreshToken()) .orElseThrow(RefreshTokenNotFoundException::new);   if (!refreshTokenService.isRefreshExpired(refreshToken)) { CustomUserDetails customUserDetails = new CustomUserDetails(refreshToken.getUserEntity()); String newToken = jwtUtils.generateJwtToken(customUserDetails);  return TokenRefreshResponse.builder() .accessToken(newToken) .refreshToken(refreshToken.getToken()) .build(); }  return null; }
[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( tokenRefreshResponse, tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNull ( tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse. refreshToken ( refreshToken ) )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org

************************************
************************************
[+] input: givenValidAccessToken_WhenDriverRole_ReturnLogoutSuccess() {  // Given String token = "validAuthToken"; String userId = "1L";  // When Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(token); Mockito.when(jwtUtils.validateJwtToken(token)).thenReturn(true); Mockito.when(jwtUtils.getIdFromToken(token)).thenReturn(userId);  // Then String result = authService.logout(token);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService).deleteByUserId(userId);  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result. logout( token ) )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result. logout(String token )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result. logout ( token ) )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertNull ( result. logout( token ) )

************************************
************************************
[+] input: givenInvalidAccessToken_WhenDriverRole_ReturnLogoutFailed() {  // Given String token = "invalidAuthToken";  Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(null); // Invalid token  // When String result = authService.logout(token);  // Then Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService, Mockito.never()).deleteByUserId(Mockito.anyString());  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( ""Failed"", result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( false, result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token )

************************************
************************************
[+] input: givenInvalidAccessToken_WhenDriverRole_ReturnLogoutInvalidJwtToken() {  // Given String token = "invalidAuthToken";  Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(token); Mockito.when(jwtUtils.validateJwtToken(token)).thenReturn(false);  // When String result = authService.logout(token);  // Then Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService, Mockito.never()).deleteByUserId(Mockito.anyString());  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token ). isEmpty ( ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( ""Failed";"", result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( ""Failed"", result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertNull ( result )

************************************
************************************
[+] input: givenSignUpRequest_WhenAdminRole_ReturnSuccess() {  // Given SignupRequest request = SignupRequest.builder() .fullName("admin_fullname") .password("admin_password") .username("admin_1") .email("admin@parkinglot.com") .role(Role.ROLE_ADMIN) .build();  UserEntity userEntity = UserEntity.builder() .email(request.getEmail()) .fullName(request.getFullName()) .username(request.getUsername()) .password(passwordEncoder.encode(request.getPassword())) .role(request.getRole()) .build();  // When Mockito.when(userRepository.existsByEmail(request.getEmail())).thenReturn(false); Mockito.when(userRepository.save(Mockito.any(UserEntity.class))).thenReturn(userEntity);  // Then String result = authService.register(request);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(userRepository).save(Mockito.any(UserEntity.class));  }
register(SignupRequest request) {  if (userRepository.existsByEmail(request.getEmail())) { throw new EmailAlreadyExistsException(request.getEmail()); }  UserEntity userEntity = UserEntity.builder() .email(request.getEmail()) .fullName(request.getFullName()) .username(request.getUsername()) .password(passwordEncoder.encode(request.getPassword())) .role(request.getRole()) .build();  userRepository.save(userEntity);  return "Success"; }
[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userEntity, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userEntity. register(userEntity ( request ), result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( name, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( this. result, result )

[*] target: assertEquals("Success", result)
[-] pred:  org

************************************
************************************
[+] input: givenLoginRequest_WhenWhenAdminRole_ReturnSuccess() {  // Given LoginRequest request = LoginRequest.builder() .email("admin@parkinglot.com") .password("admin_password") .build();  UserEntity mockUserEntity = UserEntity.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_ADMIN) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // When Mockito.when(authenticationManager.authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); Mockito.when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); Mockito.when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUserEntity)); Mockito.when(refreshTokenService.createRefreshToken(Mockito.any(UserEntity.class))) .thenReturn("actualRefreshToken");  // Then JWTResponse jwtResponse = authService.login(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(request.getEmail(), jwtResponse.getEmail()); Assertions.assertEquals("mockedToken", jwtResponse.getToken()); Assertions.assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  // Verify Mockito.verify(authenticationManager).authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class)); Mockito.verify(jwtUtils).generateJwtToken(mockAuthentication); Mockito.verify(userRepository).findByEmail(request.getEmail()); Mockito.verify(refreshTokenService).createRefreshToken(Mockito.any(UserEntity.class));  }
login(LoginRequest request) {  UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword());  Authentication auth = authenticationManager.authenticate(authToken); SecurityContextHolder.getContext().setAuthentication(auth); String jwtToken = jwtUtils.generateJwtToken(auth);  UserEntity userEntity = userRepository.findByEmail(request.getEmail()).orElseThrow(UserNotFoundException::new);  return JWTResponse.builder() .email(request.getEmail()) .token(jwtToken) .refreshToken(refreshTokenService.createRefreshToken(userEntity)) .build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit. Assert. assertNotNull ( jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit ). assertNotNull ( jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org. junit, jwtResponse )

[*] target: assertNotNull(jwtResponse)
[-] pred:  org

[*] target: assertNotNull(jwtResponse)
[-] pred:  )

************************************
************************************
[+] input: givenTokenRefreshRequest_WhenAdminRole_ReturnSuccess() {  // Given TokenRefreshRequest request = TokenRefreshRequest.builder() .refreshToken("validRefreshToken") .build();  RefreshToken refreshToken = RefreshToken.builder() .token("validRefreshToken") .userEntity(UserEntity.builder().id("1L").build()) .build();  // When Mockito.when(refreshTokenService.findByToken(request.getRefreshToken())) .thenReturn(Optional.of(refreshToken)); Mockito.when(refreshTokenService.isRefreshExpired(refreshToken)).thenReturn(false); Mockito.when(jwtUtils.generateJwtToken(Mockito.any(CustomUserDetails.class))).thenReturn("newMockedToken");  // Then TokenRefreshResponse tokenRefreshResponse = authService.refreshToken(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("newMockedToken", tokenRefreshResponse.getAccessToken()); Assertions.assertEquals("validRefreshToken", tokenRefreshResponse.getRefreshToken());  // Verify Mockito.verify(refreshTokenService).findByToken(request.getRefreshToken()); Mockito.verify(refreshTokenService).isRefreshExpired(refreshToken); Mockito.verify(jwtUtils).generateJwtToken(Mockito.any(CustomUserDetails.class));  }
refreshToken(TokenRefreshRequest request) {  RefreshToken refreshToken = refreshTokenService.findByToken(request.getRefreshToken()) .orElseThrow(RefreshTokenNotFoundException::new);   if (!refreshTokenService.isRefreshExpired(refreshToken)) { CustomUserDetails customUserDetails = new CustomUserDetails(refreshToken.getUserEntity()); String newToken = jwtUtils.generateJwtToken(customUserDetails);  return TokenRefreshResponse.builder() .accessToken(newToken) .refreshToken(refreshToken.getToken()) .build(); }  return null; }
[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNull ( tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( request, tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( null, tokenRefreshResponse )

[*] target: assertNotNull(tokenRefreshResponse)
[-] pred:  org

************************************
************************************
[+] input: givenTokenRefreshRequest_WhenAdminRole_ReturnRefreshTokenExpired() {  // Given TokenRefreshRequest request = TokenRefreshRequest.builder() .refreshToken("expiredRefreshToken") .build();  RefreshToken refreshToken = RefreshToken.builder() .token("validRefreshToken") .userEntity(UserEntity.builder().id("1L").build()) .build();  // When Mockito.when(refreshTokenService.findByToken(request.getRefreshToken())) .thenReturn(Optional.of(refreshToken)); Mockito.when(refreshTokenService.isRefreshExpired(refreshToken)).thenReturn(true);  // Then TokenRefreshResponse tokenRefreshResponse = authService.refreshToken(request);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService).findByToken(request.getRefreshToken()); Mockito.verify(refreshTokenService).isRefreshExpired(refreshToken);  }
refreshToken(TokenRefreshRequest request) {  RefreshToken refreshToken = refreshTokenService.findByToken(request.getRefreshToken()) .orElseThrow(RefreshTokenNotFoundException::new);   if (!refreshTokenService.isRefreshExpired(refreshToken)) { CustomUserDetails customUserDetails = new CustomUserDetails(refreshToken.getUserEntity()); String newToken = jwtUtils.generateJwtToken(customUserDetails);  return TokenRefreshResponse.builder() .accessToken(newToken) .refreshToken(refreshToken.getToken()) .build(); }  return null; }
[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertEquals ( tokenRefreshResponse, tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNull ( tokenRefreshResponse )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org. junit. Assert. assertNotNull ( tokenRefreshResponse. refreshToken ( refreshToken ) )

[*] target: assertNull(tokenRefreshResponse)
[-] pred:  org

************************************
************************************
[+] input: givenValidAccessToken_WhenAdminRole_ReturnLogoutSuccess() {  // Given String token = "validAuthToken"; String userId = "1L";  // When Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(token); Mockito.when(jwtUtils.validateJwtToken(token)).thenReturn(true); Mockito.when(jwtUtils.getIdFromToken(token)).thenReturn(userId);  // Then String result = authService.logout(token);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService).deleteByUserId(userId);  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertEquals ( userId, result. logout( ) )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertNull ( result. logout( token ) )

[*] target: assertEquals("Success", result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("Success", result)
[-] pred:  org

************************************
************************************
[+] input: givenInvalidAccessToken_WhenAdminRole_ReturnLogoutFailed() {  // Given String token = "invalidAuthToken";  // When Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(null); // Invalid token  // Then String result = authService.logout(token);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService, Mockito.never()).deleteByUserId(Mockito.anyString());  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( false, result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( ""Failed"", result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( false, result. logout ( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( error, result )

************************************
************************************
[+] input: givenInvalidAccessToken_WhenAdminRole_ReturnLogoutInvalidJwtToken() {  // Given String token = "invalidAuthToken";  // When Mockito.when(jwtUtils.extractTokenFromHeader(token)).thenReturn(token); Mockito.when(jwtUtils.validateJwtToken(token)).thenReturn(false);  // Then String result = authService.logout(token);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(refreshTokenService, Mockito.never()).deleteByUserId(Mockito.anyString());  }
logout(String token) {  String authToken = jwtUtils.extractTokenFromHeader(token);  if (jwtUtils.validateJwtToken(authToken)) { String id = jwtUtils.getIdFromToken(authToken);  refreshTokenService.deleteByUserId(id);  return "Success"; }  return "Failed";  }
[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( false, result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( ""Failed"", result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertFalse ( result. logout( token ) )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("Failed", result)
[-] pred:  org. junit. Assert. assertEquals ( error, result )

************************************
************************************
[+] input: givenUserIdAndParkCheckInRequest_whenCheckIn_ReturnParkCheckInResponse() {  // Given String mockUserId = "user123"; String mockParkingAreaId = "parkingArea123";  Vehicle vehicle = new VehicleBuilder().withValidFields().build();  VehicleRequest vehicleRequest = VehicleRequest.builder() .licensePlate(vehicle.getLicensePlate()) .vehicleType(vehicle.getVehicleType()) .build();  ParkCheckInRequest parkCheckInRequest = ParkCheckInRequest.builder() .parkingAreaId(mockParkingAreaId) .vehicle(vehicleRequest) .build();  ParkingAreaEntity existingParkingArea = new ParkingAreaEntityBuilder().withValidFields() .withId(parkCheckInRequest.getParkingAreaId()) .build();  ParkEntity parkEntity = new ParkEntityBuilder().withValidFields() .withId(mockParkingAreaId) .withVehicleEntity(vehicleToVehicleEntityMapper.map(vehicle)) .withCheckIn() .build();  Park mockPark = parkEntityToParkMapper.map(parkEntity);  ParkCheckInResponse expected = parkToParkCheckInResponseMapper.map(mockPark);  // When Mockito.when(parkingAreaRepository.findById(parkCheckInRequest.getParkingAreaId())).thenReturn(Optional.ofNullable(existingParkingArea)); Mockito.when(vehicleService.assignOrGet(mockUserId, vehicleRequest)).thenReturn(vehicle); Mockito.when(parkRepository.save(Mockito.any(ParkEntity.class))).thenReturn(parkEntity);  // Then ParkCheckInResponse result = parkService.checkIn(mockUserId, parkCheckInRequest);  // Then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expected.getVehicleCheckInResponse().getLicensePlate(), result.getVehicleCheckInResponse().getLicensePlate()); Assertions.assertEquals(expected.getVehicleCheckInResponse().getVehicleType(), result.getVehicleCheckInResponse().getVehicleType()); Assertions.assertEquals(expected.getParkStatus(), result.getParkStatus()); Assertions.assertEquals(expected.getCheckIn().toLocalTime(), result.getCheckIn().toLocalTime());  // Verify Mockito.verify(parkRepository).save(Mockito.any(ParkEntity.class));  }
checkIn(final String userId, final ParkCheckInRequest parkCheckInRequest) {  final ParkingAreaEntity existingParkingEntityArea = parkingAreaRepository.findById(parkCheckInRequest.getParkingAreaId()) .orElseThrow(() -> new ParkingAreaNotFoundException("With given parkingAreaId: " + parkCheckInRequest.getParkingAreaId()));  Vehicle vehicle = vehicleService.assignOrGet(userId, parkCheckInRequest.getVehicle()); validateAvailableCapacity(existingParkingEntityArea); Park park = parkAvailableArea(parkCheckInRequest, vehicle, existingParkingEntityArea); return parkToParkCheckInResponseMapper.map(park); }
[*] target: assertEquals(expected.getParkingAreaId(), result.getParkingAreaId())
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected.getParkingAreaId(), result.getParkingAreaId())
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertEquals(expected.getParkingAreaId(), result.getParkingAreaId())
[-] pred:  org. junit. Assert. org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected.getParkingAreaId(), result.getParkingAreaId())
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected.getParkingAreaId(), result.getParkingAreaId())
[-] pred:  org

************************************
************************************
[+] input: givenParkingAreaEntity_whenCountByParkingAreaEntityAndParkStatus_thenReturnCurrentParks() {  // Given ParkingAreaEntity mockParkingArea = new ParkingAreaEntityBuilder().withValidFields().build(); int expected = 5;  // When Mockito.when(parkRepository.countByParkingAreaEntityAndParkStatus(mockParkingArea, ParkStatus.EMPTY)).thenReturn(expected);  // Then int result = parkService.countCurrentParks(mockParkingArea);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(parkRepository).countByParkingAreaEntityAndParkStatus(mockParkingArea, ParkStatus.EMPTY);  }
countCurrentParks(ParkingAreaEntity parkingAreaEntity) { return parkRepository.countByParkingAreaEntityAndParkStatus(parkingAreaEntity, ParkStatus.EMPTY); }
[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

************************************
************************************
[+] input: givenValidParkingAreaCreateRequest_whenCreateParkingArea_thenReturnParkingAreaDomainModel() {  // Given final ParkingAreaCreateRequest mockValidParkingAreaCreateRequest = new ParkingAreaCreateRequestBuilder() .withValidFields() .build();  final PriceListCreateRequest mockPriceListCreateRequest = mockValidParkingAreaCreateRequest.getPriceListRequest(); final PriceList mockPriceList = new PriceListBuilder().withValidFields().build();  final ParkingAreaEntity mockParkingAreaEntity = parkingAreaCreateRequestToParkingAreaEntityMapper .map(mockValidParkingAreaCreateRequest);  final ParkingArea mockParkingAreaDomainModel = parkingAreaEntityToParkingAreaMapper .map(mockParkingAreaEntity);   // When Mockito.when(parkingAreaRepository.existsParkingAreaEntitiesByNameAndLocation( Mockito.anyString(), Mockito.anyString()) ).thenReturn(Boolean.FALSE);  Mockito.when(parkingAreaRepository.save(Mockito.any(ParkingAreaEntity.class))) .thenReturn(mockParkingAreaEntity);  Mockito.when(priceListCreateService.createPriceList(mockPriceListCreateRequest)) .thenReturn(mockPriceList);   // Then ParkingArea response = parkingAreaCreateService .createParkingArea(mockValidParkingAreaCreateRequest);  Assertions."<AssertPlaceHolder>";  Assertions.assertEquals( mockValidParkingAreaCreateRequest.getLocation(), response.getLocation() );  // Verify Mockito.verify( parkingAreaRepository, Mockito.times(1) ).save(Mockito.any(ParkingAreaEntity.class));  Mockito.verify( parkingAreaRepository, Mockito.times(1) ).existsParkingAreaEntitiesByNameAndLocation(Mockito.anyString(), Mockito.anyString());  }
createParkingArea( final ParkingAreaCreateRequest parkingAreaCreateRequest ) { this.checkParkingAreaNameAndLocationUniqueness( parkingAreaCreateRequest.getName(), parkingAreaCreateRequest.getLocation() );  ParkingAreaEntity parkingAreaToBeCreate = parkingAreaCreateRequestToParkingAreaEntityMapper .map(parkingAreaCreateRequest);  parkingAreaRepository.save(parkingAreaToBeCreate);  if (Objects.nonNull(parkingAreaCreateRequest.getPriceListRequest())) { final PriceList createdPriceListForParkingArea = priceListCreateService .createPriceList(parkingAreaCreateRequest.getPriceListRequest());  parkingAreaToBeCreate.setPriceListEntity(PriceListMapper.toEntity(createdPriceListForParkingArea)); }  return parkingAreaEntityToParkingAreaMapper .map(parkingAreaToBeCreate); }
[*] target: assertEquals( mockParkingAreaDomainModel.getName(), response.getName() )
[-] pred:  org. junit. Assert. assertEquals ( response, mockParkingArea )

[*] target: assertEquals( mockParkingAreaDomainModel.getName(), response.getName() )
[-] pred:  org. junit. Assert. assertEquals ( mockValidParkingArea, response )

[*] target: assertEquals( mockParkingAreaDomainModel.getName(), response.getName() )
[-] pred:  org. junit. Assert. assertEquals ( response, mockParkingArea response )

[*] target: assertEquals( mockParkingAreaDomainModel.getName(), response.getName() )
[-] pred:  org

[*] target: assertEquals( mockParkingAreaDomainModel.getName(), response.getName() )
[-] pred:  )

************************************
************************************
[+] input: givenValidParkingArea_whenGetParkingAreaById_thenReturnExistingParkingArea() {  // Given final String mockParkingAreaId = UUID.randomUUID().toString();  final ParkingAreaEntity mockParkingAreaEntity = new ParkingAreaEntityBuilder() .withValidFields() .withId(mockParkingAreaId) .build();  final ParkingArea mockParkingArea = parkingAreaEntityToParkingAreaMapper.map(mockParkingAreaEntity);  // When Mockito.when(parkingAreaRepository.findById(mockParkingAreaId)).thenReturn(Optional.of(mockParkingAreaEntity));  // Then final ParkingArea result = parkingAreaService.getParkingAreaById(mockParkingAreaId);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(mockParkingArea.getParkList(), result.getParkList()); Assertions.assertEquals(mockParkingArea.getName(), result.getName()); Assertions.assertEquals(mockParkingArea.getCapacity(), result.getCapacity()); Assertions.assertEquals(mockParkingArea.getLocation(), result.getLocation());  // Verify Mockito.verify(parkingAreaRepository, times(1)).findById(mockParkingAreaId);  }
getParkingAreaById(final String parkingAreaId) {  final ParkingAreaEntity existingParkingArea = parkingAreaRepository.findById(parkingAreaId) .orElseThrow(() -> new ParkingAreaNotFoundException("With given parkingAreaId: " + parkingAreaId));  return parkingAreaEntityToParkingAreaMapper.map(existingParkingArea);  }
[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( mockParkingArea, result )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( result == mockParkingArea ) )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( result!= mockParkingArea ) )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org

************************************
************************************
[+] input: givenValidParkingArea_whenGetParkingAreaByName_thenReturnExistingParkingArea() {  // Given final ParkingAreaEntity mockParkingAreaEntity = new ParkingAreaEntityBuilder() .withValidFields() .build();  final String mockParkingAreaName = mockParkingAreaEntity.getName();  final ParkingArea mockParkingArea = parkingAreaEntityToParkingAreaMapper.map(mockParkingAreaEntity);  // When Mockito.when(parkingAreaRepository.findByName(mockParkingAreaName)).thenReturn(Optional.of(mockParkingAreaEntity));  // Then final ParkingArea result = parkingAreaService.getParkingAreaByName(mockParkingAreaName);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(mockParkingArea.getParkList(), result.getParkList()); Assertions.assertEquals(mockParkingArea.getName(), result.getName()); Assertions.assertEquals(mockParkingArea.getCapacity(), result.getCapacity()); Assertions.assertEquals(mockParkingArea.getLocation(), result.getLocation());  // Verify Mockito.verify(parkingAreaRepository, times(1)).findByName(mockParkingAreaName);  }
getParkingAreaByName(final String name) {  final ParkingAreaEntity existingParkingArea = parkingAreaRepository.findByName(name) .orElseThrow(() -> new ParkingAreaNotFoundException("With given name: " + name));  return parkingAreaEntityToParkingAreaMapper.map(existingParkingArea);  }
[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( mockParkingArea, result )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( result == mockParkingArea ) )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( result!= mockParkingArea ) )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(mockParkingArea.getId(), result.getId())
[-] pred:  org

************************************
************************************
[+] input: givenValidGetDailyIncomeParameter_WhenGivenDailyIncome_ThenReturnParkingAreaIncomeResponse() {  // Given String mockParkingAreaId = UUID.randomUUID().toString();  ParkingAreaEntity mockParkingAreaEntity = new ParkingAreaEntityBuilder() .withValidFields() .withId(mockParkingAreaId) .build();  ParkingAreaIncomeResponse mockParkingAreaIncomeResponse = new ParkingAreaIncomeResponseBuilder() .withValidFields() .withName(mockParkingAreaEntity.getName()) .build();  LocalDate mockDate = TestUtilityClass.generateRandomDate();   // When Mockito.when(parkingAreaRepository.findById(mockParkingAreaId)).thenReturn(Optional.of(mockParkingAreaEntity)); Mockito.when(parkingAreaRepository.calculateDailyIncome(mockDate,mockParkingAreaId)).thenReturn(Optional.of(BigDecimal.valueOf(Mockito.anyLong())));  // Then ParkingAreaIncomeResponse checkParkingAreaIncomeResponse = parkingAreaService.getDailyIncome(mockDate,mockParkingAreaId); Assertions."<AssertPlaceHolder>";  //Verify Mockito.verify(parkingAreaRepository, times(1)).findById(mockParkingAreaId); Mockito.verify(parkingAreaRepository, times(1)).calculateDailyIncome(mockDate,mockParkingAreaId);  }
getDailyIncome(final LocalDate date, final String parkingAreaId) {  ParkingAreaEntity parkingAreaEntity = parkingAreaRepository .findById(parkingAreaId) .orElseThrow(ParkingAreaNotFoundException::new);  isGivenDateAfterCurrentDate(date);  BigDecimal calculatedIncome=parkingAreaRepository.calculateDailyIncome(date, parkingAreaId) .orElseThrow(DailyIncomeException::new);  return ParkingAreaIncomeResponse.builder() .income(calculatedIncome) .name(parkingAreaEntity.getName()) .build(); }
[*] target: assertEquals(checkParkingAreaIncomeResponse.getName(),mockParkingAreaIncomeResponse.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( ( checkParkingAreaIncomeResponse. getDailyIncome ( ) ) > 0 ) )

[*] target: assertEquals(checkParkingAreaIncomeResponse.getName(),mockParkingAreaIncomeResponse.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( ( checkParkingAreaIncomeResponse. getDailyIncome ( ) ) > 0.0 ) )

[*] target: assertEquals(checkParkingAreaIncomeResponse.getName(),mockParkingAreaIncomeResponse.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( ( checkParkingAreaDecodedResponse. getDailyIncome ( ) ) > 0 ) )

[*] target: assertEquals(checkParkingAreaIncomeResponse.getName(),mockParkingAreaIncomeResponse.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( ( checkParkingAreaAccessorResponse. getDailyIncome ( ) ) > 0 ) )

[*] target: assertEquals(checkParkingAreaIncomeResponse.getName(),mockParkingAreaIncomeResponse.getName())
[-] pred:  org

************************************
************************************
[+] input: givenValidParkingAreaUpdateRequest_whenUpdateParkingArea_thenReturnParkingArea() {  //Given final String mockParkingAreaId = UUID.randomUUID().toString();  final ParkingAreaUpdateRequest mockParkingAreaUpdateRequest = new ParkingAreaUpdateRequestBuilder() .withValidFields() .build();  final ParkingAreaEntity mockParkingAreaEntity = new ParkingAreaEntityBuilder() .withValidFields() .witId(mockParkingAreaId) .build();  final ParkingArea mockBeforeUpdatedParkingArea = parkingAreaEntityToParkingAreaMapper.map(mockParkingAreaEntity);  // When Mockito.when(parkingAreaRepository.findById(mockParkingAreaId)) .thenReturn(Optional.of(mockParkingAreaEntity));  // Then final ParkingArea parkingAreaResponse = parkingAreaUpdateService.parkingAreaUpdateByCapacity(mockParkingAreaId,mockParkingAreaUpdateRequest);  Assertions."<AssertPlaceHolder>";  Assertions.assertEquals( mockParkingAreaUpdateRequest.getCapacity(), parkingAreaResponse.getCapacity() );  Assertions.assertEquals( mockBeforeUpdatedParkingArea.getId(), parkingAreaResponse.getId() );  Assertions.assertEquals( mockBeforeUpdatedParkingArea.getId(), parkingAreaResponse.getId() );  Assertions.assertEquals( mockBeforeUpdatedParkingArea.getLocation(), parkingAreaResponse.getLocation() );  Assertions.assertEquals( mockBeforeUpdatedParkingArea.getCity(), parkingAreaResponse.getCity() );  // Verify Mockito.verify(parkingAreaRepository,Mockito.times(1)).findById(mockParkingAreaId); Mockito.verify(parkingAreaRepository,Mockito.times(1)).save(mockParkingAreaEntity);  }
parkingAreaUpdateByCapacity( final String parkingAreaId, final ParkingAreaUpdateRequest parkingAreaUpdateRequest ) {  final ParkingAreaEntity parkingAreaEntityToBeUpdate = parkingAreaRepository .findById(parkingAreaId) .orElseThrow(() -> new ParkingAreaNotFoundException("ParkingArea not found given id" + parkingAreaId));  parkingAreaEntityToBeUpdate.setCapacity(parkingAreaUpdateRequest.getCapacity());  parkingAreaRepository.save(parkingAreaEntityToBeUpdate);  return parkingAreaEntityToParkingArea.map(parkingAreaEntityToBeUpdate);  }
[*] target: assertNotNull(parkingAreaResponse)
[-] pred:  org. junit. Assert. assertEquals ( mockBeforeUpdatedParkingArea, parkingAreaResponse )

[*] target: assertNotNull(parkingAreaResponse)
[-] pred:  org. junit. Assert. assertEquals ( mockBeforeUpdatedToArea, parkingAreaResponse )

[*] target: assertNotNull(parkingAreaResponse)
[-] pred:  org. junit. Assert. assertEquals ( mockBeforeUpdatedParkingsArea, parkingAreaResponse )

[*] target: assertNotNull(parkingAreaResponse)
[-] pred:  org. junit. Assert. assertNotNull ( parkingAreaResponse )

[*] target: assertNotNull(parkingAreaResponse)
[-] pred:  org

************************************
************************************
[+] input: givenUser_whenGetUserById_thenReturnUser() {  // Given final String mockUserId = UUID.randomUUID().toString();  final VehicleEntity mockVehicleEntity = new VehicleEntityBuilder().withValidFields().build();  final UserEntity mockUserEntity = new UserEntityBuilder() .withId(mockUserId) .customer() .withVehicle(mockVehicleEntity) .build();  final User mockUser = userEntityToUserMapper.map(mockUserEntity);  // When Mockito.when(userService.findById(mockUserId)) .thenReturn(Optional.of(mockUserEntity));  // Then final User expected = userGetService.getUserById(mockUserId);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(mockUser.getUsername(), expected.getUsername()); Assertions.assertEquals(mockUser.getEmail(), expected.getEmail()); Assertions.assertEquals(mockUser.getRole(), expected.getRole()); Assertions.assertEquals(mockUser.getFullName(), expected.getFullName()); Assertions.assertEquals(mockUser.getVehicleList().size(), expected.getVehicleList().size()); Assertions.assertEquals(mockUser.getVehicleList().get(0).getVehicleType(), expected.getVehicleList().get(0).getVehicleType()); Assertions.assertEquals(mockUser.getVehicleList().get(0).getLicensePlate(), expected.getVehicleList().get(0).getLicensePlate());  // Verify Mockito.verify(userService, Mockito.times(1)).findById(Mockito.anyString());  }
getUserById(String userId) {  final UserEntity userEntity = userService.findById(userId) .orElseThrow(() -> new UserNotFoundException(userId));  return userEntityToUserMapper.map(userEntity); }
[*] target: assertEquals(mockUser.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertThat ( mockUser, org. hamcrest. CoreMatchers. is ( expected ) )

[*] target: assertEquals(mockUser.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertThat ( mockUser, org. hamcrest. CoreMatchers. equalTo ( expected ) )

[*] target: assertEquals(mockUser.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertEquals ( expected, mockUser )

[*] target: assertEquals(mockUser.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( expected == mockUser ) )

[*] target: assertEquals(mockUser.getId(), expected.getId())
[-] pred:  )

************************************
************************************
[+] input: givenAdmin_whenGetAdminById_thenReturnAdmin() {  // Given final String mockAdminId = UUID.randomUUID().toString();  final UserEntity mockAdminEntity = new UserEntityBuilder() .withId(mockAdminId) .admin() .build();  final User mockAdmin = userEntityToUserMapper.map(mockAdminEntity);  // When Mockito.when( userService.findById(mockAdminId)) .thenReturn(Optional.of(mockAdminEntity));  // Then final User expected = userGetService.getAdminById(mockAdminId);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(mockAdmin.getUsername(), expected.getUsername()); Assertions.assertEquals(mockAdmin.getEmail(), expected.getEmail()); Assertions.assertEquals(mockAdmin.getRole(), expected.getRole());  // Verify Mockito.verify( userService, Mockito.times(1) ).findById(Mockito.anyString());  }
getAdminById(final String adminId) {  final UserEntity adminEntity = userService.findById(adminId) .orElseThrow(() -> new UserNotFoundException(adminId));  return userEntityToUserMapper.map(adminEntity); }
[*] target: assertEquals(mockAdmin.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertEquals ( expected, mockAdmin )

[*] target: assertEquals(mockAdmin.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertEquals ( mockAdmin, expected )

[*] target: assertEquals(mockAdmin.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( expected!= mockAdmin ) )

[*] target: assertEquals(mockAdmin.getId(), expected.getId())
[-] pred:  org. junit. Assert. assertEquals ( expected, mockAdmin )

[*] target: assertEquals(mockAdmin.getId(), expected.getId())
[-] pred:  )

************************************
************************************
[+] input: givenValidVehicleRequest_whenAssignVehicleToUser_thenReturnVehicle() {  // Given final String mockUserId = UUID.randomUUID().toString();  final UserEntity mockUserEntity = new UserEntityBuilder() .withId(mockUserId) .customer() .build();  final VehicleRequest mockVehicleRequest = new VehicleRequestBuilder() .withValidFields() .build();  final Vehicle mockVehicle = vehicleRequestToVehicleMapper.map(mockVehicleRequest);  final VehicleEntity mockVehicleEntity = vehicleToVehicleEntityMapper.map(mockVehicle);  final Vehicle mockVehicleToCreated = vehicleEntityToVehicleMapper.map(mockVehicleEntity);  // When Mockito.when(userService.findById(mockUserId)) .thenReturn(Optional.of(mockUserEntity));  Mockito.when(vehicleRepository.existsByLicensePlate(mockVehicleRequest.getLicensePlate())) .thenReturn(Boolean.FALSE);  // Then final Vehicle vehicleToBeAssigned = vehicleService.assignVehicleToUser(mockUserId,mockVehicleRequest);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(mockVehicleRequest.getVehicleType(),vehicleToBeAssigned.getVehicleType()); Assertions.assertEquals(mockVehicleRequest.getLicensePlate(),mockVehicleEntity.getLicensePlate()); Assertions.assertEquals(mockVehicleRequest.getVehicleType(),mockVehicleEntity.getVehicleType()); Assertions.assertEquals(mockVehicleEntity.getId() , mockVehicleToCreated.getId()); Assertions.assertEquals(mockVehicleEntity.getLicensePlate() , mockVehicleToCreated.getLicensePlate()); Assertions.assertEquals(mockVehicleEntity.getVehicleType() , mockVehicleToCreated.getVehicleType()); Assertions.assertEquals(mockVehicleEntity.getParkEntities() , mockVehicleToCreated.getParkList()); Assertions.assertEquals(mockVehicleEntity.getUserEntity() , mockVehicleToCreated.getUser());  // Verify Mockito.verify(userService,Mockito.times(1)).findById(Mockito.anyString()); Mockito.verify(vehicleRepository,Mockito.times(1)).save(Mockito.any(VehicleEntity.class));  }
assignVehicleToUser(final String id, final VehicleRequest vehicleRequest) {  final UserEntity userEntity = userService.findById(id) .orElseThrow( ()-> new UserNotFoundException("Cant find user given id"));  final Vehicle vehicle = vehicleRequestToVehicleMapper.map(vehicleRequest);  final VehicleEntity vehicleEntity = assignUserToVehicle(userEntity, vehicle);  return vehicleEntityToVehicleMapper.map(vehicleEntity);  }
[*] target: assertEquals(mockVehicleRequest.getLicensePlate(),vehicleToBeAssigned.getLicensePlate())
[-] pred:  org. junit. Assert. assertTrue ( ( vehicleToBeAssigned instanceof org. VehicleToCreated ) )

[*] target: assertEquals(mockVehicleRequest.getLicensePlate(),vehicleToBeAssigned.getLicensePlate())
[-] pred:  org. junit. Assert. assertTrue ( ( vehicleToBeAssigned!= null ) )

[*] target: assertEquals(mockVehicleRequest.getLicensePlate(),vehicleToBeAssigned.getLicensePlate())
[-] pred:  org. junit. Assert. assertTrue ( ( vehicleToBeAssigned instanceof org. apache. commons. lang3. Vehicle ) )

[*] target: assertEquals(mockVehicleRequest.getLicensePlate(),vehicleToBeAssigned.getLicensePlate())
[-] pred:  org. junit. Assert. assertTrue ( ( vehicleToBeAssigned instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals(mockVehicleRequest.getLicensePlate(),vehicleToBeAssigned.getLicensePlate())
[-] pred:  org

************************************
************************************
[+] input: testCreateTransactionSuccess() { var transaction = new Transaction(null, 1L, 2L, new BigDecimal(1000), null); var payee = new Wallet(transaction.payee(), null, null, null, null, WalletType.COMUM.getValue(), BigDecimal.ZERO, 1L); var payer = new Wallet(transaction.payer(), null, null, null, null, WalletType.COMUM.getValue(), new BigDecimal(1000), 1L);  when(walletRepository.findById(transaction.payee())).thenReturn(Optional.of(payee)); when(walletRepository.findById(transaction.payer())).thenReturn(Optional.of(payer)); when(transactionRepository.save(transaction)).thenReturn(transaction);  var newTransaction = transactionService.create(transaction);  "<AssertPlaceHolder>"; }
create(Transaction transaction) { validate(transaction);  var newTransaction = transactionRepository.save(transaction);  var walletPayer = walletRepository.findById(transaction.payer()).get(); var walletPayee = walletRepository.findById(transaction.payee()).get(); walletRepository.save(walletPayer.debit(transaction.value())); walletRepository.save(walletPayee.credit(transaction.value()));  authorizerService.authorize(transaction); notificationService.notify(newTransaction);  return newTransaction; }
[*] target: assertEquals(transaction, newTransaction)
[-] pred:  org. junit. Assert. assertEquals ( newTransaction, var. create(Transaction ) )

[*] target: assertEquals(transaction, newTransaction)
[-] pred:  org. junit. Assert. assertEquals ( newTransaction, var. create(Transaction ( transaction ) )

[*] target: assertEquals(transaction, newTransaction)
[-] pred:  org. junit. Assert. assertEquals ( newTransaction, var. create(Transaction transaction ) )

[*] target: assertEquals(transaction, newTransaction)
[-] pred:  org. junit. Assert. assertEquals ( newTransaction, var. create(TransactionTransaction ) )

[*] target: assertEquals(transaction, newTransaction)
[-] pred:  org. junit. Assert. assertEquals ( newTransaction, varDao. create(Transaction transaction ) )

************************************
************************************
[+] input: preconfiguredBuilderHasPreconfiguredUnderlyingBuilders() { var builder = ConfigEvaluatorBuilder.preconfigured();  var evaluatorBuilder = builder.getEvaluatorBuilder(); assertThat(evaluatorBuilder).isNotNull(); assertThat(evaluatorBuilder.getEnvironmentVariables()).isEqualTo(System.getenv()); assertThat(evaluatorBuilder.getExternalProperties()).isEqualTo(System.getProperties());  var mapperBuilder = builder.getValueMapperBuilder(); "<AssertPlaceHolder>"; assertThat(mapperBuilder.getConverterFactories()).isEqualTo(ConverterFactories.all); }
getValueMapperBuilder() { return mapperBuilder; }
[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder ( ), org. hamcrest. CoreMatchers. is ( evaluatorBuilder ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder() ( ), org. hamcrest. CoreMatchers. is ( evaluatorBuilder ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder ( )());()); )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder ( ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder() ( ) )

************************************
************************************
[+] input: unconfiguredBuilderHasUnconfiguredUnderlyingBuilders() { var builder = ConfigEvaluatorBuilder.unconfigured();  var evaluatorBuilder = builder.getEvaluatorBuilder(); assertThat(evaluatorBuilder).isNotNull(); assertThat(evaluatorBuilder.getEnvironmentVariables()).isEmpty(); assertThat(evaluatorBuilder.getExternalProperties()).isEmpty();  var mapperBuilder = builder.getValueMapperBuilder(); "<AssertPlaceHolder>"; assertThat(mapperBuilder.getConverterFactories()).isEmpty(); }
getValueMapperBuilder() { return mapperBuilder; }
[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder ( ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder() ( ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder() ( builder ) )

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder. getValueMapperBuilder (

[*] target: assertThat(mapperBuilder).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( mapperBuilder )

************************************
************************************
[+] input: preconfiguredBuilderContainsProcessEnvironmentVariables() { var builder = ConfigEvaluatorBuilder.preconfigured(); "<AssertPlaceHolder>"; }
getEnvironmentVariables() { return evaluatorBuilder.getEnvironmentVariables(); }
[*] target: assertThat(builder.getEnvironmentVariables()).isEqualTo(System.getenv())
[-] pred:  org. junit. Assert. assertTrue ( builder. getEnvironmentVariables() ( ). isEmpty ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEqualTo(System.getenv())
[-] pred:  org. junit. Assert. assertTrue ( builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEqualTo(System.getenv())
[-] pred:  org. junit. Assert. assertEquals ( 1, builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEqualTo(System.getenv())
[-] pred:  org. junit. Assert. assertTrue ( builder. getEnvironmentVariables() ( ). contains ( instance ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEqualTo(System.getenv())
[-] pred:  org. junit. Assert. assertTrue ( builder. getEnvironmentVariables() ( ). contains ( 5 ) )

************************************
************************************
[+] input: unconfiguredBuilderContainsNoEnvironmentVariables() { var builder = ConfigEvaluatorBuilder.unconfigured(); "<AssertPlaceHolder>"; }
getEnvironmentVariables() { return evaluatorBuilder.getEnvironmentVariables(); }
[*] target: assertThat(builder.getEnvironmentVariables()).isEmpty()
[-] pred:  org. junit. Assert. assertFalse ( builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEmpty()
[-] pred:  org. junit. Assert. assertNull ( builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 0, builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).isEmpty()
[-] pred:  org

[*] target: assertThat(builder.getEnvironmentVariables()).isEmpty()
[-] pred:  )

************************************
************************************
[+] input: addEnvironmentVariables() { var builder = ConfigEvaluatorBuilder.unconfigured(); builder.addEnvironmentVariable("ONE", "one"); var envVars = Map.of("TWO", "two", "THREE", "three"); builder.addEnvironmentVariables(envVars);  assertThat(builder.getEnvironmentVariables()).hasSize(3); assertThat(builder.getEnvironmentVariables()).containsEntry("ONE", "one"); "<AssertPlaceHolder>"; }
getEnvironmentVariables() { return evaluatorBuilder.getEnvironmentVariables(); }
[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars)
[-] pred:  org. junit. Assert. assertEquals ( envVars, builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars)
[-] pred:  org. junit. Assert. assertEquals ( 6, builder. getEnvironmentVariables() ( ). size ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars)
[-] pred:  org. junit. Assert. assertEquals ( 6, builder. getEnvironmentVariables() ( ). count ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars)
[-] pred:  org. junit. Assert. assertEquals ( bolt, builder. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars)
[-] pred:  org. junit. Assert. assertEquals ( env, builder. getEnvironmentVariables() ( ) )

************************************
************************************
[+] input: overrideEnvironmentVariables() { var builder = ConfigEvaluatorBuilder.unconfigured();  var envVars1 = Map.of("TWO", "two", "THREE", "three"); builder.addEnvironmentVariables(envVars1);  var envVars2 = Map.of("FOUR", "four", "FIVE", "five"); builder.setEnvironmentVariables(envVars2);  assertThat(builder.getEnvironmentVariables()).hasSize(2); "<AssertPlaceHolder>"; }
getEnvironmentVariables() { return evaluatorBuilder.getEnvironmentVariables(); }
[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars2)
[-] pred:  org. junit. Assert. assertThat ( var. getEnvironmentVariables() ( ), org. hamcrest. CoreMatchers. is ( envVars1 ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars2)
[-] pred:  org. junit. Assert. assertEquals ( envVars1, var envVars2. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars2)
[-] pred:  org. junit. Assert. assertThat ( var. getEnvironmentVariables() ( ), org. hamcrest. CoreMatchers. is ( envVars2 ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars2)
[-] pred:  org. junit. Assert. assertEquals ( var configs1, var envVars2. getEnvironmentVariables() ( ) )

[*] target: assertThat(builder.getEnvironmentVariables()).containsAllEntriesOf(envVars2)
[-] pred:  org. junit. Assert. assertEquals ( envVars1, varEncoded2. getEnvironmentVariables() ( ) )

************************************
************************************
[+] input: preconfiguredBuilderContainsSystemProperties() { var builder = ConfigEvaluatorBuilder.preconfigured(); "<AssertPlaceHolder>"; }
getExternalProperties() { return evaluatorBuilder.getExternalProperties(); }
[*] target: assertThat(builder.getExternalProperties()).isEqualTo(System.getProperties())
[-] pred:  org. junit. Assert. assertTrue ( ( ( builder. getExternalProperties() ( ) ) > 0 ) )

[*] target: assertThat(builder.getExternalProperties()).isEqualTo(System.getProperties())
[-] pred:  org. junit. Assert. assertThat ( builder, org. hamcrest. CoreMatchers. is ( 8 ) )

[*] target: assertThat(builder.getExternalProperties()).isEqualTo(System.getProperties())
[-] pred:  org. junit. Assert. assertThat ( builder )

[*] target: assertThat(builder.getExternalProperties()).isEqualTo(System.getProperties())
[-] pred:  . getExternalProperties()

[*] target: assertThat(builder.getExternalProperties()).isEqualTo(System.getProperties())
[-] pred:  )

************************************
************************************
[+] input: unconfiguredBuilderContainsNoExternalProperties() { var builder = ConfigEvaluatorBuilder.unconfigured(); "<AssertPlaceHolder>"; }
getExternalProperties() { return evaluatorBuilder.getExternalProperties(); }
[*] target: assertThat(builder.getExternalProperties()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThat(builder.getExternalProperties()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( no ) )

[*] target: assertThat(builder.getExternalProperties()).isEmpty()
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertThat(builder.getExternalProperties()).isEmpty()
[-] pred:  org. junit. Assert. assertNull ( builder. getExternalProperties() ( ) )

[*] target: assertThat(builder.getExternalProperties()).isEmpty()
[-] pred:  org. junit. Assert. assertEquals ( 0, builder. getExternalProperties() ( ) )

************************************
************************************
[+] input: addExternalProperties() { var builder = ConfigEvaluatorBuilder.unconfigured(); builder.addExternalProperty("ONE", "one"); var properties = Map.of("TWO", "two", "THREE", "three"); builder.addExternalProperties(properties);  assertThat(builder.getExternalProperties()).hasSize(3); assertThat(builder.getExternalProperties()).containsEntry("ONE", "one"); "<AssertPlaceHolder>"; }
getExternalProperties() { return evaluatorBuilder.getExternalProperties(); }
[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties)
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties ( ), org. hamcrest. CoreMatchers. is ( properties ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties)
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties Dyn ), org. hamcrest. CoreMatchers. is ( properties ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties)
[-] pred:  org. junit. Assert. assertEquals ( properties, builder. getExternalProperties Dyn ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties)
[-] pred:  org. junit. Assert. assertEquals ( properties, builder. getExternalProperties ( ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties)
[-] pred:  org. junit. Assert. assertThat ( builder. getExternalProperties ( ), org. hamcrest. Matchers. is ( properties ) )

************************************
************************************
[+] input: overrideExternalProperties() { var builder = ConfigEvaluatorBuilder.unconfigured();  var properties1 = Map.of("TWO", "two", "THREE", "three"); builder.addExternalProperties(properties1);  var properties2 = Map.of("FOUR", "four", "FIVE", "five"); builder.setExternalProperties(properties2);  assertThat(builder.getExternalProperties()).hasSize(2); "<AssertPlaceHolder>"; }
getExternalProperties() { return evaluatorBuilder.getExternalProperties(); }
[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties2)
[-] pred:  org. junit. Assert. assertThat ( var builder. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( properties2 ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties2)
[-] pred:  org. junit. Assert. assertThat ( var builder. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( properties1 ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties2)
[-] pred:  org. junit. Assert. assertThat ( var2. getExternalProperties() ( ), org. hamcrest. CoreMatchers. is ( properties1 ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties2)
[-] pred:  org. junit. Assert. assertThat ( var builder. getExternalProperties ( ), org. hamcrest. CoreMatchers. is ( properties2 ) )

[*] target: assertThat(builder.getExternalProperties()).containsAllEntriesOf(properties2)
[-] pred:  org. junit. Assert. assertThat ( var2. getExternalProperties ( ), org. hamcrest. CoreMatchers. is ( properties1 ) )

************************************
************************************
[+] input: setSecurityManager() { var builder = ConfigEvaluatorBuilder.preconfigured();  assertThat(builder.getAllowedModules()).isEqualTo(SecurityManagers.defaultAllowedModules); assertThat(builder.getAllowedResources()).isEqualTo(SecurityManagers.defaultAllowedResources);  var manager = SecurityManagers.standard(List.of(), List.of(), SecurityManagers.defaultTrustLevels, null);  builder = ConfigEvaluatorBuilder.preconfigured().setSecurityManager(manager);  "<AssertPlaceHolder>"; }
getSecurityManager() { return evaluatorBuilder.getSecurityManager(); }
[*] target: assertThat(builder.getSecurityManager()).isSameAs(manager)
[-] pred:  org. junit. Assert. assertEquals ( builder. getSecurityManager() ( ), manager. getSecurityManager() )

[*] target: assertThat(builder.getSecurityManager()).isSameAs(manager)
[-] pred:  org. junit. Assert. assertEquals ( builder. getSecurityManager(), manager. getSecurityManager() ( ) )

[*] target: assertThat(builder.getSecurityManager()).isSameAs(manager)
[-] pred:  org. junit. Assert. assertEquals ( builder. getSecurityManager(), manager. getSecurityManager() )

[*] target: assertThat(builder.getSecurityManager()).isSameAs(manager)
[-] pred:  org. junit. Assert. assertNotNull ( builder. getSecurityManager() ( ) )

[*] target: assertThat(builder.getSecurityManager()).isSameAs(manager)
[-] pred:  org

************************************
************************************
[+] input: navigateToNonExistingObjectChild() { var pigeon = pigeonConfig.get("pigeon"); var t = catchThrowable(() -> pigeon.get("non-existing"));  "<AssertPlaceHolder>"; }
get(String childName);  /** * Converts this node's value to the given {@link Class}
[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `pigeon` of type `pkl.base#Dynamic` " + "does not have a property named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( var. get(String childName);OffsetsOffsets ( ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `pigeon` of type `pkl.base#Dynamic` " + "does not have a property named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( var. get(String childName);[]" ( ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `pigeon` of type `pkl.base#Dynamic` " + "does not have a property named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( var. get(String childName);Range *groupId )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `pigeon` of type `pkl.base#Dynamic` " + "does not have a property named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( var. get(String childName);Range *groupId ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `pigeon` of type `pkl.base#Dynamic` " + "does not have a property named `non-existing`.")
[-] pred:  org

************************************
************************************
[+] input: navigateToNonExistingMapChild() { var map = mapConfig.get("x"); var t = catchThrowable(() -> map.get("non-existing"));  "<AssertPlaceHolder>"; }
get(String childName);  /** * Converts this node's value to the given {@link Class}
[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `x` of type `pkl.base#Map` " + "does not have a key named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( map. get(String childName);[]" ( t ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `x` of type `pkl.base#Map` " + "does not have a key named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( map. get(String childName);Range *groupId )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `x` of type `pkl.base#Map` " + "does not have a key named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( map. get(String childName);Json *groupId )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `x` of type `pkl.base#Map` " + "does not have a key named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( map. get(String childName);Range *groupId ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Node `x` of type `pkl.base#Map` " + "does not have a key named `non-existing`.")
[-] pred:  org. junit. Assert. assertNull ( map. get(String childName);Json *groupId ) )

************************************
************************************
[+] input: navigateToNonExistingLeafChild() { var age = pigeonConfig.get("pigeon").get("age"); var t = catchThrowable(() -> age.get("non-existing"));  "<AssertPlaceHolder>"; }
get(String childName);  /** * Converts this node's value to the given {@link Class}
[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Leaf node `pigeon.age` of type `pkl.base#Int` " + "does not have a child named `non-existing`.")
[-] pred:  org. junit. Assert. assertEquals ( null, var. get(String childName);OffsetsOffsets ( ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Leaf node `pigeon.age` of type `pkl.base#Int` " + "does not have a child named `non-existing`.")
[-] pred:  org. junit. Assert. assertEquals ( null, var. get(String childName);[]" ( ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Leaf node `pigeon.age` of type `pkl.base#Int` " + "does not have a child named `non-existing`.")
[-] pred:  org. junit. Assert. assertEquals ( null, var. get(String childName);TimeRange ( t ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Leaf node `pigeon.age` of type `pkl.base#Int` " + "does not have a child named `non-existing`.")
[-] pred:  org. junit. Assert. assertEquals ( null, var. get(String childName);OffsetsOffsets ( t ) )

[*] target: assertThat(t) .isInstanceOf(NoSuchChildException.class) .hasMessageStartingWith( "Leaf node `pigeon.age` of type `pkl.base#Int` " + "does not have a child named `non-existing`.")
[-] pred:  org. junit. Assert. assertEquals ( null, var. get(String childName);Range *groupId )

************************************
************************************
[+] input: verifySecureRandomLength() { final int length = 10; Assertions."<AssertPlaceHolder>"; }
createSecureRandom(final int length) { if (length < 0) { return StringUtils.EMPTY; }  final byte[] apiKey = new byte[length]; final SecureRandom secureRandom = new SecureRandom(); secureRandom.nextBytes(apiKey);  final StringBuilder sb = new StringBuilder(); for (final byte b : apiKey) { sb.append(String.format("%02x", b)); }  return sb.toString(); }
[*] target: assertEquals(length * 2, CryptoUtils.createSecureRandom(length).length())
[-] pred:  org. junit. Assert. assertEquals ( length, converter. createSecureRandom(final int length ) )

[*] target: assertEquals(length * 2, CryptoUtils.createSecureRandom(length).length())
[-] pred:  org. junit. Assert. assertEquals ( length, source. createSecureRandom(final int length ) )

[*] target: assertEquals(length * 2, CryptoUtils.createSecureRandom(length).length())
[-] pred:  org. junit. Assert. assertEquals ( length, factory. createSecureRandom(final int length ) )

[*] target: assertEquals(length * 2, CryptoUtils.createSecureRandom(length).length())
[-] pred:  org. junit. Assert. assertEquals ( length, converter. createSecureRandom(final int length )

[*] target: assertEquals(length * 2, CryptoUtils.createSecureRandom(length).length())
[-] pred:  org. junit. Assert. assertEquals ( length, dao. createSecureRandom(final int length ) )

************************************
************************************
[+] input: verifySecureRandomLengthNegative() { final int length = -10; Assertions."<AssertPlaceHolder>"; }
createSecureRandom(final int length) { if (length < 0) { return StringUtils.EMPTY; }  final byte[] apiKey = new byte[length]; final SecureRandom secureRandom = new SecureRandom(); secureRandom.nextBytes(apiKey);  final StringBuilder sb = new StringBuilder(); for (final byte b : apiKey) { sb.append(String.format("%02x", b)); }  return sb.toString(); }
[*] target: assertEquals(StringUtils.EMPTY, CryptoUtils.createSecureRandom(length))
[-] pred:  org. junit. Assert. assertEquals ( length, converter. createSecureRandom(final int length ) )

[*] target: assertEquals(StringUtils.EMPTY, CryptoUtils.createSecureRandom(length))
[-] pred:  org. junit. Assert. assertEquals ( length, factory. createSecureRandom(final int length ) )

[*] target: assertEquals(StringUtils.EMPTY, CryptoUtils.createSecureRandom(length))
[-] pred:  org. junit. Assert. assertEquals ( length, source. createSecureRandom(final int length ) )

[*] target: assertEquals(StringUtils.EMPTY, CryptoUtils.createSecureRandom(length))
[-] pred:  org. junit. Assert. assertEquals ( length, cr. createSecureRandom(final int length ) )

[*] target: assertEquals(StringUtils.EMPTY, CryptoUtils.createSecureRandom(length))
[-] pred:  org. junit. Assert. assertEquals ( length, converter. createSecureRandom(final int length )

************************************
************************************
[+] input: reRank_json() { List<String> talks = List.of( "{"title": "Java 21", "speakers": [{"fullName": "Brian Goetz", "company": "Oracle"}]}", "{"title": "10 Years of The Well-Grounded Java Developer", "speakers": [{"fullName": "Ben Evans", "company": "Red Hat"}]}", "{"title": "IntelliJ Super Productivity in 45 Minutes", "speakers": [{"fullName": "Heinz Kabutz", "company": "JavaSpecialists.eu"}]}", "{"title": "Java Language update", "speakers": [{"fullName": "Brian Goetz", "company": "Oracle"}]}", "{"title": "Teaching old Streams new tricks", "speakers": [{"fullName": "Viktor Klang", "company": "Oracle"}]}", "{"title": "Ask the Java Architects", "speakers": [{"fullName": "Sharat Chander", "company": "Oracle, Corp"}, {"fullName": "Alan Bateman", "company": "Oracle"}, {"fullName": "Viktor Klang", "company": "Oracle"}, {"fullName": "Stuart Marks", "company": "Oracle"}, {"fullName": "Brian Goetz", "company": "Oracle"}]}", "{"title": "Optimize the world for fun and profit", "speakers": [{"fullName": "Geoffrey De Smet", "company": "Timefold"}, {"fullName": "Lukáš Petrovický", "company": "Timefold"}]}", "{"title": "Quarkus Community BOF - Devoxx.be Edition", "speakers": [{"fullName": "Dimitris Andreadis", "company": "Red Hat"}]}", "{"title": "Developer Unproductivity Horror Stories", "speakers": [{"fullName": "Trisha Gee", "company": "Gradle"}, {"fullName": "Helen Scott", "company": "JetBrains"}]}" );  ReRankService reRankService = new ReRankService(); List<DocumentDTO> usedDocuments = new ArrayList<>();  talks.forEach(talk -> usedDocuments.add(DocumentDTO.builder() .id("1") .text(talk) .score(0D) .docType(DocumentType.CONTENT) .build()));  List<DocumentDTO> reRankDocuments = reRankService.reRankDocuments("Brian Goetz", usedDocuments); "<AssertPlaceHolder>";  }
reRankDocuments(String query, List<DocumentDTO> usedDocuments) {  List<String> usedDocumentStrings = usedDocuments.stream() .map(DocumentDTO::getText) .toList();  List<DocumentDTO> response = new ArrayList<>(); List<Map.Entry<Integer, Double>> results; BM25 bm25;  // Check if JSON objects are used as documents if (!usedDocuments.isEmpty()) {  List<String> concatenatedTexts = new ArrayList<>(); Gson gson = new Gson();  for (String jsonStr : usedDocumentStrings) { if (isValidJson(jsonStr)) { convertJsonToListOfStrings(jsonStr, gson, concatenatedTexts); } else { concatenatedTexts.add(jsonStr); } }  bm25 = new BM25(concatenatedTexts); } else { bm25 = new BM25(usedDocumentStrings); }  results = bm25.search(query); LOGGER.debug("BM25 search results: {}", results);  convertToDocumentDTOList(usedDocuments, results, response);  return response; }
[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertTrue ( ( ( java. lang. String ) ( talks. get ( 0 ) ) ) )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertFalse ( java. util. Arrays. asList ( talks ). contains ( ""Oracle"" ) )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( rendered )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertFalse ( org. apache. commons. lang3. StringUtils. contains ( Oracle ) )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertFalse ( java. util. Arrays. asList ( talks ). contains ( ""Oracle"" ) )

************************************
************************************
[+] input: reRank_json_and_text() { List<String> talks = List.of( "{"title": "Java 21", "speakers": [{"fullName": "Brian Goetz", "company": "Oracle"}]}", "The ticket price for Devoxx Belgium is...", "{"title": "IntelliJ Super Productivity in 45 Minutes", "speakers": [{"fullName": "Heinz Kabutz", "company": "JavaSpecialists.eu"}]}", "{"title": "Quarkus Community BOF - Devoxx.be Edition", "speakers": [{"fullName": "Dimitris Andreadis", "company": "Red Hat"}]}", "{"title": "Developer Unproductivity Horror Stories", "speakers": [{"fullName": "Trisha Gee", "company": "Gradle"}, {"fullName": "Helen Scott", "company": "JetBrains"}]}" );  ReRankService reRankService = new ReRankService(); List<DocumentDTO> usedDocuments = new ArrayList<>();  talks.forEach(talk -> usedDocuments.add(DocumentDTO.builder() .id("1") .text(talk) .docType(DocumentType.CONTENT) .build()));  List<DocumentDTO> reRankDocuments = reRankService.reRankDocuments("Brian Goetz and ticket price", usedDocuments); "<AssertPlaceHolder>"; }
reRankDocuments(String query, List<DocumentDTO> usedDocuments) {  List<String> usedDocumentStrings = usedDocuments.stream() .map(DocumentDTO::getText) .toList();  List<DocumentDTO> response = new ArrayList<>(); List<Map.Entry<Integer, Double>> results; BM25 bm25;  // Check if JSON objects are used as documents if (!usedDocuments.isEmpty()) {  List<String> concatenatedTexts = new ArrayList<>(); Gson gson = new Gson();  for (String jsonStr : usedDocumentStrings) { if (isValidJson(jsonStr)) { convertJsonToListOfStrings(jsonStr, gson, concatenatedTexts); } else { concatenatedTexts.add(jsonStr); } }  bm25 = new BM25(concatenatedTexts); } else { bm25 = new BM25(usedDocumentStrings); }  results = bm25.search(query); LOGGER.debug("BM25 search results: {}", results);  convertToDocumentDTOList(usedDocuments, results, response);  return response; }
[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( reRankDocuments )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( reRankDocuments )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertFalse ( reRankDocuments. isEmpty ( ) )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org. junit. Assert. assertFalse ( reRankDocuments. contains ( null ) )

[*] target: assertThat(reRankDocuments).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: usersToUserDTOsShouldMapOnlyNonNullUsers() { List<User> users = new ArrayList<>(); users.add(user); users.add(null);  List<UserDTO> userDTOS = userMapper.usersToUserDTOs(users);  "<AssertPlaceHolder>"; }
usersToUserDTOs(List<User> users) { return users.stream() .filter(Objects::nonNull) .map(this::userToUserDTO) .toList(); }
[*] target: assertThat(userDTOS) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Collections. singletonList ( 1 ), userDTOS )

[*] target: assertThat(userDTOS) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Arrays. asList ( 1 ), userDTOS )

[*] target: assertThat(userDTOS) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Collections. emptyList ( ), userDTOS )

[*] target: assertThat(userDTOS) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertTrue ( userDTOS. isEmpty ( ) )

[*] target: assertThat(userDTOS) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org

************************************
************************************
[+] input: userDTOsToUsersShouldMapOnlyNonNullUsers() { List<UserDTO> usersDto = new ArrayList<>(); usersDto.add(userDto); usersDto.add(null);  List<User> users = userMapper.userDTOsToUsers(usersDto);  "<AssertPlaceHolder>"; }
userDTOsToUsers(List<UserDTO> userDTOs) { return userDTOs.stream() .filter(Objects::nonNull) .map(this::userDTOToUser) .toList(); }
[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Collections. singletonList ( 1 ), users )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Long. valueOf ( 2 ), users. size ( ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertEquals ( java. lang. Integer. valueOf ( 2 ), users. size ( ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertNotNull ( users )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org

************************************
************************************
[+] input: userDTOsToUsersWithAuthoritiesStringShouldMapToUsersWithAuthoritiesDomain() { Set<String> authoritiesAsString = new HashSet<>(); authoritiesAsString.add("ADMIN"); userDto.setAuthorities(authoritiesAsString);  List<UserDTO> usersDto = new ArrayList<>(); usersDto.add(userDto);  List<User> users = userMapper.userDTOsToUsers(usersDto);  "<AssertPlaceHolder>";  assertThat(users.getFirst().getAuthorities()).isNotNull(); assertThat(users.getFirst().getAuthorities()).isNotEmpty(); assertThat(users.getFirst().getAuthorities().iterator().next().getName()).isEqualTo("ADMIN"); }
userDTOsToUsers(List<UserDTO> userDTOs) { return userDTOs.stream() .filter(Objects::nonNull) .map(this::userDTOToUser) .toList(); }
[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. size ( ), org. hamcrest. CoreMatchers. equalTo ( 0 ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. isEmpty ( ) )

************************************
************************************
[+] input: userDTOsToUsersMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() { userDto.setAuthorities(null);  List<UserDTO> usersDto = new ArrayList<>(); usersDto.add(userDto);  List<User> users = userMapper.userDTOsToUsers(usersDto);  "<AssertPlaceHolder>";  assertThat(users.getFirst().getAuthorities()).isNotNull(); assertThat(users.getFirst().getAuthorities()).isEmpty(); }
userDTOsToUsers(List<UserDTO> userDTOs) { return userDTOs.stream() .filter(Objects::nonNull) .map(this::userDTOToUser) .toList(); }
[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. isEmpty ( ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users. get ( 0 ) )

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org. junit. Assert. assertThat ( users

[*] target: assertThat(users) .isNotEmpty() .size().isEqualTo(1)
[-] pred:  org

************************************
************************************
[+] input: userDTOToUserMapWithAuthoritiesStringShouldReturnUserWithAuthorities() { Set<String> authoritiesAsString = new HashSet<>(); authoritiesAsString.add("ADMIN"); userDto.setAuthorities(authoritiesAsString);  User user = userMapper.userDTOToUser(userDto);  "<AssertPlaceHolder>"; assertThat(user.getAuthorities()).isNotNull(); assertThat(user.getAuthorities()).isNotEmpty(); assertThat(user.getAuthorities().iterator().next().getName()).isEqualTo("ADMIN"); }
userDTOToUser(UserDTO userDTO) { if (userDTO == null) { return null; } else { User user = new User(); user.setId(userDTO.getId()); user.setLogin(userDTO.getLogin()); user.setFirstName(userDTO.getFirstName()); user.setLastName(userDTO.getLastName()); user.setEmail(userDTO.getEmail()); user.setImageUrl(userDTO.getImageUrl()); user.setActivated(userDTO.isActivated()); Set<Authority> authorities = authoritiesFromStrings(userDTO.getAuthorities()); user.setAuthorities(authorities); return user; } }
[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user. userDTO )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user. METHODAuthorities ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user. METHODAuthorities ( ) )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertNotNull ( user )

[*] target: assertThat(user).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: userDTOToUserMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() { userDto.setAuthorities(null);  User user = userMapper.userDTOToUser(userDto);  "<AssertPlaceHolder>"; assertThat(user.getAuthorities()).isNotNull(); assertThat(user.getAuthorities()).isEmpty(); }
userDTOToUser(UserDTO userDTO) { if (userDTO == null) { return null; } else { User user = new User(); user.setId(userDTO.getId()); user.setLogin(userDTO.getLogin()); user.setFirstName(userDTO.getFirstName()); user.setLastName(userDTO.getLastName()); user.setEmail(userDTO.getEmail()); user.setImageUrl(userDTO.getImageUrl()); user.setActivated(userDTO.isActivated()); Set<Authority> authorities = authoritiesFromStrings(userDTO.getAuthorities()); user.setAuthorities(authorities); return user; } }
[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( user )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user. userDTOToUser(userDTO )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertNull ( user )

[*] target: assertThat(user).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( user. null )

************************************
************************************
[+] input: userDTOToUserMapWithNullUserShouldReturnNull() { "<AssertPlaceHolder>"; }
userDTOToUser(UserDTO userDTO) { if (userDTO == null) { return null; } else { User user = new User(); user.setId(userDTO.getId()); user.setLogin(userDTO.getLogin()); user.setFirstName(userDTO.getFirstName()); user.setLastName(userDTO.getLastName()); user.setEmail(userDTO.getEmail()); user.setImageUrl(userDTO.getImageUrl()); user.setActivated(userDTO.isActivated()); Set<Authority> authorities = authoritiesFromStrings(userDTO.getAuthorities()); user.setAuthorities(authorities); return user; } }
[*] target: assertThat(userMapper.userDTOToUser(null)).isNull()
[-] pred:  org. junit. Assert. assertNull ( provider. userDTOToUser(UserDTO userDTO )

[*] target: assertThat(userMapper.userDTOToUser(null)).isNull()
[-] pred:  org. junit. Assert. assertNull ( user. userDTOToUser(UserDTO userDTO )

[*] target: assertThat(userMapper.userDTOToUser(null)).isNull()
[-] pred:  org. junit. Assert. assertNull ( provider. userDTOToUser(UserDTO userDTO) )

[*] target: assertThat(userMapper.userDTOToUser(null)).isNull()
[-] pred:  org. junit. Assert. assertNull ( provider. userDTOToUser(UserDTO userDTO) { }

[*] target: assertThat(userMapper.userDTOToUser(null)).isNull()
[-] pred:  org. junit. Assert. assertNull ( user. userDTOToUser(UserDTO userDTO) { }

************************************
************************************
[+] input: userFromId() { assertThat(userMapper.userFromId(DEFAULT_ID).getId()).isEqualTo(DEFAULT_ID); "<AssertPlaceHolder>"; }
userFromId(Long id) { if (id == null) { return null; } User user = new User(); user.setId(id); return user; }
[*] target: assertThat(userMapper.userFromId(null)).isNull()
[-] pred:  org. junit. Assert. assertThat ( userMapper. userFromId(Long id) { if ( id == null ) { return null ; } } }

[*] target: assertThat(userMapper.userFromId(null)).isNull()
[-] pred:  org. junit. Assert. assertThat ( userMapper. userFromId(Long id), org. hamcrest. CoreMatchers. is ( null ) )

[*] target: assertThat(userMapper.userFromId(null)).isNull()
[-] pred:  org. junit. Assert. assertThat ( userMapper. userFromId(Long id) { if ( v == null ) { return null ; } } }

[*] target: assertThat(userMapper.userFromId(null)).isNull()
[-] pred:  org. junit. Assert. assertNotNull ( user. userFromId(Long id )

[*] target: assertThat(userMapper.userFromId(null)).isNull()
[-] pred:  org

************************************
************************************
[+] input: testBM25_ILoveJava() { List<String> corpus = List.of( "I love programming", "Java is my favorite programming language", "I enjoy writing code in Java", "Java is another popular programming language", "I find programming fascinating", "I love Java", "I prefer Java over Python" );  BM25 bm25 = new BM25(corpus);  List<Map.Entry<Integer, Double>> results = bm25.search("I love java");  for (Map.Entry<Integer, Double> entry : results) { System.out.println("Sentence " + entry.getKey() + " : Score = " + entry.getValue() + " - [" + corpus.get(entry.getKey()) + "]"); }  "<AssertPlaceHolder>"; assertThat(results.size()).isEqualTo(corpus.size()); assertThat(results.getFirst().getKey()).isEqualTo(5);  assertThat(results.getFirst().getValue()).isGreaterThan(1.8); }
search(String query) { if (query == null || query.isEmpty()) { throw new IllegalArgumentException("Query must not be null and must contain at least one term."); }  List<String> queryTerms = Arrays.stream(SPACE_PATTERN.split(query.toLowerCase())) .filter(term -> !stopWords.contains(term))  // Filter out stop words .map(stemmer::stem)                         // Stem the query terms .toList();  return IntStream.range(0, corpus.size()) .boxed() .map(docIndex -> Map.entry(docIndex, calculateDocumentScore(docIndex, queryTerms))) .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed()) .toList(); }
[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. document ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. class ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. attribute ( 0 ), org. hamcrest. CoreMatchers. is ( 6 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. search ( 0 ), org. hamcrest. CoreMatchers. is ( 200 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. attribute ( 0 ), org. hamcrest. CoreMatchers. is ( 5 ) )

************************************
************************************
[+] input: testBM25_PythonProgramming() { List<String> corpus = List.of( "I love programming", "Java is my favorite programming language", "I enjoy writing code in Java", "Java is another popular programming language", "I find programming fascinating", "I love Java", "I prefer Java over Python" );  BM25 bm25 = new BM25(corpus);  List<Map.Entry<Integer, Double>> results = bm25.search("Python programming"); for (Map.Entry<Integer, Double> entry : results) { System.out.println("Sentence " + entry.getKey() + " : Score = " + entry.getValue() + " - [" + corpus.get(entry.getKey()) + "]"); }  "<AssertPlaceHolder>"; assertThat(results.size()).isEqualTo(corpus.size());  assertThat(results.getFirst().getKey()).isEqualTo(6); assertThat(results.getLast().getKey()).isEqualTo(5);  assertThat(results.getFirst().getValue()).isGreaterThan(1.5); assertThat(results.getLast().getValue()).isEqualTo(0.0); }
search(String query) { if (query == null || query.isEmpty()) { throw new IllegalArgumentException("Query must not be null and must contain at least one term."); }  List<String> queryTerms = Arrays.stream(SPACE_PATTERN.split(query.toLowerCase())) .filter(term -> !stopWords.contains(term))  // Filter out stop words .map(stemmer::stem)                         // Stem the query terms .toList();  return IntStream.range(0, corpus.size()) .boxed() .map(docIndex -> Map.entry(docIndex, calculateDocumentScore(docIndex, queryTerms))) .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed()) .toList(); }
[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. corpus ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. corpus ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. document ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. n ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: testBM25_withEnglishStopWords() { List<String> corpus = List.of( "I love programming", "Java is my favorite programming language", "I enjoy writing code in Java", "Java is another popular programming language", "I find programming fascinating", "I love Java", "I prefer Java over Python" );  BM25 bm25 = new BM25(corpus, StopWords.ENGLISH);  List<Map.Entry<Integer, Double>> results = bm25.search("Python programming"); for (Map.Entry<Integer, Double> entry : results) { System.out.println("Sentence " + entry.getKey() + " : Score = " + entry.getValue() + " - [" + corpus.get(entry.getKey()) + "]"); }  "<AssertPlaceHolder>"; assertThat(results.size()).isEqualTo(corpus.size());  assertThat(results.getFirst().getKey()).isEqualTo(6); assertThat(results.getLast().getKey()).isEqualTo(5);  assertThat(results.getFirst().getValue()).isGreaterThan(1.5); assertThat(results.getLast().getValue()).isEqualTo(0.0); }
search(String query) { if (query == null || query.isEmpty()) { throw new IllegalArgumentException("Query must not be null and must contain at least one term."); }  List<String> queryTerms = Arrays.stream(SPACE_PATTERN.split(query.toLowerCase())) .filter(term -> !stopWords.contains(term))  // Filter out stop words .map(stemmer::stem)                         // Stem the query terms .toList();  return IntStream.range(0, corpus.size()) .boxed() .map(docIndex -> Map.entry(docIndex, calculateDocumentScore(docIndex, queryTerms))) .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed()) .toList(); }
[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. attribute ( 0 ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. trim ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. get ( 0 ), org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. document ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org

************************************
************************************
[+] input: testBM25_withEnglishStopWords_and_Stemmer() { List<String> corpus = List.of( "I love programming", "Java is my favorite programming language", "I enjoy writing code in Java", "Java is another popular programming language", "I find programming fascinating", "I love Java", "I prefer Java over Python" );  BM25 bm25 = new BM25(corpus, StopWords.ENGLISH, new EnglishStemmer());  List<Map.Entry<Integer, Double>> results = bm25.search("I love Java programming"); for (Map.Entry<Integer, Double> entry : results) { System.out.println("Sentence " + entry.getKey() + " : Score = " + entry.getValue() + " - [" + corpus.get(entry.getKey()) + "]"); }  "<AssertPlaceHolder>"; assertThat(results.size()).isEqualTo(corpus.size());  assertThat(results.getFirst().getKey()).isEqualTo(0); assertThat(results.getLast().getKey()).isEqualTo(2);  assertThat(results.getFirst().getValue()).isGreaterThan(2.0); }
search(String query) { if (query == null || query.isEmpty()) { throw new IllegalArgumentException("Query must not be null and must contain at least one term."); }  List<String> queryTerms = Arrays.stream(SPACE_PATTERN.split(query.toLowerCase())) .filter(term -> !stopWords.contains(term))  // Filter out stop words .map(stemmer::stem)                         // Stem the query terms .toList();  return IntStream.range(0, corpus.size()) .boxed() .map(docIndex -> Map.entry(docIndex, calculateDocumentScore(docIndex, queryTerms))) .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed()) .toList(); }
[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. document ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String > 0 ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. n ), org. hamcrest. CoreMatchers. is ( 20 ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String > 0 ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(results).isNotNull()
[-] pred:  org. junit. Assert. assertThat ( results. search(String. n ), org. hamcrest. CoreMatchers. is ( 20 ) )

************************************
************************************
[+] input: test_EnglishStemmer() { EnglishStemmer englishStemmer = new EnglishStemmer(); String[] words = {"running", "ran", "run", "runner", "runs"}; String[] expectedWords = {"run", "ran", "run", "runner", "run"}; int index = 0; for (String word : words) { String stemmedWord = englishStemmer.stem(word); "<AssertPlaceHolder>"; } }
stem(String word) { instance.setCurrent(word); if (instance.stem()) { return instance.getCurrent(); } else { return word; } }
[*] target: assertThat(stemmedWord).isEqualTo(expectedWords[index++])
[-] pred:  org. junit. Assert. assertEquals ( stemmedWord, expectedWords )

[*] target: assertThat(stemmedWord).isEqualTo(expectedWords[index++])
[-] pred:  org. junit. Assert. assertEquals ( stemmedWord, expectedWords. trim ( index ) )

[*] target: assertThat(stemmedWord).isEqualTo(expectedWords[index++])
[-] pred:  org. junit. Assert. assertEquals ( stemmedWord, expectedWords. stem ( word ) )

[*] target: assertThat(stemmedWord).isEqualTo(expectedWords[index++])
[-] pred:  org. junit. Assert. assertEquals ( word, stemmedWord )

[*] target: assertThat(stemmedWord).isEqualTo(expectedWords[index++])
[-] pred:  org. junit. Assert. assertEquals ( word, expectedWords )

************************************
************************************
[+] input: findAllProducts_FilterIsNotSet_ReturnsProductsList() { // given var products = IntStream.range(1, 4) .mapToObj(i -> new Product(i, "Товар №%d".formatted(i), "Описание товара №%d".formatted(i))) .toList();  doReturn(products).when(this.productRepository).findAll();  // when var result = this.service.findAllProducts(null);  // then "<AssertPlaceHolder>";  verify(this.productRepository).findAll(); verifyNoMoreInteractions(this.productRepository); }
findAllProducts(String filter) { if (filter != null && !filter.isBlank()) { return this.productRepository.findAllByTitleLikeIgnoreCase("%" + filter + "%"); } else { return this.productRepository.findAll(); } }
[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products. findAllProducts ( ), result )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products, result. findAllProducts ( ) )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products, result. findAllProducts ( java. util. Arrays. asList ( products ) ) )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products. findAllProducts ( java. util. Arrays. asList ( result ) ), products )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products, result. findAllProducts ( java. util. Arrays. asList ( product ) ) )

************************************
************************************
[+] input: findAllProducts_FilterIsSet_ReturnsFilteredProductsList() { // given var products = IntStream.range(1, 4) .mapToObj(i -> new Product(i, "Товар №%d".formatted(i), "Описание товара №%d".formatted(i))) .toList();  doReturn(products).when(this.productRepository).findAllByTitleLikeIgnoreCase("%товар%");  // when var result = this.service.findAllProducts("товар");  // then "<AssertPlaceHolder>";  verify(this.productRepository).findAllByTitleLikeIgnoreCase("%товар%"); verifyNoMoreInteractions(this.productRepository); }
findAllProducts(String filter) { if (filter != null && !filter.isBlank()) { return this.productRepository.findAllByTitleLikeIgnoreCase("%" + filter + "%"); } else { return this.productRepository.findAll(); } }
[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products, result. findAllProducts ( ) )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products. findAllProducts ( ), result )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products. size ( ), result. findAllProducts ( ). size ( ) )

[*] target: assertEquals(products, result)
[-] pred:  org. junit. Assert. assertEquals ( products, result )

[*] target: assertEquals(products, result)
[-] pred:  org

************************************
************************************
[+] input: findProduct_ProductExists_ReturnsNotEmptyOptional() { // given var product = new Product(1, "Товар №1", "Описание товара №1");  doReturn(Optional.of(product)).when(this.productRepository).findById(1);  // when var result = this.service.findProduct(1);  // then "<AssertPlaceHolder>"; assertTrue(result.isPresent()); assertEquals(product, result.orElseThrow());  verify(this.productRepository).findById(1); verifyNoMoreInteractions(this.productRepository); }
findProduct(int productId) { return this.productRepository.findById(productId); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertFalse ( result. findProduct(int productId) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId) ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: findProduct_ProductDoesNotExist_ReturnsEmptyOptional() { // given var product = new Product(1, "Товар №1", "Описание товара №1");  // when var result = this.service.findProduct(1);  // then "<AssertPlaceHolder>"; assertTrue(result.isEmpty());  verify(this.productRepository).findById(1); verifyNoMoreInteractions(this.productRepository); }
findProduct(int productId) { return this.productRepository.findById(productId); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( product. findProduct(int productId) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( this. findProduct(int productId) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findProduct(int productId_2 )

************************************
************************************
[+] input: createProduct_ReturnsCreatedProduct() { // given var title = "Новый товар"; var details = "Описание нового товара";  doReturn(new Product(1, "Новый товар", "Описание нового товара")) .when(this.productRepository).save(new Product(null, "Новый товар", "Описание нового товара"));  // when var result = this.service.createProduct(title, details);  // then "<AssertPlaceHolder>";  verify(this.productRepository).save(new Product(null, "Новый товар", "Описание нового товара")); verifyNoMoreInteractions(this.productRepository); }
createProduct(String title, String details) { return this.productRepository.save(new Product(null, title, details)); }
[*] target: assertEquals(new Product(1, "Новый товар", "Описание нового товара"), result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(new Product(1, "Новый товар", "Описание нового товара"), result)
[-] pred:  org. junit. Assert. assertEquals ( 0, result. length ( ) )

[*] target: assertEquals(new Product(1, "Новый товар", "Описание нового товара"), result)
[-] pred:  org. junit. Assert. assertEquals ( 0, result. createProduct ( 0 ) )

[*] target: assertEquals(new Product(1, "Новый товар", "Описание нового товара"), result)
[-] pred:  org. junit. Assert. assertTrue ( ( var!= null ) )

[*] target: assertEquals(new Product(1, "Новый товар", "Описание нового товара"), result)
[-] pred:  org

************************************
************************************
[+] input: getProductsListPage_ReturnsProductsListPage() { // given var model = new ConcurrentModel();  doReturn(Flux.fromIterable(List.of( new Product(1, "Отфильтрованный товар №1", "Описание отфильтрованного товара №1"), new Product(2, "Отфильтрованный товар №2", "Описание отфильтрованного товара №2"), new Product(3, "Отфильтрованный товар №3", "Описание отфильтрованного товара №3") ))).when(this.productsClient).findAllProducts("фильтр");  // when StepVerifier.create(this.controller.getProductsListPage(model, "фильтр")) // then .expectNext("customer/products/list") .verifyComplete();  "<AssertPlaceHolder>"; assertEquals(List.of( new Product(1, "Отфильтрованный товар №1", "Описание отфильтрованного товара №1"), new Product(2, "Отфильтрованный товар №2", "Описание отфильтрованного товара №2"), new Product(3, "Отфильтрованный товар №3", "Описание отфильтрованного товара №3")), model.getAttribute("products"));  verify(this.productsClient).findAllProducts("фильтр"); verifyNoMoreInteractions(this.productsClient); verifyNoInteractions(this.favouriteProductsClient); }
getProductsListPage(Model model, @RequestParam(name = "filter", required = false) String filter) { model.addAttribute("filter", filter); return this.productsClient.findAllProducts(filter) .collectList() .doOnNext(products -> model.addAttribute("products", products)) .thenReturn("customer/products/list"); }
[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model, org. hamcrest. CoreMatchers. is ( model ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model, org. hamcrest. CoreMatchers. is ( 100 ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model, org. hamcrest. CoreMatchers. is ( 50 ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertNotNull ( model )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org

************************************
************************************
[+] input: getFavouriteProductsPage_ReturnsFavouriteProductsPage() { // given var model = new ConcurrentModel();  doReturn(Flux.fromIterable(List.of( new Product(1, "Отфильтрованный товар №1", "Описание отфильтрованного товара №1"), new Product(2, "Отфильтрованный товар №2", "Описание отфильтрованного товара №2"), new Product(3, "Отфильтрованный товар №3", "Описание отфильтрованного товара №3") ))).when(this.productsClient).findAllProducts("фильтр");  doReturn(Flux.fromIterable(List.of( new FavouriteProduct(UUID.fromString("a16f0218-cbaf-11ee-9e6c-6b0fa3631587"), 1), new FavouriteProduct(UUID.fromString("a42ff37c-cbaf-11ee-8b1d-cb00912914b5"), 3) ))).when(this.favouriteProductsClient).findFavouriteProducts();  // when StepVerifier.create(this.controller.getFavouriteProductsPage(model, "фильтр")) // then .expectNext("customer/products/favourites") .verifyComplete();  "<AssertPlaceHolder>"; assertEquals(List.of( new Product(1, "Отфильтрованный товар №1", "Описание отфильтрованного товара №1"), new Product(3, "Отфильтрованный товар №3", "Описание отфильтрованного товара №3")), model.getAttribute("products"));  verify(this.productsClient).findAllProducts("фильтр"); verify(this.favouriteProductsClient).findFavouriteProducts(); verifyNoMoreInteractions(this.productsClient, this.favouriteProductsClient);  }
getFavouriteProductsPage(Model model, @RequestParam(name = "filter", required = false) String filter) { model.addAttribute("filter", filter); return this.favouriteProductsClient.findFavouriteProducts() .map(FavouriteProduct::productId) .collectList() .flatMap(favouriteProducts -> this.productsClient.findAllProducts(filter) .filter(product -> favouriteProducts.contains(product.id())) .collectList() .doOnNext(products -> model.addAttribute("products", products))) .thenReturn("customer/products/favourites"); }
[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model. size ( ), org. hamcrest. CoreMatchers. is ( 3 ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model, org. hamcrest. CoreMatchers. is ( model ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertThat ( model. size ( ), org. hamcrest. CoreMatchers. is ( 20 ) )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org. junit. Assert. assertNotNull ( model )

[*] target: assertEquals("фильтр", model.getAttribute("filter"))
[-] pred:  org

************************************
************************************
[+] input: product_ProductExists_ReturnsProduct() { // given var product = new Product(1, "Товар №1", "Описание товара №1");  doReturn(Optional.of(product)).when(this.productsRestClient).findProduct(1);  // when var result = this.controller.product(1);  // then "<AssertPlaceHolder>";  verify(this.productsRestClient).findProduct(1); verifyNoMoreInteractions(this.productsRestClient); }
product(@PathVariable("productId") int productId) { return this.productsRestClient.findProduct(productId) .orElseThrow(() -> new NoSuchElementException("catalogue.errors.product.not_found")); }
[*] target: assertEquals(product, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( product ) )

[*] target: assertEquals(product, result)
[-] pred:  org. junit. Assert. assertEquals ( product, result )

[*] target: assertEquals(product, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( product ) )

[*] target: assertEquals(product, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. equalTo ( product ) )

[*] target: assertEquals(product, result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is (product ) )

************************************
************************************
[+] input: getProduct_ReturnsProductPage() { // given  // when var result = this.controller.getProduct();  // then "<AssertPlaceHolder>";  verifyNoInteractions(this.productsRestClient); }
getProduct() { return "catalogue/products/product"; }
[*] target: assertEquals("catalogue/products/product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProduct() ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertEquals("catalogue/products/product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProduct() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("catalogue/products/product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProduct() ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertEquals("catalogue/products/product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProduct() ( ), org. hamcrest. CoreMatchers. is ( 1.0 ) )

[*] target: assertEquals("catalogue/products/product", result)
[-] pred:  org. junit. Assert. assertEquals ( ""catalogue/product";"", result. getProduct() ) )

************************************
************************************
[+] input: getProductEditPage_ReturnsProductEditPage() { // given  // when var result = this.controller.getProductEditPage();  // then "<AssertPlaceHolder>";  verifyNoInteractions(this.productsRestClient); }
getProductEditPage() { return "catalogue/products/edit"; }
[*] target: assertEquals("catalogue/products/edit", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProductEditPage() ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertEquals("catalogue/products/edit", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProductEditPage() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("catalogue/products/edit", result)
[-] pred:  org. junit. Assert. assertThat ( result. getProductEditPage() ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertEquals("catalogue/products/edit", result)
[-] pred:  org. junit. Assert. assertSame ( this. getProductEditPage(), result )

[*] target: assertEquals("catalogue/products/edit", result)
[-] pred:  org. junit. Assert. assertNotNull ( result. getProductEditPage() ( ) )

************************************
************************************
[+] input: handleNoSuchElementException_Returns404ErrorPage() { // given var exception = new NoSuchElementException("error"); var model = new ConcurrentModel(); var response = new MockHttpServletResponse(); var locale = Locale.of("ru");  doReturn("Ошибка").when(this.messageSource) .getMessage("error", new Object[0], "error", Locale.of("ru"));  // when var result = this.controller.handleNoSuchElementException(exception, model, response, locale);  // then "<AssertPlaceHolder>"; assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatus());  verify(this.messageSource).getMessage("error", new Object[0], "error", Locale.of("ru")); verifyNoMoreInteractions(this.messageSource); verifyNoInteractions(this.productsRestClient); }
handleNoSuchElementException(NoSuchElementException exception, Model model, HttpServletResponse response, Locale locale) { response.setStatus(HttpStatus.NOT_FOUND.value()); model.addAttribute("error", this.messageSource.getMessage(exception.getMessage(), new Object[0], exception.getMessage(), locale)); return "errors/404"; }
[*] target: assertEquals("errors/404",  result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("errors/404",  result)
[-] pred:  org. junit. Assert. assertEquals ( error, result )

[*] target: assertEquals("errors/404",  result)
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("errors/404",  result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("errors/404",  result)
[-] pred:  , result )

************************************
************************************
[+] input: getProductsList_ReturnsProductsListPage() { // given var model = new ConcurrentModel(); var filter = "товар";  var products = IntStream.range(1, 4) .mapToObj(i -> new Product(i, "Товар №%d".formatted(i), "Описание товара №%d".formatted(i))) .toList();  doReturn(products).when(this.productsRestClient).findAllProducts(filter);  // when var result = this.controller.getProductsList(model, filter);  // then "<AssertPlaceHolder>"; assertEquals(filter, model.getAttribute("filter")); assertEquals(products, model.getAttribute("products")); }
getProductsList(Model model, @RequestParam(name = "filter", required = false) String filter) { model.addAttribute("products", this.productsRestClient.findAllProducts(filter)); model.addAttribute("filter", filter); return "catalogue/products/list"; }
[*] target: assertEquals("catalogue/products/list", result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("catalogue/products/list", result)
[-] pred:  org. junit. Assert. assertEquals ( products, result )

[*] target: assertEquals("catalogue/products/list", result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("catalogue/products/list", result)
[-] pred:  org. junit. Assert. assertSame ( products, result )

[*] target: assertEquals("catalogue/products/list", result)
[-] pred:  org

************************************
************************************
[+] input: () { // given  // when var result = this.controller.getNewProductPage();  // then "<AssertPlaceHolder>"; }
getNewProductPage() { return "catalogue/products/new_product"; }
[*] target: assertEquals("catalogue/products/new_product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getNewProductPage() ( ), org. hamcrest. CoreMatchers. is ( 50 ) )

[*] target: assertEquals("catalogue/products/new_product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getNewProductPage() ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertEquals("catalogue/products/new_product", result)
[-] pred:  org. junit. Assert. assertThat ( result. getNewProductPage() ( ), org. hamcrest. CoreMatchers. is ( 4 ) )

[*] target: assertEquals("catalogue/products/new_product", result)
[-] pred:  org. junit. Assert. assertEquals ( 50, result. getNewProductPage() ( ) )

[*] target: assertEquals("catalogue/products/new_product", result)
[-] pred:  org. junit. Assert. assertEquals ( 4, result. getNewProductPage() ( ) )

************************************
************************************
[+] input: IOException { // given var request = new MockClientHttpRequest(); var body = new byte[0]; var execution = mock(ClientHttpRequestExecution.class); var response = new MockClientHttpResponse(); var authentication = new TestingAuthenticationToken("j.dewar", "password"); SecurityContextHolder.getContext().setAuthentication(authentication);  var authorizedClient = new OAuth2AuthorizedClient(mock(), "j.dewar", new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, "token", Instant.now(), Instant.MAX)); doReturn(authorizedClient).when(this.authorizedClientManager) .authorize(argThat(authorizationRequest -> authorizationRequest.getPrincipal().equals(authentication) && authorizationRequest.getClientRegistrationId().equals("test")));  doReturn(response).when(execution).execute(request, body);  // when var result = this.interceptor.intercept(request, body, execution);  // then "<AssertPlaceHolder>"; assertEquals("Bearer token", request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION));  verify(execution).execute(request, body); verifyNoMoreInteractions(execution); }
intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { if (!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) { OAuth2AuthorizedClient authorizedClient = this.authorizedClientManager.authorize( OAuth2AuthorizeRequest.withClientRegistrationId(this.registrationId) .principal(this.securityContextHolderStrategy.getContext().getAuthentication()) .build()); request.getHeaders().setBearerAuth(authorizedClient.getAccessToken().getTokenValue()); }  return execution.execute(request, body); }
[*] target: assertEquals(response, result)
[-] pred:  org. junit. Assert. assertEquals ( response, result )

[*] target: assertEquals(response, result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(response, result)
[-] pred:  org. junit. Assert. assertSame ( response, result )

[*] target: assertEquals(response, result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(response, result)
[-] pred:  org

************************************
************************************
[+] input: loadBeansTest() { Assertions.assertEquals(false, beanContainer.isLoaded()); beanContainer.loadBeans("com.enndfp.demo"); Assertions.assertEquals(7, beanContainer.size()); Assertions."<AssertPlaceHolder>"; }
isLoaded() { return loaded; }
[*] target: assertEquals(true, beanContainer.isLoaded())
[-] pred:  org. junit. Assert. assertFalse ( builder. isLoaded() ( ) )

[*] target: assertEquals(true, beanContainer.isLoaded())
[-] pred:  org. junit. Assert. assertFalse ( beanContainer. isLoaded() )

[*] target: assertEquals(true, beanContainer.isLoaded())
[-] pred:  org. junit. Assert. assertFalse ( beanContainer. isLoaded() { }

[*] target: assertEquals(true, beanContainer.isLoaded())
[-] pred:  org. junit. Assert. assertFalse ( beanContainer. isLoaded() )

[*] target: assertEquals(true, beanContainer.isLoaded())
[-] pred:  )

************************************
************************************
[+] input: getBeanTest() { MainPageController controller = (MainPageController) beanContainer.getBean(MainPageController.class); Assertions.assertEquals(true, controller instanceof MainPageController); DispatcherServlet dispatcherServlet = (DispatcherServlet) beanContainer.getBean(DispatcherServlet.class); Assertions."<AssertPlaceHolder>"; }
getBean(Class<?> clazz) { return beanMap.get(clazz); }
[*] target: assertEquals(null, dispatcherServlet)
[-] pred:  org. junit. Assert. assertEquals ( dispatcherServlet. getBean(Class<?> clazz ), controller )

[*] target: assertEquals(null, dispatcherServlet)
[-] pred:  org. junit. Assert. assertTrue ( dispatcherServlet. getBean(Class<?> clazz ) )

[*] target: assertEquals(null, dispatcherServlet)
[-] pred:  org. junit. Assert. assertTrue ( dispatcherServlet. getBean(Class<?> clazz) )

[*] target: assertEquals(null, dispatcherServlet)
[-] pred:  org. junit. Assert. assertEquals ( dispatcherServlet. getBean(Class ), controller )

[*] target: assertEquals(null, dispatcherServlet)
[-] pred:  org

************************************
************************************
[+] input: getClassesByAnnotationTest() { Assertions.assertEquals(true, beanContainer.isLoaded()); Assertions."<AssertPlaceHolder>"; }
size() { return beanMap.size(); }
[*] target: assertEquals(3, beanContainer.getClassesByAnnotation(Controller.class).size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( beanContainer.is();. size() ) == 1 ) )

[*] target: assertEquals(3, beanContainer.getClassesByAnnotation(Controller.class).size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( beanContainer. size() ) == 1 ) )

[*] target: assertEquals(3, beanContainer.getClassesByAnnotation(Controller.class).size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( beanContainer.is getClasses size() ) == 1 ) )

[*] target: assertEquals(3, beanContainer.getClassesByAnnotation(Controller.class).size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( beanContainer.isRecordWriterRecordWriter. size() ) == 1 ) )

[*] target: assertEquals(3, beanContainer.getClassesByAnnotation(Controller.class).size())
[-] pred:  org. junit. Assert. assertTrue ( ( ( beanContainer.isRecordWriterRecordWriter. size() ) > 0 ) )

************************************
************************************
[+] input: getClassesBySuperTest() { Assertions.assertEquals(true, beanContainer.isLoaded()); Assertions."<AssertPlaceHolder>"; }
getClassesBySuper(Class<?> interfaceOrClass) { // 1. 获取beanMap的所有class对象 Set<Class<?>> keySet = getClasses(); if (ValidationUtil.isEmpty(keySet)) { log.warn("nothing in beanMap"); return null; }  // 2. 获取指定接口或父类的class对象，并添加到classSet中 Set<Class<?>> classSet = new HashSet<>(); for (Class<?> clazz : keySet) { if (interfaceOrClass.isAssignableFrom(clazz) && !clazz.equals(interfaceOrClass)) { classSet.add(clazz); } } return classSet.size() > 0 ? classSet : null; }
[*] target: assertEquals(true, beanContainer.getClassesBySuper(HeadLineService.class).contains(HeadLineServiceImpl.class))
[-] pred:  org. junit. Assert. assertTrue ( (! ( grid. getClassesBySuper(Class ) ) ) )

[*] target: assertEquals(true, beanContainer.getClassesBySuper(HeadLineService.class).contains(HeadLineServiceImpl.class))
[-] pred:  org. junit. Assert. assertTrue ( (! ( solution. getClassesBySuper(Class ) ) ) )

[*] target: assertEquals(true, beanContainer.getClassesBySuper(HeadLineService.class).contains(HeadLineServiceImpl.class))
[-] pred:  org. junit. Assert. assertTrue ( (! ( grid. getClassesBySuper(Class.<?>BySuper(Class ) ) ) )

[*] target: assertEquals(true, beanContainer.getClassesBySuper(HeadLineService.class).contains(HeadLineServiceImpl.class))
[-] pred:  org. junit. Assert. assertTrue ( (! ( buffer. getClassesBySuper(Class ) ) ) )

[*] target: assertEquals(true, beanContainer.getClassesBySuper(HeadLineService.class).contains(HeadLineServiceImpl.class))
[-] pred:  org. junit. Assert. assertTrue ( (! ( grid. getClassesBySuper(Class.<?>BySuper(Class } ) ) )

************************************
************************************
[+] input: doIOCTest() { BeanContainer beanContainer = BeanContainer.getInstance(); beanContainer.loadBeans("com.enndfp.demo"); Assertions.assertEquals(true,beanContainer.isLoaded()); MainPageController mainPageController = (MainPageController) beanContainer.getBean(MainPageController.class); Assertions.assertEquals(true, mainPageController instanceof MainPageController); Assertions.assertEquals(null,mainPageController.getHeadLineShopCategoryCombineService()); new DependencyInjector().doIOC(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(true,mainPageController.getHeadLineShopCategoryCombineService() instanceof HeadLineShopCategoryCombineServiceImpl); }
doIOC() { Set<Class<?>> classSet = beanContainer.getClasses(); if (ValidationUtil.isEmpty(classSet)) { log.warn("empty classSet in beanContainer"); return; } // 1. 遍历Bean容器中所有的Class对象 for (Class<?> clazz : classSet) { // 2. 遍历Class对象的所有成员变量 Field[] fields = clazz.getDeclaredFields(); if (ValidationUtil.isEmpty(fields)) { continue; } for (Field field : fields) { // 3. 找出被Autowired标记的成员变量 if (field.isAnnotationPresent(Autowired.class)) { Autowired autowired = field.getAnnotation(Autowired.class); String autowiredValue = autowired.value();  // 4. 获取这些变量的类型 Class<?> fieldClass = field.getType(); // 5. 根据类型在容器中找到对应的实例 Object fieldInstance = getFieldInstance(fieldClass, autowiredValue); if (fieldInstance == null) { throw new RuntimeException("unable to inject relevant type, target fieldClass is :" + fieldClass.getName() + "autowiredValue is " + autowiredValue); }  // 6. 通过反射将对应的成员变量实例注入到相应位置 Object targetBean = beanContainer.getBean(clazz); ClassUtil.setField(field, targetBean, fieldInstance, true); } } }  }
[*] target: assertNotEquals(null,mainPageController.getHeadLineShopCategoryCombineService())
[-] pred:  org. junit. Assert. assertNull ( mainPageController. doIOC() ( ) )

[*] target: assertNotEquals(null,mainPageController.getHeadLineShopCategoryCombineService())
[-] pred:  org. junit. Assert. assertTrue ( mainPageController. doIOC() ( ) )

[*] target: assertNotEquals(null,mainPageController.getHeadLineShopCategoryCombineService())
[-] pred:  org. junit. Assert. assertFalse ( mainPageController. doIOC() ( ) )

[*] target: assertNotEquals(null,mainPageController.getHeadLineShopCategoryCombineService())
[-] pred:  org. junit. Assert. assertNull ( mainPageController. doIOC() )

[*] target: assertNotEquals(null,mainPageController.getHeadLineShopCategoryCombineService())
[-] pred:  org

************************************
************************************
[+] input: extractPackageClassTest() { Set<Class<?>> classSet = ClassUtil.extractPackageClass("com.enndfp.demo.entity"); System.out.println(classSet); Assertions."<AssertPlaceHolder>"; }
extractPackageClass(String packageName) { // 1. 获取到类的加载器 ClassLoader classLoader = getClassLoader();  // 2. 通过类加载器获取到加载的资源信息 URL url = classLoader.getResource(packageName.replace(".", "/")); if (url == null) { log.warn("unable to retrieve anything from package: " + packageName); return null; }  // 3. 依据不同的资源类型，采用不同的方式获取资源的集合 Set<Class<?>> classSet = null; // 3.1 仅处理文件类型的资源 if (url.getProtocol().equalsIgnoreCase(FILE_PROTOCOL)) { classSet = new HashSet<>(); File packageDirectory = new File(url.getPath()); extractClassFile(classSet, packageDirectory, packageName); } return classSet; }
[*] target: assertEquals(4, classSet.size())
[-] pred:  org. junit. Assert. assertEquals ( new org.Class ( ), classSet )

[*] target: assertEquals(4, classSet.size())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, classSet )

[*] target: assertEquals(4, classSet.size())
[-] pred:  org. junit. Assert. assertEquals ( org.<?>_ classSet, classSet )

[*] target: assertEquals(4, classSet.size())
[-] pred:  org. junit. Assert. assertEquals ( org.<?>> class, classSet )

[*] target: assertEquals(4, classSet.size())
[-] pred:  org

************************************
************************************
[+] input: testUpdateWatchedNamespacesWithDynamicConfigEnabled() { MetricsSystem mockMetricsSystem = mock(MetricsSystem.class); KubernetesClient mockClient = mock(KubernetesClient.class); var registeredController = mock(RegisteredController.class); when(registeredController.allowsNamespaceChanges()).thenReturn(true); boolean dynamicConfigEnabled = SparkOperatorConf.DYNAMIC_CONFIG_ENABLED.getValue();  try (MockedStatic<MetricsSystemFactory> mockMetricsSystemFactory = mockStatic(MetricsSystemFactory.class); MockedStatic<KubernetesClientFactory> mockKubernetesClientFactory = mockStatic(KubernetesClientFactory.class); MockedStatic<Utils> mockUtils = mockStatic(Utils.class); MockedConstruction<Operator> operatorConstruction = mockConstruction( Operator.class, (mock, context) -> { when(mock.register(any(SparkAppReconciler.class), any(Consumer.class))) .thenReturn(registeredController); when(mock.register(any(SparkClusterReconciler.class), any(Consumer.class))) .thenReturn(registeredController); }); MockedConstruction<SparkAppReconciler> sparkAppReconcilerConstruction = mockConstruction(SparkAppReconciler.class); MockedConstruction<SparkOperatorConfigMapReconciler> configReconcilerConstruction = mockConstruction(SparkOperatorConfigMapReconciler.class); MockedConstruction<ProbeService> probeServiceConstruction = mockConstruction(ProbeService.class); MockedConstruction<MetricsService> metricsServiceConstruction = mockConstruction(MetricsService.class); MockedConstruction<KubernetesMetricsInterceptor> interceptorMockedConstruction = mockConstruction(KubernetesMetricsInterceptor.class)) { setConfigKey(SparkOperatorConf.DYNAMIC_CONFIG_ENABLED, true); mockMetricsSystemFactory .when(MetricsSystemFactory::createMetricsSystem) .thenReturn(mockMetricsSystem); mockKubernetesClientFactory .when(() -> KubernetesClientFactory.buildKubernetesClient(any())) .thenReturn(mockClient); mockUtils.when(Utils::getWatchedNamespaces).thenReturn(Collections.singleton("namespace-1")); SparkOperator sparkOperator = new SparkOperator(); Set<String> updatedNamespaces = Set.of("namespace-1", "namespace-2"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(updatedNamespaces, sparkOperator.watchedNamespaces); verify(registeredController).allowsNamespaceChanges(); verify(registeredController).changeNamespaces(updatedNamespaces); verifyNoMoreInteractions(registeredController); } finally { setConfigKey(SparkOperatorConf.DYNAMIC_CONFIG_ENABLED, dynamicConfigEnabled); } }
updateWatchingNamespaces(Set<String> namespaces) { if (watchedNamespaces.equals(namespaces)) { log.info("No watched namespace change detected"); return false; } if (watchedNamespaces.isEmpty()) { log.info("Cannot update watch namespaces for operator started at cluster level."); return false; } if (namespaces == null || namespaces.isEmpty()) { log.error("Cannot updating namespaces to empty"); return false; } registeredSparkControllers.forEach( c -> { if (c.allowsNamespaceChanges()) { log.info("Updating operator namespaces to {}", namespaces); c.changeNamespaces(namespaces); } else { log.error("Controller does not allow namespace change, skipping namespace change."); } }); this.watchedNamespaces = new HashSet<>(namespaces); return true; }
[*] target: assertTrue(sparkOperator.updateWatchingNamespaces(updatedNamespaces))
[-] pred:  org. junit. Assert. assertTrue ( sparkOperator. matches ( mockMetricsSystem ) )

[*] target: assertTrue(sparkOperator.updateWatchingNamespaces(updatedNamespaces))
[-] pred:  org. junit. Assert. assertTrue ( sparkOperator. isEquivalentToRecord ( ) )

[*] target: assertTrue(sparkOperator.updateWatchingNamespaces(updatedNamespaces))
[-] pred:  org. junit. Assert. assertTrue ( sparkOperator. isEquivalent ( memento memento ) )

[*] target: assertTrue(sparkOperator.updateWatchingNamespaces(updatedNamespaces))
[-] pred:  org

[*] target: assertTrue(sparkOperator.updateWatchingNamespaces(updatedNamespaces))
[-] pred:  )

************************************
************************************
[+] input: testResolveValueWithoutOverride() { byte defaultByteValue = 9; short defaultShortValue = 9; long defaultLongValue = 9; int defaultIntValue = 9; float defaultFloatValue = 9.0f; double defaultDoubleValue = 9.0; boolean defaultBooleanValue = false; String defaultStringValue = "bar"; ConfigOption<String> testStrConf = ConfigOption.<String>builder() .key("foo") .typeParameterClass(String.class) .description("foo foo.") .defaultValue(defaultStringValue) .build(); ConfigOption<Integer> testIntConf = ConfigOption.<Integer>builder() .key("fooint") .typeParameterClass(Integer.class) .description("foo foo.") .defaultValue(defaultIntValue) .build(); ConfigOption<Short> testShortConf = ConfigOption.<Short>builder() .key("fooshort") .typeParameterClass(Short.class) .description("foo foo.") .defaultValue(defaultShortValue) .build(); ConfigOption<Long> testLongConf = ConfigOption.<Long>builder() .key("foolong") .typeParameterClass(Long.class) .description("foo foo.") .defaultValue(defaultLongValue) .build(); ConfigOption<Boolean> testBooleanConf = ConfigOption.<Boolean>builder() .key("foobool") .typeParameterClass(Boolean.class) .description("foo foo.") .defaultValue(defaultBooleanValue) .build(); ConfigOption<Float> testFloatConf = ConfigOption.<Float>builder() .key("foofloat") .typeParameterClass(Float.class) .description("foo foo.") .defaultValue(defaultFloatValue) .build(); ConfigOption<Double> testDoubleConf = ConfigOption.<Double>builder() .key("foodouble") .typeParameterClass(Double.class) .description("foo foo.") .defaultValue(defaultDoubleValue) .build(); ConfigOption<Byte> testByteConf = ConfigOption.<Byte>builder() .key("foobyte") .typeParameterClass(Byte.class) .description("foo foo.") .defaultValue(defaultByteValue) .build(); Assertions.assertEquals(defaultStringValue, testStrConf.getValue()); Assertions.assertEquals(defaultIntValue, testIntConf.getValue()); Assertions.assertEquals(defaultLongValue, testLongConf.getValue()); Assertions.assertEquals(defaultBooleanValue, testBooleanConf.getValue()); Assertions.assertEquals(defaultFloatValue, testFloatConf.getValue()); Assertions.assertEquals(defaultByteValue, testByteConf.getValue()); Assertions.assertEquals(defaultShortValue, testShortConf.getValue()); Assertions."<AssertPlaceHolder>"; }
getValue() { T resolvedValue = resolveValue(); if (log.isDebugEnabled()) { log.debug("Resolved value for property {}={}", key, resolvedValue); } return resolveValue(); }
[*] target: assertEquals(defaultDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( testStrConf, result )

[*] target: assertEquals(defaultDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( testByteConf, testLongConf )

[*] target: assertEquals(defaultDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( testByteConf, result )

[*] target: assertEquals(defaultDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( testStrConf, actual )

[*] target: assertEquals(defaultDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( testStrConf, testLongConf )

************************************
************************************
[+] input: testResolveValueWithOverride() { byte overrideByteValue = 10; short overrideShortValue = 10; long overrideLongValue = 10; int overrideIntValue = 10; float overrideFloatValue = 10.0f; double overrideDoubleValue = 10.0; boolean overrideBooleanValue = true; String overrideStringValue = "barbar"; byte defaultByteValue = 9; short defaultShortValue = 9; long defaultLongValue = 9; int defaultIntValue = 9; float defaultFloatValue = 9.0f; double defaultDoubleValue = 9.0; boolean defaultBooleanValue = false; String defaultStringValue = "bar"; Map<String, String> configOverride = new HashMap<>(); configOverride.put("foobyte", "10"); configOverride.put("fooshort", "10"); configOverride.put("foolong", "10"); configOverride.put("fooint", "10"); configOverride.put("foofloat", "10.0"); configOverride.put("foodouble", "10.0"); configOverride.put("foobool", "true"); configOverride.put("foo", "barbar"); SparkOperatorConfManager.INSTANCE.refresh(configOverride); ConfigOption<String> testStrConf = ConfigOption.<String>builder() .key("foo") .typeParameterClass(String.class) .description("foo foo.") .defaultValue(defaultStringValue) .build(); ConfigOption<Integer> testIntConf = ConfigOption.<Integer>builder() .key("fooint") .typeParameterClass(Integer.class) .description("foo foo.") .defaultValue(defaultIntValue) .build(); ConfigOption<Short> testShortConf = ConfigOption.<Short>builder() .key("fooshort") .typeParameterClass(Short.class) .description("foo foo.") .defaultValue(defaultShortValue) .build(); ConfigOption<Long> testLongConf = ConfigOption.<Long>builder() .key("foolong") .typeParameterClass(Long.class) .description("foo foo.") .defaultValue(defaultLongValue) .build(); ConfigOption<Boolean> testBooleanConf = ConfigOption.<Boolean>builder() .key("foobool") .typeParameterClass(Boolean.class) .description("foo foo.") .defaultValue(defaultBooleanValue) .build(); ConfigOption<Float> testFloatConf = ConfigOption.<Float>builder() .key("foofloat") .typeParameterClass(Float.class) .description("foo foo.") .defaultValue(defaultFloatValue) .build(); ConfigOption<Double> testDoubleConf = ConfigOption.<Double>builder() .key("foodouble") .typeParameterClass(Double.class) .description("foo foo.") .defaultValue(defaultDoubleValue) .build(); ConfigOption<Byte> testByteConf = ConfigOption.<Byte>builder() .key("foobyte") .typeParameterClass(Byte.class) .description("foo foo.") .defaultValue(defaultByteValue) .build(); Assertions.assertEquals(overrideStringValue, testStrConf.getValue()); Assertions.assertEquals(overrideIntValue, testIntConf.getValue()); Assertions.assertEquals(overrideLongValue, testLongConf.getValue()); Assertions.assertEquals(overrideBooleanValue, testBooleanConf.getValue()); Assertions.assertEquals(overrideFloatValue, testFloatConf.getValue()); Assertions.assertEquals(overrideByteValue, testByteConf.getValue()); Assertions.assertEquals(overrideShortValue, testShortConf.getValue()); Assertions."<AssertPlaceHolder>"; }
getValue() { T resolvedValue = resolveValue(); if (log.isDebugEnabled()) { log.debug("Resolved value for property {}={}", key, resolvedValue); } return resolveValue(); }
[*] target: assertEquals(overrideDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( configurationOverride, value )

[*] target: assertEquals(overrideDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertEquals(overrideDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( configurationOverride, result )

[*] target: assertEquals(overrideDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( configurationOverride, actual )

[*] target: assertEquals(overrideDoubleValue, testDoubleConf.getValue())
[-] pred:  org. junit. Assert. assertEquals ( actual, expected )

************************************
************************************
[+] input: testMetricsSystemFailFastWithNoClassFullName() { Properties properties = new Properties(); properties.put("sink.mocksink.period", "10"); properties.put("sink.console.class", "org.apache.spark.metrics.sink.ConsoleSink"); RuntimeException e = "<AssertPlaceHolder>"; Assertions.assertEquals( "mocksink provides properties, but does not provide full class name", e.getMessage()); }
parseSinkProperties( Properties metricsProperties) { Map<String, MetricsSystem.SinkProperties> propertiesMap = new HashMap<>(); // e.g: "sink.graphite.class"="org.apache.spark.metrics.sink.ConsoleSink" Enumeration<?> valueEnumeration = metricsProperties.propertyNames(); while (valueEnumeration.hasMoreElements()) { String key = (String) valueEnumeration.nextElement(); int firstDotIndex = StringUtils.ordinalIndexOf(key, ".", 1); int secondDotIndex = StringUtils.ordinalIndexOf(key, ".", 2); if (key.startsWith(SINK)) { String shortName = key.substring(firstDotIndex + 1, secondDotIndex); MetricsSystem.SinkProperties sinkProperties = propertiesMap.getOrDefault(shortName, new MetricsSystem.SinkProperties()); if (key.endsWith(CLASS)) { sinkProperties.setClassName(metricsProperties.getProperty(key)); } else { sinkProperties .getProperties() .put(key.substring(secondDotIndex + 1), metricsProperties.getProperty(key)); } propertiesMap.put(shortName, sinkProperties); } } sinkPropertiesSanityCheck(propertiesMap); return propertiesMap; }
[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertNull ( e. getMessage ( ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertNull ( e. getCause ( ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertNull ( e )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org

************************************
************************************
[+] input: testMetricsSystemFailFastWithNotFoundClassName() { Properties properties = new Properties(); properties.put("sink.console.class", "org.apache.spark.metrics.sink.FooSink"); RuntimeException e = "<AssertPlaceHolder>"; Assertions.assertEquals( "Fail to find class org.apache.spark.metrics.sink.FooSink", e.getMessage()); }
parseSinkProperties( Properties metricsProperties) { Map<String, MetricsSystem.SinkProperties> propertiesMap = new HashMap<>(); // e.g: "sink.graphite.class"="org.apache.spark.metrics.sink.ConsoleSink" Enumeration<?> valueEnumeration = metricsProperties.propertyNames(); while (valueEnumeration.hasMoreElements()) { String key = (String) valueEnumeration.nextElement(); int firstDotIndex = StringUtils.ordinalIndexOf(key, ".", 1); int secondDotIndex = StringUtils.ordinalIndexOf(key, ".", 2); if (key.startsWith(SINK)) { String shortName = key.substring(firstDotIndex + 1, secondDotIndex); MetricsSystem.SinkProperties sinkProperties = propertiesMap.getOrDefault(shortName, new MetricsSystem.SinkProperties()); if (key.endsWith(CLASS)) { sinkProperties.setClassName(metricsProperties.getProperty(key)); } else { sinkProperties .getProperties() .put(key.substring(secondDotIndex + 1), metricsProperties.getProperty(key)); } propertiesMap.put(shortName, sinkProperties); } } sinkPropertiesSanityCheck(propertiesMap); return propertiesMap; }
[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertThat ( e, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( e ) ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertTrue ( e. parseSinkProperties ( ). isEmpty ( ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertNull ( e. getMessage ( ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org. junit. Assert. assertTrue ( e. parseSinkProperties ( ). contains ( e ) )

[*] target: assertThrows(RuntimeException.class, () -> parseSinkProperties(properties))
[-] pred:  org

************************************
************************************
[+] input: testMetricsSystemWithResourcesAdd() { MetricsSystem metricsSystem = new MetricsSystem(); Set<Source> sourcesList = metricsSystem.getSources(); Set<Sink> sinks = metricsSystem.getSinks(); metricsSystem.start(); assertEquals(1, sourcesList.size()); // By default, only prometheus sink is enabled assertEquals(1, sinks.size()); assertFalse(metricsSystem.getRegistry().getMetrics().isEmpty()); metricsSystem.stop(); "<AssertPlaceHolder>"; }
stop() { if (running.get()) { sinks.forEach(Sink::stop); registry.removeMatching(MetricFilter.ALL); } else { log.error("Stopping a MetricsSystem that is not running"); } running.set(false); }
[*] target: assertTrue(metricsSystem.getRegistry().getMetrics().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( 2, sinks. stop() ( ) )

[*] target: assertTrue(metricsSystem.getRegistry().getMetrics().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( ( ( metricsSystem. stop() ( ). size ( ) ) > 0 ) )

[*] target: assertTrue(metricsSystem.getRegistry().getMetrics().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( 3, metricsSystem. stop() ( ). size ( ) )

[*] target: assertTrue(metricsSystem.getRegistry().getMetrics().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( ( ( metricsSystem. stop() ( ). size ( ) ) == 2 ) )

[*] target: assertTrue(metricsSystem.getRegistry().getMetrics().isEmpty())
[-] pred:  )

************************************
************************************
[+] input: testMetricsSystemWithCustomizedSink() { Properties properties = new Properties(); properties.put("sink.mocksink.class", "org.apache.spark.k8s.operator.metrics.sink.MockSink"); properties.put("sink.mocksink.period", "10"); MetricsSystem metricsSystem = new MetricsSystem(properties); metricsSystem.start(); assertEquals(2, metricsSystem.getSinks().size()); Optional<Sink> mockSinkOptional = metricsSystem.getSinks().stream().filter(sink -> sink instanceof MockSink).findFirst(); assertTrue(mockSinkOptional.isPresent()); Sink mockSink = mockSinkOptional.get(); metricsSystem.stop(); MockSink sink = (MockSink) mockSink; "<AssertPlaceHolder>"; assertEquals(sink.getTimeUnit(), TimeUnit.SECONDS); }
stop() { if (running.get()) { sinks.forEach(Sink::stop); registry.removeMatching(MetricFilter.ALL); } else { log.error("Stopping a MetricsSystem that is not running"); } running.set(false); }
[*] target: assertEquals(sink.getPollPeriod(), 10)
[-] pred:  org. junit. Assert. assertTrue ( sink. stop() ( ) )

[*] target: assertEquals(sink.getPollPeriod(), 10)
[-] pred:  org. junit. Assert. assertEquals ( metricsSystem. stop() ( ), sink. end )

[*] target: assertEquals(sink.getPollPeriod(), 10)
[-] pred:  org. junit. Assert. assertEquals ( metricsSystem. stop() ( ), sink. stop F )

[*] target: assertEquals(sink.getPollPeriod(), 10)
[-] pred:  org. junit. Assert. assertEquals ( metricsSystem. stop() ( ), sink. endAnnotation )

[*] target: assertEquals(sink.getPollPeriod(), 10)
[-] pred:  org. junit. Assert. assertNotNull ( sink. stop() ( ) )

************************************
************************************
[+] input: testMetricsSystemWithTwoSinkConfigurations() { Properties properties = new Properties(); properties.put("sink.mocksink.class", "org.apache.spark.k8s.operator.metrics.sink.MockSink"); properties.put("sink.mocksink.period", "10"); properties.put("sink.console.class", "org.apache.spark.metrics.sink.ConsoleSink"); MetricsSystem metricsSystem = new MetricsSystem(properties); metricsSystem.start(); "<AssertPlaceHolder>"; }
start() { if (running.get()) { throw new IllegalStateException( "Attempting to start a MetricsSystem that is already running"); } running.set(true); registerDefaultSources(); registerSinks(); sinks.forEach(Sink::start); }
[*] target: assertEquals(3, metricsSystem.getSinks().size())
[-] pred:  org. junit. Assert. assertEquals ( properties, metricsSystem. start() ( ) )

[*] target: assertEquals(3, metricsSystem.getSinks().size())
[-] pred:  org. junit. Assert. assertEquals ( properties, metricsSystem. start() )

[*] target: assertEquals(3, metricsSystem.getSinks().size())
[-] pred:  org. junit. Assert. assertEquals ( 0, metricsSystem. start() ( ) )

[*] target: assertEquals(3, metricsSystem.getSinks().size())
[-] pred:  org. junit. Assert. assertEquals ( 3, metricsSystem. start() ( ) )

[*] target: assertEquals(3, metricsSystem.getSinks().size())
[-] pred:  org

************************************
************************************
[+] input: Exception { TestingExecutionBase<SparkApplication> successExecution = new TestingExecutionBase<>(); operatorMetrics.timeControllerExecution(successExecution); Map<String, Metric> metrics = operatorMetrics.metricRegistry().getMetrics(); assertEquals(4, metrics.size()); assertTrue(metrics.containsKey("sparkapplication.test-controller.reconcile.both")); assertTrue(metrics.containsKey("sparkapplication.testns.test-controller.reconcile.both")); assertTrue(metrics.containsKey("sparkapplication.test-controller.reconcile.success.both")); assertTrue( metrics.containsKey("sparkapplication.testns.test-controller.reconcile.success.both"));  FooTestingExecutionBase<SparkApplication> failedExecution = new FooTestingExecutionBase<>(); try { operatorMetrics.timeControllerExecution(failedExecution); } catch (Exception e) { "<AssertPlaceHolder>"; assertEquals(8, metrics.size()); assertTrue(metrics.containsKey("sparkapplication.test-controller.reconcile.failure")); assertTrue( metrics.containsKey( "sparkapplication.test-controller.reconcile.failure.exception" + ".nosuchfieldexception")); assertTrue(metrics.containsKey("sparkapplication.testns.test-controller.reconcile.failure")); assertTrue( metrics.containsKey( "sparkapplication.testns.test-controller.reconcile.failure." + "exception.nosuchfieldexception")); } }
timeControllerExecution(ControllerExecution<T> execution) throws Exception { log.debug("Time controller execution"); final String name = execution.controllerName(); final ResourceID resourceID = execution.resourceID(); final Optional<String> namespaceOptional = resourceID.getNamespace(); final Map<String, Object> metadata = execution.metadata(); final Optional<Class<? extends BaseResource<?, ?, ?, ?, ?>>> resourceClass = getResourceClass(metadata); final String execName = execution.name();  long startTime = clock.getTimeMillis(); try { T result = execution.execute(); final String successType = execution.successTypeName(result); if (resourceClass.isPresent()) { getHistogram(resourceClass.get(), name, execName, successType).update(toSeconds(startTime)); getCounter(resourceClass.get(), name, execName, SUCCESS, successType).inc(); if (namespaceOptional.isPresent()) { getHistogram(resourceClass.get(), namespaceOptional.get(), name, execName, successType) .update(toSeconds(startTime)); getCounter( resourceClass.get(), namespaceOptional.get(), name, execName, SUCCESS, successType) .inc(); } } return result; } catch (Exception e) { log.error( "Controller execution failed for resource {}, metadata {}", resourceID, metadata, e); final String exception = e.getClass().getSimpleName(); if (resourceClass.isPresent()) { getHistogram(resourceClass.get(), name, execName, FAILURE).update(toSeconds(startTime)); getCounter(resourceClass.get(), name, execName, FAILURE, EXCEPTION, exception).inc(); if (namespaceOptional.isPresent()) { getHistogram(resourceClass.get(), namespaceOptional.get(), name, execName, FAILURE) .update(toSeconds(startTime)); getCounter( resourceClass.get(), namespaceOptional.get(), name, execName, FAILURE, EXCEPTION, exception) .inc(); } } throw e; } }
[*] target: assertEquals(e.getMessage(), "Foo exception")
[-] pred:  org. junit. Assert. assertEquals ( 0, failedExecution. size ( ) )

[*] target: assertEquals(e.getMessage(), "Foo exception")
[-] pred:  org. junit. Assert. assertEquals ( 0, failedExecution. get ( ) )

[*] target: assertEquals(e.getMessage(), "Foo exception")
[-] pred:  org. junit. Assert. assertEquals ( 0, failedExecution. millis )

[*] target: assertEquals(e.getMessage(), "Foo exception")
[-] pred:  org. junit. Assert. assertEquals ( 0, e. getMessage ( ) )

[*] target: assertEquals(e.getMessage(), "Foo exception")
[-] pred:  org

************************************
************************************
[+] input: testReconciliationFinished() { operatorMetrics.finishedReconciliation(buildNamespacedResource(), metadata); Map<String, Metric> metrics = operatorMetrics.metricRegistry().getMetrics(); "<AssertPlaceHolder>"; assertTrue(metrics.containsKey("configmap.default.reconciliation.finished")); assertTrue(metrics.containsKey("configmap.reconciliation.finished")); }
metricRegistry() { return metricRegistry; }
[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertNull ( metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertSame ( metricRegistry;, metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( metricRegistry;, metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org

[*] target: assertEquals(2, metrics.size())
[-] pred:  )

************************************
************************************
[+] input: testReconciliationExecutionStartedAndFinished() { operatorMetrics.reconciliationExecutionStarted(buildNamespacedResource(), metadata); Map<String, Metric> metrics = operatorMetrics.metricRegistry().getMetrics(); assertEquals(2, metrics.size()); assertTrue(metrics.containsKey("configmap.test-controller-name.reconciliations.executions")); assertTrue( metrics.containsKey("configmap.default.test-controller-name.reconciliations.executions")); operatorMetrics.reconciliationExecutionFinished(buildNamespacedResource(), metadata); "<AssertPlaceHolder>"; assertTrue(metrics.containsKey("configmap.test-controller-name.reconciliations.queue.size")); }
reconciliationExecutionFinished(HasMetadata resource, Map<String, Object> metadata) { log.debug("Reconciliation execution finished"); String namespace = resource.getMetadata().getNamespace(); getCounter( resource.getClass(), (String) metadata.get(CONTROLLER_NAME), RECONCILIATIONS_EXECUTIONS) .dec(); getCounter( resource.getClass(), namespace, (String) metadata.get(CONTROLLER_NAME), RECONCILIATIONS_EXECUTIONS) .dec(); getCounter( resource.getClass(), (String) metadata.get(CONTROLLER_NAME), RECONCILIATIONS_QUEUE_SIZE) .dec(); }
[*] target: assertEquals(3, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, metrics. size ( ) )

[*] target: assertEquals(3, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( 0, metrics. size ( ) )

[*] target: assertEquals(3, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( 5, metrics. size ( ) )

[*] target: assertEquals(3, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( 1, metrics. size )

[*] target: assertEquals(3, metrics.size())
[-] pred:  org. junit. Assert. assertEquals ( 9, metrics. size ( ) )

************************************
************************************
[+] input: testReceivedEvent() { Event event = new ResourceEvent(ResourceAction.ADDED, resourceId, buildNamespacedResource()); operatorMetrics.receivedEvent(event, metadata); Map<String, Metric> metrics = operatorMetrics.metricRegistry().getMetrics(); "<AssertPlaceHolder>"; assertTrue(metrics.containsKey("sparkapplication.added.resource.event")); assertTrue(metrics.containsKey("sparkapplication.testns.added.resource.event")); }
metricRegistry() { return metricRegistry; }
[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertNotNull ( metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertNull ( metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertNotNull ( metrics. get ( event ) )

[*] target: assertEquals(2, metrics.size())
[-] pred:  org. junit. Assert. assertSame ( event, metrics )

[*] target: assertEquals(2, metrics.size())
[-] pred:  )

************************************
************************************
[+] input: testHealthProbeWithInformerHealthWithMultiOperators() { HealthProbe healthyProbe = new HealthProbe(operators, Collections.emptyList()); isRunning.set(true); assertFalse( healthyProbe.isHealthy(), "Healthy Probe should fail when the spark conf monitor operator is not running"); isRunning2.set(true); assertTrue( healthyProbe.isHealthy(), "Healthy Probe should pass when both operators are running");  unhealthyEventSources2.put( "c1", Map.of("e1", informerHealthIndicator(Map.of("i1", Status.UNHEALTHY)))); assertFalse( healthyProbe.isHealthy(), "Healthy Probe should fail when monitor's informer health is not healthy"); unhealthyEventSources2.clear(); "<AssertPlaceHolder>"; }
isHealthy() { Optional<Boolean> operatorsAreReady = areOperatorsStarted(operators); if (operatorsAreReady.isEmpty() || !operatorsAreReady.get()) { return false; }  Optional<Boolean> runtimeInfosAreHealthy = operators.stream() .map(operator -> checkInformersHealth(operator.getRuntimeInfo())) .reduce((a, b) -> a && b);  if (runtimeInfosAreHealthy.isEmpty() || !runtimeInfosAreHealthy.get()) { return false; }  for (SentinelManager<?> sentinelManager : sentinelManagers) { if (!sentinelManager.allSentinelsAreHealthy()) { log.error("One sentinel manager {} reported an unhealthy condition.", sentinelManager); return false; } }  return true; }
[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy() ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy && ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org

************************************
************************************
[+] input: testHealthProbeWithInformerHealthWithSingleOperator() { HealthProbe healthyProbe = new HealthProbe(Collections.singletonList(operator), Collections.emptyList()); assertFalse(healthyProbe.isHealthy(), "Health Probe should fail when operator is not running"); isRunning.set(true); unhealthyEventSources.put( "c1", Map.of("e1", informerHealthIndicator(Map.of("i1", Status.UNHEALTHY)))); assertFalse( healthyProbe.isHealthy(), "Healthy Probe should fail when informer health is not healthy"); unhealthyEventSources.clear(); "<AssertPlaceHolder>"; }
isHealthy() { Optional<Boolean> operatorsAreReady = areOperatorsStarted(operators); if (operatorsAreReady.isEmpty() || !operatorsAreReady.get()) { return false; }  Optional<Boolean> runtimeInfosAreHealthy = operators.stream() .map(operator -> checkInformersHealth(operator.getRuntimeInfo())) .reduce((a, b) -> a && b);  if (runtimeInfosAreHealthy.isEmpty() || !runtimeInfosAreHealthy.get()) { return false; }  for (SentinelManager<?> sentinelManager : sentinelManagers) { if (!sentinelManager.allSentinelsAreHealthy()) { log.error("One sentinel manager {} reported an unhealthy condition.", sentinelManager); return false; } }  return true; }
[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy() ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthyVoor ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org

************************************
************************************
[+] input: testHealthProbeWithSentinelHealthWithMultiOperators() { var sentinelManager = mock(SentinelManager.class); HealthProbe healthyProbe = new HealthProbe(operators, Collections.singletonList(sentinelManager)); isRunning.set(true); isRunning2.set(true); when(sentinelManager.allSentinelsAreHealthy()).thenReturn(false); assertFalse( healthyProbe.isHealthy(), "Healthy Probe should fail when sentinels report failures");  when(sentinelManager.allSentinelsAreHealthy()).thenReturn(true); "<AssertPlaceHolder>"; }
isHealthy() { Optional<Boolean> operatorsAreReady = areOperatorsStarted(operators); if (operatorsAreReady.isEmpty() || !operatorsAreReady.get()) { return false; }  Optional<Boolean> runtimeInfosAreHealthy = operators.stream() .map(operator -> checkInformersHealth(operator.getRuntimeInfo())) .reduce((a, b) -> a && b);  if (runtimeInfosAreHealthy.isEmpty() || !runtimeInfosAreHealthy.get()) { return false; }  for (SentinelManager<?> sentinelManager : sentinelManagers) { if (!sentinelManager.allSentinelsAreHealthy()) { log.error("One sentinel manager {} reported an unhealthy condition.", sentinelManager); return false; } }  return true; }
[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy() ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthyNotBlank ( ) )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertTrue ( healthyProbe. isHealthy() )

[*] target: assertTrue(healthyProbe.isHealthy(), "Healthy Probe should pass")
[-] pred:  org. junit. Assert. assertFalse ( healthyProbe. isHealthy() )

************************************
************************************
[+] input: testBuildResourceSpecCoversBasicOverride() { SparkApplication app = new SparkApplication(); app.setMetadata( new ObjectMetaBuilder().withNamespace("foo").withName("bar-app").withUid("uid").build()); KubernetesClient mockClient = mock(KubernetesClient.class); Pod mockDriver = mock(Pod.class); when(mockDriver.getMetadata()).thenReturn(new ObjectMeta()); SparkAppResourceSpec mockSpec = mock(SparkAppResourceSpec.class); when(mockSpec.getConfiguredPod()).thenReturn(mockDriver); ArgumentCaptor<Map<String, String>> captor = ArgumentCaptor.forClass(Map.class); SparkAppSubmissionWorker mockWorker = mock(SparkAppSubmissionWorker.class); when(mockWorker.getResourceSpec(any(), any(), captor.capture())).thenReturn(mockSpec); SparkAppResourceSpec spec = SparkAppResourceSpecFactory.buildResourceSpec(app, mockClient, mockWorker); verify(mockWorker).getResourceSpec(eq(app), eq(mockClient), any()); Map<String, String> props = captor.getValue(); "<AssertPlaceHolder>"; assertEquals("foo", props.get("spark.kubernetes.namespace")); ArgumentCaptor<ObjectMeta> metaArgumentCaptor = ArgumentCaptor.forClass(ObjectMeta.class); verify(mockDriver).setMetadata(metaArgumentCaptor.capture()); assertEquals(mockSpec, spec); ObjectMeta metaOverride = metaArgumentCaptor.getValue(); assertEquals(1, metaOverride.getOwnerReferences().size()); assertEquals("bar-app", metaOverride.getOwnerReferences().get(0).getName()); assertEquals("uid", metaOverride.getOwnerReferences().get(0).getUid()); assertEquals(app.getKind(), metaOverride.getOwnerReferences().get(0).getKind()); }
buildResourceSpec( final SparkApplication app, final KubernetesClient client, final SparkAppSubmissionWorker worker) { Map<String, String> confOverrides = overrideDependencyConf(app); SparkAppResourceSpec resourceSpec = worker.getResourceSpec(app, client, confOverrides); cleanUpTempResourcesForApp(app, confOverrides); DriverDecorator decorator = new DriverDecorator(app); decorator.decorate(resourceSpec.getConfiguredPod()); return resourceSpec; }
[*] target: assertTrue(props.containsKey("spark.kubernetes.namespace"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( spec. buildResourceSpec ( ) ) instanceof java. lang. String ) )

[*] target: assertTrue(props.containsKey("spark.kubernetes.namespace"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( spec. buildResourceSpec ( ) ) instanceof java. lang. Object ) )

[*] target: assertTrue(props.containsKey("spark.kubernetes.namespace"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( spec. buildResourceSpec ( ) ) instanceof ObjectMeta ) )

[*] target: assertTrue(props.containsKey("spark.kubernetes.namespace"))
[-] pred:  org. junit. Assert. assertEquals ( mockSpec, spec. buildResourceSpec ( ) )

[*] target: assertTrue(props.containsKey("spark.kubernetes.namespace"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( spec. buildResourceSpec ( ) ) instanceof java. lang. Integer ) )

************************************
************************************
[+] input: testNamespace() { SparkCluster cluster = new SparkCluster(); String namespace = "test-namespace"; cluster.setMetadata( new ObjectMetaBuilder().withNamespace(namespace).withName("bar-cluster").build()); SparkClusterSubmissionWorker mockWorker = mock(SparkClusterSubmissionWorker.class); when(mockWorker.getResourceSpec(any(), any())) .thenReturn(new SparkClusterResourceSpec(cluster, new SparkConf())); SparkClusterResourceSpec spec = SparkClusterResourceSpecFactory.buildResourceSpec(cluster, mockWorker); verify(mockWorker).getResourceSpec(eq(cluster), any()); "<AssertPlaceHolder>"; assertEquals(namespace, spec.getWorkerService().getMetadata().getNamespace()); assertEquals(namespace, spec.getMasterStatefulSet().getMetadata().getNamespace()); assertEquals(namespace, spec.getWorkerStatefulSet().getMetadata().getNamespace()); }
buildResourceSpec( final SparkCluster cluster, final SparkClusterSubmissionWorker worker) { Map<String, String> confOverrides = new HashMap<>(); SparkClusterResourceSpec spec = worker.getResourceSpec(cluster, confOverrides); ClusterDecorator decorator = new ClusterDecorator(cluster); decorator.decorate(spec.getMasterService()); decorator.decorate(spec.getWorkerService()); decorator.decorate(spec.getMasterStatefulSet()); decorator.decorate(spec.getWorkerStatefulSet()); return spec; }
[*] target: assertEquals(namespace, spec.getMasterService().getMetadata().getNamespace())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. System. getProperty ( namespace ), spec )

[*] target: assertEquals(namespace, spec.getMasterService().getMetadata().getNamespace())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. System. currentTimeMillis ( ), spec )

[*] target: assertEquals(namespace, spec.getMasterService().getMetadata().getNamespace())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils.()); ( namespace ), spec )

[*] target: assertEquals(namespace, spec.getMasterService().getMetadata().getNamespace())
[-] pred:  org. junit. Assert. assertEquals ( 0.0, spec )

[*] target: assertEquals(namespace, spec.getMasterService().getMetadata().getNamespace())
[-] pred:  org

************************************
************************************
[+] input: testOwnerReference() { SparkCluster cluster = new SparkCluster(); cluster.setMetadata( new ObjectMetaBuilder().withNamespace("test-namespace").withName("my-cluster").build()); SparkClusterSubmissionWorker mockWorker = mock(SparkClusterSubmissionWorker.class); when(mockWorker.getResourceSpec(any(), any())) .thenReturn(new SparkClusterResourceSpec(cluster, new SparkConf())); SparkClusterResourceSpec spec = SparkClusterResourceSpecFactory.buildResourceSpec(cluster, mockWorker); verify(mockWorker).getResourceSpec(eq(cluster), any()); "<AssertPlaceHolder>"; OwnerReference owner = spec.getMasterService().getMetadata().getOwnerReferences().get(0); assertEquals("SparkCluster", owner.getKind()); assertEquals("my-cluster", owner.getName());  // All resources share the same owner assertEquals(owner, spec.getWorkerService().getMetadata().getOwnerReferences().get(0)); assertEquals(owner, spec.getMasterStatefulSet().getMetadata().getOwnerReferences().get(0)); assertEquals(owner, spec.getWorkerStatefulSet().getMetadata().getOwnerReferences().get(0)); }
buildResourceSpec( final SparkCluster cluster, final SparkClusterSubmissionWorker worker) { Map<String, String> confOverrides = new HashMap<>(); SparkClusterResourceSpec spec = worker.getResourceSpec(cluster, confOverrides); ClusterDecorator decorator = new ClusterDecorator(cluster); decorator.decorate(spec.getMasterService()); decorator.decorate(spec.getWorkerService()); decorator.decorate(spec.getMasterStatefulSet()); decorator.decorate(spec.getWorkerStatefulSet()); return spec; }
[*] target: assertEquals(1, spec.getMasterService().getMetadata().getOwnerReferences().size())
[-] pred:  org. junit. Assert. assertNotNull ( spec )

[*] target: assertEquals(1, spec.getMasterService().getMetadata().getOwnerReferences().size())
[-] pred:  org. junit. Assert. assertTrue ( ( spec instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals(1, spec.getMasterService().getMetadata().getOwnerReferences().size())
[-] pred:  org. junit. Assert. assertTrue ( ( spec instanceof org. apache. commons. lang3. String ) )

[*] target: assertEquals(1, spec.getMasterService().getMetadata().getOwnerReferences().size())
[-] pred:  org. junit. Assert :: assertNotNull, spec )

[*] target: assertEquals(1, spec.getMasterService().getMetadata().getOwnerReferences().size())
[-] pred:  org

************************************
************************************
[+] input: testAppendNewState() { ApplicationStatus applicationStatus = new ApplicationStatus(); ApplicationState newState = new ApplicationState(ApplicationStateSummary.RunningHealthy, "foo"); ApplicationStatus newStatus = applicationStatus.appendNewState(newState); "<AssertPlaceHolder>"; assertEquals(newState, newStatus.getStateTransitionHistory().get(1L)); }
appendNewState(ApplicationState state) { return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }
[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( newStatus, newState )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( applicationStatus, newStatus )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( newStatus. appendNewState ( ), newState )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( IDENT_3, newStatus )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org

************************************
************************************
[+] input: testTerminateOrRestartWithoutRetry() { RestartConfig noRetryConfig = new RestartConfig(); noRetryConfig.setRestartPolicy(RestartPolicy.Never); String messageOverride = "foo";  // without retry ApplicationStatus status = new ApplicationStatus().appendNewState(new ApplicationState(Succeeded, "bar")); ApplicationStatus updatedStatusReleaseResource = status.terminateOrRestart( noRetryConfig, ResourceRetainPolicy.Never, messageOverride, false); assertEquals( ApplicationStateSummary.ResourceReleased, updatedStatusReleaseResource.getCurrentState().getCurrentStateSummary()); assertTrue( updatedStatusReleaseResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals( 0L, updatedStatusReleaseResource.getCurrentAttemptSummary().getAttemptInfo().getId());  ApplicationStatus updatedStatusRetainResource = status.terminateOrRestart( noRetryConfig, ResourceRetainPolicy.Always, messageOverride, false); "<AssertPlaceHolder>"; assertTrue( updatedStatusRetainResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals( 0L, updatedStatusRetainResource.getCurrentAttemptSummary().getAttemptInfo().getId()); }
terminateOrRestart( final RestartConfig restartConfig, final ResourceRetainPolicy resourceRetainPolicy, String stateMessageOverride, boolean trimStateTransitionHistory) { if (!currentState.currentStateSummary.isStopping()) { // application is not stopping, skip throw new IllegalStateException( "Spark application cannot be directly terminated unless in stopping " + "state, current state is: " + currentState); }  if (!RestartPolicy.attemptRestartOnState( restartConfig.getRestartPolicy(), currentState.getCurrentStateSummary())) { // no restart configured ApplicationState state = new ApplicationState(ApplicationStateSummary.ResourceReleased, stateMessageOverride); if (ResourceRetainPolicy.Always.equals(resourceRetainPolicy) || ResourceRetainPolicy.OnFailure.equals(resourceRetainPolicy) && currentState.currentStateSummary.isFailure()) { state = terminateAppWithoutReleaseResource(stateMessageOverride); } return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }  if (currentAttemptSummary.getAttemptInfo().getId() >= restartConfig.getMaxRestartAttempts()) { String stateMessage = String.format(EXCEED_MAX_RETRY_ATTEMPT_MESSAGE, restartConfig.getMaxRestartAttempts()); if (stateMessageOverride != null && !stateMessageOverride.isEmpty()) { stateMessage += stateMessageOverride; } // max number of restart attempt reached ApplicationState state = new ApplicationState(ApplicationStateSummary.ResourceReleased, stateMessage); if (ResourceRetainPolicy.Always.equals(resourceRetainPolicy) || ResourceRetainPolicy.OnFailure.equals(resourceRetainPolicy) && currentState.currentStateSummary.isFailure()) { state = terminateAppWithoutReleaseResource(stateMessage); } // still use previous & current attempt summary - they are to be updated only upon // new restart return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }  AttemptInfo nextAttemptInfo = currentAttemptSummary.getAttemptInfo().createNextAttemptInfo(); ApplicationAttemptSummary nextAttemptSummary = new ApplicationAttemptSummary(nextAttemptInfo); ApplicationState state = new ApplicationState(ApplicationStateSummary.ScheduledToRestart, stateMessageOverride);  if (trimStateTransitionHistory) { // when truncating, put all previous history entries into previous attempt summary ApplicationAttemptSummary newPrevSummary = new ApplicationAttemptSummary( currentAttemptSummary.getAttemptInfo(), stateTransitionHistory); return new ApplicationStatus( state, Collections.singletonMap(getCurrentStateId() + 1, state), newPrevSummary, nextAttemptSummary); } else { // when truncating is disabled, currentAttempt becomes the new 'previous' return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), currentAttemptSummary, nextAttemptSummary); } }
[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, updatedStatusRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( updatedStatusReleaseResource. equals ( updatedStatusRetainResource ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, updatedStatusRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( updatedStatusReleaseResource. is()); ( ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, updatedStatusRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( ( updatedStatusReleaseResource instanceof java. lang. String ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, updatedStatusRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( ( updatedStatusReleaseResource instanceof org. obe. lang. String ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, updatedStatusRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org

************************************
************************************
[+] input: testTerminateOrRestartWithRetry() { RestartConfig alwaysRetryConfig = new RestartConfig(); alwaysRetryConfig.setRestartPolicy(RestartPolicy.Always); alwaysRetryConfig.setMaxRestartAttempts(1L); String messageOverride = "foo";  ApplicationStatus status = new ApplicationStatus().appendNewState(new ApplicationState(Succeeded, "bar"));  // retry policy set ApplicationStatus restartReleaseResource = status.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Never, messageOverride, false); assertEquals( ApplicationStateSummary.ScheduledToRestart, restartReleaseResource.getCurrentState().getCurrentStateSummary()); assertTrue(restartReleaseResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals(1L, restartReleaseResource.getCurrentAttemptSummary().getAttemptInfo().getId());  ApplicationStatus restartRetainResource = status.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Always, messageOverride, false); assertEquals( ApplicationStateSummary.ScheduledToRestart, restartRetainResource.getCurrentState().getCurrentStateSummary()); assertTrue(restartRetainResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals(1L, restartRetainResource.getCurrentAttemptSummary().getAttemptInfo().getId());  // trim state history for new restart ApplicationStatus restartTrimHistory = status.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Never, messageOverride, true); assertEquals( ApplicationStateSummary.ScheduledToRestart, restartTrimHistory.getCurrentState().getCurrentStateSummary()); assertTrue(restartTrimHistory.getCurrentState().getMessage().contains(messageOverride)); assertEquals(1L, restartTrimHistory.getCurrentAttemptSummary().getAttemptInfo().getId()); assertEquals(1L, restartTrimHistory.getStateTransitionHistory().size()); assertNotNull(restartTrimHistory.getPreviousAttemptSummary().getStateTransitionHistory()); assertEquals( status.getStateTransitionHistory(), restartTrimHistory.getPreviousAttemptSummary().getStateTransitionHistory());  ApplicationStatus restartRetainResourceTrimHistory = status.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Always, messageOverride, true); assertEquals( ApplicationStateSummary.ScheduledToRestart, restartRetainResourceTrimHistory.getCurrentState().getCurrentStateSummary()); assertTrue( restartRetainResourceTrimHistory.getCurrentState().getMessage().contains(messageOverride)); assertEquals( 1L, restartRetainResourceTrimHistory.getCurrentAttemptSummary().getAttemptInfo().getId()); assertNotNull( restartRetainResourceTrimHistory.getPreviousAttemptSummary().getStateTransitionHistory()); assertEquals( status.getStateTransitionHistory(), restartRetainResourceTrimHistory.getPreviousAttemptSummary().getStateTransitionHistory());  // retry policy set but max retry attempt reached alwaysRetryConfig.setMaxRestartAttempts(1L); ApplicationStatus restartFailed = restartReleaseResource.appendNewState( new ApplicationState(ApplicationStateSummary.Failed, "bar")); ApplicationStatus maxRestartExceededReleaseResource = restartFailed.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Never, messageOverride, false); assertEquals( ApplicationStateSummary.ResourceReleased, maxRestartExceededReleaseResource.getCurrentState().getCurrentStateSummary()); assertTrue( maxRestartExceededReleaseResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals( 1L, maxRestartExceededReleaseResource.getCurrentAttemptSummary().getAttemptInfo().getId());  ApplicationStatus maxRestartExceededRetainResource = restartFailed.terminateOrRestart( alwaysRetryConfig, ResourceRetainPolicy.Always, messageOverride, false); "<AssertPlaceHolder>"; assertTrue( maxRestartExceededRetainResource.getCurrentState().getMessage().contains(messageOverride)); assertEquals( 1L, maxRestartExceededRetainResource.getCurrentAttemptSummary().getAttemptInfo().getId()); }
terminateOrRestart( final RestartConfig restartConfig, final ResourceRetainPolicy resourceRetainPolicy, String stateMessageOverride, boolean trimStateTransitionHistory) { if (!currentState.currentStateSummary.isStopping()) { // application is not stopping, skip throw new IllegalStateException( "Spark application cannot be directly terminated unless in stopping " + "state, current state is: " + currentState); }  if (!RestartPolicy.attemptRestartOnState( restartConfig.getRestartPolicy(), currentState.getCurrentStateSummary())) { // no restart configured ApplicationState state = new ApplicationState(ApplicationStateSummary.ResourceReleased, stateMessageOverride); if (ResourceRetainPolicy.Always.equals(resourceRetainPolicy) || ResourceRetainPolicy.OnFailure.equals(resourceRetainPolicy) && currentState.currentStateSummary.isFailure()) { state = terminateAppWithoutReleaseResource(stateMessageOverride); } return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }  if (currentAttemptSummary.getAttemptInfo().getId() >= restartConfig.getMaxRestartAttempts()) { String stateMessage = String.format(EXCEED_MAX_RETRY_ATTEMPT_MESSAGE, restartConfig.getMaxRestartAttempts()); if (stateMessageOverride != null && !stateMessageOverride.isEmpty()) { stateMessage += stateMessageOverride; } // max number of restart attempt reached ApplicationState state = new ApplicationState(ApplicationStateSummary.ResourceReleased, stateMessage); if (ResourceRetainPolicy.Always.equals(resourceRetainPolicy) || ResourceRetainPolicy.OnFailure.equals(resourceRetainPolicy) && currentState.currentStateSummary.isFailure()) { state = terminateAppWithoutReleaseResource(stateMessage); } // still use previous & current attempt summary - they are to be updated only upon // new restart return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }  AttemptInfo nextAttemptInfo = currentAttemptSummary.getAttemptInfo().createNextAttemptInfo(); ApplicationAttemptSummary nextAttemptSummary = new ApplicationAttemptSummary(nextAttemptInfo); ApplicationState state = new ApplicationState(ApplicationStateSummary.ScheduledToRestart, stateMessageOverride);  if (trimStateTransitionHistory) { // when truncating, put all previous history entries into previous attempt summary ApplicationAttemptSummary newPrevSummary = new ApplicationAttemptSummary( currentAttemptSummary.getAttemptInfo(), stateTransitionHistory); return new ApplicationStatus( state, Collections.singletonMap(getCurrentStateId() + 1, state), newPrevSummary, nextAttemptSummary); } else { // when truncating is disabled, currentAttempt becomes the new 'previous' return new ApplicationStatus( state, createUpdatedHistoryWithNewState(state), currentAttemptSummary, nextAttemptSummary); } }
[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, maxRestartExceededRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( restartReleaseResource ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, maxRestartExceededRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. isEmpty ( restartReleaseResource ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, maxRestartExceededRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( restartReleaseConfig ) )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, maxRestartExceededRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  org. junit. Assert. assertTrue ( canAction )

[*] target: assertEquals( ApplicationStateSummary.TerminatedWithoutReleaseResources, maxRestartExceededRetainResource.getCurrentState().getCurrentStateSummary())
[-] pred:  tests the behaviour of this factory

************************************
************************************
[+] input: testAppendNewState() { ClusterStatus status = new ClusterStatus(); ClusterState newState = new ClusterState(ClusterStateSummary.RunningHealthy, "foo"); ClusterStatus newStatus = status.appendNewState(newState); "<AssertPlaceHolder>"; assertEquals(newState, newStatus.getStateTransitionHistory().get(1L)); }
appendNewState(ClusterState state) { return new ClusterStatus( state, createUpdatedHistoryWithNewState(state), previousAttemptSummary, currentAttemptSummary); }
[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( newStatus, newState )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( newStatus, newStatus )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( null, newStatus )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org. junit. Assert. assertEquals ( newStatus, newState ) )

[*] target: assertEquals(2, newStatus.getStateTransitionHistory().size())
[-] pred:  org

************************************
************************************
[+] input: testGetPodFromTemplateSpec() { PodTemplateSpec podTemplateSpec = buildSamplePodTemplateSpec(); Pod pod = ModelUtils.getPodFromTemplateSpec(podTemplateSpec); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(podTemplateSpec.getSpec(), pod.getSpec()); Assertions.assertEquals( podTemplateSpec.getAdditionalProperties(), pod.getAdditionalProperties()); }
getPodFromTemplateSpec(PodTemplateSpec podTemplateSpec) { if (podTemplateSpec == null) { return new PodBuilder().withNewMetadata().endMetadata().withNewSpec().endSpec().build(); } return new PodBuilder() .withMetadata(podTemplateSpec.getMetadata()) .withSpec(podTemplateSpec.getSpec()) .withAdditionalProperties(podTemplateSpec.getAdditionalProperties()) .build(); }
[*] target: assertEquals(podTemplateSpec.getMetadata(), pod.getMetadata())
[-] pred:  org. junit. Assert. assertNotNull ( pod )

[*] target: assertEquals(podTemplateSpec.getMetadata(), pod.getMetadata())
[-] pred:  org. junit. Assert. assertEquals ( pod, pod )

[*] target: assertEquals(podTemplateSpec.getMetadata(), pod.getMetadata())
[-] pred:  org. junit. Assert. assertEquals ( podAnnotation, pod )

[*] target: assertEquals(podTemplateSpec.getMetadata(), pod.getMetadata())
[-] pred:  org. junit. Assert. assertEquals ( podAlignment, pod )

[*] target: assertEquals(podTemplateSpec.getMetadata(), pod.getMetadata())
[-] pred:  org

************************************
************************************
[+] input: testOverrideDriverTemplateEnabled() { ApplicationSpec applicationSpec = new ApplicationSpec(); assertFalse(ModelUtils.overrideDriverTemplateEnabled(applicationSpec));  BaseApplicationTemplateSpec driverSpec = new BaseApplicationTemplateSpec(); applicationSpec.setDriverSpec(driverSpec); assertFalse(ModelUtils.overrideDriverTemplateEnabled(applicationSpec));  driverSpec.setPodTemplateSpec(buildSamplePodTemplateSpec()); applicationSpec.setDriverSpec(driverSpec); "<AssertPlaceHolder>"; }
overrideDriverTemplateEnabled(ApplicationSpec applicationSpec) { return applicationSpec != null && applicationSpec.getDriverSpec() != null && applicationSpec.getDriverSpec().getPodTemplateSpec() != null; }
[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( driverSpec. overrideDriverTemplateEnabled(driverSpec ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( driverSpec. overrideDriverTemplateEnabled ( applicationSpec ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( driverSpec. overrideDriverTemplateEnabled(driverSpec: ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( driverSpec. overrideDriverTemplateEnabled(driverSpec2 ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org

************************************
************************************
[+] input: testOverrideExecutorTemplateEnabled() { ApplicationSpec applicationSpec = new ApplicationSpec(); assertFalse(ModelUtils.overrideDriverTemplateEnabled(applicationSpec));  BaseApplicationTemplateSpec executorSpec = new BaseApplicationTemplateSpec(); applicationSpec.setExecutorSpec(executorSpec); assertFalse(ModelUtils.overrideDriverTemplateEnabled(applicationSpec));  executorSpec.setPodTemplateSpec(buildSamplePodTemplateSpec()); applicationSpec.setDriverSpec(executorSpec); "<AssertPlaceHolder>"; }
overrideDriverTemplateEnabled(ApplicationSpec applicationSpec) { return applicationSpec != null && applicationSpec.getDriverSpec() != null && applicationSpec.getDriverSpec().getPodTemplateSpec() != null; }
[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( executorSpec. overrideDriverTemplateEnabled( applicationSpec ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( executorSpec. overrideDriverTemplateEnabled ( applicationSpec ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertFalse ( executorSpec. overrideDriverTemplateEnabled( applicationSpec) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org. junit. Assert. assertTrue ( executorSpec. overrideDriverTemplateEnabled( applicationSpec ) )

[*] target: assertTrue(ModelUtils.overrideDriverTemplateEnabled(applicationSpec))
[-] pred:  org

************************************
************************************
[+] input: testResourceNamePrefix() { // Resource prefix shall be deterministic per SparkApp per attempt SparkConf sparkConf = new SparkConf(); sparkConf.set("foo", "bar"); sparkConf.set("spark.executor.instances", "1"); String appId = UUID.randomUUID().toString(); SparkAppDriverConf sparkAppDriverConf = SparkAppDriverConf.create( sparkConf, appId, mock(JavaMainAppResource.class), "foo", null, Option.empty()); String resourcePrefix = sparkAppDriverConf.resourceNamePrefix(); assertEquals( resourcePrefix, appId, "Secondary resource prfix should be the same as app id, " + "but different values are detected"); "<AssertPlaceHolder>"; assertTrue( sparkAppDriverConf.driverServiceName().contains(resourcePrefix), "Driver service " + "name should include secondary resource prefix"); }
configMapNameDriver() { return KubernetesClientUtils.configMapName(String.format("%s-spark-drv", resourceNamePrefix())); }
[*] target: assertTrue( sparkAppDriverConf.configMapNameDriver().contains(resourcePrefix), "ConfigMap name" + " should include secondary resource prefix")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver() ( resourcePrefix ), resourcePrefix )

[*] target: assertTrue( sparkAppDriverConf.configMapNameDriver().contains(resourcePrefix), "ConfigMap name" + " should include secondary resource prefix")
[-] pred:  org. junit. Assert. assertEquals ( resourcePrefix, sparkAppDriverConf. configMapNameDriver() ( ) )

[*] target: assertTrue( sparkAppDriverConf.configMapNameDriver().contains(resourcePrefix), "ConfigMap name" + " should include secondary resource prefix")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver(). toString ( ), resourcePrefix )

[*] target: assertTrue( sparkAppDriverConf.configMapNameDriver().contains(resourcePrefix), "ConfigMap name" + " should include secondary resource prefix")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver(). class, resourcePrefix )

[*] target: assertTrue( sparkAppDriverConf.configMapNameDriver().contains(resourcePrefix), "ConfigMap name" + " should include secondary resource prefix")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver() ( resourcePrefix ), resourceName )

************************************
************************************
[+] input: testConfigMapNameDriver() { SparkConf sparkConf = new SparkConf(); sparkConf.set("foo", "bar"); sparkConf.set("spark.executor.instances", "1"); String appId = RandomStringUtils.randomAlphabetic(1000); SparkAppDriverConf sparkAppDriverConf = SparkAppDriverConf.create( sparkConf, appId, mock(JavaMainAppResource.class), "foo", null, Option.empty()); String configMapNameDriver = sparkAppDriverConf.configMapNameDriver(); "<AssertPlaceHolder>"; }
configMapNameDriver() { return KubernetesClientUtils.configMapName(String.format("%s-spark-drv", resourceNamePrefix())); }
[*] target: assertTrue( configMapNameDriver.length() <= 253, "config map name length should always comply k8s DNS subdomain length")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver() ( appId ), configMapNameDriver )

[*] target: assertTrue( configMapNameDriver.length() <= 253, "config map name length should always comply k8s DNS subdomain length")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver(), configMapNameDriver )

[*] target: assertTrue( configMapNameDriver.length() <= 253, "config map name length should always comply k8s DNS subdomain length")
[-] pred:  org. junit. Assert. assertEquals ( dataTypeClientUtils. configMapNameDriver() ( appId ), configMapNameDriver )

[*] target: assertTrue( configMapNameDriver.length() <= 253, "config map name length should always comply k8s DNS subdomain length")
[-] pred:  org. junit. Assert. assertEquals ( KubernetesClientUtils. configMapNameDriver ( ), configMapNameDriver )

[*] target: assertTrue( configMapNameDriver.length() <= 253, "config map name length should always comply k8s DNS subdomain length")
[-] pred:  org. junit. Assert. assertEquals ( dataType, configMapNameDriver )

************************************
************************************
[+] input: testGetResourceSpec() { SparkClusterSubmissionWorker worker = new SparkClusterSubmissionWorker(); SparkClusterResourceSpec spec = worker.getResourceSpec(cluster, Collections.emptyMap()); // SparkClusterResourceSpecTest will cover the detail information of easy resources "<AssertPlaceHolder>"; assertNotNull(spec.getMasterStatefulSet()); assertNotNull(spec.getWorkerStatefulSet()); }
getResourceSpec( SparkCluster cluster, Map<String, String> confOverrides) { SparkConf effectiveSparkConf = new SparkConf();  Map<String, String> confFromSpec = cluster.getSpec().getSparkConf(); if (MapUtils.isNotEmpty(confFromSpec)) { for (Map.Entry<String, String> entry : confFromSpec.entrySet()) { effectiveSparkConf.set(entry.getKey(), entry.getValue()); } }  if (MapUtils.isNotEmpty(confOverrides)) { for (Map.Entry<String, String> entry : confOverrides.entrySet()) { effectiveSparkConf.set(entry.getKey(), entry.getValue()); } }  effectiveSparkConf.set("spark.kubernetes.namespace", cluster.getMetadata().getNamespace());  return new SparkClusterResourceSpec(cluster, effectiveSparkConf); }
[*] target: assertNotNull(spec.getMasterService())
[-] pred:  org. junit. Assert. assertNotNull ( spec )

[*] target: assertNotNull(spec.getMasterService())
[-] pred:  org. junit. Assert. assertNull ( spec )

[*] target: assertNotNull(spec.getMasterService())
[-] pred:  org. junit. Assert. assertNotNull ( spec. getResourceSpec ( ) )

[*] target: assertNotNull(spec.getMasterService())
[-] pred:  org. junit. Assert. assertNotNull ( spec spec )

[*] target: assertNotNull(spec.getMasterService())
[-] pred:  org

************************************
************************************
[+] input: shouldGetProductByCode() { ProductEntity product = productRepository.findByCode("P100").orElseThrow(); "<AssertPlaceHolder>"; assertThat(product.getName()).isEqualTo("The Hunger Games"); assertThat(product.getDescription()).isEqualTo("Winning will make you famous. Losing means certain death..."); assertThat(product.getPrice()).isEqualTo(new BigDecimal("34.0")); }
findByCode(String code);
[*] target: assertThat(product.getCode()).isEqualTo("P100")
[-] pred:  org. junit. Assert. assertNotNull ( product )

[*] target: assertThat(product.getCode()).isEqualTo("P100")
[-] pred:  org. junit. Assert. assertNotNull ( product )

[*] target: assertThat(product.getCode()).isEqualTo("P100")
[-] pred:  org. junit. Assert. assertThat ( product )

[*] target: assertThat(product.getCode()).isEqualTo("P100")
[-] pred:  org. junit, product )

[*] target: assertThat(product.getCode()).isEqualTo("P100")
[-] pred:  org

************************************
************************************
[+] input: Exception { // Search for specific User in Database according to lastname List<User> usersWithLastNameSiegmund = users.findByLastName("Siegmund");  "<AssertPlaceHolder>"; }
findByLastName(@Param("lastname") String lastname);
[*] target: assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund))
[-] pred:  org. junit. Assert. assertEquals ( in Database, inLastNameSiegmund )

[*] target: assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund))
[-] pred:  org. junit. Assert. assertEquals ( in Database, in. findByLastNameSiegmund )

[*] target: assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund))
[-] pred:  org. junit. Assert. assertEquals ( in Database, new<User> findByLastNameSiegmund )

[*] target: assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund))
[-] pred:  org. junit. Assert. assertEquals ( in Database, ingmund )

[*] target: assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund))
[-] pred:  org

************************************
************************************
[+] input: Exception { // Search for specific User in Database according to firstname List<User> usersWithFirstNameJonas = users.findByFirstName("Jonas");  "<AssertPlaceHolder>"; }
findByFirstName(@Param("firstname") String firstname);
[*] target: assertThat(usersWithFirstNameJonas, contains(jonasHecht))
[-] pred:  org. junit. Assert. assertEquals ( in Database, usersWithFirstNameJonas )

[*] target: assertThat(usersWithFirstNameJonas, contains(jonasHecht))
[-] pred:  org. junit. Assert. assertEquals ( in Database, inUtil )

[*] target: assertThat(usersWithFirstNameJonas, contains(jonasHecht))
[-] pred:  org. junit. Assert. assertEquals ( in Database, inCollectionsWithFirstNameJonas )

[*] target: assertThat(usersWithFirstNameJonas, contains(jonasHecht))
[-] pred:  org. junit. Assert. assertEquals ( in Database, inCollectionsCollectionsCollectionsonas )

[*] target: assertThat(usersWithFirstNameJonas, contains(jonasHecht))
[-] pred:  org

************************************
************************************
[+] input: testModules() { JavetSanitizerModuleChecker moduleChecker = (JavetSanitizerModuleChecker) checker; JavetSanitizerOptions options = JavetSanitizerOptions.Default.toClone() .setKeywordExportEnabled(true) .setKeywordImportEnabled(true); checker.setOptions(options.seal()); { String code = ";;"; try { checker.check(code); assertTrue(moduleChecker.getExportNodes().isEmpty()); assertTrue(moduleChecker.getImportNodes().isEmpty()); } catch (JavetSanitizerException e) { fail(e); } } { String code = "import a from 'a';\nexport const b = a;"; try { checker.check(code); "<AssertPlaceHolder>"; assertEquals(1, moduleChecker.getImportNodes().size()); assertInstanceOf(Swc4jAstExportDecl.class, moduleChecker.getExportNodes().get(0)); assertInstanceOf(Swc4jAstImportDecl.class, moduleChecker.getImportNodes().get(0)); } catch (JavetSanitizerException e) { fail(e); } } }
check(String codeString) throws JavetSanitizerException { super.check(codeString); validateShebang(ISwc4jAstStmt.class); validateBodyNotEmpty(); for (ISwc4jAst node : program.getBody()) { if (node instanceof ISwc4jAstModuleDecl) { validateExportNode(node.as(ISwc4jAstModuleDecl.class)); validateImportNode(node.as(ISwc4jAstModuleDecl.class)); } else { checkNode(node); } } }
[*] target: assertEquals(1, moduleChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleChecker. check(StringVideo) )

[*] target: assertEquals(1, moduleChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleChecker. check(StringOldest) )

[*] target: assertEquals(1, moduleChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleChecker. check(String getScreen ) )

[*] target: assertEquals(1, moduleChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleChecker. check(StringOldest ) )

[*] target: assertEquals(1, moduleChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleChecker. check(StringNotNullOrEmpty )

************************************
************************************
[+] input: testModules() { JavetSanitizerModuleFunctionChecker moduleFunctionChecker = (JavetSanitizerModuleFunctionChecker) checker; JavetSanitizerOptions options = JavetSanitizerOptions.Default.toClone() .setKeywordExportEnabled(true) .setKeywordImportEnabled(true); checker.setOptions(options.seal()); { String code = "function main() {}"; try { checker.check(code); assertTrue(moduleFunctionChecker.getExportNodes().isEmpty()); assertTrue(moduleFunctionChecker.getImportNodes().isEmpty()); } catch (JavetSanitizerException e) { fail(e); } } { String code = "import a from 'a';\nfunction main() {}\nexport const b = a;"; try { checker.check(code); "<AssertPlaceHolder>"; assertEquals(1, moduleFunctionChecker.getImportNodes().size()); assertInstanceOf(Swc4jAstExportDecl.class, moduleFunctionChecker.getExportNodes().get(0)); assertInstanceOf(Swc4jAstImportDecl.class, moduleFunctionChecker.getImportNodes().get(0)); } catch (JavetSanitizerException e) { fail(e); } } }
check(String codeString) throws JavetSanitizerException { super.check(codeString); validateShebang(Swc4jAstFnDecl.class); validateBodyNotEmpty(); for (ISwc4jAst node : program.getBody()) { if (node instanceof ISwc4jAstModuleDecl) { validateExportNode(node.as(ISwc4jAstModuleDecl.class)); validateImportNode(node.as(ISwc4jAstModuleDecl.class)); } else { checkNode(node); Swc4jAstFnDecl fnDecl = node.as(Swc4jAstFnDecl.class); functionMap.put(fnDecl.getIdent().getSym(), fnDecl); } } validateReservedFunctions(); }
[*] target: assertEquals(1, moduleFunctionChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleFunctionChecker. check(StringNotNullOrEmpty )

[*] target: assertEquals(1, moduleFunctionChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleFunctionChecker. check(String Unknown )

[*] target: assertEquals(1, moduleFunctionChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertEquals ( b, moduleFunctionChecker. check(StringNodeInfo )

[*] target: assertEquals(1, moduleFunctionChecker.getExportNodes().size())
[-] pred:  org. junit. Assert. assertTrue ( code. contains ( b ) )

[*] target: assertEquals(1, moduleFunctionChecker.getExportNodes().size())
[-] pred:  org

************************************
************************************
[+] input: testReservedFunctions() { JavetSanitizerOptions options = JavetSanitizerOptions.Default.toClone() .setReservedIdentifierMatcher(name -> name.startsWith("$")) .setKeywordImportEnabled(true); checker.setOptions(options.seal()); JavetSanitizerModuleFunctionChecker moduleFunctionChecker = (JavetSanitizerModuleFunctionChecker) checker; { String code = "function b() {}"; assertEquals( "Function main is not found.", assertThrows( JavetSanitizerException.class, () -> checker.check(code), "Failed to throw exception for [" + code + "]").getMessage()); assertEquals(1, moduleFunctionChecker.getFunctionMap().size()); assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b")); } { String code = "function main() {} function b() {}"; try { checker.check(code); assertEquals(2, moduleFunctionChecker.getFunctionMap().size()); assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("main")); "<AssertPlaceHolder>"; } catch (JavetSanitizerException e) { fail(e); } } }
getFunctionMap() { return functionMap; }
[*] target: assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b"))
[-] pred:  org. junit. Assert. assertTrue ( options. getFunctionMap() ( ). isEmpty ( ) )

[*] target: assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b"))
[-] pred:  org. junit. Assert. assertEquals ( 0, options. getFunctionMap() ( ). size ( ) )

[*] target: assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b"))
[-] pred:  org. junit. Assert. assertTrue ( options. getFunctionMap ( ). isEmpty ( ) )

[*] target: assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b"))
[-] pred:  org. junit. Assert. assertTrue ( options. getFunctionMap() ( ). contains ( code ) )

[*] target: assertTrue(moduleFunctionChecker.getFunctionMap().containsKey("b"))
[-] pred:  org

************************************
************************************
[+] input: JavetException { JavetSanitizerOptions options = JavetSanitizerOptions.Default.toClone(); options.getToBeDeletedIdentifierList().clear(); options.getToBeDeletedIdentifierList().add("eval"); options.getToBeDeletedIdentifierList().add("Function"); options.getToBeFrozenIdentifierList().clear(); options.getToBeFrozenIdentifierList().add("Object"); options.getToBeFrozenIdentifierList().add("Array"); options.seal(); String codeString = JavetSanitizerFridge.generate(options); "<AssertPlaceHolder>";\n" + "delete globalThis.Function;\n" + "\n" + "/***** Freeze 2 object(s). *****/\n" + "\n" + "// Object\n" + "const Object = (() => {\n" + "  const _Object = globalThis.Object;\n" + "  delete globalThis.Object;\n" + "  return _Object;\n" + "})();\n" + "Object.freeze(Object);\n" + "Object.freeze(Object.prototype);\n" + "\n" + "// Array\n" + "const Array = (() => {\n" + "  const _Array = globalThis.Array;\n" + "  delete globalThis.Array;\n" + "  return _Array;\n" + "})();\n" + "Object.freeze(Array);\n" + "Object.freeze(Array.prototype);\n\n", codeString); try (V8Runtime v8Runtime = V8Host.getV8Instance().createV8Runtime()) { try (V8ValueBuiltInObject v8ValueBuiltInObject = v8Runtime.getGlobalObject().getBuiltInObject()) { assertFalse(v8ValueBuiltInObject.isFrozen()); v8Runtime.getExecutor(codeString).executeVoid(); assertTrue(v8ValueBuiltInObject.isFrozen()); } } }
generate(final JavetSanitizerOptions option) { StringBuilder sb = new StringBuilder(); sb.append("/***** Delete ").append(option.getToBeDeletedIdentifierList().size()).append(" object(s). *****/\n\n"); option.getToBeDeletedIdentifierList().forEach(object -> sb.append("delete ").append(option.getGlobalIdentifier()).append(".").append(object).append(";\n")); sb.append("\n"); sb.append("/***** Freeze ").append(option.getToBeFrozenIdentifierList().size()).append(" object(s). *****/\n\n"); option.getToBeFrozenIdentifierList().forEach(object -> { sb.append("// ").append(object).append("\n"); sb.append("const ").append(object).append(" = (() => {\n"); sb.append("  const _").append(object).append(" = ").append(option.getGlobalIdentifier()).append(".").append(object).append(";\n"); sb.append("  delete ").append(option.getGlobalIdentifier()).append(".").append(object).append(";\n"); sb.append("  return _").append(object).append(";\n"); sb.append("})();\n"); sb.append("Object.freeze(").append(object).append(");\n"); sb.append("Object.freeze(").append(object).append(".prototype);\n\n"); }); return sb.toString(); }
[*] target: assertEquals( "/***** Delete 2 object(s). *****/\n" + "\n" + "delete globalThis.eval
[-] pred:  org. junit. Assert. assertNotNull ( StringConverter )

[*] target: assertEquals( "/***** Delete 2 object(s). *****/\n" + "\n" + "delete globalThis.eval
[-] pred:  org. junit. Assert. assertNotNull ( StringFacility )

[*] target: assertEquals( "/***** Delete 2 object(s). *****/\n" + "\n" + "delete globalThis.eval
[-] pred:  org. junit. Assert. assertNotNull ( StringToObject )

[*] target: assertEquals( "/***** Delete 2 object(s). *****/\n" + "\n" + "delete globalThis.eval
[-] pred:  org. junit. Assert. assertNotNull ( StringScenario )

[*] target: assertEquals( "/***** Delete 2 object(s). *****/\n" + "\n" + "delete globalThis.eval
[-] pred:  org

************************************
************************************
[+] input: testGetVersion() { "<AssertPlaceHolder>"; }
getVersion() { return Swc4jNative.coreGetVersion(); }
[*] target: assertEquals("1.0.0", swc4j.getVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, service. getVersion() ( ) )

[*] target: assertEquals("1.0.0", swc4j.getVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, connection. getVersion() ( ) )

[*] target: assertEquals("1.0.0", swc4j.getVersion())
[-] pred:  org. junit. Assert. assertEquals ( 6, controller. getVersion() ( ) )

[*] target: assertEquals("1.0.0", swc4j.getVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, controller. getVersion() ( ) )

[*] target: assertEquals("1.0.0", swc4j.getVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, dao. getVersion() ( ) )

************************************
************************************
[+] input: testGetVersion() { "<AssertPlaceHolder>"; }
coreGetVersion();
[*] target: assertEquals("1.0.0", Swc4jNative.coreGetVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, 1 )

[*] target: assertEquals("1.0.0", Swc4jNative.coreGetVersion())
[-] pred:  org. junit. Assert. assertEquals ( 1, n )

[*] target: assertEquals("1.0.0", Swc4jNative.coreGetVersion())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals("1.0.0", Swc4jNative.coreGetVersion())
[-] pred:  org. junit. Assert. assertEquals ( true, true )

[*] target: assertEquals("1.0.0", Swc4jNative.coreGetVersion())
[-] pred:  a unit test for junit

************************************
************************************
[+] input: Swc4jCoreException { String code = "const a = function() {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstVarDecl varDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstVarDecl.class), Swc4jAstType.VarDecl, 0, 23); Swc4jAstVarDeclarator varDeclarator = assertAst( varDecl, varDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 23); assertTrue(varDeclarator.getInit().isPresent()); Swc4jAstFnExpr fnExpr = assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstFnExpr.class), Swc4jAstType.FnExpr, 10, 23); assertFalse(fnExpr.getIdent().isPresent()); Swc4jAstFunction function = assertAst( fnExpr, fnExpr.getFunction(), Swc4jAstType.Function, 10, 23); assertFalse(function.isAsync()); assertFalse(function.isGenerator()); assertFalse(function.getReturnType().isPresent()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getTypeParams() { return typeParams; }
[*] target: assertFalse(function.getTypeParams().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( a, function. getTypeParams() ( ) )

[*] target: assertFalse(function.getTypeParams().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, a. getTypeParams() ( ) )

[*] target: assertFalse(function.getTypeParams().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( a, output. getTypeParams() ( ) )

[*] target: assertFalse(function.getTypeParams().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( a, function. getTypeParams() )

[*] target: assertFalse(function.getTypeParams().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, a )

************************************
************************************
[+] input: Swc4jCoreException { String code = "function a() {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstFnDecl fnDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstFnDecl.class), Swc4jAstType.FnDecl, 0, 15); assertFalse(fnDecl.isDeclare()); Swc4jAstIdent ident = assertAst( fnDecl, fnDecl.getIdent().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 9, 10); assertEquals("a", ident.getSym()); Swc4jAstFunction function = assertAst( fnDecl, fnDecl.getFunction(), Swc4jAstType.Function, 0, 15); assertFalse(function.isAsync()); assertFalse(function.isGenerator()); assertFalse(function.getReturnType().isPresent()); assertFalse(function.getTypeParams().isPresent()); assertTrue(function.getBody().isPresent()); Swc4jAstBlockStmt blockStmt = "<AssertPlaceHolder>"; assertTrue(blockStmt.getStmts().isEmpty()); assertSpan(code, script); }
getBody() { return body; }
[*] target: assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 13, 15)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. get());String code ) )

[*] target: assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 13, 15)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. get()); ( ) )

[*] target: assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 13, 15)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getBody ( ).()); ( ) )

[*] target: assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 13, 15)
[-] pred:  retrieves the body of this message

[*] target: assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 13, 15)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "function a(x, y) { function b(z) {} }"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstFnDecl fnDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstFnDecl.class), Swc4jAstType.FnDecl, 0, 37); assertFalse(fnDecl.isDeclare()); Swc4jAstIdent ident = assertAst( fnDecl, fnDecl.getIdent().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 9, 10); assertEquals("a", ident.getSym()); Swc4jAstFunction function = assertAst( fnDecl, fnDecl.getFunction(), Swc4jAstType.Function, 0, 37); assertFalse(function.isAsync()); assertFalse(function.isGenerator()); assertFalse(function.getReturnType().isPresent()); assertFalse(function.getTypeParams().isPresent()); assertTrue(function.getBody().isPresent()); assertEquals(2, function.getParams().size()); Swc4jAstParam param = assertAst( function, function.getParams().get(0).as(Swc4jAstParam.class), Swc4jAstType.Param, 11, 12); assertTrue(param.getDecorators().isEmpty()); Swc4jAstBindingIdent bindingIdent = assertAst( param, param.getPat().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 11, 12); ident = assertAst( bindingIdent, bindingIdent.getId().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 11, 12); assertEquals("x", ident.getSym()); param = assertAst( function, function.getParams().get(1).as(Swc4jAstParam.class), Swc4jAstType.Param, 14, 15); assertTrue(param.getDecorators().isEmpty()); bindingIdent = assertAst( param, param.getPat().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 14, 15); ident = assertAst( bindingIdent, bindingIdent.getId().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 14, 15); assertEquals("y", ident.getSym()); Swc4jAstBlockStmt blockStmt = assertAst( function, function.getBody().get(), Swc4jAstType.BlockStmt, 17, 37); fnDecl = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstFnDecl.class), Swc4jAstType.FnDecl, 19, 35); assertFalse(fnDecl.isDeclare()); ident = assertAst( fnDecl, fnDecl.getIdent().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 28, 29); assertEquals("b", ident.getSym()); function = assertAst( fnDecl, fnDecl.getFunction(), Swc4jAstType.Function, 19, 35); assertFalse(function.isAsync()); assertFalse(function.isGenerator()); assertFalse(function.getReturnType().isPresent()); assertFalse(function.getTypeParams().isPresent()); assertTrue(function.getBody().isPresent()); assertEquals(1, function.getParams().size()); param = assertAst( function, function.getParams().get(0).as(Swc4jAstParam.class), Swc4jAstType.Param, 30, 31); "<AssertPlaceHolder>"; bindingIdent = assertAst( param, param.getPat().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 30, 31); ident = assertAst( bindingIdent, bindingIdent.getId().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 30, 31); assertEquals("z", ident.getSym()); assertSpan(code, script); }
getDecorators() { return decorators; }
[*] target: assertTrue(param.getDecorators().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertTrue(param.getDecorators().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( actual, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertTrue(param.getDecorators().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertTrue(param.getDecorators().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( Swc4jFuture. get ( 0 ) ) ) )

[*] target: assertTrue(param.getDecorators().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( Swc4j integration ) ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "()=>{}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 6); Swc4jAstArrowExpr arrowExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrowExpr.class), Swc4jAstType.ArrowExpr, 0, 6); assertFalse(arrowExpr.isAsync()); assertFalse(arrowExpr.isGenerator()); assertFalse(arrowExpr.getReturnType().isPresent()); assertFalse(arrowExpr.getTypeParams().isPresent()); Swc4jAstBlockStmt blockStmt = "<AssertPlaceHolder>"; assertTrue(blockStmt.getStmts().isEmpty()); assertSpan(code, script); }
getBody() { return body; }
[*] target: assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 4, 6)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getBody ( ).()); ( ) )

[*] target: assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 4, 6)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getBody() ( ).()); ( ) )

[*] target: assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 4, 6)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getBodyAttribute ( ).()); ( ) )

[*] target: assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 4, 6)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getRequest ( ).()); ( ) )

[*] target: assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 4, 6)
[-] pred:  org. junit. Assert. assertTrue ( blockStmt. getBody ( ).()); ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "(a,b)=>{ return a+b; }"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 22); Swc4jAstArrowExpr arrowExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrowExpr.class), Swc4jAstType.ArrowExpr, 0, 22); assertFalse(arrowExpr.isAsync()); assertFalse(arrowExpr.isGenerator()); assertFalse(arrowExpr.getReturnType().isPresent()); assertFalse(arrowExpr.getTypeParams().isPresent()); Swc4jAstBlockStmt blockStmt = assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 7, 22); assertEquals(1, blockStmt.getStmts().size()); Swc4jAstReturnStmt returnStmt = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstReturnStmt.class), Swc4jAstType.ReturnStmt, 9, 20); assertTrue(returnStmt.getArg().isPresent()); Swc4jAstBinExpr binExpr = assertAst( returnStmt, returnStmt.getArg().get().as(Swc4jAstBinExpr.class), Swc4jAstType.BinExpr, 16, 19); Swc4jAstIdent ident = assertAst( binExpr, binExpr.getLeft().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 16, 17); assertEquals("a", ident.getSym()); assertEquals(Swc4jAstBinaryOp.Add, binExpr.getOp()); ident = assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 18, 19); assertEquals("b", ident.getSym()); assertEquals(2, arrowExpr.getParams().size()); Swc4jAstBindingIdent bindingIdent = assertAst( arrowExpr, arrowExpr.getParams().get(0).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 1, 2); ident = assertAst(bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 1, 2); assertEquals("a", ident.getSym()); bindingIdent = "<AssertPlaceHolder>"; ident = assertAst(bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 3, 4); assertEquals("b", ident.getSym()); assertSpan(code, script); }
getParams() { return params; }
[*] target: assertAst( arrowExpr, arrowExpr.getParams().get(1).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 3, 4)
[-] pred:  org. junit. Assert. assertEquals ( a+b, resolved )

[*] target: assertAst( arrowExpr, arrowExpr.getParams().get(1).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 3, 4)
[-] pred:  org. junit. Assert. assertEquals ( a+b, result )

[*] target: assertAst( arrowExpr, arrowExpr.getParams().get(1).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 3, 4)
[-] pred:  org. junit. Assert. assertEquals ( ""b"", "(a, b )

[*] target: assertAst( arrowExpr, arrowExpr.getParams().get(1).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 3, 4)
[-] pred:  org. junit. Assert. assertEquals ( ""b"", "(a,b"" )

[*] target: assertAst( arrowExpr, arrowExpr.getParams().get(1).as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 3, 4)
[-] pred:  org. junit. Assert. assertEquals ( a+b, Swc4j library. get ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a=1"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 3); Swc4jAstAssignExpr assignExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstAssignExpr.class), Swc4jAstType.AssignExpr, 0, 3); assertEquals(Swc4jAstAssignOp.Assign, assignExpr.getOp()); Swc4jAstBindingIdent bindingIdent = assertAst( assignExpr, assignExpr.getLeft().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 0, 1); Swc4jAstIdent ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstNumber number = "<AssertPlaceHolder>"; assertTrue(number.getRaw().isPresent()); assertEquals(1, number.getValue()); assertEquals("1", number.getRaw().get()); assertSpan(code, script); }
getRight() { return right; }
[*] target: assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 2, 3)
[-] pred:  org. junit. Assert. assertTrue ( number. get()); ( ) )

[*] target: assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 2, 3)
[-] pred:  org. junit. Assert. assertTrue ( number. get());String code ) )

[*] target: assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 2, 3)
[-] pred:  org. junit. Assert. assertTrue ( number.()); ( ) )

[*] target: assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 2, 3)
[-] pred:  org. junit. Assert. assertTrue ( number. get());()); ) )

[*] target: assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 2, 3)
[-] pred:  retrieves a number from the org

************************************
************************************
[+] input: Swc4jCoreException { String code = "await a;"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 8); Swc4jAstAwaitExpr awaitExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstAwaitExpr.class), Swc4jAstType.AwaitExpr, 0, 7); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("a", ident.getSym()); }
getArg() { return arg; }
[*] target: assertAst( awaitExpr, awaitExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ds. getArg() ( ) )

[*] target: assertAst( awaitExpr, awaitExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, returned. getArg() ( ) )

[*] target: assertAst( awaitExpr, awaitExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( code ), ds. getArg() ( ) )

[*] target: assertAst( awaitExpr, awaitExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang3. StringUtils. assertEquals ( code, ds. getArg() ( ) )

[*] target: assertAst( awaitExpr, awaitExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, polc4jAstTestTest. getArg() ( ) )

************************************
************************************
[+] input: testOpWithSpace() { Stream.of(Swc4jAstBinaryOp.values()) .filter(Swc4jAstBinaryOp::isSpaceRequired) .forEach(op -> { try { String code = "a " + op.getName() + " b"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 4 + op.getName().length()); Swc4jAstBinExpr binExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstBinExpr.class), Swc4jAstType.BinExpr, 0, 4 + op.getName().length()); Swc4jAstIdent ident = assertAst( binExpr, binExpr.getLeft().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); assertEquals(op, binExpr.getOp()); ident = "<AssertPlaceHolder>"; assertEquals("b", ident.getSym()); assertSpan(code, script); } catch (Throwable e) { fail(e); } }); }
getRight() { return right; }
[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 3 + op.getName().length(), 4 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getRight() ) == code ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 3 + op.getName().length(), 4 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getRight() )!= null ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 3 + op.getName().length(), 4 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getRight() ( ) ) instanceof org. apache. commons. lang. String ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 3 + op.getName().length(), 4 + op.getName().length())
[-] pred:  org. junit. Assert. assertEquals ( ""b"", ident. getRight() ( ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 3 + op.getName().length(), 4 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getRight() ( ) ) instanceof org. apache. tomcat. util. StringUtils ) )

************************************
************************************
[+] input: testOpWithoutSpace() { Stream.of(Swc4jAstBinaryOp.values()) .filter(op -> !op.isSpaceRequired()) .forEach(op -> { try { String code = "a" + op.getName() + "b"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 2 + op.getName().length()); Swc4jAstBinExpr binExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstBinExpr.class), Swc4jAstType.BinExpr, 0, 2 + op.getName().length()); Swc4jAstIdent ident = assertAst( binExpr, binExpr.getLeft().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); assertEquals(op, binExpr.getOp()); ident = "<AssertPlaceHolder>"; assertEquals("b", ident.getSym()); assertSpan(code, script); } catch (Throwable e) { fail(e); } }); }
getRight() { return right; }
[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1 + op.getName().length(), 2 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ""b"". equals ( org. apache. commons. lang3. StringUtils. join ( code, ""b"" ) ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1 + op.getName().length(), 2 + op.getName().length())
[-] pred:  org. junit. Assert. assertEquals ( ""b"", ident. getRight() ( ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1 + op.getName().length(), 2 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ""b"". equals ( ""b"" ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1 + op.getName().length(), 2 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ""b"". equals ( org. apache. commons. lang3. StringUtils. join ( code, ""a"" ) ) )

[*] target: assertAst( binExpr, binExpr.getRight().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1 + op.getName().length(), 2 + op.getName().length())
[-] pred:  org. junit. Assert. assertTrue ( ""b"". equals ( getOp()); ident ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a.b(c,d)"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 8); Swc4jAstCallExpr callExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstCallExpr.class), Swc4jAstType.CallExpr, 0, 8); assertEquals(2, callExpr.getArgs().size()); Swc4jAstExprOrSpread exprOrSpread = assertAst( callExpr, callExpr.getArgs().get(0).as(Swc4jAstExprOrSpread.class), Swc4jAstType.ExprOrSpread, 4, 5); Swc4jAstIdent ident = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5); assertEquals("c", ident.getSym()); exprOrSpread = assertAst( callExpr, callExpr.getArgs().get(1).as(Swc4jAstExprOrSpread.class), Swc4jAstType.ExprOrSpread, 6, 7); ident = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 6, 7); assertEquals("d", ident.getSym()); Swc4jAstMemberExpr memberExpr = "<AssertPlaceHolder>"; ident = assertAst( memberExpr, memberExpr.getObj().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstIdentName identName = assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3); assertEquals("b", identName.getSym()); assertSpan(code, script); }
getCallee() { return callee; }
[*] target: assertAst( callExpr, callExpr.getCallee().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3)
[-] pred:  org. junit. Assert. assertTrue ( memberExpr. getSuccessors ( ).()); ( ) )

[*] target: assertAst( callExpr, callExpr.getCallee().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3)
[-] pred:  org. junit. Assert. assertTrue ( memberExpr. getSuccessors ( ). contains ( code ) )

[*] target: assertAst( callExpr, callExpr.getCallee().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3)
[-] pred:  org. junit. Assert. assertTrue ( memberExpr. get());Line ( ) )

[*] target: assertAst( callExpr, callExpr.getCallee().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3)
[-] pred:  org. junit. Assert. assertTrue ( memberExpr. get()); ( ) )

[*] target: assertAst( callExpr, callExpr.getCallee().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3)
[-] pred:  org. junit. Assert. assertEquals ( code, memberExpr. getSuccessors ( ).()); ( ) )

************************************
************************************
[+] input: testValidNonOptional() { SimpleList.of("a", "x0", "_a", "$abc").forEach(code -> { Swc4jParseOutput output = null; try { output = swc4j.parse(code, jsScriptParseOptions); } catch (Throwable t) { fail(t); } Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, code.length()); Swc4jAstIdent ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, code.length()); assertEquals(code, ident.getSym()); "<AssertPlaceHolder>"; assertSpan(code, script); }); }
isOptional() { return optional; }
[*] target: assertFalse(ident.isOptional())
[-] pred:  org. junit. Assert. assertFalse ( script. isOptional() ( ) )

[*] target: assertFalse(ident.isOptional())
[-] pred:  org. junit. Assert. assertTrue ( script. isOptional() ( ) )

[*] target: assertFalse(ident.isOptional())
[-] pred:  org. junit. Assert. assertFalse ( ident. isOptional() ( ) )

[*] target: assertFalse(ident.isOptional())
[-] pred:  org. junit. Assert. assertFalse ( output. isOptional() ( ) )

[*] target: assertFalse(ident.isOptional())
[-] pred:  org. junit. Assert. assertFalse ( ds. isOptional() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a['b']"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 6); Swc4jAstMemberExpr memberExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 6); Swc4jAstIdent ident = assertAst( memberExpr, memberExpr.getObj().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstComputedPropName computedPropName = "<AssertPlaceHolder>"; Swc4jAstStr str = assertAst( computedPropName, computedPropName.getExpr().as(Swc4jAstStr.class), Swc4jAstType.Str, 2, 5); assertEquals("b", str.getValue()); assertSpan(code, script); }
getProp() { return prop; }
[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstComputedPropName.class), Swc4jAstType.ComputedPropName, 1, 6)
[-] pred:  org. junit. Assert. assertEquals ( ""b['b']"", computedPropName. getProp() )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstComputedPropName.class), Swc4jAstType.ComputedPropName, 1, 6)
[-] pred:  org. junit. Assert. assertEquals ( ""b['b']"", computedPropName. get ( 0 ) )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstComputedPropName.class), Swc4jAstType.ComputedPropName, 1, 6)
[-] pred:  org. junit. Assert. assertEquals ( ""b['b']"; Swc4jAstScript. getSuccessors ( code, computedPropName. getSuccessors ( ) )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstComputedPropName.class), Swc4jAstType.ComputedPropName, 1, 6)
[-] pred:  returns the code org

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstComputedPropName.class), Swc4jAstType.ComputedPropName, 1, 6)
[-] pred:  retrieves the code org

************************************
************************************
[+] input: Swc4jCoreException { String code = "a.b"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 3); Swc4jAstMemberExpr memberExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 3); Swc4jAstIdent ident = assertAst( memberExpr, memberExpr.getObj().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstIdentName identName = "<AssertPlaceHolder>"; assertEquals("b", identName.getSym()); assertSpan(code, script); }
getProp() { return prop; }
[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3)
[-] pred:  org. junit. Assert. assertEquals ( ""b"", identName. getProp() )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3)
[-] pred:  org. junit. Assert. assertEquals ( code, identName. getProp() )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3)
[-] pred:  org. junit. Assert. assertEquals ( ""a"", identName. getProp() )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3)
[-] pred:  org. junit. Assert. assertTrue ( ( ( identName. getProp() ) == code ) )

[*] target: assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 2, 3)
[-] pred:  org. junit. Assert. assertEquals ( ""b"", identName. getProp() ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "new A()"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 7); Swc4jAstNewExpr newExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstNewExpr.class), Swc4jAstType.NewExpr, 0, 7); assertTrue(newExpr.getArgs().isPresent()); assertTrue(newExpr.getArgs().get().isEmpty()); assertFalse(newExpr.getTypeArgs().isPresent()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("A", ident.getSym()); assertSpan(code, script); }
getCallee() { return callee; }
[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getCallc4jAstTest ident. getCallee()); ( ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getCallc4jAstMessageBuilder. getCallee()); ( ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getCalleeException ( ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertThat ( ident. getCallee());, org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getCallc4jAstTestTest. getCallc4jAstString code )

************************************
************************************
[+] input: Swc4jCoreException { String code = "new A"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 5); Swc4jAstNewExpr newExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstNewExpr.class), Swc4jAstType.NewExpr, 0, 5); assertFalse(newExpr.getArgs().isPresent()); assertFalse(newExpr.getTypeArgs().isPresent()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("A", ident.getSym()); assertSpan(code, script); }
getCallee() { return callee; }
[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getCallee()); )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertTrue ( ( ( getShort. getCallee()); ) ) instanceof Swc4jAstScript ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, appd. getCallee()); ( ) )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, appd. getCallee());. collec4jAstTestTest. is()); )

[*] target: assertAst( newExpr, newExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5)
[-] pred:  org. junit. Assert. assertEquals ( code, appd. getCallee());. collec4jAstTestTest. is()); ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "() => { return a,b,c; }"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 23); Swc4jAstArrowExpr arrowExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrowExpr.class), Swc4jAstType.ArrowExpr, 0, 23); Swc4jAstBlockStmt blockStmt = assertAst( arrowExpr, arrowExpr.getBody().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 6, 23); assertEquals(1, blockStmt.getStmts().size()); Swc4jAstReturnStmt returnStmt = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstReturnStmt.class), Swc4jAstType.ReturnStmt, 8, 21); assertTrue(returnStmt.getArg().isPresent()); Swc4jAstSeqExpr seqExpr = assertAst( returnStmt, returnStmt.getArg().get().as(Swc4jAstSeqExpr.class), Swc4jAstType.SeqExpr, 15, 20); assertEquals(3, seqExpr.getExprs().size()); assertEquals("a", seqExpr.getExprs().get(0).as(Swc4jAstIdent.class).getSym()); assertEquals("b", seqExpr.getExprs().get(1).as(Swc4jAstIdent.class).getSym()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getExprs() { return exprs; }
[*] target: assertEquals("c", seqExpr.getExprs().get(2).as(Swc4jAstIdent.class).getSym())
[-] pred:  org. junit. Assert. assertEquals ( ""a,b,c;"", a,b,c;. getExprs() ( ) )

[*] target: assertEquals("c", seqExpr.getExprs().get(2).as(Swc4jAstIdent.class).getSym())
[-] pred:  org. junit. Assert. assertEquals ( ""a,b,c;"", a,b,c; )

[*] target: assertEquals("c", seqExpr.getExprs().get(2).as(Swc4jAstIdent.class).getSym())
[-] pred:  org. junit. Assert. assertEquals ( ""a"", a,b,c;. getExprs() ( ) )

[*] target: assertEquals("c", seqExpr.getExprs().get(2).as(Swc4jAstIdent.class).getSym())
[-] pred:  org. junit. Assert. assertEquals ( a,b,c;, output. getExprs org. apache. tomcat. util. StringUtils. join ( output, c ) )

[*] target: assertEquals("c", seqExpr.getExprs().get(2).as(Swc4jAstIdent.class).getSym())
[-] pred:  org. junit. Assert. assertEquals ( a,b,c;, output. getExprs org. apache. tomcat. util. StringUtils. join ( stdout, trailing ) )

************************************
************************************
[+] input: Swc4jCoreException { List<Swc4jAstUnaryOp> opList = SimpleList.of( Swc4jAstUnaryOp.Bang, Swc4jAstUnaryOp.Minus, Swc4jAstUnaryOp.Plus, Swc4jAstUnaryOp.Tilde); for (Swc4jAstUnaryOp op : opList) { String code = op.getName() + "a"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, code.length()); Swc4jAstUnaryExpr unaryExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstUnaryExpr.class), Swc4jAstType.UnaryExpr, 0, code.length()); assertEquals(op, unaryExpr.getOp()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("a", ident.getSym()); assertSpan(code, script); } }
getArg() { return arg; }
[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 3 ), ident. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 4 ), ident. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 4 ), ds. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 3 ), ds. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 5 ), ident. getArg() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { List<Swc4jAstUnaryOp> opList = SimpleList.of( Swc4jAstUnaryOp.Delete, Swc4jAstUnaryOp.TypeOf, Swc4jAstUnaryOp.Void); for (Swc4jAstUnaryOp op : opList) { String code = op.getName() + " a"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, code.length()); Swc4jAstUnaryExpr unaryExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstUnaryExpr.class), Swc4jAstType.UnaryExpr, 0, code.length()); assertEquals(op, unaryExpr.getOp()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("a", ident.getSym()); assertSpan(code, script); } }
getArg() { return arg; }
[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 3 ), ident. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 4 ), ident. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 4 ), ds. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 5 ), ident. getArg() ( ) )

[*] target: assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstIdent.class), Swc4jAstType.Ident, code.length() - 1, code.length())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 3 ), ds. getArg() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "[]"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 2); Swc4jAstArrayLit arrayLit = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrayLit.class), Swc4jAstType.ArrayLit, 0, 2); "<AssertPlaceHolder>"; assertSpan(code, script); }
getElems() { return elems; }
[*] target: assertTrue(arrayLit.getElems().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, tx. getElems() ( ) )

[*] target: assertTrue(arrayLit.getElems().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, readString. getElems() ( ) )

[*] target: assertTrue(arrayLit.getElems().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, quoted. getElems() ( ) )

[*] target: assertTrue(arrayLit.getElems().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, align alignByIndex )

[*] target: assertTrue(arrayLit.getElems().isEmpty())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "[1,'a',true]"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 12); Swc4jAstArrayLit arrayLit = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrayLit.class), Swc4jAstType.ArrayLit, 0, 12); assertEquals(3, arrayLit.getElems().size()); Swc4jAstExprOrSpread exprOrSpread = assertAst( arrayLit, arrayLit.getElems().get(0).get(), Swc4jAstType.ExprOrSpread, 1, 2); // Number Swc4jAstNumber number = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstNumber.class), Swc4jAstType.Number, 1, 2); assertEquals(1, number.getValue()); assertTrue(number.getRaw().isPresent()); assertEquals("1", number.getRaw().get()); // Str exprOrSpread = assertAst( arrayLit, arrayLit.getElems().get(1).get(), Swc4jAstType.ExprOrSpread, 3, 6); Swc4jAstStr str = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstStr.class), Swc4jAstType.Str, 3, 6); assertTrue(str.getRaw().isPresent()); assertEquals("a", str.getValue()); assertEquals("'a'", str.getRaw().get()); // Bool exprOrSpread = "<AssertPlaceHolder>"; Swc4jAstBool b = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstBool.class), Swc4jAstType.Bool, 7, 11); assertTrue(b.isValue()); assertSpan(code, script); }
getElems() { return elems; }
[*] target: assertAst( arrayLit, arrayLit.getElems().get(2).get(), Swc4jAstType.ExprOrSpread, 7, 11)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( code, exprOrSpread ) )

[*] target: assertAst( arrayLit, arrayLit.getElems().get(2).get(), Swc4jAstType.ExprOrSpread, 7, 11)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( code ) )

[*] target: assertAst( arrayLit, arrayLit.getElems().get(2).get(), Swc4jAstType.ExprOrSpread, 7, 11)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( code ) )

[*] target: assertAst( arrayLit, arrayLit.getElems().get(2).get(), Swc4jAstType.ExprOrSpread, 7, 11)
[-] pred:  retrieves the code org

[*] target: assertAst( arrayLit, arrayLit.getElems().get(2).get(), Swc4jAstType.ExprOrSpread, 7, 11)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "1234567890123456789012345678901234567890n"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 41); Swc4jAstBigInt bigInt = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstBigInt.class), Swc4jAstType.BigInt, 0, 41); assertEquals("1234567890123456789012345678901234567890n", bigInt.getRaw().get()); assertEquals("1234567890123456789012345678901234567890", bigInt.getValue().toString()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getSign() { return sign; }
[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertTrue ( ( ( bigInt. getSign() ( ) ) instanceof Swc4jAst ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( bigInt. getSign() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertTrue ( ( ( bigInt. getSign() ( ) ) instanceof Swc4jHomeException ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertTrue ( ( ( bigInt. getSign() ( ) ) instanceof Swc4jHomeHome ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "-1n"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 3); Swc4jAstUnaryExpr unaryExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstUnaryExpr.class), Swc4jAstType.UnaryExpr, 0, 3); assertEquals(Swc4jAstUnaryOp.Minus, unaryExpr.getOp()); Swc4jAstBigInt bigInt = assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstBigInt.class), Swc4jAstType.BigInt, 1, 3); assertEquals("1n", bigInt.getRaw().get()); assertEquals(BigInteger.ONE, bigInt.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getSign() { return sign; }
[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ). get()); org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "+1n"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 3); Swc4jAstUnaryExpr unaryExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstUnaryExpr.class), Swc4jAstType.UnaryExpr, 0, 3); assertEquals(Swc4jAstUnaryOp.Plus, unaryExpr.getOp()); Swc4jAstBigInt bigInt = assertAst( unaryExpr, unaryExpr.getArg().as(Swc4jAstBigInt.class), Swc4jAstType.BigInt, 1, 3); assertEquals("1n", bigInt.getRaw().get()); assertEquals(BigInteger.ONE, bigInt.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getSign() { return sign; }
[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getSign() ( ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getSign() ( ).()); ( ) ) == code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.Plus, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( output. getSign() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( true ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "0n"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 2); Swc4jAstBigInt bigInt = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstBigInt.class), Swc4jAstType.BigInt, 0, 2); assertTrue(bigInt.getRaw().isPresent()); assertEquals("0n", bigInt.getRaw().get()); assertEquals(BigInteger.ZERO, bigInt.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getSign() { return sign; }
[*] target: assertEquals(Swc4jAstBigIntSign.NoSign, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( code, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( bigInt. getSign() ( ) ) ) )

[*] target: assertEquals(Swc4jAstBigIntSign.NoSign, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( bigInt. getSign() ( ). get()); org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertEquals(Swc4jAstBigIntSign.NoSign, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( bigInt. getSign() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.NoSign, bigInt.getSign())
[-] pred:  org. junit. Assert. assertThat ( bigInt. getSign() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals(Swc4jAstBigIntSign.NoSign, bigInt.getSign())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "true"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 4); Swc4jAstBool bool = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstBool.class), Swc4jAstType.Bool, 0, 4); "<AssertPlaceHolder>"; assertSpan(code, script); }
isValue() { return value; }
[*] target: assertTrue(bool.isValue())
[-] pred:  org. junit. Assert. assertTrue ( ( ( bool. isValue() ( ) ) == code ) )

[*] target: assertTrue(bool.isValue())
[-] pred:  org. junit. Assert. assertTrue ( (! ( bool. isValue() ( ) ) ) )

[*] target: assertTrue(bool.isValue())
[-] pred:  org. junit. Assert. assertTrue ( ( ( boolean ) ( bool. isValue() ( ) ) ) )

[*] target: assertTrue(bool.isValue())
[-] pred:  org. junit. Assert. assertTrue ( ( ( boolean ) ( output. isValue() ( ) ) ) )

[*] target: assertTrue(bool.isValue())
[-] pred:  org. junit. Assert. assertTrue ( bool. isValue() ( code ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "<h1>    \n    test    \n    </h1>"; Swc4jParseOutput output = swc4j.parse(code, jsxScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 31); Swc4jAstJsxElement jsxElement = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstJsxElement.class), Swc4jAstType.JsxElement, 0, 31); assertTrue(jsxElement.getClosing().isPresent()); Swc4jAstJsxClosingElement jsxClosingElement = assertAst( jsxElement, jsxElement.getClosing().get().as(Swc4jAstJsxClosingElement.class), Swc4jAstType.JsxClosingElement, 26, 31, 3, 5); Swc4jAstIdent ident = assertAst( jsxClosingElement, jsxClosingElement.getName().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 28, 30, 3, 7); assertEquals("h1", ident.getSym()); Swc4jAstJsxOpeningElement jsxOpeningElement = assertAst( jsxElement, jsxElement.getOpening().as(Swc4jAstJsxOpeningElement.class), Swc4jAstType.JsxOpeningElement, 0, 4); assertFalse(jsxOpeningElement.isSelfClosing()); assertFalse(jsxOpeningElement.getTypeArgs().isPresent()); ident = assertAst( jsxOpeningElement, jsxOpeningElement.getName().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1, 3); assertEquals("h1", ident.getSym()); Swc4jAstJsxText jsxText = assertAst( jsxElement, jsxElement.getChildren().get(0).as(Swc4jAstJsxText.class), Swc4jAstType.JsxText, 4, 26); assertEquals("    \n    test    \n    ", jsxText.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("    \n    test    \n    ", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertTrue ( org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals("    \n    test    \n    ", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertTrue ( ( ( code. length ( ) ) > 0 ) )

[*] target: assertEquals("    \n    test    \n    ", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang. StringUtils. toString ( code ) )

[*] target: assertEquals("    \n    test    \n    ", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang. String. format ( code ) )

[*] target: assertEquals("    \n    test    \n    ", jsxText.getRaw())
[-] pred:  retrieves a code org

************************************
************************************
[+] input: Swc4jCoreException { String code = "<h1>test</h1>"; Swc4jParseOutput output = swc4j.parse(code, jsxScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 13); Swc4jAstJsxElement jsxElement = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstJsxElement.class), Swc4jAstType.JsxElement, 0, 13); assertTrue(jsxElement.getClosing().isPresent()); Swc4jAstJsxClosingElement jsxClosingElement = assertAst( jsxElement, jsxElement.getClosing().get().as(Swc4jAstJsxClosingElement.class), Swc4jAstType.JsxClosingElement, 8, 13); Swc4jAstIdent ident = assertAst( jsxClosingElement, jsxClosingElement.getName().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 10, 12); assertEquals("h1", ident.getSym()); Swc4jAstJsxOpeningElement jsxOpeningElement = assertAst( jsxElement, jsxElement.getOpening().as(Swc4jAstJsxOpeningElement.class), Swc4jAstType.JsxOpeningElement, 0, 4); assertFalse(jsxOpeningElement.isSelfClosing()); assertFalse(jsxOpeningElement.getTypeArgs().isPresent()); ident = assertAst( jsxOpeningElement, jsxOpeningElement.getName().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1, 3); assertEquals("h1", ident.getSym()); Swc4jAstJsxText jsxText = assertAst( jsxElement, jsxElement.getChildren().get(0).as(Swc4jAstJsxText.class), Swc4jAstType.JsxText, 4, 8); assertEquals("test", jsxText.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("test", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, orgh1>test</h1>"" )

[*] target: assertEquals("test", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, orgh1.test</h1>"" )

[*] target: assertEquals("test", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, orgh1>test</h1>"" 0 )

[*] target: assertEquals("test", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, orgh1>test</h1>"

[*] target: assertEquals("test", jsxText.getRaw())
[-] pred:  org. junit. Assert. assertEquals ( code, code )

************************************
************************************
[+] input: testCoercion() { assertEquals("0", Swc4jAstNumber.create(0).getRaw().get()); assertEquals("1", Swc4jAstNumber.create(1).getRaw().get()); assertEquals("-1", Swc4jAstNumber.create(-1).getRaw().get()); assertEquals("-1", Swc4jAstNumber.create(-1, "-1.0").toString()); assertEquals("1", Swc4jAstNumber.create(1, "+1.0").toString()); assertEquals("1.1", Swc4jAstNumber.create(1.1D).toString()); assertEquals("-1.1", Swc4jAstNumber.create(-1.1D).toString()); assertEquals("1.1e+20", Swc4jAstNumber.create(1.1e20D).toString()); assertEquals("1.23e+21", Swc4jAstNumber.create(12.30e20D).toString()); assertEquals("1.234e+21", Swc4jAstNumber.create(12.340e20D, "12.340e20").toString()); assertEquals("-1.234e+21", Swc4jAstNumber.create(12.340e20D, "-12.340e20").toString()); assertEquals("1.234e+21", Swc4jAstNumber.create(12.340e20D, "12.34000e20").toString()); assertEquals("Infinity", Swc4jAstNumber.create(Double.POSITIVE_INFINITY).toString()); assertEquals("Infinity", Swc4jAstNumber.create(Double.POSITIVE_INFINITY, "1e309").toString()); assertEquals("Infinity", Swc4jAstNumber.create(Double.POSITIVE_INFINITY, "+1e309").toString()); assertEquals("Infinity", Swc4jAstNumber.create(Double.POSITIVE_INFINITY, "1.23e309").toString()); assertEquals("Infinity", Swc4jAstNumber.create(Double.POSITIVE_INFINITY, "+1.23e309").toString()); assertEquals("-Infinity", Swc4jAstNumber.create(Double.NEGATIVE_INFINITY).toString()); assertEquals("-Infinity", Swc4jAstNumber.create(Double.NEGATIVE_INFINITY, "-1e309").toString()); assertEquals("-Infinity", Swc4jAstNumber.create(Double.NEGATIVE_INFINITY, "-1.23e309").toString()); assertEquals("1.1e-20", Swc4jAstNumber.create(1.1e-20D).toString()); assertEquals("-1.1e-20", Swc4jAstNumber.create(-1.1e-20D).toString()); assertEquals(1, Swc4jAstNumber.create(1.1D).asInt()); assertEquals(-1, Swc4jAstNumber.create(-1.1D).asInt()); assertEquals("NaN", Swc4jAstNumber.create(Double.NaN).toString()); "<AssertPlaceHolder>"; }
asInt() { return ((Double) value).intValue(); }
[*] target: assertEquals(0, Swc4jAstNumber.create(Double.NaN).asInt())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. toString ( ) ) )

[*] target: assertEquals(0, Swc4jAstNumber.create(Double.NaN).asInt())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. toString (()); ) ) )

[*] target: assertEquals(0, Swc4jAstNumber.create(Double.NaN).asInt())
[-] pred:  org. junit. Assert. assertThat ( rendered example, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. toString ( ) ) )

[*] target: assertEquals(0, Swc4jAstNumber.create(Double.NaN).asInt())
[-] pred:  get());URL representation of this object

[*] target: assertEquals(0, Swc4jAstNumber.create(Double.NaN).asInt())
[-] pred:  get());URL representation

************************************
************************************
[+] input: Swc4jCoreException { String code = "12.34"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 5); Swc4jAstNumber number = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstNumber.class), Swc4jAstType.Number, 0, 5); assertEquals(12.34D, number.getValue(), 0.0001D); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("12.34", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRaw() ( ) )

[*] target: assertEquals("12.34", number.getRaw().get())
[-] pred:  org. junit. Assert. assertTrue ( number. getRaw() ( ). startsWith ( code ) )

[*] target: assertEquals("12.34", number.getRaw().get())
[-] pred:  org. junit. Assert. assertTrue ( number. getRaw() ( ). contains ( code ) )

[*] target: assertEquals("12.34", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRawRevision ( ) )

[*] target: assertEquals("12.34", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRaw() )

************************************
************************************
[+] input: Swc4jCoreException { String code = "12345"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 5); Swc4jAstNumber number = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstNumber.class), Swc4jAstType.Number, 0, 5); assertEquals(12345, number.asInt()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("12345", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRaw() ( ) )

[*] target: assertEquals("12345", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRaw() ( ). toString ( ) )

[*] target: assertEquals("12345", number.getRaw().get())
[-] pred:  org. junit. Assert. assertTrue ( number. getRaw() ( ). contains ( code ) )

[*] target: assertEquals("12345", number.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, number. getRaw() )

[*] target: assertEquals("12345", number.getRaw().get())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "a={}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 4); Swc4jAstAssignExpr assignExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstAssignExpr.class), Swc4jAstType.AssignExpr, 0, 4); assertEquals(Swc4jAstAssignOp.Assign, assignExpr.getOp()); Swc4jAstBindingIdent bindingIdent = assertAst( assignExpr, assignExpr.getLeft().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 0, 1); Swc4jAstIdent ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstObjectLit objectLit = assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstObjectLit.class), Swc4jAstType.ObjectLit, 2, 4); "<AssertPlaceHolder>"; assertSpan(code, script); }
getProps() { return props; }
[*] target: assertTrue(objectLit.getProps().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( code ) )

[*] target: assertTrue(objectLit.getProps().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getProps() ( ). length ( ) ) > 0 ) )

[*] target: assertTrue(objectLit.getProps().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( code ) )

[*] target: assertTrue(objectLit.getProps().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getProps() ( ).()); ( 1000 ) ) && ( arg. contains ( code ) ) ) )

[*] target: assertTrue(objectLit.getProps().isEmpty())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getProps() ( ).()); ( Swc4jAstTest. getPropsProps ( ) ) ) >= 0 ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a={a:1,b:'x',c:true}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 20); Swc4jAstAssignExpr assignExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstAssignExpr.class), Swc4jAstType.AssignExpr, 0, 20); assertEquals(Swc4jAstAssignOp.Assign, assignExpr.getOp()); Swc4jAstBindingIdent bindingIdent = assertAst( assignExpr, assignExpr.getLeft().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 0, 1); Swc4jAstIdent ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstObjectLit objectLit = assertAst( assignExpr, assignExpr.getRight().as(Swc4jAstObjectLit.class), Swc4jAstType.ObjectLit, 2, 20); // Number Swc4jAstKeyValueProp keyValueProp = assertAst( objectLit, objectLit.getProps().get(0).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 3, 6); Swc4jAstIdentName identName = assertAst( keyValueProp, keyValueProp.getKey().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 3, 4); assertEquals("a", identName.getSym()); Swc4jAstNumber number = assertAst( keyValueProp, keyValueProp.getValue().as(Swc4jAstNumber.class), Swc4jAstType.Number, 5, 6); assertEquals(1, number.getValue()); assertTrue(number.getRaw().isPresent()); assertEquals("1", number.getRaw().get()); // Str keyValueProp = assertAst( objectLit, objectLit.getProps().get(1).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 7, 12); identName = assertAst( keyValueProp, keyValueProp.getKey().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 7, 8); assertEquals("b", identName.getSym()); Swc4jAstStr str = assertAst( keyValueProp, keyValueProp.getValue().as(Swc4jAstStr.class), Swc4jAstType.Str, 9, 12); assertTrue(str.getRaw().isPresent()); assertEquals("x", str.getValue()); assertEquals("'x'", str.getRaw().get()); // Bool keyValueProp = "<AssertPlaceHolder>"; identName = assertAst( keyValueProp, keyValueProp.getKey().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 13, 14); assertEquals("c", identName.getSym()); Swc4jAstBool b = assertAst( keyValueProp, keyValueProp.getValue().as(Swc4jAstBool.class), Swc4jAstType.Bool, 15, 19); assertTrue(b.isValue()); assertSpan(code, script); }
getProps() { return props; }
[*] target: assertAst( objectLit, objectLit.getProps().get(2).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 13, 19)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( code ) )

[*] target: assertAst( objectLit, objectLit.getProps().get(2).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 13, 19)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertAst( objectLit, objectLit.getProps().get(2).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 13, 19)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( code ) )

[*] target: assertAst( objectLit, objectLit.getProps().get(2).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 13, 19)
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( code ) ) )

[*] target: assertAst( objectLit, objectLit.getProps().get(2).as(Swc4jAstKeyValueProp.class), Swc4jAstType.KeyValueProp, 13, 19)
[-] pred:  retrieves the code attribute as a

************************************
************************************
[+] input: Swc4jCoreException { String code = "/abc/ig"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 7); Swc4jAstRegex regex = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstRegex.class), Swc4jAstType.Regex, 0, 7); assertEquals("abc", regex.getExp()); assertEquals("ig", regex.getFlags()); "<AssertPlaceHolder>"; assertSpan(code, script); }
toString() { return "/" + exp + "/" + flags; }
[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( output. toString ( ). contains ( code ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. toString ( ). length ( ) ) > 0 ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( message. contains ( code ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( message. contains ( format ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  retrieves a code

************************************
************************************
[+] input: Swc4jCoreException { String code = "/abc/"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 5); Swc4jAstRegex regex = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstRegex.class), Swc4jAstType.Regex, 0, 5); assertEquals("abc", regex.getExp()); assertEquals("", regex.getFlags()); "<AssertPlaceHolder>"; assertSpan(code, script); }
toString() { return "/" + exp + "/" + flags; }
[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( output. toString ( ). contains ( code ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( ( ( code. length ( ) ) >= 0 ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. toString ( ). length ( ) ) > 0 ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  org. junit. Assert. assertTrue ( message. contains ( code ) )

[*] target: assertEquals(code, regex.toString())
[-] pred:  retrieves a code

************************************
************************************
[+] input: Swc4jCoreException { String code = "''"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 2); Swc4jAstStr str = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstStr.class), Swc4jAstType.Str, 0, 2); assertEquals("", str.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("''", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getRaw() ( ) )

[*] target: assertEquals("''", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang3. StringUtils. toString ( output. getRaw() ( ) ) )

[*] target: assertEquals("''", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang3. StringUtils. join ( output, c ) )

[*] target: assertEquals("''", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getRaw() ( ). toString ( ) )

[*] target: assertEquals("''", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, stylesheet. getRaw() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "'abc'"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 5); Swc4jAstStr str = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstStr.class), Swc4jAstType.Str, 0, 5); assertEquals("abc", str.getValue()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getRaw() { return raw; }
[*] target: assertEquals("'abc'", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getRaw() ( ) )

[*] target: assertEquals("'abc'", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang3. StringUtils. join ( output, c ) )

[*] target: assertEquals("'abc'", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, org. apache. commons. lang3. StringUtils. join ( output,, code ) )

[*] target: assertEquals("'abc'", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, echo. getRaw() ( ) )

[*] target: assertEquals("'abc'", str.getRaw().get())
[-] pred:  org. junit. Assert. assertEquals ( code, stylesheet. getRaw() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a?.b(c,d)"; Swc4jParseOutput output = swc4j.parse(code, jsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 9); Swc4jAstOptChainExpr optChainExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 9); assertFalse(optChainExpr.isOptional()); Swc4jAstOptCall optCall = assertAst( optChainExpr, optChainExpr.getBase().as(Swc4jAstOptCall.class), Swc4jAstType.OptCall, 0, 9); assertFalse(optCall.getTypeArgs().isPresent()); assertEquals(2, optCall.getArgs().size()); Swc4jAstExprOrSpread exprOrSpread = assertAst( optCall, optCall.getArgs().get(0), Swc4jAstType.ExprOrSpread, 5, 6); Swc4jAstIdent ident = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 5, 6); assertEquals("c", ident.getSym()); exprOrSpread = assertAst( optCall, optCall.getArgs().get(1), Swc4jAstType.ExprOrSpread, 7, 8); ident = assertAst( exprOrSpread, exprOrSpread.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 7, 8); assertEquals("d", ident.getSym()); Swc4jAstOptChainExpr childOptChainExpr = "<AssertPlaceHolder>"; assertTrue(childOptChainExpr.isOptional()); Swc4jAstMemberExpr memberExpr = assertAst( childOptChainExpr, childOptChainExpr.getBase().as(Swc4jAstMemberExpr.class), Swc4jAstType.MemberExpr, 0, 4); ident = assertAst( memberExpr, memberExpr.getObj().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 0, 1); assertEquals("a", ident.getSym()); Swc4jAstIdentName identName = assertAst( memberExpr, memberExpr.getProp().as(Swc4jAstIdentName.class), Swc4jAstType.IdentName, 3, 4); assertEquals("b", identName.getSym()); assertSpan(code, script); }
getCallee() { return callee; }
[*] target: assertAst( optCall, optCall.getCallee().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 4)
[-] pred:  org. junit. Assert. assertTrue ( childOptChainExpr. get());Line ( ) )

[*] target: assertAst( optCall, optCall.getCallee().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 4)
[-] pred:  org. junit. Assert. assertTrue ( childOptChainExpr. get()); ( ) )

[*] target: assertAst( optCall, optCall.getCallee().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 4)
[-] pred:  org. junit. Assert. assertTrue ( childOptChainExpr. get());Line ) )

[*] target: assertAst( optCall, optCall.getCallee().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 4)
[-] pred:  org. junit. Assert. assertTrue ( childOptChainExpr.()); ( code ) )

[*] target: assertAst( optCall, optCall.getCallee().as(Swc4jAstOptChainExpr.class), Swc4jAstType.OptChainExpr, 0, 4)
[-] pred:  org. junit. Assert. assertTrue ( childOptChain. get());Line ( ). contains ( code ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "(a: number = 1) => {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstExprStmt exprStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 0, 21); Swc4jAstArrowExpr arrowExpr = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstArrowExpr.class), Swc4jAstType.ArrowExpr, 0, 21); assertFalse(arrowExpr.isAsync()); assertFalse(arrowExpr.isGenerator()); assertFalse(arrowExpr.getReturnType().isPresent()); assertFalse(arrowExpr.getTypeParams().isPresent()); assertEquals(1, arrowExpr.getParams().size()); Swc4jAstAssignPat assignPat = assertAst( arrowExpr, arrowExpr.getParams().get(0).as(Swc4jAstAssignPat.class), Swc4jAstType.AssignPat, 1, 14); Swc4jAstBindingIdent bindingIdent = assertAst( assignPat, assignPat.getLeft().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 1, 10); // TODO There is a bug that the span of Ident is the same with the BindingIdent. Swc4jAstIdent ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 1, 10); assertEquals("a", ident.getSym()); assertTrue(bindingIdent.getTypeAnn().isPresent()); assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 2, 10); Swc4jAstNumber number = "<AssertPlaceHolder>"; assertTrue(number.getRaw().isPresent()); assertEquals("1", number.getRaw().get()); assertEquals(1, number.getValue()); assertSpan(code, script); }
getRight() { return right; }
[*] target: assertAst( assignPat, assignPat.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 13, 14)
[-] pred:  org. junit. Assert. assertEquals ( 3, number. get ( 0 ) )

[*] target: assertAst( assignPat, assignPat.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 13, 14)
[-] pred:  org. junit. Assert. assertEquals ( 3, number. get());Location ( ) )

[*] target: assertAst( assignPat, assignPat.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 13, 14)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. toString ( code ), number. get());String )

[*] target: assertAst( assignPat, assignPat.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 13, 14)
[-] pred:  org. junit. Assert. assertTrue ( ( ( number. get ( 0 ) ) instanceof org. apache. tomcat. util. StringUtils ) )

[*] target: assertAst( assignPat, assignPat.getRight().as(Swc4jAstNumber.class), Swc4jAstType.Number, 13, 14)
[-] pred:  retrieves the number from radians

************************************
************************************
[+] input: Swc4jCoreException { String code = "const a: number"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstVarDecl varDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstVarDecl.class), Swc4jAstType.VarDecl, 0, 15); assertFalse(varDecl.isDeclare()); assertEquals(Swc4jAstVarDeclKind.Const, varDecl.getKind()); assertEquals(1, varDecl.getDecls().size()); Swc4jAstVarDeclarator varDeclarator = assertAst( varDecl, varDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 15); Swc4jAstBindingIdent bindingIdent = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 6, 15); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("a", ident.getSym()); assertSpan(code, script); }
getId() { return id; }
[*] target: assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, Swc4jAstIdent ident. getId() ( ) )

[*] target: assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( number, Swc4jAstIdent ident. getId() ( ) )

[*] target: assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, Swc4jAstIdentIdent. getId() ( ) )

[*] target: assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( number, Swc4jAstIdentIdent. getId() ( ) )

[*] target: assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7)
[-] pred:  number of Swc4j

************************************
************************************
[+] input: Exception { String code = "function b(a: number = 1) {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstFnDecl fnDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstFnDecl.class), Swc4jAstType.FnDecl, 0, 28); assertFalse(fnDecl.isDeclare()); Swc4jAstIdent ident = assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10); assertEquals("b", ident.getSym()); Swc4jAstFunction function = assertAst( fnDecl, fnDecl.getFunction(), Swc4jAstType.Function, 0, 28); assertEquals(1, function.getParams().size()); Swc4jAstParam param = assertAst( function, function.getParams().get(0), Swc4jAstType.Param, 11, 24); Swc4jAstAssignPat assignPat = assertAst( param, param.getPat().as(Swc4jAstAssignPat.class), Swc4jAstType.AssignPat, 11, 24); Swc4jAstBindingIdent bindingIdent = assertAst( assignPat, assignPat.getLeft().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 11, 20); ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 11, 12); assertEquals("a", ident.getSym()); assertTrue(bindingIdent.getTypeAnn().isPresent()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getTypeAnn() { return typeAnn; }
[*] target: assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 12, 20)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( code ) )

[*] target: assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 12, 20)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. contains ( code ) )

[*] target: assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 12, 20)
[-] pred:  org. junit. Assert. assertTrue ( ( ( org. apache. commons. lang. System. currentTimeMillis ( ) ) > 0 ) )

[*] target: assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 12, 20)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( output. get ( 0 ) ) )

[*] target: assertAst(bindingIdent, bindingIdent.getTypeAnn().get(), Swc4jAstType.TsTypeAnn, 12, 20)
[-] pred:  retrieves the code

************************************
************************************
[+] input: IOException { File scriptFile = new File(OSUtils.WORKING_DIRECTORY, "scripts/ts/change_swc4j_version.ts"); String code = new String(Files.readAllBytes(scriptFile.toPath())); Swc4jParseOutput output = swc4j.parse(code, tsModuleParseOptions); Swc4jAstModule module = output.getProgram().as(Swc4jAstModule.class); Swc4jAstCounterVisitor visitor = new Swc4jAstCounterVisitor(); module.visit(visitor); int totalNodeCount = visitor.getCounterMap().values().stream().mapToInt(AtomicInteger::get).sum(); "<AssertPlaceHolder>"; SimpleList.of(Swc4jAstType.ImportDecl, Swc4jAstType.ImportStarAsSpecifier, Swc4jAstType.ClassMethod, Swc4jAstType.ExprStmt, Swc4jAstType.ExprOrSpread, Swc4jAstType.CallExpr, Swc4jAstType.Str, Swc4jAstType.Number, Swc4jAstType.MemberExpr, Swc4jAstType.ThisExpr, Swc4jAstType.Regex, Swc4jAstType.Ident, Swc4jAstType.BindingIdent, Swc4jAstType.ArrayLit, Swc4jAstType.VarDecl, Swc4jAstType.VarDeclarator) .forEach(type -> assertTrue(visitor.get(type) > 1, type.name() + " should appear more than once")); SimpleList.of(Swc4jAstType.ClassDecl, Swc4jAstType.Constructor) .forEach(type -> assertEquals(1, visitor.get(type), type.name() + " should appear once")); assertSpan(code, module); }
visit(ISwc4jAstVisitor visitor) { switch (visitor.visitModule(this)) { case Error: return Swc4jAstVisitorResponse.Error; case OkAndBreak: return Swc4jAstVisitorResponse.OkAndContinue; default: return super.visit(visitor); } }
[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( 200, totalNodeCount )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( code, totalNodeCount )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( totalNodeCount, 0 )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( 1, totalNodeCount )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org

************************************
************************************
[+] input: IOException { File scriptFile = new File(OSUtils.WORKING_DIRECTORY, "scripts/ts/copy_swc4j_lib.ts"); String code = new String(Files.readAllBytes(scriptFile.toPath())); Swc4jParseOutput output = swc4j.parse(code, tsModuleParseOptions); Swc4jAstModule module = output.getProgram().as(Swc4jAstModule.class); Swc4jAstCounterVisitor visitor = new Swc4jAstCounterVisitor(); module.visit(visitor); int totalNodeCount = visitor.getCounterMap().values().stream().mapToInt(AtomicInteger::get).sum(); "<AssertPlaceHolder>"; SimpleList.of(Swc4jAstType.ImportDecl, Swc4jAstType.ImportStarAsSpecifier, Swc4jAstType.KeyValueProp, Swc4jAstType.ExprStmt, Swc4jAstType.ExprOrSpread, Swc4jAstType.CallExpr, Swc4jAstType.Str, Swc4jAstType.Number, Swc4jAstType.TplElement, Swc4jAstType.Ident, Swc4jAstType.BindingIdent, Swc4jAstType.ArrayLit, Swc4jAstType.BlockStmt, Swc4jAstType.VarDecl, Swc4jAstType.VarDeclarator) .forEach(type -> assertTrue(visitor.get(type) > 1, type.name() + " should appear more than once")); assertSpan(code, module); }
visit(ISwc4jAstVisitor visitor) { switch (visitor.visitModule(this)) { case Error: return Swc4jAstVisitorResponse.Error; case OkAndBreak: return Swc4jAstVisitorResponse.OkAndContinue; default: return super.visit(visitor); } }
[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( 200, totalNodeCount )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( totalNodeCount, 0 )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( code, totalNodeCount )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org. junit. Assert. assertEquals ( totalNodeCount, 1 )

[*] target: assertTrue(totalNodeCount > 500)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "{}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstBlockStmt blockStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 0, 2); "<AssertPlaceHolder>"; assertSpan(code, script); }
getStmts() { return stmts; }
[*] target: assertTrue(blockStmt.getStmts().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, blockStmt. getStmts() ( ). toString ( ) )

[*] target: assertTrue(blockStmt.getStmts().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, blockStmt. getStmts() )

[*] target: assertTrue(blockStmt.getStmts().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, blockStmt. getStmts() ( ) )

[*] target: assertTrue(blockStmt.getStmts().isEmpty())
[-] pred:  org. junit. Assert. assertEquals ( code, blockStmt. getStmts()

[*] target: assertTrue(blockStmt.getStmts().isEmpty())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "@x() export class A {}"; Swc4jParseOutput output = swc4j.parse(code, tsModuleParseOptions); Swc4jAstModule module = output.getProgram().as(Swc4jAstModule.class); Swc4jAstExportDecl exportDecl = assertAst( module, module.getBody().get(0).as(Swc4jAstExportDecl.class), Swc4jAstType.ExportDecl, 5, 22); Swc4jAstClassDecl classDecl = assertAst( exportDecl, exportDecl.getDecl().as(Swc4jAstClassDecl.class), Swc4jAstType.ClassDecl, 12, 22); assertFalse(classDecl.isDeclare()); Swc4jAstClass clazz = assertAst( classDecl, classDecl.getClazz(), Swc4jAstType.Class, 12, 22); assertTrue(clazz.getBody().isEmpty()); assertFalse(clazz.isAbstract()); assertFalse(clazz.getSuperClass().isPresent()); assertFalse(clazz.getSuperTypeParams().isPresent()); assertFalse(clazz.getTypeParams().isPresent()); assertEquals(1, clazz.getDecorators().size()); Swc4jAstDecorator decorator = assertAst( clazz, clazz.getDecorators().get(0), Swc4jAstType.Decorator, 0, 4); Swc4jAstCallExpr callExpr = assertAst( decorator, decorator.getExpr().as(Swc4jAstCallExpr.class), Swc4jAstType.CallExpr, 1, 4); assertTrue(callExpr.getArgs().isEmpty()); assertFalse(callExpr.getTypeArgs().isPresent()); Swc4jAstIdent ident = assertAst( callExpr, callExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 1, 2); assertEquals("x", ident.getSym()); ident = "<AssertPlaceHolder>"; assertEquals("A", ident.getSym()); assertSpan(code, module); }
getIdent() { return ident; }
[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent());()); ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ).()); ( ) ) > 0 ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ).()); ( ) ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent());()); ) ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ).()); ( ) ) instanceof java. util. CoreMatchers ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "class A {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstClassDecl classDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstClassDecl.class), Swc4jAstType.ClassDecl, 0, 10); Swc4jAstClass clazz = assertAst( classDecl, classDecl.getClazz(), Swc4jAstType.Class, 0, 10); assertTrue(clazz.getBody().isEmpty()); assertTrue(clazz.getDecorators().isEmpty()); assertTrue(clazz.getImplements().isEmpty()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("A", ident.getSym()); assertSpan(code, script); }
getIdent() { return ident; }
[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent() ( ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent()); ( ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdentVo()); ( ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdentHome ( ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdentVo());. getIdent+ code )

************************************
************************************
[+] input: Swc4jCoreException { String code = "export @x() class A {}"; Swc4jParseOutput output = swc4j.parse(code, tsModuleParseOptions); Swc4jAstModule module = output.getProgram().as(Swc4jAstModule.class); Swc4jAstExportDecl exportDecl = assertAst( module, module.getBody().get(0).as(Swc4jAstExportDecl.class), Swc4jAstType.ExportDecl, 0, 22); Swc4jAstClassDecl classDecl = assertAst( exportDecl, exportDecl.getDecl().as(Swc4jAstClassDecl.class), Swc4jAstType.ClassDecl, 12, 22); assertFalse(classDecl.isDeclare()); Swc4jAstClass clazz = assertAst( classDecl, classDecl.getClazz(), Swc4jAstType.Class, 12, 22); assertTrue(clazz.getBody().isEmpty()); assertFalse(clazz.isAbstract()); assertFalse(clazz.getSuperClass().isPresent()); assertFalse(clazz.getSuperTypeParams().isPresent()); assertFalse(clazz.getTypeParams().isPresent()); assertEquals(1, clazz.getDecorators().size()); Swc4jAstDecorator decorator = assertAst( clazz, clazz.getDecorators().get(0), Swc4jAstType.Decorator, 7, 11); Swc4jAstCallExpr callExpr = assertAst( decorator, decorator.getExpr().as(Swc4jAstCallExpr.class), Swc4jAstType.CallExpr, 8, 11); assertTrue(callExpr.getArgs().isEmpty()); assertFalse(callExpr.getTypeArgs().isPresent()); Swc4jAstIdent ident = assertAst( callExpr, callExpr.getCallee().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 8, 9); assertEquals("x", ident.getSym()); ident = "<AssertPlaceHolder>"; assertEquals("A", ident.getSym()); assertSpan(code, module); }
getIdent() { return ident; }
[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent());()); ) ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ).()); ( ) ) > 0 ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent());()); ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ) ) instanceof java. lang. String ) )

[*] target: assertAst( classDecl, classDecl.getIdent(), Swc4jAstType.Ident, 18, 19)
[-] pred:  org. junit. Assert. assertTrue ( ( ( ident. getIdent()); ( ).()); ( ) ) && ( ident. getIdent());()); ) ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "function a() {}"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstFnDecl fnDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstFnDecl.class), Swc4jAstType.FnDecl, 0, 15); assertFalse(fnDecl.isDeclare()); Swc4jAstFunction function = assertAst( fnDecl, fnDecl.getFunction(), Swc4jAstType.Function, 0, 15); assertFalse(function.isAsync()); assertFalse(function.isGenerator()); assertFalse(function.getReturnType().isPresent()); assertFalse(function.getTypeParams().isPresent()); Swc4jAstIdent ident = "<AssertPlaceHolder>"; assertEquals("a", ident.getSym()); assertSpan(code, script); }
getIdent() { return ident; }
[*] target: assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent()); ( ) )

[*] target: assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent());. getIdent()); ( ) )

[*] target: assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent());. getIdent+Exception ( ) )

[*] target: assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10)
[-] pred:  org. junit. Assert. assertEquals ( code, ds. getIdent()); ( ) )

[*] target: assertAst( fnDecl, fnDecl.getIdent(), Swc4jAstType.Ident, 9, 10)
[-] pred:  org. junit. Assert. assertEquals ( code, ident. getIdent());. getIdentContract ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) b;"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstIfStmt ifStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstIfStmt.class), Swc4jAstType.IfStmt, 0, 9); Swc4jAstIdent ident = assertAst( ifStmt, ifStmt.getTest().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5); assertEquals("a", ident.getSym()); Swc4jAstExprStmt exprStmt = assertAst( ifStmt, ifStmt.getCons().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 7, 9); ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 7, 8); assertEquals("b", ident.getSym()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getAlt() { return alt; }
[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getAlt()); ( ) )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getAlt()); )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getAlt()); time )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getAlt()); ( ) ) == code ) )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getAlt()); time ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) { b; }"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstIfStmt ifStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstIfStmt.class), Swc4jAstType.IfStmt, 0, 13); Swc4jAstIdent ident = assertAst( ifStmt, ifStmt.getTest().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5); assertEquals("a", ident.getSym()); Swc4jAstBlockStmt blockStmt = assertAst( ifStmt, ifStmt.getCons().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 7, 13); Swc4jAstExprStmt exprStmt = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 9, 11); ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 9, 10); assertEquals("b", ident.getSym()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getAlt() { return alt; }
[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getAlt()); ( ). length ) > 0 ) )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getAlt()); ( ). length ) == 0 ) )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertTrue ( ( ( output. getAlt()); ). length ) == 0 ) )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( output, output )

[*] target: assertFalse(ifStmt.getAlt().isPresent())
[-] pred:  retrieves the code org

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) { b; } else { c; }"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstIfStmt ifStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstIfStmt.class), Swc4jAstType.IfStmt, 0, 25); Swc4jAstIdent ident = assertAst( ifStmt, ifStmt.getTest().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5); assertEquals("a", ident.getSym()); Swc4jAstBlockStmt blockStmt = assertAst( ifStmt, ifStmt.getCons().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 7, 13); Swc4jAstExprStmt exprStmt = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 9, 11); ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 9, 10); assertEquals("b", ident.getSym()); assertTrue(ifStmt.getAlt().isPresent()); blockStmt = "<AssertPlaceHolder>"; exprStmt = assertAst( blockStmt, blockStmt.getStmts().get(0).as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 21, 23); ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 21, 22); assertEquals("c", ident.getSym()); assertSpan(code, script); }
getAlt() { return alt; }
[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 19, 25)
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. contains ( blockStmt ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 19, 25)
[-] pred:  org. junit. Assert. assertTrue ( ( ( blockStmt. getAlt()); ( ) )());locloc()); ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 19, 25)
[-] pred:  org. junit. Assert. assertTrue ( ( ( blockStmt. getAlt()); ( ) ) instanceof Swc4jMissing ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 19, 25)
[-] pred:  org. junit. Assert. assertTrue ( ( ( blockStmt. getAlt()); ( ) ) instanceof Swc4jexception ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstBlockStmt.class), Swc4jAstType.BlockStmt, 19, 25)
[-] pred:  org. junit. Assert. assertTrue ( ( ( blockStmt. getAlt()); ( ) ) instanceof Swc4jNotFoundException ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) b; else c;"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstIfStmt ifStmt = assertAst( script, script.getBody().get(0).as(Swc4jAstIfStmt.class), Swc4jAstType.IfStmt, 0, 17); Swc4jAstIdent ident = assertAst( ifStmt, ifStmt.getTest().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 4, 5); assertEquals("a", ident.getSym()); Swc4jAstExprStmt exprStmt = assertAst( ifStmt, ifStmt.getCons().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 7, 9); ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 7, 8); assertEquals("b", ident.getSym()); assertTrue(ifStmt.getAlt().isPresent()); exprStmt = "<AssertPlaceHolder>"; ident = assertAst( exprStmt, exprStmt.getExpr().as(Swc4jAstIdent.class), Swc4jAstType.Ident, 15, 16); assertEquals("c", ident.getSym()); assertSpan(code, script); }
getAlt() { return alt; }
[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 15, 17)
[-] pred:  org. junit. Assert. assertTrue ( ( ( exprStmt. getAlt()); ( ). length ) == 0 ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 15, 17)
[-] pred:  org. junit. Assert. assertEquals ( code, exprStmt. getAlt()); ( ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 15, 17)
[-] pred:  org. junit. Assert. assertTrue ( ( ( exprStmt. getAlt()); ( ) ) == code ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 15, 17)
[-] pred:  org. junit. Assert. assertTrue ( exprStmt. getAlt()); ( ) )

[*] target: assertAst( ifStmt, ifStmt.getAlt().get().as(Swc4jAstExprStmt.class), Swc4jAstType.ExprStmt, 15, 17)
[-] pred:  retrieves the code org

************************************
************************************
[+] input: Swc4jCoreException { String code = "using a"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstUsingDecl usingDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstUsingDecl.class), Swc4jAstType.UsingDecl, 0, 7); assertFalse(usingDecl.isAwait()); Swc4jAstVarDeclarator varDeclarator = "<AssertPlaceHolder>"; Swc4jAstBindingIdent bindingIdent = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 6, 7); Swc4jAstIdent ident = assertAst( bindingIdent, bindingIdent.getId(), Swc4jAstType.Ident, 6, 7); assertEquals("a", ident.getSym()); assertSpan(code, script); }
getDecls() { return decls; }
[*] target: assertAst( usingDecl, usingDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, varDeclarator. getStopped() ( ) )

[*] target: assertAst( usingDecl, usingDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, variableDeclarator. getStopped() ( ) )

[*] target: assertAst( usingDecl, usingDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, variableDeclarator. getPopLine ( ) )

[*] target: assertAst( usingDecl, usingDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, variableDeclarator. getUpstreamAttribute ( ) )

[*] target: assertAst( usingDecl, usingDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 6, 7)
[-] pred:  org. junit. Assert. assertEquals ( code, varDeclarator. getUpstreamAttribute ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "const a, b, c;"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); Swc4jAstVarDecl varDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstVarDecl.class), Swc4jAstType.VarDecl, 0, 14); assertEquals(3, varDecl.getDecls().size()); Swc4jAstVarDeclarator varDeclarator = assertAst( varDecl, varDecl.getDecls().get(0).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 6, 7); Swc4jAstBindingIdent bindingIdent = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 6, 7); assertEquals("a", bindingIdent.getId().getSym()); varDeclarator = assertAst( varDecl, varDecl.getDecls().get(1).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 9, 10); bindingIdent = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 9, 10); assertEquals("b", bindingIdent.getId().getSym()); varDeclarator = "<AssertPlaceHolder>"; bindingIdent = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 12, 13); assertEquals("c", bindingIdent.getId().getSym()); assertSpan(code, script); }
getDecls() { return decls; }
[*] target: assertAst( varDecl, varDecl.getDecls().get(2).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 12, 13)
[-] pred:  org. junit. Assert. assertEquals ( body, variableDeclarator )

[*] target: assertAst( varDecl, varDecl.getDecls().get(2).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 12, 13)
[-] pred:  org. junit. Assert. assertEquals ( code, varDeclarator. getStopped() ( ) )

[*] target: assertAst( varDecl, varDecl.getDecls().get(2).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 12, 13)
[-] pred:  org. junit. Assert. assertEquals ( code, varDeclarator. getCaret() ( ) )

[*] target: assertAst( varDecl, varDecl.getDecls().get(2).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 12, 13)
[-] pred:  org. junit. Assert. assertEquals ( code, varDeclarator. getStoppedString ( ) )

[*] target: assertAst( varDecl, varDecl.getDecls().get(2).as(Swc4jAstVarDeclarator.class), Swc4jAstType.VarDeclarator, 12, 13)
[-] pred:  org. junit. Assert. assertEquals ( code, variableDeclarator. getStoppedString ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "let a變量=1"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); assertNotNull(output); assertEquals(Swc4jParseMode.Script, output.getParseMode()); assertNotNull(output.getProgram()); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); assertEquals(0, script.getSpan().getStart()); assertEquals(code.length(), script.getSpan().getEnd()); assertNotNull(script.getBody()); Swc4jAstVarDecl varDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstVarDecl.class), Swc4jAstType.VarDecl, 0, 9); assertEquals(Swc4jAstVarDeclKind.Let, varDecl.getKind()); Swc4jAstVarDeclarator varDeclarator = assertAst( varDecl, varDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 4, 9); Swc4jAstBindingIdent name = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 4, 7); assertEquals("a變量", name.getId().getSym()); assertTrue(varDeclarator.getInit().isPresent()); Swc4jAstNumber number = "<AssertPlaceHolder>"; assertEquals(1, number.getValue()); assertSpan(code, script); }
getInit() { return init; }
[*] target: assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstNumber.class), Swc4jAstType.Number, 8, 9)
[-] pred:  org. junit. Assert. assertEquals ( code, number. getInit() ( ) )

[*] target: assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstNumber.class), Swc4jAstType.Number, 8, 9)
[-] pred:  org. junit. Assert. assertThat ( number. getInit() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstNumber.class), Swc4jAstType.Number, 8, 9)
[-] pred:  org. junit. Assert. assertEquals ( code, number. getInit() )

[*] target: assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstNumber.class), Swc4jAstType.Number, 8, 9)
[-] pred:  org. junit. Assert. assertEquals ( code, number. get());String code )

[*] target: assertAst( varDeclarator, varDeclarator.getInit().get().as(Swc4jAstNumber.class), Swc4jAstType.Number, 8, 9)
[-] pred:  org. junit. Assert. assertEquals ( code, number. get());String code ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "let a變量"; Swc4jParseOutput output = swc4j.parse(code, tsScriptParseOptions); assertNotNull(output); assertEquals(Swc4jParseMode.Script, output.getParseMode()); assertNotNull(output.getProgram()); Swc4jAstScript script = output.getProgram().as(Swc4jAstScript.class); assertEquals(0, script.getSpan().getStart()); assertEquals(code.length(), script.getSpan().getEnd()); assertNotNull(script.getBody()); Swc4jAstVarDecl varDecl = assertAst( script, script.getBody().get(0).as(Swc4jAstVarDecl.class), Swc4jAstType.VarDecl, 0, 7); assertEquals(Swc4jAstVarDeclKind.Let, varDecl.getKind()); Swc4jAstVarDeclarator varDeclarator = assertAst( varDecl, varDecl.getDecls().get(0), Swc4jAstType.VarDeclarator, 4, 7); assertFalse(varDeclarator.isDefinite()); Swc4jAstBindingIdent name = assertAst( varDeclarator, varDeclarator.getName().as(Swc4jAstBindingIdent.class), Swc4jAstType.BindingIdent, 4, 7); assertEquals("a變量", name.getId().getSym()); "<AssertPlaceHolder>"; assertSpan(code, script); }
getInit() { return init; }
[*] target: assertFalse(varDeclarator.getInit().isPresent())
[-] pred:  org. junit. Assert. assertThat ( output. getInit() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertFalse(varDeclarator.getInit().isPresent())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getInit() ( ) )

[*] target: assertFalse(varDeclarator.getInit().isPresent())
[-] pred:  org. junit. Assert. assertThat ( output. getInit() ( ). toString ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertFalse(varDeclarator.getInit().isPresent())
[-] pred:  org. junit. Assert. assertThat ( output. getInit() ( ).()); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertFalse(varDeclarator.getInit().isPresent())
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( code ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "let a: /* Comment 1 */ number = 1; // Comment 2"; Swc4jParseOutput output = swc4j.parse(code, tsModuleParseOptions .setCaptureAst(true) .setCaptureComments(true)); "<AssertPlaceHolder>"; assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals(1, output.getComments().getLeading().size()); assertEquals(1, output.getComments().getTrailing().size()); List<Swc4jComment> comments = output.getComments().getLeading(23); assertEquals(1, comments.size()); Swc4jComment comment = comments.get(0); assertEquals(Swc4jCommentKind.Block, comment.getKind()); assertEquals(7, comment.getSpan().getStart()); assertEquals(22, comment.getSpan().getEnd()); assertEquals(1, comment.getSpan().getLine()); assertEquals(8, comment.getSpan().getColumn()); assertEquals(" Comment 1 ", comment.getText()); comments = output.getComments().getTrailing(34); assertEquals(1, comments.size()); comment = comments.get(0); assertEquals(Swc4jCommentKind.Line, comment.getKind()); assertEquals(35, comment.getSpan().getStart()); assertEquals(47, comment.getSpan().getEnd()); assertEquals(1, comment.getSpan().getLine()); assertEquals(36, comment.getSpan().getColumn()); assertEquals(" Comment 2", comment.getText()); assertTrue(output.getComments().hasLeading(23)); assertTrue(output.getComments().hasTrailing(34)); comments = output.getComments().getComments(); assertEquals(2, comments.size()); }
setCaptureComments(boolean captureComments) { this.captureComments = captureComments; return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. get ( 0 ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. get ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. get ( 0 ). toString ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getCaptureComments ( ) )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "function add(a:number, b:number) { return a+b; }"; String expectedCode = "function add(a: number, b: number) {\n" + "  return a + b;\n" + "}\n"; Swc4jTransformOutput output = swc4j.transform(code, tsModuleTransformOptions .setMinify(false) .setSourceMap(Swc4jSourceMapOption.None)); assertNotNull(output); assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals(Swc4jMediaType.TypeScript, output.getMediaType()); assertEquals(expectedCode, output.getCode()); "<AssertPlaceHolder>"; }
getSourceMap() { return sourceMap; }
[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( outputs. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( inner. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( report. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. getSourceMap() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "function add(a:number, b:number) { return a+b; }"; String expectedCode = "function add(a: number, b: number) {\n" + "  return a + b;\n" + "}\n"; Swc4jTransformOutput output = swc4j.transform(code, tsModuleTransformOptions .setMinify(false) .setSourceMap(Swc4jSourceMapOption.Separate)); assertNotNull(output); assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals(Swc4jMediaType.TypeScript, output.getMediaType()); assertEquals(expectedCode, output.getCode()); "<AssertPlaceHolder>"; }
getSourceMap() { return sourceMap; }
[*] target: assertNotNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNotNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( report. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNotNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( outputs. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNotNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( inner. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNotNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. getSourceMap() ( ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "import React from 'react';\n" + "import './App.css';\n" + "function App() {\n" + "    return (\n" + "        <h1> Hello World! </h1>\n" + "    );\n" + "}\n" + "export default App;"; String expectedCode = "import React from 'react';\n" + "import './App.css';\n" + "function App() {\n" + "  return CustomJsxFactory.createElement("h1", null, " Hello World! ");\n" + "}\n" + "export default App;\n"; String expectedSourceMapPrefix = "//# sourceMappingURL=data:application/json;base64,"; Swc4jTranspileOutput output = swc4j.transpile(code, jsxModuleTranspileOptions .setJsxFactory("CustomJsxFactory.createElement")); assertNotNull(output); assertEquals(expectedCode, output.getCode().substring(0, expectedCode.length())); assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals( expectedSourceMapPrefix, output.getCode().substring( expectedCode.length(), expectedCode.length() + expectedSourceMapPrefix.length())); "<AssertPlaceHolder>"; }
getSourceMap() { return sourceMap; }
[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertEquals ( expectedSourceMapPrefix, output. getSourceMap() ( ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertSame ( expectedSourceMapPrefix, output. getSourceMap() ( ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertArrayEquals ( expectedSourceMapPrefix, output. getSourceMap() ( ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedCode ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "import React from 'react';\n" + "import './App.css';\n" + "function App() {\n" + "    return (\n" + "        <h1> Hello World! </h1>\n" + "    );\n" + "}\n" + "export default App;"; String expectedCode = "import React from 'react';\n" + "import './App.css';\n" + "function App() {\n" + "  return React.createElement("h1", null, " Hello World! ");\n" + "}\n" + "export default App;\n"; String expectedSourceMapPrefix = "//# sourceMappingURL=data:application/json;base64,"; Swc4jTranspileOutput output = swc4j.transpile(code, jsxModuleTranspileOptions); assertNotNull(output); assertEquals(code, output.getSourceText()); assertEquals(expectedCode, output.getCode().substring(0, expectedCode.length())); assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals(Swc4jMediaType.Jsx, output.getMediaType()); assertEquals( expectedSourceMapPrefix, output.getCode().substring( expectedCode.length(), expectedCode.length() + expectedSourceMapPrefix.length())); assertNull(output.getProgram()); "<AssertPlaceHolder>"; }
getSourceMap() { return sourceMap; }
[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMapPrefix, org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMapWrapper ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMapIt ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "function add加法(a變量:number, b變量:number) { return a變量+b變量; }"; Swc4jTranspileOutput output = swc4j.transpile(code, tsModuleTranspileOptions .setCaptureTokens(true)); "<AssertPlaceHolder>"; assertEquals(Swc4jParseMode.Module, output.getParseMode()); List<Swc4jToken> tokens = output.getTokens(); assertNotNull(tokens); assertEquals(18, tokens.size()); assertEquals(Swc4jTokenType.Function, tokens.get(0).getType()); assertTrue(tokens.get(0).isLineBreakAhead()); assertEquals(Swc4jTokenType.Return, tokens.get(12).getType()); assertFalse(tokens.get(12).isLineBreakAhead()); tokens.forEach(token -> assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())); }
setCaptureTokens(boolean captureTokens) { super.setCaptureTokens(captureTokens); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( a+b; ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertSame ( Swc4jTranspileOutput. class, output. getClass ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNotNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "let a: /* Comment 1 */ number = 1; // Comment 2"; Swc4jTranspileOutput output = swc4j.transpile(code, tsModuleTranspileOptions .setCaptureComments(true) .setKeepComments(true) .setSourceMap(Swc4jSourceMapOption.None)); "<AssertPlaceHolder>"; assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals("let a = 1; // Comment 2\n", output.getCode()); assertEquals(1, output.getComments().getLeading().size()); assertEquals(1, output.getComments().getTrailing().size()); List<Swc4jComment> comments = output.getComments().getLeading(23); assertEquals(1, comments.size()); Swc4jComment comment = comments.get(0); assertEquals(Swc4jCommentKind.Block, comment.getKind()); assertEquals(7, comment.getSpan().getStart()); assertEquals(22, comment.getSpan().getEnd()); assertEquals(1, comment.getSpan().getLine()); assertEquals(8, comment.getSpan().getColumn()); assertEquals(" Comment 1 ", comment.getText()); comments = output.getComments().getTrailing(34); assertEquals(1, comments.size()); comment = comments.get(0); assertEquals(Swc4jCommentKind.Line, comment.getKind()); assertEquals(35, comment.getSpan().getStart()); assertEquals(47, comment.getSpan().getEnd()); assertEquals(1, comment.getSpan().getLine()); assertEquals(36, comment.getSpan().getColumn()); assertEquals(" Comment 2", comment.getText()); assertTrue(output.getComments().hasLeading(23)); assertTrue(output.getComments().hasTrailing(34)); comments = output.getComments().getComments(); assertEquals(2, comments.size()); }
setSourceMap(Swc4jSourceMapOption sourceMap) { this.sourceMap = AssertionUtils.notNull(sourceMap, "Source map"); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getSchemaMap ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( Swc4jParseMode. FULL, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getValidationReport ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. msg )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "function add(a:number, b:number) { return a+b; }"; String expectedCode = "function add(a, b) {\n" + "  return a + b;\n" + "}\n"; String expectedSourceMapPrefix = "//# sourceMappingURL=data:application/json;base64,"; Swc4jTranspileOutput output = swc4j.transpile(code, tsModuleTranspileOptions); assertNotNull(output); assertEquals(expectedCode, output.getCode().substring(0, expectedCode.length())); assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals( expectedSourceMapPrefix, output.getCode().substring( expectedCode.length(), expectedCode.length() + expectedSourceMapPrefix.length())); "<AssertPlaceHolder>"; }
getSourceMap() { return sourceMap; }
[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertEquals ( expectedSourceMapPrefix, output. getSourceMap() ( ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap() ( ), org. hamcrest. Matchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output. getSourceMap ( ), org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

[*] target: assertNull(output.getSourceMap())
[-] pred:  org. junit. Assert. assertThat ( output, org. hamcrest. CoreMatchers. is ( expectedSourceMapPrefix ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "let a: /* Comment 1 */ number = 1; // Comment 2"; Swc4jTranspileOutput output = swc4j.transpile(code, tsModuleTranspileOptions .setKeepComments(false) .setSourceMap(Swc4jSourceMapOption.None)); "<AssertPlaceHolder>"; assertEquals(Swc4jParseMode.Module, output.getParseMode()); assertEquals("let a = 1;\n", output.getCode()); assertNull(output.getComments()); }
setSourceMap(Swc4jSourceMapOption sourceMap) { this.sourceMap = AssertionUtils.notNull(sourceMap, "Source map"); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( output, code )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getMessage ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNotNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. get ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( code, output. getText ( ) )

************************************
************************************
[+] input: testParseModuleCount() { String code = "import a from 'a';"; SimpleList.of(jsProgramParseOptions, jsModuleParseOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jParseOutput output = swc4j.parse(code, options .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(1, pluginCounter.getModuleCount()); assertEquals(0, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Module, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( 2, output. add(retry4jParseOutput )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( 2, output. add(retryc4jParseOutput )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNotNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( output, code )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: testParseScriptCount() { String code = "1 + 1"; SimpleList.of(jsProgramParseOptions, jsScriptParseOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jParseOutput output = swc4j.parse(code, options .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(0, pluginCounter.getModuleCount()); assertEquals(1, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Script, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertSame ( output, code )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNotNull ( output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertTrue ( output. add(retry4jParseOutput )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: testParseWithException() { String code = "1 + 1"; try { Swc4jAstVisitor visitor = new Swc4jAstVisitor() { @Override public Swc4jAstVisitorResponse visitScript(Swc4jAstScript node) { throw new RuntimeException("Test"); } }; swc4j.parse(code, jsScriptParseOptions .setPluginHost(new Swc4jPluginHost().add(new Swc4jPluginVisitors(SimpleList.of(visitor))))); fail("Failed to throw exception."); } catch (Swc4jCoreException e) { "<AssertPlaceHolder>"; assertInstanceOf(RuntimeException.class, e.getCause()); assertEquals("Test", e.getCause().getMessage()); } }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. getMessage ( ). contains ( code ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(backgroundc4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add( twc4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(bb4jPluginVisitors ( ) )

************************************
************************************
[+] input: testTransformModuleCount() { String code = "import a from 'a'; a + 1;"; String expectedCode = "import a from"a";a+1;"; SimpleList.of(jsProgramTransformOptions, jsModuleTransformOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jTransformOutput output = swc4j.transform(code, options .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); assertEquals(1, pluginCounter.getModuleCount()); assertEquals(0, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Module, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add( wrappingc4jTransformOutput ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(hubc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(++4jTransformOutput ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(Prc4jTransformOutput ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

************************************
************************************
[+] input: testTransformScriptCount() { String code = "a + 1;"; String expectedCode = "a+1;"; SimpleList.of(jsProgramTransformOptions, jsScriptTransformOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jTransformOutput output = swc4j.transform(code, options .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); assertEquals(0, pluginCounter.getModuleCount()); assertEquals(1, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Script, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(++4jTransformOutput ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertSame ( expectedCode, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit, output )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: testTransformWithException() { String code = "1 + 1"; try { Swc4jAstVisitor visitor = new Swc4jAstVisitor() { @Override public Swc4jAstVisitorResponse visitScript(Swc4jAstScript node) { throw new RuntimeException("Test"); } }; swc4j.transform(code, jsScriptTransformOptions .setPluginHost(new Swc4jPluginHost().add(new Swc4jPluginVisitors(SimpleList.of(visitor))))); fail("Failed to throw exception."); } catch (Swc4jCoreException e) { "<AssertPlaceHolder>"; assertInstanceOf(RuntimeException.class, e.getCause()); assertEquals("Test", e.getCause().getMessage()); } }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. getMessage ( ). contains ( code ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add( twc4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(backgroundc4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(bb4jPluginVisitors ( ) )

************************************
************************************
[+] input: testTranspileModuleCount() { String code = "import a from 'a'; a + 1;"; String expectedCode = "import a from 'a';\na + 1;\n"; SimpleList.of(jsProgramTranspileOptions, jsModuleTranspileOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jTranspileOutput output = swc4j.transpile(code, options .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); assertEquals(1, pluginCounter.getModuleCount()); assertEquals(0, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Module, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add( wrappingc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(Prc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(hubc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(retry4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

************************************
************************************
[+] input: testTranspileScriptCount() { String code = "a + 1;"; String expectedCode = "a + 1;\n"; SimpleList.of(jsProgramTranspileOptions, jsScriptTranspileOptions).forEach(options -> { try { Swc4jPluginCounter pluginCounter = new Swc4jPluginCounter(); Swc4jTranspileOutput output = swc4j.transpile(code, options .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginCounter))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); assertEquals(0, pluginCounter.getModuleCount()); assertEquals(1, pluginCounter.getScriptCount()); assertEquals(Swc4jParseMode.Script, output.getParseMode()); } catch (Swc4jCoreException e) { fail(e); } }); }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add( wrappingc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(hubc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(Prc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertNotNull ( output )

************************************
************************************
[+] input: testTranspileWithException() { String code = "1 + 1"; try { Swc4jAstVisitor visitor = new Swc4jAstVisitor() { @Override public Swc4jAstVisitorResponse visitScript(Swc4jAstScript node) { throw new RuntimeException("Test"); } }; swc4j.transpile(code, jsScriptTranspileOptions .setPluginHost(new Swc4jPluginHost().add(new Swc4jPluginVisitors(SimpleList.of(visitor))))); fail("Failed to throw exception."); } catch (Swc4jCoreException e) { "<AssertPlaceHolder>"; assertInstanceOf(RuntimeException.class, e.getCause()); assertEquals("Test", e.getCause().getMessage()); } }
add(ISwc4jPlugin... plugins) { Collections.addAll(this.plugins, plugins); return this; }
[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertNotNull ( e )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. getMessage ( ). contains ( code ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(bb4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add( twc4jPluginVisitors ( ) )

[*] target: assertEquals("Couldn't call boolean process() because Java exception was thrown", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( e. add(bb4jPluginVisitors ( null ) )

************************************
************************************
[+] input: Swc4jCoreException { String code = "a = b; c = d;"; String expectedCode = "b=a;d=c;"; TestAssignExprVisitor visitor = new TestAssignExprVisitor(); Swc4jPluginVisitors pluginVisitors = new Swc4jPluginVisitors().add(visitor); Swc4jTransformOutput output = swc4j.transform(code, jsScriptTransformOptions .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginVisitors))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); }
add(ISwc4jAstVisitor... visitors) { Collections.addAll(this.visitors, visitors); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output ;

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( output, expectedCode )

[*] target: assertNotNull(output)
[-] pred:  org. junit, output )

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) { b; } else { c; }"; String expectedCode = "if(a){c;}else{b;}"; TestIfStmtVisitor visitor = new TestIfStmtVisitor(); Swc4jPluginVisitors pluginVisitors = new Swc4jPluginVisitors().add(visitor); Swc4jTransformOutput output = swc4j.transform(code, jsScriptTransformOptions .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginVisitors))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); }
add(ISwc4jAstVisitor... visitors) { Collections.addAll(this.visitors, visitors); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. toString ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add( wrappingc4jTransformOutput ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add( wrappingc4jPluginHost ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. add(ec4jPluginVisitors ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output

************************************
************************************
[+] input: Swc4jCoreException { String code = "a = b; c = d;"; String expectedCode = "b = a;\n" + "d = c;\n"; TestAssignExprVisitor visitor = new TestAssignExprVisitor(); Swc4jPluginVisitors pluginVisitors = new Swc4jPluginVisitors().add(visitor); Swc4jTranspileOutput output = swc4j.transpile(code, jsScriptTranspileOptions .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginVisitors))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); }
add(ISwc4jAstVisitor... visitors) { Collections.addAll(this.visitors, visitors); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output ;

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output

[*] target: assertNotNull(output)
[-] pred:  org. junit, output )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { String code = "if (a) { b; } else { c; }"; String expectedCode = "if (a) {\n" + "  c;\n" + "} else {\n" + "  b;\n" + "}\n"; TestIfStmtVisitor visitor = new TestIfStmtVisitor(); Swc4jPluginVisitors pluginVisitors = new Swc4jPluginVisitors().add(visitor); Swc4jTranspileOutput output = swc4j.transpile(code, jsScriptTranspileOptions .setInlineSources(false) .setSourceMap(Swc4jSourceMapOption.None) .setPluginHost(new Swc4jPluginHost().add(pluginVisitors))); "<AssertPlaceHolder>"; assertEquals(expectedCode, output.getCode()); }
add(ISwc4jAstVisitor... visitors) { Collections.addAll(this.visitors, visitors); return this; }
[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. toString ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output. getMessage ( ) )

[*] target: assertNotNull(output)
[-] pred:  org. junit. Assert. assertEquals ( expectedCode, output

[*] target: assertNotNull(output)
[-] pred:  org. junit, output )

[*] target: assertNotNull(output)
[-] pred:  org

************************************
************************************
[+] input: Swc4jCoreException { Swc4jParseOptions options = new Swc4jParseOptions() .setMediaType(Swc4jMediaType.TypeScript) .setCaptureTokens(true); String code = "function add加法(a變量:number, b變量:number) { return a變量+b變量; }"; Swc4jParseOutput output = swc4j.parse(code, options); assertNotNull(output); assertEquals(Swc4jParseMode.Script, output.getParseMode()); List<Swc4jToken> tokens = output.getTokens(); assertNotNull(tokens); assertEquals(18, tokens.size()); assertEquals(Swc4jTokenType.Function, tokens.get(0).getType()); assertTrue(tokens.get(0).isLineBreakAhead()); assertEquals(Swc4jTokenType.Return, tokens.get(12).getType()); assertFalse(tokens.get(12).isLineBreakAhead()); tokens.forEach(token -> { assertNotEquals(Swc4jTokenType.Unknown, token.getType()); "<AssertPlaceHolder>"; }); }
getText() { return getType().getName(); }
[*] target: assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())
[-] pred:  org. junit. Assert. assertThat ( output. getText() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())
[-] pred:  org. junit. Assert. assertThat ( outputs. getText() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())
[-] pred:  org. junit. Assert. assertThat ( out. getText() ( ), org. hamcrest. CoreMatchers. is ( code ) )

[*] target: assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())
[-] pred:  org. junit. Assert. assertEquals ( code, output. getText() ( ) )

[*] target: assertEquals( code.substring(token.getSpan().getStart(), token.getSpan().getEnd()), token.getText())
[-] pred:  code )

************************************
************************************
[+] input: toSnakeCase() { String str = StringUtils.toSnakeCase("TeacherStatics"); "<AssertPlaceHolder>"; }
toSnakeCase(String camelCase) { if (camelCase == null || camelCase.isEmpty()) { return camelCase; }  StringBuilder result = new StringBuilder(); result.append(camelCase.substring(0, 1).toLowerCase()); // 将首字母转小写并添加到结果  for (int i = 1; i < camelCase.length(); i++) { char c = camelCase.charAt(i); if (Character.isUpperCase(c)) { // 如果当前字符是大写字母，添加下划线并转换为小写 result.append("_").append(Character.toLowerCase(c)); } else { // 否则，直接添加当前字符 result.append(c); } } return result.toString(); }
[*] target: assertEquals("teacher_statics", str)
[-] pred:  org. junit. Assert. assertEquals ( str, new org. apache. hadoop. fs. Path ( str ) )

[*] target: assertEquals("teacher_statics", str)
[-] pred:  org. junit. Assert. assertEquals ( str, new java. lang. String ( str ) )

[*] target: assertEquals("teacher_statics", str)
[-] pred:  org. junit. Assert. assertEquals ( str, this. toSnakeCase(String camelCase) )

[*] target: assertEquals("teacher_statics", str)
[-] pred:  org. junit. Assert. assertEquals ( str, this. toSnakeCase(String camelCase )

[*] target: assertEquals("teacher_statics", str)
[-] pred:  org

************************************
************************************
[+] input: shouldConstructWithArchRuleAndDefaultConfiguration() { ArchRule archRule = mock(ArchRule.class); TaikaiRule taikaiRule = TaikaiRule.of(archRule);  assertNotNull(taikaiRule); assertEquals(archRule, taikaiRule.archRule()); "<AssertPlaceHolder>"; }
configuration() { return this.configuration; }
[*] target: assertNotNull(taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertSame ( archRule, taikaiRule. configuration() ( ) )

[*] target: assertNotNull(taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertSame ( archRule, taikaiRule. configuration() )

[*] target: assertNotNull(taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertEquals ( archRule, taikaiRule. configuration() ( ) )

[*] target: assertNotNull(taikaiRule.configuration())
[-] pred:  org

[*] target: assertNotNull(taikaiRule.configuration())
[-] pred:  )

************************************
************************************
[+] input: shouldConstructWithArchRuleAndGivenConfiguration() { ArchRule archRule = mock(ArchRule.class); Configuration configuration = Configuration.of("com.example"); TaikaiRule taikaiRule = TaikaiRule.of(archRule, configuration);  assertNotNull(taikaiRule); assertEquals(archRule, taikaiRule.archRule()); "<AssertPlaceHolder>"; }
configuration() { return this.configuration; }
[*] target: assertSame(configuration, taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertEquals ( archRule, taikaiRule )

[*] target: assertSame(configuration, taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertSame ( archRule, taikaiRule )

[*] target: assertSame(configuration, taikaiRule.configuration())
[-] pred:  org. junit. Assert. assertEquals ( architectureRule, taikaiRule )

[*] target: assertSame(configuration, taikaiRule.configuration())
[-] pred:  org

[*] target: assertSame(configuration, taikaiRule.configuration())
[-] pred:  )

************************************
************************************
[+] input: shouldReturnConfigurationNamespace() { Configuration configuration = Configuration.of("com.example");  "<AssertPlaceHolder>"; }
namespace() { return this.namespace; }
[*] target: assertEquals("com.example", configuration.namespace())
[-] pred:  org. junit. Assert. assertNotNull ( configuration. namespace() ( ) )

[*] target: assertEquals("com.example", configuration.namespace())
[-] pred:  org. junit. Assert. assertNull ( configuration. namespace() ( ) )

[*] target: assertEquals("com.example", configuration.namespace())
[-] pred:  org. junit. Assert. assertEquals ( configuration. namespace(), this. configuration. namespace() )

[*] target: assertEquals("com.example", configuration.namespace())
[-] pred:  org. junit. Assert. assertEquals ( 0, configuration. namespace() ( ) )

[*] target: assertEquals("com.example", configuration.namespace())
[-] pred:  org

************************************
************************************
[+] input: shouldReturnConfigurationNamespaceImport() { Configuration configuration = Configuration.of(Namespace.IMPORT.ONLY_TESTS);  "<AssertPlaceHolder>"; }
namespaceImport() { return this.namespaceImport; }
[*] target: assertEquals(Namespace.IMPORT.ONLY_TESTS, configuration.namespaceImport())
[-] pred:  org. junit. Assert. assertNull ( configuration. namespaceImport() ( ) )

[*] target: assertEquals(Namespace.IMPORT.ONLY_TESTS, configuration.namespaceImport())
[-] pred:  org. junit. Assert. assertNull ( configuration. namespaceImport() )

[*] target: assertEquals(Namespace.IMPORT.ONLY_TESTS, configuration.namespaceImport())
[-] pred:  org. junit. Assert. assertEquals ( configuration. namespaceImport(), this. configuration. namespaceImport() )

[*] target: assertEquals(Namespace.IMPORT.ONLY_TESTS, configuration.namespaceImport())
[-] pred:  org. junit. Assert. assertEquals ( configuration. namespaceImport() ( ), this. namespaceImport() )

[*] target: assertEquals(Namespace.IMPORT.ONLY_TESTS, configuration.namespaceImport())
[-] pred:  org. junit. Assert. assertEquals ( 1, configuration. namespaceImport() ( ) )

************************************
************************************
[+] input: shouldReturnConfigurationJavaClasses() { JavaClasses javaClasses = mock(JavaClasses.class); Configuration configuration = Configuration.of(javaClasses);  "<AssertPlaceHolder>"; }
javaClasses() { return this.javaClasses; }
[*] target: assertEquals(javaClasses, configuration.javaClasses())
[-] pred:  org. junit. Assert. assertEquals ( javaClasses, configuration. javaClasses() )

[*] target: assertEquals(javaClasses, configuration.javaClasses())
[-] pred:  org. junit. Assert. assertNotNull ( configuration. javaClasses() )

[*] target: assertEquals(javaClasses, configuration.javaClasses())
[-] pred:  org. junit. Assert. assertNotNull ( configuration )

[*] target: assertEquals(javaClasses, configuration.javaClasses())
[-] pred:  org. junit. Assert. assertEquals ( javaClasses, configuration. javaClasses() ( ) )

[*] target: assertEquals(javaClasses, configuration.javaClasses())
[-] pred:  org

************************************
************************************
[+] input: shouldBuildTaikaiWithDefaultValues() { Taikai taikai = Taikai.builder() .namespace(VALID_NAMESPACE) .build();  assertFalse(taikai.failOnEmpty()); assertEquals(VALID_NAMESPACE, taikai.namespace()); assertNull(taikai.classes()); assertTrue(taikai.rules().isEmpty()); "<AssertPlaceHolder>"; }
excludedClasses() { return this.excludedClasses; }
[*] target: assertTrue(taikai.excludedClasses().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( taikai. excludedClasses().()); ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(taikai.excludedClasses().isEmpty())
[-] pred:  org. junit. Assert. assertFalse ( taikai. excludedClasses().()); ( ) )

[*] target: assertTrue(taikai.excludedClasses().isEmpty())
[-] pred:  org. junit. Assert. assertThat ( taikai. excludedClasses(). excludedClasses());.

[*] target: assertTrue(taikai.excludedClasses().isEmpty())
[-] pred:  org. junit. Assert. assertNull ( taikai. excludedClasses() )

[*] target: assertTrue(taikai.excludedClasses().isEmpty())
[-] pred:  ) { } }

************************************
************************************
[+] input: shouldBuildTaikaiWithCustomValues() { TaikaiRule mockRule = mock(TaikaiRule.class); Collection<TaikaiRule> rules = Collections.singletonList(mockRule);  Taikai taikai = Taikai.builder() .classes(new ClassFileImporter().importClasses(TaikaiTest.class)) .excludeClass("com.enofex.taikai.SomeClassToExclude") .excludeClasses( Set.of("com.enofex.taikai.foo.ClassToExclude", "com.enofex.taikai.bar.ClassToExclude")) .failOnEmpty(true) .addRules(rules) .build();  assertTrue(taikai.failOnEmpty()); assertNull(taikai.namespace()); assertNotNull(taikai.classes()); assertEquals(1, taikai.rules().size()); assertTrue(taikai.rules().contains(mockRule)); "<AssertPlaceHolder>"; }
excludedClasses() { return this.excludedClasses; }
[*] target: assertEquals(3, taikai.excludedClasses().size())
[-] pred:  org. junit. Assert. assertTrue ( taikai. excludedClasses() )

[*] target: assertEquals(3, taikai.excludedClasses().size())
[-] pred:  org. junit. Assert. assertTrue ( taikai. excludedClasses() ( ) )

[*] target: assertEquals(3, taikai.excludedClasses().size())
[-] pred:  org. junit. Assert. assertTrue ( taikai. excludedClasses(). is ( ) )

[*] target: assertEquals(3, taikai.excludedClasses().size())
[-] pred:  )

[*] target: assertEquals(3, taikai.excludedClasses().size())
[-] pred:  org

************************************
************************************
[+] input: shouldAddSingleRule() { TaikaiRule mockRule = mock(TaikaiRule.class);  Taikai taikai = Taikai.builder() .namespace(VALID_NAMESPACE) .addRule(mockRule) .build();  assertEquals(1, taikai.rules().size()); "<AssertPlaceHolder>"; }
rules() { return this.rules; }
[*] target: assertTrue(taikai.rules().contains(mockRule))
[-] pred:  org. junit. Assert. assertEquals ( 1, taikai. rules(). rules() ( ) )

[*] target: assertTrue(taikai.rules().contains(mockRule))
[-] pred:  org. junit. Assert. assertEquals ( 1, taikai. rules() ( ). size ( ) )

[*] target: assertTrue(taikai.rules().contains(mockRule))
[-] pred:  org. junit. Assert. assertEquals ( 1, taikai. rules(). rules ( ). size ( ) )

[*] target: assertTrue(taikai.rules().contains(mockRule))
[-] pred:  org. junit. Assert. assertTrue ( taikai. rules(). rules() ( 2 ). isEmpty ( ) )

[*] target: assertTrue(taikai.rules().contains(mockRule))
[-] pred:  org. junit. Assert. assertEquals ( 1, taikai. rules(). rules() ( ). 2 )

************************************
************************************
[+] input: shouldRebuildTaikaiWithNewValues() { Taikai taikai = Taikai.builder() .namespace(VALID_NAMESPACE) .excludeClass("com.enofex.taikai.ClassToExclude") .failOnEmpty(true) .java(java -> java .fieldsShouldNotBePublic()) .build();  Taikai modifiedTaikai = taikai.toBuilder() .namespace("com.enofex.newnamespace") .excludeClass("com.enofex.taikai.AnotherClassToExclude") .failOnEmpty(false) .java(java -> java .classesShouldImplementHashCodeAndEquals() .finalClassesShouldNotHaveProtectedMembers()) .build();  assertFalse(modifiedTaikai.failOnEmpty()); assertEquals("com.enofex.newnamespace", modifiedTaikai.namespace()); assertEquals(2, modifiedTaikai.excludedClasses().size()); assertEquals(3, modifiedTaikai.rules().size()); assertTrue(modifiedTaikai.excludedClasses().contains("com.enofex.taikai.ClassToExclude")); "<AssertPlaceHolder>"; }
excludedClasses() { return this.excludedClasses; }
[*] target: assertTrue( modifiedTaikai.excludedClasses().contains("com.enofex.taikai.AnotherClassToExclude"))
[-] pred:  org. junit. Assert. assertThat ( modifiedTaikai. excludedClasses() ( ), org. hamcrest. CoreMatchers. is ( taikai ) )

[*] target: assertTrue( modifiedTaikai.excludedClasses().contains("com.enofex.taikai.AnotherClassToExclude"))
[-] pred:  org. junit. Assert. assertThat ( modifiedTaikai. excludedClasses(). ), org. hamcrest. CoreMatchers. is ( taikai ) )

[*] target: assertTrue( modifiedTaikai.excludedClasses().contains("com.enofex.taikai.AnotherClassToExclude"))
[-] pred:  org. junit. Assert. assertThat ( modifiedTaikai. excludedClasses(). size ( ), org. hamcrest. CoreMatchers. is ( 2 ) )

[*] target: assertTrue( modifiedTaikai.excludedClasses().contains("com.enofex.taikai.AnotherClassToExclude"))
[-] pred:  org. junit. Assert. assertSame ( taikai, modifiedTaikai )

[*] target: assertTrue( modifiedTaikai.excludedClasses().contains("com.enofex.taikai.AnotherClassToExclude"))
[-] pred:  org. junit. Assert. assertNull ( modifiedTaikai )

************************************
************************************
[+] input: shouldReturnNamespace() { ConfigurerContext context = new ConfigurerContext(VALID_NAMESPACE, VALID_CONFIGURERS);  "<AssertPlaceHolder>"; }
namespace() { return this.namespace; }
[*] target: assertEquals(VALID_NAMESPACE, context.namespace())
[-] pred:  org. junit. Assert. assertTrue ( context. namespace() ( ). isEmpty ( ) )

[*] target: assertEquals(VALID_NAMESPACE, context.namespace())
[-] pred:  org. junit. Assert. assertEquals ( ""test"", context. namespace() )

[*] target: assertEquals(VALID_NAMESPACE, context.namespace())
[-] pred:  org. junit. Assert. assertEquals ( 2, context. namespace() ( ) )

[*] target: assertEquals(VALID_NAMESPACE, context.namespace())
[-] pred:  org. junit. Assert. assertEquals ( ""test"", context. namespace() ) )

[*] target: assertEquals(VALID_NAMESPACE, context.namespace())
[-] pred:  org. junit. Assert. assertEquals ( 2, context. namespace(). size ( ) )

************************************
************************************
[+] input: shouldReturnConfigurers() { ConfigurerContext context = new ConfigurerContext(VALID_NAMESPACE, VALID_CONFIGURERS);  "<AssertPlaceHolder>"; }
configurers() { return this.configurers; }
[*] target: assertSame(VALID_CONFIGURERS, context.configurers())
[-] pred:  org. junit. Assert. assertNotNull ( context. configurers() )

[*] target: assertSame(VALID_CONFIGURERS, context.configurers())
[-] pred:  org. junit. Assert. assertNotNull ( context. configurers() ( ) )

[*] target: assertSame(VALID_CONFIGURERS, context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( context. configurers() ( ). isEmpty ( ) )

[*] target: assertSame(VALID_CONFIGURERS, context.configurers())
[-] pred:  org. junit. Assert. assertEquals ( 1, context. configurers() )

[*] target: assertSame(VALID_CONFIGURERS, context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() )!= null ) )

************************************
************************************
[+] input: shouldHandleNullNamespace() { ConfigurerContext context = new ConfigurerContext(null, VALID_CONFIGURERS);  "<AssertPlaceHolder>"; }
namespace() { return this.namespace; }
[*] target: assertNull(context.namespace())
[-] pred:  org. junit. Assert. assertNull ( context. namespace() )

[*] target: assertNull(context.namespace())
[-] pred:  org. junit. Assert. assertNull ( context. namespace() { )

[*] target: assertNull(context.namespace())
[-] pred:  org. junit. Assert. assertNull ( context. namespace()

[*] target: assertNull(context.namespace())
[-] pred:  the namespace for the code java

[*] target: assertNull(context.namespace())
[-] pred:  . namespace() is null

************************************
************************************
[+] input: shouldHandleNullConfigurers() { ConfigurerContext context = new ConfigurerContext(VALID_NAMESPACE, null);  "<AssertPlaceHolder>"; }
configurers() { return this.configurers; }
[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( context. configurers() ( ). isEmpty ( ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( context. configurers(). isEmpty ( ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() )!= null ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() ) == null ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertNotNull ( context. configurers() )

************************************
************************************
[+] input: shouldHandleNullParameters() { ConfigurerContext context = new ConfigurerContext(null, null);  assertNull(context.namespace()); "<AssertPlaceHolder>"; }
configurers() { return this.configurers; }
[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertNull ( context. configurers() )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() ) instanceof Configurer ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() ) == null ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertNull ( context. configurers() ( ) )

[*] target: assertNull(context.configurers())
[-] pred:  org. junit. Assert. assertTrue ( ( ( context. configurers() )!= null ) )

************************************
************************************
[+] input: shouldGetOrApplyReturnExistingConfigurer() { TestConfigurer testConfigurer = new TestConfigurer(); this.configurers.getOrApply(testConfigurer); TestConfigurer retrievedConfigurer = this.configurers.getOrApply(new TestConfigurer());  "<AssertPlaceHolder>"; }
getOrApply(C configurer) { requireNonNull(configurer);  C existingConfigurer = (C) this.get(configurer.getClass()); return existingConfigurer != null ? existingConfigurer : this.apply(configurer); }
[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. getOrApply(configurer.getClass()); )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. getOrApply(configurer. ) )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. getOrApply(configurer.org )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. getOrApply(configurer.MILLIS()); )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer )

************************************
************************************
[+] input: shouldGetOrApplyApplyNewConfigurer() { TestConfigurer testConfigurer = new TestConfigurer(); TestConfigurer retrievedConfigurer = this.configurers.getOrApply(testConfigurer);  assertSame(testConfigurer, retrievedConfigurer); "<AssertPlaceHolder>"; }
all() { return this.configurers.values(); }
[*] target: assertEquals(1, this.configurers.all().size())
[-] pred:  org. junit. Assert. assertTrue ( retrievedConfigurer. all() ( ). contains ( testConfigurer ) )

[*] target: assertEquals(1, this.configurers.all().size())
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. all() ( ) )

[*] target: assertEquals(1, this.configurers.all().size())
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer. all() ( ), retrievedConfigurer. all() )

[*] target: assertEquals(1, this.configurers.all().size())
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer. all(), retrievedConfigurer. all() ( ) )

[*] target: assertEquals(1, this.configurers.all().size())
[-] pred:  org. junit. Assert. assertTrue ( retrievedConfigurer. all() ( ). isEmpty ( ) )

************************************
************************************
[+] input: shouldGetReturnConfigurerByClass() { TestConfigurer testConfigurer = new TestConfigurer(); this.configurers.getOrApply(testConfigurer); TestConfigurer retrievedConfigurer = this.configurers.get(TestConfigurer.class);  "<AssertPlaceHolder>"; }
get(Class<C> clazz) { return (C) this.configurers.get(clazz); }
[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer. get(Class<sp> clazz ), retrievedConfigurer. get(Class<sp> class )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer. get(Class<sp> class ), retrievedConfigurer. get(Class<sp> class )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. get(Class<sp> clazz ) )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer, retrievedConfigurer. get(Class<C> clazz ) )

[*] target: assertSame(testConfigurer, retrievedConfigurer)
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer )

************************************
************************************
[+] input: shouldGetReturnNullForUnknownClass() { "<AssertPlaceHolder>"; }
get(Class<C> clazz) { return (C) this.configurers.get(clazz); }
[*] target: assertNull(this.configurers.get(TestConfigurer.class))
[-] pred:  org. junit. Assert. assertNull ( subject. get(Class<C> clazz ) )

[*] target: assertNull(this.configurers.get(TestConfigurer.class))
[-] pred:  org. junit. Assert. assertEquals ( null, ctx. get(Class<C> clazz ) )

[*] target: assertNull(this.configurers.get(TestConfigurer.class))
[-] pred:  org. junit. Assert. assertNull ( c. get(Class<C> clazz ) )

[*] target: assertNull(this.configurers.get(TestConfigurer.class))
[-] pred:  org. junit. Assert. assertNull ( provider. get(Class<C> clazz ) )

[*] target: assertNull(this.configurers.get(TestConfigurer.class))
[-] pred:  org. junit. Assert. assertNull ( this. component. get(Class<C> clazz )

************************************
************************************
[+] input: shouldAllReturnAllConfigurers() { TestConfigurer testConfigurer1 = new TestConfigurer(); AnotherTestConfigurer testConfigurer2 = new AnotherTestConfigurer(); this.configurers.getOrApply(testConfigurer1); this.configurers.getOrApply(testConfigurer2);  Collection<Configurer> allConfigurers = this.configurers.all();  "<AssertPlaceHolder>"; assertTrue(allConfigurers.contains(testConfigurer1)); assertTrue(allConfigurers.contains(testConfigurer2)); }
all() { return this.configurers.values(); }
[*] target: assertEquals(2, allConfigurers.size())
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer1, allConfigurers )

[*] target: assertEquals(2, allConfigurers.size())
[-] pred:  org. junit. Assert. assertNotNull ( allConfigurers )

[*] target: assertEquals(2, allConfigurers.size())
[-] pred:  org. junit. Assert. assertEquals ( testConfigurer2, allConfigurers )

[*] target: assertEquals(2, allConfigurers.size())
[-] pred:  org. junit. Assert. assertEquals ( testsConfigurer1, allConfigurers )

[*] target: assertEquals(2, allConfigurers.size())
[-] pred:  org

************************************
************************************
[+] input: shouldIteratorIterateOverAllConfigurers() { TestConfigurer testConfigurer1 = new TestConfigurer(); AnotherTestConfigurer testConfigurer2 = new AnotherTestConfigurer(); this.configurers.getOrApply(testConfigurer1); this.configurers.getOrApply(testConfigurer2);  Iterator<Configurer> iterator = this.configurers.iterator(); "<AssertPlaceHolder>"; assertSame(testConfigurer1, iterator.next()); assertSame(testConfigurer2, iterator.next()); assertFalse(iterator.hasNext()); }
iterator() { return this.configurers.values().iterator(); }
[*] target: assertTrue(iterator.hasNext())
[-] pred:  org. junit. Assert. assertNotNull ( iterator )

[*] target: assertTrue(iterator.hasNext())
[-] pred:  org. junit. Assert. assertSame ( testConfigurer2, iterator )

[*] target: assertTrue(iterator.hasNext())
[-] pred:  org. junit. Assert. assertSame ( testConfigurer1, iterator )

[*] target: assertTrue(iterator.hasNext())
[-] pred:  org. junit. Assert. assertFalse ( iterator. iterator ( ) )

[*] target: assertTrue(iterator.hasNext())
[-] pred:  )

************************************
************************************
[+] input: testEquals() { ActionGroup anotherActionGroup = new ActionGroup("TestGroup", "Test Description");  "<AssertPlaceHolder>"; }
equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ActionGroup that = (ActionGroup) o; return Objects.equals(groupInfo, that.groupInfo); }
[*] target: assertTrue(actionGroup.equals(anotherActionGroup))
[-] pred:  org. junit. Assert. assertFalse ( anotherActionGroup. equals ( null ) )

[*] target: assertTrue(actionGroup.equals(anotherActionGroup))
[-] pred:  org. junit. Assert. assertTrue ( anotherActionGroup. equals ( anotherActionGroup ) )

[*] target: assertTrue(actionGroup.equals(anotherActionGroup))
[-] pred:  org. junit. Assert. assertFalse ( anotherActionGroup. equals(Object ) )

[*] target: assertTrue(actionGroup.equals(anotherActionGroup))
[-] pred:  org. junit. Assert. assertFalse ( anotherActionGroup. equals(Object. class )

[*] target: assertTrue(actionGroup.equals(anotherActionGroup))
[-] pred:  org

************************************
************************************
[+] input: testDefaultMethods() { AIAction action = new AIAction() { @Override public String getActionName() { return "testAction"; }  @Override public ActionType getActionType() { return ActionType.JAVAMETHOD; }  @Override public String getDescription() { return "Test description"; } };  assertEquals(ActionRisk.LOW, action.getActionRisk()); assertEquals("default", action.getActionGroup()); "<AssertPlaceHolder>"; }
getGroupDescription() { return "default"; }
[*] target: assertEquals("default", action.getGroupDescription())
[-] pred:  org. junit. Assert. assertNull ( action. getGroupDescription() ( ) )

[*] target: assertEquals("default", action.getGroupDescription())
[-] pred:  org. junit. Assert. assertSame ( action, action. getGroupDescription() )

[*] target: assertEquals("default", action.getGroupDescription())
[-] pred:  org. junit. Assert. assertSame ( action, action. getGroupDescription() ) )

[*] target: assertEquals("default", action.getGroupDescription())
[-] pred:  )

[*] target: assertEquals("default", action.getGroupDescription())
[-] pred:  org

************************************
************************************
[+] input: AIProcessingException { String question = "What is the meaning of life?"; String answer = "42"; String expected = " this was my question { "+ question+"} context - "+answer; String result = mockProcessor.query(question, answer); Assertions."<AssertPlaceHolder>"; }
query(String question, String answer) throws AIProcessingException { return query(" this was my question { "+ question+"} context - "+answer); }
[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result

[*] target: assertEquals(expected, result)
[-] pred:  org. junit, expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  returns the expected matching matching question

[*] target: assertEquals(expected, result)
[-] pred:  return the expected matching matching question

[*] target: assertEquals(expected, result)
[-] pred:  the expected element of the result

************************************
************************************
[+] input: AIProcessingException { String prompt = "This is a test."; String expected = " Summarize this { "+ prompt+"}"; String result = mockProcessor.summarize(prompt); Assertions."<AssertPlaceHolder>"; }
summarize(String prompt) throws AIProcessingException { return query(" Summarize this { "+ prompt+"}" ); }
[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result. summarize(String prompt )

[*] target: assertEquals(expected, result)
[-] pred:  the expected, result )

[*] target: assertEquals(expected, result)
[-] pred:  AIProcessingException )

[*] target: assertEquals(expected, result)
[-] pred:  expected, result )

************************************
************************************
[+] input: testTransform() {  try (MockedStatic<PredictionLoader> responseHandlerMock = Mockito.mockStatic(PredictionLoader.class)) {  PredictionLoader mockGRP = Mockito.mock(PredictionLoader.class); responseHandlerMock.when(() -> PredictionLoader.getInstance()).thenReturn(mockGRP); AnthropicChatModel mockOpenAiChatModel = Mockito.mock(AnthropicChatModel.class); Mockito.when(mockOpenAiChatModel.generate(Mockito.anyString())).thenReturn("{'response':'success'}"); Mockito.when(mockGRP.getAnthropicChatModel()).thenReturn(mockOpenAiChatModel); AnthropicTransformer transformer = new AnthropicTransformer(); String json = transformer.getJSONResponseFromAI("My name is vishal and I am from India. I love vegetarian food","{}"); Assertions."<AssertPlaceHolder>"; } }
getJSONResponseFromAI(String prompt, String jsonStr) { jsonStr = PredictionLoader.getInstance().getAnthropicChatModel().generate(" Here is your prompt {" + prompt + "} - here is the json - " + jsonStr + " - populate the fieldValue and return the json"); return jsonStr; }
[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertNotNull ( json )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertTrue ( ( json!= null ) )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertEquals ( ""1"", json )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertEquals ( """", json )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org

************************************
************************************
[+] input: testGetActionType() { "<AssertPlaceHolder>"; }
getActionType() { return ActionType.BIAS; }
[*] target: assertEquals(ActionType.BIAS, biasDetector.getActionType())
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. component. getActionType() == ( 200 ) ) )

[*] target: assertEquals(ActionType.BIAS, biasDetector.getActionType())
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. component. getActionType() ) == 100 ) )

[*] target: assertEquals(ActionType.BIAS, biasDetector.getActionType())
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. component. getActionType() ) == ( this. getActionType() ) ) )

[*] target: assertEquals(ActionType.BIAS, biasDetector.getActionType())
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. component. getActionType() == ( this. getActionType() ) ) ) )

[*] target: assertEquals(ActionType.BIAS, biasDetector.getActionType())
[-] pred:  org. junit. Assert. assertTrue ( ( ( this. component. getActionType() == ( 200 ) ) ) )

************************************
************************************
[+] input: testGetDescription() { "<AssertPlaceHolder>"; }
getDescription() { return "Detect Bias in response"; }
[*] target: assertEquals("Detect Bias in response", biasDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( response. getDescription ( ), 200 )

[*] target: assertEquals("Detect Bias in response", biasDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( response. getDescription ( ), e. getMessage ( ) )

[*] target: assertEquals("Detect Bias in response", biasDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( version, filter. getDescription() ( ) )

[*] target: assertEquals("Detect Bias in response", biasDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( response. getDescription() ( ), 200 )

[*] target: assertEquals("Detect Bias in response", biasDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( response. getDescription ( ), e. getDescription ( ) )

************************************
************************************
[+] input: GuardRailException { "<AssertPlaceHolder>"; assertNotNull(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName());  }
execute(DetectValues dd) throws GuardRailException { return null; }
[*] target: assertNull(biasDetector.execute(null))
[-] pred:  org. junit. Assert. assertNull ( my assertNotNull(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName()); } execute(DetectValues dd) throws GuardRailException { return null ; }

[*] target: assertNull(biasDetector.execute(null))
[-] pred:  org. junit. Assert. assertNull ( context. execute(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName()); } execute(DetectValues dd) throws GuardRailException { return null ; }

[*] target: assertNull(biasDetector.execute(null))
[-] pred:  org. junit. Assert. assertNull ( this. assertNotNull(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName()); } execute(DetectValues dd) throws GuardRailException { return null ; }

[*] target: assertNull(biasDetector.execute(null))
[-] pred:  org. junit. Assert. assertNull ( my assertNotNull(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName());

[*] target: assertNull(biasDetector.execute(null))
[-] pred:  org. junit. Assert. assertNull ( context. execute(biasDetector.getActionName()); assertEquals("execute", biasDetector.getActionName());

************************************
************************************
[+] input: testAskAdditionalQuestion() { // Create an instance of BlankAction BlankAction blankAction = new BlankAction();  // Call askAdditionalQuestion method on the object String result = blankAction.askAdditionalQuestion("What's the weather?");  // Assert statements to verify the return value of the method call "<AssertPlaceHolder>"; }
askAdditionalQuestion(String additionalQuestion){ return "provide answer for this query : "+additionalQuestion; }
[*] target: assertEquals("provide answer for this query : What's the weather?", result)
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals("provide answer for this query : What's the weather?", result)
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("provide answer for this query : What's the weather?", result)
[-] pred:  org. junit. Assert. assertEquals ( result, null )

[*] target: assertEquals("provide answer for this query : What's the weather?", result)
[-] pred:  org. junit. Assert. assertEquals ( result, STRING_0 )

[*] target: assertEquals("provide answer for this query : What's the weather?", result)
[-] pred:  org

************************************
************************************
[+] input: testExtendedInputParameter() { // Create an instance of ExtendedInputParameter ExtendedInputParameter inputParameter = new ExtendedInputParameter("TestName", "TestValue");  // Test the methods of ExtendedInputParameter assertEquals("TestName", inputParameter.getName()); "<AssertPlaceHolder>"; assertEquals("TestValue", inputParameter.getType()); assertNull(inputParameter.getDefaultValueStr()); }
hasDefaultValue(){ return hasDefaultValue; }
[*] target: assertEquals(false, inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertNotNull ( inputParameter )

[*] target: assertEquals(false, inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertTrue ( inputParameter. hasDefaultValue(){ )

[*] target: assertEquals(false, inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertNotNull ( inputParameter. hasDefaultValue(){ )

[*] target: assertEquals(false, inputParameter.hasDefaultValue())
[-] pred:  org

[*] target: assertEquals(false, inputParameter.hasDefaultValue())
[-] pred:  )

************************************
************************************
[+] input: LoaderException { // Create a mock of ExtendedPredictedAction ExtendedPredictedAction actionMock = new ExtendedPredictedAction() { @Override public List<ExtendedInputParameter> getInputParameters() { ArrayList<ExtendedInputParameter> inputParameters = new ArrayList<>(); inputParameters.add(new ExtendedInputParameter("param1", "String")); return inputParameters; }    @Override public Object extendedExecute(Map<String, Object> params) throws LoaderException { return params; }  @Override public String getActionName() { return "MockAction"; }  @Override public String getDescription() { return "Mock action Description"; }  @Override public String getActionGroup() { return "Mock Group"; }  @Override public String getGroupDescription() { return "Mock Description"; } };  Assertions.assertEquals("MockAction", actionMock.getActionName()); Assertions.assertEquals("Mock action Description", actionMock.getDescription()); Assertions.assertEquals("Mock Group", actionMock.getActionGroup()); Assertions.assertEquals("Mock Description", actionMock.getGroupDescription()); Assertions."<AssertPlaceHolder>";    }
getActionType() { return ActionType.EXTEND; }
[*] target: assertEquals(ActionType.EXTEND, actionMock.getActionType())
[-] pred:  org. junit. Assert. assertThat ( actionMock. getActionType() ( ), org. hamcrest. CoreMatchers. is ( 2.0 ) )

[*] target: assertEquals(ActionType.EXTEND, actionMock.getActionType())
[-] pred:  org. junit. Assert. assertThat ( actionMock. getActionType() ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(ActionType.EXTEND, actionMock.getActionType())
[-] pred:  org. junit. Assert. assertThat ( actionMock. getActionType() ( ), org. hamcrest. CoreMatchers. is ( actionMock. getActionTypeA ) )

[*] target: assertEquals(ActionType.EXTEND, actionMock.getActionType())
[-] pred:  )

[*] target: assertEquals(ActionType.EXTEND, actionMock.getActionType())
[-] pred:  org

************************************
************************************
[+] input: testGetActionType() { "<AssertPlaceHolder>"; }
getActionType() { return ActionType.FACT; }
[*] target: assertEquals(ActionType.FACT, factDetector.getActionType())
[-] pred:  org. junit. Assert. assertNull ( request. getActionType() )

[*] target: assertEquals(ActionType.FACT, factDetector.getActionType())
[-] pred:  org. junit. Assert. assertNull ( page. getActionType() )

[*] target: assertEquals(ActionType.FACT, factDetector.getActionType())
[-] pred:  org. junit. Assert. assertNull ( action. getActionType() )

[*] target: assertEquals(ActionType.FACT, factDetector.getActionType())
[-] pred:  org. junit. Assert. assertNull ( request. getActionType() ) )

[*] target: assertEquals(ActionType.FACT, factDetector.getActionType())
[-] pred:  org

************************************
************************************
[+] input: testGetDescription() { "<AssertPlaceHolder>"; }
getDescription() { return "Fact Check in response"; }
[*] target: assertEquals("Fact Check in response", factDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( """", response. getDescription() ( ) )

[*] target: assertEquals("Fact Check in response", factDetector.getDescription())
[-] pred:  org. junit. Assert. assertEquals ( """", job. getDescription() ( ) )

[*] target: assertEquals("Fact Check in response", factDetector.getDescription())
[-] pred:  org. junit. Assert. assertNotNull ( bean. getDescription() ( ) )

[*] target: assertEquals("Fact Check in response", factDetector.getDescription())
[-] pred:  org. junit. Assert. assertNotNull ( e. getDescription() ( ) )

[*] target: assertEquals("Fact Check in response", factDetector.getDescription())
[-] pred:  . http www

************************************
************************************
[+] input: GuardRailException { "<AssertPlaceHolder>"; }
execute(DetectValues dd)  throws GuardRailException { return null; }
[*] target: assertNull(factDetector.execute(new DetectValues()))
[-] pred:  org. junit. Assert. assertNull ( this. adapter. execute(DetectValues dd) throws GuardRailException { return null; ; } }

[*] target: assertNull(factDetector.execute(new DetectValues()))
[-] pred:  org. junit. Assert. assertNull ( this. manager. execute(DetectValues dd) throws GuardRailException { return null; ; } }

[*] target: assertNull(factDetector.execute(new DetectValues()))
[-] pred:  org. junit. Assert. assertNull ( this. processor. execute(DetectValues dd) throws GuardRailException { return null; ; } }

[*] target: assertNull(factDetector.execute(new DetectValues()))
[-] pred:  org. junit. Assert. assertNull ( this. adapter. execute(DetectValues dd) throws GuardRailException { return null ; } }

[*] target: assertNull(factDetector.execute(new DetectValues()))
[-] pred:  org. junit. Assert. assertNull ( this. manager. execute(DetectValues dd) throws GuardRailException { return null ; } }

************************************
************************************
[+] input: IOException { String mockGRPSTR = "{\n" + "    "className": "com.t4a.examples.pojo.Organization",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "name",\n" + "            "fieldType": "String",\n" + "            "fieldValue": "Gulab Movies Inc"\n" + "        },\n" + "        {\n" + "            "fieldName": "em",\n" + "            "className": "com.t4a.examples.pojo.Employee",\n" + "            "fieldType": "list",\n" + "            "prompt": "If you find more than 1 Employee add it as another object inside fieldValue",\n" + "            "fieldValue": [\n" + "                {\n" + "                    "fieldName": "name",\n" + "                    "fieldType": "String",\n" + "                    "fieldValue": "Amitabh Kapoor",\n" + "                    "department": "Actor",\n" + "                    "salary": 1000000,\n" + "                    "location": "Mumbai",\n" + "                    "dateJoined": "01-01-2020",\n" + "                    "tasks": []\n" + "                },\n" + "                {\n" + "                    "fieldName": "name",\n" + "                    "fieldType": "String",\n" + "                    "fieldValue": "Anil Bacchan",\n" + "                    "department": "Director",\n" + "                    "salary": 1500000,\n" + "                    "location": "Bangalore",\n" + "                    "dateJoined": "15-01-2021",\n" + "                    "tasks": []\n" + "                }\n" + "            ]\n" + "        },\n" + "        {\n" + "            "fieldName": "locations",\n" + "            "description": "there could be multiple String",\n" + "            "className": "java.lang.String",\n" + "            "fieldType": "list",\n" + "            "fieldValue": ["Mumbai", "Bangalore"]\n" + "        },\n" + "        {\n" + "            "fieldName": "customers",\n" + "            "isArray": true,\n" + "            "fieldType": "Customer[]",\n" + "            "fieldValue": []\n" + "        }\n" + "    ]\n" + "}"; GenerativeModel mockGRP = Mockito.mock(GenerativeModel.class); GenerateContentResponse mockGRPResponse = Mockito.mock(GenerateContentResponse.class); Mockito.when(mockGRPResponse.getCandidatesCount()).thenReturn(1); Mockito.when(mockGRP.generateContent(any(Content.class))).thenReturn(mockGRPResponse); try (MockedStatic<ResponseHandler> geminiMock = Mockito.mockStatic(ResponseHandler.class)) { geminiMock.when(() -> ResponseHandler.getText(any(GenerateContentResponse.class))).thenReturn(mockGRPSTR); geminiImageActionProcessor.setModel(mockGRP); Organization org = (Organization) geminiImageActionProcessor.imageToPojo(this.getClass().getClassLoader().getResource("fitness.PNG"), Employee.class); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, org.getEm().size()); } catch (AIProcessingException e) { throw new RuntimeException(e); } }
imageToPojo(URL imageNameAndPath, Class<?> clazz) throws AIProcessingException{ try { JsonUtils utils = new JsonUtils(); String jsonStr = utils.convertClassToJSONString(clazz); String mimeType = getMimeType(imageNameAndPath); jsonStr= imageToText(readImageFile(imageNameAndPath.toURI().toString()),mimeType, "look at this image and populate fieldValue in this json "+jsonStr); return utils.populateClassFromJson(jsonStr); } catch (Exception e) { throw new AIProcessingException(e); } }
[*] target: assertEquals("Gulab Movies Inc", org.getName())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( testGRPSTR ) )

[*] target: assertEquals("Gulab Movies Inc", org.getName())
[-] pred:  org. junit. Assert. assertThat ( rendered, org. hamcrest. CoreMatchers. is ( mockGRPSTR ) )

[*] target: assertEquals("Gulab Movies Inc", org.getName())
[-] pred:  org. junit. Assert. assertEquals ( fail, coll )

[*] target: assertEquals("Gulab Movies Inc", org.getName())
[-] pred:  org. junit. Assert. assertThat ( org. junit. toString ( ), org. hamcrest. CoreMatchers. is ( test ) )

[*] target: assertEquals("Gulab Movies Inc", org.getName())
[-] pred:  org

************************************
************************************
[+] input: testCalculateTruthPercent() { HallucinationQA hallucinationQA = new HallucinationQA(); hallucinationQA.setTruthPercentage("75%");  double truthPercent = hallucinationQA.calculateTruthPercent();  "<AssertPlaceHolder>"; }
calculateTruthPercent() { String numberString = truthPercentage.replaceAll("[^\\d.]", ""); double doublePer = Double.parseDouble(numberString); return doublePer; }
[*] target: assertEquals(75.0, truthPercent)
[-] pred:  org. junit. Assert. assertEquals ( 0, truthPercent, 0 )

[*] target: assertEquals(75.0, truthPercent)
[-] pred:  org. junit. Assert. assertNotNull ( truthPercent )

[*] target: assertEquals(75.0, truthPercent)
[-] pred:  org. junit. Assert. assertEquals ( 100, double truthPercent, 0 )

[*] target: assertEquals(75.0, truthPercent)
[-] pred:  org. junit. Assert. assertEquals ( 0.0, double truthPercent, 0 )

[*] target: assertEquals(75.0, truthPercent)
[-] pred:  org. junit. Assert. assertEquals ( 50, truthPercent, 0 )

************************************
************************************
[+] input: IOException { String expectedResponse = "Expected response"; InputStream stream = new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8)); when(mockHttpClient.execute(any(HttpGet.class))).thenReturn(mockHttpResponse); when(mockHttpResponse.getEntity()).thenReturn(mockHttpEntity); when(mockHttpEntity.getContent()).thenReturn(stream);  Map<String, Object> params = new HashMap<>(); params.put("test", "test");  String actualResponse = httpPredictedAction.executeHttpGet(params);  "<AssertPlaceHolder>"; }
executeHttpGet(Map<String, Object> parameters) throws UnsupportedEncodingException {  if(url.indexOf("{") != -1) { url = replacePlaceholders(url,parameters); } else { // Construct the query string from parameters StringBuilder queryString = new StringBuilder(); for (Map.Entry<String, Object> entry : parameters.entrySet()) { if (queryString.length() > 0) { queryString.append("&"); } queryString.append(entry.getKey()).append("=").append(entry.getValue()); }  // Append the query string to the URL if (queryString.length() > 0) { url += "?" + queryString.toString(); }  } try { log.debug("sending request to "+url); HttpGet request = new HttpGet(url); if(headers!=null) { for (Map.Entry<String, String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } HttpResponse response = client.execute(request); HttpEntity entity = response.getEntity(); if (entity != null) { // Convert response entity to JSON string String jsonResponse = EntityUtils.toString(entity); log.debug("Response: from Url "+url+" is " + jsonResponse); // Further processing of jsonResponse... return jsonResponse; } } catch (IOException e) { log.warn(e.getMessage()); // Handle exception... } return null; }  public String executeHttpPost(Map<String, Object> postData) throws IOException { // Convert postData to JSON JsonObject json = new JsonObject(); for (Map.Entry<String, Object> entry : postData.entrySet()) { json.addProperty(entry.getKey(), (String) entry.getValue()); } String jsonPayload = gson.toJson(json);  // Execute HTTP POST request using the provided URL and JSON payload HttpPost request = new HttpPost(url); if(headers!=null) { for (Map.Entry<String, String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } request.setEntity(new StringEntity(jsonPayload, ContentType.APPLICATION_JSON));  HttpResponse response = client.execute(request); // Handle response... String respStr =  EntityUtils.toString(response.getEntity()); log.debug("Response from url "+url+" is "+respStr); return respStr; }  /** * <pre> * THis method will be automatically called by the processor , the params are populated by AI directly * for example if the prompt was "hey hows the weather in Toronto on Sunday , 8th Sep" and your inputParams are * <code> *     "input_object":[ *         { *           "name": "city", *           "type": "query_parameter", *           "description": "City Name" *       }, *       { *                 "name": "date", *                 "type": "query_parameter", *                 "description": "date" *       } * * </code> * Then those params will get automatically mapped * *</pre> * @param params * @return * @throws IOException */ public  String executeHttpRequest(Map<String, Object> params) throws IOException { for (InputParameter parameter : inputObjects) { if(parameter.hasDefaultValue()) params.put(parameter.getName(), parameter.getDefaultValue()); } if (HttpMethod.GET == getType()) { return executeHttpGet(params); } else if (HttpMethod.POST == getType()) { return executeHttpPost(params); } else { return null; }   } @Override public ActionType getActionType() { return ActionType.HTTP; }    @Override public String getDescription() { return description; }  @Override public String toString() { return "HttpPredictedAction{" + "actionName='" + actionName + ''' + ", url='" + url + ''' + ", type='" + type + ''' + ", inputObjects=" + inputObjects + ", outputObject=" + outputObject + ", authInterface=" + authInterface + ", description='" + description + ''' + ", client=" + client + ", gson=" + gson + '}'; }  @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; HttpPredictedAction that = (HttpPredictedAction) o; return Objects.equals(actionName, that.actionName); }  @Override public int hashCode() { return Objects.hash(actionName); }   }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse ; }

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit ). assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org

************************************
************************************
[+] input: IOException { String expectedResponse = "Expected response"; InputStream stream = new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8)); when(mockHttpClient.execute(any(HttpPost.class))).thenReturn(mockHttpResponse); when(mockHttpResponse.getEntity()).thenReturn(mockHttpEntity); when(mockHttpEntity.getContent()).thenReturn(stream);  Map<String, Object> postData = new HashMap<>(); postData.put("test", "test");  String actualResponse = httpPredictedAction.executeHttpPost(postData);  "<AssertPlaceHolder>"; }
executeHttpPost(Map<String, Object> postData) throws IOException { // Convert postData to JSON JsonObject json = new JsonObject(); for (Map.Entry<String, Object> entry : postData.entrySet()) { json.addProperty(entry.getKey(), (String) entry.getValue()); } String jsonPayload = gson.toJson(json);  // Execute HTTP POST request using the provided URL and JSON payload HttpPost request = new HttpPost(url); if(headers!=null) { for (Map.Entry<String, String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } request.setEntity(new StringEntity(jsonPayload, ContentType.APPLICATION_JSON));  HttpResponse response = client.execute(request); // Handle response... String respStr =  EntityUtils.toString(response.getEntity()); log.debug("Response from url "+url+" is "+respStr); return respStr; }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. org. hamcrest. CoreMatchers. is ( expectedResponse ) )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org

************************************
************************************
[+] input: UnsupportedEncodingException { String url = "http://test.com/{param1}/{param2}"; Map<String, Object> placeholderValues = new HashMap<>(); placeholderValues.put("param1", "value1"); placeholderValues.put("param2", "value2");  String expectedUrl = "http://test.com/value1/value2"; String actualUrl = httpPredictedAction.replacePlaceholders(url, placeholderValues);  "<AssertPlaceHolder>"; }
replacePlaceholders(String url, Map<String, Object> placeholderValues) throws UnsupportedEncodingException { for (Map.Entry<String, Object> entry : placeholderValues.entrySet()) { String placeholder = "{" + entry.getKey() + "}"; String value = String.valueOf(entry.getValue()); value = URLEncoder.encode(value, StandardCharsets.UTF_8.toString()); url = url.replace(placeholder, value); } return url; }
[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred:  org. junit. Assert. assertEquals ( expectedUrl, actualUrl )

[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred:  org. junit. Assert. assertEquals ( expectedUrl, actualUrl )

[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred:  org. junit. Assert. assertEquals ( expectedUrl, actualUrl )

[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred:  org. junit, expectedUrl )

[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred:  org

************************************
************************************
[+] input: testHasDefaultValue() { InputParameter inputParameter = new InputParameter(); assertFalse(inputParameter.hasDefaultValue());  inputParameter.setDefaultValue("Default value"); "<AssertPlaceHolder>"; }
hasDefaultValue() { return defaultValue!= null; }
[*] target: assertTrue(inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertTrue ( inputParameter. hasDefaultValue() ) )

[*] target: assertTrue(inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertTrue ( inputParameter. hasDefaultValue() )

[*] target: assertTrue(inputParameter.hasDefaultValue())
[-] pred:  org. junit. Assert. assertTrue ( inputParameter. hasDefaultValue()Exception )

[*] target: assertTrue(inputParameter.hasDefaultValue())
[-] pred:  whether the inputParameter. hasDefaultValue()

[*] target: assertTrue(inputParameter.hasDefaultValue())
[-] pred:  org

************************************
************************************
[+] input: testMapTypeForPojo() { TestJavaActionExecutor executor = new TestJavaActionExecutor();  assertEquals(Type.STRING, executor.mapTypeForPojo(String.class)); assertEquals(Type.INTEGER, executor.mapTypeForPojo(int.class)); assertEquals(Type.INTEGER, executor.mapTypeForPojo(Integer.class)); assertEquals(Type.NUMBER, executor.mapTypeForPojo(double.class)); assertEquals(Type.NUMBER, executor.mapTypeForPojo(Double.class)); assertEquals(Type.BOOLEAN, executor.mapTypeForPojo(boolean.class)); assertEquals(Type.BOOLEAN, executor.mapTypeForPojo(Boolean.class)); assertEquals(Type.ARRAY, executor.mapTypeForPojo(new int[]{}.getClass())); assertEquals(Type.STRING, executor.mapTypeForPojo(Date.class)); "<AssertPlaceHolder>"; }
mapTypeForPojo(Class<?> type) { if (type == String.class) { return Type.STRING; } else if (type == int.class || type == Integer.class) { return Type.INTEGER; } else if (type == double.class || type == Double.class) { return Type.NUMBER; } else if (type == boolean.class || type == Boolean.class) { return Type.BOOLEAN; } else if(type.isArray()){ return Type.ARRAY; } else if(type.equals(Date.class)){ return Type.STRING; } else { return Type.OBJECT; }  }
[*] target: assertEquals(Type.OBJECT, executor.mapTypeForPojo(Object.class))
[-] pred:  org. junit. Assert. assertEquals ( Type.STRING;, executor. mapTypeForPojo ( new int[]{}.getClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClass

[*] target: assertEquals(Type.OBJECT, executor.mapTypeForPojo(Object.class))
[-] pred:  org. junit. Assert. assertEquals ( Type.STRING;, executor. mapTypeForPojo ( new int[]{}.getClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClass

[*] target: assertEquals(Type.OBJECT, executor.mapTypeForPojo(Object.class))
[-] pred:  org. junit. Assert. assertEquals ( Type.STRING;, executor. mapTypeForPojo ( new int[]{}.getClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClass444

[*] target: assertEquals(Type.OBJECT, executor.mapTypeForPojo(Object.class))
[-] pred:  org. junit. Assert. assertEquals ( Type.STRING;, executor. mapTypeForPojo ( new int[]{}.getClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClass UPDATED

[*] target: assertEquals(Type.OBJECT, executor.mapTypeForPojo(Object.class))
[-] pred:  org. junit. Assert. assertEquals ( Type.STRING;, executor. mapTypeForPojo ( new int[]{}.getClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClassgetClass444Equals

************************************
************************************
[+] input: ClassNotFoundException { String className = Customer.class.getName(); String funName = "testFunction"; String description = "Test function description";  FunctionDeclaration functionDeclaration = javaClassExecutor.buildFunctionFromClass(className, funName, description);  "<AssertPlaceHolder>"; assertEquals(funName, functionDeclaration.getName()); assertEquals(description, functionDeclaration.getDescription()); }
buildFunctionFromClass(String className, String funName, String discription) throws ClassNotFoundException { Schema schema  =mapClassToFun(className,funName, discription); pojoClass = Class.forName(className); generatedFunction = FunctionDeclaration.newBuilder() .setName(funName) .setDescription(discription) .setParameters(schema).build(); return generatedFunction; }
[*] target: assertNotNull(functionDeclaration)
[-] pred:  org. junit. Assert. assertEquals ( functionDeclaration.getName());, funName )

[*] target: assertNotNull(functionDeclaration)
[-] pred:  org. junit. Assert. assertEquals ( functionDeclaration.getName());. size ( ), 0 )

[*] target: assertNotNull(functionDeclaration)
[-] pred:  org. junit. Assert. assertEquals ( functionDeclaration.getName()); )

[*] target: assertNotNull(functionDeclaration)
[-] pred:  org. junit. Assert. assertEquals ( functionDeclaration.getName());. size ( ), description )

[*] target: assertNotNull(functionDeclaration)
[-] pred:  org. junit. Assert. assertEquals ( functionDeclaration.getName());, functionName )

************************************
************************************
[+] input: testExplain() {  LogginggExplainDecision decision = new LogginggExplainDecision();  String promptText = "promptText"; String methodName = "methodName"; String reason = "reason";  Assertions."<AssertPlaceHolder>";   }
explain(String promptText, String methodName, String reason) { log.debug("promptText {} , reason {} ",promptText, reason); return reason; }
[*] target: assertEquals(reason,decision.explain(promptText, methodName, reason))
[-] pred:  org. junit. Assert. assertThat ( decision. explain(String promptText, req, reason ), org. hamcrest. Matchers. is ( reason ) )

[*] target: assertEquals(reason,decision.explain(promptText, methodName, reason))
[-] pred:  org. junit. Assert. assertThat ( decision. explain(String promptText, req, reason ), org. hamcrest. Matchers. equalTo ( reason ) )

[*] target: assertEquals(reason,decision.explain(promptText, methodName, reason))
[-] pred:  org. junit. Assert. assertThat ( decision. explain(String promptText, msg, reason ), org. hamcrest. Matchers. is ( reason ) )

[*] target: assertEquals(reason,decision.explain(promptText, methodName, reason))
[-] pred:  org. junit. Assert. assertThat ( decision. explain(String promptText, msg, reason ), org. hamcrest. Matchers. is ( reason ) )

[*] target: assertEquals(reason,decision.explain(promptText, methodName, reason))
[-] pred:  org. junit. Assert. assertThat ( decision. explain(String promptText, ask, reason ), org. hamcrest. Matchers. is ( reason ) )

************************************
************************************
[+] input: testGetMimeType() { Assertions.assertEquals("image/jpeg", MimeType.JPEG.getMimeType()); Assertions.assertEquals("image/png", MimeType.PNG.getMimeType()); Assertions.assertEquals("image/gif", MimeType.GIF.getMimeType()); Assertions.assertEquals("text/html", MimeType.HTML.getMimeType()); Assertions.assertEquals("text/plain", MimeType.TEXT.getMimeType()); Assertions.assertEquals("application/pdf", MimeType.PDF.getMimeType()); Assertions.assertEquals("application/msword", MimeType.MS_WORD.getMimeType()); Assertions."<AssertPlaceHolder>"; }
getMimeType() { return mimeType; }
[*] target: assertEquals("application/vnd.oasis.opendocument.text", MimeType.OPEN_DOCUMENT_TEXT.getMimeType())
[-] pred:  org. junit. Assert. assertNotNull ( bb. getMimeType() )

[*] target: assertEquals("application/vnd.oasis.opendocument.text", MimeType.OPEN_DOCUMENT_TEXT.getMimeType())
[-] pred:  org. junit. Assert. assertNotNull ( fixture. getMimeType() ( ) )

[*] target: assertEquals("application/vnd.oasis.opendocument.text", MimeType.OPEN_DOCUMENT_TEXT.getMimeType())
[-] pred:  org. junit. Assert. assertThat ( bb. getMimeType(), is ( testGetMimeType ) )

[*] target: assertEquals("application/vnd.oasis.opendocument.text", MimeType.OPEN_DOCUMENT_TEXT.getMimeType())
[-] pred:  test forMimeType

[*] target: assertEquals("application/vnd.oasis.opendocument.text", MimeType.OPEN_DOCUMENT_TEXT.getMimeType())
[-] pred:  org

************************************
************************************
[+] input: testQuery() { String promptText = "Test Prompt";  try (MockedStatic<PredictionLoader> mocked = Mockito.mockStatic(PredictionLoader.class)) { mocked.when(PredictionLoader::getInstance).thenReturn(mockPredictionLoader); String result = processor.query(promptText); "<AssertPlaceHolder>"; // Add more assertions based on your expected output } catch (AIProcessingException e) { fail("Exception should not be thrown"); } }
query(String promptText) throws AIProcessingException { return PredictionLoader.getInstance().getOpenAiChatModel().generate(promptText); }
[*] target: assertNotNull(result, "Result should not be null")
[-] pred:  org. junit. Assert. assertEquals ( promptText, result )

[*] target: assertNotNull(result, "Result should not be null")
[-] pred:  org. junit. Assert. assertEquals ( promptMessage, result )

[*] target: assertNotNull(result, "Result should not be null")
[-] pred:  org. junit. Assert. assertEquals ( promptString, result )

[*] target: assertNotNull(result, "Result should not be null")
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result, "Result should not be null")
[-] pred:  org

************************************
************************************
[+] input: testTransform() {  try (MockedStatic<PredictionLoader> responseHandlerMock = Mockito.mockStatic(PredictionLoader.class)) {  PredictionLoader mockGRP = Mockito.mock(PredictionLoader.class); responseHandlerMock.when(() -> PredictionLoader.getInstance()).thenReturn(mockGRP); OpenAiChatModel mockOpenAiChatModel = Mockito.mock(OpenAiChatModel.class); Mockito.when(mockOpenAiChatModel.generate(Mockito.anyString())).thenReturn("{'response':'success'}"); Mockito.when(mockGRP.getOpenAiChatModel()).thenReturn(mockOpenAiChatModel); OpenAIPromptTransformer transformer = new OpenAIPromptTransformer(); String json = transformer.getJSONResponseFromAI("My name is vishal and I am from India. I love vegetarian food","{}"); Assertions."<AssertPlaceHolder>"; } }
getJSONResponseFromAI(String prompt, String jsonStr) { jsonStr = PredictionLoader.getInstance().getOpenAiChatModel().generate(" Here is your prompt {" + prompt + "} - here is the json - " + jsonStr + " - populate the fieldValue and return the json"); return jsonStr; }
[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertNotNull ( json )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertTrue ( ( json!= null ) )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertEquals ( json, null )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org. junit. Assert. assertEquals ( json, 200 )

[*] target: assertEquals("{'response':'success'}", json)
[-] pred:  org

************************************
************************************
[+] input: testTransformPojo() {  try (MockedStatic<PredictionLoader> responseHandlerMock = Mockito.mockStatic(PredictionLoader.class)) {  PredictionLoader mockGRP = Mockito.mock(PredictionLoader.class); responseHandlerMock.when(() -> PredictionLoader.getInstance()).thenReturn(mockGRP); OpenAiChatModel mockOpenAiChatModel = Mockito.mock(OpenAiChatModel.class); Mockito.when(mockOpenAiChatModel.generate(Mockito.anyString())).thenReturn("{'response':'success'}"); Mockito.when(mockGRP.getOpenAiChatModel()).thenReturn(mockOpenAiChatModel); OpenAIPromptTransformer transformer = new OpenAIPromptTransformer() { @Override public String getJSONResponseFromAI(String prompt, String jsonStr1) { return jsonStr; }  };  RestaurantPojo pojo =(RestaurantPojo) transformer.transformIntoPojo("My Name is Vishal, I like Bollywood movies", RestaurantPojo.class); Assertions."<AssertPlaceHolder>"; } catch (AIProcessingException e) { throw new RuntimeException(e); } }
getJSONResponseFromAI(String prompt, String jsonStr) { jsonStr = PredictionLoader.getInstance().getOpenAiChatModel().generate(" Here is your prompt {" + prompt + "} - here is the json - " + jsonStr + " - populate the fieldValue and return the json"); return jsonStr; }
[*] target: assertEquals("Vishal", pojo.getName())
[-] pred:  org. junit. Assert. assertNotNull ( pojo )

[*] target: assertEquals("Vishal", pojo.getName())
[-] pred:  org. junit. Assert. assertNull ( pojo )

[*] target: assertEquals("Vishal", pojo.getName())
[-] pred:  org. junit. Assert. assertEquals ( pojo, pojo )

[*] target: assertEquals("Vishal", pojo.getName())
[-] pred:  org. junit. Assert. test ( pojo, pojo )

[*] target: assertEquals("Vishal", pojo.getName())
[-] pred:  org

************************************
************************************
[+] input: testPrompt() { // Arrange SubPrompt subPrompt1 = new SubPrompt(); subPrompt1.setId("1"); subPrompt1.setSubprompt("SubPrompt 1"); subPrompt1.setDepend_on("Depend 1");  SubPrompt subPrompt2 = new SubPrompt(); subPrompt2.setId("2"); subPrompt2.setSubprompt("SubPrompt 2"); subPrompt2.setDepend_on("Depend 2");  List<SubPrompt> subPrompts = Arrays.asList(subPrompt1, subPrompt2);  // Act Prompt prompt = new Prompt(); prompt.setPrmpt(subPrompts);  // Assert "<AssertPlaceHolder>"; }
getPrmpt() { return prmpt; }
[*] target: assertEquals(subPrompts, prompt.getPrmpt())
[-] pred:  org. junit. Assert. assertEquals ( 12, prompt. getPrmpt() ( ) )

[*] target: assertEquals(subPrompts, prompt.getPrmpt())
[-] pred:  org. junit. Assert. assertEquals ( 0, prompt. getPrmpt() ( ) )

[*] target: assertEquals(subPrompts, prompt.getPrmpt())
[-] pred:  org. junit. Assert. assertNull ( prompt. getPrmpt() ( ) )

[*] target: assertEquals(subPrompts, prompt.getPrmpt())
[-] pred:  org. junit. Assert. assertNotNull ( prompt. getPrmpt() ( ) )

[*] target: assertEquals(subPrompts, prompt.getPrmpt())
[-] pred:  org. junit. Assert. assertEquals ( 50, prompt. getPrmpt() ( ) )

************************************
************************************
[+] input: testWebPageAction() { DriverActions expectedDriverActions = driverActions; DriverActions actualDriverActions = seleniumAction.webPageAction(driverActions); "<AssertPlaceHolder>"; }
webPageAction(DriverActions webDriverActions) { return webDriverActions; }
[*] target: assertEquals(expectedDriverActions, actualDriverActions, "The returned DriverActions object should be the same as the one passed in")
[-] pred:  org. junit. Assert. assertEquals ( expectedDriverActions, actualDriverActions )

[*] target: assertEquals(expectedDriverActions, actualDriverActions, "The returned DriverActions object should be the same as the one passed in")
[-] pred:  org. junit. Assert. assertEquals ( expectedDriverActions the actualDriverActions )

[*] target: assertEquals(expectedDriverActions, actualDriverActions, "The returned DriverActions object should be the same as the one passed in")
[-] pred:  org. junit. Assert. assertEquals ( expectedDriverActions and actualDriverActions )

[*] target: assertEquals(expectedDriverActions, actualDriverActions, "The returned DriverActions object should be the same as the one passed in")
[-] pred:  org. junit. Assert. assertEquals ( expectedDriverActions, actualDriverActions

[*] target: assertEquals(expectedDriverActions, actualDriverActions, "The returned DriverActions object should be the same as the one passed in")
[-] pred:  returns the expectedDriverActions, actualDriverActions )

************************************
************************************
[+] input: testDetectPathType_AbsolutePath() { // Arrange String scriptPath = "/path/to/file"; try (MockedConstruction<File> mocked = mockConstruction(File.class, (mock, context) -> when(mock.isAbsolute()).thenReturn(true))) { // Act String result = shellPredictedAction.detectPathType(scriptPath);  // Assert "<AssertPlaceHolder>"; } }
detectPathType(String scriptPath) { File file = new File(scriptPath);  if (file.isAbsolute()) { return "Absolute path"; } else if (file.getParent() != null) { return "Relative path"; } else { return "Filename only"; } }
[*] target: assertEquals("Absolute path", result)
[-] pred:  org. junit. Assert. assertEquals ( scriptPath, result )

[*] target: assertEquals("Absolute path", result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( scriptPath ) )

[*] target: assertEquals("Absolute path", result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("Absolute path", result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( true))) ) )

[*] target: assertEquals("Absolute path", result)
[-] pred:  org

************************************
************************************
[+] input: testGetActionName() { String actionName = shellPredictedAction.getActionName();  "<AssertPlaceHolder>"; }
getActionName() { return actionName; }
[*] target: assertEquals("TestAction", actionName)
[-] pred:  org. junit. Assert. assertThat ( course. getActionName() ( actionName ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("TestAction", actionName)
[-] pred:  org. junit. Assert. assertThat ( adjustment. getActionName() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("TestAction", actionName)
[-] pred:  org. junit. Assert. assertThat ( availability. getActionName() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("TestAction", actionName)
[-] pred:  org. junit. Assert. assertThat ( course. getActionName() ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("TestAction", actionName)
[-] pred:  org. junit. Assert. assertThat ( course. getActionName() ( actionName ), org. hamcrest. CoreMatchers. is ( true ) ; }

************************************
************************************
[+] input: testGetDescription() { String description = shellPredictedAction.getDescription();  "<AssertPlaceHolder>"; }
getDescription() { return description; }
[*] target: assertEquals("Test Description", description)
[-] pred:  org. junit. Assert. assertEquals ( 200, description. getDescription() ( ) )

[*] target: assertEquals("Test Description", description)
[-] pred:  org. junit. Assert. assertEquals ( true, description. getDescription() ( ) )

[*] target: assertEquals("Test Description", description)
[-] pred:  org. junit. Assert. assertEquals ( 1, description. getDescription() ( ) )

[*] target: assertEquals("Test Description", description)
[-] pred:  org. junit. Assert. assertEquals ( 8, description. getDescription() ( ) )

[*] target: assertEquals("Test Description", description)
[-] pred:  org. junit. Assert. assertEquals ( 9, description. getDescription() ( ). length )

************************************
************************************
[+] input: testCanBeExecutedParallely() { SubPrompt subPrompt = new SubPrompt(); subPrompt.setDepend_on(null); assertTrue(subPrompt.canBeExecutedParallely());  subPrompt.setDepend_on(""); assertTrue(subPrompt.canBeExecutedParallely());  subPrompt.setDepend_on("Depend 1"); "<AssertPlaceHolder>"; }
canBeExecutedParallely() { return ((depend_on == null)||(depend_on.trim().length() <1)); }
[*] target: assertFalse(subPrompt.canBeExecutedParallely())
[-] pred:  org. junit. Assert. assertNotNull ( subPrompt. canBeExecutedParallely()); )

[*] target: assertFalse(subPrompt.canBeExecutedParallely())
[-] pred:  org. junit. Assert. assertNotNull ( subPrompt )

[*] target: assertFalse(subPrompt.canBeExecutedParallely())
[-] pred:  org. junit. Assert. assertNotNull ( subPrompt. canBeExecutedParallely )

[*] target: assertFalse(subPrompt.canBeExecutedParallely())
[-] pred:  org. junit. Assert. assertNotNull ( subPrompt. canBeExecutedParallely example )

[*] target: assertFalse(subPrompt.canBeExecutedParallely())
[-] pred:  org. junit. Assert. assertNotNull ( subPrompt. canBeExecutedParallelyTag )

************************************
************************************
[+] input: testToString() { SubPrompt subPrompt = new SubPrompt(); subPrompt.setId("1"); subPrompt.setSubprompt("SubPrompt 1"); subPrompt.setDepend_on("Depend 1");  String expected = "SubPrompt{id='1', subprompt='SubPrompt 1', depend_on='Depend 1'}"; "<AssertPlaceHolder>"; }
toString() { return "SubPrompt{" + "id='" + id + ''' + ", subprompt='" + subprompt + ''' + ", depend_on='" + depend_on + ''' + '}'; }
[*] target: assertEquals(expected, subPrompt.toString())
[-] pred:  org. junit. Assert. assertEquals ( expected, subPrompt. toString() ) )

[*] target: assertEquals(expected, subPrompt.toString())
[-] pred:  org. junit. Assert. assertEquals ( expected, subPrompt. toString() )

[*] target: assertEquals(expected, subPrompt.toString())
[-] pred:  org. junit. Assert. assertEquals ( expected, config. toString() ( ) )

[*] target: assertEquals(expected, subPrompt.toString())
[-] pred:  org. junit. Assert. assertEquals ( expected, sb. toString() ( ) )

[*] target: assertEquals(expected, subPrompt.toString())
[-] pred:  org. junit. Assert. assertEquals ( expected, e. toString() ( ) )

************************************
************************************
[+] input: testEqualsAndHashCode() { SubPrompt subPrompt1 = new SubPrompt(); subPrompt1.setId("1");  SubPrompt subPrompt2 = new SubPrompt(); subPrompt2.setId("1");  assertEquals(subPrompt1, subPrompt2); assertEquals(subPrompt1.hashCode(), subPrompt2.hashCode());  subPrompt2.setId("2"); assertNotEquals(subPrompt1, subPrompt2); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(id); }
[*] target: assertNotEquals(subPrompt1.hashCode(), subPrompt2.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( 0, msg. hashCode() ( ) )

[*] target: assertNotEquals(subPrompt1.hashCode(), subPrompt2.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( 0, q. hashCode() ( ) )

[*] target: assertNotEquals(subPrompt1.hashCode(), subPrompt2.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( 0, e. hashCode() ( ) )

[*] target: assertNotEquals(subPrompt1.hashCode(), subPrompt2.hashCode())
[-] pred:  org. junit. Assert. assertEquals ( 0, getMessage. hashCode() ( ) )

[*] target: assertNotEquals(subPrompt1.hashCode(), subPrompt2.hashCode())
[-] pred:  org

************************************
************************************
[+] input: testSubPrompt() { // Arrange SubPrompt subPrompt = new SubPrompt(); subPrompt.setId("1"); subPrompt.setSubprompt("SubPrompt 1"); subPrompt.setDepend_on("Depend 1"); subPrompt.setProcessed(true); subPrompt.setActionName("Action 1"); subPrompt.setResult("Result 1");  // Act & Assert assertEquals("1", subPrompt.getId()); assertEquals("SubPrompt 1", subPrompt.getSubprompt()); "<AssertPlaceHolder>"; assertTrue(subPrompt.isProcessed()); assertEquals("Action 1", subPrompt.getActionName()); assertEquals("Result 1", subPrompt.getResult()); }
getDepend_on() { return depend_on; }
[*] target: assertEquals("Depend 1", subPrompt.getDepend_on())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. getDepend_on() ( ) )

[*] target: assertEquals("Depend 1", subPrompt.getDepend_on())
[-] pred:  org. junit. Assert. assertTrue ( com. google. common. collect. CoreMatchers. is ( true ) )

[*] target: assertEquals("Depend 1", subPrompt.getDepend_on())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang. StringUtils. getDepend_on ( ) )

[*] target: assertEquals("Depend 1", subPrompt.getDepend_on())
[-] pred:  org. junit. Assert. assertEquals ( 1, subPrompt.getLogger ( ) )

[*] target: assertEquals("Depend 1", subPrompt.getDepend_on())
[-] pred:  )

************************************
************************************
[+] input: testExtractJson() { JsonUtils utils = new JsonUtils(); String input = "Some text before {"key":"value"} some text after"; String extracted = utils.extractJson(input); Assertions.assertEquals("{"key":"value"}", extracted, "Extracted JSON does not match expected output");  String invalidInput = "No brackets here"; Assertions."<AssertPlaceHolder>"; }
extractJson(String jsonString) { // Find the index of the first opening bracket int startIndex = jsonString.indexOf('{'); // Find the index of the last closing bracket int endIndex = jsonString.lastIndexOf('}');  if (startIndex != -1 && endIndex != -1 && endIndex > startIndex) { // Extract the substring between the first '{' and the last '}' return jsonString.substring(startIndex, endIndex + 1); } return jsonString; // Return null if the structure is not as expected }
[*] target: assertEquals(invalidInput, utils.extractJson(invalidInput), "Extracted JSON should be same as input")
[-] pred:  org. junit. Assert. assertEquals ( invalidInput, extracted )

[*] target: assertEquals(invalidInput, utils.extractJson(invalidInput), "Extracted JSON should be same as input")
[-] pred:  org. junit. Assert. assertEquals ( input, extracted )

[*] target: assertEquals(invalidInput, utils.extractJson(invalidInput), "Extracted JSON should be same as input")
[-] pred:  org. junit. Assert. assertEquals ( normalized, extracted )

[*] target: assertEquals(invalidInput, utils.extractJson(invalidInput), "Extracted JSON should be same as input")
[-] pred:  extractJson( invalidInput ) { }

[*] target: assertEquals(invalidInput, utils.extractJson(invalidInput), "Extracted JSON should be same as input")
[-] pred:  org

************************************
************************************
[+] input: testFetchGroupName() { JsonUtils utils = new JsonUtils(); String groupJson = "{"groupName":"Test Group"}"; String groupName = utils.fetchGroupName(groupJson); Assertions."<AssertPlaceHolder>";   }
fetchGroupName(String groupJson) { groupJson = extractJson(groupJson); JSONObject obj = new JSONObject(groupJson); return obj.optString("groupName",null);  }
[*] target: assertEquals("Test Group", groupName, "Group name should match the expected value")
[-] pred:  org. junit. Assert. assertEquals ( groupJson, groupName )

[*] target: assertEquals("Test Group", groupName, "Group name should match the expected value")
[-] pred:  org. junit. Assert. assertEquals (groupJson, groupName )

[*] target: assertEquals("Test Group", groupName, "Group name should match the expected value")
[-] pred:  org. junit. Assert. assertEquals ( groupsJson, groupName )

[*] target: assertEquals("Test Group", groupName, "Group name should match the expected value")
[-] pred:  org. junit. Assert. assertNotNull ( groupName )

[*] target: assertEquals("Test Group", groupName, "Group name should match the expected value")
[-] pred:  org. junit. Assert. assertEquals ( groupJson )

************************************
************************************
[+] input: testFetchActionNameWithMultipleKeys() { JsonUtils utils = new JsonUtils(); String jsonWithMultipleKeys = "{"actionName":"TestAction", "anotherKey":"AnotherValue"}"; String actionName = utils.fetchActionName(jsonWithMultipleKeys); Assertions."<AssertPlaceHolder>"; }
fetchActionName(@NotNull String groupJson) { if(groupJson.trim().isEmpty()) { throw new IllegalArgumentException("JSON string cannot be empty"); } groupJson = extractJson(groupJson); JSONObject obj = new JSONObject(groupJson); String groupName = obj.optString("actionName",null); if(groupName == null) { groupName = groupJson; } return groupName; }
[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when there are multiple keys in the JSON string")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithMultipleKeys, actionName )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when there are multiple keys in the JSON string")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithMultipleKeys, grad )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when there are multiple keys in the JSON string")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithMultipleKeys,Rs )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when there are multiple keys in the JSON string")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithMultipleKeys, intercept )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when there are multiple keys in the JSON string")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithMultipleKeys, header )

************************************
************************************
[+] input: testFetchActionNameWithNestedJson() { JsonUtils utils = new JsonUtils(); String jsonWithNestedJson = "{"actionName":"TestAction", "nestedJson":{"anotherKey":"AnotherValue"}}"; String actionName = utils.fetchActionName(jsonWithNestedJson); Assertions."<AssertPlaceHolder>"; }
fetchActionName(@NotNull String groupJson) { if(groupJson.trim().isEmpty()) { throw new IllegalArgumentException("JSON string cannot be empty"); } groupJson = extractJson(groupJson); JSONObject obj = new JSONObject(groupJson); String groupName = obj.optString("actionName",null); if(groupName == null) { groupName = groupJson; } return groupName; }
[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when the JSON string contains nested JSON objects")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithNestedJson, actionName )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when the JSON string contains nested JSON objects")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithNestedJson, grad )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when the JSON string contains nested JSON objects")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithNestedJson, got )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when the JSON string contains nested JSON objects")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithNestedJson,Rs )

[*] target: assertEquals("TestAction", actionName, "Action name should match the expected value even when the JSON string contains nested JSON objects")
[-] pred:  org. junit. Assert. assertEquals ( jsonWithNestedJson,egun )

************************************
************************************
[+] input: testFetchActionNameNoAction() { JsonUtils utils = new JsonUtils();  // Scenario 1: JSON string contains an actionName key String jsonWithActionName = "{"actionName":"TestAction"}"; String actionName = utils.fetchActionName(jsonWithActionName); Assertions.assertEquals("TestAction", actionName, "Action name should match the expected value");  // Scenario 2: JSON string does not contain an actionName key String jsonWithoutActionName = "{"someOtherKey":"SomeValue"}"; actionName = utils.fetchActionName(jsonWithoutActionName); Assertions.assertEquals(jsonWithoutActionName, actionName, "When actionName key is missing, the original JSON string should be returned");  // Scenario 3: The value of the actionName key is null String jsonWithNullActionName = "{"actionName":null}"; actionName = utils.fetchActionName(jsonWithNullActionName); Assertions."<AssertPlaceHolder>"; }
fetchActionName(@NotNull String groupJson) { if(groupJson.trim().isEmpty()) { throw new IllegalArgumentException("JSON string cannot be empty"); } groupJson = extractJson(groupJson); JSONObject obj = new JSONObject(groupJson); String groupName = obj.optString("actionName",null); if(groupName == null) { groupName = groupJson; } return groupName; }
[*] target: assertEquals(jsonWithNullActionName, actionName, "When actionName value is null, the original JSON string should be returned")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName ( jsonWithoutActionName ), org. hamcrest. CoreMatchers. is ( jsonWithNullActionName ) )

[*] target: assertEquals(jsonWithNullActionName, actionName, "When actionName value is null, the original JSON string should be returned")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName ( jsonWithoutActionName ), org. hamcrest. CoreMatchers. is ( isNull ) )

[*] target: assertEquals(jsonWithNullActionName, actionName, "When actionName value is null, the original JSON string should be returned")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName ( jsonWithoutActionName ), org. hamcrest. CoreMatchers. is ( jsonWithoutActionName ) )

[*] target: assertEquals(jsonWithNullActionName, actionName, "When actionName value is null, the original JSON string should be returned")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName ( jsonWithoutActionName ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(jsonWithNullActionName, actionName, "When actionName value is null, the original JSON string should be returned")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName ( jsonWithoutActionName ), org. hamcrest. CoreMatchers. is ( jsonWithNullActionname ) )

************************************
************************************
[+] input: testFetchActionName() { JsonUtils utils = new JsonUtils();  // Valid JSON with actionName String validJson = "{"actionName":"TestAction"}"; String actionName = utils.fetchActionName(validJson); Assertions.assertEquals("TestAction", actionName, "Expected actionName to be 'TestAction'");  // Missing actionName key String invalidJson = "{}"; actionName = utils.fetchActionName(invalidJson); Assertions.assertEquals(invalidJson, actionName, "Expected the original JSON string when actionName is missing");  // Null actionName scenario String nullActionNameJson = "{"actionName":null}"; actionName = utils.fetchActionName(nullActionNameJson); Assertions."<AssertPlaceHolder>";   }
fetchActionName(@NotNull String groupJson) { if(groupJson.trim().isEmpty()) { throw new IllegalArgumentException("JSON string cannot be empty"); } groupJson = extractJson(groupJson); JSONObject obj = new JSONObject(groupJson); String groupName = obj.optString("actionName",null); if(groupName == null) { groupName = groupJson; } return groupName; }
[*] target: assertEquals(nullActionNameJson, actionName, "Expected the original JSON string when actionName is null")
[-] pred:  org. junit. Assert. assertThat ( invalidJson, org. hamcrest. CoreMatchers. is ( validJson ) )

[*] target: assertEquals(nullActionNameJson, actionName, "Expected the original JSON string when actionName is null")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName( validJson, org. hamcrest. CoreMatchers. is ( invalidJson ) )

[*] target: assertEquals(nullActionNameJson, actionName, "Expected the original JSON string when actionName is null")
[-] pred:  org. junit. Assert. assertThat ( utils. fetchActionName(validJson, org. hamcrest. CoreMatchers. is ( validJson ) )

[*] target: assertEquals(nullActionNameJson, actionName, "Expected the original JSON string when actionName is null")
[-] pred:  org. junit, invalidJson )

[*] target: assertEquals(nullActionNameJson, actionName, "Expected the original JSON string when actionName is null")
[-] pred:  org

************************************
************************************
[+] input: NoSuchFieldException { JsonUtils utils = new JsonUtils();  // Get the 'testMap' field from the TestClass Field testMapField = TestClass.class.getDeclaredField("testMap");  // Call the method with the 'testMap' field JSONObject jsonObject = utils.buildBlankMapJsonObject(testMapField);  // Check if the resulting JSON object has the correct structure Assertions."<AssertPlaceHolder>";   // Check if the 'fields' array has the correct structure Assertions.assertTrue(jsonObject.getJSONArray("fields").getJSONObject(0).has("key"), "The fields array should contain an object with a 'key' key"); Assertions.assertTrue(jsonObject.getJSONArray("fields").getJSONObject(0).has("value"), "The fields array should contain an object with a 'value' key"); }
buildBlankMapJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.Map"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put("key", ""); object.put("value", ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertEquals ( 0, jsonObject. size ( ) )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( new structure Assertions )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org

************************************
************************************
[+] input: NoSuchFieldException { JsonUtils utils = new JsonUtils();  // Get the 'hobbies' field from the TestClass Field testListField = TestClass.class.getDeclaredField("hobbies");  // Call the method with the 'hobbies' field JSONObject jsonObject = utils.buildBlankListJsonObject(testListField);  // Check if the resulting JSON object has the correct structure Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("put each value inside fieldValue", jsonObject.getString("prompt"), "The prompt should be 'put each value inside fieldValue'");   // Check if the 'fields' array has the correct structure Assertions.assertTrue(jsonObject.getJSONArray("fields").getJSONObject(0).has("fieldValue"), "The fields array should contain an object with a 'fieldValue' key"); }
buildBlankListJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.List"); fieldJson.put("prompt", "put each value inside fieldValue"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put(FIELDVALUE_JSON, ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject ) type

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a test class with a field that has the MapKeyType annotation class TestClass { @MapKeyType(String.class) Map<String, Integer> testMap; }  // Get the 'testMap' field from the TestClass Field testMapField = TestClass.class.getDeclaredField("testMap");  // Call the buildBlankMapJsonObject method with the 'testMap' field JSONObject jsonObject = utils.buildBlankMapJsonObject(testMapField);  // Assert that the resulting JSON object has the correct structure Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("java.lang.String", jsonObject.getString("keyType"), "The keyType should be 'String'"); }
buildBlankMapJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.Map"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put("key", ""); object.put("value", ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( resulting JSON object )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( new TYPE_1 )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( new JSON object )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( wave )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a test class with a field that has the MapValueType annotation class TestClass { @MapValueType(String.class) Map<Integer, String> testMap; }  // Get the 'testMap' field from the TestClass Field testMapField = TestClass.class.getDeclaredField("testMap");  // Call the buildBlankMapJsonObject method with the 'testMap' field JSONObject jsonObject = utils.buildBlankMapJsonObject(testMapField);  // Assert that the resulting JSON object has the correct structure Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("java.lang.String", jsonObject.getString("valueType"), "The valueType should be 'String'"); }
buildBlankMapJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.Map"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put("key", ""); object.put("value", ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( jsonObject )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( resulting JSON object )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( new JSON object )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( new TYPE_1 )

[*] target: assertEquals("java.util.Map", jsonObject.getString("className"), "The className should be 'java.util.Map'")
[-] pred:  org. junit. Assert. assertNotNull ( wave )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a test class with a List field class TestClass { List<String> testList; }  // Get the 'testList' field from the TestClass Field testListField = TestClass.class.getDeclaredField("testList");  // Call the getJsonObjectForList method with the 'testList' field JSONObject jsonObject = utils.getJsonObjectForList(testListField.getType(), testListField.getName());  // Assert that the resulting JSON object has the correct structure Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("testList", jsonObject.getString("fieldName"), "The fieldName should be 'testList'"); Assertions.assertEquals("java.util.List", jsonObject.getString("fieldType"), "The fieldType should be 'java.util.List'"); }
getJsonObjectForList(Class<?> clazz, String fieldName) { JSONObject classJson = new JSONObject(); classJson.put(CLASSNAME_JSON, clazz.getName()); JSONArray fieldsArray = new JSONArray(); for (Field field : clazz.getDeclaredFields()) { JSONObject fieldJson = getObject(field); if (fieldJson == null) continue; // Skip if ignore is true  fieldsArray.put(fieldJson); } classJson.put(FIELDNAME, fieldName); classJson.put(FIELDTYPE, clazz.getName()); classJson.put(FIELDS, fieldsArray); return classJson; }
[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( resulting JSON object )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNull ( resulting JSON object )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNull ( jsonObject )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  org. junit. Assert. assertNotNull ( resulting JSON objects )

[*] target: assertEquals("java.util.List", jsonObject.getString("className"), "The className should be 'java.util.List'")
[-] pred:  )

************************************
************************************
[+] input: testConvertClassToJSONString() { JsonUtils utils = new JsonUtils();  // Test with a class that has primitive types String jsonString = utils.convertClassToJSONString(TestClass.class); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(jsonString.contains("name"), "The resulting JSON string should contain the 'name' field"); Assertions.assertTrue(jsonString.contains("age"), "The resulting JSON string should contain the 'age' field"); Assertions.assertTrue(jsonString.contains("salary"), "The resulting JSON string should contain the 'salary' field"); Assertions.assertTrue(jsonString.contains("isActive"), "The resulting JSON string should contain the 'isActive' field");  // Test with a class that has complex types (List and Map) Assertions.assertTrue(jsonString.contains("hobbies"), "The resulting JSON string should contain the 'hobbies' field"); Assertions.assertTrue(jsonString.contains("scores"), "The resulting JSON string should contain the 'scores' field"); }
convertClassToJSONString(Class<?> clazz) { JSONObject classJson = getJsonObject(clazz); return classJson.toString(4); // Pretty print }
[*] target: assertNotNull(jsonString, "The resulting JSON string should not be null")
[-] pred:  org. junit. Assert. assertTrue ( jsonString. equals ( STRING_0 ) )

[*] target: assertNotNull(jsonString, "The resulting JSON string should not be null")
[-] pred:  org. junit. Assert. assertNotNull ( jsonString )

[*] target: assertNotNull(jsonString, "The resulting JSON string should not be null")
[-] pred:  org. junit. Assert. assertTrue ( jsonString. equals ( STRING_1 ) )

[*] target: assertNotNull(jsonString, "The resulting JSON string should not be null")
[-] pred:  org. junit. Assert. assertTrue ( jsonString. contains ( STRING_0 ) )

[*] target: assertNotNull(jsonString, "The resulting JSON string should not be null")
[-] pred:  org. junit. Assert. assertTrue ( jsonString. isEmpty ( ) )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents a Person object String jsonString = "{\n" + "    "className": "com.t4a.test.Person",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "name",\n" + "            "fieldValue": "John Doe",\n" + "            "fieldType": "String"\n" + "        },\n" + "        {\n" + "            "fieldName": "age",\n" + "            "fieldValue": 30,\n" + "            "fieldType": "int"\n" + "        }\n" + "    ]\n" + "}";  // Use the populateClassFromJson method to create a Person object from the JSON string Object obj = utils.populateClassFromJson(jsonString);  // Check if the resulting object is an instance of the Person class Assertions."<AssertPlaceHolder>";  // Cast the object to a Person and check if the properties are as expected Person person = (Person) obj; Assertions.assertEquals("John Doe", person.getName(), "The name property should be 'John Doe'"); Assertions.assertEquals(30, person.getAge(), "The age property should be 30"); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(obj instanceof Person, "The resulting object should be an instance of the Person class")
[-] pred:  org. junit. Assert. assertNotNull ( obj )

[*] target: assertTrue(obj instanceof Person, "The resulting object should be an instance of the Person class")
[-] pred:  org. junit. Assert. assertEquals ( true, ( obj!= null ) )

[*] target: assertTrue(obj instanceof Person, "The resulting object should be an instance of the Person class")
[-] pred:  org. junit. Assert. assertEquals ( true, obj )

[*] target: assertTrue(obj instanceof Person, "The resulting object should be an instance of the Person class")
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertTrue(obj instanceof Person, "The resulting object should be an instance of the Person class")
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents a Map String jsonString = "{\n" + "    "className": "java.util.Map",\n" + "    "fields": [\n" + "        {\n" + "            "key": "name",\n" + "            "value": "John Doe"\n" + "        },\n" + "        {\n" + "            "key": "age",\n" + "            "value": "30"\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the Map class Assertions."<AssertPlaceHolder>";  // Cast the result to Map and assert the key-value pairs Map<String, String> map = (Map<String, String>) result; Assertions.assertEquals("John Doe", map.get("name")); Assertions.assertEquals("30", map.get("age")); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof Map)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result instanceof Map)
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertTrue(result instanceof Map)
[-] pred:  org. junit. Assert. assertEquals ( 200, result )

[*] target: assertTrue(result instanceof Map)
[-] pred:  org. junit. Assert. assertEquals ( result, polynome )

[*] target: assertTrue(result instanceof Map)
[-] pred:  org. junit. Assert. assertEquals ( result, polynically )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with an int array field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "intArray",\n" + "            "fieldType": "int[]",\n" + "            "fieldValue": [1, 2, 3]\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the int array field values TestClass testClass = (TestClass) result; Assertions.assertArrayEquals(new int[]{1, 2, 3}, testClass.getIntArray()); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 200, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 12, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, testClass.getIntArray )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with a double array field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "doubleArray",\n" + "            "fieldType": "double[]",\n" + "            "fieldValue": [1.1, 2.2, 3.3]\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the double array field values TestClass testClass = (TestClass) result; Assertions.assertArrayEquals(new double[]{1.1, 2.2, 3.3}, testClass.getDoubleArray(), 0.0001); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, method )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, testClass )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, polynically )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, polyn2 )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with a long array field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "longArray",\n" + "            "fieldType": "long[]",\n" + "            "fieldValue": [100, 200, 300]\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the long array field values TestClass testClass = (TestClass) result; Assertions.assertArrayEquals(new long[]{100, 200, 300}, testClass.getLongArray()); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 200, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( jsonString, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 12, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, testClass.get )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with a boolean array field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "booleanArray",\n" + "            "fieldType": "boolean[]",\n" + "            "fieldValue": [true, false, true]\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the boolean array field values TestClass testClass = (TestClass) result; Assertions.assertArrayEquals(new boolean[]{true, false, true}, testClass.getBooleanArray()); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 200, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with a Date array field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "dateArray",\n" + "            "fieldType": "Date[]",\n" + "            "fieldValue": ["2022-01-01", "2022-02-02", "2022-03-03"],\n" + "            "dateFormat": "yyyy-MM-dd"\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the Date array field values TestClass testClass = (TestClass) result; SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); Date[] expectedDates = {format.parse("2022-01-01"), format.parse("2022-02-02"), format.parse("2022-03-03")}; Assertions.assertArrayEquals(expectedDates, testClass.getDateArray()); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( 200, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a JSON string that represents an object of the TestClass with a List field String jsonString = "{\n" + "    "className": "com.t4a.test.TestClass",\n" + "    "fields": [\n" + "        {\n" + "            "fieldName": "testList",\n" + "            "fieldType": "list",\n" + "            "fieldValue": ["item1", "item2", "item3"],\n" + "            "className": "java.lang.String"\n" + "        }\n" + "    ]\n" + "}";  // Call the populateObject method Object result = utils.populateClassFromJson(jsonString);  // Assert that the returned object is of the TestClass class Assertions."<AssertPlaceHolder>";  // Cast the result to TestClass and assert the List field values TestClass testClass = (TestClass) result; Assertions.assertEquals(Arrays.asList("item1", "item2", "item3"), testClass.getTestList()); }
populateClassFromJson(String json) throws Exception { json = extractJson(json); JSONObject jsonObject = new JSONObject(json); return populateObject(jsonObject,null); }
[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, 200 )

[*] target: assertTrue(result instanceof TestClass)
[-] pred:  org. junit. Assert. assertEquals ( result, method )

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a class with Map field annotated with MapKeyType and MapValueType  String expectedOutput = "{"className":"java.util.List","fields":[{"fieldValue":""}],"type":"java.util.Map","prompt":"put each value inside fieldValue"}"; // Call the method that uses the annotations JSONObject jsonObject = utils.buildBlankListJsonObject(TestClass.class.getDeclaredField("testMap")); Assertions."<AssertPlaceHolder>";  }
buildBlankListJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.List"); fieldJson.put("prompt", "put each value inside fieldValue"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put(FIELDVALUE_JSON, ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals(expectedOutput, jsonObject.toString())
[-] pred:  org. junit. Assert. assertEquals ( expectedOutput, jsonObject. toString ( ) )

[*] target: assertEquals(expectedOutput, jsonObject.toString())
[-] pred:  org. junit. Assert. assertEquals ( expectedOutput, jsonObject. get ( 0 ) )

[*] target: assertEquals(expectedOutput, jsonObject.toString())
[-] pred:  org. junit. Assert. assertEquals ( expectedOutput, jsonObject )

[*] target: assertEquals(expectedOutput, jsonObject.toString())
[-] pred:  expectedOutput )

[*] target: assertEquals(expectedOutput, jsonObject.toString())
[-] pred:  org

************************************
************************************
[+] input: Exception { JsonUtils utils = new JsonUtils();  // Create a class with Map field annotated with MapKeyType and MapValueType   // Call the method that uses the annotations JSONObject jsonObject = utils.buildBlankListJsonObject(TestClass.class.getDeclaredField("testCustomers"));  // Assert that the keyType and valueType are correctly set in the JSON object Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("java.lang.Integer", jsonObject.getString("valueType")); }
buildBlankListJsonObject(Field field) { JSONObject fieldJson = new JSONObject(); fieldJson.put(CLASSNAME_JSON, "java.util.List"); fieldJson.put("prompt", "put each value inside fieldValue"); JSONArray fieldsArray = new JSONArray(); JSONObject object = new JSONObject(); object.put(FIELDVALUE_JSON, ""); fieldsArray.put(object); fieldJson.put(FIELDS, fieldsArray); if (field != null) { fieldJson.put("type", field.getType().getName()); if (field.isAnnotationPresent(MapKeyType.class)) { Class<?> keyType = field.getAnnotation(MapKeyType.class).value(); fieldJson.put("keyType", keyType.getName()); } else { log.warn("Not able to derive the map Key type for " + field); } if (field.isAnnotationPresent(MapValueType.class)) { Class<?> valueType = field.getAnnotation(MapValueType.class).value(); fieldJson.put("valueType", valueType.getName()); } else { log.warn("Not able to derive the map Value type for " + field); }  } return fieldJson; }
[*] target: assertEquals("java.lang.String",jsonObject.getString("keyType"))
[-] pred:  org. junit. Assert. assertFalse ( ( jsonObject!= null ) )

[*] target: assertEquals("java.lang.String",jsonObject.getString("keyType"))
[-] pred:  org. junit. Assert. assertNull ( jsonObject )

[*] target: assertEquals("java.lang.String",jsonObject.getString("keyType"))
[-] pred:  org. junit. Assert. assertNotNull ( custom )

[*] target: assertEquals("java.lang.String",jsonObject.getString("keyType"))
[-] pred:  org. junit. Assert. assertFalse ( ( jsonObject > 0 ) )

[*] target: assertEquals("java.lang.String",jsonObject.getString("keyType"))
[-] pred:  org

************************************
************************************
[+] input: testProcessProperties() { JsonUtils utils = new JsonUtils(); ObjectMapper mapper = new ObjectMapper(); ObjectNode parentNode = mapper.createObjectNode();  // Create a map of properties Map<String, Schema> properties = new HashMap<>(); Schema schema1 = new Schema(); schema1.setType("string"); properties.put("property1", schema1);  Schema schema2 = new Schema(); schema2.setType("integer"); schema2.setDefault("10"); properties.put("property2", schema2);  ObjectSchema schema3 = new ObjectSchema(); Map<String, Schema> subProperties = new HashMap<>(); Schema subSchema = new Schema(); subSchema.setType("boolean"); subProperties.put("subProperty", subSchema); schema3.setProperties(subProperties); properties.put("property3", schema3);  // Call the method utils.processProperties(parentNode, properties);  // Assert the properties of the parentNode Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("10", parentNode.get("property2").asText()); Assertions.assertTrue(parentNode.get("property3").isObject()); Assertions.assertEquals("boolean", parentNode.get("property3").get("subProperty").asText()); }
processProperties(ObjectNode parentNode, Map<String, Schema> properties) { ObjectMapper mapper = new ObjectMapper();  for (Map.Entry<String, Schema> entry : properties.entrySet()) { String propertyName = entry.getKey(); Schema propertySchema = entry.getValue(); String value; if (propertySchema.getDefault() != null) { value = propertySchema.getDefault().toString(); } else { value = propertySchema.getType(); } parentNode.put(propertyName, value); if (propertySchema instanceof ObjectSchema) { ObjectNode objectNode = mapper.createObjectNode(); parentNode.set(propertyName, objectNode); processProperties(objectNode, ((ObjectSchema) propertySchema).getProperties()); } } }
[*] target: assertEquals("string", parentNode.get("property1").asText())
[-] pred:  org. junit. Assert. assertTrue ( the. properties. isEmpty ( ) )

[*] target: assertEquals("string", parentNode.get("property1").asText())
[-] pred:  org. junit. Assert. assertTrue ( the properties of the parentNode Assertions.assertEquals("10, properties )

[*] target: assertEquals("string", parentNode.get("property1").asText())
[-] pred:  } }

[*] target: assertEquals("string", parentNode.get("property1").asText())
[-] pred:  )

[*] target: assertEquals("string", parentNode.get("property1").asText())
[-] pred:  org

************************************
************************************
[+] input: testGetTableMetadataFromS3() { when(mockFileIOFactory.getFileIO(any())).thenReturn(new S3FileIO(() -> mockS3Client)); mockS3Client.createBucket(builder -> builder.bucket(TEST_BUCKET).build()); String simpleMetadataJson = IOUtils.toString( Objects.requireNonNull( this.getClass() .getResourceAsStream("/" + TEST_SIMPLE_ICEBERG_V1_METADATA_FILE_NAME))); mockS3Client.putObject( builder -> builder .bucket(TEST_BUCKET) .key(TEST_LOCATION + "/" + TEST_SIMPLE_ICEBERG_V1_METADATA_FILE_NAME) .build(), RequestBody.fromString(simpleMetadataJson));  String metadataLocation = "s3://" + TEST_BUCKET + "/" + TEST_LOCATION + "/" + TEST_SIMPLE_ICEBERG_V1_METADATA_FILE_NAME; TableMetadata tableMetadata = metadataService.readTableMetadata(metadataLocation); "<AssertPlaceHolder>"; }
readTableMetadata(String metadataLocation) { URI metadataLocationUri = URI.create(metadataLocation); // TODO: cache fileIO FileIO fileIO = fileIOFactory.getFileIO(metadataLocationUri);  return TableMetadataParser.read(fileIO, metadataLocation); }
[*] target: assertThat(tableMetadata.uuid()).isEqualTo("11111111-2222-3333-4444-555555555555")
[-] pred:  org. junit. Assert. assertNull ( tableMetadata )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("11111111-2222-3333-4444-555555555555")
[-] pred:  org. junit. Assert. assertSame ( simpleMetadataJson, tableMetadata )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("11111111-2222-3333-4444-555555555555")
[-] pred:  org. junit. Assert. assertTrue ( ( tableMetadata == null ) )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("11111111-2222-3333-4444-555555555555")
[-] pred:  org. junit. Assert. assertSame ( behaviorMetadataJson, tableMetadata )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("11111111-2222-3333-4444-555555555555")
[-] pred:  )

************************************
************************************
[+] input: testGetTableMetadataFromLocalFS() { when(mockFileIOFactory.getFileIO(any())).thenReturn(new SimpleLocalFileIO()); String metadataLocation = Objects.requireNonNull(this.getClass().getResource("/iceberg.metadata.json")) .toURI() .toString(); TableMetadata tableMetadata = metadataService.readTableMetadata(metadataLocation); "<AssertPlaceHolder>"; }
readTableMetadata(String metadataLocation) { URI metadataLocationUri = URI.create(metadataLocation); // TODO: cache fileIO FileIO fileIO = fileIOFactory.getFileIO(metadataLocationUri);  return TableMetadataParser.read(fileIO, metadataLocation); }
[*] target: assertThat(tableMetadata.uuid()).isEqualTo("55d4dc69-5b14-4483-bfc8-f33b80f99f99")
[-] pred:  org. junit. Assert. assertSame ( ma, metadataService. readTableMetadata ( metadataLocation ) )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("55d4dc69-5b14-4483-bfc8-f33b80f99f99")
[-] pred:  org. junit. Assert. assertSame ( ma, metadataService. readTableMetadata(metadataLocation )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("55d4dc69-5b14-4483-bfc8-f33b80f99f99")
[-] pred:  org. junit. Assert. assertNull ( tableMetadata )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("55d4dc69-5b14-4483-bfc8-f33b80f99f99")
[-] pred:  org. junit. Assert. assertSame ( ma, metadataService. readTableMetadata(metadataLocation) )

[*] target: assertThat(tableMetadata.uuid()).isEqualTo("55d4dc69-5b14-4483-bfc8-f33b80f99f99")
[-] pred:  org

************************************
************************************
[+] input: activateAppActualMethodByActivationCodeTest() { AppAuthenticator appAuthenticator = new AppAuthenticator(); appAuthenticator.setActivationCode(""); appAuthenticator.setGeldigheidstermijn("");  when(flow.activateApp(any(), any(), anyString())).thenCallRealMethod(); when(flow.activateApp(any(), any(), anyString(), anyBoolean())).thenCallRealMethod();  AppResponse result = flow.activateApp(appAuthenticator, mockedAppSession, LETTER);  "<AssertPlaceHolder>"; assertNotNull(appAuthenticator.getActivatedAt()); assertNull(appAuthenticator.getActivationCode()); assertNull(appAuthenticator.getGeldigheidstermijn()); assertTrue(result instanceof ActivateAppResponse); assertEquals(20, ((ActivateAppResponse) result).getAuthenticationLevel()); }
activateApp(AppAuthenticator appAuthenticator, AppSession appSession, String type){ return activateApp(appAuthenticator, appSession, type, false); }
[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit ; Assert. assertNotNull ( result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit ). assertNotNull ( result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit, result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org

************************************
************************************
[+] input: removeOldAppTest() { AppAuthenticator leastRecentApp = new AppAuthenticator(); leastRecentApp.setInstanceId("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); leastRecentApp.setDeviceName("testdevice"); leastRecentApp.setLastSignInAt(ZonedDateTime.now()); leastRecentApp.setAccountId(123L); AppAuthenticator appAuthenticator = new AppAuthenticator(); appAuthenticator.setActivationCode(""); appAuthenticator.setGeldigheidstermijn(""); AppSession appSession = new AppSession(); appSession.setRemoveOldApp(true); appSession.setAccountId(123L);  when(flow.activateApp(any(), any(), anyString())).thenCallRealMethod(); when(flow.activateApp(any(), any(), anyString(), anyBoolean())).thenCallRealMethod(); doCallRealMethod().when(flow).removeOldAppIfRequired(any()); doCallRealMethod().when(flow).notifyAppActivation(any(), any());  when(appAuthenticatorService.findLeastRecentApp(anyLong())).thenReturn(leastRecentApp);  AppResponse result = flow.activateApp(appAuthenticator, appSession, LETTER);  "<AssertPlaceHolder>"; assertNotNull(appAuthenticator.getActivatedAt()); assertNull(appAuthenticator.getActivationCode()); assertNull(appAuthenticator.getGeldigheidstermijn()); assertTrue(result instanceof ActivateAppResponse); assertEquals(20, ((ActivateAppResponse) result).getAuthenticationLevel());  verify(digidClient, times(1)).remoteLog("1449", Map.of(lowerUnderscore(ACCOUNT_ID), leastRecentApp.getAccountId(), lowerUnderscore(APP_CODE), leastRecentApp.getAppCode(), lowerUnderscore(DEVICE_NAME), leastRecentApp.getDeviceName(), "last_sign_in_at", leastRecentApp.getLastSignInAt().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")))); verify(digidClient, times(1)).sendNotificationMessage(123L, "ED022", "SMS11"); }
activateApp(AppAuthenticator appAuthenticator, AppSession appSession, String type){ return activateApp(appAuthenticator, appSession, type, false); }
[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( appAuthenticator, result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit. Assert. assertSame ( appAuthenticator, result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("active", appAuthenticator.getStatus())
[-] pred:  org

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(digidClientMock.activateAccountWithCode(anyLong(), any())).thenReturn(Map.of( lowerUnderscore(STATUS), "OK", lowerUnderscore(ISSUER_TYPE), "type" )); //when AppResponse appResponse = activationCodeChecked.process(mockedFlow, activateWithCodeRequest); //then "<AssertPlaceHolder>"; assertEquals("OK", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, ActivateWithCodeRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException {  Map<String, Object> result = digidClient.activateAccountWithCode(appSession.getAccountId(), request.getActivationCode());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { appAuthenticator.setIssuerType((String) result.get(lowerUnderscore(ISSUER_TYPE))); return new OkResponse(); }  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = result.get(ERROR);  if (ERROR_CODE_NOT_CORRECT.equals(error)) { // Logcode 88 is already logged in x, can be changed when switching to account microservice : return new EnterActivationResponse(ERROR_CODE_NOT_CORRECT, Map.of(REMAINING_ATTEMPTS, result.get(lowerUnderscore(REMAINING_ATTEMPTS))));  } else if (ERROR_CODE_BLOCKED.equals(error)) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse((String) result.get(ERROR));  } else if (ERROR_CODE_INVALID.equals(error)) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse(ERROR_CODE_INVALID, Map.of(DAYS_VALID, result.get(lowerUnderscore(DAYS_VALID)))); } }  return new NokResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. bikeike ) )

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(digidClientMock.activateAccountWithCode(anyLong(), any())).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK" )); //when AppResponse result = activationCodeChecked.process(mockedFlow, activateWithCodeRequest); //then "<AssertPlaceHolder>"; }
process(Flow flow, ActivateWithCodeRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException {  Map<String, Object> result = digidClient.activateAccountWithCode(appSession.getAccountId(), request.getActivationCode());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { appAuthenticator.setIssuerType((String) result.get(lowerUnderscore(ISSUER_TYPE))); return new OkResponse(); }  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = result.get(ERROR);  if (ERROR_CODE_NOT_CORRECT.equals(error)) { // Logcode 88 is already logged in x, can be changed when switching to account microservice : return new EnterActivationResponse(ERROR_CODE_NOT_CORRECT, Map.of(REMAINING_ATTEMPTS, result.get(lowerUnderscore(REMAINING_ATTEMPTS))));  } else if (ERROR_CODE_BLOCKED.equals(error)) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse((String) result.get(ERROR));  } else if (ERROR_CODE_INVALID.equals(error)) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse(ERROR_CODE_INVALID, Map.of(DAYS_VALID, result.get(lowerUnderscore(DAYS_VALID)))); } }  return new NokResponse(); }
[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( result, new OkResponse(); )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(digidClientMock.activateAccountWithCode(anyLong(), any())).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK", lowerUnderscore(ERROR), "activation_code_blocked", lowerUnderscore(ERROR_CODE_BLOCKED), "activation_code_blocked" )); //when AppResponse result = activationCodeChecked.process(mockedFlow, activateWithCodeRequest); //then verify(digidClientMock, times(1)).remoteLog("87", ImmutableMap.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId())); "<AssertPlaceHolder>"; assertEquals("activation_code_blocked", ((NokResponse) result).getError()); }
process(Flow flow, ActivateWithCodeRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException {  Map<String, Object> result = digidClient.activateAccountWithCode(appSession.getAccountId(), request.getActivationCode());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { appAuthenticator.setIssuerType((String) result.get(lowerUnderscore(ISSUER_TYPE))); return new OkResponse(); }  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = result.get(ERROR);  if (ERROR_CODE_NOT_CORRECT.equals(error)) { // Logcode 88 is already logged in x, can be changed when switching to account microservice : return new EnterActivationResponse(ERROR_CODE_NOT_CORRECT, Map.of(REMAINING_ATTEMPTS, result.get(lowerUnderscore(REMAINING_ATTEMPTS))));  } else if (ERROR_CODE_BLOCKED.equals(error)) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse((String) result.get(ERROR));  } else if (ERROR_CODE_INVALID.equals(error)) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse(ERROR_CODE_INVALID, Map.of(DAYS_VALID, result.get(lowerUnderscore(DAYS_VALID)))); } }  return new NokResponse(); }
[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Mock Mock MockResponse(); ) )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(digidClientMock.activateAccountWithCode(anyLong(), any())).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK", lowerUnderscore(ERROR), "activation_code_not_correct", lowerUnderscore(ERROR_CODE_BLOCKED), "activation_code_not_correct", lowerUnderscore(REMAINING_ATTEMPTS), 2 )); //when AppResponse result = activationCodeChecked.process(mockedFlow, activateWithCodeRequest); //then  "<AssertPlaceHolder>"; assertEquals("activation_code_not_correct", ((NokResponse) result).getError()); }
process(Flow flow, ActivateWithCodeRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException {  Map<String, Object> result = digidClient.activateAccountWithCode(appSession.getAccountId(), request.getActivationCode());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { appAuthenticator.setIssuerType((String) result.get(lowerUnderscore(ISSUER_TYPE))); return new OkResponse(); }  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = result.get(ERROR);  if (ERROR_CODE_NOT_CORRECT.equals(error)) { // Logcode 88 is already logged in x, can be changed when switching to account microservice : return new EnterActivationResponse(ERROR_CODE_NOT_CORRECT, Map.of(REMAINING_ATTEMPTS, result.get(lowerUnderscore(REMAINING_ATTEMPTS))));  } else if (ERROR_CODE_BLOCKED.equals(error)) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse((String) result.get(ERROR));  } else if (ERROR_CODE_INVALID.equals(error)) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse(ERROR_CODE_INVALID, Map.of(DAYS_VALID, result.get(lowerUnderscore(DAYS_VALID)))); } }  return new NokResponse(); }
[*] target: assertTrue(result instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), result )

[*] target: assertTrue(result instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), result )

[*] target: assertTrue(result instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, result )

[*] target: assertTrue(result instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 1000 ), result )

[*] target: assertTrue(result instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(digidClientMock.activateAccountWithCode(anyLong(), any())).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK", lowerUnderscore(ERROR), "activation_code_invalid", lowerUnderscore(ERROR_CODE_BLOCKED), "activation_code_invalid", lowerUnderscore(DAYS_VALID), 1 )); //when AppResponse result = activationCodeChecked.process(mockedFlow, activateWithCodeRequest); //then verify(digidClientMock, times(1)).remoteLog("90", ImmutableMap.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId())); "<AssertPlaceHolder>"; assertEquals("activation_code_invalid", ((NokResponse) result).getError()); }
process(Flow flow, ActivateWithCodeRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException {  Map<String, Object> result = digidClient.activateAccountWithCode(appSession.getAccountId(), request.getActivationCode());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { appAuthenticator.setIssuerType((String) result.get(lowerUnderscore(ISSUER_TYPE))); return new OkResponse(); }  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = result.get(ERROR);  if (ERROR_CODE_NOT_CORRECT.equals(error)) { // Logcode 88 is already logged in x, can be changed when switching to account microservice : return new EnterActivationResponse(ERROR_CODE_NOT_CORRECT, Map.of(REMAINING_ATTEMPTS, result.get(lowerUnderscore(REMAINING_ATTEMPTS))));  } else if (ERROR_CODE_BLOCKED.equals(error)) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse((String) result.get(ERROR));  } else if (ERROR_CODE_INVALID.equals(error)) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse(ERROR_CODE_INVALID, Map.of(DAYS_VALID, result.get(lowerUnderscore(DAYS_VALID)))); } }  return new NokResponse(); }
[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Mock Mock MockResponse(); ) )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: processWidRequest() { when(digidClientMock.requestWid(mockedAppSession.getAccountId())).thenReturn(requestWidResponse);  AppResponse appResponse = awaitingDocuments.process(mockedFlow, mockedAbstractAppRequest);  "<AssertPlaceHolder>"; assertEquals(RESPONSE_WID_REQUEST_ID, mockedAppSession.getWidRequestId()); }
process(Flow flow, AppRequest body) { Map<String, String> result = digidClient.requestWid(appSession.getAccountId());  appSession.setWidRequestId(result.get(lowerUnderscore(WID_REQUEST_ID))); appSession.setRdaSessionStatus("AWAITING_DOCUMENTS");  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( 15, appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( prepare prepareWidResponse, appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( wfResponse, appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processOKTest() { when(digidClientMock.getExistingAccount(1337L, "NL")).thenReturn(Map.of( lowerUnderscore(STATUS), "OK", lowerUnderscore(ACCOUNT_ID), "1" ));  AppResponse appResponse = checkExistingAccount.process(flowMock, null);  "<AssertPlaceHolder>"; assertTrue(appResponse instanceof OkResponse); assertEquals("OK", ((OkResponse) appResponse).getStatus()); verify(digidClientMock, times(1)).remoteLog("54", Map.of(lowerUnderscore(ACCOUNT_ID), 1L)); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingAccount(appSession.getRegistrationId(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); digidClient.remoteLog("54", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_ACCOUNT_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertEquals(1, checkExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof instanceof

[*] target: assertEquals(1, checkExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof

[*] target: assertEquals(1, checkExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof instanceof instanceof

[*] target: assertEquals(1, checkExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertEquals(1, checkExistingAccount.getAppSession().getAccountId())
[-] pred:  org

************************************
************************************
[+] input: processExistingAccountTest() { when(digidClientMock.getExistingAccount(1337L, "NL")).thenReturn(Map.of( lowerUnderscore(STATUS), "PENDING", lowerUnderscore(ACCOUNT_ID), "1" ));  AppResponse appResponse = checkExistingAccount.process(flowMock, null);  "<AssertPlaceHolder>"; assertTrue(appResponse instanceof StatusResponse); assertEquals("PENDING", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingAccount(appSession.getRegistrationId(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); digidClient.remoteLog("54", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_ACCOUNT_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertEquals(State.EXISTING_ACCOUNT_FOUND.name(), checkExistingAccount.getAppSession().getState())
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertEquals(State.EXISTING_ACCOUNT_FOUND.name(), checkExistingAccount.getAppSession().getState())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof org. StatusResponse ) )

[*] target: assertEquals(State.EXISTING_ACCOUNT_FOUND.name(), checkExistingAccount.getAppSession().getState())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof

[*] target: assertEquals(State.EXISTING_ACCOUNT_FOUND.name(), checkExistingAccount.getAppSession().getState())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof instanceof

[*] target: assertEquals(State.EXISTING_ACCOUNT_FOUND.name(), checkExistingAccount.getAppSession().getState())
[-] pred:  org

************************************
************************************
[+] input: processNOKMissingRegistrationTest() { checkExistingAccount.getAppSession().setRegistrationId(null);  AppResponse appResponse = checkExistingAccount.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((NokResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingAccount(appSession.getRegistrationId(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); digidClient.remoteLog("54", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_ACCOUNT_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( ( java. lang. String ) ( appResponse ) ) ), new org. apache. commons. lang. String ( appResponse ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( ( java. lang. String ) ( appResponse ) ) ), newAppResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( ( java. lang. String ) ( appResponse ) ) ), new org. apache. hadoop. io. File ( appResponse ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( ( org. apache. hadoop. stream. Optional ) ( appResponse ) ). get ( ), 0 )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

************************************
************************************
[+] input: processNOKResponseTest() { when(digidClientMock.getExistingAccount(1337L, "NL")).thenReturn(Map.of( lowerUnderscore(STATUS), "OK" ));  AppResponse appResponse = checkExistingAccount.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingAccount(appSession.getRegistrationId(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); digidClient.remoteLog("54", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_ACCOUNT_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, new org. apache. 0 0 )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, new org. StatusResponse. WebUtil )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, transformTest )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processOKTest() { when(digidClientMock.getExistingApplication(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "OK" ));  AppResponse appResponse = checkExistingApplication.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("OK", ((OkResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingApplication(appSession.getRegistrationId());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_APPLICATION_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 1000 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processExistingApplicationTest() { when(digidClientMock.getExistingApplication(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "PENDING" ));  AppResponse appResponse = checkExistingApplication.process(flowMock, null);  "<AssertPlaceHolder>"; assertTrue(appResponse instanceof StatusResponse); assertEquals("PENDING", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingApplication(appSession.getRegistrationId());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_APPLICATION_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertEquals(State.EXISTING_APPLICATION_FOUND.name(), checkExistingApplication.getAppSession().getState())
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertEquals(State.EXISTING_APPLICATION_FOUND.name(), checkExistingApplication.getAppSession().getState())
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertEquals(State.EXISTING_APPLICATION_FOUND.name(), checkExistingApplication.getAppSession().getState())
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0, 0 ), appResponse )

[*] target: assertEquals(State.EXISTING_APPLICATION_FOUND.name(), checkExistingApplication.getAppSession().getState())
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertEquals(State.EXISTING_APPLICATION_FOUND.name(), checkExistingApplication.getAppSession().getState())
[-] pred:  org

************************************
************************************
[+] input: processNOKMissingRegistrationTest() { checkExistingApplication.getAppSession().setRegistrationId(null);  AppResponse appResponse = checkExistingApplication.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((NokResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingApplication(appSession.getRegistrationId());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_APPLICATION_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( null, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKResponseTest() { when(digidClientMock.getExistingApplication(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "QUESTION MARK" ));  AppResponse appResponse = checkExistingApplication.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.getExistingApplication(appSession.getRegistrationId());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { // switch state to require replace action appSession.setState(State.EXISTING_APPLICATION_FOUND.name()); return new StatusResponse("PENDING"); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0, 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( - 1 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse )

************************************
************************************
[+] input: SharedServiceClientException {  mockedAppAuthenticator.setCreatedAt(ZonedDateTime.now()); mockedAppAuthenticator.setActivationCode("123"); mockedAppAuthenticator.setStatus("pending"); mockedAppAuthenticator.setActivatedAt(ZonedDateTime.now()); mockedAppSession.setInstanceId("instanceId"); mockedAppAuthenticator.setDeviceName("deviceName"); mockedAppAuthenticator.setGeldigheidstermijn("42"); when(digidClientMock.activateAccount(any(), any())) .thenReturn(Map.of( lowerUnderscore(STATUS), "OK" ));  when(mockedFlow.activateApp(mockedAppAuthenticator, mockedAppSession)).thenReturn(null);  AppResponse appResponse = enterActivationCode.process(mockedFlow, activateWithCodeRequest);  "<AssertPlaceHolder>"; }
process(Flow flow, ActivateWithCodeRequest request) throws SharedServiceClientException {  digidClient.remoteLog("1092", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId()));  if (appAuthenticator.getCreatedAt().isBefore(ZonedDateTime.now().minusDays(Integer.parseInt(appAuthenticator.getGeldigheidstermijn())))) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse("expired", Map.of(DAYS_VALID, Integer.valueOf(appAuthenticator.getGeldigheidstermijn()))); }  if (correctActivationCode(request.getActivationCode()) && digidClient.activateAccount(appSession.getAccountId(), appAuthenticator.getIssuerType()).get(lowerUnderscore(STATUS)).equals("OK")) {  ((ActivationFlow) flow).activateApp(appAuthenticator, appSession);  attemptService.removeAttemptsForAppAuthenticator(appAuthenticator, "activation");  return new OkResponse(); } else if (attemptService.registerFailedAttempt(appAuthenticator, "activation")) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); if(appAuthenticator.getStatus().equals("pending")) appAuthenticatorService.destroyExistingAppsByInstanceId(appAuthenticator.getInstanceId());  appSession.setState("CANCELLED"); appSessionService.save(appSession); setValid(false); return new StatusResponse(BLOCKED); } else { digidClient.remoteLog("88", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); var letterSent = digidClient.letterSendDate((appSession.getRegistrationId())); return new EnterActivationResponse(INVALID, Map.of(REMAINING_ATTEMPTS, attemptService.remainingAttempts(appAuthenticator, "activation"), DATE_LETTER_SENT, letterSent.get("date"))); } }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxp ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxStream ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse == null ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { //given mockedAppAuthenticator.setCreatedAt(ZonedDateTime.parse("2021-10-14T19:31:00.044077+01:00[Europe/Amsterdam]")); mockedAppAuthenticator.setGeldigheidstermijn("5"); //when AppResponse appResponse = enterActivationCode.process(mockedFlow, activateWithCodeRequest); //then "<AssertPlaceHolder>"; assertEquals("expired", ((StatusResponse) appResponse).getError()); }
process(Flow flow, ActivateWithCodeRequest request) throws SharedServiceClientException {  digidClient.remoteLog("1092", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId()));  if (appAuthenticator.getCreatedAt().isBefore(ZonedDateTime.now().minusDays(Integer.parseInt(appAuthenticator.getGeldigheidstermijn())))) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse("expired", Map.of(DAYS_VALID, Integer.valueOf(appAuthenticator.getGeldigheidstermijn()))); }  if (correctActivationCode(request.getActivationCode()) && digidClient.activateAccount(appSession.getAccountId(), appAuthenticator.getIssuerType()).get(lowerUnderscore(STATUS)).equals("OK")) {  ((ActivationFlow) flow).activateApp(appAuthenticator, appSession);  attemptService.removeAttemptsForAppAuthenticator(appAuthenticator, "activation");  return new OkResponse(); } else if (attemptService.registerFailedAttempt(appAuthenticator, "activation")) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); if(appAuthenticator.getStatus().equals("pending")) appAuthenticatorService.destroyExistingAppsByInstanceId(appAuthenticator.getInstanceId());  appSession.setState("CANCELLED"); appSessionService.save(appSession); setValid(false); return new StatusResponse(BLOCKED); } else { digidClient.remoteLog("88", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); var letterSent = digidClient.letterSendDate((appSession.getRegistrationId())); return new EnterActivationResponse(INVALID, Map.of(REMAINING_ATTEMPTS, attemptService.remainingAttempts(appAuthenticator, "activation"), DATE_LETTER_SENT, letterSent.get("date"))); } }
[*] target: assertTrue(appResponse instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof EnterActivationResponse ) )

[*] target: assertTrue(appResponse instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxStream ) )

[*] target: assertTrue(appResponse instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxp ) )

[*] target: assertTrue(appResponse instanceof EnterActivationResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

************************************
************************************
[+] input: SharedServiceClientException { //given mockedAppAuthenticator.setCreatedAt(ZonedDateTime.now()); mockedAppAuthenticator.setActivationCode("3");  when(attemptService.registerFailedAttempt(mockedAppAuthenticator, "activation")).thenReturn(true);  mockedAppAuthenticator.setStatus("none"); //when AppResponse appResponse = enterActivationCode.process(mockedFlow, activateWithCodeRequest);  //then "<AssertPlaceHolder>"; assertEquals("BLOCKED", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, ActivateWithCodeRequest request) throws SharedServiceClientException {  digidClient.remoteLog("1092", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId()));  if (appAuthenticator.getCreatedAt().isBefore(ZonedDateTime.now().minusDays(Integer.parseInt(appAuthenticator.getGeldigheidstermijn())))) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse("expired", Map.of(DAYS_VALID, Integer.valueOf(appAuthenticator.getGeldigheidstermijn()))); }  if (correctActivationCode(request.getActivationCode()) && digidClient.activateAccount(appSession.getAccountId(), appAuthenticator.getIssuerType()).get(lowerUnderscore(STATUS)).equals("OK")) {  ((ActivationFlow) flow).activateApp(appAuthenticator, appSession);  attemptService.removeAttemptsForAppAuthenticator(appAuthenticator, "activation");  return new OkResponse(); } else if (attemptService.registerFailedAttempt(appAuthenticator, "activation")) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); if(appAuthenticator.getStatus().equals("pending")) appAuthenticatorService.destroyExistingAppsByInstanceId(appAuthenticator.getInstanceId());  appSession.setState("CANCELLED"); appSessionService.save(appSession); setValid(false); return new StatusResponse(BLOCKED); } else { digidClient.remoteLog("88", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); var letterSent = digidClient.letterSendDate((appSession.getRegistrationId())); return new EnterActivationResponse(INVALID, Map.of(REMAINING_ATTEMPTS, attemptService.remainingAttempts(appAuthenticator, "activation"), DATE_LETTER_SENT, letterSent.get("date"))); } }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxp ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. jaxp. Context ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. Long ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { //given mockedAppAuthenticator.setCreatedAt(ZonedDateTime.now()); mockedAppAuthenticator.setActivationCode("3"); mockedAppAuthenticator.setStatus("pending"); mockedAppAuthenticator.setInstanceId("test");  when(attemptService.registerFailedAttempt(mockedAppAuthenticator, "activation")).thenReturn(true); mockedAppAuthenticator.setStatus("pending"); //when AppResponse appResponse = enterActivationCode.process(mockedFlow, activateWithCodeRequest); //then verify(appAuthenticatorService, times(1)).destroyExistingAppsByInstanceId(mockedAppAuthenticator.getInstanceId());  "<AssertPlaceHolder>"; assertEquals("BLOCKED", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, ActivateWithCodeRequest request) throws SharedServiceClientException {  digidClient.remoteLog("1092", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId()));  if (appAuthenticator.getCreatedAt().isBefore(ZonedDateTime.now().minusDays(Integer.parseInt(appAuthenticator.getGeldigheidstermijn())))) { digidClient.remoteLog("90", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new EnterActivationResponse("expired", Map.of(DAYS_VALID, Integer.valueOf(appAuthenticator.getGeldigheidstermijn()))); }  if (correctActivationCode(request.getActivationCode()) && digidClient.activateAccount(appSession.getAccountId(), appAuthenticator.getIssuerType()).get(lowerUnderscore(STATUS)).equals("OK")) {  ((ActivationFlow) flow).activateApp(appAuthenticator, appSession);  attemptService.removeAttemptsForAppAuthenticator(appAuthenticator, "activation");  return new OkResponse(); } else if (attemptService.registerFailedAttempt(appAuthenticator, "activation")) { digidClient.remoteLog("87", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); if(appAuthenticator.getStatus().equals("pending")) appAuthenticatorService.destroyExistingAppsByInstanceId(appAuthenticator.getInstanceId());  appSession.setState("CANCELLED"); appSessionService.save(appSession); setValid(false); return new StatusResponse(BLOCKED); } else { digidClient.remoteLog("88", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); var letterSent = digidClient.letterSendDate((appSession.getRegistrationId())); return new EnterActivationResponse(INVALID, Map.of(REMAINING_ATTEMPTS, attemptService.remainingAttempts(appAuthenticator, "activation"), DATE_LETTER_SENT, letterSent.get("date"))); } }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxp ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof jaxStream ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. mozillamozilla.getPrefsPrefs ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org

************************************
************************************
[+] input: processAppSessionVerified() { mockedAppSession.setRdaSessionStatus("VERIFIED");  AppResponse appResponse = finalizeRda.process(mockedFlow, mockedAbstractAppRequest);  verify(mockedFlow, times(1)).activateApp(mockedAppAuthenticator, mockedAppSession, "rda"); verify(digidClientMock, times(1)).remoteLog("1219", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), lowerUnderscore(DEVICE_NAME), mockedAppAuthenticator.getDeviceName()));  "<AssertPlaceHolder>"; assertEquals("SUCCESS", ((StatusResponse)appResponse).getStatus()); }
process(Flow flow, AppRequest body) { if (appSession.getRdaSessionStatus().equals("VERIFIED")) { ((ActivationFlow) flow).activateApp(appAuthenticator, appSession, RDA);  digidClient.remoteLog("1219", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new StatusResponse("SUCCESS"); }  return new NokResponse(); }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( ((ActivationFlow) flow).activateApp(appAuthenticator,xxxx, RDAChecker. process(Flow flow, AppResponse ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( ((ActivationFlow) flow).activateApp(appAuthenticator,SessionID, RDA); digidClient.getAppdaSession ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse. process(Flow flow,ExamplesExamplesExamples )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse. process(Flow flow,BiDADA )

************************************
************************************
[+] input: processAppSessionNotVerified() { mockedAppSession.setRdaSessionStatus("NOT_VERIFIED");  AppResponse appResponse = finalizeRda.process(mockedFlow, mockedAbstractAppRequest);  verify(mockedFlow, times(0)).activateApp(mockedAppAuthenticator, mockedAppSession, "rda"); "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest body) { if (appSession.getRdaSessionStatus().equals("VERIFIED")) { ((ActivationFlow) flow).activateApp(appAuthenticator, appSession, RDA);  digidClient.remoteLog("1219", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new StatusResponse("SUCCESS"); }  return new NokResponse(); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,AppSession )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,ExamplesExamples )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,ExamplesExamplesExamples )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: NoSuchAlgorithmException { //given AppAuthenticator appAuthenticator = new AppAuthenticator(); appAuthenticator.setUserAppId("userAppId"); appAuthenticator.setInstanceId("123456"); appAuthenticator.setDeviceName("deviceName"); appAuthenticator.setAccountId(1L); appAuthenticator.setActivatedAt(ZonedDateTime.now());  AppSession session = new AppSession(); session.setState(State.AUTHENTICATED.name()); session.setUserAppId("userAppId");  when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(appSessionService.getSession(any())).thenReturn(session);  RdaSessionResponse appResponse = (RdaSessionResponse) initRda.process(mockedFlow, request);  "<AssertPlaceHolder>"; }
process(Flow flow, RdaSessionRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException, SharedServiceClientException { var authAppSession = appSessionService.getSession(request.getAuthSessionId());  if (!isAppSessionAuthenticated(authAppSession) || !request.getUserAppId().equals(authAppSession.getUserAppId())){ return new NokResponse(); }  AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(request.getUserAppId()); if (!isAppAuthenticatorActivated(appAuthenticator)) return new NokResponse();  appSession = new AppSession(); appSession.setAction("upgrade_app"); appSession.setFlow(UpgradeLoginLevel.NAME); appSession.setRdaAction("app"); appSession.setUserAppId(appAuthenticator.getUserAppId()); appSession.setDeviceName(appAuthenticator.getDeviceName()); appSession.setInstanceId(appAuthenticator.getInstanceId()); appSession.setAccountId(appAuthenticator.getAccountId());  digidClient.remoteLog("844", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode() ,lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true));  return new RdaSessionResponse(appSession.getId(), appSession.getAction()); }
[*] target: assertEquals("upgrade_app", appResponse.getAction())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. NoSuchAlgorithmException ) )

[*] target: assertEquals("upgrade_app", appResponse.getAction())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse!= null ) )

[*] target: assertEquals("upgrade_app", appResponse.getAction())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. wfSessionResponse ) )

[*] target: assertEquals("upgrade_app", appResponse.getAction())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. neccess. Context ) )

[*] target: assertEquals("upgrade_app", appResponse.getAction())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. wf. Context ) )

************************************
************************************
[+] input: processStatusRequest() { when(digidClientMock.pollLetter(mockedAppSession.getAccountId(), mockedAppSession.getRegistrationId(), false)).thenReturn(gbaStatusResponseRequest);  AppResponse appResponse = letterPolling.process(mockedFlow, mockedAbstractAppRequest);  "<AssertPlaceHolder>"; assertEquals("PENDING", ((StatusResponse)appResponse).getStatus()); }
process(Flow flow, AppRequest body) { Map<String, String> registration = digidClient.pollLetter(appSession.getAccountId(), appSession.getRegistrationId(), flow.getName().equals(ReApplyActivateActivationCode.NAME));  if (registration.get(lowerUnderscore(GBA_STATUS)).equals("request")) { setValid(false); return new StatusResponse("PENDING"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("deceased")){ digidClient.remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_deceased"); } else if (GBA_EMIGATED_RNI.contains(registration.get(lowerUnderscore(GBA_STATUS)))) { digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_emigrated_RNI"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("error")){ return new NokResponse("error"); } else if (!registration.get(lowerUnderscore(GBA_STATUS)).equals("valid_app_extension")){ digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_invalid"); }  digidClient.remoteLog("156", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), "device_name", appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true)); appAuthenticator.setRequestedAt(ZonedDateTime.now()); appAuthenticator.setIssuerType(registration.get(lowerUnderscore(ISSUER_TYPE)));  digidClient.remoteLog("905", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("errorfrom ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("error.4. ( ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("error.4. ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("errorTag ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("errorTag ( ), appResponse )

************************************
************************************
[+] input: processStatusDeceased() { when(digidClientMock.pollLetter(mockedAppSession.getAccountId(), mockedAppSession.getRegistrationId(), false)).thenReturn(gbaStatusResponseDeceased);  AppResponse appResponse = letterPolling.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), TEST_ACCOUNT_ID, "hidden", true)); "<AssertPlaceHolder>"; assertEquals("gba_deceased", ((NokResponse)appResponse).getError()); }
process(Flow flow, AppRequest body) { Map<String, String> registration = digidClient.pollLetter(appSession.getAccountId(), appSession.getRegistrationId(), flow.getName().equals(ReApplyActivateActivationCode.NAME));  if (registration.get(lowerUnderscore(GBA_STATUS)).equals("request")) { setValid(false); return new StatusResponse("PENDING"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("deceased")){ digidClient.remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_deceased"); } else if (GBA_EMIGATED_RNI.contains(registration.get(lowerUnderscore(GBA_STATUS)))) { digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_emigrated_RNI"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("error")){ return new NokResponse("error"); } else if (!registration.get(lowerUnderscore(GBA_STATUS)).equals("valid_app_extension")){ digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_invalid"); }  digidClient.remoteLog("156", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), "device_name", appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true)); appAuthenticator.setRequestedAt(ZonedDateTime.now()); appAuthenticator.setIssuerType(registration.get(lowerUnderscore(ISSUER_TYPE)));  digidClient.remoteLog("905", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. processStatusDeceased 0 )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow, 0 )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. processStatusLine ( 0 ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processStatusInvalid() { when(digidClientMock.pollLetter(mockedAppSession.getAccountId(), mockedAppSession.getRegistrationId(), false)).thenReturn(gbaStatusResponseInvalid);  AppResponse appResponse = letterPolling.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), TEST_ACCOUNT_ID, "hidden", true)); "<AssertPlaceHolder>"; assertEquals("gba_invalid", ((NokResponse)appResponse).getError()); }
process(Flow flow, AppRequest body) { Map<String, String> registration = digidClient.pollLetter(appSession.getAccountId(), appSession.getRegistrationId(), flow.getName().equals(ReApplyActivateActivationCode.NAME));  if (registration.get(lowerUnderscore(GBA_STATUS)).equals("request")) { setValid(false); return new StatusResponse("PENDING"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("deceased")){ digidClient.remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_deceased"); } else if (GBA_EMIGATED_RNI.contains(registration.get(lowerUnderscore(GBA_STATUS)))) { digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_emigrated_RNI"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("error")){ return new NokResponse("error"); } else if (!registration.get(lowerUnderscore(GBA_STATUS)).equals("valid_app_extension")){ digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_invalid"); }  digidClient.remoteLog("156", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), "device_name", appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true)); appAuthenticator.setRequestedAt(ZonedDateTime.now()); appAuthenticator.setIssuerType(registration.get(lowerUnderscore(ISSUER_TYPE)));  digidClient.remoteLog("905", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("errorTag ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("errorTag ( 0 ), appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("error000, appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processStatusEmigrated() { when(digidClientMock.pollLetter(mockedAppSession.getAccountId(), mockedAppSession.getRegistrationId(), false)).thenReturn(gbaStatusResponseEmigrated    );  AppResponse appResponse = letterPolling.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), TEST_ACCOUNT_ID, "hidden", true)); "<AssertPlaceHolder>"; assertEquals("gba_emigrated_RNI", ((NokResponse)appResponse).getError()); }
process(Flow flow, AppRequest body) { Map<String, String> registration = digidClient.pollLetter(appSession.getAccountId(), appSession.getRegistrationId(), flow.getName().equals(ReApplyActivateActivationCode.NAME));  if (registration.get(lowerUnderscore(GBA_STATUS)).equals("request")) { setValid(false); return new StatusResponse("PENDING"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("deceased")){ digidClient.remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_deceased"); } else if (GBA_EMIGATED_RNI.contains(registration.get(lowerUnderscore(GBA_STATUS)))) { digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_emigrated_RNI"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("error")){ return new NokResponse("error"); } else if (!registration.get(lowerUnderscore(GBA_STATUS)).equals("valid_app_extension")){ digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_invalid"); }  digidClient.remoteLog("156", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), "device_name", appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true)); appAuthenticator.setRequestedAt(ZonedDateTime.now()); appAuthenticator.setIssuerType(registration.get(lowerUnderscore(ISSUER_TYPE)));  digidClient.remoteLog("905", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,Map.of_EMI<sp>fromfrom8"" )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,Map.of_EMI<sp>fromfrom9"" 0 )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow,MessagesInLogs ( ). size ( ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processStatusValid() { when(digidClientMock.pollLetter(mockedAppSession.getAccountId(), mockedAppSession.getRegistrationId(), false)).thenReturn(gbaStatusResponseValid);  AppResponse appResponse = letterPolling.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("156", Map.of("account_id", TEST_ACCOUNT_ID, "device_name", TEST_DEVICE_NAME, "hidden", true)); "<AssertPlaceHolder>"; assertEquals(TEST_ISSUER_TYPE, mockedAppAuthenticator.getIssuerType()); }
process(Flow flow, AppRequest body) { Map<String, String> registration = digidClient.pollLetter(appSession.getAccountId(), appSession.getRegistrationId(), flow.getName().equals(ReApplyActivateActivationCode.NAME));  if (registration.get(lowerUnderscore(GBA_STATUS)).equals("request")) { setValid(false); return new StatusResponse("PENDING"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("deceased")){ digidClient.remoteLog("559", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_deceased"); } else if (GBA_EMIGATED_RNI.contains(registration.get(lowerUnderscore(GBA_STATUS)))) { digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_emigrated_RNI"); } else if (registration.get(lowerUnderscore(GBA_STATUS)).equals("error")){ return new NokResponse("error"); } else if (!registration.get(lowerUnderscore(GBA_STATUS)).equals("valid_app_extension")){ digidClient.remoteLog("558", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); return new NokResponse("gba_invalid"); }  digidClient.remoteLog("156", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), "device_name", appAuthenticator.getDeviceName(), lowerUnderscore(HIDDEN), true)); appAuthenticator.setRequestedAt(ZonedDateTime.now()); appAuthenticator.setIssuerType(registration.get(lowerUnderscore(ISSUER_TYPE)));  digidClient.remoteLog("905", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow, 0 )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process ( Property ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processValid() { when(digidClientMock.createLetter(mockedAppSession.getAccountId(), mockedAppSession.getActivationMethod(), true)).thenReturn(validCreateLetterResponse); when(mockedFlow.getName()).thenReturn(ReApplyActivateActivationCode.NAME);  OkResponse appResponse = (OkResponse) letterSent.process(mockedFlow, mockedAbstractAppRequest); "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest request) {  if (!appSession.getWithBsn()) { digidClient.remoteLog("1487", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), "hidden", true)); return new NokResponse("no_bsn_on_account"); }  boolean reRequestLetter = flow.getName().equals(ReApplyActivateActivationCode.NAME);  if(reRequestLetter){ digidClient.remoteLog("914", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  Map<String, Object> result = digidClient.createLetter(appSession.getAccountId(), appSession.getActivationMethod(), reRequestLetter); if (result.get(ERROR) != null){ if(result.get(ERROR).equals("too_often")){ digidClient.remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new NokTooOftenResponse((Map<String, Object>) result.get(PAYLOAD), (String) result.get(ERROR)); } else if(result.get(ERROR).equals("too_soon")){ digidClient.remoteLog("758", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else if(result.get(ERROR).equals("too_many_letter_requests")){ digidClient.remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); } return new NokResponse((String) result.get(ERROR)); }  appSession.setRegistrationId(((Integer) result.get(lowerUnderscore(REGISTRATION_ID))).longValue());  digidClient.remoteLog("904", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertEquals(Long.valueOf(RESPONSE_REGISTRATION_ID), mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow, AppResponseResponse )

[*] target: assertEquals(Long.valueOf(RESPONSE_REGISTRATION_ID), mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow, AppResponse )

[*] target: assertEquals(Long.valueOf(RESPONSE_REGISTRATION_ID), mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. mockito. CoreMatchers ) )

[*] target: assertEquals(Long.valueOf(RESPONSE_REGISTRATION_ID), mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertEquals(Long.valueOf(RESPONSE_REGISTRATION_ID), mockedAppSession.getRegistrationId())
[-] pred:  org

************************************
************************************
[+] input: processTooOften() { when(digidClientMock.createLetter(mockedAppSession.getAccountId(), mockedAppSession.getActivationMethod(), true)).thenReturn(tooOftenCreateLetterResponse); when(mockedFlow.getName()).thenReturn(ReApplyActivateActivationCode.NAME);  NokTooOftenResponse appResponse = (NokTooOftenResponse) letterSent.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), lowerUnderscore(APP_CODE), "DAEA0", lowerUnderscore(DEVICE_NAME), TEST_DEVICE_NAME));  "<AssertPlaceHolder>";  assertEquals("timestamp", appResponse.getPayload().get("next_registration_date")); assertEquals(5, appResponse.getPayload().get("blokkering_digid_app_aanvragen")); }
process(Flow flow, AppRequest request) {  if (!appSession.getWithBsn()) { digidClient.remoteLog("1487", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), "hidden", true)); return new NokResponse("no_bsn_on_account"); }  boolean reRequestLetter = flow.getName().equals(ReApplyActivateActivationCode.NAME);  if(reRequestLetter){ digidClient.remoteLog("914", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  Map<String, Object> result = digidClient.createLetter(appSession.getAccountId(), appSession.getActivationMethod(), reRequestLetter); if (result.get(ERROR) != null){ if(result.get(ERROR).equals("too_often")){ digidClient.remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new NokTooOftenResponse((Map<String, Object>) result.get(PAYLOAD), (String) result.get(ERROR)); } else if(result.get(ERROR).equals("too_soon")){ digidClient.remoteLog("758", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else if(result.get(ERROR).equals("too_many_letter_requests")){ digidClient.remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); } return new NokResponse((String) result.get(ERROR)); }  appSession.setRegistrationId(((Integer) result.get(lowerUnderscore(REGISTRATION_ID))).longValue());  digidClient.remoteLog("904", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertEquals(TOO_OFTEN, appResponse.getError())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof NokTooOftenResponse ) )

[*] target: assertEquals(TOO_OFTEN, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals(TOO_OFTEN, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(TOO_OFTEN, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(TOO_OFTEN, appResponse.getError())
[-] pred:  org

************************************
************************************
[+] input: processTooSoon() { when(digidClientMock.createLetter(mockedAppSession.getAccountId(), mockedAppSession.getActivationMethod(), true)).thenReturn(tooSoonCreateLetterResponse); when(mockedFlow.getName()).thenReturn(ReApplyActivateActivationCode.NAME);  NokResponse appResponse = (NokResponse) letterSent.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("758", ImmutableMap.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId())); "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest request) {  if (!appSession.getWithBsn()) { digidClient.remoteLog("1487", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), "hidden", true)); return new NokResponse("no_bsn_on_account"); }  boolean reRequestLetter = flow.getName().equals(ReApplyActivateActivationCode.NAME);  if(reRequestLetter){ digidClient.remoteLog("914", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  Map<String, Object> result = digidClient.createLetter(appSession.getAccountId(), appSession.getActivationMethod(), reRequestLetter); if (result.get(ERROR) != null){ if(result.get(ERROR).equals("too_often")){ digidClient.remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new NokTooOftenResponse((Map<String, Object>) result.get(PAYLOAD), (String) result.get(ERROR)); } else if(result.get(ERROR).equals("too_soon")){ digidClient.remoteLog("758", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else if(result.get(ERROR).equals("too_many_letter_requests")){ digidClient.remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); } return new NokResponse((String) result.get(ERROR)); }  appSession.setRegistrationId(((Integer) result.get(lowerUnderscore(REGISTRATION_ID))).longValue());  digidClient.remoteLog("904", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertEquals(TOO_SOON, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(TOO_SOON, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals(TOO_SOON, appResponse.getError())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. mozilla.Client.remoteLog("758", Map.of ( digidClient.remoteLog("("("(" ) )

[*] target: assertEquals(TOO_SOON, appResponse.getError())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. gov. CoreMatchers. is ( 0L ) )

[*] target: assertEquals(TOO_SOON, appResponse.getError())
[-] pred:  org

************************************
************************************
[+] input: noNewLetterResponse() { when(digidClientMock.createLetter(mockedAppSession.getAccountId(), mockedAppSession.getActivationMethod(), true)).thenReturn(noNewLetterResponse); when(mockedFlow.getName()).thenReturn(ReApplyActivateActivationCode.NAME);  NokResponse appResponse = (NokResponse) letterSent.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), lowerUnderscore(APP_CODE), "DAEA0", lowerUnderscore(DEVICE_NAME), "test_device")); "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest request) {  if (!appSession.getWithBsn()) { digidClient.remoteLog("1487", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), "hidden", true)); return new NokResponse("no_bsn_on_account"); }  boolean reRequestLetter = flow.getName().equals(ReApplyActivateActivationCode.NAME);  if(reRequestLetter){ digidClient.remoteLog("914", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  Map<String, Object> result = digidClient.createLetter(appSession.getAccountId(), appSession.getActivationMethod(), reRequestLetter); if (result.get(ERROR) != null){ if(result.get(ERROR).equals("too_often")){ digidClient.remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new NokTooOftenResponse((Map<String, Object>) result.get(PAYLOAD), (String) result.get(ERROR)); } else if(result.get(ERROR).equals("too_soon")){ digidClient.remoteLog("758", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else if(result.get(ERROR).equals("too_many_letter_requests")){ digidClient.remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); } return new NokResponse((String) result.get(ERROR)); }  appSession.setRegistrationId(((Integer) result.get(lowerUnderscore(REGISTRATION_ID))).longValue());  digidClient.remoteLog("904", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertEquals(NO_NEW_LETTER, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(FlowActivationCode ( ). size ( ) )

[*] target: assertEquals(NO_NEW_LETTER, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(NO_NEW_LETTER, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals(NO_NEW_LETTER, appResponse.getError())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof NokTooOftenResponse ) )

[*] target: assertEquals(NO_NEW_LETTER, appResponse.getError())
[-] pred:  org

************************************
************************************
[+] input: processNoBsn() { mockedAppSession.setWithBsn(false);  NokResponse appResponse = (NokResponse) letterSent.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("1487", Map.of("hidden", true, lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId())); "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest request) {  if (!appSession.getWithBsn()) { digidClient.remoteLog("1487", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), "hidden", true)); return new NokResponse("no_bsn_on_account"); }  boolean reRequestLetter = flow.getName().equals(ReApplyActivateActivationCode.NAME);  if(reRequestLetter){ digidClient.remoteLog("914", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  Map<String, Object> result = digidClient.createLetter(appSession.getAccountId(), appSession.getActivationMethod(), reRequestLetter); if (result.get(ERROR) != null){ if(result.get(ERROR).equals("too_often")){ digidClient.remoteLog("906", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); return new NokTooOftenResponse((Map<String, Object>) result.get(PAYLOAD), (String) result.get(ERROR)); } else if(result.get(ERROR).equals("too_soon")){ digidClient.remoteLog("758", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else if(result.get(ERROR).equals("too_many_letter_requests")){ digidClient.remoteLog("1554", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); } return new NokResponse((String) result.get(ERROR)); }  appSession.setRegistrationId(((Integer) result.get(lowerUnderscore(REGISTRATION_ID))).longValue());  digidClient.remoteLog("904", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new OkResponse(); }
[*] target: assertEquals(NO_BSN_ERROR_STRING, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(NO_BSN_ERROR_STRING, appResponse.getError())
[-] pred:  org. junit. Assert. assertThat ( appResponse, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(NO_BSN_ERROR_STRING, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow )

[*] target: assertEquals(NO_BSN_ERROR_STRING, appResponse.getError())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. process(Flow flow, appResponse )

[*] target: assertEquals(NO_BSN_ERROR_STRING, appResponse.getError())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. mozillaSession.List. size ( ) ) )

************************************
************************************
[+] input: processNOK() { //given MrzDocumentRequest mrzDocumentRequest  = new MrzDocumentRequest(); mrzDocumentRequest.setDocumentType("A"); //when AppResponse appResponse = mrzDocumentInitialized.process(mockedFlow, mrzDocumentRequest); //then "<AssertPlaceHolder>"; }
process(Flow flow, MrzDocumentRequest params) { if(!(params.getDocumentType().equals("PASSPORT") || params.getDocumentType().equals("ID_CARD"))){ return new NokResponse(); } Map<String, String> travelDocument = Map.of( "documentNumber", params.getDocumentNumber(), "dateOfBirth", params.getDateOfBirth(), "dateOfExpiry", params.getDateOfExpiry());  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED");  Map<String, String> rdaSession = rdaClient.startSession( returnUrl.concat("/iapi/rda/confirm"), appSession.getId(), params.getIpAddress(), List.of(travelDocument), List.of());  if(rdaSession.isEmpty()){ digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret")); appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING_FOREIGN"); appSession.setRdaDocumentType(params.getDocumentType()); appSession.setRdaDocumentNumber(params.getDocumentNumber()); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processValid1() { //given MrzDocumentRequest mrzDocumentRequest  = new MrzDocumentRequest(); mrzDocumentRequest.setDocumentType("PASSPORT"); mrzDocumentRequest.setDateOfBirth("test"); mrzDocumentRequest.setDateOfExpiry("test"); mrzDocumentRequest.setDocumentNumber("dfdf"); when(rdaClient.startSession(anyString(), anyString(), any(), any(), any())).thenReturn(rdaResponse);  //when AppResponse appResponse = mrzDocumentInitialized.process(mockedFlow, mrzDocumentRequest); //then "<AssertPlaceHolder>"; assertEquals(SESSION_ID, ((RdaResponse)appResponse).getSessionId()); assertEquals(RDA_URL, ((RdaResponse)appResponse).getUrl());  }
process(Flow flow, MrzDocumentRequest params) { if(!(params.getDocumentType().equals("PASSPORT") || params.getDocumentType().equals("ID_CARD"))){ return new NokResponse(); } Map<String, String> travelDocument = Map.of( "documentNumber", params.getDocumentNumber(), "dateOfBirth", params.getDateOfBirth(), "dateOfExpiry", params.getDateOfExpiry());  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED");  Map<String, String> rdaSession = rdaClient.startSession( returnUrl.concat("/iapi/rda/confirm"), appSession.getId(), params.getIpAddress(), List.of(travelDocument), List.of());  if(rdaSession.isEmpty()){ digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret")); appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING_FOREIGN"); appSession.setRdaDocumentType(params.getDocumentType()); appSession.setRdaDocumentNumber(params.getDocumentNumber()); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertEquals("SCANNING_FOREIGN", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); ( ), appResponse )

[*] target: assertEquals("SCANNING_FOREIGN", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, new NokResponse(); )

[*] target: assertEquals("SCANNING_FOREIGN", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse();, appResponse )

[*] target: assertEquals("SCANNING_FOREIGN", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, new NokResponse(); ( ) )

[*] target: assertEquals("SCANNING_FOREIGN", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClientMock.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(digidClientMock.authenticate(anyString(), anyString())).thenReturn(responseDigidClient); when(appAuthenticatorServiceMock.countByAccountIdAndInstanceIdNot(anyLong(), anyString())).thenReturn(2); when(appAuthenticatorServiceMock.createAuthenticator(anyLong(), anyString(), anyString(), anyString())).thenReturn(appAuthenticator);  AppResponse result = passwordConfirmed.process(flow, request);  "<AssertPlaceHolder>"; assertNotNull(result);  ActivationUsernamePasswordResponse response = (ActivationUsernamePasswordResponse) result; assertNotNull(response); assertEquals("password", response.getActivationMethod()); assertNotNull(response.getAppSessionId());  }
process(Flow flow, ActivationUsernamePasswordRequest body) throws SharedServiceClientException { digidClient.remoteLog("1088", Map.of(lowerUnderscore(HIDDEN), true)); var result = digidClient.authenticate(body.getUsername(), body.getPassword());  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = (String) result.get(ERROR);  if (ERROR_DECEASED.equals(error)) { digidClient.remoteLog("1482", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)), "hidden", true)); } else if (ERROR_NO_BSN.equals(error)) { digidClient.remoteLog("1074", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)))); } else if (ERROR_ACCOUNT_BLOCKED.equals(error)) { return new PasswordConfirmedResponse((String) result.get(ERROR), result); } return new NokResponse((String) result.get(ERROR)); }  return Optional.ofNullable(validateAmountOfApps(Long.valueOf((Integer) result.get(lowerUnderscore(ACCOUNT_ID))), body)) .orElseGet(() -> getActivationUsernamePasswordResponse(body, result));  }
[*] target: assertTrue(result instanceof ActivationUsernamePasswordResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. nfcConfirmedResponse((String ) )

[*] target: assertTrue(result instanceof ActivationUsernamePasswordResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. neccess. && && ) )

[*] target: assertTrue(result instanceof ActivationUsernamePasswordResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. neccessary ) )

[*] target: assertTrue(result instanceof ActivationUsernamePasswordResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. neccessarararar. CoreMatchers ) )

[*] target: assertTrue(result instanceof ActivationUsernamePasswordResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { AppAuthenticator leastRecentApp = new AppAuthenticator(); leastRecentApp.setActivatedAt(ZonedDateTime.of(2022, 3, 30, 0, 0, 0, 0, ZoneId.systemDefault())); leastRecentApp.setDeviceName("least-recent-app-name");  when(sharedServiceClientMock.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(2); when(digidClientMock.authenticate(anyString(), anyString())).thenReturn(responseDigidClient); when(appAuthenticatorServiceMock.countByAccountIdAndInstanceIdNot(anyLong(), anyString())).thenReturn(2); when(appAuthenticatorServiceMock.findLeastRecentApp(anyLong())).thenReturn(leastRecentApp);  AppResponse result = passwordConfirmed.process(flow, request);  "<AssertPlaceHolder>"; assertTrue(result instanceof TooManyAppsResponse); TooManyAppsResponse response = (TooManyAppsResponse) result;  assertEquals("NOK", response.getStatus()); assertEquals("30-03-2022", response.getLatestDate()); assertEquals("least-recent-app-name", response.getDeviceName()); }
process(Flow flow, ActivationUsernamePasswordRequest body) throws SharedServiceClientException { digidClient.remoteLog("1088", Map.of(lowerUnderscore(HIDDEN), true)); var result = digidClient.authenticate(body.getUsername(), body.getPassword());  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = (String) result.get(ERROR);  if (ERROR_DECEASED.equals(error)) { digidClient.remoteLog("1482", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)), "hidden", true)); } else if (ERROR_NO_BSN.equals(error)) { digidClient.remoteLog("1074", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)))); } else if (ERROR_ACCOUNT_BLOCKED.equals(error)) { return new PasswordConfirmedResponse((String) result.get(ERROR), result); } return new NokResponse((String) result.get(ERROR)); }  return Optional.ofNullable(validateAmountOfApps(Long.valueOf((Integer) result.get(lowerUnderscore(ACCOUNT_ID))), body)) .orElseGet(() -> getActivationUsernamePasswordResponse(body, result));  }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof MockkResponse((String ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Mock Mock Mock Mock Mock Mock MockIOException ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Mock Mock Mock Mock Mock((String ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Mock Mock Mock Mock Mock Mock Mock Mock MockIOException ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClientMock.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); AppAuthenticator oldApp = new AppAuthenticator(); oldApp.setDeviceName("test_device"); oldApp.setLastSignInAt(ZonedDateTime.now()); when(digidClientMock.authenticate(anyString(), anyString())).thenReturn(responseDigidClient); when(appAuthenticatorServiceMock.countByAccountIdAndInstanceIdNot(anyLong(), anyString())).thenReturn(6); when(appAuthenticatorServiceMock.findLeastRecentApp(anyLong())).thenReturn(oldApp);  AppResponse result = passwordConfirmed.process(flow, request);  "<AssertPlaceHolder>"; assertNotNull(result);  NokResponse response = (NokResponse) result; assertNotNull(response); assertEquals("NOK", response.getStatus()); assertEquals("too_many_active", response.getError()); }
process(Flow flow, ActivationUsernamePasswordRequest body) throws SharedServiceClientException { digidClient.remoteLog("1088", Map.of(lowerUnderscore(HIDDEN), true)); var result = digidClient.authenticate(body.getUsername(), body.getPassword());  if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null ) { final var error = (String) result.get(ERROR);  if (ERROR_DECEASED.equals(error)) { digidClient.remoteLog("1482", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)), "hidden", true)); } else if (ERROR_NO_BSN.equals(error)) { digidClient.remoteLog("1074", Map.of(lowerUnderscore(ACCOUNT_ID), result.get(lowerUnderscore(ACCOUNT_ID)))); } else if (ERROR_ACCOUNT_BLOCKED.equals(error)) { return new PasswordConfirmedResponse((String) result.get(ERROR), result); } return new NokResponse((String) result.get(ERROR)); }  return Optional.ofNullable(validateAmountOfApps(Long.valueOf((Integer) result.get(lowerUnderscore(ACCOUNT_ID))), body)) .orElseGet(() -> getActivationUsernamePasswordResponse(body, result));  }
[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof AppAuthenticator ) )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( oldApp, result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertSame ( oldApp, result )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( result == oldApp ) )

[*] target: assertTrue(result instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processNoDecodedPin() { mockedActivateAppRequest.setMaskedPincode("1234"); when(mockedFlow.setFailedStateAndReturnNOK(any(AppSession.class))).thenReturn(new NokResponse());  AppResponse appResponse = pincodeSet.process(mockedFlow, mockedActivateAppRequest);  "<AssertPlaceHolder>"; }
process(Flow flow, ActivateAppRequest body) { String decodedPin = ChallengeService.decodeMaskedPin(appSession.getIv(), appAuthenticator.getSymmetricKey(), body.getMaskedPincode()); if ((decodedPin == null || !Pattern.compile("\\d{5}").matcher(decodedPin).matches())) { return flow.setFailedStateAndReturnNOK(appSession); } else if (!appAuthenticator.getUserAppId().equals(body.getUserAppId())){ digidClient.remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID) ,appAuthenticator.getAccountId())); return flow.setFailedStateAndReturnNOK(appSession); }  appAuthenticator.setMaskedPin(decodedPin); appAuthenticator.setLastSignInAt(ZonedDateTime.now());  if (!switchService.digidAppSwitchEnabled() ) { digidClient.remoteLog("824", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); throw new SwitchDisabledException(); }  if (flow instanceof RequestAccountAndAppFlow || flow instanceof ActivateAppWithPasswordLetterFlow) { Map<String, String> result = digidClient.finishRegistration(appSession.getRegistrationId(), appSession.getAccountId(), flow.getName()); if (result.get(lowerUnderscore(STATUS)).equals("PENDING") && result.get(lowerUnderscore(ACTIVATION_CODE)) != null && result.get(lowerUnderscore(GELDIGHEIDSTERMIJN)) != null) {  appAuthenticator.setStatus("pending"); appAuthenticator.setActivationCode(result.get(lowerUnderscore(ACTIVATION_CODE))); appAuthenticator.setGeldigheidstermijn(result.get(lowerUnderscore(GELDIGHEIDSTERMIJN))); appAuthenticator.setRequestedAt(ZonedDateTime.now());  return new StatusResponse("PENDING"); } else { return new NokResponse(); } } else { return ((ActivationFlow) flow).activateApp(appAuthenticator, appSession); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. mozilla. io. MockInputStream ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers. is (()); ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

************************************
************************************
[+] input: processNotEqualUserAppId() { mockedActivateAppRequest.setUserAppId(PARAMS_USER_APP_ID + "NOT_EQUAL"); when(mockedFlow.setFailedStateAndReturnNOK(any(AppSession.class))).thenReturn(new NokResponse());  AppResponse appResponse = pincodeSet.process(mockedFlow, mockedActivateAppRequest);  verify(digidClientMock, times(1)).remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppAuthenticator.getAccountId())); "<AssertPlaceHolder>"; }
process(Flow flow, ActivateAppRequest body) { String decodedPin = ChallengeService.decodeMaskedPin(appSession.getIv(), appAuthenticator.getSymmetricKey(), body.getMaskedPincode()); if ((decodedPin == null || !Pattern.compile("\\d{5}").matcher(decodedPin).matches())) { return flow.setFailedStateAndReturnNOK(appSession); } else if (!appAuthenticator.getUserAppId().equals(body.getUserAppId())){ digidClient.remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID) ,appAuthenticator.getAccountId())); return flow.setFailedStateAndReturnNOK(appSession); }  appAuthenticator.setMaskedPin(decodedPin); appAuthenticator.setLastSignInAt(ZonedDateTime.now());  if (!switchService.digidAppSwitchEnabled() ) { digidClient.remoteLog("824", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); throw new SwitchDisabledException(); }  if (flow instanceof RequestAccountAndAppFlow || flow instanceof ActivateAppWithPasswordLetterFlow) { Map<String, String> result = digidClient.finishRegistration(appSession.getRegistrationId(), appSession.getAccountId(), flow.getName()); if (result.get(lowerUnderscore(STATUS)).equals("PENDING") && result.get(lowerUnderscore(ACTIVATION_CODE)) != null && result.get(lowerUnderscore(GELDIGHEIDSTERMIJN)) != null) {  appAuthenticator.setStatus("pending"); appAuthenticator.setActivationCode(result.get(lowerUnderscore(ACTIVATION_CODE))); appAuthenticator.setGeldigheidstermijn(result.get(lowerUnderscore(GELDIGHEIDSTERMIJN))); appAuthenticator.setRequestedAt(ZonedDateTime.now());  return new StatusResponse("PENDING"); } else { return new NokResponse(); } } else { return ((ActivationFlow) flow).activateApp(appAuthenticator, appSession); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertFalse ( ( appResponse instanceof AppResponse ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertFalse ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertFalse ( ( appResponse instanceof Appdata ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processValidPincodeSet() { when(mockedFlow.activateApp(eq(mockedAppAuthenticator), any(AppSession.class))).thenReturn(mockedActivateAppResponse); when(switchService.digidAppSwitchEnabled()).thenReturn(true); AppResponse appResponse = pincodeSet.process(mockedFlow, mockedActivateAppRequest);  verify(mockedFlow, times(1)).activateApp(eq(mockedAppAuthenticator), any(AppSession.class)); "<AssertPlaceHolder>"; assertEquals(APP_AUTH_AUTH_LEVEL, ((ActivateAppResponse)appResponse).getAuthenticationLevel()); }
process(Flow flow, ActivateAppRequest body) { String decodedPin = ChallengeService.decodeMaskedPin(appSession.getIv(), appAuthenticator.getSymmetricKey(), body.getMaskedPincode()); if ((decodedPin == null || !Pattern.compile("\\d{5}").matcher(decodedPin).matches())) { return flow.setFailedStateAndReturnNOK(appSession); } else if (!appAuthenticator.getUserAppId().equals(body.getUserAppId())){ digidClient.remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID) ,appAuthenticator.getAccountId())); return flow.setFailedStateAndReturnNOK(appSession); }  appAuthenticator.setMaskedPin(decodedPin); appAuthenticator.setLastSignInAt(ZonedDateTime.now());  if (!switchService.digidAppSwitchEnabled() ) { digidClient.remoteLog("824", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); throw new SwitchDisabledException(); }  if (flow instanceof RequestAccountAndAppFlow || flow instanceof ActivateAppWithPasswordLetterFlow) { Map<String, String> result = digidClient.finishRegistration(appSession.getRegistrationId(), appSession.getAccountId(), flow.getName()); if (result.get(lowerUnderscore(STATUS)).equals("PENDING") && result.get(lowerUnderscore(ACTIVATION_CODE)) != null && result.get(lowerUnderscore(GELDIGHEIDSTERMIJN)) != null) {  appAuthenticator.setStatus("pending"); appAuthenticator.setActivationCode(result.get(lowerUnderscore(ACTIVATION_CODE))); appAuthenticator.setGeldigheidstermijn(result.get(lowerUnderscore(GELDIGHEIDSTERMIJN))); appAuthenticator.setRequestedAt(ZonedDateTime.now());  return new StatusResponse("PENDING"); } else { return new NokResponse(); } } else { return ((ActivationFlow) flow).activateApp(appAuthenticator, appSession); } }
[*] target: assertTrue(appResponse instanceof ActivateAppResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof ActivateAppResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof ActivateAppResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof ActivateAppResponse)
[-] pred:  org. junit. Assert. assertTrue ( appResponse. isEmpty ( ) )

[*] target: assertTrue(appResponse instanceof ActivateAppResponse)
[-] pred:  org

************************************
************************************
[+] input: processPendingRequestAccountAndAppFlow() { Map<String, String> finishRegistrationResponse = Map.of(lowerUnderscore(STATUS), "PENDING", lowerUnderscore(ACTIVATION_CODE), "abcd", lowerUnderscore(GELDIGHEIDSTERMIJN), "20");  when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(digidClientMock.finishRegistration(TEST_REGISTRATION_ID, TEST_ACCOUNT_ID, RequestAccountAndAppFlow.NAME)).thenReturn(finishRegistrationResponse); AppResponse appResponse = pincodeSet.process(mockedRequestFlow, mockedActivateAppRequest);  "<AssertPlaceHolder>"; assertEquals("pending", mockedAppAuthenticator.getStatus()); }
process(Flow flow, ActivateAppRequest body) { String decodedPin = ChallengeService.decodeMaskedPin(appSession.getIv(), appAuthenticator.getSymmetricKey(), body.getMaskedPincode()); if ((decodedPin == null || !Pattern.compile("\\d{5}").matcher(decodedPin).matches())) { return flow.setFailedStateAndReturnNOK(appSession); } else if (!appAuthenticator.getUserAppId().equals(body.getUserAppId())){ digidClient.remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID) ,appAuthenticator.getAccountId())); return flow.setFailedStateAndReturnNOK(appSession); }  appAuthenticator.setMaskedPin(decodedPin); appAuthenticator.setLastSignInAt(ZonedDateTime.now());  if (!switchService.digidAppSwitchEnabled() ) { digidClient.remoteLog("824", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); throw new SwitchDisabledException(); }  if (flow instanceof RequestAccountAndAppFlow || flow instanceof ActivateAppWithPasswordLetterFlow) { Map<String, String> result = digidClient.finishRegistration(appSession.getRegistrationId(), appSession.getAccountId(), flow.getName()); if (result.get(lowerUnderscore(STATUS)).equals("PENDING") && result.get(lowerUnderscore(ACTIVATION_CODE)) != null && result.get(lowerUnderscore(GELDIGHEIDSTERMIJN)) != null) {  appAuthenticator.setStatus("pending"); appAuthenticator.setActivationCode(result.get(lowerUnderscore(ACTIVATION_CODE))); appAuthenticator.setGeldigheidstermijn(result.get(lowerUnderscore(GELDIGHEIDSTERMIJN))); appAuthenticator.setRequestedAt(ZonedDateTime.now());  return new StatusResponse("PENDING"); } else { return new NokResponse(); } } else { return ((ActivationFlow) flow).activateApp(appAuthenticator, appSession); } }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse == null ) )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKRequestAccountAndAppFlow() { Map<String, String> finishRegistrationResponse = Map.of(lowerUnderscore(STATUS), "ERROR");  when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(digidClientMock.finishRegistration(TEST_REGISTRATION_ID, TEST_ACCOUNT_ID, RequestAccountAndAppFlow.NAME)).thenReturn(finishRegistrationResponse); AppResponse appResponse = pincodeSet.process(mockedRequestFlow, mockedActivateAppRequest);  "<AssertPlaceHolder>"; assertEquals("initial", mockedAppAuthenticator.getStatus()); }
process(Flow flow, ActivateAppRequest body) { String decodedPin = ChallengeService.decodeMaskedPin(appSession.getIv(), appAuthenticator.getSymmetricKey(), body.getMaskedPincode()); if ((decodedPin == null || !Pattern.compile("\\d{5}").matcher(decodedPin).matches())) { return flow.setFailedStateAndReturnNOK(appSession); } else if (!appAuthenticator.getUserAppId().equals(body.getUserAppId())){ digidClient.remoteLog("754", Map.of(lowerUnderscore(ACCOUNT_ID) ,appAuthenticator.getAccountId())); return flow.setFailedStateAndReturnNOK(appSession); }  appAuthenticator.setMaskedPin(decodedPin); appAuthenticator.setLastSignInAt(ZonedDateTime.now());  if (!switchService.digidAppSwitchEnabled() ) { digidClient.remoteLog("824", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); throw new SwitchDisabledException(); }  if (flow instanceof RequestAccountAndAppFlow || flow instanceof ActivateAppWithPasswordLetterFlow) { Map<String, String> result = digidClient.finishRegistration(appSession.getRegistrationId(), appSession.getAccountId(), flow.getName()); if (result.get(lowerUnderscore(STATUS)).equals("PENDING") && result.get(lowerUnderscore(ACTIVATION_CODE)) != null && result.get(lowerUnderscore(GELDIGHEIDSTERMIJN)) != null) {  appAuthenticator.setStatus("pending"); appAuthenticator.setActivationCode(result.get(lowerUnderscore(ACTIVATION_CODE))); appAuthenticator.setGeldigheidstermijn(result.get(lowerUnderscore(GELDIGHEIDSTERMIJN))); appAuthenticator.setRequestedAt(ZonedDateTime.now());  return new StatusResponse("PENDING"); } else { return new NokResponse(); } } else { return ((ActivationFlow) flow).activateApp(appAuthenticator, appSession); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( wfResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( b, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processOKTest() { when(digidClientMock.getAccountRequestGbaStatus(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "OK" ));  AppResponse appResponse = pollBrp.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("OK", ((OkResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { Map<String, Object> result = new HashMap<>(digidClient.getAccountRequestGbaStatus(appSession.getRegistrationId()));  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { setValid(false); // gba check in progress, do not transition to next step yet return new StatusResponse("PENDING"); } else { if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null) { return new PollBrpResponse((String) result.get(ERROR), result); } return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( - 1 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0, 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

************************************
************************************
[+] input: processPendingTest() { when(digidClientMock.getAccountRequestGbaStatus(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "PENDING" ));  AppResponse appResponse = pollBrp.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("PENDING", ((StatusResponse) appResponse).getStatus()); assertFalse(pollBrp.isValid()); }
process(Flow flow, AppSessionRequest request) { Map<String, Object> result = new HashMap<>(digidClient.getAccountRequestGbaStatus(appSession.getRegistrationId()));  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { setValid(false); // gba check in progress, do not transition to next step yet return new StatusResponse("PENDING"); } else { if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null) { return new PollBrpResponse((String) result.get(ERROR), result); } return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  org

[*] target: assertTrue(appResponse instanceof StatusResponse)
[-] pred:  )

************************************
************************************
[+] input: processNOKTest() { when(digidClientMock.getAccountRequestGbaStatus(1337L)).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK" ));  AppResponse appResponse = pollBrp.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((NokResponse) appResponse).getStatus()); }
process(Flow flow, AppSessionRequest request) { Map<String, Object> result = new HashMap<>(digidClient.getAccountRequestGbaStatus(appSession.getRegistrationId()));  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else if (result.get(lowerUnderscore(STATUS)).equals("PENDING")) { setValid(false); // gba check in progress, do not transition to next step yet return new StatusResponse("PENDING"); } else { if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null) { return new PollBrpResponse((String) result.get(ERROR), result); } return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0, 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ( - 1 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processWithBsn() { mockedAppSession.setWithBsn(true);  AppResponse appResponse = rdaChosen.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("1218", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), lowerUnderscore(APP_CODE), "2B5A2", lowerUnderscore(DEVICE_NAME), mockedAppAuthenticator.getDeviceName()));  "<AssertPlaceHolder>"; assertEquals(ActivationMethod.RDA, mockedAppSession.getActivationMethod()); }
process(Flow flow, AppRequest body) { digidClient.remoteLog("1218", getAppDetails());  if (!appSession.getWithBsn()) { digidClient.remoteLog("1345", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse("no_bsn_on_account"); }  appSession.setActivationMethod(ActivationMethod.RDA); // Options: kiosk, upgrade_rda_widchecker, app? // For logging in iapi /confirm from rda server appSession.setRdaAction("app");  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse,(),. process(APP_CODE )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse,(),. process(APP_CODE ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse!= null ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof NokResponse ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processWithoutBsn() { mockedAppSession.setWithBsn(false);  AppResponse appResponse = rdaChosen.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("1218", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), lowerUnderscore(APP_CODE), "2B5A2", lowerUnderscore(DEVICE_NAME), mockedAppAuthenticator.getDeviceName())); verify(digidClientMock, times(1)).remoteLog("1345", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId()));  "<AssertPlaceHolder>"; assertEquals("no_bsn_on_account", ((NokResponse)appResponse).getError()); }
process(Flow flow, AppRequest body) { digidClient.remoteLog("1218", getAppDetails());  if (!appSession.getWithBsn()) { digidClient.remoteLog("1345", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId())); return new NokResponse("no_bsn_on_account"); }  appSession.setActivationMethod(ActivationMethod.RDA); // Options: kiosk, upgrade_rda_widchecker, app? // For logging in iapi /confirm from rda server appSession.setRdaAction("app");  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse!= null ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( appResponse. process(Flow flow, AppResponse ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  )

************************************
************************************
[+] input: processWidstatusValid() { when(digidClientMock.getWidstatus(mockedAppSession.getWidRequestId())).thenReturn(validDigidClientResponse); when(rdaClientMock.startSession(anyString(), anyString(), any(), any(), any())).thenReturn(rdaResponse);  AppResponse appResponse = rdaPolling.process(mockedFlow, mockedAbstractAppRequest);  verify(digidClientMock, times(1)).remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), HIDDEN, true)); verify(digidClientMock, times(1)).remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), mockedAppSession.getAccountId(), HIDDEN, true));  "<AssertPlaceHolder>"; assertEquals(SESSION_ID, ((RdaResponse)appResponse).getSessionId()); assertEquals(RDA_URL, ((RdaResponse)appResponse).getUrl()); }
process(Flow flow, AppRequest params) { var result = digidClient.getWidstatus(appSession.getWidRequestId());  switch(result.get("status").toString()){ case "NO_DOCUMENTS": appSession.setRdaSessionStatus("NO_DOCUMENTS"); appSession.setBrpIdentifier(result.get("brp_identifier").toString()); appSessionService.save(appSession); return new StatusResponse("NO_DOCUMENTS"); case "PENDING": setValid(false); // Do not progress to next state return new StatusResponse("PENDING"); case "NOK": return new NokResponse(); }  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED"); Map<String, String> rdaSession = rdaClient.startSession(returnUrl + "/iapi/rda/confirm", appSession.getId(), params.getIpAddress(), result.get("travel_documents"), result.get("driving_licences"));  if (rdaSession.isEmpty()) { digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret"));  appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING"); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertEquals("SCANNING", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertEquals("SCANNING", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse!= null ) )

[*] target: assertEquals("SCANNING", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals("SCANNING", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( new org. NokResponse(); ( appResponse ), appResponse )

[*] target: assertEquals("SCANNING", mockedAppSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); ( appResponse ), appResponse )

************************************
************************************
[+] input: processWidstatusInvalid() { when(digidClientMock.getWidstatus(mockedAppSession.getWidRequestId())).thenReturn(invalidDigidClientResponse);  AppResponse appResponse = rdaPolling.process(mockedFlow, mockedAbstractAppRequest);  "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest params) { var result = digidClient.getWidstatus(appSession.getWidRequestId());  switch(result.get("status").toString()){ case "NO_DOCUMENTS": appSession.setRdaSessionStatus("NO_DOCUMENTS"); appSession.setBrpIdentifier(result.get("brp_identifier").toString()); appSessionService.save(appSession); return new StatusResponse("NO_DOCUMENTS"); case "PENDING": setValid(false); // Do not progress to next state return new StatusResponse("PENDING"); case "NOK": return new NokResponse(); }  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED"); Map<String, String> rdaSession = rdaClient.startSession(returnUrl + "/iapi/rda/confirm", appSession.getId(), params.getIpAddress(), result.get("travel_documents"), result.get("driving_licences"));  if (rdaSession.isEmpty()) { digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret"));  appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING"); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertEquals("NOK", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertEquals("NOK", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals("NOK", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertEquals("NOK", ((StatusResponse)appResponse).getStatus())
[-] pred:  org

[*] target: assertEquals("NOK", ((StatusResponse)appResponse).getStatus())
[-] pred:  )

************************************
************************************
[+] input: processWidstatusNoDocuments() { when(digidClientMock.getWidstatus(mockedAppSession.getWidRequestId())).thenReturn(invalidDigidClientResponseNoDoc);  AppResponse appResponse = rdaPolling.process(mockedFlow, mockedAbstractAppRequest);  "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest params) { var result = digidClient.getWidstatus(appSession.getWidRequestId());  switch(result.get("status").toString()){ case "NO_DOCUMENTS": appSession.setRdaSessionStatus("NO_DOCUMENTS"); appSession.setBrpIdentifier(result.get("brp_identifier").toString()); appSessionService.save(appSession); return new StatusResponse("NO_DOCUMENTS"); case "PENDING": setValid(false); // Do not progress to next state return new StatusResponse("PENDING"); case "NOK": return new NokResponse(); }  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED"); Map<String, String> rdaSession = rdaClient.startSession(returnUrl + "/iapi/rda/confirm", appSession.getId(), params.getIpAddress(), result.get("travel_documents"), result.get("driving_licences"));  if (rdaSession.isEmpty()) { digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret"));  appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING"); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertEquals("NO_DOCUMENTS", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertEquals("NO_DOCUMENTS", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals("NO_DOCUMENTS", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. hadoop. util. Context ) )

[*] target: assertEquals("NO_DOCUMENTS", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals("NO_DOCUMENTS", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. hadoop. util. Disk ) )

************************************
************************************
[+] input: processWidstatusPending() { when(digidClientMock.getWidstatus(mockedAppSession.getWidRequestId())).thenReturn(invalidDigidClientResponsePending);  AppResponse appResponse = rdaPolling.process(mockedFlow, mockedAbstractAppRequest);  "<AssertPlaceHolder>"; }
process(Flow flow, AppRequest params) { var result = digidClient.getWidstatus(appSession.getWidRequestId());  switch(result.get("status").toString()){ case "NO_DOCUMENTS": appSession.setRdaSessionStatus("NO_DOCUMENTS"); appSession.setBrpIdentifier(result.get("brp_identifier").toString()); appSessionService.save(appSession); return new StatusResponse("NO_DOCUMENTS"); case "PENDING": setValid(false); // Do not progress to next state return new StatusResponse("PENDING"); case "NOK": return new NokResponse(); }  digidClient.remoteLog("867", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); appSession.setRdaSessionStatus("DOCUMENTS_RECEIVED"); Map<String, String> rdaSession = rdaClient.startSession(returnUrl + "/iapi/rda/confirm", appSession.getId(), params.getIpAddress(), result.get("travel_documents"), result.get("driving_licences"));  if (rdaSession.isEmpty()) { digidClient.remoteLog("873", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true)); return new NokResponse(); } appSession.setConfirmSecret(rdaSession.get("confirmSecret"));  appSession.setUrl(rdaSession.get("url")); appSession.setRdaSessionId(rdaSession.get("sessionId")); appSession.setRdaSessionTimeoutInSeconds(rdaSession.get("expiration")); appSession.setRdaSessionStatus("SCANNING"); digidClient.remoteLog("868", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), HIDDEN, true));  return new RdaResponse(appSession.getUrl(), appSession.getRdaSessionId()); }
[*] target: assertEquals("PENDING", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertEquals("PENDING", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertEquals("PENDING", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals("PENDING", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. hadoop. util. HashSet ) )

[*] target: assertEquals("PENDING", ((StatusResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertSame ( appResponse, root )

************************************
************************************
[+] input: processOKTest() { ReplaceAccountRequest replaceAccountRequest = new ReplaceAccountRequest(); replaceAccountRequest.setReplaceAccount(true);  when(digidClientMock.replaceExistingAccount(1337L, true, "NL")).thenReturn(Map.of( lowerUnderscore(STATUS), "OK", lowerUnderscore(ACCOUNT_ID), "2" ));  AppResponse appResponse = replaceExistingAccount.process(flowMock, replaceAccountRequest);  "<AssertPlaceHolder>"; assertTrue(appResponse instanceof OkResponse); assertEquals("OK", ((OkResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceAccountRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingAccount(appSession.getRegistrationId(), request.isReplaceAccount(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertEquals(2, replaceExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof instanceof

[*] target: assertEquals(2, replaceExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof instanceof instanceof

[*] target: assertEquals(2, replaceExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof instanceof instanceof

[*] target: assertEquals(2, replaceExistingAccount.getAppSession().getAccountId())
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertEquals(2, replaceExistingAccount.getAppSession().getAccountId())
[-] pred:  org

************************************
************************************
[+] input: processNOKMissingRegistrationTest() { replaceExistingAccount.getAppSession().setRegistrationId(null);  AppResponse appResponse = replaceExistingAccount.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((NokResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceAccountRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingAccount(appSession.getRegistrationId(), request.isReplaceAccount(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); ( (NokResponse ) + 1 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang3. StringUtils ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKResponseTest() { ReplaceAccountRequest replaceAccountRequest = new ReplaceAccountRequest(); replaceAccountRequest.setReplaceAccount(true);  when(digidClientMock.replaceExistingAccount(1337L, true, "NL")).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK" ));  AppResponse appResponse = replaceExistingAccount.process(flowMock, replaceAccountRequest);  "<AssertPlaceHolder>"; assertEquals("NOK", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceAccountRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingAccount(appSession.getRegistrationId(), request.isReplaceAccount(), appSession.getLanguage());  if (result.get(lowerUnderscore(STATUS)).equals("OK") && result.get(lowerUnderscore(ACCOUNT_ID)) != null) { appSession.setAccountId(Long.valueOf(result.get(lowerUnderscore(ACCOUNT_ID)))); return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, new AppResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, applicationResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processOKTest() { ReplaceApplicationRequest replaceApplicationRequest = new ReplaceApplicationRequest(); replaceApplicationRequest.setReplaceApplication(true);  when(digidClientMock.replaceExistingApplication(1337L, true)).thenReturn(Map.of( lowerUnderscore(STATUS), "OK" ));  AppResponse appResponse = replaceExistingApplication.process(flowMock, replaceApplicationRequest);  "<AssertPlaceHolder>"; assertEquals("OK", ((OkResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceApplicationRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingApplication(appSession.getRegistrationId(), request.isReplaceApplication());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); (

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKMissingRegistrationTest() { replaceExistingApplication.getAppSession().setRegistrationId(null);  AppResponse appResponse = replaceExistingApplication.process(flowMock, null);  "<AssertPlaceHolder>"; assertEquals("NOK", ((NokResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceApplicationRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingApplication(appSession.getRegistrationId(), request.isReplaceApplication());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( null ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( null, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

************************************
************************************
[+] input: processNOKResponseTest() { ReplaceApplicationRequest replaceApplicationRequest = new ReplaceApplicationRequest(); replaceApplicationRequest.setReplaceApplication(true);  when(digidClientMock.replaceExistingApplication(1337L, true)).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK" ));  AppResponse appResponse = replaceExistingApplication.process(flowMock, replaceApplicationRequest);  "<AssertPlaceHolder>"; assertEquals("NOK", ((StatusResponse) appResponse).getStatus()); }
process(Flow flow, ReplaceApplicationRequest request) { if (appSession.getRegistrationId() == null) { return new NokResponse(); }  Map<String, String> result = digidClient.replaceExistingApplication(appSession.getRegistrationId(), request.isReplaceApplication());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { return new OkResponse(); } else { return new NokResponse(); } }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); (

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(true);  rsPollAppApplicationResult.setAppSession(createAppSession(ApplyForAppAtRequestStationFlow.NAME, State.RS_APP_APPLICATION_STARTED, "PENDING"));  mockedRsPollAppApplicationResultRequest = new RsPollAppApplicationResultRequest(); mockedRsPollAppApplicationResultRequest.setActivationCode(APP_ACTIVATION_CODE); mockedRsPollAppApplicationResultRequest.setRemoveOldApp("true");  AppResponse appResponse = rsPollAppApplicationResult.process(mockedApplyForAppAtRequestStationFlow, mockedRsPollAppApplicationResultRequest);  "<AssertPlaceHolder>"; assertEquals(PENDING, rsPollAppApplicationResult.getAppSession().getActivationStatus()); assertTrue(appResponse instanceof RsPollAppApplicationResultResponse); assertEquals(PENDING,((RsPollAppApplicationResultResponse) appResponse).getStatus()); assertEquals(USER_APP_ID,((RsPollAppApplicationResultResponse) appResponse).getUserAppId()); }
process(Flow flow, RsPollAppApplicationResultRequest request) throws SharedServiceClientException {  checkSwitchesEnabled();  final String activationStatus = appSession.getActivationStatus(); final Long accountId = appSession.getAccountId(); final String userAppId = appSession.getUserAppId(); final boolean removeOldApp = request.getRemoveOldApp().equals("true"); String status;  int maxAppsPerUser = sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker");  appSession.setRemoveOldApp(removeOldApp);  if (TOO_MANY_APPS.equals(activationStatus) && !removeOldApp) { AppAuthenticator leastRecentApp = appAuthenticatorService.findLeastRecentApp(accountId); return new TooManyAppsResponse("too_many_active", maxAppsPerUser, leastRecentApp.getDeviceName(), leastRecentApp.getLastSignInOrActivatedAtOrCreatedAt().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))); }  status = TOO_MANY_APPS.equals(activationStatus) && removeOldApp ? OK : activationStatus;  if (!status.equals(OK)) { setValid(false); }  return new RsPollAppApplicationResultResponse(status, userAppId); }
[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof TooManyAppsResponse ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 5, appResponse. size ( ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof TooManyAppApplicationResult2 ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof TooManyAppApplicationResultResponse ) )

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(true);  rsPollAppApplicationResult.setAppSession(createAppSession(ApplyForAppAtRequestStationFlow.NAME, State.RS_APP_APPLICATION_STARTED, "OK"));  mockedRsPollAppApplicationResultRequest = new RsPollAppApplicationResultRequest(); mockedRsPollAppApplicationResultRequest.setActivationCode(APP_ACTIVATION_CODE); mockedRsPollAppApplicationResultRequest.setRemoveOldApp("false");  AppResponse appResponse = rsPollAppApplicationResult.process(mockedApplyForAppAtRequestStationFlow, mockedRsPollAppApplicationResultRequest);  "<AssertPlaceHolder>"; assertEquals(OK, rsPollAppApplicationResult.getAppSession().getActivationStatus()); assertTrue(appResponse instanceof RsPollAppApplicationResultResponse); assertEquals(OK,((RsPollAppApplicationResultResponse) appResponse).getStatus()); assertEquals(USER_APP_ID,((RsPollAppApplicationResultResponse) appResponse).getUserAppId()); }
process(Flow flow, RsPollAppApplicationResultRequest request) throws SharedServiceClientException {  checkSwitchesEnabled();  final String activationStatus = appSession.getActivationStatus(); final Long accountId = appSession.getAccountId(); final String userAppId = appSession.getUserAppId(); final boolean removeOldApp = request.getRemoveOldApp().equals("true"); String status;  int maxAppsPerUser = sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker");  appSession.setRemoveOldApp(removeOldApp);  if (TOO_MANY_APPS.equals(activationStatus) && !removeOldApp) { AppAuthenticator leastRecentApp = appAuthenticatorService.findLeastRecentApp(accountId); return new TooManyAppsResponse("too_many_active", maxAppsPerUser, leastRecentApp.getDeviceName(), leastRecentApp.getLastSignInOrActivatedAtOrCreatedAt().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))); }  status = TOO_MANY_APPS.equals(activationStatus) && removeOldApp ? OK : activationStatus;  if (!status.equals(OK)) { setValid(false); }  return new RsPollAppApplicationResultResponse(status, userAppId); }
[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 15, appResponse. size ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. lang. Object ( ), appResponse )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 5, appResponse. size ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(true);  rsPollAppApplicationResult.setAppSession(createAppSession(ApplyForAppAtRequestStationFlow.NAME, State.RS_APP_APPLICATION_STARTED, TOO_MANY_APPS));  mockedRsPollAppApplicationResultRequest = new RsPollAppApplicationResultRequest(); mockedRsPollAppApplicationResultRequest.setActivationCode(APP_ACTIVATION_CODE); mockedRsPollAppApplicationResultRequest.setRemoveOldApp("true");  AppResponse appResponse = rsPollAppApplicationResult.process(mockedApplyForAppAtRequestStationFlow, mockedRsPollAppApplicationResultRequest);  "<AssertPlaceHolder>"; assertEquals(TOO_MANY_APPS, rsPollAppApplicationResult.getAppSession().getActivationStatus()); assertTrue(appResponse instanceof RsPollAppApplicationResultResponse); assertEquals(OK,((RsPollAppApplicationResultResponse) appResponse).getStatus()); assertEquals(USER_APP_ID,((RsPollAppApplicationResultResponse) appResponse).getUserAppId()); }
process(Flow flow, RsPollAppApplicationResultRequest request) throws SharedServiceClientException {  checkSwitchesEnabled();  final String activationStatus = appSession.getActivationStatus(); final Long accountId = appSession.getAccountId(); final String userAppId = appSession.getUserAppId(); final boolean removeOldApp = request.getRemoveOldApp().equals("true"); String status;  int maxAppsPerUser = sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker");  appSession.setRemoveOldApp(removeOldApp);  if (TOO_MANY_APPS.equals(activationStatus) && !removeOldApp) { AppAuthenticator leastRecentApp = appAuthenticatorService.findLeastRecentApp(accountId); return new TooManyAppsResponse("too_many_active", maxAppsPerUser, leastRecentApp.getDeviceName(), leastRecentApp.getLastSignInOrActivatedAtOrCreatedAt().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))); }  status = TOO_MANY_APPS.equals(activationStatus) && removeOldApp ? OK : activationStatus;  if (!status.equals(OK)) { setValid(false); }  return new RsPollAppApplicationResultResponse(status, userAppId); }
[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. getAge ( ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. numberOfRows ( ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. size ( ) )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( most, appResponse )

[*] target: assertEquals(true, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(true);  rsPollAppApplicationResult.setAppSession(createAppSession(ApplyForAppAtRequestStationFlow.NAME, State.RS_APP_APPLICATION_STARTED, "TOO_MANY_APPS"));  AppAuthenticator mockedAppAuthenticator = new AppAuthenticator(); mockedAppAuthenticator.setAccountId(ACCOUNT_1); mockedAppAuthenticator.setDeviceName(DEVICENAME); ZonedDateTime lastSignInAt = ZonedDateTime.now(); mockedAppAuthenticator.setLastSignInAt(lastSignInAt); when(mockAppAuthenticatorService.findLeastRecentApp(ACCOUNT_1)).thenReturn(mockedAppAuthenticator);  mockedRsPollAppApplicationResultRequest = new RsPollAppApplicationResultRequest(); mockedRsPollAppApplicationResultRequest.setActivationCode(APP_ACTIVATION_CODE); mockedRsPollAppApplicationResultRequest.setRemoveOldApp("false");  AppResponse appResponse = rsPollAppApplicationResult.process(mockedApplyForAppAtRequestStationFlow, mockedRsPollAppApplicationResultRequest);  "<AssertPlaceHolder>"; assertEquals(TOO_MANY_APPS, rsPollAppApplicationResult.getAppSession().getActivationStatus()); assertTrue(appResponse instanceof TooManyAppsResponse); assertEquals(NOK,((TooManyAppsResponse) appResponse).getStatus()); assertEquals(TOO_MANY_ACTIVE,((TooManyAppsResponse) appResponse).getError()); assertEquals(DEVICENAME,((TooManyAppsResponse) appResponse).getDeviceName()); assertEquals(5,((TooManyAppsResponse) appResponse).getMaxAmount()); assertEquals(lastSignInAt.toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), ((TooManyAppsResponse) appResponse).getLatestDate()); }
process(Flow flow, RsPollAppApplicationResultRequest request) throws SharedServiceClientException {  checkSwitchesEnabled();  final String activationStatus = appSession.getActivationStatus(); final Long accountId = appSession.getAccountId(); final String userAppId = appSession.getUserAppId(); final boolean removeOldApp = request.getRemoveOldApp().equals("true"); String status;  int maxAppsPerUser = sharedServiceClient.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker");  appSession.setRemoveOldApp(removeOldApp);  if (TOO_MANY_APPS.equals(activationStatus) && !removeOldApp) { AppAuthenticator leastRecentApp = appAuthenticatorService.findLeastRecentApp(accountId); return new TooManyAppsResponse("too_many_active", maxAppsPerUser, leastRecentApp.getDeviceName(), leastRecentApp.getLastSignInOrActivatedAtOrCreatedAt().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))); }  status = TOO_MANY_APPS.equals(activationStatus) && removeOldApp ? OK : activationStatus;  if (!status.equals(OK)) { setValid(false); }  return new RsPollAppApplicationResultResponse(status, userAppId); }
[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. size ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. receive ( 0L ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. numberOfRest ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org. junit. Assert. assertEquals ( 0, appResponse. numberOfLong ( ) )

[*] target: assertEquals(false, rsPollAppApplicationResult.getAppSession().isRemoveOldApp())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(sharedServiceClient.getSSConfigLong("RvIG-Aanvraagstation_session_expiration")).thenReturn(15L); when(switchService.digidAppSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(true);  mockedRsStartAppApplicationRequest = new RsStartAppApplicationRequest(); mockedRsStartAppApplicationRequest.setAuthenticate("false"); mockedRsStartAppApplicationRequest.setUsername(USER_NAME); mockedRsStartAppApplicationRequest.setPassword(PASSWORD); mockedRsStartAppApplicationRequest.setInstanceId(INSTANCE_ID); mockedRsStartAppApplicationRequest.setDeviceName(DEVICENAME);  AppResponse appResponse = rsStartAppApplication.process(mockedApplyForAppAtRequestStationFlow, mockedRsStartAppApplicationRequest);  verify(digidClient, times(1)).remoteLog("1089", Map.of(lowerUnderscore(APP_CODE), INSTANCE_ID.substring(0,6), lowerUnderscore(DEVICE_NAME), DEVICENAME, lowerUnderscore(HIDDEN), true)); "<AssertPlaceHolder>"; assertNull(((RsStartAppApplicationResponse) appResponse).getLb()); assertTrue(((RsStartAppApplicationResponse) appResponse).getActivationCode().startsWith("R")); }
process(Flow flow, RsStartAppApplicationRequest request) throws SharedServiceClientException {  checkSwitchesEnabled();  long appSessionExpirationInMinutes = sharedServiceClient.getSSConfigLong("Geldigheidstermijn_AppActivatieCode_RvIG-Aanvraagstation_gemeente-balie"); appSession = new AppSession(appSessionExpirationInMinutes * 60);  digidClient.remoteLog("1409");  boolean authenticated = false; if (request.getAuthenticate().equals("true")) { Map<String, Object> result = digidClient.authenticateAccount(request.getUsername(), request.getPassword());  if (result.get(lowerUnderscore(STATUS)).equals("OK")) { authenticated = true; appSession.setAccountId(Long.valueOf((Integer) result.get(lowerUnderscore(ACCOUNT_ID)))); } else if (result.get(lowerUnderscore(STATUS)).equals("NOK") && result.get(ERROR) != null) { String error = (String) result.get("error"); return new NokResponse(error); } }  final String appActivationCode = getNewlyGenerateAppActivationCode(); final String user_app_id = UUID.randomUUID().toString();  appSession.setFlow((ApplyForAppAtRequestStationFlow.NAME)); appSession.setState(State.INITIALIZED.name()); appSession.setActivationMethod(ActivationMethod.RS); appSession.setAuthenticated(authenticated); appSession.setAuthenticationLevel("25"); appSession.setInstanceId(request.getInstanceId()); appSession.setDeviceName(request.getDeviceName()); appSession.setActivationStatus("PENDING"); appSession.setUserAppId(user_app_id); appSession.setAppActivationCode(appActivationCode);  if (!authenticated) { digidClient.remoteLog("1089", Map.of("app_code", request.getInstanceId().substring(0,6), "device_name", request.getDeviceName(), lowerUnderscore(HIDDEN), true)); }  // lb is not used anymore but the api, must remain the same therefore lb is always null. return new RsStartAppApplicationResponse(appSession.getId(), null, Instant.now().getEpochSecond(), appActivationCode ); }
[*] target: assertTrue(appResponse instanceof RsStartAppApplicationResponse)
[-] pred:  org. junit. Assert. assertSame ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof RsStartAppApplicationResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof RsStartAppApplicationResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof RsStartAppApplicationResponse)
[-] pred:  org. junit )

[*] target: assertTrue(appResponse instanceof RsStartAppApplicationResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { AppAuthenticator appAuthenticatorMock = new AppAuthenticator(); appAuthenticatorMock.setAccountId(ACCOUNT_ID); appAuthenticatorMock.setDeviceName(mockedSessionDataRequest.getDeviceName()); appAuthenticatorMock.setInstanceId(mockedSessionDataRequest.getInstanceId()); appAuthenticatorMock.setIssuerType(ACTIVATION_METHOD_LETTER); appAuthenticatorMock.setUserAppId(APP_AUTHENTICATOR_USER_APP_ID);  when(appAuthenticatorService.countByAccountIdAndInstanceIdNot(ACCOUNT_ID, SESSION_DATA_REQUEST_INSTANCE_ID)).thenReturn(0); when(appAuthenticatorService.createAuthenticator(ACCOUNT_ID, mockedSessionDataRequest.getDeviceName(), mockedSessionDataRequest.getInstanceId(), ACTIVATION_METHOD_LETTER)).thenReturn(appAuthenticatorMock);  AppResponse appResponse = sessionConfirmed.process(mock(RequestAccountAndAppFlow.class), mockedSessionDataRequest);  AppAuthenticator createdAppAuthenticator = sessionConfirmed.getAppAuthenticator(); "<AssertPlaceHolder>"; assertEquals(DEVICE_NAME, createdAppAuthenticator.getDeviceName()); assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, createdAppAuthenticator.getInstanceId()); assertEquals(ACTIVATION_METHOD_LETTER, createdAppAuthenticator.getIssuerType());  assertEquals(createdAppAuthenticator.getUserAppId(), sessionConfirmed.getAppSession().getUserAppId()); assertEquals(createdAppAuthenticator.getInstanceId(), sessionConfirmed.getAppSession().getInstanceId());  assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); assertEquals(APP_AUTHENTICATOR_USER_APP_ID, ((SessionDataResponse)appResponse).getUserAppId()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertEquals(ACCOUNT_ID, createdAppAuthenticator.getAccountId())
[-] pred:  org. junit. Assert. assertEquals ( createdAppAuthenticator, appResponse )

[*] target: assertEquals(ACCOUNT_ID, createdAppAuthenticator.getAccountId())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, createdAppAuthenticator )

[*] target: assertEquals(ACCOUNT_ID, createdAppAuthenticator.getAccountId())
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, createdAppAuthenticator )

[*] target: assertEquals(ACCOUNT_ID, createdAppAuthenticator.getAccountId())
[-] pred:  org

[*] target: assertEquals(ACCOUNT_ID, createdAppAuthenticator.getAccountId())
[-] pred:  )

************************************
************************************
[+] input: SharedServiceClientException { when(appAuthenticatorService.countByAccountIdAndInstanceIdNot(ACCOUNT_ID, SESSION_DATA_REQUEST_INSTANCE_ID)).thenReturn(3); AppAuthenticator authenticator = new AppAuthenticator(); authenticator.setUserAppId(UUID.randomUUID().toString()); authenticator.setAccountId(ACCOUNT_ID); authenticator.setDeviceName(DEVICE_NAME); authenticator.setInstanceId(SESSION_DATA_REQUEST_INSTANCE_ID); authenticator.setIssuerType("digid_app"); authenticator.setSubstantieelActivatedAt(null);  when(appAuthenticatorService.createAuthenticator(ACCOUNT_ID, DEVICE_NAME, SESSION_DATA_REQUEST_INSTANCE_ID, "digid_app", null, null)).thenReturn(authenticator);  AppResponse appResponse = sessionConfirmed.process(mockedActivateAppWithOtherAppFlow, mockedSessionDataRequest);  AppAuthenticator appAuthenticator = sessionConfirmed.getAppAuthenticator();  "<AssertPlaceHolder>"; assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName()); assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, appAuthenticator.getInstanceId()); assertEquals("digid_app", appAuthenticator.getIssuerType()); assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( actionResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { AppAuthenticator oldApp = new AppAuthenticator(); oldApp.setDeviceName("test_device"); oldApp.setLastSignInAt(ZonedDateTime.now());  when(sharedServiceClientMock.getSSConfigInt("Maximum_aantal_DigiD_apps_eindgebruiker")).thenReturn(5); when(appAuthenticatorService.countByAccountIdAndInstanceIdNot(ACCOUNT_ID, SESSION_DATA_REQUEST_INSTANCE_ID)).thenReturn(6); when(appAuthenticatorService.findLeastRecentApp(anyLong())).thenReturn(oldApp);  AppResponse appResponse = sessionConfirmed.process(mockedActivateAppWithOtherAppFlow, mockedSessionDataRequest);  "<AssertPlaceHolder>"; assertEquals(TOO_MANY_ACTIVE, ((TooManyAppsResponse) appResponse).getError()); assertEquals("test_device", ((TooManyAppsResponse) appResponse).getDeviceName()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertTrue(appResponse instanceof TooManyAppsResponse)
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. get2pcpc )

[*] target: assertTrue(appResponse instanceof TooManyAppsResponse)
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. get2pcpcpc )

[*] target: assertTrue(appResponse instanceof TooManyAppsResponse)
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. 2 )

[*] target: assertTrue(appResponse instanceof TooManyAppsResponse)
[-] pred:  org. junit. Assert. assertEquals ( 2, appResponse. get 2 )

[*] target: assertTrue(appResponse instanceof TooManyAppsResponse)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(digidClient.validateSms(ACCOUNT_ID, SMS_CODE, mockedAppSession.getSpoken())).thenReturn(validValidateSmsResult);  AppResponse appResponse = sessionConfirmed.process(mockedActivateAppWithPasswordSmsFlow, mockedSessionDataRequest);  AppAuthenticator appAuthenticator = sessionConfirmed.getAppAuthenticator(); "<AssertPlaceHolder>"; assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, appAuthenticator.getInstanceId()); assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); assertEquals(APP_AUTHENTICATOR_USER_APP_ID, ((SessionDataResponse)appResponse).getUserAppId());  }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( androidResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, applicationAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit, appAuthenticator )

************************************
************************************
[+] input: SharedServiceClientException { when(digidClient.validateSms(ACCOUNT_ID, SMS_CODE, mockedAppSession.getSpoken())).thenReturn(invalidValidateSmsResult);  AppResponse appResponse = sessionConfirmed.process(mockedActivateAppWithPasswordSmsFlow, mockedSessionDataRequest);  "<AssertPlaceHolder>"; assertEquals(ERROR_CODE, ((NokResponse)appResponse).getError()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertEquals(INVALID_RESPONSE_CODE, ((NokResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertEquals ( v2, appResponse )

[*] target: assertEquals(INVALID_RESPONSE_CODE, ((NokResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, appResponse )

[*] target: assertEquals(INVALID_RESPONSE_CODE, ((NokResponse)appResponse).getStatus())
[-] pred:  org. junit. Assert. assertEquals ( root, appResponse )

[*] target: assertEquals(INVALID_RESPONSE_CODE, ((NokResponse)appResponse).getStatus())
[-] pred:  org. junit, appResponse )

[*] target: assertEquals(INVALID_RESPONSE_CODE, ((NokResponse)appResponse).getStatus())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { when(appAuthenticatorService.countByAccountIdAndInstanceIdNot(ACCOUNT_ID, SESSION_DATA_REQUEST_INSTANCE_ID)).thenReturn(3);  AppResponse appResponse = sessionConfirmed.process(mockedActivateAppWithPasswordLetterFlow, mockedSessionDataRequest);  AppAuthenticator appAuthenticator = sessionConfirmed.getAppAuthenticator(); "<AssertPlaceHolder>"; assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, appAuthenticator.getInstanceId()); assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); assertEquals(APP_AUTHENTICATOR_USER_APP_ID, ((SessionDataResponse)appResponse).getUserAppId()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( appResponse, applicationAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( androidResponse, appAuthenticator )

[*] target: assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName())
[-] pred:  org. junit, appAuthenticator )

************************************
************************************
[+] input: SharedServiceClientException { AppAuthenticator authenticator = new AppAuthenticator(); authenticator.setUserAppId(UUID.randomUUID().toString()); authenticator.setAccountId(ACCOUNT_ID); authenticator.setDeviceName(DEVICE_NAME); authenticator.setInstanceId(SESSION_DATA_REQUEST_INSTANCE_ID); authenticator.setIssuerType("letter"); authenticator.setSubstantieelActivatedAt(null);  when(appAuthenticatorService.createAuthenticator(ACCOUNT_ID, DEVICE_NAME, SESSION_DATA_REQUEST_INSTANCE_ID, "letter")).thenReturn(authenticator);  AppResponse appResponse = sessionConfirmed.process(mockedRequestAccountAndAppFlow, mockedSessionDataRequest);  AppAuthenticator appAuthenticator = sessionConfirmed.getAppAuthenticator(); "<AssertPlaceHolder>"; assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName()); assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, appAuthenticator.getInstanceId()); assertEquals("letter", appAuthenticator.getIssuerType()); assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertTrue ( ( appAuthenticator instanceof AppResponse ) )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertSame ( appResponse, appAuthenticator )

[*] target: assertNotSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { AppResponse appResponse = sessionConfirmed.process(mockedUndefinedFlow, mockedSessionDataRequest);  AppAuthenticator appAuthenticator = sessionConfirmed.getAppAuthenticator(); "<AssertPlaceHolder>"; assertEquals(DEVICE_NAME, appAuthenticator.getDeviceName()); assertEquals(SESSION_DATA_REQUEST_INSTANCE_ID, appAuthenticator.getInstanceId()); assertEquals(VALID_RESPONSE_CODE, ((SessionDataResponse)appResponse).getStatus()); assertEquals(APP_AUTHENTICATOR_USER_APP_ID, ((SessionDataResponse)appResponse).getUserAppId()); }
process(Flow flow, SessionDataRequest request) throws SharedServiceClientException {  return validateAmountOfApps(flow, appSession.getAccountId(), request) .orElseGet(() -> validateSms(flow, appSession.getAccountId(), request.getSmscode()) .orElseGet(() -> confirmSession(flow, request))); }
[*] target: assertSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator )

[*] target: assertSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appAuthenticator. 2 )

[*] target: assertSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appAuthenticator )

[*] target: assertSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  org

[*] target: assertSame(mockedAppAuthenticator, appAuthenticator)
[-] pred:  )

************************************
************************************
[+] input: processOKTest() { RequestAccountRequest requestAccountRequest = createRequest(); Long registrationId = 1337L;  when(digidClientMock.createRegistration(requestAccountRequest)).thenReturn(Map.of( lowerUnderscore(STATUS), "OK", lowerUnderscore(REGISTRATION_ID), Math.toIntExact(registrationId) )); when(flowMock.getName()).thenReturn(RequestAccountAndAppFlow.NAME);  AppResponse appResponse = startAccountRequest.process(flowMock, requestAccountRequest);  verify(digidClientMock, times(1)).remoteLog("3"); verify(digidClientMock, times(1)).remoteLog("6", ImmutableMap.of(lowerUnderscore(REGISTRATION_ID), registrationId)); verify(digidClientMock, times(1)).remoteLog("1506", ImmutableMap.of(lowerUnderscore(REGISTRATION_ID), registrationId)); "<AssertPlaceHolder>"; assertNotNull(((AppSessionResponse) appResponse).getAppSessionId()); assertEquals(State.INITIALIZED.name(), startAccountRequest.getAppSession().getState()); assertEquals(RequestAccountAndAppFlow.NAME, startAccountRequest.getAppSession().getFlow()); assertEquals(registrationId, startAccountRequest.getAppSession().getRegistrationId()); assertEquals("NL", startAccountRequest.getAppSession().getLanguage()); assertFalse(startAccountRequest.getAppSession().isNfcSupport()); }
process(Flow flow, RequestAccountRequest request) { digidClient.remoteLog("3");  Map<String, Object> result = digidClient.createRegistration(request);  if (result.get(lowerUnderscore(STATUS)).equals("NOK")) { if (result.get(ERROR) != null) { return new StartAccountRequestNokResponse((String) result.get(ERROR), result); } return new NokResponse(); }  appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setFlow(flow.getName()); appSession.setRegistrationId(Long.valueOf((Integer) result.get(lowerUnderscore(REGISTRATION_ID)))); appSession.setLanguage(request.getLanguage()); appSession.setNfcSupport(request.getNfcSupport()); if (!request.getNfcSupport()) { digidClient.remoteLog("1506", Map.of(lowerUnderscore(REGISTRATION_ID), appSession.getRegistrationId())); }  digidClient.remoteLog("6", Map.of(lowerUnderscore(REGISTRATION_ID), appSession.getRegistrationId()));  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( new StartcityNokResponse ( ), appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( new Start EventTypeNokResponse ( ), appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof Start EventTypeNokResponse ) )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKTest() { RequestAccountRequest requestAccountRequest = createRequest(); String expectedErrorMsg = "error";  when(digidClientMock.createRegistration(requestAccountRequest)).thenReturn(Map.of( lowerUnderscore(STATUS), "NOK", lowerUnderscore(ERROR), expectedErrorMsg ));  AppResponse appResponse = startAccountRequest.process(flowMock, requestAccountRequest);  verify(digidClientMock, times(1)).remoteLog("3");  "<AssertPlaceHolder>"; assertEquals(expectedErrorMsg, ((NokResponse) appResponse).getError()); assertNull(startAccountRequest.getAppSession()); }
process(Flow flow, RequestAccountRequest request) { digidClient.remoteLog("3");  Map<String, Object> result = digidClient.createRegistration(request);  if (result.get(lowerUnderscore(STATUS)).equals("NOK")) { if (result.get(ERROR) != null) { return new StartAccountRequestNokResponse((String) result.get(ERROR), result); } return new NokResponse(); }  appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setFlow(flow.getName()); appSession.setRegistrationId(Long.valueOf((Integer) result.get(lowerUnderscore(REGISTRATION_ID)))); appSession.setLanguage(request.getLanguage()); appSession.setNfcSupport(request.getNfcSupport()); if (!request.getNfcSupport()) { digidClient.remoteLog("1506", Map.of(lowerUnderscore(REGISTRATION_ID), appSession.getRegistrationId())); }  digidClient.remoteLog("6", Map.of(lowerUnderscore(REGISTRATION_ID), appSession.getRegistrationId()));  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new StartcityNokResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new Start Start23NokResponse ( ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new Start EventTypeNokResponse(); ( 0 ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new StartcityNokResponse ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processNOKTest() { var mockedAppSession = new AppSession(); mockedAppSession.setAccountId(1L); mockedAppSession.setUserAppId(USER_APP_ID); mockedAppSession.setId(APP_SESSION_ID);  var mockedAppAuthenticator = new AppAuthenticator(); mockedAppAuthenticator.setUserAppId(USER_APP_ID); mockedAppAuthenticator.setDeviceName(DEVICE_NAME); mockedAppAuthenticator.setInstanceId("test"); mockedAppAuthenticator.setAccountId(2L);  when(appAuthenticatorService.findByUserAppId(USER_APP_ID)).thenReturn(mockedAppAuthenticator); when(appSessionService.getSession(APP_SESSION_ID)).thenReturn(mockedAppSession); when(digidClientMock.getRegistrationByAccount(mockedAppAuthenticator.getAccountId())).thenReturn(requestNOK);  AppResponse appResponse = startActivationWithCode.process(mockedFlow, activationWithCodeRequest());  "<AssertPlaceHolder>"; }
process(Flow flow, ActivationWithCodeRequest body) { var authAppSession = appSessionService.getSession(body.getAuthSessionId());  if (!State.AUTHENTICATED.name().equals(authAppSession.getState())){ return new NokResponse(); }  appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setFlow(body.isReRequestLetter() ? ReApplyActivateActivationCode.NAME : ActivateAccountAndAppFlow.NAME); appSession.setActivationMethod(ActivationMethod.LETTER); appSession.setAction(body.isReRequestLetter() ? "re_request_letter" : "activation_by_letter");  AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(body.getUserAppId());  appSession.setAccountId(appAuthenticator.getAccountId()); appSession.setUserAppId(appAuthenticator.getUserAppId()); appSession.setDeviceName(appAuthenticator.getDeviceName()); appSession.setInstanceId(appAuthenticator.getInstanceId());  Map<String, String> result = digidClient.getRegistrationByAccount(appAuthenticator.getAccountId());  if (!result.get(lowerUnderscore(STATUS)).equals("OK")) return new NokResponse();  var registrationId = result.get(lowerUnderscore(REGISTRATION_ID)); if (registrationId != null) { appSession.setRegistrationId(Long.valueOf(registrationId)); }  appSession.setWithBsn(Boolean.valueOf(result.get("has_bsn")));  digidClient.remoteLog("1089", Map.of( lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); ( var registrationId ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId ), appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse();, appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processOKTest() { var mockedAppSession = new AppSession(); mockedAppSession.setAccountId(1L); mockedAppSession.setUserAppId(USER_APP_ID); mockedAppSession.setId(APP_SESSION_ID); when(appSessionService.getSession(anyString())).thenReturn(mockedAppSession);  when(digidClientMock.getRegistrationByAccount(anyLong())).thenReturn(Map.of( lowerUnderscore(STATUS), "OK", lowerUnderscore(REGISTRATION_ID), "1234" )); mockedAppSession.setRegistrationId(1234L);  AppResponse appResponse = startActivationWithCode.process(mockedFlow, activationWithCodeRequest());  "<AssertPlaceHolder>"; }
process(Flow flow, ActivationWithCodeRequest body) { var authAppSession = appSessionService.getSession(body.getAuthSessionId());  if (!State.AUTHENTICATED.name().equals(authAppSession.getState())){ return new NokResponse(); }  appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setFlow(body.isReRequestLetter() ? ReApplyActivateActivationCode.NAME : ActivateAccountAndAppFlow.NAME); appSession.setActivationMethod(ActivationMethod.LETTER); appSession.setAction(body.isReRequestLetter() ? "re_request_letter" : "activation_by_letter");  AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(body.getUserAppId());  appSession.setAccountId(appAuthenticator.getAccountId()); appSession.setUserAppId(appAuthenticator.getUserAppId()); appSession.setDeviceName(appAuthenticator.getDeviceName()); appSession.setInstanceId(appAuthenticator.getInstanceId());  Map<String, String> result = digidClient.getRegistrationByAccount(appAuthenticator.getAccountId());  if (!result.get(lowerUnderscore(STATUS)).equals("OK")) return new NokResponse();  var registrationId = result.get(lowerUnderscore(REGISTRATION_ID)); if (registrationId != null) { appSession.setRegistrationId(Long.valueOf(registrationId)); }  appSession.setWithBsn(Boolean.valueOf(result.get("has_bsn")));  digidClient.remoteLog("1089", Map.of( lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName()));  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertEquals(1234L, mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId, appResponse )

[*] target: assertEquals(1234L, mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId ), appResponse )

[*] target: assertEquals(1234L, mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId = result.get(citycity_ID intercept )

[*] target: assertEquals(1234L, mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse(); var registrationId = result.get(citycity_ID)); )

[*] target: assertEquals(1234L, mockedAppSession.getRegistrationId())
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

************************************
************************************
[+] input: processTest() { AppResponse appResponse = startActivationWithOtherApp.process(mockedFlow, null);  verify(digidClientMock, times(1)).remoteLog("1365", ImmutableMap.of("", "")); "<AssertPlaceHolder>"; assertEquals(startActivationWithOtherApp.getAppSession().getId(), ((AppSessionResponse)appResponse).getAppSessionId()); assertEquals(ActivationMethod.APP, startActivationWithOtherApp.getAppSession().getActivationMethod()); }
process(Flow flow, AppRequest request) { appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setActivationMethod(ActivationMethod.APP); appSession.setFlow(ActivateAppWithOtherAppFlow.NAME); appSession.setAction("activate_with_app");  digidClient.remoteLog("1365", Map.of("", ""));  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert :: assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org

************************************
************************************
[+] input: processTest() { AppResponse appResponse = startWidCheckerIdCheck.process(mockedFlow, null);  "<AssertPlaceHolder>"; assertEquals(startWidCheckerIdCheck.getAppSession().getId(), ((AppSessionResponse)appResponse).getAppSessionId()); }
process(Flow flow, AppRequest request) { appSession = new AppSession(); appSession.setState(State.INITIALIZED.name()); appSession.setFlow(WidCheckerIdCheckFlow.NAME); appSession.setAction("upgrade_rda_widchecker"); appSession.setRdaAction("upgrade_rda_widchecker");  digidClient.remoteLog("1307", Map.of());  return new AppSessionResponse(appSession.getId(), Instant.now().getEpochSecond()); }
[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( applicationResponse, appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof AppSessionResponse)
[-] pred:  org. junit. Assert. assertEquals ( appResponse, applicationResponse )

************************************
************************************
[+] input: testGetLastSignInOrActivatedAtOrCreatedAt() { var currentDate = ZonedDateTime.now();  var appAuthenticator = new AppAuthenticator(); appAuthenticator.setCreatedAt(currentDate);  "<AssertPlaceHolder>"; }
getLastSignInOrActivatedAtOrCreatedAt() { if (this.getLastSignInAt() != null) { return this.getLastSignInAt(); } else if (this.getActivatedAt() != null) { return this.getActivatedAt(); }  return this.getCreatedAt(); }
[*] target: assertEquals(currentDate, appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLast:9OrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate, appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastProtectOrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate, appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastBootstrapOrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate, appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLast256OrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate, appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastCaretOrActivatedAtOrCreatedAt() )

************************************
************************************
[+] input: testGetLastSignInOrActivatedAtOrCreatedAtWithValidLastSignInAt() { var currentDate = ZonedDateTime.now();  var appAuthenticator = new AppAuthenticator(); appAuthenticator.setLastSignInAt(currentDate.minusDays(1)); appAuthenticator.setActivatedAt(currentDate.minusDays(2)); appAuthenticator.setCreatedAt(currentDate);  "<AssertPlaceHolder>"; }
getLastSignInOrActivatedAtOrCreatedAt() { if (this.getLastSignInAt() != null) { return this.getLastSignInAt(); } else if (this.getActivatedAt() != null) { return this.getActivatedAt(); }  return this.getCreatedAt(); }
[*] target: assertEquals(currentDate.minusDays(1), appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLast:9OrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate.minusDays(1), appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastProtectOrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate.minusDays(1), appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastBootstrapOrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate.minusDays(1), appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLastCaretOrActivatedAtOrCreatedAt() )

[*] target: assertEquals(currentDate.minusDays(1), appAuthenticator.getLastSignInOrActivatedAtOrCreatedAt())
[-] pred:  org. junit. Assert. assertEquals ( currentDate, appAuthenticator. getLast.4.OrActivatedAtOrCreatedAt() )

************************************
************************************
[+] input: testNoSanitization() { var appAuthenticator = new AppAuthenticator(); appAuthenticator.setDeviceName("PPPPPPPPPPPPPPPPPPPPPPP");  "<AssertPlaceHolder>"; }
getDeviceName() { return sanitize(deviceName); }
[*] target: assertEquals("PPPPPPPPPPPPPPPPPPPPPPP", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertNull ( appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("PPPPPPPPPPPPPPPPPPPPPPP", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertTrue ( appAuthenticator. getDeviceName() ( ). isEmpty ( ) )

[*] target: assertEquals("PPPPPPPPPPPPPPPPPPPPPPP", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertFalse ( appAuthenticator. getDeviceName() ( ). isEmpty ( ) )

[*] target: assertEquals("PPPPPPPPPPPPPPPPPPPPPPP", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( appAuthenticator. getDeviceName() ( ), null )

[*] target: assertEquals("PPPPPPPPPPPPPPPPPPPPPPP", appAuthenticator.getDeviceName())
[-] pred:  org

************************************
************************************
[+] input: testSanitationDeviceName() { var appAuthenticator = new AppAuthenticator(); appAuthenticator.setDeviceName("<script>alert("evil stuff");</script>");  "<AssertPlaceHolder>"; }
getDeviceName() { return sanitize(deviceName); }
[*] target: assertEquals("scriptalert"evil stuff"script", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertNull ( appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("scriptalert"evil stuff"script", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertNotNull ( appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("scriptalert"evil stuff"script", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( deviceName, appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("scriptalert"evil stuff"script", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( deviceName, appAuthenticator. getDeviceName() )

[*] target: assertEquals("scriptalert"evil stuff"script", appAuthenticator.getDeviceName())
[-] pred:  org

************************************
************************************
[+] input: testTruncateDeviceName() { var appAuthenticator = new AppAuthenticator(); appAuthenticator.setDeviceName("12345678909876543210123456789098765432101234567890");  "<AssertPlaceHolder>"; }
getDeviceName() { return sanitize(deviceName); }
[*] target: assertEquals("123456789098765432101234567890987654", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( deviceName, appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("123456789098765432101234567890987654", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( device, appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("123456789098765432101234567890987654", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( deviceString, appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("123456789098765432101234567890987654", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( device name, appAuthenticator. getDeviceName() ( ) )

[*] target: assertEquals("123456789098765432101234567890987654", appAuthenticator.getDeviceName())
[-] pred:  org. junit. Assert. assertEquals ( applicationAuthenticator. getDeviceName() ( ), null )

************************************
************************************
[+] input: getWebServerUrlsTest() {  ConfigService configService = new ConfigService("http", "SSSSSSSSSSSSSSS", sharedServiceClient, switchService);  WebServerResponse webServerResponse = configService.getWebserverUrls();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("Mijn DigiD", webServerResponse.getServices().get(0).getName()); Assertions.assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", webServerResponse.getServices().get(0).getUrl()); }
getWebserverUrls() { return new WebServerResponse("OK", List.of(new WebService("Mijn DigiD", protocol + "://" + host + "/authn_app"))); }
[*] target: assertEquals("OK", webServerResponse.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( WebServerResponse. getWebserverUrls(), webServerResponse. getWebserverUrls() )

[*] target: assertEquals("OK", webServerResponse.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( WebServerResponseResponse, webServerResponse. getWebserverUrls() ( ) )

[*] target: assertEquals("OK", webServerResponse.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( WebServerResponseResponse, webServerResponse. getWebserverUrls() )

[*] target: assertEquals("OK", webServerResponse.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( WebServerResponseHeaders, webServerResponse )

[*] target: assertEquals("OK", webServerResponse.getStatus())
[-] pred:  )

************************************
************************************
[+] input: SharedServiceClientException {  when(sharedServiceClient.getSSConfigInt("change_app_pin_maximum_per_day")).thenReturn(2); when(sharedServiceClient.getSSConfigInt("snelheid_aanvragen_digid_app")).thenReturn(1); when(switchService.digidRdaSwitchEnabled()).thenReturn(true); when(switchService.digidRequestStationEnabled()).thenReturn(false); when(switchService.digidEhaEnabled()).thenReturn(true);  ConfigResponse configResponse = configService.getConfig();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, configResponse.getMaxPinChangePerDay()); Assertions.assertTrue(configResponse.isEhaEnabled()); }
getConfig() throws SharedServiceClientException { ConfigResponse configResponse = new ConfigResponse(); configResponse.setDigidAppSwitchEnabled(switchService.digidAppSwitchEnabled()); configResponse.setDigidRdaEnabled(switchService.digidRdaSwitchEnabled()); configResponse.setRequestStationEnabled(switchService.digidRequestStationEnabled()); configResponse.setEhaEnabled(switchService.digidEhaEnabled()); configResponse.setLetterRequestDelay(sharedServiceClient.getSSConfigInt("snelheid_aanvragen_digid_app")); configResponse.setMaxPinChangePerDay(sharedServiceClient.getSSConfigInt("change_app_pin_maximum_per_day"));  return configResponse; }
[*] target: assertEquals(1, configResponse.getLetterRequestDelay())
[-] pred:  org. junit. Assert. assertThat ( configResponse. getConfig ( ), org. hamcrest. CoreMatchers. is ( room ) )

[*] target: assertEquals(1, configResponse.getLetterRequestDelay())
[-] pred:  org. junit. Assert. assertEquals ( VAR(1); when(switchService.digidRdaSwitchEnabled()).

[*] target: assertEquals(1, configResponse.getLetterRequestDelay())
[-] pred:  org. junit. Assert. assertEquals ( VAR_3, configResponse. getConfig ( ) )

[*] target: assertEquals(1, configResponse.getLetterRequestDelay())
[-] pred:  org

[*] target: assertEquals(1, configResponse.getLetterRequestDelay())
[-] pred:  )

************************************
************************************
[+] input: FlowStateNotDefinedException { //given when(flow.validateStateTransition(any(), any())).thenReturn(null); //when AppResponse appResponse = confirmationFlowService.processAction("confirm", Action.CONFIRM, confirmRequest, appSession); //then "<AssertPlaceHolder>"; }
processAction(String flowType, BaseAction action, AppRequest request, AppSession appSession) throws FlowStateNotDefinedException, FlowNotDefinedException, SharedServiceClientException, NoSuchAlgorithmException, IOException { Flow flow = flowFactoryFactory.getFactory(flowType).getFlow(ConfirmSessionFlow.NAME); AbstractFlowStep flowStep = flow.validateStateTransition(stateValueOf(appSession.getState().toUpperCase()), action); if (flowStep == null) { logger.error("nl.logius.digid.app.domain.shared.flow transition not allowed:{} - {} -> {}", flow.getClass(), appSession.getState(), action); return new NokResponse("nl.logius.digid.app.domain.shared.flow transition not allowed"); } flowStep.setAppSession(appSession);  if (flowStep.expectAppAuthenticator()) { flowStep.setAppAuthenticator(getAppAuthenticator(appSession)); }  AppResponse appResponse = flow.processState(flowStep, request); if (appResponse instanceof NokResponse || !flowStep.isValid()) { return appResponse; }  appSession.setState(getStateName(flow.getNextState(stateValueOf(appSession.getState().toUpperCase()), action)));  if (flowStep.getAppAuthenticator() != null) { appAuthenticatorService.save(flowStep.getAppAuthenticator());  if (appSession.getDeviceName() == null) { appSession.setDeviceName(flowStep.getAppAuthenticator().getDeviceName()); appSession.setAppCode(flowStep.getAppAuthenticator().getAppCode()); } }  appSessionService.save(appSession);  return appResponse; }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang. String ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. apache. commons. lang3. StringUtils ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org

************************************
************************************
[+] input: processReturnsOkResponseWithAppAuthenticatorAndNoNfcCode() { //given cancelFlowRequest.setCode("no_nfc"); //when AppResponse appResponse = aborted.process(mockedFlow, cancelFlowRequest);  //then "<AssertPlaceHolder>"; Assertions.assertEquals(false, mockedAppAuthenticator.getNfcSupport()); Assertions.assertEquals("no_nfc", mockedAppSession.getAbortCode());  }
process(Flow flow, CancelFlowRequest request) { if (appAuthenticator != null && "no_nfc".equals(request.getCode())) { appAuthenticator.setNfcSupport(false); }  appSession.setAbortCode(request.getCode());  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse == null ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse!= null ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof TYPE_1 ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: processReturnsOkResponseWithoutNfcCode() { //given cancelFlowRequest.setCode("otherCode"); //when AppResponse appResponse = aborted.process(mockedFlow, cancelFlowRequest);  //then "<AssertPlaceHolder>"; Assertions.assertEquals("otherCode", mockedAppSession.getAbortCode());  }
process(Flow flow, CancelFlowRequest request) { if (appAuthenticator != null && "no_nfc".equals(request.getCode())) { appAuthenticator.setNfcSupport(false); }  appSession.setAbortCode(request.getCode());  return new OkResponse(); }
[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof javax. ws. rs. core. Response ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse == null ) )

[*] target: assertTrue(appResponse instanceof OkResponse)
[-] pred:  org

************************************
************************************
[+] input: checkSecretError() { rdaConfirmRequest.setSecret("secret2");  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  "<AssertPlaceHolder>"; assertEquals("NOK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( Map, result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  , result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkAccountError() { appSession.setAccountId(null); when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  "<AssertPlaceHolder>"; assertEquals("NOK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( Map, result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( Map...String, result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  , result )

[*] target: assertEquals("ABORTED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkErrorError() { rdaConfirmRequest.setError("CANCELLED");  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  "<AssertPlaceHolder>"; assertEquals("OK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("CANCELLED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("CANCELLED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals("CANCELLED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( ""0"", result )

[*] target: assertEquals("CANCELLED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("CANCELLED", appSession.getRdaSessionStatus())
[-] pred:  , result )

************************************
************************************
[+] input: checkForeignBsnError() { appSession.setRdaSessionStatus("SCANNING_FOREIGN");  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(digidClient.checkBsn(any(),any())).thenReturn(Map.of(STATUS, "NOK"));  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  "<AssertPlaceHolder>"; assertEquals("OK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("BSN_NOT_MATCHING", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("BSN_NOT_MATCHING", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("BSN_NOT_MATCHING", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, Map )

[*] target: assertEquals("BSN_NOT_MATCHING", appSession.getRdaSessionStatus())
[-] pred:  , result )

[*] target: assertEquals("BSN_NOT_MATCHING", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkForeignBvBsnError() { appSession.setRdaSessionStatus("SCANNING_FOREIGN");  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(digidClient.checkBsn(any(),any())).thenReturn(Map.of(STATUS, "OK")); when(dwsClient.checkBvBsn(any(), any())).thenReturn(Map.of(STATUS, "NOK"));  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  verify(digidClient, times(1)).remoteLog("1490", Map.of(lowerUnderscore(ACCOUNT_ID), T_ACCOUNT_ID, lowerUnderscore(HIDDEN), true)); "<AssertPlaceHolder>"; assertEquals("OK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 8, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. result, result )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkDigidAppSwitchError() { when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(Boolean.FALSE);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  verify(digidClient, times(1)).remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), T_ACCOUNT_ID, lowerUnderscore(HIDDEN), true)); "<AssertPlaceHolder>"; assertEquals("OK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 200, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 8, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( ""HCatSchema"", result )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkDigidRdaSwitchError() { when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(Boolean.TRUE); when(switchService.digidRdaSwitchEnabled()).thenReturn(Boolean.FALSE);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  verify(digidClient, times(1)).remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), T_ACCOUNT_ID, lowerUnderscore(HIDDEN), true)); "<AssertPlaceHolder>"; assertEquals("OK", result.get("arrivalStatus")); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 200, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 8, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 12, result. size ( ) )

[*] target: assertEquals("REFUTED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( STRING_0, result )

************************************
************************************
[+] input: checkVerifiedWidchecker() { appSession.setRdaAction("upgrade_rda_widchecker");  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(Boolean.TRUE); when(switchService.digidRdaSwitchEnabled()).thenReturn(Boolean.TRUE);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  verify(digidClient, times(1)).remoteLog("1321", Map.of("document_type", "driving_license", lowerUnderscore(ACCOUNT_ID), T_ACCOUNT_ID)); "<AssertPlaceHolder>"; assertEquals("rda", appAuthenticator.getIssuerType()); assertEquals("OK", result.get("arrivalStatus"));  verify(idCheckDocumentRepository, times(1)).save(any(IdCheckDocument.class)); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( Map, result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 1 ), result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: checkVerifiedAppUpgradeFlow() { appSession.setRdaAction("app"); appAuthenticator.setInstanceId("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); appAuthenticator.setDeviceName("testDevice"); appAuthenticator.setAccountId(T_ACCOUNT_ID); appSession.setFlow(UndefinedFlow.NAME);  when(appSessionService.getSession(any())).thenReturn(appSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(appAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(Boolean.TRUE); when(switchService.digidRdaSwitchEnabled()).thenReturn(Boolean.TRUE);  Map<String, String> result = rdaService.confirm(rdaConfirmRequest);  verify(digidClient, times(1)).remoteLog("848", Map.of("document_type", "driving_license", lowerUnderscore(ACCOUNT_ID), T_ACCOUNT_ID, lowerUnderscore(APP_CODE), "EC0DC", lowerUnderscore(DEVICE_NAME), "testDevice")); "<AssertPlaceHolder>"; assertEquals("rda", appAuthenticator.getIssuerType()); assertEquals("OK", result.get("arrivalStatus"));  verify(idCheckDocumentRepository, times(1)).save(any(IdCheckDocument.class)); }
confirm(RdaConfirmRequest params) { AppSession appSession = appSessionService.getSession(params.getAppSessionId()); AppAuthenticator appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  if(!checkSecret(params, appSession) || !checkAccount(params, appSession)){ appSession.setRdaSessionStatus("ABORTED"); appSessionService.save(appSession); return Map.of("arrivalStatus", "NOK"); } if(checkAndProcessError(params, appSession)){ appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }  if (!switchService.digidAppSwitchEnabled()) { digidClient.remoteLog("853", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (!switchService.digidRdaSwitchEnabled()){ digidClient.remoteLog("579", Map.of(lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(HIDDEN), true)); appSession.setRdaSessionStatus("REFUTED"); } else if (params.isVerified() && (SCANNING.equals(appSession.getRdaSessionStatus()) || SCANNING_FOREIGN.equals(appSession.getRdaSessionStatus()))) { appSession.setRdaSessionStatus("VERIFIED"); appAuthenticator.setSubstantieelActivatedAt(ZonedDateTime.now()); appAuthenticator.setSubstantieelDocumentType(params.getDocumentType().toLowerCase());  if (appAuthenticator.getWidActivatedAt() == null) { appAuthenticator.setIssuerType("rda"); }  storeIdCheckDocument(params.getDocumentNumber(), params.getDocumentType(), appSession.getAccountId(), appAuthenticator.getUserAppId());  if (ID_CHECK_ACTION.equals(appSession.getRdaAction())) { digidClient.remoteLog("1321", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId())); } else { digidClient.remoteLog("848", Map.of("document_type", params.getDocumentType().toLowerCase(), lowerUnderscore(ACCOUNT_ID), appAuthenticator.getAccountId(), lowerUnderscore(APP_CODE), appAuthenticator.getAppCode(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName())); }  appAuthenticatorService.save(appAuthenticator);  if(appSession.getFlow().equals(UpgradeLoginLevel.NAME)) { digidClient.sendNotificationMessage(appSession.getAccountId(), "ED024", "SMS20"); logger.debug("Sending notify email ED024 / SMS20 for device {}", appAuthenticator.getDeviceName()); } } appSession.setAppAuthenticationLevel(appAuthenticator.getAuthenticationLevel()); appSessionService.save(appSession); return Map.of("arrivalStatus", "OK"); }
[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("VERIFIED", appSession.getRdaSessionStatus())
[-] pred:  org

************************************
************************************
[+] input: NoSuchAlgorithmException { //given mockedAppSession.setState("NOT-AUTHENTICATED"); when(appSessionService.getSession(any())).thenReturn(mockedAppSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(mockedAppAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(true); //when AppResponse appResponse = notificationsGet.process(mockedFlow, mockedRequest); //then "<AssertPlaceHolder>"; assertEquals("no_session", ((NokResponse) appResponse).getError()); }
process(Flow flow, MijnDigidSessionRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException, SharedServiceClientException { appSession = appSessionService.getSession(request.getMijnDigidSessionId()); appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  checkSwitchesEnabled();  digidClient.remoteLog("1468", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName(), lowerUnderscore(HUMAN_PROCESS), "get_notifications", lowerUnderscore(APP_CODE), appAuthenticator.getAppCode()));  if (!isAppSessionAuthenticated(appSession) || !isAppAuthenticatorActivated(appAuthenticator)){ return new NokResponse("no_session"); }  return nsClient.getNotifications(appAuthenticator.getAccountId()); }
[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertNotNull ( appResponse )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( appResponse.()); ( ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof NokResponse("no_sessionOff ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( ( appResponse instanceof NokResponse("no_sessionReversed ) )

[*] target: assertTrue(appResponse instanceof NokResponse)
[-] pred:  org. junit. Assert. assertTrue ( appResponse. getRequest ( ).()); ( ) )

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(appSessionService.getSession(any())).thenReturn(mockedAppSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(mockedAppAuthenticator); when(nsClient.getNotifications(anyLong())).thenReturn(new NotificationResponse("OK", List.of())); when(switchService.digidAppSwitchEnabled()).thenReturn(true);  //when NotificationResponse appResponse = (NotificationResponse) notificationsGet.process(mockedFlow, mockedRequest); //then "<AssertPlaceHolder>"; assertEquals(0, appResponse.getNotifications().size()); }
process(Flow flow, MijnDigidSessionRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException, SharedServiceClientException { appSession = appSessionService.getSession(request.getMijnDigidSessionId()); appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  checkSwitchesEnabled();  digidClient.remoteLog("1468", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName(), lowerUnderscore(HUMAN_PROCESS), "get_notifications", lowerUnderscore(APP_CODE), appAuthenticator.getAppCode()));  if (!isAppSessionAuthenticated(appSession) || !isAppAuthenticatorActivated(appAuthenticator)){ return new NokResponse("no_session"); }  return nsClient.getNotifications(appAuthenticator.getAccountId()); }
[*] target: assertEquals("OK", appResponse.getStatus())
[-] pred:  org. junit. Assert. assertThat ( appResponse. get()); ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("OK", appResponse.getStatus())
[-] pred:  org. junit. Assert. assertThat ( appResponse. get());Line ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("OK", appResponse.getStatus())
[-] pred:  org. junit. Assert. assertThat ( appResponse. get());Level ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("OK", appResponse.getStatus())
[-] pred:  org. junit. Assert. assertThat ( appResponse. get());String ( ), org. hamcrest. CoreMatchers. is ( 0L ) )

[*] target: assertEquals("OK", appResponse.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new NokResponse("no_session());, appResponse. get());URL ( ) )

************************************
************************************
[+] input: NoSuchAlgorithmException { //given when(appSessionService.getSession(any())).thenReturn(mockedAppSession); when(appAuthenticatorService.findByUserAppId(any())).thenReturn(mockedAppAuthenticator); when(switchService.digidAppSwitchEnabled()).thenReturn(true);  when(nsClient.getNotifications(anyLong())).thenReturn(new NotificationResponse("OK", List.of( new Notification(1l, "Dummy notification", "Dummy content", true, ZonedDateTime.now())) ));  //when NotificationResponse appResponse = (NotificationResponse) notificationsGet.process(mockedFlow, mockedRequest); //then "<AssertPlaceHolder>"; assertTrue(appResponse instanceof NotificationResponse); assertEquals("OK", appResponse.getStatus()); verify(digidClientMock, times(1)).remoteLog("1468", Map.of( lowerUnderscore(APP_CODE), "37F1B", lowerUnderscore(ACCOUNT_ID), 1L, lowerUnderscore(DEVICE_NAME), "devicename", lowerUnderscore(HUMAN_PROCESS), "get_notifications")); }
process(Flow flow, MijnDigidSessionRequest request) throws FlowNotDefinedException, IOException, NoSuchAlgorithmException, SharedServiceClientException { appSession = appSessionService.getSession(request.getMijnDigidSessionId()); appAuthenticator = appAuthenticatorService.findByUserAppId(appSession.getUserAppId());  checkSwitchesEnabled();  digidClient.remoteLog("1468", Map.of(lowerUnderscore(ACCOUNT_ID), appSession.getAccountId(), lowerUnderscore(DEVICE_NAME), appAuthenticator.getDeviceName(), lowerUnderscore(HUMAN_PROCESS), "get_notifications", lowerUnderscore(APP_CODE), appAuthenticator.getAppCode()));  if (!isAppSessionAuthenticated(appSession) || !isAppAuthenticatorActivated(appAuthenticator)){ return new NokResponse("no_session"); }  return nsClient.getNotifications(appAuthenticator.getAccountId()); }
[*] target: assertEquals("Dummy notification", appResponse.getNotifications().get(0).getTitle())
[-] pred:  org. junit. Assert. assertTrue ( org. NoSuchAlgorithmException. is ( 0L ) )

[*] target: assertEquals("Dummy notification", appResponse.getNotifications().get(0).getTitle())
[-] pred:  org. junit. Assert. assertTrue ( appResponse.()); ( ) )

[*] target: assertEquals("Dummy notification", appResponse.getNotifications().get(0).getTitle())
[-] pred:  org. junit. Assert. assertTrue ( org. NoSuchAlgorithmException. ()); )

[*] target: assertEquals("Dummy notification", appResponse.getNotifications().get(0).getTitle())
[-] pred:  org. junit. Assert. assertTrue ( org. apache. commons. lang3. StringUtils. isEmpty ( appResponse ) )

[*] target: assertEquals("Dummy notification", appResponse.getNotifications().get(0).getTitle())
[-] pred:  org

************************************
************************************
[+] input: removeByInstanceIdAndIdNotTest() { // persist app session AppSession session = new AppSession(); session.setId(T_APP_SESSION_ID); session.setFlow(AuthenticateLoginFlow.NAME); session.setState("AUTHENTICATED"); session.setUserAppId(T_USER_APP_ID); session.setInstanceId(T_INSTANCE_ID); session.setDeviceName(T_DEVICE_NAME);  repository.save(session);  // Given app session is created assertTrue(repository.findById(T_APP_SESSION_ID).isPresent()); // Should not be removed when removing with same instanceId and appSessionId service.removeByInstanceIdAndIdNot(T_INSTANCE_ID, T_APP_SESSION_ID); assertTrue(repository.findById(T_APP_SESSION_ID).isPresent()); // Old session should be removed when removing with same instanceId and new appSessionId service.removeByInstanceIdAndIdNot(T_INSTANCE_ID, T_APP_SESSION_ID + "1"); "<AssertPlaceHolder>"; }
removeByInstanceIdAndIdNot(String instanceId, String appSessionId) { repository.findAllByInstanceFlow(AuthenticateLoginFlow.NAME + instanceId ).stream() .filter(s -> !s.getId().equals(appSessionId)) .forEach(s -> removeById(s.getId())); }
[*] target: assertFalse(repository.findById(T_APP_SESSION_ID).isPresent())
[-] pred:  org. junit. Assert. assertTrue ( session. is removed ( ) )

[*] target: assertFalse(repository.findById(T_APP_SESSION_ID).isPresent())
[-] pred:  org. junit. Assert. assertTrue ( session. is removed )

[*] target: assertFalse(repository.findById(T_APP_SESSION_ID).isPresent())
[-] pred:  org. junit. Assert. assertThat ( session. exists ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertFalse(repository.findById(T_APP_SESSION_ID).isPresent())
[-] pred:  org. junit. Assert. assertThat ( session. removeByInstanceIdAndIdNot ( ), org. hamcrest. Matchers. is ( true ) )

[*] target: assertFalse(repository.findById(T_APP_SESSION_ID).isPresent())
[-] pred:  org. junit. Assert. assertThat ( session. removeByInstanceIdAndIdNot ( ), org. hamcrest. Matchers. is ( false ) )

************************************
************************************
[+] input: InvalidAlgorithmParameterException { final String maskedPincode = ChallengeService.encodeMaskedPin(IV, SYMMETRIC_KEY, PINCODE); "<AssertPlaceHolder>"; }
encodeMaskedPin(String iv, String symmetricKey, String pincode) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException { SecretKeySpec skeySpec = new SecretKeySpec(Util.fromHex(symmetricKey), "AES"); Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding"); IvParameterSpec ivSpec = new IvParameterSpec(Util.fromHex(iv)); cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec); return Util.toHexLower(cipher.doFinal(pincode.getBytes())); }
[*] target: assertEquals(MASKED_PINCODE, maskedPincode)
[-] pred:  org. junit. Assert. assertNotNull ( maskedPincode )

[*] target: assertEquals(MASKED_PINCODE, maskedPincode)
[-] pred:  org. junit. Assert. assertEquals ( maskedPincode, directlyPincode )

[*] target: assertEquals(MASKED_PINCODE, maskedPincode)
[-] pred:  org. junit. Assert. assertEquals ( maskedPincode, policyPincode )

[*] target: assertEquals(MASKED_PINCODE, maskedPincode)
[-] pred:  org. junit. Assert. assertEquals ( maskedPincode, either )

[*] target: assertEquals(MASKED_PINCODE, maskedPincode)
[-] pred:  org. junit. Assert. assertSame ( maskedPincode, entity )

************************************
************************************
[+] input: decodePincode() { final String pincode = ChallengeService.decodeMaskedPin(IV, SYMMETRIC_KEY, MASKED_PINCODE); "<AssertPlaceHolder>"; }
decodeMaskedPin(String iv, String symmetricKey, String maskedPincode)  { IvParameterSpec ivSpec = null; byte[] original;  try { ivSpec = new IvParameterSpec(Util.fromHex(iv)); SecretKeySpec skeySpec = new SecretKeySpec(Util.fromHex(symmetricKey), "AES"); Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING"); cipher.init(Cipher.DECRYPT_MODE, skeySpec, ivSpec); original = cipher.doFinal(Util.fromHex(maskedPincode)); } catch (Exception e) { logger.error("Could not decode masked pin", e); return ""; }  return new String(original); }
[*] target: assertEquals(PINCODE, pincode)
[-] pred:  org. junit. Assert. assertNotNull ( pincode )

[*] target: assertEquals(PINCODE, pincode)
[-] pred:  org. junit. Assert. assertEquals ( pincode, 0 )

[*] target: assertEquals(PINCODE, pincode)
[-] pred:  org. junit. Assert. assertEquals ( pincode, devicecode )

[*] target: assertEquals(PINCODE, pincode)
[-] pred:  org. junit. Assert. assertEquals ( pincode, string )

[*] target: assertEquals(PINCODE, pincode)
[-] pred:  org. junit. Assert. assertEquals ( pincode, STRING_0 )

************************************
************************************
[+] input: testChallenge() { "<AssertPlaceHolder>"; }
anonimizedIp(String clientIpAddress, String sourceIpSalt) { if (clientIpAddress == null) return null; try { String[] clientIps = clientIpAddress.split(", "); byte[] data = clientIps[0].concat(sourceIpSalt).getBytes(StandardCharsets.UTF_8); return Base64.toBase64String(MessageDigest.getInstance("SHA-256").digest(data)); } catch (NoSuchAlgorithmException e) { //            logger.error("Can not anonimizeIp: {}", e.getMessage()); }  return null; }
[*] target: assertEquals(HASH, Util.anonimizedIp(IP, IP_SALT))
[-] pred:  org. junit. Assert. assertNull ( org. apache. commons. lang3. StringUtils. anonimizedIp(String clientIpAddress,String sourceIpSalt) )

[*] target: assertEquals(HASH, Util.anonimizedIp(IP, IP_SALT))
[-] pred:  org. junit. Assert. assertNull ( org. mozilla. apache. commons. lang3. StringUtils. anonimizedIp(String clientIpAddress,String sourceIpSalt) )

[*] target: assertEquals(HASH, Util.anonimizedIp(IP, IP_SALT))
[-] pred:  org. junit. Assert. assertNull ( org. springframework. data. redis. connection. Context. anonimizedIp(String clientIpAddress,String sourceIpSalt) )

[*] target: assertEquals(HASH, Util.anonimizedIp(IP, IP_SALT))
[-] pred:  org

[*] target: assertEquals(HASH, Util.anonimizedIp(IP, IP_SALT))
[-] pred:  )

************************************
************************************
[+] input: SharedServiceClientException { AppSession appSession = new AppSession(); appSession.setId("1337"); appSession.setFlow("flow"); appSession.setState(State.PASSWORD_CONFIRMED.name()); flowService = spy(flowService); Flow flow = mock(ActivateAppWithPasswordSmsFlow.class);  when(flowFactoryFactory.getFactoryByFlow("flow")).thenReturn(flowFactory); when(flowFactory.getFlow("flow")).thenReturn(flow);  when(appSessionService.getSession(any())).thenReturn(appSession); when(flow.cancelFlow( any())).thenReturn(mock(Cancelled.class)); when(flow.processState(any(), any())).thenReturn(new OkResponse());  AppResponse result = flowService.cancelAction(Action.CANCEL, new CancelFlowRequest());  "<AssertPlaceHolder>"; }
cancelAction(BaseAction action, CancelFlowRequest request) throws FlowNotDefinedException, FlowStateNotDefinedException, IOException, NoSuchAlgorithmException, SharedServiceClientException { try { AppSession appSession = appSessionService.getSession(request.getAppSessionId()); FlowFactory flowFactory = flowFactoryFactory.getFactoryByFlow(appSession.getFlow());  Flow flow = flowFactory.getFlow(appSession.getFlow()); AbstractFlowStep flowStep = flow.cancelFlow(action); flowStep.setAppSession(appSession);  AppResponse appResponse = flow.processState(flowStep, request);  appSession.setState(State.CANCELLED.name()); appSessionService.save(appSession);  return appResponse; } catch (AppSessionNotFoundException e) { return new OkResponse(); } }
[*] target: assertTrue(result instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( result, new OkResponse(); ( ) )

[*] target: assertTrue(result instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 200 ), result )

[*] target: assertTrue(result instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( new OkResponse(); ( 1000 ), result )

[*] target: assertTrue(result instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( result, new OkResponse(); )

[*] target: assertTrue(result instanceof OkResponse)
[-] pred:  org. junit. Assert. assertEquals ( OkResponse();, result )

************************************
************************************
[+] input: getAppAuthenticatorTest() { AppSession appSession = new AppSession(); appSession.setUserAppId("1"); AppAuthenticator appAuthenticator = new AppAuthenticator();  when(appAuthenticatorService.findByUserAppId("1")).thenReturn(appAuthenticator);  AppAuthenticator result = flowService.getAppAuthenticator(appSession);  "<AssertPlaceHolder>"; verify(appAuthenticatorService, times(1)).findByUserAppId("1"); }
getAppAuthenticator(AppSession appSession) { if (appSession.getUserAppId() != null) { return appAuthenticatorService.findByUserAppId(appSession.getUserAppId()); } return null; }
[*] target: assertEquals(appAuthenticator, result)
[-] pred:  org. junit. Assert. assertSame ( appAuthenticator, result )

[*] target: assertEquals(appAuthenticator, result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof appAuthenticator ) )

[*] target: assertEquals(appAuthenticator, result)
[-] pred:  org. junit. Assert. assertEquals ( appAuthenticator, result )

[*] target: assertEquals(appAuthenticator, result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(appAuthenticator, result)
[-] pred:  org

************************************
************************************
[+] input: getAppAuthenticatorNonexistentTest() { AppSession appSession = new AppSession();  AppAuthenticator result = flowService.getAppAuthenticator(appSession);  "<AssertPlaceHolder>"; verify(appAuthenticatorService, times(0)).findByUserAppId(anyString()); }
getAppAuthenticator(AppSession appSession) { if (appSession.getUserAppId() != null) { return appAuthenticatorService.findByUserAppId(appSession.getUserAppId()); } return null; }
[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit ) { assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit_3. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  Null ( result ) )

************************************
************************************
[+] input: FlowStateNotDefinedException { when(flow.validateStateTransition(any(), any())).thenCallRealMethod(); AbstractFlowStep result = flow.validateStateTransition(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD);  "<AssertPlaceHolder>"; verify(flowFactory, times(0)).getStep(Action.CONFIRM_PASSWORD); }
validateStateTransition(BaseState currentState, BaseAction action) throws FlowStateNotDefinedException { if (allowedTransitions.get(currentState) != null && allowedTransitions.get(currentState).containsKey(action)) { return flowFactory.getStep(action); } else { return null; } }
[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result. validateStateTransition(BaseState. action ) )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result. validateStateTransition(BaseState ( n ) )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result. validateStateTransition(BaseState. action )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertSame ( null, result )

************************************
************************************
[+] input: FlowStateNotDefinedException { when(flow.validateStateTransition(any(), any())).thenCallRealMethod(); AbstractFlowStep result = flow.validateStateTransition(State.INITIALIZED, Action.POLL_LETTER);  "<AssertPlaceHolder>"; verify(flowFactory, times(0)).getStep(Action.CONFIRM_PASSWORD); }
validateStateTransition(BaseState currentState, BaseAction action) throws FlowStateNotDefinedException { if (allowedTransitions.get(currentState) != null && allowedTransitions.get(currentState).containsKey(action)) { return flowFactory.getStep(action); } else { return null; } }
[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertNull(result)
[-] pred:  }

[*] target: assertNull(result)
[-] pred:  org

************************************
************************************
[+] input: FlowStateNotDefinedException { when(flow.getNextState(any(), any())).thenCallRealMethod(); BaseState result = flow.getNextState(State.INITIALIZED, Action.CONFIRM_PASSWORD);  "<AssertPlaceHolder>"; }
getNextState(BaseState state, BaseAction action) throws FlowStateNotDefinedException { if (state == State.FAILED) { return State.FAILED; } var currentState = allowedTransitions.keySet().stream().filter(a -> a.name().equals(state.name())).findFirst();  if (currentState.isEmpty()) { throw new FlowStateNotDefinedException("State " + state + " does not exist"); } else if (allowedTransitions.get(currentState.get()).get(action) == null) { throw new FlowStateNotDefinedException("Action " + action + " does not exist on state " + state); } return allowedTransitions.get(currentState.get()).get(action); }
[*] target: assertEquals(State.PASSWORD_CONFIRMED, result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(State.PASSWORD_CONFIRMED, result)
[-] pred:  org. junit. Assert. assertEquals ( FlowState. L, result )

[*] target: assertEquals(State.PASSWORD_CONFIRMED, result)
[-] pred:  org. junit. Assert. assertEquals ( FlowState. dav, result )

[*] target: assertEquals(State.PASSWORD_CONFIRMED, result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(State.PASSWORD_CONFIRMED, result)
[-] pred:  org

************************************
************************************
[+] input: FlowStateNotDefinedException { when(flow.getNextState(any(), any())).thenCallRealMethod(); Exception exception = "<AssertPlaceHolder>";  assertEquals("State " + State.CHALLENGED + " does not exist", exception.getMessage()); }
getNextState(BaseState state, BaseAction action) throws FlowStateNotDefinedException { if (state == State.FAILED) { return State.FAILED; } var currentState = allowedTransitions.keySet().stream().filter(a -> a.name().equals(state.name())).findFirst();  if (currentState.isEmpty()) { throw new FlowStateNotDefinedException("State " + state + " does not exist"); } else if (allowedTransitions.get(currentState.get()).get(action) == null) { throw new FlowStateNotDefinedException("Action " + action + " does not exist on state " + state); } return allowedTransitions.get(currentState.get()).get(action); }
[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.CHALLENGED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertEquals ( FlowStateNotDefinedException. thrownNullNullNull exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.CHALLENGED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertEquals ( FlowStateNotDefinedException, exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.CHALLENGED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.CHALLENGED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.CHALLENGED, Action.CONFIRM_PASSWORD) )
[-] pred:  org

************************************
************************************
[+] input: FlowStateNotDefinedException { when(flow.getNextState(any(), any())).thenCallRealMethod(); Exception exception = "<AssertPlaceHolder>";  assertEquals("Action " + Action.CONFIRM_PASSWORD + " does not exist on state " + State.PASSWORD_CONFIRMED, exception.getMessage()); }
getNextState(BaseState state, BaseAction action) throws FlowStateNotDefinedException { if (state == State.FAILED) { return State.FAILED; } var currentState = allowedTransitions.keySet().stream().filter(a -> a.name().equals(state.name())).findFirst();  if (currentState.isEmpty()) { throw new FlowStateNotDefinedException("State " + state + " does not exist"); } else if (allowedTransitions.get(currentState.get()).get(action) == null) { throw new FlowStateNotDefinedException("Action " + action + " does not exist on state " + state); } return allowedTransitions.get(currentState.get()).get(action); }
[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertEquals ( FlowStateNotDefinedException. thrown ( ), exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertEquals ( FlowStateNotDefinedException, exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD) )
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(FlowStateNotDefinedException.class, () -> flow.getNextState(State.PASSWORD_CONFIRMED, Action.CONFIRM_PASSWORD) )
[-] pred:  org

************************************
************************************
[+] input: FlowStateNotDefinedException { AbstractFlowStep expectedStep = mock(Cancelled.class); ReflectionTestUtils.setField(flow, "flowFactory", flowFactory); when(flowFactory.getStep(Action.CANCEL)).thenReturn(expectedStep); when(flow.cancelFlow(any())).thenCallRealMethod();  AbstractFlowStep result = flow.cancelFlow(Action.CANCEL);  "<AssertPlaceHolder>"; }
cancelFlow(BaseAction action) throws FlowStateNotDefinedException { return flowFactory.getStep(action); }
[*] target: assertEquals(expectedStep, result)
[-] pred:  org. junit. Assert. assertEquals ( expectedStep, result )

[*] target: assertEquals(expectedStep, result)
[-] pred:  org. junit. Assert. assertEquals ( expectedStep, result ; }

[*] target: assertEquals(expectedStep, result)
[-] pred:  org. junit. Assert. assertEquals ( expectedStep, result = null )

[*] target: assertEquals(expectedStep, result)
[-] pred:  org. junit. Assert. assertEquals ( expectedStep, result =

[*] target: assertEquals(expectedStep, result)
[-] pred:  org

************************************
************************************
[+] input: getFingerprints() { assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateDigiDDomain().getFingerprint()); "<AssertPlaceHolder>"; }
getFingerprint() { try { return Base64.getEncoder().encodeToString(DigestUtils.sha256(Objects.requireNonNull(getX509Certificate()).getEncoded())); } catch (CertificateEncodingException e) { return null; } }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateEidDomain().getFingerprint())
[-] pred:  org. junit. Assert. assertNotNull ( getFingerprint() )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateEidDomain().getFingerprint())
[-] pred:  org. junit. Assert. assertEquals ( 15, getFingerprint(). getFingerprint() ( ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateEidDomain().getFingerprint())
[-] pred:  org. junit. Assert. assertEquals ( 1, getFingerprint(). getFingerprint() ( ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateEidDomain().getFingerprint())
[-] pred:  org. junit. Assert. assertEquals ( 100, getFingerprint(). getFingerprint() ( ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", getSslCertificateEidDomain().getFingerprint())
[-] pred:  org. junit. Assert. assertEquals ( 15, getFingerprint(). getFingerprintContainer ( ) )

************************************
************************************
[+] input: getSans() { assertEquals(List.of("SSSSSSSSSSS", "SSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSS"), getSslCertificateDigiDDomain().getSans()); "<AssertPlaceHolder>"; }
getSans()  { try { return (List<Object>) getX509Certificate().getSubjectAlternativeNames().stream().toList().stream().map(list -> list.get(1)).toList(); } catch (CertificateParsingException e) { return List.of(); } }
[*] target: assertEquals(List.of("SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS"), getSslCertificateEidDomain().getSans())
[-] pred:  org. junit. Assert. assertEquals ( 3, instance. getSans() ( ) )

[*] target: assertEquals(List.of("SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS"), getSslCertificateEidDomain().getSans())
[-] pred:  org. junit. Assert. assertEquals ( 1, instance. getSans() ( ) )

[*] target: assertEquals(List.of("SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS"), getSslCertificateEidDomain().getSans())
[-] pred:  org. junit. Assert. assertEquals ( 1, this. getSans(). getSans() ( ) )

[*] target: assertEquals(List.of("SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS"), getSslCertificateEidDomain().getSans())
[-] pred:  org. junit. Assert. assertEquals ( 3, this. getSans(). getSans() ( ) )

[*] target: assertEquals(List.of("SSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSS"), getSslCertificateEidDomain().getSans())
[-] pred:  org. junit. Assert. assertEquals ( 10, instance. getSans() ( ) )

************************************
************************************
[+] input: checkSwitchDisabled() { var switchObject = createSwitch(appSwitchName, "Description van de switch A", SwitchStatus.INACTIVE, 1, ZonedDateTime.now()); when(switchRepository.findByName(appSwitchName)).thenReturn(Optional.of(switchObject)); "<AssertPlaceHolder>"; }
digidAppSwitchEnabled(){ return isEnabled("Koppeling met DigiD app"); }
[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertFalse ( switchObject. digidAppSwitchEnabled(){ )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertFalse ( switchObject. digidAppSwitchEnabled(){ ( ) )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertNull ( switchObject. digidAppSwitchEnabled(){ )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertFalse ( switchObject. digidAppSwitchEnabled(){ return result ; }

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertFalse ( switchObject. digidAppSwitchEnabled(){ is used to construct the

************************************
************************************
[+] input: checkSwitchEnabled() { var switchObject = createSwitch(appSwitchName, "Description van de switch A", SwitchStatus.ALL, 1, ZonedDateTime.now());  when(switchRepository.findByName(appSwitchName)).thenReturn(Optional.of(switchObject)); "<AssertPlaceHolder>"; }
digidAppSwitchEnabled(){ return isEnabled("Koppeling met DigiD app"); }
[*] target: assertTrue(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertTrue ( switchObject. digidAppSwitchEnabled(){ )

[*] target: assertTrue(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertTrue ( switchObject. digidAppSwitchEnabled(){ ( ) )

[*] target: assertTrue(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertTrue ( switchObject. digidAppSwitchEnabled(){ ( ). isEmpty ( ) )

[*] target: assertTrue(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertTrue ( switchObject. digidAppSwitchEnabled(){ ( ).()); ( ) )

[*] target: assertTrue(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertTrue ( switchObject. digidAppSwitchEnabled(){

************************************
************************************
[+] input: checkSwitchNotExisting() { var switchObject = createSwitch("other name", "Description van de switch A", SwitchStatus.ALL, 1, ZonedDateTime.now()); when(switchRepository.findByName("other name")).thenReturn(Optional.of(switchObject)); "<AssertPlaceHolder>"; }
digidAppSwitchEnabled(){ return isEnabled("Koppeling met DigiD app"); }
[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertThat ( switchObject, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertThat ( switchObject, org. hamcrest. CoreMatchers. is ( new java. lang. Object ( ) ) )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertThat ( switchObject. digidAppSwitchEnabled(){

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org. junit. Assert. assertThat ( switchObject. digidAppSwitchEnabled(){ return 0.5 )

[*] target: assertFalse(service.digidAppSwitchEnabled())
[-] pred:  org

************************************
************************************
[+] input: getCertificateById() { when(certificateServiceMock.getCertificate(anyLong())).thenReturn(getCertificate());  Certificate result = controllerMock.getById(anyLong());  verify(certificateServiceMock, times(1)).getCertificate(anyLong()); "<AssertPlaceHolder>"; }
getById(@PathVariable("id") Long id) { return certificateService.getCertificate(id); }
[*] target: assertEquals("test", result.getCachedCertificate())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("test", result.getCachedCertificate())
[-] pred:  org. junit. Assert. assertSame ( getCertificate()); Certificate, result )

[*] target: assertEquals("test", result.getCachedCertificate())
[-] pred:  org. junit. Assert. assertEquals ( getCertificate()); Certificate, result )

[*] target: assertEquals("test", result.getCachedCertificate())
[-] pred:  org. junit. Assert. assertSame (getCertificate()); Certificate, result )

[*] target: assertEquals("test", result.getCachedCertificate())
[-] pred:  )

************************************
************************************
[+] input: getAllCertificates() { when(certificateServiceMock.getAllCertificates(anyInt(), anyInt())).thenReturn(getPageCertificates());  Page<Certificate> result = controllerMock.getAll(anyInt(), anyInt());  verify(certificateServiceMock, times(1)).getAllCertificates(anyInt(), anyInt()); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
getAll(@RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { return certificateService.getAllCertificates(pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit, result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getAllCertificatesBasedOnConditions() { CertSearchRequest request = new CertSearchRequest(); when(certificateServiceMock.searchAll(request, 1, 10)).thenReturn(getPageCertificates());  Page<Certificate> result = controllerMock.search(request, 1, 10);  verify(certificateServiceMock, times(1)).searchAll(any(CertSearchRequest.class), anyInt(), anyInt()); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
search(@RequestBody CertSearchRequest request, @RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { return certificateService.searchAll(request, pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getCertificate() { Certificate certificate = new Certificate(); certificate.setId(1L); Optional<Certificate> certificateOptional = Optional.of(certificate); when(certificateRepositoryMock.findById(anyLong())).thenReturn(certificateOptional);  Certificate result = certificateServiceMock.getCertificate(anyLong());  verify(certificateRepositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
verify(X509Certificate certificate, Date date) { logger.debug("Verifying {} issued by {}", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal());  // Create trustAnchors final Set<TrustAnchor> trustAnchors = getTrusted().stream().map( c -> new TrustAnchor(c, null) ).collect(Collectors.toSet()); if (trustAnchors.isEmpty()) { throw new VerificationException("No trust anchors available"); }  // Create the selector that specifies the starting certificate final X509CertSelector selector = new X509CertSelector(); selector.setCertificate(certificate);  // Configure the PKIX certificate builder algorithm parameters try { final PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(trustAnchors, selector);  // Set assume date if (date != null) { pkixParams.setDate(date); }  // Add cert store with certificate to check pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(ImmutableList.of(certificate)), "BC"));  // Add cert store with intermediates pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(getIntermediates()), "BC"));  // Add cert store with CRLs pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(getCRLs()), "BC"));  // Toggle to check revocation list pkixParams.setRevocationEnabled(checkRevocation());  // Build and verify the certification chain final CertPathBuilder builder = CertPathBuilder.getInstance("PKIX", "BC"); builder.build(pkixParams); } catch (CertPathBuilderException e) { throw new VerificationException( String.format("Invalid certificate %s issued by %s", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal() ), e ); } catch (GeneralSecurityException e) { throw new CryptoException( String.format("Could not verify certificate %s issued by %s", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal() ), e ); } }
[*] target: assertEquals(certificateOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(certificateOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( certificate, result )

[*] target: assertEquals(certificateOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( result, certificate )

[*] target: assertEquals(certificateOptional.get().getId(), result.getId())
[-] pred:  org

[*] target: assertEquals(certificateOptional.get().getId(), result.getId())
[-] pred:  )

************************************
************************************
[+] input: getAllCertificates() { when(certificateRepositoryMock.findAll(PageRequest.of(1, 10, Sort.by(Sort.Direction.ASC, "activeUntil")))).thenReturn(getPageCertificates());  Page<Certificate> result = certificateServiceMock.getAllCertificates(1, 10);  verify(certificateRepositoryMock, times(1)).findAll(PageRequest.of(1, 10, Sort.by(Sort.Direction.ASC, "activeUntil"))); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
verify(X509Certificate certificate, Date date) { logger.debug("Verifying {} issued by {}", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal());  // Create trustAnchors final Set<TrustAnchor> trustAnchors = getTrusted().stream().map( c -> new TrustAnchor(c, null) ).collect(Collectors.toSet()); if (trustAnchors.isEmpty()) { throw new VerificationException("No trust anchors available"); }  // Create the selector that specifies the starting certificate final X509CertSelector selector = new X509CertSelector(); selector.setCertificate(certificate);  // Configure the PKIX certificate builder algorithm parameters try { final PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(trustAnchors, selector);  // Set assume date if (date != null) { pkixParams.setDate(date); }  // Add cert store with certificate to check pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(ImmutableList.of(certificate)), "BC"));  // Add cert store with intermediates pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(getIntermediates()), "BC"));  // Add cert store with CRLs pkixParams.addCertStore(CertStore.getInstance( "Collection", new CollectionCertStoreParameters(getCRLs()), "BC"));  // Toggle to check revocation list pkixParams.setRevocationEnabled(checkRevocation());  // Build and verify the certification chain final CertPathBuilder builder = CertPathBuilder.getInstance("PKIX", "BC"); builder.build(pkixParams); } catch (CertPathBuilderException e) { throw new VerificationException( String.format("Invalid certificate %s issued by %s", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal() ), e ); } catch (GeneralSecurityException e) { throw new CryptoException( String.format("Could not verify certificate %s issued by %s", certificate.getSubjectX500Principal(), certificate.getIssuerX500Principal() ), e ); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, 200 )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, Page<Certificate> result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, getExpectedPageCertificates()); )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, new Page<Certificate> )

[*] target: assertNotNull(result)
[-] pred:  org. junit, result )

************************************
************************************
[+] input: searchAll() { CertSearchRequest csr = new CertSearchRequest(); when(certificateRepositoryMock.searchAll(csr, PageRequest.of(1, 10))).thenReturn(getPageCertificates());  Page<Certificate> result = certificateServiceMock.searchAll(csr, 1, 10);  "<AssertPlaceHolder>"; }
searchAll(CertSearchRequest request, int pageIndex, int pageSize) { return certificateRepository.searchAll(request, PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org

[*] target: assertNotNull(result)
[-] pred:  )

************************************
************************************
[+] input: getConnectionById() { when(connectionServiceMock.getConnectionById(anyLong())).thenReturn(getNewConnection());  Connection result = controllerMock.getById(anyLong());  verify(connectionServiceMock, times(1)).getConnectionById(anyLong()); "<AssertPlaceHolder>"; }
getById(@PathVariable("id") Long id) { return connectionService.getConnectionById(id); }
[*] target: assertEquals("connection", result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("connection", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( result, new Connection ( ) )

[*] target: assertEquals("connection", result.getName())
[-] pred:  org. junit. Assert. assertSame ( result, getById(@PathVariable("idCssLong )

[*] target: assertEquals("connection", result.getName())
[-] pred:  org

[*] target: assertEquals("connection", result.getName())
[-] pred:  )

************************************
************************************
[+] input: getAllConnections() { when(connectionServiceMock.findAll(anyInt(), anyInt())).thenReturn(getPageConnections()); when(connectionServiceMock.convertToConnectionResponse(any(Page.class))).thenReturn(getPageConnectionResponse());  Page<ConnectionResponse> result = controllerMock.getAll(1, 10);  verify(connectionServiceMock, times(1)).findAll(anyInt(), anyInt()); verify(connectionServiceMock, times(1)).convertToConnectionResponse(any(Page.class)); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(1, result.getContent().size()); }
getAll( @RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { Page<Connection> allConnections = connectionService.findAll(pageIndex, pageSize); return connectionService.convertToConnectionResponse(allConnections); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. getAll( @Labels ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. getAll( @Labels.name, 0 )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. getAll( @Labels.name ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getAllConnectionsBasedOnConditions() { when(connectionServiceMock.search(any(Connection.class), anyInt(), anyInt())).thenReturn(getPageConnections()); when(connectionServiceMock.convertToConnectionResponse(any(Page.class))).thenReturn(getPageConnectionResponse());  Page<ConnectionResponse> result = controllerMock.search(getNewConnection(), 1, 10);  verify(connectionServiceMock, times(1)).search(any(Connection.class), anyInt(), anyInt()); verify(connectionServiceMock, times(1)).convertToConnectionResponse(any(Page.class)); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(1, result.getContent().size()); }
search(@RequestBody Connection con, @RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { Page<Connection> allConnections = connectionService.search(con, pageIndex, pageSize); return connectionService.convertToConnectionResponse(allConnections); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 2, result. size ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result.getTotalPages()); )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: createConnection() { when(connectionServiceMock.create(any(Connection.class))).thenReturn(getNewConnection());  Connection result = controllerMock.create(getNewConnection());  verify(connectionServiceMock, times(1)).create(any(Connection.class)); verify(metadataProcessorServiceMock, times(1)).startCollectMetadata(any(Connection.class), any(HashMap.class)); "<AssertPlaceHolder>"; }
create(@RequestBody Connection connection) { Connection connectionCreated = connectionService.create(connection); metadataProcessorService.startCollectMetadata(connectionCreated, new HashMap<>()); return connectionCreated; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( original ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( rootDir ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result.()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: updateConnection() { when(connectionServiceMock.updateAttributes(anyLong(), any(ConnectionDTO.class))).thenReturn(getNewConnection());  Connection result = controllerMock.update(1L, getNewConnectionDTO());  verify(connectionServiceMock, times(1)).updateAttributes(anyLong(), any(ConnectionDTO.class)); verify(metadataProcessorServiceMock, times(1)).startCollectMetadata(any(Connection.class), anyMap()); verify(connectionServiceMock, times(1)).updateConnection(any(Connection.class)); "<AssertPlaceHolder>"; }
update(@PathVariable("id") Long id, @RequestBody ConnectionDTO connectionDTO) { Connection connectionUpdated = connectionService.updateAttributes(id, connectionDTO); metadataProcessorService.startCollectMetadata(connectionUpdated, new HashMap<>()); connectionService.updateConnection(connectionUpdated); return connectionUpdated; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, update )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, this )

************************************
************************************
[+] input: getConnectionById() { Connection connection = new Connection(); connection.setId(1L); Optional<Connection> connectionOptional = Optional.of(connection); when(connectionRepositoryMock.findById(anyLong())).thenReturn(connectionOptional);  Connection result = connectionServiceMock.getConnectionById(anyLong());  verify(connectionRepositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
getConnectionById(Long id) { Optional<Connection> con = connectionRepository.findById(id); if (con.isEmpty()) { throw new NotFoundException("Could not find connection with id: " + id); } return con.get(); }
[*] target: assertEquals(connectionOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( connection, result )

[*] target: assertEquals(connectionOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getConnectionById(Long. n ), org. hamcrest. CoreMatchers. is ( connection ) )

[*] target: assertEquals(connectionOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getConnectionById(Long. open ( ), org. hamcrest. CoreMatchers. is ( connection ) )

[*] target: assertEquals(connectionOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getConnectionById(Long. getValue ( ), org. hamcrest. CoreMatchers. is ( connection ) )

[*] target: assertEquals(connectionOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getConnectionById(Long. get ( ), org. hamcrest. CoreMatchers. is ( connection ) )

************************************
************************************
[+] input: createConnection() { when(connectionRepositoryMock.saveAndFlush(any(Connection.class))).thenReturn(new Connection());  Connection result = connectionServiceMock.create(new Connection());  verify(connectionRepositoryMock, times(1)).saveAndFlush(any(Connection.class)); "<AssertPlaceHolder>"; }
create(Connection connection) { return connectionRepository.saveAndFlush(connection); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. create(Connection ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. create(Connectionce )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, connection )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  creates a new Connection example

************************************
************************************
[+] input: deleteConnectionById() { doNothing().when(connectionRepositoryMock).delete(any(Connection.class));  Connection result = connectionServiceMock.deleteConnectionById(new Connection());  verify(connectionRepositoryMock, times(1)).delete(any(Connection.class)); "<AssertPlaceHolder>"; }
deleteConnectionById(Connection connection) { connectionRepository.delete(connection); return connection; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result.()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result.()); )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: updateAttributes() { Connection connectionOld = new Connection(); connectionOld.setName("old"); connectionOld.setStatus(new Status());  Optional<Connection> connectionOptional = Optional.of(connectionOld);  when(connectionRepositoryMock.findById(anyLong())).thenReturn(connectionOptional); Connection result = connectionServiceMock.updateAttributes(1L, newConnectionDTO());  "<AssertPlaceHolder>"; assertEquals(result.getEntityId(), newConnection().getEntityId()); assertNotNull(result); }
updateAttributes(Long id, ConnectionDTO connectionDTO) { Connection connection = getConnectionById(id); return connectionMapper.toUpdatedConnection(connection, connectionDTO); }
[*] target: assertEquals(result.getName(), newConnection().getName())
[-] pred:  org. junit. Assert. assertEquals ( connectionOld, result )

[*] target: assertEquals(result.getName(), newConnection().getName())
[-] pred:  org. junit. Assert. assertEquals ( result, connectionOld )

[*] target: assertEquals(result.getName(), newConnection().getName())
[-] pred:  org. junit. Assert. assertEquals ( result. updateAttributes(Long id, ConnectionDTO

[*] target: assertEquals(result.getName(), newConnection().getName())
[-] pred:  org. junit. Assert. assertEquals ( result )

[*] target: assertEquals(result.getName(), newConnection().getName())
[-] pred:  org

************************************
************************************
[+] input: convertToConnectionResponse() { Page<ConnectionResponse> result = connectionServiceMock.convertToConnectionResponse(getPageConnections());  "<AssertPlaceHolder>"; assertNotNull(result); }
convertToConnectionResponse(Page<Connection> allConnections) { List<ConnectionResponse> convertedConnection = connectionMapper.toConnectionResponse(allConnections.getContent()); return new PageImpl<>(convertedConnection, allConnections.getPageable(), allConnections.getTotalElements()); }
[*] target: assertEquals(result.getTotalPages(), getPageConnections().getTotalPages())
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Page<ConnectionResponse ) )

[*] target: assertEquals(result.getTotalPages(), getPageConnections().getTotalPages())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result.getTotalPages(), getPageConnections().getTotalPages())
[-] pred:  org. junit. Assert. assertSame ( Page<ConnectionResponse. result, new Page<ConnectionResponse ( ) )

[*] target: assertEquals(result.getTotalPages(), getPageConnections().getTotalPages())
[-] pred:  org. junit. Assert. assertSame ( Page<ConnectionResponse. result, book )

[*] target: assertEquals(result.getTotalPages(), getPageConnections().getTotalPages())
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: pageWithAllConnections() { when(connectionRepositoryMock.findAll(PageRequest.of(1, 10))).thenReturn(getPageConnections());  Page<Connection> result = connectionServiceMock.findAll(1, 10);  verify(connectionRepositoryMock, times(1)).findAll(PageRequest.of(1, 10)); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
findAll(int pageIndex, int pageSize) { return connectionRepository.findAll(PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. findAll(TotalPages());Count ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. findAll(TotalPages());Count ( 0 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result. findAll(PageConnections());Count ( ) )

[*] target: assertNotNull(result)
[-] pred:  org

[*] target: assertNotNull(result)
[-] pred:  )

************************************
************************************
[+] input: listWithAllConnections() { when(connectionRepositoryMock.findAll()).thenReturn(new ArrayList<>());  List<Connection> result = connectionServiceMock.listWithAllConnections();  verify(connectionRepositoryMock, times(1)).findAll(); "<AssertPlaceHolder>"; }
listWithAllConnections() { return connectionRepository.findAll(); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) > 0 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) 0 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) 0 0 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) 0 )

************************************
************************************
[+] input: listWithOneConnection() { when(connectionRepositoryMock.findListById(anyLong())).thenReturn(new ArrayList<>());  List<Connection> result = connectionServiceMock.listWithOneConnection(1L);  verify(connectionRepositoryMock, times(1)).findListById(anyLong()); "<AssertPlaceHolder>"; }
listWithOneConnection(Long id) { return connectionRepository.findListById(id); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) == 1 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( ( result. size ( ) ) > 0 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result. size ( ), org

[*] target: assertNotNull(result)
[-] pred:  constructs a new empty list

************************************
************************************
[+] input: findAllowedConnection() { when(connectionRepositoryMock.findAllowedByEntityId(anyString())).thenReturn(new Connection());  Connection result = connectionServiceMock.findAllowedConnection("entityId");  verify(connectionRepositoryMock, times(1)).findAllowedByEntityId(anyString()); "<AssertPlaceHolder>"; }
findAllowedConnection(String entityId) { return connectionRepository.findAllowedByEntityId(entityId); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findAllowedConnection(String arg ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findAllowedConnection(ContextContextContext ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. findAllowedConnection(MessageMessage ( n ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( new Connection());Connection ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: findAllByConnectionId() { when(metadataRetrieverServiceMock.getAllSamlMetadataById(anyLong(), anyInt(), anyInt())).thenReturn(MetadataProcessHelper.getPageSamlMetadataProcessResult());  Page<SamlMetadataProcessResult> result = controllerMock.findAllByConnectionId(1, 10, 1L);  verify(metadataRetrieverServiceMock, times(1)).getAllSamlMetadataById(anyLong(), anyInt(), anyInt()); "<AssertPlaceHolder>"; }
findAllByConnectionId(@RequestParam(name = "page") int pageIndex, @RequestParam(name = "size") int pageSize, @PathVariable("connection_id") Long connectionId) { return metadataRetrieverService.getAllSamlMetadataById(connectionId, pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, this. result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, this. result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, data )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, control )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: findBySamlMetadataProcessResultId() { when(metadataRetrieverServiceMock.getSamlMetadataById(anyLong(), anyInt(), anyInt())).thenReturn(MetadataProcessHelper.getPageSamlMetadataProcessError());  Page<SamlMetadataProcessError> result = controllerMock.findBySamlMetadataProcessResultId(1, 10, 1L);  verify(metadataRetrieverServiceMock, times(1)).getSamlMetadataById(anyLong(), anyInt(), anyInt()); "<AssertPlaceHolder>"; }
findBySamlMetadataProcessResultId(@RequestParam(name = "page") int pageIndex, @RequestParam(name = "size") int pageSize, @PathVariable("result_id") Long resultId) { return metadataRetrieverService.getSamlMetadataById(resultId, pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, this. result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( new Page<SamlMetadataProcessError ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, new Page<SamlMetadataProcessError ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, org.SamlMetadataProcessError> result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getProcessedMetadata() { when(metadataRetrieverServiceMock.getProcessedMetadata(anyLong())).thenReturn("metadata");  String result = controllerMock.getProcessedMetadata(1L);  verify(metadataRetrieverServiceMock, times(1)).getProcessedMetadata(anyLong()); "<AssertPlaceHolder>"; }
getProcessedMetadata(@PathVariable("result_id") Long resultId) { return metadataRetrieverService.getProcessedMetadata(resultId); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertNotNull(result)
[-] pred:  the name of the helppage

[*] target: assertNotNull(result)
[-] pred:  the name of the element

[*] target: assertNotNull(result)
[-] pred:  the name of the

************************************
************************************
[+] input: CollectSamlMetadataException { Map<String, String> collectMetadata = new HashMap<>(); collectMetadata.put("count", "1"); when(metadataProcessorServiceMock.collectSamlMetadata(anyString())).thenReturn(collectMetadata);  Map<String, String> result = controllerMock.collectMetadata("id");  verify(metadataProcessorServiceMock, times(1)).collectSamlMetadata(anyString()); "<AssertPlaceHolder>"; assertNotNull(result); }
collectMetadata(@PathVariable("id") String id) throws CollectSamlMetadataException { return metadataProcessorService.collectSamlMetadata(id); }
[*] target: assertEquals(result.size(), collectMetadata.size())
[-] pred:  org. junit. Assert. assertEquals ( collectMetadata, result )

[*] target: assertEquals(result.size(), collectMetadata.size())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(result.size(), collectMetadata.size())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(result.size(), collectMetadata.size())
[-] pred:  org. junit. Assert. assertSame ( collectMetadata, result

[*] target: assertEquals(result.size(), collectMetadata.size())
[-] pred:  , result )

************************************
************************************
[+] input: CollectSamlMetadataException { List<Connection> connections = new ArrayList<>(); connections.add(newConnection());  Map<String, String> expected = new HashMap<>(); expected.put("count", "1");  when(httpClientMock.execute(any(HttpGet.class))).thenReturn(httpResponseMock); when(httpResponseMock.getEntity()).thenReturn(httpEntityMock); when(httpEntityMock.getContent()).thenReturn(getClass().getClassLoader().getResourceAsStream("metadata/valid-metadata.xml")); when(connectionServiceMock.listWithAllConnections()).thenReturn(connections); doNothing().when(digidXClientMock).remoteLog(anyString(), nullable(Map.class));  Map<String, String> result = metadataProcessorServiceMock.collectSamlMetadata("all");  verify(connectionServiceMock, times(1)).listWithAllConnections(); "<AssertPlaceHolder>"; }
collectSamlMetadata(String id) throws CollectSamlMetadataException { Map<String, String> map = new HashMap<>(); List<Connection> list; LOGGER.info("Start collecting metadata!!"); digidXClient.remoteLog("1446", null);  try { list = id.equals("all") ? connectionService.listWithAllConnections() : connectionService.listWithOneConnection(Long.valueOf(id)); for (Connection con : list) startCollectMetadata(con, map); map.put("count", String.valueOf(list.size())); } catch (Exception e) { LOGGER.error("An error has occurred collecting metadata connections: {}", e.getMessage()); throw new CollectSamlMetadataException(e.getMessage()); } digidXClient.remoteLog("1447", map); return map; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( expected, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( expected, new java. util. HashMap ( result ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( expected, value )

[*] target: assertNotNull(result)
[-] pred:  , result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: IOException { // Connection, service and certificate expected values from metadata/valid-valid-metadata.xml Connection connection = newConnection(); Service service = newService(); List<Certificate> certificates = getServiceCertificates();  when(httpClientMock.execute(any(HttpGet.class))).thenReturn(httpResponseMock); when(httpResponseMock.getEntity()).thenReturn(httpEntityMock); when(httpEntityMock.getContent()).thenReturn(getClass().getClassLoader().getResourceAsStream("metadata/valid-metadata.xml")); when(serviceServiceMock.findAllowedServiceById(anyLong(), anyString())).thenReturn(service);  // Map can be null if no errors occur SamlMetadataProcessResult result = metadataProcessorServiceMock.startCollectMetadata(connection, null);  // Result "<AssertPlaceHolder>"; assertEquals(0, result.getTotalErrors()); assertEquals(3, result.getTotalProcessed()); assertEquals(0, result.getSamlMetadataProcessErrors().size()); assertEquals(3, service.getCertificates().size());  // Connection assertNotNull(result.getMetadata()); assertEquals(CertificateType.SIGNING, connection.getCertificates().get(0).getCertType());  // Service for (int i = 0; i<certificates.size(); i++) { assertEquals(certificates.get(i).getCachedCertificate(), service.getCertificates().get(i).getCachedCertificate()); assertEquals(certificates.get(i).getFingerprint(), service.getCertificates().get(i).getFingerprint()); assertEquals(certificates.get(i).getDistinguishedName(), service.getCertificates().get(i).getDistinguishedName()); assertEquals(certificates.get(i).getActiveFrom(), service.getCertificates().get(i).getActiveFrom()); assertEquals(certificates.get(i).getActiveUntil(), service.getCertificates().get(i).getActiveUntil()); assertEquals(certificates.get(i).getCertType(), service.getCertificates().get(i).getCertType()); } }
startCollectMetadata(Connection con, Map<String, String> map) { SamlMetadataProcessResult result = new SamlMetadataProcessResult(con.getId()); EntitiesDescriptor descriptor;  try { String metadataXML = getMetadataFromConnection(con); descriptor = convertMetadataXMLtoEntitiesDescriptor(metadataXML); String hash = getSignatureValue(descriptor.getSignature());  Optional<SamlMetadataProcessResult> process = samlMetadataProcessResultRepository.findByConnectionIdAndHash(con.getId(), hash);  if (process.isPresent()) return result;  updateMetadata(descriptor, con, map, result); result.setMetadata(metadataXML);  if (result.allEntriesSuccessful()) { result.setHash(hash); } } catch (InitializationException | ComponentInitializationException | UnmarshallingException | IOException | MetadataParseException e) { map.put("status", "failed"); LOGGER.error("Failed to collect/parse metadata: {}", e.getMessage()); result.addProcessError(e.getMessage(), ""); }  samlMetadataProcessResultRepository.saveAndFlush(result);  return result; }
[*] target: assertEquals(3, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. startCollectMetadata ( ) )

[*] target: assertEquals(3, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new at 0 0 0, result. startCollectMetadata ( ) )

[*] target: assertEquals(3, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new at 0 0, result. startCollectMetadata ( ) )

[*] target: assertEquals(3, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. startCollectMetadata ( ). size ( ) )

[*] target: assertEquals(3, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 0 ), result )

************************************
************************************
[+] input: IOException { Map<String, String> map = new HashMap<>(); Connection connection = new Connection(); connection.setMetadataUrl("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); connection.setSamlMetadata("samlmetadata"); connection.setEntityId("entity id");  when(httpClientMock.execute(any(HttpGet.class))).thenReturn(httpResponseMock); when(httpResponseMock.getEntity()).thenReturn(httpEntityMock); when(httpEntityMock.getContent()).thenReturn(getClass().getClassLoader().getResourceAsStream("metadata/valid-metadata.xml"));  SamlMetadataProcessResult result = metadataProcessorServiceMock.startCollectMetadata(connection, map);  "<AssertPlaceHolder>"; assertEquals(1, result.getTotalErrors()); assertEquals(0, result.getTotalProcessed()); assertEquals(1, result.getSamlMetadataProcessErrors().size()); assertEquals("failed", map.get("status")); assertEquals("EntityID aansluiting niet gevonden", result.getSamlMetadataProcessErrors().get(0).getErrorReason()); assertNotNull(result.getSamlMetadataProcessErrors().get(0).getService());  assertNotNull(result.getMetadata()); assertEquals(0, connection.getCertificates().size()); }
startCollectMetadata(Connection con, Map<String, String> map) { SamlMetadataProcessResult result = new SamlMetadataProcessResult(con.getId()); EntitiesDescriptor descriptor;  try { String metadataXML = getMetadataFromConnection(con); descriptor = convertMetadataXMLtoEntitiesDescriptor(metadataXML); String hash = getSignatureValue(descriptor.getSignature());  Optional<SamlMetadataProcessResult> process = samlMetadataProcessResultRepository.findByConnectionIdAndHash(con.getId(), hash);  if (process.isPresent()) return result;  updateMetadata(descriptor, con, map, result); result.setMetadata(metadataXML);  if (result.allEntriesSuccessful()) { result.setHash(hash); } } catch (InitializationException | ComponentInitializationException | UnmarshallingException | IOException | MetadataParseException e) { map.put("status", "failed"); LOGGER.error("Failed to collect/parse metadata: {}", e.getMessage()); result.addProcessError(e.getMessage(), ""); }  samlMetadataProcessResultRepository.saveAndFlush(result);  return result; }
[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_1 ( 0L ), result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_1 ( 0, 0 ), result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_3 ( 0L ), result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit, result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org

************************************
************************************
[+] input: IOException { Connection connection = newConnection();  when(httpClientMock.execute(any(HttpGet.class))).thenReturn(httpResponseMock); when(httpResponseMock.getEntity()).thenReturn(httpEntityMock); when(httpEntityMock.getContent()).thenReturn(getClass().getClassLoader().getResourceAsStream("metadata/valid-metadata.xml")); when(serviceServiceMock.findAllowedServiceById(anyLong(), anyString())).thenReturn(null);  SamlMetadataProcessResult result = metadataProcessorServiceMock.startCollectMetadata(connection, null);  "<AssertPlaceHolder>"; assertEquals(3, result.getTotalErrors()); assertEquals(3, result.getTotalProcessed()); assertEquals(3, result.getSamlMetadataProcessErrors().size()); assertEquals("Dienst: entityID bestaat niet", result.getSamlMetadataProcessErrors().get(0).getErrorReason()); assertNotNull(result.getSamlMetadataProcessErrors().get(0).getService());  assertNotNull(result.getMetadata()); assertEquals(CertificateType.SIGNING, connection.getCertificates().get(0).getCertType()); }
startCollectMetadata(Connection con, Map<String, String> map) { SamlMetadataProcessResult result = new SamlMetadataProcessResult(con.getId()); EntitiesDescriptor descriptor;  try { String metadataXML = getMetadataFromConnection(con); descriptor = convertMetadataXMLtoEntitiesDescriptor(metadataXML); String hash = getSignatureValue(descriptor.getSignature());  Optional<SamlMetadataProcessResult> process = samlMetadataProcessResultRepository.findByConnectionIdAndHash(con.getId(), hash);  if (process.isPresent()) return result;  updateMetadata(descriptor, con, map, result); result.setMetadata(metadataXML);  if (result.allEntriesSuccessful()) { result.setHash(hash); } } catch (InitializationException | ComponentInitializationException | UnmarshallingException | IOException | MetadataParseException e) { map.put("status", "failed"); LOGGER.error("Failed to collect/parse metadata: {}", e.getMessage()); result.addProcessError(e.getMessage(), ""); }  samlMetadataProcessResultRepository.saveAndFlush(result);  return result; }
[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertNotNull ( returned )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org

************************************
************************************
[+] input: IOException { Map<String, String> map = new HashMap<>(); Connection connection = newConnection();  when(httpClientMock.execute(any(HttpGet.class))).thenReturn(httpResponseMock); when(httpResponseMock.getEntity()).thenReturn(httpEntityMock); when(httpEntityMock.getContent()).thenReturn(getClass().getClassLoader().getResourceAsStream("metadata/invalid-signature-metadata.xml"));  SamlMetadataProcessResult result = metadataProcessorServiceMock.startCollectMetadata(connection, map);  "<AssertPlaceHolder>"; assertEquals(0, result.getTotalProcessed()); assertEquals(1, result.getTotalErrors()); assertEquals(1, result.getSamlMetadataProcessErrors().size()); assertEquals("failed", map.get("status")); assertEquals("Metadata signature invalid", result.getSamlMetadataProcessErrors().get(0).getErrorReason());  assertNull(result.getMetadata()); assertEquals(0, connection.getCertificates().size()); }
startCollectMetadata(Connection con, Map<String, String> map) { SamlMetadataProcessResult result = new SamlMetadataProcessResult(con.getId()); EntitiesDescriptor descriptor;  try { String metadataXML = getMetadataFromConnection(con); descriptor = convertMetadataXMLtoEntitiesDescriptor(metadataXML); String hash = getSignatureValue(descriptor.getSignature());  Optional<SamlMetadataProcessResult> process = samlMetadataProcessResultRepository.findByConnectionIdAndHash(con.getId(), hash);  if (process.isPresent()) return result;  updateMetadata(descriptor, con, map, result); result.setMetadata(metadataXML);  if (result.allEntriesSuccessful()) { result.setHash(hash); } } catch (InitializationException | ComponentInitializationException | UnmarshallingException | IOException | MetadataParseException e) { map.put("status", "failed"); LOGGER.error("Failed to collect/parse metadata: {}", e.getMessage()); result.addProcessError(e.getMessage(), ""); }  samlMetadataProcessResultRepository.saveAndFlush(result);  return result; }
[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 0 ), result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( new java. io. IOException ( 0L ), result )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. getTotalProcessed());. size ( ) )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. getResponseCode ( ) )

[*] target: assertEquals(0, result.getTotalUpdated())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. getTotalProcessed());. size ( ) )

************************************
************************************
[+] input: getAllSamlMetadataById() { when(resultRepositoryMock.findAllByConnectionIdOrderByCreatedAtDesc(1L, PageRequest.of(1, 10))).thenReturn(MetadataProcessHelper.getPageSamlMetadataProcessResult());  Page<SamlMetadataProcessResult> result = metadataRetrieverServiceMock.getAllSamlMetadataById(1L, 1, 10);  verify(resultRepositoryMock, times(1)).findAllByConnectionIdOrderByCreatedAtDesc(1L, PageRequest.of(1, 10)); "<AssertPlaceHolder>"; }
getAllSamlMetadataById(Long connectionId, int pageIndex, int pageSize) { return resultRepository.findAllByConnectionIdOrderByCreatedAtDesc(connectionId, PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result. getAllSamlMetadataProcessResult ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result. getAllSamlMetadataProcessResult )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getSamlMetadataById() { when(errorRepositoryMock.findBySamlMetadataProcessResultId(1L, PageRequest.of(1, 10))).thenReturn(MetadataProcessHelper.getPageSamlMetadataProcessError());  Page<SamlMetadataProcessError> result = metadataRetrieverServiceMock.getSamlMetadataById(1L, 1, 10);  verify(errorRepositoryMock, times(1)).findBySamlMetadataProcessResultId(1L, PageRequest.of(1, 10)); "<AssertPlaceHolder>"; }
getSamlMetadataById(Long resultId, int pageIndex, int pageSize) { return errorRepository.findBySamlMetadataProcessResultId(resultId, PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, this. result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, transform ( ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getProcessedMetadata() { SamlMetadataProcessResult processResult = new SamlMetadataProcessResult(); processResult.setMetadata("metadata"); Optional<SamlMetadataProcessResult> resultOptional = Optional.of(processResult);  when(resultRepositoryMock.findById(anyLong())).thenReturn(resultOptional);  String result = metadataRetrieverServiceMock.getProcessedMetadata(1L);  verify(resultRepositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
getProcessedMetadata(Long resultId) { return resultRepository.findById(resultId).map(SamlMetadataProcessResult::getMetadata).orElse(null); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 8, result. length ( ) )

************************************
************************************
[+] input: processedMetadataNotFound() { when(resultRepositoryMock.findById(anyLong())).thenReturn(Optional.empty());  String result = metadataRetrieverServiceMock.getProcessedMetadata(1L);  verify(resultRepositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
getProcessedMetadata(Long resultId) { return resultRepository.findById(resultId).map(SamlMetadataProcessResult::getMetadata).orElse(null); }
[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( """" ) )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertThat ( result. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. Matchers. is ( """" ) )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

************************************
************************************
[+] input: validRequestTest() { Connection connection = newConnection(SAML_COMBICONNECT, true, true, true); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection); when(serviceServiceMock.serviceExists(any(Connection.class), anyString(), anyString())).thenReturn(newService(true)); doReturn("reducedMetadata").when(metadataRetrieverServiceMock).generateReducedMetadataString(any(Connection.class), anyString());  SamlMetadataResponse result = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals("reducedMetadata", result.getSamlMetadata()); assertEquals(20, (long) result.getMinimumReliabilityLevel()); assertEquals(34, (long) result.getLegacyWebserviceId()); assertEquals("app.nl/return_url", result.getAppReturnUrl()); assertEquals(true, result.getAppActive()); assertEquals("Dienst", result.getServiceName()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(STATUS_OK.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(STATUS_OK.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, true )

[*] target: assertEquals(STATUS_OK.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. toString ( open ), result. resolveSamlMetadata ( ) )

[*] target: assertEquals(STATUS_OK.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. toString ( lets ), result. resolveSamlMetadata ( ) )

[*] target: assertEquals(STATUS_OK.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. open ( connection. resolveSamlMetadata ( ) ), result )

************************************
************************************
[+] input: connectionNotFoundTest() { when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(null); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(CONNECTION_NOT_FOUND.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( out. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( returned. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( returned )

************************************
************************************
[+] input: connectionInactiveTest() { Connection connection = newConnection(SAML_COMBICONNECT, false, true, true); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(CONNECTION_INACTIVE.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(CONNECTION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertTrue ( connection. resolveSamlMetadata ( ).()); ( ) )

[*] target: assertEquals(CONNECTION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( out. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( returned. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertTrue ( connection. resolveSamlMetadata ( ).()); )

************************************
************************************
[+] input: organizationInactiveTest() { Connection connection = newConnection(SAML_COMBICONNECT, true, false, true); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(ORGANIZATION_INACTIVE.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(ORGANIZATION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( out. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( returned. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( actual. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org

************************************
************************************
[+] input: organizationRoleInactiveTest() { Connection connection = newConnection(SAML_COMBICONNECT, true, true, false); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(ORGANIZATION_ROLE_INACTIVE.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(ORGANIZATION_ROLE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_ROLE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( connection. resolveSamlMetadata ( ), SamlMetadataResponse. getRequest getRequest ) )

[*] target: assertEquals(ORGANIZATION_ROLE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( connection. resolveSamlMetadata ( ), SamlMetadataResponse. getRequest getRequest getRequest ( ) )

[*] target: assertEquals(ORGANIZATION_ROLE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( out. resolveSamlMetadata ( ) )

[*] target: assertEquals(ORGANIZATION_ROLE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( connection. resolveSamlMetadata ( ), SamlMetadataResponse. getRequest getRequestCompletedMappingMapping )

************************************
************************************
[+] input: serviceNotFoundTest() { Connection connection = newConnection(SAML_COMBICONNECT, true, true, true); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection);  when(serviceServiceMock.serviceExists(any(Connection.class), anyString(), anyString())).thenReturn(null); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(SERVICE_NOT_FOUND.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(SERVICE_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( response. resolveSamlMetadata ( ) )

[*] target: assertEquals(SERVICE_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, SamlMetadataResponse. resolveSamlMetadata ( ) )

[*] target: assertEquals(SERVICE_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertTrue ( connection. resolveSamlMetadata ( ).()); ( ) )

[*] target: assertEquals(SERVICE_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( connection, SamlMetadataResponse. resolveSamlMetadata ( ) )

[*] target: assertEquals(SERVICE_NOT_FOUND.name(), response.getRequestStatus())
[-] pred:  org

************************************
************************************
[+] input: serviceInactiveTest() { Connection connection = newConnection(SAML_COMBICONNECT, true, true, true); when(connectionServiceMock.getConnectionByEntityId(anyString())).thenReturn(connection);  when(serviceServiceMock.serviceExists(any(Connection.class), anyString(), anyString())).thenReturn(newService(false)); SamlMetadataResponse response = metadataRetrieverServiceMock.resolveSamlMetadata(newMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(SERVICE_INACTIVE.label, response.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(SERVICE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertFalse ( SamlMetadataResponse. resolveSamlMetadata ( ).()); ( ) )

[*] target: assertEquals(SERVICE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( SamlMetadataResponse. resolveSamlMetadata ( ) )

[*] target: assertEquals(SERVICE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertFalse ( SamlMetadataResponse. resolveSamlMetadata ( connection ) )

[*] target: assertEquals(SERVICE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org. junit. Assert. assertFalse ( SamlMetadataResponse. resolveSamlMetadata ( ).()); )

[*] target: assertEquals(SERVICE_INACTIVE.name(), response.getRequestStatus())
[-] pred:  org

************************************
************************************
[+] input: emptyRequestTest() { SamlMetadataResponse result = metadataRetrieverServiceMock.resolveSamlMetadata(new SamlMetadataRequest());  "<AssertPlaceHolder>"; assertEquals(CONNECTION_NOT_FOUND.label, result.getErrorDescription()); }
resolveSamlMetadata(SamlMetadataRequest samlMetadataRequest) { LOGGER.info("Cache not found for saml-metadata {}", samlMetadataRequest.hashCode());  Connection connection = connectionService.getConnectionByEntityId(samlMetadataRequest.getConnectionEntityId());  MetadataResponseStatus metadataResponseStatus = null; nl.logius.digid.dc.domain.service.Service service = null;  if (connection == null) { metadataResponseStatus = CONNECTION_NOT_FOUND; } else if (!connection.getStatus().isAllowed()) { metadataResponseStatus = CONNECTION_INACTIVE; } else if (!connection.getOrganization().getStatus().isAllowed()) { metadataResponseStatus = ORGANIZATION_INACTIVE; } else if (Boolean.FALSE.equals(connection.getOrganizationRole().getStatus().isAllowed())) { metadataResponseStatus = ORGANIZATION_ROLE_INACTIVE; } else { String serviceUUID = samlMetadataRequest.getServiceUuid() == null ? getServiceUUID(connection, samlMetadataRequest.getServiceEntityId(), samlMetadataRequest.getServiceIdx()) : samlMetadataRequest.getServiceUuid(); samlMetadataRequest.setServiceUuid(serviceUUID); service = serviceService.serviceExists(connection, samlMetadataRequest.getServiceEntityId(), serviceUUID); if (service == null) { metadataResponseStatus = SERVICE_NOT_FOUND; } else if (!service.getStatus().isAllowed()) { metadataResponseStatus = SERVICE_INACTIVE; } }  if (metadataResponseStatus != null) { return metadataResponseMapper.mapErrorResponse(metadataResponseStatus.name(), metadataResponseStatus.label); } else { String samlMetadata = generateReducedMetadataString(connection, service.getEntityId()); return metadataResponseMapper.mapSuccessResponse(samlMetadata, connection, service, STATUS_OK.name()); } }
[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getSamlMetadataRequest()); )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( """", result. resolveSamlMetadata ( ) )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertSame ( result, true )

[*] target: assertEquals(CONNECTION_NOT_FOUND.name(), result.getRequestStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, result )

************************************
************************************
[+] input: getOrganizationByName() { when(organizationServiceMock.getOrganizationByName(anyString())).thenReturn(newOrganization());  Organization result = controllerMock.getByName("test");  "<AssertPlaceHolder>"; verify(organizationServiceMock, times(1)).getOrganizationByName(anyString()); assertNotNull(result); }
getByName(@PathVariable("name") String name) { return organizationService.getOrganizationByName(name); }
[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertSame ( newOrganization()); Organization ( ), result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertSame ( newOrganization());Metadata ( ), result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertSame ( newOrganization());Throwable ( ), result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertSame ( newOrganization());Graph )

************************************
************************************
[+] input: getOrganizationById() { when(organizationServiceMock.getOrganizationById(1L)).thenReturn(newOrganization());  Organization result = controllerMock.getById(1L);  "<AssertPlaceHolder>"; verify(organizationServiceMock, times(1)).getOrganizationById(anyLong()); assertNotNull(result); }
getById(@PathVariable("id") Long id) { return organizationService.getOrganizationById(id); }
[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertSame ( new Organization ( ), result )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof org. msn. intValue ) )

[*] target: assertEquals(newOrganization().getName(), result.getName())
[-] pred:  )

************************************
************************************
[+] input: getAllOrganizations() { when(organizationServiceMock.getAllOrganizations(1, 10)).thenReturn(getPageOrganizations());  Page<Organization> result = controllerMock.getAll(1, 10);  verify(organizationServiceMock, times(1)).getAllOrganizations(anyInt(), anyInt()); "<AssertPlaceHolder>"; }
getAll(@RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { return organizationService.getAllOrganizations(pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, get )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, true )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, null )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: createOrganization() { doNothing().when(organizationServiceMock).saveOrganization(any(Organization.class));  Organization result = controllerMock.create(new Organization());  verify(organizationServiceMock, times(1)).saveOrganization(any(Organization.class)); "<AssertPlaceHolder>"; }
create(@RequestBody Organization organization) { organization.getOrganizationRoles().forEach(role -> role.setOrganization(organization)); organizationService.saveOrganization(organization); return organization; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. create(@RequestBody OrganizationException ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. create(@RequestBody Organization ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. create(@RequestBody Organization )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: updateOrganization() { Organization organization = new Organization(); organization.setId(1L); doNothing().when(organizationServiceMock).saveOrganization(any(Organization.class));  Organization result = controllerMock.update(1L, organization);  verify(organizationServiceMock, times(1)).saveOrganization(any(Organization.class)); "<AssertPlaceHolder>"; }
update(@PathVariable("id") Long id, @RequestBody Organization organization) { organization.getOrganizationRoles().forEach(role -> role.setOrganization(organization)); organizationService.saveOrganization(organization); return organization; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( organization, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( org, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( organization, result

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getOrganizationByName() { Optional<Organization> organizationOptional = Optional.of(newOrganization()); when(repositoryMock.findByName(anyString())).thenReturn(organizationOptional);  Organization result = organizationServiceMock.getOrganizationByName("organization");  verify(repositoryMock, times(1)).findByName(anyString()); "<AssertPlaceHolder>"; }
getOrganizationByName(String name) { Optional<Organization> conf = organizationRepository.findByName(name); if (!conf.isPresent()) { throw new NotFoundException("Could not find organization with name: " + name); } return conf.get(); }
[*] target: assertEquals(organizationOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( organizationOptional, result )

[*] target: assertEquals(organizationOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( orgOptional, result )

[*] target: assertEquals(organizationOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(organizationOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(organizationOptional.get().getName(), result.getName())
[-] pred:  organizationOptional )

************************************
************************************
[+] input: getOrganizationById() { Optional<Organization> organizationOptional = Optional.of(newOrganization()); when(repositoryMock.findById(anyLong())).thenReturn(organizationOptional);  Organization result = organizationServiceMock.getOrganizationById(1L);  verify(repositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
getOrganizationById(Long id) { Optional<Organization> conf = organizationRepository.findById(id); if (!conf.isPresent()) { throw new NotFoundException("Could not find organization with id: " + id); } return conf.get(); }
[*] target: assertEquals(organizationOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( organizationOptional ) )

[*] target: assertEquals(organizationOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(organizationOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertTrue ( ( result == organizationOptional ) )

[*] target: assertEquals(organizationOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals(organizationOptional.get().getId(), result.getId())
[-] pred:  org

************************************
************************************
[+] input: getAllOrganizations() { when(repositoryMock.findAll(any(Pageable.class))).thenReturn(getPageOrganizations());  Page<Organization> result = organizationServiceMock.getAllOrganizations(1, 10);  verify(repositoryMock, times(1)).findAll(any(Pageable.class)); "<AssertPlaceHolder>"; }
getAllOrganizations(int pageIndex, int pageSize) { return organizationRepository.findAll(PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( getPageOrganizations, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertFalse ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( getPageOrganizations()); Page<Organizations, result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: searchAllOrganizations() { when(repositoryMock.searchAll(any(Organization.class), any(OrganizationRole.class), any(Pageable.class))).thenReturn(getPageOrganizations());  Page<Organization> result = organizationServiceMock.searchAllOrganizations(newOrganization(), 1, 10);  verify(repositoryMock, times(1)).searchAll(any(Organization.class), any(OrganizationRole.class), any(Pageable.class)); "<AssertPlaceHolder>"; }
searchAllOrganizations(Organization org, int pageIndex, int pageSize) { OrganizationRole orgRole = org.getOrganizationRoles().isEmpty() ? new OrganizationRole() : org.getOrganizationRoles().get(0); return organizationRepository.searchAll(org, orgRole, PageRequest.of(pageIndex, pageSize)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame (getPageOrganizations()); Page<Organization> result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( getPageOrganizations()); Page<Organization> result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame (getPageOrganizations()); Page<Organization > result, result )

************************************
************************************
[+] input: IOException { String csvData = """SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS""";  mockAdmin(); mockconnection();  Map<String, Object> resultMap = csvService.processCsvFile(encodeCsv(csvData), false);  "<AssertPlaceHolder>"; assertTrue(((ArrayList) resultMap.get("failed")).isEmpty());  List<String> succeededArray = new ArrayList<>(); succeededArray.add("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); assertArrayEquals(((ArrayList) resultMap.get("succeeded")).toArray(), succeededArray.toArray()); }
processCsvFile(String encodedCsvData, boolean dryRun) throws JsonProcessingException { services = new HashMap<>(); serviceParentChildren = new HashMap<>(); Map<String, Object> result = super.processCsvFile(encodedCsvData, dryRun); if (!services.isEmpty()) { retrieveLegacyServiceIds(); saveAll(dryRun); processServiceParentChildren(serviceParentChildren, dryRun); } return result; }
[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) > 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 2 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( resultMap. isEmpty ( ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 3 ) )

************************************
************************************
[+] input: IOException { String csvData = """SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS""";  Service service = new Service(); Optional<Service> optService = Optional.of(service); when(serviceRepositoryMock.findFirstByServiceUuid("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")).thenReturn(optService);  mockAdmin(); mockconnection();  Map<String, Object> resultMap = csvService.processCsvFile(encodeCsv(csvData), false);  "<AssertPlaceHolder>"; assertTrue(((ArrayList) resultMap.get("failed")).isEmpty());  List<String> succeededArray = new ArrayList<>(); succeededArray.add("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); assertArrayEquals(((ArrayList) resultMap.get("succeeded")).toArray(), succeededArray.toArray()); assertEquals((Long)13L, service.getLegacyServiceId()); }
processCsvFile(String encodedCsvData, boolean dryRun) throws JsonProcessingException { services = new HashMap<>(); serviceParentChildren = new HashMap<>(); Map<String, Object> result = super.processCsvFile(encodedCsvData, dryRun); if (!services.isEmpty()) { retrieveLegacyServiceIds(); saveAll(dryRun); processServiceParentChildren(serviceParentChildren, dryRun); } return result; }
[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) > 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 2 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 1 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 3 ) )

************************************
************************************
[+] input: UnsupportedEncodingException { // Contains 2 duplicate UUID, 2 empty UUID String csvDataist<String> failedArray = new ArrayList<>(); failedArray.add("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");  Map<String, Object> resultMap = csvService.processCsvFile(encodeCsv(csvData), false);  "<AssertPlaceHolder>"; assertTrue(((List) resultMap.get("failed")).contains("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); }
processCsvFile(String encodedCsvData, boolean dryRun) throws JsonProcessingException { services = new HashMap<>(); serviceParentChildren = new HashMap<>(); Map<String, Object> result = super.processCsvFile(encodedCsvData, dryRun); if (!services.isEmpty()) { retrieveLegacyServiceIds(); saveAll(dryRun); processServiceParentChildren(serviceParentChildren, dryRun); } return result; }
[*] target: assertEquals("Bestand niet verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 0 ) )

[*] target: assertEquals("Bestand niet verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( resultMap. isEmpty ( ) )

[*] target: assertEquals("Bestand niet verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 4 ) )

[*] target: assertEquals("Bestand niet verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 2 ) )

[*] target: assertEquals("Bestand niet verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. size ( ) ) == 5 ) )

************************************
************************************
[+] input: IOException { mockconnection(); String csvData = """SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS""";  Service service = new Service(); service.setDigid(false); service.setServiceOrganizationRoles(List.of(new ServiceOrganizationRole(), new ServiceOrganizationRole())); Optional<Service> optService = Optional.of(service); when(serviceRepositoryMock.findFirstByServiceUuid("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")).thenReturn(optService);  Map<String, Object> resultMap = csvService.processCsvFile(encodeCsv(csvData), false);  String expectedValue = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"; "<AssertPlaceHolder>"; assertTrue(((ArrayList) resultMap.get("succeeded")).isEmpty()); assertTrue(((ArrayList) resultMap.get("failed")).size() == 1); assertTrue(((ArrayList) resultMap.get("failed")).contains(expectedValue)); }
processCsvFile(String encodedCsvData, boolean dryRun) throws JsonProcessingException { services = new HashMap<>(); serviceParentChildren = new HashMap<>(); Map<String, Object> result = super.processCsvFile(encodedCsvData, dryRun); if (!services.isEmpty()) { retrieveLegacyServiceIds(); saveAll(dryRun); processServiceParentChildren(serviceParentChildren, dryRun); } return result; }
[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. get ( 0 ) ) instanceof java. util. UUID ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. get ( 0 ) ) > 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. resultMap. get ( 0 ) ) > 0 ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertTrue ( ( ( resultMap. get ( 0 ) ) instanceof java. util. Core ) )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit, resultMap )

************************************
************************************
[+] input: IOException { String csvData = """SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS""";  Service service = new Service(); Optional<Service> optService = Optional.of(service); when(serviceRepositoryMock.findFirstByServiceUuid("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")).thenReturn(optService); when(serviceRepositoryMock.findServicesByUuidAndEntityId("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")).thenReturn(List.of(new Service(), new Service()));  Map<String, Object> resultMap = csvService.processCsvFile(encodeCsv(csvData), false);  "<AssertPlaceHolder>";  String expectedValue = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"; assertTrue(((ArrayList) resultMap.get("failed")).size() == 1); assertTrue(((ArrayList) resultMap.get("failed")).contains(expectedValue));  assertTrue(((ArrayList) resultMap.get("succeeded")).isEmpty()); }
processCsvFile(String encodedCsvData, boolean dryRun) throws JsonProcessingException { services = new HashMap<>(); serviceParentChildren = new HashMap<>(); Map<String, Object> result = super.processCsvFile(encodedCsvData, dryRun); if (!services.isEmpty()) { retrieveLegacyServiceIds(); saveAll(dryRun); processServiceParentChildren(serviceParentChildren, dryRun); } return result; }
[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertEquals ( new ServiceToRead ( ), resultMap )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertEquals ( new ServiceUsageEntries ( ), resultMap )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertNotNull ( resultMap )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org. junit. Assert. assertEquals ( new ServicePluginHashMap ( ), resultMap )

[*] target: assertEquals("Bestand verwerkt", resultMap.get("result"))
[-] pred:  org

************************************
************************************
[+] input: getServiceByName() { Service service = new Service(); service.setName("test");  when(serviceServiceMock.getServiceByName("test")).thenReturn(service); Service result = controller.getByName("test");  "<AssertPlaceHolder>"; verify(serviceServiceMock, times(1)).getServiceByName(anyString()); }
getByName(@PathVariable("name") String name) { return serviceService.getServiceByName(name); }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertSame ( service, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( service, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertSame ( result, service )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertSame ( device, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert.Same ( service, result )

************************************
************************************
[+] input: getServiceById() { Service service = new Service(); service.setName("test");  when(serviceServiceMock.getServiceById(anyLong())).thenReturn(service); Service result = controller.getById(1L);  "<AssertPlaceHolder>"; verify(serviceServiceMock, times(1)).getServiceById(anyLong()); }
getById(@PathVariable("id") Long id) { return serviceService.getServiceById(id); }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertSame ( service, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( service, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  service )

[*] target: assertEquals("test", result.getName())
[-] pred:  org

[*] target: assertEquals("test", result.getName())
[-] pred:  )

************************************
************************************
[+] input: getServiceByName() { Optional<Service> serviceOptional = Optional.of(newService()); when(serviceRepositoryMock.findByName(anyString())).thenReturn(serviceOptional);  Service result = serviceServiceMock.getServiceByName("service");  verify(serviceRepositoryMock, times(1)).findByName(anyString()); "<AssertPlaceHolder>"; }
getName() { return name; }
[*] target: assertEquals(serviceOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getName() ( ) )

[*] target: assertEquals(serviceOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getName() ) )

[*] target: assertEquals(serviceOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( ""name"", result. getName() ( ) )

[*] target: assertEquals(serviceOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getName() )

[*] target: assertEquals(serviceOptional.get().getName(), result.getName())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getName() ( ).()); ( ) )

************************************
************************************
[+] input: getServiceById() { Optional<Service> serviceOptional = Optional.of(newService()); when(serviceRepositoryMock.findById(anyLong())).thenReturn(serviceOptional);  Service result = serviceServiceMock.getServiceById(1L);  verify(serviceRepositoryMock, times(1)).findById(anyLong()); "<AssertPlaceHolder>"; }
getId() { return id; }
[*] target: assertEquals(serviceOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getId() ( ), org. hamcrest. CoreMatchers. is ( id ) )

[*] target: assertEquals(serviceOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertThat ( result. getId() ( ), org. hamcrest. Matchers. is ( id ) )

[*] target: assertEquals(serviceOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( """", result. getId() ( ) )

[*] target: assertEquals(serviceOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( ""1"", result. getId() ( ) )

[*] target: assertEquals(serviceOptional.get().getId(), result.getId())
[-] pred:  org. junit. Assert. assertEquals ( ""m"", result. getId() ( ) )

************************************
************************************
[+] input: testCreateAp01Test() { String testBsn = "SSSSSSSSS"; Ap01 result = classUnderTest.createAp01(testBsn);  "<AssertPlaceHolder>"; assertEquals(0, result.getHerhaling()); assertEquals("SSSSSSSS", result.getRandomKey()); }
createAp01(String bsn) { Ap01 ap01 = new Ap01(); Container container = new Container(); container.setNummer(CategorieUtil.CATEGORIE_IDENTIFICATIENUMMERS);  Element bsnElement = new Element(); bsnElement.setNummer(CategorieUtil.ELEMENT_BURGERSERVICENUMMER); bsnElement.setValue(bsn);  container.getElement().add(bsnElement); ap01.getCategorie().add(container); ap01.setHerhaling(0); ap01.setRandomKey("SSSSSSSS");  return ap01; }
[*] target: assertEquals(testBsn, CategorieUtil.findBsn(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new Ap01, result. createAp01(TestUtils )

[*] target: assertEquals(testBsn, CategorieUtil.findBsn(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new Ap01, result. createAp01(TestListn )

[*] target: assertEquals(testBsn, CategorieUtil.findBsn(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new Ap01 ( result. createAp01 ( ) ), new Ap01 )

[*] target: assertEquals(testBsn, CategorieUtil.findBsn(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new Ap01 ( result. createAp01 ( ) ), result )

[*] target: assertEquals(testBsn, CategorieUtil.findBsn(result.getCategorie()))
[-] pred:  org

************************************
************************************
[+] input: testCreateAv01Test() { String testANummer = "SSSSSSSSS"; Av01 result = classUnderTest.createAv01(testANummer);  "<AssertPlaceHolder>"; assertEquals(0, result.getHerhaling()); assertEquals("SSSSSSSS", result.getRandomKey()); }
createAv01(String aNummer) { Av01 av01 = new Av01(); Container container = new Container(); container.setNummer(CategorieUtil.CATEGORIE_IDENTIFICATIENUMMERS);  Element aNummerElement = new Element(); aNummerElement.setNummer(CategorieUtil.ELEMENT_A_NUMMER); aNummerElement.setValue(aNummer);  container.getElement().add(aNummerElement); av01.getCategorie().add(container); av01.setHerhaling(0); av01.setRandomKey("SSSSSSSS");  return av01; }
[*] target: assertEquals(testANummer, CategorieUtil.findANummer(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( testANummer ), result. createAv01 ( ) )

[*] target: assertEquals(testANummer, CategorieUtil.findANummer(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. String ( testANummer ), result. createAv01 ( ) )

[*] target: assertEquals(testANummer, CategorieUtil.findANummer(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( testANummer ), result. createAv01 ( ) )

[*] target: assertEquals(testANummer, CategorieUtil.findANummer(result.getCategorie()))
[-] pred:  org. junit. Assert. assertEquals ( new result.v01 ( ), result. createAv01 ( ) )

[*] target: assertEquals(testANummer, CategorieUtil.findANummer(result.getCategorie()))
[-] pred:  org

************************************
************************************
[+] input: testAm1ResponseSuccess() { setupWireMock();  try { "<AssertPlaceHolder>"; } catch (BsnkException ex) { fail(ex.getMessage()); } }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( client. providePPRequest ( control ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( manager. providePPRequest ( control ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( manager. providePPRequest ( request ), org. hamcrest. Matchers. is ( true ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  )

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_authorization_error_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, n )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_document_rejected_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("DocumentRejected", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( mmResponseTemplate, org. hamcrest. CoreMatchers. is ( ex ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ppResponseTemplate, org. hamcrest. CoreMatchers. is ( ex ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ex, org. hamcrest. CoreMatchers. is ( ppResponseTemplate ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine ( filePath ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_not_enough_info_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("NotEnoughInfo", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine ( filePath ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( ex, ppResponseTemplate )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, n )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_not_found_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("NotFound", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine ( filePath ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertSame ( this. fail, ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_not_unique_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("NotUnique", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine ( filePath ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_provisioning_refused_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("ProvisioningRefused", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ex, org. hamcrest. CoreMatchers. is ( ppResponseTemplate ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ppResponseTemplate, org. hamcrest. CoreMatchers. is ( ex ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( mmResponseTemplate, org. hamcrest. CoreMatchers. is ( ex ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine ( filePath ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_syntax_error_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, msg )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, n )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_fault_temporarily_unavailable_unsigned.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ppResponseTemplate, org. hamcrest. CoreMatchers. is ( ex ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this. fail, n )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_invalid_xml.xml"; this.mockResponseBody = Files.readString(Paths.get(filePath));  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: testResponseServerError() { wireMockServer.start(); wireMockServer.stubFor(post("/bsnk_stub/activateBSN") .willReturn(serverError().withHeader("Content-Type", "text/xml").withBody("Internal server error")));  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertSame ( diagnostics, ex. providePPRequest ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( diagnostics, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( diagnostics, ex. providePPRequest ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new net. URI ( this. source ), ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertSame ( diagnostics, ex. providePPRequest(ProvidePPPPCAOptimized2 )

************************************
************************************
[+] input: BsnkException { setupWireMock();  client.providePPRequest(request);  wireMockServer.verify(postRequestedFor(urlPathEqualTo("/bsnk_stub/activateBSN")).withHeader("Content-Type", containing("xml"))); ServeEvent serveEvent = wireMockServer.getAllServeEvents().get(0); String requestBody = new String(serveEvent.getRequest().getBody()); "<AssertPlaceHolder>"; assertTrue(requestBody .contains("<ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"")); assertTrue(requestBody.contains("<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"")); assertTrue(requestBody.contains("<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"")); assertTrue(requestBody.contains( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertTrue(requestBody .contains("<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#""))
[-] pred:  org. junit. Assert. assertEquals ( getContextEvent, requestBody )

[*] target: assertTrue(requestBody .contains("<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#""))
[-] pred:  org. junit. Assert. assertEquals ( org. ServeEvent, requestBody )

[*] target: assertTrue(requestBody .contains("<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#""))
[-] pred:  org. junit. Assert. assertEquals ( this. requestBody, requestBody )

[*] target: assertTrue(requestBody .contains("<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#""))
[-] pred:  org. junit. Assert. assertEquals ( serveEvent, requestBody )

[*] target: assertTrue(requestBody .contains("<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#""))
[-] pred:  org. junit. Assert. assertEquals ( containExpected, requestBody )

************************************
************************************
[+] input: BsnkException { setupWireMock();  client.providePPRequest(request);  wireMockServer.verify(postRequestedFor(urlPathEqualTo("/bsnk_stub/activateBSN")).withHeader("Content-Type", containing("xml"))); ServeEvent serveEvent = wireMockServer.getAllServeEvents().get(0); String requestBody = new String(serveEvent.getRequest().getBody());  "<AssertPlaceHolder>";  assertTrue(requestBody.contains(""" </wsa:MessageID>\ <wsa:To>http://localhost:7666/bsnk_stub/activateBSN</wsa:To>\ <wsa:ReplyTo>\ <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>\ </wsa:ReplyTo>""")); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertTrue(requestBody.contains(""" <wsa:Action>urn:nl-gdi-eid:1.0:webservices:ProvidePP_PPCAOptimizedRequest</wsa:Action>\ <wsa:MessageID>urn:uuid:"""))
[-] pred:  org. junit. Assert. assertThat ( requestBody, org. hamcrest. CoreMatchers. is ( serveEvent ) )

[*] target: assertTrue(requestBody.contains(""" <wsa:Action>urn:nl-gdi-eid:1.0:webservices:ProvidePP_PPCAOptimizedRequest</wsa:Action>\ <wsa:MessageID>urn:uuid:"""))
[-] pred:  org. junit. Assert. assertEquals ( containExpected, requestBody )

[*] target: assertTrue(requestBody.contains(""" <wsa:Action>urn:nl-gdi-eid:1.0:webservices:ProvidePP_PPCAOptimizedRequest</wsa:Action>\ <wsa:MessageID>urn:uuid:"""))
[-] pred:  org. junit. Assert. assertEquals ( containingExpected, requestBody )

[*] target: assertTrue(requestBody.contains(""" <wsa:Action>urn:nl-gdi-eid:1.0:webservices:ProvidePP_PPCAOptimizedRequest</wsa:Action>\ <wsa:MessageID>urn:uuid:"""))
[-] pred:  org. junit. Assert. assertEquals ( this. requestBody, requestBody )

[*] target: assertTrue(requestBody.contains(""" <wsa:Action>urn:nl-gdi-eid:1.0:webservices:ProvidePP_PPCAOptimizedRequest</wsa:Action>\ <wsa:MessageID>urn:uuid:"""))
[-] pred:  org. junit. Assert. assertEquals ( aboutEvent, requestBody )

************************************
************************************
[+] input: IOException { String ppResponseTemplate = Files.readString(Paths.get(this.ppResponsePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.X509_KEY_IDENTIFIER);  setupWireMock();  try { "<AssertPlaceHolder>"; } catch (BsnkException ex) { fail(ex.getMessage()); } }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( results. providePPRequest ( ppResponseTemplate ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( this.mockResponseBody ) ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( results. providePPRequest ( ppResponseTemplate ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( this.getCause()); ) ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( this. adapter. providePPRequest ( ppResponseTemplate ), org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( this.mockResponseBody ) ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org. junit. Assert. assertThat ( mmResponseTemplate, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( this.mockResponseBody ) ) )

[*] target: assertEquals(2, client.providePPRequest(request).size())
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_valid_unsigned.xml"; this.mockResponseBody = Files.readString(Paths.get(filePath));  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ex, org. hamcrest. CoreMatchers. is ( this.mockResponseBody ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNotNull ( ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_no_keyinfo.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BsnkActivateSoapFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( msg, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( ppResponseTemplate, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( ex, ppResponseTemplate )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationLineLineLine, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_tampered_signed_info.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("SignatureValidationFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertThat ( ex, org. hamcrest. CoreMatchers. is ( ppResponseTemplate ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( msg, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( ex, ppResponseTemplate )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_tampered_body.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("SignatureValidationFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( msg, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( ex, ppResponseTemplate )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new BsnkException("SignatureValidationFault", ex. getMessage ( ), filePath )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org

************************************
************************************
[+] input: IOException { this.signingHelper = new SigningHelper("src/test/resources/certs/tls_keystore/keystore.pkcs12", "SSSSSSSSSSSSSSSSSSS");  String filePath = "src/test/resources/responses/ProvidePP_PPCAOptimizedResponse_tampered_body.xml"; String ppResponseTemplate = Files.readString(Paths.get(filePath)); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.ISSUER_SERIAL);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("SignatureValidationFault", ex.getFaultReason()); }
providePPRequest(ProvidePPPPCAOptimizedRequest request) throws BsnkException { try { return ((BSNKActivatePort) this.bindingProvider).bsnkProvidePPPPCAOptimized(request) .getPolymorphicPseudonyms(); } catch (BSNKProvidePolymorphicFault ex) { throw new BsnkException(ex); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BsnkActivateSoapFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new this.mockResponseBody ( ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new this. getErrorRecords ( ), ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( 0, ex. getMessage ( ) )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertNull ( ex )

[*] target: assertThrows(BsnkException.class, () -> client.providePPRequest(request))
[-] pred:  org. junit. Assert. assertEquals ( new this. getErrorRecords ( ), ex )

************************************
************************************
[+] input: testValidResponseSuccess() { setupWireMock();  try { "<AssertPlaceHolder>"; } catch (BsnkException ex) { fail(ex.getMessage()); } }
provideDep(ProvideDEPsRequest request) throws BsnkException { try { return ((BSNKDEPPort) this.bindingProvider).bsnkProvideDEPs(request).getDirectEncryptedPseudonyms(); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BSNKProvideDEPFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } catch (BSNKProvideDEPFault ex) { throw new BsnkException("BSNKProvideDEPFault", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( manager. provideDep(Providenyms();, org. hamcrest. CoreMatchers. is ( metaData ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( client. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( manager. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( manager. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( client. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( 0 ) )

************************************
************************************
[+] input: IOException { String ppResponseTemplate = Resources.toString(provideDepResponseFile.getURL(), StandardCharsets.UTF_8); this.mockResponseBody = this.signingHelper.sign(ppResponseTemplate, WSConstants.X509_KEY_IDENTIFIER);  setupWireMock();  try { "<AssertPlaceHolder>"; } catch (BsnkException ex) { fail(ex.getMessage()); } }
provideDep(ProvideDEPsRequest request) throws BsnkException { try { return ((BSNKDEPPort) this.bindingProvider).bsnkProvideDEPs(request).getDirectEncryptedPseudonyms(); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BSNKProvideDEPFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } catch (BSNKProvideDEPFault ex) { throw new BsnkException("BSNKProvideDEPFault", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( this.mockResponseBody. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( this.mockResponseBody ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, ppResponseTemplate )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( this.mockResponseBody. provideDep(Providenym(); ), org. hamcrest. CoreMatchers. is ( this.mockResponseBody ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( this.mockResponseBody. provideDep(Providenyms(); ), org. hamcrest. CoreMatchers. is ( this.mockResponseBody ) )

[*] target: assertEquals(1, client.provideDep(request).size())
[-] pred:  org. junit. Assert. assertThat ( this.mockResponseBody. provideDep(Providenyms();, org. hamcrest. CoreMatchers. is ( this.mockResponseBody ) )

************************************
************************************
[+] input: IOException { InputStream is = getClass().getClassLoader() .getResourceAsStream("responses/ProvideDEPsResponse_valid_unsigned.xml"); this.mockResponseBody = IOUtils.toString(is, StandardCharsets.UTF_8);  setupWireMock();  BsnkException ex = "<AssertPlaceHolder>"; assertEquals("BSNKProvideDEPFault", ex.getFaultReason()); }
provideDep(ProvideDEPsRequest request) throws BsnkException { try { return ((BSNKDEPPort) this.bindingProvider).bsnkProvideDEPs(request).getDirectEncryptedPseudonyms(); } catch (SOAPFaultException ex) { if (ex.getCause().getMessage().equals("The signature or decryption was invalid")) { throw new BsnkException("SignatureValidationFault", ex.getCause().getMessage(), ex.getCause()); } throw new BsnkException("BSNKProvideDEPFault", ex.getMessage(), ex); } catch (WebServiceException ex) { throw new BsnkException("Could not send bsnkProvidePPPPCAOptimized", ex.getCause().getMessage(), ex.getCause()); } catch (BSNKProvideDEPFault ex) { throw new BsnkException("BSNKProvideDEPFault", ex.getCause().getMessage(), ex.getCause()); } }
[*] target: assertThrows(BsnkException.class, () -> client.provideDep(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, is )

[*] target: assertThrows(BsnkException.class, () -> client.provideDep(request))
[-] pred:  org. junit. Assert. assertEquals ( this.mockResponseBody, is )

[*] target: assertThrows(BsnkException.class, () -> client.provideDep(request))
[-] pred:  org. junit. Assert. assertNotNull ( ex )

[*] target: assertThrows(BsnkException.class, () -> client.provideDep(request))
[-] pred:  org. junit. Assert. assertNotNull ( is )

[*] target: assertThrows(BsnkException.class, () -> client.provideDep(request))
[-] pred:  org

************************************
************************************
[+] input: BsnkException { BsnkActivateRequest request = new BsnkActivateRequest(); request.setBsn("PPPPPPPPP");  Mockito.when(bsnkActivateService.bsnkActivate(any())).thenReturn("pip");  BsnkActivateResponse result = controller.bsnkActivate(request); "<AssertPlaceHolder>"; assertEquals("pip", result.getPip()); }
bsnkActivate(@Valid @RequestBody BsnkActivateRequest request) throws BsnkException { BsnkActivateResponse response = new BsnkActivateResponse(); response.setPip(bsnkService.bsnkActivate(request.getBsn())); response.setStatus("OK"); return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, 200 )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, request )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit ). assertNotNull ( result )

************************************
************************************
[+] input: BsnkException { BsnkException ex = new BsnkException("SomeFault", "Some error occurred", null);  BsnkActivateResponse result = controller.handleBvBsnClientException(ex); "<AssertPlaceHolder>"; assertEquals("SomeFault", result.getFaultReason()); assertEquals("Some error occurred", result.getFaultDescription()); }
handleBvBsnClientException(BsnkException ex) { logger.error(String.format("FaultReason: '%s', FaultDescription: '%s', causeMessage: '%s'", ex.getFaultReason(), ex.getFaultDescription(), ex.getCauseMessage())); BsnkActivateResponse response = new BsnkActivateResponse(); response.setStatus("NOK"); response.setFaultReason(ex.getFaultReason()); response.setfaultDescription(ex.getFaultDescription()); return response; }
[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org. junit, result )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org. junit )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  , result )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  )

************************************
************************************
[+] input: BsnkException { BsnkException ex = new BsnkException("SomeFault", "Some error occurred", new Exception("Some exception"));  BsnkActivateResponse result = controller.handleBvBsnClientException(ex); "<AssertPlaceHolder>"; assertEquals("SomeFault", result.getFaultReason()); assertEquals("Some error occurred", result.getFaultDescription()); }
handleBvBsnClientException(BsnkException ex) { logger.error(String.format("FaultReason: '%s', FaultDescription: '%s', causeMessage: '%s'", ex.getFaultReason(), ex.getFaultDescription(), ex.getCauseMessage())); BsnkActivateResponse response = new BsnkActivateResponse(); response.setStatus("NOK"); response.setFaultReason(ex.getFaultReason()); response.setfaultDescription(ex.getFaultDescription()); return response; }
[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org. junit, result )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org. junit )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  , result )

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  org

[*] target: assertEquals("NOK", result.getStatus())
[-] pred:  )

************************************
************************************
[+] input: SoapValidationException { Map<String,String> serviceResponse = new HashMap<>(); serviceResponse.put("status", "OK"); when(BvBsnServiceMock.verifyTravelDocument(any(TravelDocumentRequest.class))).thenReturn(serviceResponse);  TravelDocumentRequest travelDocumentRequest= new TravelDocumentRequest(); travelDocumentRequest.setDocumentType("ID_CARD"); travelDocumentRequest.setDocumentNumber("1"); Map<String, String> controllerResponse = controller.checkBvBsn(travelDocumentRequest); "<AssertPlaceHolder>"; }
checkBvBsn(@Valid @RequestBody TravelDocumentRequest request) throws BvBsnException, SoapValidationException { if (request.getDocumentType().equals("I")) { request.setDocumentType("ID_CARD"); } else if (request.getDocumentType().equals("P")) { request.setDocumentType("PASSPORT"); } return ImmutableMap.copyOf(bvBsnService.verifyTravelDocument(request)); }
[*] target: assertEquals("OK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, controllerResponse. size ( ) )

[*] target: assertEquals("OK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( someResponse, controllerResponse )

[*] target: assertEquals("OK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( gem, controllerResponse )

[*] target: assertEquals("OK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, controllerResponse. length ( ) )

[*] target: assertEquals("OK", controllerResponse.get("status"))
[-] pred:  org

************************************
************************************
[+] input: handleBvBsnClientExceptionShouldReturnStatusNok() { Map<String, String> controllerResponse = controller.handleBvBsnClientException(); "<AssertPlaceHolder>"; }
handleBvBsnClientException() { Map<String,String> errorResponse = new HashMap<>(); errorResponse.put("status", "NOK"); return errorResponse; }
[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertNull ( controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertNotNull ( controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, controllerResponse. size ( ) )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org

************************************
************************************
[+] input: handleSoapValidationExceptionShouldReturnStatusNok() { Map<String, String> controllerResponse = controller.handleSoapValidationException(new SoapValidationException("Soap Validation error")); "<AssertPlaceHolder>"; }
handleSoapValidationException(SoapValidationException exception) { Map<String,String> errorResponse = new HashMap<>(); errorResponse.put("status", "NOK"); return errorResponse; }
[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertNull ( controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org. junit. Assert. assertNotNull ( controllerResponse )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  )

[*] target: assertEquals("NOK", controllerResponse.get("status"))
[-] pred:  org

************************************
************************************
[+] input: BsnkException { String signedPipBasetring pipbaseequence signedPip = (ASN1Sequence) ASN1Sequence.fromByteArray(Base64.getDecoder().decode(signedPipBase64)); ASN1Sequence pip = (ASN1Sequence) ASN1Sequence.fromByteArray(Base64.getDecoder().decode(pipbase64));  Mockito.when(bsnkUtils.signedPipFromPplist(any())).thenReturn(signedPip); Mockito.when(bsnkUtils.verifySignedPip(any())).thenReturn(true); Mockito.when(bsnkUtils.retrievePipFromSignedPip(any())).thenReturn(pip);  String result = service.bsnkActivate("PPPPPPPPP");  "<AssertPlaceHolder>"; }
bsnkActivate(String bsn) throws BsnkException { ProvidePPPPCAOptimizedRequest request = bsnkUtils.createPpPpcaRequest(bsn); List<PolymorphicPseudonymType> response;  response = activateBsnkClient.providePPRequest(request);  ASN1Sequence signedPip = bsnkUtils.signedPipFromPplist(response);  if (!bsnkUtils.verifySignedPip(signedPip)) { try { throw new BsnkException("SignedpipSignatureFault", String.format("Signed pip not verified: '%s'", Base64.getEncoder().encodeToString(signedPip.getEncoded())), null); } catch (IOException ex) { throw new BsnkException("signedPipSignatureEncodeFault", "Signed pip not verified and not not base64 encodeable", ex); } }  ASN1Sequence pip = bsnkUtils.retrievePipFromSignedPip(signedPip);  try { return Base64.getEncoder().encodeToString(pip.getEncoded()); } catch (IOException ex) { throw new BsnkException("PipEncodeFault", "Couldn't base64 encode pip", ex); } }
[*] target: assertEquals(pipbase64, result)
[-] pred:  get the value of this header as a string

[*] target: assertEquals(pipbase64, result)
[-] pred:  set the value of this header to a new value

[*] target: assertEquals(pipbase64, result)
[-] pred:  get the value of this token as a string

[*] target: assertEquals(pipbase64, result)
[-] pred:  get the value of this header as a new line

[*] target: assertEquals(pipbase64, result)
[-] pred:  get the value of the shift key

************************************
************************************
[+] input: SoapValidationException { VerificatieIdenDocumentenBU bvBsnResponse = verificatieIdenDocumentenBUBuilder(24002, 1 , "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", Sender); Mockito.when(mockBvBsnClient.postVerifyTravelDocument(Mockito.any(VerificatieIdentiteitsDocument.class))).thenReturn(bvBsnResponse);  TravelDocumentRequest travelDocumentRequest= new TravelDocumentRequest(); travelDocumentRequest.setDocumentType("ID_CARD"); travelDocumentRequest.setDocumentNumber("1");  Map<String, String> result = service.verifyTravelDocument(travelDocumentRequest); "<AssertPlaceHolder>"; }
verifyTravelDocument(TravelDocumentRequest request) throws SoapValidationException, BvBsnException { final Map<String, String> response = new HashMap<>();  final VerificatieIdentiteitsDocument bvBsnRequest = new VerificatieIdentiteitsDocument(); bvBsnRequest.setBerichtIn(verificatieIdenDocumentenBIBuilder(DocumentType.valueOf(request.getDocumentType()), request.getDocumentNumber(), Sender, IndicationEndUser));  final VerificatieIdenDocumentenBU bvBsnResponse = client.postVerifyTravelDocument(bvBsnRequest); logger.info("The SOAP BV BSN request was successful"); var resultCode = bvBsnResponse.getIdenDocumentenResultaat().getVerificatieIdenDocumentenResultaatDE().get(0).getResultaatCode(); if ( 24002 != resultCode) { String errorMessage = "Connection with BV BSN was successful, but the response description was not equal to 24002: "; logger.error(errorMessage + resultCode); throw new BvBsnException("Response other then 24002"); }  response.putAll(statusOK);  return response; }
[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, result. isEmpty ( ) )

************************************
************************************
[+] input: SoapValidationException { VerificatieIdenDocumentenBU bvBsnResponse = verificatieIdenDocumentenBUBuilder(24001, 1 , "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", Sender); Mockito.when(mockBvBsnClient.postVerifyTravelDocument(Mockito.any(VerificatieIdentiteitsDocument.class))).thenReturn(bvBsnResponse);  TravelDocumentRequest travelDocumentRequest= new TravelDocumentRequest(); travelDocumentRequest.setDocumentType("ID_CARD"); travelDocumentRequest.setDocumentNumber("1");  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("Response other then 24002", exception.getMessage()); }
verifyTravelDocument(TravelDocumentRequest request) throws SoapValidationException, BvBsnException { final Map<String, String> response = new HashMap<>();  final VerificatieIdentiteitsDocument bvBsnRequest = new VerificatieIdentiteitsDocument(); bvBsnRequest.setBerichtIn(verificatieIdenDocumentenBIBuilder(DocumentType.valueOf(request.getDocumentType()), request.getDocumentNumber(), Sender, IndicationEndUser));  final VerificatieIdenDocumentenBU bvBsnResponse = client.postVerifyTravelDocument(bvBsnRequest); logger.info("The SOAP BV BSN request was successful"); var resultCode = bvBsnResponse.getIdenDocumentenResultaat().getVerificatieIdenDocumentenResultaatDE().get(0).getResultaatCode(); if ( 24002 != resultCode) { String errorMessage = "Connection with BV BSN was successful, but the response description was not equal to 24002: "; logger.error(errorMessage + resultCode); throw new BvBsnException("Response other then 24002"); }  response.putAll(statusOK);  return response; }
[*] target: assertThrows(BvBsnException.class, () -> { service.verifyTravelDocument(travelDocumentRequest)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(BvBsnException.class, () -> { service.verifyTravelDocument(travelDocumentRequest)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPE_3 ) )

[*] target: assertThrows(BvBsnException.class, () -> { service.verifyTravelDocument(travelDocumentRequest)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(BvBsnException.class, () -> { service.verifyTravelDocument(travelDocumentRequest)
[-] pred:  org. junit. Assert. assertEquals ( null, exception )

[*] target: assertThrows(BvBsnException.class, () -> { service.verifyTravelDocument(travelDocumentRequest)
[-] pred:  org

************************************
************************************
[+] input: SignatureException { String entity_id = "AD-and-MU-entity-id"; service = new MetadataLoaderService(adKeystoreFile, adKeystorePassword, entity_id, adSimpleKeyDescriptors, muTlsKeystore, muTlsKeystorePassword, muSigningKeystore, muSigningKeystorePassword, muSimpleKeyDescriptors, entity_id, companyName, contactEmail, contactPhoneNumber); String result = service.getMuMetadata(); "<AssertPlaceHolder>"; assertFalse(result.contains("md:AffiliationDescriptor>")); }
getMuMetadata() throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException, SecurityException, MarshallingException, SignatureException { EntitiesDescriptor entitiesDescriptor = buildSAMLObject(EntitiesDescriptor.class); String entityDescriptorAdName = "urn:nl-gdi-eid:role:Middelenuitgever"; entitiesDescriptor.setName(entityDescriptorAdName); entitiesDescriptor.setID("signed-document");  EntityDescriptor muEntityDescriptor = buildSAMLObject(EntityDescriptor.class); muEntityDescriptor.setEntityID(muEntityId);  Extensions extensions = buildSAMLObject(Extensions.class); EntityAttributes entityAttributes = buildSAMLObject(EntityAttributes.class); Attribute attribute = buildSAMLObject(Attribute.class); attribute.setName(ATTRIBUTE_NAME); attribute.setNameFormat(URI_REFERENCE); AttributeValue attributeValue = buildSAMLObject(AttributeValue.class); attributeValue.setTextContent("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); attribute.getAttributeValues().add(attributeValue);  entityAttributes.getAttributes().add(attribute); extensions.getUnknownXMLObjects().add(entityAttributes);  muEntityDescriptor.setExtensions(extensions);  List<Credential> credentials = getCredentials(muSigningKeystore, muSigningKeystorePassword); credentials.addAll(getCredentials(muTlsKeystore, muTlsKeystorePassword));  final IDPSSODescriptor idpSSODescriptor = buildIDPSSODescriptor(credentials);  // TODO: add logic which credential to use for signing the metadata itself. entitiesDescriptor.setSignature(generateSignaturePlaceholder(credentials.get(0)));  for (String keyDescriptorName : muSimpleKeyDescriptors) { if (keyDescriptorName.isBlank()) { continue; } final KeyDescriptor keyDescriptor = getSimpleKeyDescriptor(keyDescriptorName); idpSSODescriptor.getKeyDescriptors().add(keyDescriptor); }  muEntityDescriptor.getRoleDescriptors().add(idpSSODescriptor);  muEntityDescriptor.setOrganization(getOrganization()); muEntityDescriptor.getContactPersons().add(getContactPerson());  entitiesDescriptor.getEntityDescriptors().add(muEntityDescriptor);  // If the MU and AD OIN are the same no affiliation is needed if (!muEntityId.equals(adEntityId)) { EntityDescriptor affiliationEntityDescriptor = buildSAMLObject(EntityDescriptor.class); affiliationEntityDescriptor.setEntityID(muEntityId); affiliationEntityDescriptor.setAffiliationDescriptor(getAffiliationDescriptor()); entitiesDescriptor.getEntityDescriptors().add(affiliationEntityDescriptor); }  XMLObjectProviderRegistrySupport.getMarshallerFactory().getMarshaller(entitiesDescriptor) .marshall(entitiesDescriptor);  Signer.signObject(entitiesDescriptor.getSignature());  return convertMetadataToString(entitiesDescriptor); }
[*] target: assertTrue(result.contains("Name="urn:nl-gdi-eid:role:Middelenuitgever""))
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertTrue(result.contains("Name="urn:nl-gdi-eid:role:Middelenuitgever""))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertTrue(result.contains("Name="urn:nl-gdi-eid:role:Middelenuitgever""))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertTrue(result.contains("Name="urn:nl-gdi-eid:role:Middelenuitgever""))
[-] pred:  org. junit. Assert. assertEquals ( entity_id, result )

[*] target: assertTrue(result.contains("Name="urn:nl-gdi-eid:role:Middelenuitgever""))
[-] pred:  org. junit. Assert. assertEquals ( entity_ id, result )

************************************
************************************
[+] input: SharedServiceClientException { Map<String, String> result = service.penRequestAllowed(request); "<AssertPlaceHolder>"; }
penRequestAllowed(PenRequest request) throws PenRequestException, SharedServiceClientException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result); return statusOK; }
[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 2, result. penRequestAllowed (PenRequest ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 2, result. penRequestAllowed(PenRequest request )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( ""ServiceClientException"", result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 2, result. penRequestAllowed( SharedServiceClientException )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 1, result. penRequestAllowed(PenRequest request )

************************************
************************************
[+] input: SharedServiceClientException { // create a pinRequestStatus with a RequestDateTime in the repo status.setRequestDatetime(LocalDateTime.now(clock)); mockStatusList.add(status);  // return arraylist with one dummy pinrequest Mockito.when(mockRepository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(mockStatusList);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS1", exception.getMessage()); }
penRequestAllowed(PenRequest request) throws PenRequestException, SharedServiceClientException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result); return statusOK; }
[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception. penRequestAllowed ( ), org. hamcrest. CoreMatchers. is ( exception ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception. penRequestAllowed ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception. penRequestAllowed ( ), org. hamcrest. CoreMatchers. is ( 0.1 ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception. penRequestAllowed ( ), org. hamcrest. CoreMatchers. is ( false ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. CoreMatchers. is ( exception ) )

************************************
************************************
[+] input: SharedServiceClientException { // create a previous penRequest with a RequestDateTime status.setRequestDatetime(TEST_TIME.minusHours(23)); mockStatusList.add(status);  // return arraylist with one dummy penrequest Mockito.when(mockRepository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(mockStatusList);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS1", exception.getMessage()); }
penRequestAllowed(PenRequest request) throws PenRequestException, SharedServiceClientException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result); return statusOK; }
[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. CoreMatchers. is ( exception ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. String ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. IllegalArgumentException ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. Matchers. is ( exception ) )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

************************************
************************************
[+] input: SharedServiceClientException { // create three penRequests with a RequestDateTime, 24 hours apart PenRequestStatus firstStatus = new PenRequestStatus(); firstStatus.setRequestDatetime(LocalDateTime.of(2019, 1, 1, 00, 01)); mockStatusList.add(firstStatus);  PenRequestStatus secondStatus= new PenRequestStatus(); secondStatus.setRequestDatetime(LocalDateTime.of(2019, 1, 2, 00, 01)); mockStatusList.add(secondStatus);  PenRequestStatus thirdStatus= new PenRequestStatus(); thirdStatus.setRequestDatetime(LocalDateTime.of(2019, 1, 3, 00, 01)); mockStatusList.add(thirdStatus);  // return arraylist with one dummy penrequest Mockito.when(mockRepository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(mockStatusList);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS2", exception.getMessage()); }
penRequestAllowed(PenRequest request) throws PenRequestException, SharedServiceClientException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result); return statusOK; }
[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( firstStatus, exception )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org. junit. Assert. assertSame ( firstStatus, exception )

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  org

[*] target: assertThrows(PenRequestException.class, () -> { service.penRequestAllowed(request)
[-] pred:  )

************************************
************************************
[+] input: SharedServiceClientException {  // create three penRequests with a RequestDateTime, 24 hours apart PenRequestStatus firstStatus = new PenRequestStatus(); firstStatus.setRequestDatetime(LocalDateTime.of(2019, 1, 1, 00, 01)); mockStatusList.add(firstStatus);  PenRequestStatus secondStatus = new PenRequestStatus(); secondStatus.setRequestDatetime(LocalDateTime.of(2019, 1, 2, 00, 01)); mockStatusList.add(secondStatus);  PenRequestStatus thirdStatus = new PenRequestStatus(); thirdStatus.setRequestDatetime(LocalDateTime.of(2018, 1, 3, 00, 01)); mockStatusList.add(thirdStatus);  // return arraylist with one dummy penrequest Mockito.when(mockRepository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(mockStatusList);  Map<String, String> result = service.penRequestAllowed(request); Map<String, String> expectedMap  = new HashMap<String, String>() {{ put("status", "OK"); }}; "<AssertPlaceHolder>"; }
penRequestAllowed(PenRequest request) throws PenRequestException, SharedServiceClientException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result); return statusOK; }
[*] target: assertEquals(expectedMap, result)
[-] pred:  org. junit. Assert. assertEquals ( expectedMap, result )

[*] target: assertEquals(expectedMap, result)
[-] pred:  org. junit. Assert. assertEquals ( firstStatus, result )

[*] target: assertEquals(expectedMap, result)
[-] pred:  org. junit. Assert. assertEquals ( compositeStatus, result )

[*] target: assertEquals(expectedMap, result)
[-] pred:  org. junit, expectedMap )

[*] target: assertEquals(expectedMap, result)
[-] pred:  org

************************************
************************************
[+] input: SoapValidationException { Mockito.when(ssMock.getSSConfigInt(speedRequest)).thenThrow(new SharedServiceClientException("DWS3")); mockStatusList.add(status); Mockito.when(mockRepository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(mockStatusList);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS3", exception.getMessage()); }
requestPenReset(PenRequest request) throws PenRequestException, SharedServiceClientException, SoapValidationException { final List<PenRequestStatus> result = repository.findByBsnAndDocTypeAndSequenceNo(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkIfTooSoonOrTooOften(result);  final Map<String, String> response = new HashMap<>();  final PenAanvraagEIDRequest rdwRequest = new PenAanvraagEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final PenAanvraagEIDResponse rdwResponse = client.penRequest(rdwRequest); logger.info("The SOAP pen request was successful");  if ( !"OK".equals(rdwResponse.getResponseDescription())) { String errorMessage = "Connection with RDW was successful, but the response description was not equal to OK"; logger.error(errorMessage); throw new PenRequestException("DWS10", errorMessage); }  createPenRequestStatus(request.getBsn(), request.getSequenceNo(), DocumentType.DRIVING_LICENCE);  response.putAll(statusOK);  return response; }
[*] target: assertThrows(SharedServiceClientException.class, () -> { service.requestPenReset(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(SharedServiceClientException.class, () -> { service.requestPenReset(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof SoapValidationException ) )

[*] target: assertThrows(SharedServiceClientException.class, () -> { service.requestPenReset(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. Object ) )

[*] target: assertThrows(SharedServiceClientException.class, () -> { service.requestPenReset(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof exception ) )

[*] target: assertThrows(SharedServiceClientException.class, () -> { service.requestPenReset(request)
[-] pred:  org

************************************
************************************
[+] input: SoapValidationException { // set valid date of penrequest in repo status.setPinResetValidDate(LocalDateTime.of(2019, 1, 2, 12, 33));  OpvragenPUKCodeEIDResponse rdwResponse = buildRdwResponse("SSSSSSSSSSSS");  Mockito.when(mockRdwClient.pukRequest(Mockito.any(OpvragenPUKCodeEIDRequest.class))).thenReturn(rdwResponse);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS8", exception.getMessage()); }
requestPuk(PukRequest request) throws PukRequestException, SoapValidationException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  final Map<String, String> response = new HashMap<>();  final OpvragenPUKCodeEIDRequest rdwRequest = new OpvragenPUKCodeEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final OpvragenPUKCodeEIDResponse rdwResponse = rdwClient.pukRequest(rdwRequest); final List<EIDSTATUSGEG> eidstatusgegs = rdwResponse.getEIDSTATINFO().getEIDSTATUSTAB().getEIDSTATUSGEG(); if (eidstatusgegs.size() == 1 && eidstatusgegs.get(0).getEIDVOLGNR().equals(rdwRequest.getEIDSTATINFO().getEIDSTATAGEG().getEIDVOLGNRA()) && eidstatusgegs.get(0).getCRYPTRDEPUK() != null) { final String base64Puk = Base64.encodeBase64String(eidstatusgegs.get(0).getCRYPTRDEPUK()); response.put("status", "OK"); response.put("vpuk", base64Puk); } else { final String errormessage = "multiple EIDSTATUSGEG entries in rdw response or sequenceNo does not match"; logger.error(errormessage); throw new PukRequestException("DWS8", errormessage); }  return response; }
[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. String ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. util. Date ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertEquals ( exception, rdwResponse )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception )

************************************
************************************
[+] input: PukRequestException {  // set valid date of penrequest in repo status.setPinResetValidDate(LocalDateTime.of(2019, 1, 2, 12, 33));  Map<String, String> result = service.pukRequestAllowed(request); "<AssertPlaceHolder>"; }
pukRequestAllowed(PukRequest request) throws PukRequestException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  return statusOK; }
[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertThat ( result, is ( empty ( ) ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertThat ( result, empty ( ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertThat ( result, is ( null ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  , result )

************************************
************************************
[+] input: PukRequestException { status.setPinResetValidDate(LocalDateTime.of(2019, 1, 1, 12, 34));  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS5", exception.getMessage()); }
pukRequestAllowed(PukRequest request) throws PukRequestException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  return statusOK; }
[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( pukRequestAllowed ( pukRequestAllowed(PukRequest,1, 1, 12, 34));Exception ), org. hamcrest. Matchers. is ( exception ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( pukRequestAllowed ( pukRequestAllowed(PukRequest, 1, 1, 12, 34));Exception ), org. hamcrest. Matchers. is ( exception ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( pukRequestAllowed ( pukRequestAllowed(PukRequest"" ), org. hamcrest. Matchers. is ( exception ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( pukRequestAllowed ( pukRequestAllowed(PukRequest, 1, 12, 34));Exception ), org. hamcrest. Matchers. is ( exception ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( pukRequestAllowed ( pukRequestAllowed(PukRequest,1, 1, 12, 34));Exception ), org. hamcrest. CoreMatchers. is ( exception ) )

************************************
************************************
[+] input: PukRequestException { Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS7", exception.getMessage()); }
pukRequestAllowed(PukRequest request) throws PukRequestException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  return statusOK; }
[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, pukRequestAllowed ( pukRequest arg2 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, pukRequestAllowed ( pukRequestAllowed(PukRequest request ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, pukRequestAllowed ( pukRequest request ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertThat ( exception, pukRequestAllowed ( pukRequest req ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org

************************************
************************************
[+] input: PukRequestException { Mockito.when(mockRepository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(null);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS6", exception.getMessage()); }
pukRequestAllowed(PukRequest request) throws PukRequestException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  return statusOK; }
[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( null, exception. pukRequestAllowed ( pukRequest arg2 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( null, exception. pukRequestAllowed(PukRequest) throws PukRequestException { }

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( null, exception. pukRequestAllowed ( pukRequest ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( null, exception. getMessage ( ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.pukRequestAllowed(request)
[-] pred:  org. junit. Assert. assertEquals ( null, exception. pukRequestAllowed(PukRequest )

************************************
************************************
[+] input: SoapValidationException {  // set valid date of penrequest in repo status.setPinResetValidDate(LocalDateTime.of(2019, 1, 2, 12, 33));  OpvragenPUKCodeEIDResponse rdwResponse = buildRdwResponse("PPPPPPPPPPPP");  Mockito.when(mockRdwClient.pukRequest(Mockito.any(OpvragenPUKCodeEIDRequest.class))).thenReturn(rdwResponse);  Map<String, String> result = service.requestPuk(request); "<AssertPlaceHolder>"; }
requestPuk(PukRequest request) throws PukRequestException, SoapValidationException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  final Map<String, String> response = new HashMap<>();  final OpvragenPUKCodeEIDRequest rdwRequest = new OpvragenPUKCodeEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final OpvragenPUKCodeEIDResponse rdwResponse = rdwClient.pukRequest(rdwRequest); final List<EIDSTATUSGEG> eidstatusgegs = rdwResponse.getEIDSTATINFO().getEIDSTATUSTAB().getEIDSTATUSGEG(); if (eidstatusgegs.size() == 1 && eidstatusgegs.get(0).getEIDVOLGNR().equals(rdwRequest.getEIDSTATINFO().getEIDSTATAGEG().getEIDVOLGNRA()) && eidstatusgegs.get(0).getCRYPTRDEPUK() != null) { final String base64Puk = Base64.encodeBase64String(eidstatusgegs.get(0).getCRYPTRDEPUK()); response.put("status", "OK"); response.put("vpuk", base64Puk); } else { final String errormessage = "multiple EIDSTATUSGEG entries in rdw response or sequenceNo does not match"; logger.error(errormessage); throw new PukRequestException("DWS8", errormessage); }  return response; }
[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertFalse ( result. isEmpty ( ) )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertEquals("OK", result.get("status"))
[-] pred:  org

************************************
************************************
[+] input: pukRequestIsNotAllowedAfter22Days() { status.setPinResetValidDate(LocalDateTime.of(2019, 1, 1, 12, 34));  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS5", exception.getMessage()); }
requestPuk(PukRequest request) throws PukRequestException, SoapValidationException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  final Map<String, String> response = new HashMap<>();  final OpvragenPUKCodeEIDRequest rdwRequest = new OpvragenPUKCodeEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final OpvragenPUKCodeEIDResponse rdwResponse = rdwClient.pukRequest(rdwRequest); final List<EIDSTATUSGEG> eidstatusgegs = rdwResponse.getEIDSTATINFO().getEIDSTATUSTAB().getEIDSTATUSGEG(); if (eidstatusgegs.size() == 1 && eidstatusgegs.get(0).getEIDVOLGNR().equals(rdwRequest.getEIDSTATINFO().getEIDSTATAGEG().getEIDVOLGNRA()) && eidstatusgegs.get(0).getCRYPTRDEPUK() != null) { final String base64Puk = Base64.encodeBase64String(eidstatusgegs.get(0).getCRYPTRDEPUK()); response.put("status", "OK"); response.put("vpuk", base64Puk); } else { final String errormessage = "multiple EIDSTATUSGEG entries in rdw response or sequenceNo does not match"; logger.error(errormessage); throw new PukRequestException("DWS8", errormessage); }  return response; }
[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception. getMessage ( ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception instanceof java. lang. IllegalArgumentException )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org

************************************
************************************
[+] input: pukRequestOnlyPossibleWHenPenRequestHasValidDate() { Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS7", exception.getMessage()); }
requestPuk(PukRequest request) throws PukRequestException, SoapValidationException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  final Map<String, String> response = new HashMap<>();  final OpvragenPUKCodeEIDRequest rdwRequest = new OpvragenPUKCodeEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final OpvragenPUKCodeEIDResponse rdwResponse = rdwClient.pukRequest(rdwRequest); final List<EIDSTATUSGEG> eidstatusgegs = rdwResponse.getEIDSTATINFO().getEIDSTATUSTAB().getEIDSTATUSGEG(); if (eidstatusgegs.size() == 1 && eidstatusgegs.get(0).getEIDVOLGNR().equals(rdwRequest.getEIDSTATINFO().getEIDSTATAGEG().getEIDVOLGNRA()) && eidstatusgegs.get(0).getCRYPTRDEPUK() != null) { final String base64Puk = Base64.encodeBase64String(eidstatusgegs.get(0).getCRYPTRDEPUK()); response.put("status", "OK"); response.put("vpuk", base64Puk); } else { final String errormessage = "multiple EIDSTATUSGEG entries in rdw response or sequenceNo does not match"; logger.error(errormessage); throw new PukRequestException("DWS8", errormessage); }  return response; }
[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPE_5 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPE_7 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org

************************************
************************************
[+] input: pukRequestOnlyPossibleAfterPenRequest() { Mockito.when(mockRepository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo())).thenReturn(null);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals("DWS6", exception.getMessage()); }
requestPuk(PukRequest request) throws PukRequestException, SoapValidationException { final PenRequestStatus result = repository.findFirstByBsnAndDocTypeAndSequenceNoOrderByRequestDatetimeDesc(request.getBsn(), request.getDocType(), request.getSequenceNo()); checkExpirationDatePen(result);  final Map<String, String> response = new HashMap<>();  final OpvragenPUKCodeEIDRequest rdwRequest = new OpvragenPUKCodeEIDRequest();  rdwRequest.setEIDSTATINFO(eidstatinfoBuilder(request.getBsn(), request.getSequenceNo()));  final OpvragenPUKCodeEIDResponse rdwResponse = rdwClient.pukRequest(rdwRequest); final List<EIDSTATUSGEG> eidstatusgegs = rdwResponse.getEIDSTATINFO().getEIDSTATUSTAB().getEIDSTATUSGEG(); if (eidstatusgegs.size() == 1 && eidstatusgegs.get(0).getEIDVOLGNR().equals(rdwRequest.getEIDSTATINFO().getEIDSTATAGEG().getEIDVOLGNRA()) && eidstatusgegs.get(0).getCRYPTRDEPUK() != null) { final String base64Puk = Base64.encodeBase64String(eidstatusgegs.get(0).getCRYPTRDEPUK()); response.put("status", "OK"); response.put("vpuk", base64Puk); } else { final String errormessage = "multiple EIDSTATUSGEG entries in rdw response or sequenceNo does not match"; logger.error(errormessage); throw new PukRequestException("DWS8", errormessage); }  return response; }
[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPE_5 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPE_7 ) )

[*] target: assertThrows(PukRequestException.class, () -> { service.requestPuk(request)
[-] pred:  org

************************************
************************************
[+] input: BsnkException { List<PolymorphicPseudonymType> pplist = new ArrayList<>(); pplist.add(new PolymorphicPseudonymType() { { value = signedPip.getEncoded(); } });  ASN1Sequence result = bsnkUtil.signedPipFromPplist(pplist); "<AssertPlaceHolder>"; }
signedPipFromPplist(List<PolymorphicPseudonymType> response) { for (PolymorphicPseudonymType polymorphicPseudonymType : response) { ASN1Sequence sequence; try { sequence = (ASN1Sequence) ASN1Sequence.fromByteArray(polymorphicPseudonymType.getValue()); } catch (Exception e) { logger.error(String.format("PolymorphicPseudonymType not a valid ASN1 Sequence. Exception: '%s'", e.getMessage())); continue; } if (sequence.getObjectAt(0) instanceof ASN1ObjectIdentifier) { ASN1ObjectIdentifier objectIdentifier = (ASN1ObjectIdentifier) sequence.getObjectAt(0); if (objectIdentifier.getId().equals(SIGNED_PIP_OID)) { return sequence; } } } throw new IllegalArgumentException("No signed pip found in PolymorphicPseudonymType list"); }
[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new java. math. BigDecimal ( 0 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new java. math. BigInteger ( 0 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( true ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Long ( 2 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: IOException { List<PolymorphicPseudonymType> pplist = new ArrayList<>(); pplist.add(new PolymorphicPseudonymType() { { value = pp.getEncoded(); } });  IllegalArgumentException ex = "<AssertPlaceHolder>";  assertEquals("No signed pip found in PolymorphicPseudonymType list", ex.getMessage()); }
signedPipFromPplist(List<PolymorphicPseudonymType> response) { for (PolymorphicPseudonymType polymorphicPseudonymType : response) { ASN1Sequence sequence; try { sequence = (ASN1Sequence) ASN1Sequence.fromByteArray(polymorphicPseudonymType.getValue()); } catch (Exception e) { logger.error(String.format("PolymorphicPseudonymType not a valid ASN1 Sequence. Exception: '%s'", e.getMessage())); continue; } if (sequence.getObjectAt(0) instanceof ASN1ObjectIdentifier) { ASN1ObjectIdentifier objectIdentifier = (ASN1ObjectIdentifier) sequence.getObjectAt(0); if (objectIdentifier.getId().equals(SIGNED_PIP_OID)) { return sequence; } } } throw new IllegalArgumentException("No signed pip found in PolymorphicPseudonymType list"); }
[*] target: assertThrows(IllegalArgumentException.class, () -> bsnkUtil.signedPipFromPplist(pplist))
[-] pred:  org. junit. Assert. assertTrue ( ( ex instanceof IllegalArgumentException ) )

[*] target: assertThrows(IllegalArgumentException.class, () -> bsnkUtil.signedPipFromPplist(pplist))
[-] pred:  org. junit. Assert. assertTrue ( ( ex instanceof TYPEException ) )

[*] target: assertThrows(IllegalArgumentException.class, () -> bsnkUtil.signedPipFromPplist(pplist))
[-] pred:  org. junit. Assert. assertEquals ( ex, true )

[*] target: assertThrows(IllegalArgumentException.class, () -> bsnkUtil.signedPipFromPplist(pplist))
[-] pred:  org. junit. Assert. assertNotNull ( ex )

[*] target: assertThrows(IllegalArgumentException.class, () -> bsnkUtil.signedPipFromPplist(pplist))
[-] pred:  org

************************************
************************************
[+] input: IOException { List<PolymorphicPseudonymType> pplist = new ArrayList<>(); pplist.add(new PolymorphicPseudonymType() { { value = "Not an ASN1 sequence".getBytes(); } }); pplist.add(new PolymorphicPseudonymType() { { value = signedPip.getEncoded(); } });  ASN1Sequence result = bsnkUtil.signedPipFromPplist(pplist); "<AssertPlaceHolder>"; }
signedPipFromPplist(List<PolymorphicPseudonymType> response) { for (PolymorphicPseudonymType polymorphicPseudonymType : response) { ASN1Sequence sequence; try { sequence = (ASN1Sequence) ASN1Sequence.fromByteArray(polymorphicPseudonymType.getValue()); } catch (Exception e) { logger.error(String.format("PolymorphicPseudonymType not a valid ASN1 Sequence. Exception: '%s'", e.getMessage())); continue; } if (sequence.getObjectAt(0) instanceof ASN1ObjectIdentifier) { ASN1ObjectIdentifier objectIdentifier = (ASN1ObjectIdentifier) sequence.getObjectAt(0); if (objectIdentifier.getId().equals(SIGNED_PIP_OID)) { return sequence; } } } throw new IllegalArgumentException("No signed pip found in PolymorphicPseudonymType list"); }
[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( signedPip.getEncoded();, result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new org. b. b, result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. ArrayList ( ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), signedPipBase64)
[-] pred:  org

************************************
************************************
[+] input: BsnkException { ASN1Sequence result = bsnkUtil.retrievePipFromSignedPip(signedPip); "<AssertPlaceHolder>"; }
retrievePipFromSignedPip(ASN1Sequence signedPip) throws BsnkException { ASN1Sequence signedPipContent = (ASN1Sequence) signedPip.getObjectAt(1); ASN1Sequence pip = (ASN1Sequence) signedPipContent.getObjectAt(0);  ASN1ObjectIdentifier objectIdentifier = (ASN1ObjectIdentifier) pip.getObjectAt(0); if (!objectIdentifier.getId().equals(PIP_OID)) { throw new BsnkException("SignedPipNoPipFault", String.format("Signed pip doesnt contain a pip. Expected identifier: '%s'. Found identifier: '%s'", PIP_OID, objectIdentifier.toString()), null); }  return pip; }
[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), pipbase64)
[-] pred:  org. junit. Assert. assertEquals ( new ASN1Sequence ( 0, 1, 2 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), pipbase64)
[-] pred:  org. junit. Assert. assertEquals ( new ASN1Sequence ( 0, 2 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), pipbase64)
[-] pred:  org. junit. Assert. assertEquals ( new ASN1Sequence ( 0, 3 ), result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), pipbase64)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals(Base64.getEncoder().encodeToString(result.getEncoded()), pipbase64)
[-] pred:  org

************************************
************************************
[+] input: BsnkException { "<AssertPlaceHolder>"; }
verifySignedPip(ASN1Sequence signedPip) throws BsnkException { ASN1Sequence signedPipContent = (ASN1Sequence) signedPip.getObjectAt(1); ASN1Sequence pipSignatureSequence = (ASN1Sequence) signedPip.getObjectAt(2); ASN1Sequence pipSignature = (ASN1Sequence) pipSignatureSequence.getObjectAt(1);  byte[] pipBytes; try { pipBytes = signedPipContent.getEncoded(); } catch (IOException ex) { throw new BsnkException("SignedPipIOFault", "Failed to get byte[] from pip or pip signature.", ex); }  BigInteger pipKsv = ((ASN1Integer) signedPipContent.getObjectAt(2)).getValue();  if (!pipKsv.equals(bsnkUKsv)) { throw new BsnkException("SignedpipKsvMismatch", String.format("Signedpip ksv mismatch. U: '%s'. Pip: '%s'", bsnkUKsv, pipKsv), null); }  String oid = ((ASN1ObjectIdentifier) pipSignatureSequence.getObjectAt(0)).getId(); BigInteger r = ((ASN1Integer) pipSignature.getObjectAt(0)).getValue(); BigInteger s = ((ASN1Integer) pipSignature.getObjectAt(1)).getValue(); SignatureEcdsa signature = (SignatureEcdsa) SignatureEcdsa.from(oid, r, s);  try { signature.verify(bsnkUPubkey, pipBytes); return true; } catch (CryptoException ex) { logger.error(String.format("Exception during pip verification: '%s", ex.getMessage())); return false; } }
[*] target: assertTrue(bsnkUtil.verifySignedPip(signedPip))
[-] pred:  org. junit. Assert. assertTrue ( stream. verifySignedPip(ASN1Sequence ( ) )

[*] target: assertTrue(bsnkUtil.verifySignedPip(signedPip))
[-] pred:  org. junit. Assert. assertTrue ( component. verifySignedPip(ASN1Sequence ( ) )

[*] target: assertTrue(bsnkUtil.verifySignedPip(signedPip))
[-] pred:  boolean test true )

[*] target: assertTrue(bsnkUtil.verifySignedPip(signedPip))
[-] pred:  true )

[*] target: assertTrue(bsnkUtil.verifySignedPip(signedPip))
[-] pred:  org

************************************
************************************
[+] input: BsnkException { String bsn = "PPPPPPPPP"; ProvidePPPPCAOptimizedRequest result = bsnkUtil.createPpPpcaRequest(bsn);  assertNotNull(result.getDateTime()); "<AssertPlaceHolder>"; assertTrue(result.getRequestID().startsWith("DGD-")); assertNotNull(UUID.fromString(result.getRequestID().replaceAll("DGD-", ""))); assertEquals(ReflectionTestUtils.getField(bsnkUtil, "digidMuKsv"), result.getRequesterKeySetVersion()); assertEquals(ReflectionTestUtils.getField(bsnkUtil, "digidMuOin"), result.getRequester()); assertEquals(bsn, result.getBSN()); }
getDateTime() throws BsnkException { XMLGregorianCalendar xmlCalender; try { xmlCalender = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()); } catch (DatatypeConfigurationException ex) { throw new BsnkException("xmlDatetimestampFault", "Couldn't create xml datetimestamp", ex); } xmlCalender.setMillisecond(DatatypeConstants.FIELD_UNDEFINED); return xmlCalender; }
[*] target: assertEquals(DatatypeConstants.FIELD_UNDEFINED, result.getDateTime().getMillisecond())
[-] pred:  org. junit. Assert. assertTrue ( result. getDateTime() ( bsn ) )

[*] target: assertEquals(DatatypeConstants.FIELD_UNDEFINED, result.getDateTime().getMillisecond())
[-] pred:  org. junit. Assert. assertEquals ( bsn, result. getDateTime() ( ) )

[*] target: assertEquals(DatatypeConstants.FIELD_UNDEFINED, result.getDateTime().getMillisecond())
[-] pred:  org. junit. Assert. assertEquals ( bn, result. getDateTime() ( ) )

[*] target: assertEquals(DatatypeConstants.FIELD_UNDEFINED, result.getDateTime().getMillisecond())
[-] pred:  org. junit. Assert. assertTrue ( result. getDateTime() )

[*] target: assertEquals(DatatypeConstants.FIELD_UNDEFINED, result.getDateTime().getMillisecond())
[-] pred:  org. junit. Assert. assertEquals ( bsn, result. getDateTime() )

************************************
************************************
[+] input: SoapValidationException { EIDSTATINFO result = eidStatInfoBuilder.eidstatinfoBuilder("PPPPPPPPP", "PPPPPPPPPPPP");  "<AssertPlaceHolder>"; assertEquals("PPPPPPPPPPPP", result.getEIDSTATAGEG().getEIDVOLGNRA().toString()); assertEquals("RIJBEWIJS", result.getEIDSTATAGEG().getEIDDOCTYPE().toString()); }
eidstatinfoBuilder(String bsn, String sequenceNo) throws SoapValidationException { final EIDSTATINFO eidstatinfo = new EIDSTATINFO(); final EIDSTATAGEG gegevens = new EIDSTATAGEG(); try { gegevens.setBURGSERVNRA(new BigInteger(bsn)); gegevens.setEIDVOLGNRA(new BigInteger(sequenceNo)); gegevens.setEIDDOCTYPE(EIDDOCTYPE.RIJBEWIJS); eidstatinfo.setEIDSTATAGEG(gegevens); } catch (NumberFormatException e) { final String errorMessage = "Cannot convert bsn/sequenceNo to a BigInteger"; logger.error(errorMessage); throw new SoapValidationException(errorMessage, e); } return eidstatinfo; }
[*] target: assertEquals("PPPPPPPPP", result.getEIDSTATAGEG().getBURGSERVNRA().toString())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("PPPPPPPPP", result.getEIDSTATAGEG().getBURGSERVNRA().toString())
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertEquals("PPPPPPPPP", result.getEIDSTATAGEG().getBURGSERVNRA().toString())
[-] pred:  org. junit. Assert. assertEquals ( result, org. SoapValidationException. NULL )

[*] target: assertEquals("PPPPPPPPP", result.getEIDSTATAGEG().getBURGSERVNRA().toString())
[-] pred:  org. junit. Assert. assertFalse ( ( result == null ) )

[*] target: assertEquals("PPPPPPPPP", result.getEIDSTATAGEG().getBURGSERVNRA().toString())
[-] pred:  org

************************************
************************************
[+] input: testStartProcessRestService() { StartProcessRequest request = new StartProcessRequest(); request.setReturnUrl("http://localhost"); request.setConfirmId("confirmId");  // the test StartProcessResponse response = controller.startProcessRestService(request); // asserts "<AssertPlaceHolder>"; assertNotNull(response.getSessionId()); assertEquals("SSSSSSSSSSSSSSSSSSSSSS", response.getUrl()); assertEquals(600, response.getExpiration()); }
startProcessRestService(@Valid @RequestBody StartProcessRequest request) { StartProcessResponse response = new StartProcessResponse(); // fill the response with the url for the app response.setUrl(publicUrl);  final String host; try { host = new URL(request.getReturnUrl()).getHost(); } catch (MalformedURLException e) { throw new ClientException("Malformed URL", e); } if (!whitelistPattern.matcher(host).matches()) { logger.warn("The host given: {}, is not a white listed host!", host); throw new ClientException("Invalid return url"); } EidSession session = EidSession.create(request.getReturnUrl(), request.getConfirmId(), request.getClientIpAddress(), timeout); sessionRepo.save(session);  response.setSessionId(session.getId()); response.setConfirmSecret(session.getConfirmSecret()); response.setExpiration(session.getExpiration());  // Result OK return response; }
[*] target: assertNotNull(response.getConfirmSecret())
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertNotNull(response.getConfirmSecret())
[-] pred:  org. junit. Assert :: assertNotNull ( response )

[*] target: assertNotNull(response.getConfirmSecret())
[-] pred:  org. junit. Assert. assertNotNull( response )

[*] target: assertNotNull(response.getConfirmSecret())
[-] pred:  org. junit_6_6 assertNotNull ( response )

[*] target: assertNotNull(response.getConfirmSecret())
[-] pred:  org. junit, response )

************************************
************************************
[+] input: testCancelRestService() { CancelRequest request = new CancelRequest();  request.setSessionId("id"); getSession("id", new EidSession()); Mockito.doNothing().when(sessionRepo).deleteById("id");  Map<String, String> response = controller.cancelRestService(request); "<AssertPlaceHolder>";  }
cancelRestService(@Valid @RequestBody CancelRequest request) { final Optional<EidSession> result = sessionRepo.findById(request.getSessionId()); if (result.isPresent()) { sessionRepo.delete(result.get()); } else { logger.info("Session not found"); }  // Result OK return ImmutableMap.of("arrivalStatus", "OK"); }
[*] target: assertEquals("OK", response.get("arrivalStatus"))
[-] pred:  org. junit. Assert. assertTrue ( response. isEmpty ( ) )

[*] target: assertEquals("OK", response.get("arrivalStatus"))
[-] pred:  org. junit. Assert. assertTrue ( response.()); ( ) )

[*] target: assertEquals("OK", response.get("arrivalStatus"))
[-] pred:  org. junit. Assert. assertNull ( response )

[*] target: assertEquals("OK", response.get("arrivalStatus"))
[-] pred:  org

[*] target: assertEquals("OK", response.get("arrivalStatus"))
[-] pred:  )

************************************
************************************
[+] input: getCertificateRestServiceTest() { GetCertificateResponse expectedResponse = new GetCertificateResponse(); when(nikServiceMock.getCertificateRestService(any(GetCertificateRequest.class), anyString())).thenReturn(expectedResponse);  GetCertificateResponse actualResponse = nikController.getCertificateRestService(new GetCertificateRequest(), "");  "<AssertPlaceHolder>"; }
getCertificateRestService(@Valid @RequestBody GetCertificateRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return nikService.getCertificateRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org

************************************
************************************
[+] input: prepareEacRequestRestServiceTest() { PrepareEacResponse expectedResponse = new PrepareEacResponse(); when(nikServiceMock.prepareEacRequestRestService(any(PrepareEacRequest.class))).thenReturn(expectedResponse);  PrepareEacResponse actualResponse = nikController.prepareEacRequestRestService(new PrepareEacRequest());  "<AssertPlaceHolder>"; }
prepareEacRequestRestService(@Valid @RequestBody PrepareEacRequest request) { return nikService.prepareEacRequestRestService(request); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, actualResponse )

************************************
************************************
[+] input: preparePcaRequestRestServiceTest() { PreparePcaResponse expectedResponse = new PreparePcaResponse(); when(nikServiceMock.preparePcaRequestRestService(any(NikApduResponsesRequest.class))).thenReturn(expectedResponse);  PreparePcaResponse actualResponse = nikController.preparePcaRequestRestService(new NikApduResponsesRequest());  "<AssertPlaceHolder>"; }
preparePcaRequestRestService(@Valid @RequestBody NikApduResponsesRequest request) { return nikService.preparePcaRequestRestService(request); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, actualResponse )

************************************
************************************
[+] input: getPolymorphicDataRestServiceTest() { PolyDataResponse expectedResponse = new PolyDataResponse(); when(nikServiceMock.getPolymorphicDataRestService(any(NikApduResponsesRequest.class))).thenReturn(expectedResponse);  PolyDataResponse actualResponse = nikController.getPolymorphicDataRestService(new NikApduResponsesRequest());  "<AssertPlaceHolder>"; }
getPolymorphicDataRestService(@Valid @RequestBody NikApduResponsesRequest request) { return nikService.getPolymorphicDataRestService(request); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

************************************
************************************
[+] input: getCertificateRestServiceTest() { GetCertificateResponse expectedResponse = new GetCertificateResponse(); when(rdwServiceMock.getCertificateRestService(any(GetCertificateRequest.class), anyString())).thenReturn(expectedResponse);  GetCertificateResponse actualResponse = rdwController.getCertificateRestService(new GetCertificateRequest(), "");  "<AssertPlaceHolder>"; }
getCertificateRestService(@Valid @RequestBody GetCertificateRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return rdwService.getCertificateRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org

************************************
************************************
[+] input: prepareEacRequestRestServiceTest() { PolyInfoResponse expectedResponse = new PolyInfoResponse(); when(rdwServiceMock.validatePolymorphInfoRestService(any(PolyInfoRequest.class), anyString())).thenReturn(expectedResponse);  PolyInfoResponse actualResponse = rdwController.validatePolymorphInfoRestService(new PolyInfoRequest(), "");  "<AssertPlaceHolder>"; }
validatePolymorphInfoRestService(@Valid @RequestBody PolyInfoRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return rdwService.validatePolymorphInfoRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertSame ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org

************************************
************************************
[+] input: getDigitalSignatureRestServiceTest() { SignatureResponse expectedResponse = new SignatureResponse(); when(rdwServiceMock.getDigitalSignatureRestService(any(SignatureRequest.class), anyString())).thenReturn(expectedResponse);  SignatureResponse actualResponse = rdwController.getDigitalSignatureRestService(new SignatureRequest(), "");  "<AssertPlaceHolder>"; }
getDigitalSignatureRestService(@Valid @RequestBody SignatureRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return rdwService.getDigitalSignatureRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse

************************************
************************************
[+] input: generateSecureAPDUsRestServiceTest() { SecApduResponse expectedResponse = new SecApduResponse(); when(rdwServiceMock.generateSecureAPDUsRestService(any(SecApduRequest.class), anyString())).thenReturn(expectedResponse);  SecApduResponse actualResponse = rdwController.generateSecureAPDUsRestService(new SecApduRequest(), "");  "<AssertPlaceHolder>"; }
generateSecureAPDUsRestService(@Valid @RequestBody SecApduRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return rdwService.generateSecureAPDUsRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

************************************
************************************
[+] input: getPolymorphicDataRestServiceTest() { PolyDataResponse expectedResponse = new PolyDataResponse(); when(rdwServiceMock.getPolymorphicDataRestService(any(PolyDataRequest.class), anyString())).thenReturn(expectedResponse);  PolyDataResponse actualResponse = rdwController.getPolymorphicDataRestService(new PolyDataRequest(), "");  "<AssertPlaceHolder>"; }
getPolymorphicDataRestService(@Valid @RequestBody PolyDataRequest request, @RequestHeader(value = "X-FORWARDED-FOR") String clientIp) { return rdwService.getPolymorphicDataRestService(request, clientIp); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse and actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit. Assert. assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit ) { assertEquals ( expectedResponse, actualResponse )

[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred:  org. junit, expectedResponse )

************************************
************************************
[+] input: testEfCardAccess() { final PcaSecurityInfos result = mapper.read(efCardAccess, PcaSecurityInfos.class); assertEquals(1, result.getPolymorphicInfo().getPcaVersion()); "<AssertPlaceHolder>"; }
getPolymorphicInfo() { return polymorphicInfo; }
[*] target: assertEquals(0x6c, result.getPolymorphicInfo().getFlags().intValue())
[-] pred:  org. junit. Assert. assertEquals ( 1, result. getPolymorphicInfo() ( ). size ( ) )

[*] target: assertEquals(0x6c, result.getPolymorphicInfo().getFlags().intValue())
[-] pred:  org. junit. Assert. assertEquals ( 3, result. getPolymorphicInfo() ( ). size ( ) )

[*] target: assertEquals(0x6c, result.getPolymorphicInfo().getFlags().intValue())
[-] pred:  org. junit. Assert. assertEquals ( 4, result. getPolymorphicInfo() ( ). size ( ) )

[*] target: assertEquals(0x6c, result.getPolymorphicInfo().getFlags().intValue())
[-] pred:  org

[*] target: assertEquals(0x6c, result.getPolymorphicInfo().getFlags().intValue())
[-] pred:  )

************************************
************************************
[+] input: shouldNotVerifyIfNotTrusted() { ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Could not find trust chain", thrown.getMessage()); }
verify(CvCertificate cert) { final Deque<CvCertificate> chain = getTrustChain(cert);  // Only CVCA has domain parameters final ECDomainParameters params = chain.getLast().getBody().getPublicKey().getParams();  while (!chain.isEmpty()) { final CvCertificate signer = chain.pop(); signatureService.verify(cert, signer.getBody().getPublicKey(), params); cert = signer; } }
[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. verify(CvCertificate cert ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. verify(CvCertificate. get ( ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. verify(CvCertificate ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), thrown. verify(CvCertificate cert ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org

************************************
************************************
[+] input: shouldNotVerifyIfChainToRootCannotBeFound() { ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Could not find trust chain", thrown.getMessage()); }
verify(CvCertificate cert) { final Deque<CvCertificate> chain = getTrustChain(cert);  // Only CVCA has domain parameters final ECDomainParameters params = chain.getLast().getBody().getPublicKey().getParams();  while (!chain.isEmpty()) { final CvCertificate signer = chain.pop(); signatureService.verify(cert, signer.getBody().getPublicKey(), params); cert = signer; } }
[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. verify(CvCertificate) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. verify(CvCertificate ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( new ClientException ( 200 ), thrown )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  )

************************************
************************************
[+] input: Exception { certificateRepo.saveAndFlush(loadCvCertificate("rdw/acc/cvca.cvcert", false));  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Could not find trust chain", thrown.getMessage()); }
verify(CvCertificate cert) { final Deque<CvCertificate> chain = getTrustChain(cert);  // Only CVCA has domain parameters final ECDomainParameters params = chain.getLast().getBody().getPublicKey().getParams();  while (!chain.isEmpty()) { final CvCertificate signer = chain.pop(); signatureService.verify(cert, signer.getBody().getPublicKey(), params); cert = signer; } }
[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting ClientException thrown, true )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( thrown, new ClientException )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( cause, thrown. verify(CvCertificate )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( thrown, new ClientException ( false ) )

[*] target: assertThrows(ClientException.class, () -> service.verify(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org

************************************
************************************
[+] input: Exception { certificateRepo.save(loadCvCertificate("nik/tv/cvca.cvcert", true)); final CvCertificate cert = readCvCertificate("rdw/acc/cvca.cvcert"); final Certificate dbCert = service.add(cert); "<AssertPlaceHolder>"; assertEquals(false, dbCert.isTrusted()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertEquals ( cert, dbCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertNotNull ( dbCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertTrue ( ( dbCert!= null ) )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertEquals ( cert, databaseCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org

************************************
************************************
[+] input: Exception { certificateRepo.save(loadCvCertificate("rdw/acc/cvca.cvcert", true)); final CvCertificate cert = readCvCertificate("rdw/acc/dvca.cvcert"); final Certificate dbCert = service.add(cert); "<AssertPlaceHolder>"; assertEquals(false, dbCert.isTrusted()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertEquals ( cert, dbCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertNotNull ( dbCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertTrue ( ( dbCert!= null ) )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org. junit. Assert. assertEquals ( cert, databaseCert )

[*] target: assertEquals(cert.getBody().getChr(), dbCert.getSubject())
[-] pred:  org

************************************
************************************
[+] input: shouldNotAddCertificateIfFirstButNotSelfSigned() { ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Could not find trust chain", thrown.getMessage()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. cause ( ) )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getCode ( ) )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getCause ( ) )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org. junit. Assert. assertNotNull ( thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/dvca.cvcert")))
[-] pred:  org

************************************
************************************
[+] input: Exception { certificateRepo.save(loadCvCertificate("rdw/acc/cvca.cvcert", true));  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", thrown.getMessage()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting ClientException, true )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( ac ClientException, true)); ClientException thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( true)); ClientException thrown, repository.saveAndFlush2db )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting ClientException, true)); ClientException thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/cvca.cvcert")))
[-] pred:  org

************************************
************************************
[+] input: Exception { final HsmClient.KeyInfo keyInfo = new HsmClient.KeyInfo(); keyInfo.setPublicKey(Hex.decode("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" )); Mockito.doReturn(keyInfo).when(hsmClient).keyInfo(Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS"));  certificateRepo.save(loadCvCertificate("rdw/acc/cvca.cvcert", true)); certificateRepo.save(loadCvCertificate("rdw/acc/dvca.cvcert", false));  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Private key of certificate inside hsm does not correspond to public key in certificate", thrown.getMessage()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( org. mozilla. util. Optional. empty ( ), thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting ClientException thrown, keyInfo )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting, keyInfo )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( org. mozilla. key of certificate inside hsm, keyInfo )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( keyInfo, thrown )

************************************
************************************
[+] input: Exception { Mockito.doThrow(new nl.logius.digid.sharedlib.exception.ClientException( "Not Found", 404 )).when(hsmClient).keyInfo(Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS"));  certificateRepo.save(loadCvCertificate("rdw/acc/cvca.cvcert", true)); certificateRepo.save(loadCvCertificate("rdw/acc/dvca.cvcert", false));  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Private key of certificate is not inside hsm", thrown.getMessage()); }
add(CvCertificate cert) { final Certificate db = Certificate.from(cert);  if (repository.countByIssuerAndSubject(db.getIssuer(), db.getSubject()) > 0) { throw new ClientException(String.format( "Certificate of subject %s and issuer %s already exists", db.getSubject(), db.getIssuer())); } // Special case for first CVCA certificate for this document type if (db.getType() == Certificate.Type.CVCA && repository.countByDocumentTypeAndType(db.getDocumentType(), db.getType()) == 0) { signatureService.verify(cert, cert.getBody().getPublicKey(), cert.getBody().getPublicKey().getParams()); logger.warn("Added first CVCA certificate for {}, set trusted flag manually", db.getDocumentType()); } else { verify(cert); if (db.getType() == Certificate.Type.AT) { verifyPublicKey(cert); } } return repository.saveAndFlush(db); }
[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertNotNull ( expecting ClientException thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertNotNull ( thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertNotNull ()); ClientException thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org. junit. Assert. assertEquals ( expecting, thrown )

[*] target: assertThrows(ClientException.class, () -> service.add(readCvCertificate("rdw/acc/at001.cvcert")))
[-] pred:  org

************************************
************************************
[+] input: Exception { final HsmClient.KeyInfo outerInfo = new HsmClient.KeyInfo(); outerInfo.setPublicKey(Hex.decode("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" )); final HsmClient.KeyInfo innerInfo = new HsmClient.KeyInfo(); innerInfo.setPublicKey(Hex.decode("04" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" ));  Mockito.doReturn(innerInfo).when(hsmClient).keyInfo( Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS") ); Mockito.doReturn(outerInfo).when(hsmClient).generateKey( Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS") );  Mockito.doThrow(new nl.logius.digid.sharedlib.exception.ClientException("Not found",404)).when(hsmClient).keyInfo( Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS") );  final byte[] TBS_INNER = Base64.decodefinal byte[] TBS_OUTER = Base64.decodeockito.doReturn(signature("SSSSSSSSSSSSSSSS")).when(hsmClient).sign( Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS"), AdditionalMatchers.aryEq(TBS_OUTER), Mockito.eq(true) ); Mockito.doReturn(signature("SSSSSSSSSSSSSSSS")).when(hsmClient).sign( Mockito.eq("AT"), Mockito.eq("SSSSSSSSSSSSSSSS"), AdditionalMatchers.aryEq(TBS_INNER), Mockito.eq(true) );  certificateRepo.save(loadCvCertificate("rdw/acc/cvca.cvcert", true)); certificateRepo.save(loadCvCertificate("rdw/acc/dvca.cvcert", false)); certificateRepo.save(loadCvCertificate("rdw/acc/at001.cvcert", false)); final byte[] der = service.generateAtRequest(DocumentType.DL, PolymorphType.PIP, "NL002", "SSSSSSSSSSSSSSSS"); final CvCertificateRequest at = mapper.read(der, CvCertificateRequest.class); verifyAt(at.getCertificate(), "SSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSS", true); "<AssertPlaceHolder>"; }
generateAtRequest(DocumentType documentType, PolymorphType authorization, String sequenceNo, String reference) { final Certificate dvca = getDvca(documentType); final String subject = getAtSubject(documentType, dvca.getSubject(), sequenceNo); if (repository.countBySubject(subject) != 0) { throw new ClientException("AT certificate of " + subject + " already present"); }  final PublicKeyInfo keyInfo = new PublicKeyInfo(); keyInfo.setOid(EACObjectIdentifiers.id_TA_ECDSA_SHA_384); keyInfo.setParams(BrainpoolP320r1.DOMAIN_PARAMS); keyInfo.setKey(signatureService.getOrGenerateKey(subject));  final CvCertificate.Body body = new CvCertificate.Body(); body.setCar(dvca.getSubject()); body.setPublicKey(keyInfo); body.setChr(subject); if (documentType == DocumentType.DL) // use EACv2 for DL only body.setAuthorization(authorization);  final CvCertificate cv = new CvCertificate(); body.setRaw(mapper.write(body)); cv.setBody(body);  final EcSignature inner = new EcSignature(signatureService.sign(cv, subject, true)); cv.setSignature(inner);  if (reference == null) { return mapper.write(cv); }  CvCertificateRequest req = new CvCertificateRequest(); cv.setRaw(mapper.write(cv)); req.setCertificate(cv); req.setCar(reference);  final EcSignature outer = new EcSignature(signatureService.sign(req, reference, true)); req.setSignature(outer);  return mapper.write(req); }
[*] target: assertArrayEquals(signature("SSSSSSSSSSSSSSSS"), at.getSignature().getEncoded())
[-] pred:  org. junit. Assert. assertEquals ( outerInfo, result )

[*] target: assertArrayEquals(signature("SSSSSSSSSSSSSSSS"), at.getSignature().getEncoded())
[-] pred:  org. junit. Assert. assertEquals ( outerInfo. toString ( ), result )

[*] target: assertArrayEquals(signature("SSSSSSSSSSSSSSSS"), at.getSignature().getEncoded())
[-] pred:  org. junit. Assert. assertEquals ( outerInfo. intValue ( ), n )

[*] target: assertArrayEquals(signature("SSSSSSSSSSSSSSSS"), at.getSignature().getEncoded())
[-] pred:  org. junit. Assert. assertEquals ( outerInfo. intValue ( ), result )

[*] target: assertArrayEquals(signature("SSSSSSSSSSSSSSSS"), at.getSignature().getEncoded())
[-] pred:  org. junit. Assert. assertEquals ( outerInfo. toString ( ), n )

************************************
************************************
[+] input: Exception { EidSession session = new EidSession(); PrepareEacRequest request = new PrepareEacRequest(); request.setHeader(createRequestHeader()); request.setDg14(Base64.decodegetBytes())); request.setEfCvca(Base64.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS".getBytes())); request.setEfSOd(Base64.decoderequest.setPaceIcc(Base64.decode("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP".getBytes())); Certificate certificate = new Certificate(); certificate.setSubject("Subject"); certificate.setIssuer("SSSSSSSSSSSSSSSS"); certificate.setTrusted(true); certificate.setRaw(Base64.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); loadCscaCertificate("nik/tv/csca.crt");  when(securityFactory.generateKey(Mockito.eq(ephemeralKey.toDomainParameters()))).thenReturn(ephemeralKey); doReturn(session).when(nikService).initSession(any(AppRequest.class), isNull(), any(AppResponse.class)); when(cvCertificateServiceMock.getAt(eq(DocumentType.NIK), isNull())).thenReturn(certificate); when(cvCertificateServiceMock.getIssuer(any(Certificate.class))).thenReturn(certificate);  PrepareEacResponse result = nikService.prepareEacRequestRestService(request);  "<AssertPlaceHolder>"; assertEquals(8, result.getApdus().size()); verify(cvCertificateServiceMock, times(1)).getAt(eq(DocumentType.NIK), isNull()); verify(cvCertificateServiceMock, times(2)).getIssuer(any(Certificate.class)); }
prepareEacRequestRestService(PrepareEacRequest request) { PrepareEacResponse response = new PrepareEacResponse(); EidSession session = initSession(request, null, response); if (session == null) return response;  // 1.8 PA SOd sod = mapper.read(request.getEfSOd(), SOd.class); LdsSecurityObject ldsSecurityObject = sod.toLdsSecurityObject(mapper, cmsVerifier); ldsSecurityObject.verify(14, request.getDg14()); DataGroup14 dg14 = mapper.read(request.getDg14(), DataGroup14.class);  // 1.11 generate PKca.pcd / SKca.pcd1 2 840 10045 2 1 EcPrivateKey ephemeralKey = securityFactory.generateKey( dg14.getSecurityInfos().getEcPublicKey().getParameters().getDomainParameters() ); session.setIdpicc(new ByteArray(request.getPaceIcc())); session.setEphemeralKey(ephemeralKey); response.setEphemeralPKey(KeyUtils.getEncodedPublicPoint(ephemeralKey.toPublicKeySpec()));  KeyUtils.generateSecretKeys(session, dg14.getSecurityInfos().getEcPublicKey().getPublicParameters(), null); Certificate at = cvCertificateService.getAt(DocumentType.NIK, session.getUserConsentType()); session.setAtReference(at.getSubject()); Certificate dvca = cvCertificateService.getIssuer(at);  byte[] efCvca = request.getEfCvca(); String cvcaCar = new String(efCvca, 2, efCvca[1], StandardCharsets.US_ASCII);  List<Certificate> certificates = new ArrayList<>(); Certificate cvca = cvCertificateService.getIssuer(dvca);  if (!cvca.getSubject().equals(cvcaCar) && !cvca.isTrusted()) { var chainSize = 0; do { certificates.add(0, cvca); logger.warn("Certificate: added {} as link certificate in chain", cvca.getSubject()); cvca = cvCertificateService.getIssuer(cvca); chainSize++; } while(!cvca.isTrusted() && !cvca.getSubject().equals(cvcaCar) && chainSize < 5); }  certificates.add(dvca); certificates.add(at);  response.setApdus(new ApduService(session).createPrepareEacNIKApdus(certificates, at.getSubject()));  sessionRepo.save(session); return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( ( ( session ) + 1 ), request. setHeader ( ) )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( ( ( request. setHeader ( ) ) + 1 ), target. setHeader ( ) )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( ( ( request. setHeader ( ) ) + ( request. setHeader ( ) ) ), temp )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( ( ( session ) + 1 ), request2 )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( ( ( list. size ( ) ) + 1 ), list. size ( ) )

************************************
************************************
[+] input: preparePcaRequestRestServiceTest() { EidSession session = new EidSession(); session.setEphemeralKey(ephemeralKey); session.setIdpicc(ByteArray.fromBase64("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP")); session.setUserConsentType(PolymorphType.PIP); session.setAtReference("SSSSSSSSSSSSSSSS"); session.setkEnc(kEnc); session.setkMac(kMac); NikApduResponsesRequest request = new NikApduResponsesRequest(); request.setHeader(createRequestHeader()); request.setCounter(7); request.setApdu(new ResponseAPDU(Base64.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")));  doReturn(session).when(nikService).initSession(any(AppRequest.class), isNull(), any(AppResponse.class));  PreparePcaResponse result = nikService.preparePcaRequestRestService(request);  "<AssertPlaceHolder>"; assertEquals(3, result.getApdus().size()); verify(signatureService, times(1)).sign(any(byte[].class), eq("SSSSSSSSSSSSSSSS"), eq(true)); }
preparePcaRequestRestService(NikApduResponsesRequest request) { PreparePcaResponse response = new PreparePcaResponse(); EidSession session = initSession(request, null, response); if (session == null) return response;  // 1.28 validate ApduService apduService = new ApduService(session, request.getCounter()); ResponseAPDU responseAPDU = apduService.verify(request.getApdu()); byte[] challenge = responseAPDU.getData();  // 1.29 signData byte[] toSign = KeyUtils.calcDataToSign(challenge, session.getEphemeralKey().getQ(), session.getIdpicc().data); byte[] signature = signatureService.sign(toSign, session.getAtReference(), true);  // 1.30 APDU > external authenticate ImmutableList.Builder<CommandAPDU> chain = ImmutableList.builder(); chain.add(apduService.getExternalAuthenticate(signature)); chain.addAll(apduService.createSecureNikPcaApdus(session.getUserConsentType().getTag80())); response.setApdus(chain.build());  sessionRepo.save(session); return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, context )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, request )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit, result )

************************************
************************************
[+] input: validatePolymorphInfoRestServiceTest() { EidSession session = new EidSession(); Certificate certificate = new Certificate(); certificate.setSubject("Subject"); certificate.setIssuer("SSSSSSSSSSSSSSSS"); certificate.setRaw(Base64.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); PolyInfoRequest request = new PolyInfoRequest(); request.setHeader(createRequestHeader()); request.setCar("SSSSSSSSSSSSSSSS".getBytes()); request.setEfCardAccess(Base64.decodewhen(securityFactory.generateKey(Mockito.eq(ephemeralKey.toDomainParameters()))).thenReturn(ephemeralKey); doReturn(session).when(rdwService).initSession(any(AppRequest.class), eq(localhost), any(AppResponse.class)); when(cvCertificateServiceMock.getBySubject(isNull())).thenReturn(certificate); when(cvCertificateServiceMock.getIssuer(any(Certificate.class))).thenReturn(certificate);  PolyInfoResponse result = rdwService.validatePolymorphInfoRestService(request, localhost);  "<AssertPlaceHolder>"; verify(cvCertificateServiceMock, times(1)).getBySubject(isNull()); verify(cvCertificateServiceMock, times(1)).getIssuer(any(Certificate.class)); }
validatePolymorphInfoRestService(PolyInfoRequest request, String clientIp) { PolyInfoResponse response = new PolyInfoResponse(); EidSession session = initSession(request, clientIp, response); if (session == null) return response;  PcaSecurityInfos cardAccess = mapper.read(request.getEfCardAccess(), PcaSecurityInfos.class);  // 1. Validate the EFCardAccess file. // In EF.cardaccess moet bij polymorphic info versie 1 staan. // (ASN1 parsing: pcaVersion=1, flag randomizedPIP aan, flag compressedEncoding aan) CardValidations.validatePolymorhpicInfo(cardAccess.getPolymorphicInfo());  // 2. The CARs received match with the CVCA under which eID-Server terminal // certificates reside. (see RDW specifications) Certificate at = cvCertificateService.getBySubject(session.getAtReference()); Certificate dvca = cvCertificateService.getIssuer(at);  if (!dvca.getIssuer().equals(new String(request.getCar(), StandardCharsets.UTF_8))) { // TODO: Send link CVCA logger.error("Could not find chain with CVCA {}", request.getCar()); throw new ClientException("Could not find CVCA"); }  // 3. Select an appropriate TA certificate chain for the polymorphic // authentication the user has consented to, // --> DVCA cert + CVCA Public Key + Terminal Certificate response.setDvCert(CvCertificate.getAsSequence(dvca.getRaw()));  // 4. Generates a random ephemeral key K in participation of the coming CA // protocol. EcPrivateKey ephemeralKey = securityFactory.generateKey(cardAccess.getCaEcParameters().getDomainParameters()); response.setEphemeralKey(KeyUtils.getEncodedPublicPoint(ephemeralKey.toPublicKeySpec()));  // set session data that is used in later steps session.setIdpicc(new ByteArray(request.getIdpicc())); session.setEphemeralKey(ephemeralKey); session.setKeyReference(cardAccess.getCaKeyId()); session.setTaVersion(cardAccess.getTaVersion()); session.setPaceVersion(cardAccess.getPaceVersion());  // Result OK sessionRepo.save(session); return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 15, n )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 7, n )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 4, n )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 2, n )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit, 15 )

************************************
************************************
[+] input: getDigitalSignatureRestServiceTest() { EidSession session = new EidSession(); session.setAtReference("SSSSSSSSSSSSSSSS"); session.setEphemeralKey(ephemeralKey); session.setIdpicc(ByteArray.fromBase64("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); SignatureRequest request = new SignatureRequest(); request.setHeader(createRequestHeader()); byte[] signature = "signature".getBytes();  doReturn(session).when(rdwService).initSession(any(AppRequest.class), eq(localhost), any(AppResponse.class)); when(signatureService.sign(any(byte[].class), eq("SSSSSSSSSSSSSSSS"), eq(false))).thenReturn(signature);  SignatureResponse result = rdwService.getDigitalSignatureRestService(request, localhost);  "<AssertPlaceHolder>"; assertEquals(signature, result.getSignature()); verify(signatureService, times(1)).sign(any(byte[].class), eq("SSSSSSSSSSSSSSSS"), eq(false)); }
getDigitalSignatureRestService(SignatureRequest request, String clientIp) { SignatureResponse response = new SignatureResponse(); EidSession session = initSession(request, clientIp, response); if (session == null) return response;  // 1. create the digital signature to send back // use the private key to create the signature made out of the challenge, the // iccpace ephemeral public key and the ephemeral we created in the polymorphic // info byte[] toSign = KeyUtils.calcDataToSign(request.getChallenge(), session.getEphemeralKey().getQ(), session.getIdpicc().data); byte[] signature = signatureService.sign(toSign, session.getAtReference(), false); response.setSignature(signature);  // Result OK return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, result )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result. getSignature ( ), result. getSignature )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result. getSignature()); ), result. getSignature )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, null )

************************************
************************************
[+] input: generateSecureAPDUsRestServiceTest() { EidSession session = new EidSession(); session.setAtReference("SSSSSSSSSSSSSSSS"); session.setEphemeralKey(ephemeralKey); session.setKeyReference(2); session.setTaVersion(2); session.setPaceVersion(2); session.setUserConsentType(PolymorphType.PIP); session.setIdpicc(ByteArray.fromBase64("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); SecApduRequest request = new SecApduRequest(); request.setHeader(createRequestHeader()); request.setEfCardSecurity(Base64.decoderequest.setPcaApplicationId(Base64.decode("SSSSSSSSSSSS")); request.setRpicc(Base64.decode("SSSSSSSSSSSS")); request.setTpicc(Base64.decode("SSSSSSSSSSSS")); byte[] signature = "signature".getBytes();  doReturn(session).when(rdwService).initSession(any(AppRequest.class), eq(localhost), any(AppResponse.class)); when(signatureService.sign(any(byte[].class), eq("SSSSSSSSSSSSSSSS"), eq(false))).thenReturn(signature);  SecApduResponse result = rdwService.generateSecureAPDUsRestService(request, localhost);  "<AssertPlaceHolder>"; assertEquals(3, result.getApdus().size()); }
generateSecureAPDUsRestService(SecApduRequest request, String clientIp) { SecApduResponse response = new SecApduResponse(); EidSession session = initSession(request, clientIp, response); if (session == null) return response;  // 1a. check that the content of ef.cardsecurity is authentic with the PA // (passive authentication) is correct... final PcaSecurityInfos efCardSecurity = mapper.read(cmsVerifier.verifyMessage( ContentInfo.getInstance(request.getEfCardSecurity()), "0.4.0.127.0.7.3.2.1"), PcaSecurityInfos.class );  CardValidations.validateCardSecurityVsCardAccess(efCardSecurity, session.getKeyReference(), session.getPaceVersion(), session.getTaVersion());  // 2. generate 2 key pairs (known as Kenc(message encryption) and Kmac (message // authentication) based on the public key created in step1 (on session) // the nonce(rpicc) we received and the ca public key we got received // calculate the secret key byte[] rpicc = request.getRpicc(); KeyUtils.generateSecretKeys(session, efCardSecurity.getEcPublicKey().getPublicParameters(), rpicc);  // do the tpicc check with the tpicc from the request and the terminal token CardValidations.validateTerminalTokenVsTpicc(session, request.getTpicc());  // PMA=polymorphic authenticate, GA= general authenticate // we need 3 apdus response.setApdus(new ApduService(session).createSecureApdusForRDW( session.getUserConsentType().getTag80(), request.getPcaApplicationId()) );  // Result OK sessionRepo.save(session); return response; }
[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 1, result. size ( ) )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 1, result. length ( ) )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result. size ( ), 0 )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertEquals("OK", result.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, result )

************************************
************************************
[+] input: invalidPolymorphicInfoVersion() { final PolymorphicInfo info = mapper.read( Hex.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"), PolymorphicInfo.class);  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Polymorphic info is not correct", thrown.getMessage()); }
validatePolymorhpicInfo(PolymorphicInfo info) { if (info.getPcaVersion() != 1) { logger.error("Unsupported PCA version {}", info.getPcaVersion()); throw new ClientException("Polymorphic info is not correct"); } int polymorphicFlags = info.getFlags().intValue(); boolean randomizedPip = (polymorphicFlags & 32) != 0; boolean compressedEncoding = (polymorphicFlags & 4) != 0; if (!randomizedPip || !compressedEncoding) { logger.error("Polymorphic flags incorrect randomizedPip: {} compressedEncoding: {}", randomizedPip, compressedEncoding); throw new ClientException("Polymorphic info is not correct"); } }
[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getResultSize ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getResult getResult ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( error, info )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( msg, thrown )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  extend extend extend

************************************
************************************
[+] input: invalidPolymorphicRandomizedPip() { final PolymorphicInfo info = mapper.read( Hex.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"), PolymorphicInfo.class);  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Polymorphic info is not correct", thrown.getMessage());  }
validatePolymorhpicInfo(PolymorphicInfo info) { if (info.getPcaVersion() != 1) { logger.error("Unsupported PCA version {}", info.getPcaVersion()); throw new ClientException("Polymorphic info is not correct"); } int polymorphicFlags = info.getFlags().intValue(); boolean randomizedPip = (polymorphicFlags & 32) != 0; boolean compressedEncoding = (polymorphicFlags & 4) != 0; if (!randomizedPip || !compressedEncoding) { logger.error("Polymorphic flags incorrect randomizedPip: {} compressedEncoding: {}", randomizedPip, compressedEncoding); throw new ClientException("Polymorphic info is not correct"); } }
[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getResultSize ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( error, info )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( msg, thrown )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  extend extend extend

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org

************************************
************************************
[+] input: invalidPolymorphicCompressedEncoding() { final PolymorphicInfo info = mapper.read( Hex.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"), PolymorphicInfo.class);  ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Polymorphic info is not correct", thrown.getMessage()); }
validatePolymorhpicInfo(PolymorphicInfo info) { if (info.getPcaVersion() != 1) { logger.error("Unsupported PCA version {}", info.getPcaVersion()); throw new ClientException("Polymorphic info is not correct"); } int polymorphicFlags = info.getFlags().intValue(); boolean randomizedPip = (polymorphicFlags & 32) != 0; boolean compressedEncoding = (polymorphicFlags & 4) != 0; if (!randomizedPip || !compressedEncoding) { logger.error("Polymorphic flags incorrect randomizedPip: {} compressedEncoding: {}", randomizedPip, compressedEncoding); throw new ClientException("Polymorphic info is not correct"); } }
[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getResultSize ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getResult getResult ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org. junit. Assert. assertEquals ( msg, thrown )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  extend extend extend

[*] target: assertThrows(ClientException.class, () -> CardValidations.validatePolymorhpicInfo(info))
[-] pred:  org

************************************
************************************
[+] input: validateRdwAidUnsuccessful() { ClientException thrown = "<AssertPlaceHolder>"; assertEquals("Unknown aId", thrown.getMessage()); }
validateRdwAid(byte[] aId) { for (final byte[] compare : RDW_AID) { if (Arrays.equals(compare, aId)) { return; } } logger.error("Driving licence has unknown aId: {}", Hex.toHexString(aId).toUpperCase()); throw new ClientException("Unknown aId"); }
[*] target: assertThrows(ClientException.class, () -> CardValidations.validateRdwAid(Hex.decode("SSSSSS")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getClass ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validateRdwAid(Hex.decode("SSSSSS")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown. getCode ( ) )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validateRdwAid(Hex.decode("SSSSSS")))
[-] pred:  org. junit. Assert. assertNotNull ( thrown )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validateRdwAid(Hex.decode("SSSSSS")))
[-] pred:  org. junit. Assert. assertEquals ( 200, thrown )

[*] target: assertThrows(ClientException.class, () -> CardValidations.validateRdwAid(Hex.decode("SSSSSS")))
[-] pred:  org

************************************
************************************
[+] input: validRequest() { DAccountRequest request = new DAccountRequest(); request.setAppSessionId("id");  AccountDataResult result = new AccountDataResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.NOT_VERIFIED); result.setClassifiedDeceased(true); result.setSetting2Factor(true); result.setUnreadNotifications(1); result.setCurrentEmailAddress("email");  when(accountService.getAccountData(eq(1L))).thenReturn(result);  DAccountDataResult accountData = accountDataController.getAccountData(request);  "<AssertPlaceHolder>"; assertEquals("error", accountData.getError()); assertEquals(EmailStatus.NOT_VERIFIED, accountData.getEmailStatus()); assertEquals(true, accountData.getClassifiedDeceased()); assertEquals(1, accountData.getUnreadNotifications()); assertEquals(true, accountData.getSetting2Factor()); assertEquals("email", accountData.getCurrentEmailAddress()); }
getAccountData(@RequestBody DAccountRequest request) { AppSession appSession = validate(request); long accountId = appSession.getAccountId(); AccountDataResult result = accountService.getAccountData(accountId); return DAccountDataResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountData, accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( createData, accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit, accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validEmailStatusVerified() { DAccountRequest request = new DAccountRequest(); request.setAppSessionId("id");  EmailStatusResult result = new EmailStatusResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.VERIFIED); result.setEmailAddress("address"); result.setActionNeeded(true);  when(accountService.getEmailStatus(eq(1L))).thenReturn(result);  DEmailStatusResult emailStatus = emailController.getEmailStatus(request);  assertEquals(Status.OK, emailStatus.getStatus()); assertEquals("error", emailStatus.getError()); assertEquals(EmailStatus.VERIFIED, emailStatus.getEmailStatus()); "<AssertPlaceHolder>"; assertEquals(true, emailStatus.getUserActionNeeded()); }
getEmailStatus(@RequestBody DAccountRequest deprecatedRequest) { AppSession appSession = validate(deprecatedRequest);  var result = accountService.getEmailStatus(appSession.getAccountId()); return DEmailStatusResult.copyFrom(result); }
[*] target: assertEquals("address", emailStatus.getCurrentEmailAddress())
[-] pred:  org. junit. Assert. assertNotNull ( emailStatus )

[*] target: assertEquals("address", emailStatus.getCurrentEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ) )

[*] target: assertEquals("address", emailStatus.getCurrentEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getDimensionCount ( ) )

[*] target: assertEquals("address", emailStatus.getCurrentEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getCode ( ) )

[*] target: assertEquals("address", emailStatus.getCurrentEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( emailStatus, emailStatus )

************************************
************************************
[+] input: validEmailStatusNotVerified() { DAccountRequest request = new DAccountRequest(); request.setAppSessionId("id");  EmailStatusResult result = new EmailStatusResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.NOT_VERIFIED); result.setEmailAddress("address"); result.setActionNeeded(true);  when(accountService.getEmailStatus(eq(1L))).thenReturn(result);  DEmailStatusResult emailStatus = emailController.getEmailStatus(request);  assertEquals(Status.OK, emailStatus.getStatus()); assertEquals("error", emailStatus.getError()); assertEquals(EmailStatus.NOT_VERIFIED, emailStatus.getEmailStatus()); "<AssertPlaceHolder>"; assertEquals(true, emailStatus.getUserActionNeeded()); }
getEmailStatus(@RequestBody DAccountRequest deprecatedRequest) { AppSession appSession = validate(deprecatedRequest);  var result = accountService.getEmailStatus(appSession.getAccountId()); return DEmailStatusResult.copyFrom(result); }
[*] target: assertEquals("address", emailStatus.getNoVerifiedEmailAddress())
[-] pred:  org. junit. Assert. assertNotNull ( emailStatus )

[*] target: assertEquals("address", emailStatus.getNoVerifiedEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getCode ( ) )

[*] target: assertEquals("address", emailStatus.getNoVerifiedEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getDimensionCount ( ) )

[*] target: assertEquals("address", emailStatus.getNoVerifiedEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getResponseCode ( ) )

[*] target: assertEquals("address", emailStatus.getNoVerifiedEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ) )

************************************
************************************
[+] input: validEmailRegister() { DEmailRegisterRequest request = new DEmailRegisterRequest(); request.setAppSessionId("id"); request.setEmail("email");  EmailRegisterResult result = new EmailRegisterResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailAddress("address"); result.setMaxAmountEmails(3);  when(accountService.registerEmail(eq(1L), any())).thenReturn(result);  DEmailRegisterResult registerResult = emailController.registerEmail(request);  "<AssertPlaceHolder>"; assertEquals("error", registerResult.getError()); assertEquals(3, registerResult.getMaxAmountEmails()); assertEquals("address", registerResult.getEmailAddress()); }
registerEmail(@RequestBody DEmailRegisterRequest deprecatedRequest) { AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.registerEmail(appSession.getAccountId(), request);  return DEmailRegisterResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( prepare, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: invalidEmailRegister() { DEmailRegisterRequest request = new DEmailRegisterRequest(); request.setAppSessionId("id");  EmailRegisterResult result = new EmailRegisterResult(); result.setStatus(Status.OK);  when(accountService.registerEmail(eq(1L), any())).thenReturn(result);  DEmailRegisterResult registerResult = emailController.registerEmail(request);  "<AssertPlaceHolder>"; }
registerEmail(@RequestBody DEmailRegisterRequest deprecatedRequest) { AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.registerEmail(appSession.getAccountId(), request);  return DEmailRegisterResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( registerResult, result )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( registerResult, result ;

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validEmailVerify() { DEmailVerifyRequest request = new DEmailVerifyRequest(); request.setAppSessionId("id"); request.setVerificationCode("code");  EmailVerifyResult result = new EmailVerifyResult(); result.setStatus(Status.OK); result.setError("error"); result.setRemainingAttempts(6);  when(accountService.verifyEmail(eq(1L), any())).thenReturn(result);  DEmailVerifyResult verifyResult = emailController.verifyEmail(request);  "<AssertPlaceHolder>"; assertEquals("error", verifyResult.getError()); assertEquals(6, verifyResult.getRemainingAttempts()); }
verifyEmail(@RequestBody DEmailVerifyRequest deprecatedRequest) { validateVerificationCode(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);   var request = deprecatedRequest.getRequest(); var result = accountService.verifyEmail(appSession.getAccountId(), request);  return DEmailVerifyResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, verifyResult )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( verifyResult, result )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( verifyResult )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit, verifyResult )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: invalidEmailVerify() { DEmailVerifyRequest request = new DEmailVerifyRequest(); request.setAppSessionId("id");  DAccountException exc = "<AssertPlaceHolder>"; });  assertEquals(HttpStatus.BAD_REQUEST, exc.getAccountErrorMessage().getHttpStatus()); assertEquals("Missing parameters.", exc.getAccountErrorMessage().getMessage()); }
verifyEmail(@RequestBody DEmailVerifyRequest deprecatedRequest) { validateVerificationCode(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);   var request = deprecatedRequest.getRequest(); var result = accountService.verifyEmail(appSession.getAccountId(), request);  return DEmailVerifyResult.copyFrom(result); }
[*] target: assertThrows(DAccountException.class, () -> { emailController.verifyEmail(request)
[-] pred:  org. junit. Assert. assertNotNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { emailController.verifyEmail(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exc instanceof java. lang. String ) )

[*] target: assertThrows(DAccountException.class, () -> { emailController.verifyEmail(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exc instanceof java. lang. IllegalArgumentException ) )

[*] target: assertThrows(DAccountException.class, () -> { emailController.verifyEmail(request)
[-] pred:  org. junit. Assert. assertNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { emailController.verifyEmail(request)
[-] pred:  org

************************************
************************************
[+] input: validEmailConfirm() { DEmailConfirmRequest request = new DEmailConfirmRequest(); request.setAppSessionId("id"); request.setEmailAddressConfirmed(true);  AccountResult result = new EmailVerifyResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.confirmEmail(eq(1L), any())).thenReturn(result);  AccountResult acocuntResult = emailController.confirmEmail(request);  "<AssertPlaceHolder>"; assertEquals("error", acocuntResult.getError()); }
confirmEmail(@RequestBody DEmailConfirmRequest deprecatedRequest) { validateEmailAddressConfirmed(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.confirmEmail(appSession.getAccountId(), request);  return result; }
[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( acocuntResult, acocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( acocuntResult, result )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( acocuntResult, resultocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( acocuntResult. confirmEmail ( ), acocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: invalidEmailConfirm() { DEmailConfirmRequest request = new DEmailConfirmRequest(); request.setAppSessionId("id");  DAccountException exc = "<AssertPlaceHolder>"; });  assertEquals(HttpStatus.BAD_REQUEST, exc.getAccountErrorMessage().getHttpStatus()); assertEquals("Missing parameters.", exc.getAccountErrorMessage().getMessage()); }
confirmEmail(@RequestBody DEmailConfirmRequest deprecatedRequest) { validateEmailAddressConfirmed(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.confirmEmail(appSession.getAccountId(), request);  return result; }
[*] target: assertThrows(DAccountException.class, () -> { emailController.confirmEmail(request)
[-] pred:  org. junit. Assert. assertNotNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { emailController.confirmEmail(request)
[-] pred:  org. junit. Assert. assertNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { emailController.confirmEmail(request)
[-] pred:  org. junit. Assert. assertEquals ( exc, null )

[*] target: assertThrows(DAccountException.class, () -> { emailController.confirmEmail(request)
[-] pred:  org. junit. Assert. assertEquals ( exception, exc )

[*] target: assertThrows(DAccountException.class, () -> { emailController.confirmEmail(request)
[-] pred:  org. junit. Assert. assertEquals ( exc, request )

************************************
************************************
[+] input: testInvalidPageId() { DAccountLogsRequest request = new DAccountLogsRequest(); request.setAppSessionId("id");  DAccountException exc = "<AssertPlaceHolder>"; });  assertEquals(HttpStatus.BAD_REQUEST, exc.getAccountErrorMessage().getHttpStatus()); assertEquals("Missing parameters.", exc.getAccountErrorMessage().getMessage()); }
getAccountLogs(@RequestBody DAccountLogsRequest deprecatedRequest){ validatePageId(deprecatedRequest); AppSession appSession = validate(deprecatedRequest); var request = deprecatedRequest.getRequest(); var result = accountService.getAccountLogs(appSession.getAccountId(), appSession.getDeviceName(), appSession.getAppCode(), request); return DAccountLogsResult.copyFrom(result); }
[*] target: assertThrows(DAccountException.class, () -> { accountLogsController.getAccountLogs(request)
[-] pred:  org. junit. Assert. assertEquals ( exc, exc )

[*] target: assertThrows(DAccountException.class, () -> { accountLogsController.getAccountLogs(request)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. assertEquals ( exc, exc )

[*] target: assertThrows(DAccountException.class, () -> { accountLogsController.getAccountLogs(request)
[-] pred:  org. junit. Assert. assertEquals ( exception, exc )

[*] target: assertThrows(DAccountException.class, () -> { accountLogsController.getAccountLogs(request)
[-] pred:  org. junit. Assert. assertNotNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { accountLogsController.getAccountLogs(request)
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. assertEquals ( exception, exc )

************************************
************************************
[+] input: testValidRequest() { DAccountLogsRequest request = new DAccountLogsRequest(); request.setPageId(1); request.setAppSessionId("id");  AccountLogsResult result = new AccountLogsResult(); result.setTotalItems(10); result.setTotalPages(1); List<AccountLog> results = new ArrayList<>(); result.setResults(results); result.setStatus(Status.OK); result.setError("error");  when(accountService.getAccountLogs(eq(1L), any(), any(), any())).thenReturn(result);  DAccountLogsResult accountLogs = accountLogsController.getAccountLogs(request);  "<AssertPlaceHolder>"; assertEquals("error", accountLogs.getError()); assertEquals(results, accountLogs.getLogs()); }
getAccountLogs(@RequestBody DAccountLogsRequest deprecatedRequest){ validatePageId(deprecatedRequest); AppSession appSession = validate(deprecatedRequest); var request = deprecatedRequest.getRequest(); var result = accountService.getAccountLogs(appSession.getAccountId(), appSession.getDeviceName(), appSession.getAppCode(), request); return DAccountLogsResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountLogs. size ( ), 1 )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountLogs. size ( ), 0 )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountLogs, accountLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validTwoFactorStatus() { DAccountRequest request = new DAccountRequest(); request.setAppSessionId("id");  TwoFactorStatusResult result = new TwoFactorStatusResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.getTwoFactorStatus(eq(1L), any(), any())).thenReturn(result);  DTwoFactorStatusResult twoFactor = twoFactorController.getTwoFactor(request);  "<AssertPlaceHolder>"; assertEquals("error", twoFactor.getError()); }
getTwoFactor(@RequestBody DAccountRequest deprecatedRequest) { AppSession appSession = validate(deprecatedRequest);  var result =  accountService.getTwoFactorStatus(appSession.getAccountId(), appSession.getDeviceName(), appSession.getAppCode()); return DTwoFactorStatusResult.copyFrom(result); }
[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( twoFactor, twoFactor )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( twoFactor. getTwoFactor( contexts. getTwoFactor( request, twoFactor )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( twoFactor. getTwoFactor(ListRequestBody DTwoFactorStatusResult2Factor )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, twoFactor )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org

************************************
************************************
[+] input: invalidSettingTwoFactor() { DTwoFactorChangeRequest request = new DTwoFactorChangeRequest(); request.setAppSessionId("id");  DAccountException exc = "<AssertPlaceHolder>"; });  assertEquals(HttpStatus.BAD_REQUEST, exc.getAccountErrorMessage().getHttpStatus()); assertEquals("Missing parameters.", exc.getAccountErrorMessage().getMessage()); }
changeTwoFactor(@RequestBody DTwoFactorChangeRequest deprecatedRequest) { validateSettingTwoFactor(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.changeTwoFactor(appSession.getAccountId(), request);  return result; }
[*] target: assertThrows(DAccountException.class, () -> { twoFactorController.changeTwoFactor(request)
[-] pred:  org. junit. Assert. assertNotNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { twoFactorController.changeTwoFactor(request)
[-] pred:  org. junit. Assert. assertTrue ( ( exc instanceof java. lang. String ) )

[*] target: assertThrows(DAccountException.class, () -> { twoFactorController.changeTwoFactor(request)
[-] pred:  org. junit. Assert. assertNull ( exc )

[*] target: assertThrows(DAccountException.class, () -> { twoFactorController.changeTwoFactor(request)
[-] pred:  org. junit. Assert. assertEquals ( msg, exc )

[*] target: assertThrows(DAccountException.class, () -> { twoFactorController.changeTwoFactor(request)
[-] pred:  org

************************************
************************************
[+] input: validTwoFactorChange() { DTwoFactorChangeRequest request = new DTwoFactorChangeRequest(); request.setAppSessionId("id"); request.setSettingTwoFactor(false);  AccountResult result = new TwoFactorStatusResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.changeTwoFactor(eq(1L), any())).thenReturn(result);  AccountResult accountResult = twoFactorController.changeTwoFactor(request);  "<AssertPlaceHolder>"; assertEquals("error", accountResult.getError()); }
changeTwoFactor(@RequestBody DTwoFactorChangeRequest deprecatedRequest) { validateSettingTwoFactor(deprecatedRequest); AppSession appSession = validate(deprecatedRequest);  var request = deprecatedRequest.getRequest(); var result = accountService.changeTwoFactor(appSession.getAccountId(), request);  return result; }
[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountResult, result )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new AccountResult ( ), accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( accountResult, accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: testGetAccountData() { Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "email_status", "VERIFIED", "setting_2_factor", "true", "classified_deceased", "true");  when(accountClient.getAccountData(anyLong())).thenReturn(new AsyncResult<Map<String, Object>>(result)); when(notificationService.asyncUnreadNotificationCount(anyLong())).thenReturn(new AsyncResult<Integer>(1));  AccountDataResult accountData = accountService.getAccountData(1);  "<AssertPlaceHolder>"; assertEquals("custom error", accountData.getError()); assertEquals(1, accountData.getUnreadNotifications()); assertEquals(true, accountData.getClassifiedDeceased()); assertEquals(EmailStatus.VERIFIED, accountData.getEmailStatus()); assertEquals(true, accountData.getSetting2Factor()); }
getAccountData(long accountId) { Future<Map<String, Object>> accountDataFuture = accountClient.getAccountData(accountId); Future<Integer> unreadNotificationsFuture = notificationService.asyncUnreadNotificationCount(accountId);  AccountDataResult result; try { result = objectMapper.convertValue(accountDataFuture.get(), AccountDataResult.class); } catch (IllegalArgumentException | InterruptedException | ExecutionException e) { throw new AccountRuntimeException("TODO", e); } try { result.setUnreadNotifications(unreadNotificationsFuture.get()); } catch (InterruptedException | ExecutionException e) { throw new AccountRuntimeException("TODO", e); } return result; }
[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertThat ( accountData. get ( 0 ), org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertThat ( accountData. get ( 0 ), org. hamcrest. CoreMatchers. is ( 5 ) )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertThat ( accountData. getActorSystem ( ), org. hamcrest. CoreMatchers. is ( 5 ) )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertThat ( accountData. getPlanData ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

************************************
************************************
[+] input: testGetAccountLogs() { AccountLogsRequest request = new AccountLogsRequest(); request.setPageId(1); request.setPageSize(2); request.setQuery("q");  List<Map<String, Object>> logs = List.of( Map.of( "id", 6, "name", "log name")); Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "total_items", 3, "total_pages", 5, "results", logs);  when(accountClient.getAccountLogs(anyLong(), anyString(), anyString(), any(), any(), anyString())).thenReturn(result);  AccountLogsResult accountLogs = accountService.getAccountLogs(1, "deviceName", "appCode", request);  "<AssertPlaceHolder>"; assertEquals("custom error", accountLogs.getError()); assertEquals(3, accountLogs.getTotalItems()); assertEquals(5, accountLogs.getTotalPages()); assertEquals(1, accountLogs.getResults().size()); }
getAccountLogs(long accountId, String deviceName, String appCode, AccountLogsRequest request) { Map<String, Object> resultMap = accountClient.getAccountLogs(accountId, deviceName, appCode, request.getPageSize(), request.getPageId(), request.getQuery()); return objectMapper.convertValue(resultMap, AccountLogsResult.class); }
[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( AccountLogsResult accountLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( ( AccountLogsResult accountLogs. size ( ) ) > 0 ) )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertThat ( AccountLogsResult accountLogs. size ( ), org. hamcrest. CoreMatchers. is ( 1 ) )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertThat ( AccountLogsResult accountLogs. get ( ), org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertThat ( AccountLogsResult accountLogs. getData ( ), org. hamcrest. CoreMatchers. is ( result ) )

************************************
************************************
[+] input: testChangeTwoFactor() { TwoFactorChangeRequest request = new TwoFactorChangeRequest(); request.setSetting(true);  Map<String, Object> result = Map.of( "status", "OK", "error", "custom error");  when(accountClient.setTwoFactor(eq(1L), eq(true))).thenReturn(result);  AccountResult accountResult = accountService.changeTwoFactor(1L, request);  "<AssertPlaceHolder>"; assertEquals("custom error", accountResult.getError()); }
changeTwoFactor(long accountId, TwoFactorChangeRequest request) { Map<String, Object> resultMap = accountClient.setTwoFactor(accountId, request.getSetting()); return objectMapper.convertValue(resultMap, AccountResult.class); }
[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. result )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( accountResult instanceof AccountResult ) )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountResult. result )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: testStatusTwoFactor() { Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "setting_2_factor", true);  when(accountClient.getTwoFactor(eq(1L), anyString(), anyString())).thenReturn(result);  TwoFactorStatusResult twoFactorStatus = accountService.getTwoFactorStatus(1L, "deviceName", "appCode");  "<AssertPlaceHolder>"; assertEquals("custom error", twoFactorStatus.getError()); assertEquals(true, twoFactorStatus.getSetting()); }
getTwoFactorStatus(long accountId, String deviceName, String appCode) { Map<String, Object> resultMap = accountClient.getTwoFactor(accountId, deviceName, appCode); return objectMapper.convertValue(resultMap, TwoFactorStatusResult.class); }
[*] target: assertEquals(Status.OK, twoFactorStatus.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, twoFactorStatus. getTwoFactorStatus ( ) )

[*] target: assertEquals(Status.OK, twoFactorStatus.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 200, twoFactorStatus. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactorStatus.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 3, twoFactorStatus. getTwoFactorStatus ( ) )

[*] target: assertEquals(Status.OK, twoFactorStatus.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, twoFactorStatus. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactorStatus.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, twoFactorStatus. getTwoFactorStatus )

************************************
************************************
[+] input: testGetEmailStatus() { Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "email_status", "VERIFIED", "user_action_needed", "true", "email_address", "address");  when(accountClient.getEmailStatus(eq(1L))).thenReturn(result);  EmailStatusResult emailStatus = accountService.getEmailStatus(1L);  assertEquals(Status.OK, emailStatus.getStatus()); assertEquals("custom error", emailStatus.getError()); assertEquals(EmailStatus.VERIFIED, emailStatus.getEmailStatus()); "<AssertPlaceHolder>"; assertEquals("address", emailStatus.getEmailAddress()); }
getEmailStatus(long accountId) { Map<String, Object> resultMap = accountClient.getEmailStatus(accountId); return objectMapper.convertValue(resultMap, EmailStatusResult.class); }
[*] target: assertEquals(true, emailStatus.getActionNeeded())
[-] pred:  org. junit. Assert. assertThat ( emailStatus. toString ( ), org. hamcrest. CoreMatchers. is ( result. toString ( ) ) )

[*] target: assertEquals(true, emailStatus.getActionNeeded())
[-] pred:  org. junit. Assert. assertThat ( emailStatus. get ( result ), org. hamcrest. CoreMatchers. is ( 200 ) )

[*] target: assertEquals(true, emailStatus.getActionNeeded())
[-] pred:  org. junit. Assert. assertThat ( emailStatus. getTitle ( ), org. hamcrest. CoreMatchers. is ( result ) )

[*] target: assertEquals(true, emailStatus.getActionNeeded())
[-] pred:  org. junit. Assert. assertThat ( emailStatus. getTitle ( ), org. hamcrest. CoreMatchers. is ( result. toString ( ) ) )

[*] target: assertEquals(true, emailStatus.getActionNeeded())
[-] pred:  org

************************************
************************************
[+] input: testRegisterEmail() { EmailRegisterRequest request = new EmailRegisterRequest(); request.setEmail("address");  Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "max_amount_emails", "5", "email_address", "address");  when(accountClient.registerEmail(eq(1L), eq("address"))).thenReturn(result);  EmailRegisterResult emailRegisterResult = accountService.registerEmail(1L, request);  "<AssertPlaceHolder>"; assertEquals("custom error", emailRegisterResult.getError()); assertEquals(5, emailRegisterResult.getMaxAmountEmails()); assertEquals("address", emailRegisterResult.getEmailAddress()); }
registerEmail(long accountId, EmailRegisterRequest request) { Map<String, Object> resultMap = accountClient.registerEmail(accountId, request.getEmail()); return objectMapper.convertValue(resultMap, EmailRegisterResult.class); }
[*] target: assertEquals(Status.OK, emailRegisterResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( emailRegisterResult )

[*] target: assertEquals(Status.OK, emailRegisterResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailRegisterResult instanceof EmailRegisterResult ) )

[*] target: assertEquals(Status.OK, emailRegisterResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailRegisterResult instanceof actorRegisterResult ) )

[*] target: assertEquals(Status.OK, emailRegisterResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailRegisterResult instanceof netRegisterResult ) )

[*] target: assertEquals(Status.OK, emailRegisterResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailRegisterResult. size ( ) )

************************************
************************************
[+] input: testVerifyEmail() { EmailVerifyRequest request = new EmailVerifyRequest(); request.setVerificationCode("code");  Map<String, Object> result = Map.of( "status", "OK", "error", "custom error", "remaining_attempts", "5");  when(accountClient.verifyEmail(eq(1L), eq("code"))).thenReturn(result);  EmailVerifyResult emailVerifyResult = accountService.verifyEmail(1L, request);  "<AssertPlaceHolder>"; assertEquals("custom error", emailVerifyResult.getError()); assertEquals(5, emailVerifyResult.getRemainingAttempts()); }
verifyEmail(long accountId, EmailVerifyRequest request) { Map<String, Object> resultMap = accountClient.verifyEmail(accountId, request.getVerificationCode()); return objectMapper.convertValue(resultMap, EmailVerifyResult.class); }
[*] target: assertEquals(Status.OK, emailVerifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailVerifyResult instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals(Status.OK, emailVerifyResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( emailVerifyResult )

[*] target: assertEquals(Status.OK, emailVerifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailVerifyResult instanceof TYPE_2 ) )

[*] target: assertEquals(Status.OK, emailVerifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( emailVerifyResult instanceof org. json. 0 ) )

[*] target: assertEquals(Status.OK, emailVerifyResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: testConfirmEmail() { EmailConfirmRequest request = new EmailConfirmRequest(); request.setEmailAddressConfirmed(true);  Map<String, Object> result = Map.of( "status", "OK", "error", "custom error");  when(accountClient.confirmEmail(eq(1L), eq(true))).thenReturn(result);  AccountResult accountResult = accountService.confirmEmail(1L, request);  "<AssertPlaceHolder>"; assertEquals("custom error", accountResult.getError()); }
confirmEmail(long accountId, EmailConfirmRequest request) { Map<String, Object> resultMap = accountClient.confirmEmail(accountId, request.getEmailAddressConfirmed()); return objectMapper.convertValue(resultMap, AccountResult.class); }
[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. getContent ( ) )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. confirmEmail(long accountId, Request )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. result )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. confirmEmail ( ) )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult. confirmEmail(long accountId, request )

************************************
************************************
[+] input: testValidRequest() { AccountDataResult result = new AccountDataResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.NOT_VERIFIED); result.setClassifiedDeceased(true); result.setSetting2Factor(true); result.setUnreadNotifications(0); result.setCurrentEmailAddress("email");  when(accountService.getAccountData(eq(mijnDigiDSession.getAccountId().longValue()))).thenReturn(result);  AccountDataResult accountData = accountDataController.getAccountStatus(mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", accountData.getError()); assertEquals(EmailStatus.NOT_VERIFIED, accountData.getEmailStatus()); assertEquals(true, accountData.getClassifiedDeceased()); assertEquals(0, accountData.getUnreadNotifications()); assertEquals(true, accountData.getSetting2Factor()); assertEquals("email", accountData.getCurrentEmailAddress());  }
getAccountStatus(@RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return this.accountService.getAccountData(mijnDigiDSession.getAccountId()); }
[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new AccountDataResult ( ), accountData )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( accountData instanceof org. hamcrest. CoreMatchers ) )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( accountData!= null ) )

[*] target: assertEquals(Status.OK, accountData.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validEmailStatusVerified() {  EmailStatusResult result = new EmailStatusResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.VERIFIED); result.setEmailAddress("address"); result.setActionNeeded(true);  when(accountService.getEmailStatus(anyLong())).thenReturn(result);  EmailStatusResult emailStatus = emailController.getEmailStatus(mijnDigiDSession.getId());  assertEquals(Status.OK, emailStatus.getStatus()); assertEquals("error", emailStatus.getError()); assertEquals(EmailStatus.VERIFIED, emailStatus.getEmailStatus()); "<AssertPlaceHolder>"; }
getEmailStatus(@RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.getEmailStatus(mijnDigiDSession.getAccountId()); }
[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 4, emailStatus. getEmailStatus ( ). size ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). intValue ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). getCode ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). getStatusCode ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). size ( ) )

************************************
************************************
[+] input: validEmailStatusNotVerified() { EmailStatusResult result = new EmailStatusResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailStatus(EmailStatus.NOT_VERIFIED); result.setEmailAddress("address"); result.setActionNeeded(true);  when(accountService.getEmailStatus(anyLong())).thenReturn(result);  EmailStatusResult emailStatus = emailController.getEmailStatus(mijnDigiDSession.getId());  assertEquals(Status.OK, emailStatus.getStatus()); assertEquals("error", emailStatus.getError()); assertEquals(EmailStatus.NOT_VERIFIED, emailStatus.getEmailStatus()); "<AssertPlaceHolder>"; }
getEmailStatus(@RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.getEmailStatus(mijnDigiDSession.getAccountId()); }
[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). intValue ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). getCode ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 4, emailStatus. getEmailStatus ( ). size ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). size ( ) )

[*] target: assertEquals("address", emailStatus.getEmailAddress())
[-] pred:  org. junit. Assert. assertEquals ( 200, emailStatus. getEmailStatus ( ). getStatusCode ( ) )

************************************
************************************
[+] input: validEmailRegister() { EmailRegisterRequest request = new EmailRegisterRequest(); request.setEmail("email");  EmailRegisterResult result = new EmailRegisterResult(); result.setStatus(Status.OK); result.setError("error"); result.setEmailAddress("address"); result.setMaxAmountEmails(3);  when(accountService.registerEmail(anyLong(), any())).thenReturn(result);  EmailRegisterResult registerResult = emailController.registerEmail(request, mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", registerResult.getError()); assertEquals(3, registerResult.getMaxAmountEmails()); assertEquals("address", registerResult.getEmailAddress()); }
registerEmail(@RequestBody @Valid EmailRegisterRequest request, @RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.registerEmail(mijnDigiDSession.getAccountId(), request); }
[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( request, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( registerResult, result )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( registerResult, registerResult )

[*] target: assertEquals(Status.OK, registerResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validEmailVerify() { EmailVerifyRequest request = new EmailVerifyRequest(); request.setVerificationCode("code");  EmailVerifyResult result = new EmailVerifyResult(); result.setStatus(Status.OK); result.setError("error"); result.setRemainingAttempts(6);  when(accountService.verifyEmail(anyLong(), any())).thenReturn(result);  EmailVerifyResult verifyResult = emailController.verifyEmail(request, mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", verifyResult.getError()); assertEquals(6, verifyResult.getRemainingAttempts()); }
verifyEmail(@RequestBody @Valid EmailVerifyRequest request, @RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.verifyEmail(mijnDigiDSession.getAccountId(), request); }
[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( verifyResult instanceof TYPEVerifyResult ) )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( verifyResult )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( verifyResult instanceof org. openLine ) )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( verifyResult instanceof org. neccessary ) )

[*] target: assertEquals(Status.OK, verifyResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validEmailConfirm() { EmailConfirmRequest request = new EmailConfirmRequest(); request.setEmailAddressConfirmed(true);  AccountResult result = new EmailVerifyResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.confirmEmail(anyLong(), any())).thenReturn(result);  AccountResult acocuntResult = emailController.confirmEmail(request, mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", acocuntResult.getError()); }
confirmEmail(@RequestBody @Valid EmailConfirmRequest request, @RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.confirmEmail(mijnDigiDSession.getAccountId(), request); }
[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( acocuntResult, acocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( acocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertSame ( acocuntResult, acocuntResult )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org. junit. Assert. assertTrue ( ( acocuntResult == acocuntResult ) )

[*] target: assertEquals(Status.OK, acocuntResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: testValidRequest() { AccountLogsRequest request = new AccountLogsRequest(); request.setPageId(1);  AccountLogsResult result = new AccountLogsResult(); result.setTotalItems(10); result.setTotalPages(1); List<AccountLog> results = new ArrayList<>(); result.setResults(results); result.setStatus(Status.OK); result.setError("error");  when(accountService.getAccountLogs(anyLong(), anyString(), anyString(), any())).thenReturn(result);  AccountLogsResult accountLogs = accountLogsController.getAccountLogs(request, mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", accountLogs.getError()); assertEquals(10, accountLogs.getTotalItems()); assertEquals(1, accountLogs.getTotalPages()); assertEquals(results, accountLogs.getResults()); }
getAccountLogs(@RequestBody @Valid AccountLogsRequest request, @RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return accountService.getAccountLogs(mijnDigiDSession.getAccountId(), mijnDigiDSession.getDeviceName(), mijnDigiDSession.getAppCode(), request); }
[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( accountLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( balanceLogsResult accountLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit. Assert. assertNotNull ( acctLogs )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org. junit )

[*] target: assertEquals(Status.OK, accountLogs.getStatus())
[-] pred:  org

************************************
************************************
[+] input: ExecutionException { when(nsClient.AsyncGetUnreadNotifications(eq(1L))).thenReturn(new AsyncResult(5));  int unreadNotifications = notificationService.asyncUnreadNotificationCount(1L).get();  "<AssertPlaceHolder>"; }
asyncUnreadNotificationCount(long accountId){ return nsClient.AsyncGetUnreadNotifications(accountId); }
[*] target: assertEquals(5, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 1, unreadNotifications )

[*] target: assertEquals(5, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 0, unreadNotifications )

[*] target: assertEquals(5, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 15, unreadNotifications )

[*] target: assertEquals(5, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 5, unreadNotifications )

[*] target: assertEquals(5, unreadNotifications)
[-] pred:  org

************************************
************************************
[+] input: ExecutionException { when(nsClient.AsyncGetUnreadNotifications(eq(1L))).thenReturn(new AsyncResult(0));  int unreadNotifications = notificationService.asyncUnreadNotificationCount(1L).get();  "<AssertPlaceHolder>"; }
asyncUnreadNotificationCount(long accountId){ return nsClient.AsyncGetUnreadNotifications(accountId); }
[*] target: assertEquals(0, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 1, unreadNotifications )

[*] target: assertEquals(0, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 0, unreadNotifications )

[*] target: assertEquals(0, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 4, unreadNotifications )

[*] target: assertEquals(0, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 3, unreadNotifications )

[*] target: assertEquals(0, unreadNotifications)
[-] pred:  org. junit. Assert. assertEquals ( 2, unreadNotifications )

************************************
************************************
[+] input: validTwoFactorStatus() { TwoFactorStatusResult result = new TwoFactorStatusResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.getTwoFactorStatus(eq(1L), any(), any())).thenReturn(result);  TwoFactorStatusResult twoFactor = twoFactorController.getTwoFactor(mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", twoFactor.getError()); }
getTwoFactor(@RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return this.accountService.getTwoFactorStatus(mijnDigiDSession.getAccountId(), mijnDigiDSession.getDeviceName(), mijnDigiDSession.getAppCode()); }
[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 2, twoFactor. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new 3, twoFactor. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 3, twoFactor. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. commons. lang. Integer ( 2 ), twoFactor. getCode ( ) )

[*] target: assertEquals(Status.OK, twoFactor.getStatus())
[-] pred:  org

************************************
************************************
[+] input: validTwoFactorChange() { TwoFactorChangeRequest request = new TwoFactorChangeRequest(); request.setSetting(false);  AccountResult result = new TwoFactorStatusResult(); result.setStatus(Status.OK); result.setError("error");  when(accountService.changeTwoFactor(eq(1L), any())).thenReturn(result);  AccountResult accountResult = twoFactorController.setTwoFactor(request, mijnDigiDSession.getId());  "<AssertPlaceHolder>"; assertEquals("error", accountResult.getError()); }
setTwoFactor(@RequestBody @Valid TwoFactorChangeRequest request, @RequestHeader(MijnDigidSession.MIJN_DIGID_SESSION_HEADER) String mijnDigiDsessionId){ MijnDigidSession mijnDigiDSession = retrieveMijnDigiDSession(mijnDigiDsessionId);  return this.accountService.changeTwoFactor(mijnDigiDSession.getAccountId(), request); }
[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( null, accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( new org. mijnDigiDsessionId ( ), accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, accountResult. size ( ) )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( result, accountResult )

[*] target: assertEquals(Status.OK, accountResult.getStatus())
[-] pred:  org

************************************
************************************
[+] input: Exception { final DocumentStatus documentStatus = new DocumentStatus(); documentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); documentStatus.setPseudonym(PSEUDONYM); documentStatus.setSequenceNo("SSSSSSSSSSSSS"); documentStatus.setStatus(StatusType.TIJDELIJK_GEBLOKKEERD); documentStatus.setStatusDatetime(Timestamp.valueOf(LocalDateTime.now())); documentStatus.setStateSource(StateSourceType.RDW); documentStatus.setStatusMu(MUStatusType.ACTIEF); repository.save(documentStatus);  RequestEntity<Map<String, String>> re = RequestEntity .post(new URI("/iapi/document-status")) .header(IapiTokenFilter.TOKEN_HEADER, token) .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .body(ImmutableMap.of("sequenceNo", "SSSSSSSSSSSSS", "docType", "NL-Rijbewijs", "epsc", ENCRYPTED_PSEUDONYM)); ResponseEntity<String> response = restTemplate.exchange(re, String.class);  "<AssertPlaceHolder>"; assertEquals("{"status":"inactive"}", response.getBody());  }
setStatus(@Valid @RequestBody ChangeRequest request) { service.setEptl(request); return ImmutableMap.of(); }
[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertTrue ( ( ( re. size ( ) ) > 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. toString ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

************************************
************************************
[+] input: Exception { final DocumentStatus documentStatus = new DocumentStatus(); documentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); documentStatus.setPseudonym(PSEUDONYM); documentStatus.setSequenceNo("SSSSSSSSSSSSS"); documentStatus.setStatus(StatusType.GEACTIVEERD); documentStatus.setStatusDatetime(Timestamp.valueOf(LocalDateTime.now())); documentStatus.setStateSource(StateSourceType.RDW); documentStatus.setStatusMu(MUStatusType.ACTIEF); repository.save(documentStatus);  RequestEntity<Map<String, String>> re = RequestEntity .post(new URI("/iapi/document-status")) .header(IapiTokenFilter.TOKEN_HEADER, token) .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .body(ImmutableMap.of("sequenceNo", "SSSSSSSSSSSSS", "docType", "NL-Rijbewijs", "epsc", ENCRYPTED_PSEUDONYM)); ResponseEntity<String> response = restTemplate.exchange(re, String.class);  "<AssertPlaceHolder>"; assertEquals("{"status":"active"}", response.getBody());  }
setStatus(@Valid @RequestBody ChangeRequest request) { service.setEptl(request); return ImmutableMap.of(); }
[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertTrue ( ( ( re. size ( ) ) > 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. toString ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

************************************
************************************
[+] input: Exception { final DocumentStatus documentStatus = new DocumentStatus(); documentStatus.setDocType(DocTypeType.NI); documentStatus.setPseudonym(PSEUDONYM); documentStatus.setSequenceNo("SSSSSSSSSSSSS"); documentStatus.setStatus(StatusType.GEACTIVEERD); documentStatus.setStatusDatetime(Timestamp.valueOf(LocalDateTime.now())); documentStatus.setStateSource(StateSourceType.RV_IG); repository.save(documentStatus);  RequestEntity<Map<String, String>> re = RequestEntity .post(new URI("/iapi/document-status")) .header(IapiTokenFilter.TOKEN_HEADER, token) .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .body(ImmutableMap.of("sequenceNo", "SSSSSSSSSSSSS", "docType", "NI", "epsc", ENCRYPTED_PSEUDONYM)); ResponseEntity<String> response = restTemplate.exchange(re, String.class);  "<AssertPlaceHolder>"; assertEquals("{"status":"active"}", response.getBody());  }
setStatus(@Valid @RequestBody ChangeRequest request) { service.setEptl(request); return ImmutableMap.of(); }
[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re, org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. size ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertTrue ( ( ( re. size ( ) ) > 0 ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. isEmpty ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. toString ( ), org. hamcrest. CoreMatchers. is ( 0 ) )

************************************
************************************
[+] input: Exception { final DocumentStatus documentStatus = new DocumentStatus(); documentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); documentStatus.setPseudonym(PSEUDONYM); documentStatus.setSequenceNo("SSSSSSSSSSSSS"); documentStatus.setStatus(StatusType.GEACTIVEERD); documentStatus.setStatusDatetime(Timestamp.valueOf(LocalDateTime.now())); documentStatus.setStateSource(StateSourceType.RDW); documentStatus.setStatusMu(MUStatusType.ACTIEF); repository.save(documentStatus);  final String eptl = "TL-ENCRYPTED-PSEUDONYM"; RequestEntity<Map<String, String>> re = RequestEntity .post(new URI("/iapi/document-status/change")) .header(IapiTokenFilter.TOKEN_HEADER, token) .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .body(ImmutableMap.of("sequenceNo", "SSSSSSSSSSSSS", "docType", "NL-Rijbewijs", "epsc", ENCRYPTED_PSEUDONYM, "eptl", eptl)); ResponseEntity<String> response = restTemplate.exchange(re, String.class);  "<AssertPlaceHolder>";  assertEquals("{}", response.getBody()); assertEquals(eptl, ((Optional<DocumentStatus>) repository.findById(documentStatus.getId())).get().getEptl()); }
setStatus(@Valid @RequestBody ChangeRequest request) { service.setEptl(request); return ImmutableMap.of(); }
[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re, org. hamcrest. CoreMatchers. is ( eptl ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( response. body ( ), org. hamcrest. CoreMatchers. is ( eptl ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( response. getLength ( ), org. hamcrest. CoreMatchers. is ( eptl ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertThat ( re. toString ( ), org. hamcrest. CoreMatchers. is ( eptl ) )

[*] target: assertEquals(HttpStatus.OK, response.getStatusCode())
[-] pred:  org. junit. Assert. assertEquals ( eptl, response )

************************************
************************************
[+] input: getInactiveStatusWithSuccessTest() { final DocumentStatus dummyDocumentStatus = new DocumentStatus(); dummyDocumentStatus.setId(1L); dummyDocumentStatus.setSequenceNo("SSSSSSSSSSSSS"); dummyDocumentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); dummyDocumentStatus.setStatus(StatusType.TIJDELIJK_GEBLOKKEERD); dummyDocumentStatus.setStatusMu(MUStatusType.ACTIEF);  FetchRequest request = new FetchRequest(); request.setDocType(dummyDocumentStatus.getDocType()); request.setEpsc(encrypted); request.setSequenceNo(dummyDocumentStatus.getSequenceNo());  when(bsnkPseudonymDecryptorMock.decryptEp(anyString(), anyString(), anyString())).thenReturn(pseudonym); when(documentStatusRepositoryMock.findByPseudonymAndDocTypeAndSequenceNo(anyString(), any(DocTypeType.class), anyString())).thenReturn(Optional.of(dummyDocumentStatus));  Status result = documentStatusService.currentStatus(request);  "<AssertPlaceHolder>"; assertEquals(Status.INACTIVE, result); }
currentStatus(FetchRequest request) { final DocumentStatus ds = fetchStatus(request);  if (MUStatusType.ACTIEF == ds.getStatusMu() || ds.getDocType() == DocTypeType.NI) { switch (ds.getStatus()) { case GEACTIVEERD: return Status.ACTIVE; case UITGEREIKT: return Status.ISSUED; case GEBLOKKEERD: return Status.BLOCKED; default: break; } } return Status.INACTIVE; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result!= null ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Status. NOMATCH ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Status.build ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result == null ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: getActiveStatusWithSuccessTest() { final DocumentStatus dummyDocumentStatus = new DocumentStatus(); dummyDocumentStatus.setId(1L); dummyDocumentStatus.setSequenceNo("SSSSSSSSSSSSS"); dummyDocumentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); dummyDocumentStatus.setStatus(StatusType.GEACTIVEERD); dummyDocumentStatus.setStatusMu(MUStatusType.ACTIEF);  FetchRequest request = new FetchRequest(); request.setDocType(dummyDocumentStatus.getDocType()); request.setEpsc(encrypted); request.setSequenceNo(dummyDocumentStatus.getSequenceNo());  when(bsnkPseudonymDecryptorMock.decryptEp(anyString(), anyString(), anyString())).thenReturn(pseudonym); when(documentStatusRepositoryMock.findByPseudonymAndDocTypeAndSequenceNo(anyString(), any(DocTypeType.class), anyString())).thenReturn(Optional.of(dummyDocumentStatus));  Status result = documentStatusService.currentStatus(request);  "<AssertPlaceHolder>"; assertEquals(Status.ACTIVE, result); }
currentStatus(FetchRequest request) { final DocumentStatus ds = fetchStatus(request);  if (MUStatusType.ACTIEF == ds.getStatusMu() || ds.getDocType() == DocTypeType.NI) { switch (ds.getStatus()) { case GEACTIVEERD: return Status.ACTIVE; case UITGEREIKT: return Status.ISSUED; case GEBLOKKEERD: return Status.BLOCKED; default: break; } } return Status.INACTIVE; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Status.ISSUED ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result!= null ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Status.ISSUED4 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof Status.ACTIVE ) )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: Exception { final DocumentStatus dummyDocumentStatus = new DocumentStatus(); dummyDocumentStatus.setId(1L); dummyDocumentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); dummyDocumentStatus.setPseudonym(pseudonym); dummyDocumentStatus.setSequenceNo("SSSSSSSSSSSSS"); dummyDocumentStatus.setStatus(StatusType.UITGEREIKT); dummyDocumentStatus.setStatusMu(MUStatusType.ACTIEF);  when(bsnkPseudonymDecryptorMock.decryptEp(anyString(), anyString(), anyString())).thenReturn(pseudonym); when(documentStatusRepositoryMock.findByPseudonymAndDocTypeAndSequenceNo(anyString(), any(DocTypeType.class), anyString())).thenReturn(Optional.of(dummyDocumentStatus));  FetchRequest request = new FetchRequest(); request.setDocType(dummyDocumentStatus.getDocType()); request.setEpsc(encrypted); request.setSequenceNo(dummyDocumentStatus.getSequenceNo());  Status status = documentStatusService.currentStatus(request);  "<AssertPlaceHolder>"; }
currentStatus(FetchRequest request) { final DocumentStatus ds = fetchStatus(request);  if (MUStatusType.ACTIEF == ds.getStatusMu() || ds.getDocType() == DocTypeType.NI) { switch (ds.getStatus()) { case GEACTIVEERD: return Status.ACTIVE; case UITGEREIKT: return Status.ISSUED; case GEBLOKKEERD: return Status.BLOCKED; default: break; } } return Status.INACTIVE; }
[*] target: assertEquals(Status.ISSUED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. NOMATCH ) ) )

[*] target: assertEquals(Status.ISSUED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == null ) )

[*] target: assertEquals(Status.ISSUED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. MAX_VALUE ) ) )

[*] target: assertEquals(Status.ISSUED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. unkunk ) ) )

[*] target: assertEquals(Status.ISSUED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status!= null ) )

************************************
************************************
[+] input: Exception { final DocumentStatus dummyDocumentStatus = new DocumentStatus(); dummyDocumentStatus.setId(1L); dummyDocumentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); dummyDocumentStatus.setPseudonym(pseudonym); dummyDocumentStatus.setSequenceNo("SSSSSSSSSSSSS"); dummyDocumentStatus.setStatus(StatusType.GEBLOKKEERD); dummyDocumentStatus.setStatusMu(MUStatusType.ACTIEF);  when(bsnkPseudonymDecryptorMock.decryptEp(anyString(), anyString(), anyString())).thenReturn(pseudonym); when(documentStatusRepositoryMock.findByPseudonymAndDocTypeAndSequenceNo(anyString(), any(DocTypeType.class), anyString())).thenReturn(Optional.of(dummyDocumentStatus));  FetchRequest request = new FetchRequest(); request.setDocType(dummyDocumentStatus.getDocType()); request.setEpsc(encrypted); request.setSequenceNo(dummyDocumentStatus.getSequenceNo());  Status status = documentStatusService.currentStatus(request);  "<AssertPlaceHolder>"; }
currentStatus(FetchRequest request) { final DocumentStatus ds = fetchStatus(request);  if (MUStatusType.ACTIEF == ds.getStatusMu() || ds.getDocType() == DocTypeType.NI) { switch (ds.getStatus()) { case GEACTIVEERD: return Status.ACTIVE; case UITGEREIKT: return Status.ISSUED; case GEBLOKKEERD: return Status.BLOCKED; default: break; } } return Status.INACTIVE; }
[*] target: assertEquals(Status.BLOCKED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. NOMATCH ) ) )

[*] target: assertEquals(Status.BLOCKED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == null ) )

[*] target: assertEquals(Status.BLOCKED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. MAX_VALUE ) ) )

[*] target: assertEquals(Status.BLOCKED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status == ( Status. unkunk ) ) )

[*] target: assertEquals(Status.BLOCKED, status)
[-] pred:  org. junit. Assert. assertTrue ( ( status!= null ) )

************************************
************************************
[+] input: Exception { final DocumentStatus dummyDocumentStatus = new DocumentStatus(); dummyDocumentStatus.setId(1L); dummyDocumentStatus.setDocType(DocTypeType.NL_RIJBEWIJS); dummyDocumentStatus.setPseudonym(pseudonym); dummyDocumentStatus.setSequenceNo("SSSSSSSSSSSSS"); dummyDocumentStatus.setStatus(StatusType.GEACTIVEERD); dummyDocumentStatus.setStatusMu(MUStatusType.ACTIEF);  when(bsnkPseudonymDecryptorMock.decryptEp(anyString(), anyString(), anyString())).thenReturn(pseudonym); when(documentStatusRepositoryMock.findByPseudonymAndDocTypeAndSequenceNo(anyString(), any(DocTypeType.class), anyString())).thenReturn(Optional.of(dummyDocumentStatus));  final String eptl = "TL-ENCRYPTED"; final ChangeRequest request = new ChangeRequest(); request.setDocType(dummyDocumentStatus.getDocType()); request.setEpsc(encrypted); request.setSequenceNo(dummyDocumentStatus.getSequenceNo()); request.setEptl(eptl);  documentStatusService.setEptl(request);  ArgumentCaptor<DocumentStatus> argument = ArgumentCaptor.forClass(DocumentStatus.class); Mockito.verify(documentStatusRepositoryMock).save(argument.capture());  "<AssertPlaceHolder>"; }
setEptl(ChangeRequest request) { final DocumentStatus ds = fetchStatus(request); ds.setEptl(request.getEptl()); repository.save(ds); }
[*] target: assertEquals(eptl, argument.getValue().getEptl())
[-] pred:  org. junit. Assert. assertThat ( argument. setEptl(ChangeStatus. item ), org. hamcrest. CoreMatchers. is ( eptl ) )

[*] target: assertEquals(eptl, argument.getValue().getEptl())
[-] pred:  org. junit. Assert. assertThat ( argument. setEptl(ChangeStatus. item ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(eptl, argument.getValue().getEptl())
[-] pred:  org. junit. Assert. assertThat ( argument. setEptl(ChangeStatus. assertThat ( n ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals(eptl, argument.getValue().getEptl())
[-] pred:  org. junit. Assert. assertThat ( argument. setEptl(ChangeStatus. assertThat ( n ), org. hamcrest. CoreMatchers. is ( 0 ) )

[*] target: assertEquals(eptl, argument.getValue().getEptl())
[-] pred:  org. junit. Assert. assertThat ( argument. setEptl(ChangeStatus. nececec )

************************************
************************************
[+] input: updateMessageTest() { Message message = new Message(); message.setId(1L); message.setMessageType(PSH01); message.setTitleEnglish("title EN 1"); message.setContentEnglish("content EN 1"); message.setTitleDutch("title NL 1"); message.setContentDutch("content NL 1");  Map<String, String> changes = new HashMap<>(); changes.put("message_type", "PSH02"); changes.put("title_english", "title EN 2"); changes.put("content_english", "content EN 2"); changes.put("title_dutch", "title NL 2"); changes.put("content_dutch", "content NL 2");  when(messageRepositoryMock.findById(1L)).thenReturn(Optional.of(message)); when(messageRepositoryMock.save(any(Message.class))).thenReturn(message);  messageController.update(1L, changes);  verify(messageRepositoryMock, Mockito.times(1)).findById(1L); verify(messageRepositoryMock, Mockito.times(1)).save(any(Message.class)); "<AssertPlaceHolder>"; assertEquals("title EN 2", message.getTitleEnglish()); assertEquals("content EN 2", message.getContentEnglish()); assertEquals("title NL 2", message.getTitleDutch()); assertEquals("content NL 2", message.getContentDutch()); }
update(final @PathVariable("id") Long id, final @RequestBody Map<String, String> valuesMap) { Optional<Message> msgOptional = repository.findById(id); if (!msgOptional.isPresent()) { throw new NotFoundException("Could not find message with id: " + id); } Message message = msgOptional.get(); message.updateMap(valuesMap); repository.save(message); return message; }
[*] target: assertEquals(PSH02, message.getMessageType())
[-] pred:  org. junit. Assert. assertNotNull ( message )

[*] target: assertEquals(PSH02, message.getMessageType())
[-] pred:  org. junit. Assert. assertEquals ( message, result )

[*] target: assertEquals(PSH02, message.getMessageType())
[-] pred:  org. junit. Assert. assertEquals ( message, context )

[*] target: assertEquals(PSH02, message.getMessageType())
[-] pred:  org. junit. Assert. assertEquals ( message, late )

[*] target: assertEquals(PSH02, message.getMessageType())
[-] pred:  org. junit. Assert. assertEquals ( message, fixture )

************************************
************************************
[+] input: JsonProcessingException { var response = controller.configuration();  "<AssertPlaceHolder>"; assertEquals(List.of("authorization_code"), response.get("grant_types_supported")); assertEquals(List.of("openid"), response.get("scopes_supported")); assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", response.get("issuer")); assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", response.get("authorization_endpoint")); assertEquals(List.of("urn:nl-eid-gdi:1.0:id:legacy-BSN"), response.get("sub_id_types_supported")); assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", response.get("jwks_uri")); assertEquals(List.of("RS256"), response.get("id_token_signing_alg_values_supported")); }
configuration() throws JsonProcessingException { return provider.metadata(); }
[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( provider.metadata();, response )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( provider.metadata();, response. source ( ) )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( provider.metadata();, response. evaluate ( ) )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( provider.metadata();, response. target ( ) )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org

************************************
************************************
[+] input: jwks() { var response = controller.jwks();  List list = (List) response.get("keys"); Map<String, String> key = (Map<String,String>) list.get(0);  "<AssertPlaceHolder>"; assertEquals("RSA", key.get("kty")); assertEquals("sig", key.get("use")); assertEquals("AQAB", key.get("e")); assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", key.get("n")); }
jwks() { return Map.of("keys", Arrays.asList(provider.generateJWK())); }
[*] target: assertEquals(1, list.size())
[-] pred:  org. junit. Assert. assertEquals ( list, page. jwks() )

[*] target: assertEquals(1, list.size())
[-] pred:  org. junit. Assert. assertEquals ( list, param. jwks() )

[*] target: assertEquals(1, list.size())
[-] pred:  org. junit. Assert. assertEquals ( list, com. google. common. collections. size ( ) )

[*] target: assertEquals(1, list.size())
[-] pred:  org. junit. Assert. assertEquals ( list. size ( ), ( 2 * list ) )

[*] target: assertEquals(1, list.size())
[-] pred:  org

************************************
************************************
[+] input: startSessionTest() { AuthenticateRequest authenticateRequest = new AuthenticateRequest();  OpenIdSession openIdSession = openIdService.startSession(authenticateRequest, "jwksUri", 1L, "serviceName");  "<AssertPlaceHolder>"; assertEquals("serviceName", openIdSession.getServiceName()); assertEquals(1L, openIdSession.getLegacyWebserviceId()); }
startSession(@Valid AuthenticateRequest params, String jwksUri, Long legacyWebserviceId, String serviceName) { OpenIdSession session = new OpenIdSession(); session.setJwksUri(jwksUri); session.setClientId(params.getClientId()); session.setResponseType(params.getResponseType()); session.setScope(params.getScope()); session.setRedirectUri(params.getRedirectUri()); session.setState(params.getState()); session.setNonce(params.getNonce()); session.setCodeChallenge(params.getCodeChallenge()); session.setCodeChallengeMethod(params.getCodeChallengeMethod()); session.setCode(UUID.randomUUID().toString()); session.setLegacyWebserviceId(legacyWebserviceId); session.setServiceName(serviceName);  return session; }
[*] target: assertEquals("jwksUri", openIdSession.getJwksUri())
[-] pred:  org. junit ). assertNotNull ( openIdSession )

[*] target: assertEquals("jwksUri", openIdSession.getJwksUri())
[-] pred:  org. junit ; assertNotNull ( openIdSession )

[*] target: assertEquals("jwksUri", openIdSession.getJwksUri())
[-] pred:  org. junit. Assert. assertNotNull ( openIdSession

[*] target: assertEquals("jwksUri", openIdSession.getJwksUri())
[-] pred:  org. junit, openIdSession )

[*] target: assertEquals("jwksUri", openIdSession.getJwksUri())
[-] pred:  org

************************************
************************************
[+] input: getClientReturnIdTest() { OpenIdSession openIdSession = new OpenIdSession(); openIdSession.setSessionId("sessionId"); openIdSession.setRedirectUri("testRedirectUrl"); openIdSession.setState("testState"); openIdSession.setCode("testCode"); openIdSession.setAuthenticationState("success"); when(httpServletRequest.getSession()).thenReturn(httpSession); when(openIdRepository.findById(anyString())).thenReturn(Optional.of(openIdSession));  String response = openIdService.getClientReturnId("sessionId");  "<AssertPlaceHolder>"; }
getClientReturnId(String sessionId) { Optional<OpenIdSession> session = openIdRepository.findById(sessionId);  if (session.isEmpty()) return null;  OpenIdSession openIdSession = session.get();  var returnUrl = openIdSession.getRedirectUri() + "?state=" + openIdSession.getState(); if (!"success".equals(openIdSession.getAuthenticationState())) { return returnUrl + "&error=CANCELLED"; }  return returnUrl + "&code=" + openIdSession.getCode(); }
[*] target: assertEquals("testRedirectUrl?state=testState&code=testCode", response)
[-] pred:  org. junit. Assert. assertEquals ( response, request. getClientReturnId ( ) )

[*] target: assertEquals("testRedirectUrl?state=testState&code=testCode", response)
[-] pred:  org. junit. Assert. assertEquals ( response, request )

[*] target: assertEquals("testRedirectUrl?state=testState&code=testCode", response)
[-] pred:  org. junit. Assert. assertEquals ( response, request. getClientReturnId ( if ) )

[*] target: assertEquals("testRedirectUrl?state=testState&code=testCode", response)
[-] pred:  org. junit. Assert. assertEquals ( response, request. getClientReturnId ( 0 ) )

[*] target: assertEquals("testRedirectUrl?state=testState&code=testCode", response)
[-] pred:  org

************************************
************************************
[+] input: getNoClientReturnIdTest() { OpenIdSession openIdSession = new OpenIdSession(); openIdSession.setAuthenticationState("success"); when(httpServletRequest.getSession()).thenReturn(httpSession); when(httpSession.getId()).thenReturn(null);  when(openIdRepository.findById(anyString())).thenReturn(Optional.of(openIdSession));  String response = openIdService.getClientReturnId("sessionId");  "<AssertPlaceHolder>"; }
getClientReturnId(String sessionId) { Optional<OpenIdSession> session = openIdRepository.findById(sessionId);  if (session.isEmpty()) return null;  OpenIdSession openIdSession = session.get();  var returnUrl = openIdSession.getRedirectUri() + "?state=" + openIdSession.getState(); if (!"success".equals(openIdSession.getAuthenticationState())) { return returnUrl + "&error=CANCELLED"; }  return returnUrl + "&code=" + openIdSession.getCode(); }
[*] target: assertEquals("null?state=null&code=null", response)
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertEquals("null?state=null&code=null", response)
[-] pred:  org. junit. Assert. assertEquals ( response, request )

[*] target: assertEquals("null?state=null&code=null", response)
[-] pred:  org. junit. Assert. assertEquals ( response, expected )

[*] target: assertEquals("null?state=null&code=null", response)
[-] pred:  org

[*] target: assertEquals("null?state=null&code=null", response)
[-] pred:  )

************************************
************************************
[+] input: getClientReturnNotSuccess() { OpenIdSession openIdSession = new OpenIdSession(); when(httpServletRequest.getSession()).thenReturn(httpSession); when(httpSession.getId()).thenReturn(null);  when(openIdRepository.findById(anyString())).thenReturn(Optional.of(openIdSession));  String response = openIdService.getClientReturnId("sessionId");  "<AssertPlaceHolder>"; }
getClientReturnId(String sessionId) { Optional<OpenIdSession> session = openIdRepository.findById(sessionId);  if (session.isEmpty()) return null;  OpenIdSession openIdSession = session.get();  var returnUrl = openIdSession.getRedirectUri() + "?state=" + openIdSession.getState(); if (!"success".equals(openIdSession.getAuthenticationState())) { return returnUrl + "&error=CANCELLED"; }  return returnUrl + "&code=" + openIdSession.getCode(); }
[*] target: assertEquals("null?state=null&error=CANCELLED", response)
[-] pred:  org. junit. Assert. assertEquals ( response, openIdSession. getClientReturnId(String sessionId ) )

[*] target: assertEquals("null?state=null&error=CANCELLED", response)
[-] pred:  org. junit. Assert. assertEquals ( response, openIdSession. getClientReturnId(CommandLineSession)); )

[*] target: assertEquals("null?state=null&error=CANCELLED", response)
[-] pred:  org. junit. Assert. assertEquals ( response, openIdSession. getClientReturnId(String sessionId )

[*] target: assertEquals("null?state=null&error=CANCELLED", response)
[-] pred:  org. junit. Assert. assertEquals ( response, openIdSession. getClientReturnId( javax

[*] target: assertEquals("null?state=null&error=CANCELLED", response)
[-] pred:  org. junit. Assert. assertEquals ( response, openIdSession. getClientReturnId(CommandLineCommandLine) )

************************************
************************************
[+] input: JOSEException { mockDcMetadataResponse();  AccessTokenRequest accessTokenRequest = new AccessTokenRequest(); accessTokenRequest.setCode("testCode"); accessTokenRequest.setCodeVerifier(client.CHALLENGE_VERIFIER); accessTokenRequest.setClientId(client.CLIENT_ID);  OpenIdSession openIdSession = new OpenIdSession(); openIdSession.setCodeChallenge(client.CHALLENGE); openIdSession.setAuthenticationLevel("20"); openIdSession.setBsn("PPPPPPP"); openIdSession.setState("RANDOM"); openIdSession.setLegacyWebserviceId(1L); openIdSession.setAccountId(1L); openIdSession.setServiceName("serviceName");  when(openIdRepository.findByCode(accessTokenRequest.getCode())).thenReturn(Optional.of(openIdSession));  AccessTokenResponse response = openIdService.createAccesToken(accessTokenRequest);  "<AssertPlaceHolder>"; }
createAccesToken(AccessTokenRequest request) throws NoSuchAlgorithmException, DienstencatalogusException { var openIdSession = openIdRepository.findByCode(request.getCode()).orElseThrow(() -> new OpenIdSessionNotFoundException("OpenIdSession not found"));  var metadata = dcClient.retrieveMetadataFromDc(request.getClientId());  validateCodeChallenge(request.getCodeVerifier(), openIdSession); validateMimumAuthenticationLevel(openIdSession, metadata);  AccessTokenResponse response = new AccessTokenResponse(); response.setTokenType("Bearer"); response.setAccessToken(getAccessToken(openIdSession)); response.setIdToken(getIdToken(openIdSession)); response.setState(openIdSession.getState());  var logCode = Map.of("20", "743", "25", "1124").get(openIdSession.getAuthenticationLevel()); adClient.remoteLog(logCode, Map.of("account_id", openIdSession.getAccountId(), "webservice_id", openIdSession.getLegacyWebserviceId(), "webservice_name", openIdSession.getServiceName()));  openIdRepository.delete(openIdSession);  return response; }
[*] target: assertEquals("RANDOM", response.getState())
[-] pred:  org. junit. Assert. assertThat ( response, org. hamcrest. CoreMatchers. is ( response ) )

[*] target: assertEquals("RANDOM", response.getState())
[-] pred:  org. junit. Assert. assertThat ( response, org. hamcrest. CoreMatchers. is ( body ) )

[*] target: assertEquals("RANDOM", response.getState())
[-] pred:  org. junit. Assert. assertThat ( org. hamcrest. CoreMatchers. is ( response ) )

[*] target: assertEquals("RANDOM", response.getState())
[-] pred:  org. junit. Assert. assertThat ( response, org. hamcrest. CoreMatchers. is ( body ( response ) ) )

[*] target: assertEquals("RANDOM", response.getState())
[-] pred:  org

************************************
************************************
[+] input: userLoginTest() { OpenIdSession openIdSession = new OpenIdSession(); var bsnResponse = Map.of("bsn", "1");  when(adClient.getBsn(1L)).thenReturn(bsnResponse);  StatusResponse response = openIdService.userLogin(openIdSession, 1L, "10", "authenticated");  "<AssertPlaceHolder>"; }
userLogin(OpenIdSession session, Long accountId, String authenticationLevel, String authenticationStatus){ var bsnResponse = adClient.getBsn(accountId);  session.setAuthenticationLevel(authenticationLevel); session.setAuthenticationState(authenticationStatus); session.setAccountId(accountId); session.setBsn(bsnResponse.get("bsn"));  openIdRepository.save(session);  return new StatusResponse("OK"); }
[*] target: assertEquals("OK", response.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( response, bsnResponse )

[*] target: assertEquals("OK", response.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( 0, response. length ( ) )

[*] target: assertEquals("OK", response.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( response, bsnResponse. response ( ) )

[*] target: assertEquals("OK", response.getStatus())
[-] pred:  org. junit. Assert. assertEquals ( response. status ( ), response )

[*] target: assertEquals("OK", response.getStatus())
[-] pred:  org

************************************
************************************
[+] input: JsonProcessingException { var response = provider.metadata();  "<AssertPlaceHolder>";  }
metadata() throws JsonProcessingException { Map<String, Object> response = new HashMap<>(); response.put("issuer", frontchannel); response.put("authorization_endpoint", frontchannel + "/authorization"); response.put("jwks_uri", frontchannel + "/jwks"); response.put("token_endpoint", backchannel + "/token"); response.put("scopes_supported", List.of("openid")); response.put("response_types_supported", List.of("code")); response.put("claims_parameter_supported", false); response.put("claims_supported", List.of("sub", "acr")); response.put("grant_types_supported", List.of("authorization_code")); response.put("subject_types_supported", List.of("public")); response.put("sub_id_types_supported", List.of("urn:nl-eid-gdi:1.0:id:legacy-BSN")); response.put("acr_values_supported", List.of(LevelOfAssurance.MIDDEN, LevelOfAssurance.SUBSTANTIEEL)); response.put("token_endpoint_auth_methods_supported", List.of("tls_client_auth"));  response.put("id_token_signing_alg_values_supported", List.of("RS256")); response.put("id_token_encryption_alg_values_supported", List.of("RS256"));  response.put("request_object_signing_alg_values_supported", Arrays.asList("RS256")); response.put("request_object_encryption_enc_values_supported", Arrays.asList("RS256"));  response.put("request_uri_parameter_supported", false);   response.put("signed_metadata", generateJWT(MAPPER.writeValueAsString(response))); return response; }
[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( java. util. Optional. empty ( ), response )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( java. util. Optional. of ( 5 ), response )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( 0, response. metadata() ( ) )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org. junit. Assert. assertEquals ( 1.0, response. metadata() ( ), 0.0 )

[*] target: assertEquals(List.of("code"), response.get("response_types_supported"))
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/start")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", UUID.randomUUID())); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} ); "<AssertPlaceHolder>"; }
accept(App app) throws RdaException;
[*] target: assertEquals(404, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( new java. lang. URI ( response ) ) ), response )

[*] target: assertEquals(404, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( new java. lang. URI ( response. getValue ( ) ) ), response )

[*] target: assertEquals(404, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( new java. lang. URI ( response ) ) ), new java. lang. String ( response ) )

[*] target: assertEquals(404, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( new java. lang. URI ( response ) ) ), new java. lang. Double ( response ) )

[*] target: assertEquals(404, response.getStatusCodeValue())
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { final RdaSession session = RdaSession.create( "http://localhost", "confirmId", null, 600 ); sessionRepo.save(session); RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/challenge")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", session.getId(), "challenge", "SSSS")); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} ); "<AssertPlaceHolder>"; }
accept(App app) throws RdaException;
[*] target: assertEquals(409, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( session ) ), response )

[*] target: assertEquals(409, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( cookies ) ), response )

[*] target: assertEquals(409, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. accept ( sc ) ), response )

[*] target: assertEquals(409, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( null, response )

[*] target: assertEquals(409, response.getStatusCodeValue())
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { final RdaSession session = RdaSession.create( "http://localhost", "confirmId", null, 600 ); session.setStatus(Status.AUTHENTICATE); session.getApp().setDrivingLicences(ImmutableList.of("SSS")); session.getApp().setTravelDocuments(ImmutableList.of(new MrzInfo("SSSSSSSSS", "SSSSSS", "SSSSSS"))); session.getApp().setDocumentType(DocumentType.DRIVING_LICENCE); ReflectionTestUtils.setField(session.getApp(), "step", Step.MRZ_CHECK); sessionRepo.save(session);  RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/start")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", session.getId(), "type", DocumentType.TRAVEL_DOCUMENT)); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} ); "<AssertPlaceHolder>";  final RdaSession reset = sessionRepo.findById(session.getId()).get(); assertEquals(Status.CHALLENGE, reset.getStatus()); assertEquals(null, ReflectionTestUtils.getField(reset.getApp(), "step")); assertEquals(DocumentType.TRAVEL_DOCUMENT, ReflectionTestUtils.getField(reset.getApp(), "documentType")); }
accept(App app) throws RdaException;
[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( re, response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( re. toString ( ), response. toString ( ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertTrue ( response. equals ( re ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  re )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { final String sessionId = cancelledSession(); RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/start")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", sessionId)); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} );  "<AssertPlaceHolder>"; assertEquals("CANCELLED", response.getBody().get("status")); assertEquals(false, sessionRepo.findById(sessionId).isPresent()); }
accept(App app) throws RdaException;
[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( null, response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. getValue ( ) ), response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. mon ( ) ), response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. build ( ) ), response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { final String sessionId = cancelledSession(); RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/challenge")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", sessionId, "challenge", "SSSS")); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} );  "<AssertPlaceHolder>"; assertEquals("CANCELLED", response.getBody().get("status")); assertEquals(false, sessionRepo.findById(sessionId).isPresent()); }
accept(App app) throws RdaException;
[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( null, response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. getValue ( ) ), response. getValue ( ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. toString ( ) ), response. get ( 0 ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. getValue ( ) ), response. get ( org. apache. hadoop. fs. UTF_8 ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. toString ( ) ), response. get ( org. apache. hadoop. fs. UTF_8 ) )

************************************
************************************
[+] input: URISyntaxException { final String sessionId = cancelledSession(); RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/authenticate")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", sessionId, "challenge", "SSSS")); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} );  "<AssertPlaceHolder>"; assertEquals("CANCELLED", response.getBody().get("status")); assertEquals(false, sessionRepo.findById(sessionId).isPresent()); }
accept(App app) throws RdaException;
[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. toString ( ) ), response. get ( 0 ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( re. toString ( ) ), response. get ( 0 ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( null, response )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. URI ( re. getValue ( ) ), response. getValue ( ) )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  org

************************************
************************************
[+] input: URISyntaxException { final String sessionId = cancelledSession(); RequestEntity<Map<String,Object>> re = RequestEntity.post(new URI("/v1/secure_messaging")) .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON) .header("X-Forwarded-For", "127.0.0.1") .body(ImmutableMap.of("sessionId", sessionId, "responses", ImmutableList.of("SSSS"))); ResponseEntity<Map<String,Object>> response = restTemplate.exchange( re, new ParameterizedTypeReference<Map<String, Object>>() {} );  "<AssertPlaceHolder>"; assertEquals("CANCELLED", response.getBody().get("status")); assertEquals(false, sessionRepo.findById(sessionId).isPresent()); }
accept(App app) throws RdaException;
[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  _5_5 )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  _5_5 }

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  re )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  _5 )

[*] target: assertEquals(200, response.getStatusCodeValue())
[-] pred:  )

************************************
************************************
[+] input: testCancelRestService() { AppRequest appRequest = new AppRequest(); appRequest.setSessionId("sessionId");  RdaSession session = new RdaSession(); session.setId("sessionId"); mockSession(session); Map<String, String> responseData = controller.cancel(appRequest); "<AssertPlaceHolder>"; Mockito.verify(sessionRepo, Mockito.times(1)).save(Mockito.isA(RdaSession.class)); }
cancel(@Valid @RequestBody AppRequest request) { RdaSession session = null;  try{ session = findSession(request, null); }catch(NotFoundException notFoundException){ logger.info("Session not found"); }  if (session != null) { session.setStatus(Status.CANCELLED); sessionRepo.save(session); }  // Result OK return ImmutableMap.of("status", "OK"); }
[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertNotNull ( responseData )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, responseData )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( false, responseData. isEmpty ( ) )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertNull ( responseData )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, responseData. size ( ) )

************************************
************************************
[+] input: testAbortRestService() { AppRequest appRequest = new AppRequest(); appRequest.setSessionId("sessionId");  RdaSession session = new RdaSession(); session.setId("sessionId"); mockSession(session); Map<String, String> responseData = controller.abort(appRequest); "<AssertPlaceHolder>"; Mockito.verify(sessionRepo, Mockito.times(1)).save(Mockito.isA(RdaSession.class)); }
abort(@Valid @RequestBody AppRequest request) { RdaSession session = findSession(request, null); if (session != null) { session.setStatus(Status.ABORTED); sessionRepo.save(session); } else { logger.info("Session not found"); } // Result OK return ImmutableMap.of("status", "OK"); }
[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( null, responseData )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 0, responseData. size ( ) )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( 200, responseData. getStatus ( ) )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org. junit. Assert. assertEquals ( Status. ABORT, responseData )

[*] target: assertEquals("OK", responseData.get("status"))
[-] pred:  org

************************************
************************************
[+] input: testCreateRestService() {  CreateRequest request = new CreateRequest(); request.setDrivingLicences(ImmutableList.of("dl")); request.setTravelDocuments(ImmutableList.of(new MrzInfo("1", "1", "1"))); request.setReturnUrl("url"); request.setConfirmId("id"); request.setClientIpAddress("1"); CreateResponse response = controller.create(request); "<AssertPlaceHolder>"; assertEquals("SSSSSSSSSSSSSSSSSSSSSS", response.getUrl()); assertNotNull(response.getConfirmSecret()); assertNotNull(response.getSessionId());  }
create(@Valid @RequestBody CreateRequest request) { if (request.getDrivingLicences().isEmpty() && request.getTravelDocuments().isEmpty()) { throw new BadRequestException("No card information specified"); }  final RdaSession session = RdaSession.create( request.getReturnUrl(), request.getConfirmId(), request.getClientIpAddress(), timeout ); session.getApp().setDrivingLicences(request.getDrivingLicences()); session.getApp().setTravelDocuments(request.getTravelDocuments()); sessionRepo.save(session);  final CreateResponse response = new CreateResponse(); response.setUrl(publicUrl); response.setSessionId(session.getId()); response.setConfirmSecret(session.getConfirmSecret()); response.setExpiration(session.getExpiration()); return response; }
[*] target: assertEquals(600, response.getExpiration())
[-] pred:  org. junit. Assert. assertNotNull ( response )

[*] target: assertEquals(600, response.getExpiration())
[-] pred:  org. junit. Assert. assertEquals ( response, request )

[*] target: assertEquals(600, response.getExpiration())
[-] pred:  org. junit. Assert. assertEquals ( response. getStatus ( ), 200 )

[*] target: assertEquals(600, response.getExpiration())
[-] pred:  org. junit. Assert. assertEquals ( response. getRequest ( ), request )

[*] target: assertEquals(600, response.getExpiration())
[-] pred:  org. junit. Assert. assertEquals ( response. get ( ), request )

************************************
************************************
[+] input: testCreateRestServiceWithError() { CreateRequest request = new CreateRequest(); request.setDrivingLicences(new ArrayList<>()); request.setTravelDocuments(new ArrayList<>()); Exception exception = "<AssertPlaceHolder>";; }); assertEquals("No card information specified", exception.getMessage());  }
create(@Valid @RequestBody CreateRequest request) { if (request.getDrivingLicences().isEmpty() && request.getTravelDocuments().isEmpty()) { throw new BadRequestException("No card information specified"); }  final RdaSession session = RdaSession.create( request.getReturnUrl(), request.getConfirmId(), request.getClientIpAddress(), timeout ); session.getApp().setDrivingLicences(request.getDrivingLicences()); session.getApp().setTravelDocuments(request.getTravelDocuments()); sessionRepo.save(session);  final CreateResponse response = new CreateResponse(); response.setUrl(publicUrl); response.setSessionId(session.getId()); response.setConfirmSecret(session.getConfirmSecret()); response.setExpiration(session.getExpiration()); return response; }
[*] target: assertThrows(BadRequestException.class, () -> { controller.create(request)
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. CoreMatchers. is ( org. hamcrest. CoreMatchers. equalTo ( exception ) ) )

[*] target: assertThrows(BadRequestException.class, () -> { controller.create(request)
[-] pred:  org. junit. Assert. assertThat ( exception. create(@Valid ( ), org. hamcrest. CoreMatchers. is (()); ) )

[*] target: assertThrows(BadRequestException.class, () -> { controller.create(request)
[-] pred:  org. junit. Assert. assertThat ( exception, org. hamcrest. CoreMatchers. create(@Valid ( ) )

[*] target: assertThrows(BadRequestException.class, () -> { controller.create(request)
[-] pred:  org. junit. Assert. assertTrue ( exception. create(@Valid ( ) )

[*] target: assertThrows(BadRequestException.class, () -> { controller.create(request)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier("test/rvig.cer", OCT_10_2018); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final AaPublicKey publicKey = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg15"), AaPublicKey.class); final DataGroup14 dg14 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg14"), DataGroup14.class); final MessageDigest aaDigest = DigestUtils.digest(new ASN1ObjectIdentifier(dg14.getSecurityInfos().getAaAlgorithm()));  final byte[] signature = Hex.decode( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); verifier.verifyActiveAuthentication(publicKey, aaDigest, CHALLENGE, signature);  final DataGroup1 dg1 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg01"), DataGroup1.class); verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS")); "<AssertPlaceHolder>"; }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg, Class<T> type) throws RdaException { verifyDataGroup(com, lso, dg); return read(dg, type); }
[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg14, dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg1, dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg1, dg2 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( aa14, dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier("test/rvig.cer", OCT_10_2018); final COM com = verifier.verifyCom(readFixture("passport2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("passport2014/efSod"));  final AaPublicKey publicKey = verifier.verifyDataGroup(com, lso, readFixture("passport2014/dg15"), AaPublicKey.class); final DataGroup14 dg14 = verifier.verifyDataGroup(com, lso, readFixture("passport2014/dg14"), DataGroup14.class); final MessageDigest aaDigest = DigestUtils.digest(new ASN1ObjectIdentifier(dg14.getSecurityInfos().getAaAlgorithm()));  final byte[] signature = Hex.decode( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); verifier.verifyActiveAuthentication(publicKey, aaDigest, CHALLENGE, signature);  final DataGroup1 dg1 = verifier.verifyDataGroup(com, lso, readFixture("passport2014/dg01"), DataGroup1.class); verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS")); "<AssertPlaceHolder>"; }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg, Class<T> type) throws RdaException { verifyDataGroup(com, lso, dg); return read(dg, type); }
[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg14, dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg1, dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg14. verifyDataGroup( dg1 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org. junit. Assert. assertEquals ( dg1, dg2 )

[*] target: assertEquals("999999990", dg1.getBsn())
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final byte[] com = readFixture("dl2/efCom"); com[1] -= 2; com[8] -= 2; Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.COM, ((RdaException) exception).error); assertEquals("Not all data groups are available: [1, 5, 6, 11, 12]", exception.getMessage()); }
verifyCom(byte[] data, Class<? extends COM> type) throws RdaException { final COM com = read(data, type); if (!com.getDataGroups().containsAll(com.getRdaDataGroups())) { throw new RdaException( RdaError.COM, String.format("Not all data groups are available: %s", com.getDataGroups()) ); } return com; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, DrivingLicenceCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, DrivingLicenceCOM.class)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, DrivingLicenceCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception. getMessage ( ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, DrivingLicenceCOM.class)
[-] pred:  org. junit. Assert. assertEquals ( com, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, DrivingLicenceCOM.class)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final byte[] com = readFixture("nik2014/efCom"); com[20] += 2; Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.COM, ((RdaException) exception).error); assertEquals("Not all data groups are available: [3, 2, 15, 14]", exception.getMessage()); }
verifyCom(byte[] data, Class<? extends COM> type) throws RdaException { final COM com = read(data, type); if (!com.getDataGroups().containsAll(com.getRdaDataGroups())) { throw new RdaException( RdaError.COM, String.format("Not all data groups are available: %s", com.getDataGroups()) ); } return com; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception. getMessage ( ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception, verifier )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final byte[] com = readFixture("nik2014/efCom"); com[1]--; Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PARSE_FILE, ((RdaException) exception).error); assertEquals("ASN1 parsing error: Read beyond bound 24 >= 23", exception.getMessage()); assertEquals(Asn1Exception.class, exception.getCause().getClass()); }
verifyCom(byte[] data, Class<? extends COM> type) throws RdaException { final COM com = read(data, type); if (!com.getDataGroups().containsAll(com.getRdaDataGroups())) { throw new RdaException( RdaError.COM, String.format("Not all data groups are available: %s", com.getDataGroups()) ); } return com; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof TYPEdaException ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof RdaException ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyCom(com, TravelDocumentCOM.class)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final byte[] sod = readFixture("nik2014/efSod"); sod[69]++;  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PASSIVE_AUTHENTICATION, ((RdaException) exception).error); assertEquals("Could not verify signed message", exception.getMessage()); assertEquals(VerificationException.class, exception.getCause().getClass()); }
verifySOd(COM com, byte[] data) throws RdaException { final SOd sod = read(data, SOd.class); final LdsSecurityObject lso; try { final byte[] msg = cmsVerifier.verifyMessage(sod.getContentInfo(), date, LdsSecurityObject.OID); lso = read(msg, LdsSecurityObject.class); } catch (VerificationException e) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "Could not verify signed message", e); } if (!com.getDataGroups().equals(lso.getDigests().keySet())) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "COM data groups not equal to SOd LDS security object"); } return lso; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception, sod )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exceptions )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier("test/rdw-02.cer", OCT_10_2018); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final byte[] sod = readFixture("nik2014/efSod");  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PASSIVE_AUTHENTICATION, ((RdaException) exception).error); assertEquals("Could not verify signed message", exception.getMessage()); assertEquals(VerificationException.class, exception.getCause().getClass()); }
verifySOd(COM com, byte[] data) throws RdaException { final SOd sod = read(data, SOd.class); final LdsSecurityObject lso; try { final byte[] msg = cmsVerifier.verifyMessage(sod.getContentInfo(), date, LdsSecurityObject.OID); lso = read(msg, LdsSecurityObject.class); } catch (VerificationException e) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "Could not verify signed message", e); } if (!com.getDataGroups().equals(lso.getDigests().keySet())) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "COM data groups not equal to SOd LDS security object"); } return lso; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. String ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNull ( exception. getMessage ( ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("dl1/efCom"), DrivingLicenceCOM.class); final byte[] sod = readFixture("dl2/efSod");  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PASSIVE_AUTHENTICATION, ((RdaException) exception).error); assertEquals("COM data groups not equal to SOd LDS security object", exception.getMessage()); }
verifySOd(COM com, byte[] data) throws RdaException { final SOd sod = read(data, SOd.class); final LdsSecurityObject lso; try { final byte[] msg = cmsVerifier.verifyMessage(sod.getContentInfo(), date, LdsSecurityObject.OID); lso = read(msg, LdsSecurityObject.class); } catch (VerificationException e) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "Could not verify signed message", e); } if (!com.getDataGroups().equals(lso.getDigests().keySet())) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "COM data groups not equal to SOd LDS security object"); } return lso; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertEquals ( sod, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNull ( exception. getMessage ( ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final byte[] sod = readFixture("nik2014/efSod"); sod[4] = 0x31;  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PARSE_FILE, ((RdaException) exception).error); assertEquals("ASN1 parsing error: Unexpected tag 31 encountered", exception.getMessage()); assertEquals(Asn1Exception.class, exception.getCause().getClass()); }
verifySOd(COM com, byte[] data) throws RdaException { final SOd sod = read(data, SOd.class); final LdsSecurityObject lso; try { final byte[] msg = cmsVerifier.verifyMessage(sod.getContentInfo(), date, LdsSecurityObject.OID); lso = read(msg, LdsSecurityObject.class); } catch (VerificationException e) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "Could not verify signed message", e); } if (!com.getDataGroups().equals(lso.getDigests().keySet())) { throw new RdaException(RdaError.PASSIVE_AUTHENTICATION, "COM data groups not equal to SOd LDS security object"); } return lso; }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( sod )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org. junit. Assert. assertNotNull ( exceptions )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifySOd(com, sod)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final byte[] dg1 = readFixture("nik2014/dg01"); dg1[5] = 'P';  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.PASSIVE_AUTHENTICATION, ((RdaException) exception).error); assertEquals("Digest of data group 1 does not match", exception.getMessage()); assertEquals(VerificationException.class, exception.getCause().getClass()); }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg) throws RdaException { final int no = com.getDataGroupOfTag(dg[0]); try { lso.verify(no, dg); } catch (VerificationException e) { throw new RdaException( RdaError.PASSIVE_AUTHENTICATION, "Digest of data group " + no + " does not match", e ); } }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyDataGroup(com, lso, dg1)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyDataGroup(com, lso, dg1)
[-] pred:  org. junit. Assert. assertEquals ( dg1, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyDataGroup(com, lso, dg1)
[-] pred:  org. junit. Assert. assertEquals ( dg1. fail, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyDataGroup(com, lso, dg1)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyDataGroup(com, lso, dg1)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final AaPublicKey publicKey = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg15"), AaPublicKey.class); final DataGroup14 dg14 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg14"), DataGroup14.class); final MessageDigest aaDigest = DigestUtils.digest(new ASN1ObjectIdentifier(dg14.getSecurityInfos().getAaAlgorithm()));  final byte[] signature = Hex.decode( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.ACTIVE_AUTHENTICATION, ((RdaException) exception).error); assertEquals("Active authentication failed", exception.getMessage()); assertEquals(VerificationException.class, exception.getCause().getClass()); }
verifyActiveAuthentication(AaPublicKey publicKey, MessageDigest digest, byte[] challenge, byte[] signature) throws RdaException{ try { publicKey.verifier().verify(challenge, signature, digest); } catch (VerificationException e) { throw new RdaException(RdaError.ACTIVE_AUTHENTICATION, "Active authentication failed", e); } }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyActiveAuthentication(publicKey, aaDigest, new byte[8], signature)
[-] pred:  org. junit. Assert. assertEquals ( aaDigest, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyActiveAuthentication(publicKey, aaDigest, new byte[8], signature)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyActiveAuthentication(publicKey, aaDigest, new byte[8], signature)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyActiveAuthentication(publicKey, aaDigest, new byte[8], signature)
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof java. lang. String ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyActiveAuthentication(publicKey, aaDigest, new byte[8], signature)
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final DataGroup1 dg1 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg01"), DataGroup1.class);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.MRZ_CHECK, ((RdaException) exception).error); assertEquals("Input document number not equal to data group 1", exception.getMessage()); }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg, Class<T> type) throws RdaException { verifyDataGroup(com, lso, dg); return read(dg, type); }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2015", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2015", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2015", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2015", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1. getRequest, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2015", "SSSSSS", "SSSSSS"))
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final DataGroup1 dg1 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg01"), DataGroup1.class);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.MRZ_CHECK, ((RdaException) exception).error); assertEquals("Input date of birth not equal to data group 1", exception.getMessage()); }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg, Class<T> type) throws RdaException { verifyDataGroup(com, lso, dg); return read(dg, type); }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1. getRequest, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final COM com = verifier.verifyCom(readFixture("nik2014/efCom"), TravelDocumentCOM.class); final LdsSecurityObject lso = verifier.verifySOd(com, readFixture("nik2014/efSod"));  final DataGroup1 dg1 = verifier.verifyDataGroup(com, lso, readFixture("nik2014/dg01"), DataGroup1.class);  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.MRZ_CHECK, ((RdaException) exception).error); assertEquals("Input date of expiry not equal to data group 1", exception.getMessage()); }
verifyDataGroup(COM com, LdsSecurityObject lso, byte[] dg, Class<T> type) throws RdaException { verifyDataGroup(com, lso, dg); return read(dg, type); }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1. getRequest, exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyMrz(dg1, new MrzInfo("SPECI2014", "SSSSSS", "SSSSSS"))
[-] pred:  org. junit. Assert. assertEquals ( dg1. getRequest, exceptions )

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final byte[] seed = Hex.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); final byte[] result = Hex.decode( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" );  "<AssertPlaceHolder>";  }
verifyAuthenticate(byte[] seed, byte[] result) throws RdaException { final SecureMessaging sm = new TDEASecureMessaging(seed, 0, 16, null);  final byte[] calculatedMac = sm.mac( m -> m.update(result, 0, 32)); if (!CryptoUtils.compare(calculatedMac, result, 32)) { throw new RdaException(RdaError.AUTHENTICATE, "Invalid MAC"); }  return sm.decrypt(false, false, result, 0, 32); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(verifier.verifyAuthenticate(seed, result)) )
[-] pred:  org. junit. Assert. assertFalse ( verifier. verifyAuthenticate(byte[] seed, result ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(verifier.verifyAuthenticate(seed, result)) )
[-] pred:  org. junit. Assert. assertTrue ( verifier. verifyAuthenticate(byte[] seed, result ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(verifier.verifyAuthenticate(seed, result)) )
[-] pred:  org. junit. Assert. assertEquals ( verifier. verifyAuthenticate(byte[] seed, result ), true )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(verifier.verifyAuthenticate(seed, result)) )
[-] pred:  org. junit. Assert. assertEquals ( verifier. verifyAuthenticate(byte[] seed, result ), false )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", Hex.toHexString(verifier.verifyAuthenticate(seed, result)) )
[-] pred:  org. junit. Assert. assertFalse ( verifier. verifyAuthenticate(byte[] seed, byte[] result )

************************************
************************************
[+] input: Exception { final CardVerifier verifier = verifier(null, null); final byte[] seed = Hex.decode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); final byte[] result = Hex.decode("" + "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" );  Exception exception = "<AssertPlaceHolder>"; }); assertEquals(RdaError.AUTHENTICATE, ((RdaException) exception).error); assertEquals("Invalid MAC", exception.getMessage());  }
verifyAuthenticate(byte[] seed, byte[] result) throws RdaException { final SecureMessaging sm = new TDEASecureMessaging(seed, 0, 16, null);  final byte[] calculatedMac = sm.mac( m -> m.update(result, 0, 32)); if (!CryptoUtils.compare(calculatedMac, result, 32)) { throw new RdaException(RdaError.AUTHENTICATE, "Invalid MAC"); }  return sm.decrypt(false, false, result, 0, 32); }
[*] target: assertThrows(RdaException.class, () -> { verifier.verifyAuthenticate(seed, result)
[-] pred:  org. junit. Assert. assertEquals ( exception, verifier. verifyAuthenticate ( result ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyAuthenticate(seed, result)
[-] pred:  org. junit. Assert. assertNull ( exception )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyAuthenticate(seed, result)
[-] pred:  org. junit. Assert. assertEquals ( exception, verifier. verifyAuthenticate ( result, null ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyAuthenticate(seed, result)
[-] pred:  org. junit. Assert. assertEquals ( exception, verifier. verifyAuthenticate ( result, 0 ) )

[*] target: assertThrows(RdaException.class, () -> { verifier.verifyAuthenticate(seed, result)
[-] pred:  org. junit. Assert. assertNotNull ( exception )

************************************
************************************
[+] input: UnsupportedEncodingException { String redirectUrl = "redirectUrl"; httpServletRequestMock.setRequestedSessionId("sessionId"); when(assertionConsumerServiceUrlServiceMock.generateRedirectUrl(anyString(), any(), anyString(), any())).thenReturn(redirectUrl);  RedirectView result = artifactController.redirectWithArtifact("artifact", httpServletRequestMock);  "<AssertPlaceHolder>"; assertEquals(redirectUrl, result.getUrl()); verify(assertionConsumerServiceUrlServiceMock, times(1)).generateRedirectUrl(anyString(), any(), anyString(), any()); }
redirectWithArtifact(@RequestParam(value = "SAMLart") String artifact, HttpServletRequest request) throws SamlSessionException, UnsupportedEncodingException { logger.info("Receive redirect with SAML artifact"); return new RedirectView(assertionConsumerServiceUrlService.generateRedirectUrl(artifact, null, request.getRequestedSessionId(), null)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. getItems ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. getMessage ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. location )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. redirectWithArtifact(redirectUrl"" )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: UnsupportedEncodingException { String redirectUrl = "redirectUrl"; httpServletRequestMock.setRequestedSessionId("sessionId"); when(assertionConsumerServiceUrlServiceMock.generateRedirectUrl(any(), anyString(), anyString(), any(BvdStatus.class))).thenReturn(redirectUrl);  RedirectView result = artifactController.redirectFromBvd("transactionId", OK, httpServletRequestMock);  "<AssertPlaceHolder>"; assertEquals(redirectUrl, result.getUrl()); verify(assertionConsumerServiceUrlServiceMock, times(1)).generateRedirectUrl(any(), anyString(), anyString(), any(BvdStatus.class)); }
redirectFromBvd(@RequestParam(value = "transactionId") String transactionId, @RequestParam(value = "status", required = false) BvdStatus status, HttpServletRequest request) throws SamlSessionException, UnsupportedEncodingException { logger.info("Receive redirect with transactionId from BVD"); return new RedirectView(assertionConsumerServiceUrlService.generateRedirectUrl(null, transactionId, request.getRequestedSessionId(), status)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. getMessage ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. location )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. getPath ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. METHOD_11 ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( redirectUrl, result. METHOD_4 ( ) )

************************************
************************************
[+] input: SamlParseException { when(artifactResolveServiceMock.startArtifactResolveProcess(any(HttpServletRequest.class))).thenThrow(ClassCastException.class);  ResponseEntity response = artifactController.resolveArtifact(httpServletRequestMock, httpServletResponseMock); "<AssertPlaceHolder>";  verify(artifactResolveServiceMock, times(1)).startArtifactResolveProcess(any(HttpServletRequest.class)); }
resolveArtifact(HttpServletRequest request, HttpServletResponse response) throws SamlParseException { try { final var artifactResolveRequest = artifactResolveService.startArtifactResolveProcess(request); artifactResponseService.generateResponse(response, artifactResolveRequest); return new ResponseEntity(HttpStatus.OK); } catch (ClassCastException ex) { return new ResponseEntity(HttpStatus.BAD_REQUEST); } }
[*] target: assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST)
[-] pred:  org. junit. Assert. assertEquals ( ResponseEntity. Status.BAD_REQUEST, response. getStatusCode ( ) )

[*] target: assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST)
[-] pred:  org. junit. Assert. assertEquals ( ResponseEntity. Status.BAD_REQUEST, response. getStatus ( ) )

[*] target: assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST)
[-] pred:  org. junit. Assert. assertEquals ( ResponseEntity. class, response. getClass ( ) )

[*] target: assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST)
[-] pred:  org. junit. Assert. assertEquals ( ResponseEntity. Status. COMPLETED, response. getStatusCode ( ) )

[*] target: assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST)
[-] pred:  org. junit. Assert. assertEquals ( ResponseEntity. Status. NOT_TABLE, response. getStatusCode ( ) )

************************************
************************************
[+] input: Exception { when(samlSessionServiceMock.loadSession(anyString())).thenReturn(samlSession); when(adServiceMock.resolveAuthenticationResult(anyString())).thenReturn(adAuthentication);  ArtifactResolveRequest result = artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid));  "<AssertPlaceHolder>"; assertEquals(result.getConnectionEntityId(), samlSession.getConnectionEntityId()); }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertFalse ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( samlSession, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit here )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: SamlSessionException { samlSession.setConnectionEntityId("wrongConnectionEntityId"); when(samlSessionServiceMock.loadSession(anyString())).thenReturn(samlSession);  SamlParseException exception = "<AssertPlaceHolder>"; assertEquals("ArtifactResolve not valid", exception.getMessage()); }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getMessage ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception, SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValid)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception, atParseException exception )

************************************
************************************
[+] input: parseArtifactResolveWithoutArtifact() { SamlParseException exception = "<AssertPlaceHolder>";  assertEquals("ArtifactResolve not valid", exception.getMessage()); }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoArtifact)))
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoArtifact)))
[-] pred:  org. junit. Assert. assertEquals ( true, SamlParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoArtifact)))
[-] pred:  org. junit. Assert. assertEquals ( true, atParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoArtifact)))
[-] pred:  org. junit. Assert. assertEquals ( null, SamlParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoArtifact)))
[-] pred:  org. junit. Assert. assertEquals ( true, SamlParseException exception. getMessage ( ) )

************************************
************************************
[+] input: SamlSessionException { when(samlSessionServiceMock.loadSession(anyString())).thenReturn(samlSession);  SamlParseException exception = "<AssertPlaceHolder>"; assertEquals("ArtifactResolve not valid", exception.getMessage()); }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoSignature)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoSignature)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getMessage ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoSignature)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoSignature)) )
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception, SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestNoSignature)) )
[-] pred:  org

************************************
************************************
[+] input: SamlSessionException { when(samlSessionServiceMock.loadSession(anyString())).thenReturn(samlSession);  SamlParseException exception = "<AssertPlaceHolder>";  assertEquals("ArtifactResolve not valid", exception.getMessage()); }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestInvalidVersion)))
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestInvalidVersion)))
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getMessage ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestInvalidVersion)))
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception. getStatusCode ( ) )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestInvalidVersion)))
[-] pred:  org. junit. Assert. assertNotNull ( SamlParseException exception, SamlParseException exception )

[*] target: assertThrows(SamlParseException.class, () -> artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveRequestInvalidVersion)))
[-] pred:  org

************************************
************************************
[+] input: Exception { samlSession.setProtocolType(ProtocolType.SAML_ROUTERINGSDIENST); samlSession.setTransactionId("transactionId");  when(samlSessionServiceMock.loadSession(anyString())).thenReturn(samlSession); ArtifactResolveRequest artifactResolveRequest = artifactResolveService.startArtifactResolveProcess(prepareSoapRequest(artifactResolveValidBVD));  "<AssertPlaceHolder>"; }
startArtifactResolveProcess(HttpServletRequest httpServletRequest) throws SamlParseException { try { final var artifactResolveRequest = validateRequest(httpServletRequest); final var samlSession = updateArtifactResolveRequestWithSamlSession(artifactResolveRequest); validateArtifactResolve(artifactResolveRequest);  dcMetadataService.resolveDcMetadata(artifactResolveRequest); signatureService.validateSamlRequest(artifactResolveRequest, artifactResolveRequest.getArtifactResolve().getSignature());  createAdAuthentication(samlSession, artifactResolveRequest); samlSessionService.updateSamlSession(artifactResolveRequest);  return artifactResolveRequest;  } catch (MessageDecodingException e) { throw new SamlParseException("ArtifactResolveRequest soap11 decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("ArtifactResolveRequest initialization exception", e); } catch (SamlSessionException e) { throw new SamlParseException("Failed to load saml session", e); } catch (AdException e) { throw new SamlParseException("Failed to create an authentication", e); } catch (DienstencatalogusException e) { throw new SamlParseException("Failed to retrieve metadata from DienstenCatalogus", e); } catch (SamlValidationException e) { throw new SamlParseException("ArtifactResolve not valid", e); } catch (ValidationException e) { throw new SamlParseException("Failed to validate", e); } catch (SharedServiceClientException e) { throw new SamlParseException("Failed to retrieve data from sharedServiceClient.getSSConfigLong", e); } }
[*] target: assertEquals("PPPPPPPP", artifactResolveRequest.getAdAuthentication().getBsn())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResolveRequest )

[*] target: assertEquals("PPPPPPPP", artifactResolveRequest.getAdAuthentication().getBsn())
[-] pred:  org. junit. Assert. assertNull ( artifactResolveRequest )

[*] target: assertEquals("PPPPPPPP", artifactResolveRequest.getAdAuthentication().getBsn())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResolveRequest. get ( 0 ) )

[*] target: assertEquals("PPPPPPPP", artifactResolveRequest.getAdAuthentication().getBsn())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResolveRequest. getFullyQualifiedClassName ( ) )

[*] target: assertEquals("PPPPPPPP", artifactResolveRequest.getAdAuthentication().getBsn())
[-] pred:  org

************************************
************************************
[+] input: InstantiationException { ArtifactResolveRequest artifactResolveRequest = getArtifactResolveRequest("success", true,false, SAML_COMBICONNECT, EncryptionType.BSN, ENTRANCE_ENTITY_ID); artifactResolveRequest.getSamlSession().setResolveBeforeTime(System.currentTimeMillis());  ArtifactResponse artifactResponse = artifactResponseService.buildArtifactResponse(artifactResolveRequest, ENTRANCE_ENTITY_ID, TD);  "<AssertPlaceHolder>"; assertEquals("urn:oasis:names:tc:SAML:2.0:status:RequestDenied", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getStatusCode().getValue()); }
buildArtifactResponse(ArtifactResolveRequest artifactResolveRequest, String entityId, SignType signType) throws InstantiationException, ValidationException, ArtifactBuildException, BvdException { final var artifactResponse = OpenSAMLUtils.buildSAMLObject(ArtifactResponse.class); final var status = OpenSAMLUtils.buildSAMLObject(Status.class); final var statusCode = OpenSAMLUtils.buildSAMLObject(StatusCode.class); final var issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class);  return ArtifactResponseBuilder .newInstance(artifactResponse) .addID() .addIssueInstant() .addInResponseTo(artifactResolveRequest.getArtifactResolve().getID()) .addStatus(StatusBuilder .newInstance(status) .addStatusCode(statusCode, StatusCode.SUCCESS) .build()) .addIssuer(issuer, entityId) .addMessage(buildResponse(artifactResolveRequest, entityId, signType)) .addSignature(signatureService, signType) .build(); }
[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Requester", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Requester", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Requester", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert :: assertNotNull, artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Requester", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit ). assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Requester", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse

************************************
************************************
[+] input: InstantiationException { ArtifactResolveRequest artifactResolveRequest = getArtifactResolveRequest("success", true, false, SAML_COMBICONNECT, EncryptionType.PSEUDONIEM, ENTRANCE_ENTITY_ID); artifactResolveRequest.getSamlSession().setRequestedSecurityLevel(30); artifactResolveRequest.getAdAuthentication().setLevel(10);  ArtifactResponse artifactResponse = artifactResponseService.buildArtifactResponse(artifactResolveRequest, ENTRANCE_ENTITY_ID, TD);  "<AssertPlaceHolder>"; assertEquals("urn:oasis:names:tc:SAML:2.0:status:NoAuthnContext", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getStatusCode().getValue()); }
buildArtifactResponse(ArtifactResolveRequest artifactResolveRequest, String entityId, SignType signType) throws InstantiationException, ValidationException, ArtifactBuildException, BvdException { final var artifactResponse = OpenSAMLUtils.buildSAMLObject(ArtifactResponse.class); final var status = OpenSAMLUtils.buildSAMLObject(Status.class); final var statusCode = OpenSAMLUtils.buildSAMLObject(StatusCode.class); final var issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class);  return ArtifactResponseBuilder .newInstance(artifactResponse) .addID() .addIssueInstant() .addInResponseTo(artifactResolveRequest.getArtifactResolve().getID()) .addStatus(StatusBuilder .newInstance(status) .addStatusCode(statusCode, StatusCode.SUCCESS) .build()) .addIssuer(issuer, entityId) .addMessage(buildResponse(artifactResolveRequest, entityId, signType)) .addSignature(signatureService, signType) .build(); }
[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Responder", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Responder", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Responder", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit, Assert. assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Responder", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit ). assertNotNull ( artifactResponse )

[*] target: assertEquals("urn:oasis:names:tc:SAML:2.0:status:Responder", ((Response) artifactResponse.getMessage()).getStatus().getStatusCode().getValue())
[-] pred:  org. junit. Assert ; assertNotNull ( artifactResponse )

************************************
************************************
[+] input: MetadataException { when(bvdClientMock.retrieveRepresentationAffirmations(anyString())).thenReturn(getBvdResponse()); when(bvdMetadataServiceMock.generateMetadata()).thenReturn(getEntityDescriptor(BVD_ENTITY_ID));  ArtifactResolveRequest artifactResolveRequest = getArtifactResolveRequest("success", true,true, SAML_COMBICONNECT, EncryptionType.BSN, BVD_ENTITY_ID); artifactResolveRequest.getAdAuthentication().setEncryptionIdType(EncryptionType.PSEUDONIEM.name()); artifactResolveRequest.getAdAuthentication().setPolymorphIdentity("identity"); artifactResolveRequest.getAdAuthentication().setPolymorphPseudonym("polymorphPseudonym");  ArtifactResponse artifactResponse = artifactResponseService.buildArtifactResponse(artifactResolveRequest, BVD_ENTITY_ID, BVD);  "<AssertPlaceHolder>"; }
buildArtifactResponse(ArtifactResolveRequest artifactResolveRequest, String entityId, SignType signType) throws InstantiationException, ValidationException, ArtifactBuildException, BvdException { final var artifactResponse = OpenSAMLUtils.buildSAMLObject(ArtifactResponse.class); final var status = OpenSAMLUtils.buildSAMLObject(Status.class); final var statusCode = OpenSAMLUtils.buildSAMLObject(StatusCode.class); final var issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class);  return ArtifactResponseBuilder .newInstance(artifactResponse) .addID() .addIssueInstant() .addInResponseTo(artifactResolveRequest.getArtifactResolve().getID()) .addStatus(StatusBuilder .newInstance(status) .addStatusCode(statusCode, StatusCode.SUCCESS) .build()) .addIssuer(issuer, entityId) .addMessage(buildResponse(artifactResolveRequest, entityId, signType)) .addSignature(signatureService, signType) .build(); }
[*] target: assertNotNull(artifactResponse)
[-] pred:  org. junit. Assert. assertEquals ( false, artifactResponse. isMoveDoable ( ) )

[*] target: assertNotNull(artifactResponse)
[-] pred:  org. junit. Assert. assertNotNull ( artifactResponse )

[*] target: assertNotNull(artifactResponse)
[-] pred:  org. junit. Assert. assertNull ( artifactResponse )

[*] target: assertNotNull(artifactResponse)
[-] pred:  org. junit. Assert. assertTrue ( artifactResponse. isMoveDoable ( ) )

[*] target: assertNotNull(artifactResponse)
[-] pred:  org. junit. Assert. assertEquals ( false, artifactResponse. isMoveMoved ( ) )

************************************
************************************
[+] input: JsonProcessingException { when(bvdClientMock.retrieveRepresentationAffirmations(anyString())).thenReturn(getBvdResponse()); when(bvdMetadataServiceMock.generateMetadata()).thenReturn(getEntityDescriptor(BVD_ENTITY_ID));  ArtifactResolveRequest artifactResolveRequest = getArtifactResolveRequest("success", true,true, SAML_COMBICONNECT, EncryptionType.BSN, BVD_ENTITY_ID); artifactResolveRequest.getSamlSession().setRequesterId(BVD_ENTITY_ID);  ArtifactResponse artifactResponse = artifactResponseService.buildArtifactResponse(artifactResolveRequest, BVD_ENTITY_ID, BVD);  Response response = (Response) artifactResponse.getMessage();  verify(bvdClientMock, times(1)).retrieveRepresentationAffirmations(anyString()); "<AssertPlaceHolder>"; verify(bvdMetadataServiceMock, times(1)).generateMetadata(); }
buildArtifactResponse(ArtifactResolveRequest artifactResolveRequest, String entityId, SignType signType) throws InstantiationException, ValidationException, ArtifactBuildException, BvdException { final var artifactResponse = OpenSAMLUtils.buildSAMLObject(ArtifactResponse.class); final var status = OpenSAMLUtils.buildSAMLObject(Status.class); final var statusCode = OpenSAMLUtils.buildSAMLObject(StatusCode.class); final var issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class);  return ArtifactResponseBuilder .newInstance(artifactResponse) .addID() .addIssueInstant() .addInResponseTo(artifactResolveRequest.getArtifactResolve().getID()) .addStatus(StatusBuilder .newInstance(status) .addStatusCode(statusCode, StatusCode.SUCCESS) .build()) .addIssuer(issuer, entityId) .addMessage(buildResponse(artifactResolveRequest, entityId, signType)) .addSignature(signatureService, signType) .build(); }
[*] target: assertNull(response.getAssertions().get(0).getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getURI())
[-] pred:  org. junit. Assert. assertEquals ( false, response. getMoveLine ( ) )

[*] target: assertNull(response.getAssertions().get(0).getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getURI())
[-] pred:  org. junit. Assert. assertEquals ( false, response. getMovej ( ) )

[*] target: assertNull(response.getAssertions().get(0).getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getURI())
[-] pred:  org. junit. Assert. assertEquals ( false, response. getMoveToken ( ) )

[*] target: assertNull(response.getAssertions().get(0).getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getURI())
[-] pred:  org. junit. Assert. assertEquals ( false, response. body ( ) )

[*] target: assertNull(response.getAssertions().get(0).getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getURI())
[-] pred:  org. junit. Assert. assertNull ( response )

************************************
************************************
[+] input: UnsupportedEncodingException { when(samlSessionRepositoryMock.findByArtifact(anyString())).thenReturn(Optional.of(createSamlSession()));  String url = assertionConsumerServiceUrlService.generateRedirectUrl("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", null, "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", null); "<AssertPlaceHolder>"; }
generateRedirectUrl(String artifact, String transactionId, String sessionId, BvdStatus status) throws SamlSessionException, UnsupportedEncodingException { final var samlSession = findSamlSessionByArtifactOrTransactionId(artifact, transactionId);  if (CANCELLED.equals(status)) samlSession.setBvdStatus(AdAuthenticationStatus.STATUS_CANCELED.label); if (ERROR.equals(status)) samlSession.setBvdStatus(AdAuthenticationStatus.STATUS_FAILED.label);  if (artifact == null) artifact = samlSession.getArtifact();  if (sessionId == null || !sessionId.equals(samlSession.getHttpSessionId())) throw new SamlSessionException("Saml session found with invalid sessionId for redirect_with_artifact");  var url = new StringBuilder(samlSession.getAssertionConsumerServiceURL() + "?SAMLart=" + URLEncoder.encode(artifact, "UTF-8"));  // append relay-state if (samlSession.getRelayState() != null) url.append("&RelayState=" + URLEncoder.encode(samlSession.getRelayState(), "UTF-8"));  samlSession.setResolveBeforeTime(System.currentTimeMillis() + 1000 * 60 * minutesToResolve); samlSessionRepository.save(samlSession); return url.toString(); }
[*] target: assertEquals("https://sso.afnemer.nl/sp/assertion_consumer_service?SAMLart=AAQAAEotn7wK9jsnzCpL6em5sCpDVvMWlkQ34i%2Fjc4CmqxKKDt4mJxh3%2FvY%3D", url)
[-] pred:  org. junit. Assert. assertEquals ( 200, url. length ( ) )

[*] target: assertEquals("https://sso.afnemer.nl/sp/assertion_consumer_service?SAMLart=AAQAAEotn7wK9jsnzCpL6em5sCpDVvMWlkQ34i%2Fjc4CmqxKKDt4mJxh3%2FvY%3D", url)
[-] pred:  org. junit. Assert. assertEquals ( 200, url )

[*] target: assertEquals("https://sso.afnemer.nl/sp/assertion_consumer_service?SAMLart=AAQAAEotn7wK9jsnzCpL6em5sCpDVvMWlkQ34i%2Fjc4CmqxKKDt4mJxh3%2FvY%3D", url)
[-] pred:  org. junit. Assert. assertEquals ( 200, url. getStatus ( ) )

[*] target: assertEquals("https://sso.afnemer.nl/sp/assertion_consumer_service?SAMLart=AAQAAEotn7wK9jsnzCpL6em5sCpDVvMWlkQ34i%2Fjc4CmqxKKDt4mJxh3%2FvY%3D", url)
[-] pred:  org. junit. Assert. assertEquals ( 200, url. trim ( ) )

[*] target: assertEquals("https://sso.afnemer.nl/sp/assertion_consumer_service?SAMLart=AAQAAEotn7wK9jsnzCpL6em5sCpDVvMWlkQ34i%2Fjc4CmqxKKDt4mJxh3%2FvY%3D", url)
[-] pred:  org

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceURL(URL_ASSERTION_CONSUMER_SERVICE);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest);  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest, authnRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( actionRequest, authenticationRequest. resolveAssertionConsumerService(authenticationRequest ( ) )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest. resolveAssertionConsumerService(authnRequest ), authnRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( handlerRequest, authnRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( actionRequest, authenticationRequest )

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceURL(URL_ASSERTION_CONSUMER_SERVICE); authnRequest.setAssertionConsumerServiceIndex(1);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest);  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest, authnRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( true, authnRequest. resolveAssertionConsumerServiceIndex(1); authenticateRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerServiceIndex(1); authenticateRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( actionRequest, authnRequest )

[*] target: assertEquals(URL_ASSERTION_CONSUMER_SERVICE, authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( handlerRequest, authnRequest )

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(0);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, assertionRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authenticationRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest authnRequest, authenticationRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, assertionRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException { }

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( assertionRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(1);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest. resolveAssertionConsumerService ( authenticationRequest ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService ( authenticationRequest ).()); ( ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest authnRequest, assertionRequest. resolveAssertionConsumerService ( authenticationRequest ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(2);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException { true )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest authnRequest, assertionRequest )

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException { true )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService( authenticationRequest) throws SamlValidationException { SamlValidationException )

************************************
************************************
[+] input: resolveAcsWithOutOfBoundIndexInMultiAcsMetadata() { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(3);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFile, CONNECTION_ENTITY_ID));  Exception exception = "<AssertPlaceHolder>";  assertEquals("Authentication: Assertion Consumer Index is out of bounds", exception.getMessage()); }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertEquals ( exception, java. lang. String. class )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof at ) )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertEquals ( exception, authnRequest )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsSingleAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException { SamlValidationException )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authenticationRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService( authenticationRequest) throws SamlValidationException { SamlValidationException )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException { true )

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(0);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsSingleAcsMetadataFile, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, assertionRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authenticationRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest authnRequest, authenticationRequest. resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( authnRequest, assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest ; 0 )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org

************************************
************************************
[+] input: SamlValidationException { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); authnRequest.setAssertionConsumerServiceIndex(1);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFileWithoutDefault, CONNECTION_ENTITY_ID));  assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest); "<AssertPlaceHolder>"; }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest, authnRequest. resolveAssertionConsumerService ( authenticationRequest ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertTrue ( authnRequest. resolveAssertionConsumerService ( authenticationRequest ).()); ( ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org. junit. Assert. assertEquals ( assertionRequest authnRequest, assertionRequest. resolveAssertionConsumerService ( authenticationRequest ) )

[*] target: assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", authenticationRequest.getAssertionConsumerURL())
[-] pred:  org

************************************
************************************
[+] input: resolveAcsUrlWithoutIndexInMultiAcsNoDefaultMetadata() { AuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class);  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setAuthnRequest(authnRequest); authenticationRequest.setConnectionEntity(MetadataParser.readMetadata(stubsMultiAcsMetadataFileWithoutDefault, CONNECTION_ENTITY_ID));   Exception exception = "<AssertPlaceHolder>";  assertEquals("Authentication: There is no default AssertionConsumerService", exception.getMessage()); }
resolveAssertionConsumerService(AuthenticationRequest authenticationRequest) throws SamlValidationException {  // set URL if set in authnRequest final String authnAcsURL = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceURL(); if (authnAcsURL != null) { authenticationRequest.setAssertionConsumerURL(authnAcsURL); return; }  // search url from metadata endpoints final Integer authnAcsIdx = authenticationRequest.getAuthnRequest().getAssertionConsumerServiceIndex(); List<Endpoint> endpoints = authenticationRequest.getConnectionEntity().getRoleDescriptors().get(0).getEndpoints(AssertionConsumerService.DEFAULT_ELEMENT_NAME);  if (endpoints.isEmpty()) { throw new SamlValidationException("Authentication: Assertion Consumer Service not found in metadata"); }  if (authnAcsIdx != null && endpoints.size() <= authnAcsIdx) { throw new SamlValidationException("Authentication: Assertion Consumer Index is out of bounds"); }  // TODO: check if this statement is correct if (endpoints.size() == 1) { authenticationRequest.setAssertionConsumerURL(endpoints.get(0).getLocation()); return; }  if(authnAcsIdx == null) { AssertionConsumerService defaultAcs = endpoints.stream() .filter(e -> e instanceof AssertionConsumerService) .map(acs -> (AssertionConsumerService) acs) .filter(IndexedEndpoint::isDefault) .findAny() .orElse(null);  if (defaultAcs == null) { throw new SamlValidationException("Authentication: There is no default AssertionConsumerService"); }  authenticationRequest.setAssertionConsumerURL(defaultAcs.getLocation()); return; }  authenticationRequest.setAssertionConsumerURL(endpoints.get(authnAcsIdx).getLocation()); }
[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof at ) )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertTrue ( ( exception instanceof exception ) )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertEquals ( exception, authnRequest )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org. junit. Assert. assertNotNull ( exception )

[*] target: assertThrows(SamlValidationException.class, () -> assertionConsumerServiceUrlService.resolveAssertionConsumerService(authenticationRequest))
[-] pred:  org

************************************
************************************
[+] input: foundAssuranceLevel() { boolean result = LevelOfAssurance.validateAssuranceLevel(30); "<AssertPlaceHolder>"; }
validateAssuranceLevel(int assuranceLevel) { return numberMap.entrySet() .stream() .filter(entry -> Objects.equals(entry.getValue(), assuranceLevel)) .findFirst() .map(Map.Entry::getKey) .isPresent(); }
[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertTrue(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertTrue(result)
[-] pred:  org

************************************
************************************
[+] input: unknownAssuranceLevel() { boolean result = LevelOfAssurance.validateAssuranceLevel(40); "<AssertPlaceHolder>"; }
validateAssuranceLevel(int assuranceLevel) { return numberMap.entrySet() .stream() .filter(entry -> Objects.equals(entry.getValue(), assuranceLevel)) .findFirst() .map(Map.Entry::getKey) .isPresent(); }
[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertTrue ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertFalse ( result )

[*] target: assertFalse(result)
[-] pred:  org. junit. Assert. assertThat ( result )

[*] target: assertFalse(result)
[-] pred:  org

************************************
************************************
[+] input: SamlSessionException { int result = LevelOfAssurance.getAssuranceLevel("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); "<AssertPlaceHolder>"; }
getAssuranceLevel(String key) throws SamlSessionException { if (!numberMap.containsKey(key)) { throw new SamlSessionException("Assurance level not found"); } return numberMap.get(key); }
[*] target: assertEquals(10, result)
[-] pred:  org. junit. Assert. assertEquals ( result, 0 )

[*] target: assertEquals(10, result)
[-] pred:  org. junit. Assert. assertEquals ( 10, result )

[*] target: assertEquals(10, result)
[-] pred:  org. junit. Assert. assertEquals ( 0, result )

[*] target: assertEquals(10, result)
[-] pred:  org. junit. Assert. assertEquals ( result, 6 )

[*] target: assertEquals(10, result)
[-] pred:  org. junit. Assert. assertEquals ( 1, result )

************************************
************************************
[+] input: AdException { AdSession adSession = new AdSession(); adSession.setSessionId("sessionId"); when(adClientMock.startAppSession(anyString())).thenReturn(adResponse);  Map<String, Object> result = authenticationAppToAppService.createAuthenticationParameters("relayState", authenticationRequest);  "<AssertPlaceHolder>"; assertEquals(6, result.size()); assertEquals("appSessionId", result.get("app_session_id")); assertEquals("artifact", result.get("SAMLart")); assertEquals(20, result.get("authentication_level")); assertEquals("appReturnUrl", result.get("image_domain")); assertEquals("relayState", result.get("RelayState")); }
createAuthenticationParameters(String relayState, AuthenticationRequest authenticationRequest) throws AdException {  HashMap<String, String> digidApp = new HashMap<>(); digidApp.put("name", authenticationRequest.getServiceName()); digidApp.put("url", authenticationRequest.getAppReturnUrl());  Map<String, Object> authenticationParameters = new HashMap<>(); authenticationParameters.put("app_session_id", retrieveAppSessionIdFromAd(authenticationRequest.getAppReturnUrl(), authenticationRequest)); authenticationParameters.put("SAMLart", authenticationRequest.getSamlSession().getArtifact()); authenticationParameters.put("apps", authenticationRequest.getAppActive() ? Arrays.asList(digidApp) : Collections.emptyList()); authenticationParameters.put("authentication_level", authenticationRequest.getSamlSession().getAuthenticationLevel()); authenticationParameters.put("image_domain", authenticationRequest.getAppReturnUrl()); authenticationParameters.put("RelayState", relayState);  return authenticationParameters; }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( java. util. Collections. emptyList ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: UnsupportedEncodingException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setProtocolType(ProtocolType.SAML_ROUTERINGSDIENST);  when(request.getParameter("SAMLRequest")).thenReturn("test"); when(authenticationServiceMock.startAuthenticationProcess(any(HttpServletRequest.class))).thenReturn(authenticationRequest);  RedirectView result = authenticationControllerMock.requestAuthenticationService(request);  "<AssertPlaceHolder>"; verify(authenticationServiceMock, times(1)).startAuthenticationProcess(any(HttpServletRequest.class)); verify(authenticationIdpServiceMock, times(1)).redirectWithCorrectAttributesForAd(any(HttpServletRequest.class), any(AuthenticationRequest.class)); }
requestAuthenticationService(HttpServletRequest request) throws SamlValidationException, SharedServiceClientException, DienstencatalogusException, UnsupportedEncodingException, ComponentInitializationException, MessageDecodingException, SamlSessionException, SamlParseException { logger.info("Receive SAML AuthnRequest"); if (request.getParameter("SAMLRequest") != null) { AuthenticationRequest authenticationRequest = authenticationService.startAuthenticationProcess(request); return new RedirectView(authenticationRequest.getProtocolType().equals(ProtocolType.SAML_ROUTERINGSDIENST) ? authenticationIdpService.redirectWithCorrectAttributesForAd(request, authenticationRequest) : authenticationEntranceService.redirectWithCorrectAttributesForAd(request, authenticationRequest) ); } else { RedirectView redirectView = new RedirectView("/saml/v4/idp/redirect_with_artifact"); redirectView.setStatusCode(HttpStatus.BAD_REQUEST); return redirectView; } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is (("test000 ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is (("testTag ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is (("testPlugin ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals (("test000, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals (("test RESULT, result )

************************************
************************************
[+] input: SamlParseException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setProtocolType(ProtocolType.SAML_COMBICONNECT);  when(request.getParameter("SAMLRequest")).thenReturn("test"); when(authenticationServiceMock.startAuthenticationProcess(any(HttpServletRequest.class))).thenReturn(authenticationRequest);  RedirectView result = authenticationControllerMock.requestAuthenticationService(request);  "<AssertPlaceHolder>"; verify(authenticationServiceMock, times(1)).startAuthenticationProcess(any(HttpServletRequest.class)); verify(authenticationEntranceServiceMock, times(1)).redirectWithCorrectAttributesForAd(any(HttpServletRequest.class), any(AuthenticationRequest.class)); }
requestAuthenticationService(HttpServletRequest request) throws SamlValidationException, SharedServiceClientException, DienstencatalogusException, UnsupportedEncodingException, ComponentInitializationException, MessageDecodingException, SamlSessionException, SamlParseException { logger.info("Receive SAML AuthnRequest"); if (request.getParameter("SAMLRequest") != null) { AuthenticationRequest authenticationRequest = authenticationService.startAuthenticationProcess(request); return new RedirectView(authenticationRequest.getProtocolType().equals(ProtocolType.SAML_ROUTERINGSDIENST) ? authenticationIdpService.redirectWithCorrectAttributesForAd(request, authenticationRequest) : authenticationEntranceService.redirectWithCorrectAttributesForAd(request, authenticationRequest) ); } else { RedirectView redirectView = new RedirectView("/saml/v4/idp/redirect_with_artifact"); redirectView.setStatusCode(HttpStatus.BAD_REQUEST); return redirectView; } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof instanceof RedirectView ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof instanceof account ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( ( result instanceof callback ) )

[*] target: assertNotNull(result)
[-] pred:  org

[*] target: assertNotNull(result)
[-] pred:  )

************************************
************************************
[+] input: SamlParseException { RedirectView result = authenticationControllerMock.requestAuthenticationService(request);  "<AssertPlaceHolder>"; verify(authenticationEntranceServiceMock, times(0)).startAuthenticationProcess(any(HttpServletRequest.class)); verify(authenticationEntranceServiceMock, times(0)).redirectWithCorrectAttributesForAd(any(HttpServletRequest.class), any(AuthenticationRequest.class)); }
requestAuthenticationService(HttpServletRequest request) throws SamlValidationException, SharedServiceClientException, DienstencatalogusException, UnsupportedEncodingException, ComponentInitializationException, MessageDecodingException, SamlSessionException, SamlParseException { logger.info("Receive SAML AuthnRequest"); if (request.getParameter("SAMLRequest") != null) { AuthenticationRequest authenticationRequest = authenticationService.startAuthenticationProcess(request); return new RedirectView(authenticationRequest.getProtocolType().equals(ProtocolType.SAML_ROUTERINGSDIENST) ? authenticationIdpService.redirectWithCorrectAttributesForAd(request, authenticationRequest) : authenticationEntranceService.redirectWithCorrectAttributesForAd(request, authenticationRequest) ); } else { RedirectView redirectView = new RedirectView("/saml/v4/idp/redirect_with_artifact"); redirectView.setStatusCode(HttpStatus.BAD_REQUEST); return redirectView; } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new RedirectView ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new RedirectView ( true ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( this. result, result )

[*] target: assertNotNull(result)
[-] pred:  )

************************************
************************************
[+] input: MessageDecodingException { Map<String, Object> authenticationParameters = new HashMap<>(); authenticationParameters.put("parameter1", "valueParameter1");  AuthenticationRequest authenticationRequest = new AuthenticationRequest();  when(authenticationServiceMock.startAuthenticationProcess(any(HttpServletRequest.class))).thenReturn(authenticationRequest); when(authenticationAppToAppServiceMock.createAuthenticationParameters(anyString(), any(AuthenticationRequest.class))).thenReturn(authenticationParameters);  Map<String, Object> result = authenticationControllerMock.requestAuthenticationApp(request, APP_TO_APP.type, "relayState");  "<AssertPlaceHolder>"; assertEquals(authenticationParameters.size(), result.size()); verify(authenticationServiceMock, times(1)).startAuthenticationProcess(any(HttpServletRequest.class)); verify(authenticationAppToAppServiceMock, times(1)).createAuthenticationParameters(anyString(), any(AuthenticationRequest.class)); }
requestAuthenticationApp(HttpServletRequest request, @RequestParam(name = "Type") String requestType, @RequestParam(name = "RelayState") String relayState) throws SamlValidationException, DienstencatalogusException, SharedServiceClientException, ComponentInitializationException, MessageDecodingException, AdException, SamlSessionException { validateRequestType(requestType, relayState); AuthenticationRequest authenticationRequest = authenticationService.startAuthenticationProcess(request); return authenticationAppToAppService.createAuthenticationParameters(relayState, authenticationRequest); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new HashMap ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: ComponentInitializationException { Map<String, Object> authenticationParameters = new HashMap<>(); authenticationParameters.put("parameter1", "valueParameter1");  AuthenticationRequest authenticationRequest = new AuthenticationRequest(); when(authenticationServiceMock.startAuthenticationProcess(any(HttpServletRequest.class))).thenReturn(authenticationRequest);  when(authenticationAppToAppServiceMock.createAuthenticationParameters(anyString(), any(AuthenticationRequest.class))).thenReturn(authenticationParameters);  Map<String, Object> result = authenticationControllerMock.requestAuthenticationApp(request, APP_TO_APP.type, "relayState");  "<AssertPlaceHolder>"; assertEquals(authenticationParameters.size(), result.size()); verify(authenticationServiceMock, times(1)).startAuthenticationProcess(any(HttpServletRequest.class)); verify(authenticationAppToAppServiceMock, times(1)).createAuthenticationParameters(anyString(), any(AuthenticationRequest.class)); }
requestAuthenticationApp(HttpServletRequest request, @RequestParam(name = "Type") String requestType, @RequestParam(name = "RelayState") String relayState) throws SamlValidationException, DienstencatalogusException, SharedServiceClientException, ComponentInitializationException, MessageDecodingException, AdException, SamlSessionException { validateRequestType(requestType, relayState); AuthenticationRequest authenticationRequest = authenticationService.startAuthenticationProcess(request); return authenticationAppToAppService.createAuthenticationParameters(relayState, authenticationRequest); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new java. util. HashMap ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new HashMap ( ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( true, result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( result, authenticationRequest )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: SamlSessionException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setRequest(httpServletRequestMock); SamlSession samlSession = new SamlSession(1L); samlSession.setRequesterId("DvEntity"); samlSession.setArtifact("artifact"); authenticationRequest.setSamlSession(samlSession);  String result = authenticationEntranceService.redirectWithCorrectAttributesForAd(httpServletRequestMock, authenticationRequest);  "<AssertPlaceHolder>"; assertNull(samlSession.getTransactionId()); assertEquals(result, frontChannel); }
redirectWithCorrectAttributesForAd(HttpServletRequest httpRequest, AuthenticationRequest authenticationRequest) throws UnsupportedEncodingException, SamlSessionException { SamlSession samlSession = authenticationRequest.getSamlSession();  if (samlSession.getValidationStatus() != null && samlSession.getValidationStatus().equals(STATUS_INVALID.label)) { return cancelAuthenticationToAd(authenticationRequest, samlSession.getArtifact()); } else if (samlSession.getRequesterId() != null && samlSession.getRequesterId().equals(bvdEntityId)) { prepareAuthenticationToAdForBvd(samlSession); String bvdReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), ENTRANCE_RETURN_URL_BVD); logger.info("Prepare authentication to Ad for Bvd"); return prepareAuthenticationToAd(bvdReturnUrl, authenticationRequest); } else { String adReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), REDIRECT_WITH_ARTIFACT_URL); return prepareAuthenticationToAd(adReturnUrl, authenticationRequest); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""name"" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""name"" ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""value"" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""body"" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""1"" ) )

************************************
************************************
[+] input: SamlSessionException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setRequest(httpServletRequestMock); SamlSession samlSession = new SamlSession(1L); samlSession.setRequesterId(bvdEntity); samlSession.setArtifact("artifact"); authenticationRequest.setSamlSession(samlSession);  String result = authenticationEntranceService.redirectWithCorrectAttributesForAd(httpServletRequestMock, authenticationRequest);  "<AssertPlaceHolder>"; assertNotNull(samlSession.getTransactionId()); assertEquals(AdAuthenticationStatus.STATUS_SUCCESS.label, authenticationRequest.getSamlSession().getAuthenticationStatus()); assertEquals(result, frontChannel); }
redirectWithCorrectAttributesForAd(HttpServletRequest httpRequest, AuthenticationRequest authenticationRequest) throws UnsupportedEncodingException, SamlSessionException { SamlSession samlSession = authenticationRequest.getSamlSession();  if (samlSession.getValidationStatus() != null && samlSession.getValidationStatus().equals(STATUS_INVALID.label)) { return cancelAuthenticationToAd(authenticationRequest, samlSession.getArtifact()); } else if (samlSession.getRequesterId() != null && samlSession.getRequesterId().equals(bvdEntityId)) { prepareAuthenticationToAdForBvd(samlSession); String bvdReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), ENTRANCE_RETURN_URL_BVD); logger.info("Prepare authentication to Ad for Bvd"); return prepareAuthenticationToAd(bvdReturnUrl, authenticationRequest); } else { String adReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), REDIRECT_WITH_ARTIFACT_URL); return prepareAuthenticationToAd(adReturnUrl, authenticationRequest); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""name"" ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""1"" ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""2"" ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""name"" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. contains ( ""Text"" ) )

************************************
************************************
[+] input: SamlSessionException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); SamlSession samlSession = new SamlSession(1L); samlSession.setValidationStatus(STATUS_INVALID.label); samlSession.setArtifact("artifact"); samlSession.setHttpSessionId("httpSessionId"); samlSession.setTransactionId("transactionId");  authenticationRequest.setSamlSession(samlSession);  when(assertionConsumerServiceUrlServiceMock.generateRedirectUrl(anyString(), anyString(), anyString(), any())).thenReturn("redirectUrl"); String result = authenticationEntranceService.redirectWithCorrectAttributesForAd(httpServletRequestMock, authenticationRequest);  "<AssertPlaceHolder>"; assertEquals("redirectUrl", result); }
redirectWithCorrectAttributesForAd(HttpServletRequest httpRequest, AuthenticationRequest authenticationRequest) throws UnsupportedEncodingException, SamlSessionException { SamlSession samlSession = authenticationRequest.getSamlSession();  if (samlSession.getValidationStatus() != null && samlSession.getValidationStatus().equals(STATUS_INVALID.label)) { return cancelAuthenticationToAd(authenticationRequest, samlSession.getArtifact()); } else if (samlSession.getRequesterId() != null && samlSession.getRequesterId().equals(bvdEntityId)) { prepareAuthenticationToAdForBvd(samlSession); String bvdReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), ENTRANCE_RETURN_URL_BVD); logger.info("Prepare authentication to Ad for Bvd"); return prepareAuthenticationToAd(bvdReturnUrl, authenticationRequest); } else { String adReturnUrl = generateReturnUrl(httpRequest, samlSession.getArtifact(), REDIRECT_WITH_ARTIFACT_URL); return prepareAuthenticationToAd(adReturnUrl, authenticationRequest); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( """", result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( ""("redirectUrl"", result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( ""("redirectUrlMarked result, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( null, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: SamlParseException { AuthenticationRequest authenticationRequest = new AuthenticationRequest(); authenticationRequest.setRequest(httpServletRequestMock); SamlSession samlSession = new SamlSession(1L); samlSession.setRequesterId("DvEntity"); samlSession.setArtifact("artifact"); authenticationRequest.setSamlSession(samlSession);  String result = authenticationIdpService.redirectWithCorrectAttributesForAd(httpServletRequestMock, authenticationRequest);  "<AssertPlaceHolder>"; assertNull(samlSession.getTransactionId()); assertEquals(result, frontChannel); }
redirectWithCorrectAttributesForAd(HttpServletRequest httpRequest, AuthenticationRequest authenticationRequest) throws SamlParseException { try { String redirectUrl; SamlSession samlSession = authenticationRequest.getSamlSession();  if (samlSession.getValidationStatus() != null && samlSession.getValidationStatus().equals(STATUS_INVALID.label)) { return cancelAuthenticationToAd(authenticationRequest, samlSession.getArtifact()); } else if (authenticationRequest.getIdpAssertion() == null) { String returnUrl = generateReturnUrl(httpRequest, authenticationRequest.getSamlSession().getArtifact(), REDIRECT_WITH_ARTIFACT_URL); redirectUrl = prepareAuthenticationToAd(returnUrl, authenticationRequest); logger.info("Authentication sent to Ad: {}", redirectUrl); } else { redirectUrl = prepareBvdSession(authenticationRequest); logger.info("Redirected to BVD: {}", redirectUrl); } return redirectUrl;  } catch (MetadataException | BvdException | DecryptionException | SamlSessionException e) { throw new SamlParseException("BVD exception starting session", e); } catch (UnsupportedEncodingException e) { throw new SamlParseException("Authentication cannot encode RelayState", e); } }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. isEmpty ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""out"" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( ""."" ).()); ( ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertThat ( result, org. hamcrest. CoreMatchers. is ( ""1"" ) )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertTrue ( result. get ( "". equals ( """" ) ) )

************************************
************************************
[+] input: DecryptionException { String samlRequest = readXMLFile(authnRequestIdpBvdFile); String decodeSAMLRequest = encodeAuthnRequest(samlRequest); httpServletRequestMock.setParameter("SAMLRequest", decodeSAMLRequest); AuthenticationRequest authenticationRequest = authenticationIdpService.startAuthenticationProcess(httpServletRequestMock);  SamlSession samlSession = new SamlSession(1L); authenticationRequest.setSamlSession(samlSession);  when(bvdMetadataServiceMock.getEntityID()).thenReturn("entityId"); when(bvdMetadataServiceMock.getCredential()).thenReturn(credential); NameID nameID = OpenSAMLUtils.buildSAMLObject(NameID.class); nameID.setValue("bsn"); when(encryptionServiceMock.decryptValue(any(EncryptedID.class), any(Credential.class), anyString())).thenReturn(nameID);  authenticationIdpService.redirectWithCorrectAttributesForAd(httpServletRequestMock, authenticationRequest);  "<AssertPlaceHolder>"; }
redirectWithCorrectAttributesForAd(HttpServletRequest httpRequest, AuthenticationRequest authenticationRequest) throws SamlParseException { try { String redirectUrl; SamlSession samlSession = authenticationRequest.getSamlSession();  if (samlSession.getValidationStatus() != null && samlSession.getValidationStatus().equals(STATUS_INVALID.label)) { return cancelAuthenticationToAd(authenticationRequest, samlSession.getArtifact()); } else if (authenticationRequest.getIdpAssertion() == null) { String returnUrl = generateReturnUrl(httpRequest, authenticationRequest.getSamlSession().getArtifact(), REDIRECT_WITH_ARTIFACT_URL); redirectUrl = prepareAuthenticationToAd(returnUrl, authenticationRequest); logger.info("Authentication sent to Ad: {}", redirectUrl); } else { redirectUrl = prepareBvdSession(authenticationRequest); logger.info("Redirected to BVD: {}", redirectUrl); } return redirectUrl;  } catch (MetadataException | BvdException | DecryptionException | SamlSessionException e) { throw new SamlParseException("BVD exception starting session", e); } catch (UnsupportedEncodingException e) { throw new SamlParseException("Authentication cannot encode RelayState", e); } }
[*] target: assertNotNull(samlSession.getTransactionId())
[-] pred:  org. junit. Assert. assertTrue ( decodeSAMLRequest. contains ( nameID ) )

[*] target: assertNotNull(samlSession.getTransactionId())
[-] pred:  org. junit. Assert. assertFalse ( decodeSAMLRequest. contains ( nameID ) )

[*] target: assertNotNull(samlSession.getTransactionId())
[-] pred:  org. junit. Assert. assertEquals ( decodeSAMLRequest, decodeSAMLRequest )

[*] target: assertNotNull(samlSession.getTransactionId())
[-] pred:  org. junit. Assert. assertNull ( decodeSAMLRequest )

[*] target: assertNotNull(samlSession.getTransactionId())
[-] pred:  org

************************************
************************************
[+] input: DecryptionException { List<KeyEncryptionParameters> paramsList = new ArrayList<>(); paramsList.add(encryptionService.getEncryptionParams(entityDescriptor.getEntityID(), keyInfo())); paramsList.add(encryptionService.getEncryptionParams(entityDescriptor.getEntityID(), keyInfo())); EncryptedID id = encryptionService.encryptValue(BSN, AttributeTypes.LEGACY_BSN, paramsList); Credential credential = spPrivateCredential();  NameID object = encryptionService.decryptValue(id, credential, entityDescriptor.getEntityID());  "<AssertPlaceHolder>"; assertEquals("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p", id.getEncryptedKeys().get(0).getEncryptionMethod().getAlgorithm()); assertEquals(BSN, object.getValue()); OpenSAMLUtils.logSAMLObject(object); }
decryptValue(EncryptedID encrypted, Credential credential, String entityId) throws DecryptionException { StaticKeyInfoCredentialResolver resolver = new StaticKeyInfoCredentialResolver(credential); Decrypter decrypter = new Decrypter(null, resolver, new EncryptedElementTypeEncryptedKeyResolver(entityId));  return (NameID) decrypter.decrypt(encrypted); }
[*] target: assertEquals(1, id.getEncryptedData().getKeyInfo().getKeyNames().size())
[-] pred:  org. junit. Assert. assertEquals ( id, object )

[*] target: assertEquals(1, id.getEncryptedData().getKeyInfo().getKeyNames().size())
[-] pred:  org. junit. Assert. assertEquals ( object, id )

[*] target: assertEquals(1, id.getEncryptedData().getKeyInfo().getKeyNames().size())
[-] pred:  org. junit. Assert. assertEquals ( id, object ; }

[*] target: assertEquals(1, id.getEncryptedData().getKeyInfo().getKeyNames().size())
[-] pred:  org. junit. Assert. assertEquals ( id, object

[*] target: assertEquals(1, id.getEncryptedData().getKeyInfo().getKeyNames().size())
[-] pred:  org

************************************
************************************
[+] input: EncryptionException { List<KeyEncryptionParameters> paramsList = new ArrayList<>(); paramsList.add(encryptionService.getEncryptionParams(entityDescriptor.getEntityID(), keyInfo())); EncryptedID id = encryptionService.encryptValue(BSN, AttributeTypes.LEGACY_BSN, paramsList); String recipient = id.getEncryptedKeys().get(0).getRecipient(); "<AssertPlaceHolder>"; }
encryptValue(String value, String attributeType, List<KeyEncryptionParameters> keyEncryptionParameters) throws EncryptionException { final DataEncryptionParameters dataEncryptionParameters = new DataEncryptionParameters(); dataEncryptionParameters.setAlgorithm(EncryptionConstants.ALGO_ID_BLOCKCIPHER_AES256);  if (keyEncryptionParameters.size() > 1) dataEncryptionParameters.setKeyInfoGenerator(generateKeyInfoName(null));  final NameID nameID = getNameID(value, attributeType); final Encrypter encrypter = new Encrypter(dataEncryptionParameters, keyEncryptionParameters); encrypter.setKeyPlacement(Encrypter.KeyPlacement.PEER);  return encrypter.encrypt(nameID); }
[*] target: assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", recipient)
[-] pred:  org. junit. Assert. assertNull ( recipient )

[*] target: assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", recipient)
[-] pred:  org. junit. Assert. assertNotNull ( recipient )

[*] target: assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", recipient)
[-] pred:  org. junit. Assert. assertEquals ( """", recipient )

[*] target: assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", recipient)
[-] pred:  org. junit. Assert. assertEquals ( ""1"", recipient )

[*] target: assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", recipient)
[-] pred:  org. junit. Assert. assertEquals ( msg, recipient )

************************************
************************************
[+] input: parseLogoutRequestWrongVersion() { httpRequestMock.setParameter("SAMLRequestxception exception = "<AssertPlaceHolder>"; assertEquals("LogoutRequest validation error", exception.getMessage()); }
parseLogoutRequest(HttpServletRequest request) throws SamlValidationException, SamlParseException, SamlSessionException, DienstencatalogusException {  final LogoutRequestModel logoutRequestModel = new LogoutRequestModel();  try { final BaseHttpServletRequestXMLMessageDecoder decoder = decodeRequest(request); var logoutRequest = (LogoutRequest) decoder.getMessageContext().getMessage();  final SAMLBindingContext bindingContext = decoder.getMessageContext().getSubcontext(SAMLBindingContext.class); logoutRequestModel.setLogoutRequest(logoutRequest); logoutRequestModel.setRequest(request);  validateRequest(logoutRequestModel);  var id = logoutRequest.getNameID() != null ? logoutRequest.getNameID().getValue() : logoutRequest.getSessionIndexes().get(0).getValue();  var samlSession = samlSessionRepository.findById(id) .orElseThrow(() -> new SamlSessionException("LogoutRequest no saml session found for nameID: " + id));  logoutRequestModel.setConnectionEntityId(samlSession.getConnectionEntityId()); logoutRequestModel.setServiceEntityId(samlSession.getServiceEntityId()); logoutRequestModel.setServiceUuid(samlSession.getServiceUuid()); logoutRequestModel.setRelayState(bindingContext.getRelayState()); logoutRequestModel.setEntranceSession(samlSession.getProtocolType().equals(ProtocolType.SAML_COMBICONNECT));  dcMetadataService.resolveDcMetadata(logoutRequestModel); if (!logoutRequestModel.getConnectionEntityId().equals(logoutRequestModel.getLogoutRequest().getIssuer().getValue())) { throw new SamlValidationException("Issuer not equal to connectorEntityId"); }  verifySignature(logoutRequestModel, logoutRequestModel.getLogoutRequest().getSignature());  logout(samlSession);  if (logger.isDebugEnabled()) OpenSAMLUtils.logSAMLObject((LogoutRequest) decoder.getMessageContext().getMessage());  } catch (MessageDecodingException e) { throw new SamlParseException("Authentication deflate decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("Authentication deflate initialization exception", e); }  return logoutRequestModel; }
[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( n ) - 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( java. lang. Long ) ( 1L ) ), java. lang. Long. valueOf ( end ) )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. size ( ) ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( java. util. List < java. lang. String > ) ( n ) ), new java. util. ArrayList ( results ) )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( java. util. List < java. lang. String > ) ( null ) ), new java. util. ArrayList ( results ) )

************************************
************************************
[+] input: parseLogoutRequestNoIssueInstant() { httpRequestMock.setParameter("SAMLRequestxception exception = "<AssertPlaceHolder>"; assertEquals("LogoutRequest validation error", exception.getMessage()); }
parseLogoutRequest(HttpServletRequest request) throws SamlValidationException, SamlParseException, SamlSessionException, DienstencatalogusException {  final LogoutRequestModel logoutRequestModel = new LogoutRequestModel();  try { final BaseHttpServletRequestXMLMessageDecoder decoder = decodeRequest(request); var logoutRequest = (LogoutRequest) decoder.getMessageContext().getMessage();  final SAMLBindingContext bindingContext = decoder.getMessageContext().getSubcontext(SAMLBindingContext.class); logoutRequestModel.setLogoutRequest(logoutRequest); logoutRequestModel.setRequest(request);  validateRequest(logoutRequestModel);  var id = logoutRequest.getNameID() != null ? logoutRequest.getNameID().getValue() : logoutRequest.getSessionIndexes().get(0).getValue();  var samlSession = samlSessionRepository.findById(id) .orElseThrow(() -> new SamlSessionException("LogoutRequest no saml session found for nameID: " + id));  logoutRequestModel.setConnectionEntityId(samlSession.getConnectionEntityId()); logoutRequestModel.setServiceEntityId(samlSession.getServiceEntityId()); logoutRequestModel.setServiceUuid(samlSession.getServiceUuid()); logoutRequestModel.setRelayState(bindingContext.getRelayState()); logoutRequestModel.setEntranceSession(samlSession.getProtocolType().equals(ProtocolType.SAML_COMBICONNECT));  dcMetadataService.resolveDcMetadata(logoutRequestModel); if (!logoutRequestModel.getConnectionEntityId().equals(logoutRequestModel.getLogoutRequest().getIssuer().getValue())) { throw new SamlValidationException("Issuer not equal to connectorEntityId"); }  verifySignature(logoutRequestModel, logoutRequestModel.getLogoutRequest().getSignature());  logout(samlSession);  if (logger.isDebugEnabled()) OpenSAMLUtils.logSAMLObject((LogoutRequest) decoder.getMessageContext().getMessage());  } catch (MessageDecodingException e) { throw new SamlParseException("Authentication deflate decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("Authentication deflate initialization exception", e); }  return logoutRequestModel; }
[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. size ( ) ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( n ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( httpRequestMock.setParameter ( n ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter p1. start ( ) ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( input, n )

************************************
************************************
[+] input: parseLogoutRequestNoNameID() { httpRequestMock.setParameter("SAMLRequestxception exception = "<AssertPlaceHolder>"; assertEquals("LogoutRequest validation error", exception.getMessage()); }
parseLogoutRequest(HttpServletRequest request) throws SamlValidationException, SamlParseException, SamlSessionException, DienstencatalogusException {  final LogoutRequestModel logoutRequestModel = new LogoutRequestModel();  try { final BaseHttpServletRequestXMLMessageDecoder decoder = decodeRequest(request); var logoutRequest = (LogoutRequest) decoder.getMessageContext().getMessage();  final SAMLBindingContext bindingContext = decoder.getMessageContext().getSubcontext(SAMLBindingContext.class); logoutRequestModel.setLogoutRequest(logoutRequest); logoutRequestModel.setRequest(request);  validateRequest(logoutRequestModel);  var id = logoutRequest.getNameID() != null ? logoutRequest.getNameID().getValue() : logoutRequest.getSessionIndexes().get(0).getValue();  var samlSession = samlSessionRepository.findById(id) .orElseThrow(() -> new SamlSessionException("LogoutRequest no saml session found for nameID: " + id));  logoutRequestModel.setConnectionEntityId(samlSession.getConnectionEntityId()); logoutRequestModel.setServiceEntityId(samlSession.getServiceEntityId()); logoutRequestModel.setServiceUuid(samlSession.getServiceUuid()); logoutRequestModel.setRelayState(bindingContext.getRelayState()); logoutRequestModel.setEntranceSession(samlSession.getProtocolType().equals(ProtocolType.SAML_COMBICONNECT));  dcMetadataService.resolveDcMetadata(logoutRequestModel); if (!logoutRequestModel.getConnectionEntityId().equals(logoutRequestModel.getLogoutRequest().getIssuer().getValue())) { throw new SamlValidationException("Issuer not equal to connectorEntityId"); }  verifySignature(logoutRequestModel, logoutRequestModel.getLogoutRequest().getSignature());  logout(samlSession);  if (logger.isDebugEnabled()) OpenSAMLUtils.logSAMLObject((LogoutRequest) decoder.getMessageContext().getMessage());  } catch (MessageDecodingException e) { throw new SamlParseException("Authentication deflate decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("Authentication deflate initialization exception", e); }  return logoutRequestModel; }
[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. size ( ) ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. get ( 0 ) ) + ( n ) ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( n ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. n ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. n ) + ( n ) ), n )

************************************
************************************
[+] input: parseLogoutRequestNoNameIDValue() { httpRequestMock.setParameter("SAMLRequestxception exception = "<AssertPlaceHolder>"; assertEquals("LogoutRequest validation error", exception.getMessage()); }
parseLogoutRequest(HttpServletRequest request) throws SamlValidationException, SamlParseException, SamlSessionException, DienstencatalogusException {  final LogoutRequestModel logoutRequestModel = new LogoutRequestModel();  try { final BaseHttpServletRequestXMLMessageDecoder decoder = decodeRequest(request); var logoutRequest = (LogoutRequest) decoder.getMessageContext().getMessage();  final SAMLBindingContext bindingContext = decoder.getMessageContext().getSubcontext(SAMLBindingContext.class); logoutRequestModel.setLogoutRequest(logoutRequest); logoutRequestModel.setRequest(request);  validateRequest(logoutRequestModel);  var id = logoutRequest.getNameID() != null ? logoutRequest.getNameID().getValue() : logoutRequest.getSessionIndexes().get(0).getValue();  var samlSession = samlSessionRepository.findById(id) .orElseThrow(() -> new SamlSessionException("LogoutRequest no saml session found for nameID: " + id));  logoutRequestModel.setConnectionEntityId(samlSession.getConnectionEntityId()); logoutRequestModel.setServiceEntityId(samlSession.getServiceEntityId()); logoutRequestModel.setServiceUuid(samlSession.getServiceUuid()); logoutRequestModel.setRelayState(bindingContext.getRelayState()); logoutRequestModel.setEntranceSession(samlSession.getProtocolType().equals(ProtocolType.SAML_COMBICONNECT));  dcMetadataService.resolveDcMetadata(logoutRequestModel); if (!logoutRequestModel.getConnectionEntityId().equals(logoutRequestModel.getLogoutRequest().getIssuer().getValue())) { throw new SamlValidationException("Issuer not equal to connectorEntityId"); }  verifySignature(logoutRequestModel, logoutRequestModel.getLogoutRequest().getSignature());  logout(samlSession);  if (logger.isDebugEnabled()) OpenSAMLUtils.logSAMLObject((LogoutRequest) decoder.getMessageContext().getMessage());  } catch (MessageDecodingException e) { throw new SamlParseException("Authentication deflate decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("Authentication deflate initialization exception", e); }  return logoutRequestModel; }
[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. size ( ) ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. n ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( n ) + 1 ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( ( ( requestMock.setParameter. get ( 0 ) ) == null ), n )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( input, return value )

************************************
************************************
[+] input: parseLogoutRequestNoSignature() { httpRequestMock.setParameter("SAMLRequest", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");  Exception exception = "<AssertPlaceHolder>"; assertEquals("LogoutRequest validation error", exception.getMessage()); }
parseLogoutRequest(HttpServletRequest request) throws SamlValidationException, SamlParseException, SamlSessionException, DienstencatalogusException {  final LogoutRequestModel logoutRequestModel = new LogoutRequestModel();  try { final BaseHttpServletRequestXMLMessageDecoder decoder = decodeRequest(request); var logoutRequest = (LogoutRequest) decoder.getMessageContext().getMessage();  final SAMLBindingContext bindingContext = decoder.getMessageContext().getSubcontext(SAMLBindingContext.class); logoutRequestModel.setLogoutRequest(logoutRequest); logoutRequestModel.setRequest(request);  validateRequest(logoutRequestModel);  var id = logoutRequest.getNameID() != null ? logoutRequest.getNameID().getValue() : logoutRequest.getSessionIndexes().get(0).getValue();  var samlSession = samlSessionRepository.findById(id) .orElseThrow(() -> new SamlSessionException("LogoutRequest no saml session found for nameID: " + id));  logoutRequestModel.setConnectionEntityId(samlSession.getConnectionEntityId()); logoutRequestModel.setServiceEntityId(samlSession.getServiceEntityId()); logoutRequestModel.setServiceUuid(samlSession.getServiceUuid()); logoutRequestModel.setRelayState(bindingContext.getRelayState()); logoutRequestModel.setEntranceSession(samlSession.getProtocolType().equals(ProtocolType.SAML_COMBICONNECT));  dcMetadataService.resolveDcMetadata(logoutRequestModel); if (!logoutRequestModel.getConnectionEntityId().equals(logoutRequestModel.getLogoutRequest().getIssuer().getValue())) { throw new SamlValidationException("Issuer not equal to connectorEntityId"); }  verifySignature(logoutRequestModel, logoutRequestModel.getLogoutRequest().getSignature());  logout(samlSession);  if (logger.isDebugEnabled()) OpenSAMLUtils.logSAMLObject((LogoutRequest) decoder.getMessageContext().getMessage());  } catch (MessageDecodingException e) { throw new SamlParseException("Authentication deflate decode exception", e); } catch (ComponentInitializationException e) { throw new SamlParseException("Authentication deflate initialization exception", e); }  return logoutRequestModel; }
[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( new SamlSessionIOException ( 1, 2 ), new atSession end )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( new SamlSessionIOException ( 1, 2 ), event. getMessage ( ) )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( at, new SamlSessionIOException ( 1 ). parseLogoutRequest ( ) )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( at, new at. end ( ) )

[*] target: assertThrows(SamlValidationException.class, () -> logoutService.parseLogoutRequest(httpRequestMock))
[-] pred:  org. junit. Assert. assertEquals ( new SamlSessionIOException ( 1, 2 ), new atSession stopped

************************************
************************************
[+] input: DienstencatalogusException { when(dienstencatalogusClientMock.retrieveMetadataFromDc(any(SamlRequest.class))).thenReturn(stubDcResponse()); SamlRequest request = new AuthenticationRequest(); request.setConnectionEntityId(CONNECTION_ENTITY_ID); request.setServiceEntityId("someNonExistingEntityId");  dcMetadataService.resolveDcMetadata(request);  "<AssertPlaceHolder>"; assertNull(request.getServiceEntity()); }
resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {  final DcMetadataResponse metadataFromDc = dienstencatalogusClient.retrieveMetadataFromDc(samlRequest);  if (samlRequest instanceof AuthenticationRequest) { dcMetadataResponseMapper.dcMetadataToAuthenticationRequest((AuthenticationRequest) samlRequest, metadataFromDc, samlRequest.getServiceEntityId()); } else { dcMetadataResponseMapper.dcMetadataToSamlRequest(samlRequest, metadataFromDc); } }
[*] target: assertNotNull(request.getConnectionEntity())
[-] pred:  org. junit. Assert. assertThat ( dcMetadataResponseMapper. resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {

[*] target: assertNotNull(request.getConnectionEntity())
[-] pred:  org. junit. Assert. assertTrue ( dcMetadataResponseMapper. resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException )

[*] target: assertNotNull(request.getConnectionEntity())
[-] pred:  org. junit. Assert. assertThat ( dcMetadataResponseMapper. resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException { }

[*] target: assertNotNull(request.getConnectionEntity())
[-] pred:  _5_5 )

[*] target: assertNotNull(request.getConnectionEntity())
[-] pred:  )

************************************
************************************
[+] input: DienstencatalogusException { when(dienstencatalogusClientMock.retrieveMetadataFromDc(any(SamlRequest.class))).thenReturn(stubDcResponse()); SamlRequest request = new AuthenticationRequest(); request.setConnectionEntityId(CONNECTION_ENTITY_ID); request.setServiceEntityId(SERVICE_ENTITY_ID);  dcMetadataService.resolveDcMetadata(request);  "<AssertPlaceHolder>"; assertEquals(1, request.getLegacyWebserviceId()); assertEquals(10, ((AuthenticationRequest) request).getMinimumRequestedAuthLevel()); assertEquals("serviceUUID", request.getServiceUuid()); assertEquals("permissionQuestion", request.getPermissionQuestion()); assertEquals(true, ((AuthenticationRequest) request).getAppActive()); assertEquals("appReturnUrl", ((AuthenticationRequest) request).getAppReturnUrl()); assertEquals("serviceName", ((AuthenticationRequest) request).getServiceName()); assertEquals("urn:nl-eid-gdi:1:0:entities:00000009999999999001", ((AuthenticationRequest) request).getEntityId()); assertEquals(10, ((AuthenticationRequest) request).getMinimumRequestedAuthLevel()); assertEquals("BSN", ((AuthenticationRequest) request).getEncryptionIdType()); assertNotNull(request.getConnectionEntity()); assertNotNull(request.getServiceEntity()); }
resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {  final DcMetadataResponse metadataFromDc = dienstencatalogusClient.retrieveMetadataFromDc(samlRequest);  if (samlRequest instanceof AuthenticationRequest) { dcMetadataResponseMapper.dcMetadataToAuthenticationRequest((AuthenticationRequest) samlRequest, metadataFromDc, samlRequest.getServiceEntityId()); } else { dcMetadataResponseMapper.dcMetadataToSamlRequest(samlRequest, metadataFromDc); } }
[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertThat ( at, org. hamcrest. CoreMatchers. is ( 20 ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertThat ( true, org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertThat ( at, org. hamcrest. CoreMatchers. is ( 200 ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertThat ( returning returning to the feed )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org

************************************
************************************
[+] input: DienstencatalogusException { when(dienstencatalogusClientMock.retrieveMetadataFromDc(any(SamlRequest.class))).thenReturn(stubDcResponse()); SamlRequest request = new ArtifactResolveRequest(); request.setConnectionEntityId(CONNECTION_ENTITY_ID); request.setServiceEntityId(SERVICE_ENTITY_ID);  dcMetadataService.resolveDcMetadata(request);  "<AssertPlaceHolder>"; assertEquals(1, request.getLegacyWebserviceId()); assertEquals("serviceUUID", request.getServiceUuid()); assertEquals("permissionQuestion", request.getPermissionQuestion()); assertNotNull(request.getConnectionEntity()); assertNotNull(request.getServiceEntity()); }
resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {  final DcMetadataResponse metadataFromDc = dienstencatalogusClient.retrieveMetadataFromDc(samlRequest);  if (samlRequest instanceof AuthenticationRequest) { dcMetadataResponseMapper.dcMetadataToAuthenticationRequest((AuthenticationRequest) samlRequest, metadataFromDc, samlRequest.getServiceEntityId()); } else { dcMetadataResponseMapper.dcMetadataToSamlRequest(samlRequest, metadataFromDc); } }
[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertEquals (1,, request. resolveDcMetadataToAuthenticationRequest ( ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 1, request. resolveDcMetadata ( ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertEquals (1,, request. getLegacyContainsId());. size ( ) )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertEquals (1,, request. resolveDcMetadataToAuthenticationRequest()); )

[*] target: assertEquals("federation1", request.getFederationName())
[-] pred:  org. junit. Assert. assertEquals (1,, request.getLegacyContainsId());. isEmpty ( ) )

************************************
************************************
[+] input: DienstencatalogusException { when(dienstencatalogusClientMock.retrieveMetadataFromDc(any(SamlRequest.class))).thenReturn(null); SamlRequest request = new AuthenticationRequest(); request.setConnectionEntityId(CONNECTION_ENTITY_ID); request.setServiceEntityId(SERVICE_ENTITY_ID);  try { dcMetadataService.resolveDcMetadata(request); } catch (DienstencatalogusException e) { "<AssertPlaceHolder>"; } }
resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {  final DcMetadataResponse metadataFromDc = dienstencatalogusClient.retrieveMetadataFromDc(samlRequest);  if (samlRequest instanceof AuthenticationRequest) { dcMetadataResponseMapper.dcMetadataToAuthenticationRequest((AuthenticationRequest) samlRequest, metadataFromDc, samlRequest.getServiceEntityId()); } else { dcMetadataResponseMapper.dcMetadataToSamlRequest(samlRequest, metadataFromDc); } }
[*] target: assertEquals("Unknown status from digid_dc", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( false )

[*] target: assertEquals("Unknown status from digid_dc", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( true )

[*] target: assertEquals("Unknown status from digid_dc", e.getMessage())
[-] pred:  org. junit. Assert. assertThat ( e. getMessage ( ), org. hamcrest. CoreMatchers. is ( metadata ) )

[*] target: assertEquals("Unknown status from digid_dc", e.getMessage())
[-] pred:  org. junit. Assert. assertThat ( e. getMessage ( ), org. hamcrest. Matchers. is ( metadata ) )

[*] target: assertEquals("Unknown status from digid_dc", e.getMessage())
[-] pred:  org

************************************
************************************
[+] input: DienstencatalogusException { DcMetadataResponse dcMetadataResponse = dcClientStubGetMetadata(stubsCaMetadataFile, null, 1L); dcMetadataResponse.setMinimumReliabilityLevel(null); when(dienstencatalogusClientMock.retrieveMetadataFromDc(any(SamlRequest.class))).thenReturn(dcMetadataResponse); SamlRequest request = new AuthenticationRequest(); request.setConnectionEntityId(CONNECTION_ENTITY_ID); request.setServiceEntityId(SERVICE_ENTITY_ID);  try { dcMetadataService.resolveDcMetadata(request); } catch (DienstencatalogusException e) { "<AssertPlaceHolder>"; } }
resolveDcMetadata(SamlRequest samlRequest) throws DienstencatalogusException {  final DcMetadataResponse metadataFromDc = dienstencatalogusClient.retrieveMetadataFromDc(samlRequest);  if (samlRequest instanceof AuthenticationRequest) { dcMetadataResponseMapper.dcMetadataToAuthenticationRequest((AuthenticationRequest) samlRequest, metadataFromDc, samlRequest.getServiceEntityId()); } else { dcMetadataResponseMapper.dcMetadataToSamlRequest(samlRequest, metadataFromDc); } }
[*] target: assertEquals("Metadata from dc minimum reliability level not set", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( false )

[*] target: assertEquals("Metadata from dc minimum reliability level not set", e.getMessage())
[-] pred:  org. junit. Assert. assertThat ( dcMetadataResponse, org. hamcrest. CoreMatchers. is ( dcMetadataResponse ) )

[*] target: assertEquals("Metadata from dc minimum reliability level not set", e.getMessage())
[-] pred:  org. junit. Assert. assertThat ( dcMetadataResponse, org. hamcrest. Matchers. is ( dcMetadataResponse ) )

[*] target: assertEquals("Metadata from dc minimum reliability level not set", e.getMessage())
[-] pred:  org. junit. Assert. assertEquals ( dcMetadataResponse, e )

[*] target: assertEquals("Metadata from dc minimum reliability level not set", e.getMessage())
[-] pred:  org. junit. Assert. assertTrue ( true )

************************************
************************************
[+] input: MetadataException { String idpMetadata = "idpMetadata"; when(idpMetadataServiceMock.getMetadata()).thenReturn(idpMetadata);  String result = metadataControllerMock.metadata();  "<AssertPlaceHolder>"; assertEquals(idpMetadata, result); verify(idpMetadataServiceMock, times(1)).getMetadata(); }
metadata() throws MetadataException { logger.debug("Receive SAML metadata request!"); return idpMetadataService.getMetadata(); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( idpMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( idpsMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( idspMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( idpMetadata )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

************************************
************************************
[+] input: MetadataException { String bvdMetadata = "bvdMetadata"; when(bvdMetadataServiceMock.getMetadata()).thenReturn(bvdMetadata);  String result = metadataControllerMock.bvdMetadata();  "<AssertPlaceHolder>"; assertEquals(bvdMetadata, result); verify(bvdMetadataServiceMock, times(1)).getMetadata(); }
bvdMetadata() throws MetadataException { logger.debug("Receive BVD metadata request!"); return bvdMetadataService.getMetadata(); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( bvdMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( bvdMetadata, result. msg )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( bvdMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  retrieves the bvdMetadata information from the database

[*] target: assertNotNull(result)
[-] pred:  retrieves the bvdMetadata from the database

************************************
************************************
[+] input: MetadataException { String entranceMetadata = "entranceMetadata"; when(entranceMetadataServiceMock.getMetadata()).thenReturn(entranceMetadata);  String result = metadataControllerMock.entranceMetadata();  "<AssertPlaceHolder>"; assertEquals(entranceMetadata, result); verify(entranceMetadataServiceMock, times(1)).getMetadata(); }
entranceMetadata() throws MetadataException { logger.debug("Receive service metadata request!"); return entranceMetadataService.getMetadata(); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( entranceMetadata, result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( entranceMetadata )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( entranceMetadata : result )

[*] target: assertNotNull(result)
[-] pred:  retrieves the entranceMetadata servicedescription from the database

[*] target: assertNotNull(result)
[-] pred:  retrieves the entranceMetadata from the database

************************************
************************************
[+] input: SharedServiceClientException { FederationSession federationSession = new FederationSession(600); federationSession.setAuthLevel(10); authenticationRequest.setMinimumRequestedAuthLevel(10); authenticationRequest.setFederationName("federationName"); Optional<FederationSession> optionalFederationSession = Optional.of(federationSession); when(federationSessionRepositoryMock.findByHttpSessionIdAndFederationName(anyString(), anyString())).thenReturn(optionalFederationSession); when(sharedServiceClientMock.getSSConfigLong(anyString())).thenReturn(10L);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; assertEquals(10, authenticationRequest.getSsoAuthLevel()); }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertTrue(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( 10, optionalFederationSession. getFederationSession ( ) )

[*] target: assertTrue(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( 20, optionalFederationSession. getFederationSession ( ). size ( ) )

[*] target: assertTrue(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( 10, optionalFederationSession. optionalFederationSession ( ) )

[*] target: assertTrue(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( 10, optionalFederationSession. optionalFederationSession ( ). get ( ) )

[*] target: assertTrue(authenticationRequest.isValidSsoSession())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { authnRequest.setForceAuthn(TRUE); authenticationRequest.setAuthnRequest(authnRequest);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( true, samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( true, samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( true, samlSessionService. initializeSession(authenticationRequest, httpSessionId ) )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( true, samlSessionService. initializeSession(authenticationRequest, httpSessionId ) )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { FederationSession federationSession = new FederationSession(600); federationSession.setAuthLevel(10); authenticationRequest.setMinimumRequestedAuthLevel(20); authenticationRequest.setFederationName("federationName"); Optional<FederationSession> optionalFederationSession = Optional.of(federationSession);  when(federationSessionRepositoryMock.findByHttpSessionIdAndFederationName(anyString(), anyString())).thenReturn(optionalFederationSession); when(sharedServiceClientMock.getSSConfigLong(anyString())).thenReturn(10L);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession. optionalFederationSession ( ) )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession. optionalFederationSession )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertEquals ( 10, optionalFederationSession. optionalFederationSession )

[*] target: assertFalse(authenticationRequest.isValidSsoSession())
[-] pred:  org. junit. Assert. assertNotNull ( federationSession )

************************************
************************************
[+] input: SharedServiceClientException { authenticationRequest.setProtocolType(SAML_COMBICONNECT); authenticationRequest.setFederationName(null); samlSessionService.initializeSession(authenticationRequest, bindingContext); "<AssertPlaceHolder>"; assertEquals(SAML_COMBICONNECT, authenticationRequest.getSamlSession().getProtocolType()); }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService.getSamlSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService.getSamlSession (authenticationRequest ). size ( ) )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService. initializeSession(authenticationRequest, httpSessionId ). size ( ) )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { authenticationRequest.setFederationName(null); samlSessionService.initializeSession(authenticationRequest, bindingContext); "<AssertPlaceHolder>"; assertEquals(SAML_ROUTERINGSDIENST, authenticationRequest.getSamlSession().getProtocolType()); }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( 0, samlSessionService.getgetFederationFederationSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( null, samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org. junit. Assert. assertEquals ( new TYPE_1 ( ), samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertNull(authenticationRequest.getSamlSession().getFederationName())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { SamlSession samlSession = new SamlSession(600); samlSession.setServiceEntityId("serviceEntityIdFromSAML"); Optional<SamlSession> samlSessionFromDatabase = Optional.of(samlSession);  when(samlSessionRepositoryMock.findByHttpSessionIdAndServiceEntityId(anyString(), anyString())).thenReturn(samlSessionFromDatabase);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertEquals("serviceEntityIdFromSAML", authenticationRequest.getSamlSession().getServiceEntityId())
[-] pred:  org. junit. Assert. assertNotNull ( samlSession )

[*] target: assertEquals("serviceEntityIdFromSAML", authenticationRequest.getSamlSession().getServiceEntityId())
[-] pred:  org. junit. Assert. assertNotNull ( samlSession. samlSessionFromDatabase )

[*] target: assertEquals("serviceEntityIdFromSAML", authenticationRequest.getSamlSession().getServiceEntityId())
[-] pred:  org. junit. Assert. assertSame ( samlSession, samlSessionFromDatabase )

[*] target: assertEquals("serviceEntityIdFromSAML", authenticationRequest.getSamlSession().getServiceEntityId())
[-] pred:  org. junit. Assert. assertNotNull ( samlSession. initializeSessionFromDatabase )

[*] target: assertEquals("serviceEntityIdFromSAML", authenticationRequest.getSamlSession().getServiceEntityId())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertEquals("https://sso.afnemer.nl", authenticationRequest.getSamlSession().getAssertionConsumerServiceURL())
[-] pred:  org. junit. Assert. assertNotNull ( samlSessionService. initializeSession(authenticationRequest, httpSessionId, bindingContext); )

[*] target: assertEquals("https://sso.afnemer.nl", authenticationRequest.getSamlSession().getAssertionConsumerServiceURL())
[-] pred:  org. junit. Assert. assertNotNull ( samlSessionService. initializeSession(authenticationRequest, httpSessionId )

[*] target: assertEquals("https://sso.afnemer.nl", authenticationRequest.getSamlSession().getAssertionConsumerServiceURL())
[-] pred:  org. junit. Assert. assertNotNull ( samlSessionService. initializeSession( authenticationRequest, httpSessionId, bindingContext); )

[*] target: assertEquals("https://sso.afnemer.nl", authenticationRequest.getSamlSession().getAssertionConsumerServiceURL())
[-] pred:  org. junit. Assert. assertNotNull ( samlSessionService. initializeSession(AuthenticationRequest authenticationRequest, httpSessionId )

[*] target: assertEquals("https://sso.afnemer.nl", authenticationRequest.getSamlSession().getAssertionConsumerServiceURL())
[-] pred:  org. junit. Assert. assertNotNull ( samlSessionService. initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext context )

************************************
************************************
[+] input: SharedServiceClientException { FederationSession federationSession = new FederationSession(600); federationSession.setAuthLevel(25); authenticationRequest.setMinimumRequestedAuthLevel(25); authenticationRequest.setFederationName("federationName"); Optional<FederationSession> optionalFederationSession = Optional.of(federationSession);  when(federationSessionRepositoryMock.findByHttpSessionIdAndFederationName(anyString(), anyString())).thenReturn(optionalFederationSession); when(sharedServiceClientMock.getSSConfigLong(anyString())).thenReturn(10L);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertTrue(authenticationRequest.getAuthnRequest().isForceAuthn())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession )

[*] target: assertTrue(authenticationRequest.getAuthnRequest().isForceAuthn())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession. optionalFederationSession ( ) )

[*] target: assertTrue(authenticationRequest.getAuthnRequest().isForceAuthn())
[-] pred:  org. junit. Assert. assertNotNull ( optionalFederationSession. optionalFederationSession )

[*] target: assertTrue(authenticationRequest.getAuthnRequest().isForceAuthn())
[-] pred:  org. junit. Assert. assertEquals ( 10, optionalFederationSession. optionalFederationSession )

[*] target: assertTrue(authenticationRequest.getAuthnRequest().isForceAuthn())
[-] pred:  org. junit. Assert. assertNotNull ( federationSession )

************************************
************************************
[+] input: SamlSessionException { SamlSession samlSession = new SamlSession(1L); samlSession.setServiceUuid("serviceUuid"); Optional<SamlSession> optionalSamlSession = Optional.of(samlSession);  when(samlSessionRepositoryMock.findByArtifact(anyString())).thenReturn(optionalSamlSession);  SamlSession result = samlSessionService.findSamlSessionByArtifact("artifact");  verify(samlSessionRepositoryMock, times(1)).findByArtifact(anyString()); "<AssertPlaceHolder>"; }
findSamlSessionByArtifact(String artifact) throws SamlSessionException { Optional<SamlSession> optionalSamlSession = samlSessionRepository.findByArtifact(artifact); if (optionalSamlSession.isEmpty()) throw new SamlSessionException("Saml session not found by artifact"); return optionalSamlSession.get(); }
[*] target: assertEquals(result.getServiceUuid(), samlSession.getServiceUuid())
[-] pred:  org. junit. Assert. assertEquals ( optionalSamlSession, result )

[*] target: assertEquals(result.getServiceUuid(), samlSession.getServiceUuid())
[-] pred:  org. junit. Assert. assertEquals ( nonSamlSession, result )

[*] target: assertEquals(result.getServiceUuid(), samlSession.getServiceUuid())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals(result.getServiceUuid(), samlSession.getServiceUuid())
[-] pred:  org. junit. Assert. assertEquals ( latitude, result )

[*] target: assertEquals(result.getServiceUuid(), samlSession.getServiceUuid())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { IDPList idpList = OpenSAMLUtils.buildSAMLObject(IDPList.class); IDPEntry idpEntry = OpenSAMLUtils.buildSAMLObject(IDPEntry.class); idpEntry.setProviderID("OtherIdP");  Scoping scoping = OpenSAMLUtils.buildSAMLObject(Scoping.class); scoping.setIDPList(idpList);  authnRequest.setScoping(scoping); authnRequest.getScoping().getIDPList().getIDPEntrys().add(idpEntry); samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; assertEquals(authenticationRequest.getSamlSession().getValidationStatus(), STATUS_INVALID.label); }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertNull(authenticationRequest.getSamlSession().getIdpEntries())
[-] pred:  org. junit. Assert. assertNotNull ( idpEntry )

[*] target: assertNull(authenticationRequest.getSamlSession().getIdpEntries())
[-] pred:  org. junit. Assert. assertEquals ( idpEntry, idpEntry )

[*] target: assertNull(authenticationRequest.getSamlSession().getIdpEntries())
[-] pred:  org. junit. Assert. assertTrue ( isGOK ( idpEntry ) )

[*] target: assertNull(authenticationRequest.getSamlSession().getIdpEntries())
[-] pred:  org. junit. Assert. assertEquals ( idpEntry, idpList )

[*] target: assertNull(authenticationRequest.getSamlSession().getIdpEntries())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { RequesterID requesterID = OpenSAMLUtils.buildSAMLObject(RequesterID.class); requesterID.setRequesterID("requesterId");  Scoping scoping = OpenSAMLUtils.buildSAMLObject(Scoping.class); scoping.getRequesterIDs().add(requesterID);  authnRequest.setScoping(scoping); samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertNotNull ( requesterID )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertNotNull ( scoping )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertTrue ( ( requesterID == requesterID ) )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertNotNull ( geoping )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { authnRequest.setScoping(null);  samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( 1, 0 )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( 0, 0 )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( 1, isGG )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( 1, nu. getGing mode )

[*] target: assertNull(authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org

************************************
************************************
[+] input: SharedServiceClientException { RequesterID requesterID = OpenSAMLUtils.buildSAMLObject(RequesterID.class); requesterID.setRequesterID("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000");  Scoping scoping = OpenSAMLUtils.buildSAMLObject(Scoping.class); scoping.getRequesterIDs().add(requesterID);  authnRequest.setScoping(scoping); samlSessionService.initializeSession(authenticationRequest, bindingContext);  "<AssertPlaceHolder>"; }
initializeSession(AuthenticationRequest authenticationRequest, SAMLBindingContext bindingContext) throws SamlSessionException, SharedServiceClientException { final String httpSessionId = authenticationRequest.getRequest().getSession().getId();  if (authenticationRequest.getFederationName() != null) { findOrInitializeFederationSession(authenticationRequest, httpSessionId); }  findOrInitializeSamlSession(authenticationRequest, httpSessionId, bindingContext); }
[*] target: assertEquals("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000", authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertNotNull ( Scoping )

[*] target: assertEquals("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000", authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( Scoping, scoping )

[*] target: assertEquals("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000", authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( Scoped, scoping )

[*] target: assertEquals("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000", authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertNotNull ( scoping )

[*] target: assertEquals("urn:nl-eid-gdi:1.0:BVD:00000004003214345001:entities:9000", authenticationRequest.getSamlSession().getRequesterId())
[-] pred:  org. junit. Assert. assertEquals ( requesterID, scoping

************************************
************************************
[+] input: UnsupportedEncodingException { SamlSession samlSession = new SamlSession(1L); samlSession.setHttpSessionId("httpSessionId"); samlSession.setServiceEntityId("serviceEntityId"); samlSession.setServiceUuid("serviceUuid"); samlSession.setTransactionId("transactionId");  adSession.setBsn("bsn"); adSession.setAuthenticationLevel(10);  when(adServiceMock.getAdSession(anyString())).thenReturn(adSession); when(samlSessionServiceMock.findSamlSessionByArtifact(anyString())).thenReturn(samlSession);  RedirectView result = sessionController.startBvdSession("SAMLArtifact");  "<AssertPlaceHolder>"; verify(samlSessionServiceMock, times(1)).findSamlSessionByArtifact(anyString()); verify(adServiceMock, times(1)).getAdSession(anyString()); verify(adServiceMock, times(1)).checkAuthenticationStatus(any(AdSession.class), any(SamlSession.class), anyString()); }
startBvdSession(@RequestParam(value = "SAMLart") String artifact) throws SamlSessionException, AdException, BvdException, UnsupportedEncodingException { SamlSession samlSession = samlSessionService.findSamlSessionByArtifact(artifact); AdSession adSession = adService.getAdSession(samlSession.getHttpSessionId()); return new RedirectView(adService.checkAuthenticationStatus(adSession, samlSession, artifact)); }
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, new SamlSession )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertSame ( result, this )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertNull ( result )

[*] target: assertNotNull(result)
[-] pred:  org

************************************
************************************
[+] input: testGetByIdSuccess() { Task config = new Task(); config.setName("test"); Optional<Task> opt = Optional.of(config); Mockito.when(repo.findById(1L)).thenReturn(opt); Task result = controller.getById(1L); "<AssertPlaceHolder>"; }
getById(@PathVariable("id") Long id) { Optional<Task> task = repository.findById(id); if (!task.isPresent()) { throw new TaskNotFoundException("Could not find task with id: " + id); } return task.get(); }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config = result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org

************************************
************************************
[+] input: testCreate() { Task create = new Task(); create.setName("test"); create.setCron("* * * * * *"); create.setApplication("digid_x"); create.setActive(true); Mockito.when(repo.saveAndFlush(any())).thenAnswer(i -> i.getArguments()[0]);   Task result = controller.create(create); "<AssertPlaceHolder>"; assertEquals("* * * * * *", result.getCron()); assertEquals("digid_x", result.getApplication()); assertEquals(true, result.getActive()); assertNotNull(result.getUpdatedAt());  Mockito.verify(applicationEventPublisher).publishEvent(any()); Mockito.verify(repo).saveAndFlush(create); Mockito.verifyNoMoreInteractions(repo,applicationEventPublisher); }
create(@RequestBody Task newTask) { newTask.setAuditDates(); Task savedTask = repository.saveAndFlush(newTask);  applicationEventPublisher.publishEvent(new TaskChangeEvent(this, savedTask, false)); return savedTask; }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( create, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( prepare, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( result, create )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( creates, result )

************************************
************************************
[+] input: testUpdate() { Task config = new Task(); config.setName("testing"); config.setCreatedAt(ZonedDateTime.now(ZoneOffset.UTC)); Optional<Task> opt = Optional.of(config); Mockito.when(repo.findById(1L)).thenReturn(opt);  Task updated = new Task(); updated.setId(1L); updated.setName("test"); updated.setCron("* * * * * *"); updated.setApplication("digid_x"); updated.setActive(true); Mockito.when(repo.saveAndFlush(any())).thenAnswer(i -> i.getArguments()[0]);   Task result = controller.update(1L, updated); "<AssertPlaceHolder>"; assertEquals("* * * * * *", result.getCron()); assertEquals("digid_x", result.getApplication()); assertEquals(true, result.getActive()); assertNotNull(result.getUpdatedAt());  Mockito.verify(applicationEventPublisher).publishEvent(any()); Mockito.verify(repo).findById(1L); Mockito.verify(repo).saveAndFlush(config); Mockito.verifyNoMoreInteractions(repo,applicationEventPublisher); }
update(@PathVariable("id") Long id, @RequestBody Task updatedTask) { Optional<Task> opt = repository.findById(id); if (!opt.isPresent()) { throw new TaskNotFoundException("Could not find task with id: " + id); } Task currentTask = opt.get(); currentTask.setName(updatedTask.getName()); currentTask.setCron(updatedTask.getCron()); currentTask.setApplication(updatedTask.getApplication()); currentTask.setActive(updatedTask.getActive()); currentTask.setAuditDates(); Task savedTask = repository.saveAndFlush(currentTask);  applicationEventPublisher.publishEvent(new TaskChangeEvent(this, savedTask, false)); return savedTask; }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( updated, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( result, updated )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( updated. state, result. state )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( update, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org

************************************
************************************
[+] input: tasksAreScheduledOnApplicationStart() { Task taskA = new Task(); taskA.setId(1l); taskA.setCron("0 0 * * * *"); Task taskB = new Task(); taskB.setId(2l); taskB.setCron("0 0 * * * *"); Task taskC = new Task(); taskC.setId(3l); taskC.setCron("0 0 * * * *"); when(repository.findByActiveTrue()).thenReturn(List.of(taskA, taskB, taskC));  service.contextRefreshedEvent();  verify(scheduler, times(3)).schedule(any(Runnable.class), any(CronTrigger.class)); "<AssertPlaceHolder>"; }
contextRefreshedEvent() { for (Task task : repository.findByActiveTrue()) { addTaskToScheduler(task.getId(), new SimpleTaskRunnable(task, clientFactory.getClientForApplication(task.getApplication())), task.getCron() ); } }
[*] target: assertEquals(3, ((Map<Long, ScheduledFuture<?>>) ReflectionTestUtils.getField(service, "jobsMap")).size())
[-] pred:  org. junit. Assert. assertNull ( service.contextRefreshedEvent(). contextRefreshedEvent() )

[*] target: assertEquals(3, ((Map<Long, ScheduledFuture<?>>) ReflectionTestUtils.getField(service, "jobsMap")).size())
[-] pred:  org. junit. Assert. assertNull ( service.contextRefreshedEvent(). contextRefreshedEvent ( ) )

[*] target: assertEquals(3, ((Map<Long, ScheduledFuture<?>>) ReflectionTestUtils.getField(service, "jobsMap")).size())
[-] pred:  org. junit. Assert. assertNotNull ( service.contextRefreshedEvent() )

[*] target: assertEquals(3, ((Map<Long, ScheduledFuture<?>>) ReflectionTestUtils.getField(service, "jobsMap")).size())
[-] pred:  org. junit. Assert. assertNull ( service.contextRefreshedEvent() )

[*] target: assertEquals(3, ((Map<Long, ScheduledFuture<?>>) ReflectionTestUtils.getField(service, "jobsMap")).size())
[-] pred:  org

************************************
************************************
[+] input: testgetByNameSuccess() { Configuration config = new Configuration(); config.setName("test"); Optional<Configuration> opt = Optional.of(config); Mockito.when(repo.findByName("test")).thenReturn(opt); Configuration result = controller.getByName("test"); "<AssertPlaceHolder>"; }
getByName(@PathVariable("name") String name) { Optional<Configuration> conf = repository.findByName(name); if (!conf.isPresent()) { throw new NotFoundException("Could not find configuration with name: " + name); } return conf.get(); }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertSame ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org

[*] target: assertEquals("test", result.getName())
[-] pred:  )

************************************
************************************
[+] input: testgetByIdSuccess() { Configuration config = new Configuration(); config.setName("test"); Optional<Configuration> opt = Optional.of(config); Mockito.when(repo.findById(1L)).thenReturn(opt); Configuration result = controller.getById(1L); "<AssertPlaceHolder>"; }
getById(@PathVariable("id") Long id) { Optional<Configuration> conf = repository.findById(id); if (!conf.isPresent()) { throw new NotFoundException("Could not find configuration with id: " + id); } return conf.get(); }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config and result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit, result )

************************************
************************************
[+] input: testUpdateAllfields() { Configuration config = new Configuration(); config.setName("testing"); config.setValue("testing"); config.setLabel("testing"); config.setDefaultValue("testing"); config.setPosition(2); config.setCreatedAt(ZonedDateTime.now(ZoneOffset.UTC)); Optional<Configuration> opt = Optional.of(config); Mockito.when(repo.findById(1L)).thenReturn(opt); Map<String, String> valuesMap = new HashMap<>(); valuesMap.put("name", "test"); valuesMap.put("value", "testvalue"); valuesMap.put("default_value", "testdefault"); valuesMap.put("label", "testlabel"); valuesMap.put("position", "1"); Configuration result = controller.update(1L, valuesMap); "<AssertPlaceHolder>"; assertEquals("testvalue", result.getValue()); assertEquals("testdefault", result.getDefaultValue()); assertEquals("testlabel", result.getLabel()); assertEquals(1, result.getPosition()); assertNotNull(result.getUpdatedAt()); }
update(@PathVariable("id") Long id, @RequestBody Map<String, String> valuesMap) { Optional<Configuration> conf = repository.findById(id); if (!conf.isPresent()) { throw new NotFoundException("Could not find configuration with name: " + valuesMap.get("name")); } Configuration configuration = conf.get(); configuration.updateMap(valuesMap); repository.saveAndFlush(configuration); return configuration; }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( result, config )

[*] target: assertEquals("test", result.getName())
[-] pred:  org

************************************
************************************
[+] input: testUpdateOnefields() { Configuration config = new Configuration(); config.setName("testing"); config.setValue("testing"); config.setLabel("testing"); config.setDefaultValue("testing"); config.setPosition(2); Optional<Configuration> opt = Optional.of(config); Mockito.when(repo.findById(1L)).thenReturn(opt); Map<String, String> valuesMap = new HashMap<>(); valuesMap.put("name", "test"); Configuration result = controller.update(1L, valuesMap); "<AssertPlaceHolder>"; assertEquals("testing", result.getValue()); assertEquals("testing", result.getDefaultValue()); assertEquals("testing", result.getLabel()); assertEquals(2, result.getPosition()); assertNotNull(result.getUpdatedAt()); }
update(@PathVariable("id") Long id, @RequestBody Map<String, String> valuesMap) { Optional<Configuration> conf = repository.findById(id); if (!conf.isPresent()) { throw new NotFoundException("Could not find configuration with name: " + valuesMap.get("name")); } Configuration configuration = conf.get(); configuration.updateMap(valuesMap); repository.saveAndFlush(configuration); return configuration; }
[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertNotNull ( result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( configuration, result )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( result, config )

[*] target: assertEquals("test", result.getName())
[-] pred:  org. junit. Assert. assertEquals ( config, ap )

************************************
************************************
[+] input: shouldConvertLocalDateToShortInt() { final LocalDate ld = LocalDate.of(2013, 8, 30); "<AssertPlaceHolder>"; }
asShortInt(LocalDate date) { if (date.getYear() < 2000) { throw new IllegalArgumentException("Can only convert date object to short int if year is less than 2000"); } return asInteger(date.getYear() - 2000, date.getMonthValue(), date.getDayOfMonth()); }
[*] target: assertEquals(130830, DateUtils.asShortInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld, new LocalDate ( ) )

[*] target: assertEquals(130830, DateUtils.asShortInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld, from )

[*] target: assertEquals(130830, DateUtils.asShortInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld, from. asShortInt(LocalDate date ) )

[*] target: assertEquals(130830, DateUtils.asShortInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld, fromRecord )

[*] target: assertEquals(130830, DateUtils.asShortInt(ld))
[-] pred:  org

************************************
************************************
[+] input: shouldConvertLocalDateToLongInt() { final LocalDate ld = LocalDate.of(2013, 8, 30); "<AssertPlaceHolder>"; }
asLongInt(LocalDate date) { return asInteger(date.getYear(), date.getMonthValue(), date.getDayOfMonth()); }
[*] target: assertEquals(20130830, DateUtils.asLongInt(ld))
[-] pred:  org. junit. Assert. assertThat ( ld, org. hamcrest. CoreMatchers. is ( 5 ) )

[*] target: assertEquals(20130830, DateUtils.asLongInt(ld))
[-] pred:  org. junit. Assert. assertThat ( ld, org. hamcrest. CoreMatchers. is ( 8 ) )

[*] target: assertEquals(20130830, DateUtils.asLongInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld, ld. asLongInt(LocalDate date ) )

[*] target: assertEquals(20130830, DateUtils.asLongInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld. asLongInt(LocalDate date ), ld. asLongInt(LocalDate date )

[*] target: assertEquals(20130830, DateUtils.asLongInt(ld))
[-] pred:  org. junit. Assert. assertEquals ( ld. asLongInt(LocalDate date ), ld )

************************************
************************************
[+] input: testFindAnummer() { "<AssertPlaceHolder>"; }
findANummer(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_IDENTIFICATIENUMMERS, ELEMENT_A_NUMMER); }
[*] target: assertThat(CategorieUtil.findANummer(createFullCategories()), is("a-nummer"))
[-] pred:  org. junit. Assert. assertNull ( instance. findANummer(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findANummer(createFullCategories()), is("a-nummer"))
[-] pred:  org. junit. Assert. assertNull ( factory. findANummer(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findANummer(createFullCategories()), is("a-nummer"))
[-] pred:  org. junit. Assert. assertNull ( instance. findANummer(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findANummer(createFullCategories()), is("a-nummer"))
[-] pred:  org. junit. Assert. assertNull ( factory. findANummer(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findANummer(createFullCategories()), is("a-nummer"))
[-] pred:  org. junit. Assert. assertNull ( connection. findANummer(List<Container> categorieList){ )

************************************
************************************
[+] input: testFindBsn() { "<AssertPlaceHolder>"; }
findBsn(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_IDENTIFICATIENUMMERS, ELEMENT_BURGERSERVICENUMMER); }
[*] target: assertThat(CategorieUtil.findBsn(createFullCategories()), is("burgerservicenummer"))
[-] pred:  org. junit. Assert. assertNotNull ( reader. findBsn(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findBsn(createFullCategories()), is("burgerservicenummer"))
[-] pred:  org. junit. Assert. assertNotNull ( reader. findBsn(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findBsn(createFullCategories()), is("burgerservicenummer"))
[-] pred:  org. junit. Assert. assertNotNull ( reader. findBsn(List <Container > ( ) )

[*] target: assertThat(CategorieUtil.findBsn(createFullCategories()), is("burgerservicenummer"))
[-] pred:  org. junit. Assert. assertNotNull ( reader. findBsn(List <Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findBsn(createFullCategories()), is("burgerservicenummer"))
[-] pred:  org. junit. Assert. assertNull ( reader. findBsn(List<Container> categorieList){

************************************
************************************
[+] input: testFindOldBsn() {"<AssertPlaceHolder>";}
findBsnOudeWaarde(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_IDENTIFICATIENUMMERS_OUDE_WAARDE, ELEMENT_BURGERSERVICENUMMER); }
[*] target: assertThat(CategorieUtil.findBsnOudeWaarde(createFullCategories()), is("burgerservicenummer_oud"))
[-] pred:  org. junit. Assert. assertNotNull ( reader )

[*] target: assertThat(CategorieUtil.findBsnOudeWaarde(createFullCategories()), is("burgerservicenummer_oud"))
[-] pred:  org. junit. Assert. assertNotNull ( instance )

[*] target: assertThat(CategorieUtil.findBsnOudeWaarde(createFullCategories()), is("burgerservicenummer_oud"))
[-] pred:  org. junit. Assert. assertNotNull ( g )

[*] target: assertThat(CategorieUtil.findBsnOudeWaarde(createFullCategories()), is("burgerservicenummer_oud"))
[-] pred:  org. junit. Assert. assertNotNull ( go )

[*] target: assertThat(CategorieUtil.findBsnOudeWaarde(createFullCategories()), is("burgerservicenummer_oud"))
[-] pred:  org

************************************
************************************
[+] input: testFindDatumOverlijden() { "<AssertPlaceHolder>"; }
findDatumOverlijden(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_OVERLIJDEN, ELEMENT_DATUM_OVERLIJDEN); }
[*] target: assertThat(CategorieUtil.findDatumOverlijden(createFullCategories()), is("datumoverlijden"))
[-] pred:  org. junit. Assert. assertNull ( meta. findDatumOverlijden(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijden(createFullCategories()), is("datumoverlijden"))
[-] pred:  org. junit. Assert. assertNull ( factory. findDatumOverlijden(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijden(createFullCategories()), is("datumoverlijden"))
[-] pred:  org. junit. Assert. assertNull ( client. findDatumOverlijden(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijden(createFullCategories()), is("datumoverlijden"))
[-] pred:  org. junit. Assert. assertNull ( connection. findDatumOverlijden(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijden(createFullCategories()), is("datumoverlijden"))
[-] pred:  org. junit. Assert. assertNull ( repository. findDatumOverlijden(List<Container> categorieList){ )

************************************
************************************
[+] input: testFindDatumOverlijdenOudeWaarde() { "<AssertPlaceHolder>"; }
findDatumOverlijdenOudeWaarde(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_OVERLIJDEN_OUDE_WAARDE, ELEMENT_DATUM_OVERLIJDEN); }
[*] target: assertThat(CategorieUtil.findDatumOverlijdenOudeWaarde(createFullCategories()), is("datumoverlijden_oud"))
[-] pred:  org. junit. Assert. assertNull ( ae. findDatumOverlijdenOudeWaarde(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijdenOudeWaarde(createFullCategories()), is("datumoverlijden_oud"))
[-] pred:  org. junit. Assert. assertNull ( meta. findDatumOverlijdenOudeWaarde(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijdenOudeWaarde(createFullCategories()), is("datumoverlijden_oud"))
[-] pred:  org. junit. Assert. assertNull ( instance. findDatumOverlijdenOudeWaarde(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijdenOudeWaarde(createFullCategories()), is("datumoverlijden_oud"))
[-] pred:  org. junit. Assert. assertNull ( factory. findDatumOverlijdenOudeWaarde(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findDatumOverlijdenOudeWaarde(createFullCategories()), is("datumoverlijden_oud"))
[-] pred:  org. junit. Assert. assertNull ( filter. findDatumOverlijdenOudeWaarde(List<Container> categorieList){ )

************************************
************************************
[+] input: testFindDRedenOpschorting() { "<AssertPlaceHolder>"; }
findRedenOpschorting(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_INSCHRIJVING, ELEMENT_REDEN_OPSCHORTING); }
[*] target: assertThat(CategorieUtil.findRedenOpschorting(createFullCategories()), is("redenopschorting"))
[-] pred:  org. junit. Assert. assertSame ( c, findRedenOpschorting(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschorting(createFullCategories()), is("redenopschorting"))
[-] pred:  org. junit. Assert. assertNotNull ( findRedenOpschorting(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findRedenOpschorting(createFullCategories()), is("redenopschorting"))
[-] pred:  org. junit. Assert. assertNotNull ( findRedenOpschorting(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschorting(createFullCategories()), is("redenopschorting"))
[-] pred:  org. junit. Assert. assertEquals ( 1, findRedenOpschorting(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschorting(createFullCategories()), is("redenopschorting"))
[-] pred:  org

************************************
************************************
[+] input: testFindRedenOpschortingOudeWaarde() { "<AssertPlaceHolder>"; }
findRedenOpschortingOudeWaarde(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_INSCHRIJVING_OUDE_WAARDE, ELEMENT_REDEN_OPSCHORTING); }
[*] target: assertThat(CategorieUtil.findRedenOpschortingOudeWaarde(createFullCategories()), is("redenopschorting_oud"))
[-] pred:  org. junit. Assert. assertNull ( findRedenOpschortingOudeWaarde(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschortingOudeWaarde(createFullCategories()), is("redenopschorting_oud"))
[-] pred:  org. junit. Assert. assertSame ( java. util. Optional. empty ( ), findRedenOpschortingOudeWaarde(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschortingOudeWaarde(createFullCategories()), is("redenopschorting_oud"))
[-] pred:  org. junit. Assert. assertNull ( findRedenOpschortingOudeWaarde(List<Container> categorieList){ )

[*] target: assertThat(CategorieUtil.findRedenOpschortingOudeWaarde(createFullCategories()), is("redenopschorting_oud"))
[-] pred:  org. junit. Assert. assertSame ( java. util. Collections. emptyList ( ), findRedenOpschortingOudeWaarde(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findRedenOpschortingOudeWaarde(createFullCategories()), is("redenopschorting_oud"))
[-] pred:  org

************************************
************************************
[+] input: testEmptyCategorie() { Container container = new Container(); "<AssertPlaceHolder>"; }
findBsn(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_IDENTIFICATIENUMMERS, ELEMENT_BURGERSERVICENUMMER); }
[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertEquals ( 0, container. findBsn(List < java. lang. String > ( ) )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertEquals ( 0, container. findBsn(List < java. lang. String > asList ( ) )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertEquals ( 0, container. findBsn(List < java. lang. String > emptyList ( ) )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertEquals ( 0, container. findBsn(List < java. lang. Integer > asList ( ) )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertEquals ( 0, container. findBsn(List < java. lang. String > newArrayList ( ) )

************************************
************************************
[+] input: testEmptyElement() { Container container = new Container(); container.setNummer(CategorieUtil.CATEGORIE_IDENTIFICATIENUMMERS); Element element = new Element(); container.getElement().add(element); "<AssertPlaceHolder>"; }
findBsn(List<Container> categorieList){ return findValue(categorieList, CATEGORIE_IDENTIFICATIENUMMERS, ELEMENT_BURGERSERVICENUMMER); }
[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertFalse ( container. findBsn(List <Container > element ) )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertFalse ( container. findBsn(List <Container > element )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertFalse ( container. findBsn(List<Container> categorieList){

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org. junit. Assert. assertSame ( element, container. findBsn(List <Container > element )

[*] target: assertThat(CategorieUtil.findBsn(List.of(container)), nullValue())
[-] pred:  org

************************************
************************************
[+] input: IOException { List<AfnemersberichtAanDGL> captureList = new ArrayList<>(); Receiver<AfnemersberichtAanDGL> afnemersberichtAanDGLReceiver = new Receiver<>(new AfnemersberichtAanDGL()) { @Override protected void processMessage(AfnemersberichtAanDGL message, MessageHeaders headers) { captureList.add(message); } };  Path xmlFile = Paths.get("src","test","resources", "afnemersberichtAanDGL.xml"); String xmlMessage = Files.readString(xmlFile); afnemersberichtAanDGLReceiver.receiveMessage(xmlMessage, new MessageHeaders(new HashMap<>()));  "<AssertPlaceHolder>"; AfnemersberichtAanDGL afnemersberichtAanDGL = captureList.get(0); assertThat(afnemersberichtAanDGL.getBerichtHeader().getOntvangerId(), is("55555555555555555555")); assertThat(afnemersberichtAanDGL.getBerichtHeader().getVerstrekkerId(), is("77777777777777777777")); assertThat(afnemersberichtAanDGL.getBerichtHeader().getDatumtijdstempelVerstrekker(), is(parseTime("2020-08-16T11:12:42.566+02:00"))); assertThat(afnemersberichtAanDGL.getBerichtHeader().getKenmerkVerstrekker(), is("kenmerk.verstrekker.1")); assertThat(afnemersberichtAanDGL.getBerichtHeader().getBerichtversie(), is("1.0")); assertThat(afnemersberichtAanDGL.getStuurgegevens().getVersieBerichttype(), is("3.10")); assertThat(afnemersberichtAanDGL.getStuurgegevens().getBerichtsoort().getNaam(), is("Ap01")); assertThat(afnemersberichtAanDGL.getStuurgegevens().getBerichtsoort().getVersie(), is("1.0"));  assertThat(afnemersberichtAanDGL.getInhoud().getAv01(), nullValue()); assertThat(afnemersberichtAanDGL.getInhoud().getAp01(), notNullValue()); Ap01 ap01 = afnemersberichtAanDGL.getInhoud().getAp01(); assertThat(ap01.getHerhaling(), is(0)); assertThat(ap01.getRandomKey(), is("00000000")); assertThat(ap01.getCategorie().size(), is(1)); assertThat(ap01.getCategorie().get(0).getNummer(), is("01")); assertThat(ap01.getCategorie().get(0).getElement().size(), is(1)); assertThat(ap01.getCategorie().get(0).getElement().get(0).getNummer(), is("0120")); assertThat(ap01.getCategorie().get(0).getElement().get(0).getValue(), is("PPPPPPPPP")); }
receiveMessage(@Payload String message, MessageHeaders headers) { try { JAXBContext context = JAXBContext.newInstance(messageClass, ObjectFactory.class); Unmarshaller unmarshaller = context.createUnmarshaller(); Object unmarshalledObject = unmarshaller.unmarshal(new StreamSource(new StringReader(message))); if (messageClass.isInstance(unmarshalledObject)) { M unmarshalledMessage = (M) unmarshalledObject; processMessage(unmarshalledMessage, headers); } } catch (JAXBException e) { e.printStackTrace(); } }
[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( xmlMessage, xmlMessage )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertTrue ( xmlMessage. contains ( xmlMessage ) )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertNotNull ( xmlMessage )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( xmlMessage, actualMessage )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org

************************************
************************************
[+] input: IOException { List<VerstrekkingAanAfnemer> captureList = new ArrayList<>(); Receiver<VerstrekkingAanAfnemer> verstrekkingAanAfnemerReceiver = new Receiver<>(new VerstrekkingAanAfnemer()) { @Override protected void processMessage(VerstrekkingAanAfnemer message, MessageHeaders headers) { captureList.add(message); } };  Path xmlFile = Paths.get("src","test","resources", "verstrekkingAanAfnemer.xml"); String xmlMessage = Files.readString(xmlFile); verstrekkingAanAfnemerReceiver.receiveMessage(xmlMessage, new MessageHeaders(new HashMap<>()));  "<AssertPlaceHolder>"; VerstrekkingAanAfnemer verstrekkingAanAfnemer = captureList.get(0); assertThat(verstrekkingAanAfnemer.getDatumtijdstempelDigilevering().toString(), is("2018-02-02T11:59:04.170+01:00")); assertThat(verstrekkingAanAfnemer.getDatumtijdstempelLV().toString(), is("2017-11-27T14:33:05.010+01:00")); assertThat(verstrekkingAanAfnemer.getKenmerkDigilevering(), is("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); assertThat(verstrekkingAanAfnemer.getKenmerkLV(), is("SSSSSSSSSSSSSSSSSSSSSSSSSSSSS")); assertThat(verstrekkingAanAfnemer.getVersieBerichttype(), is("3.10")); assertThat(verstrekkingAanAfnemer.getAbonnement().getNaam(), is("")); assertThat(verstrekkingAanAfnemer.getAbonnement().getVersie(), is("")); assertThat(verstrekkingAanAfnemer.getBasisregistratie(), is("BRP")); assertThat(verstrekkingAanAfnemer.getGebeurtenissoort().getNaam(), is("Gv01")); assertThat(verstrekkingAanAfnemer.getGebeurtenissoort().getVersie(), is("1.0"));  assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getAf01(), nullValue()); assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getAf11(), nullValue()); assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getAg01(), nullValue()); assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getNg01(), nullValue()); assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getNull(), nullValue()); assertThat(verstrekkingAanAfnemer.getGebeurtenisinhoud().getGv01(), notNullValue()); Gv01 gv01 = verstrekkingAanAfnemer.getGebeurtenisinhoud().getGv01(); assertThat(gv01.getANummer(), is("SSSSSSSSSS")); assertThat(gv01.getRandomKey(), is("00000000")); assertThat(gv01.getCategorie().size(), is(2)); assertThat(gv01.getCategorie().get(0).getNummer(), is("08")); assertThat(gv01.getCategorie().get(0).getElement().size(), is(3)); assertThat(gv01.getCategorie().get(0).getElement().get(0).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(0).getElement().get(0).getValue(), is("PPPPPPPPPPPPPPPPPPPP")); assertThat(gv01.getCategorie().get(0).getElement().get(1).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(0).getElement().get(1).getValue(), is("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP")); assertThat(gv01.getCategorie().get(0).getElement().get(2).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(0).getElement().get(2).getValue(), is("")); assertThat(gv01.getCategorie().get(1).getNummer(), is("58")); assertThat(gv01.getCategorie().get(1).getElement().size(), is(3)); assertThat(gv01.getCategorie().get(1).getElement().get(0).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(1).getElement().get(0).getValue(), is("PPPPPPPPPPPPPPPPPPPPP")); assertThat(gv01.getCategorie().get(1).getElement().get(1).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(1).getElement().get(1).getValue(), is("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP")); assertThat(gv01.getCategorie().get(1).getElement().get(2).getNummer(), is("PPPP")); assertThat(gv01.getCategorie().get(1).getElement().get(2).getValue(), is("O")); }
receiveMessage(@Payload String message, MessageHeaders headers) { try { JAXBContext context = JAXBContext.newInstance(messageClass, ObjectFactory.class); Unmarshaller unmarshaller = context.createUnmarshaller(); Object unmarshalledObject = unmarshaller.unmarshal(new StreamSource(new StringReader(message))); if (messageClass.isInstance(unmarshalledObject)) { M unmarshalledMessage = (M) unmarshalledObject; processMessage(unmarshalledMessage, headers); } } catch (JAXBException e) { e.printStackTrace(); } }
[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( 0, xmlMessage. size ( ) )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. class, xmlMessage. getClass ( ) )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( 200, xmlMessage. size ( ) )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( org. apache. commons. lang. StringUtils. valueOf ( xmlMessage ), captureList )

[*] target: assertThat(captureList.size(), is(1))
[-] pred:  org. junit. Assert. assertEquals ( xmlMessage, actualMessage )

************************************
************************************
[+] input: IOException { AfnemersberichtAanDGL afnemersberichtAanDGL = new AfnemersberichtAanDGL();  BerichtHeaderType berichtheader = new BerichtHeaderType(); berichtheader.setOntvangerId("55555555555555555555"); berichtheader.setVerstrekkerId("77777777777777777777"); berichtheader.setDatumtijdstempelVerstrekker(parseTime("2020-08-16T11:12:42.566+02:00")); berichtheader.setKenmerkVerstrekker("kenmerk.verstrekker.1"); berichtheader.setBerichtversie("1.0"); afnemersberichtAanDGL.setBerichtHeader(berichtheader); AfnemersberichtAanDGL.Stuurgegevens stuurgegevens = new AfnemersberichtAanDGL.Stuurgegevens(); stuurgegevens.setVersieBerichttype("3.10"); VersiebeheerType berichtsoort = new VersiebeheerType(); berichtsoort.setNaam("Ap01"); berichtsoort.setVersie("1.0"); stuurgegevens.setBerichtsoort(berichtsoort); afnemersberichtAanDGL.setStuurgegevens(stuurgegevens); AfnemersInhoudType inhoud = new AfnemersInhoudType(); Ap01 ap01 = new Ap01(); ap01.setRandomKey("00000000"); Container categorie = new Container(); categorie.setNummer("01"); Element element = new Element(); element.setNummer("0120"); element.setValue("PPPPPPPPP"); categorie.getElement().add(element); ap01.getCategorie().add(categorie); inhoud.setAp01(ap01); afnemersberichtAanDGL.setInhoud(inhoud);  Path xmlFile = Paths.get("src","test","resources", "afnemersberichtAanDGL.xml"); String xmlMessage = Files.readString(xmlFile);  afnemersberichtAanDGLSender.sendMessage(afnemersberichtAanDGL, new MessageHeaders(new HashMap<>())); ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class); Mockito.verify(jmsTemplateMock).convertAndSend(nullable(String.class), stringArgumentCaptor.capture(), any(MessagePostProcessor.class)); String sentXML = stringArgumentCaptor.getValue();  "<AssertPlaceHolder>"; }
sendMessage(M message, MessageHeaders headers) { this.sendMessage(responseTopic, message, headers); }
[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( inhoud. toString ( ),GL. toString ( ) )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( inhoud. getMessage ( ), e. getMessage ( ) )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( inhoud. toString ( ),GL. size ( ) )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( inhoud,GL )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  organizes the org

************************************
************************************
[+] input: IOException { VerstrekkingAanAfnemer verstrekkingAanAfnemer = new VerstrekkingAanAfnemer();  verstrekkingAanAfnemer.setDatumtijdstempelDigilevering(parseTime("2018-02-02T11:59:04.170+01:00")); verstrekkingAanAfnemer.setDatumtijdstempelLV(parseTime("2017-11-27T14:33:05.010+01:00")); verstrekkingAanAfnemer.setKenmerkDigilevering("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); verstrekkingAanAfnemer.setKenmerkLV("SSSSSSSSSSSSSSSSSSSSSSSSSSSSS"); verstrekkingAanAfnemer.setVersieBerichttype("3.10"); GeversioneerdType abonnement = new GeversioneerdType(); abonnement.setNaam(""); abonnement.setVersie(""); verstrekkingAanAfnemer.setAbonnement(abonnement); verstrekkingAanAfnemer.setBasisregistratie("BRP"); GeversioneerdType gebeurtenissoort = new GeversioneerdType(); gebeurtenissoort.setNaam("Gv01"); gebeurtenissoort.setVersie("1.0"); verstrekkingAanAfnemer.setGebeurtenissoort(gebeurtenissoort);  VerstrekkingInhoudType inhoud = new VerstrekkingInhoudType();  Gv01 gv01 = new Gv01(); gv01.setANummer("SSSSSSSSSS"); gv01.setRandomKey("00000000");  Container categorie08 = new Container(); categorie08.setNummer("08"); Element element081110 = new Element(); element081110.setNummer("PPPP"); element081110.setValue("PPPPPPPPPPPPPPPPPPPP"); categorie08.getElement().add(element081110); Element element081115 = new Element(); element081115.setNummer("PPPP"); element081115.setValue("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"); categorie08.getElement().add(element081115); Element element088410 = new Element(); element088410.setNummer("PPPP"); element088410.setValue(""); categorie08.getElement().add(element088410); gv01.getCategorie().add(categorie08);  Container categorie58 = new Container(); categorie58.setNummer("58"); Element element581110 = new Element(); element581110.setNummer("PPPP"); element581110.setValue("PPPPPPPPPPPPPPPPPPPPP"); categorie58.getElement().add(element581110); Element element581115 = new Element(); element581115.setNummer("PPPP"); element581115.setValue("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"); categorie58.getElement().add(element581115); Element element588410 = new Element(); element588410.setNummer("PPPP"); element588410.setValue("O"); categorie58.getElement().add(element588410); gv01.getCategorie().add(categorie58);  inhoud.setGv01(gv01); verstrekkingAanAfnemer.setGebeurtenisinhoud(inhoud);  Path xmlFile = Paths.get("src","test","resources", "verstrekkingAanAfnemer.xml"); String xmlMessage = Files.readString(xmlFile);  verstrekkingAanAfnemerSender.sendMessage(verstrekkingAanAfnemer, new MessageHeaders(new HashMap<>())); ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class); Mockito.verify(jmsTemplateMock).convertAndSend(nullable(String.class), stringArgumentCaptor.capture(), any(MessagePostProcessor.class)); String sentXML = stringArgumentCaptor.getValue();  "<AssertPlaceHolder>"; }
sendMessage(M message, MessageHeaders headers) { this.sendMessage(responseTopic, message, headers); }
[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( expected, actual )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( 0, temp. size ( ) )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( 0, result. size ( ) )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( expectedResult, actualResult )

[*] target: assertThat(sentXML, is(xmlMessage))
[-] pred:  org. junit. Assert. assertEquals ( expectedResult, actual )

************************************
************************************
[+] input: JMSException { AfnemersberichtAanDGL afnemersberichtAanDGL = new AfnemersberichtAanDGL();  Map<String, Object> headers = new HashMap<>(); headers.put("header1", "header1 value"); headers.put("header2", "header2 value"); MessageHeaders messageHeaders = new MessageHeaders(headers);  afnemersberichtAanDGLSender.sendMessage(afnemersberichtAanDGL, messageHeaders);  ArgumentCaptor<MessagePostProcessor> messagePostProcessorCaptor = ArgumentCaptor.forClass(MessagePostProcessor.class); Mockito.verify(jmsTemplateMock).convertAndSend(nullable(String.class), nullable(String.class), messagePostProcessorCaptor.capture());  MessagePostProcessor value = messagePostProcessorCaptor.getValue(); javax.jms.Message mockMessage = Mockito.mock(javax.jms.Message.class); value.postProcessMessage(mockMessage);  ArgumentCaptor<String> keyCaptor = ArgumentCaptor.forClass(String.class); ArgumentCaptor<String> valueCaptor = ArgumentCaptor.forClass(String.class); Mockito.verify(mockMessage, times(4)).setStringProperty(keyCaptor.capture(), valueCaptor.capture());  "<AssertPlaceHolder>"; assertThat(valueCaptor.getAllValues().get(1), is("header1 value")); assertThat(keyCaptor.getAllValues().get(0), is("header2")); assertThat(valueCaptor.getAllValues().get(0), is("header2 value"));  }
sendMessage(M message, MessageHeaders headers) { this.sendMessage(responseTopic, message, headers); }
[*] target: assertThat(keyCaptor.getAllValues().get(1), is("header1"))
[-] pred:  org. junit. Assert. assertThat ( value, org. hamcrest. CoreMatchers. is ( valueCaptor. getValue ( ) ) )

[*] target: assertThat(keyCaptor.getAllValues().get(1), is("header1"))
[-] pred:  org. junit. Assert. assertThat ( valueCaptor. getValueCaptor ( ), org. hamcrest. CoreMatchers. is ( value ) )

[*] target: assertThat(keyCaptor.getAllValues().get(1), is("header1"))
[-] pred:  org. junit. Assert. assertNull ( valueCaptor. getValueCaptor ( ) )

[*] target: assertThat(keyCaptor.getAllValues().get(1), is("header1"))
[-] pred:  org. junit. Assert. assertThat ( value, org. hamcrest. CoreMatchers. is ( valueCaptor ) )

[*] target: assertThat(keyCaptor.getAllValues().get(1), is("header1"))
[-] pred:  org

************************************
************************************
[+] input: testAfnemersBerichtAanDGLHeaders() { MessageHeaders afnemersberichtAanDGLHeaders = HeaderUtil.createAfnemersberichtAanDGLHeaders(validHeaders());  "<AssertPlaceHolder>"; assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PROTOCOL), is("ebMS")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PROTOCOL_VERSION), is("2.0")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_SYSTEM_MSG_ID).toString(), matchesPattern(UUID_REGEX)); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PROCESS_INSTANCE_ID).toString(), matchesPattern(UUID_REGEX)); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_SEQ_NUMBER), is("0")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_MSG_ORDER), is("false")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_ACTION), is("BRPAfnemersberichtAanDGL")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_ACTIVITY), is("dgl:objecten:1.0")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PROCESS_TYPE), is("dgl:objecten:1.0")); assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PROCESS_VERSION), is("1.0")); }
createAfnemersberichtAanDGLHeaders(Map<String, Object> additionalHeaders) { validateHeaders(additionalHeaders); Map<String, Object> headersMap = createBasicHeaderMap();  headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_ACTION, "BRPAfnemersberichtAanDGL"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_ACTIVITY, "dgl:objecten:1.0"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_PROCESS_TYPE, "dgl:objecten:1.0"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_PROCESS_VERSION, "1.0"); headersMap.putAll(additionalHeaders);  MessageHeaders headers = new MessageHeaders(headersMap); return headers; }
[*] target: assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertNotNull ( afnemersberichtAanDGLHeaders )

[*] target: assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( afnemersberichtAanDGLHeaders. getFields ( ), org. hamcrest. Matchers. is ( org. hamcrest. Matchers. empty ( ) ) )

[*] target: assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertEquals ( afnemersberichtAanDGLHeaders. getFields ( ),GLHeaders. getFields ( ) )

[*] target: assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  )

[*] target: assertThat(afnemersberichtAanDGLHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org

************************************
************************************
[+] input: testVerstrekkingAanAfnemerHeaders() { MessageHeaders verstrekkingAanAfnemerHeaders = HeaderUtil.createVerstrekkingAanAfnemerHeaders(validHeaders());  "<AssertPlaceHolder>"; assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PROTOCOL), is("ebMS")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PROTOCOL_VERSION), is("2.0")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_SYSTEM_MSG_ID).toString(), matchesPattern(UUID_REGEX)); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PROCESS_INSTANCE_ID).toString(), matchesPattern(UUID_REGEX)); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_SEQ_NUMBER), is("0")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_MSG_ORDER), is("false")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_ACTION), is("verstrekkingAanAfnemer")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_ACTIVITY), is("dgl:ontvangen:1.0")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PROCESS_TYPE), is("dgl:ontvangen:1.0")); assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PROCESS_VERSION), is("1.0")); }
createVerstrekkingAanAfnemerHeaders(Map<String, Object> additionalHeaders) { validateHeaders(additionalHeaders); Map<String, Object> headersMap = createBasicHeaderMap();  headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_ACTION, "verstrekkingAanAfnemer"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_ACTIVITY, "dgl:ontvangen:1.0"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_PROCESS_TYPE, "dgl:ontvangen:1.0"); headersMap.put(nl.logius.digid.digilevering.lib.model.Headers.X_AUX_PROCESS_VERSION, "1.0"); headersMap.putAll(additionalHeaders);  MessageHeaders headers = new MessageHeaders(headersMap); return headers; }
[*] target: assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( verstrekkingAanAfnemerHeaders. getElementVerstrekkingAanAfnemerHeaders )

[*] target: assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( verstrekkingAanAfnemerHeaders. getVVerstrekkingAanAfnemerHeaders ( ), org. hamcrest. Matchers. is ( true ) )

[*] target: assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( verstrekkingAanAfnemerHeaders. getVVerstrekkingAanAfnemerHeaders )

[*] target: assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( verstrekkingAanAfnemerHeaders. getVVerstrekkingAanAfnemerHeaders ( ), org. hamcrest. CoreMatchers. is ( true ) )

[*] target: assertThat(verstrekkingAanAfnemerHeaders.get(Headers.X_AUX_PRODUCTION), is("Test"))
[-] pred:  org. junit. Assert. assertThat ( verstrekkingAanAfnemerHeaders. getRequestAll ( ), org. hamcrest. Matchers. is ( true ) )

************************************
************************************
[+] input: listUserFavourPostByPage() { IPage<Post> page = new Page<>(2, 1); QueryWrapper<Post> queryWrapper = new QueryWrapper<>(); queryWrapper.eq("id", 1); queryWrapper.like("content", "a"); IPage<Post> result = postFavourMapper.listFavourPostByPage(page, queryWrapper, 1); Assertions."<AssertPlaceHolder>"; }
listFavourPostByPage(IPage<Post> page, @Param(Constants.WRAPPER) Wrapper<Post> queryWrapper, long favourUserId);
[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 0 ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new java. lang. Integer ( 1 ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( STRING_0 ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( queryWrapper ), result )

[*] target: assertNotNull(result)
[-] pred:  org. junit. Assert. assertEquals ( new org. apache. hadoop. fs. Path ( STRING_1 ), result )

************************************
************************************
[+] input: listPostWithDelete() { List<Post> postList = postMapper.listPostWithDelete(new Date()); Assertions."<AssertPlaceHolder>"; }
listPostWithDelete(Date minUpdateTime);
[*] target: assertNotNull(postList)
[-] pred:  org. junit. Assert. assertTrue ( ( ( postList. size ( ) ) > 0 ) )

[*] target: assertNotNull(postList)
[-] pred:  org. junit. Assert. assertTrue ( ( ( postList. size ( ) ) == 0 ) )

[*] target: assertNotNull(postList)
[-] pred:  org. junit. Assert. assertTrue ( ( ( postList. size ( ) ) == 1 ) )

[*] target: assertNotNull(postList)
[-] pred:  org. junit. Assert. assertTrue ( ( ( postList. size ( ) ) > 0 ) )

[*] target: assertNotNull(postList)
[-] pred:  org

************************************
************************************
[+] input: doPostFavour() { int i = postFavourService.doPostFavour(1L, loginUser); Assertions."<AssertPlaceHolder>"; }
doPostFavour(long postId, User loginUser);
[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, i )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 1 )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( 3, i )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 1 ) )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, i )s

************************************
************************************
[+] input: doPostThumb() { int i = postThumbService.doPostThumb(1L, loginUser); Assertions."<AssertPlaceHolder>"; }
doPostThumb(long postId, User loginUser);
[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 1 )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 2 )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 5 )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( 1, i )

[*] target: assertTrue(i >= 0)
[-] pred:  org. junit. Assert. assertEquals ( i, 3 )

************************************
************************************
[+] input: userRegister() { String userAccount = "yupi"; String userPassword = ""; String checkPassword = "123456"; try { long result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions.assertEquals(-1, result); userAccount = "yu"; result = userService.userRegister(userAccount, userPassword, checkPassword); Assertions."<AssertPlaceHolder>"; } catch (Exception e) {  } }
userRegister(String userAccount, String userPassword, String checkPassword);
[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertEquals ( ( - 1 ), result )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertEquals ( ( result + 1 ), result )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertEquals ( result, userAccount )

[*] target: assertEquals(-1, result)
[-] pred:  org. junit. Assert. assertEquals ( userAccount, result )

[*] target: assertEquals(-1, result)
[-] pred:  org

************************************
************************************
[+] input: testClientV4ApiSecretKey() { ClientV4 client = new ClientV4.Builder("a.b") .enableTokenCache() .networkConfig(30, 10, 10, 10, TimeUnit.SECONDS) .connectionPool(new okhttp3.ConnectionPool(8, 1, TimeUnit.SECONDS)) .build();  ConfigV4 config = client.getConfig(); "<AssertPlaceHolder>"; assert !config.isDisableTokenCache(); assertThat("networkConfig.requestTimeOut is not equal to 30", config.getRequestTimeOut() == 30); assertThat("networkConfig.connectTimeout is not equal to 10", config.getConnectTimeout() == 10); assertThat("networkConfig.readTimeout is not equal to 10", config.getReadTimeout() == 10); assertThat("networkConfig.writeTimeout is not equal to 10", config.getWriteTimeout() == 10); assertThat("networkConfig.connectionPool is null", config.getConnectionPool() != null); }
build() { ClientV4 client = new ClientV4(); client.setConfig(config);  initCache(config); initHttpTransport(config);  String baseUrl = null; if(StringUtils.isEmpty(config.getBaseUrl())){  baseUrl = BASE_URL; }else{ baseUrl = config.getBaseUrl(); } client.setChatApiService(new ClientApiService(config.getHttpClient(),baseUrl)); return client; }
[*] target: assertEquals("a.b", config.getApiSecretKey())
[-] pred:  org. junit. Assert. assertNotNull ( config )

[*] target: assertEquals("a.b", config.getApiSecretKey())
[-] pred:  org. junit. Assert. assertEquals ( new ConfigV4 ( ), config )

[*] target: assertEquals("a.b", config.getApiSecretKey())
[-] pred:  org. junit. Assert. assertEquals ( config. buildContainer ( ), client )

[*] target: assertEquals("a.b", config.getApiSecretKey())
[-] pred:  org. junit. Assert. assertEquals ( client, config. buildContainer ( ) )

[*] target: assertEquals("a.b", config.getApiSecretKey())
[-] pred:  org. junit. Assert. assertEquals ( config, client. buildContainer ( ) )

************************************
************************************
[+] input: IOException { //        try (MockServerClient mockServerClient = new MockServerClient(mockServer.getHost(), mockServer.getServerPort())) { //            mockServerClient //                    .when( //                            request().withPath("/stage-api/paas/v4/files/1/content") //                    ) // // //                    .respond(request -> { //                        return response() //                                .withStatusCode(200) //                                .withBody("file info"); //                    }); // //            ClientV4 client = new ClientV4.Builder(mockServer.getEndpoint() +"/stage-api/paas/v4/",API_SECRET_KEY) //                    .enableTokenCache() //                    .networkConfig(30, 10, 10, 10, TimeUnit.SECONDS) //                    .connectionPool(new okhttp3.ConnectionPool(8, 1, TimeUnit.SECONDS)) //                    .build(); // // //            try (HttpxBinaryResponseContent httpxBinaryResponseContent = client.fileContent("1");) { //                "<AssertPlaceHolder>"; //            } //        } // //    }
getText() throws IOException { if (response.body() == null) { throw new IOException("ResponseBody is null"); } try (BufferedSource source = response.body().source()) { return source.readUtf8(); } }
[*] target: assertThat("file error",httpxBinaryResponseContent.getText().equals("file info"))
[-] pred:  org. junit. Assert. assertNotNull ( httpxBinaryResponseContent )

[*] target: assertThat("file error",httpxBinaryResponseContent.getText().equals("file info"))
[-] pred:  org. junit. Assert. assertNull ( httpxBinaryResponseContent )

[*] target: assertThat("file error",httpxBinaryResponseContent.getText().equals("file info"))
[-] pred:  org. junit. Assert. assertNotNull ( httpxBinaryResponseContent. getText ( ) )

[*] target: assertThat("file error",httpxBinaryResponseContent.getText().equals("file info"))
[-] pred:  org

[*] target: assertThat("file error",httpxBinaryResponseContent.getText().equals("file info"))
[-] pred:  )

************************************
