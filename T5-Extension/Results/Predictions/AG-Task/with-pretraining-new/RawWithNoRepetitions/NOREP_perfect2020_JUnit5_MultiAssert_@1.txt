************************************
[+] input: confirmEmailNoToken() { // given User user = getDefaultUser(); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "any-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: testWrite() { Document d = new JDocument();  d.setString("$.id", "id"); d.setString("$.info.iid", "iid");  d.setString("$.members[0].first_name", "Deepak"); d.setString("$.members[%].first_name", "Deepak", "0"); d.setString("$.members[sex=male].first_name", "Deepak"); d.setString("$.members[sex=male].last_name", "Arora");  d.setString("$.members[sex=male].phones[type=home].type", "home"); d.setString("$.members[sex=%].phones[type=%].type", "home", "male", "home");  d.setString("$.members[0].phones[type=home].number", "9999999999"); d.setString("$.info.iid", "12345678"); d.setString("$.addresses[0].line_1", "line 1"); d.setString("$.addresses[1].line_1", "line 1"); d.setString("$.addresses[2].line_1", "line 1"); d.setInteger("$.members[0].index", 0); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=home].is_primary", true); d.setString("$.members[sex=female].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_5_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_17", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: roundTripWithQuotedComponent() { final String expression = "http://snomed.info/sct" + "|'397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )'" + "|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals( "397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: IOException { String xml = Lib.readResource("pacs.002-CDATA.xml"); MxPacs00200103 mx = (MxPacs00200103) new MxReadImpl().read(MxPacs00200103.class, xml, MxPacs00200103._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("11de568fd1754cb7b2fbbb3dd238ff16", mx.getAppHdr().reference()); assertEquals("UNKNOWN", mx.getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgId()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: shouldProperlyGetGroupDiscWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupDiscussionList(GroupRequestArgs requestArgs);  /** * Get count of groups filtered by provided {@link GroupRequestArgs}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: resetPasswordTokenNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("c1ccccc1"); List<Atom> atomList = frag.getAtomList(); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(0), atomList.get(3), frag.getBondSet()); "<AssertPlaceHolder>"; for (List<Atom> path : paths) { assertEquals(2, path.size()); } for (List<Atom> path : paths) { if (atomList.indexOf(path.get(0))==1){ assertEquals(2, atomList.indexOf(path.get(1))); } else{ assertEquals(5, atomList.indexOf(path.get(0))); assertEquals(4, atomList.indexOf(path.get(1))); } } }
getPathBetweenAtomsUsingBonds(Atom a1, Atom a2, Set<Bond> peripheryBonds){ List<List<Atom>> paths = new ArrayList<>(); Deque<PathSearchState> stateStack = new ArrayDeque<>(); stateStack.add(new PathSearchState(a1, new ArrayList<>())); while (stateStack.size()>0){ PathSearchState state  =stateStack.removeLast();//depth first traversal List<Atom> orderAtomsVisited = state.getOrderAtomsVisited(); Atom nextAtom = state.getCurrentAtom(); orderAtomsVisited.add(nextAtom); Set<Bond> neighbourBonds = new LinkedHashSet<>(nextAtom.getBonds()); neighbourBonds.retainAll(peripheryBonds); for (Bond neighbourBond : neighbourBonds) { Atom neighbour = neighbourBond.getOtherAtom(nextAtom); if (orderAtomsVisited.contains(neighbour)){//atom already visited by this path continue; } if (neighbour ==a2 ){//target atom found paths.add(new ArrayList<>(orderAtomsVisited.subList(1, orderAtomsVisited.size()))); } else{//add atom to stack, its neighbours will be recursively investigated shortly stateStack.add(new PathSearchState(neighbour, new ArrayList<>(orderAtomsVisited))); } } } return paths; }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
************************************
[+] input: resetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(passwordEncoder.encode(forgotPasswordRequest.getNewPassword())) .willReturn(forgotPasswordRequest.getNewPassword()); when(userRepository.save(user)) .then(returnsFirstArg()); given(mailService.sendPasswordSuccessfullyChanged(user)) .willReturn(true); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken);  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(passwordEncoder).encode(forgotPasswordRequest.getNewPassword()); verify(mailService).sendPasswordSuccessfullyChanged(user); verify(securityTokenService).useToken(testSecurityToken); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertTrue(passwordChanged)
[-] pred: org. junit. Assert. assertTrue ( passwordChanged )
************************************
************************************
[+] input: removeTaskNotifyConfigById() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigById(persistedConfig.getId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigById(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigById(Long taskNotifyConfigId) { Preconditions.checkNotNull(taskNotifyConfigId, "id of target config record to be removed should not be null"); return taskNotifyConfigDao.removeById(taskNotifyConfigId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: confirmEmail() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user)); //    given(mailService.sendAccountConfirmed(user)) //        .willReturn(true);  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertTrue(user.isEmailConfirmed()); verify(securityTokenService).useToken(testSecurityToken); verify(userRepository).save(user); //    verify(mailService).sendAccountConfirmed(user); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertTrue(emailConfirmed)
[-] pred: org. junit. Assert. assertTrue ( emailConfirmed )
************************************
************************************
[+] input: testRehashing() { int count = 20000;  for (int i = 0; i < count; i++) { map.put(i, "value" + i); }  for (int i = 0; i < count; i++) { assertEquals("value" + i, map.get(i)); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(count, map.size())
[-] pred: org. junit. Assert. assertEquals ( count, map. size() )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new InputStreamConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: confirmEmailWrongToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "wrong-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer, Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference<Integer>(1));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnArtifactView() { /* ARRANGE */ final var artifact = getArtifact();  /* ACT */ final var result = artifactViewAssembler.toModel(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(artifact.getTitle(), result.getTitle()); Assertions.assertEquals(artifact.getByteSize(), result.getByteSize()); Assertions.assertEquals(artifact.getCheckSum(), result.getCheckSum()); Assertions.assertEquals(artifact.getNumAccessed(), result.getNumAccessed()); Assertions.assertEquals(artifact.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(artifact.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(artifact.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(artifact.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getArtifactLink(artifact.getId()), selfLink.get().getHref());  final var dataLink = result.getLink("data"); assertTrue(dataLink.isPresent()); assertNotNull(dataLink.get()); assertEquals(getArtifactDataLink(artifact.getId()), dataLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getArtifactRepresentationsLink(artifact.getId()), representationsLink.get().getHref());  final var agreementsLink = result.getLink("agreements"); assertTrue(agreementsLink.isPresent()); assertNotNull(agreementsLink.get()); assertEquals(getArtifactAgreementsLink(artifact.getId()), agreementsLink.get().getHref()); }
toModel(final Artifact artifact) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(artifact, ArtifactView.class); view.add(getSelfLink(artifact.getId()));  final var dataLink = linkTo(methodOn(ArtifactController.class) .getData(artifact.getId(), new ArrayList<>(), new QueryInput())) .withRel("data"); view.add(dataLink);  final var repLink = linkTo(methodOn(ArtifactsToRepresentationsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var agreementLink = linkTo(methodOn(ArtifactsToAgreementsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.AGREEMENTS); view.add(agreementLink);  final var subscriptionLink = linkTo(methodOn(ArtifactsToSubscriptionsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var routeLink = linkTo(methodOn(ArtifactController.class) .getRoute(artifact.getId())) .withRel("route"); view.add(routeLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetAuthenticationInfo() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson("{"auth": "info"}");  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; assertEquals("{"auth": "info"}", authInfo); }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNotNull(authInfo)
[-] pred: org. junit. Assert. assertNotNull ( authInfo )
************************************
************************************
[+] input: findSupportedDiseaseByName_successful() { SupportedDisease covid = _repo.findByName("COVID-19").orElse(null); "<AssertPlaceHolder>"; assertEquals("96741-4", covid.getLoinc()); }
findByName(String name);
[*] target: assertNotNull(covid)
[-] pred: org. junit. Assert. assertNotNull ( covid )
************************************
************************************
[+] input: testRef() { JsonObject resolved = JsonRef.resolve(CIRCULAR);  "<AssertPlaceHolder>"; assertNotNull(resolved.getJsonObject("definitions")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address")); assertEquals( "string", resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address") .getString("type")); }
resolve(JsonObject json) { return JsonRef.resolve(json); }
[*] target: assertNotNull(resolved)
[-] pred: org. junit. Assert. assertNotNull ( resolved )
************************************
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509Certificate x509Cert1 = new XMLX509Certificate(TestUtils.newDocument(), cert); XMLX509Certificate x509Cert2 = new XMLX509Certificate(TestUtils.newDocument(), cert);  assertEquals(x509Cert1, x509Cert2); "<AssertPlaceHolder>"; }
hashCode() { int result = 17; try { byte[] bytes = getCertificateBytes(); for (byte element : bytes) { result = 31 * result + element; } } catch (XMLSecurityException e) { LOG.log(Level.DEBUG, e.getMessage(), e); } return result; }
[*] target: assertEquals(x509Cert1.hashCode(), x509Cert2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509Cert1. hashCode ( ), x509Cert2. hashCode ( ) )
************************************
************************************
[+] input: testWriteTyped() { Document d = getTypedDocument("sample_7_model", null);  d.setString("$.id", "id"); d.setString("$.info.iid", "iid"); d.setString("$.members[0].first_name", "Deepak"); d.setInteger("$.members[0].age", 48); d.setString("$.members[type=basic].first_name", "Deepak"); d.setString("$.members[type=basic].last_name", "Arora"); d.setString("$.members[type=basic].phones[type=home].type", "Home"); d.setString("$.members[0].phones[type=Home].number", "11111111111"); d.setString("$.info.iid", "12345678"); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=Home].is_primary", true); d.setString("$.members[type=supp].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_7_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_38", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testSaveUser() { userService.save(new User(UUID.randomUUID().toString(), "John", "McClane")); userService.save(new User(UUID.randomUUID().toString(), "Chandler", "Bing")); userService.save(new User(UUID.randomUUID().toString(), "Joey", "Tribbiani")); userService.save(new User(UUID.randomUUID().toString(), "John", "Kennedy"));  List<com.madadipouya.springkafkatest.entity.User> users = userService.getUsers("John");  "<AssertPlaceHolder>"; assertEquals(4, users.size()); assertEquals("Kennedy", users.get(0).getLastName()); assertEquals("McClane", users.get(1).getLastName()); assertEquals("Rambo", users.get(2).getLastName()); assertEquals("Wick", users.get(3).getLastName()); }
getUsers(String firstName);
[*] target: assertNotNull(users)
[-] pred: org. junit. Assert. assertNotNull ( users )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testConflictingOrderOfProcessors3() { AbstractOutputProcessor outputProcessor1 = new AbstractOutputProcessor() { }; outputProcessor1.setAction(null, -1); AbstractOutputProcessor outputProcessor2 = new AbstractOutputProcessor() { }; outputProcessor2.setAction(null, -1); AbstractOutputProcessor outputProcessor3 = new AbstractOutputProcessor() { }; outputProcessor3.setAction(null, -1); outputProcessor1.addBeforeProcessor(outputProcessor2.getClass()); outputProcessor2.addBeforeProcessor(outputProcessor3.getClass()); outputProcessor3.addBeforeProcessor(outputProcessor1.getClass());  OutputProcessorChain outputProcessorChain = new OutputProcessorChainImpl(new OutboundSecurityContextImpl()); outputProcessorChain.addProcessor(outputProcessor1); outputProcessorChain.addProcessor(outputProcessor2); assertThrows(IllegalArgumentException.class, () -> outputProcessorChain.addProcessor(outputProcessor3));  List<OutputProcessor> outputProcessors = outputProcessorChain.getProcessors(); "<AssertPlaceHolder>"; assertEquals(outputProcessor1, outputProcessors.get(0)); assertEquals(outputProcessor2, outputProcessors.get(1)); }
getProcessors();
[*] target: assertEquals(2, outputProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, outputProcessors. size ( ) )
************************************
************************************
[+] input: ValidationException { for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) { // given DocumentItem doc0 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc0.setPath("Chicago/test2.pdf"); this.service.saveDocument(siteId, doc0, null);  DocumentItem doc1 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc1.setPath("abc.pdf"); this.service.saveDocument(siteId, doc1, null);  DocumentItem doc2 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc2.setPath("aaaa/test3.pdf"); this.service.saveDocument(siteId, doc2, null);  PaginationMapToken startkey = null; String folder = ""; SearchQuery q = new SearchQuery().meta(new SearchMetaCriteria().folder(folder));  // when PaginationResults<DynamicDocumentItem> results = this.searchService.search(siteId, q, null, startkey, MAX_RESULTS);  // then final int expected = 3; List<DynamicDocumentItem> list = results.getResults(); "<AssertPlaceHolder>"; assertNull(results.getToken());  int i = 0; assertNotNull(list.get(i).getDocumentId()); assertEquals("aaaa", list.get(i++).getPath()); assertEquals("Chicago", list.get(i++).getPath()); assertEquals("abc.pdf", list.get(i++).getPath()); } }
search(final String siteId, final SearchQuery query, final SearchResponseFields searchResponseFields, final PaginationMapToken token, final int maxresults) throws ValidationException {  SearchMetaCriteria meta = query.getMeta(); PaginationResults<DynamicDocumentItem> results;  if (meta != null) {  if (meta.path() != null) {  try { Map<String, String> map = this.folderIndexProcesor.getIndex(siteId, meta.path()); String documentId = map.get("documentId");  DocumentItem item = this.docService.findDocument(siteId, documentId);  DynamicDocumentItem result = new DocumentItemToDynamicDocumentItem().apply(item); results = new PaginationResults<>(Collections.singletonList(result), null);  } catch (IOException e) { results = new PaginationResults<>(Collections.emptyList(), null); }  } else { updateFolderMetaData(meta); results = searchByMeta(siteId, meta, token, maxresults); }  } else if (query.getAttribute() != null || !notNull(query.getAttributes()).isEmpty()) {  SearchAttributeCriteria search = query.getAttribute();  if (!notNull(query.getAttributes()).isEmpty()) {  Collection<String> list = query.getAttributes().stream() .map(SearchAttributeCriteria::getKey).collect(Collectors.toSet());  if (list.size() != query.getAttributes().size()) { throw new ValidationException(Collections .singletonList(new ValidationErrorImpl().error("duplicate attributes in query"))); }  search = createAttributesCriteria(siteId, query); }  results = searchByAttribute(siteId, query, search, token, maxresults);  } else {  SearchTagCriteria search = query.getTag(); results = searchByTag(siteId, query, search, token, maxresults, null); }  addResponseFields(siteId, results.getResults(), searchResponseFields); return results; }
[*] target: assertEquals(expected, list.size())
[-] pred: org. junit. Assert. assertEquals ( expected, list. size ( ) )
************************************
************************************
[+] input: configRoot_file() {  var configUrl = "config_dir/sample-config.yaml"; var expectedRoot = tempDir.resolve("config_dir").normalize();  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = Paths.get(manager.configRoot()).normalize();  "<AssertPlaceHolder>"; assertTrue(Files.exists(configRoot)); assertTrue(Files.isDirectory(configRoot)); }
configRoot() { return rootConfigDir; }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
************************************
[+] input: test2() { int[] nums = {1, 3, 2, 2, 3, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: deleteGroup1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); boolean ok = adminService.deleteGroup(random.nextInt(1000)); "<AssertPlaceHolder>"; }); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: testCreateNewInternalThread() { InternalThread t = new InternalThreadImpl(); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = new InternalThreadImpl(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = new InternalThreadImpl(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(new InternalThreadImpl("foo"), null, "foo"); assertThreadInfo(new InternalThreadImpl(group, "foo"), group, "foo");  t = new InternalThreadImpl(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
thread();
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
************************************
[+] input: getConfig() { context.create() .resource("/content/some/component", "test", "foobar"); Config config = condition.getConfig(context.currentResource("/content/some/component")); "<AssertPlaceHolder>"; assertEquals("foobar", config.get("test")); }
getConfig(@NotNull Resource dialogResource) { return new Config(dialogResource); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: getCatalogTemplate_validInput_returnCatalog() { /* ARRANGE */ final var catalog = new ResourceCatalogBuilder().build();  /* ACT */ final var result = TemplateUtils.getCatalogTemplate(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; assertNotNull(result.getDesc());  }
getCatalogTemplate( final Catalog catalog) { return FromIdsObjectMapper.fromIdsCatalog(catalog); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testInitialNullBug3465() { // SequenceEncoder was failing to include initial null in sequence // Nulls are decoded as empty strings final String value2 = "value"; final char delim = ';';  final SequenceEncoder se = new SequenceEncoder(null, delim); se.append(value2);  final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), delim);  assertEquals("", sd.nextToken()); "<AssertPlaceHolder>"; }
nextToken() { if (!hasMoreTokens()) throw new NoSuchElementException();  if (start == stop) { // token for "null" is the empty string val = null; return ""; }  if (buf != null) { buf.setLength(0); }  String tok = null; int i = start; for ( ; i < stop; ++i) { if (val.charAt(i) == delim) { if (i > 0 && val.charAt(i - 1) == '\') { // escaped delimiter; piece together the token if (buf == null) { buf = new StringBuilder(); } buf.append(val, start, i - 1); start = i; } else { // real delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start, i); } else { // had an earlier escape; cobble on the end buf.append(val, start, i); } start = i + 1; break; } } }  if (start < i) { // i == stop; we reached the end without a delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start); } else { // had an earlier escape; cobble on the end buf.append(val, start, stop); } val = null; }  return unquote(tok != null ? tok : buf).intern(); }
[*] target: assertEquals(value2, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( value2, sd. nextToken ( ) )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithMuchOfOne() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(3, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { BlobConfigSourceBuilder builder = BlobConfigSourceBuilder.builder() .setBlobClient(blobClient) .setBlobName("testBlob.properties") .setContainerName("testContainer");  when(blobClient.getBlobName()).thenReturn("testBlob.properties");   ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  BlobConfigSource blobConfigSource = (BlobConfigSource) configSourcePackage.getConfigSource(); assertTrue(blobConfigSource.hasStream()); assertEquals("properties", blobConfigSource.format()); }
build() throws GestaltException { if (blobClient == null) { Objects.requireNonNull(endpoint, "Must provided either a BlobClient or a valid endpoint"); Objects.requireNonNull(blobName, "Must provided either a BlobClient or a valid blobName"); Objects.requireNonNull(containerName, "Must provided either a BlobClient or a valid containerName");  BlobClientBuilder blobClientBuilder = new BlobClientBuilder() .endpoint(endpoint) .blobName(blobName) .containerName(containerName);  if (credential != null) { blobClientBuilder.credential(credential); }  return buildPackage(new BlobConfigSource(blobClientBuilder.buildClient())); } else { return buildPackage(new BlobConfigSource(blobClient)); } }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: ReflectiveOperationException { MarketoFooter footer = getModel(MarketoFooter.class, CURRENT_PAGE_PATH); MarketoConfBasicInfo marketoConfig = footer.getMarketoConfBasicInfo(); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"dx/content/components/marketo"}, marketoConfig.getMarketoComponentTypes()); assertEquals("//app-ab12.marketo.com", marketoConfig.getBaseUrl()); assertEquals("123-shs-456", marketoConfig.getMunchkinId()); }
getMarketoConfBasicInfo() { return marketoConfBasicInfo; }
[*] target: assertNotNull(marketoConfig)
[-] pred: org. junit. Assert. assertNotNull ( marketoConfig )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(10, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  assertEquals(storage, builder.getStorage()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testObject", builder.getObjectName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  GCSConfigSource gcsConfigSource = (GCSConfigSource) configSourcePackage.getConfigSource(); assertTrue(gcsConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new GCSConfigSource(storage, bucketName, objectName, tags)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: test_6_getMonitorCalledWithDifferentNodeKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeNEW.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Ensuring monitor is the same one and not creating a new one final IMonitor monitorOneDupe = monitorService.getMonitor(nodeKeys, info, propertySet); assertEquals(monitorOne, monitorOneDupe);  // Ensuring monitors are not the same as they have different keys // "any.node.domain" compared to "nodeNEW.domain" final IMonitor monitorTwo = monitorService.getMonitor(NODE_KEYS, info, propertySet); "<AssertPlaceHolder>"; assertNotEquals(monitorOne, monitorTwo); }
getMonitor(Set<String> nodeKeys, HostInfo hostInfo, PropertySet propertySet) { return this.threadContainer.getOrCreateMonitor(nodeKeys, () -> monitorInitializer.createMonitor(hostInfo, propertySet, this)); }
[*] target: assertNotNull(monitorTwo)
[-] pred: org. junit. Assert. assertNotNull ( monitorTwo )
************************************
************************************
[+] input: generateMidWalkForEntity() { try { HdtWalkGenerator parser = new HdtWalkGenerator(loadFile("swdf-2012-11-28.hdt")); String concept = "http://data.semanticweb.org/workshop/semwiki/2010/programme-committee-member";  for (int depth = 1; depth < 10; depth++) { List<String> walk1 = parser.generateMidWalkForEntity(concept, depth); "<AssertPlaceHolder>"; assertTrue(walk1.size() <= depth * 2 + 1, "The walk is supposed to have at most " + (depth * 2 + 1) + " elements. It has: " + walk1.size() + "\nWalk:\n" + walk1); assertTrue(walk1.size() >= 3, "The walk must consist of at least 3 elements. Walk:\n" + walk1);  String[] walkArray = new String[walk1.size()]; for (int i = 0; i < walkArray.length; i++) { walkArray[i] = walk1.get(i); } String hdtPath = loadFile("swdf-2012-11-28.hdt").getAbsolutePath(); try { HDT hdtDataSet = HDTManager.loadHDT(hdtPath); for (int i = 2; i < walkArray.length - 1; i += i + 2) { IteratorTripleString iterator = hdtDataSet.search(walkArray[i - 2], walkArray[i - 1], walkArray[i]); assertTrue(iterator.hasNext(), "The following triple appeared in the walk but not in the data set:\n" + walkArray[i - 2] + " " + walkArray[i - 1] + " " + walkArray[i] + "\nSentence:\n" + walk1); } } catch (NotFoundException | IOException e) { fail("Exception", e); } } } catch (IOException ioe) { LOGGER.error("HDT Init error."); fail("Init should not fail."); } }
generateMidWalkForEntity(String entity, int depth) { LinkedList<String> result = new LinkedList<>();  String nextElementPredecessor = entity; String nextElementSuccessor = entity;  // initialize result result.add(entity);  // variable to store the number of iterations performed so far int currentDepth = 0;  while (currentDepth < depth) { currentDepth++;  // randomly decide whether to use predecessors or successors int randomPickZeroOne = ThreadLocalRandom.current().nextInt(2);  if (randomPickZeroOne == 0) { // predecessor try { IteratorTripleString iterator = hdtDataSet.search("", "", nextElementPredecessor); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; while (iterator.hasNext()) { ts = iterator.next(); candidates.add(ts); }  if (candidates.size() > 0) { TripleString drawnTriple = Util.randomDrawFromSet(candidates);  // add walks from the front (walk started before entity) result.addFirst(drawnTriple.getPredicate().toString()); result.addFirst(drawnTriple.getSubject().toString()); nextElementPredecessor = drawnTriple.getSubject().toString(); }  } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a predecessor.", e); } } else { // successor try { IteratorTripleString iterator = hdtDataSet.search(nextElementSuccessor, "", ""); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; CharSequence objectCharSequence; while (iterator.hasNext()) { ts = iterator.next(); objectCharSequence = ts.getObject(); if (objectCharSequence.charAt(0) == '"') { continue; } candidates.add(ts); } if (candidates.size() > 0) { TripleString stringToAdd = Util.randomDrawFromSet(candidates);  // add next walk iteration result.addLast(stringToAdd.getPredicate().toString()); result.addLast(stringToAdd.getObject().toString()); nextElementSuccessor = stringToAdd.getObject().toString(); } } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a successor.", e); } } } return result; }
[*] target: assertNotNull(walk1)
[-] pred: org. junit. Assert. assertNotNull ( walk1 )
************************************
************************************
[+] input: shouldLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(0, 2), null); "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).get("ID")); assertEquals(2, posts.get(1).get("ID")); } }
getMapper(Class<T> type);
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .withRequestBody( new JsonWithPropertiesPattern(Map.of("display_name", "myaccount", "description", "mydesc"))) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value())));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", false);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>";  assertEquals("Created Service Account.", spec.getDescription()); assertEquals("CREATED_service_account", spec.getDisplayName()); assertEquals("sa-xy123", spec.getResourceId()); assertNull(spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealInfo", infoProto.getClassName()); RealInfoProto proto = infoProto.getSerializedData().unpack(RealInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[Si]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSingleQuote() { final String expression = "'Someone\'s CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Someone's CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: updateGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组1儿子"); dto.setInfo("测试分组1儿子info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertEquals(selected.getName(), "测试分组1儿子"); assertEquals(selected.getInfo(), "测试分组1儿子info"); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("fi#test.pdf", indexes.get(i).get(SK).s()); assertEquals("test.pdf", indexes.get(i).get("path").s()); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: JsonProcessingException { // Create a user and write to Kafka User user = new User("11111", "John", "Wick"); producer.writeToKafka(user);  // Read the message (John Wick user) with a test consumer from Kafka and assert its properties ConsumerRecord<String, String> message = records.poll(500, TimeUnit.MILLISECONDS); "<AssertPlaceHolder>"; assertEquals("11111", message.key()); User result = objectMapper.readValue(message.value(), User.class); assertNotNull(result); assertEquals("John", result.getFirstName()); assertEquals("Wick", result.getLastName()); }
writeToKafka(User user) { kafkaTemplate.send(topic, user.getUuid(), user); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: GestaltException { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertNotNull(configSource.hasList()); assertTrue(configSource.loadList().isEmpty()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSpace() { final String expression = "'Some CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Some CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: toModel_withOfferedResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentationWithOfferedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("#[SiH]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.end(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
isEnded() { return COMMITTED_UPDATER.get(this) == END; }
[*] target: assertTrue(res.isEnded())
[-] pred: org. junit. Assert. assertTrue ( res. isEnded() )
************************************
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 253; int expectedEventCount = 3; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> allMetrics = new ArrayList<>(); for (String event : events) { allMetrics.addAll(parseMetrics(event)); } Assertions.assertEquals(metricCount, allMetrics.size()); for (MetricDefinition metric : allMetrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
serialize() throws JsonProcessingException { if (rootNode.metrics().size() <= Constants.MAX_METRICS_PER_EVENT && !anyMetricWithTooManyDataPoints(rootNode)) { return Arrays.asList(this.rootNode.serialize()); } else { List<RootNode> nodes = new ArrayList<>(); Map<String, MetricDefinition> metrics = new HashMap<>(); Queue<MetricDefinition> metricDefinitions = new LinkedList<>(rootNode.metrics().values()); while (!metricDefinitions.isEmpty()) { MetricDefinition metric = metricDefinitions.poll();  if (metrics.size() == Constants.MAX_METRICS_PER_EVENT || metrics.containsKey(metric.getName())) { nodes.add(buildRootNode(metrics)); metrics = new HashMap<>(); }  if (metric.getValues().size() <= Constants.MAX_DATAPOINTS_PER_METRIC) { metrics.put(metric.getName(), metric); } else { metrics.put( metric.getName(), new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList(0, Constants.MAX_DATAPOINTS_PER_METRIC))); metricDefinitions.offer( new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList( Constants.MAX_DATAPOINTS_PER_METRIC, metric.getValues().size()))); } } if (!metrics.isEmpty()) { nodes.add(buildRootNode(metrics)); } List<String> strings = new ArrayList<>(); for (RootNode node : nodes) { strings.add(node.serialize()); } return strings; } }
[*] target: assertEquals(expectedEventCount, events.size())
[-] pred: org. junit. Assert. assertEquals ( expectedEventCount, events. size ( ) )
************************************
************************************
[+] input: shouldProperlyGetGroupById() { //given Integer androidGroupId = 16;  //when GroupDiscussionInfo groupById = groupClient.getGroupById(androidGroupId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(16, groupById.getId()); Assertions.assertEquals(TECH, groupById.getType()); Assertions.assertEquals("android", groupById.getKey()); }
getGroupById(Integer id);
[*] target: assertNotNull(groupById)
[-] pred: org. junit. Assert. assertNotNull ( groupById )
************************************
************************************
[+] input: NoSuchMethodException { final SpringMvcRouteHandlerLocatorFactory factory = new SpringMvcRouteHandlerLocatorFactory(); final DeployContext<RestlightOptions> ctx = mock(DeployContext.class); when(ctx.options()).thenReturn(RestlightOptionsConfigure.defaultOpts()); RouteHandlerLocator locator = factory.locator(ctx); assertNotNull(locator); assertEquals(SpringMvcRouteHandlerLocatorFactory.HandlerLocator.class, locator.getClass());  final InvocableMethod method = mock(InvocableMethod.class); when(method.beanType()).thenReturn((Class) SpringMvcRouteHandlerLocatorFactoryTest.class); when(method.method()) .thenReturn(SpringMvcRouteHandlerLocatorFactoryTest.class.getDeclaredMethod("forTest"));  final HttpResponseStatus ret = ((SpringMvcRouteHandlerLocatorFactory.HandlerLocator) locator) .getCustomResponse(method);  "<AssertPlaceHolder>"; assertEquals(HttpResponseStatus.NOT_FOUND.code(), ret.code()); assertEquals("foo", ret.reasonPhrase()); }
getCustomResponse(InvocableMethod handlerMethod) { return ResponseStatusUtils.getCustomResponse(handlerMethod.beanType(), handlerMethod.method()); }
[*] target: assertNotNull(ret)
[-] pred: org. junit. Assert. assertNotNull ( ret )
************************************
************************************
[+] input: generatorTest() { MainConfig config = new MainConfig(); config.setKeyManagementProfile(new KeyManagementProfile()); config.getKeyManagementProfile().setKeyGeneratorProfile(new KeyGeneratorProfile()); config.getKeyManagementProfile().getKeyGeneratorProfile().setKeySize(2048);  RsaKeyGenerator underTest = new RsaKeyGenerator(config);  KeyGenerator.GeneratedKey key = underTest.generateJWTSigningKey(); "<AssertPlaceHolder>"; assertNotNull(key.keyPair); assertNotNull(key.getKeyUsedToVerify()); }
generateJWTSigningKey() { int keySize = config.getKeyManagementProfile().getKeyGeneratorProfile().getKeySize(); try { KeyPairGenerator factory = KeyPairGenerator.getInstance("RSA"); factory.initialize(keySize); KeyPair newPair = factory.generateKeyPair(); return new GeneratedKey(newPair); } catch (NoSuchAlgorithmException e) { throw new ConfigurationException("Configured keySize in KeyGeneratorProfile of MainConfig is not working for algorithm RSA. Configured size: " + keySize, e); }  }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
************************************
[+] input: toModel_withRequestedResources_returnContractViewWithRequestsLink() { /* ARRANGE */ final var contract = getContractWithRequestedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getContractRequestedResourcesLink(contract.getId()), requestsLink.get().getHref()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var duration = Duration.ofSeconds(14); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(DURATION, duration.toMillis()) .put(DESC, MISSING) .put(SUCCEEDED, true); var expectedEvent = new Event(JFR_COMPILATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var eventType = mock(EventType.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDuration()).thenReturn(duration); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getValue(METHOD)).thenReturn(null); when(event.hasField(SUCCEEDED)).thenReturn(true); when(event.getBoolean(SUCCEEDED)).thenReturn(true); when(event.getEventType()).thenReturn(eventType);  when(eventThread.getJavaName()).thenReturn(threadName); when(eventType.getName()).thenReturn(EVENT_NAME);  var mapper = new JITCompilationMapper(); assertTrue(mapper.test(event));  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent event) { long timestamp = event.getStartTime().toEpochMilli(); Duration duration = event.getDuration(); Attributes attr = new Attributes(); if (hasField(event, METHOD, SIMPLE_CLASS_NAME)) { attr.put(DESC, MethodSupport.describeMethod(event.getValue(METHOD))); } attr.put(DURATION, duration.toMillis()); attr.put(SUCCEEDED, Workarounds.getSucceeded(event)); RecordedThread threadId = null; if (hasField(event, EVENT_THREAD, SIMPLE_CLASS_NAME)) { threadId = event.getThread(EVENT_THREAD); } attr.put(THREAD_NAME, threadId == null ? null : threadId.getJavaName()); return Collections.singletonList(new Event(JFR_COMPILATION, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: startCloseTest() { try { boolean isClosing = channel.isClosing(); Assertions.assertFalse(isClosing); header.startClose(); isClosing = channel.isClosing(); Assertions."<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); } }
startClose() { channel.startClose(); }
[*] target: assertTrue(isClosing)
[-] pred: org. junit. Assert. assertTrue ( isClosing )
************************************
************************************
[+] input: toModel_withOfferedResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContractWithOfferedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: toModel_noResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContract();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: resetPasswordTokenNotMatches() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); testSecurityToken.setToken("wrong-token"); User user = getDefaultUser(); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); assertNotNull(getUserSecurityToken(user, SecurityTokenType.RESET)); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: toModel_validInput_returnAgreementView() { /* ARRANGE */ final var agreement = getAgreement();  /* ACT */ final var result = agreementViewAssembler.toModel(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(agreement.getValue(), result.getValue()); Assertions.assertEquals(agreement.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(agreement.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(agreement.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(agreement.isConfirmed(), result.isConfirmed());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getAgreementLink(agreement.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getAgreementArtifactsLink(agreement.getId()), artifactsLink.get().getHref()); }
toModel(final Agreement agreement) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(agreement, AgreementView.class); view.add(getSelfLink(agreement.getId()));  final var artifactLink = WebMvcLinkBuilder .linkTo(methodOn(AgreementsToArtifactsController.class) .getResource(agreement.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns:Ah="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>" + "</bar></foo>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: createBusinessAppHdrV01() { BusinessAppHdrV01 h = AppHdrFactory.createBusinessAppHdrV01( "AAAAUSXXXXX", "BBBBUSXXXXX", "REF12345", new MxId("pacs.008.001.08")); "<AssertPlaceHolder>"; assertNull(h.getBizSvc()); assertEquals("AAAAUSXXXXX", h.getFr().getFIId().getFinInstnId().getBICFI()); assertEquals("BBBBUSXXXXX", h.getTo().getFIId().getFinInstnId().getBICFI()); assertEquals("REF12345", h.getBizMsgIdr()); assertEquals("pacs.008.001.08", h.getMsgDefIdr());  final String xml = h.xml(); // for BAH v01 the date time must be ISONormalisedDateTime assertTrue(xml.contains("Z</CreDt>")); }
createBusinessAppHdrV01( final String sender, final String receiver, final String reference, final MxId id) { BusinessAppHdrV01 h = new BusinessAppHdrV01();  if (sender != null) { h.setFr(new Party9Choice()); h.getFr().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getFr().getFIId().getFinInstnId().setBICFI(sender); }  if (receiver != null) { h.setTo(new Party9Choice()); h.getTo().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getTo().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getTo().getFIId().getFinInstnId().setBICFI(receiver); }  if (reference != null) { h.setBizMsgIdr(reference); }  if (id != null) { h.setMsgDefIdr(id.id()); }  h.setCreDt(XMLGregorianCalendarUtils.now());  return h; }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testEmpty() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty(); assertEquals("", p.toString()); "<AssertPlaceHolder>"; }
isEmpty() { return predicate == null; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
************************************
[+] input: handleRouteCreationException_returnStatusInternalServerError() { /* ACT */ final var response = exceptionHandler .handleRouteCreationException( new RouteCreationException("Failed to create route."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Failed to create Camel route.", body.get("message")); }
handleRouteCreationException( final RouteCreationException exception) { if (log.isWarnEnabled()) { if (exception != null) { log.warn("Failed to create Camel route. [exception=({})] [cause=({})]", exception.getMessage(), exception.getCause() == null ? "" : exception.getCause().getMessage()); } else { log.warn("Failed to create Camel route."); } }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Failed to create Camel route.");  return new ResponseEntity<>(body, headers, HttpStatus.INTERNAL_SERVER_ERROR); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: updateGroup2() { assertThrows(NotFoundException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); Random random = new Random(); boolean ok = adminService.updateGroup(random.nextInt(100) + 10, dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: getOptions() { String result = WalkGenerationMode.getOptions(); "<AssertPlaceHolder>"; assertFalse(result.endsWith(" ")); assertFalse(result.endsWith("|")); //System.out.println(result); }
getOptions() { String result = ""; for (WalkGenerationMode mode : WalkGenerationMode.values()) { result += mode.toString() + " | "; } result = result.substring(0, result.length() - 3); return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetAttributes() { Map<String, String> attributes = authorvh.getAttributes(context.request()); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"data-author-vh-tablet", "data-author-vh-item-mobile", "data-author-vh-item-desktop"}, attributes.keySet().toArray()); assertEquals("51", attributes.get("data-author-vh-tablet")); assertEquals("12,,", attributes.get("data-author-vh-item-mobile")); assertEquals(",15,", attributes.get("data-author-vh-item-desktop")); }
getAttributes(SlingHttpServletRequest request) { if (DISABLED.equals(WCMMode.fromRequest(request))) { return null; }  Map<String, String> attributes = null; for (Breakpoint breakpoint : RequestUtil.getBreakpoints(request)) { if (breakpoint == null) { continue; } String vh = extractVH(request.getResource(), request, breakpoint); if (vh != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX + breakpoint.key(), vh); } for (String parent : listParentNodeNames) { Resource parentResource = request.getResource().getChild(parent + breakpoint.propertySuffix()); String value = generateItemAttributes(parentResource, request); if (value != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX_ITEM + breakpoint.key(), value); } } } return attributes; }
[*] target: assertNotNull(attributes)
[-] pred: org. junit. Assert. assertNotNull ( attributes )
************************************
************************************
[+] input: testInvalid() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = "12345"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("12345", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: test_should_createClient_ifMessagePackMapperIsChanged() { //given String expectedMappingResult = "Hello";  //when TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client = TarantoolClientFactory.createClient() .withAddresses(SAMPLE_ADDRESS) .withCredentials(SAMPLE_CREDENTIALS) .withDefaultMessagePackMapperConfiguration(mapperBuilder -> mapperBuilder.withObjectConverter(String.class, StringValue.class, object -> ValueFactory.newString(expectedMappingResult)) ) .withConnections(SAMPLE_CONNECTIONS) .withConnectTimeout(SAMPLE_CONNECT_TIMEOUT) .withRequestTimeout(SAMPLE_REQUEST_TIMEOUT) .withReadTimeout(SAMPLE_READ_TIMEOUT) .withEventLoopThreadsNumber(SAMPLE_EVENT_LOOP_THREADS_NUMBER) .build();  TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> configuredClient = TarantoolClientFactory.configureClient(client).build();  String convertedTest = configuredClient.getConfig().getMessagePackMapper() .toValue("Test").asStringValue().asString();  //then "<AssertPlaceHolder>"; assertEquals(ClusterTarantoolTupleClient.class, configuredClient.getClass()); TarantoolClientConfig config = configuredClient.getConfig();  assertTrue(((ClusterTarantoolTupleClient) client).getAddressProvider() .getAddresses().contains(SAMPLE_ADDRESS));  assertNotEquals(SAMPLE_MAPPER, config.getMessagePackMapper());  assertEquals(SAMPLE_CREDENTIALS, config.getCredentials()); assertEquals(SAMPLE_CONNECTIONS, config.getConnections()); assertEquals(SAMPLE_READ_TIMEOUT, config.getReadTimeout()); assertEquals(SAMPLE_REQUEST_TIMEOUT, config.getRequestTimeout()); assertEquals(SAMPLE_CONNECT_TIMEOUT, config.getConnectTimeout()); assertEquals(PARALLEL_ROUND_ROBIN.value(), config.getConnectionSelectionStrategyFactory()); }
build();
[*] target: assertEquals(expectedMappingResult, convertedTest)
[-] pred: org. junit. Assert. assertEquals ( expectedMappingResult, convertedTest )
************************************
************************************
[+] input: testConvertRGB() { Color color = convertPaint(CSSConstants.CSS_FILL_PROPERTY, "rgb(120, 30, 200)", ColorValue.RGB_FUNCTION); "<AssertPlaceHolder>"; assertEquals(120, color.getRed()); assertEquals(30, color.getGreen()); assertEquals(200, color.getBlue()); assertEquals(255, color.getAlpha());  assertNull(context.getColorSpace()); }
convertPaint(Element paintedElement, GraphicsNode paintedNode, Value paintDef, float opacity, BridgeContext ctx) { if (paintDef.getCssValueType() == CssType.TYPED) { switch (paintDef.getPrimitiveType()) { case IDENT: return null; // none case COLOR: return convertColor(paintDef.getColorValue(), opacity, ctx); case URI: return convertURIPaint(paintedElement, paintedNode, paintDef, opacity, ctx); default: break; } } else { // List Value v = paintDef.item(0); switch (v.getPrimitiveType()) { case COLOR: switch ((v.getColorValue()).getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: return convertRGBICCColor(paintedElement, v, paintDef.item(1), opacity, ctx); } break;  case URI: Paint result = silentConvertURIPaint(paintedElement, paintedNode, v, opacity, ctx); if (result != null) { return result; }  v = paintDef.item(1); switch (v.getPrimitiveType()) { case IDENT: return null; // none case COLOR: ColorValue color = v.getColorValue(); switch (color.getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: if (paintDef.getLength() == 2) { return convertColor((RGBColorValue) color, opacity); } else { return convertRGBICCColor(paintedElement, v, paintDef.item(2), opacity, ctx); } } break; default: break; }  default: break; } } throw new IllegalArgumentException("Paint argument is not an appropriate CSS value"); }
[*] target: assertNotNull(color)
[-] pred: org. junit. Assert. assertNotNull ( color )
************************************
************************************
[+] input: IOException { Document fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6_frag.json"); Document toDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc.merge(fromDoc, null); String expected = getCompressedJson("/jdocs/sample_6_1_expected.json"); String actual = toDoc.getJson(); assertEquals(expected, actual);  fromDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9_frag.json"); toDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_9_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // this tests the merging of value arrays fromDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10_frag.json"); toDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_10_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: GestaltException { // Arrange Map<String, String> customConfig = new HashMap<>(); customConfig.put("db.port", "1234"); customConfig.put("db.password", "password"); customConfig.put("db.user", "notroot");  MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder(); builder.setCustomConfig(customConfig);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertTrue(configSource.hasList()); assertEquals(3, configSource.loadList().size()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: test3() { int[] nums = {1, 1, 2, 2, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testGetSecretsProvider_withoutParameter_shouldCreateDefaultClient() {  // Act SecretsProvider secretsProvider = ParamManager.getSecretsProvider();  // Assert "<AssertPlaceHolder>"; assertNotNull(secretsProvider.getClient()); }
getSecretsProvider() { return getProvider(SecretsProvider.class); }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
************************************
[+] input: testInvalid() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = "1"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("1", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: demoAndV2BatchIdStringFormatIsCorrect() { BatchId id = new BatchId(123, Optional.of(45)); String stringId = "123_45"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: testIsStop() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); verify(recording, never()).stop(); jfrRecorder.stop(); verify(recording).stop(); "<AssertPlaceHolder>"; }
isStarted() { return (recording != null) && RecordingState.RUNNING.equals(recording.getState()); }
[*] target: assertFalse(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertFalse ( jfrRecorder. isStarted() )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithNoneStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  when(topicDraftService.getAllTopicDrafts()).thenReturn(new ArrayList<>());  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(0, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: test3() { Solution solution = new Solution(); Solution2 solution2 = new Solution2(); TreeNode first = LeetcodeUtils.initializeTree(new Integer[]{}); TreeNode second = LeetcodeUtils.initializeTree(new Integer[]{5, 1, 7, 0, 2}); List<Integer> expected = Arrays.asList(0, 1, 2, 5, 7); assertEquals(expected, solution.getAllElements(first, second)); "<AssertPlaceHolder>"; }
getAllElements(TreeNode root1, TreeNode root2) { Stack<StackNode> first = new Stack<>(); if (root1 != null) { first.push(new StackNode(root1)); while (first.peek().root.left != null) { first.push(new StackNode(first.peek().root.left)); } } Stack<StackNode> second = new Stack<>(); if (root2 != null) { second.push(new StackNode(root2)); while (second.peek().root.left != null) { second.push(new StackNode(second.peek().root.left)); } } LinkedList<Integer> ans = new LinkedList<>(); while (!first.isEmpty() || !second.isEmpty()) { if (!first.isEmpty() && !second.isEmpty()) { StackNode firstPeek = first.peek(); StackNode secondPeek = second.peek(); Stack<StackNode> toProcess = firstPeek.root.val < secondPeek.root.val ? first : second; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } else { Stack<StackNode> toProcess = first.isEmpty() ? second : first; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } } return ans; }
[*] target: assertEquals(expected, solution2.getAllElements(first, second))
[-] pred: org. junit. Assert. assertEquals ( expected, solution2. getAllElements ( first, second ) )
************************************
************************************
[+] input: testToBytes() { byte[] expectedBytes = new byte[]{81, 6, -4, -102, -68, -126, 55, 85, -127, 54, -46, -119}; Xid id = new Xid(expectedBytes);  assertArrayEquals(expectedBytes, id.toByteArray());  ByteBuffer buffer = ByteBuffer.allocate(12); id.putToByteBuffer(buffer); "<AssertPlaceHolder>"; }
putToByteBuffer(final ByteBuffer buffer) { paramNotNull("buffer", buffer); isTrue("buffer.remaining() >=12", buffer.remaining() >= ID_LENGTH);  buffer.put(int3(timestamp)); buffer.put(int2(timestamp)); buffer.put(int1(timestamp)); buffer.put(int0(timestamp)); buffer.put(int2(randomValue1)); buffer.put(int1(randomValue1)); buffer.put(int0(randomValue1)); buffer.put(short1(randomValue2)); buffer.put(short0(randomValue2)); buffer.put(int2(counter)); buffer.put(int1(counter)); buffer.put(int0(counter)); }
[*] target: assertArrayEquals(expectedBytes, buffer.array())
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, buffer. array ( ) )
************************************
************************************
[+] input: testGetMetaAnnotations() { List<Annotation> metaAnnotations = getMetaAnnotations(Service.class, a -> isSameType(a, Inherited.class)); "<AssertPlaceHolder>"; assertEquals(Inherited.class, metaAnnotations.get(0).annotationType());  metaAnnotations = getMetaAnnotations(Service.class); assertEquals(2, metaAnnotations.size()); assertEquals(Inherited.class, metaAnnotations.get(0).annotationType()); assertEquals(Deprecated.class, metaAnnotations.get(1).annotationType()); }
isSameType(Annotation annotation, Class<? extends Annotation> annotationType) { if (annotation == null || annotationType == null) { return false; } return Objects.equals(annotation.annotationType(), annotationType); }
[*] target: assertEquals(1, metaAnnotations.size())
[-] pred: org. junit. Assert. assertEquals ( 1, metaAnnotations. size ( ) )
************************************
************************************
[+] input: testUnsupportedGcEventName() { var event = mock(RecordedEvent.class); var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000;  List<Metric> expected = List.of(defaultMinorGcSummary, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn("FOO"); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: updateUserInfo1() { assertThrows(ForbiddenException.class, () -> { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Arrays.asList(random.nextInt(100), random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }); }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: resetPasswordUserNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.empty());  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: testPostDM() { DmEvent result = twitterClient.postDm("Hello world !", "1120050519182016513"); "<AssertPlaceHolder>"; assertNotNull(result.getEvent().getText()); }
postDm(String text, String userId);
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testISOWithMilli() { final String ts = "2021-11-16T12:02:41.930486Z"; final Instant i = TimeUtil.fromISOInstant(ts); assertNotNull(i); String time = TimeUtil.toISOInstant(i); "<AssertPlaceHolder>"; }
toISOInstant(@NonNull Instant instant) { return ISO_INSTANT_FORMATTER.format(instant); }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[SiH2]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: testReadNamspaceSingleQuote2() { final String xml = "<message>" + "<AppHdr xmlns='urn:iso:std:iso:20022:tech:xsd:head.001.001.01' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<Fr><FIId><FinInstnId><BICFI>BNANAOLUXXX</BICFI></FinInstnId></FIId></Fr>" + "	<To><FIId><FinInstnId><BICFI>CIYUCNBAFUZ</BICFI></FinInstnId></FIId></To>" + "	<BizMsgIdr>asdfsd</BizMsgIdr>" + "	<MsgDefIdr>catm.004.001.02</MsgDefIdr>" + "	<CreDt>2016-09-16T22:34:48Z</CreDt>" + "</AppHdr>" + "<Document xmlns='urn:iso:std:iso:20022:tech:xsd:catm.004.001.02' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<TermnlMgmtRjctn>" + "		<Hdr>" + "			<DwnldTrf>false</DwnldTrf>" + "			<FrmtVrsn>asdfsd</FrmtVrsn>" + "			<CreDtTm>2016-09-17T10:55:10</CreDtTm>" + "		</Hdr>" + "		<Rjct>" + "			<RjctRsn>VERS</RjctRsn>" + "		</Rjct>" + "	</TermnlMgmtRjctn>" + "</Document>" + "</message>"; MxCatm00400102 mx = (MxCatm00400102) new MxReadImpl().read(MxCatm00400102.class, xml, MxCatm00400102._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("BNANAOLUXXX", mx.getAppHdr().from()); assertEquals(RejectReason1Code.VERS, mx.getTermnlMgmtRjctn().getRjct().getRjctRsn()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0.zk.md"; String group = null; String application = "vic.zk.md"; MetadataIdentifier providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application);  String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNotNull(fileContent);  deletePath(providerMetadataIdentifier, zookeeperMetadataReport); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 1000, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNull(fileContent);   providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions."<AssertPlaceHolder>";  Gson gson = new Gson(); FullServiceDefinition fullServiceDefinition = gson.fromJson(fileContent, FullServiceDefinition.class); Assertions.assertEquals(fullServiceDefinition.getParameters().get("paramTest"), "zkTest"); }
getNodePath(BaseMetadataIdentifier metadataIdentifier) { return toRootDir() + metadataIdentifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentation();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: createAndParseToken_ok() { String username = "test"; String token = JwtUtils.createToken(username); Assertions.assertTrue(token.startsWith("Bearer")); String username_parsed = JwtUtils.parseUsername(token); Assertions."<AssertPlaceHolder>"; }
parseUsername(String token) { token = token.substring(7); SecretKey key = Keys.hmacShaKeyFor(SECRET_TOKEN.getBytes(StandardCharsets.UTF_8)); return Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token).getBody().getAudience(); }
[*] target: assertEquals(username, username_parsed)
[-] pred: org. junit. Assert. assertEquals ( username, username_parsed )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealIDInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0, 12345); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealIDInfo", infoProto.getClassName()); RealIDInfoProto proto = infoProto.getSerializedData().unpack(RealIDInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares()); assertEquals(12345, proto.getId());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: changeUserPassword() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "123456"); assertTrue(valid);  ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(user.getId(), dto1); "<AssertPlaceHolder>";  valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "147258"); assertTrue(valid); }
changeUserPassword(Integer id, ResetPasswordDTO dto) { throwUserNotExistById(id); return userIdentityService.changePassword(id, dto.getNewPassword()); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: IOException { final String xml = Lib.readResource("pacs.008.001.07.xml"); // System.out.println(xml); assertNotNull(xml); final MxPacs00800107 mx = (MxPacs00800107) new MxReadImpl().read(MxPacs00800107.class, xml, MxPacs00800107._classes); // System.out.println(ToStringBuilder.reflectionToString(mx)); "<AssertPlaceHolder>"; assertNotNull(mx.getFIToFICstmrCdtTrf()); assertNotNull( "123452342", mx.getFIToFICstmrCdtTrf().getCdtTrfTxInf().get(0).getPmtId().getTxId()); // System.out.println(mx); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: deleteMemberFromHouse() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID); memberToDelete.setCommunityHouse(communityHouse);  houseMembers.add(memberToDelete); communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(memberToDelete.getCommunityHouse()); assertFalse(communityHouse.getHouseMembers().contains(memberToDelete)); verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository).save(communityHouse); verify(houseMemberRepository).save(memberToDelete); }
deleteMemberFromHouse(String houseId, String memberId) { Optional<CommunityHouse> communityHouseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return communityHouseOptional.map(communityHouse -> { boolean isMemberRemoved = false; if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) { Set<HouseMember> houseMembers = communityHouse.getHouseMembers(); for (HouseMember member : houseMembers) { if (member.getMemberId().equals(memberId)) { houseMembers.remove(member); communityHouse.setHouseMembers(houseMembers); communityHouseRepository.save(communityHouse); member.setCommunityHouse(null); houseMemberRepository.save(member); isMemberRemoved = true; break; } } } return isMemberRemoved; }).orElse(false); }
[*] target: assertTrue(isMemberDeleted)
[-] pred: org. junit. Assert. assertTrue ( isMemberDeleted )
************************************
************************************
[+] input: addCustomConfig() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234") .addCustomConfig("db.password", "password") .addCustomConfig("db.user", "notroot");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(3, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); assertEquals("password", customConfig.get("db.password")); assertEquals("notroot", customConfig.get("db.user")); }
getCustomConfig() { return customConfig; }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
************************************
[+] input: toModel_validInput_returnContractRuleView() { /* ARRANGE */ final var contractRule = getContractRule();  /* ACT */ final var result = contractRuleViewAssembler.toModel(contractRule);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contractRule.getTitle(), result.getTitle()); Assertions.assertEquals(contractRule.getValue(), result.getValue()); Assertions.assertEquals(contractRule.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contractRule.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contractRule.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractRuleLink(contractRule.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getContractRuleContractsLink(contractRule.getId()), contractsLink.get().getHref()); }
toModel(final ContractRule rule) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(rule, ContractRuleView.class); view.add(getSelfLink(rule.getId()));  final var contractLink = WebMvcLinkBuilder.linkTo(methodOn(RulesToContractsController.class) .getResource(rule.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  StringConfigSourceBuilder builder = StringConfigSourceBuilder.builder(); builder.setConfig(config) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  StringConfigSource stringConfigSource = (StringConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new StringConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: removeTaskNotifyConfigByWorkflowTaskId() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(persistedConfig.getWorkflowTaskId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigByWorkflowTaskId(Long workflowTaskId) { Preconditions.checkNotNull(workflowTaskId, "id of workflow task id should not be null"); return taskNotifyConfigDao.removeByWorkflowTaskId(workflowTaskId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: testInvalid() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = "no-number"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("no-number", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value()))); wireMock.register(authenticatedEndpoint("/service_accounts") .willReturn(okForPlainJson(readTestResource("ccloud/service-account-mapping.json"))));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", true);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>"; assertEquals("123456", spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); wireMock.verifyThat(1, requestedFor(HttpMethod.GET.name(), urlPathEqualTo("/service_accounts"))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: shouldProperlyGetWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupList(GroupRequestArgs requestArgs);  /** * Get all the {@link GroupDiscussionInfo}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testDelete() { Document d = getBaseDocument("/jdocs/sample_1.json");  // nothing should happen d.deletePath("$.laksdlkj");  boolean b = d.pathExists("$.members[0].phones[0].number"); assertEquals(true, b);  d.deletePath("$.members[0].phones[0].number"); b = d.pathExists("$.members[0].phones[0].number"); assertEquals(false, b);  d.deletePath("$.members[0].phones[0]"); int size = d.getArraySize("$.members[0].phones[]"); assertEquals(size, 1);  d.deletePath("$.members[sex=female]"); b = d.pathExists("$.members[sex=female]"); assertEquals(false, b);  String expected = getCompressedJson("/jdocs/sample_4_expected.json"); String actual = d.getJson();  "<AssertPlaceHolder>";  // nothing should happen d.deletePath("$.members[2]"); d.deletePath("$.members[0].phones[1]");  // just to show that we can specify [] to denote we are deleting an array block d.deletePath("$.members[]"); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test1() { int[] nums = {1, 5, 1, 1, 6, 4}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("C1(C)CCCC2C(C)CCCC12"); List<Atom> atomList = frag.getAtomList(); Set<Bond> bonds = new HashSet<Bond>(frag.getBondSet()); bonds.remove(atomList.get(0).getBondToAtom(atomList.get(1))); bonds.remove(atomList.get(6).getBondToAtom(atomList.get(7))); bonds.remove(atomList.get(5).getBondToAtom(atomList.get(11))); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(0), atomList.get(6), bonds); "<AssertPlaceHolder>";  List<Atom> pathLeftRing; List<Atom> pathRightRing; if (atomList.indexOf(paths.get(0).get(0))==2){ pathLeftRing = paths.get(0); pathRightRing = paths.get(1); } else{ pathLeftRing = paths.get(1); pathRightRing = paths.get(0); } assertEquals(2, atomList.indexOf(pathLeftRing.get(0))); assertEquals(3, atomList.indexOf(pathLeftRing.get(1))); assertEquals(4, atomList.indexOf(pathLeftRing.get(2))); assertEquals(5, atomList.indexOf(pathLeftRing.get(3)));  assertEquals(11, atomList.indexOf(pathRightRing.get(0))); assertEquals(10, atomList.indexOf(pathRightRing.get(1))); assertEquals(9, atomList.indexOf(pathRightRing.get(2))); assertEquals(8, atomList.indexOf(pathRightRing.get(3))); }
getPathBetweenAtomsUsingBonds(Atom a1, Atom a2, Set<Bond> peripheryBonds){ List<List<Atom>> paths = new ArrayList<>(); Deque<PathSearchState> stateStack = new ArrayDeque<>(); stateStack.add(new PathSearchState(a1, new ArrayList<>())); while (stateStack.size()>0){ PathSearchState state  =stateStack.removeLast();//depth first traversal List<Atom> orderAtomsVisited = state.getOrderAtomsVisited(); Atom nextAtom = state.getCurrentAtom(); orderAtomsVisited.add(nextAtom); Set<Bond> neighbourBonds = new LinkedHashSet<>(nextAtom.getBonds()); neighbourBonds.retainAll(peripheryBonds); for (Bond neighbourBond : neighbourBonds) { Atom neighbour = neighbourBond.getOtherAtom(nextAtom); if (orderAtomsVisited.contains(neighbour)){//atom already visited by this path continue; } if (neighbour ==a2 ){//target atom found paths.add(new ArrayList<>(orderAtomsVisited.subList(1, orderAtomsVisited.size()))); } else{//add atom to stack, its neighbours will be recursively investigated shortly stateStack.add(new PathSearchState(neighbour, new ArrayList<>(orderAtomsVisited))); } } } return paths; }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
************************************
[+] input: deleteBookingAmenityNotExists() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION)); // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId()); verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
deleteBooking(String amenityId, String bookingId) { Optional<AmenityBookingItem> booking = bookingRepository.findByAmenityBookingItemId(bookingId); return booking.map(bookingItem -> { boolean amenityFound = bookingItem.getAmenity().getAmenityId().equals(amenityId); if (amenityFound) { bookingRepository.delete(bookingItem); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("C1CCCC2CCCCC12"); List<Atom> atomList = frag.getAtomList(); Set<Bond> bonds = new HashSet<Bond>(frag.getBondSet()); bonds.remove(atomList.get(4).getBondToAtom(atomList.get(9))); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(4), atomList.get(9), bonds); "<AssertPlaceHolder>";  List<Atom> pathLeftRing; List<Atom> pathRightRing; if (atomList.indexOf(paths.get(0).get(0))==3){ pathLeftRing = paths.get(0); pathRightRing = paths.get(1); } else{ pathLeftRing = paths.get(1); pathRightRing = paths.get(0); } assertEquals(3, atomList.indexOf(pathLeftRing.get(0))); assertEquals(2, atomList.indexOf(pathLeftRing.get(1))); assertEquals(1, atomList.indexOf(pathLeftRing.get(2))); assertEquals(0, atomList.indexOf(pathLeftRing.get(3)));  assertEquals(5, atomList.indexOf(pathRightRing.get(0))); assertEquals(6, atomList.indexOf(pathRightRing.get(1))); assertEquals(7, atomList.indexOf(pathRightRing.get(2))); assertEquals(8, atomList.indexOf(pathRightRing.get(3))); }
getPathBetweenAtomsUsingBonds(Atom a1, Atom a2, Set<Bond> peripheryBonds){ List<List<Atom>> paths = new ArrayList<>(); Deque<PathSearchState> stateStack = new ArrayDeque<>(); stateStack.add(new PathSearchState(a1, new ArrayList<>())); while (stateStack.size()>0){ PathSearchState state  =stateStack.removeLast();//depth first traversal List<Atom> orderAtomsVisited = state.getOrderAtomsVisited(); Atom nextAtom = state.getCurrentAtom(); orderAtomsVisited.add(nextAtom); Set<Bond> neighbourBonds = new LinkedHashSet<>(nextAtom.getBonds()); neighbourBonds.retainAll(peripheryBonds); for (Bond neighbourBond : neighbourBonds) { Atom neighbour = neighbourBond.getOtherAtom(nextAtom); if (orderAtomsVisited.contains(neighbour)){//atom already visited by this path continue; } if (neighbour ==a2 ){//target atom found paths.add(new ArrayList<>(orderAtomsVisited.subList(1, orderAtomsVisited.size()))); } else{//add atom to stack, its neighbours will be recursively investigated shortly stateStack.add(new PathSearchState(neighbour, new ArrayList<>(orderAtomsVisited))); } } } return paths; }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
************************************
[+] input: updateGroup1() { assertThrows(ForbiddenException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); GroupDO group1 = GroupDO.builder().name("测试分组2").info("just for test").build(); groupMapper.insert(group); groupMapper.insert(group1);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: testIsSameMajorVersionButNewer() { final BusinessRule r1 = new BusinessRule(); r1.setVersion("2.1.0");  final BusinessRule r2 = new BusinessRule(); r2.setVersion("2.1.0");  assertTrue(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.1.1"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("1.1.0"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.0.0"); "<AssertPlaceHolder>"; }
isSameMajorVersionButNewer(final BusinessRule other) { return version().getMajor().equals(other.version().getMajor()) && version().isGreaterThanOrEqualTo(other.version()); }
[*] target: assertTrue(r1.isSameMajorVersionButNewer(r2))
[-] pred: org. junit. Assert. assertTrue ( r1. isSameMajorVersionButNewer(r2 ) )
************************************
************************************
[+] input: testParseWithPrefix() { final String xml = "<h:AppHdr xmlns:h="urn:swift:xsd:$ahV10">\n" + "    <h:From>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=abcdchzz,o=swift</h:Id>\n" + "    </h:From>\n" + "    <h:To>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=dcbadeff,o=swift</h:Id>\n" + "    </h:To>\n" + "    <h:MsgRef>11308917</h:MsgRef>\n" + "    <h:CrDate>2013-12-23T15:50:00</h:CrDate>\n" + "</h:AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testPostAndGetBody() { String testValue = "testValue"; when(restTemplate.postForEntity(startsWith("http://document:8080"), any(HttpEntity.class), eq(String.class))) .thenReturn(new ResponseEntity<>(testValue, HttpStatus.OK)); String tenantId = "smart-upload"; String responseBody = buildRestHelper(null) .withQueryParam("tenantId", tenantId) .withQueryParam("userId", "userId_123") .withHeader("header1", "test_header") .withHeader("header2", List.of("value1", "value2")) .postAndGetBody(restTemplate, String.class);  "<AssertPlaceHolder>"; verify(restTemplate).postForEntity(uriCaptor.capture(), httpEntityCaptor.capture(), responseTypeCaptor.capture()); assertEquals("http://document:8080/documents/search/?tenantId=" + tenantId + "&userId=userId_123", uriCaptor.getValue()); assertEquals(String.class, responseTypeCaptor.getValue()); HttpEntity<List<UUID>> httpEntity = httpEntityCaptor.getValue(); assertTrue(httpEntity.getHeaders().getAccept().contains(MediaType.APPLICATION_JSON)); assertEquals(MediaType.APPLICATION_FORM_URLENCODED, httpEntity.getHeaders().getContentType()); assertTrue(httpEntity.getHeaders().get("Cookie").contains(TEST_COOKIE)); assertTrue(httpEntity.getHeaders().get("Authorization").contains("Bearer 1234")); assertTrue(httpEntity.getHeaders().get("header1").contains("test_header")); assertTrue(httpEntity.getHeaders().get("header2").containsAll(List.of("value1", "value2"))); }
postAndGetBody(RestTemplate restTemplate, Class<T> responseType) { return post(restTemplate, responseType).getBody(); }
[*] target: assertEquals(testValue, responseBody)
[-] pred: org. junit. Assert. assertEquals ( testValue, responseBody )
************************************
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/VCUnsigned.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); VerifiablePresentation<VerifiableIndyCredential> signed = mgmt.sign(vp).orElseThrow(); assertNotNull(signed.getProof());  Boolean verified = mgmt.verify(id.getVerkey().orElseThrow(), signed); "<AssertPlaceHolder>"; }
verify(String verkey, VerifiablePresentation<VerifiableIndyCredential> inputVp) { Boolean result = Boolean.FALSE; try { Optional<VerifyResponse> state = acaPy.jsonldVerify(verkey, inputVp); if (state.isPresent()) { result = state.get().isValid(); } } catch (IOException e) { log.error(e.getMessage(), e); throw new NetworkException(e.getMessage()); } return result; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.Iface.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());  Demo.echoString_result methodResult = new Demo.echoString_result();  methodResult.success = "Hello, World!";  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.Iface.class.getName()); // path protocol.writeString(Demo.Iface.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); methodResult.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  byte[] buf = new byte[4 + bos.size()]; System.arraycopy(bos.toByteArray(), 0, buf, 4, bos.size());  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(buf);  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertEquals(request.getId(), response.getId());  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.getValue() instanceof String);  Assertions.assertEquals(methodResult.success, result.getValue());  }
decode(Channel channel, ChannelBuffer buffer) throws IOException {  int available = buffer.readableBytes();  if (available < MESSAGE_SHORTEST_LENGTH) {  return DecodeResult.NEED_MORE_INPUT;  } else {  TIOStreamTransport transport = new TIOStreamTransport(new ChannelBufferInputStream(buffer));  TBinaryProtocol protocol = new TBinaryProtocol(transport);  short magic; int messageLength;  try { //                protocol.readI32(); // skip the first message length byte[] bytes = new byte[4]; transport.read(bytes, 0, 4); magic = protocol.readI16(); messageLength = protocol.readI32();  } catch (TException e) { throw new IOException(e.getMessage(), e); }  if (MAGIC != magic) { throw new IOException("Unknown magic code " + magic); }  if (available < messageLength) { return DecodeResult.NEED_MORE_INPUT; }  return decode(protocol);  }  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
************************************
[+] input: confirmEmailUsedToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); testSecurityToken.setUsed(true); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  String site = siteId != null ? siteId + "/" : "";  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  Map<String, AttributeValue> map = indexes.get(0); assertFalse(dbService.exists(map.get(PK), map.get(SK))); verifyIndex(map, site + "global#folders#", "fi#test.pdf", "test.pdf", false); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseId() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); CommunityHouse testHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse(TEST_HOUSE_ID); Set<HouseMember> testHouseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); testHouse.setHouseMembers(testHouseMembers); testCommunity.getHouses().add(testHouse);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.of(testHouse));  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; assertFalse(testCommunity.getHouses().contains(testHouse)); verify(communityRepository).save(testCommunity); testHouse.getHouseMembers() .forEach(houseMember -> verify(houseService).deleteMemberFromHouse(TEST_HOUSE_ID, houseMember.getMemberId())); verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verify(communityHouseRepository).deleteByHouseId(TEST_HOUSE_ID); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertTrue(houseDeleted)
[-] pred: org. junit. Assert. assertTrue ( houseDeleted )
************************************
************************************
[+] input: batchIdStringFormatIsCorrect() { BatchId id = new BatchId(123); String stringId = "123"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: should_return_false_if_checkout_time_is_equal_or_before_checkin_time() { SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  boolean result = validator.verify(newPayload, mockValidatorContext); assertFalse(result);  newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME - 1).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
verify(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) { List<CheckIn> checkins = submissionPayload.getCheckInsList(); return checkins.stream() .map(checkin -> verifyTransmissionRiskLevel(checkin, validatorContext) && verifyLocationIdLength(checkin, validatorContext) && verifyStartIntervalNumber(checkin, validatorContext) && verifyEndIntervalNumber(checkin, validatorContext)) .allMatch(checkinValidation -> checkinValidation.equals(Boolean.TRUE)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: should_serialize_object_and_deserialize_from_bytes() { JacksonSerializer jacksonSerializer = new JacksonSerializer(); SerializeObject serializeObject = new SerializeObject("java", "Java"); byte[] bytes = jacksonSerializer.serialize(serializeObject); assertNotEquals(bytes.length, 0); SerializeObject deserializeObject = jacksonSerializer.deserialize(bytes, SerializeObject.class); "<AssertPlaceHolder>"; }
deserialize(byte[] bytes, Class<T> clazz) { T object = null; try { object = objectMapper.readValue(bytes, clazz); } catch (IOException e) { e.printStackTrace(); } return object; }
[*] target: assertEquals(serializeObject, deserializeObject)
[-] pred: org. junit. Assert. assertEquals ( serializeObject, deserializeObject )
************************************
************************************
[+] input: test_update() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); assertEquals(info, refTableVersionInfo); refTableVersionInfo.setTableName("table_update"); refTableVersionRepository.update(refTableVersionInfo); RefTableVersionInfo refTableVersionInfo_update = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>"; }
findByVersionId(Long versionId) { if (Objects.isNull(versionId)) { log.debug("version id  is null"); return null; } return selectOne(ImmutableMap.of(RTVI_VERSION_ID, versionId)); }
[*] target: assertEquals(refTableVersionInfo, refTableVersionInfo_update)
[-] pred: org. junit. Assert. assertEquals ( refTableVersionInfo, refTableVersionInfo_update )
************************************
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); abnormalDatasetRepository.create(abnormalDataset);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); boolean result = abnormalDatasetRepository.updateStatus(abnormalDatasets.get(0).getId(), "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
updateStatus(Long id, String status, OffsetDateTime updateTime) { String sql = DefaultSQLBuilder.newBuilder() .update(TABLE_NAME) .set("status", "update_time") .where("id = ?") .asPrepared() .getSQL(); int updatedRows = jdbcTemplate.update(sql, status, updateTime, id); return updatedRows == 1; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testOfSet() { Set<String> set = ofSet(); assertEquals(emptySet(), set);  set = ofSet(((String[]) null)); assertEquals(emptySet(), set);  set = ofSet("A", "B", "C"); Set<String> expectedSet = new LinkedHashSet<>(); expectedSet.add("A"); expectedSet.add("B"); expectedSet.add("C"); "<AssertPlaceHolder>"; }
ofSet(T... values) { int size = values == null ? 0 : values.length; if (size < 1) { return emptySet(); }  float loadFactor = 1f / ((size + 1) * 1.0f);  if (loadFactor > 0.75f) { loadFactor = 0.75f; }  Set<T> elements = new LinkedHashSet<>(size, loadFactor); for (int i = 0; i < size; i++) { elements.add(values[i]); } return unmodifiableSet(elements); }
[*] target: assertEquals(expectedSet, set)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, set )
************************************
************************************
[+] input: deleteUser() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean b = true; try { b = adminService.deleteUser(user.getId()); } catch (ForbiddenException ignored) { } "<AssertPlaceHolder>";  UserDO selected = userMapper.selectById(user.getId()); assertNull(selected); }
deleteUser(Integer id) { throwUserNotExistById(id); if (userService.getRootUserId().equals(id)) { throw new ForbiddenException(10079); } boolean userRemoved = userService.removeById(id); QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, id); // 删除用户，还应当将 user_group表中的数据删除 boolean deleteResult = userGroupMapper.deleteByUserId(id) > 0; return userRemoved && userIdentityService.remove(wrapper) && deleteResult; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithComma() { final String expression = "http://snomed.info/sct|'46,2'|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("46,2", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: roundTripNoVersion() { final String expression = "http://snomed.info/sct|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertNull(literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: Exception { QpackDecoderDynamicTable table = newTable(100); assertEquals(0, table.length()); table.add(fooBar); assertEquals(1, table.length()); table.clear(); "<AssertPlaceHolder>"; }
length() { return head < tail ? fields.length - tail + head : head - tail; }
[*] target: assertEquals(0, table.length())
[-] pred: org. junit. Assert. assertEquals ( 0, table. length() )
************************************
************************************
[+] input: testGenCronTrigger() { // normal ScheduleInfo scheduleInfo = genDefaultScheduleInfo(); JobDetail jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  Trigger trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); assertNotNull(trigger);  TriggerKey triggerKey = trigger.getKey(); assertNotNull(triggerKey); String identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  ScheduleBuilder<? extends Trigger> scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(SimpleScheduleBuilder.class, scheduleBuilder);  Date startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  Date endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  // cron scheduleInfo = genDefaultCronScheduleInfo(); jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); "<AssertPlaceHolder>";  triggerKey = trigger.getKey(); assertNotNull(triggerKey); identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(CronScheduleBuilder.class, scheduleBuilder);  startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  }
genQuartzTrigger(JobDetail jobDetail, ScheduleInfo scheduleInfo) { String key = jobDetail.getKey().getName(); Timestamp startTime = scheduleInfo.getStartTime(); Timestamp endTime = scheduleInfo.getEndTime(); int scheduleType = scheduleInfo.getScheduleType(); ScheduleType type = ScheduleType.fromCode(scheduleType); if (type == null) { throw new QuartzScheduleException("Invalid schedule type: " + scheduleType); } LOGGER.info("Creating quartz trigger for key : {}, startTime : {}, endTime : {}, scheduleTYpe : {}, " + "scheduleUnit : {}, scheduleInterval : {}, crontabExpression : {}", key, startTime, endTime, type.name(), scheduleInfo.getScheduleUnit(), scheduleInfo.getScheduleInterval(), scheduleInfo.getCrontabExpression()); switch (type) { case NORMAL: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genSimpleQuartzScheduleBuilder(scheduleInfo.getScheduleInterval(), scheduleInfo.getScheduleUnit())) .forJob(jobDetail).build(); case CRONTAB: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genCronQuartzScheduleBuilder(scheduleInfo.getCrontabExpression())) .forJob(jobDetail).build(); default: throw new QuartzScheduleException("Unknown schedule type: " + scheduleType); } }
[*] target: assertNotNull(trigger)
[-] pred: org. junit. Assert. assertNotNull ( trigger )
************************************
************************************
[+] input: toModel_withRequestedResources_returnRepresentationViewWithRequestsLink() { /* ARRANGE */ final var representation = getRepresentationWithRequestedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getRepresentationRequestedResourcesLink(representation.getId()), requestsLink.get().getHref()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { S3ConfigSourceBuilder builder = S3ConfigSourceBuilder.builder(); builder.setS3(s3Client); builder.setBucketName("testBucket"); builder.setKeyName("testKey");  assertEquals(s3Client, builder.getS3()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testKey", builder.getKeyName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  S3ConfigSource s3ConfigSource = (S3ConfigSource) configSourcePackage.getConfigSource(); assertTrue(s3ConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new S3ConfigSource(s3, bucketName, keyName)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: Exception { MutableFeatureMap mfm = new MutableFeatureMap(); mfm.add("goldrat", 1.618033988749); mfm.add("e", Math.E); mfm.add("pi", Math.PI); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(mfm, new MessageDigestHasher("SHA-512", "abcdefghi")); FeatureDomainProto fdp = hfm.serialize(); assertEquals(0, fdp.getVersion()); assertEquals("org.tribuo.hash.HashedFeatureMap", fdp.getClassName()); HashedFeatureMapProto hfmp = fdp.getSerializedData().unpack(HashedFeatureMapProto.class); HasherProto hasherProto = hfmp.getHasher(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.MessageDigestHasher", hasherProto.getClassName()); MessageDigestHasherProto mdhp = hasherProto.getSerializedData().unpack(MessageDigestHasherProto.class); assertEquals("SHA-512", mdhp.getHashType());  HashedFeatureMap hfmD = ProtoUtil.deserialize(fdp); hfmD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(hfm, hfmD)
[-] pred: org. junit. Assert. assertEquals ( hfm, hfmD )
************************************
************************************
[+] input: protobufTest() { var pnpRes = new PNPResult(); var serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); var unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); assertEquals(pnpRes, unpackedPNPRes);  pnpRes = new PNPResult(new Transform3d(1, 2, 3, new Rotation3d(1, 2, 3)), 0.1); serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); "<AssertPlaceHolder>"; }
unpack(ProtobufPNPResult msg) { if (!msg.getIsPresent()) { return new PNPResult(); }  return new PNPResult( Transform3d.proto.unpack(msg.getBest()), Transform3d.proto.unpack(msg.getAlt()), msg.getAmbiguity(), msg.getBestReprojErr(), msg.getAltReprojErr()); }
[*] target: assertEquals(pnpRes, unpackedPNPRes)
[-] pred: org. junit. Assert. assertEquals ( pnpRes, unpackedPNPRes )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneDraft() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSettingTest() { Settings settings = provider.getSettings(context.request(), "some"); "<AssertPlaceHolder>"; assertEquals("linkTag", settings.getEmbedType()); assertEquals("https://use.typekit.net", settings.getUrl()); assertEquals("foo", settings.getId()); }
getSettings(SlingHttpServletRequest request, String configName) { String configPath = CLOUDCONFIG_PARENT + configName; LOG.trace("Obtaining ResourceResolver with service user [{}]", SERVICE_USER); PageManager pageManager = request.getResourceResolver().adaptTo(PageManager.class); Page currentPage = pageManager.getContainingPage(request.getResource()); Resource environmentResource = getEnvironmentResource(pageManager, currentPage, configPath); if (environmentResource != null) { return environmentResource.adaptTo(Settings.class); } return null; }
[*] target: assertNotNull(settings)
[-] pred: org. junit. Assert. assertNotNull ( settings )
************************************
************************************
[+] input: deleteMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository, never()).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertFalse(isDocumentDeleted)
[-] pred: org. junit. Assert. assertFalse ( isDocumentDeleted )
************************************
************************************
[+] input: testCreateSign() { SoMap map = SoMap.getSoMap() .set("name", "zhang") .set("age", 18) .set("sex", "女"); SaManager.getSaSignTemplate().setSignConfig(new SaSignConfig().setSecretKey(key)); String sign = SaManager.getSaSignTemplate().createSign(map); Assertions.assertEquals(sign, "6f5e844a53e74363c2f6b24f64c4f0ff");  // 多次签名，结果一致 String sign2 = SaManager.getSaSignTemplate().createSign(map); Assertions."<AssertPlaceHolder>"; }
createSign(Map<String, ?> paramsMap) { String secretKey = getSecretKey(); SaSignException.notEmpty(secretKey, "参与参数签名的秘钥不可为空", SaErrorCode.CODE_12201);  // 如果调用者不小心传入了 sign 参数，则此处需要将 sign 参数排除在外 if(paramsMap.containsKey(sign)) { // 为了保证不影响原有的 paramsMap，此处需要再复制一份 paramsMap = new TreeMap<>(paramsMap); paramsMap.remove(sign); }  // 计算签名 String paramsStr = joinParamsDictSort(paramsMap); String fullStr = paramsStr + "&" + key + "=" + secretKey; String signStr = abstractStr(fullStr);  // 输入日志，方便调试 log.debug("fullStr：{}", fullStr); log.debug("signStr：{}", signStr);  // 返回 return signStr; }
[*] target: assertEquals(sign, sign2)
[-] pred: org. junit. Assert. assertEquals ( sign, sign2 )
************************************
************************************
[+] input: Exception {  final String uniqueInstanceKey = String.valueOf(instanceCount.getAndIncrement()); final String[] customAuthArgs = new String[]{ uniqueInstanceKey, "arg1", "arg2" }; final String serializedArgList = StringUtils.join(customAuthArgs,','); final HttpClientConfigCallback hccc = authTestBase( ImmutableMap.<String, String>builder(). put("index." + INDEX_NAME + ".elasticsearch.interface", "REST_CLIENT"). put("index." + INDEX_NAME + ".elasticsearch.http.auth.type", HttpAuthTypes.CUSTOM.toString()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-class", TestCustomAuthenticator.class.getName()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-args", serializedArgList). build() );  verify(restClientSetup).getCustomAuthenticator( eq(TestCustomAuthenticator.class.getName()), eq(customAuthArgs));  TestCustomAuthenticator customAuth = TestCustomAuthenticator.instanceMap.get(uniqueInstanceKey); "<AssertPlaceHolder>";  // authenticator has been instantiated, verifying it has been called assertEquals(1, customAuth.numInitCalls);  // verifying that the custom callback is in the chain final HttpAsyncClientBuilder hacb = mock(HttpAsyncClientBuilder.class); hccc.customizeHttpClient(hacb);  assertEquals(1, customAuth.customizeHttpClientHistory.size()); assertSame(hacb, customAuth.customizeHttpClientHistory.get(0)); assertArrayEquals(customAuthArgs, customAuth.args); }
getCustomAuthenticator(String authClassName, String[] authClassConstructorArgList) { Preconditions.checkArgument(StringUtils.isNotEmpty(authClassName), "Custom authenticator class name cannot be empty"); Preconditions.checkNotNull(authClassConstructorArgList, "Custom authenticator class constructor argument list cannot be null");  final RestClientAuthenticator authenticator;  try { final Class<?> c = Class.forName(authClassName); Preconditions.checkArgument(RestClientAuthenticator.class.isAssignableFrom(c), "Authenticator class " + authClassName + " must be a subclass of " + RestClientAuthenticator.class.getName()); @SuppressWarnings("unchecked") final Constructor<RestClientAuthenticator> ctr = ((Class<RestClientAuthenticator>)c).getConstructor(String[].class); authenticator = ctr.newInstance((Object)authClassConstructorArgList); } catch (Exception e) { log.error("Unable to instantiate the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to instantiate the custom authenticator", e); }  try { authenticator.init(); } catch (IOException e) { log.error("Unable to initialize the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to initialize the custom authenticator", e); }  return authenticator; }
[*] target: assertNotNull(customAuth)
[-] pred: org. junit. Assert. assertNotNull ( customAuth )
************************************
************************************
[+] input: testDeepClone() { VirtualMouse expected = new VirtualMouse(); expected.updateFromEvent(VirtualKey.LC, true, 15, 0, 0); expected.updateFromEvent(VirtualKey.MOUSEMOVED, true, 0, 0, 0);  VirtualMouse actual = expected.clone();  "<AssertPlaceHolder>"; assertIterableEquals(expected.getSubticks(), actual.getSubticks()); }
clone() { return new VirtualMouse(new HashSet<>(this.pressedKeys), scrollWheel, cursorX, cursorY, new ArrayList<>(subtickList), isIgnoreFirstUpdate()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: deleteGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  boolean ok = adminService.deleteGroup(group.getId()); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertNull(selected); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: checkClassFromExternalJar() { final JarFile actual = ClassUtil.jarFileOf(StringUtils.class);  // asserts "<AssertPlaceHolder>"; assertTrue(actual.getName().contains("junit-platform-commons")); }
jarFileOf(final Class<?> klass) { final URL url = klass.getResource( "/" + klass.getName().replace('.', '/') + ".class");  if (url == null) { return null; }  final String s = url.getFile(); final int beginIndex = s.indexOf("file:") + "file:".length(); int endIndex = s.indexOf(".jar!"); if (endIndex == -1) { return null; }  endIndex += ".jar".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, StandardCharsets.UTF_8); final File file = new File(f);  try { return file.exists() ? new JarFile(file) : null; } catch (final IOException e) { throw new IllegalStateException(e); } }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testGetKafkaLatestMessage_1() { addRecord(Collections.singletonList("inlong")); QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("inlong", messages.get(0).getBody()); }
getLatestMessage(Consumer<byte[], byte[]> consumer, String topicName, InlongStreamInfo streamInfo, QueryMessageRequest request) { List<BriefMQMessage> messageList = new ArrayList<>(); Integer messageCount = request.getMessageCount(); try { List<PartitionInfo> partitionInfoList = consumer.partitionsFor(topicName); List<TopicPartition> topicPartitionList = partitionInfoList.stream() .map(topicPartition -> new TopicPartition(topicPartition.topic(), topicPartition.partition())) .collect(Collectors.toList());  Map<TopicPartition, Long> beginningTopicPartitionList = consumer.beginningOffsets(topicPartitionList); Map<TopicPartition, Long> endTopicPartitionList = consumer.endOffsets(topicPartitionList);  int count = (int) Math.ceil((double) messageCount / topicPartitionList.size()); Map<TopicPartition, Long> expectedOffsetMap = beginningTopicPartitionList.entrySet() .stream() .map(entry -> { long beginningOffset = entry.getValue(); long endOffset = endTopicPartitionList.getOrDefault(entry.getKey(), beginningOffset); Long offset = (endOffset - beginningOffset) >= count ? (endOffset - count) : beginningOffset; return Pair.of(entry.getKey(), offset); }).collect(Collectors.toMap(Pair::getKey, Pair::getValue));  consumer.assign(topicPartitionList); expectedOffsetMap.forEach(consumer::seek);  int index = 0; ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord<byte[], byte[]> record : records) { Map<String, String> headers = new HashMap<>(); for (Header header : record.headers()) { headers.put(header.key(), new String(header.value(), StandardCharsets.UTF_8)); }  MessageWrapType messageWrapType = MessageWrapType.forType(streamInfo.getWrapType()); if (headers.get(InlongConstants.MSG_ENCODE_VER) != null) { messageWrapType = MessageWrapType.valueOf(Integer.parseInt(headers.get(InlongConstants.MSG_ENCODE_VER))); } DeserializeOperator deserializeOperator = deserializeOperatorFactory.getInstance(messageWrapType); deserializeOperator.decodeMsg(streamInfo, messageList, record.value(), headers, index, request); if (messageList.size() >= messageCount) { break; } } } catch (Exception e) { String errMsg = "decode msg error: "; LOGGER.error(errMsg, e); throw new BusinessException(errMsg + e.getMessage()); } finally { consumer.close(); }  LOGGER.debug("success query messages for topic={}, size={}, returned size={}", topicName, messageList.size(), messageCount); // only return a list of messages of the specified count int fromIndex = (messageList.size() > messageCount) ? (messageList.size() - messageCount) : 0; List<BriefMQMessage> resultList = messageList.subList(fromIndex, messageList.size()); for (int i = 0; i < resultList.size(); i++) { BriefMQMessage message = resultList.get(i); message.setId(i + 1); }  return resultList; }
[*] target: assertEquals(1, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 1, messages. size ( ) )
************************************
************************************
[+] input: JsonProcessingException { // Write a message (John Wick user) to Kafka using a test producer String uuid = "11111"; String message = objectMapper.writeValueAsString(new User(uuid, "John", "Wick")); producer.send(new ProducerRecord<>(TOPIC_NAME, 0, uuid, message)); producer.flush();  // Read the message and assert its properties verify(userKafkaConsumer, timeout(10000).times(1)) .logKafkaMessages(userArgumentCaptor.capture(), topicArgumentCaptor.capture(), partitionArgumentCaptor.capture(), offsetArgumentCaptor.capture());  User user = userArgumentCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("11111", user.getUuid()); assertEquals("John", user.getFirstName()); assertEquals("Wick", user.getLastName()); assertEquals(TOPIC_NAME, topicArgumentCaptor.getValue()); assertEquals(0, partitionArgumentCaptor.getValue()); assertEquals(0, offsetArgumentCaptor.getValue()); }
logKafkaMessages(@Payload User user, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic, @Header(KafkaHeaders.RECEIVED_PARTITION) Integer partition, @Header(KafkaHeaders.OFFSET) Long offset) { logger.info("Received a message contains a user information with id {}, from {} topic, " + "{} partition, and {} offset", user.getUuid(), topic, partition, offset); userService.save(user); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
************************************
[+] input: toModel_validInput_returnOfferedResourceView() { /* ARRANGE */ final var offeredResource = getOfferedResource();  /* ACT */ final var result = offeredResourceViewAssembler.toModel(offeredResource);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(offeredResource.getTitle(), result.getTitle()); Assertions.assertEquals(offeredResource.getDescription(), result.getDescription()); Assertions.assertEquals(offeredResource.getKeywords(), result.getKeywords()); Assertions.assertEquals(offeredResource.getPublisher(), result.getPublisher()); Assertions.assertEquals(offeredResource.getLanguage(), result.getLanguage()); Assertions.assertEquals(offeredResource.getLicense(), result.getLicense()); Assertions.assertEquals(offeredResource.getVersion(), result.getVersion()); Assertions.assertEquals(offeredResource.getSovereign(), result.getSovereign()); Assertions.assertEquals(offeredResource.getEndpointDocumentation(), result.getEndpointDocumentation()); Assertions.assertEquals(offeredResource.getAdditional(), result.getAdditional()); Assertions.assertEquals(offeredResource.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(offeredResource.getModificationDate(), result.getModificationDate());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getOfferedResourceLink(offeredResource.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getOfferedResourceContractsLink(offeredResource.getId()), contractsLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getOfferedResourceRepresentationsLink(offeredResource.getId()), representationsLink.get().getHref());  final var catalogsLink = result.getLink("catalogs"); assertTrue(catalogsLink.isPresent()); assertNotNull(catalogsLink.get()); assertEquals(getOfferedResourceCatalogsLink(offeredResource.getId()), catalogsLink.get().getHref()); }
toModel(final OfferedResource resource) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(resource, OfferedResourceView.class); view.add(getSelfLink(resource.getId()));  final var contractsLink = linkTo(methodOn(OfferedResourcesToContractsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractsLink);  final var repLink = linkTo(methodOn(OfferedResourcesToRepresentationsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var catalogLink = linkTo(methodOn(OfferedResourcesToCatalogsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CATALOGS); view.add(catalogLink);  final var subscriptionLink = linkTo(methodOn(OfferedResourcesToSubscriptionsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var brokerLink = linkTo(methodOn(OfferedResourcesToBrokersController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.BROKERS); view.add(brokerLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetAuthenticationInfoWithNull() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson(null);  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNull(authInfo)
[-] pred: org. junit. Assert. assertNull ( authInfo )
************************************
************************************
[+] input: testGetTweetByIdWithExpansions() { String  tweetId = "1361010662714007557"; TweetV2 tweet   = (TweetV2) twitterClient.getTweet(tweetId); "<AssertPlaceHolder>"; assertEquals(3, tweet.getIncludes().getUsers().size()); Assertions.assertEquals("RedouaneBali", tweet.getIncludes().getUsers().get(0).getName()); Assertions.assertEquals("TwitterDev", tweet.getIncludes().getUsers().get(1).getName()); Assertions.assertEquals("jessicagarson", tweet.getIncludes().getUsers().get(2).getName()); assertEquals(1, tweet.getIncludes().getTweets().size()); assertEquals("2244994945", tweet.getIncludes().getTweets().get(0).getAuthorId()); assertEquals("1341761599976181763", tweet.getIncludes().getTweets().get(0).getId()); assertNotNull(tweet.getIncludes().getTweets().get(0).getEntities()); }
getTweet(String tweetId);
[*] target: assertNotNull(tweet)
[-] pred: org. junit. Assert. assertNotNull ( tweet )
************************************
************************************
[+] input: roundTrip() { final String expression = "http://snomed.info/sct|166056000|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath.fromString( expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: deleteMemberDocumentSuccess() { // given HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertTrue(isDocumentDeleted)
[-] pred: org. junit. Assert. assertTrue ( isDocumentDeleted )
************************************
************************************
[+] input: handleResourceNotFoundException_returnHttpStatusNotFound() { /* ACT */ final var response = exceptionHandler .handleResourceNotFoundException(new ResourceNotFoundException("Resource not found."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Resource not found.", body.get("message")); }
handleResourceNotFoundException( final ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Resource not found. [exception=({})]", exception == null ? "" : exception.getMessage(), exception); }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Resource not found.");  return new ResponseEntity<>(body, headers, HttpStatus.NOT_FOUND); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);   assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testFilterAndSort() { final BusinessRule one_v1_0_0 = new BusinessRule(); one_v1_0_0.setVersion("1.0.0"); one_v1_0_0.setIdentifier("one");  final BusinessRule two_v1_0_5 = new BusinessRule(); two_v1_0_5.setVersion("1.0.5"); two_v1_0_5.setIdentifier("two");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(one_v1_0_0, two_v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(2, map.get(1).size()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: testInvalid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
compile(String className, String sourceCode) throws Exception { return addSource(className, sourceCode).compileAll().get(className); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
************************************
[+] input: Exception { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION, METADATA_GROUP, "provider", REVISION, PROTOCOL); nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH); String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(serviceMetaData, URL.encode(url.toFullString()));  //clear test data configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP); }
doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) { storeMetadata(serviceMetadataIdentifier, URL.encode(url.toFullString())); }
[*] target: assertNotNull(serviceMetaData)
[-] pred: org. junit. Assert. assertNotNull ( serviceMetaData )
************************************
************************************
[+] input: TimeoutException { this.clientSamplesAnalyser.config.dropUnmatchedReports = false; var samplesGeneratorForSingleSfu = new SamplesGeneratorForSingleSfu(); samplesGeneratorForSingleSfu.saveTo(this.hamokStorages); var observedClientSamples = samplesGeneratorForSingleSfu.getObservedClientSamples();  var reports = new LinkedList<Report>(); this.clientSamplesAnalyser.observableReports().subscribe(reports::addAll); this.clientSamplesAnalyser.accept(observedClientSamples);  var inboundAudioReports = reports.stream() .filter(report -> ReportType.INBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (InboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var inboundVideoReports = reports.stream() .filter(report -> ReportType.INBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (InboundVideoTrackReport) report.payload) .collect(Collectors.toList()); var outboundAudioReports = reports.stream() .filter(report -> ReportType.OUTBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (OutboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var outboundVideoReports = reports.stream() .filter(report -> ReportType.OUTBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (OutboundVideoTrackReport) report.payload) .collect(Collectors.toList());  for (var inboundAudioReport : inboundAudioReports) { var found = false; for (var outboundAudioReport : outboundAudioReports) { if (outboundAudioReport.sfuStreamId == inboundAudioReport.sfuStreamId) { found = true; } } Assertions."<AssertPlaceHolder>"; } for (var outboundVideoReport : outboundVideoReports) { var found = false; for (var inboundVideoReport : inboundVideoReports) { if (inboundVideoReport.sfuStreamId == outboundVideoReport.sfuStreamId) { found = true; } } Assertions.assertTrue(found); } }
accept(ObservedClientSamples observedClientSamples) { if (observedClientSamples == null) { return; } if (observedClientSamples.isEmpty()) { this.output.onNext(Collections.emptyList()); return; } Instant started = Instant.now(); try { this.process(observedClientSamples); } finally { this.exposedMetrics.addTaskExecutionTime(METRIC_COMPONENT_NAME, started, Instant.now()); } }
[*] target: assertTrue(found)
[-] pred: org. junit. Assert. assertTrue ( found )
************************************
************************************
[+] input: testFilterAndSortWithSameIdentifier() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0"); v1_0_0.setIdentifier("one");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); v1_0_5.setIdentifier("one");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1).iterator().next()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneOfEachStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.approved); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.rejected); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(1, result.getSeries()[2]); assertEquals(1, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-domain.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testCopy() { // test case 1 Document fromDoc = getBaseDocument("/jdocs/sample_1.json"); Document toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$.info"); toDoc.setContent(fromDoc, "$.members[%]", "$.members[%]", 0 + "", 0 + "");  try { toDoc.setContent(fromDoc, "$.id", "$.id"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); assertEquals(e.getErrorCode(), "jdoc_err_22"); }  fromDoc.deletePath("$.id"); fromDoc.deletePath("$.members[1]"); String expected = fromDoc.getJson(); String actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 2 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$"); expected = getCompressedJson("/jdocs/sample_2_1_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 3 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$", "$.members[type=basic].block"); expected = getCompressedJson("/jdocs/sample_2_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 4 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$", "$"); expected = getCompressedJson("/jdocs/sample_6_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 5 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[%]", "$.application.members[%]", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_3_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 6 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[]", "$.application.members[]"); expected = getCompressedJson("/jdocs/sample_6_4_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 7 fromDoc = getTypedDocument("sample_6_model", null); fromDoc.setInteger("$.application.members[0].phones[0].docs[0].index", 0); fromDoc.setString("$.application.members[0].phones[0].docs[0].name", "Deepak"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[0].phones[0].docs[%]", "$.application.members[%].phones[%].docs[%]", 0 + "", 0 + "", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_5_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>";  // test case 8 - we just check that it does not throw an exception fromDoc = getBaseDocument("/jdocs/sample_25.json"); toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses[]", "$.[]"); assertTrue(true);  toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses", "$.[]"); assertTrue(true);  toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses[]"); assertTrue(true);  try { toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); } }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
