[+] input: testEquals() { Tag t1 = new Tag(); t1.setId(111); Tag t2 = new Tag(); t2.setId(222); Tag t3 = new Tag(); t3.setId(111); Assertions.assertFalse(t1.equals(t2)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(t1.equals(t3))
[-] pred: org. junit. Assert. assertTrue ( t1. equals ( t3 ) )
************************************
[+] input: combineAndLiftResults() { Function<Random, PokemonCard> randomPokemonCard = Functions.<Random>resultsInstance().lift(PokemonCard::new).apply( oneOf("Bulbasaur", "Charmander", "Squirtle"), oneOf(30, 40, 60), oneOf(EnergyType.values()), listOf( 1, 2, Functions.<Random>resultsInstance().combine( listOf(1, 2, EnergyType.values()), oneOf("Bubble", "Withdraw", "Ember", "Razor Leaf"), oneOf(10, 20, 30), Move::new ) ) ); PokemonCard toVerify = randomPokemonCard.apply(new Random(43)); PokemonCard expected = PokemonCard.of( "Bulbasaur", 60, EnergyType.PSYCHIC, asList( Move.of(asList(EnergyType.LIGHTNING, EnergyType.COLORLESS), "Bubble", 20), Move.of(asList(EnergyType.GRASS), "Withdraw", 30) ) ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testAllListIsNull() { when(a.getAgentIds()).thenReturn(null); when(b.getAgentIds()).thenReturn(null); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, count)
[-] pred: org. junit. Assert. assertEquals ( 0, count )
************************************
[+] input: testAgentIdsIsEmpty() { when(agentIds.isEmpty()).thenReturn(true); List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(0)).findAllDto(any(Query.class), any(UserDetail.class)); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
[+] input: testResolve() { String resourceName = "META-INF/abc/def"; String expectedResourceName = "META-INF/abc/def"; String resolvedResourceName = DEFAULT.resolve(resourceName); assertEquals(expectedResourceName, resolvedResourceName);  resourceName = "///////META-INF//abc\\/def"; resolvedResourceName = DEFAULT.resolve(resourceName); assertEquals(expectedResourceName, resolvedResourceName);  resourceName = "java.lang.String.class";  expectedResourceName = "java/lang/String.class"; resolvedResourceName = CLASS.resolve(resourceName); assertEquals(expectedResourceName, resolvedResourceName);  resourceName = "java.lang"; expectedResourceName = "java/lang/"; resolvedResourceName = PACKAGE.resolve(resourceName); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedResourceName, resolvedResourceName)
[-] pred: org. junit. Assert. assertEquals ( expectedResourceName, resolvedResourceName )
************************************
[+] input: testCalInitMap() { int size = 0; int expectedCapacity = (int) Math.ceil(size / 0.75); int actualCapacity = MapCapUtil.calInitMap(size);  assertEquals(expectedCapacity, actualCapacity);  size = 10; expectedCapacity = (int) Math.ceil(size / 0.75); actualCapacity = MapCapUtil.calInitMap(size);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCapacity, actualCapacity)
[-] pred: org. junit. Assert. assertEquals ( expectedCapacity, actualCapacity )
************************************
[+] input: test_When_getPaymentDetailsByOrderId_isSuccess() {  TransactionDetails transactionDetails = getMockTransactionDetails();  when(transactionDetailsRepository.findByOrderId(anyLong())).thenReturn(Optional.of(transactionDetails));  //Actual PaymentResponse paymentResponse = paymentService.getPaymentDetailsByOrderId(1);  //Verification verify(transactionDetailsRepository, times(1)).findByOrderId(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(transactionDetails.getId(), paymentResponse.getPaymentId()); }
[*] target: assertNotNull(paymentResponse)
[-] pred: org. junit. Assert. assertNotNull ( paymentResponse )
************************************
[+] input: InterruptedException { // GIVEN var user = new User(new UserId(UUID.randomUUID())); var expectedCustomerId = new CustomerId(UUID.randomUUID()); user.setCustomerId(expectedCustomerId);  when(ctxMock.getUserService()).thenReturn(userServiceMock); doReturn(Futures.immediateFuture(user)).when(userServiceMock).findUserByIdAsync(any(), any()); when(ctxMock.getDbCallbackExecutor()).thenReturn(DB_EXECUTOR);  // WHEN var actualCustomerId = EntitiesCustomerIdAsyncLoader.findEntityIdAsync(ctxMock, user.getId()).get();  // THEN "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCustomerId, actualCustomerId)
[-] pred: org. junit. Assert. assertEquals ( expectedCustomerId, actualCustomerId )
************************************
[+] input: testAddTaskOptionWithInexistentTaskId() { var taskoption = new TaskOption(); taskoption.setTaskId(0); taskoption.setName("name"); taskoption.setValue("value");  var scheduler = new Scheduler(new MemoryTasks(), new MemoryTaskOptions()); var manager = scheduler.getTaskOptionManager(); try { manager.addTaskOption(taskoption); fail(); } catch (InexistentTaskIdException e) { "<AssertPlaceHolder>"; } catch (TaskOptionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: pixParticipantesPass() { PIX[] pix = BrasilAPI.pixParticipantes(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(pix)
[-] pred: org. junit. Assert. assertNotNull ( pix )
************************************
[+] input: BBjException { component.setAllowCustomValue(true); "<AssertPlaceHolder>";  verify(control, times(1)).setProperty("customValue", true); verify(control, times(0)).getProperty("customValue"); }
[*] target: assertEquals(true, component.isAllowCustomValue())
[-] pred: org. junit. Assert. assertEquals ( true, component. isAllowCustomValue() )
************************************
[+] input: replaceAllTypeParameterNamesGivenMappingThatContainsElementTypeConstructor() { Map<TypeParameterName, TypeParameterName> mapping = new HashMap<>(); mapping.put(T, A); mapping.put(U, B);  ConcreteTypeConstructor expected = new ConcreteTypeConstructor( ERUDITE, asList( STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.generic(A).covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant() ) );  ConcreteTypeConstructor toVerify = new ConcreteTypeConstructor( ERUDITE, asList( STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.generic(T).covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant() ) ).replaceTypeParameterNames(mapping);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testDeleteFileOfFile() { //            File file = new File("temp.txt"); //            try { //                if (file.createNewFile() && file.exists()) { //                    utils.deleteFile(file, new TapLog()); //                    Assertions."<AssertPlaceHolder>"; //                } //            } catch (IOException ignore) { } //        }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
[+] input: deleteSelectedIncidentsFragment_whenFilterCapturesSpanOfTwoPartitions_thenDeleteCapturedRows() { String connectionName = "connection"; String schemaName = "sch"; String tableName = "tab"; String id_prefix1 = "1"; String id_prefix2 = "2"; PhysicalTableName physicalTableName = new PhysicalTableName("sch", tableName); UserDomainIdentity userIdentity = UserDomainIdentityObjectMother.createAdminIdentity();  LocalDate month1 = LocalDate.of(2023, 1, 1); LocalDate month2 = LocalDate.of(2023, 2, 1); LocalDateTime startDate1 = month1.atStartOfDay().plusDays(14); LocalDateTime startDate2 = month2.atStartOfDay().plusDays(14);  Table table1 = prepareSimplePartitionTable(schemaName, tableName, startDate1, id_prefix1); Table table2 = prepareSimplePartitionTable(schemaName, tableName, startDate2, id_prefix2);  ParquetPartitionId partitionId1 = new ParquetPartitionId( userIdentity.getDataDomainFolder(), this.incidentsStorageSettings.getTableType(), connectionName, null, month1); ParquetPartitionId partitionId2 = new ParquetPartitionId( userIdentity.getDataDomainFolder(), this.incidentsStorageSettings.getTableType(), connectionName, null, month2);  this.parquetPartitionStorageService.savePartition( new LoadedMonthlyPartition(partitionId1), new TableDataChanges(table1), this.incidentsStorageSettings, userIdentity); this.parquetPartitionStorageService.savePartition( new LoadedMonthlyPartition(partitionId2), new TableDataChanges(table2), this.incidentsStorageSettings, userIdentity);  IncidentsFragmentFilter filter = new IncidentsFragmentFilter(){{ setTableSearchFilters(new TableSearchFilters(){{ setConnection(connectionName); setFullTableName(physicalTableName.toTableSearchFilter()); }}); setDateStart(startDate1.toLocalDate()); setDateEnd(startDate2.toLocalDate()); }};  this.sut.deleteSelectedIncidentsFragment(filter, userIdentity);  LoadedMonthlyPartition partition1AfterDelete = this.parquetPartitionStorageService.loadPartition( partitionId1, this.incidentsStorageSettings, null, userIdentity); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(0L, partition1AfterDelete.getLastModified());  LoadedMonthlyPartition partition2AfterDelete = this.parquetPartitionStorageService.loadPartition( partitionId2, this.incidentsStorageSettings, null, userIdentity); Assertions.assertNotNull(partition2AfterDelete.getData()); Assertions.assertFalse(partition2AfterDelete.getData().textColumn(IncidentsColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id1")); Assertions.assertTrue(partition2AfterDelete.getData().textColumn(IncidentsColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id2")); Assertions.assertTrue(partition2AfterDelete.getData().textColumn(IncidentsColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id3")); Assertions.assertNotEquals(0L, partition2AfterDelete.getLastModified()); }
[*] target: assertNull(partition1AfterDelete.getData())
[-] pred: org. junit. Assert. assertNull ( partition1AfterDelete. getData ( ) )
************************************
[+] input: lambdaWithSingleExpressionAsSingleLine() { String toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .generate();  String expected = "(capacity, hasPower) -> new Device(capacity, hasPower)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this", "value") .withObjectPath("selection") .withObjectPath("current") .getObjectPathGenerator() .generate();  String expected = "this.value.selection.current";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldLetterIsCorGReturnTrue() { boolean actual = Properties.letterIsCorG('c'); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: Exception { CountryManager countryManager = CountryManager.getInstance(); String country = "United States of America"; assertTrue(countryManager.isValidKey(country)); assertTrue(countryManager.isValidCountry(country, CountryNameSpecification.NAME));  //check that 3 ISO letter code is matched country = "USA"; assertTrue(countryManager.isValidKey(country)); assertTrue(countryManager.isValidCountry(country, CountryNameSpecification.ISO3));  country = "GB"; assertTrue(countryManager.isValidKey(country)); assertTrue(countryManager.isValidCountry(country, CountryNameSpecification.ISO2));  //check that the lowercase version is also matched country = "brazil"; assertTrue(countryManager.isValidKey(country));  //check that friendly name is also matched country = "Vietnam"; assertTrue(countryManager.isValidKey(country));  country = "sierra leone"; assertTrue(countryManager.isValidKey(country));  country = "Foobar"; "<AssertPlaceHolder>"; }
[*] target: assertFalse(countryManager.isValidKey(country))
[-] pred: org. junit. Assert. assertFalse ( countryManager. isValidKey( country ) )
************************************
[+] input: shouldFetchProductsUsingPageAttributes() { Page<ProductInfo> page = new PageImpl<>(products); final int pageNumber = 1; final int pageSize = 10; final String sortAttribute = "name"; Sort.Direction sortDirection = Sort.Direction.ASC; Pageable pageable = PageRequest.of(pageNumber, pageSize, sortDirection, sortAttribute);  when(productRepository.findAllProducts( null, null, null, null, null, pageable)).thenReturn(page); when(productInfoConverter.toDto(any(ProductInfo.class))).thenReturn(mock(ProductInfoDto.class)); when(productInfoConverter.toProductPaginationDto(ArgumentMatchers.any())).thenReturn(mock(ProductListWithPaginationInfoDto.class)); when(productUpdater.update(any(ProductInfoDto.class))).thenReturn(mock(ProductInfoDto.class));  ProductListWithPaginationInfoDto productList = productsProvider.getProducts(pageable, null, null, null, null, null);  "<AssertPlaceHolder>";  verify(productRepository, times(1)).findAllProducts( null, null, null, null, null, pageable); verify(productInfoConverter, times(1)).toProductPaginationDto(ArgumentMatchers.any()); }
[*] target: assertNotNull(productList)
[-] pred: org. junit. Assert. assertNotNull ( productList )
************************************
[+] input: addDaysToCurrentTime_AllGood_FiveDaysAdded() { try (MockedStatic<Calendar> calendarClassMock = Mockito.mockStatic(Calendar.class)) { when(calendarInstanceMock.getTime()).thenReturn(new Date()); calendarClassMock.when(Calendar::getInstance).thenReturn(calendarInstanceMock);  final var days = 5; Date dateAfterAddingFiveMinutesToCurrentTime = DateUtils.addDaysToCurrentTime(days);  verify(calendarInstanceMock).add(Calendar.DATE, days); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(dateAfterAddingFiveMinutesToCurrentTime)
[-] pred: org. junit. Assert. assertNotNull ( dateAfterAddingFiveMinutesToCurrentTime )
************************************
[+] input: testNormal() { List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(1)).findAllDto(any(Query.class), any(UserDetail.class)); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
[+] input: givenGenericType() { Type type = T.asType(); String toVerify = type(type).generate(); String expected = "T"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDao.insert(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: testTapEvent2MessageNullTapRecordEvent() { MessageEntity actual = hazelcastBaseNode.tapEvent2Message(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testGetTaskDtoIsomorphismNormal() { DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2);  boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1);  verify(node1, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
[*] target: assertTrue(isomorphism)
[-] pred: org. junit. Assert. assertTrue ( isomorphism )
************************************
[+] input: testGetAllPackageNamesInClassPaths() { Set<String> packageNames = repository.getAllPackageNamesInClassPaths(); "<AssertPlaceHolder>"; info(packageNames); }
[*] target: assertNotNull(packageNames)
[-] pred: org. junit. Assert. assertNotNull ( packageNames )
************************************
[+] input: test_sqrt_5_to_attribute_and_metadata() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.ATTRIBUTE, "result", 3, false, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  when(telemetryService.saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble())) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: validateGivenStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(STATIC), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(C, D))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCountTapEvent1() { List<TapEvent> events = new ArrayList<>(); HandlerUtil.EventTypeRecorder recorder = HandlerUtil.countTapEvent(events); Assertions.assertNotNull(recorder); Assertions.assertEquals(0, recorder.getMemorySize()); Assertions.assertEquals(0, recorder.getUpdateTotal()); Assertions.assertEquals(0, recorder.getInsertTotal()); Assertions.assertEquals(0, recorder.getDdlTotal()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, recorder.getTotal())
[-] pred: org. junit. Assert. assertEquals ( 0, recorder. getTotal() )
************************************
[+] input: testDate() { Date now = new Date(); TapInsertRecordEvent insertRecordEvent = TapInsertRecordEvent.create().init() .after(new Document("id",1).append("ts", now)); Long aLong = CdcDelay.parseTs(insertRecordEvent); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now.getTime(), aLong); }
[*] target: assertNotNull(aLong)
[-] pred: org. junit. Assert. assertNotNull ( aLong )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode() { when(nodeList.size()).thenReturn(2); JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node2, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: givenInstanceMethodAndExplicitTypeArguments() { String toVerify = methodCall() .withObjectPath("objects") .withTypeArguments(CHAR_SEQUENCE) .withMethodName("map") .withArguments("java.lang.Object::toString") .generate();  String expected = "objects.<java.lang.CharSequence>map(java.lang.Object::toString)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testConstruct() { Result result = new Result(); "<AssertPlaceHolder>"; assertEquals(result.getCode(), "000000"); assertEquals(result.getMesg(), "处理成功"); }
[*] target: assertTrue(result.isSuccess())
[-] pred: org. junit. Assert. assertTrue ( result. isSuccess ( ) )
************************************
[+] input: IllegalAccessException { final List<ColumnSchema> columnSchemas = List.of( GeneralTestUtility.cleartextColumn("s1", "t1"), GeneralTestUtility.cleartextColumn("s1", "t2"), GeneralTestUtility.cleartextColumn("s2", "t3") ); final var tableSchema = generateMockTableSchema(false, columnSchemas); doCallRealMethod().when(tableSchema).getSourceAndTargetHeaders();  final Set<ColumnHeader> knownValid = Set.of( new ColumnHeader("s1"), new ColumnHeader("s2"), new ColumnHeader("t1"), new ColumnHeader("t2"), new ColumnHeader("t3") ); final var results = tableSchema.getSourceAndTargetHeaders(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(knownValid, results)
[-] pred: org. junit. Assert. assertEquals ( knownValid, results )
************************************
[+] input: createShouldCreateLayoutBuilder() { FlexLayoutBuilder builder = FlexLayout.create(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
[+] input: URISyntaxException { final String sessionTokenResponse = getResource("okta/session.txt"); final String samlAssertionResponse = getResource("okta/saml-assertion.html"); final String expectedSessionToken = getResource("okta/expected-session-token.txt"); final String expectedAssertion = getResource("okta/assertion.txt"); final URI expectedUri = new URI( "https://example.okta.com/app/amazon_aws/example.okta.com/sso/saml?onetimetoken=" + expectedSessionToken); final HttpEntity sessionTokenEntity = new StringEntity(sessionTokenResponse); final HttpEntity samlAssertionEntity = new StringEntity(samlAssertionResponse); final String expectedSessionTokenEndpoint = "https://" + ENDPOINT + "/api/v1/authn"; final String expectedSessionTokenRequestEntity = "{"username":"" + USERNAME + "","password":"" + PASSWORD + ""}";  when(mockResponse.getEntity()).thenReturn(sessionTokenEntity, samlAssertionEntity);  final String samlAssertion = this.oktaCredentialsProviderFactory.getSamlAssertion(props); "<AssertPlaceHolder>";  final ArgumentCaptor<HttpUriRequest> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpUriRequest.class); verify(mockHttpClient, times(2)).execute(httpPostArgumentCaptor.capture()); final List<HttpUriRequest> actualCaptures = httpPostArgumentCaptor.getAllValues(); final HttpEntityEnclosingRequest sessionTokenRequest = (HttpEntityEnclosingRequest) actualCaptures.get(0); final String content = EntityUtils.toString(sessionTokenRequest.getEntity()); final HttpUriRequest samlRequest = actualCaptures.get(1); assertEquals(expectedSessionTokenEndpoint, sessionTokenRequest.getRequestLine().getUri()); assertEquals(expectedSessionTokenRequestEntity, content); assertEquals(expectedUri, samlRequest.getURI()); }
[*] target: assertEquals(expectedAssertion, samlAssertion)
[-] pred: org. junit. Assert. assertEquals ( expectedAssertion, samlAssertion )
************************************
[+] input: withoutAnyTypeParameters() { String toVerify = toTest().getTypeParametersGenerator().generate(); String expected = ""; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testReconstructsDictionaryWithValueInsertedWithDeleteTwoTerms() { String term = "foo"; String term2 = "foo2";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.DELETE), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term2), DictionaryEntryType.VALUE) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  assertEquals(1, dictionaryEntries.size()); assertEquals("A", dictionaryEntries.get(0).getValue());  dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term2);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); assertEquals("C", dictionaryEntries.get(1).getValue()); assertEquals("D", dictionaryEntries.get(2).getValue()); }
[*] target: assertEquals(3, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 3, dictionaryEntries. size ( ) )
************************************
[+] input: testPositiveResolutionByCweIdIntegerOnly() { Cwe cwe = CweResolver.getInstance().resolve("79"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(79, cwe.getCweId()); }
[*] target: assertNotNull(cwe)
[-] pred: org. junit. Assert. assertNotNull ( cwe )
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: givenStaticMethod() { String toVerify = methodReference() .withType(STRING) .withMethodName("toString") .generate();  String expected = "java.lang.String::toString";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "21474836470.7"; Double value = Double.parseDouble(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DOUBLE.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: test_When_Order_Success() { //Mocking Order order = getMockOrder(); when(orderRepository.findById(anyLong())) .thenReturn(Optional.of(order));  when(restTemplate.getForObject( "http://PRODUCT-SERVICE/product/" + order.getProductId(), ProductResponse.class )).thenReturn(getMockProductResponse());  when(restTemplate.getForObject( "http://PAYMENT-SERVICE/payment/order/" + order.getId(), PaymentResponse.class )).thenReturn(getMockPaymentResponse());  //Actual OrderResponse orderResponse = orderService.getOrderDetails(1);  //Verification verify(orderRepository, times(1)).findById(anyLong()); verify(restTemplate, times(1)).getForObject( "http://PRODUCT-SERVICE/product/" + order.getProductId(), ProductResponse.class); verify(restTemplate, times(1)).getForObject( "http://PAYMENT-SERVICE/payment/order/" + order.getId(), PaymentResponse.class);   //Assert "<AssertPlaceHolder>"; assertEquals(order.getId(), orderResponse.getOrderId()); }
[*] target: assertNotNull(orderResponse)
[-] pred: org. junit. Assert. assertNotNull ( orderResponse )
************************************
[+] input: testInspectEvent_ReturnNull() { PerformanceInspection eventStartInspection = PerformanceInspection.createEventStartInspection("event start"); PerformanceInspectionResult eventStartResult = performanceTestManagementService.inspect(eventStartInspection); Assertions.assertNull(eventStartResult);  PerformanceInspection eventEndInspection = PerformanceInspection.createEventEndInspection("event end"); PerformanceInspectionResult eventEndResult = performanceTestManagementService.inspect(eventEndInspection); Assertions."<AssertPlaceHolder>";  }
[*] target: assertNull(eventEndResult)
[-] pred: org. junit. Assert. assertNull ( eventEndResult )
************************************
[+] input: numBits_zeroAndPositiveBounds() { SpaceFillingCurve sfc = new TestSpaceFillingCurve(0, 16); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, sfc.numBits())
[-] pred: org. junit. Assert. assertEquals ( 5, sfc. numBits() )
************************************
[+] input: done() { ResponseFutureWrapper responseFutureWrapper = new ResponseFutureWrapper("Test"); responseFutureWrapper.done(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(responseFutureWrapper.isDone())
[-] pred: org. junit. Assert. assertTrue ( responseFutureWrapper. isDone() )
************************************
[+] input: dummyDatasetForDebug() { final IPVDataset dataset = new IPVDataset(Arrays.asList( List.of("A"), List.of("A"), List.of("A"), List.of("B"), List.of("B"), List.of("B") ), null, false);  Double report = new SensitiveSimilarityMeasure().initialize(dataset, null, null, Collections.singletonList(new Partition() { @Override public int size() { return dataset.getNumberOfRows(); }  @Override public double getNormalizedWidth(int qidColumn) { return 0; }  @Override public IPVDataset getMember() { return dataset; }  @Override public boolean isAnonymous() { return false; }  @Override public void setAnonymous(boolean value) {  } }), Collections.singletonList(new SensitiveColumnInformation()), null).report();  "<AssertPlaceHolder>"; System.out.println(report); }
[*] target: assertNotNull(report)
[-] pred: org. junit. Assert. assertNotNull ( report )
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); doCallRealMethod().when(mu).closeTransport(null); doNothing().when(mu).initMailConfig(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0]; doNothing().when(session).setDebug(true); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doAnswer(a -> { throw new MessagingException(""); }).when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: validateGivenMethodWithMoreThanOneTypeParameters() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter()), Optional.of(LIST.with(T)), "myFunction", asList(Parameter.of(ARRAY_LIST.with(T), "value")) );  Validated<String, InitializerOrFinalizerValidator.Result> expected = Validated.invalid("Method requires exactly 1 type parameters, but found 2"); Validated<String, InitializerOrFinalizerValidator.Result> toVerify = InitializerOrFinalizerValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DialogOpenEvent>> listeners = component.getEventListeners(DialogOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DialogOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: givenColor() { // See https://benjiweber.co.uk/blog/2020/09/19/fun-with-java-records/ Color color = new Color(1, 2, 3); Town expected = new Town(1, 2, 3); Town toVerify = color.decomposeTo(Town::new); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCheckWhenParameterNull() { CustomDataPermissionChecker customChecker = new CustomDataPermissionChecker(deptService);  boolean check1 = customChecker.check(null, null); boolean check2 = customChecker.check(loginUser, null); boolean check3 = customChecker.check(null, new DataCondition());  "<AssertPlaceHolder>"; assertFalse(check2); assertFalse(check3); }
[*] target: assertFalse(check1)
[-] pred: org. junit. Assert. assertFalse ( check1 )
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); doNothing().when(transport).connect(anyString(), anyInt(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doNothing().when(transport).close(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0];  doAnswer(a -> { throw new IOException(""); }).when(transport).sendMessage(any(MimeMessage.class), any(Address[].class));  doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: testLocalDateTime() { LocalDateTime now = LocalDateTime.now(); long l = now.toInstant(ZoneOffset.UTC).toEpochMilli(); TapInsertRecordEvent insertRecordEvent = TapInsertRecordEvent.create().init() .after(new Document("id",1).append("ts", now)); Long aLong = CdcDelay.parseTs(insertRecordEvent); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(l, aLong); }
[*] target: assertNotNull(aLong)
[-] pred: org. junit. Assert. assertNotNull ( aLong )
************************************
[+] input: parseArray() { String str = "[123]"; JSONLexer lexer = new JSONScanner(str); DefaultJSONParser parser = new DefaultJSONParser(str, lexer, ParserConfig.global); List list = new ArrayList(); parser.parseArray(Long.class, list); parser.handleResovleTask(list); "<AssertPlaceHolder>"; assertEquals(123L, list.get(0)); }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: testGetDiscountAmount_withAmountDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.AMOUNT); given(couponCampaign.getDiscountAmount()).willReturn(discountAmount); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: testArray() {  SchemaBuilder builder = new SchemaBuilder(). // addProperty("name", "string", "Please enter your name"). // addProperty("description", "string", null);  builder.addArray("comments");  builder.addProperty("user", "string", "", null); builder.addProperty("date", "string", "", null);  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testCountTapDataEventOfTapDataHeartbeatEvent() { List<TapdataEvent> events = new ArrayList<>(); TapdataHeartbeatEvent event = new TapdataHeartbeatEvent(); Long time = System.currentTimeMillis() - 5; event.setSourceTime(time); events.add(event); HandlerUtil.EventTypeRecorder recorder = HandlerUtil.countTapdataEvent(events); Assertions.assertNotNull(recorder); Assertions.assertEquals(0, recorder.getMemorySize()); Assertions.assertEquals(0, recorder.getUpdateTotal()); Assertions.assertEquals(0, recorder.getInsertTotal()); Assertions.assertEquals(0, recorder.getDdlTotal()); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(recorder.getReplicateLagTotal() > 4); }
[*] target: assertEquals(0, recorder.getTotal())
[-] pred: org. junit. Assert. assertEquals ( 0, recorder. getTotal() )
************************************
[+] input: shouldCreateFieldWithLabelValueAndPlaceholder() { LocalDate value = LocalDate.of(2020, 10, 1); component = new MaskedDateFieldSpinner("label", value, "placeholder"); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals("placeholder", component.getPlaceholder()); assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(value, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( value, component. getValue() )
************************************
[+] input: testQueryMonitorMetricsDataNotAvailable() {  Long monitorId = 1L;  when(realTimeDataStorage.isServerAvailable()).thenReturn(false);  List<CollectRep.MetricsData> result = warehouseService.queryMonitorMetricsData(monitorId);  "<AssertPlaceHolder>"; verify(realTimeDataStorage, never()).getCurrentMetricsData(anyLong()); }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: configProperty() {  entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (1, 'true', 'central', 'false', 'null', 2, 'MAVEN', 'https://repo1.maven.org/maven2/'); """).executeUpdate(); entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (2, 'true', 'central2', 'false', 'null', 1, 'MAVEN', 'https://repo1.maven.org/maven2/123'); """).executeUpdate(); final List<Repository> config= repository .findEnabledRepositoriesByType(RepositoryType.MAVEN); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, config.get(0).getResolutionOrder()); Assertions.assertEquals(2, config.get(1).getResolutionOrder()); }
[*] target: assertEquals(2, config.size())
[-] pred: org. junit. Assert. assertEquals ( 2, config. size ( ) )
************************************
[+] input: test1() { ParserConfig config = new ParserConfig(); try { config.setSafeMode(true); } catch (Exception ignored) { // ignored }  ParserConfig.AutoTypeCheckHandler handler = new ParserConfig.AutoTypeCheckHandler() { @Override public Class<?> handler(String typeName, Class<?> expectClass, int features) { return null; } }; config.addAutoTypeCheckHandler(handler); config.addDeny("aaa"); config.addDenyInternal("aaa"); config.addAccept("aaa");  Properties properties = new Properties(); properties.put(ParserConfig.AUTOTYPE_ACCEPT, "a,b,c"); properties.put(ParserConfig.DENY_PROPERTY, "e,f,g");  ObjectDeserializer deserializer = config.get(Bean.class); assertNotNull(deserializer);  deserializer = config.getDeserializer(Bean.class); assertNotNull(deserializer);  deserializer = config.getDeserializer(Bean.class, Bean.class); "<AssertPlaceHolder>";  Bean bean = deserializer.deserialze(new DefaultJSONParser("{"id":123}"), null, null); assertEquals(123, bean.id); }
[*] target: assertNotNull(deserializer)
[-] pred: org. junit. Assert. assertNotNull ( deserializer )
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this") .withObjectPath("property") .withObjectPath("current") .getObjectPathOrTypeGenerator() .generate();  String expected = "this.property.current";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: SQLException { RdsMultiAzDbClusterListProvider.clearAll();  RdsMultiAzDbClusterListProvider provider1 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-2.xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doAnswer(a -> topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsMultiAzDbClusterListProvider.topologyCache.size());  List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  // RdsMultiAzDbClusterListProvider.logCache();  RdsMultiAzDbClusterListProvider provider2 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  doAnswer(a -> topologyClusterA).when(provider2).queryForTopology(any(Connection.class));  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertNotEquals(provider1.clusterId, provider2.clusterId); assertFalse(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId); assertEquals(2, RdsMultiAzDbClusterListProvider.topologyCache.size()); assertEquals("cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com", RdsMultiAzDbClusterListProvider.suggestedPrimaryClusterIdCache.get(provider1.clusterId));  // RdsMultiAzDbClusterListProvider.logCache();  topologyProvider1 = provider1.forceRefresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1); assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  // RdsMultiAzDbClusterListProvider.logCache(); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: cloneSchemaTest2() { List<Schema> schemaList = migrateProcessorNode.cloneSchema(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0,schemaList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, schemaList. size ( ) )
************************************
[+] input: testInsertBatch() { List<User> userList = new ArrayList<>(); { User user = new User(); user.setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); userList.add(user); } { User user = new User(); user.setName("李四") .setAge(17) .setCreateTime(LocalDateTime.now()); userList.add(user); } int insert = commonDao.insertBatch(userList); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, insert)
[-] pred: org. junit. Assert. assertEquals ( 2, insert )
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testDeserializeWithBytes() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("", bytes);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
[+] input: testEmptyKeys() { keys = new String[0]; when(scheduleUtil.whereForSettings(keys)).thenCallRealMethod(); Query query = scheduleUtil.whereForSettings(keys); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(query)
[-] pred: org. junit. Assert. assertNotNull ( query )
************************************
[+] input: testLookupSuccessful() { VINManager vinManager = new VINManager(); String wmi = "1C3"; assertTrue(vinManager.isValidWMI(wmi));  //check that the lowercase version is also matched wmi = "1c3"; "<AssertPlaceHolder>"; }
[*] target: assertTrue(vinManager.isValidWMI(wmi))
[-] pred: org. junit. Assert. assertTrue ( vinManager. isValidWMI(wmi ) )
************************************
[+] input: propertyPreFilter() { JSONWriter jsonWriter = JSONWriter.of(); JSONWriter.Context context = jsonWriter.getContext();  context.setPropertyPreFilter(null); assertNull(context.getPropertyPreFilter());  context.setNameFilter(null); assertNull(context.getNameFilter());  context.setValueFilter(null); assertNull(context.getValueFilter());  context.setPropertyFilter(null); assertNull(context.getPropertyFilter());  context.setContextValueFilter(null); assertNull(context.getContextValueFilter());  context.setContextNameFilter(null); assertNull(context.getContextNameFilter());  context.setAfterFilter(null); assertNull(context.getAfterFilter());  context.setBeforeFilter(null); assertNull(context.getBeforeFilter());  context.setLabelFilter(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(context.getLabelFilter())
[-] pred: org. junit. Assert. assertNull ( context. getLabelFilter() )
************************************
[+] input: testDeleteFileOfDirectory() { //            File file = new File("temp"); //            if (file.mkdir() && file.exists()) { //                utils.deleteFile(file, new TapLog()); //            } //            Assertions."<AssertPlaceHolder>"; //        }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
[+] input: testInspectChartNormal() { Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(1, actual.get("error")); assertEquals(1, actual.get("running")); assertEquals(1, actual.get("done")); assertEquals(1, actual.get("waiting")); assertEquals(1, actual.get("scheduling")); assertEquals(1, actual.get("stopping")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: test_When_Order_Success() {  String bearerToken = "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVc2VyIiwiaXNzIjoiUk9MRV9VU0VSICIsImlhdCI6MTY3MjQ0NDI2MiwiZXhwIjoxNjcyNDQ0MzgyfQ.8QKm8VKgi8zHAo7YGngB00ng6XrByyofzUkEq_3g4omRA_ODGpwjDYSDNIvpEKXEATt6oMWV9JrMkHz3hI-xOw";  HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set("Authorization", "Bearer "+ bearerToken);  HttpEntity request = new HttpEntity<>(headers);  //Mocking Order order = getMockOrder(); when(orderRepository.findById(anyLong())) .thenReturn(Optional.of(order));   when(restTemplate.exchange( "http://PRODUCT-SERVICE/product/" + order.getProductId(), HttpMethod.GET, request, ProductResponse.class)).thenReturn(ResponseEntity.ok(getMockProductResponse()));  when(restTemplate.exchange( "http://PAYMENT-SERVICE/payment/order/" + order.getId(), HttpMethod.GET, request, PaymentResponse.class)).thenReturn(ResponseEntity.ok(getMockPaymentResponse()));  //Actual OrderResponse orderResponse = orderService.getOrderDetails(1,"Bearer "+ bearerToken);  //Verification verify(orderRepository, times(1)).findById(anyLong());  verify(restTemplate, times(1)) .exchange("http://PRODUCT-SERVICE/product/" + order.getProductId(), HttpMethod.GET, request, ProductResponse.class);  verify(restTemplate, times(1)) .exchange("http://PAYMENT-SERVICE/payment/order/" + order.getId(), HttpMethod.GET, request, PaymentResponse.class);  //Assert "<AssertPlaceHolder>"; assertEquals(order.getId(), orderResponse.getOrderId()); }
[*] target: assertNotNull(orderResponse)
[-] pred: org. junit. Assert. assertNotNull ( orderResponse )
************************************
[+] input: testEraseAllSessions() { var sessions = new MemorySessions(); sessions.setSessionDuration(1200000);  try { sessions.startSession(8433, "143.98.32.545", false); assertTrue(sessions.countSessions() > 0); sessions.eraseAllSessions(); "<AssertPlaceHolder>"; } catch (SessionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, sessions.countSessions())
[-] pred: org. junit. Assert. assertEquals ( 0, sessions. countSessions() )
************************************
[+] input: deleteSelectedErrorSamplesFragment_whenFilterCapturesSpanOfTwoPartitions_thenDeleteCapturedRows() { String connectionName = "connection"; String tableName = "tab"; String id_prefix1 = "1"; String id_prefix2 = "2"; PhysicalTableName physicalTableName = new PhysicalTableName("sch", tableName); UserDomainIdentity userIdentity = UserDomainIdentityObjectMother.createAdminIdentity();  LocalDate month1 = LocalDate.of(2023, 1, 1); LocalDate month2 = LocalDate.of(2023, 2, 1); LocalDateTime startDate1 = month1.atStartOfDay().plusDays(14); LocalDateTime startDate2 = month2.atStartOfDay().plusDays(14);  Table table1 = prepareSimplePartitionTable(tableName, startDate1, id_prefix1); Table table2 = prepareSimplePartitionTable(tableName, startDate2, id_prefix2);  ParquetPartitionId partitionId1 = new ParquetPartitionId( userIdentity.getDataDomainFolder(), this.errorSamplesStorageSettings.getTableType(), connectionName, physicalTableName, month1); ParquetPartitionId partitionId2 = new ParquetPartitionId( userIdentity.getDataDomainFolder(), this.errorSamplesStorageSettings.getTableType(), connectionName, physicalTableName, month2);  this.parquetPartitionStorageService.savePartition( new LoadedMonthlyPartition(partitionId1), new TableDataChanges(table1), this.errorSamplesStorageSettings, userIdentity); this.parquetPartitionStorageService.savePartition( new LoadedMonthlyPartition(partitionId2), new TableDataChanges(table2), this.errorSamplesStorageSettings, userIdentity);  ErrorsSamplesFragmentFilter filter = new ErrorsSamplesFragmentFilter(){{ setTableSearchFilters(new TableSearchFilters(){{ setConnection(connectionName); setFullTableName(physicalTableName.toTableSearchFilter()); }}); setDateStart(startDate1.toLocalDate()); setDateEnd(startDate2.toLocalDate()); }};  this.sut.deleteSelectedErrorSamplesFragment(filter, userIdentity);  LoadedMonthlyPartition partition1AfterDelete = this.parquetPartitionStorageService.loadPartition( partitionId1, this.errorSamplesStorageSettings, null, userIdentity); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(0L, partition1AfterDelete.getLastModified());  LoadedMonthlyPartition partition2AfterDelete = this.parquetPartitionStorageService.loadPartition( partitionId2, this.errorSamplesStorageSettings, null, userIdentity); Assertions.assertNotNull(partition2AfterDelete.getData()); Assertions.assertFalse(partition2AfterDelete.getData().textColumn(ErrorSamplesColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id1")); Assertions.assertTrue(partition2AfterDelete.getData().textColumn(ErrorSamplesColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id2")); Assertions.assertTrue(partition2AfterDelete.getData().textColumn(ErrorSamplesColumnNames.ID_COLUMN_NAME).contains(id_prefix2 + "id3")); Assertions.assertNotEquals(0L, partition2AfterDelete.getLastModified()); }
[*] target: assertNull(partition1AfterDelete.getData())
[-] pred: org. junit. Assert. assertNull ( partition1AfterDelete. getData ( ) )
************************************
[+] input: testLoadFromBytesError() { var loader = new ImageIOLoader(); Set<String> errors = new HashSet<>();  var image_bytes = new byte[]{2, 9, 7, 12, 45}; // just random values var image = loader.loadFromBytes(image_bytes, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
[*] target: assertNull(image)
[-] pred: org. junit. Assert. assertNull ( image )
************************************
[+] input: testCheckLicenseEngineLimitWithCloud() { connectorManager = mock(ConnectorManager.class); CheckEngineValidResultDto actual = connectorManager.checkLicenseEngineLimit(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null,actual)
[-] pred: org. junit. Assert. assertEquals ( null, actual )
************************************
[+] input: lambdaWithSingleExpressionAsMultipleLines() { List<String> toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .multiline();  List<String> expected = asList( "(capacity, hasPower) ->", "        new Device(capacity, hasPower)" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatMatchesElementType() { TypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); TypeConstructor toVerify = new ArrayType(new GenericType(T)).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testUpdated() { Date date = new Date(); Vulnerability vuln = new Vulnerability(); vuln.setUpdated(date); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(date, vuln.getUpdated())
[-] pred: org. junit. Assert. assertEquals ( date, vuln. getUpdated() )
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteEnd() { String input = "/home/user/file.txt""; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: of() { ArrayType expected = new ArrayType(STRING); ArrayType toVerify = ArrayType.of(STRING);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldFindCustomerById() {  CusCustomer cusCustomer = createDummyCusCustomer(); Long cusCustomerId = cusCustomer.getId(); CusCustomerDto expectedResult = createDummyCusCustomerDto();  when(cusCustomerEntityService.getByIdWithControl(cusCustomerId)).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.findCustomerById(cusCustomerId);  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: fipeTabelasPass() { FipeTabela[] fipeTabelas = BrasilAPI.fipeTabelas(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(fipeTabelas)
[-] pred: org. junit. Assert. assertNotNull ( fipeTabelas )
************************************
[+] input: shouldSetAndGetCustomFilters() { component = new FileChooserDialog(); component.setCustomFilters(true); "<AssertPlaceHolder>";  assertEquals("true", component.getAttributes().get("custom-filters")); }
[*] target: assertTrue(component.isCustomFilters())
[-] pred: org. junit. Assert. assertTrue ( component. isCustomFilters() )
************************************
[+] input: IOException { OkHttpClient client = createHttpClient(Boolean.FALSE, Boolean.TRUE, Integer.valueOf(5)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: testExecuteByteRange() { List<Node> comments = body.getChildren().stream() .filter(Node::isNamed) .collect(Collectors.toUnmodifiableList()); @Cleanup QueryCursor cursor = root.walk(query); Assertions.assertFalse(cursor.isExecuted()); for (Node comment: comments) { int lowerByte = comment.getStartByte(); int upperByte = comment.getEndByte(); cursor.setRange(lowerByte, upperByte); Iterator<QueryMatch> iterator = cursor.iterator(); Assertions.assertTrue(cursor.isExecuted()); Assertions.assertTrue(iterator.hasNext()); Assertions.assertNotNull(iterator.next()); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1"); SampleEntitlementId id2 = new SampleEntitlementId("cat", "jit-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
[+] input: parse_ShouldParseTextAndReturnAsInstant() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); Instant result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value,result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: test_isCloudLimit() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: givenMultipleLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "        Line 2" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenTypeParameter() { String toVerify = toTest() .withType(T.extending(COMPARABLE.with(T))) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testIf() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("if-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testIf"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testIf");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  1 = 1\n" + "  AND category = 'apple'\n" + "  AND price = 100.0";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"price": 100.0, "category": "apple"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  1 = 1\n" + "  AND category = 'apple'\n" + "  AND price = 500.0\n" + "  AND name = 'Fuji'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"price": 500.0, "category": "apple"}")); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: isEmptyTest() { // 这是jdk11 Optional中的新函数，直接照搬了过来 // 判断包裹内元素是否为空，注意并没有判断空字符串的情况 final boolean isEmpty = Opp.empty().isEmpty(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isEmpty)
[-] pred: org. junit. Assert. assertTrue ( isEmpty )
************************************
[+] input: testReturnSubstringWithCodon3() { String expectedResult = this.expectedCodon3; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testReplaceBatch() { User user = new User(); user.setId(1L) .setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); int replace = commonDao.replaceBatch(Collections.singletonList(user)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, replace)
[-] pred: org. junit. Assert. assertEquals ( 2, replace )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double value = Double.valueOf(valueAsString); // encoding could be from user input, so may not be in Java Double.toString() format ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Double result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testBuildTaskRetryConfigWithNull() { doCallRealMethod().when(tapTableMap).buildTaskRetryConfig(null); tapTableMap.buildTaskRetryConfig(null); Object actual = ReflectionTestUtils.getField(tapTableMap, "taskConfig"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null,actual)
[-] pred: org. junit. Assert. assertEquals ( null, actual )
************************************
[+] input: failOnUnknownPropertiesMapperTest() { Asset asset = new Asset(); asset.setId(new AssetId(UUID.randomUUID())); asset.setName("Test"); asset.setType("type"); String serializedAsset = JacksonUtil.toString(asset); JsonNode jsonNode = JacksonUtil.toJsonNode(serializedAsset); // case: add new field to serialized Asset string and check for backward compatibility with original Asset object Assertions.assertNotNull(jsonNode); ((ObjectNode) jsonNode).put("test", (String) null); serializedAsset = JacksonUtil.toString(jsonNode); // deserialize with FAIL_ON_UNKNOWN_PROPERTIES = false Asset result = JacksonUtil.fromString(serializedAsset, Asset.class, true); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(asset.getId(), result.getId()); Assertions.assertEquals(asset.getName(), result.getName()); Assertions.assertEquals(asset.getType(), result.getType()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: parse_ShouldReturnNull_WhenValueIsNull() { String value = null; String result = codec.parse(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: ncmPass() { NCM[] ncm = BrasilAPI.ncm(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ncm)
[-] pred: org. junit. Assert. assertNotNull ( ncm )
************************************
[+] input: testValid() { Identifier identifier = new ItalianVATCodeIdentifier();  for (String valid : new String[]{ "03449210123", "03967190962" }) { "<AssertPlaceHolder>"; } }
[*] target: assertTrue(identifier.isOfThisType(valid))
[-] pred: org. junit. Assert. assertTrue ( identifier. isOfThisType ( valid ) )
************************************
[+] input: generateReport_AuthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(false); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getAllTopics(TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when(handleDbRequestsJdbc.getAllConsumerGroups(TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testInitLoader() { ExtensionLoader<DemoExtension> extensionLoader = ExtensionLoader.getExtensionLoader(DemoExtension.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(extensionLoader)
[-] pred: org. junit. Assert. assertNotNull ( extensionLoader )
************************************
[+] input: shouldMaskNumber() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge); float input = 12345; String mask = "##,###,###.00"; String expected = "12,345.00";  when(bridge.maskNumber(input, mask)).thenReturn(expected);  String result = MaskDecorator.forNumber(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testReconstructsDictionaryWithValueInserted() { String term = "foo";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); assertEquals("B", dictionaryEntries.get(1).getValue()); }
[*] target: assertEquals(2, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 2, dictionaryEntries. size ( ) )
************************************
[+] input: testSingleRow() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NextValidTimeAfterCurrent() { String cronExpressionString = "0 */10 * * * ?"; // Every 10th minute CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Calendar calendar = Calendar.getInstance(); calendar.set(2022, Calendar.JUNE, 5, 11, 5);  Instant now = calendar.getTime().toInstant(); // 11:05 Instant lastTrigger = now.minus(Duration.ofMinutes(4)); // 11:01, next trigger at 11:10  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: 카트라인_결제금액_없을때_결제필요_여부_조회() { // given given(cartOptionAnswer.getAdditionalPrice()).willReturn(Money.ZERO); // when Boolean needPaid = freeCartLineItem.isNeedPaid(); // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(needPaid)
[-] pred: org. junit. Assert. assertFalse ( needPaid )
************************************
[+] input: testPublished() { Date date = new Date(); Vulnerability vuln = new Vulnerability(); vuln.setPublished(date); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(date, vuln.getPublished())
[-] pred: org. junit. Assert. assertEquals ( date, vuln. getPublished() )
************************************
[+] input: testIsImmobilized() { final Combatant combatant = new Combatant(); assertFalse(combatant.isImmobilized()); combatant.addBuff(Buff.builder().buffType(STUN).buffTraits(Collections.singletonList(IMMOBILIZE_BUFF.name())).build()); assertTrue(combatant.isImmobilized());  combatant.getBuffs().clear(); assertFalse(combatant.isImmobilized()); combatant.addBuff(Buff.builder().buffType(CHARM).buffTraits(Collections.singletonList(IMMOBILIZE_BUFF.name())).build()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(combatant.isImmobilized())
[-] pred: org. junit. Assert. assertTrue ( combatant. isImmobilized() )
************************************
[+] input: shouldSetAndGetMacOptionClickForcesSelection() { options.setMacOptionClickForcesSelection(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isMacOptionClickForcesSelection())
[-] pred: org. junit. Assert. assertTrue ( options. isMacOptionClickForcesSelection() )
************************************
[+] input: shouldAddRowDeselectListener() { table.onItemDeselect(event -> { });  List<EventListener<TableItemDeselectEvent>> listeners = table.getEventListeners(TableItemDeselectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDeselectEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: oneWaySynonymStrings() { LinkedList<Item> expected = new LinkedList<>(Arrays.asList(item3, item4, item5)); LinkedList<Item> actual = null; try { actual = itemCatalog.oneWaySynonymStrings("Vehicle"); } catch (notFoundException e) { fail(); } boolean equals = true;  for (int i =0; i<expected.size(); i++){ if (expected.get(i)!=actual.get(i)){ equals = false; } }  "<AssertPlaceHolder>"; }
[*] target: assertTrue(equals)
[-] pred: org. junit. Assert. assertTrue ( equals )
************************************
[+] input: setProperty_Boolean() { Boolean value = true; Boolean setValue = (Boolean) helper.setProperty(KnownProperties.TEST_BOOLEAN, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { GroupId id1 = new GroupId("group@example.com"); GroupId id2 = new GroupId("group@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: testSaveClusterGroup_ClusterHostServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockHostService.getHostListByClusterId(0)).thenReturn(Collections.emptyList());  // Run the test final Result result = clusterGroupServiceImplUnderTest.saveClusterGroup(0, "groupName");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: givenArrayType() { Type type = OBJECT.array(); String toVerify = type(type).generate(); String expected = "java.lang.Object[]"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: IOException { final ExportHelper exportHelper = new ExportHelper(clientHandler); final ClassLoaderDescriptor classLoaderDescriptor = ClassLoaderDescriptor.builder().build(); final List<LoadedClass> classesToExport = List.of(new LoadedClass("org.test.MyClass", null, null), new LoadedClass("org.othertest.SomeClass", classLoaderDescriptor, null), new LoadedClass("testing.Export", classLoaderDescriptor, null));  final Map<String, byte[]> classData = classesToExport.stream() .collect(Collectors.toMap(LoadedClass::getName, l -> generateClassBytes()));  Mockito.when(clientHandler.getClassBytes(ArgumentMatchers.eq(JVM), ArgumentMatchers.any())) .thenAnswer(ctx -> classData.get(ctx.getArgument(1, LoadedClass.class).getName()));  final File outputFile = File.createTempFile("export", ".jar"); final AtomicInteger exportCount = new AtomicInteger();  final boolean success = exportHelper.export(JVM, classesToExport, outputFile, exportCount::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(classesToExport.size(), exportCount.get());  final JarFile jarFile = new JarFile(outputFile); final List<JarEntry> jarEntries = jarFile.stream() .filter(entry -> entry.getName().endsWith(".class")) .collect(Collectors.toList()); Assertions.assertEquals(jarEntries.size(), classesToExport.size());  for (JarEntry jarEntry : jarEntries) { final byte[] jarClassFile = jarFile.getInputStream(jarEntry).readAllBytes(); final byte[] baseClassFile = classData.get(jarEntry.getName().replace('/', '.').replace(".class", "")); Assertions.assertArrayEquals(baseClassFile, jarClassFile); } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: nothingTest() { val list = Lists.of(); SerCons.nothing().andThen(list::add).accept("foo"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("foo", list.get(0)); }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: testMilestoneEntityIsNull() { milestones.put("code", null); milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.WAITING, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DECIMAL.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.contravariant(), INTEGER_TYPE.covariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), BOOLEAN_TYPE_CONSTRUCTOR.contravariant(), INTEGER_TYPE_CONSTRUCTOR.covariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testReturnSubstringWithCodon6() { String expectedResult = this.expectedCodon6; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon6); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.2.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseBaseVersionRelMigImpl.class.getName(), redirect.getClass().getName()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
[+] input: resolveFileFormat_whenAvailableOnTableAndParameters_retunsFormTable() {  TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat(FileFormatSpecObjectMother.createForCsvFile(SampleCsvFileNames.continuous_days_one_row_per_day));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertTrue(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: shouldSetGetValue() { Double expectedValue = 1.99; assertSame(component, component.setValue(expectedValue)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, component. getValue ( ) )
************************************
[+] input: parseObject3() { DefaultJSONParser parser = new DefaultJSONParser("null"); JSONObject object = parser.parseObject(); "<AssertPlaceHolder>"; }
[*] target: assertNull(object)
[-] pred: org. junit. Assert. assertNull ( object )
************************************
[+] input: array() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = STRING_TYPE.array();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: withoutTypeParameters() { ContainingClass expected = new ContainingClass( containingPackage, modifiers(PUBLIC), new ClassName("Erudite"), emptyList() );  ContainingClass toVerify = ContainingClass.of( packageName, new ClassName("Erudite") );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetClassesInPackage() { final ClassTreeHelper classTreeHelper = new ClassTreeHelper();  final FilterableTreeItem<ClassTreeNode> root = buildClassTree();  final List<LoadedClass> classesInPackage = classTreeHelper.getClassesInPackage(root, "org", null);  Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(classesInPackage.stream().allMatch(c -> c.getName().startsWith("org"))); }
[*] target: assertEquals(2, classesInPackage.size())
[-] pred: org. junit. Assert. assertEquals ( 2, classesInPackage. size ( ) )
************************************
[+] input: testRemoveLast() { deque.addLast(1); deque.addLast(2); assertEquals(Integer.valueOf(2), deque.removeLast()); assertEquals(Integer.valueOf(1), deque.get(0)); assertEquals(Integer.valueOf(1), deque.removeLast()); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
[+] input: SQLException { when(mockHostSpec.getUrl()).thenReturn("url"); final Set<PoolKey> expectedKeys = new HashSet<>( Collections.singletonList(new PoolKey("url", "url+someUniqueKey")));  provider = spy(new HikariPooledConnectionProvider( (hostSpec, properties) -> mockConfig, (hostSpec, properties) -> hostSpec.getUrl() + "+someUniqueKey"));  doReturn(mockDataSource).when(provider).createHikariDataSource(any(), any(), any(), any());  Properties props = new Properties(); props.setProperty(PropertyDefinition.USER.name, user1); props.setProperty(PropertyDefinition.PASSWORD.name, password); try (Connection conn = provider.connect(protocol, mockDialect, mockTargetDriverDialect, mockHostSpec, props)) { assertEquals(mockConnection, conn); assertEquals(1, provider.getHostCount()); final Set<PoolKey> keys = provider.getKeys(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedKeys, keys)
[-] pred: org. junit. Assert. assertEquals ( expectedKeys, keys )
************************************
[+] input: testReplay() { Mockito.when(extractor.replay()).thenReturn(MockResult.success("mock")); MockResult result = target.replay(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: bind_withWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testReturnSubstringWithCodon8() { String expectedResult = this.expectedCodon8; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon8); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testSkipNullCreateSourceInField() { when(field.getCreateSource()).thenReturn(null); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: resolveFileFormat_whenNotSetOnTable_guessesFormConnectionParameters() { String schemaName = "schema_name_example"; String tableName = "a/file/path.csv"; String pathPrefix = "prefix_example"; TableSpec tableSpec = new TableSpec(new PhysicalTableName(schemaName, tableName));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }}); duckdbParametersSpec.getDirectories().put(schemaName, pathPrefix);  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertEquals(fileFormatSpec.getFilePaths().get(0), Path.of(pathPrefix,tableName).toString()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: givenNestedClass() { ContainingClass containingClass = ContainingClass.of( ContainingClass.of( ContainingClass.of( ContainingPackage.of(PackageName.of("nl.wernerdegroot")), modifiers(PUBLIC), ClassName.of("OuterClass"), asList(A.asTypeParameter()) ), modifiers(PRIVATE, STATIC), ClassName.of("StaticInnerClass"), asList(B.asTypeParameter(), C.extending(SERIALIZABLE)) ), modifiers(), ClassName.of("InnerClass"), emptyList() );  String expected = "nl.wernerdegroot.OuterClass<A>.StaticInnerClass<B, C extends java.io.Serializable>.InnerClass"; String toVerify = ContainingClassGenerator.generateFrom(containingClass);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: initialization() { final var s3ClientProvider = new S3ClientProvider(null);  assertNotNull(s3ClientProvider.configuration);  S3AsyncClient t = s3ClientProvider.universalClient(); "<AssertPlaceHolder>";  var config = new S3NioSpiConfiguration(); assertSame(config, new S3ClientProvider(config).configuration); }
[*] target: assertNotNull(t)
[-] pred: org. junit. Assert. assertNotNull ( t )
************************************
[+] input: testOnChannelActive() {  RemotingClient remotingClient = mock(RemotingClient.class); ReflectionTestUtils.setField(collectServer, "remotingClient", remotingClient);  Channel channel = mock(Channel.class); when(collectJobService.getCollectorIdentity()).thenReturn("collector1"); when(collectJobService.getCollectorMode()).thenReturn("mode1"); when(infoProperties.getIp()).thenReturn("127.0.0.1"); when(infoProperties.getVersion()).thenReturn("1.0");  collectNettyEventListener.onChannelActive(channel);  verify(timerDispatch, times(1)).goOnline(); verify(remotingClient, times(1)).sendMsg(any(ClusterMsg.Message.class));  ScheduledExecutorService scheduledExecutor = (ScheduledExecutorService) ReflectionTestUtils.getField(collectServer, "scheduledExecutor"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(scheduledExecutor)
[-] pred: org. junit. Assert. assertNotNull ( scheduledExecutor )
************************************
[+] input: testGetMessage() { String message = "Another Message"; MessageAction action = new MessageAction(message); String retrievedMessage = action.getMessage();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(message, retrievedMessage)
[-] pred: org. junit. Assert. assertEquals ( message, retrievedMessage )
************************************
[+] input: testSelectCount() { User user = new User(); user.setAge(18); long count = commonDaoWrap.selectCount(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, count)
[-] pred: org. junit. Assert. assertEquals ( 2, count )
************************************
[+] input: test_error4() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: givenPrePersistedCategories_whenCallsExistsByIds_shouldReturnIds() { // given final var filmes = Category.newCategory("Filmes", "A categoria mais assistida", true); final var series = Category.newCategory("Séries", "Uma categoria assistida", true); final var documentarios = Category.newCategory("Documentários", "A categoria menos assistida", true);  Assertions.assertEquals(0, categoryRepository.count());  categoryRepository.saveAll(List.of( CategoryJpaEntity.from(filmes), CategoryJpaEntity.from(series), CategoryJpaEntity.from(documentarios) ));  Assertions.assertEquals(3, categoryRepository.count());  final var expectedIds = List.of(filmes.getId(), series.getId());  final var ids = List.of(filmes.getId(), series.getId(), CategoryID.from("123"));  // when final var actualResult = categoryGateway.existsByIds(ids);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedIds, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedIds, actualResult )
************************************
[+] input: testLoadFromBytesErrorNoList() { var loader = new ImageIOLoader();  var image_bytes = new byte[]{2, 9, 7, 12, 45}; // just random values var image = loader.loadFromBytes(image_bytes, null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(image)
[-] pred: org. junit. Assert. assertNull ( image )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
[+] input: withUpperBound() { TypeParameter typeParameter = T.extending(COMPARABLE.with(T)); String toVerify = generateFrom(typeParameter); String expected = "T extends java.lang.Comparable<T>"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testGetByAddress() { Worker worker = workerDAO.getByAddress("127.0.0.1:25300");  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("xxx-service", worker.getAppName()); }
[*] target: assertNotNull(worker)
[-] pred: org. junit. Assert. assertNotNull ( worker )
************************************
[+] input: returnsMergeTableNodeWhenNodeIsInstanceOfMergeTableNode() { String nodeId = "testNodeId"; MergeTableNode expectedNode = new MergeTableNode();  DAG dag = mock(DAG.class); when(dag.getNode(nodeId)).thenReturn((Node) expectedNode);  MergeTableNode result = mergeNodeCleaner.getMergeTableNode(dag, nodeId);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedNode, result)
[-] pred: org. junit. Assert. assertEquals ( expectedNode, result )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode0() { when(nodeList.size()).thenReturn(2); JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2);  DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node1, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldSetAndGetScreenReaderMode() {  options.setScreenReaderMode(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isScreenReaderMode())
[-] pred: org. junit. Assert. assertTrue ( options. isScreenReaderMode() )
************************************
[+] input: testFormatTimestamp() { String str = DateUtil.formatTimestamp(1685624782010L); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(str)
[-] pred: org. junit. Assert. assertNotNull ( str )
************************************
[+] input: testInfo) { var userDetails = userDetailsService.loadUserByUsername(email); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(testInfo.getDisplayName(), userDetails.getUsername()); }
[*] target: assertNotNull(userDetails)
[-] pred: org. junit. Assert. assertNotNull ( userDetails )
************************************
[+] input: testTryEmit() { when(mockOutBox.offer(any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 1); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testStripQuotes() { String input = ""/home/user/file.txt""; Path expected = Paths.get("/home/user/file.txt"); Path result = PathUtil.stripQuotes(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testCategorization2SectionsWithoutLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // // missing Layout addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>"; logger.info(json); assertTrue(json.contains("VerticalLayout"));  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: shouldTriggerAutomaticSnapshot_EmptyExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: testReOpenAll() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.reOpen(ids, user)).thenReturn(mock); when(webHookController.reOpenAll(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.reOpenAll(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).reOpen(ids, user); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: evaluateShouldOverwriteRestartCountWhenTimestampIsOutOfWindow() { configuration.set(OPERATOR_CLUSTER_HEALTH_CHECK_RESTARTS_WINDOW, Duration.ofMinutes(1)); var observedClusterHealthInfo1 = createClusterHealthInfo(validInstant1, 0, 1); var observedClusterHealthInfo2 = createClusterHealthInfo(validInstant2, 1, 1);  setLastValidClusterHealthInfo(observedClusterHealthInfo1); clusterHealthEvaluator.evaluate(configuration, clusterInfo, observedClusterHealthInfo2); var lastValidClusterHealthInfo = ClusterHealthEvaluator.getLastValidClusterHealthInfo(clusterInfo); "<AssertPlaceHolder>"; assertEquals( observedClusterHealthInfo2.getNumRestarts(), lastValidClusterHealthInfo.getNumRestarts()); assertEquals( observedClusterHealthInfo2.getTimeStamp(), lastValidClusterHealthInfo.getNumRestartsEvaluationTimeStamp()); }
[*] target: assertNotNull(lastValidClusterHealthInfo)
[-] pred: org. junit. Assert. assertNotNull ( lastValidClusterHealthInfo )
************************************
[+] input: parseInt() { final EditorHelper editorHelper = new EditorHelper();  final Object result = editorHelper.edit("int", "5"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(5, result)
[-] pred: org. junit. Assert. assertEquals ( 5, result )
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDaoWrap.insert(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: testForEach() { long[] keys = new long[]{1, 17, 33, 2, 18, 3};  LongObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (long key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (long k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (long k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
[+] input: AuthenticationException {  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); LoginDto loginDto = LoginDto.builder() .credential(password) .identifier(identifier) .build();  when(accountProvider.loadAccount(identifier)).thenReturn(account);  Map<String, String> response = accountService.authGetToken(loginDto);  "<AssertPlaceHolder>"; assertNotNull(response.get("token")); assertNotNull(response.get("refreshToken")); assertNotNull(response.get("role")); assertEquals(JsonUtil.toJson(roles), response.get("role"));  }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldAddCancelListener() { component.onCancel(event -> { });  List<EventListener<LoginCancelEvent>> listeners = component.getEventListeners(LoginCancelEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginCancelEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testNewControl() { SortedMap<String, Charset> charsetsSortedMap = Charset.availableCharsets(); for (String encoding : charsetsSortedMap.keySet()) { ResourceBundle.Control control = PropertyResourceBundleControl.newControl(encoding); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(control)
[-] pred: org. junit. Assert. assertNotNull ( control )
************************************
[+] input: testSetValue() { ValueHolder valueHolder = new ValueHolder(); String newValue = "new value"; valueHolder.setValue(newValue); // Assert that the value is equal to the new value "<AssertPlaceHolder>"; }
[*] target: assertEquals(newValue, valueHolder.getValue())
[-] pred: org. junit. Assert. assertEquals ( newValue, valueHolder. getValue() )
************************************
[+] input: shouldSetAndGetAltClickMovesCursor() { options.setAltClickMovesCursor(false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.isAltClickMovesCursor())
[-] pred: org. junit. Assert. assertFalse ( options. isAltClickMovesCursor() )
************************************
[+] input: shouldSetGetMin() { Double expectedMin = 1.99; assertSame(component.setMin(expectedMin), component); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMin, component.getMin())
[-] pred: org. junit. Assert. assertEquals ( expectedMin, component. getMin() )
************************************
[+] input: shouldGenerateSignUpRequestWithRandomCredentialsWhenNoParametersProvided() { SignUpRequest signUpRequest = SignUpUtils.createSignUpRequest();  "<AssertPlaceHolder>"; assertNotNull(signUpRequest.getUsername()); assertTrue(signUpRequest.getPassword().length() >= SignUpUtils.PASSWORD_MIN_LENGTH); assertTrue(signUpRequest.getPassword().length() <= SignUpUtils.PASSWORD_MAX_LENGTH); assertNotNull(signUpRequest.getEmail()); }
[*] target: assertNotNull(signUpRequest)
[-] pred: org. junit. Assert. assertNotNull ( signUpRequest )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyThreeFrame2Test() { int[] expectedResult = {1, 4, 7, 10, 13, 16, 19}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_THREE; CodonFrame temp = new CodonFrame(testSequence, (short) 2, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: getTopicsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsCountByTeams( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testReplace() { User user = new User(); user.setId(1L) .setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); int replace = commonDao.replace(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, replace)
[-] pred: org. junit. Assert. assertEquals ( 2, replace )
************************************
[+] input: testInterceptAspectTest() { AspectInterceptResult aspect = observableAspectTask.onInterceptAspect(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(aspect)
[-] pred: org. junit. Assert. assertNull ( aspect )
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )),user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testNormal() { when(scheduleUtil.criteria(anyString())).thenCallRealMethod(); Criteria mockId = scheduleUtil.criteria("mockId"); Assertions."<AssertPlaceHolder>"; Document criteriaObject = mockId.getCriteriaObject(); Assertions.assertNotNull(criteriaObject); Assertions.assertEquals(5, criteriaObject.size()); Assertions.assertTrue(criteriaObject.containsKey("is_deleted")); Assertions.assertTrue(criteriaObject.containsKey("source._id")); Assertions.assertTrue(criteriaObject.containsKey("sourceType")); Assertions.assertTrue(criteriaObject.containsKey("meta_type")); Assertions.assertTrue(criteriaObject.containsKey("taskId")); }
[*] target: assertNotNull(mockId)
[-] pred: org. junit. Assert. assertNotNull ( mockId )
************************************
[+] input: shouldAddRowClickListener() { table.onItemClick(event -> { });  List<EventListener<TableItemClickEvent>> listeners = table.getEventListeners(TableItemClickEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemClickEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); long delete = commonDaoWrap.deleteSql("delete from user where id = #{id}", params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: testSaveServiceRoleHostMapping() { // Setup final ServiceRoleHostMapping serviceRoleHostMapping = new ServiceRoleHostMapping(); serviceRoleHostMapping.setServiceRole("serviceRole"); serviceRoleHostMapping.setHosts(Arrays.asList("value")); final List<ServiceRoleHostMapping> list = Arrays.asList(serviceRoleHostMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceRoleHostMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: test() { SortedMap<PartitionRange, List<ServerNode>> sortedMap = new TreeMap<>(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList( new ServerNode( String.valueOf(i), "127.0.0." + i, i / 3, 0, 0, 0, 0, Sets.newHashSet("test"))); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(new PlaceholderTypeConstructor()).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCheckServiceDependency() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: Throwable { IgnoreUtils.clearInvalidOperation(); Method testWithArexMock = DynamicClassExtractorTest.class.getDeclaredMethod("testWithArexMock", String.class); DynamicClassExtractor extractor = new DynamicClassExtractor(testWithArexMock, null, "#val", String.class);  // args is empty String actualResult = extractor.buildMethodKey(testWithArexMock, new Object[0]); assertNull(actualResult);  // getDynamicClassSignatureMap is empty ConfigBuilder.create("mock-service").enableDebug(true).build(); Mockito.when(Serializer.serializeWithException(any(), anyString())).thenReturn("mock Serializer.serialize"); actualResult = extractor.buildMethodKey(testWithArexMock, new Object[]{"mock"}); assertEquals("mock Serializer.serialize", actualResult);  // getDynamicClassSignatureMap is not empty, additionalSignature is empty List<DynamicClassEntity> list = new ArrayList<>(); list.add(new DynamicClassEntity("io.arex.inst.dynamic.common.DynamicClassExtractorTest", "testWithArexMock", "mock", "")); ConfigBuilder.create("mock-service").enableDebug(true).dynamicClassList(list).build(); actualResult = extractor.buildMethodKey(testWithArexMock, new Object[]{"mock"}); assertEquals("mock Serializer.serialize", actualResult);  // additionalSignature is not empty list.clear(); list.add(new DynamicClassEntity("io.arex.inst.dynamic.common.DynamicClassExtractorTest", "testWithArexMock", "", "$1")); ConfigBuilder.create("mock-service").enableDebug(true).dynamicClassList(list).build(); actualResult = extractor.buildMethodKey(testWithArexMock, new Object[]{"mock-method-key"}); assertEquals("mock-method-key", actualResult);  // additionalSignature is not empty extractor = new DynamicClassExtractor(testWithArexMock, new Object[]{"mock"}, "#val", String.class); list.clear(); list.add(new DynamicClassEntity("io.arex.inst.dynamic.common.DynamicClassExtractorTest", "testWithArexMock", "mock", "$1")); ConfigBuilder.create("mock-service").enableDebug(true).dynamicClassList(list).build(); actualResult = extractor.buildMethodKey(testWithArexMock, new Object[]{"mock-method-key"}); assertEquals("mock-method-key", actualResult);  // express is null Method testWithArexMockList = DynamicClassExtractorTest.class.getDeclaredMethod("testWithArexMock", List.class); extractor = new DynamicClassExtractor(testWithArexMockList, new Object[]{new ArrayList<>()}, null, String.class); list.clear(); list.add(new DynamicClassEntity("io.arex.inst.dynamic.common.DynamicClassExtractorTest", "testWithArexMock", "mock", "$1.get(0)")); ConfigBuilder.create("mock-service").enableDebug(true).dynamicClassList(list).build(); actualResult = extractor.buildMethodKey(testWithArexMockList, new Object[]{new ArrayList<>()}); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualResult)
[-] pred: org. junit. Assert. assertNull ( actualResult )
************************************
[+] input: testGetTableNameNotTapBaseEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(heartbeatEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); "<AssertPlaceHolder>"; assertEquals("", tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: requiresPreprocessingWithPaddingTest() { final ColumnSchema columnSchema = GeneralTestUtility.sealedColumn("source", "source", PadType.FIXED, 1); "<AssertPlaceHolder>"; }
[*] target: assertTrue(columnSchema.requiresPreprocessing())
[-] pred: org. junit. Assert. assertTrue ( columnSchema. requiresPreprocessing() )
************************************
[+] input: getMonitorDto() { long id = 1L; Monitor monitor = Monitor.builder().jobId(id).intervals(1).app("app").name("memory").host("host").id(id).build(); when(monitorDao.findById(id)).thenReturn(Optional.of(monitor)); List<Param> params = Collections.singletonList(new Param()); when(paramDao.findParamsByMonitorId(id)).thenReturn(params); Job job = new Job(); job.setMetrics(new ArrayList<>()); when(appService.getAppDefine(monitor.getApp())).thenReturn(job); when(collectorMonitorBindDao.findCollectorMonitorBindByMonitorId(monitor.getId())).thenReturn(Optional.empty()); MonitorDto monitorDto = monitorService.getMonitorDto(id); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(monitorDto)
[-] pred: org. junit. Assert. assertNotNull ( monitorDto )
************************************
[+] input: test2() { UserDetail userDetail = mock(UserDetail.class); Filter filter = new Filter(); filter.setWhere(null); String heartbeatQualifiedNameByNodeId = metadataInstancesService.findHeartbeatQualifiedNameByNodeId(filter, userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null, heartbeatQualifiedNameByNodeId)
[-] pred: org. junit. Assert. assertEquals ( null, heartbeatQualifiedNameByNodeId )
************************************
[+] input: test2() { List<DataSourceConnectionDto> dataSourceConnectionList=new ArrayList<>(); DataSourceConnectionDto dataSourceConnectionDto=new DataSourceConnectionDto(); dataSourceConnectionDto.setId(MongoUtils.toObjectId("665eb04d9e541e4fee4f87c5")); dataSourceConnectionDto.setHeartbeatEnable(false); dataSourceConnectionList.add(dataSourceConnectionDto);  Map<String, LogCollecotrConnConfig> logCollectorConnConfigs =new HashMap<>(); doCallRealMethod().when(taskService).addHeartBeatTable2LogCollector(dataSourceConnectionList,logCollectorConnConfigs,tableNames); boolean updateConfig = taskService.addHeartBeatTable2LogCollector(dataSourceConnectionList, logCollectorConnConfigs, tableNames);  "<AssertPlaceHolder>"; assertEquals(1,tableNames.size()); }
[*] target: assertEquals(false,updateConfig)
[-] pred: org. junit. Assert. assertEquals ( false, updateConfig )
************************************
[+] input: testCreateSingle() { // // Setup Test Data and Interactions // Mockito.when(mockMonitoredServiceRepository.findByTenantIdTypeAndIpInterface( TEST_TENANT_ID, monitorType, testIpInterface)) .thenReturn(Optional.empty()); // // Execute // MonitoredService result = target.createSingle(testIpInterface, monitorType);  // // Verify the Results // "<AssertPlaceHolder>"; assertSame(testMonitoredService1.getTenantId(), result.getTenantId()); assertSame(testMonitoredService1.getMonitorType(), result.getMonitorType()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: shouldCreateFieldWithValue() { LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField(dateTime); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
[+] input: shouldSetAndGetMacOptionIsMeta() { options.setMacOptionIsMeta(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isMacOptionIsMeta())
[-] pred: org. junit. Assert. assertTrue ( options. isMacOptionIsMeta() )
************************************
[+] input: calculateCodonStartIndicesFrame2Test() { int[] expectedResult = {1, 4, 7, 10, 13, 16, 19}; CodonFrame temp = new CodonFrame(TEST_SEQUENCE, (short) 2, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp);  int[] result = readingFrameTest.calculateCodonStartIndices(TEST_SEQUENCE);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: bottomBit() { final int ret = set.previousClearBit(1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: givenValidExchangeRequestWithNullUserJson_whenCreatingTokenExchangeParams_thenParamsAreParsedAndNormalized() { MultivaluedMap<String, String> params = new MultivaluedMapBuilder().subjectToken("myFancyAppleAuthorizationCode").userJson(null).build(); TokenExchangeParams exchangeParams = new TokenExchangeParams(params);  assertEquals("myFancyAppleAuthorizationCode", exchangeParams.getSubjectToken()); assertEquals(AppleIdentityProvider.APPLE_AUTHZ_CODE, exchangeParams.getSubjectTokenType()); assertNull(exchangeParams.getUserJson()); "<AssertPlaceHolder>"; }
[*] target: assertNull(exchangeParams.getAppIdentifier())
[-] pred: org. junit. Assert. assertNull ( exchangeParams. getAppIdentifier() )
************************************
[+] input: validateGivenMethodWithTypeParametersThatHaveNoUpperBound() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.extending(OBJECT), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.valid( AccumulatorValidator.Result.of( "myFunction", OPTIONAL.asTypeConstructor(), OPTIONAL.asTypeConstructor(), OPTIONAL.asTypeConstructor(), OPTIONAL.with(T), OPTIONAL.with(U), OPTIONAL.with(V) ) ); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testSave() { String ip = "127.0.0.2"; String akkaAddress = "127.0.0.2:25520"; Server server = new Server(); server.setIp(ip); server.setAkkaAddress(akkaAddress); Long id = serverDAO.save(server);  Assertions."<AssertPlaceHolder>"; Optional<Server> optionalServer = serverRepository.findById(id); Assertions.assertTrue(optionalServer.isPresent());  optionalServer.ifPresent((s) -> { Assertions.assertEquals(s.getIp(), server.getIp()); Assertions.assertEquals(s.getAkkaAddress(), server.getAkkaAddress()); }); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: testGetTableNameOnlyHaveTapEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(tapInsertRecordEvent); tapdataEvent.setTapEvent(tapInsertRecordEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getTapEvent(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME2, tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: testRemoveUsersByLogin() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); assertFalse(users.removeUser("login5")); assertEquals(4, users.countUsers()); assertTrue(users.removeUser("login4")); assertEquals(3, users.countUsers()); assertTrue(users.removeUser("login1")); assertEquals(2, users.countUsers()); assertTrue(users.removeUser("login2")); assertEquals(1, users.countUsers()); assertTrue(users.removeUser("login3")); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: shouldTransformToModelWithValidJulianDate() { LocalDate expectedDate = LocalDate.of(2005, 3, 4); int julianDate = 2453434; LocalDate result = transformer.transformToModel(julianDate); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
[+] input: testEmptyTable() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); String expected = "+------+------+--------+-----+\n" + "| TYPE | NAME | STATUS | URL |\n" + "+------+------+--------+-----+\n" + "+------+------+--------+-----+\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
[+] input: SQLException { when(mockHostSpec.getUrl()).thenReturn("url"); final Set<String> expectedUrls = new HashSet<>(Collections.singletonList("url")); final Set<PoolKey> expectedKeys = new HashSet<>( Collections.singletonList(new PoolKey("url", user1)));  provider = spy(new HikariPooledConnectionProvider((hostSpec, properties) -> mockConfig));  doReturn(mockDataSource).when(provider).createHikariDataSource(any(), any(), any(), any()); doReturn(new ConnectInfo("url", new Properties())) .when(mockTargetDriverDialect).prepareConnectInfo(anyString(), any(), any());  Properties props = new Properties(); props.setProperty(PropertyDefinition.USER.name, user1); props.setProperty(PropertyDefinition.PASSWORD.name, password); try (Connection conn = provider.connect(protocol, mockDialect, mockTargetDriverDialect, mockHostSpec, props)) { assertEquals(mockConnection, conn); assertEquals(1, provider.getHostCount()); final Set<String> hosts = provider.getHosts(); assertEquals(expectedUrls, hosts); final Set<PoolKey> keys = provider.getKeys(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedKeys, keys)
[-] pred: org. junit. Assert. assertEquals ( expectedKeys, keys )
************************************
[+] input: testSkipNullField() { when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(null); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: shouldFireChangeEvent() { NavigatorChangeEvent[] changeEvent = new NavigatorChangeEvent[1]; NavigatorMoveNextEvent nextEvent = new NavigatorMoveNextEvent(component, Map.of("current", 2, "startIndex", 0, "endIndex", 10));  component.onChange(e -> changeEvent[0] = e); component.handleChangeEvent(nextEvent);  "<AssertPlaceHolder>"; assertEquals(NavigatorChangeEvent.Direction.NEXT, changeEvent[0].getDirection()); assertEquals(2, changeEvent[0].getCurrent()); assertEquals(0, changeEvent[0].getStartIndex()); assertEquals(10, changeEvent[0].getEndIndex()); }
[*] target: assertNotNull(changeEvent[0])
[-] pred: org. junit. Assert. assertNotNull ( changeEvent[0] )
************************************
[+] input: setTopBit() { final int i = Integer.MAX_VALUE - 1; set.set(i); final int ret = set.previousSetBit(i);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(i, ret)
[-] pred: org. junit. Assert. assertEquals ( i, ret )
************************************
[+] input: testRemoveLast2() { deque.addFirst(1); deque.addFirst(2); assertEquals(Integer.valueOf(1), deque.removeLast()); assertEquals(Integer.valueOf(2), deque.get(0)); assertEquals(Integer.valueOf(2), deque.removeLast()); deque.removeLast(); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
[+] input: Exception { FlinkDeployment flinkApp = TestUtils.buildApplicationCluster(); ObjectMeta deployMeta = flinkApp.getMetadata(); FlinkDeploymentStatus status = flinkApp.getStatus(); FlinkDeploymentSpec spec = flinkApp.getSpec(); Configuration deployConfig = configManager.getDeployConfig(deployMeta, spec);  status.getJobStatus().setState(org.apache.flink.api.common.JobStatus.FINISHED.name()); status.setJobManagerDeploymentStatus(JobManagerDeploymentStatus.READY); reconciler .getReconciler() .deploy(getResourceContext(flinkApp), spec, deployConfig, Optional.empty(), false);  final List<Map<String, String>> expectedOwnerReferences = List.of(TestUtils.generateTestOwnerReferenceMap(flinkApp)); List<Map<String, String>> or = deployConfig.get(KubernetesConfigOptions.JOB_MANAGER_OWNER_REFERENCE); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedOwnerReferences, or)
[-] pred: org. junit. Assert. assertEquals ( expectedOwnerReferences, or )
************************************
[+] input: array() { ArrayTypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); ArrayTypeConstructor toVerify = new PlaceholderTypeConstructor().array();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_sqrt_5_default_value() { TbMathArgument tbMathArgument = new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "TestKey"); tbMathArgument.setDefaultValue(5.0); var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 3, false, false, null), tbMathArgument ); TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 10).toString());  node.onMsg(ctx, msg); ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: test1() { List<DataSourceConnectionDto> dataSourceConnectionList=new ArrayList<>(); DataSourceConnectionDto dataSourceConnectionDto=new DataSourceConnectionDto(); dataSourceConnectionDto.setId(MongoUtils.toObjectId("665eb04d9e541e4fee4f87c5")); dataSourceConnectionDto.setHeartbeatEnable(true); dataSourceConnectionList.add(dataSourceConnectionDto);  Map<String, LogCollecotrConnConfig> logCollectorConnConfigs =new HashMap<>(); doCallRealMethod().when(taskService).addHeartBeatTable2LogCollector(dataSourceConnectionList,logCollectorConnConfigs,tableNames); boolean updateConfig = taskService.addHeartBeatTable2LogCollector(dataSourceConnectionList, logCollectorConnConfigs, tableNames); "<AssertPlaceHolder>"; assertEquals(2,tableNames.size()); }
[*] target: assertEquals(true,updateConfig)
[-] pred: org. junit. Assert. assertEquals ( true, updateConfig )
************************************
[+] input: testCheckIsCronOrPlanTaskWithFalsePlanTask() { TaskRepository repository = mock(TaskRepository.class); taskService = spy(new TaskServiceImpl(repository)); TaskDto taskDto = new TaskDto(); taskDto.setPlanStartDateFlag(false); boolean result = taskService.checkIsCronOrPlanTask(taskDto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, result)
[-] pred: org. junit. Assert. assertEquals ( false, result )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyThreeFrame3Test() { int[] expectedResult = {2, 5, 8, 11, 14, 17, 20}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_THREE; CodonFrame temp = new CodonFrame(testSequence, (short) 3, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: testSaveDataFailure() {  CollectRep.MetricsData metricsData = mock(CollectRep.MetricsData.class); when(metricsData.getCode()).thenReturn(CollectRep.Code.FAIL);  memoryDataStorage.saveData(metricsData);  List<CollectRep.MetricsData> result = memoryDataStorage.getCurrentMetricsData(metricsData.getId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: testTransformFromTapValueTapUpdateRecordEventWithoutAfter() { TapdataEvent tapdataEvent = new TapdataEvent(); when(tapUpdateRecordEvent.getAfter()).thenReturn(null); tapdataEvent.setTapEvent(tapUpdateRecordEvent); HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(tapdataEvent); assertNotNull(actual); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual.getAfter())
[-] pred: org. junit. Assert. assertNull ( actual. getAfter() )
************************************
[+] input: testModifyByIdNormal() { ObjectId id = mock(ObjectId.class); MetadataInstancesDto record = new MetadataInstancesDto(); MetadataInstancesEntity entity = new MetadataInstancesEntity(); doReturn(entity).when(metadataInstancesRepository).save(any(MetadataInstancesEntity.class),any(UserDetail.class)); MetadataInstancesDto actual = metadataInstancesService.modifyById(id, record, userDetail); verify(metadataInstancesService,new Times(2)).beforeCreateOrUpdate(record,userDetail); verify(metadataInstancesService,new Times(1)).beforeUpdateById(id,record); verify(metadataInstancesService,new Times(1)).save(record,userDetail); verify(metadataInstancesService,new Times(1)).afterUpdateById(id,record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null,actual)
[-] pred: org. junit. Assert. assertEquals ( null, actual )
************************************
[+] input: versionMatch() { ElementMatcher.Junction<ClassLoader> matcher = ModuleVersionMatcher.versionMatch( ModuleDescription.builder().build()); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(matcher)
[-] pred: org. junit. Assert. assertNotNull ( matcher )
************************************
[+] input: shouldReturnCurrentAge() { //given LocalDate birthDay = LocalDate.of(1994, Month.JANUARY, 13); client.setBirthDate(birthDay); //when int actual = client.calculateAge(); //then int expected = 28; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: SQLException { final List<ColumnSchema> columnSchemas = new ArrayList<>(); columnSchemas.add(GeneralTestUtility.sealedColumn("firstname", "firstname", PadType.FIXED, 100)); columnSchemas.add(GeneralTestUtility.fingerprintColumn("lastname", "lastname")); columnSchemas.add(GeneralTestUtility.cleartextColumn("address", "address")); columnSchemas.add(GeneralTestUtility.cleartextColumn("city", "city")); columnSchemas.add(GeneralTestUtility.cleartextColumn("state", "state")); columnSchemas.add(GeneralTestUtility.cleartextColumn("phonenumber", "phonenumber")); columnSchemas.add(GeneralTestUtility.fingerprintColumn("title", "title")); columnSchemas.add(GeneralTestUtility.cleartextColumn("level", "level")); columnSchemas.add(GeneralTestUtility.sealedColumn("notes", "notes", PadType.MAX, 100)); final Statement statement = mock(Statement.class); when(statement.enquoteIdentifier(anyString(), anyBoolean())).thenAnswer((Answer<String>) invocation -> { final Object[] args = invocation.getArguments(); return """ + args[0] + """; // enquote the column names }); final TableSchema tableConfig = new MappedTableSchema(columnSchemas); final String tableSchema = TableGenerator.getTableSchemaFromConfig( statement, tableConfig, new ColumnHeader("nonce")); final StringBuilder expectedSchema = new StringBuilder("CREATE TABLE c3rTmp (\n"nonce" TEXT"); for (ColumnSchema column : columnSchemas) { expectedSchema.append(",\n"").append(column.getInternalHeader()).append("" TEXT"); } expectedSchema.append(")"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchema.toString(), tableSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedSchema. toString ( ), tableSchema )
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: Exception {  RemotePreferenceStore.setTwoMockRemoteServers(); HelpPlugin.getTocManager().clearCache(); boolean hasDuplicates=hasDuplicateContributions(HelpPlugin.getTocManager().getTocContributions("en")); "<AssertPlaceHolder>"; }
[*] target: assertFalse(hasDuplicates)
[-] pred: org. junit. Assert. assertFalse ( hasDuplicates )
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidCronExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "0 */10 * * * ?", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
[+] input: testGetLoopPackagesFile() { File file = utils.getLoopPackagesFile(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: testCreated() { Date date = new Date(); Vulnerability vuln = new Vulnerability(); vuln.setCreated(date); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(date, vuln.getCreated())
[-] pred: org. junit. Assert. assertEquals ( date, vuln. getCreated() )
************************************
[+] input: marshalNullDataPreserveNullsTrueTest() { fingerprintTransformer = new FingerprintTransformer(secretKey, salt, ClientSettings.lowAssuranceMode(), false); final byte[] hmacText = fingerprintTransformer.marshal(null, context); "<AssertPlaceHolder>"; }
[*] target: assertNull(hmacText)
[-] pred: org. junit. Assert. assertNull ( hmacText )
************************************
[+] input: testShouldPrintGlobalProgressWithUnregisteredRead() { jobCounter = new JobCounter(10, true); // Changed to true to test printPerThread  // Set only WRITE as the registered type jobCounter.setRegisteredTypes(JobCounter.CounterType.WRITE);  // shouldPrintGlobalProgress should return false because READ is not registered "<AssertPlaceHolder>"; }
[*] target: assertFalse(jobCounter.shouldPrintGlobalProgress())
[-] pred: org. junit. Assert. assertFalse ( jobCounter. shouldPrintGlobalProgress ( ) )
************************************
[+] input: should_not_mappe_movie_null() { // when final Movie result = MovieMapper.toDomain(null); // then "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: addMinutesToCurrentTime_AllGood_FiveMinutesAdded() { try (MockedStatic<Calendar> calendarClassMock = Mockito.mockStatic(Calendar.class)) { when(calendarInstanceMock.getTime()).thenReturn(new Date()); calendarClassMock.when(Calendar::getInstance).thenReturn(calendarInstanceMock);  final var minutes = 5; Date dateAfterAddingFiveMinutesToCurrentTime = DateUtils.addMinutesToCurrentTime(minutes);  verify(calendarInstanceMock).add(Calendar.MINUTE, minutes); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(dateAfterAddingFiveMinutesToCurrentTime)
[-] pred: org. junit. Assert. assertNotNull ( dateAfterAddingFiveMinutesToCurrentTime )
************************************
[+] input: shouldAddOpenListener() { component.onSelect(event -> { });  List<EventListener<GoogleChartSelectedEvent>> listeners = component.getEventListeners(GoogleChartSelectedEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<GoogleChartSelectedEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: shouldMaskString() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "qw12"; String mask = "AA-00"; String expected = "QW-12";  when(bridge.maskString(input, mask)).thenReturn(expected);  String result = MaskDecorator.forString(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: InterruptedException { for (var entityType : SUPPORTED_ENTITY_TYPES) { var entityId = EntityIdFactory.getByTypeAndUuid(entityType, RANDOM_UUID);  initMocks(entityType, false);  when(ctxMock.getTenantId()).thenReturn(TENANT_ID);  var actualEntityFieldsData = EntitiesFieldsAsyncLoader.findAsync(ctxMock, entityId).get(); var expectedEntityFieldsData = new EntityFieldsData(getEntityFromEntityId(entityId));  Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedEntityFieldsData, actualEntityFieldsData)
[-] pred: org. junit. Assert. assertEquals ( expectedEntityFieldsData, actualEntityFieldsData )
************************************
[+] input: canAddPawn() { ChessBoard board = new ChessBoard(); Pawn pawn = new Pawn(WHITE); board.add(pawn, "a2"); Pawn foundPawn = (Pawn) board.getPieceAtCoords("a2"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(pawn, foundPawn)
[-] pred: org. junit. Assert. assertEquals ( pawn, foundPawn )
************************************
[+] input: BBjException { component.setLabelsVisible(true); "<AssertPlaceHolder>";  verify(control).setPaintLabels(true); }
[*] target: assertTrue(component.isLabelsVisible())
[-] pred: org. junit. Assert. assertTrue ( component. isLabelsVisible() )
************************************
[+] input: testResolveMatrixParameters() { String url = "https://www.google.com.hk/search;q=java;oq=java;sourceid=chrome;es_sm=122;ie=UTF-8"; Map<String, List<String>> parametersMap = resolveMatrixParameters(url); Map<String, List<String>> expectedParametersMap = new LinkedHashMap<>(); expectedParametersMap.put("q", Arrays.asList("java")); expectedParametersMap.put("oq", Arrays.asList("java")); expectedParametersMap.put("sourceid", Arrays.asList("chrome")); expectedParametersMap.put("es_sm", Arrays.asList("122")); expectedParametersMap.put("ie", Arrays.asList("UTF-8"));  assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search;"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedParametersMap, parametersMap)
[-] pred: org. junit. Assert. assertEquals ( expectedParametersMap, parametersMap )
************************************
[+] input: validateGivenMethodWithAccumulatedTypeConstructorThatIsAssignableToPartiallyAccumulatedTypeConstructor() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(FUNCTION.with(P, V)), "myFunction", asList( Parameter.of(FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), "left"), Parameter.of(FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.valid( AccumulatorValidator.Result.of( "myFunction", FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().invariant(), placeholder().invariant()), FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), FUNCTION.with(P.asType().invariant(), V.asType().invariant()) ) ); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: InterruptedException { // when you get a forbidden response from HeadBucket when(mockClient.headBucket(anyConsumer())).thenReturn( CompletableFuture.failedFuture(S3Exception.builder().statusCode(403).build()) );  // you should fall back to a get bucket location attempt from the universal client var mockUniversalClient = mock(S3AsyncClient.class); provider.universalClient(mockUniversalClient); when(mockUniversalClient.getBucketLocation(anyConsumer())).thenReturn(CompletableFuture.completedFuture( GetBucketLocationResponse.builder() .locationConstraint("us-west-2") .build() ));  // which should get you a client final var s3Client = provider.generateClient("test-bucket", mockClient); "<AssertPlaceHolder>";  final var inOrder = inOrder(mockClient, mockUniversalClient); inOrder.verify(mockClient).headBucket(anyConsumer()); inOrder.verify(mockUniversalClient).getBucketLocation(anyConsumer()); inOrder.verifyNoMoreInteractions(); }
[*] target: assertNotNull(s3Client)
[-] pred: org. junit. Assert. assertNotNull ( s3Client )
************************************
[+] input: testSaveClusterGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.saveClusterGroup(0, "groupName");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFailWithBaseException() { Result result = Result.fail(new BaseException()); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_ERROR.getCode()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testSubCronOrPlanNum() { taskEntity.setCrontabExpressionFlag(true); try (MockedStatic<DataPermissionHelper> dataPermissionHelperMockedStatic = mockStatic(DataPermissionHelper.class)) { int result = taskService.subCronOrPlanNum(taskDto, 3); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2,result)
[-] pred: org. junit. Assert. assertEquals ( 2, result )
************************************
[+] input: shouldSetGetMaxLength() { int expectedMaxLength = 256; assertSame(component.setMaxLength(expectedMaxLength), component); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMaxLength, component.getMaxLength())
[-] pred: org. junit. Assert. assertEquals ( expectedMaxLength, component. getMaxLength() )
************************************
[+] input: getConsumerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testNormal() { when(taskService.findOne(any(Query.class), any(UserDetail.class))).thenReturn(taskDto); List<ErrorEvent> errorEventByTaskId = taskErrorEventService.getErrorEventByTaskId(new ObjectId().toHexString(), user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(errorEventByTaskId)
[-] pred: org. junit. Assert. assertNotNull ( errorEventByTaskId )
************************************
[+] input: Exception {  RemotePreferenceStore.setMockRemoteServer(); HelpPlugin.getTocManager().clearCache(); boolean hasDuplicates=hasDuplicateContributions(HelpPlugin.getTocManager().getTocContributions("en")); "<AssertPlaceHolder>"; }
[*] target: assertFalse(hasDuplicates)
[-] pred: org. junit. Assert. assertFalse ( hasDuplicates )
************************************
[+] input: testSetRoundRobinHostWeightPairsProperty() { final String expectedPropertyValue = "instance-1:2,instance-2:1,instance-3:0";  final List<HostSpec> hosts = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-1") .weight(2) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-2") .weight(1) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-3") .weight(0) .build() ); final Properties properties = new Properties(); RoundRobinHostSelector.setRoundRobinHostWeightPairsProperty(properties, hosts);  final String actualPropertyValue = properties.getProperty( RoundRobinHostSelector.ROUND_ROBIN_HOST_WEIGHT_PAIRS.name);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPropertyValue, actualPropertyValue)
[-] pred: org. junit. Assert. assertEquals ( expectedPropertyValue, actualPropertyValue )
************************************
[+] input: withMultipleUpperBounds() { TypeParameter typeParameter = T.extending(COMPARABLE.with(T), SERIALIZABLE); String toVerify = generateFrom(typeParameter); String expected = "T extends java.lang.Comparable<T> & java.io.Serializable"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test1() { processorBaseContext.getTaskDto().setType(SyncTypeEnum.INITIAL_SYNC.getSyncType()); TapdataEvent tapdataEvent = new TapdataEvent(); tapdataEvent.addNodeId("123"); TapUpdateRecordEvent tapUpdateRecordEvent = TapUpdateRecordEvent.create().init(); tapdataEvent.setTapEvent(tapUpdateRecordEvent); when(mockHazelcastMergeNode.isSubTableFirstMode()).thenReturn(false); boolean result = mockHazelcastMergeNode.needLookup(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, result)
[-] pred: org. junit. Assert. assertEquals ( false, result )
************************************
[+] input: InterruptedException { // GIVEN var asset = new Asset(new AssetId(UUID.randomUUID())); var expectedCustomerId = new CustomerId(UUID.randomUUID()); asset.setCustomerId(expectedCustomerId);  when(ctxMock.getAssetService()).thenReturn(assetServiceMock); doReturn(Futures.immediateFuture(asset)).when(assetServiceMock).findAssetByIdAsync(any(), any()); when(ctxMock.getDbCallbackExecutor()).thenReturn(DB_EXECUTOR);  // WHEN var actualCustomerId = EntitiesCustomerIdAsyncLoader.findEntityIdAsync(ctxMock, asset.getId()).get();  // THEN "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCustomerId, actualCustomerId)
[-] pred: org. junit. Assert. assertEquals ( expectedCustomerId, actualCustomerId )
************************************
[+] input: testGenerateJarDir() { var sessionJob = TestUtils.buildSessionJob(); String baseDir = artifactManager.generateJarDir(sessionJob.getMetadata(), sessionJob.getSpec()); String expected = tempDir.toString() + File.separator + TestUtils.TEST_NAMESPACE + File.separator + TestUtils.TEST_DEPLOYMENT_NAME + File.separator + TestUtils.TEST_SESSION_JOB_NAME; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, baseDir)
[-] pred: org. junit. Assert. assertEquals ( expected, baseDir )
************************************
[+] input: testCheckWhenIsChildOfDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(true); when(loginUser.getDeptId()).thenReturn(1L);  DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: testCheckIsCronOrPlanTaskWithNullCronTask() { TaskRepository repository = mock(TaskRepository.class); taskService = spy(new TaskServiceImpl(repository)); TaskDto taskDto = new TaskDto(); boolean result = taskService.checkIsCronOrPlanTask(taskDto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, result)
[-] pred: org. junit. Assert. assertEquals ( false, result )
************************************
[+] input: shouldReturnSelectedKeys() { component.select("item2"); component.select("item3");  List<Object> keys = component.getSelectedKeys();  "<AssertPlaceHolder>"; assertEquals("item2", keys.get(0)); assertEquals("item3", keys.get(1)); }
[*] target: assertEquals(2, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 2, keys. size ( ) )
************************************
[+] input: test_2_plus_2_body() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_BODY, "result", 2, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a"), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 2).put("b", 2).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(4, resultJson.get("result").asInt()); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "10"; Integer expected = TypeCodecs.INT.parse(valueAsString); Integer result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testMultiArray() {  // ======================================== // Build a data object with 2 arrays DataBuilder builder = new DataBuilder(). // addData("name", "John"). // addData("description", "Hello World");  // first array with one object builder.addArray("scripts"); builder.addObject(); builder.addData("language", "javascript"); builder.addData("script", "1+1"); builder.addObject(); builder.addData("language", "java"); builder.addData("script", "1+1");  // second array with one object builder.addArray("links"); builder.addObject(); builder.addData("source", "a-connector"); builder.addData("target", "b-connector");  String json = builder.build(); "<AssertPlaceHolder>"; logger.info(json);  // ======================================== // validate the json structure JsonReader jsonReader = Json.createReader(new StringReader(json)); JsonObject dataObject = jsonReader.readObject(); jsonReader.close(); // each array should contain exactly one object assertNotNull(dataObject); JsonArray array1 = dataObject.getJsonArray("scripts"); assertNotNull(array1); assertEquals(2, array1.size());  JsonArray array2 = dataObject.getJsonArray("links"); assertNotNull(array2); assertEquals(1, array2.size()); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testGetTaskDtoIsomorphismMoreThanTwoNode() { when(nodeList.size()).thenReturn(100); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: requiresPreprocessingFalseTest() { final ColumnSchema columnSchema = GeneralTestUtility.cleartextColumn("source"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(columnSchema.requiresPreprocessing())
[-] pred: org. junit. Assert. assertFalse ( columnSchema. requiresPreprocessing() )
************************************
[+] input: testNullEvent() { List<String> removeFields = TapEventUtil.getRemoveFields(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(removeFields)
[-] pred: org. junit. Assert. assertNull ( removeFields )
************************************
[+] input: testConstructorNullBody() { String message = "This is the message"; String body = null; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=null}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
[+] input: testWhere() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("where-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testWhere"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testWhere");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND price = 10.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"price": 10.00}")); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: isLocalFileSystem_whenDefaultMethodCalled_thenReturnsFalseBecauseItIsVirtual() { FileTreeNode sut = new FileTreeNode(new HomeFilePath(new HomeFolderPath(UserDomainIdentity.DEFAULT_DATA_DOMAIN), "file.txt"), new FileContent("old"), FileTreeNodeStatus.NEW); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(sut.isLocalFileSystem())
[-] pred: org. junit. Assert. assertFalse ( sut. isLocalFileSystem() )
************************************
[+] input: test() { // 判断数据源是否加载 if (Boolean.FALSE.equals(MutilConnectionPool.check("test"))) { // 加载数据源 MutilConnectionPool.init("test", "jdbc:h2:file:./data/demo;AUTO_SERVER=TRUE", "sa", ""); }  User user = new User(); // 判断表是否存在 if (MutilConnectionPool.run("test", conn -> ModelSqlUtils.SQL(user).isTableExists(conn))) { // 删除表 MutilConnectionPool.run("test", conn -> ModelSqlUtils.dropSql(user).dropTable(conn)); } // 创建表 MutilConnectionPool.run("test", conn -> ModelSqlUtils.createSql(user).createTable(conn)); // 插入数据 user.setUserName("112233"); int count = MutilConnectionPool.run("test", conn -> ModelSqlUtils.saveSql(user).executeUpdate(conn)); Assertions.assertEquals(count, 1); // 查询数据 List<User> userList = MutilConnectionPool.run("test", conn -> ModelSqlUtils.selectSql(user).executeQuery(conn)); Assertions.assertEquals(userList.size(), 1); user.setId(userList.get(0).getId()); user.setUserName("332211"); // 更新数据 count = MutilConnectionPool.run("test", conn -> ModelSqlUtils.saveSql(user).executeUpdate(conn)); Assertions.assertEquals(count, 1); // 可以使用 ModelSqlUtils.insertSql(user)强行插入数据 // 可以使用 ModelSqlUtils.updateSql(user)强行更新数据 // 删除数据 count = MutilConnectionPool.run("test", conn -> ModelSqlUtils.deleteSql(user).executeUpdate(conn)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(count, 1)
[-] pred: org. junit. Assert. assertEquals ( count, 1 )
************************************
[+] input: testStartTaskOperation() { TaskDto taskDto = new TaskDto(); taskDto.setId(ObjectId.get()); taskDto.setName("test-task"); TaskOperation taskOperation = StartTaskOperation.create().taskDto(taskDto); AtomicBoolean isCallStartTask = new AtomicBoolean(false); TapdataTaskScheduler instance = new TapdataTaskScheduler() { @Override protected void startTask(TaskDto taskDto) { isCallStartTask.set(true); } };  Runnable handleTaskOperationRunnable = instance.getHandleTaskOperationRunnable(taskOperation); "<AssertPlaceHolder>"; handleTaskOperationRunnable.run(); assertTrue(isCallStartTask.get()); }
[*] target: assertNotNull(handleTaskOperationRunnable)
[-] pred: org. junit. Assert. assertNotNull ( handleTaskOperationRunnable )
************************************
[+] input: testTaskNullEndTime() { task.setStatus(MilestoneStatus.FINISH); node.setStatus(MilestoneStatus.FINISH); task.setEnd(null); String taskSyncStatus = milestoneAspectTask.getTaskSyncStatus(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MilestoneAspectTask.KPI_DATA_NODE_INIT, taskSyncStatus); }
[*] target: assertNotNull(taskSyncStatus)
[-] pred: org. junit. Assert. assertNotNull ( taskSyncStatus )
************************************
[+] input: setTwoBelow() { set.set(1); final int ret = set.previousSetBit(3);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: shouldAddRowSelectListener() { table.onItemSelect(event -> { });  List<EventListener<TableItemSelectEvent>> listeners = table.getEventListeners(TableItemSelectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: shouldGetSelectedIndex() { MultipleSelectableComponentMock component = new MultipleSelectableComponentMock(); component.selectIndex(1); Map<String, Object> eventMap = new HashMap<>(); eventMap.put("index", 1); SelectEventMock<MultipleSelectableComponentMock, String> event = new SelectEventMock<>(component, eventMap);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, event.getSelectedIndex())
[-] pred: org. junit. Assert. assertEquals ( 1, event. getSelectedIndex() )
************************************
[+] input: test3() { String connectionId="665eb04d9e541e4fee4f87c5"; List<DataSourceConnectionDto> dataSourceConnectionList=new ArrayList<>(); DataSourceConnectionDto dataSourceConnectionDto=new DataSourceConnectionDto(); dataSourceConnectionDto.setId(MongoUtils.toObjectId(connectionId)); dataSourceConnectionDto.setHeartbeatEnable(true); dataSourceConnectionList.add(dataSourceConnectionDto);  Map<String, LogCollecotrConnConfig> logCollectorConnConfigs =new HashMap<>();  List<String> tableNamesList=new ArrayList<>(); tableNamesList.add("testTable"); LogCollecotrConnConfig logCollecotrConnConfig=new LogCollecotrConnConfig(connectionId, tableNamesList); logCollectorConnConfigs.put(connectionId, logCollecotrConnConfig);  doCallRealMethod().when(taskService).addHeartBeatTable2LogCollector(dataSourceConnectionList,logCollectorConnConfigs,tableNames); boolean updateConfig = taskService.addHeartBeatTable2LogCollector(dataSourceConnectionList, logCollectorConnConfigs, tableNames); "<AssertPlaceHolder>"; assertEquals(2,tableNames.size()); assertEquals(2,logCollecotrConnConfig.getTableNames().size()); }
[*] target: assertEquals(true,updateConfig)
[-] pred: org. junit. Assert. assertEquals ( true, updateConfig )
************************************
[+] input: getInstance() { SparkConf sc = new SparkConf(); PropertyHelper helper = PropertyHelper.getInstance(sc); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(helper)
[-] pred: org. junit. Assert. assertNotNull ( helper )
************************************
[+] input: testContinueUnknownSession() { var sessions = new MemorySessions();  var auth_id = "unknown"; try { "<AssertPlaceHolder>"; } catch (SessionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertFalse(sessions.continueSession(auth_id))
[-] pred: org. junit. Assert. assertFalse ( sessions. continueSession ( auth_id ) )
************************************
[+] input: getMonitorDto() { long id = 1L; Monitor monitor = Monitor.builder().jobId(id).intervals(1).app("app").name("memory").host("host").id(id).build(); when(monitorDao.findById(id)).thenReturn(Optional.of(monitor)); List<Param> params = Collections.singletonList(new Param()); when(paramDao.findParamsByMonitorId(id)).thenReturn(params); Job job = new Job(); job.setMetrics(new ArrayList<>()); when(appService.getAppDefine(monitor.getApp())).thenReturn(job); MonitorDto monitorDto = monitorService.getMonitorDto(id); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(monitorDto)
[-] pred: org. junit. Assert. assertNotNull ( monitorDto )
************************************
[+] input: testReplay() { Mockito.when(httpClientExtractor.replay()).thenReturn(MockResult.success("mock")); MockResult result = okHttpCallbackWrapper.replay(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  BigDecimal result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testCreateTaskManagerDeployment() { flinkKubeClient.createTaskManagerDeployment(tmDeployment); final List<Deployment> resultedDeployments = getClient().apps().deployments().inNamespace(TEST_NAMESPACE).list().getItems(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, resultedDeployments.size())
[-] pred: org. junit. Assert. assertEquals ( 1, resultedDeployments. size ( ) )
************************************
[+] input: testCategorization() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // addLayout(Layout.HORIZONTAL). // addElements(new String[] { "firstName", "lastName", "role" });  String json = builder.build();  "<AssertPlaceHolder>"; // assertTrue(json.contains("#/properties/lastName")); logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: test() { PropertiesToStringConverter converter = PropertiesToStringConverter.INSTANCE; Properties properties = new Properties(); properties.setProperty("A", "1"); String content = converter.convert(properties); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(content)
[-] pred: org. junit. Assert. assertNotNull ( content )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); String expected = TypeCodecs.BIGINT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: givenStaticMethodAndNoTypeArguments() { String toVerify = methodCall() .withType(BIG_DECIMAL) .withMethodName("valueOf") .withArguments("10") .generate();  String expected = "java.math.BigDecimal.valueOf(10)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testRemoveNonExistingTask() { TaskManager manager = new MemoryTasks(); var task_nonexisting_id = 0; try { "<AssertPlaceHolder>"; } catch (TaskManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertFalse(manager.removeTask(task_nonexisting_id))
[-] pred: org. junit. Assert. assertFalse ( manager. removeTask ( task_nonexisting_id ) )
************************************
[+] input: shouldSetAndGetRightClickSelectsWord() { options.setRightClickSelectsWord(false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.isRightClickSelectsWord())
[-] pred: org. junit. Assert. assertFalse ( options. isRightClickSelectsWord() )
************************************
[+] input: testStartInstallService() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceCommandService.listByIds(...). final ClusterServiceCommandEntity clusterServiceCommandEntity = new ClusterServiceCommandEntity(); clusterServiceCommandEntity.setCommandId("commandId"); clusterServiceCommandEntity.setCreateBy("createBy"); clusterServiceCommandEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandEntity.setCommandName("commandName"); clusterServiceCommandEntity.setCommandState(CommandState.WAIT); clusterServiceCommandEntity.setCommandStateCode(0); clusterServiceCommandEntity.setCommandProgress(0); clusterServiceCommandEntity.setClusterId(0); clusterServiceCommandEntity.setServiceName("parentName"); clusterServiceCommandEntity.setCommandType(0); clusterServiceCommandEntity.setDurationTime("durationTime"); clusterServiceCommandEntity.setEndTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandEntity.setServiceInstanceId(0); final Collection<ClusterServiceCommandEntity> clusterServiceCommandEntities = Arrays.asList( clusterServiceCommandEntity); when(mockCommandService.listByIds(Arrays.asList("value"))).thenReturn(clusterServiceCommandEntities);  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure ClusterServiceCommandHostCommandService.getHostCommandListByCommandId(...). final ClusterServiceCommandHostCommandEntity clusterServiceCommandHostCommandEntity = new ClusterServiceCommandHostCommandEntity(); clusterServiceCommandHostCommandEntity.setHostCommandId("hostCommandId"); clusterServiceCommandHostCommandEntity.setCommandName("commandName"); clusterServiceCommandHostCommandEntity.setCommandState(CommandState.WAIT); clusterServiceCommandHostCommandEntity.setCommandStateCode(0); clusterServiceCommandHostCommandEntity.setCommandProgress(0); clusterServiceCommandHostCommandEntity.setCommandHostId("commandHostId"); clusterServiceCommandHostCommandEntity.setCommandId("commandId"); clusterServiceCommandHostCommandEntity.setHostname("hostname"); clusterServiceCommandHostCommandEntity.setServiceRoleName("serviceRoleName"); clusterServiceCommandHostCommandEntity.setServiceRoleType(RoleType.MASTER); clusterServiceCommandHostCommandEntity.setResultMsg("resultMsg"); clusterServiceCommandHostCommandEntity.setCreateTime( new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandHostCommandEntity.setCommandType(0); final List<ClusterServiceCommandHostCommandEntity> clusterServiceCommandHostCommandEntities = Arrays.asList( clusterServiceCommandHostCommandEntity); when(mockHostCommandService.getHostCommandListByCommandId("commandId")).thenReturn( clusterServiceCommandHostCommandEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.startInstallService(0, Arrays.asList("value"));  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: fipeMarcasPass() { FipeMarca[] fipeMarcas = BrasilAPI.fipeMarcas("carros"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(fipeMarcas)
[-] pred: org. junit. Assert. assertNotNull ( fipeMarcas )
************************************
[+] input: SQLException { final Statement statement = mock(Statement.class); when(statement.enquoteIdentifier(anyString(), anyBoolean())).thenAnswer((Answer<String>) invocation -> { final Object[] args = invocation.getArguments(); return """ + args[0] + """; // enquote the column names }); final String insertStatement = SqlRowReader.getSelectStatementSql(statement, columnNames, NONCE_HEADER_DEFAULT); final String expectedInsertStatement = "SELECT "firstname","lastname","address","city","state","phonenumber"" + ","title","level","notes","" + NONCE_HEADER_DEFAULT + "" FROM " + TableGenerator.DEFAULT_TABLE_NAME + " ORDER BY "" + NONCE_HEADER_DEFAULT + """; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInsertStatement, insertStatement)
[-] pred: org. junit. Assert. assertEquals ( expectedInsertStatement, insertStatement )
************************************
[+] input: separateBuildingMethods() { byte[] actualData = SerialBuilder.startSerializableObject() .descriptorHierarchy(SerialBuilderTest::writeDescriptorHierarchy) .beginSlots() .slot(SerialBuilderTest::writeSlot) .endSlots() .endObject();  byte[] expectedData = serialize(new ClassWithNested(new ClassWithNested.NestedSerializable(3), new ClassWithNested.NestedExternalizable(), new int[] {1, 2})); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedData, actualData)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedData, actualData )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("[{"b":1},{"b":2}]"));  Iterable<String> nodes = record.generatePaths("/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: testParseGroupingKey() { Map<String, String> groupingKey = PrometheusPushGatewayMetricReporter.parseGroupingKey("k1=v1;k2=v2"); "<AssertPlaceHolder>"; assertEquals("v1", groupingKey.get("k1")); assertEquals("v2", groupingKey.get("k2")); }
[*] target: assertNotNull(groupingKey)
[-] pred: org. junit. Assert. assertNotNull ( groupingKey )
************************************
[+] input: largePrimitiveData() { final int MAX_BLOCK_SIZE = 1024; byte[] primitiveData = new byte[MAX_BLOCK_SIZE + 10]; // Generate some test data for (int i = 0; i < primitiveData.length; i++) { primitiveData[i] = (byte) i; }  byte[] actualData = SerialBuilder.startSerializableObject() .beginDescriptorHierarchy() .beginDescriptor() .typeWithUid(ClassWithWriteObjectWritingPrimitiveArray.class) .flags(SC_SERIALIZABLE | SC_WRITE_METHOD) .endDescriptor() .endDescriptorHierarchy() .beginSlots() .beginSlot() .writeObjectWith(writer -> { // Create copy of array to prevent accidental modification writer.write(primitiveData.clone()); }) .endSlot() .endSlots() .endObject();  byte[] expectedData = serialize(new ClassWithWriteObjectWritingPrimitiveArray(primitiveData)); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedData, actualData)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedData, actualData )
************************************
[+] input: testConvertWhenConversionTypeIsNone() { //        CqlConversion.Type conversionType = CqlConversion.Type.NONE; //        List<CqlConversion.Type> conversionTypeList = Collections.singletonList(conversionType); // //        CqlConversion cqlConversion = spy(new CqlConversion(fromDataType, toDataType, codecRegistry)); //        doReturn(conversionTypeList).when(cqlConversion).getConversionTypeList(); // //        Object inputData = new Object(); //        Object result = cqlConversion.convert(inputData); // //        "<AssertPlaceHolder>"; //    }
[*] target: assertSame(inputData, result)
[-] pred: org. junit. Assert. assertSame ( inputData, result )
************************************
[+] input: MalformedURLException { URL baseURL = new URL("http://localhost:80/myServlet/");  URL expectedURL = new URL("http://localhost:80/myServlet?myKey=myValue"); URL actualURL = URLBuilder.fromURL(baseURL).withQuery("myKey", "myValue").build(); assertEquals(expectedURL, actualURL);  expectedURL = new URL("http://localhost:80/myServlet?myKey=myValue&myKey2=myValue2"); actualURL = URLBuilder.fromURL(baseURL).withQuery("myKey", "myValue").withQuery("myKey2", "myValue2").build(); assertEquals(expectedURL, actualURL);  baseURL = new URL("http://localhost:80/myServlet?myKey=myValue"); actualURL = URLBuilder.fromURL(baseURL).withQuery("myKey2", "myValue2").build(); assertEquals(expectedURL, actualURL);  expectedURL = new URL("http://localhost:80/myServlet?myKey=myValue"); actualURL = URLBuilder.fromURL(baseURL).withQuery("myKey", "myValue").build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedURL, actualURL)
[-] pred: org. junit. Assert. assertEquals ( expectedURL, actualURL )
************************************
[+] input: testNormal() { AccessNodeInfo accessNodeInfo = agentGroupUtil.mappingAccessNodeInfo(group, infoMap); Assertions."<AssertPlaceHolder>"; verify(group, times(1)).getAgentIds(); verify(group, times(1)).getGroupId(); verify(group, times(1)).getName(); verify(infoMap, times(1)).get(anyString()); }
[*] target: assertNotNull(accessNodeInfo)
[-] pred: org. junit. Assert. assertNotNull ( accessNodeInfo )
************************************
[+] input: shouldFindCreditCardActivityBetweenDates() {  CrdCreditCardActivity crdCreditCardActivity = mock(CrdCreditCardActivity.class); List<CrdCreditCardActivity> crdCreditCardActivityList = new ArrayList<>(); crdCreditCardActivityList.add(crdCreditCardActivity);  Long id =1L; LocalDateTime startDate =LocalDateTime.now().minusDays(1); LocalDateTime endDate =LocalDateTime.now().plusMonths(1);  when(crdCreditCardActivityEntityService.findCreditCardActivityBetweenDates( id,startDate,endDate) ).thenReturn(crdCreditCardActivityList);  List<CrdCreditCardActivityDto> result = crdCreditCardService.findCreditCardActivityBetweenDates( id,LocalDate.now(),LocalDate.now().plusMonths(24));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
[+] input: shouldParseTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "9pm"; String mask = "%Hz:%Mz:%S"; Locale locale = Locale.US; LocalTime expected = LocalTime.of(21, 0, 0); double hms = new HoursLocalTimeTransformer().transformToComponent(expected);  when(bridge.parseTime(input, mask, locale)).thenReturn(hms);  LocalTime result = MaskDecorator.parseTime(input, mask, locale);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testSaveStatusPageOrg() {  StatusPageOrg inputOrg = new StatusPageOrg(); when(statusPageOrgDao.save(inputOrg)).thenReturn(inputOrg);  StatusPageOrg savedOrg = statusPageService.saveStatusPageOrg(inputOrg);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(inputOrg, savedOrg)
[-] pred: org. junit. Assert. assertEquals ( inputOrg, savedOrg )
************************************
[+] input: testNoTopic() { TopicFinder finder = new TopicFinder(null, getTocs(), new UniversalScope()); assertEquals(-1, finder.getSelectedToc()); "<AssertPlaceHolder>"; }
[*] target: assertNull(finder.getTopicPath())
[-] pred: org. junit. Assert. assertNull ( finder. getTopicPath() )
************************************
[+] input: testHostFailoverStrictReaderEnabled() {  final HostSpec writer = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("writer").port(1234).role(HostRole.WRITER).build(); final HostSpec reader = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("reader1").port(1234).role(HostRole.READER).build(); final List<HostSpec> hosts = Arrays.asList(writer, reader);  Dialect mockDialect = Mockito.mock(Dialect.class); when(mockDialect.getFailoverRestrictions()).thenReturn(EnumSet.noneOf(FailoverRestriction.class)); when(mockPluginService.getDialect()).thenReturn(mockDialect); final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockPluginService, properties, DEFAULT_FAILOVER_TIMEOUT, DEFAULT_READER_CONNECT_TIMEOUT, true);  // We expect only reader nodes to be chosen. List<HostSpec> expectedReaderHost = Collections.singletonList(reader);  List<HostSpec> hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick the reader even if unavailable. reader.setAvailability(HostAvailability.NOT_AVAILABLE);  hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostSpec> expectedWriterHost = Collections.singletonList(writer);  hostsByPriority = target.getHostsByPriority(Collections.singletonList(writer)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
[+] input: testSimpleValuePresent_null() { Result<String> value = Result.empty(); assertFalse(value.isValuePresent()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(value.isExceptionPresent())
[-] pred: org. junit. Assert. assertFalse ( value. isExceptionPresent() )
************************************
[+] input: getUnknownTypeAsString() { final EditorHelper editorHelper = new EditorHelper();  final String result = editorHelper.getObjectString("unknown-type", true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testTrue() { InspectDto inspectDto = new InspectDto(); inspectDto.setInspectMethod(InspectMethod.FIELD.getValue()); inspectDto.setStatus(InspectStatusEnum.DONE.getValue()); inspectDto.setResult("failed"); inspectDto.setFlowId("test-flow-id");  List<String> errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions.assertTrue(errors.isEmpty());  inspectDto.setInspectMethod(InspectMethod.JOINTFIELD.getValue()); errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(errors.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )
************************************
[+] input: testInvalid() { Identifier identifier = new IMSIIdentifier();  String imsi = "foobar"; assertFalse(identifier.isOfThisType(imsi));  imsi = "1234455666"; //invalid length assertFalse(identifier.isOfThisType(imsi));  imsi = "1234455666123a5"; //contains letter assertFalse(identifier.isOfThisType(imsi));  imsi = "000000566612345"; //invalid MCC, MNC "<AssertPlaceHolder>"; }
[*] target: assertFalse(identifier.isOfThisType(imsi))
[-] pred: org. junit. Assert. assertFalse ( identifier. isOfThisType(imsi ) )
************************************
[+] input: MalformedURLException { URL baseURL = new URL("http://localhost:80/myServlet?myKey=myValue");  URL expectedURL = new URL("http://localhost:80/myServlet/with/custom/path?myKey=myValue&anotherKey=anotherValue"); URL actualURL = URLBuilder.fromURL(baseURL).withPath("with", "custom", "path").withQuery("anotherKey", "anotherValue").build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedURL, actualURL)
[-] pred: org. junit. Assert. assertEquals ( expectedURL, actualURL )
************************************
[+] input: parse_ShouldParseTextAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); Instant result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: returnsNullWhenNodeIsNotInstanceOfMergeTableNode() { String nodeId = "testNodeId"; DAG dag = mock(DAG.class); when(dag.getNode(nodeId)).thenReturn(null);  MergeTableNode result = mergeNodeCleaner.getMergeTableNode(dag, nodeId);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldSetAndGetSmoothScrollDuration() { options.setSmoothScrollDuration(300); "<AssertPlaceHolder>"; }
[*] target: assertEquals(300, options.getSmoothScrollDuration())
[-] pred: org. junit. Assert. assertEquals ( 300, options. getSmoothScrollDuration() )
************************************
[+] input: shouldConstructWithTitleInitialPathFiltersAndRestricted() { component = new FileChooserDialog("Title", "/path", Arrays.asList(mockFilter1, mockFilter2), true); assertEquals("Title", component.getTitle()); assertEquals("/path", component.getInitialPath()); assertEquals(Arrays.asList(mockFilter1, mockFilter2), component.getFilters()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(component.isRestricted())
[-] pred: org. junit. Assert. assertTrue ( component. isRestricted() )
************************************
[+] input: testGetByIdAndTenantId() { // Mock data long id = 1L; MonitoringLocation monitoringLocation = new MonitoringLocation(); when(modelRepo.findByIdAndTenantId(id, TENANT_ID)).thenReturn(Optional.of(monitoringLocation)); when(mapper.modelToDTO(any(MonitoringLocation.class))) .thenReturn(MonitoringLocationDTO.newBuilder().build());  // Test Optional<MonitoringLocationDTO> result = monitoringLocationService.getByIdAndTenantId(id, TENANT_ID);  // Assertions "<AssertPlaceHolder>"; assertTrue(result.isPresent()); verify(modelRepo, times(1)).findByIdAndTenantId(id, TENANT_ID); verify(mapper, times(1)).modelToDTO(any(MonitoringLocation.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: isDone() { ResponseFutureWrapper responseFutureWrapper = new ResponseFutureWrapper("Test"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(responseFutureWrapper.isDone())
[-] pred: org. junit. Assert. assertTrue ( responseFutureWrapper. isDone() )
************************************
[+] input: apply() { Type expected = STRING_TYPE; Type toVerify = new PlaceholderTypeConstructor().apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: collectingWithSingleLines() { List<String> expected = asList("1", "1"); List<String> toVerify = Stream.of(1).collect(collectingIntegers());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test11() { String str = "中国"; byte[] utf16 = str.getBytes(StandardCharsets.UTF_16LE); JSONWriter jsonWriter = JSONWriter.ofJSONB(); jsonWriter.writeStringUTF16(utf16); byte[] jsonb = jsonWriter.getBytes(); Object parsed = JSONB.parse(jsonb); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatDoesNotMatchElementType() { TypeConstructor expected = new ArrayTypeConstructor(new GenericTypeConstructor(U)); TypeConstructor toVerify = new ArrayType(new GenericType(U)).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testSha1() { Component component = new Component(); String hash = "74f7fcc24e02e61b0eb367e273139b6b24c6587f"; component.setSha1(hash); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(hash, component.getSha1())
[-] pred: org. junit. Assert. assertEquals ( hash, component. getSha1() )
************************************
[+] input: AuthenticationException {  String userId = "admin"; String refreshToken = JsonWebTokenUtil.issueJwt(userId, 3600L, Collections.singletonMap("refresh", true));  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); when(accountProvider.loadAccount(userId)).thenReturn(account);  RefreshTokenResponse response = accountService.refreshToken(refreshToken);  "<AssertPlaceHolder>"; assertNotNull(response.getToken()); assertNotNull(response.getRefreshToken()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: Exception { when(mockClient.headBucket(anyConsumer())) .thenReturn(CompletableFuture.completedFuture( HeadBucketResponse.builder().bucketRegion("us-west-2").build())); final var s3Client = provider.generateClient("test-bucket", mockClient); final var s3Client2 = provider.generateClient("test-bucket", mockClient); "<AssertPlaceHolder>"; }
[*] target: assertSame(s3Client, s3Client2)
[-] pred: org. junit. Assert. assertSame ( s3Client, s3Client2 )
************************************
[+] input: testFailWithBaseExceptionAndData() { Date data = new Date(); Result result = Result.fail(new BaseException(), data); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_ERROR.getCode()); assertEquals(result.getData(), data); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testName() { var repository = new ContentRepository(); repository.setName("anotherone"); assertEquals("anotherone", repository.getName()); repository.name("stillonemore"); assertEquals("stillonemore", repository.getName()); repository.setName(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(repository.getName())
[-] pred: org. junit. Assert. assertNull ( repository. getName() )
************************************
[+] input: toProtobuf() {  Person.Builder builder = Person.newBuilder(); Person person = (Person) ProtoJsonUtil.toProtobuf(sampleJson, builder); assertEquals(samplePerson, person);  String invalidJson = "{ "name": "John Doe", "id": "not-a-number" }"; builder = Person.newBuilder(); person = (Person) ProtoJsonUtil.toProtobuf(invalidJson, builder);  "<AssertPlaceHolder>"; }
[*] target: assertNull(person)
[-] pred: org. junit. Assert. assertNull ( person )
************************************
[+] input: testChoose() {  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("choose-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testChoose"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testChoose");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testChoose'";   Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testChoose"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testBind'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "apple"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'\n" + "  AND price = 10.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana", "price": 10.00}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'"; Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: test13() { QueryOperator queryOperator = new QueryOperator(); queryOperator.setUnit(TapTimeUnit.HOUR); List<String> result = TimeTransFormationUtil.calculatedTimeRange(currentDateTime,queryOperator,8L); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: shouldAddNewPhysicalAssessmentToClient() { //given Client client = new Client(); this.physicalAssessment.setClient(client); //when physicalAssessment.addPhysicalAssessment(); int actual = client.getPhysicalAssessmentList().size(); //then int expected = 1; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetTableNameWithNullTapdataEvent() { String tableName = hazelcastBaseNode.getTableName(null); "<AssertPlaceHolder>"; assertEquals("", tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: shouldSetTitle() { String title = "Test Title"; component.setTitle(title); "<AssertPlaceHolder>"; }
[*] target: assertEquals(title, component.getTitle())
[-] pred: org. junit. Assert. assertEquals ( title, component. getTitle() )
************************************
[+] input: extractInnerJar() { List<File> fileList = JarUtils.extractNestedBootStrapJar(jarFile); "<AssertPlaceHolder>"; assertTrue(fileList.get(0).getName().endsWith("bootstrap-test.jar")); }
[*] target: assertEquals(1, fileList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, fileList. size ( ) )
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButAllElementNotString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); when(utils.getPythonConfig(any(File.class))).thenReturn(configMap); packages = new ArrayList<>(); packages.add("mock"); packages.add(100); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: MalformedURLException { URL baseURL = new URL("http://localhost:80/");  URL expectedURL = new URL("http://localhost:80/my/custom/url"); URL actualURL = URLBuilder.fromURL(baseURL).withPath("my").withPath("custom").withPath("url").build(); assertEquals(expectedURL, actualURL);  actualURL = URLBuilder.fromURL(baseURL).withPath("my", "custom", "url").build(); assertEquals(expectedURL, actualURL);  actualURL = URLBuilder.fromURL(baseURL).withPath("my").withPath("custom", "url").build(); assertEquals(expectedURL, actualURL);  baseURL = new URL("http://localhost:80/my/"); actualURL = URLBuilder.fromURL(baseURL).withPath("custom").withPath("url").build(); assertEquals(expectedURL, actualURL);  actualURL = URLBuilder.fromURL(baseURL).withPath("custom", "url").build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedURL, actualURL)
[-] pred: org. junit. Assert. assertEquals ( expectedURL, actualURL )
************************************
[+] input: testPollEnemies() { final Stage stage = new Stage( ImmutableList.of(new Combatant(), new Combatant()), 3, ImmutableList.of() );  assertTrue(stage.hasMoreEnemies()); stage.getNextEnemy(); stage.getNextEnemy(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(stage.hasMoreEnemies())
[-] pred: org. junit. Assert. assertFalse ( stage. hasMoreEnemies() )
************************************
[+] input: deleteEmployee() {  Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeOperationsService.createEmployee(employee);  employeeOperationsService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeOperationsService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
[+] input: ingress2RouteTestRegularPathSingleService() { V1Ingress ingress = buildBasicSupportedIngress();  V1ObjectMeta metadata = ingress.getMetadata(); metadata.setName("test"); KubernetesUtil.setAnnotation(metadata, KubernetesConstants.Annotation.DESTINATION_KEY, "hello.default.svc.cluster.local"); KubernetesUtil.setAnnotation(metadata, KubernetesConstants.Annotation.USE_REGEX_KEY, KubernetesConstants.Annotation.TRUE_VALUE);  V1HTTPIngressPath path = ingress.getSpec().getRules().get(0).getHttp().getPaths().get(0); path.setPathType(KubernetesConstants.IngressPathType.PREFIX); path.setPath("/route_\\d+");  Route route = converter.ingress2Route(ingress);  Route expectedRoute = buildBasicRoute(); expectedRoute.setName(metadata.getName()); RoutePredicate pathPredicate = expectedRoute.getPath(); pathPredicate.setMatchType(RoutePredicateTypeEnum.REGULAR.toString()); pathPredicate.setCaseSensitive(null); pathPredicate.setMatchValue(path.getPath()); UpstreamService service = new UpstreamService("hello.default.svc.cluster.local", null, null, 100); expectedRoute.setServices(Collections.singletonList(service)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRoute, route)
[-] pred: org. junit. Assert. assertEquals ( expectedRoute, route )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Integer result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: shouldReturnJwtResponseWithMatchingToken() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN, userDetailsBuilder); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(JWT_TOKEN, jwtResponse.getAccessToken()); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: prepareText_fromMessageParametersOfAcknowledgedIncident_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.acknowledged);  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > The incident in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table has been acknowledged.\s > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Last seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testRemoveFirst() { deque.addLast(1); deque.addLast(2); deque.addLast(3);  assertEquals(Integer.valueOf(1), deque.removeFirst()); assertEquals(Integer.valueOf(2), deque.removeFirst()); assertEquals(Integer.valueOf(3), deque.removeFirst());  "<AssertPlaceHolder>"; }
[*] target: assertNull(deque.removeFirst())
[-] pred: org. junit. Assert. assertNull ( deque. removeFirst() )
************************************
[+] input: connectTest_error() { try(MockedStatic<WorkerSingletonLock> mockedStatic = Mockito.mockStatic(WorkerSingletonLock.class); MockedStatic<Version> versionMockedStatic = Mockito.mockStatic(Version.class)){ mockedStatic.when(()->WorkerSingletonLock.addTag2WsUrl(anyString())).thenReturn("ws://test:8080/ws/agent?agentId=test&access_token=test"); versionMockedStatic.when(Version::get).thenReturn("test"); managementWebsocketHandlerTest.connect("http://test:8080/api/"); ListenableFuture<WebSocketSession> listenableFuture = (ListenableFuture<WebSocketSession>) ReflectionTestUtils.getField(managementWebsocketHandlerTest,"listenableFuture"); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(listenableFuture)
[-] pred: org. junit. Assert. assertNotNull ( listenableFuture )
************************************
[+] input: testFilterConverge_IgnoreTag() {  testAlert.getTags().put(CommonConstants.IGNORE, "true"); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testFragment() { var content = new Content(MimeType.APPLICATION_XHTML, "<html></html>"); content.setFragment(true); assertTrue(content.isFragment()); assertSame(content, content.fragment(false)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(content.isFragment())
[-] pred: org. junit. Assert. assertFalse ( content. isFragment() )
************************************
[+] input: testHorizontalLayoutWithLabel() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElement("firstName", "First Name", null). // addElements("lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: givenGenericType() { String toVerify = toTest() .withType(T.asType()) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: isValid() { ValidationResult result = ValidationResult.valid(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isValid())
[-] pred: org. junit. Assert. assertTrue ( result. isValid ( ) )
************************************
[+] input: testIterator() { Node function = root.getChild(0); Iterator<Node> iterator = function.iterator(); Assertions.assertTrue(iterator.hasNext()); Assertions.assertEquals(function, iterator.next()); for (int i = 0; i < function.getChildCount(); i++) { Assertions.assertTrue(iterator.hasNext()); Assertions.assertEquals(function.getChild(i), iterator.next()); } Assertions.assertTrue(iterator.hasNext()); Iterator<Node> emptyIterator = empty.iterator(); emptyIterator.next(); Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(NoSuchElementException.class, emptyIterator::next); }
[*] target: assertFalse(emptyIterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( emptyIterator. hasNext() )
************************************
[+] input: testGetTask() { var task_id = -1; Task task = null; TaskManager manager = new MemoryTasks(); try { var cal = Calendar.getInstance(); cal.set(2001, Calendar.NOVEMBER, 24, 0, 0, 0);  task = new Task(); task.setType(TestTasktypes.UPLOAD_GROUPS); task.setPlanned(cal.getTime().getTime()); task.setFrequency(Frequency.MINUTELY); task.setBusy(false); task_id = manager.addTask(task);  task = manager.getTask(task_id); "<AssertPlaceHolder>";  assertEquals(task.getId(), task_id); assertEquals(task.getType(), TestTasktypes.UPLOAD_GROUPS); assertTrue(task.getPlanned() <= cal.getTime().getTime()); assertEquals(task.getFrequency().toString(), "* * * * *"); assertFalse(task.isBusy()); assertSame(task.getTaskManager(), manager); } catch (FrequencyException | TaskManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertNotNull(task)
[-] pred: org. junit. Assert. assertNotNull ( task )
************************************
[+] input: testGetTableNameBothHaveMessageEntityAndTapEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(messageEntity); when(tapdataEvent.getTapEvent()).thenReturn(tapInsertRecordEvent); tapdataEvent.setTapEvent(tapInsertRecordEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getTapEvent(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME1, tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: testReturnSubstringWithCodon7() { String expectedResult = this.expectedCodon7; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon7); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: concreteGivenFullyQualifiedNameAndListOfTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCreateHttpCookie() { var duration = Duration.ofHours(DURATION); var cookie = cookieService.createCookie(TokenType.ACCESS.getName(), jwtToken, duration); Assertions."<AssertPlaceHolder>";  assertCookie(cookie.getName(), cookie.toString(), jwtToken, duration); }
[*] target: assertNotNull(cookie)
[-] pred: org. junit. Assert. assertNotNull ( cookie )
************************************
[+] input: shouldUpdateCustomer() {  CusCustomerDto cusCustomerDto = createDummyCusCustomerDto(); CusCustomer cusCustomer = createDummyCusCustomer();  when(cusCustomerEntityService.saveCustomer(any())).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.saveCustomer(any());  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(cusCustomerDto, result)
[-] pred: org. junit. Assert. assertEquals ( cusCustomerDto, result )
************************************
[+] input: testGenerateCommandHostCommandEntity() { // Setup final ClusterServiceCommandHostEntity commandHost = new ClusterServiceCommandHostEntity(); commandHost.setCommandHostId("commandHostId"); commandHost.setHostname("hostname"); commandHost.setCommandState(CommandState.WAIT); commandHost.setCommandStateCode(0); commandHost.setCommandProgress(0); commandHost.setCommandId("commandId"); commandHost.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime());  final ClusterServiceCommandHostCommandEntity expectedResult = new ClusterServiceCommandHostCommandEntity(); expectedResult.setHostCommandId("hostCommandId"); expectedResult.setCommandName("commandName"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setCommandHostId("commandHostId"); expectedResult.setCommandId("commandId"); expectedResult.setHostname("hostname"); expectedResult.setServiceRoleName("serviceRoleName"); expectedResult.setServiceRoleType(RoleType.MASTER); expectedResult.setResultMsg("execOut"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setCommandType(0);  // Run the test final ClusterServiceCommandHostCommandEntity result = ProcessUtils.generateCommandHostCommandEntity( CommandType.INSTALL_SERVICE, "commandId", "serviceRoleName", RoleType.MASTER, commandHost);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: IOException { DynamicKafkaSourceSplitSerializer serializer = new DynamicKafkaSourceSplitSerializer(); DynamicKafkaSourceSplit dynamicKafkaSourceSplit = new DynamicKafkaSourceSplit( "test-cluster", new KafkaPartitionSplit(new TopicPartition("test-topic", 3), 1)); DynamicKafkaSourceSplit dynamicKafkaSourceSplitAfterSerde = serializer.deserialize(1, serializer.serialize(dynamicKafkaSourceSplit)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde)
[-] pred: org. junit. Assert. assertEquals ( dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: testGetTableNameOnlyHaveMessageEntity() { when(tapdataEvent.getMessageEntity()).thenReturn(messageEntity); when(tapdataEvent.getTapEvent()).thenReturn(null); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getMessageEntity(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME1, tableName); }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
[+] input: testGlobalStateMap() { ExternalStorageDto externalStorageDto = new ExternalStorageDto(); externalStorageDto.setId(new ObjectId()); externalStorageDto.setType(ExternalStorageType.mongodb.getMode()); externalStorageDto.setUri("mongodb://localhost:27017/test"); externalStorageDto.setTtlDay(3); PersistenceStorage persistenceStorage = spy(PersistenceStorage.getInstance()); IMap iMap = mock(IMap.class); when(iMap.isEmpty()).thenReturn(false); doReturn(persistenceStorage).when(persistenceStorage).initMapStoreConfig(anyString(), any(Config.class), anyString()); doReturn(iMap).when(mockHazelcastInstance).getMap(anyString()); try ( MockedStatic<ExternalStorageUtil> externalStorageUtilMockedStatic = mockStatic(ExternalStorageUtil.class); MockedStatic<PersistenceStorage> persistenceStorageMockedStatic = mockStatic(PersistenceStorage.class) ) { persistenceStorageMockedStatic.when(PersistenceStorage::getInstance).thenReturn(persistenceStorage); externalStorageUtilMockedStatic.when(ExternalStorageUtil::getTapdataOrDefaultExternalStorage).thenReturn(externalStorageDto); externalStorageUtilMockedStatic.when(() -> ExternalStorageUtil.initHZMapStorage(eq(externalStorageDto), anyString(), anyString(), any(Config.class))).thenAnswer(invocationOnMock -> null); PdkStateMap pdkStateMap = PdkStateMap.globalStateMap(mockHazelcastInstance); "<AssertPlaceHolder>"; Object actualConstructIMap = ReflectionTestUtils.getField(pdkStateMap, "constructIMap"); assertNotNull(actualConstructIMap); assertInstanceOf(DocumentIMap.class, actualConstructIMap); assertNotNull(((DocumentIMap) actualConstructIMap).getiMap()); assertEquals(iMap, ((DocumentIMap) actualConstructIMap).getiMap()); assertEquals(0, externalStorageDto.getTtlDay()); } }
[*] target: assertNotNull(pdkStateMap)
[-] pred: org. junit. Assert. assertNotNull ( pdkStateMap )
************************************
[+] input: givenConcreteTypeWithoutTypeParameters() { Type type = STRING; String toVerify = type(type).generate(); String expected = "java.lang.String"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "101"; Integer value = Integer.valueOf(valueAsString); String expected = TypeCodecs.INT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: test2() { //when this.registerPage.fillOutForm();  //then String expected = "Welcome to your account. Here you can manage all of your personal information and orders."; String actual = this.registerPage.getWelcomeMessage(); Assertions."<AssertPlaceHolder>";  String actualUrl = this.registerPage.getCurrentUrl(); Assertions.assertFalse(this.URL.equals(actualUrl)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldAddResizeListener() { component.onResize(event -> { });  List<EventListener<SplitterResizeEvent>> listeners = component.getEventListeners(SplitterResizeEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<SplitterResizeEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: getWorkbook() {  WorkbookContext workbookContext = this.getWorkbookContext(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(workbookContext.getWorkbook())
[-] pred: org. junit. Assert. assertNotNull ( workbookContext. getWorkbook() )
************************************
[+] input: testPriorityBasedDoesNotExceedFrequencyThreshold() { List<IdentifiedType> identifiedTypeList = new ArrayList<>(); identifiedTypeList.add(new IdentifiedType("EMAIL", 100)); identifiedTypeList.add(new IdentifiedType("ADDRESS", 100));  Map<String, Integer> priorities = new HashMap<>(); priorities.put("EMAIL", 90);  IdentificationConfiguration identificationConfiguration = new IdentificationConfiguration(50, 50, false, IdentificationStrategy.PRIORITY_BASED, priorities, Collections.emptyMap());  IdentifiedType bestType = IdentifierUtils.findBestType(identifiedTypeList, 1000L, identificationConfiguration);  "<AssertPlaceHolder>"; assertThat(bestType.getCount(), is(-1L)); assertThat(bestType.getTypeName(), is("UNKNOWN")); }
[*] target: assertNotNull(bestType)
[-] pred: org. junit. Assert. assertNotNull ( bestType )
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.covariant(), INTEGER_TYPE.contravariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: asTypeConstructor() { ArrayTypeConstructor expected = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR); ArrayTypeConstructor toVerify = new ArrayType(STRING_TYPE).asTypeConstructor();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCheckWhenDifferentUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: marshalNullDataPreserveNullsFalseTest() { final byte[] hmacText = fingerprintTransformer.marshal(null, context); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(hmacText)
[-] pred: org. junit. Assert. assertNotNull ( hmacText )
************************************
[+] input: validateGivenMethodWithNoSharedTypeConstructorBetweenLeftInputParameterAndReturnType() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(COMPLETABLE_FUTURE.with(V)), "myFunction", asList( Parameter.of(LIST.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("No shared type constructor between first parameter (java.util.List<T>) and result (java.util.concurrent.CompletableFuture<V>)"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCheckSupplyAmount_withValidSupply() { Money supply = Money.wons(60000L); Long discount = discountAmount; Long minimum = minimumCost;  Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.checkSupplyAmount(supply, discount, minimum);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: shouldTurnDownVolume() { //given //when this.tv.turnDownVolume(); this.tv.turnDownVolume(); this.tv.turnDownVolume(); int actual = this.tv.getVolume(); //then int expected = 2; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: 커플_TOP30_조회() { // given var couples = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var couple = Character.builder() .name("디프만 1번 출구") .type(CharacterType.COUPLE) .webtoonId(1L) .build(); couples.add(couple); responses.add(new CharacterResponse.CharacterDetailResponse( couple, "테스트1.png,테스트2.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.COUPLE) .imageUrl("테스트1.png,테스트2.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(couples);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("COUPLE",mockInfo); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: buildCodonMapBrcaMethodsFrame3Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame3CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 3, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
[+] input: testHandleCommandResult() { // Setup final ClusterServiceCommandHostCommandEntity expectedResult = new ClusterServiceCommandHostCommandEntity(); expectedResult.setHostCommandId("hostCommandId"); expectedResult.setCommandName("commandName"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setCommandHostId("commandHostId"); expectedResult.setCommandId("commandId"); expectedResult.setHostname("hostname"); expectedResult.setServiceRoleName("serviceRoleName"); expectedResult.setServiceRoleType(RoleType.MASTER); expectedResult.setResultMsg("execOut"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setCommandType(0);  // Run the test final ClusterServiceCommandHostCommandEntity result = ProcessUtils.handleCommandResult("hostCommandId", false, "execOut");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testQueryMonitorMetricsData() {  Long monitorId = 1L; List<CollectRep.MetricsData> expectedData = Collections.emptyList();  when(realTimeDataStorage.isServerAvailable()).thenReturn(true); when(realTimeDataStorage.getCurrentMetricsData(monitorId)).thenReturn(expectedData);  List<CollectRep.MetricsData> result = warehouseService.queryMonitorMetricsData(monitorId);  "<AssertPlaceHolder>"; verify(realTimeDataStorage, never()).isServerAvailable(); }
[*] target: assertEquals(expectedData, result)
[-] pred: org. junit. Assert. assertEquals ( expectedData, result )
************************************
[+] input: testUpdateTasksException() { // // Setup Test Data and Interactions // RuntimeException testException = new RuntimeException("x-test-exception-x"); Mockito.doThrow(testException) .when(mockTaskSetStorage) .atomicUpdateTaskSetForLocation("x-tenant-id-x", "505050", mockTaskSetGrpcServiceUpdateProcessor);  // // Execute // target.setGrpcIpcServer(mockGrpcIpcServer); target.setTaskSetStorage(mockTaskSetStorage); target.setTaskSetGrpcServiceUpdateProcessorFactory(mockTaskSetGrpcServiceUpdateProcessorFactory);  RuntimeException actualException = null; try { target.updateTasks(testRequest, mockUpdateTasksRepsonseStreamObserver); fail("missing expected exception"); } catch (RuntimeException thrown) { actualException = thrown; }  // // Verify the Results // "<AssertPlaceHolder>"; Mockito.verifyNoInteractions(mockUpdateTasksRepsonseStreamObserver); }
[*] target: assertSame(testException, actualException)
[-] pred: org. junit. Assert. assertSame ( testException, actualException )
************************************
[+] input: testAddScope() { String scopeName = "newScope1"; ScopeSetManager manager = new ScopeSetManager(); ScopeSet newScope = new ScopeSet(scopeName); manager.add(newScope); manager.save(); manager = new ScopeSetManager(); ScopeSet set = manager.findSet(scopeName); "<AssertPlaceHolder>"; assertEquals(scopeName, set.getName()); }
[*] target: assertNotNull(set)
[-] pred: org. junit. Assert. assertNotNull ( set )
************************************
[+] input: testConstructErrorTypeWithData() { Date data = new Date(); Result result = new Result(SystemErrorType.SYSTEM_BUSY, data); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_BUSY.getCode()); assertEquals(result.getMesg(), SystemErrorType.SYSTEM_BUSY.getMesg()); assertEquals(result.getData(), data); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long value = Long.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Long result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: bind_withExplodeMap() { commonSetup(true,false,false); targetInsertStatement = new TargetInsertStatement(propertyHelper, targetSession);  BoundStatement result = targetInsertStatement.bind(originRow, targetRow, null,null,getSampleData(explodeMapKeyType),getSampleData(explodeMapValueType)); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: SQLException { when(mockHttpClient.execute(any(HttpUriRequest.class))).thenReturn( mockHttpGetSignInPageResponse, mockHttpPostSignInResponse); final String correctSamlAssertion = IOUtils.toString( Objects.requireNonNull( this.getClass().getClassLoader().getResourceAsStream("federated_auth/saml-assertion.txt")), "UTF-8") .replace("\n", "") .replace("\r", ""); final String samlAssertion = this.adfsCredentialsProviderFactory.getSamlAssertion(props); "<AssertPlaceHolder>";  final ArgumentCaptor<HttpUriRequest> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpUriRequest.class); verify(mockHttpClient, times(2)).execute(httpPostArgumentCaptor.capture()); final HttpEntityEnclosingRequest actualHttpPost = (HttpEntityEnclosingRequest) httpPostArgumentCaptor.getValue(); final String content = EntityUtils.toString(actualHttpPost.getEntity()); final String[] params = content.split("&"); assertEquals("UserName=" + USERNAME.replace("@", "%40"), params[0]); assertEquals("Password=" + PASSWORD, params[1]); assertEquals("Kmsi=true", params[2]); assertEquals("AuthMethod=FormsAuthentication", params[3]); }
[*] target: assertEquals(correctSamlAssertion, samlAssertion)
[-] pred: org. junit. Assert. assertEquals ( correctSamlAssertion, samlAssertion )
************************************
[+] input: testFilterConvergeNoConverge() {  when(convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE)).thenReturn(null); when(alertConvergeDao.findAll()).thenReturn(Collections.emptyList());  boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; verify(convergeCache).get(CommonConstants.CACHE_ALERT_CONVERGE); verify(alertConvergeDao).findAll(); verify(convergeCache).put(CommonConstants.CACHE_ALERT_CONVERGE, Collections.emptyList()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR).apply(INTEGER_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: getActivityLogOverview_TeamIdNotNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getActivityLogByTeam( TestConstants.TEAM_ID, NUMBER_OF_DAYS, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: isParentOf() { NodeData parent = new NodeData(new File("/test/foobar")); NodeData child = new NodeData(new File("/test/foobar.txt")); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(parent.isParentOf(child))
[-] pred: org. junit. Assert. assertFalse ( parent. isParentOf ( child ) )
************************************
[+] input: SQLException { when(this.mockPluginService.getHosts()).thenReturn(singleReaderTopology); when(mockPluginService.getCurrentConnection()).thenReturn(mockWriterConn); when(mockPluginService.getCurrentHostSpec()).thenReturn(writerHostSpec);  final ReadWriteSplittingPlugin plugin = new ReadWriteSplittingPlugin( mockPluginService, defaultProps, mockHostListProviderService, mockWriterConn, null); plugin.switchConnectionIfRequired(false);  verify(mockPluginService, times(0)) .setCurrentConnection(any(Connection.class), any(HostSpec.class)); assertEquals(mockWriterConn, plugin.getWriterConnection()); "<AssertPlaceHolder>"; }
[*] target: assertNull(plugin.getReaderConnection())
[-] pred: org. junit. Assert. assertNull ( plugin. getReaderConnection() )
************************************
[+] input: shouldConstructWithHrefText() { String href = "https://example.com"; String text = "Example Link";  Anchor anchor = new Anchor(href, text); assertNotNull(anchor); "<AssertPlaceHolder>"; assertEquals(text, anchor.getText()); }
[*] target: assertEquals(href, anchor.getHref())
[-] pred: org. junit. Assert. assertEquals ( href, anchor. getHref() )
************************************
[+] input: shouldReturnEmptyJwtResponseWithNoUserDetails() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(StringUtils.isBlank(jwtResponse.getAccessToken())); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DrawerOpenEvent>> listeners = component.getEventListeners(DrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testOfferWhenTryEmitReturnTrue() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(true); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: givenInterfaceWithoutModifiersButWithTypeParameters() { List<String> toVerify = classOrInterface() .asInterface() .withName("Pair") .withTypeParameters(A.extending(OBJECT)) .withTypeParameters(B) .withBody( "A getLeft();", "B getRight();" ) .lines();  List<String> expected = asList( "interface Pair<A, B> {", "", "    A getLeft();", "    B getRight();", "", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: returnsNullWhenNodeIdDoesNotExistInDag() { String nodeId = "testNodeId"; DAG dag = mock(DAG.class);  MergeTableNode result = mergeNodeCleaner.getMergeTableNode(dag, nodeId);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: IOException { final AgentPreparer agentPreparer = new AgentPreparer(); final String output = agentPreparer.loadAgentOnFileSystem("agents/agent.jar");  Assertions."<AssertPlaceHolder>";  Files.delete(Path.of(output)); // Verify file exists and clean up at same time }
[*] target: assertNotNull(output)
[-] pred: org. junit. Assert. assertNotNull ( output )
************************************
[+] input: testTaskDtoIsNull() { when(taskService.findOne(any(Query.class), any(UserDetail.class))).thenReturn(null); List<ErrorEvent> errorEventByTaskId = taskErrorEventService.getErrorEventByTaskId(new ObjectId().toHexString(), user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(errorEventByTaskId)
[-] pred: org. junit. Assert. assertNotNull ( errorEventByTaskId )
************************************
[+] input: testGetDiscountAmount_withPercentageDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.PERCENTAGE); given(couponCampaign.getDiscountAmount()).willReturn(discountPercentage); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(18000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
[+] input: detectSNMP() { SnmpAgentConfig config1 = new SnmpAgentConfig(InetAddressUtils.getInetAddress("127.0.0.1"), SnmpConfiguration.DEFAULTS); SnmpAgentConfig config2 = new SnmpAgentConfig(InetAddressUtils.getInetAddress("192.168.1.1"), SnmpConfiguration.DEFAULTS); List<SnmpAgentConfig> configs = Arrays.asList(config1, config2);  SnmpValue[] snmpValues1 = new SnmpValue[] {new Snmp4JValue(new Integer32(1))}; SnmpValue[] snmpValues2 = new SnmpValue[0];  when(snmpHelper.getAsync(config1, new SnmpObjId[] {SnmpObjId.get(SnmpHelper.SYS_OBJECTID_INSTANCE)})) .thenReturn(CompletableFuture.completedFuture(snmpValues1)); when(snmpHelper.getAsync(config2, new SnmpObjId[] {SnmpObjId.get(SnmpHelper.SYS_OBJECTID_INSTANCE)})) .thenReturn(CompletableFuture.completedFuture(snmpValues2));  List<SnmpAgentConfig> detectedConfigs = snmpConfigDiscovery.getDiscoveredConfig(configs);  "<AssertPlaceHolder>"; assertEquals(config1, detectedConfigs.get(0));  verify(snmpHelper, times(2)).getAsync(any(), any()); }
[*] target: assertEquals(1, detectedConfigs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, detectedConfigs. size ( ) )
************************************
[+] input: testReplaceBatch() { User user = new User(); user.setId(1L) .setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); int replace = commonDaoWrap.replaceBatch(Collections.singletonList(user)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, replace)
[-] pred: org. junit. Assert. assertEquals ( 2, replace )
************************************
[+] input: resolveFileFormat_whenOnlyPathsSetOnFileFormat_retunsFormParametersWithPathsFormTable() { String sampleFileName = SampleCsvFileNames.continuous_days_one_row_per_day; TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat( new FileFormatSpec() {{ setFilePaths(new FilePathListSpec(){{ add(SampleDataFilesProvider.getFile(sampleFileName).toString()); }}); }});  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
[+] input: Exception { String jsonS = "{"a": 2}"; JsonNode node = MAPPER.readTree(jsonS);  Map<String, List<JsonNode>> traverseMap = JsonUtils.traverseObject(node);   "<AssertPlaceHolder>"; assertEquals(1, traverseMap.get("/a").size()); }
[*] target: assertEquals(1, traverseMap.size())
[-] pred: org. junit. Assert. assertEquals ( 1, traverseMap. size ( ) )
************************************
[+] input: testSkipFileNullVersion() { io.tapdata.utils.AppType appType = io.tapdata.utils.AppType.DFS; ScriptPatchScanner scriptPatchScanner = new ScriptPatchScanner(appType, allVariables);  try (MockedStatic<FileUtil> fileUtilMockedStatic = Mockito.mockStatic(FileUtil.class)) { fileUtilMockedStatic.when(() -> FileUtil.mainName(Mockito.anyString())).thenReturn(null); // set all file name is null List<IPatch> allPatch = spyPatchesRunner.scanPatches(appType, appVersion, softVersion, scriptPatchScanner); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertTrue(allPatch.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( allPatch. isEmpty ( ) )
************************************
[+] input: Exception { String someConfigServiceUrl = " someConfigServiceUrl "; String anotherConfigServiceUrl = " anotherConfigServiceUrl ";  System.setProperty(ApolloClientSystemConsts.APOLLO_CONFIG_SERVICE, someConfigServiceUrl + "," + anotherConfigServiceUrl);  ConfigServiceLocator configServiceLocator = new ConfigServiceLocator();  List<ServiceDTO> result = configServiceLocator.getConfigServices();  "<AssertPlaceHolder>";  assertEquals(someConfigServiceUrl.trim(), result.get(0).getHomepageUrl()); assertEquals(anotherConfigServiceUrl.trim(), result.get(1).getHomepageUrl()); }
[*] target: assertEquals(2, result.size())
[-] pred: org. junit. Assert. assertEquals ( 2, result. size ( ) )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: isEnabled_initialized_returnsFalse() { testFeature.loadProperties(propertyHelper); "<AssertPlaceHolder>"; }
[*] target: assertFalse(testFeature.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( testFeature. isEnabled() )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: testCreateDir() { // Setup final ClientSession session = null;  // Run the test final boolean result = MinaUtils.createDir(session, "path");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testIsServeUnread() { assertFalse(fManager.mustServeReadTips()); fManager.setServeReadTips(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fManager.mustServeReadTips())
[-] pred: org. junit. Assert. assertTrue ( fManager. mustServeReadTips() )
************************************
[+] input: getLogConfTest() { AgentLogConfigurationWatcher agentLogConfigurationWatcher = new AgentLogConfigurationWatcher(); try(MockedStatic<ObsLoggerFactory> obsLoggerFactoryMockedStatic = mockStatic(ObsLoggerFactory.class); MockedStatic<BeanUtil> beanUtilMockedStatic = mockStatic(BeanUtil.class)){ ObsLoggerFactory obsLoggerFactory = mock(ObsLoggerFactory.class); when(ObsLoggerFactory.getInstance()).thenReturn(obsLoggerFactory); SettingService settingService = mock(SettingService.class); when(BeanUtil.getBean(SettingService.class)).thenReturn(settingService); when(settingService.getString("scriptEngineHttpAppender", "false")).thenReturn("false"); when(settingService.getString("logLevel","info")).thenReturn("info"); LogConfiguration logConfiguration = LogConfiguration.builder().logSaveTime(180).logSaveSize(10).logSaveCount(10).build(); when(obsLoggerFactory.getLogConfiguration("agent")).thenReturn(logConfiguration); LogConfiguration logConf = agentLogConfigurationWatcher.getLogConfig(); "<AssertPlaceHolder>"; assertEquals("info",logConf.getLogLevel()); assertEquals("false",logConf.getScriptEngineHttpAppender()); assertEquals(180,logConf.getLogSaveTime()); assertEquals(10,logConf.getLogSaveSize()); assertEquals(10,logConf.getLogSaveCount()); } }
[*] target: assertEquals(logConfiguration,logConf)
[-] pred: org. junit. Assert. assertEquals ( logConfiguration, logConf )
************************************
[+] input: of() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = GenericTypeConstructor.of(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: TypeParserTest {  @ParameterizedTest @MethodSource("me.darknet.assembler.TypeParserTest#provideMemberInfo") public void testParseMemberInfo(String input) { String[] args = input.split(" "); String name = args[0]; String descriptor = args[1]; MemberInfo memberInfo = TypeParser.parseMemberInfo(name, descriptor); Assertions."<AssertPlaceHolder>"; }  public String[] provideMemberInfo() { return new String[] { "java/lang/String.toString ()Ljava/lang/String;", "java/lang/String.value [C", "name Ljava/lang/String;" }; }  }
[*] target: assertNotNull(memberInfo)
[-] pred: org. junit. Assert. assertNotNull ( memberInfo )
************************************
[+] input: getActivityLogForTeamOverview() { ChartsJsOverview chartsJsOverview = new ChartsJsOverview(); TeamOverview expected = new TeamOverview(); expected.setTopicsPerTeamPerEnvOverview(chartsJsOverview); expected.setActivityLogOverview(chartsJsOverview);  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getActivityLogOverview(TestConstants.TEAM_ID, 101, NUMBER_OF_DAYS);  TeamOverview actual = analyticsControllerService.getActivityLogForTeamOverview("true", NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenManyModifiers() { String toVerify = toTest() .withModifiers(PUBLIC, STATIC, ABSTRACT) .withModifiers(PRIVATE, DEFAULT) .getModifiersGenerator() .generate();  String expected = "public private abstract default static";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenTypeParameterName() { String toVerify = toTest() .withType(T) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: generateReport_UnauthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(true); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsforTeam(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when( handleDbRequestsJdbc.getConsumerGroupsforTeam( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testDecryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String encryptedText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToEntityAttribute(encryptedText); "<AssertPlaceHolder>"; }
[*] target: assertEquals(encryptedText, converted)
[-] pred: org. junit. Assert. assertEquals ( encryptedText, converted )
************************************
[+] input: shouldAddCloseListener() { component.onDrawerClose(event -> { });  List<EventListener<AppLayoutDrawerCloseEvent>> listeners = component.getEventListeners(AppLayoutDrawerCloseEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<AppLayoutDrawerCloseEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: shouldTransformToComponentWithValidLocalDate() { LocalDate date = LocalDate.of(2005, 3, 4); int expectedJulianDate = 2453434; int result = transformer.transformToComponent(date); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJulianDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJulianDate, result )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode1() { when(nodeList.size()).thenReturn(2); DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node2);  JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(0)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: getActivityLogOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( handleDbRequestsJdbc.getActivityLogForLastDays( eq(NUMBER_OF_DAYS), any(), eq(TestConstants.TENANT_ID))) .thenReturn(List.of()); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( null, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: replay() { WebClientWrapper target = new WebClientWrapper(clientRequest, strategies); MockResult mockResult = target.replay(); "<AssertPlaceHolder>"; }
[*] target: assertNull(mockResult)
[-] pred: org. junit. Assert. assertNull ( mockResult )
************************************
[+] input: shouldReturnListOfTodos() { this.server .expect(requestTo("/todos")) .andRespond(withSuccess("[{" + ""id": 1," + ""userId": 42, " + ""title":"Learn Testing Spring Boot Applications", " + ""completed": false" + "}]", MediaType.APPLICATION_JSON));  List<Todo> result = todosClient.fetchAllTodos();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
[+] input: IOException { BilibiliResponse<UserWebListResult> response = client.liveUserWebList(1, 10); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: IOException { var foo = fs.getPath("/foo"); when(mockClient.headObject(anyConsumer())).thenReturn(completedFuture( HeadObjectResponse.builder() .lastModified(Instant.EPOCH) .contentLength(100L) .eTag("abcdef") .build())); final var basicFileAttributes = provider.readAttributes(foo, BasicFileAttributes.class); "<AssertPlaceHolder>"; assertThat(basicFileAttributes).isInstanceOf(S3BasicFileAttributes.class); }
[*] target: assertNotNull(basicFileAttributes)
[-] pred: org. junit. Assert. assertNotNull ( basicFileAttributes )
************************************
[+] input: testReplace() { User user = new User(); user.setId(1L) .setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); int replace = commonDaoWrap.replace(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, replace)
[-] pred: org. junit. Assert. assertEquals ( 2, replace )
************************************
[+] input: test_When_GetProductById_isSuccess() { Product product = getMockProductDetails(); when(productRepository.findById(product.getProductId())).thenReturn(Optional.of(product));  ProductResponse productResponse = productService.getProductById(1); //Verification verify(productRepository, times(1)).findById(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(product.getProductId(), productResponse.getProductId());  }
[*] target: assertNotNull(productResponse)
[-] pred: org. junit. Assert. assertNotNull ( productResponse )
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalTime value = LocalTime.of(12, 30); component = new MaskedTimeFieldSpinner("label", value); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(value, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( value, component. getValue() )
************************************
[+] input: testReturnsTaskDto() { try (MockedStatic<BeanUtil> beanUtilMockedStatic = mockStatic(BeanUtil.class)) { String taskId = "testTaskId"; TaskDto expectedTaskDto = new TaskDto(); when(clientMongoOperator.findOne(any(Query.class), anyString(), eq(TaskDto.class))).thenReturn(expectedTaskDto); beanUtilMockedStatic.when(() -> BeanUtil.getBean(ClientMongoOperator.class)).thenReturn(clientMongoOperator);  TaskDto result = mergeNodeCleaner.findTaskById(taskId);  "<AssertPlaceHolder>"; verify(clientMongoOperator, times(1)).findOne(any(Query.class), anyString(), eq(TaskDto.class)); } }
[*] target: assertEquals(expectedTaskDto, result)
[-] pred: org. junit. Assert. assertEquals ( expectedTaskDto, result )
************************************
[+] input: testGenerateCommandEntity() { // Setup final ClusterServiceCommandEntity expectedResult = new ClusterServiceCommandEntity(); expectedResult.setCommandId("commandId"); expectedResult.setCreateBy("admin"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setCommandName("commandName"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setClusterId(0); expectedResult.setServiceName("serviceName"); expectedResult.setCommandType(0); expectedResult.setDurationTime("durationTime"); expectedResult.setEndTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setServiceInstanceId(0);  // Run the test final ClusterServiceCommandEntity result = ProcessUtils.generateCommandEntity(0, CommandType.INSTALL_SERVICE, "serviceName");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testAgentIdsListIsNull() { when(group.getAgentIds()).thenReturn(null); AccessNodeInfo accessNodeInfo = agentGroupUtil.mappingAccessNodeInfo(group, infoMap); Assertions."<AssertPlaceHolder>"; verify(group, times(1)).getAgentIds(); verify(group, times(1)).getGroupId(); verify(group, times(1)).getName(); verify(infoMap, times(0)).get(anyString()); }
[*] target: assertNotNull(accessNodeInfo)
[-] pred: org. junit. Assert. assertNotNull ( accessNodeInfo )
************************************
[+] input: replaceAllTypeParameterNamesGivenMappingThatDoesNotContainElementTypeConstructor() { Map<TypeParameterName, TypeParameterName> mapping = new HashMap<>(); mapping.put(T, A); mapping.put(U, B);  ConcreteTypeConstructor expected = new ConcreteTypeConstructor( ERUDITE, asList( STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.generic(V).covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant() ) );  ConcreteTypeConstructor toVerify = new ConcreteTypeConstructor( ERUDITE, asList( STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.generic(V).covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant() ) ).replaceTypeParameterNames(mapping);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: concreteGivenFullyQualifiedName() { ConcreteType expected = new ConcreteType(ERUDITE, emptyList()); ConcreteType toVerify = Type.concrete(ERUDITE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: IOException { DmWebViewReply dmWebViewReply = client.videoDanmakuView(885244431); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(dmWebViewReply.hasDmSge()); Assertions.assertTrue(dmWebViewReply.getDmSge().hasTotal()); logger.info("count:" + dmWebViewReply.getCount()); for (CommandDm commandDm : dmWebViewReply.getCommandDmsList()) { logger.info(commandDm.getMtime() + ">" + commandDm.getContent()); } }
[*] target: assertNotNull(dmWebViewReply)
[-] pred: org. junit. Assert. assertNotNull ( dmWebViewReply )
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: givenAValidVideo_whenCallsFindById_shouldReturnIt() { // given final var expectedTitle = Fixture.title(); final var expectedDescription = Fixture.Videos.description(); final var expectedLaunchYear = Year.of(Fixture.year()); final var expectedDuration = Fixture.duration(); final var expectedOpened = Fixture.bool(); final var expectedPublished = Fixture.bool(); final var expectedRating = Fixture.Videos.rating(); final var expectedCategories = Set.of(aulas.getId()); final var expectedGenres = Set.of(tech.getId()); final var expectedMembers = Set.of(wesley.getId());  final AudioVideoMedia expectedVideo = AudioVideoMedia.with("123", "video", "/media/video");  final AudioVideoMedia expectedTrailer = AudioVideoMedia.with("123", "trailer", "/media/trailer");  final ImageMedia expectedBanner = ImageMedia.with("123", "banner", "/media/banner");  final ImageMedia expectedThumb = ImageMedia.with("123", "thumb", "/media/thumb");  final ImageMedia expectedThumbHalf = ImageMedia.with("123", "thumbHalf", "/media/thumbHalf");  final var aVideo = videoGateway.create( Video.newVideo( expectedTitle, expectedDescription, expectedLaunchYear, expectedDuration, expectedOpened, expectedPublished, expectedRating, expectedCategories, expectedGenres, expectedMembers ) .updateVideoMedia(expectedVideo) .updateTrailerMedia(expectedTrailer) .updateBannerMedia(expectedBanner) .updateThumbnailMedia(expectedThumb) .updateThumbnailHalfMedia(expectedThumbHalf) );  // when final var actualVideo = videoGateway.findById(aVideo.getId()).get();  // then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actualVideo.getId());  Assertions.assertEquals(expectedTitle, actualVideo.getTitle()); Assertions.assertEquals(expectedDescription, actualVideo.getDescription()); Assertions.assertEquals(expectedLaunchYear, actualVideo.getLaunchedAt()); Assertions.assertEquals(expectedDuration, actualVideo.getDuration()); Assertions.assertEquals(expectedOpened, actualVideo.getOpened()); Assertions.assertEquals(expectedPublished, actualVideo.getPublished()); Assertions.assertEquals(expectedRating, actualVideo.getRating()); Assertions.assertEquals(expectedCategories, actualVideo.getCategories()); Assertions.assertEquals(expectedGenres, actualVideo.getGenres()); Assertions.assertEquals(expectedMembers, actualVideo.getCastMembers()); Assertions.assertEquals(expectedVideo.name(), actualVideo.getVideo().get().name()); Assertions.assertEquals(expectedTrailer.name(), actualVideo.getTrailer().get().name()); Assertions.assertEquals(expectedBanner.name(), actualVideo.getBanner().get().name()); Assertions.assertEquals(expectedThumb.name(), actualVideo.getThumbnail().get().name()); Assertions.assertEquals(expectedThumbHalf.name(), actualVideo.getThumbnailHalf().get().name()); }
[*] target: assertNotNull(actualVideo)
[-] pred: org. junit. Assert. assertNotNull ( actualVideo )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { GroupId id1 = new GroupId("group@example.com");  assertTrue(id1.equals(id1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id1))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id1 ) )
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: testCompatible() { String oldCompressString = "KLUv/QBYJAgAltE3JDCLOAcQDrWkTCPhBm9L2vigBeJYVw+ES3bvwu/pHjBwMDDAASsAMQAtAAzxS6NLBfbeBg8o7tWvx5hO8bSXSw2cXV/" + "uI+wqUQ6KYaSdz5dz07JD7ZG7OKMoAIimCVASSbMsidMsCYNIlCVJWDQEzg4xIIaPMoNKJyl/VTpxsy+MjVN6UCG106Nxd1IQfDzC3lGnBm20Rpz91TiM4jiMg1i" + "cxMKurzkWtk7l50th79W3kBsk1WNzrhXoa45eZZ6ew9OOFEIasErwq3q0kOAQbbpDQnLhv8aFUqycm7ajdgwARRmAwGN29RL2nXEYEDb8ug9tmqh5KPj4mTh9ehy1EAUBAAA="; final byte[] oldCompressBytes = Base64.getDecoder().decode(oldCompressString); final String newDeCompressString = CompressUtil.zstdDecompress(oldCompressBytes, StandardCharsets.UTF_8); final byte[] newCompressBytes = CompressUtil.zstdCompress(newDeCompressString, StandardCharsets.UTF_8); String newCompressString = Base64.getEncoder().encodeToString(newCompressBytes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(oldCompressString, newCompressString)
[-] pred: org. junit. Assert. assertEquals ( oldCompressString, newCompressString )
************************************
[+] input: InterruptedException { String key = "test:" + UuidUtils.uuid32(); RedisLock redisLock = factory.create(key, 5000); Assertions.assertTrue(redisLock.tryLock());  Thread.sleep(55); Long ttl1 = bean.getExpire("lock:" + key, TimeUnit.MILLISECONDS); System.out.println("ttl1: " + ttl1); Assertions.assertTrue(ttl1 > 4000 && ttl1 < 5000);  Thread.sleep(1000); Long ttl2 = bean.getExpire("lock:" + key, TimeUnit.MILLISECONDS); System.out.println("ttl2: " + ttl2); Assertions.assertTrue(ttl2 > 3000 && ttl2 < 4000);  Assertions.assertTrue(redisLock.tryLock()); Thread.sleep(50); Long ttl3 = bean.getExpire("lock:" + key, TimeUnit.MILLISECONDS); System.out.println("ttl3: " + ttl3); Assertions.assertTrue(ttl3 > 4000 && ttl3 < 5000);  Assertions.assertTrue(redisLock.isLocked()); Assertions.assertTrue(redisLock.isHeldByCurrentThread());  Thread thread = new Thread(() -> { Assertions.assertTrue(redisLock.isLocked()); Assertions.assertFalse(redisLock.isHeldByCurrentThread()); System.out.println("child thread done."); }); thread.start(); thread.join();  Assertions.assertTrue(redisLock.isLocked()); redisLock.unlock();  Assertions.assertTrue(redisLock.isLocked()); redisLock.unlock();  Assertions.assertFalse(redisLock.isLocked()); Assertions.assertFalse(redisLock.isHeldByCurrentThread()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(redisLock.tryLock())
[-] pred: org. junit. Assert. assertTrue ( redisLock. tryLock ( ) )
************************************
[+] input: testResolveRelativePath() { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String relativePath = resolveRelativePath(resourceURL); String expectedPath = "javax/annotation/Nonnull.class"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
[+] input: NoSuchMethodException { WrappingLookupCommand command = new WrappingLookupCommand(); Context testContext = new ContextBase();  Context wrapped = command.getContext(testContext);  "<AssertPlaceHolder>"; assertSame(testContext, wrapped); }
[*] target: assertNotNull(wrapped)
[-] pred: org. junit. Assert. assertNotNull ( wrapped )
************************************
[+] input: IOException { BilibiliResponse<BilibiliPageInfo<VideoData>> response = client.popular(1, 50); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(response.getCode()); Assertions.assertEquals(response.getCode(), ErrorCode.SUCCESS); Assertions.assertNotNull(response.getData()); List<VideoData> list = response.getData().getList(); Assertions.assertNotNull(list); Assertions.assertFalse(list.isEmpty()); for (VideoData videoData : list) { Assertions.assertNotNull(videoData); Assertions.assertNotNull(videoData.getOwner()); logger.info("推荐视频:" + videoData.getTitle() + "[" + videoData.getBvid() + "]" + " " + videoData.getOwner().getName()); } }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeAndAllNodeAreDataParentNodeButDataTypeNotEquals() { when(nodeList.size()).thenReturn(2); DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type-cache"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldSetGetOptions() { List<String> options = Arrays.asList("Option1", "Option2", "Option3"); component.setOptions(options); verify(mockMixin).setOptions(options);  when(mockMixin.getOptions()).thenReturn(options); List<String> result = component.getOptions(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(options, result)
[-] pred: org. junit. Assert. assertEquals ( options, result )
************************************
[+] input: getPartitionsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getPartitionsCountByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getPartitionsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: 옵션에_가격이_붙으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); Money optionAnswerPrice1 = Money.wons(1000L); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(optionAnswerPrice1); Money optionAnswerPrice2 = Money.wons(2000L); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(optionAnswerPrice2); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
[+] input: test() { String str = "{"value":true}"; assertEquals( true, JSON.parseObject(str, Bean.class).value.get() );  assertEquals( true, JSON.parseObject(str).to(Bean.class).value.get() );  ObjectReader objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Bean.class); FieldReader fieldReader = objectReader.getFieldReader("value"); assertEquals("value", fieldReader.toString()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fieldReader.isReadOnly())
[-] pred: org. junit. Assert. assertTrue ( fieldReader. isReadOnly() )
************************************
[+] input: testQueryWorkerByProcessIdWithId() { String processId = "111"; WorkerDto workerDto = mock(WorkerDto.class); Query query = Query.query(Criteria.where("process_id").is(processId).and("worker_type").is("connector")); doReturn(workerDto).when(workerService).findOne(query); WorkerDto actual = workerService.queryWorkerByProcessId(processId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(workerDto,actual)
[-] pred: org. junit. Assert. assertEquals ( workerDto, actual )
************************************
[+] input: testIsAvailableTerm() { //        //given //        given(couponCampaign.getValidTerm()).willReturn(validTerm); //        //LocalDateTime localDateTime = Mockito.mock(new // TypeToken<IssuedCoupon>(){}.getCreatedAt()); //        given(issuedCoupon.getCreatedAt()).willReturn(createdAt); //        //when //        Boolean result = issuedCoupon.isAvailableTerm(); //        //then //        "<AssertPlaceHolder>"; //    }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: contravariantConcreteTypeConstructorCanAcceptGivenEquivalentInvariantConcreteTypeConstructor() { ConcreteTypeConstructor target = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.contravariant()); ConcreteTypeConstructor source = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(target.canAccept(source))
[-] pred: org. junit. Assert. assertTrue ( target. canAccept ( source ) )
************************************
[+] input: givenInstanceMethod() { String toVerify = methodReference() .withObjectPath("this") .withMethodName("toString") .generate();  String expected = "this::toString";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: buildCodonMapBrcaMethodsFrame2Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame2CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 2, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
[+] input: setEvaluationContextShouldAllowChaining() { OpenFeatureClient client = new OpenFeatureClient(api, "name", "version"); EvaluationContext ctx = new ImmutableContext("targeting key", new HashMap<>()); OpenFeatureClient result = client.setEvaluationContext(ctx); "<AssertPlaceHolder>"; }
[*] target: assertEquals(client, result)
[-] pred: org. junit. Assert. assertEquals ( client, result )
************************************
[+] input: prepareText_fromMessageParametersWithIssueUrl_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.acknowledged); notificationMessage.setIssueUrl("https://www.google.com");  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > The incident in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table has been acknowledged.\s > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Last seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > Issue url: <https://www.google.com | LINK>\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testParameters() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("parameters-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testParameters"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testParameters");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND price > 100.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "apple", "price": 100.00}"));  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testAspectRunnable() { CountDownLatch checkRunnableIsCalled = new CountDownLatch(3); // before, runner, after DisposableThreadGroupAspect<DisposableThreadGroupBase> aspect = Mockito.mock(DisposableThreadGroupAspect.class); try (MockedStatic<AspectUtils> aspectUtilsMockedStatic = Mockito.mockStatic(AspectUtils.class)) { aspectUtilsMockedStatic.when(() -> AspectUtils.executeAspect(Mockito.any(), Mockito.any())).thenAnswer(invocationOnMock -> { checkRunnableIsCalled.countDown(); return null; });  Runnable realRunnable = checkRunnableIsCalled::countDown; Runnable aspectRunnable = AspectRunnableUtil.aspectRunnable(aspect, realRunnable); Assertions."<AssertPlaceHolder>"; aspectRunnable.run();  try { // 等待子线程被调用一次，最多等待5秒 Assertions.assertTrue(checkRunnableIsCalled.await(100, TimeUnit.MILLISECONDS), "Runnable is not called"); } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } }  }
[*] target: assertNotNull(aspectRunnable)
[-] pred: org. junit. Assert. assertNotNull ( aspectRunnable )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); String expected = TypeCodecs.DECIMAL.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: sholudCalculateLengthOfCG() { int expected = 50001033; int actual = Properties.calculateLengthOfCG(dnaString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: assertEquals ( expected, actual )
************************************
[+] input: testNull() { String result = MessageFormatter.format(null, 1).getMessage(); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testGetServiceRoleDeployOverview() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.getServiceRoleDeployOverview(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: 인물_TOP30_조회() { // given var characters = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var character = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build(); characters.add(character); responses.add(new CharacterResponse.CharacterDetailResponse( character, "테스트.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.PERSONA) .imageUrl("테스트.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(characters);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("PERSONA", mockInfo); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test_error11() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("{]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testCountTapEvent2() { List<TapdataEvent> events = new ArrayList<>(); TapdataHeartbeatEvent event = new TapdataHeartbeatEvent(); event.setSourceTime(System.currentTimeMillis()); events.add(event); HandlerUtil.EventTypeRecorder recorder = HandlerUtil.countTapdataEvent(events); Assertions.assertNotNull(recorder); Assertions.assertEquals(0, recorder.getMemorySize()); Assertions.assertEquals(0, recorder.getUpdateTotal()); Assertions.assertEquals(0, recorder.getInsertTotal()); Assertions.assertEquals(0, recorder.getDdlTotal()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, recorder.getTotal())
[-] pred: org. junit. Assert. assertEquals ( 0, recorder. getTotal() )
************************************
[+] input: xssf1() { WorkbookParameter workbookParameter = WorkbookParameter.builder().build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(workbookParameter.isXssf())
[-] pred: org. junit. Assert. assertTrue ( workbookParameter. isXssf() )
************************************
[+] input: validateGivenParametersThatReferenceTheWrongTypeParameters() {  // Note: it is currently impossible for the accumulated type constructor and // the partially accumulated type constructor to mention the first or the second // type parameter. If they do, they accumulated type constructor can never // be assigned to the partially accumulated type constructor.  Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(FUNCTION.with(U, V)), "myFunction", asList( Parameter.of(FUNCTION.with(U, T), "left"), Parameter.of(FUNCTION.with(U, U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid( "The type of the first parameter (java.util.function.Function<U, T>) is not allowed to reference type parameter 'U'", "The return type (java.util.function.Function<U, V>) is not allowed to reference type parameter 'U'" ); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: mixedVarianceConcreteTypeConstructorCanAcceptGivenEquivalentInvariantConcreteTypeConstructor() { ConcreteTypeConstructor target = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), INTEGER_TYPE_CONSTRUCTOR.covariant(), BOOLEAN_TYPE_CONSTRUCTOR.contravariant()); ConcreteTypeConstructor source = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), INTEGER_TYPE_CONSTRUCTOR.invariant(), BOOLEAN_TYPE_CONSTRUCTOR.invariant());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(target.canAccept(source))
[-] pred: org. junit. Assert. assertTrue ( target. canAccept ( source ) )
************************************
[+] input: Exception { String someConfigServiceUrl = " someConfigServiceUrl "; String anotherConfigServiceUrl = " anotherConfigServiceUrl ";  System.setProperty(ApolloClientSystemConsts.DEPRECATED_APOLLO_CONFIG_SERVICE, someConfigServiceUrl + "," + anotherConfigServiceUrl);  ConfigServiceLocator configServiceLocator = new ConfigServiceLocator();  List<ServiceDTO> result = configServiceLocator.getConfigServices();  "<AssertPlaceHolder>";  assertEquals(someConfigServiceUrl.trim(), result.get(0).getHomepageUrl()); assertEquals(anotherConfigServiceUrl.trim(), result.get(1).getHomepageUrl()); }
[*] target: assertEquals(2, result.size())
[-] pred: org. junit. Assert. assertEquals ( 2, result. size ( ) )
************************************
[+] input: ParseException { SchedJob job = new SchedJob(); job.setJobId(idGenerator.generateId()); job.setGroup("default"); job.setJobName(RandomStringUtils.randomAlphanumeric(5)); job.setJobExecutor("cn.ponfee.disjob.test.executor.NoopJobExecutor"); job.setJobState(JobState.DISABLED.value());  job.setJobParam("test"); job.setJobType(JobType.GENERAL.value());  job.setRetryType(RetryType.NONE.value()); job.setRetryCount(0); job.setRetryInterval(0); job.setStartTime(null); job.setEndTime(null); job.setTriggerType(TriggerType.ONCE.value());  String date = "2022-06-17 18:02:00"; job.setTriggerValue(date); job.setNextTriggerTime(JavaUtilDateFormat.DEFAULT.parse(date).getTime()); job.setExecuteTimeout(3600000); job.setMisfireStrategy(MisfireStrategy.LAST.value()); job.setCollidedStrategy(CollidedStrategy.CONCURRENT.value()); job.setRouteStrategy(RouteStrategy.ROUND_ROBIN.value()); job.setRedeployStrategy(RedeployStrategy.RESUME.value()); job.setRemark("test remark"); job.setLastTriggerTime(null); job.setNextTriggerTime(TriggerTimeUtils.computeNextTriggerTime(job, new Date())); job.setUpdatedBy("0"); job.setCreatedBy("0"); job.setUpdatedAt(new Date()); job.setCreatedAt(new Date());  int insert = bean.insert(job); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: testIsUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = true; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getCountries_Pagination_Success() { generateTestData(); int pageNo = 1; int pageSize = 2; CountryListGetVm countryListGetVm = countryService.getPageableCountries(pageNo, pageSize); "<AssertPlaceHolder>"; assertEquals(countryListGetVm.pageNo(), pageNo); assertEquals(countryListGetVm.pageSize(), pageSize); assertTrue(countryListGetVm.isLast()); assertEquals(2, countryListGetVm.totalElements()); assertEquals(1, countryListGetVm.totalPages()); }
[*] target: assertNotNull(countryListGetVm)
[-] pred: org. junit. Assert. assertNotNull ( countryListGetVm )
************************************
[+] input: generateGenericUriWithPublicId() { var publicId = UUID.randomUUID().toString(); var genericUri = WebUtils.getGenericUri(SignUpConstants.SIGN_UP_VERIFY_MAPPING, publicId);  var expected = String.format("%s?%s=%s", SignUpConstants.SIGN_UP_VERIFY_MAPPING, WebUtils.TOKEN, publicId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, genericUri)
[-] pred: org. junit. Assert. assertEquals ( expected, genericUri )
************************************
[+] input: from() { JSONArray array = JSONArray.from(Collections.emptyList(), JSONWriter.Feature.NotWriteEmptyArray); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, array.size())
[-] pred: org. junit. Assert. assertEquals ( 0, array. size ( ) )
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatDoesNotMatchAnyOfTheTypeArguments() { TypeConstructor expected = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), U_TYPE_CONSTRUCTOR.covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()); TypeConstructor toVerify = Type.concrete(ERUDITE, STRING_TYPE.invariant(), U_TYPE.covariant(), INTEGER_TYPE.contravariant()).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: bind_nonCounter_withExtraColumn() { commonSetup(false,false,false); targetColumnNames.add("extraColumn"); targetColumnTypes.add(DataTypes.TEXT); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()-1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: redisMultiKey() { RedisExtractor.RedisMultiKey redisMultiKey = new RedisExtractor.RedisMultiKey(); redisMultiKey.setKey("mock"); redisMultiKey.getKey(); redisMultiKey.setField("mock"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(redisMultiKey.getField())
[-] pred: org. junit. Assert. assertNotNull ( redisMultiKey. getField() )
************************************
[+] input: testSerializeWithHeaders() {  Alert alert = Alert.builder() .content("test") .target("test") .build(); byte[] expectedBytes = ("{"id":null,"target":"test","alertDefineId":null,"priority":0,"content":" + ""test","status":0,"times":null,"firstAlarmTime":null,"lastAlarmTime":null,"triggerTimes" + "":null,"tags":null,"creator":null,"modifier":null,"gmtCreate":null,"gmtUpdate":null}").getBytes();  byte[] bytes = alertSerializer.serialize("alerts", headers, alert);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, bytes)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, bytes )
************************************
[+] input: testQueryStatusPageOrg() {  StatusPageOrg expectedOrg = new StatusPageOrg(); when(statusPageOrgDao.findAll()).thenReturn(List.of(expectedOrg));  StatusPageOrg actualOrg = statusPageService.queryStatusPageOrg();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedOrg, actualOrg)
[-] pred: org. junit. Assert. assertEquals ( expectedOrg, actualOrg )
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NextValidTimeBeforeCurrent() { String cronExpressionString = "0 */10 * * * ?"; // Every 10th minute CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Calendar calendar = Calendar.getInstance(); calendar.set(2022, Calendar.JUNE, 5, 11, 5); // 11:05  Instant now = calendar.getTime().toInstant(); Instant lastTrigger = now.minus(Duration.ofMinutes(10)); // 10:05, should have fired at 11:00  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: validateGivenMethodThatDoesNotReturnAnything() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.empty(), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Method needs to return something"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Long value = 9223372036854775807L; String expected = TypeCodecs.BIGINT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: identifiedEntitiesAreTreatedByTypeCorrectly() { MaskingProviderFactory mockedFactory = mock(MaskingProviderFactory.class); MaskingProvider mockedNameMP = mock(MaskingProvider.class); MaskingProvider mockedAddressMP = mock(MaskingProvider.class); when(mockedFactory.get(ArgumentMatchers.same(ProviderType.NAME), any(MaskingConfiguration.class))).thenReturn(mockedNameMP); when(mockedFactory.get(ArgumentMatchers.same(ProviderType.ADDRESS), any(MaskingConfiguration.class))).thenReturn(mockedAddressMP);  String maskingName = "BAR"; when(mockedNameMP.mask(anyString(), eq("NAME"))).thenReturn(maskingName); String maskingAddressValue = "DUMMY ADDRESS"; when(mockedAddressMP.mask(anyString(), eq("ADDRESS"))).thenReturn(maskingAddressValue);  List<IdentifiedEntity> toMask = Arrays.asList( new IdentifiedEntity("foo", 0, 0, Collections.singleton(nameType), Collections.singleton(PartOfSpeechType.UNKNOWN)), new IdentifiedEntity("foo", 0, 0, Collections.singleton(addressType), Collections.singleton(PartOfSpeechType.UNKNOWN)) );  Map<String, DataMaskingTarget> toBeMasked = new HashMap<>(); toBeMasked.put("NAME", new DataMaskingTarget(ProviderType.NAME, "dummy")); toBeMasked.put("ADDRESS", new DataMaskingTarget(ProviderType.ADDRESS, "dummy"));  DataMaskingOptions dataMaskingOptions = new DataMaskingOptions(DataTypeFormat.PLAIN, DataTypeFormat.PLAIN, toBeMasked, false, null, null); MaskIdentifiedEntities ftMask = new MaskIdentifiedEntities(new ConfigurationManager(), dataMaskingOptions, mockedFactory);  List<IdentifiedEntity> maskedEntities = ftMask.maskEntities(toMask);  "<AssertPlaceHolder>"; assertThat(maskedEntities.size(), is(toMask.size()));  verify(mockedNameMP, times(1)).mask(anyString(), eq("NAME")); verify(mockedAddressMP, times(1)).mask(anyString(), eq("ADDRESS")); }
[*] target: assertNotNull(maskedEntities)
[-] pred: org. junit. Assert. assertNotNull ( maskedEntities )
************************************
[+] input: Exception { ObjectMapper mapper = new ObjectMapper();  for (ProviderType type : ProviderType.publicValues()) { String s = mapper.writeValueAsString(type);  "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: testMultipleRows() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); tablePrinter.addRow("Type2", "Name2", "Status2", "http://url2.com"); tablePrinter.addRow("Type3", "Name3", "Status3", "http://url3.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "| Type2 | Name2 | Status2 | http://url2.com |\n" + "| Type3 | Name3 | Status3 | http://url3.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDao.update(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: test1() { MoneySupport.CLASS_NUMBER_VALUE = null;  String str = "{"currency":"USD","number":200}"; MonetaryAmount amount = JSON.parseObject(str, MonetaryAmount.class); assertEquals("USD", amount.getCurrency().getCurrencyCode());  MoneySupport.CLASS_NUMBER_VALUE = null; MoneySupport.CLASS_CURRENCY_UNIT = null; MoneySupport.CLASS_MONETARY_AMOUNT_FACTORY = null;  Object amount1 = MoneySupport.createMonetaryAmount(amount.getCurrency(), amount.getNumber()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(amount, amount1)
[-] pred: org. junit. Assert. assertEquals ( amount, amount1 )
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButAllElementsAreNullString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); packages.add(null); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Object.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 0, 1); } }
[*] target: assertFalse(byConfig)
[-] pred: org. junit. Assert. assertFalse ( byConfig )
************************************
[+] input: getConfiguration() { InputStream inputStream = TestFileUtils.getInputStream("statics/import/data-title-style-read.xlsx"); WorkbookParameter workbookParameter = WorkbookParameter.builder() .input(inputStream) .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build()) .build(); Configuration configuration = new Configuration();  DefaultWorkbookContext defaultWorkbookContext = new DefaultWorkbookContext(configuration, workbookParameter);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(configuration, defaultWorkbookContext.getConfiguration())
[-] pred: org. junit. Assert. assertEquals ( configuration, defaultWorkbookContext. getConfiguration() )
************************************
[+] input: proxy() { interface InterfaceA {} interface InterfaceB {}  Object proxyObject = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] {InterfaceA.class, InterfaceB.class}, new SerializableInvocationHandler());  byte[] actualData = SerialBuilder.startSerializableObject() .beginDescriptorHierarchy() .proxyDescriptor(InterfaceA.class, InterfaceB.class) .beginDescriptor() .typeWithUid(Proxy.class) .flags(SC_SERIALIZABLE) .beginObjectFieldDescriptors() .objectField("h", InvocationHandler.class) .endObjectFieldDescriptors() .endDescriptor() .endDescriptorHierarchy() .beginSlots() .beginSlot() .beginObjectFields() .beginSerializableObject() .beginDescriptorHierarchy() .beginDescriptor() .type(SerializableInvocationHandler.class) .uid(SerializableInvocationHandler.serialVersionUID) .flags(SC_SERIALIZABLE) .endDescriptor() .endDescriptorHierarchy() .endObject() .endObjectFields() .endSlot() .beginSlot() .endSlot() .endSlots() .endObject();  byte[] expectedData = serialize((Serializable) proxyObject); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedData, actualData)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedData, actualData )
************************************
[+] input: LocationNotFoundException { // Mock data long id = 1L; MonitoringLocationDTO monitoringLocationDTO = MonitoringLocationDTO.newBuilder() .setId(id) .setTenantId(TENANT_ID) .build(); MonitoringLocation monitoringLocation = new MonitoringLocation(); monitoringLocation.setId(id); monitoringLocation.setTenantId(TENANT_ID); when(mapper.dtoToModel(any(MonitoringLocationDTO.class))).thenReturn(monitoringLocation); when(modelRepo.findByIdAndTenantId(id, TENANT_ID)).thenReturn(Optional.of(monitoringLocation)); when(modelRepo.save(monitoringLocation)).thenReturn(monitoringLocation); when(mapper.modelToDTO(any(MonitoringLocation.class))).thenReturn(monitoringLocationDTO);  // Test MonitoringLocationDTO result = monitoringLocationService.upsert(monitoringLocationDTO);  // Assertions "<AssertPlaceHolder>"; verify(mapper, times(1)).dtoToModel(any(MonitoringLocationDTO.class)); verify(modelRepo, times(1)).save(monitoringLocation); verify(mapper, times(1)).modelToDTO(any(MonitoringLocation.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testSaveServiceConfig_ClusterHostServiceReturnsNoItems() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(Collections.emptyList());  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testHashCode() { RemoteStorageInfo info = new RemoteStorageInfo(TEST_PATH, confMap); RemoteStorageInfo info1 = new RemoteStorageInfo(TEST_PATH, CONF_STRING); "<AssertPlaceHolder>"; }
[*] target: assertEquals(info.hashCode(), info1.hashCode())
[-] pred: org. junit. Assert. assertEquals ( info. hashCode(), info1. hashCode() )
************************************
[+] input: testHashCode() { ConcurrentHashSet<String> set1 = new ConcurrentHashSet<>();  ConcurrentHashSet<String> set2 = new ConcurrentHashSet<>();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(set1.hashCode(), set2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( set1. hashCode ( ), set2. hashCode ( ) )
************************************
[+] input: testInsertSql() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "insert into user(name, age, create_time) values(#{name}, #{age}, #{createTime})"); long insert = commonDao.insertSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: requiresPreprocessingAllowDuplicatesTest() { final ColumnSchema columnSchema = GeneralTestUtility.fingerprintColumn("source"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(columnSchema.requiresPreprocessing())
[-] pred: org. junit. Assert. assertTrue ( columnSchema. requiresPreprocessing() )
************************************
[+] input: corretorasPass() { Corretora[] corretoras = BrasilAPI.corretoras(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(corretoras)
[-] pred: org. junit. Assert. assertNotNull ( corretoras )
************************************
[+] input: testNoTocs() { TopicFinder finder = new TopicFinder("http:", new IToc[0], new UniversalScope()); assertEquals(-1, finder.getSelectedToc()); "<AssertPlaceHolder>"; }
[*] target: assertNull(finder.getTopicPath())
[-] pred: org. junit. Assert. assertNull ( finder. getTopicPath() )
************************************
[+] input: testInitSettingService() { ReflectionTestUtils.setField(hazelcastBaseNode, "clientMongoOperator", mockClientMongoOperator); SettingService actual = hazelcastBaseNode.initSettingService(); "<AssertPlaceHolder>"; assertEquals(mockClientMongoOperator, ReflectionTestUtils.getField(actual, "clientMongoOperator")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: testEquals() { WorkspaceMeta w1 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w2 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w3 = new WorkspaceMeta("/nonexist/"); Assertions.assertTrue(w1.equals(w2)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(w1.equals(w3))
[-] pred: org. junit. Assert. assertTrue ( w1. equals ( w3 ) )
************************************
[+] input: shouldSetAndGetScrollOnUserInput() { options.setScrollOnUserInput(false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.isScrollOnUserInput())
[-] pred: org. junit. Assert. assertFalse ( options. isScrollOnUserInput() )
************************************
[+] input: shouldCreateFieldWithLabelValueAndListener() { LocalTime value = LocalTime.of(12, 30); EventListener<ValueChangeEvent<LocalTime>> listener = event -> { }; component = new MaskedTimeFieldSpinner("label", value, listener); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); assertEquals(1, component.getEventListeners(ValueChangeEvent.class).size()); }
[*] target: assertEquals(value, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( value, component. getValue() )
************************************
[+] input: IOException { OkHttpClient client = createHttpClient(Boolean.TRUE, Boolean.TRUE, Integer.valueOf(5)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: 피드백_생성() { FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  var expected = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(feedbackRepository.save(any())) .thenReturn(expected);  Feedback actual = feedbackService.create(request, useerId);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateServiceConfig() { // Setup final ServiceConfig expectedResult = new ServiceConfig(); expectedResult.setName("configName"); expectedResult.setValue("configValue"); expectedResult.setLabel("label"); expectedResult.setDescription("description"); expectedResult.setRequired(false); expectedResult.setType("input"); expectedResult.setConfigurableInWizard(false); expectedResult.setDefaultValue("defaultValue"); expectedResult.setMinValue(0); expectedResult.setMaxValue(0); expectedResult.setUnit("unit"); expectedResult.setHidden(false); expectedResult.setSelectValue(Arrays.asList("value")); expectedResult.setConfigType("configType");  // Run the test final ServiceConfig result = ProcessUtils.createServiceConfig("configName", "configValue", "type");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: shouldFindCreditCardActivityByAmountInterval() {  BigDecimal min = BigDecimal.ONE; BigDecimal max = BigDecimal.valueOf(10000);  List<CrdCreditCardActivity> crdCreditCardActivityList = createDummyCrdCreditCardActivityList();  List<CrdCreditCardActivity> expectedResult = createDummyCrdCreditCardActivityList();  when(crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max)).thenReturn(crdCreditCardActivityList);  List<CrdCreditCardActivity> result = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testGetCallerClassLoader() { ClassLoader classLoader = getCallerClassLoader(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(classLoader)
[-] pred: org. junit. Assert. assertNotNull ( classLoader )
************************************
[+] input: testListServers() { List<Server> servers = serverDAO.listServers(ServerStatusEnum.OK.getStatus()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(servers)
[-] pred: org. junit. Assert. assertNotNull ( servers )
************************************
[+] input: testTypeOfFilter() { Stream.<SerRunn>of( () -> { Opp<String> opp = Opp.of("").typeOfFilter((String str) -> str.trim().isEmpty()); Assertions.assertTrue(opp.isPresent()); }, () -> { Opp<String> opp = Opp.of("").typeOfFilter((String str) -> !str.trim().isEmpty()); Assertions."<AssertPlaceHolder>"; }) .forEach(SerRunn::run); }
[*] target: assertTrue(opp.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( opp. isEmpty ( ) )
************************************
[+] input: getCountry_ExistInDatabase_Success() { generateTestData(); CountryVm countryVm = countryService.findById(country1.getId()); "<AssertPlaceHolder>"; assertEquals("country-1", countryVm.name()); }
[*] target: assertNotNull(countryVm)
[-] pred: org. junit. Assert. assertNotNull ( countryVm )
************************************
[+] input: loadSparkConf_withRequired() { setValidSparkConf(); helper.initializeSparkConf(validSparkConf); "<AssertPlaceHolder>"; }
[*] target: assertTrue(helper.isSparkConfFullyLoaded())
[-] pred: org. junit. Assert. assertTrue ( helper. isSparkConfFullyLoaded() )
************************************
[+] input: Exception { String testDataset = "id,date,location\n" + "x,2020-10-11,loc1\n" + "x,2020-10-11,loc2\n" + "y,2020-10-11,loc2\n" + "z,2020-10-11,loc1\n" + "y,2020-10-11,loc1\n" + "y,2020-10-11,loc3\n" + "y,2020-10-11,loc5\n" + "z,2020-10-11,loc2";  // "id,timestamp,location,amount"  try ( InputStream conf = TransactionUniquenessTaskTest.class.getResourceAsStream("/transaction-uniqueness-ok.json"); InputStream input = new ByteArrayInputStream(testDataset.getBytes()); ByteArrayOutputStream output = new ByteArrayOutputStream() ) {  TransactionUniquenessTask uniqueness = mapper.readValue(conf, TransactionUniquenessTask.class);  uniqueness.processFile(input, output);  System.out.println(output);  TransactionUniquenessReport report = mapper.readValue(output.toString(), TransactionUniquenessReport.class);  "<AssertPlaceHolder>";  assertEquals(report.getTotalIDs(), 3); assertEquals(report.getTotalTransactions(), 8); assertEquals(report.getUniqueTransactions(), 2); assertEquals(report.getUniqueIDs(), 1); } }
[*] target: assertNotNull(report)
[-] pred: org. junit. Assert. assertNotNull ( report )
************************************
[+] input: testGetOutboxAndCheckNullable() { Outbox mockOutbox = mock(Outbox.class); ReflectionTestUtils.setField(hazelcastBaseNode, "outbox", mockOutbox); Outbox actual = hazelcastBaseNode.getOutboxAndCheckNullable(); "<AssertPlaceHolder>"; assertEquals(mockOutbox, actual); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: getResourcesUkIsEn() { Collection<ResourceEntry> resources = manager.getResources(Resource.COUNTRY, Collections.singleton("uk"));  "<AssertPlaceHolder>"; assertThat(resources.size(), is(1));  for (ResourceEntry resourceEntry : resources) assertThat(resourceEntry.getCountryCode(), is("en")); }
[*] target: assertNotNull(resources)
[-] pred: org. junit. Assert. assertNotNull ( resources )
************************************
[+] input: isValidUrl_Null_IsNotValidUrl() { final String candidate = null; final var isValidUrl = subject.isValidUrl(candidate);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValidUrl)
[-] pred: org. junit. Assert. assertFalse ( isValidUrl )
************************************
[+] input: updateUser() { UserAO userAo = new UserAO(); userAo.setUserName("juggle"); userAo.setPassword("juggle"); Mockito.doNothing().when(userRepository).updateUser(userAo); Boolean updateFlag = userService.updateUser(userAo); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true,updateFlag)
[-] pred: org. junit. Assert. assertEquals ( true, updateFlag )
************************************
[+] input: testReturnSubstringWithCodon2() { String expectedResult = this.expectedCodon2; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: getConsumerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCompareCompoundSame() { IndexSee see1 = createSee(SEE_ECLIPSE_SDK); IndexSee see2 = createSee(SEE_ECLIPSE_SDK); assertTrue (see1.equals(see2)); assertEquals(0, see1.compareTo(see2)); assertEquals(0, see2.compareTo(see1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(see1.hashCode(), see2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( see1. hashCode ( ), see2. hashCode ( ) )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButAllNodeAreNull() { when(nodeList.size()).thenReturn(2); when(nodeList.get(0)).thenReturn(null); when(nodeList.get(1)).thenReturn(null); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldDepositValue() { //given BigDecimal valueToDeposit = BigDecimal.TEN; //when bankAccount.toDeposit(valueToDeposit); BigDecimal actual = bankAccount.getBalance(); //then BigDecimal expected = BigDecimal.TEN; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: parseString() { final EditorHelper editorHelper = new EditorHelper(); final String newValue = "test";  final Object result = editorHelper.edit("java.lang.String", newValue); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(newValue, result)
[-] pred: org. junit. Assert. assertEquals ( newValue, result )
************************************
[+] input: testEraseUnknownSession() { var sessions = new MemorySessions(); sessions.setSessionDuration(1200000);  var auth_id = "unknown"; try { "<AssertPlaceHolder>"; } catch (SessionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertFalse(sessions.eraseSession(auth_id))
[-] pred: org. junit. Assert. assertFalse ( sessions. eraseSession ( auth_id ) )
************************************
[+] input: parse_ShouldParseStringToBigDecimalValue() { String stringValue = "12345.6789"; BigDecimal expectedValue = TypeCodecs.DECIMAL.parse(stringValue); BigDecimal result = codec.parse(stringValue); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: testNullList() { final List<Object> list = new ArrayList<>(); list.add(null); String expectedName = "java.util.ArrayList-"; final String actualName = TypeUtil.getName(list); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedName, actualName)
[-] pred: org. junit. Assert. assertEquals ( expectedName, actualName )
************************************
[+] input: Exception { CoordinatorConf ssc = new CoordinatorConf(); ssc.set( CoordinatorConf.COORDINATOR_SELECT_PARTITION_STRATEGY, AbstractAssignmentStrategy.SelectPartitionStrategyName.ROUND); ssc.setInteger(CoordinatorConf.COORDINATOR_SHUFFLE_NODES_MAX, shuffleNodesMax); try (SimpleClusterManager clusterManager = new SimpleClusterManager(ssc, new Configuration())) { BasicAssignmentStrategy strategy = new BasicAssignmentStrategy(clusterManager, ssc);  for (int i = 0; i < 20; ++i) { clusterManager.add( new ServerNode(String.valueOf(i), "127.0.0." + i, 0, 0, 0, 20 - i, 0, tags)); }  PartitionRangeAssignment pra = strategy.assign(100, 10, 2, tags, -1, -1); SortedMap<PartitionRange, List<ServerNode>> assignments = pra.getAssignments(); "<AssertPlaceHolder>";  for (int i = 0; i < 100; i += 10) { assertTrue(assignments.containsKey(new PartitionRange(i, i + 10))); }  int i = 0; Iterator<List<ServerNode>> ite = assignments.values().iterator(); while (ite.hasNext()) { List<ServerNode> cur = ite.next(); assertEquals(2, cur.size()); assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(0).getId()); i++; assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(1).getId()); i++; } } }
[*] target: assertEquals(10, assignments.size())
[-] pred: org. junit. Assert. assertEquals ( 10, assignments. size ( ) )
************************************
[+] input: shouldReturnSalaryWithIncrement() { //given double percentualIncrement = 10; //when BigDecimal actual = this.employee.incremetSalary(percentualIncrement); //then BigDecimal expected = BigDecimal.valueOf(110.0); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testBind() {  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name LIKE '%testBind%'";  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("bind-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testBind"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testBind");  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind"}"));  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: getUriTest() { when(request.url()).thenReturn(HttpUrl.get("http://localhost")); URI actResult = okHttpClientAdapter.getUri(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(actResult)
[-] pred: org. junit. Assert. assertNotNull ( actResult )
************************************
[+] input: validateGivenMethodWithThirdParameterThatIsBiFunctionWithWrongTypeArguments() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(W, W, W), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Expected third argument to be a java.util.function.BiFunction<? super T, ? super U, ? extends V> but was java.util.function.BiFunction<W, W, W>"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: canAddKnight() { ChessBoard board = new ChessBoard(); Knight knight = new Knight(BLACK);  board.add(knight, "c1");  Knight foundKnight = (Knight) board.getPieceAtCoords("c1"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(knight, foundKnight)
[-] pred: org. junit. Assert. assertEquals ( knight, foundKnight )
************************************
[+] input: test_isDass() { when(settingsService.isCloud()).thenReturn(false); ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: ncmSearchPass() { NCM[] ncmSearch = BrasilAPI.ncmSearch("Animais vivos."); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ncmSearch)
[-] pred: org. junit. Assert. assertNotNull ( ncmSearch )
************************************
[+] input: IOException {  String mockData = "some metric data"; InputStream inputStream = new ByteArrayInputStream(mockData.getBytes()); List<Metric> mockMetrics = Collections.singletonList(new Metric());  prometheusUtilMock.when( () -> PrometheusUtil.parseMetrics(any(InputStream.class)) ).thenReturn(mockMetrics);  boolean result = pushGatewayService.pushMetricsData(inputStream);  "<AssertPlaceHolder>"; prometheusUtilMock.verify( () -> PrometheusUtil.parseMetrics(any(InputStream.class)), times(1) ); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testRemove() { future.addWaiter(f1); future.addWaiter(f2); future.addWaiter(f3); future.addWaiter(f4); future.removeWaiter(f2);//mid future.removeWaiter(f1);//head future.removeWaiter(f4);//tail future.removeWaiter(f3);//last one Assertions.assertNull(future.popHeadWaiter()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(future.popTailWaiter())
[-] pred: org. junit. Assert. assertNull ( future. popTailWaiter() )
************************************
[+] input: testDelete() { int delete = commonDaoWrap.delete(1L, User.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: attemptTaskIdTest() { String tezTaskAttemptId = "attempt_1677051234358_0091_1_00_000000_0"; TezTaskAttemptID originalTezTaskAttemptID = TezTaskAttemptID.fromString(tezTaskAttemptId); String uniqueIdentifier = String.format("%s_%05d", tezTaskAttemptId, 3); String uniqueIdentifierToAttemptId = RssTezUtils.uniqueIdentifierToAttemptId(uniqueIdentifier); "<AssertPlaceHolder>"; TezTaskAttemptID tezTaskAttemptID = TezTaskAttemptID.fromString(uniqueIdentifierToAttemptId); assertEquals(originalTezTaskAttemptID, tezTaskAttemptID); }
[*] target: assertEquals(tezTaskAttemptId, uniqueIdentifierToAttemptId)
[-] pred: org. junit. Assert. assertEquals ( tezTaskAttemptId, uniqueIdentifierToAttemptId )
************************************
[+] input: taxasPass() { Taxa[] taxas = BrasilAPI.taxas(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(taxas)
[-] pred: org. junit. Assert. assertNotNull ( taxas )
************************************
[+] input: Exception { String clientId = "22334455"; String clientSecret = "998877665544"; String cloudApiBaseUrl = "https://xray.cloud.getxray.app/api/v2"; String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; String expectedToken = "00000000000000000000000000111111111111111111111111222222222222222222222223333333333333";  Log log = Mockito.mock(Log.class); OkHttpClient client = Mockito.mock(OkHttpClient.class); Builder responseBuilder = new Response.Builder(); responseBuilder.protocol(okhttp3.Protocol.HTTP_1_1); responseBuilder.request(new Request.Builder().url(cloudApiBaseUrl + "/authenticate").build()); responseBuilder.code(200); responseBuilder.message("OK"); responseBuilder.header("Content-Type", "application/json"); responseBuilder.body(okhttp3.ResponseBody.create("""+expectedToken+""", okhttp3.MediaType.parse("application/json"))); Response response = responseBuilder.build();  final Call remoteCall = Mockito.mock(Call.class); when(remoteCall.execute()).thenReturn(response); when(client.newCall(any())).thenReturn(remoteCall);  // OkHttpClient client2 = mockHttpClient("""+expectedToken+"""); String authToken = CommonCloud.authenticateXrayAPIKeyCredentials(log, true, client, clientId, clientSecret, cloudApiBaseUrl); "<AssertPlaceHolder>";  ArgumentCaptor<Request> req = ArgumentCaptor.forClass(Request.class); verify(client).newCall(req.capture()); assertEquals(cloudApiBaseUrl + "/authenticate", req.getValue().url().toString()); assertEquals("POST", req.getValue().method()); assertEquals("application/json; charset=utf-8", req.getValue().body().contentType().toString()); final Buffer buffer = new Buffer(); req.getValue().body().writeTo(buffer); assertEquals(authenticationPayload,  buffer.readUtf8()); }
[*] target: assertEquals(expectedToken, authToken)
[-] pred: org. junit. Assert. assertEquals ( expectedToken, authToken )
************************************
[+] input: testLibWithNatives() { val libs = parse(getJsonObject("lib_natives.json")); "<AssertPlaceHolder>"; assertFalse(libs.get(0).isNativeLibrary()); assertTrue(libs.get(1).isNativeLibrary()); }
[*] target: assertEquals(2, libs.size())
[-] pred: org. junit. Assert. assertEquals ( 2, libs. size ( ) )
************************************
[+] input: IOException { BilibiliResponse<UserNav> response = client.nav(); Assertions."<AssertPlaceHolder>"; logger.info(response.getMessage()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: setProperty_Number() { Integer value = 1234; Integer setValue = (Integer) helper.setProperty(KnownProperties.TEST_NUMBER, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: testCityNeighbors() { CityManager manager = CityManager.getInstance(); System.out.println("++++ " + manager.getClosestCity("Boston", 1)); List<String> expected = Arrays.asList("Boston", "South Boston", "Worcester", "Providence", "Springfield"); List<String> found = manager.getKey("Boston").getNeighbors().stream().limit(5).map(City::getName).collect(Collectors.toList()); System.out.println("++++ Found: " + found); System.out.println("++++ Expected: " + expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, found)
[-] pred: org. junit. Assert. assertEquals ( expected, found )
************************************
[+] input: testIsOfThisType() { SSNUKIdentifier identifier = new SSNUKIdentifier();  String ssn = "AB123456C"; assertTrue(identifier.isOfThisType(ssn));  //ignores spaces ssn = "AB 12 34 56 C"; assertTrue(identifier.isOfThisType(ssn));  //check for not allowed characters ssn = "DB123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AD123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AO123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA12A456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA1234567"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA123456Z"; assertFalse(identifier.isOfThisType(ssn));  //'O' is allowed on the first character ssn = "OA123456C"; "<AssertPlaceHolder>"; }
[*] target: assertTrue(identifier.isOfThisType(ssn))
[-] pred: org. junit. Assert. assertTrue ( identifier. isOfThisType ( ssn ) )
************************************
[+] input: ParseException { SchedJob job = new SchedJob(); job.setJobId(idGenerator.generateId()); job.setGroup("default"); job.setJobName(RandomStringUtils.randomAlphanumeric(5)); job.setJobExecutor("cn.ponfee.disjob.test.executor.NoopJobExecutor"); job.setJobState(JobState.DISABLED.value());  job.setJobParam(""); job.setJobType(JobType.GENERAL.value());  job.setRetryType(RetryType.NONE.value()); job.setRetryCount(0); job.setRetryInterval(0); job.setStartTime(null); job.setEndTime(null); job.setTriggerType(TriggerType.ONCE.value());  String date = "2022-06-16 11:37:00"; job.setTriggerValue(date); job.setNextTriggerTime(JavaUtilDateFormat.DEFAULT.parse(date).getTime()); job.setExecuteTimeout(3600000); job.setMisfireStrategy(MisfireStrategy.LAST.value()); job.setCollidedStrategy(CollidedStrategy.CONCURRENT.value()); job.setRouteStrategy(RouteStrategy.ROUND_ROBIN.value()); job.setRedeployStrategy(RedeployStrategy.RESUME.value()); job.setRemark("test remark"); job.setLastTriggerTime(null); job.setNextTriggerTime(TriggerTimeUtils.computeNextTriggerTime(job, new Date())); job.setUpdatedBy("0"); job.setCreatedBy("0"); job.setUpdatedAt(new Date()); job.setCreatedAt(new Date());  int insert = bean.insert(job); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyTwoFrame1Test() { int[] expectedResult = {0, 3, 6, 9, 12, 15, 18}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_TWO; CodonFrame temp = new CodonFrame(testSequence, (short) 1, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: test_getJSONArray2() { JSONObject object = new JSONObject().fluentPut("values", new ArrayList<>()); JSONArray array = object.getJSONArray("values"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, array.size())
[-] pred: org. junit. Assert. assertEquals ( 0, array. size ( ) )
************************************
[+] input: testSelectCount() { User user = new User(); user.setAge(18); long count = commonDao.selectCount(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, count)
[-] pred: org. junit. Assert. assertEquals ( 2, count )
************************************
[+] input: test_isDass() { when(settingsService.isCloud()).thenReturn(false); ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testBasicForeach() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("foreach-basic-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testForeach"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testForeach");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (name = 'Jonathan')";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan", "Mcintosh"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (\n" + "    name = 'Jonathan'\n" + "    OR name = 'Fuji'\n" + "  )";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan","Mcintosh", "Fuji"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND ()";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Mcintosh"]}")); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: SQLException { final List<HostSpec> expectedMySQL = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("mysql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); final List<HostSpec> expectedPostgres = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("postgresql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getBoolean(eq(2))).thenReturn(true); when(mockResultSet.getString(eq(1))).thenReturn("mysql");   rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "mysql://url/");  List<HostSpec> hosts = rdsHostListProvider.queryForTopology(mockConnection); assertEquals(expectedMySQL, hosts);  when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getString(eq(1))).thenReturn("postgresql");  rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "postgresql://url/"); hosts = rdsHostListProvider.queryForTopology(mockConnection); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPostgres, hosts)
[-] pred: org. junit. Assert. assertEquals ( expectedPostgres, hosts )
************************************
[+] input: testNeedSkipNormalNullFile() { boolean needSkip = utils.needSkip(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(needSkip)
[-] pred: org. junit. Assert. assertTrue ( needSkip )
************************************
[+] input: abort() { ResponseFutureWrapper responseFutureWrapper = new ResponseFutureWrapper("Test"); responseFutureWrapper.abort(new Throwable()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(responseFutureWrapper.isDone())
[-] pred: org. junit. Assert. assertTrue ( responseFutureWrapper. isDone() )
************************************
[+] input: testCollectSyncJobData() {  Job job = mock(Job.class); List<CollectRep.MetricsData> metricsDataList = List.of(CollectRep.MetricsData.newBuilder().build()); CountDownLatch latch = new CountDownLatch(1);  doAnswer(invocation -> { CollectResponseEventListener listener = invocation.getArgument(1); listener.response(metricsDataList); latch.countDown(); return null; }).when(timerDispatch).addJob(any(Job.class), any(CollectResponseEventListener.class));  List<CollectRep.MetricsData> result = collectJobService.collectSyncJobData(job);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(metricsDataList, result)
[-] pred: org. junit. Assert. assertEquals ( metricsDataList, result )
************************************
[+] input: serviceWithInit_Inspect_ReturnNull() { PerformanceInspectionResult inspectionResult = PerformanceInspectionService.getInstance() .inspect(PerformanceInspection.createAndroidBatteryInfoInspection( "appId", "deviceIdentifier", "custom description")); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(inspectionResult)
[-] pred: org. junit. Assert. assertNull ( inspectionResult )
************************************
[+] input: deleteEmployee() { Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeRepositoryService.createEmployee(employee);  employeeRepositoryService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeRepositoryService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
[+] input: 종목토론방_댓글_생성하기() { // given Discussion expected = Discussion.builder() .userId(MEMBER_ID) .webtoonId(WEBTOON_ID) .content(CONTENT) .build();  Mockito.when(discussionRepository.save(any())) .thenReturn(expected);  // when var actual = discussionService.save(MEMBER_ID, WEBTOON_ID, CONTENT);  // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(COMPARATOR.with(T), "left"), Parameter.of(COMPARATOR.with(U), "right"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new ContravariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), COMPARATOR.with(T), COMPARATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: 카트라인_결제금액_있을때_결제필요_여부_조회() { // given Money won2000 = Money.wons(2000L); given(cartOptionAnswer.getAdditionalPrice()).willReturn(won2000); // when Boolean needPaid = hasPriceCartLineItem.isNeedPaid(); // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPaid)
[-] pred: org. junit. Assert. assertTrue ( needPaid )
************************************
[+] input: testCloseWebHookByHookIds() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.close(ids, user)).thenReturn(mock); when(webHookController.closeWebHookByHookIds(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.closeWebHookByHookIds(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).close(ids, user); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: test12() { QueryOperator queryOperator = new QueryOperator(); queryOperator.setForm(TapTimeForm.CURRENT); List<String> result = TimeTransFormationUtil.calculatedTimeRange(currentDateTime,queryOperator,8L); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: next_() { char ch = '®'; String str = "®" + ch; byte[] utf8 = str.getBytes(StandardCharsets.UTF_8); byte[] latin1 = str.getBytes(StandardCharsets.ISO_8859_1); { JSONReader reader = JSONReader.of(str); assertEquals(ch, reader.current()); reader.next(); assertEquals(ch, reader.current()); } { JSONReader reader = JSONReader.of(str.toCharArray()); assertEquals(ch, reader.current()); reader.next(); assertEquals(ch, reader.current()); } { JSONReader reader = JSONReader.of(utf8); assertEquals(ch, reader.current()); reader.next(); assertEquals(ch, reader.current()); } { JSONReader reader = JSONReader.of(latin1, 0, latin1.length, StandardCharsets.ISO_8859_1); assertEquals(ch, reader.current()); reader.next(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(ch, reader.current())
[-] pred: org. junit. Assert. assertEquals ( ch, reader. current() )
************************************
[+] input: ibgeMunicipiosPass() { IBGEMunicipio[] ibgeMunicipios1 = BrasilAPI.ibgeMunicipios("SE"); IBGEMunicipio[] ibgeMunicipios2 = BrasilAPI.ibgeMunicipios("SE", new String[] { "dados-abertos-br" }); "<AssertPlaceHolder>"; assertNotNull(ibgeMunicipios2); }
[*] target: assertNotNull(ibgeMunicipios1)
[-] pred: org. junit. Assert. assertNotNull ( ibgeMunicipios1 )
************************************
[+] input: validateGivenOuterClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(A, B))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: getStateOrProvincePagination_Success() { generateTestData(); int pageNo = 0; int pageSize = 2; StateOrProvinceListGetVm stateOrProvinceListGetVm = stateOrProvinceService.getPageableStateOrProvinces(pageNo, pageSize, country.getId()); "<AssertPlaceHolder>"; assertEquals(stateOrProvinceListGetVm.pageNo(), pageNo); assertEquals(stateOrProvinceListGetVm.pageSize(), pageSize); assertEquals(2, stateOrProvinceListGetVm.stateOrProvinceContent().size()); }
[*] target: assertNotNull(stateOrProvinceListGetVm)
[-] pred: org. junit. Assert. assertNotNull ( stateOrProvinceListGetVm )
************************************
[+] input: execute() { Executor executor = DirectExecutor.INSTANCE; final boolean[] ran = {false}; executor.execute(() -> ran[0] = true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ran[0])
[-] pred: org. junit. Assert. assertTrue ( ran[0] )
************************************
[+] input: testZipOrSelf() { Stream.<SerRunn>of( () -> { String compose = Opp.ofStr("Vampire").zipOrSelf(Opp.of("Achao"), String::concat).get(); Assertions.assertEquals("VampireAchao", compose); }, () -> { String compose = Opp.ofStr("Vampire").zipOrSelf(Opp.empty(), String::concat).get(); Assertions.assertEquals("Vampire", compose); }, () -> { String compose = Opp.ofStr("").zipOrSelf(Opp.empty(), String::concat).get(); Assertions."<AssertPlaceHolder>"; }) .forEach(SerRunn::run); }
[*] target: assertNull(compose)
[-] pred: org. junit. Assert. assertNull ( compose )
************************************
[+] input: testLong() { Date now = new Date(); TapInsertRecordEvent insertRecordEvent = TapInsertRecordEvent.create().init() .after(new Document("id",1).append("ts", now.getTime())); Long aLong = CdcDelay.parseTs(insertRecordEvent); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now.getTime(), aLong); }
[*] target: assertNotNull(aLong)
[-] pred: org. junit. Assert. assertNotNull ( aLong )
************************************
[+] input: shouldReturnInvoiceAmount() { //given //when BigDecimal actual = this.invoice.getInvoiceAmount(); //then BigDecimal expected = BigDecimal.valueOf(30); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final PatchHelper patchHelper = new PatchHelper();  final File jarFile = JarTestHelper.buildJar(Startup.class); final AtomicInteger patchedClasses = new AtomicInteger();  Mockito.when(clientHandler.replaceClass(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())) .thenReturn(PatchResult.builder().success(true).build());  final boolean success = patchHelper.patch(jarFile, JVM, clientHandler, null, patchedClasses::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, patchedClasses.get());  Mockito.verify(clientHandler, Mockito.times(patchedClasses.get())) .replaceClass(ArgumentMatchers.eq(JVM), ArgumentMatchers.any(), ArgumentMatchers.any()); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: Exception { var collector = new RestApiMetricsCollector<JobID, JobAutoScalerContext<JobID>>();  JobVertexID jobVertexID = new JobVertexID(); var flinkMetrics = Map.of( "a.pendingRecords", FlinkMetric.PENDING_RECORDS, "b.pendingRecords", FlinkMetric.PENDING_RECORDS); var metrics = Map.of(jobVertexID, flinkMetrics);  var aggregatedMetricsResponse = List.of( new AggregatedMetric( "a.pendingRecords", Double.NaN, Double.NaN, Double.NaN, 100.), new AggregatedMetric( "b.pendingRecords", Double.NaN, Double.NaN, Double.NaN, 100.), new AggregatedMetric( "c.unrelated", Double.NaN, Double.NaN, Double.NaN, 100.));  var conf = new Configuration(); var restClusterClient = new RestClusterClient<>( conf, "test-cluster", (c, e) -> new StandaloneClientHAServices("localhost")) { @Override public < M extends MessageHeaders<R, P, U>, U extends MessageParameters, R extends RequestBody, P extends ResponseBody> CompletableFuture<P> sendRequest( M messageHeaders, U messageParameters, R request) { if (messageHeaders instanceof AggregatedSubtaskMetricsHeaders) { return (CompletableFuture<P>) CompletableFuture.completedFuture( new AggregatedMetricsResponseBody( aggregatedMetricsResponse)); } return (CompletableFuture<P>) CompletableFuture.completedFuture(EmptyResponseBody.getInstance()); } };  JobID jobID = new JobID(); var context = new JobAutoScalerContext<>( jobID, jobID, JobStatus.RUNNING, conf, new UnregisteredMetricsGroup(), () -> restClusterClient);  var jobVertexIDMapMap = collector.queryAllAggregatedMetrics(context, metrics);  "<AssertPlaceHolder>"; Map<FlinkMetric, AggregatedMetric> vertexMetrics = jobVertexIDMapMap.get(jobVertexID); Assertions.assertNotNull(vertexMetrics); AggregatedMetric pendingRecordsMetric = vertexMetrics.get(FlinkMetric.PENDING_RECORDS); Assertions.assertNotNull(pendingRecordsMetric); assertEquals(pendingRecordsMetric.getSum(), 200); }
[*] target: assertEquals(1, jobVertexIDMapMap.size())
[-] pred: org. junit. Assert. assertEquals ( 1, jobVertexIDMapMap. size ( ) )
************************************
[+] input: testCountTapDataEventOfNotTapDataHeartbeatEvent() { List<TapdataEvent> events = new ArrayList<>(); TapdataShareLogEvent event = new TapdataShareLogEvent(); Long time = System.currentTimeMillis() - 5; event.setSourceTime(time); events.add(event); HandlerUtil.EventTypeRecorder recorder = HandlerUtil.countTapdataEvent(events); Assertions.assertNotNull(recorder); Assertions.assertEquals(0, recorder.getMemorySize()); Assertions.assertEquals(0, recorder.getUpdateTotal()); Assertions.assertEquals(0, recorder.getInsertTotal()); Assertions.assertEquals(0, recorder.getDdlTotal()); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(recorder.getReplicateLagTotal()); }
[*] target: assertEquals(0, recorder.getTotal())
[-] pred: org. junit. Assert. assertEquals ( 0, recorder. getTotal() )
************************************
[+] input: shouldSetAndGetCursorBlink() { options.setCursorBlink(false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.isCursorBlink())
[-] pred: org. junit. Assert. assertFalse ( options. isCursorBlink() )
************************************
[+] input: testOlderDataIndex() { WorkflowDef def = new WorkflowDef(); def.setName("pending_count_correlation_jtest");  WorkflowModel workflow = createTestWorkflow(); workflow.setWorkflowDefinition(def); workflow.setWorkflowId(UUID.randomUUID().toString());  archiveDAO.createOrUpdateWorkflow(workflow); WorkflowModel found = archiveDAO.getWorkflow(workflow.getWorkflowId(), false); "<AssertPlaceHolder>"; assertEquals(workflow.getWorkflowId(), found.getWorkflowId()); }
[*] target: assertNotNull(found)
[-] pred: org. junit. Assert. assertNotNull ( found )
************************************
[+] input: testSkipNotManualCreateSourceInField() { when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: IOException {  String input = ""; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertTrue(metrics.isEmpty()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: testReturnSubstringWithCodon4() { String expectedResult = this.expectedCodon4; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon4); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testPositiveResolutionByCweId() { Cwe cwe = CweResolver.getInstance().resolve("CWE-79"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(79, cwe.getCweId()); }
[*] target: assertNotNull(cwe)
[-] pred: org. junit. Assert. assertNotNull ( cwe )
************************************
[+] input: covariantConcreteTypeConstructorCanAcceptGivenEquivalentCovariantConcreteTypeConstructor() { ConcreteTypeConstructor target = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.covariant()); ConcreteTypeConstructor source = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.covariant());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(target.canAccept(source))
[-] pred: org. junit. Assert. assertTrue ( target. canAccept ( source ) )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double expected = TypeCodecs.DOUBLE.parse(valueAsString); Double result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: givenAbstractMethodWithReturnType() { List<String> toVerify = method() .withModifiers(PUBLIC, ABSTRACT) .withTypeParameters(T.extending(OBJECT), U.asTypeParameter()) .withReturnType(OPTIONAL.with(U)) .withName("map") .withParameter(OPTIONAL.with(T), "optional") .withParameter(FUNCTION.with(T, U), "fn") .lines();  List<String> expected = singletonList( "public abstract <T, U> java.util.Optional<U> map(java.util.Optional<T> optional, java.util.function.Function<T, U> fn);" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: noneBelow() { set.set(1); final int ret = set.previousClearBit(1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, ret)
[-] pred: org. junit. Assert. assertEquals ( 0, ret )
************************************
[+] input: testGetTaskDtoIsomorphismEmptyNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: testReconstructsDictionaryWithValueInsertedWithDelete() { String term = "foo";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.DELETE), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); }
[*] target: assertEquals(1, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dictionaryEntries. size ( ) )
************************************
[+] input: mappedSchemaRequiresPreprocessingTest() { final var tableSchema = mock(TableSchema.class); doCallRealMethod().when(tableSchema).requiresPreprocessing();  final List<ColumnSchema> noPreProcessingSchemas = List.of(GeneralTestUtility.cleartextColumn("u1")); when(tableSchema.getColumns()).thenReturn(noPreProcessingSchemas); assertFalse(tableSchema.requiresPreprocessing());  final List<ColumnSchema> sealedRequiresPreProcessing = List.of(GeneralTestUtility.sealedColumn("s1"), GeneralTestUtility.sealedColumn("s2", "t2", PadType.FIXED, 50)); when(tableSchema.getColumns()).thenReturn(sealedRequiresPreProcessing); assertTrue(tableSchema.requiresPreprocessing());  final List<ColumnSchema> fingerprintRequiresPreProcessing = List.of(GeneralTestUtility.fingerprintColumn("j1")); when(tableSchema.getColumns()).thenReturn(fingerprintRequiresPreProcessing); "<AssertPlaceHolder>"; }
[*] target: assertTrue(tableSchema.requiresPreprocessing())
[-] pred: org. junit. Assert. assertTrue ( tableSchema. requiresPreprocessing() )
************************************
[+] input: testSize() { map.put(0, 100); map.put(1, 200); map.put(2, 300);  assertEquals(3, map.size()); map.remove(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size() )
************************************
[+] input: testNull() { Long l = HashUtils.longFromHash(null); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(l)
[-] pred: org. junit. Assert. assertNotNull ( l )
************************************
[+] input: testLookup() { MethodHandles.Lookup lookup = lookup(String.class); MethodHandles.Lookup lookup2 = lookup(String.class); "<AssertPlaceHolder>"; }
[*] target: assertSame(lookup, lookup2)
[-] pred: org. junit. Assert. assertSame ( lookup, lookup2 )
************************************
[+] input: testCheckWhenIsSameDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: test_getLastCheckAvailableAgentCount() { try(MockedStatic<SettingUtil> mockedStatic = mockStatic(SettingUtil.class)){ mockedStatic.when(()->SettingUtil.getValue(anyString(),anyString())).thenReturn("300"); Long except = 100L; when(workerRepository.count(any(Query.class))).thenReturn(except); Long result = workerService.getLastCheckAvailableAgentCount(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: bind_withTTLAndWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetInsertStatement = new TargetInsertStatement(propertyHelper, targetSession);  BoundStatement result = targetInsertStatement.bind(originRow, targetRow, 3600,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+2)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: givenConcreteMethodWithTwoLineBody() { List<String> toVerify = method() .withModifiers(PUBLIC) .withReturnType(STRING) .withName("toString") .withBody("String result = "Helpful description";") .withReturnStatement("result") .lines();  List<String> expected = asList( "public java.lang.String toString() {", "    String result = "Helpful description";", "    return result;", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testNoInitialUsers() { var users = new MemoryUsers();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: LocationNotFoundException { MonitoringLocationCreateDTO request = MonitoringLocationCreateDTO.newBuilder().build(); MonitoringLocationDTO expectedLocation = MonitoringLocationDTO.newBuilder().build(); when(tenantLookup.lookupTenantId(any())).thenReturn(Optional.of(TENANT_ID)); when(service.upsert(any())).thenReturn(expectedLocation);  grpcService.createLocation(request, getResponseObserver);  verify(getResponseObserver).onNext(getResponseCaptor.capture()); verify(getResponseObserver).onCompleted(); MonitoringLocationDTO response = getResponseCaptor.getValue(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLocation, response)
[-] pred: org. junit. Assert. assertEquals ( expectedLocation, response )
************************************
[+] input: shouldTriggerAutomaticSnapshot_InvalidExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "-1", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testInsert1() { SchedJob job = new SchedJob(); job.setJobId(idGenerator.generateId()); job.setGroup("default"); job.setJobName("test"); job.setJobExecutor("cn.ponfee.disjob.test.executor.NoopJobExecutor"); job.setJobState(JobState.DISABLED.value()); job.setJobType(JobType.GENERAL.value()); job.setJobParam("test param"); job.setRetryType(RetryType.NONE.value()); job.setRetryCount(0); job.setRetryInterval(0); job.setStartTime(null); job.setEndTime(null); job.setTriggerType(TriggerType.CRON.value()); job.setTriggerValue("0/10 * * * * ?"); job.setExecuteTimeout(3600000); job.setCollidedStrategy(CollidedStrategy.CONCURRENT.value()); job.setMisfireStrategy(MisfireStrategy.DISCARD.value()); job.setRouteStrategy(RouteStrategy.ROUND_ROBIN.value()); job.setRedeployStrategy(RedeployStrategy.RESUME.value()); job.setRemark("test remark"); job.setLastTriggerTime(null); job.setNextTriggerTime(TriggerTimeUtils.computeNextTriggerTime(job, new Date())); job.setUpdatedBy("0"); job.setCreatedBy("0"); job.setUpdatedAt(new Date()); job.setCreatedAt(new Date());  int insert = bean.insert(job); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
[+] input: testGetProperties() { Properties properties = ConfigLoader.getProperties(); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(properties.getProperty("openjob.worker.test"), "test"); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: setProperty_NumberList() { List<Integer> value = Arrays.asList(1,2,3,4); List<Integer> setValue = (List<Integer>) helper.setProperty(KnownProperties.TEST_NUMBER_LIST, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: IOException {  String mockData = "some metric data"; InputStream inputStream = new ByteArrayInputStream(mockData.getBytes());  prometheusUtilMock.when(() -> PrometheusUtil.parseMetrics(any(InputStream.class))).thenReturn(null);  boolean result = pushGatewayService.pushMetricsData(inputStream);  "<AssertPlaceHolder>"; prometheusUtilMock.verify( () -> PrometheusUtil.parseMetrics(any(InputStream.class)), times(1) ); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testSaveServiceConfig() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false);  // Configure ClusterHostService.list(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(clusterHostEntities);  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: shouldSetGetMinLength() { int expectedMaxLength = 10; assertSame(component, component.setMinLength(expectedMaxLength)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMaxLength, component.getMinLength())
[-] pred: org. junit. Assert. assertEquals ( expectedMaxLength, component. getMinLength() )
************************************
[+] input: bind_explodeMap_withStandardInput() { commonSetup(true,false,false); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession); BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,getSampleData(explodeMapKeyType),getSampleData(explodeMapValueType)); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: castToJavaBean() { Map map = new HashMap<>(); map.put("className", Bean.class.getName()); map.put("methodName", "m"); StackTraceElement element = TypeUtils.castToJavaBean(map, StackTraceElement.class, ParserConfig.global); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(element)
[-] pred: org. junit. Assert. assertNotNull ( element )
************************************
[+] input: BBjException { String script = "console.log('script')"; PendingResult<Object> operation = page.executeJsAsync(script);  "<AssertPlaceHolder>"; assertFalse(operation.isDone());  AtomicReference<String> resultRef = new AtomicReference<>(); operation.complete("Executed: " + script); operation.thenAccept(result -> resultRef.set((String) result));  assertEquals("Executed: " + script, resultRef.get()); assertTrue(operation.isDone());  verify(webManager).executeAsyncScript(script, true, true); }
[*] target: assertNotNull(operation)
[-] pred: org. junit. Assert. assertNotNull ( operation )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { UserId id1 = new UserId("bob@example.com");  assertTrue(id1.equals(id1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id1))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id1 ) )
************************************
[+] input: testGetIpRegionWithEmpty() { IpRegion ipRegion = IpRegionUtil.getIpRegion("");  Assertions."<AssertPlaceHolder>"; Assertions.assertNull(ipRegion.getCountry()); Assertions.assertEquals("未知 未知", ipRegion.briefLocation()); }
[*] target: assertNotNull(ipRegion)
[-] pred: org. junit. Assert. assertNotNull ( ipRegion )
************************************
[+] input: placeholder() { PlaceholderTypeConstructor expected = new PlaceholderTypeConstructor(); PlaceholderTypeConstructor toVerify = TypeConstructor.placeholder();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testToCollection() { HashSet<Integer> list = Steam.of(1, 2, 3, 4, 5).parallel().collect(Collective.toCollection(HashSet::new)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(5, list.size())
[-] pred: org. junit. Assert. assertEquals ( 5, list. size() )
************************************
[+] input: testTransformFromTapValueNullTapEvent() { TapdataEvent tapdataEvent = new TapdataEvent(); HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testCheckWhenSameUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: GettingAMissingValueShouldReturnNull() { ImmutableStructure structure = new ImmutableStructure(); Object value = structure.getValue("missing"); "<AssertPlaceHolder>"; }
[*] target: assertNull(value)
[-] pred: org. junit. Assert. assertNull ( value )
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteStart() { String input = ""/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: combineAndLift() { UnaryOperator<Move> transformMove = UnaryOperators.instance().lift(Move::new).apply( cost -> cost.stream().flatMap(energyType -> Stream.of(energyType, energyType)).collect(toList()), name -> name + "!", damage -> damage * 2 );  UnaryOperator<PokemonCard> transformPokemonCard = UnaryOperators.instance().combine( name -> name.toUpperCase(), level -> level + 1, ignored -> COLORLESS, moves -> moves.stream().map(transformMove).collect(toList()), PokemonCard::new );  PokemonCard toTransform = PokemonCard.of( "Bulbasaur", 70, GRASS, asList( Move.of( asList(COLORLESS, GRASS), "Razor Leaf", 30 ) ) );  PokemonCard expected = PokemonCard.of( "BULBASAUR", 71, COLORLESS, asList( Move.of( asList(COLORLESS, COLORLESS, GRASS, GRASS), "Razor Leaf!", 60 ) ) );  PokemonCard toVerify = transformPokemonCard.apply(toTransform);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatMatches() { TypeConstructor expected = new PlaceholderTypeConstructor(); TypeConstructor toVerify = new GenericType(T).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testAListSizeLessThanAbListSize() { List<String> mockA = mock(List.class); when(mockA.size()).thenReturn(1); List<String> mockB = mock(List.class); when(mockB.size()).thenReturn(2); when(b.getAgentIds()).thenReturn(mockB); when(a.getAgentIds()).thenReturn(mockA); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: MalformedURLException { ClassLoader classLoader = ClassLoader.getSystemClassLoader(); URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String expectedPath = "javax/annotation/Nonnull.class"; String relativePath = resolveArchiveEntryPath(resourceURL); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/1/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(1)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: testInitLocalStorageManager() { String[] storagePaths = {"/tmp/rssdata", "/tmp/rssdata2"};  ShuffleServerConf conf = new ShuffleServerConf(); conf.set(ShuffleServerConf.RSS_STORAGE_BASE_PATH, Arrays.asList(storagePaths)); conf.setLong(ShuffleServerConf.DISK_CAPACITY, 1024L); conf.setString( ShuffleServerConf.RSS_STORAGE_TYPE.key(), org.apache.uniffle.storage.util.StorageType.LOCALFILE.name()); LocalStorageManager localStorageManager = new LocalStorageManager(conf);  List<LocalStorage> storages = localStorageManager.getStorages(); "<AssertPlaceHolder>"; assertEquals(storages.size(), storagePaths.length); for (int i = 0; i < storagePaths.length; i++) { assertEquals(storagePaths[i], storages.get(i).getBasePath()); } }
[*] target: assertNotNull(storages)
[-] pred: org. junit. Assert. assertNotNull ( storages )
************************************
[+] input: shouldAddKeyListener() { component.onKey(event -> { });  List<EventListener<TerminalKeyEvent>> listeners = component.getEventListeners(TerminalKeyEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalKeyEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testStripQuotesNoQuotes() { String input = "/home/user/file.txt"; Path expected = Paths.get(input); Path result = PathUtil.stripQuotes(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testAListIsNull() { when(a.getAgentIds()).thenReturn(null); when(b.getAgentIds()).thenReturn(mock(List.class)); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: validateGivenNonStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.invalid("Only outer classes and static inner classes are currently supported"); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenConcreteType() { String toVerify = toTest() .withType(BIG_DECIMAL) .getObjectPathOrTypeGenerator() .generate();  String expected = "java.math.BigDecimal";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testFailWithErrorType() { Result result = Result.fail(SystemErrorType.GATEWAY_ERROR); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.GATEWAY_ERROR.getCode()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: shouldSetAndGetRestricted() { component = new FileChooserDialog(); component.setRestricted(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(component.isRestricted())
[-] pred: org. junit. Assert. assertTrue ( component. isRestricted() )
************************************
[+] input: input1() { WorkbookParameter workbookParameter = WorkbookParameter .builder() .build();  Assertions.assertNull(workbookParameter.getInputFileName()); Assertions.assertNull(workbookParameter.getInputFilePath()); Assertions.assertNull(workbookParameter.getInputFile()); Assertions.assertNull(workbookParameter.getInputStream());  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(workbookParameter.isXssf())
[-] pred: org. junit. Assert. assertTrue ( workbookParameter. isXssf() )
************************************
[+] input: testInvalidNextDate() { try { var calendar = Calendar.getInstance(RifeConfig.tools().getDefaultTimeZone(), Localization.getLocale()); calendar.set(2002, Calendar.SEPTEMBER, 1, 10, 0); var calendar_time = calendar.getTimeInMillis(); Frequency frequency = null;  frequency = new Frequency("* * 31 2 *"); try { frequency.getNextTimestamp(calendar_time); fail(); } catch (FrequencyException e) { "<AssertPlaceHolder>"; } } catch (FrequencyException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: Exception { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("SM2", PROVIDER); KeyPair keyPair = keyPairGen.generateKeyPair(); ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic(); ECPoint pubKeyPoint = pubKey.getW(); boolean onCurve = checkPointOnCurve(pubKeyPoint); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(onCurve)
[-] pred: org. junit. Assert. assertTrue ( onCurve )
************************************
[+] input: shouldReturnCurrentDateForZeroJulianDate() { LocalDate expectedDate = LocalDate.now(); LocalDate result = transformer.transformToModel(0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
[+] input: 인물_관계_단일_조회() { // given var expected = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build();  Mockito.when(characterRepository.findById(anyLong())) .thenReturn(Optional.of(expected)); // when Character actual = characterService.findById(JOINED_ITEM_ID); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSaveHostServiceRoleMapping() { // Setup final HostServiceRoleMapping hostServiceRoleMapping = new HostServiceRoleMapping(); hostServiceRoleMapping.setHost("host"); hostServiceRoleMapping.setServiceRoles(Arrays.asList("value")); final List<HostServiceRoleMapping> list = Arrays.asList(hostServiceRoleMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveHostServiceRoleMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
[+] input: getScanMetadataCronSchedule_whenRetrieved_thenReturnsDefaultScheduleAt5MinutesPastHour() { String sensorResultsStoragePath = this.sut.getSynchronizeCronSchedule(); String expected = "5 * * * *"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, sensorResultsStoragePath)
[-] pred: org. junit. Assert. assertEquals ( expected, sensorResultsStoragePath )
************************************
[+] input: requiresPreprocessingNotCleartextTest() { final ColumnSchema columnSchema = GeneralTestUtility.sealedColumn("source"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(columnSchema.requiresPreprocessing())
[-] pred: org. junit. Assert. assertTrue ( columnSchema. requiresPreprocessing() )
************************************
[+] input: LocationNotFoundException { // Mock data MonitoringLocationDTO monitoringLocationDTO = MonitoringLocationDTO.newBuilder().build(); MonitoringLocation monitoringLocation = new MonitoringLocation(); when(mapper.dtoToModel(any(MonitoringLocationDTO.class))).thenReturn(monitoringLocation); when(modelRepo.save(monitoringLocation)).thenReturn(monitoringLocation); when(mapper.modelToDTO(any(MonitoringLocation.class))).thenReturn(monitoringLocationDTO);  // Test MonitoringLocationDTO result = monitoringLocationService.upsert(monitoringLocationDTO);  // Assertions "<AssertPlaceHolder>"; verify(mapper, times(1)).dtoToModel(any(MonitoringLocationDTO.class)); verify(modelRepo, times(1)).save(monitoringLocation); verify(mapper, times(1)).modelToDTO(any(MonitoringLocation.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1"); GroupKey id2 = new GroupKey("group-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
[+] input: getAll() { final List<Stock> stocks = stockService.getAll(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(stocks.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( stocks. isEmpty ( ) )
************************************
[+] input: shouldSelectItems() { component.select("item1"); component.select("item2");  List<Integer> indices = component.getSelectedIndices();  "<AssertPlaceHolder>"; assertEquals(0, indices.get(0)); assertEquals(1, indices.get(1)); }
[*] target: assertEquals(2, indices.size())
[-] pred: org. junit. Assert. assertEquals ( 2, indices. size ( ) )
************************************
[+] input: oneSourceToMultipleTargetsTest() { final String tableSchema = TableGenerator.getTableSchemaFromConfig( statement, schema, new ColumnHeader("nonce")); final StringBuilder expectedSchema = new StringBuilder("CREATE TABLE c3rTmp (\n"nonce" TEXT"); for (ColumnSchema column : schema.getColumns()) { expectedSchema.append(",\n"").append(column.getInternalHeader()).append("" TEXT"); } expectedSchema.append(")"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSchema.toString(), tableSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedSchema. toString ( ), tableSchema )
************************************
[+] input: parseBoolean() { final EditorHelper editorHelper = new EditorHelper();  final Object result = editorHelper.edit("boolean", "true"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true, result)
[-] pred: org. junit. Assert. assertEquals ( true, result )
************************************
[+] input: Exception {  String alertJson = "{"id":"1","content":"Test Alert"}"; Alert expectedAlert = Alert.builder().id(1L).content("Test Alert").build();  when(syncCommands.rpop(anyString())).thenReturn(alertJson); Alert actualAlert = redisCommonDataQueue.pollAlertsData(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAlert, actualAlert)
[-] pred: org. junit. Assert. assertEquals ( expectedAlert, actualAlert )
************************************
[+] input: testCheckWhenSameDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
[+] input: shouldMaskDate() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDate input = LocalDate.now(); String mask = "%Dz-%Mz-%Yl"; String expected = "12-06-2023";  int julian = new JulianLocaleDateTransformer().transformToComponent(input); when(bridge.maskDateTime(julian, null, mask)).thenReturn(expected);  String result = MaskDecorator.forDate(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetAppByName() { App app = appDAO.getAppByName("xxx-service"); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(app.getName(), "xxx-service"); }
[*] target: assertNotNull(app)
[-] pred: org. junit. Assert. assertNotNull ( app )
************************************
[+] input: givenConcreteMethod() { List<String> toVerify = method() .withModifiers(PRIVATE, STATIC) .withName("notify") .withBody("System.out.println("Consider yourself notified!");") .lines();  List<String> expected = asList( "private static void notify() {", "    System.out.println("Consider yourself notified!");", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testTryEmitTwoBucketOneFail() { TapdataEvent spyTapdataEvent = spy(tapdataEvent); when(spyTapdataEvent.clone()).thenReturn(tapdataEvent); when(mockOutBox.offer(0, tapdataEvent)).thenReturn(true); when(mockOutBox.offer(1, tapdataEvent)).thenReturn(false); boolean actual = hazelcastBaseNode.tryEmit(spyTapdataEvent, 2); "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new CovariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), OPTIONAL.with(T), OPTIONAL.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: valid() { ValidationResult result = ValidationResult.valid();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result.hasErrors())
[-] pred: org. junit. Assert. assertFalse ( result. hasErrors() )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull() { when(nodeList.size()).thenReturn(2); when(nodeList.get(0)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: BBjException { when(control.getAllParagraphs()) .thenReturn(new BBjVector(List.of("paragraph 1", "paragraph 2")));  List<String> paragraphs = component.getParagraphs();  "<AssertPlaceHolder>"; assertEquals("paragraph 1", paragraphs.get(0)); assertEquals("paragraph 2", paragraphs.get(1)); }
[*] target: assertEquals(2, paragraphs.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paragraphs. size ( ) )
************************************
[+] input: testCastToBytes() { byte[] bytes = new byte[1024]; new Random().nextBytes(bytes); String str = Base64.getEncoder().encodeToString(bytes); byte[] bytes1 = TypeUtils.castToBytes(str); assertArrayEquals(bytes, bytes1);  Exception error = null; try { TypeUtils.castToBytes(new Object()); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testPseudorandom() {  MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("county.mask.pseudorandom", true);  MaskingProvider maskingProvider = new CountyMaskingProvider(maskingConfiguration);  String originalCity = "Italy"; String firstMask = maskingProvider.mask(originalCity);  for(int i = 0; i < 100; i++) { String maskedCity = maskingProvider.mask(originalCity); "<AssertPlaceHolder>"; }  }
[*] target: assertEquals(firstMask, maskedCity)
[-] pred: org. junit. Assert. assertEquals ( firstMask, maskedCity )
************************************
[+] input: testFindByIdsNormal() { TaskRepository repository = mock(TaskRepository.class); taskService = spy(new TaskServiceImpl(repository)); List<ObjectId> idList = new ArrayList<>(); ObjectId id = mock(ObjectId.class); idList.add(id); List<TaskEntity> taskEntityList = new ArrayList<>(); taskEntityList.add(mock(TaskEntity.class)); MongoTemplate template = mock(MongoTemplate.class); when(repository.getMongoOperations()).thenReturn(template); when(template.find(any(Query.class),any(Class.class))).thenReturn(taskEntityList); List<TaskEntity> actual = taskService.findByIds(idList); "<AssertPlaceHolder>"; }
[*] target: assertEquals(taskEntityList,actual)
[-] pred: org. junit. Assert. assertEquals ( taskEntityList, actual )
************************************
[+] input: testGetTaskDtoIsomorphismLessThanTwoNode() { when(nodeList.size()).thenReturn(1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: cptecListarLocalidadesPass() { CPTECCidade[] cptecCidade = BrasilAPI.cptecListarLocalidades(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(cptecCidade)
[-] pred: org. junit. Assert. assertNotNull ( cptecCidade )
************************************
[+] input: asTypeConstructor() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = new GenericType(T).asTypeConstructor();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test() { JSONReader.Context ctx = JSONFactory.createReadContext(); String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReaderUTF8Vector jsonReader = new JSONReaderUTF8Vector(ctx, json, bytes, 0, bytes.length); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: Exception {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder().setMetrics("test metrics").build(); String metricsDataJson = "{"metrics":"test metrics"}";  when(syncCommands.rpop("metricsDataQueueToAlerter")).thenReturn(metricsDataJson);  CollectRep.MetricsData actualMetricsData = redisCommonDataQueue.pollMetricsDataToAlerter(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(metricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( metricsData, actualMetricsData )
************************************
[+] input: isSupported() { ComparableVersion current = ComparableVersion.of("0.9"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.11"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.12"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.8"); assertFalse(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.5.1.2"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.1"); final ModuleDescription emptyVersion = ModuleDescription.builder() .name("emptyVersion").supportFrom(ComparableVersion.of("")).build(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(emptyVersion.isSupported(current))
[-] pred: org. junit. Assert. assertTrue ( emptyVersion. isSupported ( current ) )
************************************
[+] input: LocationNotFoundException { // Mock data MonitoringLocationDTO monitoringLocationDTO = MonitoringLocationDTO.newBuilder().build(); MonitoringLocation monitoringLocation = new MonitoringLocation(); monitoringLocation.setAddress("address"); when(mapper.dtoToModel(any(MonitoringLocationDTO.class))).thenReturn(monitoringLocation); when(modelRepo.save(monitoringLocation)).thenReturn(monitoringLocation); when(mapper.modelToDTO(any(MonitoringLocation.class))).thenReturn(monitoringLocationDTO);  // Test MonitoringLocationDTO result = monitoringLocationService.upsert(monitoringLocationDTO);  // Assertions "<AssertPlaceHolder>"; verify(mapper, times(1)).dtoToModel(any(MonitoringLocationDTO.class)); verify(modelRepo, times(1)).save(monitoringLocation); verify(mapper, times(1)).modelToDTO(any(MonitoringLocation.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: endAt_가져오기_테스트() { // given final EventBasic eventBasic = EventBasic.builder().startAt(startAt).runTime(runTime).build(); event.setEventBasic(eventBasic); // when final LocalDateTime expectedEndAt = startAt.plusMinutes(runTime); final LocalDateTime actualEndAt = event.getEndAt(); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEndAt, actualEndAt)
[-] pred: org. junit. Assert. assertEquals ( expectedEndAt, actualEndAt )
************************************
[+] input: testCategorization2SectionsMixed() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  Map<String, String> multilineOption = new HashMap<>(); multilineOption.put("multi", "true"); builder. // addCategory("General"). // addLayout(Layout.HORIZONTAL). // addElements("name"). // addElement("documentation", "Documentation", multilineOption). //  addLayout(Layout.VERTICAL). // addElements(new String[] { "age", "city" }). //  addCategory("Event"). // addLayout(Layout.VERTICAL). // addElements(new String[] { "a", "b" }). //  addCategory("Workflow"). // addLayout(Layout.HORIZONTAL);  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testGetTaskDtoIsomorphismNullNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(null); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(0)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: testDeserializeWithHeaders() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("topic", headers, bytes);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
[+] input: shouldConstructWithHrefAndComponents() { Div firstMock = new Div(); Div secondMock = new Div();  String href = "https://example.com";  Anchor anchor = new Anchor(href, firstMock, secondMock); assertNotNull(anchor); "<AssertPlaceHolder>"; assertEquals(2, anchor.getComponents().size()); }
[*] target: assertEquals(href, anchor.getHref())
[-] pred: org. junit. Assert. assertEquals ( href, anchor. getHref() )
************************************
[+] input: findNoticeRulesByEnableTrue() { List<NoticeRule> enabledList = noticeRuleDao.findNoticeRulesByEnableTrue(); "<AssertPlaceHolder>"; assertEquals(1, enabledList.size()); }
[*] target: assertNotNull(enabledList)
[-] pred: org. junit. Assert. assertNotNull ( enabledList )
************************************
[+] input: validateGivenPrivateMethod() { Method toValidate = Method.of( emptySet(), modifiers(PRIVATE), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Method needs to be public to implement an abstract method"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: should_fetch_populars() { // given final List<Movie> movies = List.of(MovieFactory.MOVIE_POJO); when(moviesProvider.getPopulars()).thenReturn(movies); // when final List<Movie> result = moviesService.getPopulars(); // then "<AssertPlaceHolder>";  }
[*] target: assertEquals(movies, result)
[-] pred: org. junit. Assert. assertEquals ( movies, result )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { BigDecimal value = new BigDecimal("12345.6789");; String expectedValue = TypeCodecs.DECIMAL.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: setProperty_StringList() { List<String> value = Arrays.asList("a","b", "c"); List<String> setValue = (List<String>) helper.setProperty(KnownProperties.TEST_STRING_LIST, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: test_oldModelLastUpdateIsNull() { try (MockedStatic<MetaDataBuilderUtils> mockedStatic = Mockito.mockStatic(MetaDataBuilderUtils.class)){ mockedStatic.when(()->MetaDataBuilderUtils.generateQualifiedName(any(),any(DataSourceConnectionDto.class),any())).thenReturn("test-qualified"); List<MetadataInstancesDto> input = new ArrayList<>(); MetadataInstancesDto metadataInstancesDto = new MetadataInstancesDto(); metadataInstancesDto.setMetaType("test"); metadataInstancesDto.setOriginalName("test"); metadataInstancesDto.setLastUpdate(0L); input.add(metadataInstancesDto); List<MetadataInstancesDto> oldMetadataInstances = new ArrayList<>(); MetadataInstancesDto old = new MetadataInstancesDto(); old.setQualifiedName("test-qualified"); old.setMetaType("test"); old.setOriginalName("test"); old.setLastUpdate(null); oldMetadataInstances.add(old); when(metadataInstancesService.findAllDto(any(),any())).thenReturn(oldMetadataInstances); List<MetadataInstancesDto> result = metadataUtil.modelNext(input,mock(DataSourceConnectionDto.class),"test",mock(UserDetail.class),false); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: test_getMonitorCalledWithDifferentNodeKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeNEW.domain");  final Monitor monitorOne = monitorService.getMonitor(nodeKeys, hostSpec, properties); assertNotNull(monitorOne);  // Ensuring monitor is the same one and not creating a new one final Monitor monitorOneDupe = monitorService.getMonitor(nodeKeys, hostSpec, properties); assertEquals(monitorOne, monitorOneDupe);  // Ensuring monitors are not the same as they have different keys // "any.node.domain" compared to "nodeNEW.domain" final Monitor monitorTwo = monitorService.getMonitor(NODE_KEYS, hostSpec, properties); "<AssertPlaceHolder>"; assertNotEquals(monitorOne, monitorTwo); }
[*] target: assertNotNull(monitorTwo)
[-] pred: org. junit. Assert. assertNotNull ( monitorTwo )
************************************
[+] input: testSendNoticeMsgReceiverNull() {  Alert alert = mock(Alert.class); boolean result = dispatcherAlarm.sendNoticeMsg(null, null, alert); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testHashCode() { PartitionRange partitionRange1 = new PartitionRange(1, 2); PartitionRange partitionRange2 = new PartitionRange(1, 2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(partitionRange1.hashCode(), partitionRange2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( partitionRange1. hashCode(), partitionRange2. hashCode() )
************************************
[+] input: testSuccess() { Result success = Result.success(); "<AssertPlaceHolder>"; assertEquals(success.getCode(), "000000"); assertEquals(success.getMesg(), "处理成功"); }
[*] target: assertTrue(success.isSuccess())
[-] pred: org. junit. Assert. assertTrue ( success. isSuccess ( ) )
************************************
[+] input: shouldAddDataListener() { component.onData(event -> { });  List<EventListener<TerminalDataEvent>> listeners = component.getEventListeners(TerminalDataEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalDataEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testCheckWhenDifferentDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("" + "{"a": [{"b":[{"a": 1},{"a": 1}]},{"b":[{"a": 1}]}]}" + ""));  Iterable<String> nodes = record.generatePaths("/a/*/b/*/a");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(3)); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
[+] input: prepareText_forTimeZoneWithNegativeOffset_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("-08:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.open);  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > New incident detected in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table. > \s > First seen: 2023-09-01 04:30:20 (GMT-8)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: testIsEmpty() {  StrBuffer buffer = new StrBuffer(""); assertTrue(buffer.isEmpty());  buffer = new StrBuffer("  \t  "); buffer.skipBlankTabs(); assertTrue(buffer.isEmpty());  buffer = new StrBuffer("hello"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(buffer.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( buffer. isEmpty() )
************************************
[+] input: testCheckServiceDependency_ClusterServiceInstanceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(Collections.emptyList());  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testSet() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("set-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testSet"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testSet");  String expectedSql = "UPDATE\n" + "  fruits\n" + "SET\n" + "  category = 'apple',\n" + "  price = 10.00\n" + "WHERE\n" + "  name = 'Jonathan'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "Jonathan", "price": 10.00, "category": "apple"}"));  expectedSql = "UPDATE\n" + "  fruits\n" + "SET\n" + "  category = 'apple'\n" + "WHERE\n" + "  name = 'Jonathan'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "Jonathan", "category": "apple"}"));  expectedSql = "UPDATE\n" + "  fruits\n" + "SET\n" + "  price = 10.00\n" + "WHERE\n" + "  name = 'Jonathan'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "Jonathan", "price": 10.00}"));  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testDefaultPublisher() { NotificationPublisher publisher = new NotificationPublisher(); publisher.setDefaultPublisher(true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(publisher.isDefaultPublisher())
[-] pred: org. junit. Assert. assertTrue ( publisher. isDefaultPublisher() )
************************************
[+] input: castToJavaBean1() { Map map = new HashMap<>(); map.put("cCountry", Locale.US.getCountry()); map.put("language", Locale.US.getLanguage()); Locale element = TypeUtils.castToJavaBean(map, Locale.class, ParserConfig.global); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(element)
[-] pred: org. junit. Assert. assertNotNull ( element )
************************************
[+] input: testCategorization2Sections() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // addLayout(Layout.HORIZONTAL). // addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testCheckServiceDependency_FrameServiceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  when(mockFrameService.listServices("serviceIds")).thenReturn(Collections.emptyList());  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testConstructor() { String message = "This is the message"; String body = "This is the body"; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=This is the body}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
[+] input: shouldGetIndex() { int index = repository.getIndex("item2"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, index)
[-] pred: org. junit. Assert. assertEquals ( 1, index )
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatDoesNotMatch() { TypeConstructor expected = new GenericTypeConstructor(U); TypeConstructor toVerify = new GenericType(U).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: validateGivenMethodWithMoreThanOneParameter() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter()), Optional.of(LIST.with(T)), "myFunction", asList(Parameter.of(ARRAY_LIST.with(T), "left"), Parameter.of(ARRAY_LIST.with(T), "right")) );  Validated<String, InitializerOrFinalizerValidator.Result> expected = Validated.invalid("Method requires exactly 1 parameters, but found 2"); Validated<String, InitializerOrFinalizerValidator.Result> toVerify = InitializerOrFinalizerValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testDestroy() {  CollectRep.MetricsData metricsData = mock(CollectRep.MetricsData.class); when(metricsData.getId()).thenReturn(1L); when(metricsData.getMetrics()).thenReturn("cpuUsage"); when(metricsData.getCode()).thenReturn(CollectRep.Code.SUCCESS);  memoryDataStorage.saveData(metricsData); memoryDataStorage.destroy();  List<CollectRep.MetricsData> result = memoryDataStorage.getCurrentMetricsData(1L); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: shouldReturnValueProvider() { Function<String, Integer> valueProvider = String::length; OrderCriteria<String, Integer> orderCriteria = new OrderCriteria<>(valueProvider, OrderCriteria.Direction.ASC);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(valueProvider, orderCriteria.getValueProvider())
[-] pred: org. junit. Assert. assertEquals ( valueProvider, orderCriteria. getValueProvider() )
************************************
[+] input: testNullUrl() { HelpData data = new HelpData(null); assertEquals(0, data.getTocOrder().size()); assertEquals(0, data.getHiddenTocs().size()); assertEquals(0, data.getHiddenIndexes().size()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(data.isSortOthers())
[-] pred: org. junit. Assert. assertTrue ( data. isSortOthers() )
************************************
[+] input: IOException { JarFile tempJarFile = new JarFile(CreateFileCommon.getJarInJarFile()); JarEntry jarEntry = tempJarFile.getJarEntry("internal-test.jar"); File extractNestedJar = JarUtils.extractNestedJar(tempJarFile, jarEntry, jarEntry.getName()); "<AssertPlaceHolder>"; assertTrue(extractNestedJar.getName().endsWith("internal-test.jar")); }
[*] target: assertNotNull(extractNestedJar)
[-] pred: org. junit. Assert. assertNotNull ( extractNestedJar )
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: testIsValidWithValidValue() { DoesNotContain doesNotContain = mock(DoesNotContain.class); when(doesNotContain.chars()).thenReturn(new String[]{"@", "#"}); validator.initialize(doesNotContain);  String value = "abcde"; boolean result = validator.isValid(value, context);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-3.xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
[+] input: setOneBelow() { set.set(1); final int ret = set.previousSetBit(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: asHttpServletRequest() { assertNotNull(instance.asHttpServletRequest(mockRequest)); "<AssertPlaceHolder>"; }
[*] target: assertNull(instance.asHttpServletRequest(null))
[-] pred: org. junit. Assert. assertNull ( instance. asHttpServletRequest ( null ) )
************************************
[+] input: IOException {  String input = "metric_name{label1="value1",label2="value2"} 123.45 67890\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(123.45, metric.getValue()); assertEquals(67890, metric.getTimestamp());  List<Label> labels = metric.getLabelList(); assertEquals(2, labels.size()); assertEquals("label1", labels.get(0).getName()); assertEquals("value1", labels.get(0).getValue()); assertEquals("label2", labels.get(1).getName()); assertEquals("value2", labels.get(1).getValue()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); params.put("selfSQL", "delete from user where id = #{id}"); long delete = commonDao.deleteSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: testTransformFromTapValueNullTapdataEvent() { HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testEmpty() { when(webHookController.failed("webhook.reOpen.failed")).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).failed("webhook.reOpen.failed"); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: IOException {  String input = "# This is a comment\nmetric_name{label1="value1"} 123.45 67890\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(123.45, metric.getValue()); assertEquals(67890, metric.getTimestamp());  List<Label> labels = metric.getLabelList(); assertEquals(1, labels.size()); assertEquals("label1", labels.get(0).getName()); assertEquals("value1", labels.get(0).getValue()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: MessagingException { when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); doNothing().when(transport).connect(anyString(), anyInt(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doNothing().when(transport).close(); doNothing().when(transport).sendMessage(any(MimeMessage.class), any(Address[].class)); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0];  doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: testTableIUDAndRename() {  // create table TapCreateTableEvent createTable = new TapCreateTableEvent(); createTable.setTableId(tableName); String currentTableName = instance.getTgtTableNameFromTapEvent(createTable); Assertions.assertEquals(expected, currentTableName);  // rename table TapRenameTableEvent tableEvent = new TapRenameTableEvent(); tableEvent.setTableId(tableName); tableEvent.setNameChanges(Collections.singletonList(new ValueChange<>(tableName, expected))); currentTableName = instance.getTgtTableNameFromTapEvent(tableEvent); Assertions.assertEquals(expected, currentTableName);  // drop table TapDropTableEvent dropTable = new TapDropTableEvent(); dropTable.setTableId(tableName); currentTableName = instance.getTgtTableNameFromTapEvent(dropTable); Assertions.assertEquals(expected, currentTableName);  // second stop table test tableName not in cache currentTableName = instance.getTgtTableNameFromTapEvent(dropTable); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, currentTableName)
[-] pred: org. junit. Assert. assertEquals ( expected, currentTableName )
************************************
[+] input: 피드백_생성() { AuthInfo authInfo = new AuthInfo(1L, List.of(Role.USER));  FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  UserDetailResponse user = new UserDetailResponse( 1L, "테스트", "test@gmail.com", "aslkdjalsdj", 1 );  Feedback feedback = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(userService.findById(authInfo.userId())) .thenReturn(user);  Mockito.when(feedbackService.create(request, useerId)) .thenReturn(feedback);  FeedbackResponse expected = new FeedbackResponse(feedback, user);  FeedbackResponse actual = feedbackFacade.create(request, authInfo);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getCustomerById() { //given Customer customer = new Customer(); customer.setId("1"); customer.setCustomerFullName("John"); customer.setCustomerType("ACTIVE");  CustomerEntity customerEntity = new CustomerEntity(); customerEntity.setId("1"); customerEntity.setCustomerType("ACTIVE"); customerEntity.setCustomerFullName("John");  //when when(customerMapper.toEntity(customer)).thenReturn(customerEntity); when(customerRepository.save(any())).thenReturn(customerEntity); when(customerMapper.toDto(customerEntity)).thenReturn(customer);  Customer customer2 = customerService.createCustomer(customer);  when(customerMapper.toDto(any())).thenReturn(customer); when(customerRepository.findById(anyString())).thenReturn(Optional.of(customerEntity));  Customer customerExample = customerService.getCustomerById("1");  verify(customerRepository, times(1)).findById(anyString());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(customerExample, customer2)
[-] pred: org. junit. Assert. assertEquals ( customerExample, customer2 )
************************************
[+] input: testMissedFromMasking() { AgeIdentifier identifier = new AgeIdentifier();  String target = "5 years, 6 months, and 11 days";  Age age = identifier.parseAge(target);  "<AssertPlaceHolder>";  assertThat(target.substring(age.getYearPortion().getStart(), age.getYearPortion().getEnd()), is("5")); assertThat(target.substring(age.getMonthPortion().getStart(), age.getMonthPortion().getEnd()), is("6")); assertThat(target.substring(age.getDaysPortion().getStart(), age.getDaysPortion().getEnd()), is("11")); }
[*] target: assertNotNull(age)
[-] pred: org. junit. Assert. assertNotNull ( age )
************************************
[+] input: writeStringLatin1() { byte[] bytes = new byte[256]; for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte) i; } JSONWriter jsonWriter = new JSONWriterUTF16(JSONFactory.createWriteContext()); jsonWriter.writeStringLatin1(bytes); String json = jsonWriter.toString(); String str = new String(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1); Object parse = JSON.parse(json); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parse)
[-] pred: org. junit. Assert. assertEquals ( str, parse )
************************************
[+] input: IOException { BilibiliResponse<FlowItems<DynamicItem>> response = client.dynamicFeedAll("", 1, "video"); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testReturnSubstringWithCodon5() { String expectedResult = this.expectedCodon5; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: testConstructorCause() { String message = "This is the message"; Throwable cause = new RuntimeException(); String body = "This is the body"; int code = 403;  HttpResponseException exception = new HttpResponseException(message, cause, body, code);  assertEquals(message, exception.getMessage()); assertSame(cause, exception.getCause()); assertEquals(body, exception.getBody()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(code, exception.getCode())
[-] pred: org. junit. Assert. assertEquals ( code, exception. getCode() )
************************************
[+] input: testTryEmitTwoBucketSuccess() { when(mockOutBox.offer(anyInt(), any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 2); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: bind_nonCounter_withStandardInput() { commonSetup(false,false,false); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession); BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testMergeSchema() { // init config Map<String, String> expectedMap = new HashMap<>();  DAG.Options options = new DAG.Options(); options.setIncludes(new ArrayList<>()); options.getIncludes().add("TEST");  // test empty schemas List<List<Schema>> inputSchemas = new ArrayList<>(); List<Schema> outputSchemas = instance.mergeSchema(inputSchemas, null, options); Assertions.assertTrue(outputSchemas.isEmpty());  // test rules inputSchemas.add(Arrays.asList( initSchema(expectedMap, "TEST", expectedTableName("TEST")), // prefix + suffix + upperCase initSchema(expectedMap, "TestBefore", expectedTableName("TestAfter")), // keywords initSchema(expectedMap, customOrigin, customCurrent) // custom table name ));  outputSchemas = instance.mergeSchema(inputSchemas, null, options); Assertions."<AssertPlaceHolder>"; for (Schema schema : outputSchemas) { Assertions.assertNotNull(schema);  String expectedName = expectedMap.get(schema.getAncestorsName()); Assertions.assertNotNull(expectedName); Assertions.assertEquals(expectedName, schema.getName()); Assertions.assertEquals(expectedName, schema.getOriginalName()); } }
[*] target: assertNotNull(outputSchemas)
[-] pred: org. junit. Assert. assertNotNull ( outputSchemas )
************************************
[+] input: testLaneSetLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  Map<String, Object> arrayDetailOption = new HashMap<>();  // detail : 'GENERATED' // arrayDetailOption.put("detail", "GENERATED");  //        "type": "HorizontalLayout", //        "elements": [ //            { //                "type": "Control", //                "scope": "#/properties/name" //            }, //            { //                "type": "Control", //                "scope": "#/properties/documentation", //                "label": "Documentation", //                "options": { //                    "multi": true //                } //            } //        ]  JsonObjectBuilder layoutBuilder = Json.createObjectBuilder().add("type", "HorizontalLayout"); JsonArrayBuilder controlsArrayBuilder = Json.createArrayBuilder();  JsonObject multiOptions = Json.createObjectBuilder() // .add("multi", true).build();  controlsArrayBuilder // .add(Json.createObjectBuilder() // .add("type", "Control") // .add("scope", "#/properties/name"))// .add(Json.createObjectBuilder() // .add("type", "Control") // .add("scope", "#/properties/documentation") // .add("label", "Documentation") // .add("options", multiOptions) // ); layoutBuilder.add("elements", controlsArrayBuilder); JsonObjectBuilder detailBuilder = Json.createObjectBuilder(). // add("detail", layoutBuilder.build());  builder.addCategory("Lanes") // .addLayout(Layout.VERTICAL);  builder.addDetailLayout("lanes", "Lanes", detailBuilder.build());  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: givenTwoVideosWithSameChecksumAndLocation_whenCallsEquals_ShouldReturnTrue() { // given final var expectedChecksum = "abc"; final var expectedRawLocation = "/images/ac";  final var img1 = AudioVideoMedia.with(expectedChecksum, "Random", expectedRawLocation);  final var img2 = AudioVideoMedia.with(expectedChecksum, "Simple", expectedRawLocation);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertNotSame(img1, img2); }
[*] target: assertEquals(img1, img2)
[-] pred: org. junit. Assert. assertEquals ( img1, img2 )
************************************
[+] input: whenTaskDtoIsNull() { try (MockedStatic<BeanUtil> beanUtilMockedStatic = mockStatic(BeanUtil.class)) { String taskId = "testTaskId"; String nodeId = "testNodeId"; when(clientMongoOperator.findOne(any(Query.class), anyString(), eq(TaskDto.class))).thenReturn(null); beanUtilMockedStatic.when(() -> BeanUtil.getBean(ClientMongoOperator.class)).thenReturn(clientMongoOperator);  try (MockedStatic<CleanResult> cleanResultMockedStatic = mockStatic(CleanResult.class)) { CleanResult success = CleanResult.success(); cleanResultMockedStatic.when(CleanResult::success).thenReturn(success);  CleanResult result = mergeNodeCleaner.cleanTaskNode(taskId, nodeId); "<AssertPlaceHolder>"; } verify(clientMongoOperator, times(1)).findOne(any(Query.class), anyString(), eq(TaskDto.class)); } }
[*] target: assertEquals(success, result)
[-] pred: org. junit. Assert. assertEquals ( success, result )
************************************
[+] input: withoutUpperBounds() { TypeParameter typeParameter = T.asTypeParameter(); String toVerify = generateFrom(typeParameter); String expected = "T"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenParameters() { String toVerify = toTest() .withParameter(STRING, "s") .withParameters(Parameter.of(BIG_DECIMAL, "bd"), Parameter.of(INTEGER, "i")) .withParameterTypes(OPTIONAL.with(T), OPTIONAL.with(U)) .andParameterNames("t", "u") .getParametersGenerator() .generate();  String expected = "(java.lang.String s, java.math.BigDecimal bd, java.lang.Integer i, java.util.Optional<T> t, java.util.Optional<U> u)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: shouldMaskTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalTime input = LocalTime.of(14, 30, 15); String mask = "%Hz:%mz:%sz"; String expected = "14:30:15";  double hms = new HoursLocalTimeTransformer().transformToComponent(input); when(bridge.maskDateTime(0, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forTime(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: apply() { GenericType expected = new GenericType(T); GenericType toVerify = new GenericTypeConstructor(T).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: validateGivenMethodWithNoSharedTypeConstructorBetweenInputParametersAndReturnType() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(COMPLETABLE_FUTURE.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("No shared type constructor between parameters (java.util.Optional<T> and java.util.Optional<U>) and result (java.util.concurrent.CompletableFuture<V>)"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: parseAndToStringCompareTest() { String original = "$test($arg1, $arg2, $arg3, $arg4) -> 'SIEMA'"; Result<Template, String> result = Template.parse(original);  assertTrue(result.isOk());  Template template = result.get(); String deserialized = template.toString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, deserialized)
[-] pred: org. junit. Assert. assertEquals ( original, deserialized )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyTwoFrame3Test() { int[] expectedResult = {2, 5, 8, 11, 14, 17}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_TWO; CodonFrame temp = new CodonFrame(testSequence, (short) 3, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: testReduceStock() { long goodsId = 1L; SeckillGoods seckillGoods = new SeckillGoods(); seckillGoods.setStockCount(5);  // 使用 any() 来匹配任何 LambdaQueryWrapper 参数 when(seckillGoodsManager.getOne(any())).thenReturn(seckillGoods);  when(redisService.get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class)) .thenReturn(4); when(seckillGoodsManager.update(eq(seckillGoods), any())).thenReturn(true);  int result = seckillGoodsService.reduceStock(goodsId);  "<AssertPlaceHolder>"; verify(redisService, times(1)).get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class); verify(seckillGoodsManager, times(1)).update(eq(seckillGoods), any()); }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: test_error2() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("ttr"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testCountTapDataEvent() { List<TapdataEvent> events = new ArrayList<>(); TapdataEvent e = new TapdataEvent(); e.setTapEvent(tapEvent); events.add(e); HandlerUtil.EventTypeRecorder recorder = HandlerUtil.countTapdataEvent(events); Assertions.assertNotNull(recorder); Assertions.assertTrue(recorder.getMemorySize() > 0); Assertions.assertEquals(1, recorder.getUpdateTotal()); Assertions.assertEquals(0, recorder.getInsertTotal()); Assertions.assertEquals(0, recorder.getDdlTotal()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, recorder.getTotal())
[-] pred: org. junit. Assert. assertEquals ( 1, recorder. getTotal() )
************************************
[+] input: topBit() { final int i = Integer.MAX_VALUE - 1; final int ret = set.previousClearBit(i);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(i, ret)
[-] pred: org. junit. Assert. assertEquals ( i, ret )
************************************
[+] input: testDeterminePage01() { DynaValidatorForm validatorForm = new DynaValidatorForm(); ActionMapping mapping = new ActionMapping();  mapping.setAcceptPage(null); validatorForm.setPage(-1); int page = validatorForm.determinePage(mapping, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(Integer.MAX_VALUE, page)
[-] pred: org. junit. Assert. assertEquals ( Integer. MAX_VALUE, page )
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidFinalizer() { ContainingClass containingClass = getValidContainingClass();  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method finalizer = getFinalizer( withAnnotations(FINALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToFinalizeTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withFinalizedTypeConstructor(LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.empty(), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.of(Finalizer.of(finalizer.getName(), ARRAY_LIST.with(placeholder().covariant()), LIST.with(placeholder().invariant()))) ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, finalizer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: Exception { MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("hashing.normalize", true);  HashMaskingProvider hashMaskingProvider = new HashMaskingProvider(maskingConfiguration);  String value = "Joe"; String maskedValue1 = hashMaskingProvider.mask(value);  String value2 = "JOE"; String maskedValue2 = hashMaskingProvider.mask(value2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(maskedValue1, maskedValue2)
[-] pred: org. junit. Assert. assertEquals ( maskedValue1, maskedValue2 )
************************************
[+] input: testInsertBatch() { List<User> userList = new ArrayList<>(); { User user = new User(); user.setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); userList.add(user); } { User user = new User(); user.setName("李四") .setAge(17) .setCreateTime(LocalDateTime.now()); userList.add(user); } int insert = commonDaoWrap.insertBatch(userList); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, insert)
[-] pred: org. junit. Assert. assertEquals ( 2, insert )
************************************
[+] input: testGetIsomorphism() { when(mockHazelcastBaseNode.getIsomorphism()).thenCallRealMethod(); boolean isomorphism = mockHazelcastBaseNode.getIsomorphism(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: shouldTurnUpVolume() { //given //when this.tv.turnUpVolume(); this.tv.turnUpVolume(); this.tv.turnUpVolume(); int actual = this.tv.getVolume(); //then int expected = 8; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { URL codeSourceLocation = null; assertNull(codeSourceLocation);  codeSourceLocation = repository.getCodeSourceLocation(ClassDataRepositoryTest.class); info("codeSourceLocation : " + codeSourceLocation); assertNotNull(codeSourceLocation);  codeSourceLocation = repository.getCodeSourceLocation(Nonnull.class); info("codeSourceLocation : " + codeSourceLocation); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(codeSourceLocation)
[-] pred: org. junit. Assert. assertNotNull ( codeSourceLocation )
************************************
[+] input: testResolveQueryParameters() { String url = "https://www.google.com.hk/search?q=java&oq=java&sourceid=chrome&es_sm=122&ie=UTF-8"; Map<String, List<String>> parametersMap = resolveQueryParameters(url); Map<String, List<String>> expectedParametersMap = new LinkedHashMap<>(); expectedParametersMap.put("q", Arrays.asList("java")); expectedParametersMap.put("oq", Arrays.asList("java")); expectedParametersMap.put("sourceid", Arrays.asList("chrome")); expectedParametersMap.put("es_sm", Arrays.asList("122")); expectedParametersMap.put("ie", Arrays.asList("UTF-8"));  assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search"; parametersMap = resolveQueryParameters(url); expectedParametersMap = emptyMap(); assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search?"; parametersMap = resolveQueryParameters(url); expectedParametersMap = emptyMap(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedParametersMap, parametersMap)
[-] pred: org. junit. Assert. assertEquals ( expectedParametersMap, parametersMap )
************************************
[+] input: empty() { CellResultSet cellResultSet = CellResultSet.none(); Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(ExcelException.class, cellResultSet::getFirstCellResult); Assertions.assertThrows(ExcelException.class, cellResultSet::getExcelType); Assertions.assertTrue(cellResultSet.getCellResultListList().isEmpty()); }
[*] target: assertTrue(cellResultSet.isNone())
[-] pred: org. junit. Assert. assertTrue ( cellResultSet. isNone() )
************************************
[+] input: shouldAddSelectionChangeListener() { table.onItemSelectionChange(event -> { });  List<EventListener<TableItemSelectionChange>> listeners = table.getEventListeners(TableItemSelectionChange.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectionChange>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: testGetLibPathIsURLClassLoaderAndURLsNotEmptyButJarPathNotContainsJarName() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); when(url.getPath()).thenReturn("any-path"); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 1, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: testDelete() { int delete = commonDao.delete(1L, User.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
[+] input: startAt_가져오기_테스트() { // given LocalDateTime expectedStartAt = startAt; // when when(eventBasic.getStartAt()).thenReturn(expectedStartAt); event.setEventBasic(eventBasic); LocalDateTime actualStartAt = event.getStartAt(); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStartAt, actualStartAt)
[-] pred: org. junit. Assert. assertEquals ( expectedStartAt, actualStartAt )
************************************
[+] input: testStripQuotesAtStartAndEndNoQuotes() { String input = "/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: generateGivenContravariant() { String expected = "? super java.lang.Boolean"; String toVerify = new TypeArgumentGenerator(BOOLEAN.contravariant()).generate();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testFailWithErrorTypeAndData() { Date data = new Date(); Result result = Result.fail(SystemErrorType.GATEWAY_ERROR, data); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.GATEWAY_ERROR.getCode()); assertEquals(result.getData(), data); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: test_isCloudLimit() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testIsAllowedExtensionWhenNull() { String[] imageTypes = null;  boolean isAllow = FileUploadUtils.isExtensionAllowed("img", imageTypes);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isAllow)
[-] pred: org. junit. Assert. assertTrue ( isAllow )
************************************
[+] input: MessagingException { when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); doNothing().when(transport).connect(anyString(), anyInt(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doAnswer(a -> { throw new MessagingException(""); }).when(transport).close(); doNothing().when(transport).sendMessage(any(MimeMessage.class), any(Address[].class)); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0]; doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyThreeFrame1Test() { int[] expectedResult = {0, 3, 6, 9, 12, 15, 18}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_THREE; CodonFrame temp = new CodonFrame(testSequence, (short) 1, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: givenMultipleEmtpyAndNonEmptyLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "", "        Line 2" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: whenObjectAreEquivalentButDifferInCasing_ThenEqualsReturnsTrue() { GroupId id1 = new GroupId("Group@Example.com"); GroupId id2 = new GroupId("group@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: shouldCreateRadioButtonWithNoParameters() { RadioButton radioButton = RadioButton.Switch();  assertEquals("", radioButton.getText()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(radioButton.isChecked())
[-] pred: org. junit. Assert. assertFalse ( radioButton. isChecked ( ) )
************************************
[+] input: testEmpty() { when(webHookController.success(null)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(hook.getData()); verify(webHookController).success(null); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: format_ShouldFormatInstantValueAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull1() { when(nodeList.size()).thenReturn(2); when(nodeList.get(1)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: testLoadSuccess() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.load("<p>some <b>html</b> here</p>", true, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
[*] target: assertNotNull(xhtml)
[-] pred: org. junit. Assert. assertNotNull ( xhtml )
************************************
[+] input: test_2_plus_2_meta() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 0, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a"), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 2).put("b", 2).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); assertNotNull(resultMsg.getMetaData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("4", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: getResourcesUsIsEn() { Collection<ResourceEntry> resources = manager.getResources(Resource.COUNTRY, Collections.singleton("us"));  "<AssertPlaceHolder>"; assertThat(resources.size(), is(1));  for (ResourceEntry resourceEntry : resources) assertThat(resourceEntry.getCountryCode(), is("en")); }
[*] target: assertNotNull(resources)
[-] pred: org. junit. Assert. assertNotNull ( resources )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupId id1 = new GroupId("group@example.com");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: testParseWithNull_ReturnNull() { AndroidBatteryInfoResultParser parser = new AndroidBatteryInfoResultParser(); PerformanceTestResult testResult = parser.parse(null, null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(testResult)
[-] pred: org. junit. Assert. assertNull ( testResult )
************************************
[+] input: testForEach() { int[] keys = new int[]{1, 17, 33, 2, 18, 3};  IntObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (int key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (int k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (int k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
[+] input: validateGivenMethodWithLessThanOneTypeParameters() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(), Optional.of(LIST.with(STRING)), "myFunction", asList(Parameter.of(ARRAY_LIST.with(STRING), "value")) );  Validated<String, InitializerOrFinalizerValidator.Result> expected = Validated.invalid("Method requires exactly 1 type parameters, but found 0"); Validated<String, InitializerOrFinalizerValidator.Result> toVerify = InitializerOrFinalizerValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testMessage2TapEventWhenNotDmlOp() { MessageEntity messageEntity = new MessageEntity(OperationType.DDL.getOp(), MOCK_DATA, TABLE_NAME); TapRecordEvent tapRecordEvent = hazelcastBaseNode.message2TapEvent(messageEntity); "<AssertPlaceHolder>"; }
[*] target: assertNull(tapRecordEvent)
[-] pred: org. junit. Assert. assertNull ( tapRecordEvent )
************************************
[+] input: calculateCodonStartIndicesFrame1Test() { int[] expectedResult = {0, 3, 6, 9, 12, 15, 18, 21}; CodonFrame temp = new CodonFrame(TEST_SEQUENCE, (short) 1, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp);  int[] result = readingFrameTest.calculateCodonStartIndices(TEST_SEQUENCE);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: getTopicsPerTeamEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAllTopicsForTeamGroupByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldConstructWithTitleInitialPathAndRestricted() { component = new FileChooserDialog("Title", "/path", true); assertEquals("Title", component.getTitle()); assertEquals("/path", component.getInitialPath()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(component.isRestricted())
[-] pred: org. junit. Assert. assertTrue ( component. isRestricted() )
************************************
[+] input: testIsNotUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = false; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: ibgeUfsPass() { IBGEUF[] ibgeUfs = BrasilAPI.ibgeUf(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ibgeUfs)
[-] pred: org. junit. Assert. assertNotNull ( ibgeUfs )
************************************
[+] input: Exception { String greekHospital = "ΠΕΠΑΓΝΗ";  Collection<ResourceEntry> entryCollection = LocalizationManager.getInstance().getResources(Resource.HOSPITAL_NAMES, Collections.singletonList("gr")); Set<String> greekHospitals = new HashSet<>();  for(ResourceEntry entry: entryCollection) { InputStream inputStream = entry.createStream(); try (CSVParser reader = Readers.createCSVReaderFromStream(inputStream)) { for (CSVRecord line : reader) { String name = line.get(0); greekHospitals.add(name.toUpperCase()); } inputStream.close(); } }  MaskingProvider maskingProvider = new HospitalMaskingProvider();  int randomizationOK = 0; for(int i = 0; i < 100; i++) { String maskedHospital = maskingProvider.mask(greekHospital); if (!maskedHospital.equalsIgnoreCase(greekHospital)) { randomizationOK++; }  boolean isMatch = greekHospitals.contains(maskedHospital.toUpperCase());  if (!isMatch) { System.out.println(maskedHospital); }  "<AssertPlaceHolder>"; }  assertTrue(randomizationOK > 0); }
[*] target: assertTrue(isMatch)
[-] pred: org. junit. Assert. assertTrue ( isMatch )
************************************
[+] input: testDetailBuilder() { //  detail : { //      "type": "HorizontalLayout", //      "elements": [ //          { //              "type": "Control", //              "scope": "#/properties/name" //          }, //          { //              "type": "Control", //              "scope": "#/properties/documentation", //              "label": "Documentation", //              "options": { //                  "multi": true //              } //          } //      ] //    }  JsonObjectBuilder layoutBuilder = Json.createObjectBuilder().add("type", "HorizontalLayout");  JsonArrayBuilder controlsArrayBuilder = Json.createArrayBuilder();  JsonObjectBuilder controlBuilder = Json.createObjectBuilder(). // add("type", "Control"). // add("scope", "#/properties/");  controlsArrayBuilder.add(controlBuilder);  layoutBuilder.add("elements", controlsArrayBuilder);  JsonObjectBuilder detailBuilder = Json.createObjectBuilder(). // add("detail", layoutBuilder.build());  JsonObject jsonObject = detailBuilder.build();  "<AssertPlaceHolder>"; logger.info("" + jsonObject);  }
[*] target: assertNotNull(jsonObject)
[-] pred: org. junit. Assert. assertNotNull ( jsonObject )
************************************
[+] input: testInstant() { Instant now = new Date().toInstant(); TapInsertRecordEvent insertRecordEvent = TapInsertRecordEvent.create().init() .after(new Document("id",1).append("ts", now)); Long aLong = CdcDelay.parseTs(insertRecordEvent); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now.toEpochMilli(), aLong); }
[*] target: assertNotNull(aLong)
[-] pred: org. junit. Assert. assertNotNull ( aLong )
************************************
[+] input: testConvertWhenConversionTypeIsUnsupported() { //        CqlConversion.Type conversionType = CqlConversion.Type.UNSUPPORTED; //        List<CqlConversion.Type> conversionTypeList = Collections.singletonList(conversionType); // //        CqlConversion cqlConversion = spy(new CqlConversion(fromDataType, toDataType, codecRegistry)); //        doReturn(conversionTypeList).when(cqlConversion).getConversionTypeList(); // //        Object inputData = new Object(); //        Object result = cqlConversion.convert(inputData); // //        "<AssertPlaceHolder>"; //    }
[*] target: assertSame(inputData, result)
[-] pred: org. junit. Assert. assertSame ( inputData, result )
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { UserId id1 = new UserId("bob@example.com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NoNextValidTime() { String cronExpressionString = "0 0 0 29 2 ? 1999"; // An impossible time (Feb 29, 1999 was not a leap year) CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Instant now = Instant.now(); Instant lastTrigger = now.minus(Duration.ofDays(365));  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testSortByType() { // given: TastableHofundConnectionsProvider provider = new TastableHofundConnectionsProvider(); HofundConnectionsTable table = new HofundConnectionsTable(Collections.singletonList(provider)); String expected = "+----------+---------+--------+------+\n" + "| TYPE     | NAME    | STATUS | URL  |\n" + "+----------+---------+--------+------+\n" + "| HTTP     | target1 | UP     | fake |\n" + "| HTTP     | target3 | UP     | fake |\n" + "| DATABASE | target2 | UP     | fake |\n" + "| DATABASE | target4 | UP     | fake |\n" + "+----------+---------+--------+------+\n";  // when: String result = table.print();  // then: "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testLoadUnsupportedType() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.load(new Object(), true, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
[*] target: assertNull(xhtml)
[-] pred: org. junit. Assert. assertNull ( xhtml )
************************************
[+] input: of() { GenericType expected = new GenericType(T); GenericType toVerify = GenericType.of(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: IOException { var channel = seekableByteChannelForRead(); channel.close(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(channel.isOpen())
[-] pred: org. junit. Assert. assertFalse ( channel. isOpen() )
************************************
[+] input: JobException { String taskParam = "taskParam"; when(workerRpcService.splitJob(any())).thenReturn(new SplitJobResult(Collections.singletonList(taskParam)));  SplitJobResult result = workerRpcService.splitJob(new SplitJobParam("group", null, null, null, null)); "<AssertPlaceHolder>"; assertNotNull(result.getTaskParams()); assertEquals(1, result.getTaskParams().size()); assertEquals(taskParam, result.getTaskParams().get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCheckLicenseEngineLimitWithDaas() { connectorManager = spy(ConnectorManager.class); ClientMongoOperator clientMongoOperator = mock(ClientMongoOperator.class); ReflectionTestUtils.setField(connectorManager,"clientMongoOperator",clientMongoOperator); CheckEngineValidResultDto excepted = mock(CheckEngineValidResultDto.class); when(connectorManager.checkLicenseEngineLimit()).thenReturn(excepted); CheckEngineValidResultDto actual = connectorManager.checkLicenseEngineLimit(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(excepted,actual)
[-] pred: org. junit. Assert. assertEquals ( excepted, actual )
************************************
[+] input: testFilterConverge_RestoredAlert() {  testAlert.setStatus(CommonConstants.ALERT_STATUS_CODE_RESTORED); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testInterceptAspectTest0() { AspectInterceptResult aspect = observableAspectTask.onInterceptAspect(new Aspect() {}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(aspect)
[-] pred: org. junit. Assert. assertNull ( aspect )
************************************
[+] input: getEnvName_NoEnvNameFound() { Mockito.when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(List.of()); String actual = analyticsControllerService.getEnvName(TestConstants.ENV_ID);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: IOException {  String input = "metric_name1{label1="value1"} 123.45 67890\nmetric_name2 678.90 12345\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(2, metrics.size());  Metric metric1 = metrics.get(0); assertEquals("metric_name1", metric1.getMetricName()); assertEquals(123.45, metric1.getValue()); assertEquals(67890, metric1.getTimestamp());  List<Label> labels1 = metric1.getLabelList(); assertEquals(1, labels1.size()); assertEquals("label1", labels1.get(0).getName()); assertEquals("value1", labels1.get(0).getValue());  Metric metric2 = metrics.get(1); assertEquals("metric_name2", metric2.getMetricName()); assertEquals(678.90, metric2.getValue()); assertEquals(12345, metric2.getTimestamp()); assertNull(metric2.getLabelList()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: testGetLibPathNotURLClassLoader() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(AbstractClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: IOException {  String input = "metric_name{label1="value1"} -Inf 67890\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(Double.NEGATIVE_INFINITY, metric.getValue()); assertEquals(67890, metric.getTimestamp()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: testAdvancedForeach() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("foreach-advanced-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testInsertMulti"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testInsertMulti");  String expectedSql = "INSERT INTO\n" + "  fruits (name, category, price)\n" + "VALUES\n" + "  ('Jonathan', 'apple', 10.00)";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"fruits":[{"name": "Jonathan", "price": 10.00, "category": "apple"}]}"));  expectedSql = "INSERT INTO\n" + "  fruits (name, category, price)\n" + "VALUES\n" + "  ('Jonathan', 'apple', 10.00),\n" + "  ('Mcintosh', 'apple', 12.00)";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"fruits":[{"name": "Jonathan", "price": 10.00, "category": "apple"},{"name": "Mcintosh", "price": 12.00, "category": "apple"}]}"));  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: getAll() { final List<Branch> branches = branchService.getAll(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(branches.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( branches. isEmpty ( ) )
************************************
[+] input: test2() { processorBaseContext.getTaskDto().setType(SyncTypeEnum.INITIAL_SYNC.getSyncType()); when(mockHazelcastMergeNode.isSubTableFirstMode()).thenReturn(true); mockHazelcastMergeNode.initMergeCache(); Map<String, ConstructIMap<Document>> cacheMap = (Map<String, ConstructIMap<Document>>) ReflectionTestUtils.getField(mockHazelcastMergeNode, "mergeCacheMap"); boolean mapIsNull = cacheMap != null; "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, mapIsNull)
[-] pred: org. junit. Assert. assertEquals ( true, mapIsNull )
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatMatchesOneOfTheTypeArguments() { TypeConstructor expected = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()); TypeConstructor toVerify = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant()).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testTopSearches() { _db.addRating("0", Rating.C_PING, null, 0); _db.addRating("1", Rating.C_PING, null, 0); _db.addRating("2", Rating.C_PING, null, 0); _db.addRating("3", Rating.C_PING, null, 0); _db.addRating("4", Rating.C_PING, null, 0); _db.addRating("5", Rating.C_PING, null, 0);  _db.addSearchHit("5", 0); _db.addSearchHit("0", 0); _db.addSearchHit("0", 0); _db.addSearchHit("0", 0);  _db.addSearchHit("1", 1); _db.addSearchHit("2", 2); _db.addSearchHit("3", 3); _db.cleanupSearchHistory(30);  _db.addSearchHit("0", 4); _db.addSearchHit("4", 5); _db.addSearchHit("5", 6);  List<? extends SearchInfo> topSearches = _db.getTopSearches(1, 1);  "<AssertPlaceHolder>";  assertEquals("5", topSearches.get(0).getPhone()); assertEquals(1, topSearches.get(0).getCount()); assertEquals(1, topSearches.get(0).getTotal());  assertEquals("0", topSearches.get(1).getPhone()); assertEquals(1, topSearches.get(1).getCount()); assertEquals(3, topSearches.get(1).getTotal()); }
[*] target: assertEquals(2, topSearches.size())
[-] pred: org. junit. Assert. assertEquals ( 2, topSearches. size ( ) )
************************************
[+] input: test_sqrt_5_to_timeseries_and_metadata_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultMetadata = resultMsg.getMetaData().getValue("result"); var resultData = JacksonUtil.toJsonNode(resultMsg.getData());  assertTrue(resultData.has("result")); assertEquals(2.236, resultData.get("result").asDouble(), 0.0);  assertNotNull(resultMetadata); assertEquals("2.236", resultMetadata); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: setProperty_String() { String value = "test_value"; String setValue = (String) helper.setProperty(KnownProperties.TEST_STRING, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: testReturnSubstringWithCodon1() { String expectedResult = this.expectedCodon1; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
[+] input: shouldCalculateLoan() {  LoaCalculateLoanResponseDto result = loaLoanService.calculateLoan(24, BigDecimal.valueOf(3000));  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testGetIpRegionWithNull() { IpRegion ipRegion = IpRegionUtil.getIpRegion(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertNull(ipRegion.getCountry()); Assertions.assertEquals("未知 未知", ipRegion.briefLocation()); }
[*] target: assertNotNull(ipRegion)
[-] pred: org. junit. Assert. assertNotNull ( ipRegion )
************************************
[+] input: shouldRemoveTheFoodOnStomach_WhenStomochDoesntEmpty() { //given monkey.toEat(Fruit.APPLE); //when this.monkey.toDigest(); boolean actual = this.monkey.getStomach().isEmpty(); //then boolean expected = true; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testClassPathFile() { Properties properties = ConfigUtil.loadProperties("classpath:openjob.properties"); Assertions."<AssertPlaceHolder>";  String value = properties.getProperty("openjob.worker.test", "none"); Assertions.assertEquals(value, "test"); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: testIndexWorkflow() { WorkflowDef def = new WorkflowDef(); def.setName("pending_count_correlation_jtest");  WorkflowModel workflow = createTestWorkflow(); workflow.setWorkflowDefinition(def);  generateWorkflows(workflow, 10); List<String> bycorrelationId = archiveDAO.getWorkflowIdsByCorrelationId( "pending_count_correlation_jtest", "corr001", true, true); assertNotNull(bycorrelationId); assertEquals(10, bycorrelationId.size()); System.out.println("Workflow Ids: " + bycorrelationId);  List<String> bycorrelationId2 = archiveDAO.getWorkflowIdsByCorrelationId( "pending_count_correlation_jtest", "corr001", true, true); System.out.println("Workflow Ids: " + bycorrelationId2); System.out.println("Workflow Ids: " + (bycorrelationId.size() == bycorrelationId2.size()));  workflow.setStatus(WorkflowModel.Status.COMPLETED); workflow.setUpdatedTime(System.currentTimeMillis()); workflow.getTasks().forEach(t -> t.setStatus(TaskModel.Status.COMPLETED)); workflow.setUpdatedTime(System.currentTimeMillis()); archiveDAO.createOrUpdateWorkflow(workflow); WorkflowModel found = archiveDAO.getWorkflow(workflow.getWorkflowId(), false); assertNotNull(found); assertNotNull(workflow.getTasks()); assertFalse(workflow.getTasks().isEmpty());  // Updating it back to running status shouldn't do anything! workflow.setStatus(WorkflowModel.Status.RUNNING); archiveDAO.createOrUpdateWorkflow(workflow); found = archiveDAO.getWorkflow(workflow.getWorkflowId(), false); "<AssertPlaceHolder>"; assertEquals(WorkflowModel.Status.COMPLETED, found.getStatus()); }
[*] target: assertNotNull(found)
[-] pred: org. junit. Assert. assertNotNull ( found )
************************************
[+] input: testSubCronOrPlanNum() { taskEntity.setCrontabExpressionFlag(true); try (MockedStatic<DataPermissionHelper> dataPermissionHelperMockedStatic = mockStatic(DataPermissionHelper.class)) { int result = taskService.subCronOrPlanNum(taskDto, 3); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, result)
[-] pred: org. junit. Assert. assertEquals ( 2, result )
************************************
[+] input: getTopicsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByTeams(null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEncryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String plainText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToDatabaseColumn(plainText); "<AssertPlaceHolder>"; }
[*] target: assertEquals(plainText, converted)
[-] pred: org. junit. Assert. assertEquals ( plainText, converted )
************************************
[+] input: test_nullLimitlessRouterMonitor() { final LimitlessRouterService limitlessRouterService = new LimitlessRouterServiceImpl((a, b, c, d) -> null); final List<HostSpec> actualEndpointHostSpecList = limitlessRouterService.getLimitlessRouters(OTHER_CLUSTER_ID, props); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actualEndpointHostSpecList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, actualEndpointHostSpecList. size ( ) )
************************************
[+] input: testBasic() {  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND price < 500";  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("basic-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testBasic"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testBasic");  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null));  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testNormal() { milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.FINISH, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
[+] input: testSerializeWithNullMetricsData() {  byte[] bytes = serializer.serialize("", null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(bytes)
[-] pred: org. junit. Assert. assertNull ( bytes )
************************************
[+] input: getAllStateOrProvinceByCountryId_Success() { generateTestData(); List<StateOrProvinceVm> stateOrProvinceVms = stateOrProvinceService.getAllByCountryId(country.getId()); "<AssertPlaceHolder>"; assertEquals(2, stateOrProvinceVms.size()); }
[*] target: assertNotNull(stateOrProvinceVms)
[-] pred: org. junit. Assert. assertNotNull ( stateOrProvinceVms )
************************************
[+] input: testGetLevel() { List<Level> levels = new ArrayList<>(); loggingService.getLevels().forEach(levels::add); List<Level> expected = asList(OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, levels)
[-] pred: org. junit. Assert. assertEquals ( expected, levels )
************************************
[+] input: testRemoveUsersByUserId() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes(1, "thepassword")) .addUser("login2", new RoleUserAttributes(23, "thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes(14, "thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); assertFalse(users.removeUser(5)); assertEquals(4, users.countUsers()); assertTrue(users.removeUser(174)); assertEquals(3, users.countUsers()); assertTrue(users.removeUser(1)); assertEquals(2, users.countUsers()); assertTrue(users.removeUser(23)); assertEquals(1, users.countUsers()); assertTrue(users.removeUser(14)); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: 좋아요_숫자_카운팅_UP() { discussion.updateLikeCount(true); int actual = discussion.getLikeCount();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, actual)
[-] pred: org. junit. Assert. assertEquals ( 1, actual )
************************************
[+] input: getApiKeyRequestUrl_whenRetrieved_thenReturnsUrl() { String loginUrl = this.sut.getApiKeyRequestUrl(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("https://cloud.dqops.com/requestapikey/", loginUrl); }
[*] target: assertNotNull(loginUrl)
[-] pred: org. junit. Assert. assertNotNull ( loginUrl )
************************************
[+] input: testAddAndDeleteScope() { String scopeName = "newScope4"; ScopeSetManager manager = new ScopeSetManager(); ScopeSet newScope = new ScopeSet(scopeName); manager.add(newScope); manager.save();  manager = new ScopeSetManager(); ScopeSet set = manager.findSet(scopeName); assertNotNull(set); assertEquals(scopeName, set.getName()); manager.remove(set);  manager = new ScopeSetManager(); set = manager.findSet(scopeName); "<AssertPlaceHolder>"; }
[*] target: assertNull(set)
[-] pred: org. junit. Assert. assertNull ( set )
************************************
[+] input: testGetNextSibling() { Node function = root.getChild(0); Node def = function.getChild(0); Node identifier = function.getChild(1); Assertions.assertNull(root.getNextSibling()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(identifier, def.getNextSibling())
[-] pred: org. junit. Assert. assertEquals ( identifier, def. getNextSibling() )
************************************
[+] input: testNormal() { user = mock(UserDetail.class); String newName = "test_name"; ObjectId id = mock(ObjectId.class); when(taskService.count(any(Query.class),any(UserDetail.class))).thenReturn(1L); doCallRealMethod().when(taskService).checkTaskNameNotError(newName,user,id); boolean actual = taskService.checkTaskNameNotError(newName, user, id); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true,actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: shouldConstructWithSrc() { String src = "https://example.com";  Img img = new Img(src); "<AssertPlaceHolder>"; }
[*] target: assertEquals(src, img.getSrc())
[-] pred: org. junit. Assert. assertEquals ( src, img. getSrc() )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Double value = 21474836470.7; String expected = TypeCodecs.DOUBLE.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldGetCardActivityAnalysis() {  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = createDummyCrdCreditCardActivityAnalysisDtoList();  List<CrdCreditCardActivityAnalysisDto> expectedResult = createDummyCrdCreditCardActivityAnalysisDtoList();  when(crdCreditCardActivityEntityService.getCardActivityAnalysis(1L)).thenReturn(crdCreditCardActivityAnalysisDtoList);  List<CrdCreditCardActivityAnalysisDto> result = crdCreditCardActivityEntityService.getCardActivityAnalysis(1L);  "<AssertPlaceHolder>"; assertNotNull(result);  }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: of() { ContainingPackage expected = new ContainingPackage(packageName); ContainingPackage toVerify = ContainingPackage.of(packageName);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: arrayGivenElementType() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = Type.array(STRING_TYPE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_getJSONObject2() { JSONObject object = new JSONObject().fluentPut("values", new HashMap<>()); HashMap map = object.getJSONObject("values"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, map.size())
[-] pred: org. junit. Assert. assertEquals ( 0, map. size ( ) )
************************************
[+] input: testOfferWhenTryEmitReturnFalse() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(false); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testCheckWhenFailed() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
[+] input: givenValidExchangeRequestWithInvalidUserJson_whenCreatingTokenExchangeParams_thenParamsAreParsedAndNormalized() { MultivaluedMap<String, String> params = new MultivaluedMapBuilder().subjectToken("myFancyAppleAuthorizationCode").userJson("  ").build(); TokenExchangeParams exchangeParams = new TokenExchangeParams(params);  assertEquals("myFancyAppleAuthorizationCode", exchangeParams.getSubjectToken()); assertEquals(AppleIdentityProvider.APPLE_AUTHZ_CODE, exchangeParams.getSubjectTokenType()); assertNull(exchangeParams.getUserJson()); "<AssertPlaceHolder>"; }
[*] target: assertNull(exchangeParams.getAppIdentifier())
[-] pred: org. junit. Assert. assertNull ( exchangeParams. getAppIdentifier() )
************************************
[+] input: testGetInheritableClassLoaders() { Set<ClassLoader> classLoaders = getInheritableClassLoaders(classLoader); "<AssertPlaceHolder>"; assertTrue(classLoaders.size() > 1); info(classLoaders); }
[*] target: assertNotNull(classLoaders)
[-] pred: org. junit. Assert. assertNotNull ( classLoaders )
************************************
[+] input: testCheckIsCronOrPlanTaskWithFalseCronTask() { TaskRepository repository = mock(TaskRepository.class); taskService = spy(new TaskServiceImpl(repository)); TaskDto taskDto = new TaskDto(); taskDto.setCrontabExpressionFlag(false); boolean result = taskService.checkIsCronOrPlanTask(taskDto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, result)
[-] pred: org. junit. Assert. assertEquals ( false, result )
************************************
[+] input: test_type_expression_tableExpression_isNull() { doCallRealMethod().when(taskNodeService).getMigrateTableNames(any(),any()); DatabaseNode databaseNode = new DatabaseNode(); databaseNode.setMigrateTableSelectType("expression"); taskNodeService.getMigrateTableNames(databaseNode,mock(UserDetail.class)); MetadataInstancesDto metadataInstancesDto1 = new MetadataInstancesDto(); metadataInstancesDto1.setOriginalName("test1"); MetadataInstancesDto metadataInstancesDto2 = new MetadataInstancesDto(); metadataInstancesDto2.setOriginalName("test2"); MetadataInstancesDto metadataInstancesDto3 = new MetadataInstancesDto(); when(metadataInstancesService.findSourceSchemaBySourceId(any(),any(),any(),any())).thenReturn(Arrays.asList(metadataInstancesDto1,metadataInstancesDto2,metadataInstancesDto3)); List<String> result = taskNodeService.getMigrateTableNames(databaseNode,mock(UserDetail.class)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testGenerateCommandHostEntity() { // Setup final ClusterServiceCommandHostEntity expectedResult = new ClusterServiceCommandHostEntity(); expectedResult.setCommandHostId("commandHostId"); expectedResult.setHostname("hostname"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setCommandId("commandId"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime());  // Run the test final ClusterServiceCommandHostEntity result = ProcessUtils.generateCommandHostEntity("commandId", "hostname");  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: isExceptionPresent() { String test = "test"; Result<String> value = Result.of(test); assertFalse(value.isExceptionPresent());  value = Result.of(new RuntimeException()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(value.isExceptionPresent())
[-] pred: org. junit. Assert. assertTrue ( value. isExceptionPresent() )
************************************
[+] input: of() { ClassName expected = new ClassName("String"); ClassName toVerify = ClassName.of("String");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: perform() { Concert concert = new Concert(new MockElvis()); concert.perform();  assertTrue(concert.isLightsOn()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(concert.isMainStateOpen())
[-] pred: org. junit. Assert. assertTrue ( concert. isMainStateOpen() )
************************************
[+] input: validateGivenMethodThatDoesNotReturnAnything() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter()), Optional.empty(), "myFunction", asList(Parameter.of(ARRAY_LIST.with(T), "value")) );  Validated<String, InitializerOrFinalizerValidator.Result> expected = Validated.invalid("Method needs to return something"); Validated<String, InitializerOrFinalizerValidator.Result> toVerify = InitializerOrFinalizerValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: combine() { Map<Integer, String> left = new HashMap<>(); left.put(1, "One"); left.put(2, "Two"); left.put(3, "Three");  Map<Integer, String> right = new HashMap<>(); right.put(2, "Twee"); right.put(3, "Drie"); right.put(4, "Vier");  Map<Integer, String> expected = new HashMap<>(); expected.put(2, "TwoTwee"); expected.put(3, "ThreeDrie"); Map<Integer, String> toVerify = Maps.<Integer>instance().compose(left, right, String::concat);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: prepareText_fromMessageParametersOfOpenedIncident_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.open);  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > New incident detected in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table. > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: IllegalAccessException { ReflectionUtils.nullifyControl(component);  component.setInvalid(true); "<AssertPlaceHolder>";  assertTrue(component.getProperty("invalid", Boolean.class)); }
[*] target: assertTrue(component.isInvalid())
[-] pred: org. junit. Assert. assertTrue ( component. isInvalid() )
************************************
[+] input: CleanRoomsException { final ClientSettings expectedClientSettings = ClientSettings.builder() .allowCleartext(true) .allowDuplicates(true) .allowJoinsOnColumnsWithDifferentNames(false) .preserveNulls(false) .build(); final DataEncryptionMetadata metadata = DataEncryptionMetadata.builder() .allowCleartext(expectedClientSettings.isAllowCleartext()) .allowDuplicates(expectedClientSettings.isAllowDuplicates()) .allowJoinsOnColumnsWithDifferentNames(expectedClientSettings.isAllowJoinsOnColumnsWithDifferentNames()) .preserveNulls(expectedClientSettings.isPreserveNulls()) .build(); final Collaboration collaboration = Collaboration.builder() .dataEncryptionMetadata(metadata) .build(); final GetCollaborationResponse response = GetCollaborationResponse.builder() .collaboration(collaboration) .build(); final var client = mock(CleanRoomsClient.class); when(client.getCollaboration(any(GetCollaborationRequest.class))).thenReturn(response);  final var dao = spy(CleanRoomsDao.class); when(dao.getClient()).thenReturn(client); final var actualClientSettings = dao.getCollaborationDataEncryptionMetadata(GeneralTestUtility.EXAMPLE_SALT .toString()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedClientSettings, actualClientSettings)
[-] pred: org. junit. Assert. assertEquals ( expectedClientSettings, actualClientSettings )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: testDecodeKey() {  String key = "testKey"; ByteBuffer buffer = ByteBuffer.wrap(key.getBytes(StandardCharsets.UTF_8)); String decodedKey = codec.decodeKey(buffer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
[+] input: instrumentationTypes() { TimeMachineModuleInstrumentation inst = new TimeMachineModuleInstrumentation(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, inst.instrumentationTypes().size())
[-] pred: org. junit. Assert. assertEquals ( 4, inst. instrumentationTypes(). size ( ) )
************************************
[+] input: testEnabled() { NotificationRule rule = new NotificationRule(); rule.setEnabled(true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(rule.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( rule. isEnabled() )
************************************
[+] input: testGetAlertConverges() {  Page<AlertConverge> page = new PageImpl<>(Collections.emptyList()); when(alertConvergeDao.findAll( any(Specification.class), any(Pageable.class)) ).thenReturn(page);  Page<AlertConverge> result = alertConvergeService.getAlertConverges(null, null, "id", "desc", 1, 10);  verify(alertConvergeDao, times(1)).findAll( any(Specification.class), any(PageRequest.class) ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(page, result)
[-] pred: org. junit. Assert. assertEquals ( page, result )
************************************
[+] input: getProducerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: loadSchemaTest() { List<Schema> schemaList = migrateProcessorNode.loadSchema(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null,schemaList)
[-] pred: org. junit. Assert. assertEquals ( null, schemaList )
************************************
[+] input: testCollectFilteredFiles() { List<Path> collectedFiles = new ArrayList<>(); MavenProjectInput.walkDirectoryFiles( Paths.get("src/test/resources/test-folder"), collectedFiles, DEFAULT_GLOB, it -> it.getFileName() .toString() .endsWith("pom.xml")); "<AssertPlaceHolder>"; // pom is filtered out by the "mustBeSkipped" predicate }
[*] target: assertEquals(0, collectedFiles.size())
[-] pred: org. junit. Assert. assertEquals ( 0, collectedFiles. size ( ) )
************************************
[+] input: testForLong() { Object value = 1L; Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, actual)
[-] pred: org. junit. Assert. assertEquals ( value, actual )
************************************
[+] input: givenTwoImagesWithSameChecksumAndLocation_whenCallsEquals_ShouldReturnTrue() { // given final var expectedChecksum = "abc"; final var expectedLocation = "/images/ac";  final var img1 = ImageMedia.with(expectedChecksum, "Random", expectedLocation);  final var img2 = ImageMedia.with(expectedChecksum, "Simple", expectedLocation);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertNotSame(img1, img2); }
[*] target: assertEquals(img1, img2)
[-] pred: org. junit. Assert. assertEquals ( img1, img2 )
************************************
[+] input: try { Object innerValue = 1; Value value = new Value(innerValue); "<AssertPlaceHolder>"; } catch (Exception e) { fail("No exception expected."); }
[*] target: assertEquals(innerValue, value.asInteger())
[-] pred: org. junit. Assert. assertEquals ( innerValue, value. asInteger ( ) )
************************************
[+] input: using() { Type expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant()); Type toVerify = Type.generic(T).using(TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: givenValidVideoId_whenCallsGetResource_shouldReturnIt() { // given final var videoOne = VideoID.unique(); final var expectedType = VideoMediaType.VIDEO; final var expectedResource = resource(expectedType);  storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), expectedType), expectedResource); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.TRAILER.name()), resource(mediaType())); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.BANNER.name()), resource(mediaType()));  Assertions.assertEquals(3, storageService().storage().size());  // when final var actualResult = this.mediaResourceGateway.getResource(videoOne, expectedType).get();  // then Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResource, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResource, actualResult )
************************************
[+] input: testDecodeValue() {  CollectRep.MetricsData metricsData = Mockito.mock(CollectRep.MetricsData.class); byte[] bytes = new byte[] {1, 2, 3};  ByteBuffer buffer = ByteBuffer.wrap(bytes);  try { Mockito.mockStatic(CollectRep.MetricsData.class); Mockito.when(CollectRep.MetricsData.parseFrom(buffer)).thenReturn(metricsData);  CollectRep.MetricsData decodedValue = codec.decodeValue(buffer);  "<AssertPlaceHolder>"; } catch (Exception e) { log.error(e.getMessage()); fail("Exception thrown during decodeValue test"); } finally { Mockito.clearAllCaches(); } }
[*] target: assertEquals(metricsData, decodedValue)
[-] pred: org. junit. Assert. assertEquals ( metricsData, decodedValue )
************************************
[+] input: Exception { SlackWebhookProperties props = new SlackWebhookProperties( "slackTest", SLACK_SIGNING_KEY, CHALLENGE_RESPONSE_VERIFICATION_FUNCTION); SlackConnectorPropertiesWrapper wrapper = new SlackConnectorPropertiesWrapper(props); when(ctx.bindProperties(SlackConnectorPropertiesWrapper.class)).thenReturn(wrapper); testObject = new SlackInboundWebhookExecutable(); final var requestTimeStamp = String.valueOf(now().toInstant().toEpochMilli()); Map<String, String> headers = Map.of( HEADER_SLACK_SIGNATURE, slackCurrentSignature(requestTimeStamp, URL_VERIFICATION_REQUEST), HEADER_SLACK_REQUEST_TIMESTAMP, requestTimeStamp); final var payload = mock(WebhookProcessingPayload.class); when(payload.method()).thenReturn("POST"); when(payload.headers()).thenReturn(headers); when(payload.rawBody()).thenReturn(URL_VERIFICATION_REQUEST.getBytes(UTF_8));  testObject.activate(ctx); final var result = testObject.verify(payload);  "<AssertPlaceHolder>"; assertThat(result.body()).isInstanceOf(Map.class); assertThat((Map) result.body()).containsEntry(FIELD_CHALLENGE, "aAaAaAaAaAaAaAaAaAaA"); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCascadeSelect() { List<Student> studentTree = studentTreeHelper.toTree(originStudentList); Long targetStudentId = 6L; List<Long> expectedPathIds = Arrays.asList(1L, 3L, 6L); List<Student> selectedPath = studentTreeHelper.cascadeSelect(studentTree, targetStudentId); List<Long> selectedPathIds = selectedPath.stream().map(Student::getId).collect(Collectors.toList()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPathIds, selectedPathIds)
[-] pred: org. junit. Assert. assertEquals ( expectedPathIds, selectedPathIds )
************************************
[+] input: testMd5() { Component component = new Component(); String hash = "299189766eddf8b5fea4954f0a63d4b1"; component.setMd5(hash); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(hash, component.getMd5())
[-] pred: org. junit. Assert. assertEquals ( hash, component. getMd5() )
************************************
[+] input: testNeedSkipNormalNotExist() { File f = mock(File.class); when(f.exists()).thenReturn(false); when(f.isFile()).thenReturn(true); when(f.getName()).thenReturn("setup.py"); boolean needSkip = utils.needSkip(f); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(needSkip)
[-] pred: org. junit. Assert. assertTrue ( needSkip )
************************************
[+] input: shouldMaskDateTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDateTime input = LocalDateTime.of(2023, 6, 12, 14, 30, 15); String mask = "%Dz-%Mz-%Yl %Hz:%mz:%s"; String expected = "12-06-2023 14:30:15";  JulianLocaleDateTransformer dateTransformer = new JulianLocaleDateTransformer(); HoursLocalTimeTransformer timeTransformer = new HoursLocalTimeTransformer(); int julian = dateTransformer.transformToComponent(input.toLocalDate()); double hms = timeTransformer.transformToComponent(input.toLocalTime()); when(bridge.maskDateTime(julian, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forDateTime(input, mask);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: IOException { BilibiliResponse<UserNav> navResponse = client.nav(); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(navResponse.getData()); WbiImg wbiImg = navResponse.getData().getWbiImg(); Assertions.assertNotNull(wbiImg); BilibiliResponse<SpaceSearchResult> response = client.spaceSearch(1, 50, 423895, WbiUtil.getMixinKey(wbiImg.getImgKey(), wbiImg.getSubKey())); Assertions.assertNotNull(response); Assertions.assertEquals(response.getCode(), 0, response.getMessage()); Assertions.assertNotNull(response.getData()); Assertions.assertNotNull(response.getData().getList()); List<SearchVideoInfo> list = response.getData().getList().getVlist(); if (list != null) { for (SearchVideoInfo video : list) { String message = String.format("BV:%s, title:%s, author:%s", video.getBvId(), ApiUtil.removeSearchHighlight(video.getTitle()), ApiUtil.removeSearchHighlight(video.getAuthor())); logger.info(message); } } }
[*] target: assertNotNull(navResponse)
[-] pred: org. junit. Assert. assertNotNull ( navResponse )
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
[+] input: shouldExtractConfirmAccountLinkWhenHtmlContainsConfirmationLink() { String htmlString = "<html><body><a href='http://localhost/sign-up/verify?token=123'>Confirm Account</a></body></html>"; String expectedLink = "http://localhost/sign-up/verify?token=123"; String actualLink = SignUpUtils.extractConfirmAccountLink(htmlString);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLink, actualLink)
[-] pred: org. junit. Assert. assertEquals ( expectedLink, actualLink )
************************************
[+] input: testClearUsers() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); users.clearUsers(); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
[+] input: parseDateTime6() { LocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 0, 0); String str1 = "2022 ";  LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);  Assertions."<AssertPlaceHolder>";  }
[*] target: assertEquals(localDateTime, localDateTime1)
[-] pred: org. junit. Assert. assertEquals ( localDateTime, localDateTime1 )
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: generic() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = TypeConstructor.generic(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: generateGivenInvariant() { String expected = "java.lang.String"; String toVerify = new TypeArgumentGenerator(STRING.invariant()).generate();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: SQLException { rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "jdbc:someprotocol://url");  final List<HostSpec> expected = hosts; RdsHostListProvider.topologyCache.put(rdsHostListProvider.clusterId, expected, defaultRefreshRateNano);  final List<HostSpec> result = rdsHostListProvider.getCachedTopology(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testList() { dataSourceRegister.deleteById(1); List<DynamicDataSourceInfo> list = dataSourceRegister.list(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: setProperty_StringList_oneValue() { List<String> value = Arrays.asList("a"); List<String> setValue = (List<String>) helper.setProperty(KnownProperties.TEST_STRING_LIST, value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
[+] input: shouldCreateFieldWithLabelValueAndListener() { EventListener<ValueChangeEvent<LocalDateTime>> listener = event -> { }; LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField("label", dateTime, listener); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); assertEquals(1, component.getEventListeners(ValueChangeEvent.class).size()); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
[+] input: saveRole() { Mockito.when(roleEntityRepository.merge(roleEntity)).thenReturn(roleEntity);  Role storedRoleDetails = roleService.save(this.roleEntity); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(storedRoleDetails)
[-] pred: org. junit. Assert. assertNotNull ( storedRoleDetails )
************************************
[+] input: test_deduceSchema() { TaskDto taskDto = new TaskDto(); taskDto.setSyncType("deduceSchema"); when(dataProcessorContext.getTaskDto()).thenReturn(taskDto); DatabaseNode databaseNode = new DatabaseNode(); databaseNode.setTableNames(Arrays.asList("test1")); doCallRealMethod().when(node).getSourceTables(any(),anyList()); List<String> result = node.getSourceTables(databaseNode,new ArrayList<>()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: createAddress_validDate_Success() { generateTestData(); AddressPostVm addressPostVm = AddressPostVm.builder() .contactName("update-address") .districtId(district.getId()) .countryId(country.getId()) .stateOrProvinceId(stateOrProvince.getId()) .build(); AddressGetVm addressGetVm = addressService.createAddress(addressPostVm); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(addressGetVm)
[-] pred: org. junit. Assert. assertNotNull ( addressGetVm )
************************************
[+] input: testListOnlineWorkersByAppName() { List<Worker> workers = workerDAO.listOnlineWorkers();  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(workers.size(), 2); }
[*] target: assertNotNull(workers)
[-] pred: org. junit. Assert. assertNotNull ( workers )
************************************
[+] input: bind_withTTLAndWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+2)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { /* we test that if we turn the flag off the user information is preserved */ MaskingConfiguration configuration = new DefaultMaskingConfiguration(); configuration.setValue("url.mask.usernamePassword", false); configuration.setValue("url.mask.port", true); configuration.setValue("url.preserve.domains", 0); MaskingProvider urlMaskingProvider = new URLMaskingProvider(configuration, new MaskingProviderFactory(new ConfigurationManager(), Collections.emptyMap())); String url = "http://user1:pass1@www.nba.com"; String maskedResult = urlMaskingProvider.mask(url); String originalUserInfo = new URL(url).getUserInfo(); String maskedUserInfo = new URL(maskedResult).getUserInfo(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(originalUserInfo, maskedUserInfo)
[-] pred: org. junit. Assert. assertEquals ( originalUserInfo, maskedUserInfo )
************************************
[+] input: test() { String str = "{"value":[123]}"; assertEquals( 123, JSON.parseObject(str, Bean.class).value.get(0) );  assertEquals( 123, JSON.parseObject(str).to(Bean.class).value.get(0) );  ObjectReader objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Bean.class); FieldReader fieldReader = objectReader.getFieldReader("value"); assertEquals("getValue", fieldReader.toString()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fieldReader.isReadOnly())
[-] pred: org. junit. Assert. assertTrue ( fieldReader. isReadOnly() )
************************************
[+] input: initTableFileTest() { final File dbFile = TableGenerator.initTableFile(FileUtil.CURRENT_DIR); "<AssertPlaceHolder>"; }
[*] target: assertTrue(dbFile.exists())
[-] pred: org. junit. Assert. assertTrue ( dbFile. exists ( ) )
************************************
[+] input: testUnbindByProcessIdWithId() { String processId = "111"; Query query = Query.query(Criteria.where("process_id").is(processId).and("worker_type").is("connector")); Update update = Update.update("licenseBind", false); UpdateResult result = new UpdateResult() { @Override public boolean wasAcknowledged() { return false; } @Override public long getMatchedCount() { return 1; } @Override public long getModifiedCount() { return 1; } @Override public BsonValue getUpsertedId() { return null; } }; when(workerRepository.update(query,update)).thenReturn(result); boolean actual = workerService.unbindByProcessId(processId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true,actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: filter() { try { oneWayImplementation.filter(new ArrayList<>(List.of(new String[]{"root"}))); } catch (NullPointerException ex) { fail("Exception was thrown when not expected"); } try { oneWayImplementation.filter(null); fail("Exception was not thrown when expected"); } catch (NullPointerException ex) { "<AssertPlaceHolder>"; } }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: isNotBlank_CandidateContainsNullValueString_ReturnsFalse() { final var candidate = "null";  "<AssertPlaceHolder>"; }
[*] target: assertFalse(subject.isNotBlank(candidate))
[-] pred: org. junit. Assert. assertFalse ( subject. isNotBlank( candidate ) )
************************************
[+] input: parse_ShouldParseStringToInstantValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetInsertStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: 오더라인_총_가격_조회_검증() { // given Money optionAnswerPrice1 = Money.wons(1000L); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(optionAnswerPrice1); Money optionAnswerPrice2 = Money.wons(2000L); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(optionAnswerPrice2); given(orderItem.getPrice()).willReturn(money3000); // when Money totalOrderLinePrice = orderLineItem.getTotalOrderLinePrice(); // then Money total = optionAnswerPrice1.plus(optionAnswerPrice2).plus(money3000).times(quantity); "<AssertPlaceHolder>"; }
[*] target: assertEquals(totalOrderLinePrice, total)
[-] pred: org. junit. Assert. assertEquals ( totalOrderLinePrice, total )
************************************
[+] input: testAesEncode() { String originalText = "This is a secret message"; String encryptedText = aesEncode(originalText, VALID_KEY); assertNotEquals(originalText, encryptedText);  String decryptedText = aesDecode(encryptedText, VALID_KEY); "<AssertPlaceHolder>"; }
[*] target: assertEquals(originalText, decryptedText)
[-] pred: org. junit. Assert. assertEquals ( originalText, decryptedText )
************************************
[+] input: testString() { TapInsertRecordEvent insertRecordEvent = TapInsertRecordEvent.create().init() .after(new Document("id",1).append("ts", "2024-07-25 10:50:46.001")).referenceTime(0L); Long aLong = CdcDelay.parseTs(insertRecordEvent); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(0L, aLong); }
[*] target: assertNotNull(aLong)
[-] pred: org. junit. Assert. assertNotNull ( aLong )
************************************
[+] input: cptecBuscarLocalidadesPass() { CPTECCidade[] cptecCidade = BrasilAPI.cptecBuscarLocalidades("São Paulo"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(cptecCidade)
[-] pred: org. junit. Assert. assertNotNull ( cptecCidade )
************************************
[+] input: testFrequencyBasedThresholdNotExceeded() { List<IdentifiedType> identifiedTypeList = new ArrayList<>(); identifiedTypeList.add(new IdentifiedType("EMAIL", 10)); identifiedTypeList.add(new IdentifiedType("ADDRESS", 10));  Map<String, Integer> priorities = new HashMap<>(); priorities.put("EMAIL", 90); priorities.put("ADDRESS", 89);  IdentificationConfiguration identificationConfiguration = new IdentificationConfiguration(50, 90, false, IdentificationStrategy.FREQUENCY_BASED, priorities, Collections.emptyMap());  IdentifiedType bestType = IdentifierUtils.findBestType(identifiedTypeList, 15L, identificationConfiguration);  "<AssertPlaceHolder>"; assertThat(bestType.getCount(), is(-1L)); assertThat(bestType.getTypeName(), is("UNKNOWN")); }
[*] target: assertNotNull(bestType)
[-] pred: org. junit. Assert. assertNotNull ( bestType )
************************************
[+] input: 인물_관계_탑승하기() { // given var expected = new CharacterHistory( CHARACTER_ID, USER_ID );  Mockito.when(characterHistoryRepository.save(any())) .thenReturn(expected); // when var actual = characterHistoryService.save(CHARACTER_ID, USER_ID); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: LocationNotFoundException { // Mock data MonitoringLocationDTO monitoringLocationDTO = MonitoringLocationDTO.newBuilder().setTenantId(TENANT_ID).build(); MonitoringLocation monitoringLocation = new MonitoringLocation(); monitoringLocation.setTenantId(TENANT_ID); when(mapper.dtoToModel(any(MonitoringLocationDTO.class))).thenReturn(monitoringLocation); when(modelRepo.save(monitoringLocation)).thenReturn(monitoringLocation); when(mapper.modelToDTO(any(MonitoringLocation.class))).thenReturn(monitoringLocationDTO);  // Test MonitoringLocationDTO result = monitoringLocationService.upsert(monitoringLocationDTO);  // Assertions "<AssertPlaceHolder>"; verify(mapper, times(1)).dtoToModel(any(MonitoringLocationDTO.class)); verify(modelRepo, times(1)).save(monitoringLocation); verify(mapper, times(1)).modelToDTO(any(MonitoringLocation.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testGetBundle() { ResourceBundle resourceBundle = PropertyResourceBundleUtils.getBundle("META-INF.test", "UTF-8"); String expected = "测试名称"; String value = resourceBundle.getString("name"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
[+] input: testArray() {  DataBuilder builder = new DataBuilder(). // addData("name", "John"). // addData("description", "Hello World");  builder.addArray("comments");  // add first object builder.addObject(); builder.addData("language", "javascript"); builder.addData("script", "1+1");  // add second object builder.addObject(); builder.addData("language", "java"); builder.addData("script", "2+2");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: test_sqrt_5_to_timeseries_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, false, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(2.236, resultJson.get("result").asDouble(), 0.0); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: MessagingException { when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); ReflectionTestUtils.setField(mu, "port", null); doNothing().when(transport).connect(anyString(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doNothing().when(transport).close(); doNothing().when(transport).sendMessage(any(MimeMessage.class), any(Address[].class)); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0];  doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
[+] input: testUpdateSql() { User user = new User(); user.setName("张三"); user.setId(1L); Map<String, Object> params = BeanUtil.beanToMap(user); long update = commonDaoWrap.updateSql("update user set name = #{name} where id = #{id}", params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: replaceAllTypeParameterNamesGivenMappingThatContainsElementType() { Map<TypeParameterName, TypeParameterName> mapping = new HashMap<>(); mapping.put(T, A); mapping.put(U, B);  ArrayType expected = new ArrayType(new GenericType(A)); ArrayType toVerify = new ArrayType(new GenericType(T)).replaceAllTypeParameterNames(mapping);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testUpdateTask() { var task_id = -1; Task task = null; TaskManager manager = new MemoryTasks(); try { var cal = Calendar.getInstance(); cal.set(2001, Calendar.NOVEMBER, 24, 0, 0, 0);  task = new Task(); task.setType(TestTasktypes.UPLOAD_GROUPS); task.setPlanned(cal.getTime().getTime()); task.setFrequency(Frequency.MINUTELY); task.setBusy(false); task_id = manager.addTask(task);  cal.set(2002, Calendar.MARCH, 12, 0, 0, 0); var type = TestTasktypes.SEND_RANKING; var planned = cal.getTime().getTime(); var frequency = new Frequency().atMinute(20).everyHour(3); var busy = true;  task = new Task(); task.setId(task_id); task.setType(type); task.setPlanned(planned); task.setFrequency(frequency); task.setBusy(busy);  assertTrue(manager.updateTask(task));  task = manager.getTask(task_id); "<AssertPlaceHolder>";  assertEquals(task.getId(), task_id); assertEquals(task.getType(), type); assertTrue(task.getPlanned() <= planned); assertEquals(task.getFrequency(), frequency); assertEquals(task.isBusy(), busy); assertSame(task.getTaskManager(), manager); } catch (FrequencyException | TaskManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
[*] target: assertNotNull(task)
[-] pred: org. junit. Assert. assertNotNull ( task )
************************************
[+] input: testGetLibPathIsURLClassLoaderButURLsIsEmpty() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(new URL[]{}); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: evaluateShouldOverwriteRestartCountWhenLess() { var observedClusterHealthInfo1 = createClusterHealthInfo(validInstant1, 1, 1); var observedClusterHealthInfo2 = createClusterHealthInfo(validInstant2, 0, 1);  setLastValidClusterHealthInfo(observedClusterHealthInfo1); clusterHealthEvaluator.evaluate(configuration, clusterInfo, observedClusterHealthInfo2); var lastValidClusterHealthInfo = ClusterHealthEvaluator.getLastValidClusterHealthInfo(clusterInfo); "<AssertPlaceHolder>"; assertEquals( observedClusterHealthInfo2.getNumRestarts(), lastValidClusterHealthInfo.getNumRestarts()); assertEquals( observedClusterHealthInfo2.getTimeStamp(), lastValidClusterHealthInfo.getNumRestartsEvaluationTimeStamp()); }
[*] target: assertNotNull(lastValidClusterHealthInfo)
[-] pred: org. junit. Assert. assertNotNull ( lastValidClusterHealthInfo )
************************************
[+] input: testFindRunningTasksByAgentIdWithId() { TaskRepository repository = mock(TaskRepository.class); taskService = spy(new TaskServiceImpl(repository)); String processId = "111"; Query query = Query.query(Criteria.where("agentId").is(processId).and("status").is("running")); when(taskService.findAll(query)).thenReturn(new ArrayList<>()); int actual = taskService.findRunningTasksByAgentId(processId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual)
[-] pred: org. junit. Assert. assertEquals ( 0, actual )
************************************
[+] input: testEmptyList() { List<VulnerableSoftware> vsList = vulnerableSoftwareRepository.getAllVulnerableSoftware(null, null, null, null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, vsList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, vsList. size ( ) )
************************************
[+] input: testZip() { Stream.<SerRunn>of( () -> { String biMap = Opp.of(1).zip(Opp.of("st"), (l, r) -> l + r).get(); Assertions.assertEquals("1st", biMap); }, () -> { String biMap = Opp.of(1).zip(Opp.<String>empty(), (l, r) -> l + r).get(); Assertions."<AssertPlaceHolder>"; }) .forEach(SerRunn::run); }
[*] target: assertNull(biMap)
[-] pred: org. junit. Assert. assertNull ( biMap )
************************************
[+] input: arrayGivenElementTypeConstructor() { ArrayTypeConstructor expected = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR); ArrayTypeConstructor toVerify = TypeConstructor.array(STRING_TYPE_CONSTRUCTOR);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testAddAll() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("configName"); serviceConfig.setValue("configValue"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("input"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> left = Arrays.asList(serviceConfig); final ServiceConfig serviceConfig1 = new ServiceConfig(); serviceConfig1.setName("configName"); serviceConfig1.setValue("configValue"); serviceConfig1.setLabel("label"); serviceConfig1.setDescription("description"); serviceConfig1.setRequired(false); serviceConfig1.setType("input"); serviceConfig1.setConfigurableInWizard(false); serviceConfig1.setDefaultValue("defaultValue"); serviceConfig1.setMinValue(0); serviceConfig1.setMaxValue(0); serviceConfig1.setUnit("unit"); serviceConfig1.setHidden(false); serviceConfig1.setSelectValue(Arrays.asList("value")); serviceConfig1.setConfigType("configType"); final List<ServiceConfig> right = Arrays.asList(serviceConfig1); final ServiceConfig serviceConfig2 = new ServiceConfig(); serviceConfig2.setName("configName"); serviceConfig2.setValue("configValue"); serviceConfig2.setLabel("label"); serviceConfig2.setDescription("description"); serviceConfig2.setRequired(false); serviceConfig2.setType("input"); serviceConfig2.setConfigurableInWizard(false); serviceConfig2.setDefaultValue("defaultValue"); serviceConfig2.setMinValue(0); serviceConfig2.setMaxValue(0); serviceConfig2.setUnit("unit"); serviceConfig2.setHidden(false); serviceConfig2.setSelectValue(Arrays.asList("value")); serviceConfig2.setConfigType("configType"); final List<ServiceConfig> expectedResult = Arrays.asList(serviceConfig2);  // Run the test final List<ServiceConfig> result = ProcessUtils.addAll(left, right);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: 인물_관계_TOP30_조회() { // given var expected = new ArrayList<Character>(); for(int i = 0; i < 30; i++) { expected.add(Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build() ); }  Mockito.when(characterRepository.findTop30ByTypeOrderByCoinAmountDesc(any())) .thenReturn(expected);  // when List<Character> actual = characterService.getCharactersByTopUpper(CharacterType.PERSONA); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IllegalAccessException { ReflectionUtils.nullifyControl(component);  component.setAutoClientValidate(true); "<AssertPlaceHolder>";  assertTrue(component.getProperty("autoValidate", Boolean.class)); }
[*] target: assertTrue(component.isAutoClientValidate())
[-] pred: org. junit. Assert. assertTrue ( component. isAutoClientValidate() )
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW", 19); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
[+] input: testNormal() { Query query = scheduleUtil.whereForSettings(keys); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(query)
[-] pred: org. junit. Assert. assertNotNull ( query )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); ByteBuffer byteBuffer = TypeCodecs.BIGINT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.INT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: test_sqrt_5_body() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_BODY, "result", 3, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(2.236, resultJson.get("result").asDouble(), 0.0); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: Exception { FormatProcessor processor = new FormatProcessor() { @Override public boolean supportsStreams() { return true; }  @Override protected Iterable<Record> extractRecords(InputStream dataset, DatasetOptions datasetOptions, int firstN) { return Collections.emptyList(); } };  try ( InputStream input = new ByteArrayInputStream( new byte[0] ); ByteArrayOutputStream output = new ByteArrayOutputStream(); PrintStream print = new PrintStream(output) ) { MaskingProviderFactory factory = new MaskingProviderFactory(new ConfigurationManager(), Collections.emptyMap()); processor.maskStream( input, print, factory, new DataMaskingOptions( DataTypeFormat.CSV, DataTypeFormat.CSV, Collections.emptyMap(), false, Collections.emptyMap(), new CSVDatasetOptions(false, ',', '"', false) ), Collections.emptySet(), Collections.emptyMap());  String result = output.toString(); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: testGetBootstrapClassPaths() { Set<String> bootstrapClassPaths = getBootstrapClassPaths(); "<AssertPlaceHolder>"; RuntimeMXBean runtimeMXBean = getRuntimeMXBean(); assertEquals(runtimeMXBean.isBootClassPathSupported(), !bootstrapClassPaths.isEmpty()); info(bootstrapClassPaths); }
[*] target: assertNotNull(bootstrapClassPaths)
[-] pred: org. junit. Assert. assertNotNull ( bootstrapClassPaths )
************************************
[+] input: IllegalAccessException { ReflectionUtils.nullifyControl(component);  component.setAutoClientValidateOnLoad(true); "<AssertPlaceHolder>";  assertTrue(component.getProperty("autoValidateOnLoad", Boolean.class)); }
[*] target: assertTrue(component.isAutoClientValidateOnLoad())
[-] pred: org. junit. Assert. assertTrue ( component. isAutoClientValidateOnLoad ( ) )
************************************
[+] input: testMaskFixedFormatNoChange() { DefaultMaskingConfiguration configuration = new DefaultMaskingConfiguration(); configuration.setValue("datetime.format.fixed", "dd-MM-yyyy HH:mm:ss"); configuration.setValue("datetime.year.mask", false); configuration.setValue("datetime.month.mask", false); configuration.setValue("datetime.day.mask", false); configuration.setValue("datetime.hour.mask", false); configuration.setValue("datetime.minutes.mask", false); configuration.setValue("datetime.seconds.mask", false);  DateTimeMaskingProvider maskingProvider = new DateTimeMaskingProvider(configuration); String originalDateTime = "08-12-1981 00:00:00"; String maskedDateTime = maskingProvider.mask(originalDateTime); "<AssertPlaceHolder>"; }
[*] target: assertEquals(originalDateTime, maskedDateTime)
[-] pred: org. junit. Assert. assertEquals ( originalDateTime, maskedDateTime )
************************************
[+] input: testLoad() { TestTipProvider p = (TestTipProvider) new TestTipProvider().setManager(fManager); assertFalse(p.isReady()); p.loadNewTips(new NullProgressMonitor()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(p.isReady())
[-] pred: org. junit. Assert. assertTrue ( p. isReady() )
************************************
[+] input: givenClassWithModifiersButWithoutTypeParameters() { List<String> toVerify = classOrInterface() .asClass() .withModifiers(PUBLIC, ABSTRACT) .withName("Device") .withBody( "public int capacity = 34;", "public boolean hasPower = true;" ) .lines();  List<String> expected = asList( "public abstract class Device {", "", "    public int capacity = 34;", "    public boolean hasPower = true;", "", "}" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: IOException { BilibiliResponse<DynamicFlow> response = client.dynamicNew(Collections.singletonList(8)); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testConstructErrorType() { Result result = new Result(SystemErrorType.SYSTEM_BUSY); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_BUSY.getCode()); assertEquals(result.getMesg(), SystemErrorType.SYSTEM_BUSY.getMesg()); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
[+] input: testNullKeys() { when(scheduleUtil.whereForSettings(null)).thenCallRealMethod(); Query query = scheduleUtil.whereForSettings(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(query)
[-] pred: org. junit. Assert. assertNotNull ( query )
************************************
[+] input: output1() { WorkbookParameter workbookParameter = WorkbookParameter .builder() .build();  Assertions.assertNull(workbookParameter.getOutputFileName()); Assertions.assertNull(workbookParameter.getOutputFilePath()); Assertions.assertNull(workbookParameter.getOutputFile()); Assertions.assertNull(workbookParameter.getOutputStream());  Assertions."<AssertPlaceHolder>";  }
[*] target: assertTrue(workbookParameter.isXssf())
[-] pred: org. junit. Assert. assertTrue ( workbookParameter. isXssf() )
************************************
[+] input: testDeleteUserGroup_ClusterHostServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0); when(mockHostService.getHostListByClusterId(0)).thenReturn(Collections.emptyList());  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: generic() { GenericType expected = new GenericType(T); GenericType toVerify = Type.generic(T);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: bind_withTTL() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); targetInsertStatement = new TargetInsertStatement(propertyHelper, targetSession);  BoundStatement result = targetInsertStatement.bind(originRow, targetRow, 3600,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { final String json; try (Reader reader = new InputStreamReader(Objects.requireNonNull(TestDataBuilder.class .getResourceAsStream("/securityReport.json")))) { json = new BufferedReader(reader).lines().collect(Collectors.joining()); } catch (IOException e) { e.printStackTrace(); return; }  var mapper = new ObjectMapper(); var report = mapper.readValue(json, Report.class);  // Assertions to verify the parsed object assertNotNull(report); assertEquals("azure", report.getModuleNamespace()); assertEquals("foo", report.getModuleName()); assertEquals("1.0.0", report.getModuleVersion()); assertEquals("azurerm", report.getProvider());  var securityReport = report.getSecurityReport(); assertNotNull(securityReport); assertEquals(1, securityReport.get("main.tf").size()); SecurityFinding finding = securityReport.get("main.tf").get(0); assertEquals("AVD-AZU-0014", finding.getId());  TerraformDocumentation documentation = report.getDocumentation(); "<AssertPlaceHolder>"; assertEquals(1, documentation.getProviders().size()); assertEquals("azurerm", documentation.getProviders().get(0).getName()); assertEquals(1, documentation.getResources().size()); assertEquals("mykey", documentation.getResources().get(0).getName()); }
[*] target: assertNotNull(documentation)
[-] pred: org. junit. Assert. assertNotNull ( documentation )
************************************
[+] input: banksPass() { Bank[] bank = BrasilAPI.banks(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(bank)
[-] pred: org. junit. Assert. assertNotNull ( bank )
************************************
[+] input: generateGivenCovariant() { String expected = "? extends java.lang.Integer"; String toVerify = new TypeArgumentGenerator(INTEGER.covariant()).generate();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testFillCharacterMap() { int[] counters = new int[256]; Arrays.fill(counters, 0);  String input = "aabc@def.com";  int nA = IdentifierUtils.fillCharacterMap(input, counters);  "<AssertPlaceHolder>"; assertEquals(2, counters['a']); assertEquals(1, counters['b']); assertEquals(1, counters['@']); assertEquals(0, counters['w']); }
[*] target: assertEquals(0, nA)
[-] pred: org. junit. Assert. assertEquals ( 0, nA )
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
[+] input: IOException {  String input = "metric_name 123.45 67890\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(123.45, metric.getValue()); assertEquals(67890, metric.getTimestamp()); assertNull(metric.getLabelList()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: getRootDirectories() { final var rootDirectories = s3FileSystem.getRootDirectories(); "<AssertPlaceHolder>";  final var rootDirectoriesIterator = rootDirectories.iterator();  assertTrue(rootDirectoriesIterator.hasNext()); assertEquals(PATH_SEPARATOR, rootDirectoriesIterator.next().toString()); assertFalse(rootDirectoriesIterator.hasNext()); }
[*] target: assertNotNull(rootDirectories)
[-] pred: org. junit. Assert. assertNotNull ( rootDirectories )
************************************
[+] input: testDeterminePage01() { ValidatorForm validatorForm = new ValidatorForm(); ActionMapping mapping = new ActionMapping();  mapping.setAcceptPage(null); validatorForm.setPage(-1); int page = validatorForm.determinePage(mapping, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(Integer.MAX_VALUE, page)
[-] pred: org. junit. Assert. assertEquals ( Integer. MAX_VALUE, page )
************************************
[+] input: testPrepareSyncGetMemorySizeHandler() { SyncGetMemorySizeHandler handler = observableAspectTask.prepareSyncGetMemorySizeHandler(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testUpdateSql() { User user = new User(); user.setName("张三"); user.setId(1L); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "update user set name = #{name} where id = #{id}"); long update = commonDao.updateSql(params); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: Exception {  MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("city.mask.pseudorandom", true);  MaskingProvider maskingProvider = new CityMaskingProvider(maskingConfiguration);  Collection<ResourceEntry> entryCollection = LocalizationManager.getInstance().getResources(Resource.CITY, Collections.singletonList("gr")); Set<String> greekValues = new HashSet<>();  for(ResourceEntry entry: entryCollection) { InputStream inputStream = entry.createStream(); try (CSVParser reader = Readers.createCSVReaderFromStream(inputStream)) { for (CSVRecord line : reader) { String name = line.get(0); greekValues.add(name.toUpperCase()); } inputStream.close(); } }  String originalCity = "Πάτρα"; String maskedCity = maskingProvider.mask(originalCity);  String firstMask = maskedCity;  for(int i = 0; i < 100; i++) { maskedCity = maskingProvider.mask(originalCity); "<AssertPlaceHolder>"; assertTrue(greekValues.contains(maskedCity.toUpperCase())); }  }
[*] target: assertEquals(firstMask, maskedCity)
[-] pred: org. junit. Assert. assertEquals ( firstMask, maskedCity )
************************************
[+] input: testInvalid() { Identifier identifier = new ItalianVATCodeIdentifier();  for (String invalid : new String[]{ "0344921012", "0396719092AA", "BRGSFN81P10L682F" }) { "<AssertPlaceHolder>"; } }
[*] target: assertFalse(identifier.isOfThisType(invalid))
[-] pred: org. junit. Assert. assertFalse ( identifier. isOfThisType ( invalid ) )
************************************
[+] input: testSerializeWithHeaders() {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] expectedBytes = metricsData.toByteArray(); byte[] bytes = serializer.serialize("topic", headers, metricsData);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, bytes)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, bytes )
************************************
[+] input: testGetCurrentMetricsDataByMetric() {  Long monitorId = 1L; String metric = "cpuUsage"; CollectRep.MetricsData metricsData = mock(CollectRep.MetricsData.class);  memoryDataStorage.saveData(metricsData);  CollectRep.MetricsData result = memoryDataStorage.getCurrentMetricsData(monitorId, metric);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testComment() { List<Token> tokens = List.of( Token.builder().type(TokenType.Comment).value("# a = 5").build(), Token.builder().type(TokenType.LineBreak).value("\n").build(), Token.builder().type(TokenType.Variable).value("a").build(), Token.builder().type(TokenType.Operator).value("=").build(), Token.builder().type(TokenType.Numeric).value("5").build(), Token.builder().type(TokenType.Comment).value("# a is equal to 5").build() ); DefinitionContext.pushScope(DefinitionContext.newScope()); MemoryContext.pushScope(MemoryContext.newScope()); CompositeStatement statement = new CompositeStatement(null, "testComment"); StatementParser.parse(tokens, statement);  List<Statement> statements = statement.getStatements2Execute(); "<AssertPlaceHolder>";  assertEquals(ExpressionStatement.class, statements.get(0).getClass()); ExpressionStatement expressionStatement = (ExpressionStatement) statements.get(0);  assertEquals(expressionStatement.getExpression().getClass(), AssignmentOperator.class); AssignmentOperator assignStatement = (AssignmentOperator) expressionStatement.getExpression();  assertTrue(assignStatement.getLeft() instanceof VariableExpression); VariableExpression variableExpression = (VariableExpression) assignStatement.getLeft(); assertEquals("a", variableExpression.getName()); assertEquals(NumericValue.class, assignStatement.getRight().getClass()); NumericValue numericValue = (NumericValue) assignStatement.getRight();  assertEquals(5, numericValue.getValue());  DefinitionContext.endScope(); MemoryContext.endScope(); }
[*] target: assertEquals(1, statements.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statements. size ( ) )
************************************
[+] input: testCreateOrder_RemoteServiceThrowsException_RollbackOrder() { doThrow(new RuntimeException()).when(productService).subtractProductStockQuantity(any(OrderVm.class)); try { orderService.createOrder(orderPostVm); } catch (Exception e) {  } List<Order> orders = orderRepository.findAll(); "<AssertPlaceHolder>"; List<OrderItem> orderItems = orderItemRepository.findAll(); assertEquals(0, orderItems.size()); }
[*] target: assertEquals(0, orders.size())
[-] pred: org. junit. Assert. assertEquals ( 0, orders. size ( ) )
************************************
[+] input: shouldFindAllCustomers() {  List<CusCustomer> cusCustomerList = createDummyCusCustomerList();  List<CusCustomerDto> expectedResult = createDummyCusCustomerDtoList();  when(cusCustomerEntityService.findAllCustomers()).thenReturn(cusCustomerList);  List<CusCustomerDto> result = cusCustomerService.findAllCustomers();  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testOfferWhenTapdataEventIsNull() { boolean actual = mockHazelcastBaseNode.offer(null); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testGetLibPathNormal() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(stream, libPath); Assertions.assertEquals(mockPath, ato.get()); verify((URLClassLoader)classLoader, times(1)).getURLs(); assertVerify(1, 1, 1); }
[*] target: assertNotNull(libPath)
[-] pred: org. junit. Assert. assertNotNull ( libPath )
************************************
[+] input: testNeedSkipNormalNotName() { File f = mock(File.class); when(f.exists()).thenReturn(true); when(f.isFile()).thenReturn(true); when(f.getName()).thenReturn("install.py"); boolean needSkip = utils.needSkip(f); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(needSkip)
[-] pred: org. junit. Assert. assertTrue ( needSkip )
************************************
[+] input: testInclude() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("include-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testInclude"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testInclude");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "apple"}")); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: testNeedSkipNormalNormal() { File f = mock(File.class); when(f.exists()).thenReturn(true); when(f.isFile()).thenReturn(true); when(f.getName()).thenReturn("setup.py"); boolean needSkip = utils.needSkip(f); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(needSkip)
[-] pred: org. junit. Assert. assertFalse ( needSkip )
************************************
[+] input: shouldAddOpenListener() { component.onDrawerOpen(event -> { });  List<EventListener<AppLayoutDrawerOpenEvent>> listeners = component.getEventListeners(AppLayoutDrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<AppLayoutDrawerOpenEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: whenObjectAreEquivalentButDifferInCasing_ThenEqualsReturnsTrue() { UserId id1 = new UserId("Bob@Example.Com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteType expected = new ConcreteType(ERUDITE, asList(STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant())); ConcreteType toVerify = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testPseudorandom() {  MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("city.mask.pseudorandom", true);  MaskingProvider maskingProvider = new CityMaskingProvider(maskingConfiguration);  String originalCity = "Dublin"; String maskedCity = maskingProvider.mask(originalCity);  String firstMask = maskedCity;  for(int i = 0; i < 100; i++) { maskedCity = maskingProvider.mask(originalCity); "<AssertPlaceHolder>"; }  }
[*] target: assertEquals(firstMask, maskedCity)
[-] pred: org. junit. Assert. assertEquals ( firstMask, maskedCity )
************************************
[+] input: sholudCalculateLengthOfCGAsZero() { String testEmptyString = ""; int expected = 0; int actual = Properties.calculateLengthOfCG(testEmptyString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testInstantiation() { var user = new ContentDataUser<>() { public Object useContentData(Object contentData) throws InnerClassException { return null; } };  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.3.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseRelMig13OrMoreImpl.class.getName(), redirect.getClass().getName()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
[+] input: testGetGitHash() { String gitHash = VersionUtil.getGitHash(); "<AssertPlaceHolder>"; assertNotEquals("unknown", gitHash); assertFalse(gitHash.isEmpty()); }
[*] target: assertNotNull(gitHash)
[-] pred: org. junit. Assert. assertNotNull ( gitHash )
************************************
[+] input: validateGivenStaticMethod() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC, STATIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Method is static and cannot implement an abstract method"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testLoadFromStringSuccessComplete() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.loadFromString(""" <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml"><head><title></title></head><body> <p>body</p> </body></html>""", false, errors);  "<AssertPlaceHolder>"; assertEquals(xhtml.originalMimeType(), MimeType.APPLICATION_XHTML); assertEquals(0, errors.size()); }
[*] target: assertNotNull(xhtml)
[-] pred: org. junit. Assert. assertNotNull ( xhtml )
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalDate value = LocalDate.of(2020, 10, 1); component = new MaskedDateFieldSpinner("label", value); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(value, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( value, component. getValue() )
************************************
[+] input: test() { //when this.registerPage.insertEmailToRegister();  //then String expected = "camila002@email.com"; String actual = this.registerPage.getEmailNewAccount(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMessage2TapEventNullMessageEntity() { TapRecordEvent actual = hazelcastBaseNode.message2TapEvent(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testLoopByConfigConfigValueNotCollection() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn("string values"); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(0)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 0, 0); } }
[*] target: assertFalse(byConfig)
[-] pred: org. junit. Assert. assertFalse ( byConfig )
************************************
[+] input: testAssignment() {  String source = "a = 2 + 5"; List<Token> tokens = LexicalParser.parse(source);  "<AssertPlaceHolder>";  int count = 0; assertEquals(TokenType.Variable, tokens.get(count).getType()); assertEquals("a", tokens.get(count).getValue()); assertEquals(1, tokens.get(count).getRowNumber());  assertEquals(TokenType.Operator, tokens.get(++count).getType()); assertEquals("=", tokens.get(count).getValue()); assertEquals(1, tokens.get(count).getRowNumber());  assertEquals(TokenType.Numeric, tokens.get(++count).getType()); assertEquals("2", tokens.get(count).getValue()); assertEquals(1, tokens.get(count).getRowNumber());  assertEquals(TokenType.Operator, tokens.get(++count).getType()); assertEquals("+", tokens.get(count).getValue()); assertEquals(1, tokens.get(count).getRowNumber());  assertEquals(TokenType.Numeric, tokens.get(++count).getType()); assertEquals("5", tokens.get(count).getValue()); assertEquals(1, tokens.get(count).getRowNumber()); }
[*] target: assertEquals(5, tokens.size())
[-] pred: org. junit. Assert. assertEquals ( 5, tokens. size ( ) )
************************************
[+] input: testResolveArchiveFile() { ClassLoader classLoader = ClassLoader.getSystemClassLoader(); URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); File archiveFile = URLUtils.resolveArchiveFile(resourceURL); "<AssertPlaceHolder>"; }
[*] target: assertTrue(archiveFile.exists())
[-] pred: org. junit. Assert. assertTrue ( archiveFile. exists ( ) )
************************************
[+] input: shouldSetAndGetCacheCustomFilters() { component = new FileChooserDialog(); component.setCacheCustomFilters(true); "<AssertPlaceHolder>";  assertEquals("true", component.getAttributes().get("cache-custom-filters")); }
[*] target: assertTrue(component.isCacheCustomFilters())
[-] pred: org. junit. Assert. assertTrue ( component. isCacheCustomFilters() )
************************************
[+] input: getAll() { final List<Product> products = productService.getAll(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(products.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( products. isEmpty ( ) )
************************************
[+] input: shouldAddCloseListener() { component.onClose(event -> { });  List<EventListener<DialogCloseEvent>> listeners = component.getEventListeners(DialogCloseEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DialogCloseEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: IllegalAccessException { LocalS3Router localS3Router = new LocalS3Router();  HttpRequestHandler handler1 = mock(HttpRequestHandler.class, "handler1"); localS3Router.route(Route.builder() .method(HttpMethod.GET).path("/a") .paramMatcher(params -> params.containsKey("versioning")) .handler(handler1) .build());  HttpRequestHandler handler2 = mock(HttpRequestHandler.class, "handler2"); localS3Router.route(Route.builder() .method(HttpMethod.GET).path("/a") .paramMatcher(params -> params.containsKey("versioning")) .headerMatcher(headers -> headers.containsKey("x-header")) .handler(handler2) .build());  HttpRequestHandler matchedHandler1 = localS3Router.match(HttpRequest.builder() .method(HttpMethod.GET).path("/a") .params(Map.of("versioning", List.of("true"))) .build()); "<AssertPlaceHolder>";  HttpRequestHandler matchedHandler2 = localS3Router.match(HttpRequest.builder() .method(HttpMethod.GET).path("/a") .params(Map.of("versioning", List.of("true"))) .headers(Map.of("x-header", "value")) .build()); assertSame(handler2, matchedHandler2); }
[*] target: assertSame(handler1, matchedHandler1)
[-] pred: org. junit. Assert. assertSame ( handler1, matchedHandler1 )
************************************
[+] input: IOException {  String input = "metric_name{label1="value1"} +Inf 67890\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(Double.POSITIVE_INFINITY, metric.getValue()); assertEquals(67890, metric.getTimestamp()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidInitializer() { ContainingClass containingClass = getValidContainingClass();  Method initializer = getInitializer( withAnnotations(INITIALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToInitializeTypeConstructor(LIST.with(placeholder().covariant())), withToInitializeTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.of(Initializer.of(initializer.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()))), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.empty() ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, initializer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: calculateCodonStartIndicesFrame3Test() { int[] expectedResult = {2, 5, 8, 11, 14, 17, 20}; CodonFrame temp = new CodonFrame(TEST_SEQUENCE, (short) 3, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(TEST_SEQUENCE); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: testNoExceedCloudTaskLimitNum() { when(workerService.findByProcessId(processId, user, "user_id", "agentTags", "process_id")).thenReturn(workerDto); when(workerService.getLimitTaskNum(workerDto, user)).thenReturn(2); CalculationEngineVo calculationEngineVo = new CalculationEngineVo(); calculationEngineVo.setRunningNum(1); calculationEngineVo.setTaskLimit(2); when(taskService.runningTaskNum(processId, user)).thenReturn(3); when(taskService.subCronOrPlanNum(taskDto,3)).thenReturn(2); when(workerService.scheduleTaskToEngine(taskDto, user, "task", taskDto.getName())).thenReturn(calculationEngineVo); when(taskService.subCronOrPlanNum(taskDto,1)).thenReturn(1); CalculationEngineVo result = taskScheduleService.cloudTaskLimitNum(taskDto, user, false); "<AssertPlaceHolder>"; }
[*] target: assertEquals(calculationEngineVo, result)
[-] pred: org. junit. Assert. assertEquals ( calculationEngineVo, result )
************************************
[+] input: getAclsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByEnv(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getAclsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: withTypeParameters() { TypeParameterName A = TypeParameterName.of("A"); TypeParameterName B = TypeParameterName.of("B"); TypeParameterName C = TypeParameterName.of("C"); String toVerify = toTest() .withTypeParameters(A.asTypeParameter(), B.extending(COMPARABLE.with(B))) .withTypeParameters(C.asTypeParameter()) .getTypeParametersGenerator() .generate(); String expected = "<A, B extends java.lang.Comparable<B>, C>"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: 아이템에_가격이_있으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(Money.ZERO); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(Money.ZERO); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
[+] input: testVulnerableSoftwareFields() { VulnerableSoftware vs = new VulnerableSoftware(); vs.setPart("a"); vs.setVendor("acme"); vs.setProduct("cool-product"); vs.setVersion("1.1.0"); vs.setUpdate("*"); vs.setEdition("*"); vs.setLanguage("*"); vs.setSwEdition("*"); vs.setTargetSw("*"); vs.setTargetHw("*"); vs.setOther("*"); vs.setVersionEndExcluding("111"); vs.setVersionEndIncluding("222"); vs.setVersionStartExcluding("333"); vs.setVersionStartIncluding("444"); vs.setVulnerable(true); Assertions.assertEquals("a", vs.getPart()); Assertions.assertEquals("acme", vs.getVendor()); Assertions.assertEquals("cool-product", vs.getProduct()); Assertions.assertEquals("1.1.0", vs.getVersion()); Assertions.assertEquals("*", vs.getUpdate()); Assertions.assertEquals("*", vs.getEdition()); Assertions.assertEquals("*", vs.getLanguage()); Assertions.assertEquals("*", vs.getSwEdition()); Assertions.assertEquals("*", vs.getTargetSw()); Assertions.assertEquals("*", vs.getTargetHw()); Assertions.assertEquals("*", vs.getOther()); Assertions.assertEquals("111", vs.getVersionEndExcluding()); Assertions.assertEquals("222", vs.getVersionEndIncluding()); Assertions.assertEquals("333", vs.getVersionStartExcluding()); Assertions.assertEquals("444", vs.getVersionStartIncluding()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(vs.isVulnerable())
[-] pred: org. junit. Assert. assertTrue ( vs. isVulnerable ( ) )
************************************
[+] input: testSimple() {  DataBuilder builder = new DataBuilder(). // addData("name", "John"). // addData("description", "Hello World");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: covariantConcreteTypeConstructorCanAcceptGivenEquivalentInvariantConcreteTypeConstructor() { ConcreteTypeConstructor target = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.covariant()); ConcreteTypeConstructor source = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(target.canAccept(source))
[-] pred: org. junit. Assert. assertTrue ( target. canAccept ( source ) )
************************************
[+] input: testGetAlertConverge() {  long convergeId = 1L; AlertConverge alertConverge = new AlertConverge(); when(alertConvergeDao.findById(convergeId)).thenReturn(Optional.of(alertConverge)); AlertConverge result = alertConvergeService.getAlertConverge(convergeId);  verify(alertConvergeDao, times(1)).findById(convergeId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(alertConverge, result)
[-] pred: org. junit. Assert. assertEquals ( alertConverge, result )
************************************
[+] input: shouldParseDate() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "12"; String mask = "%Dz-%Mz-%Yz"; Locale locale = Locale.US; LocalDate expected = LocalDate.of(2023, 6, 12); int julian = new JulianLocaleDateTransformer().transformToComponent(expected);  when(bridge.parseDate(input, mask, locale)).thenReturn(julian);  LocalDate result = MaskDecorator.parseDate(input, mask, locale);  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testHorizontalLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElements(new String[] { "firstName", "lastName", "role" });  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testDeleteUserGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0);  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testNormal() { TablePathInfo tablePathInfo = parseRelMig13OrMore.getTablePathInfo(contentMapping); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("table", tablePathInfo.getTable()); Assertions.assertEquals("schema", tablePathInfo.getSchema()); Assertions.assertEquals("database", tablePathInfo.getDatabase()); verify(parseRelMig13OrMore).getFromMap(contentMapping, KeyWords.TABLE); verify(parseRelMig13OrMore).getFromMap(parseRelMig13OrMore.project, KeyWords.CONTENT); verify(parseRelMig13OrMore).getFromMap(content, KeyWords.TABLES); verify(parseRelMig13OrMore).getFromMap(tables, "tableId"); verify(parseRelMig13OrMore).getFromMap(tablePath, KeyWords.PATH); verify(tableInfo).get(KeyWords.DATABASE); verify(tableInfo).get(KeyWords.SCHEMA); verify(tableInfo).get(KeyWords.TABLE); verify(parseRelMig13OrMore, times(4)).parseMap(any()); }
[*] target: assertNotNull(tablePathInfo)
[-] pred: org. junit. Assert. assertNotNull ( tablePathInfo )
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButElementsContainsNullString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); packages.add("mock"); packages.add(null); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Object.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1,  1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: methodAdvicesTest() { List<?> actResult = okHttpCallInstrumentation.methodAdvices(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, actResult.size()); }
[*] target: assertNotNull(actResult)
[-] pred: org. junit. Assert. assertNotNull ( actResult )
************************************
[+] input: registroBRPass() { RegistroBR registroBR = BrasilAPI.registroBR("savio.pw"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(registroBR)
[-] pred: org. junit. Assert. assertNotNull ( registroBR )
************************************
[+] input: parse_ShouldParseStringToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: testSerializeWithMetricsData() {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = serializer.serialize("", metricsData);  "<AssertPlaceHolder>"; assertArrayEquals(metricsData.toByteArray(), bytes); }
[*] target: assertNotNull(bytes)
[-] pred: org. junit. Assert. assertNotNull ( bytes )
************************************
[+] input: testBuildTaskRetryConfigNormal() { TaskConfig taskConfig = mock(TaskConfig.class); doCallRealMethod().when(tapTableMap).buildTaskRetryConfig(taskConfig); tapTableMap.buildTaskRetryConfig(taskConfig); Object actual = ReflectionTestUtils.getField(tapTableMap, "taskConfig"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(taskConfig,actual)
[-] pred: org. junit. Assert. assertEquals ( taskConfig, actual )
************************************
[+] input: givenConcreteTypeWithTypeParameters() { Type type = FUNCTION.with( STRING.contravariant(), OBJECT.covariant() ); String toVerify = type(type).generate(); String expected = "java.util.function.Function<? super java.lang.String, ? extends java.lang.Object>"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test_newModelLastUpdateIsNull() { try (MockedStatic<MetaDataBuilderUtils> mockedStatic = Mockito.mockStatic(MetaDataBuilderUtils.class)){ mockedStatic.when(()->MetaDataBuilderUtils.generateQualifiedName(any(),any(DataSourceConnectionDto.class),any())).thenReturn("test-qualified"); List<MetadataInstancesDto> input = new ArrayList<>(); MetadataInstancesDto metadataInstancesDto = new MetadataInstancesDto(); metadataInstancesDto.setMetaType("test"); metadataInstancesDto.setOriginalName("test"); metadataInstancesDto.setLastUpdate(null); input.add(metadataInstancesDto); List<MetadataInstancesDto> oldMetadataInstances = new ArrayList<>(); MetadataInstancesDto old = new MetadataInstancesDto(); old.setQualifiedName("test-qualified"); old.setMetaType("test"); old.setOriginalName("test"); old.setLastUpdate(1L); oldMetadataInstances.add(old); when(metadataInstancesService.findAllDto(any(),any())).thenReturn(oldMetadataInstances); List<MetadataInstancesDto> result = metadataUtil.modelNext(input,mock(DataSourceConnectionDto.class),"test",mock(UserDetail.class),false); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
[+] input: shouldSetGetOptionIndex() { int index = 1; component.setOptionIndex(index); verify(mockMixin).setOptionIndex(index);  when(mockMixin.getOptionIndex()).thenReturn(index); int result = component.getOptionIndex(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(index, result)
[-] pred: org. junit. Assert. assertEquals ( index, result )
************************************
[+] input: testToList() { int[] intArray = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}; List<Integer> list = ReflectionUtils.toList(intArray); Object expectedList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); assertEquals(expectedList, list);   int[][] intIntArray = new int[][]{{1, 2, 3}, {4, 5, 6,}, {7, 8, 9}}; list = ReflectionUtils.toList(intIntArray); expectedList = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, list)
[-] pred: org. junit. Assert. assertEquals ( expectedList, list )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { UserId id1 = new UserId("bob@example.com");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: testChangeConnectionAndNullFilter() { String filters = null;  DataSourceEntity dataSourceEntity = mock(DataSourceEntity.class); when(dataSourceRepository.findAndModify(any(Query.class), any(Update.class), eq(userDetail))).thenReturn(dataSourceEntity);  UpdateResult updateResult = mock(UpdateResult.class); doAnswer(invocation -> { Document doc = invocation.<Query>getArgument(0).getQueryObject(); assertEquals(connId, doc.getString("source._id")); assertEquals("{"$ne": true}", doc.get("is_deleted", Document.class).toJson()); assertEquals(MetaType.table, doc.get("meta_type")); assertEquals(SourceTypeEnum.SOURCE, doc.get("sourceType")); assertEquals(fromSchemaVersion, doc.getString("source." + DataSourceConnectionDto.FIELD_SCHEMA_VERSION));  doc = invocation.<Update>getArgument(1).getUpdateObject().get("$set", Document.class); assertEquals(toSchemaVersion, doc.getString("source." + DataSourceConnectionDto.FIELD_SCHEMA_VERSION)); assertEquals(lastUpdate, doc.getLong(DataSourceConnectionDto.FIELD_LAST_UPDATE)); return updateResult; }).when(metadataInstancesService).updateMany(any(Query.class), any(Update.class));  long count = dataSourceService.updatePartialSchema(connId, loadFieldsStatus, lastUpdate, fromSchemaVersion, toSchemaVersion, filters, userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW"); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
[+] input: getCategoryById_Success() { when(mediaService.getMedia(category.getImageId())).thenReturn(noFileMediaVm); CategoryGetDetailVm categoryGetDetailVm = categoryService.getCategoryById(category.getId()); "<AssertPlaceHolder>"; assertEquals("name", categoryGetDetailVm.name()); }
[*] target: assertNotNull(categoryGetDetailVm)
[-] pred: org. junit. Assert. assertNotNull ( categoryGetDetailVm )
************************************
[+] input: givenFullyQualifiedName() { String toVerify = toTest() .withType(BIG_DECIMAL.getFullyQualifiedName()) .getObjectPathOrTypeGenerator() .generate();  String expected = "java.math.BigDecimal";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testEmpty() { list.clear(); Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(0, actual.get("error")); assertEquals(0, actual.get("running")); assertEquals(0, actual.get("done")); assertEquals(0, actual.get("waiting")); assertEquals(0, actual.get("scheduling")); assertEquals(0, actual.get("stopping")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: test() { String str = "{"value":123}"; assertEquals( 123, JSON.parseObject(str, Bean.class).value.get() );  assertEquals( 123, JSON.parseObject(str).to(Bean.class).value.get() );  ObjectReader objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Bean.class); FieldReader fieldReader = objectReader.getFieldReader("value"); assertEquals("getValue", fieldReader.toString()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fieldReader.isReadOnly())
[-] pred: org. junit. Assert. assertTrue ( fieldReader. isReadOnly() )
************************************
[+] input: InterruptedException { // GIVEN var device = new Device(new DeviceId(UUID.randomUUID())); var expectedCustomerId = new CustomerId(UUID.randomUUID()); device.setCustomerId(expectedCustomerId);  when(ctxMock.getDeviceService()).thenReturn(deviceServiceMock); doReturn(device).when(deviceServiceMock).findDeviceById(any(), any()); when(ctxMock.getDbCallbackExecutor()).thenReturn(DB_EXECUTOR);  // WHEN var actualCustomerId = EntitiesCustomerIdAsyncLoader.findEntityIdAsync(ctxMock, device.getId()).get();  // THEN "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCustomerId, actualCustomerId)
[-] pred: org. junit. Assert. assertEquals ( expectedCustomerId, actualCustomerId )
************************************
[+] input: test() { String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReader jsonReader = JSONReader.of(bytes, 0, bytes.length, StandardCharsets.UTF_8); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
[+] input: testResolvePath() { String path = null; String expectedPath = null; String resolvedPath = null;  resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = ""; expectedPath = ""; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "/abc/"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "//abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);   path = "//\\abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPath, resolvedPath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, resolvedPath )
************************************
[+] input: testEncodeKey() {  String key = "testKey"; ByteBuffer encodedKey = codec.encodeKey(key); String decodedKey = StandardCharsets.UTF_8.decode(encodedKey).toString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
[+] input: testForDateTime() { Long expect = 1718953878000L; Object value = new DateTime(expect); Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: schedule() { ScheduledFuture<?> scheduleTest = TimerService.schedule(() -> System.out.println("schedule test"), 0, TimeUnit.MILLISECONDS); Assertions."<AssertPlaceHolder>"; scheduleTest.cancel(true); }
[*] target: assertNotNull(scheduleTest)
[-] pred: org. junit. Assert. assertNotNull ( scheduleTest )
************************************
[+] input: testInitMonitor() { MonitorManager monitorManager = hazelcastBaseNode.initMonitor(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(monitorManager)
[-] pred: org. junit. Assert. assertNotNull ( monitorManager )
************************************
[+] input: writeStringLatin1() { byte[] bytes = new byte[256]; for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte) i; } JSONWriter jsonWriter = (JSONWriter) new JSONWriterUTF8Vector.Factory().apply(JSONFactory.createWriteContext()); jsonWriter.writeStringLatin1(bytes); String json = jsonWriter.toString(); String str = new String(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1); Object parse = JSON.parse(json); "<AssertPlaceHolder>"; }
[*] target: assertEquals(str, parse)
[-] pred: org. junit. Assert. assertEquals ( str, parse )
************************************
[+] input: testCompareSimpleSame() { IndexSee see1 = createSee(SEE_ECLIPSE); IndexSee see2 = createSee(SEE_ECLIPSE); assertTrue (see1.equals(see2)); assertEquals(0, see1.compareTo(see2)); assertEquals(0, see2.compareTo(see1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(see1.hashCode(), see2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( see1. hashCode ( ), see2. hashCode() )
************************************
[+] input: Exception { final Statement mockClosedStatement = mock(Statement.class); when(mockClosedStatement.isClosed()).thenReturn(true); when(mockClosedStatement.getConnection()).thenThrow(IllegalStateException.class);  final ResultSet mockResultSet = mock(ResultSet.class); when(mockResultSet.getStatement()).thenReturn(mockClosedStatement);  final Connection stmtConn = WrapperUtils.getConnectionFromSqlObject(mockClosedStatement); assertNull(stmtConn); final Connection rsConn = WrapperUtils.getConnectionFromSqlObject(mockClosedStatement); "<AssertPlaceHolder>"; }
[*] target: assertNull(rsConn)
[-] pred: org. junit. Assert. assertNull ( rsConn )
************************************
[+] input: test1() { List<Worker> workerList = new ArrayList<>(); Worker worker = new Worker(); workerList.add(worker); doReturn(workerList).when(workerService).findAvailableAgent(any()); String result = workerService.getWorkerCurrentTime(mock(UserDetail.class)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: BBjException { busyIndicator.setBackdropVisible(true);  verify(mockIndicator, atLeast(1)).setAttribute("no-backdrop", "false");  when(mockIndicator.getAttribute("no-backdrop")).thenReturn("false"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(busyIndicator.isBackdropVisible())
[-] pred: org. junit. Assert. assertTrue ( busyIndicator. isBackdropVisible ( ) )
************************************
[+] input: testConvertWhenConversionTypeIsCodec() { //        CqlConversion.Type conversionType = CqlConversion.Type.CODEC; //        List<CqlConversion.Type> conversionTypeList = Collections.singletonList(conversionType); // //        CqlConversion cqlConversion = spy(new CqlConversion(fromDataType, toDataType, codecRegistry)); //        doReturn(conversionTypeList).when(cqlConversion).getConversionTypeList(); //        doReturn(Collections.singletonList(fromDataType)).when(cqlConversion).getFromDataTypeList(); //        doReturn(Collections.singletonList(toDataType)).when(cqlConversion).getToDataTypeList(); // //        Object inputData = new Object(); //        Object expectedResult = new Object(); // //        // Stub the convert_ONE() method to return expectedResult when called with specific arguments //        doReturn(expectedResult).when(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        Object result = cqlConversion.convert(inputData); // //        // Verify that convert_ONE() was called with the expected arguments //        verify(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: getProducerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getTopicsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByEnv(TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsEnvOverview( TestConstants.TENANT_ID, Mockito.mock(PermissionType.class));  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldIsRandomDNAReturnTrue() { boolean actual = Properties.isRandomDNA(dnaString); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: Exception { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); JarFile jarFile = toJarFile(resourceURL); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(jarFile)
[-] pred: org. junit. Assert. assertNotNull ( jarFile )
************************************
[+] input: testPersistence() {  String email1 = "joedoe1@foo.com"; String email2 = "joedoe2@foo.com";  MaskingProvider emailMaskingProvider = new EmailMaskingProvider(new MaskingProviderFactory(new ConfigurationManager(), Collections.emptyMap()));  DefaultMaskingConfiguration configuration = new DefaultMaskingConfiguration(); configuration.setValue("persistence.file", "/tmp"); configuration.setValue("persistence.namespace", "AAAA");  FileBackedPersistentMaskingProvider provider = new FileBackedPersistentMaskingProvider(emailMaskingProvider, configuration);  String maskedEmail1_once = provider.mask(email1); String maskedEmail1_twice = provider.mask(email1); "<AssertPlaceHolder>";  String maskedEmail2_once = provider.mask(email2); assertNotEquals(maskedEmail2_once, maskedEmail1_once); }
[*] target: assertEquals(maskedEmail1_once, maskedEmail1_twice)
[-] pred: org. junit. Assert. assertEquals ( maskedEmail1_once, maskedEmail1_twice )
************************************
[+] input: bind_withTTL() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: calculateCodonStartIndicesUsingDnaSequenceWithLengthTwentyTwoFrame2Test() { int[] expectedResult = {1, 4, 7, 10, 13, 16, 19}; String testSequence = DNA_SEQUENCE_WITH_LENGTH_TWENTY_TWO; CodonFrame temp = new CodonFrame(testSequence, (short) 2, 1, 100); ReadingFrames readingFrameTest = new ReadingFrames(temp); int[] result = readingFrameTest.calculateCodonStartIndices(testSequence); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedResult, result )
************************************
[+] input: givenMultipleLines() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .withBody(asList("Line 3", "Line 4")) .withBody("Line 5") .getBodyGenerator() .lines();  List<String> expected = asList( "Line 1", "Line 2", "Line 3", "Line 4", "Line 5" );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testTlsConfig() { ConfigDef confDef = QuestDBSinkConnectorConfig.conf(); Map<String, String> config = baseConnectorProps(); config.put("client.conf.string", "http::addr=localhost;tls=true"); config.put("tls", "true"); QuestDBSinkConnectorConfig sinkConnectorConfig = new QuestDBSinkConnectorConfig(confDef, config);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(sinkConnectorConfig.isTls())
[-] pred: org. junit. Assert. assertTrue ( sinkConnectorConfig. isTls() )
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidIntervalExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "10m", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
[+] input: testEncryptDecrypt() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(VALID_KEY_LENGTH)); List<String> plaintextStrings = new ArrayList<>(); for (int index = 0; index < 10; index++) { plaintextStrings.add(RandomStringUtils.randomAlphanumeric(RandomUtils.nextInt(5, 30))); }  List<String> encryptedStrings = new ArrayList<>(); for (String plainText : plaintextStrings) { encryptedStrings.add(converter.convertToDatabaseColumn(plainText)); }  for (int index = 0; index < 10; index++) { String plaintext = plaintextStrings.get(index); String decryptedText = converter.convertToEntityAttribute(encryptedStrings.get(index)); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(plaintext, decryptedText)
[-] pred: org. junit. Assert. assertEquals ( plaintext, decryptedText )
************************************
[+] input: withName() { Parameter expected = new Parameter(STRING_TYPE, "s"); Parameter toVerify = STRING_TYPE.withName("s");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: raw() { String expected = "String"; String toVerify = new ClassName("String").raw();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal expected = TypeCodecs.DECIMAL.parse(valueAsString); BigDecimal result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: IOException {  String input = "metric_name{label1="value1"} 123.45\n"; InputStream inputStream = new ByteArrayInputStream(input.getBytes());  List<Metric> metrics = PrometheusUtil.parseMetrics(inputStream);  "<AssertPlaceHolder>"; assertEquals(1, metrics.size());  Metric metric = metrics.get(0); assertEquals("metric_name", metric.getMetricName()); assertEquals(123.45, metric.getValue()); assertEquals(null, metric.getTimestamp()); // Assuming 0 for no timestamp  List<Label> labels = metric.getLabelList(); assertEquals(1, labels.size()); assertEquals("label1", labels.get(0).getName()); assertEquals("value1", labels.get(0).getValue()); }
[*] target: assertNotNull(metrics)
[-] pred: org. junit. Assert. assertNotNull ( metrics )
************************************
[+] input: testStartInstallService_ClusterServiceCommandHostCommandServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceCommandService.listByIds(...). final ClusterServiceCommandEntity clusterServiceCommandEntity = new ClusterServiceCommandEntity(); clusterServiceCommandEntity.setCommandId("commandId"); clusterServiceCommandEntity.setCreateBy("createBy"); clusterServiceCommandEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandEntity.setCommandName("commandName"); clusterServiceCommandEntity.setCommandState(CommandState.WAIT); clusterServiceCommandEntity.setCommandStateCode(0); clusterServiceCommandEntity.setCommandProgress(0); clusterServiceCommandEntity.setClusterId(0); clusterServiceCommandEntity.setServiceName("parentName"); clusterServiceCommandEntity.setCommandType(0); clusterServiceCommandEntity.setDurationTime("durationTime"); clusterServiceCommandEntity.setEndTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandEntity.setServiceInstanceId(0); final Collection<ClusterServiceCommandEntity> clusterServiceCommandEntities = Arrays.asList( clusterServiceCommandEntity); when(mockCommandService.listByIds(Arrays.asList("value"))).thenReturn(clusterServiceCommandEntities);  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  when(mockHostCommandService.getHostCommandListByCommandId("commandId")).thenReturn(Collections.emptyList());  // Run the test final Result result = serviceInstallServiceImplUnderTest.startInstallService(0, Arrays.asList("value"));  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Integer value = 10; String expected = TypeCodecs.INT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testMaskPseudorandom() { MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("address.mask.pseudorandom", true);  AddressIdentifier identifier = new AddressIdentifier(); AddressMaskingProvider addressMaskingProvider = new AddressMaskingProvider(maskingConfiguration);  String[] validAddresses = { "200 E Main St, Phoenix AZ 85123, USA", "200 E Main St" };  for(String validAddress: validAddresses) { String randomAddress = addressMaskingProvider.mask(validAddress); assertTrue(identifier.isOfThisType(randomAddress)); assertNotEquals(randomAddress, validAddress);  for (int i = 0; i < 100; i++) { String rnd = addressMaskingProvider.mask(validAddress); "<AssertPlaceHolder>"; } } }
[*] target: assertEquals(randomAddress, rnd)
[-] pred: org. junit. Assert. assertEquals ( randomAddress, rnd )
************************************
[+] input: testTrim() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("trim-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testTrim"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testTrim");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  OR price = 200";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
[+] input: createCustomer() { //given Customer customer = new Customer(); customer.setId("1"); customer.setCustomerFullName("John"); customer.setCustomerType("ACTIVE");  CustomerEntity customerEntity = new CustomerEntity(); customerEntity.setId("1"); customerEntity.setCustomerType("ACTIVE"); customerEntity.setCustomerFullName("John");  //when when(customerMapper.toEntity(customer)).thenReturn(customerEntity); when(customerRepository.save(any())).thenReturn(customerEntity); when(customerMapper.toDto(customerEntity)).thenReturn(customer);  Customer customer2 = customerService.createCustomer(customer);  //then verify(customerRepository, times(1)).save(any()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(customer, customer2)
[-] pred: org. junit. Assert. assertEquals ( customer, customer2 )
************************************
[+] input: test_2_plus_2_attr_and_ts() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_BODY, "result", 2, false, false, null), new TbMathArgument(TbMathArgumentType.ATTRIBUTE, "a"), new TbMathArgument(TbMathArgumentType.TIME_SERIES, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().toString());  when(attributesService.find(tenantId, originator, AttributeScope.SERVER_SCOPE, "a")) .thenReturn(Futures.immediateFuture(Optional.of(new BaseAttributeKvEntry(System.currentTimeMillis(), new DoubleDataEntry("a", 2.0)))));  when(tsService.findLatest(tenantId, originator, "b")) .thenReturn(Futures.immediateFuture(Optional.of(new BasicTsKvEntry(System.currentTimeMillis(), new LongDataEntry("b", 2L)))));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(4, resultJson.get("result").asInt()); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField("label", dateTime); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
[+] input: testGetNullRemoveFields() { TapUpdateRecordEvent tapUpdateRecordEvent = new TapUpdateRecordEvent(); List<String> removeFields = TapEventUtil.getRemoveFields(tapUpdateRecordEvent); "<AssertPlaceHolder>"; }
[*] target: assertNull(removeFields)
[-] pred: org. junit. Assert. assertNull ( removeFields )
************************************
[+] input: testGetLocationByName() { StringValue locationName = StringValue.newBuilder().setValue("locationName").build(); MonitoringLocationDTO expectedLocation = MonitoringLocationDTO.newBuilder().build(); when(tenantLookup.lookupTenantId(any())).thenReturn(Optional.of(TENANT_ID)); when(service.findByLocationAndTenantId(anyString(), anyString())).thenReturn(Optional.of(expectedLocation));  grpcService.getLocationByName(locationName, getResponseObserver);  verify(getResponseObserver).onNext(getResponseCaptor.capture()); verify(getResponseObserver).onCompleted(); MonitoringLocationDTO response = getResponseCaptor.getValue(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLocation, response)
[-] pred: org. junit. Assert. assertEquals ( expectedLocation, response )
************************************
[+] input: of() { ArrayTypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); ArrayTypeConstructor toVerify = ArrayTypeConstructor.of(new PlaceholderTypeConstructor());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: test() { // 判断数据源是否加载 if (Boolean.FALSE.equals(MutilConnectionPool.check("test"))) { // 加载数据源 MutilConnectionPool.init("test", "jdbc:h2:file:./data/demo;AUTO_SERVER=TRUE", "sa", ""); } SQL<User> userSQL = new SQL<User>() { }; // 判断表是否存在 if (Boolean.TRUE.equals(MutilConnectionPool.run("test", conn -> userSQL.isTableExists(conn)))) { // 删除表 MutilConnectionPool.run("test", conn -> userSQL.drop().dropTable(conn)); } // 创建表 MutilConnectionPool.run("test", conn -> userSQL.create().createTable(conn)); Assertions.assertEquals(true, MutilConnectionPool.check("test")); // 插入数据 int count = MutilConnectionPool.run("test", conn -> userSQL.insert().addSet("user_name", "11111").executeUpdate(conn)); Assertions.assertEquals(count, 1); // 更新数据 count = MutilConnectionPool.run("test", conn -> userSQL.update().addSet("user_name", "22222").addWhereEQ("user_name", "11111").executeUpdate(conn)); Assertions.assertEquals(count, 1); // 查询数据 List<User> userList = MutilConnectionPool.run("test", conn -> userSQL.select().addWhereEQ("user_name", "22222").executeQuery(conn)); Assertions.assertEquals(userList.size(), 1); // 删除数据 count = MutilConnectionPool.run("test", conn -> userSQL.delete().addWhereEQ("user_name", "22222").executeUpdate(conn)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(count, 1)
[-] pred: org. junit. Assert. assertEquals ( count, 1 )
************************************
[+] input: validateGivenValidMethod() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter()), Optional.of(LIST.with(T)), "myFunction", asList(Parameter.of(ARRAY_LIST.with(T), "value")) );  Validated<String, InitializerOrFinalizerValidator.Result> expected = Validated.valid(InitializerOrFinalizerValidator.Result.of("myFunction", ARRAY_LIST.with(T), ARRAY_LIST.asTypeConstructor(), LIST.with(T), LIST.asTypeConstructor())); Validated<String, InitializerOrFinalizerValidator.Result> toVerify = InitializerOrFinalizerValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testIsValidWithNullValue() { DoesNotContain doesNotContain = mock(DoesNotContain.class); when(doesNotContain.chars()).thenReturn(new String[]{"@", "#"}); validator.initialize(doesNotContain);  String value = null; boolean result = validator.isValid(value, context);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testIsValidWithInvalidValue() { DoesNotContain doesNotContain = mock(DoesNotContain.class); when(doesNotContain.chars()).thenReturn(new String[]{"@", "#"}); validator.initialize(doesNotContain);  String value = "abc@de"; boolean result = validator.isValid(value, context);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: isPositive_AllGood_IsPositive() { final var candidate = 10; final var isPositive = subject.isPositive(candidate);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isPositive)
[-] pred: org. junit. Assert. assertTrue ( isPositive )
************************************
[+] input: testCheckTableExistNormal() { String connectionId = "111"; String tableName = "table"; doReturn(1L).when(metadataInstancesService).count(any(Query.class),any(UserDetail.class)); boolean actual = metadataInstancesService.checkTableExist(connectionId, tableName, userDetail); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true,actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: testNeedSkipNormalNotFile() { File f = mock(File.class); when(f.exists()).thenReturn(true); when(f.isFile()).thenReturn(false); when(f.getName()).thenReturn("setup.py"); boolean needSkip = utils.needSkip(f); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(needSkip)
[-] pred: org. junit. Assert. assertTrue ( needSkip )
************************************
[+] input: testInterceptAspects() { List<Class<? extends Aspect>> list = observableAspectTask.interceptAspects(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(list)
[-] pred: org. junit. Assert. assertNull ( list )
************************************
[+] input: testSkipNotIsomorphism() { skipDetector.setIsomorphism(false); //when(skipDetector.isomorphism).thenReturn(false); when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
[+] input: bind_withWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetInsertStatement = new TargetInsertStatement(propertyHelper, targetSession);  BoundStatement result = targetInsertStatement.bind(originRow, targetRow, null,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testNormal() { GoogleAnalyticsPlatform platform = new GoogleAnalyticsPlatform(); CloseableHttpClient client = platform.getClient(); "<AssertPlaceHolder>"; try { client.close(); } catch (IOException e) { } }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
[+] input: testSerializeWithNullAlert() {  byte[] bytes = alertSerializer.serialize("", null); "<AssertPlaceHolder>"; }
[*] target: assertNull(bytes)
[-] pred: org. junit. Assert. assertNull ( bytes )
************************************
[+] input: testLoopByConfigNormal() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(UNARY_OPERATOR.with(T), "left"), Parameter.of(UNARY_OPERATOR.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "combinator"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  InvariantParametersAndTypeParametersValidator.Result result = new InvariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), UNARY_OPERATOR.with(T), UNARY_OPERATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: SQLException { when(this.mockPluginService.getHosts()).thenReturn(Collections.singletonList(writerHostSpec));  final ReadWriteSplittingPlugin plugin = new ReadWriteSplittingPlugin( mockPluginService, defaultProps, mockHostListProviderService, mockWriterConn, null); plugin.switchConnectionIfRequired(true);  verify(mockPluginService, times(0)) .setCurrentConnection(any(Connection.class), any(HostSpec.class)); assertEquals(mockWriterConn, plugin.getWriterConnection()); "<AssertPlaceHolder>"; }
[*] target: assertNull(plugin.getReaderConnection())
[-] pred: org. junit. Assert. assertNull ( plugin. getReaderConnection() )
************************************
[+] input: testCategorizationMixed() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // addLayout(Layout.HORIZONTAL). // addElements(new String[] { "firstName", "lastName", "role" });  builder.addLayout(Layout.VERTICAL). // addElements(new String[] { "age", "city" });  String json = builder.build();  "<AssertPlaceHolder>"; // assertTrue(json.contains("#/properties/lastName")); logger.info(json);  }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: isValidUrl_InvalidUrl_IsNotValidUrl() { final var candidate = "abc"; final var isValidUrl = subject.isValidUrl(candidate);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValidUrl)
[-] pred: org. junit. Assert. assertFalse ( isValidUrl )
************************************
[+] input: shouldSelectKeys() { component.selectKey("item2", "item3");  List<Integer> indices = component.getSelectedIndices();  "<AssertPlaceHolder>"; assertEquals(1, indices.get(0)); assertEquals(2, indices.get(1)); }
[*] target: assertEquals(2, indices.size())
[-] pred: org. junit. Assert. assertEquals ( 2, indices. size ( ) )
************************************
[+] input: shouldAddRowDoubleClickListener() { table.onItemDoubleClick(event -> { });  List<EventListener<TableItemDoubleClickEvent>> listeners = table.getEventListeners(TableItemDoubleClickEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDoubleClickEvent>); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
[+] input: testGetClusterInfo() { // Setup final ClusterInfoEntity expectedResult = new ClusterInfoEntity(); expectedResult.setId(0); expectedResult.setCreateBy("createBy"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setClusterName("clusterName"); expectedResult.setClusterCode("clusterCode"); expectedResult.setClusterFrame("clusterFrame"); expectedResult.setFrameVersion("frameVersion"); expectedResult.setClusterState(ClusterState.RUNNING); expectedResult.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); expectedResult.setClusterManagerList(Arrays.asList(userInfoEntity));  // Run the test final ClusterInfoEntity result = ProcessUtils.getClusterInfo(0);  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: findForClassTestField() { ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration()); excelAnnotationParse.setConfigCacheEnabled(false);  ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo7.class); List<ExcelFieldConfig> excelFieldConfigList = excelClassConfig.getItemList();  Assertions."<AssertPlaceHolder>"; ExcelFieldConfig excelFieldConfig = excelFieldConfigList.get(0); Assertions.assertEquals(excelFieldConfig.getTitle(), "name-title"); Assertions.assertEquals(excelFieldConfig.getExcelType(), ExcelType.STRING); Assertions.assertEquals(excelFieldConfig.getCellHandler().length, 1); Assertions.assertEquals(excelFieldConfig.getCellHandler()[0], DateStringHandler.class); Assertions.assertEquals(excelFieldConfig.getColspan(), 2); Assertions.assertEquals(excelFieldConfig.getColspan(), 2); Assertions.assertEquals(excelFieldConfig.getHeadFormat(), "@@"); Assertions.assertEquals(excelFieldConfig.getJavaFormat(), "yyyy"); Assertions.assertEquals(excelFieldConfig.getExcelFormat(), "mm");   }
[*] target: assertEquals(excelFieldConfigList.size(), 3)
[-] pred: org. junit. Assert. assertEquals ( excelFieldConfigList. size ( ), 3 )
************************************
[+] input: Exception { initHadoopSecurityContext();  // write file by proxy user. String fileContent = "hello world"; Path filePath = new Path("/alex/HadoopFilesystemProviderTest-testWriteAndReadBySecuredFilesystem.file"); FileSystem writeFs = HadoopFilesystemProvider.getFilesystem("alex", filePath, kerberizedHadoop.getConf());  boolean ok = writeFs.exists(new org.apache.hadoop.fs.Path("/alex")); "<AssertPlaceHolder>"; assertEquals("alex", writeFs.getFileStatus(new org.apache.hadoop.fs.Path("/alex")).getOwner());  FSDataOutputStream fsDataOutputStream = writeFs.create(filePath); BufferedWriter br = new BufferedWriter(new OutputStreamWriter(fsDataOutputStream, "UTF-8")); br.write(fileContent); br.close();  assertTrue(writeFs.exists(filePath)); assertEquals("alex", writeFs.getFileStatus(filePath).getOwner());  // Read content from HDFS by alex user directly UserGroupInformation readerUGI = UserGroupInformation.loginUserFromKeytabAndReturnUGI( kerberizedHadoop.getAlexPrincipal() + "@" + kerberizedHadoop.getKdc().getRealm(), kerberizedHadoop.getAlexKeytab()); readerUGI.doAs( (PrivilegedExceptionAction<Object>) () -> { FileSystem fs = FileSystem.get(kerberizedHadoop.getConf()); FSDataInputStream inputStream = fs.open(filePath); String fetchedResult = IOUtils.toString(inputStream); assertEquals(fileContent, fetchedResult); return null; }); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDaoWrap.update(user); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
[+] input: testToJSONBBytes() { JSONObject object = JSONObject.of("id", null); byte[] jsonbBytes = object.toJSONBBytes(JSONWriter.Feature.WriteNulls); JSONObject object2 = JSONB.parseObject(jsonbBytes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(object, object2)
[-] pred: org. junit. Assert. assertEquals ( object, object2 )
************************************
[+] input: testExceptionIsPresent() { Result<String> value = Result.of(new IllegalArgumentException("12345")); "<AssertPlaceHolder>"; assertThrows(RuntimeException.class, value::get); }
[*] target: assertTrue(value.isExceptionPresent())
[-] pred: org. junit. Assert. assertTrue ( value. isExceptionPresent() )
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButAllNodeNotDataParentNode() { when(nodeList.size()).thenReturn(2); JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node1);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
[+] input: contravariantConcreteTypeConstructorCanAcceptGivenEquivalentContravariantConcreteTypeConstructor() { ConcreteTypeConstructor target = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.contravariant()); ConcreteTypeConstructor source = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(target.canAccept(source))
[-] pred: org. junit. Assert. assertTrue ( target. canAccept ( source ) )
************************************
[+] input: test_sqrt_5_meta() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 3, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
[+] input: liveMirror() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle"); ModUtils modUtils = project.getExtensions().getByType(ModUtils.class); "<AssertPlaceHolder>"; assertNotNull( modUtils.getLiveMirrorURL(10000, "https://example.com", "https://www.iana.org/help/example-domains")); }
[*] target: assertNotNull(modUtils)
[-] pred: org. junit. Assert. assertNotNull ( modUtils )
************************************
[+] input: testAddLoggingHandler() { Logger rootLogger = Logger.getLogger(""); loggingService.addLoggingHandler(); boolean handlerFound = false; for (Handler handler : rootLogger.getHandlers()) { if (handler instanceof HmcStreamHandler) { handlerFound = true; break; } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(handlerFound)
[-] pred: org. junit. Assert. assertTrue ( handlerFound )
************************************
[+] input: validateGivenMethodWithTypeParameterWithUpperBoundOtherThanObject() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.extending(COMPARABLE.with(U)), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("The type parameters need to be unbounded"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
[+] input: testLocalNode() { DiscoveryExtensionNode expectedLocalNode = extensionsRunner.getExtensionNode(); DiscoveryExtensionNode localNode = sdkClusterService.localNode(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLocalNode, localNode)
[-] pred: org. junit. Assert. assertEquals ( expectedLocalNode, localNode )
************************************
[+] input: NoSuchMethodException { Method test1 = TestArexMock.class.getDeclaredMethod("testWithCacheableAnnotation", String.class, int.class); try(MockedConstruction ignored = Mockito.mockConstruction(DynamicClassExtractor.class, ((extractor, context) -> { Mockito.when(extractor.replayOrRealCall()).thenReturn(MockResult.success("test")); }))) { Method testReturnVoid = TestArexMock.class.getDeclaredMethod("testReturnVoid"); boolean actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(testReturnVoid, null, null, null); assertFalse(actualResult);  // not record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(false); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, null, null); assertFalse(actualResult);  // record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(true); Mockito.when(ContextManager.needRecord()).thenReturn(true); DynamicClassExtractor extractor = new DynamicClassExtractor(test1, new Object[]{"mock"}, "#val", null); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); assertFalse(actualResult);  // replay Mockito.when(ContextManager.needRecord()).thenReturn(false); Mockito.when(ContextManager.needReplay()).thenReturn(true); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(actualResult)
[-] pred: org. junit. Assert. assertTrue ( actualResult )
************************************
[+] input: readHex() { byte[] bytes = new byte[32]; new Random().nextBytes(bytes); Bean bean = new Bean(); bean.value = bytes;  String str = JSON.toJSONString(bean); String str1 = JSON.toJSONString(bean, JSONWriter.Feature.OptimizedForAscii); "<AssertPlaceHolder>"; assertEquals( str, new String( JSON.toJSONBytes(bean) ) ); String str2 = JSON.toJSONString(bean, JSONWriter.Feature.PrettyFormat); assertArrayEquals( JSON.parseObject(str).getBytes("value"), JSON.parseObject(str2).getBytes("value") );  JSONWriter jsonWriter = JSONWriter.ofUTF8(); jsonWriter.writeAny(bean); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.UTF_8))); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.US_ASCII))); assertEquals(str.length(), jsonWriter.size());  Bean bean1 = JSON.parseObject(str, Bean.class); assertArrayEquals(bean.value, bean1.value);  Bean bean2 = JSON.parseObject(str.getBytes(), Bean.class); assertArrayEquals(bean.value, bean2.value);  Bean bean3 = JSON.parseObject(str.toCharArray(), Bean.class); assertArrayEquals(bean.value, bean3.value); }
[*] target: assertEquals(str, str1)
[-] pred: org. junit. Assert. assertEquals ( str, str1 )
************************************
[+] input: test() { val libs = parse(getJsonObject("lib.json")); "<AssertPlaceHolder>"; OS os = new OS("Windows", OS.Type.WINDOWS, "10", false); Features feat = Features.EMPTY; assertEquals(Rule.Action.ALLOW, libs.get(0).getRule().apply(os, feat)); assertEquals("testpackage:test:testversion", libs.get(0).getName()); assertEquals("testpackage", libs.get(0).getPackage()); assertEquals("test", libs.get(0).getNameAfterPackage()); assertEquals("testversion", libs.get(0).getVersionNumber()); assertEquals("http://_download_url", libs.get(0).getUrl("")); assertFalse(libs.get(0).isNativeLibrary()); }
[*] target: assertEquals(1, libs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, libs. size ( ) )
************************************
[+] input: SQLException { rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "jdbc:someprotocol://url"); // Test getCachedTopology with empty topology. assertNull(rdsHostListProvider.getCachedTopology()); rdsHostListProvider.clear();  rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "jdbc:someprotocol://url"); final long refreshRateOneNanosecond = 1; RdsHostListProvider.topologyCache.put(rdsHostListProvider.clusterId, hosts, refreshRateOneNanosecond); TimeUnit.NANOSECONDS.sleep(1);  // Test getCachedTopology with expired cache. "<AssertPlaceHolder>"; }
[*] target: assertNull(rdsHostListProvider.getCachedTopology())
[-] pred: org. junit. Assert. assertNull ( rdsHostListProvider. getCachedTopology ( ) )
************************************
[+] input: testGetIpRegionWithIpv6() { IpRegion ipRegion = IpRegionUtil.getIpRegion("2001:0DB8:0000:0023:0008:0800:200C:417A");  Assertions."<AssertPlaceHolder>"; Assertions.assertNull(ipRegion.getCountry()); Assertions.assertEquals("未知 未知", ipRegion.briefLocation()); }
[*] target: assertNotNull(ipRegion)
[-] pred: org. junit. Assert. assertNotNull ( ipRegion )
************************************
[+] input: 좋아요_숫자가_0보다_클때만_감소_기능_동작() { discussion.updateLikeCount(false); int actual = discussion.getLikeCount();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual)
[-] pred: org. junit. Assert. assertEquals ( 0, actual )
************************************
[+] input: testLoopByConfigConfigValueIsEmptyCollection() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(0)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 0, 0); } }
[*] target: assertFalse(byConfig)
[-] pred: org. junit. Assert. assertFalse ( byConfig )
************************************
[+] input: shouldLetterIsCorGReturnFalse() { boolean actual = Properties.letterIsCorG('b'); "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: test_Object_lookup_PageContext_String_String_String3() { pageContext.setAttribute("bean", new MockFormBean());  Object val = null;  try { val = tagutils.lookup(pageContext, "bean", "doesNotExistMethod"); fail("should have thrown exception"); } catch (JspException e) { "<AssertPlaceHolder>"; } }
[*] target: assertNull(val)
[-] pred: org. junit. Assert. assertNull ( val )
************************************
[+] input: Exception { FileInputStream in = new FileInputStream("src/test/resources/directed_acyclic_graph.gexf"); String graphXml = IOUtils.toString(in, StandardCharsets.UTF_8); String path = "0,2,3"; String packageName = "com.microsoft.appmanager"; String deviceType = "android"; String result = T2CJsonGenerator.generateT2CJsonFromGraphXml(graphXml, path, null, packageName, deviceType); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(result.contains("android.widget.Button")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: BBjException { String restoreValue = "restoreValue"; component.setRestoreValue(restoreValue); "<AssertPlaceHolder>";  verify(control).setRestore(restoreValue); }
[*] target: assertEquals(restoreValue, component.getRestoreValue())
[-] pred: org. junit. Assert. assertEquals ( restoreValue, component. getRestoreValue() )
************************************
[+] input: testStartInstallService_ClusterServiceCommandServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockCommandService.listByIds(Arrays.asList("value"))).thenReturn(Collections.emptyList());  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure ClusterServiceCommandHostCommandService.getHostCommandListByCommandId(...). final ClusterServiceCommandHostCommandEntity clusterServiceCommandHostCommandEntity = new ClusterServiceCommandHostCommandEntity(); clusterServiceCommandHostCommandEntity.setHostCommandId("hostCommandId"); clusterServiceCommandHostCommandEntity.setCommandName("commandName"); clusterServiceCommandHostCommandEntity.setCommandState(CommandState.WAIT); clusterServiceCommandHostCommandEntity.setCommandStateCode(0); clusterServiceCommandHostCommandEntity.setCommandProgress(0); clusterServiceCommandHostCommandEntity.setCommandHostId("commandHostId"); clusterServiceCommandHostCommandEntity.setCommandId("commandId"); clusterServiceCommandHostCommandEntity.setHostname("hostname"); clusterServiceCommandHostCommandEntity.setServiceRoleName("serviceRoleName"); clusterServiceCommandHostCommandEntity.setServiceRoleType(RoleType.MASTER); clusterServiceCommandHostCommandEntity.setResultMsg("resultMsg"); clusterServiceCommandHostCommandEntity.setCreateTime( new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceCommandHostCommandEntity.setCommandType(0); final List<ClusterServiceCommandHostCommandEntity> clusterServiceCommandHostCommandEntities = Arrays.asList( clusterServiceCommandHostCommandEntity); when(mockHostCommandService.getHostCommandListByCommandId("commandId")).thenReturn( clusterServiceCommandHostCommandEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.startInstallService(0, Arrays.asList("value"));  // Verify the results "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: Exception { final RunningJvmLoader runningJvmLoader = new RunningJvmLoader(); try (final TestJvm testJvm = TestJvm.of(SleepForeverProgram.class)) { final RunningJvm runningJvm = TestHelper.waitFor(() -> runningJvmLoader.list() .stream() .filter(r -> r.getId() .equals(String.valueOf( testJvm.getProcess() .pid()))) .findFirst() .orElse(null), 5000); final Properties properties = runningJvm.getSystemProperties(); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long expected = TypeCodecs.BIGINT.parse(valueAsString); Long result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testStreamSource() { final FilterableTreeItem<String> root = buildTree();  final long sourceItems = root.streamSource().count();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(4, sourceItems)
[-] pred: org. junit. Assert. assertEquals ( 4, sourceItems )
************************************
[+] input: testConcatToFileNormal() { File file = utils.concatToFile("mock-path", new String[]{"sub-path"}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: testDeleteOneWebHookByHookId() { when(webHookController.success()).thenReturn(mock(ResponseMessage.class)); doNothing().when(webHookService).delete(any(String[].class), any(UserDetail.class)); when(webHookController.deleteOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<Void> hook = webHookController.deleteOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(); verify(webHookService).delete(any(String[].class), any(UserDetail.class)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
[+] input: IOException { Path fontPath = Paths.get("src/test/resources/font_13132_0_edit.ttf"); TTFDataStream dataStream = new MemoryTTFDataStream(Files.newInputStream(fontPath)); final TrueTypeFont trueTypeFont = new TrueTypeFont().parse(dataStream);  final GlyphData glyph = trueTypeFont.getUnicodeGlyph('/'); GlyphDescription description = glyph.getDescription(); int count = description.getPointCount(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4, count)
[-] pred: org. junit. Assert. assertEquals ( 4, count )
************************************
[+] input: shouldSaveCustomer() {  CusCustomerDto cusCustomerDto = createDummyCusCustomerDto(); CusCustomer cusCustomer = createDummyCusCustomer();  when(cusCustomerEntityService.saveCustomer(any())).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.saveCustomer(any());  "<AssertPlaceHolder>"; assertNotNull(result); }
[*] target: assertEquals(cusCustomerDto, result)
[-] pred: org. junit. Assert. assertEquals ( cusCustomerDto, result )
************************************
[+] input: testConcatToFileEmpty() { File file = utils.concatToFile("mock-path", new String[]{}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: shouldCreateFieldWithLabelValueAndPlaceholder() { LocalTime value = LocalTime.of(12, 30); component = new MaskedTimeFieldSpinner("label", value, "placeholder"); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals("placeholder", component.getPlaceholder()); assertEquals(Expanse.MEDIUM, component.getExpanse()); }
[*] target: assertEquals(value, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( value, component. getValue() )
************************************
[+] input: isCancelled() { ResponseFutureWrapper responseFutureWrapper = new ResponseFutureWrapper("Test"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(responseFutureWrapper.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( responseFutureWrapper. isCancelled() )
************************************
[+] input: createCountry_ValidData_Success() { CountryPostVm countryPostVm = CountryPostVm.builder() .name("country") .build(); Country country = countryService.create(countryPostVm); "<AssertPlaceHolder>"; assertEquals("country", country.getName()); }
[*] target: assertNotNull(country)
[-] pred: org. junit. Assert. assertNotNull ( country )
************************************
