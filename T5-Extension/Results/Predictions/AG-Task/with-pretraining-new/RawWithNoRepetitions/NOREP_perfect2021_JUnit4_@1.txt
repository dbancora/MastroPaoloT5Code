[+] input: testRequestAgain() {  RandomManager manager = new RandomManager(300); manager.getRandom("test"); boolean thrown = false; try { manager.getRandom("test"); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
getRandom(String key) {  // Keys are issued typically once if (issuedKeys.contains(key)) { throw new IllegalArgumentException("Unlikely wanted to ask for the same key twice in the same runtime."); } issuedKeys.add(key);  // Generate issued seed long issuedSeed = 997 * universalSeed ^ 991 * key.hashCode();  // Prevent that by chance it is a duplicate (safeguard) if (issuedSeeds.contains(issuedSeed)) { throw new IllegalArgumentException("Likely undesirable: duplicate seed created from two different keys."); } issuedSeeds.add(issuedSeed);  // Create independent random number generator issuedSeeds.add(issuedSeed); return new Random(issuedSeed);  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: testConstructionDuplicate() {  // Create an ECMP switch with port 0 to 1... device0 = new EcmpSwitch(0, null, 5, new IdentityFlowletIntermediary()); device0.addConnection(topology.getPort(0, 1)); device0.addDestinationToNextSwitch(1, 1);  // ... and try to add the same destination to switch again boolean thrown = false; try { device0.addDestinationToNextSwitch(1, 1); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
addDestinationToNextSwitch(int destinationId, int nextHopId) {  // Check for not possible identifier if (!connectedTo.contains(nextHopId)) { throw new IllegalArgumentException("Cannot add hop to a network device to which it is not connected (" + nextHopId + ")"); }  // Check for duplicate List<Integer> current = this.destinationToNextSwitch.get(destinationId); if (current.contains(nextHopId)) { throw new IllegalArgumentException("Cannot add a duplicate next hop network device identifier (" + nextHopId + ")"); }  // Add to current ones current.add(nextHopId);  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: testConstructionNonExisting() {  // Create switch with 1->0, 1->2, and 1->3 device1 = new EcmpSwitch(1, null, 5, new IdentityFlowletIntermediary()); device1.addConnection(topology.getPort(1, 0)); device1.addConnection(topology.getPort(1, 2)); device1.addConnection(topology.getPort(1, 3)); device1.addDestinationToNextSwitch(0, 0);  // ... but deny that you can travel to 2 via a non-existing port boolean thrown = false; try { device1.addDestinationToNextSwitch(2, 4); // there is no port to 4 } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>"; }
addDestinationToNextSwitch(int destinationId, int nextHopId) {  // Check for not possible identifier if (!connectedTo.contains(nextHopId)) { throw new IllegalArgumentException("Cannot add hop to a network device to which it is not connected (" + nextHopId + ")"); }  // Check for duplicate List<Integer> current = this.destinationToNextSwitch.get(destinationId); if (current.contains(nextHopId)) { throw new IllegalArgumentException("Cannot add a duplicate next hop network device identifier (" + nextHopId + ")"); }  // Add to current ones current.add(nextHopId);  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: testInstNonExistingPort() { boolean thrown = false; try { ForwarderSwitch device = new ForwarderSwitch(0, null, 5, new IdentityFlowletIntermediary()); device.addConnection(topology.getPort(0, 1)); device.setDestinationToNextSwitch(1, 2); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>"; }
setDestinationToNextSwitch(int destinationId, int nextHopId) { if (!connectedTo.contains(nextHopId)) { throw new IllegalArgumentException("Cannot add hop to a network device to which it is not connected (" + nextHopId + ")"); } this.destinationToNextSwitch[destinationId] = nextHopId; }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: testAddInvalidNegativeWeight() { RandomCollection<Integer> rc = new RandomCollection<>(random);  boolean thrown = false; try { rc.add(-0.0001, 894); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
add(double weight, E result) { if (weight <= 0) { throw new IllegalArgumentException("Cannot add negative weight (" + weight + ") to random collection."); } total += weight; map.put(total, result); }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: testTerribleHashing() {  // Packet destined for node 3 when(packet.getSourceId()).thenReturn(4); when(packet.getDestinationId()).thenReturn(3); when(packet.getHash(eq(4), anyInt())).thenReturn(3);  boolean thrown = false; try { device4identity.receiveFromIntermediary(packet); } catch (RuntimeException e) { thrown = true; } "<AssertPlaceHolder>";  }
receiveFromIntermediary(Packet genericPacket) { TcpPacket packet = (TcpPacket) genericPacket; assert(this.identifier == packet.getSourceId());  // Determine source and destination ToR int sourceToR; int destinationToR; if (isWithinExtendedTopology) { sourceToR = Simulator.getConfiguration().getGraphDetails().getTorIdOfServer(packet.getSourceId()); destinationToR = Simulator.getConfiguration().getGraphDetails().getTorIdOfServer(packet.getDestinationId()); } else { sourceToR =  packet.getSourceId(); destinationToR = packet.getDestinationId(); }  // Choose a valiant node (tries again if it finds one that is not allowed) int chosen; int i = 0; do { chosen = lowBoundValiantRangeIncl + packet.getHash(this.identifier, i) % valiantRangeSize;  i++; if (i > 10000) { throw new RuntimeException( "Chose a wrong random number more than a 10000 times. This is extremely unlikely to happen; " + "presumably there is an extremely poor hashing function at work." ); } } while (chosen == sourceToR || chosen == destinationToR);  // Log for statistic of valiant balancing if (!flowSeen.contains(packet.getFlowId())) { SimulationLogger.increaseStatisticCounter("VAL_NODE_" + chosen); flowSeen.add(packet.getFlowId()); }  // Create encapsulation ValiantEncapsulation encapsulation = new ValiantEncapsulation( packet, chosen );  // If it is a data acknowledgment, we always go shortest path // This excludes the third part of the three-way handshake, which is supposed to precede the initial data window if (packet.isSYN() || (packet.isACK() && packet.getAcknowledgementNumber() != 1)) { encapsulation.markPassedValiant(); }  // Propagate through the network receiveEncapsulationPassOn(encapsulation);  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
************************************
[+] input: getContent() { String expectedContent = "{"foo":"bar"}"; StringBuilder actualContent = new StringBuilder();  underTest = new SignableRequestImpl(new Request.Builder() .url("https://www.amazon.com") .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), expectedContent)) .build());  try(Scanner scanner = new Scanner(underTest.getContent())){ while(scanner.hasNext()) { actualContent.append(scanner.next()); } }  "<AssertPlaceHolder>"; }
getContent() { ByteArrayInputStream inputStream = null;  if (originalRequest.body() != null) { try { Buffer buffer = new Buffer(); originalRequest.body().writeTo(buffer); inputStream = new ByteArrayInputStream(buffer.readByteArray()); } catch (IOException e) { throw new RuntimeException("Unable to buffer request body", e); } }  return inputStream; }
[*] target: assertEquals(expectedContent, actualContent.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedContent, actualContent. toString ( ) )
************************************
************************************
[+] input: getUnwrappedContent() { String expectedContent = "{"ban":"bop"}"; StringBuilder actualContent = new StringBuilder();  underTest = new SignableRequestImpl(new Request.Builder() .url("https://www.amazon.com") .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), expectedContent)) .build());  try(Scanner scanner = new Scanner(underTest.getContentUnwrapped())){ while(scanner.hasNext()) { actualContent.append(scanner.next()); } }  "<AssertPlaceHolder>"; }
getContentUnwrapped() { return getContent(); }
[*] target: assertEquals(expectedContent, actualContent.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedContent, actualContent. toString ( ) )
************************************
************************************
[+] input: testUtf8SubjectEncoded() { String s = null; try { s = MimeUtility.decodeText(ENV_UTF8_ENCODED_SUBJECT); } catch (UnsupportedEncodingException ex) { } final String subject = s;  testWithHandler( new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); "<AssertPlaceHolder>"; } }, new IMAPHandlerMessage() { { { envelope = "(" + ENV_DATE + " "" + ENV_UTF8_ENCODED_SUBJECT + "" " + ENV_ADDRS + ")"; } } }); }
getSubject() throws MessagingException { checkExpunged(); if (bodyLoaded) return super.getSubject();  if (subject != null) // already cached ? return subject;  loadEnvelope(); if (envelope.subject == null) // no subject return null;  // Cache and return the decoded value. try { // The server *should* unfold the value, but just in case it // doesn't we unfold it here. subject = MimeUtility.decodeText(MimeUtility.unfold(envelope.subject)); } catch (UnsupportedEncodingException ex) { subject = envelope.subject; }  return subject; }
[*] target: assertEquals(subject, m.getSubject())
[-] pred: org. junit. Assert. assertEquals ( subject, m. getSubject ( ) )
************************************
************************************
[+] input: testUtf8Subject() { String s = null; try { s = MimeUtility.decodeText(ENV_UTF8_ENCODED_SUBJECT); } catch (UnsupportedEncodingException ex) { } final String subject = s;  testWithHandler( new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); "<AssertPlaceHolder>"; } }, new IMAPHandlerMessage() { { { envelope = "(" + ENV_DATE + " "" + subject + "" " + ENV_ADDRS + ")"; capabilities += " ENABLE UTF8=ACCEPT"; } }  @Override public void enable(String line) throws IOException { ok(); } }); }
getSubject() throws MessagingException { checkExpunged(); if (bodyLoaded) return super.getSubject();  if (subject != null) // already cached ? return subject;  loadEnvelope(); if (envelope.subject == null) // no subject return null;  // Cache and return the decoded value. try { // The server *should* unfold the value, but just in case it // doesn't we unfold it here. subject = MimeUtility.decodeText(MimeUtility.unfold(envelope.subject)); } catch (UnsupportedEncodingException ex) { subject = envelope.subject; }  return subject; }
[*] target: assertEquals(subject, m.getSubject())
[-] pred: org. junit. Assert. assertEquals ( subject, m. getSubject ( ) )
************************************
************************************
[+] input: Exception { CollectorFormatter minF = new CollectorFormatter("{7}", (Formatter) null, (Comparator<LogRecord>) null);  tickMilli(); //Make sure the max not equal to the start time.  final String min = minF.getTail((Handler) null); NumberFormat.getIntegerInstance().parse(min); tickMilli();  //Next min is not old min. String next = minF.getTail((Handler) null); assertFalse(min + ' ' + next, min.equals(next));  //All mins start at the init time. CollectorFormatter initF = new CollectorFormatter("{10}", (Formatter) null, (Comparator<LogRecord>) null);  next = initF.getTail((Handler) null); "<AssertPlaceHolder>"; }
getTail(final Handler h) { super.getTail(h);  //Be forward compatible with super.getHead. return formatRecord(h, true); }
[*] target: assertEquals(min, next)
[-] pred: org. junit. Assert. assertEquals ( min, next )
************************************
************************************
[+] input: testFormatSequence() { CompactFormatter cf = new CompactFormatter("%9$d"); LogRecord record = new LogRecord(Level.SEVERE, ""); String output = cf.format(record); String expect = Long.toString(record.getSequenceNumber()); "<AssertPlaceHolder>"; }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )
************************************
************************************
[+] input: Exception { LogRecord record = new LogRecord(Level.SEVERE, ""); try { long expected = 10L; if (Thread.currentThread().getId() == expected) { ++expected; } setLongThreadID(record, expected); assertNotEquals(expected, Thread.currentThread().getId());  CompactFormatter cf = new CompactFormatter("%10$d"); String output = cf.format(record); String expect = Long.toString(expected); assertEquals(expect, output);  setLongThreadID(record, -1L); output = cf.format(record); expect = Long.toString(-1L); assertEquals(expect, output);  //Test that downcast works right. Number id = cf.formatThreadID(record); assertEquals(-1, id.intValue()); assertEquals(expect, Long.toString(id.longValue()));  setLongThreadID(record, Long.MAX_VALUE >>> 1L); output = cf.format(record); expect = Long.toString(Long.MAX_VALUE >>> 1L); "<AssertPlaceHolder>";  int tid = getIntThreadID(record); assertTrue(String.valueOf(tid), tid < 0); } catch (NoSuchMethodException JDK8245302) { try { Method m = LogRecord.class.getMethod("getLongThreadID"); fail(m.toString()); } catch (NoSuchMethodException expect) { assertNull(LogManagerProperties.getLongThreadID(record)); } } }
format(final LogRecord record) { //LogRecord is mutable so define local vars. Locale l = getLocale(record); String msg = formatMessage(record); String thrown = formatThrown(record); String err = formatError(record); Object[] params = { formatZonedDateTime(record), formatSource(record), formatLoggerName(record), formatLevel(record), msg, thrown, new Alternate(msg, thrown), new Alternate(thrown, msg), record.getSequenceNumber(), formatThreadID(record), err, new Alternate(msg, err), new Alternate(err, msg), formatBackTrace(record), record.getResourceBundleName(), record.getMessage()};  if (l == null) { //BUG ID 6282094 return String.format(fmt, params); } else { return String.format(l, fmt, params); } }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )
************************************
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); String key = "key"; Object value = TimeUnit.MILLISECONDS; assertNull(mp.put(key, value)); Object newValue = TimeUnit.NANOSECONDS; assertEquals(value, mp.put(key, newValue)); "<AssertPlaceHolder>"; }
get(final Object key) { Object value; if (key instanceof String) { value = getProperty((String) key); } else { value = null; }  //Search for non-string value. if (value == null) { value = defaults.get(key); if (value == null && !defaults.containsKey(key)) { value = super.get(key); } } return value; }
[*] target: assertEquals(newValue, mp.get(key))
[-] pred: org. junit. Assert. assertEquals ( newValue, mp. get( key ) )
************************************
************************************
[+] input: testEquals() { MailHandler h = new MailHandler(); assertFalse(h.equals((Object) null)); assertNotEquals(h, new MailHandler()); "<AssertPlaceHolder>"; }
equals(Object o) { if (o instanceof TailNameFormatter) { return name.equals(((TailNameFormatter) o).name); } return false; }
[*] target: assertTrue(h.equals(h))
[-] pred: org. junit. Assert. assertTrue ( h. equals(h ) )
************************************
************************************
[+] input: testApplyFindsRootCause() { /** * Lots of frameworks wrap exceptions with runtime exceptions. The root * cause is always more important. */ SeverityComparator a = new SeverityComparator(); final Throwable root = new Exception(); Throwable next = root; for (int i = 0; i < 7; i++) { next = new RuntimeException(next); } Throwable reduced = a.apply(next); "<AssertPlaceHolder>"; }
apply(final Throwable chain) { //Matches the j.u.f.UnaryOperator<Throwable> interface. int limit = 0; Throwable root = chain; Throwable high = null; Throwable normal = null; for (Throwable cause = chain; cause != null; cause = cause.getCause()) { root = cause;  //Find the deepest cause.  //Find the deepest normal occurrance. if (isNormal(cause)) { normal = cause; }  //Find the deepest error that happened before a normal occurrance. if (normal == null && cause instanceof Error) { high = cause; }  //Deal with excessive cause chains and cyclic throwables. if (++limit == (1 << 16)) { break; //Give up. } } return high != null ? high : normal != null ? normal : root; }
[*] target: assertEquals(root, reduced)
[-] pred: org. junit. Assert. assertEquals ( root, reduced )
************************************
************************************
[+] input: Exception { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = serialClone(a);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
hashCode() { return 31 * getClass().hashCode(); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert."<AssertPlaceHolder>"; File dir = TestUtils.getTempDir(); dir = new File(dir, "decode_xml"); ApkModuleXmlDecoder decoder = new ApkModuleXmlDecoder(apkModule); decoder.decode(dir); mDir_xml = dir; }
getApkModule(); public void setApkLogger(APKLogger apkLogger) { this.apkLogger = apkLogger; }
[*] target: assertNotNull(apkModule)
[-] pred: org. junit. Assert. assertNotNull ( apkModule )
************************************
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert."<AssertPlaceHolder>"; File dir = TestUtils.getTempDir(); dir = new File(dir, "decode_json"); ApkModuleJsonDecoder decoder = new ApkModuleJsonDecoder(apkModule); decoder.decode(dir); mDir_json = dir; }
getApkModule(); public void setApkLogger(APKLogger apkLogger) { this.apkLogger = apkLogger; }
[*] target: assertNotNull(apkModule)
[-] pred: org. junit. Assert. assertNotNull ( apkModule )
************************************
************************************
[+] input: Exception { DataSource dataSource = dataSourceFactory.createDataSource(null); Assert."<AssertPlaceHolder>"; }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put("currentSchema", "schema"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof SimpleDataSource); SimpleDataSource simpleDataSource = (SimpleDataSource) dataSource; Assert.assertEquals("db", simpleDataSource.getDatabaseName()); Assert.assertEquals("schema", simpleDataSource.getCurrentSchema()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put(DataSourceFactory.JDBC_INITIAL_POOL_SIZE, "5"); properties.put(DataSourceFactory.JDBC_MAX_POOL_SIZE, "10"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PoolingDataSource); PoolingDataSource poolingDataSource = (PoolingDataSource) dataSource; Assert.assertEquals("db", poolingDataSource.getDatabaseName()); Assert.assertEquals(5, poolingDataSource.getInitialConnections()); Assert.assertEquals(10, poolingDataSource.getMaxConnections()); }
createDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); if (props.containsKey(JDBC_INITIAL_POOL_SIZE) || props.containsKey(JDBC_MIN_POOL_SIZE) || props.containsKey(JDBC_MAX_POOL_SIZE) || props.containsKey(JDBC_MAX_IDLE_TIME) || props.containsKey(JDBC_MAX_STATEMENTS)) { return createPoolingDataSource(props); } else { return createSimpleDataSource(props); } }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(null); Assert."<AssertPlaceHolder>"; }
createConnectionPoolDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); ConnectionPool dataSource = new ConnectionPool(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof ConnectionPool); ConnectionPool connectionPoolDataSource = (ConnectionPool) dataSource; Assert.assertEquals("db", connectionPoolDataSource.getDatabaseName()); }
createConnectionPoolDataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); ConnectionPool dataSource = new ConnectionPool(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { XADataSource dataSource = dataSourceFactory.createXADataSource(null); Assert."<AssertPlaceHolder>"; }
createXADataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); PGXADataSource dataSource = new PGXADataSource(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); XADataSource dataSource = dataSourceFactory.createXADataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PGXADataSource); PGXADataSource xaDataSource = (PGXADataSource) dataSource; Assert.assertEquals("db", xaDataSource.getDatabaseName()); }
createXADataSource(Properties props) throws SQLException { props = new SingleUseProperties(props); PGXADataSource dataSource = new PGXADataSource(); configureBaseDataSource(dataSource, props); return dataSource; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: testUpdateActionsFromPaths_basic() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.FUNCTIONS) { assertEquals(1, action.getTargets().size()); assertEquals(1, UpdateAction.FUNCTIONS.getTargets().size()); assertTrue(action.getTargets().contains("onboarding-app-stack-listener")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_layersFirst() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.LAYERS, UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml"), Path.of("layers/apigw-helper/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; // the first item in the set iterator should always be LAYERS // (meaning we update layers first) regardless of changedPath ordering assertTrue(actualActions.iterator().next().name().equals("LAYERS")); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_unrecognizedPath() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); List<Path> unrecognizedPaths = List.of(Path.of("abc/unrecognized/path.java")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(unrecognizedPaths); "<AssertPlaceHolder>"; }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_customResourcesPath() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CUSTOM_RESOURCES, UpdateAction.RESOURCES); List<Path> changedPaths = List.of( Path.of("resources/saas-boost.yaml"), Path.of("resources/custom-resources/app-services-macro/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost.yaml")); } if (action == UpdateAction.CUSTOM_RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("app-services-macro")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_shortPaths() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); List<Path> changedPaths = List.of(Path.of("pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_newPath() { Path newResource = Path.of("resources/saas-boost-newtemplate.yaml"); createFile(newResource); Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.RESOURCES); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(List.of(newResource)); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost-newtemplate.yaml")); } }); }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_invalidChangedPath() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); // just a directory is not a valid changedPath: directories don't change, files do. // getUpdateActionsFromPaths should skip invalid changedPaths List<Path> invalidChangedPaths = List.of( Path.of("resources"), Path.of("resources/custom-resources"), Path.of("services")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(invalidChangedPaths); "<AssertPlaceHolder>"; }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testUpdateActionsFromPaths_resourcesCheckstyle() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); // this is not a valid update target List<Path> changedPaths = List.of(Path.of("resources/checkstyle/checkstyle.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; }
getUpdateActionsFromPaths(List<Path> changedPaths) { Set<UpdateAction> actions = EnumSet.noneOf(UpdateAction.class);  /* * Take for example the following list of changed paths: *   client/web/src/App.js *   functions/core-stack-listener/src/... *   services/onboarding-service/src/... *   services/tenant-service/src/... *   services/tenant-service/src/... *   resources/saas-boost.yaml *   resources/saas-boost-svc-tenant.yaml *   resources/custom-resources/app-services-ecr-macro/src/... * * The intention of this algorithm is to pull out the high level SaaS Boost components from the Path, as * represented by the UpdateAction Enum. e.g. CLIENT, FUNCTIONS, SERVICES, CUSTOM_RESOURCES, RESOURCES for * the above example, following these steps *   - for each path *     - traverse through each path component, up to a maximum depth of 2 (optimization, since no component *       pathname is at a depth deeper than two) *       - if we find the resources/ path component and the next component is custom-resources, continue *       - otherwise match the path component against an UpdateAction. if we find a valid one, add it to our *         list taking into account not only the UpdateAction itself (e.g. FUNCTIONS) but also the "target" *         of the UpdateAction (e.g. FUNCTIONS -> core-stack-listener) * * So the expected set of UpdateActions resulting from the above example is: *   CLIENT *   FUNCTIONS -> core-stack-listener *   SERVICES -> onboarding-service, tenant-service *   RESOURCES -> saas-boost.yaml, saas-boost-svc-tenant.yaml *   CUSTOM_RESOURCES -> app-services-ecr-macro */ for (Path changedPath : changedPaths) { LOGGER.debug("processing {}", changedPath); Path absolutePath = Path.of(workingDir.toString(), changedPath.toString()); if (!absolutePath.toFile().exists()) { LOGGER.debug("Skipping {} since it doesn't exist", changedPath); continue; } final int maximumTraversalDepth = 2; for (int i = 0; i < Math.min(changedPath.getNameCount(), maximumTraversalDepth); i++) { UpdateAction pathAction = UpdateAction.fromDirectoryName(changedPath.getName(i).toString()); if (pathAction != null) { // edge case: if this is a resources/custom-resources/.. path, we might be pinging on resources/ //            when we should on custom-resources. so skip if it is LOGGER.debug("found action {} from path {}", pathAction, changedPath); if ((i + 1) == changedPath.getNameCount()) { // "this" name at `i` resolved to an UpdateAction, but there is no valid target // represented by the next value in the name. this is an invalid changed path: // a directory itself isn't changed, the files underneath is changed LOGGER.error("Skipping {}, since it's an invalid changed path: expecting a file", changedPath); break; } String target = changedPath.getName(i + 1).toString(); if (pathAction == UpdateAction.RESOURCES && UpdateAction.fromDirectoryName(target) == UpdateAction.CUSTOM_RESOURCES) { LOGGER.debug("Skipping RESOURCES for CUSTOM_RESOURCES in {}", changedPath); continue; } // now add targets if necessary switch (pathAction) { case RESOURCES: { if (target.endsWith(".yaml")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else if (target.endsWith("keycloak/Dockerfile")) { LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); pathAction.addTarget(target); } else { LOGGER.debug("Skipping adding {} to UpdateAction {}", target, pathAction); } break; } case CLIENT: case CUSTOM_RESOURCES: case FUNCTIONS: case LAYERS: case METERING_BILLING: case SERVICES: { // each of the above actions use update.sh to update. the target here needs to be // a directory, because the update workflow looks underneath the target for the update // script. therefore editing something like layers/ parent pom or metering-billing // parent pom is not something worth updating LOGGER.debug("Adding new target {} to UpdateAction {}", target, pathAction); // absolute against workingDir, rather than against running dir Path targetPath = Path.of(workingDir.toString(), changedPath.subpath(0, i + 2).toString()); if (targetPath.toFile().isDirectory()) { // a non-yaml file (e.g. pom.xml) is not an acceptable target, // since there will be no update path underneath it pathAction.addTarget(target); } break; } default: { // do nothing } } if (pathAction.getTargets().size() > 0 && !actions.contains(pathAction)) { LOGGER.debug("Adding new action {} from path {}", pathAction, changedPath); actions.add(pathAction); } break; } } }  return actions; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
************************************
[+] input: testResourceName() { String serviceName = "foo"; String expected = "foo"; String actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo"; expected = "Foo"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo_Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo-Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); "<AssertPlaceHolder>"; }
ecrResourceName(String serviceName) { if (Utils.isBlank(serviceName)) { throw new IllegalArgumentException("service name cannot be blank"); } return cloudFormationResourceName(serviceName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: tryLockUnlock_conditionNotMet() { final AttributeValue onboardingId = AttributeValue.builder().s(ONBOARDING_ID).build(); doReturn(ScanResponse.builder().items(List.of(Map.of("id", onboardingId))).build()) .when(mockDdb).scan(any(ScanRequest.class));  doThrow(ConditionalCheckFailedException.builder().build()).when(mockDdb).updateItem(any(UpdateItemRequest.class));  boolean success = testLock.tryLockUnlock(TEST_CONTEXT, true); "<AssertPlaceHolder>"; }
tryLockUnlock(RequestContext requestContext, boolean tryLock) { try { UpdateItemRequest updateItemRequest = UpdateItemRequest.builder() .tableName(requestContext.onboardingDdbTable) .key(Map.of("id", currentOnboardingId(requestContext))) .conditionExpression("ecs_cluster_locked = :lock_expected") .updateExpression("SET ecs_cluster_locked = :new_lock") .expressionAttributeValues(Map.of( ":lock_expected", AttributeValue.builder().bool(!tryLock).build(), ":new_lock", AttributeValue.builder().bool(tryLock).build())) .build(); LOGGER.debug("trying to {} with updateItemRequest {}", tryLock ? "lock" : "unlock", updateItemRequest); ddb.updateItem(UpdateItemRequest.builder() .tableName(requestContext.onboardingDdbTable) .key(Map.of("id", currentOnboardingId(requestContext))) .conditionExpression("ecs_cluster_locked = :lock_expected") .updateExpression("SET ecs_cluster_locked = :new_lock") .expressionAttributeValues(Map.of( ":lock_expected", AttributeValue.builder().bool(!tryLock).build(), ":new_lock", AttributeValue.builder().bool(tryLock).build())) .build()); } catch (ConditionalCheckFailedException ccfe) { LOGGER.error("Could not {} ecs_cluster_locked, conditional check failed: {}", tryLock ? "lock" : "unlock", ccfe.getMessage()); return false; } catch (DynamoDbException ddbe) { LOGGER.error("Error trying to update lock for current onboarding id: {}", ddbe.getMessage()); LOGGER.error(Utils.getFullStackTrace(ddbe)); throw new RuntimeException(ddbe); } return true; }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
************************************
[+] input: pesquisarCliente() { Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf()); Assert."<AssertPlaceHolder>"; }
consultar(String codigo) throws Exception { Connection connection = null; PreparedStatement stm = null; ResultSet rs = null; Cliente cliente = null; try { connection = ConnectionFactory.getConnection(); String sql = "select * from tb_cliente_2 where codigo = ?"; stm = connection.prepareStatement(sql); stm.setString(1, codigo); rs = stm.executeQuery(); if (rs.next()) { cliente = new Cliente(); cliente.setId(rs.getLong("id")); cliente.setCodigo(rs.getString("codigo")); cliente.setNome(rs.getString("nome")); } return cliente; } catch(Exception e) { throw e; } finally { if (stm != null && !stm.isClosed()) { stm.close(); } if (connection != null && !connection.isClosed()) { connection.close(); } } }
[*] target: assertNotNull(clienteConsultado)
[-] pred: org. junit. Assert. assertNotNull ( clienteConsultado )
************************************
************************************
[+] input: testCalculateReturnDate() { for (int return_day : this.return_days) { Timestamp return_flight_date = ReturnFlight.calculateReturnDate(this.flight_date, return_day); "<AssertPlaceHolder>"; assertTrue(this.flight_date.getTime() < return_flight_date.getTime()); } // FOR }
calculateReturnDate(Timestamp flight_date, int return_days) {  // Round this to the start of the day Calendar cal = Calendar.getInstance(); cal.setTimeInMillis( flight_date.getTime() + (return_days * SEATSConstants.MILLISECONDS_PER_DAY));  int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH); int day = cal.get(Calendar.DAY_OF_MONTH);  cal.clear(); cal.set(year, month, day); return (new Timestamp(cal.getTime().getTime())); }
[*] target: assertNotNull(return_flight_date)
[-] pred: org. junit. Assert. assertNotNull ( return_flight_date )
************************************
************************************
[+] input: Exception { Class<?>[] targets = { MockObject1.class, MockObject2.class, }; Class<?>[] params = {MockObject1.class};  for (Class<?> targetClass : targets) { Constructor<?> c = ClassUtil.getConstructor(targetClass, params); "<AssertPlaceHolder>"; } // FOR }
getConstructor(Class<T> target_class, Class<?>... params) { NoSuchMethodException error = null; try { return (target_class.getConstructor(params)); } catch (NoSuchMethodException ex) { // The first time we get this it can be ignored // We'll try to be nice and find a match for them error = ex; }  if (LOG.isDebugEnabled()) { LOG.debug("TARGET CLASS:  {}", target_class); LOG.debug("TARGET PARAMS: {}", Arrays.toString(params)); }  @SuppressWarnings("rawtypes") List<Class<?>>[] paramSuper = (List<Class<?>>[]) new List[params.length]; for (int i = 0; i < params.length; i++) { paramSuper[i] = ClassUtil.getSuperClasses(params[i]); if (LOG.isDebugEnabled()) { LOG.debug("  SUPER[{}] => {}", params[i].getSimpleName(), paramSuper[i]); } }  for (Constructor<?> c : target_class.getConstructors()) { Class<?>[] cTypes = c.getParameterTypes(); if (LOG.isDebugEnabled()) { LOG.debug("CANDIDATE: {}", c); LOG.debug("CANDIDATE PARAMS: {}", Arrays.toString(cTypes)); } if (params.length != cTypes.length) { continue; }  for (int i = 0; i < params.length; i++) { List<Class<?>> cSuper = ClassUtil.getSuperClasses(cTypes[i]); if (LOG.isDebugEnabled()) { LOG.debug("  SUPER[{}] => {}", cTypes[i].getSimpleName(), cSuper); } if (!CollectionUtils.intersection(paramSuper[i], cSuper).isEmpty()) { return ((Constructor<T>) c); } } } throw new RuntimeException( "Failed to retrieve constructor for " + target_class.getSimpleName(), error); }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
************************************
[+] input: testIterableEnumeration() { final int size = 10; Enumeration<Integer> e = new Enumeration<Integer>() { int ctr = 0;  @Override public Integer nextElement() { return (ctr++); }  @Override public boolean hasMoreElements() { return (ctr < size); } };  List<Integer> found = new ArrayList<Integer>(); for (Integer i : CollectionUtil.iterable(e.asIterator())) found.add(i); "<AssertPlaceHolder>"; }
iterable(final Iterator<T> it) { return (new Iterable<T>() { @Override public Iterator<T> iterator() { return (it); } }); }
[*] target: assertEquals(size, found.size())
[-] pred: org. junit. Assert. assertEquals ( size, found. size ( ) )
************************************
************************************
[+] input: testJoinQueryParametersWithLocaleIT() {  Locale.setDefault(new Locale("it", "IT"));  String joinedQuery = String.format("key1=%s&key2=%s", extensiveDecimalsDouble, highDouble); String buildQuery = UrlBuilder.joinQueryParameters(mockDoubleParameters); "<AssertPlaceHolder>"; }
joinQueryParameters(Map<String, Object> params) { return joinQueryParameters(new StringBuilder(), params).toString(); }
[*] target: assertEquals(joinedQuery, buildQuery)
[-] pred: org. junit. Assert. assertEquals ( joinedQuery, buildQuery )
************************************
************************************
[+] input: IOException { String pemPathString = "src/test/java/unit/signature/Ed25519PrivateKeyExample.pem";  String payload = "timeInForce=GTC&quantity=0.2&price=30000&symbol=BTCUSDT&side=SELL&type=LIMIT&timestamp=1683189275000"; String expectedSignature = "kJs8urXFQ/GkR/hQ+ukZMFwH9H8oe7Ec/sap6pFIB/7HHHoh5mKVQT1zLVaRl7QdJLjNB2QB4PGZPflubUCHBA==";  Ed25519SignatureGenerator ed25519SignatureGenerator = new Ed25519SignatureGenerator(pemPathString); String actualSignature = ed25519SignatureGenerator.getSignature(payload); "<AssertPlaceHolder>"; }
getSignature(String data) {  byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);  Ed25519Signer signer = new Ed25519Signer(); signer.init(true, this.privateKey); signer.update(dataBytes, offset, dataBytes.length); byte[] signatureBytes = signer.generateSignature(); return Base64.getEncoder().encodeToString(signatureBytes);  }
[*] target: assertEquals(expectedSignature, actualSignature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, actualSignature )
************************************
************************************
[+] input: Exception { when(rccCache.getApiToken(anyString())).thenReturn(null); when(apiTokenService.selectByToken(anyString())).thenReturn(new ApiToken());  ApiToken result = apiTokenCacheServiceImpl.getApiToken("token"); Assert."<AssertPlaceHolder>";   }
getApiToken(String token) { ApiToken apiToken = rccCache.getApiToken(token); if (apiToken == null) { apiToken = apiTokenService.selectByToken(token); if (apiToken != null) { rccCache.loadApiToken(apiToken); } } return apiToken; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> a ); String result = redisCache.get("key", String.class); Assert."<AssertPlaceHolder>"; }
get(String key, Class<T> type) throws DataAccessException { if (isBlank(key)) { return null; } String keyString = keyPrefix.concat(key); return redisTemplate.execute((RedisConnection connection) -> { byte[] keyb = keyString.getBytes(); byte[] value = connection.get(keyb); if (value == null) { return null; } return GsonUtils.toObject(value, type); }); }
[*] target: assertEquals(a, result)
[-] pred: org. junit. Assert. assertEquals ( a, result )
************************************
************************************
[+] input: Exception { RetryActionWithOneParam<String, R> retryActionWithOneParam = new RetryActionWithOneParam<>( "print", 3, "a" ); R result = retryActionWithOneParam.action( a -> { throw new CannotAcquireLockException("throw dae"); } ); Assert."<AssertPlaceHolder>"; }
action(Function<P, R> func) { int times = 0; do { times++; try { return func.apply(param); } catch (DataAccessException ex) { log.warn("{} arg0[{}] in redis happen DataAccessException, times[{}]", actionName, GsonUtils.toJsonString(param), times, ex ); } catch (Exception ex) { log.error("{} arg0[{}] in redis fail.", actionName, GsonUtils.toJsonString(param), ex); break; } } while (times < retryTimes); return null; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
************************************
[+] input: Exception { RetryActionWithOneParam<String, R> retryActionWithOneParam = new RetryActionWithOneParam<>( "print", 3, "a" ); R result = retryActionWithOneParam.action( a -> { throw new RuntimeException("run time exception test"); } ); Assert."<AssertPlaceHolder>"; }
action(Function<P, R> func) { int times = 0; do { times++; try { return func.apply(param); } catch (DataAccessException ex) { log.warn("{} arg0[{}] in redis happen DataAccessException, times[{}]", actionName, GsonUtils.toJsonString(param), times, ex ); } catch (Exception ex) { log.error("{} arg0[{}] in redis fail.", actionName, GsonUtils.toJsonString(param), ex); break; } } while (times < retryTimes); return null; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
************************************
[+] input: Exception { User u = mock(User.class); UserThreadLocal.setUser(u); Object result = loginUserHandlerMethodArgumentResolver.resolveArgument(null, null, null, null); Assert."<AssertPlaceHolder>"; }
resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception { return UserThreadLocal.currentUser(); }
[*] target: assertEquals(u, result)
[-] pred: org. junit. Assert. assertEquals ( u, result )
************************************
************************************
[+] input: Exception { FilterRegistrationBean result = webMvcConfig.crossDomainFilter(); Assert."<AssertPlaceHolder>"; }
crossDomainFilter() { FilterRegistrationBean cross = new FilterRegistrationBean(); cross.setFilter(new CrossDomainFilter()); cross.setOrder(98); cross.addUrlPatterns("/*"); return cross; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { FilterRegistrationBean result = webMvcConfig.uriCostFilterRegistration(); Assert."<AssertPlaceHolder>"; }
uriCostFilterRegistration() { FilterRegistrationBean uriCostFilterBean = new FilterRegistrationBean(); uriCostFilterBean.setFilter(new UriCostFilter(brccInstanceService, projectService, productService)); uriCostFilterBean.setOrder(99); uriCostFilterBean.addUrlPatterns("/*"); return uriCostFilterBean; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { List<Long> result = userServiceImpl.getProjectIdsByUserId(Long.valueOf(1)); Assert."<AssertPlaceHolder>"; }
getProjectIdsByUserId(Long userId) { List<Long> resIdList = new ArrayList<>(); // 获取projectUser表中的数据 List<Long> projectIdList = projectUserService.selectByExample( ProjectUserExample.newBuilder() .distinct(true) .build() .createCriteria() .andUserIdEqualTo(userId) .toExample(), ProjectUser :: getProjectId, MetaProjectUser.COLUMN_NAME_PROJECTID );  if (!CollectionUtils.isEmpty(projectIdList) && projectIdList.size() > Constants.MAX_PROJECT_NUM_PER_USER) { resIdList = projectIdList.subList(0, Constants.MAX_PROJECT_NUM_PER_USER - 1); } else { resIdList = projectIdList; }  return resIdList; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
************************************
[+] input: testSaveToString() { FileConfiguration config = getConfig();  for (Map.Entry<String, Object> entry : getTestValues().entrySet()) { config.set(entry.getKey(), entry.getValue()); }  String result = config.saveToString(); String expected = getTestValuesString();  "<AssertPlaceHolder>"; }
saveToString();  /** * Loads this {@link FileConfiguration}
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testSaveToStringWithIndent() { YamlConfiguration config = getConfig(); config.options().indent(9);  config.set("section.key", 1);  String result = config.saveToString(); String expected = "section:\n         key: 1\n";  "<AssertPlaceHolder>"; }
saveToString() { yamlOptions.setIndent(options().indent()); yamlOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK); yamlOptions.setAllowUnicode(SYSTEM_UTF); yamlRepresenter.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);  String header = buildHeader(); String dump = yaml.dump(getValues(false));  if (dump.equals(BLANK_CONFIG)) { dump = ""; }  return header + dump; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testGetJobLog() { when(mockEngineService.runScript(any())).thenReturn(getResponseContent(MOCK_JOB_LOG)); JobLog jobLog = mockJobService.getJobLog("admin", mockJobId, -1L); Assert."<AssertPlaceHolder>"; }
getJobLog(String user, String jobId, Long offset) { String groupId = getGroupOrJobId(jobId); String response = null; try { response = engineService.runScript(new EngineService .RunScriptParams() .withOwner(user) .withSql(String.format("load _mlsql_.`log/%d` where filePath="engine_log" as output;", offset)) .withAsync("false") .with("sessionPerRequest", "true") ); } catch (Exception e) { log.error(ExceptionUtils.getRootCause(e)); } if (StringUtils.isEmpty(response) || response.equals("[]")) { return null; }  List<JobLog> resultsMap = JacksonUtils.readJsonArray(response, JobLog.class); JobLog jobLog = Objects.requireNonNull(resultsMap).get(0); if (jobLog.getValue() != null) { jobLog.setValue( jobLog.getValue().stream().filter( s -> s.contains(String.format("[owner] [%s] [groupId]", user)) ).filter(s-> !s.contains("run command as ShowCommand.`jobs/v2")).map(s -> { String[] arr = s.split("__MMMMMM__", 2); if (arr.length == 2) { return arr[1]; } else { return s; } }).collect(Collectors.toList()) ); } else { jobLog.setValue(Lists.newArrayList()); } return jobLog; }
[*] target: assertNotNull(jobLog)
[-] pred: org. junit. Assert. assertNotNull ( jobLog )
************************************
************************************
[+] input: testSaveNotebook() { String newName = "new name"; long currentTimeStamp = System.currentTimeMillis(); NotebookInfo nbInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); nbInfo.setName(newName); nbInfo.setUpdateTime(new Timestamp(currentTimeStamp)); nbService.save(nbInfo); NotebookInfo newNotebookInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); Assert."<AssertPlaceHolder>"; Assert.assertEquals(newName, newNotebookInfo.getName()); Assert.assertEquals(currentTimeStamp, newNotebookInfo.getUpdateTime().getTime()); }
findById(Integer id) { return notebookRepository.findById(id).orElse(null); }
[*] target: assertNotNull(newNotebookInfo)
[-] pred: org. junit. Assert. assertNotNull ( newNotebookInfo )
************************************
************************************
[+] input: InvalidSPDXAnalysisException { File resultDirectory = Files.createTempDirectory("cdxTest").toFile(); try { String resultFilePath = resultDirectory + File.separator + "resultSpdx.json"; CycloneToSpdx.cycloneDxToSpdx(VALID_BOM_PATH.toString(), resultFilePath); MultiFormatStore store = new MultiFormatStore(new InMemSpdxStore(), Format.JSON_PRETTY, Verbose.COMPACT); String documentUri; try (InputStream is = new FileInputStream(new File(resultFilePath))) { documentUri = store.deSerialize(is, false); } SpdxDocument spdxDoc = new SpdxDocument(store, documentUri, null, false); List<String> verify = spdxDoc.verify(); "<AssertPlaceHolder>"; List<String> expectedDocAttributionPatterns = new ArrayList<>(); assertTrue(spdxDoc.getDocumentUri().contains("3e671687-395b-41f5-a30f-a58921a69b79")); assertTrue(spdxDoc.getDocumentUri().endsWith("_1")); String created = spdxDoc.getCreationInfo().getCreated(); assertTrue(created.startsWith("2020-04-13T20:20:39")); Collection<String> creators = spdxDoc.getCreationInfo().getCreators(); boolean foundTool = false; boolean foundPerson = false; boolean foundOrganization = false; for (String creator:creators) { if (creator.contains("Awesome Tool")) { assertFalse(foundTool); foundTool = true; assertTrue(creator.startsWith("Tool:")); assertTrue(creator.contains("9.1.2")); // Too checksums expectedDocAttributionPatterns.add("25ed8e31b995bb927966616df2a42b979a2717f0"); expectedDocAttributionPatterns.add("a74f733635a19aefb1f73e5947cef59cd7440c6952ef0f03d09d974274cbd6df"); } if (creator.contains("Samantha Wright")) { assertFalse(foundPerson); foundPerson = true; assertTrue(creator.startsWith("Person:")); assertTrue(creator.contains("(samantha.wright@example.com)")); expectedDocAttributionPatterns.add("800-555-1212"); } if (creator.contains("Acme, Inc.")) { assertFalse(foundOrganization); foundOrganization = true; assertTrue(creator.startsWith("Organization: ")); expectedDocAttributionPatterns.add("https://example.com"); expectedDocAttributionPatterns.add("Acme Distribution"); expectedDocAttributionPatterns.add("distribution@example.com"); } } assertTrue(foundTool); assertTrue(foundPerson); assertTrue(foundOrganization); expectedDocAttributionPatterns.add("Acme, Inc."); expectedDocAttributionPatterns.add("Acme Professional Services"); expectedDocAttributionPatterns.add("professional.services@example.com"); assertEquals(1, spdxDoc.getDocumentDescribes().size()); SpdxElement described = spdxDoc.getDocumentDescribes().toArray(new SpdxElement[1])[0]; assertEquals("Acme Application", described.getName().get()); assertTrue(spdxDoc.getName().get().contains("Acme Application")); assertAnnotationsContains(spdxDoc.getAnnotations(), expectedDocAttributionPatterns);  // check on all the packages final List<String> foundComponentNames = new ArrayList<>(); SpdxModelFactory.getElements(spdxDoc.getModelStore(), spdxDoc.getDocumentUri(), spdxDoc.getCopyManager(), SpdxPackage.class).forEach(element -> { try { SpdxPackage pkg = (SpdxPackage)element; foundComponentNames.add(pkg.getName().get()); if ("Acme Application".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("application".toUpperCase());	// type assertEquals("Person: Acme Super Heros", pkg.getOriginator().get()); /** TODO: Uncomment this out once the SWID external refs are implemented assertEquals("9.1.1", pkg.getVersionInfo().get()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("swid"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.SECURITY, externalRefs[0].getReferenceCategory()); assertTrue(externalRefs[0].getReferenceLocator().contains("swidgen-242eb18a-503e-ca37-393b-cf156ef09691_9.1.1")); **/ expectedAnnotations.add("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8"); // part of the SWID content assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("com.acme:tomcat-catalina".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("library".toUpperCase());	// type assertTrue(pkg.getOriginator().get().contains("Acme Inc")); assertEquals("9.0.14", pkg.getVersionInfo().get()); if (pkg.getId().contains("npm")) { // There are 3 in the BOM test file with the same name - one has more details assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", pkg.getSha1()); boolean foundSha1 = false; boolean foundSha512 = false; boolean foundSha256 = false; boolean foundMd5 = false; for (Checksum checksum:pkg.getChecksums()) { if (ChecksumAlgorithm.SHA1.equals(checksum.getAlgorithm())) { assertFalse(foundSha1); foundSha1 = true; assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", checksum.getValue()); } else if (ChecksumAlgorithm.SHA256.equals(checksum.getAlgorithm())) { assertFalse(foundSha256); foundSha256 = true; assertEquals("f498a8ff2dd007e29c2074f5e4b01a9a01775c3ff3aeaf6906ea503bc5791b7b", checksum.getValue()); } else if (ChecksumAlgorithm.SHA512.equals(checksum.getAlgorithm())) { assertFalse(foundSha512); foundSha512 = true; assertEquals("e8f33e424f3f4ed6db76a482fde1a5298970e442c531729119e37991884bdffab4f9426b7ee11fccd074eeda0634d71697d6f88a460dce0ac8d627a29f7d1282", checksum.getValue()); } else if (ChecksumAlgorithm.MD5.equals(checksum.getAlgorithm())) { assertFalse(foundMd5); foundMd5 = true; assertEquals("3942447fac867ae5cdb3229b658f4d48", checksum.getValue()); } else { fail("Unexpected checksum algorithm"); } } assertTrue(foundSha512); assertTrue(foundSha256); assertTrue(foundSha1); assertTrue(foundMd5); assertEquals("Apache-2.0", pkg.getLicenseDeclared().toString()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("purl"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.PACKAGE_MANAGER, externalRefs[0].getReferenceCategory()); assertEquals("pkg:npm/acme/component@1.0.0", externalRefs[0].getReferenceLocator()); Relationship[] relationships = pkg.getRelationships().toArray(new Relationship[pkg.getRelationships().size()]); assertEquals(3, relationships.length); int numAcestors = 0; int numDependencies = 0; for (Relationship relationship:relationships) { SpdxPackage relatedPackage = (SpdxPackage)relationship.getRelatedSpdxElement().get(); assertEquals("com.acme:tomcat-catalina", relatedPackage.getName().get());  assertEquals("9.0.14", relatedPackage.getVersionInfo().get()); if (RelationshipType.ANCESTOR_OF.equals(relationship.getRelationshipType())) { numAcestors++; } else if (RelationshipType.DEPENDS_ON.equals(relationship.getRelationshipType())) { numDependencies++; } else { fail("Unexpected relationship type: "+relationship.getRelationshipType()); } } assertEquals(2, numAcestors); assertEquals(1, numDependencies); expectedAnnotations.add("123"); // commit expectedAnnotations.add("2018-11-13T"); // commit } assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("org.example:mylibrary".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); assertTrue(pkg.getSupplier().get().contains("Example, Inc.")); assertTrue(pkg.getSupplier().get().contains("support@example.com")); expectedAnnotations.add("800-555-1212"); expectedAnnotations.add("Example Support APAC"); expectedAnnotations.add("support@apac.example.com"); assertEquals("Person: Example Super Heros", pkg.getOriginator().get()); expectedAnnotations.add("https://example.com"); expectedAnnotations.add("https://example.net"); assertEquals("1.0.0", pkg.getVersionInfo().get()); assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else { fail("Unexpected package "+pkg.getName().get()); } } catch (Exception ex) { fail("Exception occurred while processing packages: "+ex.getMessage()); } }); assertEquals(5, foundComponentNames.size()); assertTrue(foundComponentNames.contains("Acme Application")); assertTrue(foundComponentNames.contains("com.acme:tomcat-catalina")); assertTrue(foundComponentNames.contains("org.example:mylibrary")); } finally { deleteDirOrFile(resultDirectory); } }
cycloneDxToSpdx(String cycloneDxFilePath, String spdxFilePath) throws CycloneConversionException { File outFile = new File(spdxFilePath); if (outFile.exists()) { throw new CycloneConversionException("File "+spdxFilePath+" already exists."); } try { if (!outFile.createNewFile()) { throw new CycloneConversionException("Could not create output file "+spdxFilePath); } } catch (IOException e) { throw new CycloneConversionException("I/O Error creating output file "+spdxFilePath, e); } ISerializableModelStore modelStore = null; try { modelStore = fileTypeToStore(fileToFileType(outFile)); } catch (InvalidSPDXAnalysisException e) { throw new CycloneConversionException("Unable to create SPDX model store: "+e.getMessage(), e); } catch (org.spdx.cdx2spdx.InvalidFileNameException e) { throw new CycloneConversionException("Cyclone DX Parsing Exception: "+e.getMessage(), e); } File inFile = new File(cycloneDxFilePath); if (!inFile.exists()) { throw new CycloneConversionException("File "+cycloneDxFilePath+" does not exist."); } Bom cycloneBom = null; try { Parser cycloneParser = BomParserFactory.createParser(inFile); cycloneBom = cycloneParser.parse(inFile); } catch (ParseException e) { throw new CycloneConversionException("Error creating Cyclone parser:"+e.getMessage()); } CycloneSpdxConverter converter = new CycloneSpdxConverter(cycloneBom, modelStore); converter.convert(); try (FileOutputStream output = new FileOutputStream(outFile)) { modelStore.serialize(converter.getDocumentUri(), output); return converter.getWarnings(); } catch (FileNotFoundException e) { throw new CycloneConversionException("Output file "+spdxFilePath+" not found.", e); } catch (IOException e) { throw new CycloneConversionException("I/O error writing output file:"+e.getMessage(), e); } catch (InvalidSPDXAnalysisException e) { throw new CycloneConversionException("SPDX error creating output file:"+e.getMessage(), e); } }
[*] target: assertEquals(0, verify.size())
[-] pred: org. junit. Assert. assertEquals ( 0, verify. size ( ) )
************************************
************************************
[+] input: testEnsureTypeWithAny() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.ANY), node, true);  "<AssertPlaceHolder>"; }
ensureType( RelDataType type, RexNode node, boolean matchNullability) { RelDataType targetType = type; if (matchNullability) { targetType = matchNullability(type, node); }  if (targetType.getSqlTypeName() == SqlTypeName.ANY && (!matchNullability || targetType.isNullable() == node.getType().isNullable())) { return node; }  if (!node.getType().equals(targetType)) { return makeCast(targetType, node); } return node; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
************************************
[+] input: testEnsureTypeWithItself() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);  "<AssertPlaceHolder>"; }
ensureType( RelDataType type, RexNode node, boolean matchNullability) { RelDataType targetType = type; if (matchNullability) { targetType = matchNullability(type, node); }  if (targetType.getSqlTypeName() == SqlTypeName.ANY && (!matchNullability || targetType.isNullable() == node.getType().isNullable())) { return node; }  if (!node.getType().equals(targetType)) { return makeCast(targetType, node); } return node; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
************************************
[+] input: testUpdateEventOffset() { List<Map<String, Object>> rows = offset.queryEventOffset().join(); rows.forEach(map -> { Long id = (Long) map.get("id"); Long offset_id = (Long) map.get("event_offset_id"); String dataSourceName = (String) map.get("data_source_name"); boolean status = offset.updateEventOffset(dataSourceName, offset_id + 1, id).join(); Assert.assertTrue(status); boolean status2 = offset.updateEventOffset(dataSourceName, offset_id, id).join(); Assert."<AssertPlaceHolder>"; });  }
updateEventOffset(String dataSourceName, long offsetId, long id) { try { DataSource dataSource = dataSourceNameMap.get(dataSourceName); QueryRunner queryRunner = new QueryRunner(dataSource); queryRunner.update(UPDATE_EVENT_OFFSET, offsetId, id); return CompletableFuture.completedFuture(true); } catch (Throwable e) { CompletableFuture<Boolean> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } }
[*] target: assertTrue(status2)
[-] pred: org. junit. Assert. assertTrue ( status2 )
************************************
************************************
[+] input: verifyEmailTokenSuccessFull() { ChangeEmailRequest changeEmailRequest = getDummyChangeEmailRequest(); User user = getDummyUser(); String expectedMessage = UserMessage.EMAIL_CHANGE_SUCCESSFUL; ChangeEmailForm changeEmailForm = getDummyChangeEmailForm(); changeEmailForm.setNew_email(changeEmailForm.getNew_email()); changeEmailForm.setOld_email("user@email.com"); Mockito.when(changeEmailRepository.findByEmailToken(Mockito.anyString())) .thenReturn(changeEmailRequest); Mockito.doReturn(user).when(userRepository).save(Mockito.any(User.class)); Mockito.doReturn(user).when(userService).getUserFromToken(Mockito.any()); CRAPIResponse crapiAPIResponse = userService.verifyEmailToken(getMockHttpRequest(), changeEmailForm); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(HttpStatus.OK.value(), crapiAPIResponse.getStatus()); }*/
verifyEmailToken( HttpServletRequest request, ChangeEmailForm changeEmailForm) { ChangeEmailRequest changeEmailRequest; User user; changeEmailRequest = changeEmailRepository.findByEmailToken(changeEmailForm.getToken()); user = getUserFromToken(request); if (changeEmailRequest != null) { if (user.getEmail().equalsIgnoreCase(changeEmailRequest.getOldEmail())) { if (changeEmailRequest.getNewEmail().equalsIgnoreCase(changeEmailForm.getNew_email())) { user.setEmail(changeEmailRequest.getNewEmail()); user.setJwtToken(""); userRepository.save(user); return new CRAPIResponse(UserMessage.EMAIL_CHANGE_SUCCESSFUL, 200); } else { return new CRAPIResponse(UserMessage.NEW_MAIL_DOES_NOT_BELONG, 500); } } else { return new CRAPIResponse(UserMessage.OLD_MAIL_DOES_NOT_BELONG, 500); } } return new CRAPIResponse(UserMessage.INVALID_EMAIL_TOKEN, 500); }
[*] target: assertEquals(expectedMessage, crapiAPIResponse.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, crapiAPIResponse. getMessage ( ) )
************************************
************************************
[+] input: getVehicleLocationSuccessWithUserDetailsNotNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); UserDetails userDetails = getDummyUserDetails(); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())) .thenReturn(vehicleDetails); Mockito.when(userDetailsRepository.findByUser_id(Mockito.anyLong())).thenReturn(userDetails); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(userDetails.getName(), vehicleLocationResponse.getFullName()); Assertions.assertEquals(userDetails.getUser().getEmail(), vehicleLocationResponse.getEmail()); }
getVehicleLocation(UUID carId) { VehicleDetails vehicleDetails = null; VehicleLocationResponse vehicleLocationForm = null; UserDetails userDetails = null; Random random = new Random(); try { vehicleDetails = vehicleDetailsRepository.findByUuid(carId); if (vehicleDetails != null) { // vehicleDetails = vehicleDetailsRepository.findByVehicleLocation_id(carId); // vehicleDetails.setVehicleLocation(getVehicleLocationList().get(random.nextInt(getVehicleLocationList().size()))); if (vehicleDetails.getOwner() != null) { userDetails = userDetailsRepository.findByUser_id(vehicleDetails.getOwner().getId()); vehicleLocationForm = new VehicleLocationResponse( carId, (userDetails != null ? userDetails.getName() : null), (userDetails != null ? userDetails.getUser().getEmail() : null), vehicleDetails.getVehicleLocation()); return vehicleLocationForm; } } } catch (Exception exception) { log.error("Fail to get vehicle location-> Message: {}", exception); } return null; }
[*] target: assertNotNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNotNull ( vehicleLocationResponse )
************************************
************************************
[+] input: getVehicleLocationNotFoundWhenVehicleDetailsAreNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())).thenReturn(null); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; }
getVehicleLocation(UUID carId) { VehicleDetails vehicleDetails = null; VehicleLocationResponse vehicleLocationForm = null; UserDetails userDetails = null; Random random = new Random(); try { vehicleDetails = vehicleDetailsRepository.findByUuid(carId); if (vehicleDetails != null) { // vehicleDetails = vehicleDetailsRepository.findByVehicleLocation_id(carId); // vehicleDetails.setVehicleLocation(getVehicleLocationList().get(random.nextInt(getVehicleLocationList().size()))); if (vehicleDetails.getOwner() != null) { userDetails = userDetailsRepository.findByUser_id(vehicleDetails.getOwner().getId()); vehicleLocationForm = new VehicleLocationResponse( carId, (userDetails != null ? userDetails.getName() : null), (userDetails != null ? userDetails.getUser().getEmail() : null), vehicleDetails.getVehicleLocation()); return vehicleLocationForm; } } } catch (Exception exception) { log.error("Fail to get vehicle location-> Message: {}", exception); } return null; }
[*] target: assertNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNull ( vehicleLocationResponse )
************************************
************************************
[+] input: getVehicleLocationNotFoundWhenVehicleDetailsOwnerIsNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); vehicleDetails.setOwner(null); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())) .thenReturn(vehicleDetails); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; }
getVehicleLocation(UUID carId) { VehicleDetails vehicleDetails = null; VehicleLocationResponse vehicleLocationForm = null; UserDetails userDetails = null; Random random = new Random(); try { vehicleDetails = vehicleDetailsRepository.findByUuid(carId); if (vehicleDetails != null) { // vehicleDetails = vehicleDetailsRepository.findByVehicleLocation_id(carId); // vehicleDetails.setVehicleLocation(getVehicleLocationList().get(random.nextInt(getVehicleLocationList().size()))); if (vehicleDetails.getOwner() != null) { userDetails = userDetailsRepository.findByUser_id(vehicleDetails.getOwner().getId()); vehicleLocationForm = new VehicleLocationResponse( carId, (userDetails != null ? userDetails.getName() : null), (userDetails != null ? userDetails.getUser().getEmail() : null), vehicleDetails.getVehicleLocation()); return vehicleLocationForm; } } } catch (Exception exception) { log.error("Fail to get vehicle location-> Message: {}", exception); } return null; }
[*] target: assertNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNull ( vehicleLocationResponse )
************************************
************************************
[+] input: includeListTest() {  ProviderConfig providerConfig = new ProviderConfig(); DefaultProviderBootstrap defaultProviderBootstra = new DefaultProviderBootstrap(providerConfig); boolean result = defaultProviderBootstra.inList("hello1", "hello2", "hello1"); Assert."<AssertPlaceHolder>"; }
inList(String includeMethods, String excludeMethods, String methodName) { //判断是否在白名单中 if (!StringUtils.ALL.equals(includeMethods)) { if (!inMethodConfigs(includeMethods, methodName)) { return false; } } //判断是否在黑白单中 if (inMethodConfigs(excludeMethods, methodName)) { return false; } //默认还是要发布 return true;  }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: UnsupportedEncodingException { SnappyRpcCompressor compressor = new SnappyRpcCompressor(); String s = "xxxxasdasdasd0as8d0asdkmasldjalsd"; byte[] bs = compressor.compress(s.getBytes("utf-8")); Assert.assertNotNull(s);  String s1 = new String(compressor.deCompress(bs), "utf-8"); Assert."<AssertPlaceHolder>"; }
deCompress(byte[] src) { return uncompress(src, 0, src.length); }
[*] target: assertEquals(s, s1)
[-] pred: org. junit. Assert. assertEquals ( s, s1 )
************************************
************************************
[+] input: Exception { boolean error = false; try { new ExcludeRouter("*").route(null, null); } catch (Exception e) { error = e instanceof UnsupportedOperationException; } Assert."<AssertPlaceHolder>"; }
route(SofaRequest request, List<ProviderInfo> providerInfos) { throw new UnsupportedOperationException(); }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
************************************
[+] input: testEquals() { ServerConfig config1 = new ServerConfig(); Assert.assertTrue(config1.equals(config1)); Assert.assertFalse(config1.equals(null)); Assert.assertFalse(config1.equals(""));  ServerConfig config2 = new ServerConfig(); Assert.assertTrue(config1.equals(config2));  config1.setHost("127.0.0.1"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.2"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.1"); Assert.assertTrue(config1.equals(config2));  config1.setPort(1234); Assert.assertFalse(config1.equals(config2)); config2.setPort(1235); Assert.assertFalse(config1.equals(config2)); config2.setPort(1234); Assert.assertTrue(config1.equals(config2));  config1.setProtocol("xxx"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("yyy"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("xxx"); Assert."<AssertPlaceHolder>"; }
equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } ServerConfig other = (ServerConfig) obj; if (host == null) { if (other.host != null) { return false; } } else if (!host.equals(other.host)) { return false; } if (port != other.port) { return false; } if (protocol == null) { if (other.protocol != null) { return false; } } else if (!protocol.equals(other.protocol)) { return false; } return true; }
[*] target: assertTrue(config1.equals(config2))
[-] pred: org. junit. Assert. assertTrue ( config1. equals ( config2 ) )
************************************
************************************
[+] input: Exception { boolean error = false; try { new ExcludeFilter("*").invoke(null, null); } catch (Exception e) { error = e instanceof UnsupportedOperationException; } Assert."<AssertPlaceHolder>"; }
invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { throw new UnsupportedOperationException(); }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
************************************
[+] input: Exception { ServerTransportConfig config = new ServerTransportConfig(); config.setHost("0.0.0.0"); config.setPort(22222); config.setBossThreads(1); config.setIoThreads(8); config.setBizMaxThreads(200); config.setBizPoolQueues(50); config.setDaemon(false); config.setContainer("test"); ServerTransport server = ServerTransportFactory.getServerTransport(config); Assert.assertNotNull(server);  boolean error = false; try { config.setContainer("testasdasd"); ServerTransportFactory.getServerTransport(config); } catch (Exception e) { error = true; } Assert."<AssertPlaceHolder>"; }
getServerTransport(ServerTransportConfig serverConfig) { ServerTransport serverTransport = ExtensionLoaderFactory.getExtensionLoader(ServerTransport.class) .getExtension(serverConfig.getContainer(), new Class[] { ServerTransportConfig.class }, new Object[] { serverConfig }); if (serverTransport != null) { String key = Integer.toString(serverConfig.getPort()); SERVER_TRANSPORT_MAP.put(key, serverTransport); } return serverTransport; }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
************************************
[+] input: Exception { SofaRpcException exception = new SofaRpcException(RpcErrorType.SERVER_BUSY, "111"); String string = ExceptionUtils.toString(exception); Assert."<AssertPlaceHolder>"; Pattern pattern = Pattern.compile("at"); Matcher matcher = pattern.matcher(string); int count = 0; while (matcher.find()) { count++; } Assert.assertTrue(count > 1); }
toString(Throwable e) { StackTraceElement[] traces = e.getStackTrace(); StringBuilder sb = new StringBuilder(1024); sb.append(e.toString()).append("\n"); if (traces != null) { for (StackTraceElement trace : traces) { sb.append("\tat ").append(trace).append("\n"); } } return sb.toString(); }
[*] target: assertNotNull(string)
[-] pred: org. junit. Assert. assertNotNull ( string )
************************************
************************************
[+] input: InterruptedException { ProviderConfig<?> providerConfig = providerConfig("consul-test-1", 12200); registry.register(providerConfig);  ConsumerConfig<?> consumerConfig = consumerConfig("consul-test-1"); MockProviderInfoListener listener = new MockProviderInfoListener(); consumerConfig.setProviderInfoListener(listener);  assertUntil(() -> { List<ProviderGroup> providerGroups = registry.subscribe(consumerConfig); Assert.assertEquals(1, providerGroups.size()); Assert.assertEquals(1, providerGroups.get(0).size()); }, 10, TimeUnit.SECONDS);  CountDownLatch latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  providerConfig = providerConfig("consul-test-1", 12201, 12202); registry.register(providerConfig);  boolean ok = latch.await(10, TimeUnit.SECONDS); Assert.assertTrue(ok);  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(3, providers.size()); }, 10, TimeUnit.SECONDS);  latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  registry.unRegister(providerConfig);  ok = latch.await(10, TimeUnit.SECONDS); Assert."<AssertPlaceHolder>";  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(1, providers.size()); }, 10, TimeUnit.SECONDS); }
unRegister(ProviderConfig config) { String appName = config.getAppName();  if (!registryConfig.isRegister()) { // 注册中心不注册 if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE)); } return; } // 反注册服务端节点 if (!config.isRegister()) { return; } try { List<String> ids = buildServiceIds(config); if (CommonUtils.isNotEmpty(ids)) { ids.forEach(this::deregisterConsulService); if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_UNPUB, config.getInterfaceId(), ids.size())); } } } catch (Exception e) { if (!RpcRunningState.isShuttingDown()) { if ( e instanceof SofaRpcRuntimeException){ throw e; }else{ throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_UNREG_PROVIDER ,EXT_NAME), e); }} } }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: testApplicationInfo() { ApplicationInfoRequest request = new ApplicationInfoRequest(); request.setAppName("test"); boolean result = meshApiClient.registeApplication(request); Assert."<AssertPlaceHolder>"; }
registeApplication(ApplicationInfoRequest applicationInfoRequest) {  final String json = applicationInfoRequest.toJson(); String result = httpPost(MeshEndpoint.CONFIGS, json);  if (!StringUtils.equals(result, errorMessage)) { final ApplicationInfoResult parse = JSON.parseObject(result, ApplicationInfoResult.class); if (parse.isSuccess()) { return true; } return false; } else { return false; }  }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testPublish() { PublishServiceRequest request = new PublishServiceRequest(); request.setServiceName("aa"); ProviderMetaInfo providerMetaInfo = new ProviderMetaInfo(); providerMetaInfo.setAppName("testApp"); providerMetaInfo.setProtocol("bolt"); providerMetaInfo.setSerializeType("hessian2"); providerMetaInfo.setVersion("4.0"); request.setProviderMetaInfo(providerMetaInfo); boolean result = meshApiClient.publishService(request); Assert."<AssertPlaceHolder>"; }
publishService(PublishServiceRequest publishServiceRequest) {  final String json = JSON.toJSONString(publishServiceRequest); String result = httpPost(MeshEndpoint.PUBLISH, json); if (!StringUtils.equals(result, errorMessage)) { final PublishServiceResult parse = JSON.parseObject(result, PublishServiceResult.class); if (parse.isSuccess()) { return true; } return false; } else { return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testUnPublish() { UnPublishServiceRequest request = new UnPublishServiceRequest(); request.setServiceName("aa"); int result = meshApiClient.unPublishService(request); Assert."<AssertPlaceHolder>"; }
unPublishService(UnPublishServiceRequest request) {  final String json = JSON.toJSONString(request); String result = httpPost(MeshEndpoint.UN_PUBLISH, json);  if (!StringUtils.equals(result, errorMessage)) { final UnPublishServiceResult parse = JSON.parseObject(result, UnPublishServiceResult.class); if (parse.isSuccess()) { return 1; } return 0; } else { return 0; }  }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
************************************
[+] input: testUnSubscribe() { UnSubscribeServiceRequest request = new UnSubscribeServiceRequest(); request.setServiceName("com.alipay.rpc.common.service.facade.pb.SampleServicePb:1.0@DEFAULT"); boolean result = meshApiClient.unSubscribeService(request); Assert."<AssertPlaceHolder>"; }
unSubscribeService(UnSubscribeServiceRequest request) { final String json = JSON.toJSONString(request);  String result = httpPost(MeshEndpoint.UN_SUBCRIBE, json);  if (!StringUtils.equals(result, errorMessage)) { final UnSubscribeServiceResult parse = JSON.parseObject(result, UnSubscribeServiceResult.class); if (parse.isSuccess()) { return true; } return false; } else { return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: InterruptedException {  Field registedAppField = null; try { registedAppField = MeshRegistry.class.getDeclaredField("registedApp"); registedAppField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); }  Boolean registedAppValue = null; // in case of effected by other case. try { registedAppValue = (Boolean) registedAppField.get(registry); registedAppField.set(registry, false); } catch (IllegalAccessException e) { e.printStackTrace(); }  ServerConfig serverConfig = new ServerConfig() .setProtocol("bolt") .setHost("0.0.0.0") .setPort(12200); ProviderConfig<?> provider = new ProviderConfig(); provider.setInterfaceId("com.alipay.xxx.TestService") .setUniqueId("unique123Id") .setApplication(new ApplicationConfig().setAppName("test-server")) .setProxy("javassist") .setRegister(true) .setRegistry(registryConfig) .setSerialization("hessian2") .setServer(serverConfig) .setWeight(222) .setTimeout(3000);  registry.register(provider); Thread.sleep(3000);  try { registedAppValue = (Boolean) registedAppField.get(registry); } catch (IllegalAccessException e) { e.printStackTrace(); }  LOGGER.info("final registedAppValue is " + registedAppValue);  Assert."<AssertPlaceHolder>"; }
register(ProviderConfig config) { String appName = config.getAppName(); if (!registryConfig.isRegister()) { if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE)); } return; } if (!config.isRegister()) { // 注册中心不注册或者服务不注册 return; } List<ServerConfig> serverConfigs = config.getServer(); if (CommonUtils.isNotEmpty(serverConfigs)) { for (ServerConfig server : serverConfigs) { String serviceName = MeshRegistryHelper.buildMeshKey(config, server.getProtocol()); ProviderInfo providerInfo = MeshRegistryHelper.convertProviderToProviderInfo(config, server); if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_START, serviceName)); } doRegister(appName, serviceName, providerInfo, server.getProtocol());  if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_OVER, serviceName)); } } if (EventBus.isEnable(ProviderPubEvent.class)) { ProviderPubEvent event = new ProviderPubEvent(config); EventBus.post(event); }  } }
[*] target: assertTrue(registedAppValue)
[-] pred: org. junit. Assert. assertTrue ( registedAppValue )
************************************
************************************
[+] input: Exception { this.rpcSofaTracer.startRpc(sofaRequest);  SofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext(); SofaTracerSpan sofaTracerSpan = sofaTraceContext.pop(); "<AssertPlaceHolder>"; System.err.println("\n" + sofaTracerSpan); }
startRpc(SofaRequest request) { //客户端的启动 SofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext(); SofaTracerSpan serverSpan = sofaTraceContext.pop();  SofaTracerSpan clientSpan = (SofaTracerSpan) this.sofaTracer.buildSpan(request.getInterfaceName()) .asChildOf(serverSpan) .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT) .start();  if (RpcInternalContext.isAttachmentEnable()) { RpcInternalContext context = RpcInternalContext.getContext(); clientSpan .setTag(RpcSpanTags.LOCAL_APP, (String) context.getAttachment(RpcConstants.INTERNAL_KEY_APP_NAME)); clientSpan.setTag(RpcSpanTags.PROTOCOL, (String) context.getAttachment(RpcConstants.INTERNAL_KEY_PROTOCOL_NAME)); SofaTracerSpanContext spanContext = clientSpan.getSofaTracerSpanContext(); if (spanContext != null) { context.setAttachment(RpcConstants.INTERNAL_KEY_TRACE_ID, spanContext.getTraceId()); context.setAttachment(RpcConstants.INTERNAL_KEY_SPAN_ID, spanContext.getSpanId()); } }  clientSpan.setTag(RpcSpanTags.SERVICE, request.getTargetServiceUniqueName()); clientSpan.setTag(RpcSpanTags.METHOD, request.getMethodName()); clientSpan.setTag(RpcSpanTags.CURRENT_THREAD_NAME, Thread.currentThread().getName());  //需要主动缓存自己的 serverSpan,原因是:asChildOf 关注的是 spanContext clientSpan.setParentSofaTracerSpan(serverSpan); //push sofaTraceContext.push(clientSpan); }
[*] target: assertNotNull(sofaTracerSpan)
[-] pred: org. junit. Assert. assertNotNull ( sofaTracerSpan )
************************************
************************************
[+] input: testAppendFetch() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.fetchLogRecord(0);  "<AssertPlaceHolder>"; }
fetchLogRecord(long LSN) { try { Page logPage = bufferManager.fetchPage(new DummyLockContext("_dummyLogPageRecord"), getLSNPage(LSN)); try { Buffer buf = logPage.getBuffer(); buf.position(getLSNIndex(LSN)); Optional<LogRecord> record = LogRecord.fromBytes(buf); record.ifPresent((LogRecord e) -> e.setLSN(LSN)); return record.orElse(null); } finally { logPage.unpin(); } } catch (PageException e) { return null; } }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
************************************
[+] input: testAppendScan() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.scanFrom(0).next();  "<AssertPlaceHolder>"; }
next() { if (hasNext()) { final BacktrackingIterator<LogRecord> iter = nextIter; BacktrackingIterable<LogRecord> iterable = () -> iter;  nextIter = null; do { ++nextIndex; try { Page page = bufferManager.fetchPage(new DummyLockContext(), nextIndex); nextIter = new LogPageIterator(page, 0); } catch (PageException e) { break; } } while (!nextIter.hasNext());  return iterable; } throw new NoSuchElementException(); }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
************************************
[+] input: testAppendIterator() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.iterator().next();  "<AssertPlaceHolder>"; }
next() { if (hasNext()) { final BacktrackingIterator<LogRecord> iter = nextIter; BacktrackingIterable<LogRecord> iterable = () -> iter;  nextIter = null; do { ++nextIndex; try { Page page = bufferManager.fetchPage(new DummyLockContext(), nextIndex); nextIter = new LogPageIterator(page, 0); } catch (PageException e) { break; } } while (!nextIter.hasNext());  return iterable; } throw new NoSuchElementException(); }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
************************************
[+] input: testUpdateFreeSpace() { createPageDirectory((short) 10);  short pageSize = (short) (pageDirectory.getEffectivePageSize() - 10); Page p1 = pageDirectory.getPageWithSpace(pageSize); p1.unpin();  pageDirectory.updateFreeSpace(p1, (short) 10);  Page p2 = pageDirectory.getPageWithSpace((short) 10); p2.unpin();  "<AssertPlaceHolder>"; }
getPageWithSpace(short requiredSpace) { if (requiredSpace <= 0) { throw new IllegalArgumentException("cannot request nonpositive amount of space"); } if (requiredSpace > EFFECTIVE_PAGE_SIZE - emptyPageMetadataSize) { throw new IllegalArgumentException("requesting page with more space than the size of the page"); }  Page page = this.firstHeader.loadPageWithSpace(requiredSpace); LockContext pageContext = lockContext.childContext(page.getPageNum()); // TODO(proj4_part2): Update the following line LockUtil.ensureSufficientLockHeld(pageContext, LockType.NL);  return new DataPage(pageDirectoryId, page); }
[*] target: assertEquals(p1, p2)
[-] pred: org. junit. Assert. assertEquals ( p1, p2 )
************************************
************************************
[+] input: shouldReturnParsedValueForTransformFromParquet() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); String testString = "test-string"; ByteString expectedByteString = ByteString.copyFrom(testString.getBytes()); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("log_key", Binary.fromConstantByteArray(expectedByteString.toByteArray())); PrimitiveTypeHandler primitiveTypeHandler = new PrimitiveTypeHandler(fieldDescriptor);  ByteString actualByteString = (ByteString) primitiveTypeHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { PrimitiveHandler primitiveHandler = PrimitiveHandlerFactory.getTypeHandler(fieldDescriptor); return primitiveHandler.parseSimpleGroup(simpleGroup); }
[*] target: assertEquals(expectedByteString, actualByteString)
[-] pred: org. junit. Assert. assertEquals ( expectedByteString, actualByteString )
************************************
************************************
[+] input: shouldReturnStringEnumValueWhenSimpleGroupIsPassed() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("status"); String expectedEnum = fieldDescriptor.getEnumType().getValues().get(1).getName(); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("status") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("status", expectedEnum); EnumHandler enumHandler = new EnumHandler(fieldDescriptor);  Object actualEnum = enumHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String defaultEnumValue = fieldDescriptor.getEnumType().findValueByNumber(0).getName(); String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { String parquetEnumValue = simpleGroup.getString(fieldName, 0); Descriptors.EnumValueDescriptor enumValueDescriptor = fieldDescriptor.getEnumType().findValueByName(parquetEnumValue); return enumValueDescriptor == null ? defaultEnumValue : enumValueDescriptor.getName(); } return defaultEnumValue; }
[*] target: assertEquals(expectedEnum, actualEnum)
[-] pred: org. junit. Assert. assertEquals ( expectedEnum, actualEnum )
************************************
************************************
[+] input: shouldReturnNullWhenTimeStampNotAvailableAndFieldDescriptorOfTypeTimeStampForTransformForPostProcessor() { Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("booking_creation_time");  TypeHandler typeHandler = TypeHandlerFactory.getTypeHandler(fieldDescriptor);  Object value = typeHandler.transformFromPostProcessor(null); "<AssertPlaceHolder>"; }
transformFromPostProcessor(Object field) { return isValid(field) ? field.toString() : null; }
[*] target: assertNull(value)
[-] pred: org. junit. Assert. assertNull ( value )
************************************
************************************
[+] input: shouldHandleTimestampMessagesByReturningNullForNonParseableTimeStampsForTransformForPostProcessor() { Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("event_timestamp");  TypeHandler typeHandler = TypeHandlerFactory.getTypeHandler(fieldDescriptor);  Object value = typeHandler.transformFromPostProcessor("2");  "<AssertPlaceHolder>"; }
transformFromPostProcessor(Object field) { return isValid(field) ? field.toString() : null; }
[*] target: assertNull(value)
[-] pred: org. junit. Assert. assertNull ( value )
************************************
************************************
[+] input: shouldTransformEpochInMillisFromSimpleGroup() { long sampleTimeInMillis = Instant.now().toEpochMilli(); Instant instant = Instant.ofEpochMilli(sampleTimeInMillis); Row expectedRow = Row.of(instant.getEpochSecond(), instant.getNano());  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("event_timestamp") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("event_timestamp", sampleTimeInMillis);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfNullIsPassedToTransformFromParquet() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  Row actualRow = (Row) timestampHandler.transformFromParquet(null);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfSimpleGroupDoesNotContainField() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfSimpleGroupDoesNotContainValueForInt64TimestampField() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("event_timestamp") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldTransformGroupTypeTimestampFromSimpleGroup() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(seconds, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType timestampSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("seconds") .required(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldUseDefaultSecondsDuringTransformIfSimpleGroupDoesNotContainSecondsInGroupTypeTimestamp() { Instant currentInstant = Instant.now(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(0L, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* only adding nanos field to the timestamp schema and initializing it */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldUseDefaultSecondsDuringTransformIfSimpleGroupHasGroupTypeTimestampWithSecondsNotInitialized() { Instant currentInstant = Instant.now(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(0L, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* adding both nanos and seconds field to the timestamp schema but initializing only for nanos */ GroupType timestampSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("seconds") .required(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldUseDefaultNanosDuringTransformIfSimpleGroupDoesNotContainNanosInGroupTypeTimestamp() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); Row expectedRow = Row.of(seconds, 0);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* only adding seconds field to the timestamp schema and initializing it */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT64).named("seconds") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldUseDefaultNanosDuringTransformIfSimpleGroupHasGroupTypeTimestampWithNanosNotInitialized() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); Row expectedRow = Row.of(seconds, 0);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* adding both nanos and seconds field to the timestamp schema but initializing only for seconds */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT64).named("seconds") .optional(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
transformFromParquet(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName(); if (simpleGroup != null && SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { Type timestampType = simpleGroup.getType().getType(fieldName); if (timestampType instanceof PrimitiveType) { return parseInt64TimestampFromSimpleGroup(simpleGroup, fieldName); } else if (timestampType instanceof GroupType) { return parseGroupTypeTimestampFromSimpleGroup(simpleGroup, fieldName); } } return Row.of(DEFAULT_SECONDS_VALUE, DEFAULT_NANOS_VALUE); }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
************************************
[+] input: shouldFetchDefaultValueIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BOOLEAN).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor);  Object actualValue = booleanHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
parseSimpleGroup(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName();  /* this if branch checks that the field name exists in the simple group schema and is initialized */ if (SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { return simpleGroup.getBoolean(fieldName, 0); } else { /* return default value */ return false; } }
[*] target: assertEquals(false, actualValue)
[-] pred: org. junit. Assert. assertEquals ( false, actualValue )
************************************
************************************
[+] input: shouldFetchDefaultValueIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BOOLEAN).named("customer_dynamic_surge_enabled") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor);  Object actualValue = booleanHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
parseSimpleGroup(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName();  /* this if branch checks that the field name exists in the simple group schema and is initialized */ if (SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { return simpleGroup.getBoolean(fieldName, 0); } else { /* return default value */ return false; } }
[*] target: assertEquals(false, actualValue)
[-] pred: org. junit. Assert. assertEquals ( false, actualValue )
************************************
************************************
[+] input: shouldFetchUTF8EncodedByteStringForFieldOfTypeBinaryInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); String testString = "test-string"; ByteString expectedByteString = ByteString.copyFrom(testString.getBytes()); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("log_key", Binary.fromConstantByteArray(expectedByteString.toByteArray())); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor);  Object actualValue = byteStringHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
parseSimpleGroup(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName();  /* this if branch checks that the field name exists in the simple group schema and is initialized */ if (SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { byte[] byteArray = simpleGroup.getBinary(fieldName, 0).getBytes(); return ByteString.copyFrom(byteArray); } else { return null; } }
[*] target: assertEquals(expectedByteString, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedByteString, actualValue )
************************************
************************************
[+] input: shouldReturnNullIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor);  Object actualValue = byteStringHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
parseSimpleGroup(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName();  /* this if branch checks that the field name exists in the simple group schema and is initialized */ if (SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { byte[] byteArray = simpleGroup.getBinary(fieldName, 0).getBytes(); return ByteString.copyFrom(byteArray); } else { return null; } }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
************************************
[+] input: shouldReturnNullIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor);  Object actualValue = byteStringHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
parseSimpleGroup(SimpleGroup simpleGroup) { String fieldName = fieldDescriptor.getName();  /* this if branch checks that the field name exists in the simple group schema and is initialized */ if (SimpleGroupValidation.checkFieldExistsAndIsInitialized(simpleGroup, fieldName)) { byte[] byteArray = simpleGroup.getBinary(fieldName, 0).getBytes(); return ByteString.copyFrom(byteArray); } else { return null; } }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeInteger() { int actualValue = 2;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cancel_reason_id"); IntegerHandler integerHandler = new IntegerHandler(fieldDescriptor); Object value = integerHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
parseObject(Object field) { return Integer.parseInt(getValueOrDefault(field, "0")); }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeLong() { long actualValue = 2L;  Descriptors.FieldDescriptor fieldDescriptor = TestAggregatedSupplyMessage.getDescriptor().findFieldByName("s2_id"); LongHandler longHandler = new LongHandler(fieldDescriptor); Object value = longHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
parseObject(Object field) { return Long.parseLong(getValueOrDefault(field, "0")); }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeString() { String actualValue = "test";  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("order_number"); StringHandler stringHandler = new StringHandler(fieldDescriptor); Object value = stringHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
parseObject(Object field) { return getValueOrDefault(field, ""); }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
************************************
[+] input: shouldReturnKafkaEnvVarsPositive() { Configuration configuration = new Configuration(); configuration.setString("PATH", "/usr/local/bin"); configuration.setString("SHELL", "/usr/local/bin/zsh"); configuration.setString("source_kafka_config_fetch_min_bytes", "1"); configuration.setString("source_kafka_config_ssl_keystore_location", "/home/user/.ssh/keystore"); configuration.setString("source_kafka_config_enable_auto_commit", "false");  Properties expectedEnvVars = new Properties() {{ put("fetch.min.bytes", "1"); put("ssl.keystore.location", "/home/user/.ssh/keystore"); put("enable.auto.commit", "false"); }};  Properties actualEnvVars = KafkaEnvironmentVariables.parse(configuration);  "<AssertPlaceHolder>"; }
parse(Configuration configuration) { Properties props = new Properties();  if (configuration == null || configuration.keySet().size() == 0) { return props; }  configuration.toMap().entrySet() .stream() .filter(e -> e.getKey().toLowerCase().startsWith(KAFKA_PREFIX)) .forEach(e -> props.setProperty(parseVarName(e.getKey()), e.getValue())); return props; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
************************************
[+] input: shouldReturnParentPostProcessor() { when(configuration.getString(Constants.FLINK_SQL_QUERY_KEY, Constants.FLINK_SQL_QUERY_DEFAULT)).thenReturn("test-sql"); when(configuration.getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)).thenReturn(true);  List<PostProcessor> postProcessors = PostProcessorFactory.getPostProcessors(daggerContext, stencilClientOrchestrator, columnNames, metricsTelemetryExporter);  "<AssertPlaceHolder>"; assertEquals(ParentPostProcessor.class, postProcessors.get(0).getClass()); }
getPostProcessors(DaggerContext daggerContext, StencilClientOrchestrator stencilClientOrchestrator, String[] columnNames, MetricsTelemetryExporter metricsTelemetryExporter) { List<PostProcessor> postProcessors = new ArrayList<>();  if (Arrays.stream(columnNames).anyMatch(s -> Pattern.compile(".*\\blongbow.*key\\b.*").matcher(s).find())) { postProcessors.add(getLongBowProcessor(columnNames, daggerContext.getConfiguration(), metricsTelemetryExporter, stencilClientOrchestrator)); } if (daggerContext.getConfiguration().getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)) { postProcessors.add(new ParentPostProcessor(daggerContext, stencilClientOrchestrator, metricsTelemetryExporter)); } if (daggerContext.getConfiguration().getBoolean(Constants.METRIC_TELEMETRY_ENABLE_KEY, Constants.METRIC_TELEMETRY_ENABLE_VALUE_DEFAULT)) { postProcessors.add(new TelemetryProcessor(metricsTelemetryExporter)); } return postProcessors; }
[*] target: assertEquals(1, postProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 1, postProcessors. size ( ) )
************************************
************************************
[+] input: shouldCheckIfQueryIsInValidInCaseOfSingeEmptyVariableValueForSingleField() { when(sourceConfig.getVariables()).thenReturn("customer_id"); when(sourceConfig.getPattern()).thenReturn(""{\\"key\\": \\"%s\\"}"");  Row row = new Row(2); Row inputData = new Row(2); inputData.setField(1, ""); row.setField(0, inputData); row.setField(1, new Row(1)); RowManager rowManager = new RowManager(row);  endpointHandler = new EndpointHandler(meterStatsManager, errorReporter, inputProtoClasses, getColumnNameManager(new String[]{"order_number", "customer_id"}), descriptorManager); Object[] endpointOrQueryVariablesValues = endpointHandler .getVariablesValue(rowManager, Constants.ExternalPostProcessorVariableType.REQUEST_VARIABLES, sourceConfig.getVariables(), resultFuture);  boolean queryInvalid = endpointHandler.isQueryInvalid(resultFuture, rowManager, sourceConfig.getVariables(), endpointOrQueryVariablesValues); "<AssertPlaceHolder>"; verify(resultFuture, times(1)).complete(any()); verify(meterStatsManager, times(1)).markEvent(ExternalSourceAspects.EMPTY_INPUT); }
isQueryInvalid(ResultFuture<Row> resultFuture, RowManager rowManager, String variables, Object[] variablesValue) { if (!StringUtils.isEmpty(variables) && (Arrays.asList(variablesValue).isEmpty() || Arrays.stream(variablesValue).allMatch(""::equals))) { LOGGER.warn("Could not populate any request variable. Skipping external calls"); meterStatsManager.markEvent(ExternalSourceAspects.EMPTY_INPUT); resultFuture.complete(singleton(rowManager.getAll())); return true; } return false; }
[*] target: assertTrue(queryInvalid)
[-] pred: org. junit. Assert. assertTrue ( queryInvalid )
************************************
************************************
[+] input: shouldCheckIfQueryIsInvalidInCaseOfAllVariableValues() { when(sourceConfig.getVariables()).thenReturn("order_number,customer_id"); when(sourceConfig.getPattern()).thenReturn(""{\\"key\\": \\"%s\\", \\"other_key\\": \\"%s\\"}"");  Row row = new Row(2); Row inputData = new Row(2); inputData.setField(1, ""); inputData.setField(0, ""); row.setField(0, inputData); row.setField(1, new Row(1)); RowManager rowManager = new RowManager(row);  endpointHandler = new EndpointHandler(meterStatsManager, errorReporter, inputProtoClasses, getColumnNameManager(new String[]{"order_number", "customer_id"}), descriptorManager); Object[] endpointOrQueryVariablesValues = endpointHandler .getVariablesValue(rowManager, Constants.ExternalPostProcessorVariableType.REQUEST_VARIABLES, sourceConfig.getVariables(), resultFuture);  boolean queryInvalid = endpointHandler.isQueryInvalid(resultFuture, rowManager, sourceConfig.getVariables(), endpointOrQueryVariablesValues); "<AssertPlaceHolder>"; verify(meterStatsManager, times(1)).markEvent(ExternalSourceAspects.EMPTY_INPUT); }
isQueryInvalid(ResultFuture<Row> resultFuture, RowManager rowManager, String variables, Object[] variablesValue) { if (!StringUtils.isEmpty(variables) && (Arrays.asList(variablesValue).isEmpty() || Arrays.stream(variablesValue).allMatch(""::equals))) { LOGGER.warn("Could not populate any request variable. Skipping external calls"); meterStatsManager.markEvent(ExternalSourceAspects.EMPTY_INPUT); resultFuture.complete(singleton(rowManager.getAll())); return true; } return false; }
[*] target: assertTrue(queryInvalid)
[-] pred: org. junit. Assert. assertTrue ( queryInvalid )
************************************
************************************
[+] input: shouldReturnMandatoryFields() { HashMap<String, Object> expectedMandatoryFields = new HashMap<>(); expectedMandatoryFields.put("host", host); expectedMandatoryFields.put("port", port); expectedMandatoryFields.put("endpoint_pattern", endpointPattern); expectedMandatoryFields.put("capacity", capacity); expectedMandatoryFields.put("connect_timeout", connectTimeout); expectedMandatoryFields.put("retry_timeout", retryTimeout); expectedMandatoryFields.put("socket_timeout", socketTimeout); expectedMandatoryFields.put("stream_timeout", streamTimeout); expectedMandatoryFields.put("fail_on_errors", failOnErrors); expectedMandatoryFields.put("outputMapping", outputMappingHashMap); EsSourceConfig esSourceConfig = getValidEsSourceConfigBuilder().createEsSourceConfig(); HashMap<String, Object> actualMandatoryFields = esSourceConfig.getMandatoryFields(); "<AssertPlaceHolder>"; }
getMandatoryFields() { HashMap<String, Object> mandatoryFields = new HashMap<>(); mandatoryFields.put("host", host); mandatoryFields.put("port", port); mandatoryFields.put("endpoint_pattern", endpointPattern); mandatoryFields.put("capacity", capacity); mandatoryFields.put("connect_timeout", connectTimeout); mandatoryFields.put("retry_timeout", retryTimeout); mandatoryFields.put("socket_timeout", socketTimeout); mandatoryFields.put("stream_timeout", streamTimeout); mandatoryFields.put("fail_on_errors", failOnErrors); mandatoryFields.put("outputMapping", outputMapping);  return mandatoryFields; }
[*] target: assertEquals(expectedMandatoryFields, actualMandatoryFields)
[-] pred: org. junit. Assert. assertEquals ( expectedMandatoryFields, actualMandatoryFields )
************************************
************************************
[+] input: channelShouldBeAddedForAHostAndPort() {  grpcSourceConfig = mock(GrpcSourceConfig.class);  GrpcClient grpcClient = new GrpcClient(grpcSourceConfig);  when(grpcSourceConfig.getEndpoint()).thenReturn("localhost"); when(grpcSourceConfig.getServicePort()).thenReturn(8080);  grpcClient.addChannel();  Channel decoratedChannel = grpcClient.getDecoratedChannel(); "<AssertPlaceHolder>";  }
getDecoratedChannel() { return decoratedChannel; }
[*] target: assertNotNull(decoratedChannel)
[-] pred: org. junit. Assert. assertNotNull ( decoratedChannel )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(commonMessage.getDescriptor(), commonMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestNestedMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestNestedMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestNestedMessage nestedMessage = TestNestedMessage.newBuilder() .setNestedId("id-123") .setSingleMessage(commonMessage) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(nestedMessage.getDescriptor(), nestedMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"nested_id":"id-123","single_message":{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestNestedRepeatedMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestNestedRepeatedMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestNestedRepeatedMessage nestedRepeatedMessage = TestNestedRepeatedMessage.newBuilder() .addRepeatedMessage(commonMessage) .addRepeatedMessage(commonMessage) .addRepeatedNumberField(1) .addRepeatedNumberField(2) .setNumberField(10) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(nestedRepeatedMessage.getDescriptor(), nestedRepeatedMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"single_message":{"order_number":"","order_url":"","order_details":""},"repeated_message":[{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"},{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}],"number_field":10,"repeated_number_field":[1,2],"metadata":null,"event_timestamp":{"seconds":0,"nanos":0},"repeated_long_field":[]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestMapMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestMapMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestMapMessage mapMessage = TestMapMessage.newBuilder() .putCurrentState("foo", "bar") .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(mapMessage.getDescriptor(), mapMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"order_number":"","current_state":[{"key":"foo","value":"bar"}]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestRepeatedEnumMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestRepeatedEnumMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestRepeatedEnumMessage repeatedEnumMessage = TestRepeatedEnumMessage.newBuilder() .addTestEnumsValue(0) .addTestEnumsValue(0) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(repeatedEnumMessage.getDescriptor(), repeatedEnumMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"test_enums":["UNKNOWN","UNKNOWN"]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestComplexMap"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestComplexMap.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestComplexMap complexMapMessage = TestComplexMap.newBuilder() .putComplexMap(1, commonMessage) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(complexMapMessage.getDescriptor(), complexMapMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"complex_map":[{"key":1,"value":{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}}],"int_message":[],"string_message":[]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
getResult(RowManager rowManager) { if (jsonRowSerializationSchema == null) { jsonRowSerializationSchema = createJsonRowSerializationSchema(); } return new String(jsonRowSerializationSchema.serialize(rowManager.getInputData())); }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
************************************
[+] input: shouldParseProtoByteDataFromBigTable() { ArrayList<Result> results = new ArrayList<>(); results.add(scanResult); byte[] mockResult = Bytes.toBytes("test"); when(scanResult.getValue(COLUMN_FAMILY_NAME, Bytes.toBytes(Constants.LONGBOW_QUALIFIER_DEFAULT))).thenReturn(mockResult); LongbowProtoData longbowProtoData = new LongbowProtoData(); Map<String, List<byte[]>> actualMap = longbowProtoData.parse(results); Map<String, List<byte[]>> expectedMap = new HashMap<String, List<byte[]>>() {{ put("proto_data", Arrays.asList(mockResult)); }}; "<AssertPlaceHolder>"; }
parse(List<Result> scanResult) { ArrayList<byte[]> data = new ArrayList<>();  for (int i = 0; i < scanResult.size(); i++) { data.add(i, scanResult.get(i).getValue(COLUMN_FAMILY_NAME, Bytes.toBytes(Constants.LONGBOW_QUALIFIER_DEFAULT))); }  HashMap<String, List<byte[]>> longbowData = new HashMap<>(); longbowData.put(Constants.LONGBOW_PROTO_DATA_KEY, data); return longbowData; }
[*] target: assertEquals(expectedMap, actualMap)
[-] pred: org. junit. Assert. assertEquals ( expectedMap, actualMap )
************************************
************************************
[+] input: shouldReturnMultipleListOfStringWhenLongbowDataMoreThanOne() { List<Result> scanResult = new ArrayList<>(); scanResult.add(result1); scanResult.add(result2); String[] columnNames = {"longbow_key", "longbow_data1", "rowtime", "longbow_duration", "longbow_data2"};  LongbowSchema longbowSchema = new LongbowSchema(columnNames); LongbowTableData longbowTableData = new LongbowTableData(longbowSchema); Map<String, List<String>> actualData = longbowTableData.parse(scanResult); Map<String, List<String>> expectedMap = new HashMap<String, List<String>>() {{ put("longbow_data1", Arrays.asList("RB-234", "RB-224")); put("longbow_data2", Arrays.asList("RB-235", "RB-225")); }}; "<AssertPlaceHolder>"; }
parse(List<Result> scanResult) { Map<String, List<String>> longbowData = new HashMap<>(); List<String> longbowDataColumnNames = longbowSchema.getColumnNames(c -> c.getKey().contains(Constants.LONGBOW_DATA_KEY)); if (scanResult.isEmpty()) { longbowDataColumnNames.forEach(name -> longbowData.put(name, new ArrayList<>())); } else { longbowDataColumnNames.forEach(name -> longbowData.put(name, getData(scanResult, name))); } return longbowData; }
[*] target: assertEquals(expectedMap, actualData)
[-] pred: org. junit. Assert. assertEquals ( expectedMap, actualData )
************************************
************************************
[+] input: shouldBuildBigQuerySink() { StencilClientOrchestrator stencilClientOrchestrator = Mockito.mock(StencilClientOrchestrator.class); BigQuerySinkBuilder builder = BigQuerySinkBuilder.create(); builder.setColumnNames(new String[]{"test", "some_column"}); builder.setConfiguration(new Configuration(ParameterTool.fromMap(new HashMap<String, String>() {{ put("SINK_CONNECTOR_SCHEMA_PROTO_MESSAGE_CLASS", "test"); }}))); builder.setStencilClientOrchestrator(stencilClientOrchestrator); Assert."<AssertPlaceHolder>"; }
build() { ProtoSerializer protoSerializer = new ProtoSerializer( configuration.getString("SINK_CONNECTOR_SCHEMA_PROTO_KEY_CLASS", ""), configuration.getString("SINK_CONNECTOR_SCHEMA_PROTO_MESSAGE_CLASS", ""), columnNames, stencilClientOrchestrator); Configuration conf = setDefaultValues(configuration); return new BigQuerySink(conf, protoSerializer, daggerStatsDReporter); }
[*] target: assertNotNull(builder.build())
[-] pred: org. junit. Assert. assertNotNull ( builder. build() )
************************************
************************************
[+] input: shouldNotReturnAnyError() { LateRecordDropError lateRecordDropError = new LateRecordDropError(initContext); "<AssertPlaceHolder>"; }
getCurrentException() { return null; }
[*] target: assertNull(lateRecordDropError.getCurrentException())
[-] pred: org. junit. Assert. assertNull ( lateRecordDropError. getCurrentException() )
************************************
************************************
[+] input: shouldHaveNoError() { LateRecordDropError lateRecordDropError = new LateRecordDropError(initContext); "<AssertPlaceHolder>"; }
hasException() { return false; }
[*] target: assertFalse(lateRecordDropError.hasException())
[-] pred: org. junit. Assert. assertFalse ( lateRecordDropError. hasException() )
************************************
************************************
[+] input: IOException { String storeFileType = "JKS"; when(jsonReader.nextString()).thenReturn(storeFileType); DaggerSSLKeyStoreFileTypeAdaptor daggerSSLKeyStoreFileTypeAdaptor = new DaggerSSLKeyStoreFileTypeAdaptor(); String keystoreFileType = daggerSSLKeyStoreFileTypeAdaptor.read(jsonReader); "<AssertPlaceHolder>"; }
read(JsonReader jsonReader) throws IOException { String keyStoreFileType = jsonReader.nextString(); if (Arrays.stream(Constants.SUPPORTED_SOURCE_KAFKA_CONSUMER_CONFIG_SSL_STORE_FILE_TYPE).anyMatch(keyStoreFileType::equals)) { return keyStoreFileType; } else { throw new InvalidConfigurationException(String.format("Configured wrong SOURCE_KAFKA_CONSUMER_CONFIG_SSL_KEYSTORE_TYPE_KEY supported values are %s", Arrays.toString(Constants.SUPPORTED_SOURCE_KAFKA_CONSUMER_CONFIG_SSL_STORE_FILE_TYPE))); } }
[*] target: assertEquals(storeFileType, keystoreFileType)
[-] pred: org. junit. Assert. assertEquals ( storeFileType, keystoreFileType )
************************************
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceDetailsContainsMultipleBackToBackSources() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED), new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
canBuild() { SourceDetails[] sourceDetailsArray = streamConfig.getSourceDetails(); if (sourceDetailsArray.length != 1) { return false; } else { SourceName sourceName = sourceDetailsArray[0].getSourceName(); SourceType sourceType = sourceDetailsArray[0].getSourceType(); return sourceName.equals(SUPPORTED_SOURCE_NAME) && sourceType.equals(SUPPORTED_SOURCE_TYPE) && deserializer instanceof KafkaDeserializationSchema; } }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
************************************
[+] input: shouldReturnNullIfPythonFilesConfigIsNotGiven() { String pythonJsonConfig = "{"PYTHON_FN_EXECUTION_ARROW_BATCH_SIZE": "10000", "PYTHON_FN_EXECUTION_BUNDLE_SIZE": "100000", "PYTHON_FN_EXECUTION_BUNDLE_TIME": "1000"}";  when(configuration.getString(Constants.PYTHON_UDF_CONFIG, "")).thenReturn(pythonJsonConfig); PythonUdfConfig pythonUdfConfig = PythonUdfConfig.parse(configuration);  Assert.assertNull(pythonUdfConfig.getPythonFiles()); Assert."<AssertPlaceHolder>"; Assert.assertNull(pythonUdfConfig.getPythonRequirements()); }
getPythonArchives() { if (pythonArchives != null) { return pythonArchives.replaceAll("\\s+", ""); } return null; }
[*] target: assertNull(pythonUdfConfig.getPythonArchives())
[-] pred: org. junit. Assert. assertNull ( pythonUdfConfig. getPythonArchives ( ) )
************************************
************************************
[+] input: IOException { ClassLoader classLoader = getClass().getClassLoader(); String pythonFile = classLoader.getResource("python_udf.zip").getFile(); byte[] expectedObject = Files.readAllBytes(Paths.get(pythonFile));  when(gcsClient.getFile(pythonFile)).thenReturn(expectedObject); GcsFileSource gcsFileSource = new GcsFileSource(pythonFile, gcsClient);  byte[] actualObject = gcsFileSource.getObjectFile();  Assert."<AssertPlaceHolder>"; }
getObjectFile() { return getGcsClient().getFile(pythonFile); }
[*] target: assertEquals(expectedObject, actualObject)
[-] pred: org. junit. Assert. assertEquals ( expectedObject, actualObject )
************************************
************************************
[+] input: shouldDeleteValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":"v2"}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k2"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).delete(JsonPath.compile(jPath)).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldDeleteNodeValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k2"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).delete(JsonPath.compile(jPath)).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldDeleteNestedValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String expectedJsonEvent = "{"k1":"v1","k2":{"key2":"value2","key3":"value3"}}"; String jPath = "$.k2.key1"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).delete(JsonPath.compile(jPath)).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldDeleteArrayValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":["value1","value2","value3"]}"; String expectedJsonEvent = "{"k1":"v1","k2":["value1","value3"]}"; String jPath = "$.k2[1]"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).delete(JsonPath.compile(jPath)).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldReturnEmptyJsonAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":["value1","value2","value3"]}"; String expectedJsonEvent = "{}"; String jPath = "$..*"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).delete(JsonPath.compile(jPath)).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldReturnAddedJsonStringForEmptyJsonWithNewKeyValue() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k1"; String updateValue = "v1"; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath, @DataTypeHint(inputGroup = InputGroup.ANY) Object newValue) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).set(JsonPath.compile(jPath), newValue).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldReturnAddedJsonStringForNestedJson() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":{"key1":"value1","key2":"value2"}}"; String expectedJsonEvent = "{"k1":null,"k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String jPath = "$.k2.key3"; String updateValue = "value3"; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath, @DataTypeHint(inputGroup = InputGroup.ANY) Object newValue) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).set(JsonPath.compile(jPath), newValue).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldReturnUpdatedJsonStringForNewNestedKeyValue() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":"v2"}"; String expectedJsonEvent = "{"k1":null,"k2":"v2","k3":{"key1":"value1","key2":"value2"}}"; String jPath = "$.k3"; Map<String, String> updateValue = new HashMap<String, String>() {{ put("key1", "value1"); put("key2", "value2"); }}; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath, @DataTypeHint(inputGroup = InputGroup.ANY) Object newValue) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).set(JsonPath.compile(jPath), newValue).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldReturnUpdatedJsonStringForNewNestedKeyValueInNestedPath() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":"v2","k3":{"nk1":"nv1","nk2":"nv2"}}"; String expectedJsonEvent = "{"k1":null,"k2":"v2","k3":{"nk1":{"key1":"value1","key2":"value2"},"nk2":"nv2"}}"; String jPath = "$.k3.nk1"; Map<String, String> updateValue = new HashMap<String, String>() {{ put("key1", "value1"); put("key2", "value2"); }}; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
eval(String jsonEvent, String jPath, @DataTypeHint(inputGroup = InputGroup.ANY) Object newValue) throws PathNotFoundException { Configuration configuration = Configuration.defaultConfiguration().setOptions(Option.DEFAULT_PATH_LEAF_TO_NULL); return JsonPath.using(configuration).parse(jsonEvent).set(JsonPath.compile(jPath), newValue).jsonString(); }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
************************************
[+] input: shouldGetValueForValueForGivenKeyInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); String expectedValue = "0.4"; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "weighted_abuse_probability";  rows.add(row1); rows.add(row2);   MapGet mapGet = new MapGet(); Object actualValue = mapGet.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
eval(Row[] inputMap, Object key) { List<Row> rows = Arrays.asList(inputMap); Optional<Row> requiredRow = rows.stream().filter(row -> row.getField(0).equals(key)).findFirst(); return requiredRow.map(row -> row.getField(1)).orElse(null); }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
************************************
[+] input: shouldGetIntValueForValueForGivenKeyInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); int expectedValue = 4; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "weighted_abuse_probability";  rows.add(row1); rows.add(row2);   MapGet mapGet = new MapGet(); Object actualValue = mapGet.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
eval(Row[] inputMap, Object key) { List<Row> rows = Arrays.asList(inputMap); Optional<Row> requiredRow = rows.stream().filter(row -> row.getField(0).equals(key)).findFirst(); return requiredRow.map(row -> row.getField(1)).orElse(null); }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
************************************
[+] input: shouldReturnNullIfValueIsNotPresentInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); int expectedValue = 4; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "abuse_probability";  rows.add(row1); rows.add(row2);  MapGet valueForKeyInMap = new MapGet(); Object actualValue = valueForKeyInMap.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
eval(Row[] inputMap, Object key) { List<Row> rows = Arrays.asList(inputMap); Optional<Row> requiredRow = rows.stream().filter(row -> row.getField(0).equals(key)).findFirst(); return requiredRow.map(row -> row.getField(1)).orElse(null); }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
************************************
[+] input: onCreation_whenGreenplumVersionIsBelowSix_thenExecutionLocationIsNotSet() { withGreenplumVersionLessThan6(() -> { GreenplumFunction function = new GreenplumFunction(mockSchema); Assert."<AssertPlaceHolder>"; }); }
getExecutionLocation() { return executionLocation; }
[*] target: assertNull(function.getExecutionLocation())
[-] pred: org. junit. Assert. assertNull ( function. getExecutionLocation() )
************************************
************************************
[+] input: shouldDoDefaultFormat() { //given String expectedString = getExpectedString(); String inputString = "SELECT * FROM TABLE1 t WHERE a > 100 AND b BETWEEN 12 AND 45;  SELECT t.*, j1.x, j2.y FROM TABLE1 t JOIN JT1 j1 ON j1.a = t.a LEFT OUTER JOIN JT2 j2 ON j2.a = t.a AND j2.b = j1.b WHERE t.xxx NOT NULL;  DELETE FROM TABLE1 WHERE a = 1;  UPDATE TABLE1 SET a = 2 WHERE a = 1;  SELECT table1.id, table2.number, SUM(table1.amount) FROM table1 INNER JOIN table2 ON table.id = table2.table1_id WHERE table1.id IN ( SELECT table1_id FROM table3 WHERE table3.name = 'Foo Bar' AND table3.type = 'unknown_type') GROUP BY table1.id, table2.number ORDER BY table1.id;\n";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);  //when String formattedString = formatter.format(inputString, configuration);  //then  "<AssertPlaceHolder>"; }
format(final String argSql, SQLFormatterConfiguration configuration) { formatterCfg = configuration;  for (String delim : formatterCfg.getSyntaxManager().getStatementDelimiters()) { statementDelimiters.add(delim.toUpperCase(Locale.ENGLISH)); }  SQLTokensParser fParser = new SQLTokensParser(formatterCfg);  boolean isSqlEndsWithNewLine = false; if (argSql.endsWith("\n")) { //$NON-NLS-1$ isSqlEndsWithNewLine = true; }  List<FormatterToken> list = fParser.parse(argSql); list = format(list);  StringBuilder after = new StringBuilder(argSql.length() + 20); for (FormatterToken token : list) { after.append(token.getString()); }  if (isSqlEndsWithNewLine) { after.append(GeneralUtils.getDefaultLineSeparator()); }  return after.toString(); }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
************************************
[+] input: Exception { final DigitalCovidCertificate dgc = (DigitalCovidCertificate) new DigitalCovidCertificate() .withNam(new PersonName().withGn("Martin").withFn("Lindström")) .withDob("1969-11-11") .withV(Arrays.asList(new VaccinationEntry() .withTg("840539006") .withVp("1119349007") .withMp("EU/1/20/1507") .withMa("ORG-100030215") .withDn(Integer.valueOf(1)) .withSd(Integer.valueOf(2)) .withDt(LocalDate.parse("2021-04-17")) .withCo("SE") .withIs("Swedish eHealth Agency") .withCi("01:SE:JKJKHJGHG6768686HGJGH#M")));  byte[] encoding = dgc.encode();  DigitalCovidCertificate dgc2 = DigitalCovidCertificate.decode(encoding);  Assert."<AssertPlaceHolder>"; }
decode(final byte[] cbor) throws DGCSchemaException { try { return cborMapper.readValue(cbor, DigitalCovidCertificate.class); } catch (final IOException e) { throw new DGCSchemaException("Failed to decode DCC from CBOR encoding", e); } }
[*] target: assertEquals(dgc, dgc2)
[-] pred: org. junit. Assert. assertEquals ( dgc, dgc2 )
************************************
************************************
[+] input: Exception { final DigitalCovidCertificate dgc = (DigitalCovidCertificate) new DigitalCovidCertificate() .withNam(new PersonName().withGn("Martin").withFn("Lindström")) .withDob("1969-11-11") .withV(Arrays.asList(new VaccinationEntry() .withTg("840539006") .withVp("1119349007") .withMp("EU/1/20/1507") .withMa("ORG-100030215") .withDn(Integer.valueOf(1)) .withSd(Integer.valueOf(2)) .withDt(LocalDate.parse("2021-04-17")) .withCo("SE") .withIs("Swedish eHealth Agency") .withCi("01:SE:JKJKHJGHG6768686HGJGH#M")));  String json = dgc.toJSONString();  DigitalCovidCertificate dgc2 = DigitalCovidCertificate.fromJsonString(json);  Assert."<AssertPlaceHolder>"; }
fromJsonString(final String json) throws DGCSchemaException { try { return jsonMapper.readValue(json, DigitalCovidCertificate.class); } catch (final IOException e) { throw new DGCSchemaException("Failed to decode DCC from JSON", e); } }
[*] target: assertEquals(dgc, dgc2)
[-] pred: org. junit. Assert. assertEquals ( dgc, dgc2 )
************************************
************************************
[+] input: testGetResourceToFile() { // 测试getResourceToFile方法是否能正确地将资源文件复制到指定的文件路径  //获取临时文件路径 String tempDirectoryPath = org.apache.commons.io.FileUtils.getTempDirectoryPath();  String resourceName = "iast.properties.example"; // 假设存在名为test_resource.txt的资源文件 String fileName = tempDirectoryPath + "test.example"; // 替换为实际的目标文件路径  boolean result; try { result = FileUtils.getResourceToFile(resourceName, fileName); } catch (IOException e) { throw new RuntimeException(e); }  Assert."<AssertPlaceHolder>"; // 验证复制操作是否成功  // 验证目标文件是否存在 java.io.File targetFile = new java.io.File(fileName); Assert.assertTrue(targetFile.exists());  // 清理测试产生的文件 targetFile.delete(); }
getResourceToFile(String resourceName, String fileName) throws IOException { File targetFile = new File(fileName);  if (!targetFile.exists()) { if (!targetFile.getParentFile().exists()) { if (!targetFile.getParentFile().mkdirs()) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "mkdirs"); } } if (!targetFile.createNewFile()) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "createNewFile"); } }  try { InputStream is = FileUtils.class.getClassLoader().getResourceAsStream(resourceName); if (is == null) { return false; } FileOutputStream fos = new FileOutputStream(targetFile); int length = 0; byte[] data = new byte[1024]; while ((length = is.read(data)) != -1) { fos.write(data, 0, length); } data = null; is.close(); fos.close(); return true; } catch (Throwable e) { DongTaiLog.error(ErrorCode.AGENT_GET_RESOURCE_TO_FILE_FAILED, resourceName, fileName, "write", e); return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: convert() { Schema c = convertor.convert(Enumnumnum.class); Assert."<AssertPlaceHolder>"; Assert.assertEquals("string", c.getType()); Assert.assertArrayEquals(c.getEnums(), new String[]{"A", "B", "C"}); }
convert(Class clazz) {  if (clazz == null) { return null; }  // Open API里枚举类型是被看做一个有限取值的string Schema schema = manager.database.find(clazz); if (schema != null) { return schema; }  // 处理枚举值 Object[] enumConstants = clazz.getEnumConstants(); String[] enums = new String[enumConstants.length]; for (int i = 0; i < enumConstants.length; i++) { enums[i] = enumConstants[i].toString(); }  Schema s = new Schema(DataType.String()); s.setEnums(enums);  // 枚举不会有dfs，所以不需要触发转换完成的回调  return s; }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
************************************
[+] input: getPrintStackTraceString() { Exception e = new Exception(); String printStackTraceString = ExceptionUtil.getPrintStackTraceString(e); Assert."<AssertPlaceHolder>"; }
getPrintStackTraceString(Throwable e) { StringWriter stringWriter = new StringWriter(); PrintWriter printWriter = new PrintWriter(stringWriter); e.printStackTrace(printWriter); return stringWriter.toString(); }
[*] target: assertNotNull(printStackTraceString)
[-] pred: org. junit. Assert. assertNotNull ( printStackTraceString )
************************************
************************************
[+] input: getInstance() { IastClassDiagram instance = IastClassDiagram.getInstance(); Assert."<AssertPlaceHolder>"; }
getInstance() { // DCL if (instance == null) { synchronized (IastClassDiagram.class) { if (instance == null) { instance = new IastClassDiagram(); } } } return instance; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
************************************
[+] input: test() { final SummaryStats summaryStats = new SummaryStats(); summaryStats.add(0); assertEquals(0, summaryStats.sum(), 0); assertEquals(0, summaryStats.mean(), 0); assertEquals(0, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(0, summaryStats.max(), 0); assertEquals(1, summaryStats.size64());  summaryStats.add(1); assertEquals(1, summaryStats.sum(), 0); assertEquals(.5, summaryStats.mean(), 0); assertEquals(.25, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(1, summaryStats.max(), 0); "<AssertPlaceHolder>"; }
size64() { return size; }
[*] target: assertEquals(2, summaryStats.size64())
[-] pred: org. junit. Assert. assertEquals ( 2, summaryStats. size64() )
************************************
************************************
[+] input: selectByPrimaryKey() { final MysqlUserEntity mysqlUserEntity = BraveSql.build(MysqlUserEntity.class).selectByPrimaryKey(1); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectByPrimaryKey(Object primaryKeyValue) throws SQLException, InstantiationException, IllegalAccessException;  T selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle2() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle3() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle4() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andEqualTo(MysqlUserEntity::getGender, "未知"); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle5() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andEqualTo(MysqlUserEntity::getGender, GenderEnum.未知); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: selectSingle6() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andIn(MysqlUserEntity::getGender, Arrays.asList(GenderEnum.未知, GenderEnum.未知, GenderEnum.未知)); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
selectSingle() throws SQLException, InstantiationException, IllegalAccessException;  List<T> select() throws SQLException, InstantiationException, IllegalAccessException;  /** * 执行聚合函数，已验证5个，分别是 * sum(), avg(), min(), max(),  count() * * @param property     实体类字段名 * @param functionEnum 函数类型 * @param returnType   期待返回的类型 * @return 期待执行的结果 */ <R> R selectAggregateFunction(String property, FunctionEnum functionEnum, Class<R> returnType) throws SQLException;  <K, R> Map<K, R> selectAggregateFunction(String valueProperty, FunctionEnum functionEnum, Class<K> keyClass, Class<R> valueClass, String keyProperty) throws SQLException;  List<T> selectAll() throws SQLException, InstantiationException, IllegalAccessException;  PageInfo<T> selectPageInfo() throws SQLException, InstantiationException, IllegalAccessException;  Integer batchInsert() throws SQLException;  Integer insertActive() throws SQLException;  Integer insertOrUpdate() throws SQLException;  Integer insertOrUpdateActive() throws SQLException;  Integer update() throws SQLException;  Integer updateActive() throws SQLException;  //    Integer updateBatch();  Integer updateByPrimaryKey() throws SQLException;  Integer updateActiveByPrimaryKey() throws SQLException;  Integer delete() throws SQLException;  Integer deleteByPrimaryKey(Object primaryKeyValue) throws SQLException;  default void printSql(String sql) { if (log.isDebugEnabled()) { log.debug(sql); } }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
************************************
[+] input: testDefaultEChartsSerializer() { EChartsSerializer serializer = new EChartsSerializer(); Object object = new MarkArea2DDataItem() .setStartPoint(new MarkArea2DDataItemDim().setName("start")) .setEndPoint(new MarkArea2DDataItemDim().setName("end")); JsonElement actual = serializer.toJsonTree(object); JsonElement expected = JsonParser.parseString("[{'name': 'start'}, {'name': 'end'}]"); "<AssertPlaceHolder>"; }
toJsonTree(Object src) { return gson.toJsonTree(src); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGenerate() { String generatedAddress = ChineseAddressGenerator.getInstance() .generate(); System.err.println(generatedAddress); "<AssertPlaceHolder>"; }
generate() { StringBuilder result = new StringBuilder(genProvinceAndCity()); result.append(ChineseCharUtils.genRandomLengthChineseChars(2, 3) + "路"); result.append(RandomUtils.nextInt(1, 8000) + "号"); result .append(ChineseCharUtils.genRandomLengthChineseChars(2, 3) + "小区"); result.append(RandomUtils.nextInt(1, 20) + "单元"); result.append(RandomUtils.nextInt(101, 2500) + "室"); return result.toString(); }
[*] target: assertNotNull(generatedAddress)
[-] pred: org. junit. Assert. assertNotNull ( generatedAddress )
************************************
************************************
[+] input: generateRandomDate() { Date randomDate = ChineseIDCardNumberGenerator.randomDate(); System.err.println(randomDate); "<AssertPlaceHolder>"; }
randomDate() { Calendar calendar = Calendar.getInstance(); calendar.set(1970, 1, 1); long earlierDate = calendar.getTime().getTime(); calendar.set(2000, 1, 1); long laterDate = calendar.getTime().getTime();  long chosenDate = RandomUtils.nextLong(earlierDate, laterDate);  return new Date(chosenDate); }
[*] target: assertNotNull(randomDate)
[-] pred: org. junit. Assert. assertNotNull ( randomDate )
************************************
************************************
[+] input: testGenerate() { String idCard = ChineseIDCardNumberGenerator.getInstance().generate(); System.err.println(idCard); System.out.println("Verify id result: " + ChineseIDCardUtil.isIDCard(idCard)); "<AssertPlaceHolder>"; if (idCard.charAt(idCard.length()-2)%2 == 0){ System.err.println("女"); } else { System.err.println("男"); } }
generate() { Map<String, String> code = getAreaCode(); String areaCode = code.keySet().toArray(new String[0])[RandomUtils .nextInt(0, code.size())] + StringUtils.leftPad((RandomUtils.nextInt(0, 9998) + 1) + "", 4, "0");  String birthday = new SimpleDateFormat("yyyyMMdd").format(randomDate()); String randomCode = String.valueOf(1000 + RandomUtils.nextInt(0, 999)) .substring(1); String pre = areaCode + birthday + randomCode; String verifyCode = getVerifyCode(pre); String result = pre + verifyCode;  return result; }
[*] target: assertNotNull(idCard)
[-] pred: org. junit. Assert. assertNotNull ( idCard )
************************************
************************************
[+] input: testGenerateIssueOrg() { String issueOrg = ChineseIDCardNumberGenerator.generateIssueOrg(); System.err.println(issueOrg); "<AssertPlaceHolder>"; }
generateIssueOrg() { return ChineseAreaList.cityNameList .get(RandomUtils.nextInt(0, ChineseAreaList.cityNameList.size())) + "公安局某某分局"; }
[*] target: assertNotNull(issueOrg)
[-] pred: org. junit. Assert. assertNotNull ( issueOrg )
************************************
************************************
[+] input: testGenerateValidPeriod() { String result = ChineseIDCardNumberGenerator.generateValidPeriod(); System.err.println(result); "<AssertPlaceHolder>"; }
generateValidPeriod() { DateTime beginDate = new DateTime(randomDate()); String formater = "yyyyMMdd"; DateTime endDate = beginDate.withYear(beginDate.getYear() + 20); return beginDate.toString(formater) + "-" + endDate.toString(formater); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGenerate() { String generatedMobileNum = ChineseMobileNumberGenerator.getInstance() .generate(); "<AssertPlaceHolder>"; System.err.println(generatedMobileNum); }
generate() { return genMobilePre() + StringUtils .leftPad("" + RandomUtils.nextInt(0, 99999999 + 1), 8, "0"); }
[*] target: assertNotNull(generatedMobileNum)
[-] pred: org. junit. Assert. assertNotNull ( generatedMobileNum )
************************************
************************************
[+] input: testGgenerateFake() { String generatedMobileNum = ChineseMobileNumberGenerator.getInstance() .generateFake(); "<AssertPlaceHolder>"; System.err.println(generatedMobileNum); }
generateFake() { return "19" + StringUtils .leftPad("" + RandomUtils.nextInt(0, 999999999 + 1), 9, "0"); }
[*] target: assertNotNull(generatedMobileNum)
[-] pred: org. junit. Assert. assertNotNull ( generatedMobileNum )
************************************
************************************
[+] input: testGenerateOdd() { String generatedName = ChineseNameGenerator.getInstance().generateOdd(); "<AssertPlaceHolder>"; System.err.println(generatedName); }
generateOdd() { return genFirstName() + ChineseCharUtils.getOneOddChar(); }
[*] target: assertNotNull(generatedName)
[-] pred: org. junit. Assert. assertNotNull ( generatedName )
************************************
************************************
[+] input: testGenerate() { String generatedName = EnglishNameGenerator.getInstance().generate(); "<AssertPlaceHolder>"; System.err.println(generatedName); }
generate() { //英文名 return genFirstName(); }
[*] target: assertNotNull(generatedName)
[-] pred: org. junit. Assert. assertNotNull ( generatedName )
************************************
************************************
[+] input: FilterException { Message message = new Message(key.toByteArray(), this.testMessage.toByteArray(), "topic1", 0, 100); filter = new JexlFilter(kafkaConsumerConfig, firehoseInstrumentation); FilteredMessages filteredMessages = filter.filter(Arrays.asList(message)); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message); "<AssertPlaceHolder>"; }
filter(List<Message> messages) throws FilterException { FilteredMessages filteredMessages = new FilteredMessages(); for (Message message : messages) { try { Object data = (filterDataSourceType.equals(FilterDataSourceType.KEY)) ? message.getLogKey() : message.getLogMessage(); Object obj = MethodUtils.invokeStaticMethod(Class.forName(protoSchema), "parseFrom", data); if (evaluate(obj)) { filteredMessages.addToValidMessages(message); } else { filteredMessages.addToInvalidMessages(message); } } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) { throw new FilterException("Failed while filtering EsbMessages", e); } } return filteredMessages;  }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
************************************
[+] input: FilterException { Message message1 = new Message(testKeyProto1.toByteArray(), testMessageProto1.toByteArray(), "topic1", 0, 100); Message message2 = new Message(testKeyProto2.toByteArray(), testMessageProto2.toByteArray(), "topic1", 0, 101); Map<String, String> filterConfigs = new HashMap<>(); filterConfigs.put("FILTER_DATA_SOURCE", "message"); filterConfigs.put("FILTER_ESB_MESSAGE_FORMAT", "PROTOBUF"); filterConfigs.put("FILTER_JSON_SCHEMA", ""); filterConfigs.put("FILTER_SCHEMA_PROTO_CLASS", TestMessage.class.getName()); filterConfig = ConfigFactory.create(FilterConfig.class, filterConfigs); jsonFilter = new JsonFilter(stencilClient, filterConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message1); expectedMessages.addToValidMessages(message2); List<Message> inputMessages = Arrays.asList(message1, message2); FilteredMessages filteredMessages = jsonFilter.filter(inputMessages); "<AssertPlaceHolder>"; }
filter(List<Message> messages) throws FilterException { FilteredMessages filteredMessages = new FilteredMessages(); for (Message message : messages) { byte[] data = (filterConfig.getFilterDataSource().equals(KEY)) ? message.getLogKey() : message.getLogMessage(); String jsonMessage = deserialize(data); if (evaluate(jsonMessage)) { filteredMessages.addToValidMessages(message); } else { filteredMessages.addToInvalidMessages(message); } } return filteredMessages; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
************************************
[+] input: FilterException { Message message1 = new Message(testKeyJson1.getBytes(), testMessageJson1.getBytes(), "topic1", 0, 100); Message message2 = new Message(testKeyJson2.getBytes(), testMessageJson2.getBytes(), "topic1", 0, 101); Map<String, String> filterConfigs = new HashMap<>(); filterConfigs.put("FILTER_ESB_MESSAGE_FORMAT", "JSON"); filterConfigs.put("FILTER_DATA_SOURCE", "message"); filterConfigs.put("FILTER_JSON_SCHEMA", ""); filterConfig = ConfigFactory.create(FilterConfig.class, filterConfigs); jsonFilter = new JsonFilter(stencilClient, filterConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message1); expectedMessages.addToValidMessages(message2); List<Message> inputMessages = Arrays.asList(message1, message2); FilteredMessages filteredMessages = jsonFilter.filter(inputMessages); "<AssertPlaceHolder>"; }
filter(List<Message> messages) throws FilterException { FilteredMessages filteredMessages = new FilteredMessages(); for (Message message : messages) { byte[] data = (filterConfig.getFilterDataSource().equals(KEY)) ? message.getLogKey() : message.getLogMessage(); String jsonMessage = deserialize(data); if (evaluate(jsonMessage)) { filteredMessages.addToValidMessages(message); } else { filteredMessages.addToInvalidMessages(message); } } return filteredMessages; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
************************************
[+] input: encodesKeyToBase64() { String actual = message.getSerializedKey();  String expected = "CgMxMjMSA2FiYw==";  "<AssertPlaceHolder>"; }
getSerializedKey() { return encodedSerializedStringFrom(logKey); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: encodesValueToBase64() { String actual = message.getSerializedMessage();  String expected = "CgMxMjMSA2FiYxoHZGV0YWlscw==";  "<AssertPlaceHolder>"; }
getSerializedMessage() { return encodedSerializedStringFrom(logMessage); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldReturnKafkaEnvVarsPositive() { HashMap<String, String> systemEnvs = new HashMap<String, String>() {{ put("PATH", "/usr/local/bin"); put("SHELL", "/usr/local/bin/zsh"); put("source_kafka_consumer_config_fetch_min_bytes", "1"); put("source_kafka_consumer_config_ssl_keystore_location", "/home/user/.ssh/keystore"); put("SOURCE_KAFKA_CONSUMER_CONFIG_ENABLE_AUTO_COMMIT", "false");  }};  Map<String, String> expectedEnvVars = new HashMap<String, String>() {{ put("fetch.min.bytes", "1"); put("ssl.keystore.location", "/home/user/.ssh/keystore"); put("enable.auto.commit", "false"); }};  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
parse(Map<String, String> envVars) { if (envVars == null || envVars.isEmpty()) { return Collections.emptyMap(); } Map<String, String> kafkaEnvVars = envVars.entrySet() .stream() .filter(a -> a.getKey().toLowerCase().startsWith(KAFKA_PREFIX)) .collect(Collectors.toMap(e -> parseVarName(e.getKey()), e -> e.getValue())); return kafkaEnvVars; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
************************************
[+] input: shouldReturnKafkaEnvVarsNegative() { HashMap<String, String> systemEnvs = new HashMap<String, String>() {{ put("PATH", "/usr/local/bin"); put("SHELL", "/usr/local/bin/zsh"); }};  Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
parse(Map<String, String> envVars) { if (envVars == null || envVars.isEmpty()) { return Collections.emptyMap(); } Map<String, String> kafkaEnvVars = envVars.entrySet() .stream() .filter(a -> a.getKey().toLowerCase().startsWith(KAFKA_PREFIX)) .collect(Collectors.toMap(e -> parseVarName(e.getKey()), e -> e.getValue())); return kafkaEnvVars; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
************************************
[+] input: shouldReturnEmptyCollectionOnNullEnvVars() { HashMap<String, String> systemEnvs = null; Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
parse(Map<String, String> envVars) { if (envVars == null || envVars.isEmpty()) { return Collections.emptyMap(); } Map<String, String> kafkaEnvVars = envVars.entrySet() .stream() .filter(a -> a.getKey().toLowerCase().startsWith(KAFKA_PREFIX)) .collect(Collectors.toMap(e -> parseVarName(e.getKey()), e -> e.getValue())); return kafkaEnvVars; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
************************************
[+] input: shouldReturnEmptyCollectionOnEmptyEnvVars() { HashMap<String, String> systemEnvs = new HashMap<>(); Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
parse(Map<String, String> envVars) { if (envVars == null || envVars.isEmpty()) { return Collections.emptyMap(); } Map<String, String> kafkaEnvVars = envVars.entrySet() .stream() .filter(a -> a.getKey().toLowerCase().startsWith(KAFKA_PREFIX)) .collect(Collectors.toMap(e -> parseVarName(e.getKey()), e -> e.getValue())); return kafkaEnvVars; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
************************************
[+] input: shouldProperlySerializeMessageToTemplateWithSingleUnknownField() { String template = "{"test":"$.vehicle_type"}"; StencilClient stencilClient = StencilClientFactory.getClient(); protoParser = stencilClient.getParser(TestAggregatedSupplyMessage.class.getName()); MessageToTemplatizedJson messageToTemplatizedJson = MessageToTemplatizedJson .create(firehoseInstrumentation, template, protoParser); Message message = new Message(Base64.getDecoder().decode(logKey.getBytes()), Base64.getDecoder().decode(logMessage.getBytes()), "sample-topic", 0, 100);  String serializedMessage = messageToTemplatizedJson.serialize(message); String expectedMessage = "{"test":"BIKE"}"; Assert."<AssertPlaceHolder>"; }
serialize(Message message) throws DeserializerException { try { String jsonMessage; String jsonString; // only supports messages not keys DynamicMessage msg = protoParser.parse(message.getLogMessage()); jsonMessage = JsonFormat.printer().includingDefaultValueFields().preservingProtoFieldNames().print(msg); String finalMessage = httpSinkJsonBodyTemplate; for (String path : pathsToReplace) { if (path.equals(ALL_FIELDS_FROM_TEMPLATE)) { jsonString = jsonMessage; } else { Object element = JsonPath.read(jsonMessage, path.replaceAll(""", "")); jsonString = gson.toJson(element); } finalMessage = finalMessage.replace(path, jsonString); } return finalMessage; } catch (InvalidProtocolBufferException | PathNotFoundException e) { throw new DeserializerException(e.getMessage()); } }
[*] target: assertEquals(expectedMessage, serializedMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, serializedMessage )
************************************
************************************
[+] input: shouldProperlySerializeMessageToTemplateWithAsItIs() { String template = ""$._all_""; StencilClient stencilClient = StencilClientFactory.getClient(); protoParser = stencilClient.getParser(TestAggregatedSupplyMessage.class.getName()); MessageToTemplatizedJson messageToTemplatizedJson = MessageToTemplatizedJson .create(firehoseInstrumentation, template, protoParser); Message message = new Message(Base64.getDecoder().decode(logKey.getBytes()), Base64.getDecoder().decode(logMessage.getBytes()), "sample-topic", 0, 100);  String serializedMessage = messageToTemplatizedJson.serialize(message); String expectedMessage = "{\n" + "  "window_start_time": "2017-03-20T10:54:00Z",\n" + "  "window_end_time": "2017-03-20T10:55:00Z",\n" + "  "s2_id_level": 13,\n" + "  "s2_id": "3344472187078705152",\n" + "  "vehicle_type": "BIKE",\n" + "  "unique_drivers": "3"\n" + "}"; Assert."<AssertPlaceHolder>"; }
serialize(Message message) throws DeserializerException { try { String jsonMessage; String jsonString; // only supports messages not keys DynamicMessage msg = protoParser.parse(message.getLogMessage()); jsonMessage = JsonFormat.printer().includingDefaultValueFields().preservingProtoFieldNames().print(msg); String finalMessage = httpSinkJsonBodyTemplate; for (String path : pathsToReplace) { if (path.equals(ALL_FIELDS_FROM_TEMPLATE)) { jsonString = jsonMessage; } else { Object element = JsonPath.read(jsonMessage, path.replaceAll(""", "")); jsonString = gson.toJson(element); } finalMessage = finalMessage.replace(path, jsonString); } return finalMessage; } catch (InvalidProtocolBufferException | PathNotFoundException e) { throw new DeserializerException(e.getMessage()); } }
[*] target: assertEquals(expectedMessage, serializedMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, serializedMessage )
************************************
************************************
[+] input: shouldNotNeedRotateWhenSizeBelowTheLimit() { long dataSize = 100L; LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", 1L, 100L, dataSize); boolean shouldRotate = sizeBasedRotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
shouldRotate(LocalFileMetadata metadata) { return metadata.getSize() >= maxSize; }
[*] target: assertFalse(shouldRotate)
[-] pred: org. junit. Assert. assertFalse ( shouldRotate )
************************************
************************************
[+] input: InterruptedException { long createdTimestamp = System.currentTimeMillis(); LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", createdTimestamp, 100L, 100L); Thread.sleep(300); boolean shouldRotate = rotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
shouldRotate(LocalFileMetadata metadata) { return System.currentTimeMillis() - metadata.getCreatedTimestampMillis() >= maxRotatingDurationMillis; }
[*] target: assertTrue(shouldRotate)
[-] pred: org. junit. Assert. assertTrue ( shouldRotate )
************************************
************************************
[+] input: DeserializerException { when(testGrpcService.bindService()).thenCallRealMethod();  Server server = ServerBuilder .forPort(5000) .addService(testGrpcService.bindService()) .build() .start();  Map<String, String> config = new HashMap<>(); config.put("SINK_GRPC_METHOD_URL", "org.raystack.firehose.consumer.TestServer/TestRpcMethod"); config.put("SINK_GRPC_SERVICE_HOST", "localhost"); config.put("SINK_GRPC_SERVICE_PORT", "5000");   Sink sink = GrpcSinkFactory.create(config, statsDReporter, stencilClient);  Assert."<AssertPlaceHolder>"; server.shutdownNow(); }
create(Map<String, String> configuration, StatsDReporter statsDReporter, StencilClient stencilClient) { GrpcSinkConfig grpcConfig = ConfigFactory.create(GrpcSinkConfig.class, configuration); FirehoseInstrumentation firehoseInstrumentation = new FirehoseInstrumentation(statsDReporter, GrpcSinkFactory.class); String grpcSinkConfig = String.format("\n\tService host: %s\n\tService port: %s\n\tMethod url: %s\n\tResponse proto schema: %s", grpcConfig.getSinkGrpcServiceHost(), grpcConfig.getSinkGrpcServicePort(), grpcConfig.getSinkGrpcMethodUrl(), grpcConfig.getSinkGrpcResponseSchemaProtoClass()); firehoseInstrumentation.logDebug(grpcSinkConfig);  ManagedChannel managedChannel = ManagedChannelBuilder.forAddress(grpcConfig.getSinkGrpcServiceHost(), grpcConfig.getSinkGrpcServicePort()).usePlaintext().build();  GrpcClient grpcClient = new GrpcClient(new FirehoseInstrumentation(statsDReporter, GrpcClient.class), grpcConfig, managedChannel, stencilClient); firehoseInstrumentation.logInfo("GRPC connection established");  return new GrpcSink(new FirehoseInstrumentation(statsDReporter, GrpcSink.class), grpcClient, stencilClient); }
[*] target: assertNotNull(sink)
[-] pred: org. junit. Assert. assertNotNull ( sink )
************************************
************************************
[+] input: URISyntaxException { BatchRequestCreator batchRequestCreator = new BatchRequestCreator(firehoseInstrumentation, uriBuilder, headerBuilder, HttpSinkRequestMethodType.POST, jsonBody, httpSinkConfig); List<HttpEntityEnclosingRequestBase> requests = batchRequestCreator.create(messages, requestEntityBuilder);  "<AssertPlaceHolder>"; assertEquals(HttpSinkRequestMethodType.POST.toString(), requests.get(0).getMethod()); verify(firehoseInstrumentation, times(1)).logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uriBuilder.build(), headerBuilder.build(), jsonBody.serialize(messages), HttpSinkRequestMethodType.POST); }
create(List<Message> messages, RequestEntityBuilder requestEntityBuilder) throws URISyntaxException { URI uri = uriBuilder.build(); HttpEntityEnclosingRequestBase request = HttpRequestMethodFactory .create(uri, method);  Map<String, String> headerMap = headerBuilder.build(); headerMap.forEach(request::addHeader); String messagesString = jsonBody.serialize(messages).toString();  if (!(method == HttpSinkRequestMethodType.DELETE && !httpSinkConfig.getSinkHttpDeleteBodyEnable())) { request.setEntity(requestEntityBuilder.buildHttpEntity(messagesString)); firehoseInstrumentation.logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uri, headerMap, jsonBody.serialize(messages), method); } else { firehoseInstrumentation.logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: no body\nRequest method: {}", uri, headerMap, method); } return Collections.singletonList(request); }
[*] target: assertEquals(1, requests.size())
[-] pred: org. junit. Assert. assertEquals ( 1, requests. size ( ) )
************************************
************************************
[+] input: shouldProcessForParametrizedHeaders() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.HEADER);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess(); "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.HEADER; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
************************************
[+] input: shouldNotProcessIfParameterPlacementDisabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.HEADER; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: shouldNotProcessIfParameterPlacedInQuery() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.QUERY);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.HEADER; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: shouldProcessForParametrizedQuery() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.QUERY);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess(); "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.QUERY; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
************************************
[+] input: shouldNotProcessIfParameterPlacementDisabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.QUERY; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: shouldNotProcessIfParameterPlacedInHeader() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.HEADER);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { return httpSinkConfig.getSinkHttpParameterSource() != HttpSinkParameterSourceType.DISABLED && httpSinkConfig.getSinkHttpParameterPlacement() == HttpSinkParameterPlacementType.QUERY; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: shouldProcessBaseCase() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess(); "<AssertPlaceHolder>"; }
canProcess() { boolean isDynamicUrl = httpSinkConfig.getSinkHttpServiceUrl().contains(","); return httpSinkConfig.getSinkHttpParameterSource() == HttpSinkParameterSourceType.DISABLED && !isDynamicUrl; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
************************************
[+] input: shouldNotProcessForDyanamicURL() { when(httpSinkConfig.getSinkHttpServiceUrl()).thenReturn("http://127.0.0.1:1080/api,%s");  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { boolean isDynamicUrl = httpSinkConfig.getSinkHttpServiceUrl().contains(","); return httpSinkConfig.getSinkHttpParameterSource() == HttpSinkParameterSourceType.DISABLED && !isDynamicUrl; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: shouldNotProcessIfParameterIsEnabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE);  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess();  "<AssertPlaceHolder>"; }
canProcess() { boolean isDynamicUrl = httpSinkConfig.getSinkHttpServiceUrl().contains(","); return httpSinkConfig.getSinkHttpParameterSource() == HttpSinkParameterSourceType.DISABLED && !isDynamicUrl; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
************************************
[+] input: testLabeledPointWithWeightGenerator() { String featuresCol = "features"; String labelCol = "label"; String weightCol = "weight";  LabeledPointWithWeightGenerator generator = new LabeledPointWithWeightGenerator() .setFeatureArity(10) .setLabelArity(10) .setColNames(new String[] {featuresCol, labelCol, weightCol}) .setNumValues(100);  int count = 0; for (CloseableIterator<Row> it = generator.getData(tEnv)[0].execute().collect(); it.hasNext(); ) { Row row = it.next(); count++; DenseVector features = (DenseVector) row.getField(featuresCol); "<AssertPlaceHolder>"; for (double value : features.values) { assertTrue(value >= 0); assertTrue(value <= generator.getFeatureArity() - 1); }  double label = (double) row.getField(labelCol); assertTrue(label >= 0); assertTrue(label <= generator.getLabelArity() - 1);  double weight = (double) row.getField(weightCol); assertTrue(weight >= 0); assertTrue(weight < 1); } assertEquals(generator.getNumValues(), count); }
getData(StreamTableEnvironment tEnv);
[*] target: assertNotNull(features)
[-] pred: org. junit. Assert. assertNotNull ( features )
************************************
************************************
[+] input: Exception { OneHotEncoderModel model = estimator.fit(trainTable); Tuple2<Integer, Integer> expected = new Tuple2<>(0, 2); Tuple2<Integer, Integer> actual = OneHotEncoderModelData.getModelDataStream(model.getModelData()[0]) .executeAndCollect() .next(); "<AssertPlaceHolder>"; }
fit(Table... inputs) { Preconditions.checkArgument(inputs.length == 1); Preconditions.checkArgument(getHandleInvalid().equals(ERROR_INVALID));  final String[] inputCols = getInputCols();  StreamTableEnvironment tEnv = (StreamTableEnvironment) ((TableImpl) inputs[0]).getTableEnvironment(); DataStream<Integer[]> localMaxIndices = tEnv.toDataStream(inputs[0]) .transform( "ExtractInputValueAndFindMaxIndexOperator", ObjectArrayTypeInfo.getInfoFor(BasicTypeInfo.INT_TYPE_INFO), new ExtractInputValueAndFindMaxIndexOperator(inputCols));  DataStream<Tuple2<Integer, Integer>> modelData = localMaxIndices .transform( "GenerateModelDataOperator", TupleTypeInfo.getBasicTupleTypeInfo(Integer.class, Integer.class), new GenerateModelDataOperator(inputCols.length)) .setParallelism(1);  OneHotEncoderModel model = new OneHotEncoderModel().setModelData(tEnv.fromDataStream(modelData)); ParamUtils.updateExistingParams(model, paramMap); return model; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { VectorSlicer vectorSlicer = new VectorSlicer().setInputCol("vec").setOutputCol("sliceVec").setIndices(0, 2, 1);  Table output = vectorSlicer.transform(inputDataTable)[0]; DataStream<Row> dataStream = tEnv.toDataStream(output); List<Row> results = IteratorUtils.toList(dataStream.executeAndCollect()); "<AssertPlaceHolder>"; for (Row result : results) { if (result.getField(0) == (Object) 0) { assertEquals( Vectors.dense(2.1, 2.3, 3.1), result.getField(vectorSlicer.getOutputCol()));  } else if (result.getField(0) == (Object) 1) { assertEquals( Vectors.dense(2.3, 1.3, 4.1), result.getField(vectorSlicer.getOutputCol())); } else { throw new RuntimeException("Result id value is error, it must be 0 or 1."); } } }
transform(Table... inputs) { Preconditions.checkArgument(inputs.length == 1); StreamTableEnvironment tEnv = (StreamTableEnvironment) ((TableImpl) inputs[0]).getTableEnvironment(); RowTypeInfo inputTypeInfo = TableUtils.getRowTypeInfo(inputs[0].getResolvedSchema()); RowTypeInfo outputTypeInfo = new RowTypeInfo( ArrayUtils.addAll(inputTypeInfo.getFieldTypes(), VectorTypeInfo.INSTANCE), ArrayUtils.addAll(inputTypeInfo.getFieldNames(), getOutputCol())); DataStream<Row> output = tEnv.toDataStream(inputs[0]) .map(new VectorSliceFunction(getIndices(), getInputCol()), outputTypeInfo); Table outputTable = tEnv.fromDataStream(output); return new Table[] {outputTable}; }
[*] target: assertEquals(2, results.size())
[-] pred: org. junit. Assert. assertEquals ( 2, results. size ( ) )
************************************
************************************
[+] input: Exception { // ZooKeeper does not like whitespace in the quorum connect String. String actual, expected; Configuration conf = new Configuration();  { expected = "localhost:2891";  setQuorum(conf, expected); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891 "); // with leading and trailing whitespace actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891"); // whitespace after port actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual); }  { expected = "localhost:2891,localhost:2891";  setQuorum(conf, "localhost:2891,localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost:2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891, localhost:2891 "); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); "<AssertPlaceHolder>"; } }
getZooKeeperEnsemble(Configuration conf) { String zkQuorum = conf.getString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM); if (zkQuorum == null || StringUtils.isBlank(zkQuorum)) { throw new ConfigurationException("No ZooKeeper quorum specified in config."); } // Remove all whitespace return zkQuorum.replaceAll("\\s+", ""); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { LocalMapPartitionFileMeta fileMeta = StorageTestUtils.createLocalMapPartitionFileMeta();  File tmpFile = temporaryFolder.newFile(); try (DataOutputStream output = new DataOutputStream(new FileOutputStream(tmpFile))) { fileMeta.writeTo(output); }  LocalMapPartitionFileMeta recovered; try (DataInputStream input = new DataInputStream(new FileInputStream(tmpFile))) { recovered = LocalMapPartitionFileMeta.readFrom(input); }  "<AssertPlaceHolder>"; }
readFrom(DataInput dataInput) throws IOException { int storageVersion = dataInput.readInt(); return readFrom(dataInput, storageVersion); }
[*] target: assertEquals(fileMeta, recovered)
[-] pred: org. junit. Assert. assertEquals ( fileMeta, recovered )
************************************
************************************
[+] input: Exception { LocalMapPartitionFile partitionFile1 = createPartitionFile(); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); assertTrue(partitionFile1.isConsumable());  partitionFile1.onError(new FileCorruptedException()); assertFalse(partitionFile1.isConsumable());  LocalMapPartitionFile partitionFile2 = createPartitionFile(); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); assertTrue(partitionFile2.isConsumable());  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception.")); "<AssertPlaceHolder>"; }
isConsumable() { return isConsumable && Files.isReadable(fileMeta.getDataFilePath()) && Files.isReadable(fileMeta.getIndexFilePath()); }
[*] target: assertFalse(partitionFile2.isConsumable())
[-] pred: org. junit. Assert. assertFalse ( partitionFile2. isConsumable ( ) )
************************************
************************************
[+] input: testEnvironmentAndSystemSubstitution() { final Properties defaults = new Properties(); defaults.put("a", "1"); defaults.put("b", "2"); defaults.put("c", "3");  final Properties systems = new Properties(); systems.put("a", "4"); systems.put("b", "5"); systems.put("c", "6");  final Map<String, String> environments = new HashMap<>(); environments.put("a", "7"); environments.put("b", "8"); environments.put("c", "9");  final StringSubstitution substitution = new StringSubstitution(defaults, systems, environments); final Map<String, String> mapping = new LinkedHashMap<>();  mapping.put("${a} ${sys:a} ${env:a}", "1 4 7"); mapping.put("${missing:-${b}} ${missing:-${sys:b}} ${missing:-${env:b}}", "2 5 8"); mapping.put("${sys:missing:-${b}} ${sys:missing:-${sys:b}} ${sys:missing:-${env:b}}", "2 5 8"); mapping.put("${env:missing:-${b}} ${env:missing:-${sys:b}} ${env:missing:-${env:b}}", "2 5 8");  for (final Map.Entry<String, String> entry : mapping.entrySet()) { final String text = entry.getKey(); final String expected = entry.getValue(); final String actual = substitution.substitute(text);  Assert."<AssertPlaceHolder>"; } }
substitute(final String text) { final StringBuilder builder = new StringBuilder();  for (int index = 0; index < text.length(); ) { final int position = text.indexOf("${", index);  if (position < 0) { builder.append(text, index, text.length()); break; }  builder.append(text, index, position); index = substitute(text, position, builder); }  return builder.toString(); }  private int substitute(final String source, int index, final StringBuilder target) { final int end = source.length(); final int start = index;  index += 2;  while (index < end) { char c = source.charAt(index);  if (c == '}') { final String key = source.substring(start + 2, index); final String value = lookup(key);  if (value == null) { target.append("${").append(key).append(":#UNRESOLVED#").append("}"); } else { target.append(value); }  return index + 1; }  if (c == ':' && index + 1 < end && source.charAt(index + 1) == '-') { final String key = source.substring(start + 2, index); final String value = lookup(key);  final int length = target.length(); final int mid = index + 2;  index = mid;  while (index < end) { c = source.charAt(index);  if (c == '}') { if (value != null) { target.setLength(length); target.append(value); }  return index + 1; }  if (c == '$' && index + 1 < end && source.charAt(index + 1) == '{') { index = substitute(source, index, target); continue; }  target.append(c); index++; }  target.insert(length, source, start, mid); return end; }  index++; }  target.append(source, start, end); return index; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: should_ReturnValidationError_When_NullAsEndpointNameGiven() { String validationResult = checker.check(null);  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
check(String endpointName) { if (endpointName == null || endpointName.isEmpty()) { return "Endpoint name cannot be blank"; } if (ECMA_SCRIPT_RESERVED_WORDS.contains(endpointName)) { return "Endpoint name cannot be equal to JavaScript reserved words"; } if (WHITESPACE_PATTERN.matcher(endpointName).find()) { return "Endpoint name cannot contain any whitespaces"; } return null; }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
************************************
[+] input: should_ReturnValidationError_When_EmptyAsEndpointNameGiven() { String validationResult = checker.check("");  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
check(String endpointName) { if (endpointName == null || endpointName.isEmpty()) { return "Endpoint name cannot be blank"; } if (ECMA_SCRIPT_RESERVED_WORDS.contains(endpointName)) { return "Endpoint name cannot be equal to JavaScript reserved words"; } if (WHITESPACE_PATTERN.matcher(endpointName).find()) { return "Endpoint name cannot contain any whitespaces"; } return null; }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
************************************
[+] input: should_ReturnNoErrors_When_ValidEndpointNameGiven() { String validationResult = checker.check("ordinaryName");  "<AssertPlaceHolder>"; }
check(String endpointName) { if (endpointName == null || endpointName.isEmpty()) { return "Endpoint name cannot be blank"; } if (ECMA_SCRIPT_RESERVED_WORDS.contains(endpointName)) { return "Endpoint name cannot be equal to JavaScript reserved words"; } if (WHITESPACE_PATTERN.matcher(endpointName).find()) { return "Endpoint name cannot contain any whitespaces"; } return null; }
[*] target: assertNull(validationResult)
[-] pred: org. junit. Assert. assertNull ( validationResult )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForStringType() { String error = explicitNullableTypeChecker.checkValueForType(null, String.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("String")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateType() { String error = explicitNullableTypeChecker.checkValueForType(null, Date.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Date")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalDateTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalDateTime")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForLcalTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalTime")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForMapType() { String error = explicitNullableTypeChecker.checkValueForType(null, Map.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Map")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForObjectType() { String error = explicitNullableTypeChecker.checkValueForType(null, Object.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Object")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForOptionalType() { String error = explicitNullableTypeChecker.checkValueForType(null, Optional.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Optional.empty")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForCollectionType() { String error = explicitNullableTypeChecker.checkValueForType(null, stringListType, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("List")); Assert.assertTrue(error.contains("String")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: should_ReturnError_When_GivenNull_BeanProperty() { // Property 'title' is null Bean bean = new Bean();  String error = explicitNullableTypeChecker.checkValueForType(bean, Bean.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Bean")); }
checkValueForType(Object value, Type expectedType, boolean requiredByContext) { return new ExplicitNullableTypeCheckerHelper(requiredByContext) .checkValueForType(value, expectedType); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: testVerifyRequestEmptyRequest() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeData() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithNoDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithNullDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", null); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithEmptyDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", ""); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndNullRule() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", null); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndEmptyRule() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", ""); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleMismatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "26"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "35"); subject.put("verify_aal", "2?"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123456"); subject.put("verify_userId", "12345[6|7]"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2WithSubjectAndResource() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123457"); subject.put("verify_userId", "12345[6|7]");  Map<String, String> resource = new HashMap<>(); resource.put("aal", "10"); resource.put("verify_aal", ".0"); resource.put("userId", "1111"); resource.put("verify_userId", "1111"); Context context = new Context<>(subject, resource, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2WithSubjectAndResourceAndActionAndEnvironment() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123457"); subject.put("verify_userId", "12345[6|7]");  Map<String, String> resource = new HashMap<>(); resource.put("aal", "10"); resource.put("verify_aal", ".0"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> action = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a][b][c][d]"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> environment = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a-z]*"); resource.put("userId", "1111"); resource.put("verify_userId", "1111"); Context context = new Context<>(subject, resource, action, environment, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
verifyRequest(){ return verifyRequest(subject) && verifyRequest(resource) && verifyRequest(action) && verifyRequest(environment); }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
************************************
[+] input: interpolationMiddle() { createCueFile("'a\\(123)b'"); var literal = findTypedElement(CueStringLiteral.class); var ranges = CueMultiHostInjector.findInjectionRanges(literal);  var expected = Arrays.asList( new InjectionData(TextRange.create(1, 2), null, null), new InjectionData(TextRange.create(8, 9), "\\(123)", null)); "<AssertPlaceHolder>"; }
findInjectionRanges(CueStringLiteral context) { var totalRange = context.getLiteralContentRange(); var interpolations = context.getInterpolationList() .stream() .map(PsiElement::getTextRangeInParent) .sorted(Comparator.comparingInt(TextRange::getStartOffset)) .collect(Collectors.toList());  if (interpolations.isEmpty()) { return Collections.singletonList(new InjectionData(totalRange, null, null)); }  var hostText = context.getText(); var result = new LinkedList<InjectionData>(); var lastStart = totalRange.getStartOffset(); var lastEnd = totalRange.getStartOffset(); for (TextRange range : interpolations) { var start = range.getStartOffset(); var end = range.getEndOffset(); if (start == totalRange.getStartOffset()) { // interpolation at start, insert empty range before to allow editing result.add(new InjectionData(TextRange.create(start, start), null, null)); } else if (start > lastEnd) { var prefix = lastEnd > lastStart ? hostText.substring(lastStart, lastEnd) : null; result.add(new InjectionData(TextRange.create(lastEnd, start), prefix, null)); } lastStart = start; lastEnd = end; } if (lastEnd < totalRange.getEndOffset()) { var prefix = lastEnd > lastStart ? hostText.substring(lastStart, lastEnd) : null; result.add(new InjectionData(TextRange.create(lastEnd, totalRange.getEndOffset()), prefix, null)); } else if (lastEnd == totalRange.getEndOffset() && lastEnd > lastStart) { var prefix = hostText.substring(lastStart, lastEnd); result.add(new InjectionData(TextRange.create(lastEnd, totalRange.getEndOffset()), prefix, null)); } return result; }
[*] target: assertEquals(expected, ranges)
[-] pred: org. junit. Assert. assertEquals ( expected, ranges )
************************************
************************************
[+] input: useSettingsFromConfigTemplate() { GinkgoRunConfiguration configTemplate = (GinkgoRunConfiguration) new GinkgoConfigurationType().createTemplateConfiguration(getProject()); configTemplate.getOptions().setGinkgoAdditionalOptions("additional options"); configTemplate.getOptions().setGoToolOptions("build tool options"); configTemplate.getOptions().setWorkingDir("custom directory");  GoFile file = (GoFile) myFixture.configureByFile("marker_ginkgo.go"); PsiElement specElement = getSpecElement(file, "Describe"); ConfigurationContext context = new ConfigurationContext(specElement); boolean result = ginkgoRunConfigurationProducer.setupConfigurationFromContext(configTemplate, context, new Ref<>(specElement));  "<AssertPlaceHolder>"; assertEquals("additional options", configTemplate.getOptions().getGinkgoAdditionalOptions()); assertEquals("build tool options", configTemplate.getOptions().getGoToolOptions()); assertEquals("custom directory", configTemplate.getOptions().getWorkingDir()); }
setupConfigurationFromContext(@NotNull GinkgoRunConfiguration configuration, @NotNull ConfigurationContext context, @NotNull Ref<PsiElement> sourceElement) { if (context.getPsiLocation() == null || context.getPsiLocation().getParent() == null) { return false; }  if (!(context.getPsiLocation().getParent().getParent() instanceof GoCallExpr)) { return false; }  List<String> specNames = getSpecNames(context); GinkgoRunConfigurationOptions options = configuration.getOptions();  GinkgoRunConfigurationOptions ginkgoRunConfigurationOptions = new GinkgoRunConfigurationOptions(); ginkgoRunConfigurationOptions.setGinkgoExecutable(options.getGinkgoExecutable()); ginkgoRunConfigurationOptions.setWorkingDir(configWorkingDirectory(context, options)); ginkgoRunConfigurationOptions.setEnvData(options.getEnvData()); ginkgoRunConfigurationOptions.setGinkgoAdditionalOptions(options.getGinkgoAdditionalOptions()); ginkgoRunConfigurationOptions.setGinkgoScope(GinkgoScope.FOCUS); ginkgoRunConfigurationOptions.setTestNames(specNames); ginkgoRunConfigurationOptions.setFocusTestExpression(String.join(" ", specNames)); ginkgoRunConfigurationOptions.setGoToolOptions(options.getGoToolOptions()); GoFile file = (GoFile) context.getPsiLocation().getContainingFile(); ginkgoRunConfigurationOptions.setPackageName(file.getPackageName());  configuration.setOptions(ginkgoRunConfigurationOptions); configuration.setGeneratedName(); return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: getStructureViewBuilder_ginkgo() { GoFile file = (GoFile) myFixture.configureByFile("marker_test.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GinkgoStructureViewModel); }
getStructureViewBuilder(@NotNull PsiFile psiFile) { GinkgoSettings settings = GinkgoSettings.getInstance(); if (isGinkgoTestFile(psiFile) && settings.isGinkgoStructViewEnabled()) { return new TreeBasedStructureViewBuilder() { public @NotNull StructureViewModel createStructureViewModel(@Nullable Editor editor) { return new GinkgoStructureViewModel(psiFile); } }; }  //we should fall back to GoStructViewFactory return new GoStructureViewFactory().getStructureViewBuilder(psiFile); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
************************************
[+] input: getStructureViewBuilder_go() { GoFile file = (GoFile) myFixture.configureByFile("go_file.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GoStructureViewFactory.Model); }
getStructureViewBuilder(@NotNull PsiFile psiFile) { GinkgoSettings settings = GinkgoSettings.getInstance(); if (isGinkgoTestFile(psiFile) && settings.isGinkgoStructViewEnabled()) { return new TreeBasedStructureViewBuilder() { public @NotNull StructureViewModel createStructureViewModel(@Nullable Editor editor) { return new GinkgoStructureViewModel(psiFile); } }; }  //we should fall back to GoStructViewFactory return new GoStructureViewFactory().getStructureViewBuilder(psiFile); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
************************************
[+] input: test_serialized_deserialize_all_test_config() { GinkgoRunConfigurationOptions configOptions = new GinkgoRunConfigurationOptions(); configOptions.setGinkgoExecutable("ginkgo"); configOptions.setWorkingDir("/workspace"); configOptions.setEnvData(EnvironmentVariablesData.DEFAULT); configOptions.setGinkgoAdditionalOptions("-race"); configOptions.setGinkgoScope(GinkgoScope.ALL); configOptions.setFocusTestExpression(""); configOptions.setTestNames(Arrays.asList("ginkgo all")); configOptions.setGoToolOptions("build tool options"); Element element = new Element("ginkgo_config");  GinkgoSerializationUtil.writeXml(element, configOptions); GinkgoRunConfigurationOptions result = GinkgoSerializationUtil.readXml(element);  "<AssertPlaceHolder>"; }
readXml(@NotNull Element element) { GinkgoRunConfigurationOptions ginkgoRunConfigurationOptions = new GinkgoRunConfigurationOptions(); ginkgoRunConfigurationOptions.setGinkgoExecutable(read(element, GINKGO_EXECUTABLE)); ginkgoRunConfigurationOptions.setWorkingDir(read(element, WORKING_DIR)); ginkgoRunConfigurationOptions.setEnvData(EnvironmentVariablesData.readExternal(element)); ginkgoRunConfigurationOptions.setGinkgoAdditionalOptions(read(element, GINKGO_ADDITIONAL_OPTIONS)); ginkgoRunConfigurationOptions.setGoToolOptions(read(element, GO_TOOL_OPTIONS)); ginkgoRunConfigurationOptions.setGinkgoScope(readScope(element)); ginkgoRunConfigurationOptions.setFocusTestExpression(read(element, FOCUS_EXPRESSION)); ginkgoRunConfigurationOptions.setPackageName(read(element, PACKAGE_NAME)); ginkgoRunConfigurationOptions.setTestNames(readTestNames(element));  return ginkgoRunConfigurationOptions; }
[*] target: assertEquals(configOptions, result)
[-] pred: org. junit. Assert. assertEquals ( configOptions, result )
************************************
************************************
[+] input: test_serialized_deserialize_focus_test_config() { GinkgoRunConfigurationOptions configOptions = new GinkgoRunConfigurationOptions(); configOptions.setGinkgoExecutable("ginkgo"); configOptions.setWorkingDir("/workspace"); configOptions.setEnvData(EnvironmentVariablesData.DEFAULT); configOptions.setGinkgoAdditionalOptions("-race"); configOptions.setGinkgoScope(GinkgoScope.FOCUS); configOptions.setFocusTestExpression("books"); configOptions.setTestNames(Arrays.asList("books")); configOptions.setGoToolOptions("build tool options"); Element element = new Element("ginkgo_config");  GinkgoSerializationUtil.writeXml(element, configOptions); GinkgoRunConfigurationOptions result = GinkgoSerializationUtil.readXml(element);  "<AssertPlaceHolder>"; }
readXml(@NotNull Element element) { GinkgoRunConfigurationOptions ginkgoRunConfigurationOptions = new GinkgoRunConfigurationOptions(); ginkgoRunConfigurationOptions.setGinkgoExecutable(read(element, GINKGO_EXECUTABLE)); ginkgoRunConfigurationOptions.setWorkingDir(read(element, WORKING_DIR)); ginkgoRunConfigurationOptions.setEnvData(EnvironmentVariablesData.readExternal(element)); ginkgoRunConfigurationOptions.setGinkgoAdditionalOptions(read(element, GINKGO_ADDITIONAL_OPTIONS)); ginkgoRunConfigurationOptions.setGoToolOptions(read(element, GO_TOOL_OPTIONS)); ginkgoRunConfigurationOptions.setGinkgoScope(readScope(element)); ginkgoRunConfigurationOptions.setFocusTestExpression(read(element, FOCUS_EXPRESSION)); ginkgoRunConfigurationOptions.setPackageName(read(element, PACKAGE_NAME)); ginkgoRunConfigurationOptions.setTestNames(readTestNames(element));  return ginkgoRunConfigurationOptions; }
[*] target: assertEquals(configOptions, result)
[-] pred: org. junit. Assert. assertEquals ( configOptions, result )
************************************
************************************
[+] input: toByteArrayList() { byte[] expect = new byte[]{(byte) 0x81, // 0, 25689 (byte) 0x00, (byte) 0x00, (byte) 0x64, (byte) 0x59, // 523975585 (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, // 33.16f, -15.62f (byte) 0x42, (byte) 0x04, (byte) 0xA3, (byte) 0xD7, (byte) 0xC1, (byte) 0x79, (byte) 0xEB, (byte) 0x85, // 156665.35455556 (byte) 0x41, (byte) 0x03, (byte) 0x1F, (byte) 0xCA, (byte) 0xD6, (byte) 0x21, (byte) 0x39, (byte) 0xB7, // -56516.66664 (byte) 0xC0, (byte) 0xEB, (byte) 0x98, (byte) 0x95, (byte) 0x55, (byte) 0x1D, (byte) 0x68, (byte) 0xC7, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteArraySerializer serializer = ByteArraySerializer.newInstance(); ByteArrayListBean listBean = serializer.toObject(ByteArrayListBean.class, expect); byte[] actual = serializer.toByteArray(listBean); "<AssertPlaceHolder>"; }
toByteArray(final T targetBean) { try { // 组装数据，同时计算最大的字节长度 int buffSize = 0; List<ByteArrayParseData> parseDataList = new ArrayList<>(); for (final Field field : targetBean.getClass().getDeclaredFields()) { final ByteArrayVariable variable = field.getAnnotation(ByteArrayVariable.class); if (variable == null) { continue; } ByteArrayParameter parameter = new ByteArrayParameter(variable.byteOffset(), variable.bitOffset(), variable.count(), variable.type(), variable.littleEndian(), variable.format()); this.checkByteArrayVariable(parameter); parseDataList.add(new ByteArrayParseData(variable, field)); int maxPos = variable.byteOffset() + variable.count() * variable.type().getByteLength(); if (maxPos > buffSize) { buffSize = maxPos; } } if (buffSize == 0 || parseDataList.isEmpty()) { return new byte[0]; } // 填充字节数组的内容 ByteWriteBuff buff = ByteWriteBuff.newInstance(buffSize); for (ByteArrayParseData item : parseDataList) { item.getField().setAccessible(true); Object data = item.getField().get(targetBean); if (data == null) { continue; } if (item.getVariable().count() == 1) { this.fillOneData(item.getVariable(), data, buff, 0); } else { this.fillListData(item.getVariable(), data, buff); } } return buff.getData(); } catch (Exception e) { throw new ByteArrayParseException("parsing to object error, cause:" + e.getMessage(), e); } }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x01, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x13}; MbReadCoilRequest mb = new MbReadCoilRequest(); mb.setFunctionCode(EMbFunctionCode.READ_COIL); mb.setAddress(19); mb.setQuantity(19); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x02, (byte) 0x00, (byte) 0xC4, (byte) 0x00, (byte) 0x16}; MbReadDiscreteInputRequest mb = new MbReadDiscreteInputRequest(); mb.setFunctionCode(EMbFunctionCode.READ_DISCRETE_INPUT); mb.setAddress(196); mb.setQuantity(22); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x03, (byte) 0x00, (byte) 0x6B, (byte) 0x00, (byte) 0x03}; MbReadHoldRegisterRequest mb = new MbReadHoldRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_HOLD_REGISTER); mb.setAddress(107); mb.setQuantity(3); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01}; MbReadInputRegisterRequest mb = new MbReadInputRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_INPUT_REGISTER); mb.setAddress(8); mb.setQuantity(1); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x0F, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x0A, (byte) 0x02, (byte) 0xCD, (byte) 0x01}; MbWriteMultipleCoilRequest mb = new MbWriteMultipleCoilRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_COIL); mb.setAddress(19); mb.setQuantity(10); mb.setCount(2); mb.setValue(new byte[]{(byte) 0xCD, (byte) 0x01}); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .putByte(this.count) .putBytes(this.value) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x0F, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x0A}; MbWriteMultipleCoilResponse mb = new MbWriteMultipleCoilResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_COIL); mb.setAddress(19); mb.setQuantity(10); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putShort(this.quantity) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilRequest mb = new MbWriteSingleCoilRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(true); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putBytes(this.value ? ON : OFF) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilResponse mb = new MbWriteSingleCoilResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(new byte[]{(byte) 0xFF, (byte) 0x00}); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
toByteArray() { return ByteWriteBuff.newInstance(this.byteArrayLength()) .putByte(this.functionCode.getCode()) .putShort(this.address) .putBytes(this.value) .getData(); }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
************************************
[+] input: mp4FtypBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70, 0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x69, 0x73, 0x6F, 0x6D, 0x61, 0x76, 0x63, 0x31 }; Mp4FtypBox box = new Mp4FtypBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); return ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putString(this.majorBrand) .putInteger(this.minorVersion) .putString(this.compatibleBrands) .getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4MfhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x6D, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }; Mp4MfhdBox box = new Mp4MfhdBox(1); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); return ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mfhdBox.toByteArray()) .putBytes(this.trafBox.toByteArray()) .getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4TrafBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x6A, 0x74, 0x72, 0x61, 0x66,  0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x64, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x34, 0x74, 0x72, 0x75, 0x6E, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, (byte) 0x8A, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x15, 0x57, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x13, (byte) 0x86, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x0E, 0x73, 0x64, 0x74, 0x70, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10 }; Mp4TrafBox box = new Mp4TrafBox(0, this.trackInfo); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); return ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mfhdBox.toByteArray()) .putBytes(this.trafBox.toByteArray()) .getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4TfhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }; Mp4TfhdBox box = new Mp4TfhdBox(1); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); return ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mfhdBox.toByteArray()) .putBytes(this.trafBox.toByteArray()) .getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4SdtpBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x0E, 0x73, 0x64, 0x74, 0x70, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10 }; Mp4SdtpBox box = new Mp4SdtpBox(this.samples); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); return ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mfhdBox.toByteArray()) .putBytes(this.trafBox.toByteArray()) .getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4MvhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x6C, 0x6D, 0x76, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, }; Mp4MvhdBox box = new Mp4MvhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4TkhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x5C, 0x74, 0x6B, 0x68, 0x64, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x07, (byte) 0x80, 0x00, 0x00, 0x04, 0x38, 0x00, 0x00, }; Mp4TkhdBox box = new Mp4TkhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4MdhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x20, 0x6D, 0x64, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x5F, (byte) 0x90, 0x55, (byte) 0xC4, 0x00, 0x00, }; Mp4MdhdBox box = new Mp4MdhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4VmhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x76, 0x6D, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4VmhdBox box = new Mp4VmhdBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4DinfBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x24, 0x64, 0x69, 0x6E, 0x66,  0x00, 0x00, 0x00, 0x1C, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x75, 0x72, 0x6C, 0x20, 0x00, 0x00, 0x00, 0x01, }; Mp4DinfBox box = new Mp4DinfBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4DrefBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x1C, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x75, 0x72, 0x6C, 0x20, 0x00, 0x00, 0x00, 0x01, }; Mp4DrefBox box = new Mp4DrefBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4AvcCBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x28, 0x61, 0x76, 0x63, 0x43, 0x01, 0x64, 0x00, 0x2A, (byte) 0xFF, (byte) 0xE1, 0x00, 0x11, 0x67, 0x64, 0x00, 0x2A, (byte) 0xAC, 0x2B, 0x50, 0x3C, 0x01, 0x13, (byte) 0xF2, (byte) 0xCD, (byte) 0xC0, 0x40, 0x40, 0x40, (byte) 0x80, 0x01, 0x00, 0x04, 0x68, (byte) 0xEE, 0x3C, (byte) 0xB0, }; Mp4AvcCBox box = new Mp4AvcCBox(this.trackInfo); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4BtrtBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74, 0x00, 0x1C, (byte) 0x9C, (byte) 0x80, 0x00, 0x2D, (byte) 0xC6, (byte) 0xC0, 0x00, 0x2D, (byte) 0xC6, (byte) 0xC0, }; Mp4BtrtBox box = new Mp4BtrtBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4SttsBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4SttsBox box = new Mp4SttsBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4StscBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StscBox box = new Mp4StscBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4StszBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x73, 0x74, 0x73, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StszBox box = new Mp4StszBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4StcoBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x63, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StcoBox box = new Mp4StcoBox(); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: mp4TrexBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x20, 0x74, 0x72, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, }; Mp4TrexBox box = new Mp4TrexBox(1); "<AssertPlaceHolder>"; }
toByteArray() { int size = this.byteArrayLength(); ByteWriteBuff buff = ByteWriteBuff.newInstance(size) .putInteger(size) .putBytes(this.mp4Type.getByteArray()) .putBytes(this.mvhdBox.toByteArray()); this.trakBoxes.forEach(x -> buff.putBytes(x.toByteArray())); buff.putBytes(this.mvexBox.toByteArray()); return buff.getData(); }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
************************************
[+] input: createResponse() { String expect = "Basic YWRtaW46MTIzNDU2"; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "123456"); BasicAuthenticator authenticator = new BasicAuthenticator(credential); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
createResponse() { String src = String.format("%s:%s", this.credential.getUsername(), this.credential.getPassword()); return this.name + " " + this.encoder.encodeToString(src.getBytes(StandardCharsets.UTF_8)); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: createResponse() { String expect = "Digest username="Mufasa", realm="testrealm@host.com", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", uri="/dir/index.html", response="6629fae49393a05397450978507c4ef1", qop=auth, nc=00000001, cnonce="0a4f113b""; UsernamePasswordCredential credential = new UsernamePasswordCredential("Mufasa", "Circle Of Life"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="testrealm@host.com", qop="auth", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093""); authenticator.addClientInfo("/dir/index.html", "GET", "0a4f113b"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
createResponse() { if (this.realm == null || this.realm.equals("")) { throw new AuthenticationException("realm is empty"); } if (this.nonce == null || this.nonce.equals("")) { throw new AuthenticationException("nonce is empty"); } if (this.uri == null || this.uri.equals("")) { throw new AuthenticationException("uri is empty"); } if (this.method == null || this.method.equals("")) { throw new AuthenticationException("method is empty"); } StringBuilder sb = new StringBuilder(); sb.append(DIGEST_NAME).append(" ") .append("username="").append(this.credential.getUsername()).append("", ") .append("realm="").append(this.realm).append("", ") .append("nonce="").append(this.nonce).append("", ") .append("uri="").append(this.uri).append("", "); if (this.qop == null || this.qop.equals("")) { sb.append("response="").append(this.calculateResponseString()).append("""); } else { sb.append("response="").append(this.calculateResponseString()).append("", ") .append("qop=").append(this.qop).append(", ") .append("nc=").append(String.format("%08X", this.nc)).append(", ") .append("cnonce="").append(this.cnonce).append("""); } return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: createResponse1() { String expect = "Digest username="q", realm="test", nonce="N6yEOiDGTvOx9hwloHW7AQ==", uri="/portal/applications", response="bc3662d7309bdf68b5f6684647bd17e2", qop=auth, nc=00000001, cnonce="04fefcb40dae7db4""; UsernamePasswordCredential credential = new UsernamePasswordCredential("q", "q"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfo("test", "auth", "N6yEOiDGTvOx9hwloHW7AQ==", false); authenticator.addClientInfo("/portal/applications", "GET", "04fefcb40dae7db4"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>";  }
createResponse() { if (this.realm == null || this.realm.equals("")) { throw new AuthenticationException("realm is empty"); } if (this.nonce == null || this.nonce.equals("")) { throw new AuthenticationException("nonce is empty"); } if (this.uri == null || this.uri.equals("")) { throw new AuthenticationException("uri is empty"); } if (this.method == null || this.method.equals("")) { throw new AuthenticationException("method is empty"); } StringBuilder sb = new StringBuilder(); sb.append(DIGEST_NAME).append(" ") .append("username="").append(this.credential.getUsername()).append("", ") .append("realm="").append(this.realm).append("", ") .append("nonce="").append(this.nonce).append("", ") .append("uri="").append(this.uri).append("", "); if (this.qop == null || this.qop.equals("")) { sb.append("response="").append(this.calculateResponseString()).append("""); } else { sb.append("response="").append(this.calculateResponseString()).append("", ") .append("qop=").append(this.qop).append(", ") .append("nc=").append(String.format("%08X", this.nc)).append(", ") .append("cnonce="").append(this.cnonce).append("""); } return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: createResponse2() { String expect = "Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="876fcfac745c91bb7dd89faa660891ea""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "12345"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfo("IP Camera(10789)", "", "6b9a455aec675b8db81a9ceb802e4eb8", false); authenticator.addClientInfo("rtsp://10.3.8.202:554", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
createResponse() { if (this.realm == null || this.realm.equals("")) { throw new AuthenticationException("realm is empty"); } if (this.nonce == null || this.nonce.equals("")) { throw new AuthenticationException("nonce is empty"); } if (this.uri == null || this.uri.equals("")) { throw new AuthenticationException("uri is empty"); } if (this.method == null || this.method.equals("")) { throw new AuthenticationException("method is empty"); } StringBuilder sb = new StringBuilder(); sb.append(DIGEST_NAME).append(" ") .append("username="").append(this.credential.getUsername()).append("", ") .append("realm="").append(this.realm).append("", ") .append("nonce="").append(this.nonce).append("", ") .append("uri="").append(this.uri).append("", "); if (this.qop == null || this.qop.equals("")) { sb.append("response="").append(this.calculateResponseString()).append("""); } else { sb.append("response="").append(this.calculateResponseString()).append("", ") .append("qop=").append(this.qop).append(", ") .append("nc=").append(String.format("%08X", this.nc)).append(", ") .append("cnonce="").append(this.cnonce).append("""); } return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: createResponse3() { String expect = "Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="876fcfac745c91bb7dd89faa660891ea""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "12345"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", stale="FALSE""); authenticator.addClientInfo("rtsp://10.3.8.202:554", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
createResponse() { if (this.realm == null || this.realm.equals("")) { throw new AuthenticationException("realm is empty"); } if (this.nonce == null || this.nonce.equals("")) { throw new AuthenticationException("nonce is empty"); } if (this.uri == null || this.uri.equals("")) { throw new AuthenticationException("uri is empty"); } if (this.method == null || this.method.equals("")) { throw new AuthenticationException("method is empty"); } StringBuilder sb = new StringBuilder(); sb.append(DIGEST_NAME).append(" ") .append("username="").append(this.credential.getUsername()).append("", ") .append("realm="").append(this.realm).append("", ") .append("nonce="").append(this.nonce).append("", ") .append("uri="").append(this.uri).append("", "); if (this.qop == null || this.qop.equals("")) { sb.append("response="").append(this.calculateResponseString()).append("""); } else { sb.append("response="").append(this.calculateResponseString()).append("", ") .append("qop=").append(this.qop).append(", ") .append("nc=").append(String.format("%08X", this.nc)).append(", ") .append("cnonce="").append(this.cnonce).append("""); } return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: createResponse4() { String expect = "Digest username="admin", realm="IP Camera(G5366)", nonce="00ea0e5bc0d4bee565d77d40502f9229"," + " uri="rtsp://192.168.3.142:554/h264/ch1/main/av_stream", response="f5592b62173d44ecc24738e0b0ed8dfd""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "kilox1234"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="IP Camera(G5366)", nonce="00ea0e5bc0d4bee565d77d40502f9229", stale="FALSE""); authenticator.addClientInfo("rtsp://192.168.3.142:554/h264/ch1/main/av_stream", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
createResponse() { if (this.realm == null || this.realm.equals("")) { throw new AuthenticationException("realm is empty"); } if (this.nonce == null || this.nonce.equals("")) { throw new AuthenticationException("nonce is empty"); } if (this.uri == null || this.uri.equals("")) { throw new AuthenticationException("uri is empty"); } if (this.method == null || this.method.equals("")) { throw new AuthenticationException("method is empty"); } StringBuilder sb = new StringBuilder(); sb.append(DIGEST_NAME).append(" ") .append("username="").append(this.credential.getUsername()).append("", ") .append("realm="").append(this.realm).append("", ") .append("nonce="").append(this.nonce).append("", ") .append("uri="").append(this.uri).append("", "); if (this.qop == null || this.qop.equals("")) { sb.append("response="").append(this.calculateResponseString()).append("""); } else { sb.append("response="").append(this.calculateResponseString()).append("", ") .append("qop=").append(this.qop).append(", ") .append("nc=").append(String.format("%08X", this.nc)).append(", ") .append("cnonce="").append(this.cnonce).append("""); } return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspOptionRequestTest() { String expect = "OPTIONS rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554"); RtspOptionRequest request = new RtspOptionRequest(uri); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspDescribeRequestTest() { String expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554"); RtspDescribeRequest request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP)); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP), this.authenticator); request.setCSeq(1); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspSetupRequestTest() {  String expect = "SETUP rtsp://10.3.8.202:554/trackID=1 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Transport: RTP/AVP;unicast;client_port=57844-57845\r\n" + "\r\n";  URI uri = URI.create("rtsp://10.3.8.202:554/trackID=1"); RtspTransport transport = RtspTransport.fromString("RTP/AVP;unicast;client_port=57844-57845"); RtspSetupRequest request = new RtspSetupRequest(uri, transport, this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspPlayRequestTest() { String expect = "PLAY rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Range: npt=0.000-\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspRange range = new RtspRangeNpt("0.000"); RtspPlayRequest request = new RtspPlayRequest(uri, "1273222592", range, this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspPauseRequestTest() { String expect = "PAUSE rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspPauseRequest request = new RtspPauseRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspSetParameterRequestTest() {  String expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspSetParameterRequest request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 20\r\n" + "\r\n" + "barparam: barstuff\r\n";  uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("barparam", "barstuff"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspGetParameterRequestTest() {  String expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspGetParameterRequest request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 26\r\n" + "\r\n" + "packets_received\r\n" + "jitter\r\n"; uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("packets_received"); request.addParameter("jitter"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: rtspTeardownRequestTest() { String expect = "TEARDOWN rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspTeardownRequest request = new RtspTeardownRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
toObjectString() { StringBuilder sb = new StringBuilder(); this.addRequestLine(sb); this.addGeneralHeader(sb); this.addCommonRequestHeader(sb); this.addRequestHeader(sb); this.addEntityHeader(sb); sb.append(CRLF); this.addMessageBody(sb); return sb.toString(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: extractFrom() { String src = "RTP/AVP;unicast;client_port=60802-60803;server_port=8216-8217;ssrc=4f92ef4b;mode="play""; RtspClientPortTransport transport = (RtspClientPortTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(60802, transport.getRtpClientPort().intValue()); assertEquals(60803, transport.getRtcpClientPort().intValue()); assertEquals(8216, transport.getRtpServerPort().intValue()); assertEquals(8217, transport.getRtcpServerPort().intValue()); assertEquals("4f92ef4b", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
toString() { if (this.protocol == null || this.protocol.equals("")) { throw new RtspCommException("protocol of RtspTransport is null or empty"); } if (this.castMode == null || this.castMode.equals("")) { throw new RtspCommException("castMode of RtspTransport is null or empty"); } List<String> res = new ArrayList<>(); res.add(this.protocol); res.add(this.castMode);  if (this.ssrc != null && !this.ssrc.equals("")) { res.add(String.format("ssrc=%s", this.ssrc)); } if (this.mode != null && !this.mode.equals("")) { res.add(String.format("mode="%s"", this.mode)); } return String.join(";", res); }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
************************************
[+] input: rtspInterleavedTransportTest() { String src = "RTP/AVP/TCP;unicast;interleaved=0-1;ssrc=1fc17e75;mode="play""; RtspInterleavedTransport transport = (RtspInterleavedTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP/TCP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(0, transport.getInterleaved1().intValue()); assertEquals(1, transport.getInterleaved2().intValue()); assertEquals("1fc17e75", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
toString() { if (this.protocol == null || this.protocol.equals("")) { throw new RtspCommException("protocol of RtspTransport is null or empty"); } if (this.castMode == null || this.castMode.equals("")) { throw new RtspCommException("castMode of RtspTransport is null or empty"); } List<String> res = new ArrayList<>(); res.add(this.protocol); res.add(this.castMode);  if (this.ssrc != null && !this.ssrc.equals("")) { res.add(String.format("ssrc=%s", this.ssrc)); } if (this.mode != null && !this.mode.equals("")) { res.add(String.format("mode="%s"", this.mode)); } return String.join(";", res); }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
************************************
[+] input: toByteArray() { DataItem dataItem = new DataItem(); dataItem.setReturnCode(EReturnCode.from((byte) 0xFF)); dataItem.setVariableType(EDataVariableType.BYTE_WORD_DWORD); dataItem.setCount(1); dataItem.setData(new byte[1]); byte[] actual = dataItem.toByteArray(); byte[] expect = {(byte) 0xFF, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00}; "<AssertPlaceHolder>"; }
toByteArray() { int length = 4 + this.data.length; ByteWriteBuff buff = ByteWriteBuff.newInstance(length) .putByte(this.returnCode.getCode()) .putByte(this.variableType.getCode()); // 如果数据类型是位，不需要 * 8，如果是其他类型，需要 * 8 switch (this.variableType) { case NULL: case BYTE_WORD_DWORD: case INTEGER: buff.putShort(this.count * 8); break; case BIT: case DINTEGER: case REAL: case OCTET_STRING: buff.putShort(this.count); break; default: throw new S7CommException("Data type not recognized"); } buff.putBytes(this.data); return buff.getData(); }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
************************************
[+] input: toByteArray() { DataItem dataItem = new DataItem(); dataItem.setReturnCode(EReturnCode.from((byte) 0xFF)); dataItem.setVariableType(EDataVariableType.BYTE_WORD_DWORD); dataItem.setCount(1); dataItem.setData(new byte[1]); ReadWriteDatum datum = new ReadWriteDatum(); datum.getReturnItems().add(dataItem); byte[] actual = datum.toByteArray(); byte[] expect = {(byte) 0xFF, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00}; "<AssertPlaceHolder>"; }
toByteArray() { return new byte[0]; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
************************************
[+] input: insert() { byte[] expect = {(byte) 0x28, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFD, (byte) 0x00, (byte) 0x0A, (byte) 0x01, (byte) 0x00, (byte) 0x30, (byte) 0x41, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x31, (byte) 0x50, (byte) 0x05, (byte) 0x5F, (byte) 0x49, (byte) 0x4e, (byte) 0x53, (byte) 0x45};  PlcControlParameter insert = PlcControlParameter.insert(EFileBlockType.DB, 1, EDestinationFileSystem.P); "<AssertPlaceHolder>";  }
toByteArray() { return ByteWriteBuff.newInstance(1 + 7 + 2 + this.parameterBlockLength + 1 + this.lengthPart) .putByte(this.functionCode.getCode()) .putBytes(this.unknownBytes) .putShort(this.parameterBlockLength) .putBytes(this.parameterBlock.toByteArray()) .putByte(this.lengthPart) .putString(this.piService) .getData(); }
[*] target: assertArrayEquals(expect, insert.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, insert. toByteArray ( ) )
************************************
************************************
[+] input: byteArrayLength() { PlcStopParameter parameter = new PlcStopParameter(); "<AssertPlaceHolder>"; }
byteArrayLength() { return 7 + this.lengthPart; }
[*] target: assertEquals(7, parameter.byteArrayLength())
[-] pred: org. junit. Assert. assertEquals ( 7, parameter. byteArrayLength() )
************************************
************************************
[+] input: toByteArray() { RequestItem requestItem = new RequestItem(); requestItem.setSpecificationType((byte) 0x12); requestItem.setLengthOfFollowing((byte) 0x10); requestItem.setSyntaxId(ESyntaxID.S7ANY); requestItem.setVariableType(EParamVariableType.BYTE); requestItem.setCount(7); requestItem.setDbNumber(7); requestItem.setArea(EArea.DATA_BLOCKS); requestItem.setByteAddress(3); requestItem.setBitAddress(1); ReadWriteParameter readWriteParameter = new ReadWriteParameter(); readWriteParameter.setFunctionCode(EFunctionCode.READ_VARIABLE); readWriteParameter.setItemCount((byte) 0x01); readWriteParameter.getRequestItems().add(requestItem); byte[] actual = readWriteParameter.toByteArray(); byte[] expect = new byte[]{(byte) 0x04, (byte) 0x01, (byte) 0x12, (byte) 0x10, (byte) 0x10, (byte) 0x02, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x07, (byte) 0x84, (byte) 0x00, (byte) 0x00, (byte) 0x19}; "<AssertPlaceHolder>"; }
toByteArray() { int length = 2 + this.requestItems.stream().mapToInt(RequestBaseItem::byteArrayLength).sum(); ByteWriteBuff buff = ByteWriteBuff.newInstance(length) .putByte(this.functionCode.getCode()) .putByte(this.itemCount); for (RequestBaseItem requestItem : this.requestItems) { buff.putBytes(requestItem.toByteArray()); } return buff.getData(); }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
************************************
[+] input: writeDate() { LocalDate expect = LocalDate.of(2023, 4, 1); s7PLC.writeDate("DB4.296", expect); LocalDate actual = s7PLC.readDate("DB4.296"); "<AssertPlaceHolder>"; }
readDate(String address) { int offset = this.readUInt16(address); return LocalDate.of(1990, 1, 1).plusDays(offset); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: writeTimeOfDay() { LocalTime expect = LocalTime.of(20, 15, 11); s7PLC.writeTimeOfDay("DB4.298", expect); LocalTime actual = s7PLC.readTimeOfDay("DB4.298"); "<AssertPlaceHolder>"; }
readTimeOfDay(String address) { long value = this.readUInt32(address); return LocalTime.ofSecondOfDay(value / 1000); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: writeDTL() { LocalDateTime expect = LocalDateTime.of(2023, 5, 27, 12, 11, 22, 333225555); s7PLC.writeDTL("DB1.0", expect);  LocalDateTime actual = s7PLC.readDTL("DB1.0"); "<AssertPlaceHolder>"; }
readDTL(String address) { byte[] bytes = this.readByte(address, 12); ByteReadBuff buff = ByteReadBuff.newInstance(bytes); int year = buff.getUInt16(); int month = buff.getByteToInt(); int dayOfMonth = buff.getByteToInt(); int week = buff.getByteToInt(); int hour = buff.getByteToInt(); int minute = buff.getByteToInt(); int second = buff.getByteToInt(); long nanoOfSecond = buff.getUInt32(); return LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, (int) nanoOfSecond); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: toHexString() { String expected = "1A 6B DE 8C"; byte[] data = new byte[]{(byte) 0x1A, (byte) 0x6B, (byte) 0xDE, (byte) 0x8C}; String actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1 49 AB DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1|49|AB|DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"|"); assertEquals(expected, actual);  expected = "A1-49-AB-DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"-"); assertEquals(expected, actual);  expected = "A1@49@AB@DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"@"); "<AssertPlaceHolder>"; }
toHexString(byte[] src, String splitStr) { return toHexString(src, splitStr, true); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: lrcTest1() { byte[] src = new byte[]{0x01, 0x03, 0x00, 0x00, 0x00, 0x14}; boolean actual = LRCUtil.lrc(src, (byte) 0xE8); "<AssertPlaceHolder>"; }
lrc(byte[] src, byte target) { byte des = lrc(src); return des == target; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: getByNullKey() { JapCache japCache = new JapLocalCache(); String res = (String) japCache.get(null); Assert."<AssertPlaceHolder>"; }
get(String key) { if (StrUtil.isEmpty(key)) { return null; } readLock.lock(); try { CacheObj cacheObj = LOCAL_CACHE.get(key); if (null == cacheObj || cacheObj.isExpired()) { return null; } return cacheObj.getData(); } finally { readLock.unlock(); } }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: getByNotEmptyKey() { JapCache japCache = new JapLocalCache(); String res = (String) japCache.get("ke1y"); System.out.println(res); Assert."<AssertPlaceHolder>"; }
get(String key) { if (StrUtil.isEmpty(key)) { return null; } readLock.lock(); try { CacheObj cacheObj = LOCAL_CACHE.get(key); if (null == cacheObj || cacheObj.isExpired()) { return null; } return cacheObj.getData(); } finally { readLock.unlock(); } }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: containsNullKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey(null); Assert."<AssertPlaceHolder>"; }
containsKey(String key) { if (StrUtil.isEmpty(key)) { return false; } readLock.lock(); try { CacheObj cacheObj = LOCAL_CACHE.get(key); return null != cacheObj && !cacheObj.isExpired(); } finally { readLock.unlock(); } }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
************************************
[+] input: containsEmptyKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey(""); Assert."<AssertPlaceHolder>"; }
containsKey(String key) { if (StrUtil.isEmpty(key)) { return false; } readLock.lock(); try { CacheObj cacheObj = LOCAL_CACHE.get(key); return null != cacheObj && !cacheObj.isExpired(); } finally { readLock.unlock(); } }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
************************************
[+] input: containsNotEmptyKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey("Key"); Assert."<AssertPlaceHolder>"; }
containsKey(String key) { if (StrUtil.isEmpty(key)) { return false; } readLock.lock(); try { CacheObj cacheObj = LOCAL_CACHE.get(key); return null != cacheObj && !cacheObj.isExpired(); } finally { readLock.unlock(); } }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
************************************
[+] input: getUserNullStore() { JapUserStore japUserStore = null; JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  JapUser japUser = JapAuthentication.getUser(request, response); Assert."<AssertPlaceHolder>"; }
getUser(JapHttpRequest request, JapHttpResponse response) { if (null == context) { return null; } JapUserStore japUserStore = context.getUserStore(); if (null == japUserStore) { return null; } return japUserStore.get(request, response); }
[*] target: assertNull(japUser)
[-] pred: org. junit. Assert. assertNull ( japUser )
************************************
************************************
[+] input: checkTokenNullContext() { Map<String, Object> map = JapAuthentication.checkToken("aaa"); Assert."<AssertPlaceHolder>"; }
checkToken(String token) { if (null == context || ObjectUtil.isEmpty(token)) { return null; } JapCache japCache = context.getCache(); if (null == japCache) { return null; } Map<String, Object> tokenMap = JapTokenHelper.checkToken(token); if (MapUtil.isNotEmpty(tokenMap)) { Kv kv = new Kv(); kv.putAll(tokenMap); // Get the token creation time, multiplied by 1000 is the number of milliseconds long iat = kv.getLong("iat") * 1000; JapConfig japConfig = context.getConfig(); // Get token expiration time long tokenExpireTime = japConfig.getTokenExpireTime(); // The token is available when the token creation time plus the token expiration time is later than the current time, // otherwise the token has expired if (new Date(iat + tokenExpireTime).after(new Date())) { return tokenMap; } } return null; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
************************************
[+] input: checkTokenNullCache() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = null; JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  Map<String, Object> map = JapAuthentication.checkToken("aaa"); Assert."<AssertPlaceHolder>"; }
checkToken(String token) { if (null == context || ObjectUtil.isEmpty(token)) { return null; } JapCache japCache = context.getCache(); if (null == japCache) { return null; } Map<String, Object> tokenMap = JapTokenHelper.checkToken(token); if (MapUtil.isNotEmpty(tokenMap)) { Kv kv = new Kv(); kv.putAll(tokenMap); // Get the token creation time, multiplied by 1000 is the number of milliseconds long iat = kv.getLong("iat") * 1000; JapConfig japConfig = context.getConfig(); // Get token expiration time long tokenExpireTime = japConfig.getTokenExpireTime(); // The token is available when the token creation time plus the token expiration time is later than the current time, // otherwise the token has expired if (new Date(iat + tokenExpireTime).after(new Date())) { return tokenMap; } } return null; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
************************************
[+] input: checkTokenNullToken() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  Map<String, Object> map = JapAuthentication.checkToken(null); Assert."<AssertPlaceHolder>"; }
checkToken(String token) { if (null == context || ObjectUtil.isEmpty(token)) { return null; } JapCache japCache = context.getCache(); if (null == japCache) { return null; } Map<String, Object> tokenMap = JapTokenHelper.checkToken(token); if (MapUtil.isNotEmpty(tokenMap)) { Kv kv = new Kv(); kv.putAll(tokenMap); // Get the token creation time, multiplied by 1000 is the number of milliseconds long iat = kv.getLong("iat") * 1000; JapConfig japConfig = context.getConfig(); // Get token expiration time long tokenExpireTime = japConfig.getTokenExpireTime(); // The token is available when the token creation time plus the token expiration time is later than the current time, // otherwise the token has expired if (new Date(iat + tokenExpireTime).after(new Date())) { return tokenMap; } } return null; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
************************************
[+] input: logout() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  boolean result = JapAuthentication.logout(request, response); Assert."<AssertPlaceHolder>"; }
logout(JapHttpRequest request, JapHttpResponse response) { JapUserStore japUserStore = context.getUserStore(); if (null == japUserStore) { return false; } japUserStore.remove(request, response);  // Clear all cookie information Map<String, JapHttpCookie> cookieMap = RequestUtil.getCookieMap(request); if (CollectionUtil.isNotEmpty(cookieMap)) { cookieMap.forEach((key, cookie) -> { cookie.setMaxAge(0); response.addCookie(cookie); }); } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: generateAuthorizationCodeResponse() { String url = idsAuthorizationProvider.generateAuthorizationCodeResponse(userInfo, idsRequestParam, clientDetail); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
generateAuthorizationCodeResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail) { String authorizationCode = oauth2Service.createAuthorizationCode(param, userInfo, OauthUtil.getCodeExpiresIn(clientDetail.getCodeExpiresIn())); String params = "?code=" + authorizationCode; if (StringUtil.isNotEmpty(param.getState())) { params = params + "&state=" + param.getState(); } return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateImplicitGrantResponse() { String url = idsAuthorizationProvider.generateImplicitGrantResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(6, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("scope")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("token_type")); Assert.assertTrue(obj.containsKey("expires_in")); }
generateImplicitGrantResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); Map<String, String> tokenResponse = new HashMap<>(9); // https://tools.ietf.org/html/rfc6749#section-4.2.2 // The authorization server MUST NOT issue a refresh token. tokenResponse.put(IdsConsts.ACCESS_TOKEN, accessToken.getAccessToken()); tokenResponse.put(IdsConsts.EXPIRES_IN, String.valueOf(OauthUtil.getAccessTokenExpiresIn(clientDetail.getAccessTokenExpiresIn()))); tokenResponse.put(IdsConsts.TOKEN_TYPE, IdsConsts.TOKEN_TYPE_BEARER); tokenResponse.put(IdsConsts.SCOPE, param.getScope()); if (OauthUtil.isOidcProtocol(param.getScope())) { tokenResponse.put(IdsConsts.ID_TOKEN, TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer)); } if (StringUtil.isNotEmpty(param.getState())) { tokenResponse.put(IdsConsts.STATE, param.getState()); } String params = ObjectUtils.parseMapToString(tokenResponse, false); return param.getRedirectUri() + "?" + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateCodeIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); }
generateCodeIdTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return this.generateAuthorizationCodeResponse(userInfo, param, clientDetail) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("id_token")); }
generateIdTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "?id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param, issuer); return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
generateIdTokenTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); String params = "?access_token=" + accessToken.getAccessToken() + "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateCodeTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
generateCodeTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { AccessToken accessToken = TokenUtil.createAccessToken(userInfo, clientDetail, param.getGrantType(), param.getScope(), param.getNonce(), issuer); String params = "&access_token=" + accessToken.getAccessToken(); return this.generateAuthorizationCodeResponse(userInfo, param, clientDetail) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateCodeIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(4, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
generateCodeIdTokenTokenAuthorizationResponse(UserInfo userInfo, IdsRequestParam param, ClientDetail clientDetail, String issuer) { String params = "&id_token=" + TokenUtil.createIdToken(clientDetail, userInfo, param.getNonce(), issuer); return this.generateCodeTokenAuthorizationResponse(userInfo, param, clientDetail, issuer) + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: generateNoneAuthorizationResponse() { String url = idsAuthorizationProvider.generateNoneAuthorizationResponse(idsRequestParam); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("state")); }
generateNoneAuthorizationResponse(IdsRequestParam param) { String params = ""; if (!StringUtil.isEmpty(param.getState())) { params = "?state=" + param.getState(); } return param.getRedirectUri() + params; }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: createRsaJsonWebKeyJson() { String jwkJson = JwkUtil.createRsaJsonWebKeyJson("jap-jwks-keyid", TokenSigningAlg.RS256); Assert."<AssertPlaceHolder>"; }
createRsaJsonWebKeyJson(String keyId, TokenSigningAlg signingAlg) { RsaJsonWebKey jwk = createRsaJsonWebKey(keyId, signingAlg); return jwk.toJson(RsaJsonWebKey.OutputControlLevel.INCLUDE_PRIVATE); }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
************************************
[+] input: createRsaJsonWebKeySetJson() { String jwkJson = JwkUtil.createRsaJsonWebKeySetJson("jap-jwks-keyid", TokenSigningAlg.RS256); Assert."<AssertPlaceHolder>"; }
createRsaJsonWebKeySetJson(String keyId, TokenSigningAlg signingAlg) { RsaJsonWebKey jwk = createRsaJsonWebKey(keyId, signingAlg); return new JsonWebKeySet(jwk).toJson(JsonWebKey.OutputControlLevel.INCLUDE_PRIVATE); }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
************************************
[+] input: createEsJsonWebKey() { EllipticCurveJsonWebKey ellipticCurveJsonWebKey = JwkUtil.createEsJsonWebKey("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
createEsJsonWebKey(String keyId, TokenSigningAlg signingAlg) { if (!Arrays.asList(TokenSigningAlg.ES256, TokenSigningAlg.ES384, TokenSigningAlg.ES512).contains(signingAlg)) { throw new InvalidJwksException("Unable to create ES Json Web Key. Unsupported jwk algorithm, only supports ES256, ES384, ES512"); } EllipticCurveJsonWebKey jwk = null;  ECParameterSpec spec = null; if (signingAlg == TokenSigningAlg.ES256) { spec = EllipticCurves.P256; } else if (signingAlg == TokenSigningAlg.ES384) { spec = EllipticCurves.P384; } else { spec = EllipticCurves.P521; }  try { jwk = EcJwkGenerator.generateJwk(spec); jwk.setUse(Use.SIGNATURE); jwk.setKeyId(keyId); jwk.setAlgorithm(signingAlg.getAlg()); } catch (JoseException e) { e.printStackTrace(); throw new InvalidJwksException("Unable to create ES Json Web Key."); } return jwk; }
[*] target: assertNotNull(ellipticCurveJsonWebKey)
[-] pred: org. junit. Assert. assertNotNull ( ellipticCurveJsonWebKey )
************************************
************************************
[+] input: createEsJsonWebKeyJson() { String jwkJson = JwkUtil.createEsJsonWebKeyJson("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
createEsJsonWebKeyJson(String keyId, TokenSigningAlg signingAlg) { EllipticCurveJsonWebKey jwk = createEsJsonWebKey(keyId, signingAlg); return jwk.toJson(RsaJsonWebKey.OutputControlLevel.INCLUDE_PRIVATE); }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
************************************
[+] input: createEsJsonWebKeySetJson() { String jwkJson = JwkUtil.createEsJsonWebKeySetJson("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
createEsJsonWebKeySetJson(String keyId, TokenSigningAlg signingAlg) { EllipticCurveJsonWebKey jwk = createEsJsonWebKey(keyId, signingAlg); return new JsonWebKeySet(jwk).toJson(JsonWebKey.OutputControlLevel.INCLUDE_PRIVATE); }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
************************************
[+] input: isCallbackNoneResponseType() { boolean res = Oauth2Util.isCallback(request, new OAuthConfig() .setResponseType(Oauth2ResponseType.NONE)); Assert."<AssertPlaceHolder>"; }
isCallback(JapHttpRequest request, OAuthConfig oAuthConfig) { if (oAuthConfig.getResponseType() == Oauth2ResponseType.CODE) { String code = request.getParameter("code"); return !StrUtil.isEmpty(code); } else if (oAuthConfig.getResponseType() == Oauth2ResponseType.TOKEN) { String accessToken = request.getParameter("access_token"); return !StrUtil.isEmpty(accessToken); } return false; }
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
************************************
[+] input: getCacheCodeVerifierNullClientId() { String res = PkceHelper.getCacheCodeVerifier(null); Assert."<AssertPlaceHolder>"; }
getCacheCodeVerifier(String clientId) { return (String) JapAuthentication.getContext().getCache().get(clientId); }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: getCacheCodeVerifier() { JapCache japCache = new JapLocalCache(); JapAuthentication.setContext(new JapContext().setCache(japCache)); JapAuthentication.getContext().getCache().set("clientId", "111", 111111); String res = PkceHelper.getCacheCodeVerifier("clientId"); Assert."<AssertPlaceHolder>"; Assert.assertEquals("111", res); }
getCacheCodeVerifier(String clientId) { return (String) JapAuthentication.getContext().getCache().get(clientId); }
[*] target: assertNotNull(res)
[-] pred: org. junit. Assert. assertNotNull ( res )
************************************
************************************
[+] input: createSsoToken() { when(httpServletRequestMock.getHeader("x-forwarded-for")).thenReturn("127.0.0.1"); when(httpServletRequestMock.getHeader("user-agent")).thenReturn("ua"); SSOToken ssoToken = JapSsoUtil.createSsoToken("userId", "userName", request); System.out.println(ssoToken); Assert."<AssertPlaceHolder>"; }
createSsoToken(Object userId, String username, JapHttpRequest request) { return new SSOToken() .setId(userId) .setIssuer(username) .setIp(getIp(request)) .setUserAgent(RequestUtil.getUa(request)) .setTime(System.currentTimeMillis()); }
[*] target: assertNotNull(ssoToken)
[-] pred: org. junit. Assert. assertNotNull ( ssoToken )
************************************
************************************
[+] input: createToken() { when(httpServletRequestMock.getHeader("x-forwarded-for")).thenReturn("127.0.0.1"); when(httpServletRequestMock.getHeader("user-agent")).thenReturn("ua"); String token = JapSsoUtil.createToken("userId", "userName", request); System.out.println(token); Assert."<AssertPlaceHolder>"; }
createToken(Object userId, String username, JapHttpRequest request) { return createSsoToken(userId, username, request).getToken(); }
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
************************************
[+] input: test4() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(true, FRADtoA.class.getName(), "getLongA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(true, FRADtoA.class.getName(), "strA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-get"); } }
queryGetSetMethodByFieldName(boolean queryGetMethod, String className, String fieldName) { List<BaseWriteDbData4GetSetMethod> list = queryGetSetMethodListByFieldName(queryGetMethod, className, fieldName); if (JavaCGUtil.isCollectionEmpty(list)) { return null; } if (list.size() > 1) { logger.error("类的字段存在多个{}方法 {} {}", (queryGetMethod ? JavaCGConstants.METHOD_PREFIX_GET : JavaCGConstants.METHOD_PREFIX_SET), className, fieldName); } return list.get(0); }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: test5() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(false, FRADtoA.class.getName(), "setStrA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-set");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(false, FRADtoA.class.getName(), "intA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-set"); } }
queryGetSetMethodByFieldName(boolean queryGetMethod, String className, String fieldName) { List<BaseWriteDbData4GetSetMethod> list = queryGetSetMethodListByFieldName(queryGetMethod, className, fieldName); if (JavaCGUtil.isCollectionEmpty(list)) { return null; } if (list.size() > 1) { logger.error("类的字段存在多个{}方法 {} {}", (queryGetMethod ? JavaCGConstants.METHOD_PREFIX_GET : JavaCGConstants.METHOD_PREFIX_SET), className, fieldName); } return list.get(0); }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: test6() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(true, FRCDtoC.class.getName(), "iField1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "querySuperGetSetMethodByFieldName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(false, FRCDtoC.class.getName(), "iField1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "querySuperGetSetMethodByFieldName-set"); } }
queryGetSetMethodByFieldNameSuper(boolean queryGetMethod, String className, String fieldName) { String currentClassName = className; while (true) { BaseWriteDbData4GetSetMethod getSetMethod = queryGetSetMethodByFieldName(queryGetMethod, currentClassName, fieldName); if (getSetMethod != null) { // 检查获取到的get/set方法中的类名，若与指定的类名不同则进行修改 checkClassName(className, getSetMethod); return getSetMethod; } // 当前类未查询到对应的get/set方法，再查询父类的 String superClassName = extendsImplHandler.querySuperClassNameByFull(currentClassName); if (superClassName == null) { return null; } currentClassName = superClassName; } }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
************************************
[+] input: pushNPop() { CustomLinkedList<Integer> linkedList = new CustomLinkedList<>(); assertTrue(linkedList.isEmpty()); linkedList.push(2); linkedList.push(3); linkedList.push(36); linkedList.push(39);  assertThat(linkedList.pop(), is(39)); assertThat(linkedList.pop(), is(36)); assertThat(linkedList.pop(), is(3)); assertFalse(linkedList.isEmpty()); assertThat(linkedList.pop(), is(2)); "<AssertPlaceHolder>"; }
isEmpty() { return size == 0; }
[*] target: assertTrue(linkedList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( linkedList. isEmpty() )
************************************
************************************
[+] input: testConsume() { FuzzedDataProvider data = CannedFuzzedDataProvider.create( Arrays.asList( (byte) 1 /* do not return null */, 0 /* first class on the classpath */, (byte) 1 /* do not return null */, 0 /* first constructor */)); ImplementedInterface result = Autofuzz.consume(data, ImplementedInterface.class); "<AssertPlaceHolder>"; }
consume(FuzzedDataProvider data, Class<T> type) { try { return (T) CONSUME.invokeExact(data, type); } catch (AutofuzzConstructionException ignored) { return null; } catch (Throwable t) { rethrowUnchecked(t); // Not reached. return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: InvalidMessageException { TimebasedProposalGenerator proposalGenerator = new TimebasedProposalGenerator(); Proposal proposal = proposalGenerator.nextProposal(); Value value = new Protocol.StringValue("test1"); Value svalue = new Protocol.StringValue("test2"); Promise prom = protocol.new Promise(proposal, value, svalue,new Ranking(100, 101), 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION); assertEquals(101, prom.getSuggestionRanking().minor);  final String wireFormatNew = prom.wireFormat();  int tieBreaker = wireFormatNew.lastIndexOf(TextProtocol.SEPARATOR); final String wireFormatOld = wireFormatNew.substring(0, tieBreaker);  /* Simulate new node reading old Promise format. */ Promise prom2 = (Promise)protocol.parse(wireFormatOld);  assertEquals(Ranking.UNINITIALIZED.major, prom2.getSuggestionRanking().minor);  TestProtocol.OldPromise oldProm = protocol.new OldPromise(proposal, value, svalue, 100, 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION);  /* Simulate old node reading old and new promise formats. */ protocol.replacePromise();  assertEquals(oldProm.wireFormat(), wireFormatOld); TestProtocol.OldPromise oldProm1 = (TestProtocol.OldPromise)protocol.parse(wireFormatOld); TestProtocol.OldPromise oldProm2 = (TestProtocol.OldPromise)protocol.parse(wireFormatNew);  /* verify they check out equal. */ "<AssertPlaceHolder>"; }
parse(String wireFormat); }  /** * A String based value implementation used as the "default" Value */ public static class StringValue extends StringFormatable implements Value {  StringValue() { super(null); }  public StringValue(String s) { super(s); }  @Override public String toString() { return "Value:" + s; }  public String getString() { return s; } }
[*] target: assertEquals(oldProm1, oldProm2)
[-] pred: org. junit. Assert. assertEquals ( oldProm1, oldProm2 )
************************************
************************************
[+] input: testToBundleDefaultValues() { Time time = new Time(); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); PersistableBundle persistableBundle = time.toPersistableBundle(); assertNotNull(persistableBundle); time = new Time(persistableBundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Bundle bundle = time.toBundle(); assertNotNull(bundle); time = new Time(bundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Map<String, ?> map = time.toMap(); assertNotNull(map); time = new Time(map); assertEquals(0, time.getHour()); "<AssertPlaceHolder>"; }
getMinute() { return minute; }
[*] target: assertEquals(0, time.getMinute())
[-] pred: org. junit. Assert. assertEquals ( 0, time. getMinute() )
************************************
************************************
[+] input: testBuildForegroundNotificationWithoutPermission() { permissionManager.setHasPostNotificationsPermission(false); Notification notification = notificationHandler.buildForegroundNotification(); "<AssertPlaceHolder>"; }
buildForegroundNotification() { Log.d(NotificationHandler.class.getName(), "buildForegroundNotification"); if (!permissionManager.hasPostNotificationsPermission(getContext())) { Log.e(NotificationHandler.class.getName(), "Cannot build foreground notification because of missing permission. Returning null."); return null; } String title = getResources().getString(R.string.notification_title); String text = getResources().getString(R.string.notification_foreground_text); foregroundNotificationBuilder = createForegroundNotificationBuilder(); foregroundNotificationBuilder.setSmallIcon(R.drawable.icon_notification_foreground).setContentTitle(title).setContentText(text).setStyle(new NotificationCompat.BigTextStyle().bigText(text)).setPriority(NotificationCompat.PRIORITY_LOW); if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) { foregroundNotificationBuilder.setVibrate(null); foregroundNotificationBuilder.setSound(null); } if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) { foregroundNotificationBuilder.setForegroundServiceBehavior(Notification.FOREGROUND_SERVICE_IMMEDIATE); } return foregroundNotificationBuilder.build(); }
[*] target: assertNull(notification)
[-] pred: org. junit. Assert. assertNull ( notification )
************************************
************************************
[+] input: testExecutionSkippedNetworkTaskDoesNotExist() { NetworkTask task = getNetworkTask(); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
onReceive(Context context, Intent intent) { NetworkTask task = new NetworkTask(Objects.requireNonNull(intent.getExtras())); Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Received request for " + task); boolean synchronous = context.getResources().getBoolean(R.bool.worker_synchronous_execution); boolean addToPool = context.getResources().getBoolean(R.bool.worker_add_to_pool); int wakeLockTimeout = context.getResources().getInteger(R.integer.worker_execution_wakelock_timeout) * 1000; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Synchronous execution is " + synchronous); PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE); PowerManager.WakeLock wakeLock = null; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Creating ExecutorService"); ExecutorService executorService = Executors.newSingleThreadExecutor(); try { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Acquiring partial wake lock with a timeout of " + wakeLockTimeout + " msec"); wakeLock = Objects.requireNonNull(powerManager).newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "KeepItUp:NetworkTaskProcessBroadcastReceiver"); wakeLock.acquire(wakeLockTimeout); TimeBasedSuspensionScheduler timeBasedScheduler = createTimeBasedSuspensionScheduler(context); synchronized (TimeBasedSuspensionScheduler.LOCK) { if (timeBasedScheduler.isRunning()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is running."); if (!timeBasedScheduler.isSuspended()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not suspended."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is suspended. Skipping execution and rescheduling."); } } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running."); if (!timeBasedScheduler.isSuspensionActiveAndEnabled()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not active."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running but is active. Restarting..."); timeBasedScheduler.start(task); } } } } catch (Exception exc) { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Error executing worker", exc); } finally { if (wakeLock != null && synchronous && wakeLock.isHeld()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Releasing partial wake lock"); wakeLock.release(); } Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Shutting down ExecutorService"); executorService.shutdown(); } }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
************************************
[+] input: testExecutionSkippedMarkedAsNotRunning() { NetworkTask task = getNetworkTask(); task = networkTaskDAO.insertNetworkTask(task); networkTaskDAO.updateNetworkTaskRunning(task.getId(), false); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
onReceive(Context context, Intent intent) { NetworkTask task = new NetworkTask(Objects.requireNonNull(intent.getExtras())); Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Received request for " + task); boolean synchronous = context.getResources().getBoolean(R.bool.worker_synchronous_execution); boolean addToPool = context.getResources().getBoolean(R.bool.worker_add_to_pool); int wakeLockTimeout = context.getResources().getInteger(R.integer.worker_execution_wakelock_timeout) * 1000; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Synchronous execution is " + synchronous); PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE); PowerManager.WakeLock wakeLock = null; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Creating ExecutorService"); ExecutorService executorService = Executors.newSingleThreadExecutor(); try { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Acquiring partial wake lock with a timeout of " + wakeLockTimeout + " msec"); wakeLock = Objects.requireNonNull(powerManager).newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "KeepItUp:NetworkTaskProcessBroadcastReceiver"); wakeLock.acquire(wakeLockTimeout); TimeBasedSuspensionScheduler timeBasedScheduler = createTimeBasedSuspensionScheduler(context); synchronized (TimeBasedSuspensionScheduler.LOCK) { if (timeBasedScheduler.isRunning()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is running."); if (!timeBasedScheduler.isSuspended()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not suspended."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is suspended. Skipping execution and rescheduling."); } } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running."); if (!timeBasedScheduler.isSuspensionActiveAndEnabled()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not active."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running but is active. Restarting..."); timeBasedScheduler.start(task); } } } } catch (Exception exc) { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Error executing worker", exc); } finally { if (wakeLock != null && synchronous && wakeLock.isHeld()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Releasing partial wake lock"); wakeLock.release(); } Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Shutting down ExecutorService"); executorService.shutdown(); } }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
************************************
[+] input: testExecutionSkippedNotValid() { NetworkTask task = getNetworkTask(); task = networkTaskDAO.insertNetworkTask(task); networkTaskDAO.updateNetworkTaskRunning(task.getId(), true); task.setSchedulerId(task.getSchedulerId() + 1); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
onReceive(Context context, Intent intent) { NetworkTask task = new NetworkTask(Objects.requireNonNull(intent.getExtras())); Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Received request for " + task); boolean synchronous = context.getResources().getBoolean(R.bool.worker_synchronous_execution); boolean addToPool = context.getResources().getBoolean(R.bool.worker_add_to_pool); int wakeLockTimeout = context.getResources().getInteger(R.integer.worker_execution_wakelock_timeout) * 1000; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Synchronous execution is " + synchronous); PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE); PowerManager.WakeLock wakeLock = null; Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Creating ExecutorService"); ExecutorService executorService = Executors.newSingleThreadExecutor(); try { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Acquiring partial wake lock with a timeout of " + wakeLockTimeout + " msec"); wakeLock = Objects.requireNonNull(powerManager).newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "KeepItUp:NetworkTaskProcessBroadcastReceiver"); wakeLock.acquire(wakeLockTimeout); TimeBasedSuspensionScheduler timeBasedScheduler = createTimeBasedSuspensionScheduler(context); synchronized (TimeBasedSuspensionScheduler.LOCK) { if (timeBasedScheduler.isRunning()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is running."); if (!timeBasedScheduler.isSuspended()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not suspended."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is suspended. Skipping execution and rescheduling."); } } else { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running."); if (!timeBasedScheduler.isSuspensionActiveAndEnabled()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not active."); executeAndReschedule(context, task, wakeLock, synchronous, addToPool, executorService); } else { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Time based scheduler is not running but is active. Restarting..."); timeBasedScheduler.start(task); } } } } catch (Exception exc) { Log.e(NetworkTaskProcessBroadcastReceiver.class.getName(), "Error executing worker", exc); } finally { if (wakeLock != null && synchronous && wakeLock.isHeld()) { Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Releasing partial wake lock"); wakeLock.release(); } Log.d(NetworkTaskProcessBroadcastReceiver.class.getName(), "Shutting down ExecutorService"); executorService.shutdown(); } }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
************************************
[+] input: testSynchronizeDelete() { getIntervalDAO().insertInterval(getInterval1()); getIntervalDAO().insertInterval(getInterval2()); activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().removeItems(); "<AssertPlaceHolder>"; assertTrue(getIntervalDAO().readAllIntervals().isEmpty()); }
synchronizeIntervals() { Log.d(IntervalHandler.class.getName(), "synchronizeIntervals"); boolean didChanges = false; try { List<Interval> newIntervals = intervalDialog.getAdapter().getAllItems(); List<Interval> dbIntervals = new ArrayList<>(globalSettingsActivity.getTimeBasedSuspensionScheduler().getIntervals()); for (Interval interval : newIntervals) { Log.d(IntervalHandler.class.getName(), "Processing interval " + interval); if (interval.getId() < 0) { insertInterval(interval); didChanges = true; } else { Interval dbInterval = findById(interval.getId(), dbIntervals); Log.d(IntervalHandler.class.getName(), "Found dbInterval = " + dbInterval); if (dbInterval != null) { if (!interval.isEqual(dbInterval)) { updateInterval(interval); didChanges = true; } dbIntervals.remove(dbInterval); } else { Log.e(IntervalHandler.class.getName(), "No interval with id " + interval.getId() + " found"); } } } for (Interval interval : dbIntervals) { deleteInterval(interval); didChanges = true; } } catch (Exception exc) { Log.e(IntervalHandler.class.getName(), "Error synchronizing intervals.", exc); showErrorDialog(getResources().getString(R.string.text_dialog_general_error_synchronize_intervals)); } return didChanges; }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
************************************
[+] input: testSynchronizeIntervalsAdd() { activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().addItem(getInterval1()); intervalsDialog.getAdapter().addItem(getInterval2()); intervalsDialog.getAdapter().addItem(getInterval3()); "<AssertPlaceHolder>"; List<Interval> intervals = getIntervalDAO().readAllIntervals(); assertEquals(2, intervals.size()); assertTrue(intervals.get(0).isEqual(getInterval1())); assertTrue(intervals.get(1).isEqual(getInterval2())); }
synchronizeIntervals() { Log.d(IntervalHandler.class.getName(), "synchronizeIntervals"); boolean didChanges = false; try { List<Interval> newIntervals = intervalDialog.getAdapter().getAllItems(); List<Interval> dbIntervals = new ArrayList<>(globalSettingsActivity.getTimeBasedSuspensionScheduler().getIntervals()); for (Interval interval : newIntervals) { Log.d(IntervalHandler.class.getName(), "Processing interval " + interval); if (interval.getId() < 0) { insertInterval(interval); didChanges = true; } else { Interval dbInterval = findById(interval.getId(), dbIntervals); Log.d(IntervalHandler.class.getName(), "Found dbInterval = " + dbInterval); if (dbInterval != null) { if (!interval.isEqual(dbInterval)) { updateInterval(interval); didChanges = true; } dbIntervals.remove(dbInterval); } else { Log.e(IntervalHandler.class.getName(), "No interval with id " + interval.getId() + " found"); } } } for (Interval interval : dbIntervals) { deleteInterval(interval); didChanges = true; } } catch (Exception exc) { Log.e(IntervalHandler.class.getName(), "Error synchronizing intervals.", exc); showErrorDialog(getResources().getString(R.string.text_dialog_general_error_synchronize_intervals)); } return didChanges; }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
************************************
[+] input: Exception { PropertyGroup pg = new PropertyGroup(obj); String value = pg.getStringProperty("level1|level2|scalars|stringProp"); "<AssertPlaceHolder>"; assertEquals("stringValue", value); }
getStringProperty(String propertyName) throws Exception { return getStringProperty(propertyName, null); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: IOException { ClassLoader classLoader = this.getClass().getClassLoader(); URL resource = classLoader.getResource("test.json"); File f = new File(resource.getPath()); String s = readString(f); StructuredDataEncoder structuredData = new StructuredDataEncoder(s); byte[] msgHash = structuredData.hashStructuredData(); String ownerAddress = "0xE10AA6471B33845FaE88DD7bBeB63c250DA3a639"; String sig = "4f4e0dec5f1d6f99460fea04bc374d96a495d96c0c455d4731902cdbf95525fc77c66ee08346466fe188f521c196f0f06bebb8d1a8df44cb68792514ca24808e2a"; byte[] signatureBytes = Hex.decode(sig); byte v = signatureBytes[64]; Sign.SignatureData sd = new Sign.SignatureData( v, Arrays.copyOfRange(signatureBytes, 0, 32), Arrays.copyOfRange(signatureBytes, 32, 64));  boolean verified = false; for (int i = 0; i < 4; i++) { BigInteger publicKey = Sign.recoverFromSignature( (byte) i, new ECDSASignature( new BigInteger(1, sd.getR()), new BigInteger(1, sd.getS())), msgHash);  if (publicKey != null) { String addressRecovered = Keys.toChecksumAddress(Keys.getAddress(publicKey)); if (addressRecovered.equals(ownerAddress)) { verified = true; break; } } } "<AssertPlaceHolder>"; }
getAddress(byte[] publicKey) { byte[] hash = new Keccak.Digest256().digest(publicKey); return Arrays.copyOfRange(hash, hash.length - 20, hash.length);  // right most 160 bits }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: testSegmentIoExample1() {  // SOURCE: https://github.com/segmentio/ksuid // // REPRESENTATION: // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 // // COMPONENTS: // // Time: 2017-10-09 21:00:47 -0700 PDT // Timestamp: 107608047 // Payload: B5A1CD34B5F99D1154FB6853345C9735 //  String string = "0ujtsYcgvSTl8PAuAdqWYSMnLOv"; String raw = "0669F7EFB5A1CD34B5F99D1154FB6853345C9735"; Instant instant = Instant.parse("2017-10-10T04:00:47Z"); // UTC long timestamp = 107608047; // KSUID time String payload = "B5A1CD34B5F99D1154FB6853345C9735";  // instantiate a KSUID from bytes byte[] bytes = new BigInteger(raw, 16).toByteArray(); Ksuid ksuid = Ksuid.from(bytes);  // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv assertEquals(string, ksuid.toString());  // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 String raw2 = new BigInteger(1, ksuid.toBytes()).toString(16).toUpperCase(); assertEquals(raw.replaceAll("^0+", ""), raw2);  // Time: 2017-10-09 21:00:47 -0700 PDT assertEquals(instant, ksuid.getInstant());  // Timestamp: 107608047 assertEquals(Ksuid.toUnixTime(timestamp), ksuid.getTime());  // Payload: B5A1CD34B5F99D1154FB6853345C9735 String payload2 = new BigInteger(1, ksuid.getPayload()).toString(16).toUpperCase(); "<AssertPlaceHolder>"; }
getPayload() { final byte[] copy = new byte[PAYLOAD_BYTES]; System.arraycopy(this.payload, 0, copy, 0, PAYLOAD_BYTES); return copy; }
[*] target: assertEquals(payload, payload2)
[-] pred: org. junit. Assert. assertEquals ( payload, payload2 )
************************************
************************************
[+] input: multiplyByTwo2() { Class2 class2Mock = Mockito.mock(Class2.class); Mockito.when(class2Mock.getValue()).thenReturn(5);  Class1 class1 = new Class1(); int result = class1.multiplyByTwo2(class2Mock); Assert."<AssertPlaceHolder>"; }
multiplyByTwo2(Class2 class2){ if(class2 == null){ logger.error("The parameter should not be null"); System.exit(1); } return class2.getValue() * 2; }
[*] target: assertEquals(10, result)
[-] pred: org. junit. Assert. assertEquals ( 10, result )
************************************
************************************
[+] input: testFor() { AggregationPipeline<Document> pipeline = AggregationPipeline.create();  pipeline.project(Projection.project() .include("date", DateExpressions.dateToParts(field("date"))) .include("date_iso",DateExpressions.dateToParts(field("date")).iso8601(true).timezone(value("Asia/Shanghai"))));  Document document = mars.aggregate(pipeline, "sales").tryNext(); Assert."<AssertPlaceHolder>";  }
timezone(Expression timezone) { this.timeZone = timezone; return this; }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: test04ctById() {  Parent p = new Parent(); p.setAge(18); p.setName("person"); p.setId("10");  mars.insert(p); Criteria id = Criteria.where("_id").is("10");  long l = mars.count(new Query(id), Parent.class);  Assert."<AssertPlaceHolder>"; }
setId( String id ) { this.id = id; }
[*] target: assertEquals(1, l)
[-] pred: org. junit. Assert. assertEquals ( 1, l )
************************************
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);  transaction.setLockType(Lock.LockType.XLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应升级为x锁,新的事务获取应获取不到 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }   // 终止所有线程 threadPool.shutdownNow(); }
setLockType(LockType lockType) { this.lockType = lockType; }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.XLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);   Thread.sleep(100); transaction.setLockType(Lock.LockType.SLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应保持为x锁,新的事务获取应获取不到锁 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }  // 终止所有线程 threadPool.shutdownNow(); }
setLockType(LockType lockType) { this.lockType = lockType; }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
************************************
[+] input: testSuma() { System.out.println("suma"); double num1 = 5.0; double num2 = 7.0; Calculadora instance = new Calculadora(); double expResult = 12.0; double result = instance.suma(num1, num2); "<AssertPlaceHolder>"; }
suma(double num1, double num2) { return num1 + num2; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
************************************
[+] input: testSubstraction() { System.out.println("resta"); double num1 = -2.0; double num2 = -7.0; Calculadora instance = new Calculadora(); double expResult = 5.0; double result = instance.resta(num1, num2); "<AssertPlaceHolder>"; }
resta(double num1, double num2) { return num1 - num2; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
************************************
[+] input: testMultiplication() { System.out.println("multiplicacion"); double num1 = 12.0; double num2 = 0.0; Calculadora instance = new Calculadora(); double expResult = 0.0; double result = instance.multiplicacion(num1, num2); "<AssertPlaceHolder>"; }
multiplicacion(double num1, double num2) { return num1 * num2; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
************************************
[+] input: testDivisionByNaN() { System.out.println("division por NaN"); double num1 = 0.0; double num2 = Double.NaN; Calculadora instance = new Calculadora(); double expResult = Double.NaN; double result = instance.division(num1, num2); "<AssertPlaceHolder>"; }
division(double num1, double num2) { if (num2 != 0) { return num1 / num2; } else { return Double.NaN; } }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
************************************
[+] input: testDivisionByZero() { System.out.println("division por cero"); double num1 = 0.0; double num2 = 0.0; Calculadora instance = new Calculadora(); double expResult = Double.NaN; double result = instance.division(num1, num2); "<AssertPlaceHolder>"; }
division(double num1, double num2) { if (num2 != 0) { return num1 / num2; } else { return Double.NaN; } }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
************************************
[+] input: filteredListSizeIsCorrect1() { int k = 3; // instantiate random filter with parameter k KLeastExecutedFilter filter = new KLeastExecutedFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
filterMutants(List<MutationInstance> toFilter) {  // determine number of mutants to run int n = this.percent ? (guidance.getSeenMutants() * k / 100) : k;  // initialize filtered list to be returned ArrayList<MutationInstance> filteredList = new ArrayList<MutationInstance>(); ArrayList<MutationInstance> executedMutants = new ArrayList<MutationInstance>();  // add (up to n) mutants in toFilter that have not been executed before to filteredList int numMutants = 0; for (MutationInstance mutant : toFilter){ if (numMutants < n && !executionCounts.containsKey(mutant)){ filteredList.add(mutant); numMutants++; } // add all mutants that have already been executed before to a list else if (executionCounts.containsKey(mutant)){ executedMutants.add(mutant); } }  // if numMutants < n mutants have never been executed, add the next (n - numMutants) least executed mutants to filtered list if (numMutants < n){  // sort list of already executed MutationInstances by execution count Collections.sort(executedMutants, (e1, e2) -> executionCounts.get(e1).compareTo(executionCounts.get(e2)));  // add least executed to filteredList until |filteredList| = n int size = executedMutants.size(); for(int i = 0; i < size && numMutants < n; i++){ MutationInstance mutant = executedMutants.get(i); filteredList.add(mutant); numMutants++; } }  // increment execution count for each mutant in filteredList for (MutationInstance mutant: filteredList) { if (!executionCounts.containsKey(mutant)){ executionCounts.put(mutant, 1); } else { executionCounts.put(mutant, executionCounts.get(mutant)+1); } }  return filteredList; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
************************************
[+] input: filteredListSizeIsCorrect2() { int k = 5; // instantiate random filter with parameter k KLeastExecutedFilter filter = new KLeastExecutedFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
filterMutants(List<MutationInstance> toFilter) {  // determine number of mutants to run int n = this.percent ? (guidance.getSeenMutants() * k / 100) : k;  // initialize filtered list to be returned ArrayList<MutationInstance> filteredList = new ArrayList<MutationInstance>(); ArrayList<MutationInstance> executedMutants = new ArrayList<MutationInstance>();  // add (up to n) mutants in toFilter that have not been executed before to filteredList int numMutants = 0; for (MutationInstance mutant : toFilter){ if (numMutants < n && !executionCounts.containsKey(mutant)){ filteredList.add(mutant); numMutants++; } // add all mutants that have already been executed before to a list else if (executionCounts.containsKey(mutant)){ executedMutants.add(mutant); } }  // if numMutants < n mutants have never been executed, add the next (n - numMutants) least executed mutants to filtered list if (numMutants < n){  // sort list of already executed MutationInstances by execution count Collections.sort(executedMutants, (e1, e2) -> executionCounts.get(e1).compareTo(executionCounts.get(e2)));  // add least executed to filteredList until |filteredList| = n int size = executedMutants.size(); for(int i = 0; i < size && numMutants < n; i++){ MutationInstance mutant = executedMutants.get(i); filteredList.add(mutant); numMutants++; } }  // increment execution count for each mutant in filteredList for (MutationInstance mutant: filteredList) { if (!executionCounts.containsKey(mutant)){ executionCounts.put(mutant, 1); } else { executionCounts.put(mutant, executionCounts.get(mutant)+1); } }  return filteredList; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
************************************
[+] input: filteredListSizeIsCorrect1() { int k = 3; // instantiate random filter with parameter k KRandomFilter filter = new KRandomFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
filterMutants(List<MutationInstance> toFilter) {  // determine number of mutants to run int n = this.percent ? (guidance.getSeenMutants() * k / 100) : k;  // shuffle list of mutants to randomize first n elements Collections.shuffle(toFilter);  // add first k mutants in list to filtered list List<MutationInstance> filtered = new ArrayList<>(); for(int i = 0; i < n && i < toFilter.size(); i++){ filtered.add(toFilter.get(i)); }  return filtered; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
************************************
[+] input: filteredListSizeIsCorrect2() { int k = 5; // instantiate random filter with parameter k KRandomFilter filter = new KRandomFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
filterMutants(List<MutationInstance> toFilter) {  // determine number of mutants to run int n = this.percent ? (guidance.getSeenMutants() * k / 100) : k;  // shuffle list of mutants to randomize first n elements Collections.shuffle(toFilter);  // add first k mutants in list to filtered list List<MutationInstance> filtered = new ArrayList<>(); for(int i = 0; i < n && i < toFilter.size(); i++){ filtered.add(toFilter.get(i)); }  return filtered; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
************************************
[+] input: testPropSerialization() { Prop prop = new Prop(); List<Element> any = prop.getAny(); Element element1 = SardineUtil.createElement(SardineUtil.createQNameWithCustomNamespace("hello")); element1.setTextContent("bla"); any.add(element1);  Element element2 = SardineUtil.createElement(SardineUtil.createQNameWithDefaultNamespace("hello")); element2.setTextContent("bla"); any.add(element2);  prop.setDisplayname("bli");  String xml = SardineUtil.toXml(prop); String expectedXML = "<?xml version="1.0" encoding="utf-8"?>\n" + "<D:prop xmlns:D="DAV:">\n" + "   <s:hello xmlns:s="SAR:">bla</s:hello>\n" + "   <D:hello>bla</D:hello>\n" + "   <D:displayname>bli</D:displayname>\n" + "</D:prop>";  "<AssertPlaceHolder>"; }
toXml(Object jaxbElement) { StringWriter writer = new StringWriter(); try { getSerializer().write(jaxbElement, writer); } catch (Exception e) { throw new RuntimeException(e.getMessage(), e); } return writer.toString(); }
[*] target: assertEquals(expectedXML, xml)
[-] pred: org. junit. Assert. assertEquals ( expectedXML, xml )
************************************
************************************
[+] input: testWriteDate() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Date date = new Date(1420114230123l); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(date, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = date.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123000000, parsedDate.getNano()); //Nothing beyond milliseconds }
doWrite(Object value, Generator generator, String parentField) { if (value == null) { generator.writeNull(); } else if (value instanceof String) { generator.writeString((String) value); } else if (value instanceof Integer) { generator.writeNumber(((Integer) value).intValue()); } else if (value instanceof Long) { generator.writeNumber(((Long) value).longValue()); } else if (value instanceof Float) { generator.writeNumber(((Float) value).floatValue()); } else if (value instanceof Double) { generator.writeNumber(((Double) value).doubleValue()); } else if (value instanceof Short) { generator.writeNumber(((Short) value).shortValue()); } else if (value instanceof Byte) { generator.writeNumber(((Byte) value).byteValue()); } // Big Decimal/Integer else if (value instanceof Number) { // check double vs long Number n = ((Number) value); double d = n.doubleValue(); if (Math.floor(d) == d) { generator.writeNumber(n.longValue()); } else { generator.writeNumber(d); } } else if (value instanceof Boolean) { generator.writeBoolean(((Boolean) value).booleanValue()); } else if (value instanceof byte[]) { generator.writeBinary((byte[]) value); } else if (value.getClass().isArray()) { generator.writeBeginArray(); for (Object o : ObjectUtils.toObjectArray(value)) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Map) { generator.writeBeginObject(); for (Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) { String fieldName = entry.getKey().toString(); // filter out fields if (shouldKeep(parentField, fieldName)) { generator.writeFieldName(fieldName); Result result = doWrite(entry.getValue(), generator, fieldName); if (!result.isSuccesful()) { return result; } } } generator.writeEndObject(); } else if (value instanceof Iterable) { generator.writeBeginArray(); for (Object o : (Iterable<?>) value) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Timestamp) { Timestamp timestamp = (Timestamp) value; long epochSeconds = timestamp.getTime() / 1000; // Getting rid of millisconds because they're captured in timestamp.getNanos() Instant instant = Instant.ofEpochSecond(epochSeconds, timestamp.getNanos()); OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(instant, ZoneId.systemDefault()); generator.writeString(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(offsetDateTime)); } else if (value instanceof Date) { Calendar cal = Calendar.getInstance(); cal.setTime((Date) value); generator.writeString(DatatypeConverter.printDateTime(cal)); } else if (value instanceof Calendar) { generator.writeString(DatatypeConverter.printDateTime((Calendar) value)); } else { if (writeUnknownTypes) { return handleUnknown(value, generator); } return Result.FAILED(value); } return Result.SUCCESFUL(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testWriteDateWithNanos() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Timestamp timestamp = new Timestamp(1420114230123l); timestamp.setNanos(123456789); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(timestamp, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = timestamp.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123456789, parsedDate.getNano()); }
doWrite(Object value, Generator generator, String parentField) { if (value == null) { generator.writeNull(); } else if (value instanceof String) { generator.writeString((String) value); } else if (value instanceof Integer) { generator.writeNumber(((Integer) value).intValue()); } else if (value instanceof Long) { generator.writeNumber(((Long) value).longValue()); } else if (value instanceof Float) { generator.writeNumber(((Float) value).floatValue()); } else if (value instanceof Double) { generator.writeNumber(((Double) value).doubleValue()); } else if (value instanceof Short) { generator.writeNumber(((Short) value).shortValue()); } else if (value instanceof Byte) { generator.writeNumber(((Byte) value).byteValue()); } // Big Decimal/Integer else if (value instanceof Number) { // check double vs long Number n = ((Number) value); double d = n.doubleValue(); if (Math.floor(d) == d) { generator.writeNumber(n.longValue()); } else { generator.writeNumber(d); } } else if (value instanceof Boolean) { generator.writeBoolean(((Boolean) value).booleanValue()); } else if (value instanceof byte[]) { generator.writeBinary((byte[]) value); } else if (value.getClass().isArray()) { generator.writeBeginArray(); for (Object o : ObjectUtils.toObjectArray(value)) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Map) { generator.writeBeginObject(); for (Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) { String fieldName = entry.getKey().toString(); // filter out fields if (shouldKeep(parentField, fieldName)) { generator.writeFieldName(fieldName); Result result = doWrite(entry.getValue(), generator, fieldName); if (!result.isSuccesful()) { return result; } } } generator.writeEndObject(); } else if (value instanceof Iterable) { generator.writeBeginArray(); for (Object o : (Iterable<?>) value) { Result result = doWrite(o, generator, parentField); if (!result.isSuccesful()) { return result; } } generator.writeEndArray(); } else if (value instanceof Timestamp) { Timestamp timestamp = (Timestamp) value; long epochSeconds = timestamp.getTime() / 1000; // Getting rid of millisconds because they're captured in timestamp.getNanos() Instant instant = Instant.ofEpochSecond(epochSeconds, timestamp.getNanos()); OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(instant, ZoneId.systemDefault()); generator.writeString(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(offsetDateTime)); } else if (value instanceof Date) { Calendar cal = Calendar.getInstance(); cal.setTime((Date) value); generator.writeString(DatatypeConverter.printDateTime(cal)); } else if (value instanceof Calendar) { generator.writeString(DatatypeConverter.printDateTime((Calendar) value)); } else { if (writeUnknownTypes) { return handleUnknown(value, generator); } return Result.FAILED(value); } return Result.SUCCESFUL(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { InputStream inputStream = IOUtils.open("org/opensearch/hadoop/util/textdata.txt"); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
open(String location) { return open(location, null); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
************************************
[+] input: Exception { File tempFile = File.createTempFile("textdata", "txt"); BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile))); writer.write("Hello World. This is used by IOUtilsTest."); writer.close();  InputStream inputStream = IOUtils.open(tempFile.toURI().toURL().toString()); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
open(String location) { return open(location, null); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
************************************
[+] input: testRestartConnectionWithSsl_CreatesSslSocket() { ProxyServer server = mock(ProxyServer.class); Socket socket = mock(Socket.class); when(socket.getInetAddress()).thenReturn(InetAddress.getLoopbackAddress()); AtomicBoolean calledCreateSSLSocket = new AtomicBoolean(); ConnectionHandler connection = new ConnectionHandler(server, socket) { @Override void createSSLSocket() { calledCreateSSLSocket.set(true); } }; connection.setThread(mock(Thread.class)); connection.restartConnectionWithSsl();  "<AssertPlaceHolder>"; }
restartConnectionWithSsl() { try { createSSLSocket(); runConnection(true); } catch (IOException ioException) { PGException pgException = PGException.newBuilder( "Failed to create SSL socket: " + (ioException.getMessage() == null ? ioException.getClass().getName() : ioException.getMessage())) .setSeverity(Severity.FATAL) .setSQLState(SQLState.InternalError) .build(); try { handleError(pgException); } catch (Exception ignore) { } throw pgException; } }
[*] target: assertTrue(calledCreateSSLSocket.get())
[-] pred: org. junit. Assert. assertTrue ( calledCreateSSLSocket. get ( ) )
************************************
************************************
[+] input: ParseException { final JSONObject expected = new JSONObject(ImmutableMap.of("commands", new JSONArray()));  final JSONObject actual = parser.emptyCommands();  "<AssertPlaceHolder>"; }
emptyCommands() throws IOException, ParseException { return parse(this.getClass().getClassLoader().getResourceAsStream(EMPTY_FILE)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testIsReplacePgCatalogTables_defaultTrue() { OptionsMetadata optionsMetadata = mock(OptionsMetadata.class); when(optionsMetadata.replacePgCatalogTables()).thenReturn(true); SessionState state = new SessionState( ImmutableMap.of( "spanner.replace_pg_catalog_tables", new PGSetting("spanner", "replace_pg_catalog_tables")), optionsMetadata); "<AssertPlaceHolder>"; }
isReplacePgCatalogTables() { PGSetting setting = internalGet(toKey("spanner", "replace_pg_catalog_tables"), false); if (setting == null) { return true; } return tryGetFirstNonNull( true, () -> BooleanParser.toBoolean(setting.getSetting()), () -> BooleanParser.toBoolean(setting.getResetVal()), () -> BooleanParser.toBoolean(setting.getBootVal())); }
[*] target: assertTrue(state.isReplacePgCatalogTables())
[-] pred: org. junit. Assert. assertTrue ( state. isReplacePgCatalogTables ( ) )
************************************
************************************
[+] input: IOException { PipedOutputStream pipedOutputStream = new PipedOutputStream(); BinaryCopyParser parser = new BinaryCopyParser(new PipedInputStream(pipedOutputStream, 256));  DataOutputStream data = new DataOutputStream(pipedOutputStream); data.write(COPY_BINARY_HEADER); data.writeInt(0); data.writeInt(0);  // Write the trailer indicator to indicate that there are no more rows. data.writeShort(-1);  Iterator<CopyRecord> iterator = parser.iterator(); "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, iterator::next); }
hasNext() { try { // The hasNext status is UNKNOWN if a call to next() has been executed since the last time // hasNext() was called, or if this is the first time hasNext() is called. if (hasNext == HasNext.UNKNOWN) { // The first value in a row is the number of fields in that row. The value will be -1 for // the last tuple (this is the file trailer). The value should be the same for all other // rows. short fieldCount = dataInputStream.readShort(); if (fieldCount == -1) { logger.log(Level.FINE, "End of copy file: -1"); hasNext = HasNext.NO; } else if (fieldCount > -1) { if (firstRowFieldCount == -1) { firstRowFieldCount = fieldCount; currentRow = new BinaryField[fieldCount]; } else if (firstRowFieldCount != fieldCount) { throw SpannerExceptionFactory.newSpannerException( ErrorCode.FAILED_PRECONDITION, String.format( "Invalid field count encountered: %d, expected %d", fieldCount, firstRowFieldCount)); } hasNext = HasNext.YES; } else { throw SpannerExceptionFactory.newSpannerException( ErrorCode.FAILED_PRECONDITION, String.format("Invalid field count encountered: %d", fieldCount)); } } return hasNext == HasNext.YES; } catch (EOFException eofException) { // The protocol specifies that the stream should contain a -1 as the trailer in the file, // but it seems that some clients do not include this. logger.log(Level.FINE, "EOF in BinaryCopyParser"); hasNext = HasNext.NO; return false; } catch (IOException ioException) { throw SpannerExceptionFactory.newSpannerException( ErrorCode.INTERNAL, ioException.getMessage(), ioException); } }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext ( ) )
************************************
************************************
[+] input: IOException { CSVFormat format = CSVFormat.POSTGRESQL_TEXT;  PipedOutputStream payload = new PipedOutputStream(); OutputStreamWriter writer = new OutputStreamWriter(payload, StandardCharsets.UTF_8);  PipedInputStream inputStream = new PipedInputStream(payload); Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);  CSVParser parser = CSVParser.parse(reader, format); // Pass in 2 complete and one incomplete record. It should be possible to parse the two first // records without problems. String records = "1\tOne\n2\tTwo\n3\t"; writer.write(records); writer.flush();  // Get an iterator for the parser and get the first two records. Iterator<CSVRecord> iterator = parser.iterator(); assertTrue(iterator.hasNext()); CSVRecord record = iterator.next(); assertEquals("1", record.get(0)); assertEquals("One", record.get(1));  assertTrue(iterator.hasNext()); record = iterator.next(); assertEquals("2", record.get(0)); assertEquals("Two", record.get(1));  // Calling iterator.hasNext() or iterator.next() would now block, as there is not enough data // to build another record. // Add the missing pieces for the last record and parse that as well. writer.write("Three\n"); writer.close();  "<AssertPlaceHolder>"; record = iterator.next(); assertEquals("3", record.get(0)); assertEquals("Three", record.get(1));  // There are no more records as the writer has been closed. assertFalse(iterator.hasNext()); }
close() throws IOException { this.payload.close(); this.closedLatch.countDown(); this.dataReceivedLatch.countDown(); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: listLocalFilesTest() { List<CdcFile> localFiles = fileSystem.listLocalFiles(); List<String> actualFileList = new ArrayList<>(); for (CdcFile file : localFiles) { actualFileList.add(file.getName()); } List<String> expectFileList = new ArrayList<>(); int n = 15; for (int i = 1; i < n; i++) { expectFileList.add(binlogFilePrefix + String.format("%06d", i)); } boolean expectTrue = ListUtils.isEqualList(expectFileList, actualFileList); Assert."<AssertPlaceHolder>"; }
listLocalFiles() { return localFileSystem.listFiles(); }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
************************************
[+] input: listFilesTest() { List<CdcFile> files = fileSystem.listAllFiles(); List<String> actual = new ArrayList<>(); for (CdcFile file : files) { actual.add(file.getName()); } List<String> expect = new ArrayList<>(); int n = 15; for (int i = 1; i < n; i++) { expect.add(binlogFilePrefix + String.format("%06d", i)); } boolean expectTrue = ListUtils.isEqualList(expect, actual); Assert.assertTrue(expectTrue); files = fileSystem.listAllFiles(); actual.clear(); for (CdcFile file : files) { actual.add(file.getName()); } expectTrue = ListUtils.isEqualList(expect, actual); Assert."<AssertPlaceHolder>"; }
listAllFiles() { Map<String, CdcFile> fileMap = getLocalFileMap(); if (remoteFileSystem != null) { List<CdcFile> remoteFiles = listRemoteFiles(); for (CdcFile f : remoteFiles) { if (fileMap.containsKey(f.getName())) { fileMap.get(f.getName()).setRecord(f.getRecord()); } else { fileMap.putIfAbsent(f.getName(), f); } } } ArrayList<CdcFile> res = new ArrayList<>(fileMap.values()); res.sort(CdcFile::compareTo); return res; }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
************************************
[+] input: IOException { String fileName = "size-test.txt"; String content = "size_test"; long expect = -1; long actual = fileSystem.size(fileName); Assert.assertEquals(expect, actual); File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); expect = content.length(); actual = fileSystem.size(fileName); Assert."<AssertPlaceHolder>"; }
size(String fileName) { if (exist(fileName)) { return newFile(fileName).length(); } return -1; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: IOException { List<String> expect = new ArrayList<>(); List<String> actual = new ArrayList<>(); int n = 11; for (int i = 1; i < n; i++) { String fileName = BinlogFileUtil.getBinlogFilePrefix(group, stream) + String.format(".%06d", i); expect.add(fileName); File f = fileSystem.newFile(fileName); f.createNewFile(); }  // 测试后缀不匹配场景 String fileName = String.format("%06d", 10) + ".tmp"; File f = fileSystem.newFile(fileName); f.createNewFile(); fileName = String.format("%05d", 10); f = fileSystem.newFile(fileName); f.createNewFile(); // 测试前缀不匹配场景 fileName = "random" + String.format("%06d", 10); f = fileSystem.newFile(fileName); f.createNewFile();  List<CdcFile> fileList = fileSystem.listFiles(); for (CdcFile cdcFile : fileList) { actual.add(cdcFile.getName()); } boolean res = ListUtils.isEqualList(expect, actual); Assert."<AssertPlaceHolder>"; }
listFiles() { List<CdcFile> res = new ArrayList<>();  List<File> fileList = BinlogFileUtil.listLocalBinlogFiles(fullPath, group, stream); for (File f : fileList) { CdcFile cdcFile = new CdcFile(f.getName(), this); cdcFile.setLocation("LOCAL"); res.add(cdcFile); }  res.sort(CdcFile::compareTo); return res; }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
************************************
[+] input: IOException { String fileName = "get-channel-test.txt"; BinlogFileReadChannel channel = fileSystem.getReadChannel(fileName); Assert.assertNull(channel); String content = "Darkness travels towards light, " + "but blindness towards death."; File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); channel = fileSystem.getReadChannel(fileName); byte[] data = new byte[1024]; ByteBuffer buffer = ByteBuffer.wrap(data); channel.read(buffer); buffer.flip(); String actual = new String(buffer.array(), 0, buffer.limit()); Assert."<AssertPlaceHolder>"; }
getReadChannel(String fileName) throws IOException { if (exist(fileName)) { FileInputStream is = new FileInputStream(getFullName(fileName)); return new BinlogFileReadChannel(is.getChannel(), is); } return null; }
[*] target: assertEquals(content, actual)
[-] pred: org. junit. Assert. assertEquals ( content, actual )
************************************
************************************
[+] input: testSerialize() { List<TableMeta.FieldMeta> fieldMetas = Lists.newArrayList( new TableMeta.FieldMeta("c1", "char", true, true, "xxx", false, "xxx"), new TableMeta.FieldMeta("c2", "char", true, true, "xxx", false, "xxx"), new TableMeta.FieldMeta("c3", "char", true, true, "xxx", false, "xxx") );  Map<String, TableMeta.IndexMeta> indexMetaMap = Maps.newHashMap(); indexMetaMap.put("idx1", new TableMeta.IndexMeta("idx1", "INDEX", false)); indexMetaMap.put("idx2", new TableMeta.IndexMeta("idx2", "INDEX", false)); indexMetaMap.put("idx3", new TableMeta.IndexMeta("idx3", "INDEX", false));  TableMeta tableMeta = new TableMeta(); tableMeta.setTable("t1"); tableMeta.setDdl("create table t1(id bigint)"); tableMeta.setCharset("utf8"); tableMeta.setSchema("d1"); tableMeta.setUseImplicitPk(true); tableMeta.setFields(fieldMetas); tableMeta.setIndexes(indexMetaMap);  DefaultQueryLog defaultQueryLog = new DefaultQueryLog( "d1", "create table t1", new Timestamp(System.currentTimeMillis()), 10000000, 1, DBMSAction.CREATE, System.currentTimeMillis()); defaultQueryLog.setFirstDdl(new AtomicBoolean(true)); defaultQueryLog.setParallelSeq(23); defaultQueryLog.setOptionValue("opt1", 200); defaultQueryLog.setTableMeta(tableMeta);  byte[] data = SerializationUtils.serialize(defaultQueryLog); DefaultQueryLog defaultQueryLog1 = SerializationUtils.deserialize(data); Assert."<AssertPlaceHolder>"; }
setTableMeta(TableMeta tableMeta) { this.tableMeta = tableMeta; }
[*] target: assertEquals(defaultQueryLog, defaultQueryLog1)
[-] pred: org. junit. Assert. assertEquals ( defaultQueryLog, defaultQueryLog1 )
************************************
************************************
[+] input: getNextBinlogFileNameTest() { // 单流测试 String groupName = GROUP_NAME_GLOBAL; String streamName = STREAM_NAME_GLOBAL; String fileName = getFirstBinlogFileName(groupName, streamName); int randomSeq = new Random().nextInt(BINLOG_FILE_NAME_MAX_SEQUENCE); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } String expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); assertEquals(expectedFileName, fileName); // 多流测试 groupName = "group1"; streamName = "stream1"; fileName = getFirstBinlogFileName(groupName, streamName); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); "<AssertPlaceHolder>"; }
getBinlogFileNameBySequence(String groupName, String streamName, int seq) { if (seq <= 0 || BINLOG_FILE_NAME_MAX_SEQUENCE < seq) { throw new PolardbxException("invalid binlog file name sequence " + seq); } String prefix = getBinlogFilePrefix(groupName, streamName); String suffix = String.format(BINLOG_FILE_NAME_SUFFIX_FORMAT, seq); return prefix + BINLOG_FILE_NAME_SEPARATOR + suffix; }
[*] target: assertEquals(expectedFileName, fileName)
[-] pred: org. junit. Assert. assertEquals ( expectedFileName, fileName )
************************************
************************************
[+] input: getConfigNameTest() { String configName = "binlogx_stream_group_name"; String expect = "binlogx.stream.group.name"; String actual = ConfigNameMap.getOldConfigName(configName); Assert.assertEquals(expect, actual);  configName = "not_exist_config"; expect = ""; actual = ConfigNameMap.getOldConfigName(configName); Assert."<AssertPlaceHolder>"; }
getOldConfigName(String newConfigName) { return StringUtils.defaultIfBlank(CONFIG_MAP.get(newConfigName), ""); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: testReWriteWrongSql() { String ddl = "alter table `payment_voucher` drop key `out_voucher_id`,drop key pay_no\n" + "add index key `uid_pay_no`(`user_id`,`pay_no`) using btree\n" + "add unique key `uid_voucherid_source`(`user_id`,`out_voucher_id`,`source`) using btree";  String expect = "alter table `payment_voucher` drop key `out_voucher_id`,drop key pay_no \n" + "add index `uid_pay_no`(`user_id`,`pay_no`) using btree \n" + "add unique key `uid_voucherid_source`(`user_id`,`out_voucher_id`,`source`) using btree"; String newDdl = SQLUtils.reWriteWrongDdl(ddl); Assert."<AssertPlaceHolder>"; }
reWriteWrongDdl(String sql) { Scanner scanner = new Scanner(sql); StringBuilder sb = new StringBuilder(); int keyCount = 0; boolean reWrite = false; while (scanner.hasNext()) { String line = scanner.nextLine(); Scanner lineScanner = new Scanner(line); while (lineScanner.hasNext()) { String key = lineScanner.next(); String lowerKey = key.toLowerCase(); if (StringUtils.equalsAny(lowerKey, "key", "index")) { keyCount++; if (keyCount > 1) { reWrite = true; continue; } } else { keyCount = 0; } sb.append(key).append(" "); } sb.append("\n"); } if (reWrite) { return sb.toString().trim(); } return null; }
[*] target: assertEquals(expect, newDdl)
[-] pred: org. junit. Assert. assertEquals ( expect, newDdl )
************************************
************************************
[+] input: IOException { String fileName = "download-test1.txt"; String expectContent = "hello, world"; String destFile = "download-test1.txt"; manager.delete(fileName); Appender appender = manager.providerAppender(fileName); appender.begin(); appender.append(expectContent.getBytes(), expectContent.getBytes().length); appender.end(); manager.download(fileName, "."); String actualContent = new String(Files.readAllBytes(Paths.get(destFile))); Assert."<AssertPlaceHolder>"; new File(destFile).deleteOnExit(); }
download(String fileName, String localPath) { boolean success = true; do { try (LindormClient client = getLindormClient()) { String lindormFileName = getLindormFileName(fileName); logger.info("begin to download lindorm file: {} to local path: {}", lindormFileName, localPath); S3Object object = client.getObject(getBucket(), lindormFileName); FileOutputStream fos = new FileOutputStream(new File(localPath, fileName)); S3ObjectInputStream input = object.getObjectContent(); IOUtils.copy(input, fos); } catch (Exception e) { success = false; logger.error("download file {} error, will try again!", fileName, e); try { Thread.sleep(1000); } catch (InterruptedException interruptedException) { logger.error("interruption during sleep", interruptedException); break; } } } while (!success); logger.info("success to download file {} to local", fileName); }
[*] target: assertEquals(expectContent, actualContent)
[-] pred: org. junit. Assert. assertEquals ( expectContent, actualContent )
************************************
************************************
[+] input: testHostSafeCheck2() { boolean exception = false; try { CommonUtil.hostSafeCheck("acbdabdasdhkj.com=="); } catch (Exception e) { exception = true; } "<AssertPlaceHolder>"; }
hostSafeCheck(String host) { String regex = "^[a-zA-Z0-9_\\-.:\\[\\]]+$";  Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(host);  if (!matcher.matches()) { throw new PolardbxException(String.format("invalid host name : %s", host)); } }
[*] target: assertTrue(exception)
[-] pred: org. junit. Assert. assertTrue ( exception )
************************************
************************************
[+] input: testVarchar() { setConfig(ConfigKeys.TASK_EXTRACT_REBUILD_DATA_LOG, "true"); String str = "abcdefgh"; Field field = MakeFieldFactory.makeField("varchar(5)", str, "utf8", false, false); RowDataRebuildLogger logger = new RowDataRebuildLogger(); Serializable s = logger.doDecode(field.getMysqlType().getType(), field.doGetTableMeta(), field.encode(), "utf8", false); Assert."<AssertPlaceHolder>"; }
doDecode(int type, byte[] meta, byte[] data, String charset, boolean isUnsigned) { int m = decodeMeta(type, meta); String javaCharset = CharsetConversion.getJavaCharset(charset); return logBuffer .fetchValue(type, m, false, new LogBuffer(data, 0, data.length), javaCharset, isUnsigned); }
[*] target: assertEquals(str, s)
[-] pred: org. junit. Assert. assertEquals ( str, s )
************************************
************************************
[+] input: IOException { long actual = binlogFileReadChannel.size(); long expect = localChannel.size(); Assert."<AssertPlaceHolder>"; }
size() throws IOException { try { return parse(size.invoke(channel)); } catch (Exception e) { log.error("invoke size method error", e); throw new IOException("Get size of file channel error!"); } }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: testEnsureTypeWithAny() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.ANY), node, true);  "<AssertPlaceHolder>"; }
ensureType( RelDataType type, RexNode node, boolean matchNullability) { RelDataType targetType = type; if (matchNullability) { targetType = matchNullability(type, node); }  if (targetType.getSqlTypeName() == SqlTypeName.ANY && (!matchNullability || targetType.isNullable() == node.getType().isNullable())) { return node; }  //    if (!node.getType().equals(targetType)) { //      if (node instanceof RexInputRef) { //        RexInputRef ref = (RexInputRef) node; //        return new RexInputRef(ref.getIndex(), targetType); //      } else { //        return makeCast(targetType, node); //      } //    } return node; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
************************************
[+] input: testEnsureTypeWithItself() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);  "<AssertPlaceHolder>"; }
ensureType( RelDataType type, RexNode node, boolean matchNullability) { RelDataType targetType = type; if (matchNullability) { targetType = matchNullability(type, node); }  if (targetType.getSqlTypeName() == SqlTypeName.ANY && (!matchNullability || targetType.isNullable() == node.getType().isNullable())) { return node; }  //    if (!node.getType().equals(targetType)) { //      if (node instanceof RexInputRef) { //        RexInputRef ref = (RexInputRef) node; //        return new RexInputRef(ref.getIndex(), targetType); //      } else { //        return makeCast(targetType, node); //      } //    } return node; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:05"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 5, 0) ); "<AssertPlaceHolder>"; assertEquals(300, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00 -00:30 "); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(1800, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("02:30 - 04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(2, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(7200, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30-04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:00"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 0, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 24, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30:20-04:30:40"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 20), LocalTime.of(4, 30, 40) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6 + 20, actual.getDuration()); }
parseTimeInterval(String str) throws ParseException { String[] splits = str.split("-"); if (splits.length != 2) { throw new ParseException("Bad Input: " + str, 0); } LocalTime start = LocalTime.parse(splits[0].trim()); LocalTime end = LocalTime.parse(splits[1].trim()); return new TimeInterval(start, end); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(0); for (int i = 0; i < 1000; ++i) { statementSummaryManager.summaryStmt(execInfo); } execInfo.setSlow(true); statementSummaryManager.summaryStmt(execInfo); Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount == 1); }
getCurrentStmtSummaries(long nowBeginTime) { return getStmtSummaries(nowBeginTime, (e1, e2) -> { return (int) (e1.longValue() - e2.longValue()); }); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(1); for (int i = 0; i < 10000; ++i) { statementSummaryManager.summaryStmt(execInfo); } Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount > 50L && queryCount < 150L); }
getCurrentStmtSummaries(long nowBeginTime) { return getStmtSummaries(nowBeginTime, (e1, e2) -> { return (int) (e1.longValue() - e2.longValue()); }); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: testFillTabWithSpace() { String sql = "   select sum(rate)      from                                                                          feed_receive_0117                                                            t             where       RATED_UID=?     and RATER_UID=?     and suspended=0 and validscore=1      and rater_type=?     and trade_closingdate>=?     and trade_closingdate<?     and id<>?        and (IFNULL(IMPORT_FROM, 0)&8) = 0        #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484"; String assertSql = "select sum(rate) from feed_receive_0117 t where RATED_UID=? and RATER_UID=? and suspended=0 and validscore=1 and rater_type=? and trade_closingdate>=? and trade_closingdate<? and id<>? and (IFNULL(IMPORT_FROM, 0)&8) = 0 #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484"; String acutulSql = null; acutulSql = TStringUtil.fillTabWithSpace(sql); Assert."<AssertPlaceHolder>"; }
fillTabWithSpace(String str) { if (str == null) { return null; }  str = str.trim(); int sz = str.length(); StringBuilder buffer = new StringBuilder(sz);  int index = 0, index0 = -1, index1 = -1; for (int i = 0; i < sz; i++) { char c = str.charAt(i); if (!Character.isWhitespace(c)) { if (index0 != -1) {  if (index0 != index1 || str.charAt(i - 1) != ' ') { buffer.append(str.substring(index, index0)).append(" "); index = index1 + 1; } } index0 = index1 = -1; } else { if (index0 == -1) { index0 = index1 = i; } else { index1 = i; } } }  buffer.append(str.substring(index)); return buffer.toString(); }
[*] target: assertEquals(assertSql, acutulSql)
[-] pred: org. junit. Assert. assertEquals ( assertSql, acutulSql )
************************************
************************************
[+] input: testRandomTime() { Calendar calendar = new GregorianCalendar(); IntStream.range(0, 1 << 20) // we have 1/3 prob to get random invalid timestamp .mapToObj(i -> R.nextInt() % 3 == 0 ? generateRandomDatetime() : generateStandardDatetime()) .forEach( bs -> { Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); String errorMessage = "original = " + new String(bs) + ", t1 = " + t1.toString() + ", t2 = " + t2.toString(); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(errorMessage, !eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String( bs), Arrays.equals(t1.toString().getBytes(), bs)); } ); }
bytesToDatetime(byte[] timestampAsBytes, int sqlType, Calendar calendar, boolean allowModification, boolean allowInvalidity) {  MysqlDateTime mysqlDateTime = StringTimeParser.parseString(timestampAsBytes, sqlType); if (mysqlDateTime == null) { return null; } if (!allowModification) { return createOriginalTimestamp(mysqlDateTime); } else { int year = (int) mysqlDateTime.getYear(); int month = (int) mysqlDateTime.getMonth(); int day = (int) mysqlDateTime.getDay(); int hour = (int) mysqlDateTime.getHour(); int minute = (int) mysqlDateTime.getMinute(); int second = (int) mysqlDateTime.getSecond(); int secondPart = (int) mysqlDateTime.getSecondPart(); return createJavaTimestamp(calendar, year, month, day, hour, minute, second, secondPart); } }
[*] target: assertTrue(errorMessage, eq)
[-] pred: org. junit. Assert. assertTrue ( errorMessage, eq )
************************************
************************************
[+] input: testSingle() { String original = "0000-00-00 01:01:01"; Calendar calendar = new GregorianCalendar(); byte[] bs = original.getBytes(); Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(!eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String(bs), Arrays.equals(t1.toString().getBytes(), bs)); System.out.println(t2.toString()); }
bytesToDatetime(byte[] timestampAsBytes, int sqlType, Calendar calendar, boolean allowModification, boolean allowInvalidity) {  MysqlDateTime mysqlDateTime = StringTimeParser.parseString(timestampAsBytes, sqlType); if (mysqlDateTime == null) { return null; } if (!allowModification) { return createOriginalTimestamp(mysqlDateTime); } else { int year = (int) mysqlDateTime.getYear(); int month = (int) mysqlDateTime.getMonth(); int day = (int) mysqlDateTime.getDay(); int hour = (int) mysqlDateTime.getHour(); int minute = (int) mysqlDateTime.getMinute(); int second = (int) mysqlDateTime.getSecond(); int secondPart = (int) mysqlDateTime.getSecondPart(); return createJavaTimestamp(calendar, year, month, day, hour, minute, second, secondPart); } }
[*] target: assertTrue(eq)
[-] pred: org. junit. Assert. assertTrue ( eq )
************************************
************************************
[+] input: testDate() {  final DateType dataType = new DateType(TEST_SCALE); DateBlockBuilder dateBlockBuilder = new DateBlockBuilder(TEST_SIZE, dataType, new ExecutionContext());  // write List<String> values = IntStream.range(0, TEST_SIZE) .mapToObj( i -> RandomTimeGenerator.generateDatetimeString(1) ) .map( l -> R.nextInt() % 4 == 0 ? null : (String) l.get(0) ) .map(String.class::cast) .collect(Collectors.toList());  values.forEach(dateBlockBuilder::writeString); Block block = dateBlockBuilder.build();  // serialization & deserialization DateBlockEncoding encoding = new DateBlockEncoding(); SliceOutput sliceOutput = new DynamicSliceOutput(1 << 10); encoding.writeBlock(sliceOutput, block);  Slice slice = sliceOutput.slice(); Block block1 = encoding.readBlock(slice.getInput());  IntStream.range(0, TEST_SIZE) .forEach( i -> { boolean isEqual = block.equals(i, block1, i); "<AssertPlaceHolder>"; } ); }
equals(int position, Block other, int otherPosition) { position = realPositionOf(position); if (other instanceof DateBlock) { return equalsInner(position, other.cast(DateBlock.class), otherPosition); } else if (other instanceof DateBlockBuilder) { return equalsInner(position, (DateBlockBuilder) other, otherPosition); } else { throw new AssertionError(); } }
[*] target: assertTrue(isEqual)
[-] pred: org. junit. Assert. assertTrue ( isEqual )
************************************
************************************
[+] input: testTimestamp() {  final TimestampType dataType = new TimestampType(TEST_SCALE); TimestampBlockBuilder timestampBlockBuilder = new TimestampBlockBuilder(TEST_SIZE, dataType, new ExecutionContext());  // write List<String> values = IntStream.range(0, TEST_SIZE) .mapToObj( i -> RandomTimeGenerator.generateDatetimeString(1) ) .map( l -> R.nextInt() % 4 == 0 ? null : (String) l.get(0) ) .map(String.class::cast) .collect(Collectors.toList());  values.forEach(timestampBlockBuilder::writeString); Block block = timestampBlockBuilder.build();  // serialization & deserialization TimestampBlockEncoding encoding = new TimestampBlockEncoding(); SliceOutput sliceOutput = new DynamicSliceOutput(1 << 10); encoding.writeBlock(sliceOutput, block);  Slice slice = sliceOutput.slice(); Block block1 = encoding.readBlock(slice.getInput());  IntStream.range(0, TEST_SIZE) .forEach( i -> { boolean isEqual = block.equals(i, block1, i); Assert."<AssertPlaceHolder>"; } ); }
equals(int position, Block other, int otherPosition) { position = realPositionOf(position); if (other instanceof TimestampBlock) { return equalsInner(position, other.cast(TimestampBlock.class), otherPosition); } else if (other instanceof TimestampBlockBuilder) { return equalsInner(position, (TimestampBlockBuilder) other, otherPosition); } else { throw new AssertionError(); } }
[*] target: assertTrue(isEqual)
[-] pred: org. junit. Assert. assertTrue ( isEqual )
************************************
************************************
[+] input: testGetMdl() { /** * ddl */ final ExecutorService ddlPool = Executors.newFixedThreadPool(1); ddlPool.submit(() -> { while (true) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  final Long trxId = 9527L; // get lock final MdlTicket ticket = context.acquireLock(writeRequest(trxId, tableName));  // update schema version tableSchemaMap.put(tableName, tableSchemaMap.get(tableName) + 1);  try { TimeUnit.MILLISECONDS.sleep(2); } catch (InterruptedException e) { e.printStackTrace(); }  // release lock context.releaseLock(trxId, ticket);  // close connection mdlManager.removeContext(context);  if (Thread.interrupted()) { break; } } });  /** * dml */ final ExecutorService dmlPool = Executors.newFixedThreadPool(10);  final List<Future> dmlFutures = new ArrayList<>(); IntStream.range(0, 10).forEach(index -> {  final Future<?> future = dmlPool.submit(() -> { final Random r = new Random(LocalDateTime.now().getNano());  int connCount = 0; while (connCount++ < CONN_COUNT) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  int trxCount = 0; while (trxCount++ < TRX_COUNT) { final int stmtCountInTrx = Math.abs(r.nextInt()) % 10 + 1;  final Long trxId = 9527L + trxIdGenerator.getAndIncrement();  // begin transaction MdlTicket ticket = null; for (int i = 0; i < stmtCountInTrx; i++) { final MdlTicket newTicket = context.acquireLock(readRequest(trxId, tableName));  // grant ticket once for a table in a transaction if (null != ticket) { Assert."<AssertPlaceHolder>"; }  ticket = newTicket;  // get schema version final Long schemaVersion1 = tableSchemaMap.get(tableName);  // execute query try { TimeUnit.MILLISECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); }  // check schema version final Long schemaVersion2 = tableSchemaMap.get(tableName);  final long versionChange = schemaVersion2 - schemaVersion1; Assert.assertTrue(versionChange >= 0 && versionChange <= 1); }  // commit context.releaseLock(trxId, ticket);  Assert.assertFalse(ticket.isValidate()); }  // close connection final MdlContext mdlContext = mdlManager.removeContext(context); } });  dmlFutures.add(future); });  dmlFutures.forEach(future -> { try { future.get(); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } });  ddlPool.shutdown();  System.out.println(JSON.toJSONString(tableSchemaMap)); }
acquireLock(@NotNull final MdlRequest request, @NotNull final MdlContext context) { final boolean readLock = MdlManager.isReadLock(request.getType());  if (readLock) { return readLock(request, context); } else { return writeLock(request, context); } }
[*] target: assertEquals(ticket, newTicket)
[-] pred: org. junit. Assert. assertEquals ( ticket, newTicket )
************************************
************************************
[+] input: IOException { // [stripe 0] // Stripe: offset: 3 data: 6333874 rows: 240000 tail: 111 index: 4025 final int stripeId = 0; final int columnId = 2; final int[] rowGroupIds = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22};  final long rowsInStripe = orcTail.getStripes().get(stripeId).getNumberOfRows(); int groupsInStripe = (int) ((rowsInStripe + indexStride - 1) / indexStride);  BlockCacheManager<Block> blockCacheManager = prepareCache(stripeId, new int[] {columnId}, rowGroupIds);  CacheReader<Block> cacheReader = new CacheReaderImpl(stripeId, columnId, groupsInStripe);  if (!cacheReader.isInitialized()) { // Check the block-cache-manager what row-group of this column have been cached. Map<Integer, SeekableIterator<Block>> caches = blockCacheManager.getCachedRowGroups( FILE_PATH, stripeId, columnId, fromRowGroupIds(stripeId, rowGroupIds) ); cacheReader.initialize(caches); }  // Check cached row group bitmap. boolean[] bitmap = cacheReader.cachedRowGroupBitmap(); Assert.assertTrue( Arrays.equals(fromRowGroupIds(stripeId, rowGroupIds), bitmap));  // collect block locations in this group. List<BlockLocation> locationList = new ArrayList<>(); for (int groupId : rowGroupIds) { final int rowCountInGroup = getRowCount(orcTail.getStripes().get(stripeId), groupId); for (int startPosition = 0; startPosition < rowCountInGroup; startPosition += DEFAULT_CHUNK_LIMIT) { int positionCount = Math.min(DEFAULT_CHUNK_LIMIT, rowCountInGroup - startPosition); locationList.add(new BlockLocation(groupId, startPosition, positionCount)); } }  // Check block existence for (BlockLocation location : locationList) { Block cached = cacheReader.getCache(location.rowGroupId, location.startPosition); Assert."<AssertPlaceHolder>"; Assert.assertEquals(location.positionCount, cached.getPositionCount()); } }
getCache(int groupId, int position);
[*] target: assertNotNull(cached)
[-] pred: org. junit. Assert. assertNotNull ( cached )
************************************
************************************
[+] input: test() { // extract(year from col_date)  final int positionCount = context.getExecutorChunkLimit(); final int nullCount = 20; final int lowerBound = 0; // 1970-01-01 final int upperBound = 365 * 50; // days final SqlOperator operator = TddlOperatorTable.EXTRACT;  List<DataType<?>> inputTypes = ImmutableList.of(DataTypes.DateType);  RexNode root = REX_BUILDER.makeCall( TYPE_FACTORY.createSqlType(SqlTypeName.BIGINT), operator, ImmutableList.of( REX_BUILDER.makeLiteral("YEAR"), REX_BUILDER.makeInputRef(TYPE_FACTORY.createSqlType(SqlTypeName.DATE), 0) ));  InputRefTypeChecker inputRefTypeChecker = new InputRefTypeChecker(inputTypes); root = root.accept(inputRefTypeChecker);  Rex2VectorizedExpressionVisitor converter = new Rex2VectorizedExpressionVisitor(context, inputTypes.size());  VectorizedExpression expression = root.accept(converter);  MutableChunk preAllocatedChunk = MutableChunk.newBuilder(positionCount) .addEmptySlots(inputTypes) .addEmptySlots(converter.getOutputDataTypes()) .build();  // build input decimal block DateBlock inputBlock = generateDateBlock(positionCount, nullCount, lowerBound, upperBound); Chunk inputChunk = new Chunk(positionCount, inputBlock);  LongBlock outputBlock = (LongBlock) BlockUtils.createBlock(DataTypes.LongType, inputChunk.getPositionCount());  preAllocatedChunk.setSelection(null); preAllocatedChunk.setSelectionInUse(false); preAllocatedChunk.setSlotAt(inputBlock, 0); preAllocatedChunk.setSlotAt(outputBlock, expression.getOutputIndex()); preAllocatedChunk.setBatchSize(positionCount);  EvaluationContext evaluationContext = new EvaluationContext(preAllocatedChunk, context); expression.eval(evaluationContext);  for (int i = 0; i < inputChunk.getPositionCount(); i++) { Object actual = outputBlock.getObject(i); Object expected = inputBlock.isNull(i) ? null : ((OriginalDate) inputBlock.getDate(i)).getMysqlDateTime().getYear();  Assert."<AssertPlaceHolder>"; } }
eval(EvaluationContext ctx) { evalChildren(ctx); MutableChunk chunk = ctx.getPreAllocatedChunk(); int batchSize = chunk.batchSize(); boolean isSelectionInUse = chunk.isSelectionInUse(); int[] sel = chunk.selection();  // output block RandomAccessBlock outputVectorSlot = chunk.slotIn(outputIndex, outputDataType); long[] output = (outputVectorSlot.cast(LongBlock.class)).longArray();  // date block RandomAccessBlock inputVectorSlot = chunk.slotIn(children[1].getOutputIndex(), children[1].getOutputDataType());  // when the interval unit is null boolean[] outputNulls = outputVectorSlot.nulls(); if (isConstOperandNull) { outputVectorSlot.setHasNull(true); for (int i = 0; i < batchSize; i++) { outputNulls[i] = true; } return; }  // handle nulls VectorizedExpressionUtils.mergeNulls(chunk, outputIndex, children[1].getOutputIndex());  if (inputVectorSlot instanceof DateBlock) { long[] packedLongs = inputVectorSlot.cast(DateBlock.class).getPacked();  switch (intervalType) { case INTERVAL_YEAR: { // for year if (isSelectionInUse) { for (int i = 0; i < batchSize; i++) { int j = sel[i]; long l = packedLongs[j]; output[j] = (l >> 46) / 13; } } else { for (int i = 0; i < batchSize; i++) { long l = packedLongs[i]; output[i] = (l >> 46) / 13; } } } break; case INTERVAL_MONTH: { // for month if (isSelectionInUse) { for (int i = 0; i < batchSize; i++) { int j = sel[i]; long l = packedLongs[j]; output[j] = (l >> 46) % 13; } } else { for (int i = 0; i < batchSize; i++) { long l = packedLongs[i]; output[i] = (l >> 46) % 13; } } } break; case INTERVAL_DAY: { // for day final long modulo = 1L << 5; if (isSelectionInUse) { for (int i = 0; i < batchSize; i++) { int j = sel[i]; long l = packedLongs[j]; output[j] = (l >> 41) % modulo; } } else { for (int i = 0; i < batchSize; i++) { long l = packedLongs[i]; output[i] = (l >> 41) % modulo; } } } break; default: // for other interval type, use non-vectorized method. boolean isDate = MySQLIntervalType.isDate(intervalType);  // normal processing for datetime value. MysqlDateTime scratchValue = new MysqlDateTime(); for (int i = 0; i < batchSize; i++) { int j = isSelectionInUse ? sel[i] : i;  // parse date value long packedLong = packedLongs[j]; TimeStorage.readDate(packedLong, scratchValue);  // parse interval by sign and mysql datetime value. int sign = isDate ? 1 : (scratchValue.isNeg() ? -1 : 1); long result = doParseInterval(scratchValue, sign); output[j] = result; } } } else if (inputVectorSlot instanceof ReferenceBlock) { // for other interval type, use non-vectorized method. boolean isDate = MySQLIntervalType.isDate(intervalType);  // normal processing for datetime value. for (int i = 0; i < batchSize; i++) { int j = isSelectionInUse ? sel[i] : i;  // parse date value Object timeObj = inputVectorSlot.elementAt(j); MysqlDateTime t; int sign; if (isDate) { t = DataTypeUtil.toMySQLDatetimeByFlags(timeObj, Types.TIMESTAMP, TimeParserFlags.FLAG_TIME_FUZZY_DATE); if (t == null) { outputNulls[j] = true; continue; } sign = 1; } else { t = DataTypeUtil.toMySQLDatetime(timeObj, Types.TIME); if (t == null) { outputNulls[j] = true; continue; } sign = t.isNeg() ? -1 : 1; }  // parse interval by sign and mysql datetime value. long result = doParseInterval(t, sign); output[j] = result; } }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: fetchKeywordTest1() { String sql = "select * from `busu` where id = '1' and name = 'dingfeng' "; List<String> expectList = Lists .newArrayList("select", "*", "from", "`busu`", "where", "id", "=", "'1'", "and", "name", "=", "'dingfeng'"); List<String> actualList = SqlKeywordMatchUtils.fetchWords(sql); Assert."<AssertPlaceHolder>"; }
fetchWords(String sql) { if (StringUtils.isBlank(sql)) { return Collections.EMPTY_LIST; } List<String> words = Lists.newArrayList(); MyMySqlLexer lexer = new MyMySqlLexer(sql); do { lexer.nextToken(); String word = stringVal(lexer); if (StringUtils.isNotBlank(word)) { words.add(word); } } while (!lexer.isEOF()); return words; }
[*] target: assertEquals(expectList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectList, actualList )
************************************
************************************
[+] input: getCartShouldReturnCart() { Cart cart = shoppingCart.getCart();  "<AssertPlaceHolder>"; }
getCart() { Cart cart = new Cart(); cart.id = 1; for(Map.Entry<Product, Integer> entry : contents.entrySet()) { Product product = entry.getKey(); int quantity = entry.getValue(); CartItem cartItem = new CartItem(); cartItem.productId = product.id; cartItem.quantity = quantity; cart.subTotal += product.price * quantity; cart.basket.add(cartItem); } return cart; }
[*] target: assertNotNull(cart)
[-] pred: org. junit. Assert. assertNotNull ( cart )
************************************
************************************
[+] input: testPrintEnvironments() { BeneratorUtil.printEnvironments(); "<AssertPlaceHolder>"; }
printEnvironments() { ConsolePrinter.printStandard(formatEnvironmentList()); }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: testDatabaseAnnotation() { annotationMapper.parseClassAnnotations(ClassWithDatabase.class.getAnnotations(), context); DefaultDBSystem db = (DefaultDBSystem) context.get("db"); "<AssertPlaceHolder>"; assertEquals("hsqlmem", db.getEnvironment()); }
parseClassAnnotations(Annotation[] annotations, BeneratorContext context) { for (Annotation annotation : annotations) { if (annotation instanceof Database) { parseDatabase((Database) annotation, context); } else if (annotation instanceof Bean) { parseBean((Bean) annotation, context); } } }
[*] target: assertNotNull(db)
[-] pred: org. junit. Assert. assertNotNull ( db )
************************************
************************************
[+] input: SQLException { SystemRef system = createDbTestSystem(); Connection connection = EnvironmentUtil.connectDb(system); try { connection = EnvironmentUtil.connectDb(system); "<AssertPlaceHolder>"; } finally { connection.close(); HSQLUtil.shutdown(system.getProperty("url"), HSQLUtil.DEFAULT_USER, HSQLUtil.DEFAULT_PASSWORD); } }
connectDb(SystemRef system) throws ConnectFailedException { if (!system.isDb()) { throw ExceptionFactory.getInstance().configurationError("Not a database: " + system.getName() + " in environment " + system.getEnvironment().getName()); } Map<String, String> pp = system.getProperties(); String readOnlySpec = pp.get("readOnly"); boolean readOnly = (!StringUtil.isEmpty(readOnlySpec) && Boolean.parseBoolean(readOnlySpec)); return DBUtil.connect(pp.get("url"), pp.get("driver"), pp.get("user"), pp.get("password"), readOnly); }
[*] target: assertNotNull(connection)
[-] pred: org. junit. Assert. assertNotNull ( connection )
************************************
************************************
[+] input: testFormatSummary() { repository.addSample(NAME, 100); String summary = repository.formatSummary(); ConsolePrinter.printStandard(summary); String expectedSummary = "CounterRepositoryTest: 100 ms total, 1 inv, 100.0 ms/inv (avg.)" + SystemInfo.LF; "<AssertPlaceHolder>"; }
formatSummary() { DecimalFormat df = new DecimalFormat("0.0", DecimalFormatSymbols.getInstance(Locale.US)); List<String[]> list = new ArrayList<>(counters.size()); List<LatencyCounter> sortedCounters = new ArrayList<>(counters.values()); sortedCounters.sort((c1, c2) -> -Long .compare(c1.totalLatency(), c2.totalLatency())); for (LatencyCounter counter : sortedCounters) { list.add(new String[] { counter.getName() + ":", counter.totalLatency() + " ms total,", counter.sampleCount() + " inv,", df.format(counter.averageLatency()) + " ms/inv (avg.)" }); } return formatSummaryTable(list); }
[*] target: assertEquals(expectedSummary, summary)
[-] pred: org. junit. Assert. assertEquals ( expectedSummary, summary )
************************************
************************************
[+] input: test_DE() { StreetNameGenerator generator = new StreetNameGenerator("DE"); generator.init(context); for (int i = 0; i < 10; i++) { String product = generator.generate(); "<AssertPlaceHolder>"; } generator.close(); }
generate() { return GeneratorUtil.generateNonNull(this); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
************************************
[+] input: test_AU() { DatasetUtil.runInRegion(Country.AUSTRALIA.getIsoCode(), () -> { StreetNameGenerator generator = new StreetNameGenerator(); generator.init(context); for (int i = 0; i < 10; i++) { String product = generator.generate(); "<AssertPlaceHolder>"; } generator.close(); }); }
generate() { return GeneratorUtil.generateNonNull(this); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineBrokerClusterInfo()).thenReturn(MockObjectUtil.createClusterInfo()); } ClusterInfo clusterInfo = mqAdminExtImpl.examineBrokerClusterInfo(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(clusterInfo.getBrokerAddrTable().size(), 1); Assert.assertEquals(clusterInfo.getClusterAddrTable().size(), 1); }
examineBrokerClusterInfo() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException { return MQAdminInstance.threadLocalMQAdminExt().examineBrokerClusterInfo(); }
[*] target: assertNotNull(clusterInfo)
[-] pred: org. junit. Assert. assertNotNull ( clusterInfo )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineTopicRouteInfo(anyString())).thenReturn(MockObjectUtil.createTopicRouteData()); } TopicRouteData topicRouteData = mqAdminExtImpl.examineTopicRouteInfo("topic_test"); Assert."<AssertPlaceHolder>"; }
examineTopicRouteInfo(String topic) throws RemotingException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().examineTopicRouteInfo(topic); }
[*] target: assertNotNull(topicRouteData)
[-] pred: org. junit. Assert. assertNotNull ( topicRouteData )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineConsumerConnectionInfo(anyString())).thenReturn(new ConsumerConnection()); } ConsumerConnection consumerConnection = mqAdminExtImpl.examineConsumerConnectionInfo("group_test"); Assert."<AssertPlaceHolder>"; }
examineConsumerConnectionInfo(String consumerGroup) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException, RemotingException, MQClientException { return MQAdminInstance.threadLocalMQAdminExt().examineConsumerConnectionInfo(consumerGroup); }
[*] target: assertNotNull(consumerConnection)
[-] pred: org. junit. Assert. assertNotNull ( consumerConnection )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineProducerConnectionInfo(anyString(), anyString())).thenReturn(new ProducerConnection()); } ProducerConnection producerConnection = mqAdminExtImpl.examineProducerConnectionInfo("group_test", "topic_test"); Assert."<AssertPlaceHolder>"; }
examineProducerConnectionInfo(String producerGroup, String topic) throws RemotingException, MQClientException, InterruptedException, MQBrokerException { return MQAdminInstance.threadLocalMQAdminExt().examineProducerConnectionInfo(producerGroup, topic); }
[*] target: assertNotNull(producerConnection)
[-] pred: org. junit. Assert. assertNotNull ( producerConnection )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getConsumerRunningInfo(anyString(), anyString(), anyBoolean())).thenReturn(new ConsumerRunningInfo()); } ConsumerRunningInfo consumerRunningInfo = mqAdminExtImpl.getConsumerRunningInfo("group_test", "", true); Assert."<AssertPlaceHolder>"; }
getConsumerRunningInfo(String consumerGroup, String clientId, boolean jstack) throws RemotingException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().getConsumerRunningInfo(consumerGroup, clientId, jstack); }
[*] target: assertNotNull(consumerRunningInfo)
[-] pred: org. junit. Assert. assertNotNull ( consumerRunningInfo )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.queryMessage(anyString(), anyString(), anyInt(), anyLong(), anyLong())).thenReturn(mock(QueryResult.class)); } QueryResult result = mqAdminExtImpl.queryMessage("topic_test", "key", 32, 1627804565000L, System.currentTimeMillis()); Assert."<AssertPlaceHolder>"; }
queryMessage(String topic, String key, int maxNum, long begin, long end) throws MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().queryMessage(topic, key, maxNum, begin, end); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getBrokerConfig(anyString())).thenReturn(new Properties()); } Properties brokerConfig = mqAdminExtImpl.getBrokerConfig(brokerAddr); Assert."<AssertPlaceHolder>"; }
getBrokerConfig( String brokerAddr) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException { return MQAdminInstance.threadLocalMQAdminExt().getBrokerConfig(brokerAddr); }
[*] target: assertNotNull(brokerConfig)
[-] pred: org. junit. Assert. assertNotNull ( brokerConfig )
************************************
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.viewBrokerStatsData(anyString(), anyString(), anyString())).thenReturn(new BrokerStatsData()); } BrokerStatsData brokerStatsData = mqAdminExtImpl.viewBrokerStatsData(brokerAddr, BrokerStatsManager.TOPIC_PUT_NUMS, "topic_test"); Assert."<AssertPlaceHolder>"; }
viewBrokerStatsData(String brokerAddr, String statsName, String statsKey) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException { return MQAdminInstance.threadLocalMQAdminExt().viewBrokerStatsData(brokerAddr, statsName, statsKey); }
[*] target: assertNotNull(brokerStatsData)
[-] pred: org. junit. Assert. assertNotNull ( brokerStatsData )
************************************
************************************
[+] input: Exception { AtomicInteger num = new AtomicInteger(0); CollectExecutorConfig config = new CollectExecutorConfig(); config.setCoreSize(10); config.setMaxSize(10); config.setQueueSize(500); config.setKeepAliveTime(3000); ExecutorService collectExecutor = config.collectExecutor(config); Assert."<AssertPlaceHolder>"; CountDownLatch countDownLatch = new CountDownLatch(COUNT); for (int i = 0; i < COUNT; i++) { collectExecutor.submit(() -> { num.getAndIncrement(); countDownLatch.countDown(); }); } countDownLatch.await(); System.out.println(collectExecutor.isTerminated()); Assert.assertEquals(COUNT, num.get()); }
collectExecutor(CollectExecutorConfig collectExecutorConfig) { ExecutorService collectExecutor = new ThreadPoolExecutor( collectExecutorConfig.getCoreSize(), collectExecutorConfig.getMaxSize(), collectExecutorConfig.getKeepAliveTime(), TimeUnit.MILLISECONDS, new LinkedBlockingDeque<>(collectExecutorConfig.getQueueSize()), new ThreadFactory() { private final AtomicLong threadIndex = new AtomicLong(0);  @Override public Thread newThread(Runnable r) { return new Thread(r, "collectTopicThread_" + this.threadIndex.incrementAndGet()); } }, new ThreadPoolExecutor.DiscardOldestPolicy() ); return collectExecutor; }
[*] target: assertNotNull(collectExecutor)
[-] pred: org. junit. Assert. assertNotNull ( collectExecutor )
************************************
************************************
[+] input: testMatch() { boolean b = MatcherUtil.match("/topic/*.query", "/topic/route.query"); boolean b1 = MatcherUtil.match("/**/**.do", "/consumer/route.do"); boolean b2 = MatcherUtil.match("/*", "/topic/qqq/route.do"); Assert."<AssertPlaceHolder>"; Assert.assertTrue(b1); Assert.assertFalse(b2); }
match(String accessUrl, String reqPath) { String regPath = getRegPath(accessUrl); return Pattern.compile(regPath).matcher(reqPath).matches(); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: testCreateCatalog() { RocketMQCatalogFactory factory = new RocketMQCatalogFactory(); FactoryUtil.DefaultCatalogContext context = new FactoryUtil.DefaultCatalogContext( "rocketmq-catalog", new HashMap<>(), null, this.getClass().getClassLoader()); Catalog catalog = factory.createCatalog(context); "<AssertPlaceHolder>"; }
createCatalog(Context context) { final FactoryUtil.CatalogFactoryHelper helper = FactoryUtil.createCatalogFactoryHelper(this, context); helper.validate(); return new RocketMQCatalog( context.getName(), helper.getOptions().get(DEFAULT_DATABASE), helper.getOptions().get(NAME_SERVER_ADDR), helper.getOptions().get(SCHEMA_REGISTRY_BASE_URL)); }
[*] target: assertNotNull(catalog)
[-] pred: org. junit. Assert. assertNotNull ( catalog )
************************************
************************************
[+] input: testDatabaseExists() { boolean exists = rocketMQCatalog.databaseExists("default"); "<AssertPlaceHolder>"; }
databaseExists(String databaseName) throws CatalogException { return getDefaultDatabase().equals(databaseName); }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: testTableExists() { ObjectPath objectPath = new ObjectPath("default", "test"); boolean exists = rocketMQCatalog.tableExists(objectPath); "<AssertPlaceHolder>"; }
tableExists(ObjectPath tablePath) throws CatalogException { if (!getDefaultDatabase().equals(tablePath.getDatabaseName())) { throw new CatalogException("Database name is not default."); } if (StringUtils.isEmpty(tablePath.getObjectName())) { return false; } String subject = tablePath.getObjectName(); try { GetSchemaResponse getSchemaResponse = schemaRegistryClient.getSchemaBySubject(subject); if (Objects.nonNull(getSchemaResponse)) { return true; } } catch (Exception e) { throw new CatalogException( String.format( "Failed to get schema of table %s from schema registry client.", tablePath.getFullName()), e); } return false; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: broadcastAllocateStrategyTest() { AllocateStrategy allocateStrategy = new BroadcastAllocateStrategy(); Collection<RocketMQSourceSplit> mqAll = new ArrayList<>(); for (int i = 0; i < NUM_SPLITS; i++) { mqAll.add( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i])); } int parallelism = 3; Map<Integer, Set<RocketMQSourceSplit>> result = allocateStrategy.allocate(mqAll, parallelism); "<AssertPlaceHolder>"; for (int i = 0; i < parallelism; i++) { Set<RocketMQSourceSplit> splits = result.get(i); assertEquals(NUM_SPLITS, splits.size());  for (int j = 0; j < NUM_SPLITS; j++) { assertTrue( splits.contains( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i]))); } } }
allocate( final Collection<RocketMQSourceSplit> mqAll, final int parallelism) { Map<Integer, Set<RocketMQSourceSplit>> result = new HashMap<>(parallelism); for (int i = 0; i < parallelism; i++) { result.computeIfAbsent(i, k -> new HashSet<>()).addAll(mqAll); } return result; }
[*] target: assertEquals(parallelism, result.size())
[-] pred: org. junit. Assert. assertEquals ( parallelism, result. size ( ) )
************************************
************************************
[+] input: SQLException { String jsonString = TABLE_METADATA.getResponse(); Response response = new Response.Builder().code(HttpStatus.SC_OK). request(buildRequest()).protocol(Protocol.HTTP_1_1). message("Successful"). body(ResponseBody.create(jsonString, MediaType.parse("application/json"))).build(); doReturn(response).when(queryExecutor).getMetadata(); ResultSet resultSet = queryServiceMetadata.getColumns("", "", "ContactPointEmail__dlm", ""); while(resultSet.next()) { String columnName = resultSet.getString("COLUMN_NAME"); Assert."<AssertPlaceHolder>"; if (booleanColumns.contains(columnName)) { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.BOOLEAN); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.BOOLEAN.getName()); } else { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.VARCHAR); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.STRING.getName()); } } Assert.assertEquals(resultSet.getMetaData().getColumnCount(), 24); }
getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException { MetadataResponse metadataResponse = getMetadataResponse(); return createColumnResultSet(metadataResponse, tableNamePattern); }
[*] target: assertNotNull(columnName)
[-] pred: org. junit. Assert. assertNotNull ( columnName )
************************************
************************************
[+] input: testCleanupWithEmptyList() { List<IMenu> cleanList = MenuUtility.visibleNormalizedMenus(Collections.emptyList()); "<AssertPlaceHolder>"; }
visibleNormalizedMenus(List<IMenu> menus) { return normalizedMenus(menus, createVisibleFilter()); }
[*] target: assertTrue(cleanList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cleanList. isEmpty ( ) )
************************************
************************************
[+] input: testVetoExceptionHtmlMessageWithHtmlLabel() { TestFormWithMandatoryField form = new TestFormWithMandatoryField(); form.getStringField().setLabelHtmlEnabled(true); form.getStringField().setLabel(HTML.italic("String") + " " + HTML.bold("Field")); String htmlErrorMessage = "";  String expectedErrorMessage = HTML.fragment( HTML.div(TEXTS.get("FormEmptyMandatoryFieldsMessage")), HTML.ul(HTML.li(form.getMainBox().getFullyQualifiedLabel(IValidateContentDescriptor.LABEL_SEPARATOR) + IValidateContentDescriptor.LABEL_SEPARATOR + "String Field"))) .toHtml();  try { form.validateForm(); } catch (VetoException ve) { htmlErrorMessage = ve.getHtmlMessage().toHtml(); }  "<AssertPlaceHolder>"; }
validateForm() { if (!interceptCheckFields()) { VetoException veto = new VetoException("Validate " + getClass().getSimpleName()); veto.consume(); throw veto; } if (!getHandler().onCheckFields()) { VetoException veto = new VetoException("Validate " + getClass().getSimpleName()); veto.consume(); throw veto; }  // check all fields that might be invalid FormFieldErrorCollector collector = createFormFieldErrorCollector(); visit(collector, IFormField.class); collector.firstProblem() .ifPresent(firstProblem -> handleFormErrors(firstProblem, collector.messagesOfInvalidFields(), collector.messagesOfMandatoryFields()));  if (!interceptValidate()) { VetoException veto = new VetoException("Validate " + getClass().getSimpleName()); veto.consume(); throw veto; } if (!getHandler().onValidate()) { VetoException veto = new VetoException("Validate " + getClass().getSimpleName()); veto.consume(); throw veto; } }
[*] target: assertEquals(expectedErrorMessage, htmlErrorMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, htmlErrorMessage )
************************************
************************************
[+] input: testFormEventResetComplete() { final Boolean[] called = {false}; final AbstractForm form = new TestForm(false); form.addFormListener(e -> { if (e.getType() == FormEvent.TYPE_RESET_COMPLETE) { called[0] = true; } }); form.start(); assertFalse(called[0]); form.doReset(); "<AssertPlaceHolder>"; }
doReset() { setFormLoading(true); // reset values Consumer<IFormField> v = field -> { if (field instanceof IResettableFormField) { IResettableFormField f = (IResettableFormField) field; f.resetValue(); } }; try { visit(v, IFormField.class); // init again reinit(); // load again loadStateInternal(); } catch (RuntimeException | PlatformError e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo("form", getClass().getName()); } fireFormResetComplete(); }
[*] target: assertTrue(called[0])
[-] pred: org. junit. Assert. assertTrue ( called[0] )
************************************
************************************
[+] input: testInvalidSelectionViaButton() { m_group.selectButton(new AbstractRadioButton<Long>() { }); "<AssertPlaceHolder>"; }
getSelectedButton() { return getButtonFor(getSelectedKey()); }
[*] target: assertNull(m_group.getSelectedButton())
[-] pred: org. junit. Assert. assertNull ( m_group. getSelectedButton() )
************************************
************************************
[+] input: testWithLocalDate() { LocalDate startDate = LocalDate.of(2020, 3, 11); LocalDate endDate = LocalDate.of(2020, 3, 13); final String uid = "5edf8af0-5347-4331-ae0f-3b4980180b37"; ICalVCardHelper helper = BEANS.get(ICalVCardHelper.class); ICalBean cal = BEANS.get(ICalBuilder.class) .withProductIdentifier("IDENTIFIER") .withComponent(BEANS.get(ICalVEventBuilder.class) .withDescription("description") .withLocation("location") .withSummary("summary") .withScheduling(startDate, endDate) .withUid(uid)) .build(); String expectedContent = "BEGIN:VCALENDAR\r\n" + "VERSION:2.0\r\n" + "PRODID;CHARSET=utf-8:IDENTIFIER\r\n" + "BEGIN:VEVENT\r\n" + "DTSTAMP;CHARSET=utf-8:" + helper.createDateTime(s_mockDate) + "\r\n" + "DESCRIPTION;CHARSET=utf-8:description\r\n" + "LOCATION;CHARSET=utf-8:location\r\n" + "SUMMARY;CHARSET=utf-8:summary\r\n" + "DTSTART;CHARSET=utf-8:20200311\r\n" + "DTEND;CHARSET=utf-8:20200314\r\n" + "UID;CHARSET=utf-8:5edf8af0-5347-4331-ae0f-3b4980180b37\r\n" + "END:VEVENT\r\n" + "END:VCALENDAR\r\n"; String createdContent = new String(cal.toBytes(StandardCharsets.UTF_8.name()), StandardCharsets.UTF_8); "<AssertPlaceHolder>"; }
build() { buildComponents(); end(); return m_ical; }
[*] target: assertEquals(expectedContent, createdContent)
[-] pred: org. junit. Assert. assertEquals ( expectedContent, createdContent )
************************************
************************************
[+] input: testEnsureDeclaredNodes() { EntityFixtureDo testObj = BEANS.get(EntityFixtureDo.class); assertFalse(testObj.id().exists()); assertFalse(testObj.otherEntitiesList().exists()); assertFalse(testObj.otherEntities().exists()); assertFalse(testObj.otherEntitiesMap().exists());  EntityFixtureDo testObjEnsuredNodes = m_helper.ensureDeclaredNodes(testObj); "<AssertPlaceHolder>"; assertTrue(testObjEnsuredNodes.id().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesList().exists()); assertTrue(testObjEnsuredNodes.otherEntities().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesMap().exists()); }
ensureDeclaredNodes(E entity) { if (entity == null) { return null; } m_dataObjectInventory.get().getAttributesDescription(entity.getClass()) .values() .forEach(desc -> ensureNodeValue(entity, desc.getName(), desc.getType().getRawType(), null, false)); return entity; }
[*] target: assertEquals(testObj, testObjEnsuredNodes)
[-] pred: org. junit. Assert. assertEquals ( testObj, testObjEnsuredNodes )
************************************
************************************
[+] input: testLast() { assertEquals("baz", m_testDoList.last()); m_testDoList.remove("baz"); assertEquals("bar", m_testDoList.last()); m_testDoList.clear(); "<AssertPlaceHolder>"; }
last() { return size() == 0 ? null : get(get().size() - 1); }
[*] target: assertNull(m_testDoList.last())
[-] pred: org. junit. Assert. assertNull ( m_testDoList. last() )
************************************
************************************
[+] input: testCreateStringId_NullValue() { String str = null; FixtureStringId id = BEANS.get(IdFactory.class).createInternal(FixtureStringId.class, str); "<AssertPlaceHolder>"; }
createInternal(Class<ID> idClass, Object... values) { try { Method createMethod = lookupCreateMethod(idClass); return idClass.cast(createMethod.invoke(null, values)); } catch (Exception e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo("idClass", idClass.getName()) .withContextInfo("values", Arrays.toString(values)); } }
[*] target: assertNull(id)
[-] pred: org. junit. Assert. assertNull ( id )
************************************
************************************
[+] input: MalformedURLException { URL jarUrl = getClass().getResource("test repository/test.jar_"); URL scoutXml = new URL("jar:" + jarUrl.toExternalForm() + "!/" + JandexInventoryBuilder.SCOUT_XML_PATH); JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index = builder.scanModule(builder.findIndexUri(scoutXml)); "<AssertPlaceHolder>"; }
findIndexUri(URL scoutXmlUrl) { String s = scoutXmlUrl.toExternalForm(); try { return new URI(s.substring(0, s.length() - SCOUT_XML_PATH.length()) + JANDEX_INDEX_PATH); } catch (URISyntaxException ex) { throw new PlatformException("Cannot find index URI from '{}'", s, ex); } }
[*] target: assertNotNull(index)
[-] pred: org. junit. Assert. assertNotNull ( index )
************************************
************************************
[+] input: testScanFolder() { URL scoutXml = getClass().getResource("/" + JandexInventoryBuilder.SCOUT_XML_PATH); JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index = builder.scanModule(builder.findIndexUri(scoutXml)); "<AssertPlaceHolder>"; ClassInfo c = index.getClassByName(DotName.createSimple(FixtureJandexInventoryObject.class.getName())); assertNotNull(c); assertEquals(FixtureJandexInventoryObject.class.getSimpleName(), c.simpleName()); }
findIndexUri(URL scoutXmlUrl) { String s = scoutXmlUrl.toExternalForm(); try { return new URI(s.substring(0, s.length() - SCOUT_XML_PATH.length()) + JANDEX_INDEX_PATH); } catch (URISyntaxException ex) { throw new PlatformException("Cannot find index URI from '{}'", s, ex); } }
[*] target: assertNotNull(index)
[-] pred: org. junit. Assert. assertNotNull ( index )
************************************
************************************
[+] input: testCopy() { JobInput input = Jobs.newInput().withRunContext(RunContexts.empty()); input.withName("name");  JobInput copy = input.copy();  assertNotSame(input.getRunContext(), copy.getRunContext()); "<AssertPlaceHolder>"; }
getName() { return m_name; }
[*] target: assertEquals(input.getName(), copy.getName())
[-] pred: org. junit. Assert. assertEquals ( input. getName(), copy. getName() )
************************************
************************************
[+] input: test() { IFuture<Void> future1 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_A_job")); IFuture<Void> future2 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_B_job")); IFuture<Void> future3 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_C_job"));  Predicate<IFuture<?>> filter = new JobNameRegexFutureFilter(Pattern.compile(".*[AB].*")); assertTrue(filter.test(future1)); assertTrue(filter.test(future2)); "<AssertPlaceHolder>";  // cleanup Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), 10, TimeUnit.SECONDS); }
test(final IFuture<?> future) { if (future.getJobInput().getName() == null) { return false; } return m_regex.matcher(future.getJobInput().getName()).matches(); }
[*] target: assertFalse(filter.test(future3))
[-] pred: org. junit. Assert. assertFalse ( filter. test ( future3 ) )
************************************
************************************
[+] input: testSpacesAndHyphens() { List<String> input = Arrays.asList( "abc_PT", "abc-mno1", "ABC MNO2", "abC NOP", "ABCOP", "abcopp", "ABC PQR", "abc PT", "ABC-PT");  List<String> expectedResult = Arrays.asList( "abc-mno1", "ABC MNO2", "abC NOP", "ABC PQR", "abc PT", "ABC-PT", "abc_PT", "ABCOP", "abcopp");  List<String> actualResult = new ArrayList<>(input); Collections.sort(actualResult, m_collatorProvider.getInstance(new Locale("en")));  "<AssertPlaceHolder>"; }
getInstance(Locale locale) { // always return a cloned instance return (Collator) THREAD_LOCAL.get() .computeIfAbsent(locale, this::create) .clone(); }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
************************************
[+] input: testDogs() { List<String> input = Arrays.asList( "The dogs bark", "The dog barks", "The dog sleeps");  List<String> expectedResult = Arrays.asList( "The dog barks", "The dog sleeps", "The dogs bark");  List<String> actualResult = new ArrayList<>(input); Collections.sort(actualResult, m_collatorProvider.getInstance(new Locale("en")));  "<AssertPlaceHolder>"; }
getInstance(Locale locale) { // always return a cloned instance return (Collator) THREAD_LOCAL.get() .computeIfAbsent(locale, this::create) .clone(); }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
************************************
[+] input: testEncryptDecrypt() { char[] password = "insecure".toCharArray(); int keyLength = 128;  Crypter crypter = BEANS.get(Crypter.class).init(password, keyLength); String clearTextData = "lorem ipsum dolor"; String encryptedData = crypter.encrypt(clearTextData); String decryptedData = crypter.decrypt(encryptedData); "<AssertPlaceHolder>"; }
decrypt(String encryptedData) { return decrypt(encryptedData, false); }
[*] target: assertEquals(clearTextData, decryptedData)
[-] pred: org. junit. Assert. assertEquals ( clearTextData, decryptedData )
************************************
************************************
[+] input: testUrlSafeEncryptDecrypt() { char[] password = "insecure".toCharArray(); int keyLength = 128;  Crypter crypter = BEANS.get(Crypter.class).init(password, keyLength); String clearTextData = "lorem ipsum dolor"; String encryptedData = crypter.encryptUrlSafe(clearTextData); String decryptedData = crypter.decryptUrlSafe(encryptedData); "<AssertPlaceHolder>"; }
decryptUrlSafe(String encryptedData) { return decrypt(encryptedData, true); }
[*] target: assertEquals(clearTextData, decryptedData)
[-] pred: org. junit. Assert. assertEquals ( clearTextData, decryptedData )
************************************
************************************
[+] input: testHashPassword() { final byte[] salt = SecurityUtility.createRandomBytes(); final byte[] salt2 = SecurityUtility.createRandomBytes();  // test hash byte[] hash1 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash2 = SecurityUtility.hashPassword(PASSWORD, salt2); byte[] hash3 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash4 = SecurityUtility.hashPassword("other".toCharArray(), salt);  // ensure hashing was executed Assert.assertFalse(Arrays.equals(String.valueOf(PASSWORD).getBytes(ENCODING), hash1));  // ensure different salts matter Assert.assertFalse(Arrays.equals(hash1, hash2));  // ensure same input -> same output Assert.assertArrayEquals(hash1, hash3);  // ensure different input -> different output Assert.assertFalse(Arrays.equals(hash4, hash1));  // test invalid values boolean ok = false; try { SecurityUtility.hashPassword(null, salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok);  ok = false; try { SecurityUtility.hashPassword(PASSWORD, null); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword("".toCharArray(), salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword(PASSWORD, new byte[]{}); } catch (AssertionException e) { ok = true; } Assert."<AssertPlaceHolder>"; }
hashPassword(char[] password, byte[] salt) { return SECURITY_PROVIDER.get().createPasswordHash(password, salt); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: testEquals() { MultiStatus multiStatus = new MultiStatus(); multiStatus.add(m_warningStatus); multiStatus.add(m_infoStatus); MultiStatus multiStatus2 = new MultiStatus(); multiStatus2.add(m_infoStatus); multiStatus2.add(m_warningStatus); "<AssertPlaceHolder>"; assertEquals(new MultiStatus(), new MultiStatus()); assertNotEquals(multiStatus, m_warningStatus); assertNotEquals(multiStatus, new Status("aaa")); assertNotEquals(multiStatus, new MultiStatus()); }
add(IStatus status) { m_children.add(Assertions.assertNotNull(status)); }
[*] target: assertEquals(multiStatus, multiStatus2)
[-] pred: org. junit. Assert. assertEquals ( multiStatus, multiStatus2 )
************************************
************************************
[+] input: testMandatoryWithExistingTransactionAndError() { final RuntimeException exception = new RuntimeException("Expected JUnit exception"); ITransaction callingTransaction = mock(ITransaction.class);  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.MANDATORY)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (Exception e) { "<AssertPlaceHolder>";  assertSame(callingTransaction, actualTransaction.getValue()); verifyNoInteractions(m_transaction); verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, never()).release(); verify(callingTransaction, times(1)).addFailure(any(Exception.class)); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  m_transaction.registerMember(new TestTransactionMember(exception));  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  ITransactionMember m = new TestTransactionMember(exception);  m_transaction.registerMember(m);  final Holder<ITransaction> actualTransaction = new Holder<>(); CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } finally { m_transaction.unregisterMember(m); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: Exception { ITransaction callingTransaction = mock(ITransaction.class);  final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.REQUIRED)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(callingTransaction, actualTransaction.getValue());  verifyNoInteractions(m_transaction);  verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, times(1)).addFailure(any(Throwable.class)); } }
withTransactionScope(final TransactionScope transactionScope) { m_transactionScope = Assertions.assertNotNull(transactionScope, "transactionScope must not be null"); return this; }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
************************************
[+] input: testInstance() { String s = "test"; String res = Assertions.assertInstance(s, String.class); "<AssertPlaceHolder>"; }
assertEquals(final T value1, final Object value2) { return assertEquals(value1, value2, "expected value1 to be equals with value2 [value1={}, value2={}]", value1, value2); }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
************************************
[+] input: testType() { String s = "test"; String res = Assertions.assertType(s, String.class); "<AssertPlaceHolder>"; }
assertEquals(final T value1, final Object value2) { return assertEquals(value1, value2, "expected value1 to be equals with value2 [value1={}, value2={}]", value1, value2); }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
************************************
[+] input: testFilterClassIgnoringInjectFieldAnnotationExpectingNullValue() { Class<Replacement> filteredValue = ConfigurationUtility.filterClassIgnoringInjectFieldAnnotation(new Class[]{Replacement.class}, Replacement.class); "<AssertPlaceHolder>"; }
filterClassIgnoringInjectFieldAnnotation(Class[] classes, Class<T> filter) { for (Class c : classes) { if (filter.isAssignableFrom(c) && !Modifier.isAbstract(c.getModifiers()) && !isInjectFieldAnnotationPresent(c)) { return c; } } return null; }
[*] target: assertNull(filteredValue)
[-] pred: org. junit. Assert. assertNull ( filteredValue )
************************************
************************************
[+] input: Exception { String data = "0123äöü"; String expected = data.substring(0, 6); String actual = IOUtility.readString(newInputStream(data.getBytes("UTF-8")), "UTF-8", 6); "<AssertPlaceHolder>"; }
readString(InputStream in, String charset, int len) { if (StringUtility.hasText(charset)) { try { return readString(new InputStreamReader(in, charset), len); } catch (UnsupportedEncodingException e) { throw new PlatformException("charset {}", charset, e); } } else { return readString(new InputStreamReader(in), len); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testReadString() { String expected = "0123"; String actual = IOUtility.readString(newReader(expected)); "<AssertPlaceHolder>"; }
readString(Reader in) { return readString(in, -1); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { String expected = "0123äöü"; ByteArrayOutputStream out = new ByteArrayOutputStream(); IOUtility.writeString(out, "UTF-8", expected); String actual = new String(out.toByteArray(), "UTF-8"); "<AssertPlaceHolder>"; }
writeString(OutputStream out, String charset, String s) { try (OutputStreamWriter w = new OutputStreamWriter(out, charset)) { w.write(s); w.flush(); } catch (IOException e) { throw new ProcessingException("output: " + out, e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testWriteString() { String expected = "0123"; StringWriter out = new StringWriter(); IOUtility.writeString(out, expected); String actual = out.toString(); "<AssertPlaceHolder>"; }
writeString(Writer out, String s) { try { out.write(s); } catch (IOException e) { throw new ProcessingException("output: " + out, e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDecompress_umlauts() { String original = CHARACTERS.repeat(100000); String decompressed = StringUtility.decompress(StringUtility.compress(original));  "<AssertPlaceHolder>"; }
compress(String s) { ByteArrayOutputStream buffer = new ByteArrayOutputStream(); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(buffer, deflater); // writes the compressed data into the stream buffer StringReader in = null; try { in = new StringReader(s);  char[] c = new char[102400]; int len; while ((len = in.read(c)) > 0) { String str = new String(c, 0, len); byte[] b = str.getBytes(StandardCharsets.UTF_8); deflaterOutputStream.write(b, 0, b.length); } } catch (IOException e) { // NOOP } finally { try { deflaterOutputStream.flush(); } catch (IOException e) { } try { buffer.flush(); } catch (IOException e) { } deflater.finish(); try { deflaterOutputStream.finish(); } catch (IOException e) { } deflater.end(); try { deflaterOutputStream.close(); } catch (IOException e) { } try { buffer.close(); } catch (IOException e) { } if (in != null) { in.close(); } }  return buffer.toByteArray(); }
[*] target: assertEquals(original, decompressed)
[-] pred: org. junit. Assert. assertEquals ( original, decompressed )
************************************
************************************
[+] input: XMLStreamException { XMLInputFactory factory = XmlUtility.newXMLInputFactory(); Assert."<AssertPlaceHolder>";  XMLEventReader reader = factory.createXMLEventReader(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); StringBuilder b = new StringBuilder(); while (reader.hasNext()) { XMLEvent event = reader.nextEvent(); b.append(event.getEventType()); } assertEquals("711228", b.toString()); }
newXMLInputFactory() { XMLInputFactory factory = XMLInputFactory.newInstance(); try { factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current XMLInputFactory: {}", XMLInputFactory.SUPPORT_DTD, factory.getClass().getName(), e); } try { factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current XMLInputFactory: {}", XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, factory.getClass().getName(), e); } return factory; }
[*] target: assertNotNull(factory)
[-] pred: org. junit. Assert. assertNotNull ( factory )
************************************
************************************
[+] input: TransformerException { Transformer transformer = XmlUtility.newTransformer(); Assert."<AssertPlaceHolder>";  StreamSource s = new StreamSource(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamResult r = new StreamResult(out); transformer.transform(s, r); assertEquals(SIMPLE_XML, new String(out.toByteArray(), StandardCharsets.UTF_8)); }
newTransformer() throws TransformerConfigurationException { TransformerFactory tf = TransformerFactory.newInstance(); try { tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (TransformerConfigurationException e) { LOG.debug("Feature '{}' is not supported in the current TransformerFactory: {}", XMLConstants.FEATURE_SECURE_PROCESSING, tf.getClass().getName(), e); } try { tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); } catch (IllegalArgumentException e) { // some factories (e.g. xalan) throw this exception if they do not support this attribute LOG.debug("Attribute '{}' is not supported in the current TransformerFactory: {}", XMLConstants.ACCESS_EXTERNAL_DTD, tf.getClass().getName(), e); } try { // some factories (e.g. xalan) throw this exception if they do not support this attribute tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); } catch (IllegalArgumentException e) { LOG.debug("Attribute '{}' is not supported in the current TransformerFactory: {}", XMLConstants.ACCESS_EXTERNAL_DTD, tf.getClass().getName(), e); } return tf.newTransformer(); }
[*] target: assertNotNull(transformer)
[-] pred: org. junit. Assert. assertNotNull ( transformer )
************************************
************************************
[+] input: testGetChildElementsEmptyDocument() { Element root = XmlUtility.getXmlDocument(EMPTY_XML).getDocumentElement(); List<Element> children = XmlUtility.getChildElements(root, "element"); "<AssertPlaceHolder>"; }
getChildElements(Element parent, String tagName) { final NodeList children = parent.getChildNodes(); List<Element> result = new ArrayList<>(children.getLength()); for (int i = 0; i < children.getLength(); i++) { Node n = children.item(i); if (n.getNodeType() == Node.ELEMENT_NODE && (tagName == null || tagName.equals(n.getNodeName()))) { result.add((Element) n); } } return result; }
[*] target: assertEquals(0, children.size())
[-] pred: org. junit. Assert. assertEquals ( 0, children. size ( ) )
************************************
************************************
[+] input: testClear() { assertTrue(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); assertTrue(c.addOrdered(m_ordered10)); assertTrue(c.addOrdered(m_ordered20)); assertTrue(c.addOrdered(m_ordered30)); assertFalse(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); c.clear(); "<AssertPlaceHolder>"; }
isEmpty() { return m_orderedObjects.isEmpty(); }
[*] target: assertTrue(c.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( c. isEmpty() )
************************************
************************************
[+] input: testWithExceptionInRemove() { GroupedSynchronizer<String, String> lck = new GroupedSynchronizer<>(); RuntimeException expectedException = new RuntimeException(); String key = "key"; lck.runInGroupLock(key, () -> { }, Function.identity());  assertEquals(1, lck.size()); assertNull(lck.remove("nonExisting")); assertEquals(0, lck.numLockedRootLocks());  try { lck.remove("key", obj -> { assertEquals(1, lck.numLockedRootLocks()); throw expectedException; }); } catch (RuntimeException e) { assertSame(expectedException, e); }  // lock is available again: assertEquals(0, lck.numLockedRootLocks()); "<AssertPlaceHolder>"; // remove is done (event there was an exception) }
size() { return m_locks.size(); }
[*] target: assertEquals(0, lck.size())
[-] pred: org. junit. Assert. assertEquals ( 0, lck. size() )
************************************
************************************
[+] input: Exception { IScoutTestParameter testParameter = new ParameterizedTestClassParameter("p");  Object createdTestInstance = ParameterizedTestRunnerExtension.createTest(m_testClass, testParameter); "<AssertPlaceHolder>"; assertEquals(SampleParameterizedTestClass.class, createdTestInstance.getClass()); assertEquals(testParameter, ((SampleParameterizedTestClass) createdTestInstance).getTestParameter()); }
createTest(TestClass testClass, IScoutTestParameter testParameter) throws Exception { try { return testClass.getOnlyConstructor().newInstance(testParameter); } catch (Exception ex) { String parameterName = (testParameter != null ? testParameter.getName() : null); throw new Exception("Constructor can not be invoked with the parameter '" + parameterName + "')", ex); } }
[*] target: assertNotNull(createdTestInstance)
[-] pred: org. junit. Assert. assertNotNull ( createdTestInstance )
************************************
************************************
[+] input: testCreateHttpClientInfo() { Map<String, HttpClientInfo> testMap = initTestMap(); for (String userAgent : testMap.keySet()) { HttpClientInfo createdHttpClientInfo = newHttpClientInfo(userAgent); HttpClientInfo expectedHttpClientInfo = testMap.get(userAgent);  //Ignore versions if not explicitly set if (expectedHttpClientInfo.getEngineVersion() == null) { createdHttpClientInfo.setEngineVersion(null); } if (expectedHttpClientInfo.getSystemVersion() == null) { createdHttpClientInfo.setSystemVersion(null); }  "<AssertPlaceHolder>"; } }
setSystemVersion(Version systemVersion) { m_systemVersion = systemVersion; }
[*] target: assertEquals(expectedHttpClientInfo, createdHttpClientInfo)
[-] pred: org. junit. Assert. assertEquals ( expectedHttpClientInfo, createdHttpClientInfo )
************************************
************************************
[+] input: testParsingCustomAgent() { UserAgent testUserAgent = UserAgents .create() .withUiLayer(UiLayer.HTML) .withUiDeviceType(UiDeviceType.MOBILE) .withUiEngineType(UiEngineType.ANDROID) .withUiSystem(UiSystem.ANDROID) .withDeviceId("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30") .build(); DefaultUserAgentParser parser = new DefaultUserAgentParser(); String id = testUserAgent.createIdentifier(parser);  UserAgent parsedAgent = UserAgents.createByIdentifier(parser, id); "<AssertPlaceHolder>"; }
createIdentifier(UserAgent userAgent) { String uiDeviceId = userAgent.getUiDeviceId(); if (uiDeviceId.contains(DELIMITER)) { uiDeviceId = uiDeviceId.replaceAll("\" + DELIMITER, "_"); LOG.warn("Character which is used as delimiter has been found in uiDeviceId. Replaced with '_'. Old uiDeviceId: {}. New uiDeviceId: {}", userAgent.getUiDeviceId(), uiDeviceId); } return StringUtility.concatenateTokens( userAgent.getUiLayer().getIdentifier(), DELIMITER, userAgent.getUiDeviceType().getIdentifier(), DELIMITER, userAgent.getUiEngineType().getIdentifier(), DELIMITER, userAgent.getUiSystem().getIdentifier(), DELIMITER, uiDeviceId); }
[*] target: assertEquals(testUserAgent, parsedAgent)
[-] pred: org. junit. Assert. assertEquals ( testUserAgent, parsedAgent )
************************************
************************************
[+] input: testCheckAndSet_EnableCaching_IfNoneMatch_false() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn("W/"FooBar"");//non-matching E-Tag Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModifiedNow() .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.ETAG, obj.createETag()); Mockito.verify(resp, ONCE).setDateHeader(HttpCacheControl.LAST_MODIFIED, obj.getResource().getLastModified()); }
checkAndSetCacheHeaders(HttpServletRequest req, HttpServletResponse resp, HttpCacheObject obj) { if (!UrlHints.isCacheHint(req)) { disableCaching(req, resp); return false; }  if (obj == null || !obj.isCachingAllowed()) { disableCaching(req, resp); return false; }  int maxAge = obj.getCacheMaxAge(); if (maxAge > 0) { // "private" //   Only browsers may cache this resource. // "max-age" //   A cache may use this resource for X seconds without checking with the server. s-maxage //   is basically the same, but for proxies (s = shared). This overrides any default value //   the proxy may use internally. // Note: Because "must-revalidate" is not present, a cache MAY use a stale resource longer than max-age. resp.setHeader(CACHE_CONTROL, "private, max-age=" + maxAge + ", s-maxage=" + maxAge); } else { // "private" //   Only browsers may cache this resource. // "must-revalidate" //   A cache HAS TO check with the server before using stale resources. // "max-age=0" //   A resource will become stale immediately (after 0 seconds). // Note: "max-age=0, must-revalidate" would be the same as "no-cache" resp.setHeader(CACHE_CONTROL, "private, max-age=0, must-revalidate"); }  String etag = obj.createETag(); String ifNoneMatch = req.getHeader(IF_NONE_MATCH); boolean clientSentEtag = (ifNoneMatch != null);  // Check If-None-Match (Etag) if (clientSentEtag) { if (notModified(ifNoneMatch, etag)) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-None-Match/Etag): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } // When the Etag comparison fails (i.e. file was modified), we must _not_ check for If-Modified-Since! } // Check If-Modified-Since else { long ifModifiedSince = req.getDateHeader(IF_MODIFIED_SINCE); if (notModifiedSince(ifModifiedSince, obj.getResource().getLastModified())) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-Modified-Since): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } }  if (obj.getResource().getLastModified() > 0) { resp.setDateHeader(LAST_MODIFIED, obj.getResource().getLastModified()); } if (etag != null) { resp.setHeader(ETAG, etag); }  return false; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: testCheckAndSet_EnableCaching_IfNoneMatch_true() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn("W/"FooBar", W/"13-535168142"");//matching E-Tag Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModifiedNow() .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
checkAndSetCacheHeaders(HttpServletRequest req, HttpServletResponse resp, HttpCacheObject obj) { if (!UrlHints.isCacheHint(req)) { disableCaching(req, resp); return false; }  if (obj == null || !obj.isCachingAllowed()) { disableCaching(req, resp); return false; }  int maxAge = obj.getCacheMaxAge(); if (maxAge > 0) { // "private" //   Only browsers may cache this resource. // "max-age" //   A cache may use this resource for X seconds without checking with the server. s-maxage //   is basically the same, but for proxies (s = shared). This overrides any default value //   the proxy may use internally. // Note: Because "must-revalidate" is not present, a cache MAY use a stale resource longer than max-age. resp.setHeader(CACHE_CONTROL, "private, max-age=" + maxAge + ", s-maxage=" + maxAge); } else { // "private" //   Only browsers may cache this resource. // "must-revalidate" //   A cache HAS TO check with the server before using stale resources. // "max-age=0" //   A resource will become stale immediately (after 0 seconds). // Note: "max-age=0, must-revalidate" would be the same as "no-cache" resp.setHeader(CACHE_CONTROL, "private, max-age=0, must-revalidate"); }  String etag = obj.createETag(); String ifNoneMatch = req.getHeader(IF_NONE_MATCH); boolean clientSentEtag = (ifNoneMatch != null);  // Check If-None-Match (Etag) if (clientSentEtag) { if (notModified(ifNoneMatch, etag)) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-None-Match/Etag): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } // When the Etag comparison fails (i.e. file was modified), we must _not_ check for If-Modified-Since! } // Check If-Modified-Since else { long ifModifiedSince = req.getDateHeader(IF_MODIFIED_SINCE); if (notModifiedSince(ifModifiedSince, obj.getResource().getLastModified())) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-Modified-Since): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } }  if (obj.getResource().getLastModified() > 0) { resp.setDateHeader(LAST_MODIFIED, obj.getResource().getLastModified()); } if (etag != null) { resp.setHeader(ETAG, etag); }  return false; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: testCheckAndSet_EnableCaching_IfModifiedSince_NotModifiedAtFidelity() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(1000000L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModified(1000000L + HttpCacheControl.IF_MODIFIED_SINCE_FIDELITY) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
checkAndSetCacheHeaders(HttpServletRequest req, HttpServletResponse resp, HttpCacheObject obj) { if (!UrlHints.isCacheHint(req)) { disableCaching(req, resp); return false; }  if (obj == null || !obj.isCachingAllowed()) { disableCaching(req, resp); return false; }  int maxAge = obj.getCacheMaxAge(); if (maxAge > 0) { // "private" //   Only browsers may cache this resource. // "max-age" //   A cache may use this resource for X seconds without checking with the server. s-maxage //   is basically the same, but for proxies (s = shared). This overrides any default value //   the proxy may use internally. // Note: Because "must-revalidate" is not present, a cache MAY use a stale resource longer than max-age. resp.setHeader(CACHE_CONTROL, "private, max-age=" + maxAge + ", s-maxage=" + maxAge); } else { // "private" //   Only browsers may cache this resource. // "must-revalidate" //   A cache HAS TO check with the server before using stale resources. // "max-age=0" //   A resource will become stale immediately (after 0 seconds). // Note: "max-age=0, must-revalidate" would be the same as "no-cache" resp.setHeader(CACHE_CONTROL, "private, max-age=0, must-revalidate"); }  String etag = obj.createETag(); String ifNoneMatch = req.getHeader(IF_NONE_MATCH); boolean clientSentEtag = (ifNoneMatch != null);  // Check If-None-Match (Etag) if (clientSentEtag) { if (notModified(ifNoneMatch, etag)) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-None-Match/Etag): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } // When the Etag comparison fails (i.e. file was modified), we must _not_ check for If-Modified-Since! } // Check If-Modified-Since else { long ifModifiedSince = req.getDateHeader(IF_MODIFIED_SINCE); if (notModifiedSince(ifModifiedSince, obj.getResource().getLastModified())) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-Modified-Since): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } }  if (obj.getResource().getLastModified() > 0) { resp.setDateHeader(LAST_MODIFIED, obj.getResource().getLastModified()); } if (etag != null) { resp.setHeader(ETAG, etag); }  return false; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: testCheckAndSet_EnableCaching_IfModifiedSince_NotModified() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(1000000L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModified(900000L) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
checkAndSetCacheHeaders(HttpServletRequest req, HttpServletResponse resp, HttpCacheObject obj) { if (!UrlHints.isCacheHint(req)) { disableCaching(req, resp); return false; }  if (obj == null || !obj.isCachingAllowed()) { disableCaching(req, resp); return false; }  int maxAge = obj.getCacheMaxAge(); if (maxAge > 0) { // "private" //   Only browsers may cache this resource. // "max-age" //   A cache may use this resource for X seconds without checking with the server. s-maxage //   is basically the same, but for proxies (s = shared). This overrides any default value //   the proxy may use internally. // Note: Because "must-revalidate" is not present, a cache MAY use a stale resource longer than max-age. resp.setHeader(CACHE_CONTROL, "private, max-age=" + maxAge + ", s-maxage=" + maxAge); } else { // "private" //   Only browsers may cache this resource. // "must-revalidate" //   A cache HAS TO check with the server before using stale resources. // "max-age=0" //   A resource will become stale immediately (after 0 seconds). // Note: "max-age=0, must-revalidate" would be the same as "no-cache" resp.setHeader(CACHE_CONTROL, "private, max-age=0, must-revalidate"); }  String etag = obj.createETag(); String ifNoneMatch = req.getHeader(IF_NONE_MATCH); boolean clientSentEtag = (ifNoneMatch != null);  // Check If-None-Match (Etag) if (clientSentEtag) { if (notModified(ifNoneMatch, etag)) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-None-Match/Etag): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } // When the Etag comparison fails (i.e. file was modified), we must _not_ check for If-Modified-Since! } // Check If-Modified-Since else { long ifModifiedSince = req.getDateHeader(IF_MODIFIED_SINCE); if (notModifiedSince(ifModifiedSince, obj.getResource().getLastModified())) { if (LOG.isDebugEnabled()) { LOG.debug("Use http cached object (If-Modified-Since): {}", req.getPathInfo()); } resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); return true; } }  if (obj.getResource().getLastModified() > 0) { resp.setDateHeader(LAST_MODIFIED, obj.getResource().getLastModified()); } if (etag != null) { resp.setHeader(ETAG, etag); }  return false; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: Exception { BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes("UTF-8")) .withCachingAllowed(true) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = rc.put(obj); Assert."<AssertPlaceHolder>"; }
put(HttpCacheObject obj) { if (!obj.isCachingAllowed()) { return false; } m_cache.put(obj.getCacheKey(), obj); LOG.debug("Stored object in cache: {}", obj.getCacheKey()); return true; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: Exception { String expected = StringUtility.trim(readFile("json/DefaultValuesFilterServiceTest_defaults_override_expected.json")); String actual = BEANS.get(DefaultValuesFilterService.class).getCombinedDefaultValuesConfiguration(); "<AssertPlaceHolder>"; }
getCombinedDefaultValuesConfiguration() { ensureLoaded(); return m_combinedDefaultValuesConfiguration; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testFindByLastName() { List<Student> expectedList = entities() .map(repository::save) .filter(student -> student.getLastName().equals("Stark")) .collect(Collectors.toList());  List<Student> actualList = repository.findByLastName("Stark");  Assert."<AssertPlaceHolder>"; }
findByLastName(@Param("lName") String lastName);
[*] target: assertEquals(expectedList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectedList, actualList )
************************************
************************************
[+] input: testFindByLastNameIgnoreCase() { List<Student> expectedList = entities() .map(repository::save) .filter(student -> student.getLastName().equalsIgnoreCase("Stark")) .collect(Collectors.toList());  List<Student> actualList = repository.findByLastNameIgnoreCase("Stark"); Assert."<AssertPlaceHolder>"; }
findByLastNameIgnoreCase(@Param("lName") String lastName);
[*] target: assertEquals(expectedList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectedList, actualList )
************************************
************************************
[+] input: testSchedule() { Mockito.when(nodeClient.threadPool()).thenReturn(threadPool);  Mockito.doAnswer( invocation -> { Runnable task = invocation.getArgument(0); task.run(); return null; }) .when(threadPool) .schedule(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any()); AtomicBoolean isRun = new AtomicBoolean(false); Scheduler.schedule(nodeClient, () -> isRun.set(true)); Assert."<AssertPlaceHolder>"; }
schedule(NodeClient client, Runnable task) { ThreadPool threadPool = client.threadPool(); threadPool.schedule(withCurrentContext(task), new TimeValue(0), SQL_WORKER_THREAD_POOL_NAME); }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
************************************
[+] input: testFailureDueToInconsistency() { DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherDbResult);  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherDbResult), "")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
verify(TestQuerySet querySet) { TestReport report = new TestReport(); for (String sql : querySet) { try { DBResult openSearchResult = thisConnection.select(sql); report.addTestCase(compareWithOtherDb(sql, openSearchResult)); } catch (Exception e) { report.addTestCase( new ErrorTestCase( nextId(), sql, StringUtils.format("%s: %s", e.getClass().getSimpleName(), extractRootCause(e)))); } } return report; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testSuccessFinally() { DBConnection anotherDbConnection = mock(DBConnection.class); when(anotherDbConnection.getDatabaseName()).thenReturn("Another"); correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, anotherDbConnection});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); DBResult anotherDbResult = new DBResult( "Another DB", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(anotherDbConnection.select(anyString())).thenReturn(anotherDbResult);  TestReport expected = new TestReport(); expected.addTestCase(new SuccessTestCase(1, "SELECT * FROM accounts")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
verify(TestQuerySet querySet) { TestReport report = new TestReport(); for (String sql : querySet) { try { DBResult openSearchResult = thisConnection.select(sql); report.addTestCase(compareWithOtherDb(sql, openSearchResult)); } catch (Exception e) { report.addTestCase( new ErrorTestCase( nextId(), sql, StringUtils.format("%s: %s", e.getClass().getSimpleName(), extractRootCause(e)))); } } return report; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testFailureDueToEventualInconsistency() { DBConnection anotherDbConnection = mock(DBConnection.class); when(anotherDbConnection.getDatabaseName()) .thenReturn("ZZZ DB"); // Make sure this will be called after Other DB correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, anotherDbConnection});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); DBResult anotherDbResult = new DBResult( "ZZZ DB", asList(new Type("firstname", "text")), asList(new Row(asList("Hank")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherDbResult); when(anotherDbConnection.select(anyString())).thenReturn(anotherDbResult);  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherDbResult, anotherDbResult), "")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
verify(TestQuerySet querySet) { TestReport report = new TestReport(); for (String sql : querySet) { try { DBResult openSearchResult = thisConnection.select(sql); report.addTestCase(compareWithOtherDb(sql, openSearchResult)); } catch (Exception e) { report.addTestCase( new ErrorTestCase( nextId(), sql, StringUtils.format("%s: %s", e.getClass().getSimpleName(), extractRootCause(e)))); } } return report; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testFailureDueToInconsistencyAndExceptionMixed() { DBConnection otherDBConnection2 = mock(DBConnection.class); when(otherDBConnection2.getDatabaseName()).thenReturn("ZZZ DB"); correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, otherDBConnection2});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherResult = new DBResult("Other", asList(new Type("firstname", "text")), Collections.emptyList());  when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherResult); when(otherDBConnection2.select(anyString())) .thenThrow(new RuntimeException("Unsupported feature"));  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherResult), "Unsupported feature;")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
verify(TestQuerySet querySet) { TestReport report = new TestReport(); for (String sql : querySet) { try { DBResult openSearchResult = thisConnection.select(sql); report.addTestCase(compareWithOtherDb(sql, openSearchResult)); } catch (Exception e) { report.addTestCase( new ErrorTestCase( nextId(), sql, StringUtils.format("%s: %s", e.getClass().getSimpleName(), extractRootCause(e)))); } } return report; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: dbResultWithSameRowsInDifferentOrderShouldEqual() { DBResult result1 = DBResult.result("DB 1"); result1.addColumn("name", "VARCHAR"); result1.addRow(new Row(ImmutableList.of("test-1"))); result1.addRow(new Row(ImmutableList.of("test-2")));  DBResult result2 = DBResult.result("DB 2"); result2.addColumn("name", "VARCHAR"); result2.addRow(new Row(ImmutableList.of("test-2"))); result2.addRow(new Row(ImmutableList.of("test-1")));  "<AssertPlaceHolder>"; }
addRow(Row row) { dataRows.add(row); }
[*] target: assertEquals(result1, result2)
[-] pred: org. junit. Assert. assertEquals ( result1, result2 )
************************************
************************************
[+] input: rowShouldEqualToOtherRowWithSimilarFloat() { Row row1 = new Row(); Row row2 = new Row(); row1.add(1.000001); row2.add(1.000002); "<AssertPlaceHolder>"; assertEquals(row2, row1); }
add(Object value) { values.add(roundFloatNum(value)); }
[*] target: assertEquals(row1, row2)
[-] pred: org. junit. Assert. assertEquals ( row1, row2 )
************************************
************************************
[+] input: getMappingForExistingField() { IndexMappings indexMappings = LocalClusterState.state().getFieldMappings(new String[] {INDEX_NAME}); Assert."<AssertPlaceHolder>";  FieldMappings fieldMappings = indexMappings.mapping(INDEX_NAME); Assert.assertNotNull(fieldMappings);  Assert.assertEquals("text", fieldMappings.mapping("address").get("type")); Assert.assertEquals("integer", fieldMappings.mapping("age").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("city").get("type")); Assert.assertEquals("text", fieldMappings.mapping("employer").get("type"));  Assert.assertEquals("text", fieldMappings.mapping("manager.name").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("manager.address").get("type")); }
getFieldMappings(String[] indices) { Objects.requireNonNull(client, "Client is null");  try {  Map<String, MappingMetadata> mappingMetadata = client .admin() .indices() .prepareGetMappings(indices) .setLocal(true) .setIndicesOptions(IndicesOptions.strictExpandOpen()) .execute() .actionGet(0, TimeUnit.NANOSECONDS) .mappings();  IndexMappings mappings = new IndexMappings(mappingMetadata);  LOG.debug("Found mappings: {}", mappings); return mappings; } catch (IndexNotFoundException e) { throw e; } catch (Exception e) { throw new IllegalStateException( "Failed to read mapping in cluster state for indices=" + Arrays.toString(indices), e); } }
[*] target: assertNotNull(indexMappings)
[-] pred: org. junit. Assert. assertNotNull ( indexMappings )
************************************
************************************
[+] input: convertPoint_NoRedundantSpaces_ShouldConvert() { String wkt = "POINT(12.3 13.3)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.3,13.3]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPoint_WithRedundantSpaces_ShouldConvert() { String wkt = " POINT ( 12.3 13.3 )   "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.3,13.3]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPoint_RoundNumbers_ShouldConvert() { String wkt = "POINT(12 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12,13]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPoint_FirstIsRoundNumber_ShouldConvert() { String wkt = "POINT(12 13.3)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12,13.3]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPoint_SecondIsRoundNumber_ShouldConvert() { String wkt = "POINT(12.2 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.2,13]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPoint_NegativeCoordinates_ShouldConvert() { String wkt = "POINT(-12.2 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [-12.2,13]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPolygon_NoRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[30,10],[40,40],[20,40],[10,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPolygon_NegativeCoordinates_ShouldConvert() { String wkt = "POLYGON ((-30 10, 40 40, 20 40, 10 20, -30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[-30,10],[40,40],[20,40],[10,20],[-30,10]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPolygon_WithRedundantSpaces_ShouldConvert() { String wkt = " POLYGON  ( (30  10, 40    40 , 20 40, 10  20, 30 10 ) ) "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[30,10],[40,40],[20,40],[10,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPolygonWithHole_NoRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates":" + " [[[35,10],[45,45],[15,40],[10,20],[35,10]],[[20,30],[35,35],[30,20],[20,30]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertPolygonWithHole_WithRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ( (35 10, 45 45, 15 40, 10 20, 35 10 ), (20 30 , 35 35, 30 20,   20 30 ) ) "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates":" + " [[[35,10],[45,45],[15,40],[10,20],[35,10]],[[20,30],[35,35],[30,20],[20,30]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertLineString_NoRedundantSpaces_ShouldConvert() { String wkt = "LINESTRING (30 10, 10 30, 40 40)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertLineString_NegativeCoordinates_ShouldConvert() { String wkt = "LINESTRING (-30 10, 10 30, 40 40)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[-30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertLineString_WithRedundantSpaces_ShouldConvert() { String wkt = "LINESTRING (     30  10, 10 30 , 40 40    )"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiPolygon_NoRedundantSpaces_ShouldConvert() { String wkt = "MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20)),((15 5, 40 10, 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiPolygon_WithRedundantSpaces_ShouldConvert() { String wkt = "MULTIPOLYGON ( ((30 20, 45 40, 10 40, 30 20) ) , ((15 5, 40 10, 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiPolygon_OnePolygonHaveHoles_ShouldConvert() { String wkt = "MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20),(20 30, 35 35, 30 20, 20 30)),((15 5, 40 10," + " 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]],[[20,30],[35,35],[30,20],[20,30]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiPoint_V1_ShouldConvert() { String wkt = "MULTIPOINT (10 40, 40 30, 20 20, 30 10)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPoint", "coordinates": [[10,40],[40,30],[20,20],[30,10]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiPoint_V2_ShouldConvert() { String wkt = "MULTIPOINT ((10 40), (40 30), (20 20), (30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPoint", "coordinates": [[10,40],[40,30],[20,20],[30,10]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiLineString_NoRedundantSpaces_ShouldConvert() { String wkt = "MULTILINESTRING ((10 10, 20 20, 10 40),(40 40, 30 30, 40 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiLineString", "coordinates":" + " [[[10,10],[20,20],[10,40]],[[40,40],[30,30],[40,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: convertMultiLineString_WithRedundantSpaces_ShouldConvert() { String wkt = "MULTILINESTRING ( (10 10, 20 20, 10   40 ) , (40 40, 30 30, 40 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiLineString", "coordinates":" + " [[[10,10],[20,20],[10,40]],[[40,40],[30,30],[40,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
toGeoJson(String wkt) { wkt = wkt.toLowerCase(); int startOfCoordinates = wkt.indexOf("("); if (startOfCoordinates == -1) { throw new IllegalArgumentException( StringUtils.format("Failed to convert well-known-text [%s] to geometry type", wkt)); }  String wktType = wkt.substring(0, startOfCoordinates).trim(); wkt = wkt.substring(startOfCoordinates);  String type = ""; String coordinates = ""; switch (wktType) { case ("point"): type = "Point"; coordinates = pointCoordinatesFromWkt(wkt); break; case ("polygon"): type = "Polygon"; coordinates = polygonCoordinatesFromWkt(wkt); break; case ("linestring"): type = "LineString"; coordinates = lineStringCoordinatesFromWkt(wkt); break; case ("multipolygon"): type = "MultiPolygon"; coordinates = multiPolygonCoordinatesFromWkt(wkt); break; case ("multipoint"): type = "MultiPoint"; coordinates = multiPointCoordinatesFromWkt(wkt); break; case ("multilinestring"): type = "MultiLineString"; coordinates = multiLineStringCoordinatesFromWkt(wkt); break; default: throw new IllegalArgumentException("Unsupported well-known-text type: " + wktType); }  return buildGeoJson(type, coordinates); }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
************************************
[+] input: clearEmptyPaths_EmptyMap_ShouldReturnTrue() { Map<String, Object> map = new HashMap<>(); boolean result = Util.clearEmptyPaths(map); // Assert."<AssertPlaceHolder>"; }
clearEmptyPaths(Map<String, Object> map) { if (map.size() == 0) { return true; } Set<String> keysToDelete = new HashSet<>(); for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (Map.class.isAssignableFrom(value.getClass())) { if (clearEmptyPaths((Map<String, Object>) value)) { keysToDelete.add(entry.getKey()); } } } if (keysToDelete.size() != 0) { if (map.size() == keysToDelete.size()) { map.clear(); return true; } for (String key : keysToDelete) { // TODO: seems like a bug, either fix, or just get rid of for loop and remove the first key map.remove(key); return false; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: clearEmptyPaths_EmptyPathSize1_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); map.put("a", new HashMap<String, Object>()); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
clearEmptyPaths(Map<String, Object> map) { if (map.size() == 0) { return true; } Set<String> keysToDelete = new HashSet<>(); for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (Map.class.isAssignableFrom(value.getClass())) { if (clearEmptyPaths((Map<String, Object>) value)) { keysToDelete.add(entry.getKey()); } } } if (keysToDelete.size() != 0) { if (map.size() == keysToDelete.size()) { map.clear(); return true; } for (String key : keysToDelete) { // TODO: seems like a bug, either fix, or just get rid of for loop and remove the first key map.remove(key); return false; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: clearEmptyPaths_EmptyPathSize2_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); Map<String, Object> innerMap = new HashMap<>(); innerMap.put("b", new HashMap<String, Object>()); map.put("a", innerMap); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
clearEmptyPaths(Map<String, Object> map) { if (map.size() == 0) { return true; } Set<String> keysToDelete = new HashSet<>(); for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (Map.class.isAssignableFrom(value.getClass())) { if (clearEmptyPaths((Map<String, Object>) value)) { keysToDelete.add(entry.getKey()); } } } if (keysToDelete.size() != 0) { if (map.size() == keysToDelete.size()) { map.clear(); return true; } for (String key : keysToDelete) { // TODO: seems like a bug, either fix, or just get rid of for loop and remove the first key map.remove(key); return false; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { StarRocksTable oldTable = catalog.getTable(DB_NAME, tableName).orElse(null); assertNotNull(oldTable); List<String> dropColumns = Arrays.asList("c2", "c3"); catalog.alterDropColumns(DB_NAME, tableName, dropColumns, 60); StarRocksTable newTable = catalog.getTable(DB_NAME, tableName).orElse(null); "<AssertPlaceHolder>";  List<StarRocksColumn> expectedColumns = oldTable.getColumns().stream() .filter(column -> !dropColumns.contains(column.getColumnName())) .collect(Collectors.toList()); assertEquals(expectedColumns, newTable.getColumns()); }
getTable(String databaseName, String tableName) throws StarRocksCatalogException { Preconditions.checkArgument( !StringUtils.isNullOrWhitespaceOnly(databaseName), "database name cannot be null or empty."); Preconditions.checkArgument( !StringUtils.isNullOrWhitespaceOnly(tableName), "table name cannot be null or empty.");  final String tableSchemaQuery = "SELECT `COLUMN_NAME`, `DATA_TYPE`, `ORDINAL_POSITION`, `COLUMN_SIZE`, `DECIMAL_DIGITS`, " + "`IS_NULLABLE`, `COLUMN_KEY`, `COLUMN_COMMENT` FROM `information_schema`.`COLUMNS` " + "WHERE `TABLE_SCHEMA`=? AND `TABLE_NAME`=?;";  StarRocksTable.TableType tableType = StarRocksTable.TableType.UNKNOWN; List<StarRocksColumn> columns = new ArrayList<>(); List<String> tableKeys = new ArrayList<>(); try (Connection connection = getConnection()) { try (PreparedStatement statement = connection.prepareStatement(tableSchemaQuery)) { statement.setObject(1, databaseName); statement.setObject(2, tableName); try (ResultSet resultSet = statement.executeQuery()) { while (resultSet.next()) { String name = resultSet.getString("COLUMN_NAME"); String type = resultSet.getString("DATA_TYPE"); Integer size = resultSet.getInt("COLUMN_SIZE"); if (resultSet.wasNull()) { size = null; } // mysql does not have boolean type, and starrocks `information_schema`.`COLUMNS` will return // a "tinyint" data type for both StarRocks BOOLEAN and TINYINT type, Distinguish them by // column size, and the size of BOOLEAN is null if ("tinyint".equalsIgnoreCase(type) && size == null) { type = "boolean"; } int position = resultSet.getInt("ORDINAL_POSITION"); Integer scale = resultSet.getInt("DECIMAL_DIGITS"); if (resultSet.wasNull()) { scale = null; } String isNullable = resultSet.getString("IS_NULLABLE"); String comment = resultSet.getString("COLUMN_COMMENT"); StarRocksColumn column = new StarRocksColumn.Builder() .setColumnName(name) .setOrdinalPosition(position - 1) .setDataType(type) .setColumnSize(size) .setDecimalDigits(scale) .setNullable( isNullable == null || !isNullable.equalsIgnoreCase("NO")) .setColumnComment(comment) .build(); columns.add(column);  // Only primary key table has value in this field. and the value is "PRI" String columnKey = resultSet.getString("COLUMN_KEY"); if (!StringUtils.isNullOrWhitespaceOnly(columnKey)) { if (columnKey.equalsIgnoreCase("PRI") && tableType == StarRocksTable.TableType.UNKNOWN) { tableType = StarRocksTable.TableType.PRIMARY_KEY; } tableKeys.add(column.getColumnName()); } } } } } catch (Exception e) { throw new StarRocksCatalogException( String.format("Failed to get table %s.%s", databaseName, tableName), e); }  StarRocksTable starRocksTable = null; if (!columns.isEmpty()) { starRocksTable = new StarRocksTable.Builder() .setDatabaseName(databaseName) .setTableName(tableName) .setTableType(tableType) .setColumns(columns) .setTableKeys(tableKeys) .build(); } return Optional.ofNullable(starRocksTable); }
[*] target: assertNotNull(newTable)
[-] pred: org. junit. Assert. assertNotNull ( newTable )
************************************
************************************
[+] input: Exception { List<Long> tablets1 = new ArrayList<>(); tablets1.add(1L); tablets1.add(2L); List<Long> tablets2 = new ArrayList<>(); tablets2.add(3L); tablets2.add(4L); Map<String, List<Long>> beToTablets = new HashMap<>(); beToTablets.put("be1", tablets1); beToTablets.put("be2", tablets2);  Settings settings = new PropertiesSettings(); String opaquedQueryPlan = "query_plan"; String cluster = "c"; String database = "d"; String table = "t";  Set<Long> be1Tablet = new HashSet<>(); be1Tablet.add(1L); be1Tablet.add(2L); PartitionDefinition pd1 = new PartitionDefinition( database, table, settings, "be1", be1Tablet, opaquedQueryPlan);  Set<Long> be2Tablet = new HashSet<>(); be2Tablet.add(3L); be2Tablet.add(4L); PartitionDefinition pd2 = new PartitionDefinition( database, table, settings, "be2", be2Tablet, opaquedQueryPlan);  List<PartitionDefinition> expected = new ArrayList<>(); expected.add(pd1); expected.add(pd2); Collections.sort(expected);  List<PartitionDefinition> actual = RestService.tabletsMapToPartition( settings, beToTablets, opaquedQueryPlan, database, table, logger); Collections.sort(actual);  Assert."<AssertPlaceHolder>"; }
tabletsMapToPartition(Settings cfg, Map<String, List<Long>> be2Tablets, String opaquedQueryPlan, String database, String table, Logger logger) throws IllegalArgumentException { int tabletsSize = tabletCountLimitForOnePartition(cfg, logger); List<PartitionDefinition> partitions = new ArrayList<>(); for (Map.Entry<String, List<Long>> beInfo : be2Tablets.entrySet()) { logger.debug("Generate partition with beInfo: '{}'.", beInfo); HashSet<Long> tabletSet = new HashSet<>(beInfo.getValue()); beInfo.getValue().clear(); beInfo.getValue().addAll(tabletSet); int first = 0; while (first < beInfo.getValue().size()) { Set<Long> partitionTablets = new HashSet<>(beInfo.getValue().subList( first, Math.min(beInfo.getValue().size(), first + tabletsSize))); first = first + tabletsSize; PartitionDefinition partitionDefinition = new PartitionDefinition(database, table, cfg, beInfo.getKey(), partitionTablets, opaquedQueryPlan); logger.debug("Generate one PartitionDefinition '{}'.", partitionDefinition); partitions.add(partitionDefinition); } } return partitions; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { // sample app config String configFile = "./test/data/sample/tkltest_ui_config.toml"; TomlParseResult parsedConfig = Toml.parse(Paths.get(configFile)); String appUrl = parsedConfig.getString("general.app_url"); String testDir = parsedConfig.getString("general.test_directory"); TomlTable generateOptions = parsedConfig.getTable("generate");  // call method for creating crawljax config CrawljaxConfiguration crawljaxConfig = CrawljaxRunner.createCrawljaxConfiguration(appUrl, testDir, generateOptions);  // assert on created config Assert."<AssertPlaceHolder>"; Assert.assertEquals(appUrl, crawljaxConfig.getUrl().toString()); Assert.assertTrue(crawljaxConfig.getOutputDir().toString().endsWith( testDir+File.separator+"localhost"+File.separator+"crawl0")); Assert.assertEquals(0, crawljaxConfig.getMaximumStates()); Assert.assertEquals(2, crawljaxConfig.getCrawlRules().getMaxRepeatExploredActions()); Assert.assertEquals(2, crawljaxConfig.getMaximumDepth()); CrawlRules crawlRules = crawljaxConfig.getCrawlRules(); Assert.assertEquals(9, crawlRules.getPreCrawlConfig().getIncludedElements().size()); Assert.assertEquals(6, crawlRules.getPreCrawlConfig().getExcludedElements().size()); Assert.assertEquals(500, crawlRules.getWaitAfterEvent()); Assert.assertEquals(500, crawlRules.getWaitAfterReloadUrl());  // pre-crawl plugin assertions ImmutableList<Plugin> plugins = crawljaxConfig.getPlugins(); Assert.assertEquals(4, plugins.size()); Assert.assertTrue(plugins.stream().anyMatch(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin)); TackleTestOnUrlFirstLoadPlugin precrawlPlugin = (TackleTestOnUrlFirstLoadPlugin) plugins .stream() .filter(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin) .findFirst() .get(); // assert on submit_totp action TomlTable[] precrawlActions = precrawlPlugin.getPreCrawlActions(); Assert.assertEquals(6, precrawlActions.length); Set<String> expKeySet = Stream .of("action_type", "max_attempts", "optional", "totp_secret_env_var", "enter", "click") .collect(Collectors.toSet()); Assert.assertEquals(expKeySet, precrawlActions[5].keySet()); Assert.assertEquals("submit_totp", precrawlActions[5].getString("action_type")); Assert.assertEquals("TKLTESTUI_TOTP_SECRET", precrawlActions[5].getString("totp_secret_env_var")); Assert.assertEquals(true, precrawlActions[5].getBoolean("optional")); Assert.assertEquals(2, precrawlActions[5].getLong("max_attempts").intValue()); }
createCrawljaxConfiguration(String appUrl, String testDir, TomlTable generateOptions) throws IOException { CrawljaxConfiguration.CrawljaxConfigurationBuilder builder = CrawljaxConfiguration.builderFor(appUrl);  // set browser builder.setBrowserConfig(createBrowserConfiguration( generateOptions.getString("browser"), getIntTypeOption(generateOptions, "browser_pixel_density") ));  // set max runtime long timeLimit = getLongTypeOption(generateOptions, "time_limit"); builder.setMaximumRunTime(timeLimit, TimeUnit.MINUTES);  // set max states int maxStates = getIntTypeOption(generateOptions, "max_states"); if (maxStates == 0) { builder.setUnlimitedStates(); } else { builder.setMaximumStates(maxStates); }  // set max explore action int maxExploreAction = getIntTypeOption(generateOptions, "max_explore_action"); if (maxExploreAction > 1) { builder.crawlRules().skipExploredActions(false, maxExploreAction); }  // set max depth int maxDepth = getIntTypeOption(generateOptions, "max_depth"); if (maxDepth == 0) { builder.setUnlimitedCrawlDepth(); } else { builder.setMaximumDepth(maxDepth); }  // set click rules builder.crawlRules().clickOnce(Boolean.TRUE.equals( generateOptions.getBoolean("click_once"))); builder.crawlRules().clickElementsInRandomOrder(Boolean.TRUE.equals( generateOptions.getBoolean("click_randomly")));  // set wait times builder.crawlRules().waitAfterEvent(getLongTypeOption(generateOptions, "wait_after_event"), TimeUnit.MILLISECONDS); builder.crawlRules().waitAfterReloadUrl(getLongTypeOption(generateOptions, "wait_after_reload"), TimeUnit.MILLISECONDS);  // crawl hidden anchors builder.crawlRules().crawlHiddenAnchors(Boolean.TRUE.equals( generateOptions.getBoolean("crawl_hidden_anchors")));  // click default elements if (getBooleanTypeOption(generateOptions," click_default_elements")) { builder.crawlRules().clickDefaultElements(); }  // handle include_iframes option: if specified use RTED state abstraction function; otherwise // use fragment-based state abstraction if (getBooleanTypeOption(generateOptions, "include_iframes")) { double rtedSimilarityThreshold = getDoubleTypeOption(generateOptions, "rted_similarity_threshold"); builder.setStateVertexFactory(new RTEDStateVertexFactory(rtedSimilarityThreshold)); builder.crawlRules().crawlFrames(true); } else { builder.setStateVertexFactory(new FragGenStateVertexFactory(0, builder, true)); builder.crawlRules().crawlFrames(false); }  // form fill mode CrawlRules.FormFillMode formFillMode = getFormFillMode(generateOptions.getString("form_fill_mode")); builder.crawlRules().setFormFillMode(formFillMode);  // form fill order CrawlRules.FormFillOrder formFillOrder = getFormFillOrder(generateOptions.getString("form_fill_order")); builder.crawlRules().setFormFillOrder(formFillOrder);  // set click and don't-click rules String clickablesSpecFile = generateOptions.getString("clickables_spec_file"); if (clickablesSpecFile != null && !clickablesSpecFile.isEmpty()) { updateClickablesConfiguration(Toml.parse(Paths.get(clickablesSpecFile)), builder); }  // set form input specification String formDataSpecFile = generateOptions.getString("form_data_spec_file"); if (formDataSpecFile != null && !formDataSpecFile.isEmpty()) { InputSpecification inputSpec = getFormInputSpecification(formDataSpecFile); builder.crawlRules().setInputSpec(inputSpec); }  // process pre-crawl actions via onUrlFirstLoad plugin String precrawlActionsSpecFile = generateOptions.getString("precrawl_actions_spec_file"); if (precrawlActionsSpecFile != null && !precrawlActionsSpecFile.isEmpty()) { processPreCrawlActions(Toml.parse(Paths.get(precrawlActionsSpecFile)), builder); }  // add crawl-overview and test-generator plugins builder.addPlugin(new CrawlOverview()); builder.addPlugin(new TestSuiteGenerator(createTestConfiguration("none"))); //        builder.addPlugin(new TestSuiteGenerator( //            createTestConfiguration(generateOptions.getString("add_state_diff_assertions"))));  // set output directory builder.setOutputDirectory(new File(testDir));  return builder.build(); }
[*] target: assertNotNull(crawljaxConfig)
[-] pred: org. junit. Assert. assertNotNull ( crawljaxConfig )
************************************
************************************
[+] input: testWithRealActivities() { testWorkflowRule.getWorker().registerActivitiesImplementations(new ContentLengthActivityImpl()); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute();  "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  }
execute();
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
************************************
[+] input: testWithMockedActivities() { ContentLengthActivity activities = mock(ContentLengthActivity.class, withSettings().withoutAnnotations());  ContentLengthInfo testInfo = new ContentLengthInfo(); testInfo.add("testsite", 100);  when(activities.count(anyString())).thenReturn(testInfo); testWorkflowRule.getWorker().registerActivitiesImplementations(activities); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute(); "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  assertEquals(100, (int) info.getWebsiteMap().get("testsite"));  }
execute();
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
************************************
[+] input: InterruptedException { int dataBlockSize = 677; int dataBlocks = 100; int bufferSize = 2 * 1024; //noinspection ConstantConditions assert bufferSize > dataBlockSize;  CommunicationPipe p = new CommunicationPipe(bufferSize); InputStream in = p.getInputStream(); OutputStream out = p.getOutputStream();  byte[] sourceBytes = new byte[dataBlockSize]; new Random().nextBytes(sourceBytes);  CountDownLatch completed = new CountDownLatch(2); new Thread(() -> { for (int i = 0; i < dataBlocks; i++) { try { out.write(sourceBytes); } catch (Exception e) { e.printStackTrace(); return; } completed.countDown(); } }).start();  new Thread(() -> { byte[] readBytes = new byte[dataBlockSize]; try { while (in.available() > dataBlockSize) { int read = in.read(readBytes); Assert."<AssertPlaceHolder>"; Assert.assertArrayEquals(sourceBytes, readBytes); } }catch (Exception e) { e.printStackTrace(); return; } completed.countDown();  }).start();  completed.await(); }
getOutputStream() { return outputStream; }
[*] target: assertEquals(dataBlockSize, read)
[-] pred: org. junit. Assert. assertEquals ( dataBlockSize, read )
************************************
************************************
[+] input: translate() { String input = TestUtils.resourceToString("pluscal/translate/test.tla"); String expected = TestUtils.resourceToString("pluscal/translate/test_expected.tla"); String actual = PlusCalTranslator.translate(input).getTranslated(); "<AssertPlaceHolder>"; }
translate(@NotNull String text) { List<String> lines = text.lines().collect(Collectors.toList());  ToolIO.reset(); ToolIO.setMode(ToolIO.TOOL); PcalParams.resetParams();  List<String> translated = trans.performTranslation(lines); if (translated != null) { return new Result(true, Arrays.asList(ToolIO.getAllMessages()), StringUtil.joinLines(translated)); }  return new Result(false, Arrays.asList(ToolIO.getAllMessages()), null); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: SQLException { VtResultSet input = TestResult.makeTestResult(TestResult.makeTestFields("col1|col2", "varbinary|varbinary"), "a|aaa", "a|0", "a|1"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(input));  AbstractAggregateGen4.AggregateParams aggr1 = new AbstractAggregateGen4.AggregateParams(Engine.AggregateOpcodeG4.AggregateSumDistinct, 1, "sum(distinct col2)"); GroupByParams groupByParams = new GroupByParams(); groupByParams.setKeyCol(0); OrderedAggregateGen4Engine oa = new OrderedAggregateGen4Engine(true, Lists.newArrayList(aggr1), false, 0, Lists.newArrayList(groupByParams), null, fp); VtResultSet result = (VtResultSet) oa.execute(VtContext.background(), null, null, false).getVtRowList();  VtResultSet wantResult = TestResult.makeTestResult(TestResult.makeTestFields("col1|sum(distinct col2)", "varbinary|decimal"), "a|1"); Assert."<AssertPlaceHolder>"; }
execute(IContext ctx, Vcursor vcursor, Map<String, BindVariable> bindVariableMap, boolean wantFields) throws SQLException { IExecute.ExecuteMultiShardResponse resultResponse = this.input.execute(ctx, vcursor, bindVariableMap, wantFields); VtResultSet result = (VtResultSet) resultResponse.getVtRowList();  VtResultSet out = new VtResultSet(convertFields(result.getFields(), super.preProcess, super.aggregates, super.aggrOnEngine), new ArrayList<>());  // This code is similar to the one in StreamExecute. List<VtResultValue> current = null; List<VtResultValue> curDistincts = null; for (List<VtResultValue> row : result.getRows()) { if (current == null) { Pair<List<VtResultValue>, List<VtResultValue>> pair = convertRow(row, super.preProcess, super.aggregates, super.aggrOnEngine); current = pair.getLeft(); curDistincts = pair.getRight(); continue; } boolean equal = this.keysEqual(current, row); if (equal) { Pair<List<VtResultValue>, List<VtResultValue>> pair = merge(result.getFields(), current, row, curDistincts, super.collations, super.aggregates); current = pair.getLeft(); curDistincts = pair.getRight(); continue; } out.getRows().add(current); Pair<List<VtResultValue>, List<VtResultValue>> pair = convertRow(row, super.preProcess, super.aggregates, super.aggrOnEngine); current = pair.getLeft(); curDistincts = pair.getRight(); } if (current != null) { List<VtResultValue> finalValues = convertFinal(current, super.aggregates); out.getRows().add(finalValues); } return new IExecute.ExecuteMultiShardResponse(out.truncate(super.truncateColumnCount)); }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
************************************
[+] input: testLargeTablesConstituents() { final int GapSize = 32;  TableSet ts = new TableSet(); List<TableSet> expected = new ArrayList<>(); int table = 0;  for (int t = 0; t < 256; t++) { table += new Random().nextInt(GapSize) + 1; expected.add(singleTableSet(table)); ts.addTable(table); } Assert."<AssertPlaceHolder>"; }
constituents() { List<TableSet> result = new ArrayList<>(); forEachTable(t -> result.add(TableSet.singleTableSet((Integer) t))); return result; }
[*] target: assertEquals(expected, ts.constituents())
[-] pred: org. junit. Assert. assertEquals ( expected, ts. constituents() )
************************************
************************************
[+] input: testPath() { final DynamicDAG<Integer> dag = new DynamicDAG<>(3.0 / 2.0); final int n = 25; boolean ok;  final int[] nodeOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); @SuppressWarnings("unchecked") final DOLNode<DAGNode<Integer>>[] x = new DOLNode[n]; for (int i = 0; i < n; i++) { x[nodeOrder[i]] = dag.addNode(nodeOrder[i]); Assert.assertTrue(dag.dynamicOrderedList.assertList()); } final int[] arcOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); for (int i = 0; i < n; i++) if (arcOrder[i] < n - 1) { ok = dag.addArc(x[arcOrder[i]], x[arcOrder[i] + 1]); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dag.dynamicOrderedList.assertList()); } // Now test for order for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) Assert.assertEquals(Integer.compare(i, j), DynamicOrderedList.compare(x[i], x[j]));  }
addArc(final DOLNode<DAGNode<K>> source, final DOLNode<DAGNode<K>> target) { final DOLNode<DAGNode<K>> lastInserted = visitForwardAndMove(target, source, source); if (lastInserted == null) return false; addSuccessor(source, target); return true; }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: getAuthorizeUrlTest() { try { String url = webPageAuthorizationManager.getAuthorizeUrl("http://www.jlxxw.net", AuthScope.BASE, null); Assert."<AssertPlaceHolder>"; } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }
getAuthorizeUrl(@NotBlank(message = "重定向地址不能为空") @Pattern(regexp = "^([hH][tT]{2}
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
************************************
[+] input: insertByMap() { Map<String,Object> category = new HashMap<>(); category.put("categoryName","饮料"); category.put("category_type",new Integer(7)); int result = mapper.insertByMap(category); Assert."<AssertPlaceHolder>"; }
insertByMap(Map<String, Object> map);  /** * 新增 * 通过对象注入 * @param productCategory * @return */ @Insert("insert into product_category(category_name, category_type) values (#{categoryName, jdbcType=VARCHAR}
[*] target: assertEquals(1,result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
************************************
[+] input: findByCategoryType() { ProductCategory result = mapper.findByCategoryType(new Integer(7)); Assert."<AssertPlaceHolder>"; }
findByCategoryType(Integer categoryType);  /** * 查询，并指定要查询的字段 * @param categoryName * @return */ @Select("select * from product_category where category_name = #{categoryName}
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: updateByCategoryType() { int result = mapper.updateByCategoryType("清蒸", 7); Assert."<AssertPlaceHolder>"; }
updateByCategoryType(@Param("categoryName") String categoryName, @Param("categoryType") Integer categoryType);  /** * 通过对象更新 * @param productCategory * @return */ @Update("update product_category set category_name = #{categoryName}
[*] target: assertEquals(1,result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
************************************
[+] input: selectByCategoryType() { ProductCategory productCategory = mapper.selectByCategoryType(7); Assert."<AssertPlaceHolder>"; }
selectByCategoryType(Integer categoryType);
[*] target: assertNotNull(productCategory)
[-] pred: org. junit. Assert. assertNotNull ( productCategory )
************************************
************************************
[+] input: save() { ProductInfo productInfo = new ProductInfo(); productInfo.setProductId("123457"); productInfo.setProductName("肉包子"); productInfo.setProductPrice(new BigDecimal(3.0)); productInfo.setProductStock(100); productInfo.setProductDescription("刚蒸的包子"); productInfo.setProductIcon("http://xxxx.jpg"); productInfo.setProductStatus(ProductStatusEnum.UP.getCode()); productInfo.setCategoryType(2);  ProductInfo result = productService.save(productInfo); Assert."<AssertPlaceHolder>"; }
save(ProductInfo productInfo) { return repository.save(productInfo); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: IOException { appendEntryToFile(new NoOpEntry(1, 1)); FileEntrySequence sequence = new FileEntrySequence(entriesFile, entryIndexFile, 1); EntryMeta meta = sequence.getEntryMeta(1); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Entry.KIND_NO_OP, meta.getKind()); Assert.assertEquals(1, meta.getIndex()); Assert.assertEquals(1, meta.getTerm()); }
getEntryMeta(int index) { if (!isEntryPresent(index)) { return null; } if (entryIndexFile.isEmpty()) { return pendingEntries.get(index - doGetFirstLogIndex()).getMeta(); } return entryIndexFile.get(index).toEntryMeta(); }
[*] target: assertNotNull(meta)
[-] pred: org. junit. Assert. assertNotNull ( meta )
************************************
************************************
[+] input: IOException { EntryIndexFile file = new EntryIndexFile(new ByteArraySeekableFile()); Iterator<EntryIndexItem> iterator = file.iterator(); Assert."<AssertPlaceHolder>"; }
hasNext() { checkModification(); return currentEntryIndex <= maxEntryIndex; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext ( ) )
************************************
************************************
[+] input: testMd5() { String str = "a-string-to-hash"; String expectedValue = "c6b763343cfeada6a408772701329d30";  String actualValue = SignatureMethodEnum.MD5.calcSign(str);  "<AssertPlaceHolder>"; }
calcSign(String str) { return signCalculator.calc(str); }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
************************************
[+] input: testSha256() { String str = "a-string-to-hash"; String expectedValue = "47bd5d1c4ab68a55391f0b5304481eb11cb6a7a33066bb8d69c114a69254fdb2";  String actualValue = SignatureMethodEnum.SHA256.calcSign(str);  "<AssertPlaceHolder>"; }
calcSign(String str) { return signCalculator.calc(str); }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
************************************
[+] input: testSm3() { String str = "a-string-to-hash"; String expectedValue = "10bd18e0e96b6e9d79f8726c04df6c5aecdda4cf3f8e5c227c76eb3d3c850498";  String actualValue = SignatureMethodEnum.SM3.calcSign(str);  "<AssertPlaceHolder>"; }
calcSign(String str) { return signCalculator.calc(str); }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
************************************
[+] input: testToString() { SignResult result = new SignResult(SignatureMethodEnum.MD5, "a-secret-id-1", "a-sign-1"); String expectedStr = "SignResult(signMethod=MD5, secretId=a-secret-id-1, signature=a-sign-1)";  String actualStr = result.toString();  "<AssertPlaceHolder>"; }
toString() { return "SignResult(" + "signMethod=" + signMethod + ", secretId=" + secretId + ", signature=" + signature + ")"; }
[*] target: assertEquals(expectedStr, actualStr)
[-] pred: org. junit. Assert. assertEquals ( expectedStr, actualStr )
************************************
************************************
[+] input: testEmptyConstructor() { EndpointConfigEntry entry = new EndpointConfigEntry(); assertNull(entry.productCode()); assertNull(entry.regionCode()); "<AssertPlaceHolder>"; }
domains() { return domains; }
[*] target: assertNull(entry.domains())
[-] pred: org. junit. Assert. assertNull ( entry. domains() )
************************************
************************************
[+] input: testAssembleUrl() { String expectedUrl = "https://test.org/api/v1/res/id-1/%E8%8E%B7%E5%8F%96%E5%90%8D%E7%A7%B0" + "?nothing&from=from-there&to=%E8%BF%99%E9%87%8C"; HttpRequest request = createRequestWithFluentApi();  String actualUrl = request.assembleUrl();  "<AssertPlaceHolder>"; }
assembleUrl() { Map<String, String> mapQueries = ObjectUtils.defaultIfNull(queryParameters, Collections.emptyMap()); StringBuilder urlBuilder = new StringBuilder(); urlBuilder.append(protocol.toString()); urlBuilder.append("://").append(domain); if (null != this.uriPattern) { urlBuilder.append(populatePathParams(uriPattern, pathParameters)); } if (-1 == urlBuilder.indexOf("?")) { urlBuilder.append("?"); } else if (!urlBuilder.toString().endsWith("?")) { urlBuilder.append("&"); }  if (!mapQueries.isEmpty()) { urlBuilder.append(UrlUtils.encode(mapQueries)); }  String url = urlBuilder.toString();  if (url.endsWith("?") || url.endsWith("&")) { url = url.substring(0, url.length() - 1); } return url; }
[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, actualUrl )