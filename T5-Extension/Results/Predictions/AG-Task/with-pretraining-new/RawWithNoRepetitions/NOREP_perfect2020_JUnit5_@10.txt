[+] input: testCreateMappersFromControllerAdvice() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerAdviceExceptionMapping controller = new ControllerAdviceExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromControllerAdvice(controller, false, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
createMappersFromControllerAdvice(Object adviceBean, boolean isController, HandlerLocator locator, HandlerResolverFactory factory) { final Class<?> beanType = ClassUtils.getUserType(adviceBean); Annotation ann = AnnotationUtils.findAnyAnnotation(beanType, ControllerAdvice0.extendedClasses()); if (ann == null) { ann = AnnotationUtils.findAnnotation(beanType, ControllerAdvice0.shadedClass()); }  ControllerAdvice0 controllerAdvice = ControllerAdvice0.fromShade(ann); if (controllerAdvice == null) { return Collections.emptyList(); } final Map<Class<? extends Throwable>, ExceptionResolver<Throwable>> mappings = extractMappings(adviceBean, locator, factory); return mappings.isEmpty() ? null : Collections.singletonList(new ControllerAdviceExceptionMapper(mappings, adviceBean, isController, controllerAdvice.basePackages(), controllerAdvice.basePackageClasses(), Arrays.asList(controllerAdvice.assignableTypes()), Arrays.asList(controllerAdvice.annotations()))); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
************************************
[+] input: test3() { int[] arrInitial = {1, 2}; int[] arrExpected = {1}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { URL url = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostAddress() + ":2233"); Monitor monitor1 = monitorFactory.getMonitor(url); Monitor monitor2 = monitorFactory.getMonitor(url); if (monitor1 == null || monitor2 == null) { Thread.sleep(2000); monitor1 = monitorFactory.getMonitor(url); monitor2 = monitorFactory.getMonitor(url); } Assertions."<AssertPlaceHolder>"; }
getMonitor(URL url) { url = url.setPath(MonitorService.class.getName()).addParameter(INTERFACE_KEY, MonitorService.class.getName()); String key = url.toServiceStringWithoutResolving(); Monitor monitor = MONITORS.get(key); Future<Monitor> future = FUTURES.get(key); if (monitor != null || future != null) { return monitor; }  LOCK.lock(); try { monitor = MONITORS.get(key); future = FUTURES.get(key); if (monitor != null || future != null) { return monitor; }  final URL monitorUrl = url; final CompletableFuture<Monitor> completableFuture = CompletableFuture.supplyAsync(() -> AbstractMonitorFactory.this.createMonitor(monitorUrl)); FUTURES.put(key, completableFuture); completableFuture.thenRunAsync(new MonitorListener(key), EXECUTOR);  return null; } finally { // unlock LOCK.unlock(); } }
[*] target: assertEquals(monitor1, monitor2)
[-] pred: org. junit. Assert. assertEquals ( monitor1, monitor2 )
************************************
************************************
[+] input: testInterpolationDisabled() { VirtualInput virtual = new VirtualInput(LOGGER);  virtual.CAMERA_ANGLE.setCamera(0f, 0f); virtual.CAMERA_ANGLE.updateNextCameraAngle(10f, 20f); virtual.CAMERA_ANGLE.updateNextCameraAngle(20f, 30f);  Triple<Float, Float, Float> expected = Triple.of(30f, 50f+180f, 0f); Triple<Float, Float, Float> actual = virtual.CAMERA_ANGLE.getInterpolatedState(0f, 1f, 2f, false);  "<AssertPlaceHolder>"; }
getInterpolatedState(float partialTick, float pitch, float yaw, boolean enable) {  float interpolatedPitch = nextCameraAngle.getPitch() == null ? pitch : nextCameraAngle.getPitch(); float interpolatedYaw = nextCameraAngle.getYaw() == null ? yaw : nextCameraAngle.getYaw() + 180;  if (enable && !cameraAngleInterpolationStates.isEmpty()) { int index = (int) MathHelper.clampedLerp(0, cameraAngleInterpolationStates.size() - 1, partialTick); // Get interpolate index  interpolatedPitch = cameraAngleInterpolationStates.get(index).getPitch(); interpolatedYaw = cameraAngleInterpolationStates.get(index).getYaw() + 180;  } return Triple.of(interpolatedPitch, interpolatedYaw, 0f); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getPipEndpoint_inputInvalidConstraintHasNoPipEndpoint_returnNull() { /* ARRANGE */ final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getPipEndpoint(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
getPipEndpoint(final Rule rule) { final var constraint = rule.getConstraint().get(0); return ((ConstraintImpl) constraint).getPipEndpoint(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testToString() { ConfigChangedEvent event = new ConfigChangedEvent(key, group, content); "<AssertPlaceHolder>"; }
toString() { return "ConfigChangedEvent{" + "key='" + key + ''' + ", group='" + group + ''' + ", content='" + content + ''' + ", changeType=" + changeType + "} " + super.toString(); }
[*] target: assertNotNull(event.toString())
[-] pred: org. junit. Assert. assertNotNull ( event. toString() )
************************************
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/verifiableCredentialAdHocContext.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); final Optional<VerifiablePresentation<VerifiableIndyCredential>> signed = mgmt.sign(vp); "<AssertPlaceHolder>"; assertNotNull(signed.get().getProof()); }
sign( @NonNull VerifiablePresentation<VerifiableIndyCredential> inputVp) { Optional<VerifiablePresentation<VerifiableIndyCredential>> result = Optional.empty(); try { final Optional<String> verkey = id.getVerkey(); String myDid = id.getMyDid(); String myVerkey = id.getMyKeyId(myDid); if (verkey.isPresent()) { SignRequest sr = SignRequest.from( verkey.get(), inputVp, Options.builderWithDefaults() .verificationMethod(myVerkey) .build()); result = acaPy.jsonldSign( sr, VerifiablePresentation.INDY_CREDENTIAL_TYPE); } } catch (IOException e) { log.error(e.getMessage(), e); throw new NetworkException(e.getMessage()); } return result; }
[*] target: assertTrue(signed.isPresent())
[-] pred: org. junit. Assert. assertTrue ( signed. isPresent ( ) )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .withSupplier(() -> {  return 1; }) .withRollback((inputHolder, thrown)-> { Assertions.assertNull(inputHolder); Assertions.assertNull(thrown);  }) .build(); stage.execute(null); stage.rollback(null);  Assertions.assertTrue(stage.isExecuted()); Assertions."<AssertPlaceHolder>"; }
isRolledback() { return this.rolledBack; }
[*] target: assertTrue(stage.isRolledback())
[-] pred: org. junit. Assert. assertTrue ( stage. isRolledback ( ) )
************************************
************************************
[+] input: shouldApply() { String userId = "userId123"; String resultMessage = "Success"; when(userInteractionService.getCurrentTracksMessage(userId)).thenReturn(resultMessage); String response = trackUrlPrinterCommand.apply(userId); "<AssertPlaceHolder>"; }
apply(String userId) { return userInteractionService.getCurrentTracksMessage(userId); }
[*] target: assertEquals(resultMessage, response)
[-] pred: org. junit. Assert. assertEquals ( resultMessage, response )
************************************
************************************
[+] input: checkEqualsAddress_true_street_null() {  //Arrange String streetA = ""; String doorNumberA = "1"; String postCodeA = "4000-222"; String cityA = "Lisboa"; String countryA = "Portugal";  String streetB = ""; String doorNumberB = "1"; String postCodeB = "4000-222"; String cityB = "Lisboa"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setStreet(null); addressB.setStreet(null);   //Assert  "<AssertPlaceHolder>";  }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
************************************
[+] input: getResourceMaps() { List<AWSTargetGroup> awsTargetGroups = getAwsTargetGroups();  Maps<Resource> resourceMaps = exportLoadBalancerTargetGroups.getResourceMaps(awsTargetGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancerTargetGroup.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSTargetGroup> awsTargetGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();  for (AWSTargetGroup awsTargetGroup : awsTargetGroups) { TargetGroup targetGroup = awsTargetGroup.getTargetGroup(); List<TargetGroupAttribute> attributes = awsTargetGroup.getTargetGroupAttributes();  resourceMapsBuilder.map( Resource.builder() .api(awsTargetGroup.getTerraformResourceName()) .name(awsTargetGroup.getResourceName()) .argument("name", TFString.build(targetGroup.targetGroupName())) .argument("port", TFNumber.build(targetGroup.port())) .argument("protocol", TFString.build(targetGroup.protocolAsString())) .argument("vpc_id", TFExpression.build( MessageFormat.format("aws_vpc.{0}.id", targetGroup.vpcId()))) .argument("target_type", TFString.build(targetGroup.targetTypeAsString())) .argument("deregistration_delay", TFNumber.builder() .value(attributes.stream() .filter(a -> a.key().equals("deregistration_delay.timeout_seconds")) .map(TargetGroupAttribute::value) .findFirst().orElse(null)) .build()) .argument("health_check", TFBlock.builder() .argument("enabled", TFBool.build(targetGroup.healthCheckEnabled())) .argument("port", TFNumber.build(targetGroup.healthCheckPort())) .argument("protocol", TFString.build(targetGroup.protocolAsString())) .argument("proxy_protocol_v2", TFBool.build(attributes.stream() .filter(a -> a.key().equals("proxy_protocol_v2.enabled")) .map(a -> Boolean.valueOf(a.value())) .findFirst().orElse(false))) .argument("stickiness", TFBool.build(attributes.stream() .filter(a -> a.key().equals("stickiness.enabled")) .map(a -> Boolean.valueOf(a.value())) .findFirst().orElse(false))) .argument("path", TFString.build(targetGroup.healthCheckPath())) .argument("healthy_threshold", TFNumber.build(targetGroup.healthyThresholdCount())) .argument("unhealthy_threshold", TFNumber.build(targetGroup.unhealthyThresholdCount())) .argument("interval", TFNumber.build(targetGroup.healthCheckIntervalSeconds())) .argument("tags", TFMap.builder() .maps(awsTargetGroup.getTags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value())))) .build()) .build() ).build() );  List<AWSTargetGroupAttachment> awsTargetGroupAttachments = awsTargetGroup.getAwsTargetGroupAttachments();  awsTargetGroupAttachments.forEach(awsTargetGroupAttachment -> { TargetDescription targetDescription = awsTargetGroupAttachment.getTargetDescription(); resourceMapsBuilder.map( Resource.builder() .api(awsTargetGroupAttachment.getTerraformResourceName()) .name(awsTargetGroupAttachment.getResourceName()) .argument("target_group_arn ", TFExpression.build( MessageFormat.format("aws_lb_target_group.{0}.arn", targetGroup.targetGroupName()))) .argumentIf(targetGroup.targetType() == TargetTypeEnum.INSTANCE, "target_id", TFExpression.build( MessageFormat.format("aws_instance.{0}.id", targetDescription.id()))) .argumentIf(targetGroup.targetType() == TargetTypeEnum.IP, "target_id", TFString.build(targetDescription.id())) .argumentIf(targetGroup.targetType() == TargetTypeEnum.LAMBDA, "target_id", TFExpression.build( MessageFormat.format("aws_lambda_function.{0}.arn", targetDescription.id()))) .argumentIf(targetGroup.targetType() != TargetTypeEnum.LAMBDA, "port", TFNumber.build(targetDescription.port())) //Todo: not implemented //                                    .argumentIf(targetGroup.targetType() == TargetTypeEnum.LAMBDA, //                                            "depends_on", TFExpression.build( //                                                    MessageFormat.format("aws_lambda_permission.{0}", //                                                            "xxxx"))) .build()); } ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Elasticache.cmd")); String actual = exportElastiCacheClusters.getTFImport(getAwsCacheClusters()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSCacheCluster> awsCacheClusters) { return TFImport.builder() .importLines(awsCacheClusters.stream() .map(awsCacheCluster -> TFImportLine.builder() .address(awsCacheCluster.getTerraformAddress()) .id(awsCacheCluster.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldImplicitlyRollbackInsertedAuthor() { manager.startManagedSession(); AuthorMapper mapper = manager.getMapper(AuthorMapper.class); Author expected = new Author(502, "emacarron", "******", "emacarron@somewhere.com", "Something...", null); mapper.insertAuthor(expected); manager.close(); Author actual = mapper.selectAuthor(502); "<AssertPlaceHolder>"; }
close() { final SqlSession sqlSession = localSqlSession.get(); if (sqlSession == null) { throw new SqlSessionException("Error:  Cannot close.  No managed session is started."); } try { sqlSession.close(); } finally { localSqlSession.set(null); } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: deleteCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); Set<CommunityHouse> testCommunityHouses = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT); testCommunity.setHouses(testCommunityHouses);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); testCommunityHouses.forEach(house -> { given(communityHouseRepository.findByHouseId(house.getHouseId())) .willReturn(Optional.of(house)); });  testCommunityHouses.forEach(house -> { given(communityHouseRepository.findByHouseId(house.getHouseId())) .willReturn(Optional.of(house)); });  // when boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID); verify(communityRepository).delete(testCommunity); }
deleteCommunity(String communityId) { return communityRepository.findByCommunityIdWithHouses(communityId) .map(community -> { Set<String> houseIds = community.getHouses() .stream() .map(CommunityHouse::getHouseId) .collect(Collectors.toSet());  houseIds.forEach(houseId -> removeHouseFromCommunityByHouseId(community, houseId)); communityRepository.delete(community);  return true; }) .orElse(false); }
[*] target: assertTrue(communityDeleted)
[-] pred: org. junit. Assert. assertTrue ( communityDeleted )
************************************
************************************
[+] input: shouldReturnNumberWithOddOccurrences() { int[] arr = { 5, 4, 5, 3, 1, 4, 1 }; int expected = 3;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
getNumberWithOddOccurrences(int[] array) { return map(array); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { List<AWSCacheSubnetGroup> awsRdsSubnetGroup = getAwsCacheSubnetGroups();  Maps<Resource> resourceMaps = exportElastiCacheSubnetGroups.getResourceMaps(awsRdsSubnetGroup); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ElastiCacheSubnetGroup.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSCacheSubnetGroup> awsCacheSubnetGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsCacheSubnetGroups.forEach(awsCacheSubnetGroup -> { CacheSubnetGroup cacheSubnetGroup = awsCacheSubnetGroup.getCacheSubnetGroup(); List<Tag> tags = awsCacheSubnetGroup.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsCacheSubnetGroup.getTerraformResourceName()) .name(awsCacheSubnetGroup.getResourceName()) .argument("name", TFString.build(cacheSubnetGroup.cacheSubnetGroupName())) .argument("subnet_ids", TFList.builder().isLineIndent(false) .lists(cacheSubnetGroup.subnets().stream() .map(subnet -> TFExpression.builder().isLineIndent(false) .expression( MessageFormat.format("aws_subnet.{0}.id", subnet.subnetIdentifier())) .build()) .collect(Collectors.toList())) .build()) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ) .build();  });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = Object.class.getMethod("toString");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(Object.class.getMethod("toString"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: shouldReturnTrue_whenPassed8() { boolean result = powerOfTwo.isPowerOfTwo(8);  "<AssertPlaceHolder>"; }
isPowerOfTwo(int i) { return naive(i); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testGetDumpOnExitDefault() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getDumpOnExit() { return recordingOptions.getOrDefault( Option.DUMP_ON_EXIT.name, Option.DUMP_ON_EXIT.defaultValue); }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
************************************
[+] input: BackendException { Object result = new Object(); KeyColumnValueStoreManager mock = mock(KeyColumnValueStoreManager.class); when(mock.getHadoopManager()).thenReturn(result); MetricInstrumentedStoreManager metricInstrumentedStoreManager = new MetricInstrumentedStoreManager(mock, "", true, "");  Object hadoopManager = metricInstrumentedStoreManager.getHadoopManager();  verify(mock).getHadoopManager(); "<AssertPlaceHolder>"; }
getHadoopManager() throws BackendException { return backend.getHadoopManager(); }
[*] target: assertEquals(result, hadoopManager)
[-] pred: org. junit. Assert. assertEquals ( result, hadoopManager )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = OfferedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = offeredResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, OfferedResourceController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: update_newPushData_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isPushData()); }
update(final Subscription subscription, final SubscriptionDesc desc) { final var hasParentUpdated = super.update(subscription, desc); final var hasUpdatedUrl = this.updateLocation(subscription, desc.getLocation()); final var hasUpdatedTarget = this.updateTarget(subscription, desc.getTarget()); final var hasUpdatedPushData = this.updatePushData(subscription, desc.isPushData()); final var hasUpdatedSubscriber = this.updateSubscriber(subscription, desc.getSubscriber()); final var hasUpdateIdsValue = this.updateIdsValue(subscription, desc.isIdsProtocol());  return hasParentUpdated || hasUpdatedUrl || hasUpdatedTarget || hasUpdatedPushData || hasUpdatedSubscriber || hasUpdateIdsValue; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: shouldReturnBoardReportId() { String timeStamp = "121322545121"; String expected = "board-121322545121";  String boardReportId = IdUtil.getBoardReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
getBoardReportId(String timeStamp) { return BOARD_REPORT_PREFIX + timeStamp; }
[*] target: assertEquals(expected, boardReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, boardReportId )
************************************
************************************
[+] input: testSingleMajorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMajorGcSummaryMetric = new Summary( MAJOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(defaultMinorGcSummary, expectedMajorGcSummaryMetric); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_OLD); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getByteBufferState() { ByteBuffer dst = ByteBuffer.allocate(4); dst.position(1); dst.limit(3);  buffer.setByte(0, (byte) 1); buffer.setByte(1, (byte) 2); buffer.setByte(2, (byte) 3); buffer.setByte(3, (byte) 4); buffer.getBytes(1, dst);  assertEquals(3, dst.position()); assertEquals(3, dst.limit());  dst.clear(); "<AssertPlaceHolder>"; assertEquals(2, dst.get(1)); assertEquals(3, dst.get(2)); assertEquals(0, dst.get(3)); }
clear() { readerIndex = writerIndex = 0; }
[*] target: assertEquals(0, dst.get(0))
[-] pred: org. junit. Assert. assertEquals ( 0, dst. get ( 0 ) )
************************************
************************************
[+] input: testWriteTyped() { Document d = getTypedDocument("sample_7_model", null);  d.setString("$.id", "id"); d.setString("$.info.iid", "iid"); d.setString("$.members[0].first_name", "Deepak"); d.setInteger("$.members[0].age", 48); d.setString("$.members[type=basic].first_name", "Deepak"); d.setString("$.members[type=basic].last_name", "Arora"); d.setString("$.members[type=basic].phones[type=home].type", "Home"); d.setString("$.members[0].phones[type=Home].number", "11111111111"); d.setString("$.info.iid", "12345678"); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=Home].is_primary", true); d.setString("$.members[type=supp].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_7_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_38", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: InterruptedException { RequestRetryPolicy policy = throwable -> true; CompletableFuture<Boolean> wrappedFuture = policy.wrapOperation(this::simpleSuccessFuture, executor); "<AssertPlaceHolder>"; }
wrapOperation(Supplier<CompletableFuture<T>> operation, Executor executor) { Assert.notNull(operation, "Operation must not be null"); Assert.notNull(executor, "Executor must not be null");  // because we have asynchronous logic in completion stage chain // we should have sharing answer state for final result CompletableFuture<T> resultFuture = new CompletableFuture<>(); // to provide it if retrying has been stopped without correct result AtomicReference<Throwable> lastExceptionWrapper = new AtomicReference<>(); CompletableFuture.runAsync( new RetryingAsyncOperation<>(this, operation, resultFuture, lastExceptionWrapper), executor ) .exceptionally(ex -> { resultFuture.completeExceptionally(ex); return null; }); return resultFuture; }
[*] target: assertTrue(wrappedFuture.get())
[-] pred: org. junit. Assert. assertTrue ( wrappedFuture. get ( ) )
************************************
************************************
[+] input: testExtractOutboxMessageId_it_should_return_null_when_message_don_t_has_an_id() { //Given  //When final var extractedMessageId = MessageUtils.extractOutboxMessageId(Map.of());  //Then "<AssertPlaceHolder>"; }
extractOutboxMessageId(Map<String, Object> messageHeaders) { final var messageIdObject = messageHeaders.get(OUTBOX_MESSAGE_ID_HEADER_PARAMETER_NAME); if (Objects.nonNull(messageIdObject)) { return (String) messageIdObject; }  return null; }
[*] target: assertNull(extractedMessageId)
[-] pred: org. junit. Assert. assertNull ( extractedMessageId )
************************************
************************************
[+] input: Exception { StringMap ins = ConstructionUtil.generateSubClassOf(StringMap.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: skipClustersWithoutDoubleQuote() { ThreadDumpRegion region = new ThreadDumpRegion("something\n\n"else"", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""else""); "<AssertPlaceHolder>"; }
findNextStack() { while (findNextSection()) { if (threadDump.charAt(startIndex) == '"') { return true; } }  return false; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
************************************
[+] input: createFrom4ByteAbgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_4BYTE_ABGR); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom4ByteAbgr(data, width, height); "<AssertPlaceHolder>"; }
createFrom4ByteAbgr(byte[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferByte(data, data.length); ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB); int[] nBits = {8, 8, 8, 8}; int[] bOffs = {3, 2, 1, 0}; ColorModel colorModel = new ComponentColorModel(colorSpace, nBits, true, false, Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE); WritableRaster raster = Raster.createInterleavedRaster(dataBuffer, width, height, width * 4, 4, bOffs, null); return new BufferedImage(colorModel, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: reactorSystemHasByDefaultLoopbackDriver() { boolean loopbackDriverPresent = false; for (ReActorSystemDriver reActorSystemDriver : reActorSystem.getReActorSystemDrivers()) { if (reActorSystemDriver.getClass().equals(LoopbackDriver.class)) { loopbackDriverPresent = true; break; } } Assertions."<AssertPlaceHolder>"; }
getReActorSystemDrivers() { return Set.copyOf(reActorSystemDrivers); }
[*] target: assertTrue(loopbackDriverPresent)
[-] pred: org. junit. Assert. assertTrue ( loopbackDriverPresent )
************************************
************************************
[+] input: getBrokers_brokersNotEmpty_returnList() { /* ARRANGE */ final var broker = new Broker(); final var resource = new OfferedResource(); resource.setBrokers(Collections.singletonList(broker));  /* ACT */ final var result = resource.getBrokers();  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(broker, result.get(0)); }
getBrokers() { return brokers; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testDoFixValueAssert_withExpectation() { NotEqualsAssertion notEqualsAssertion = MockNotEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = notEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(expectedValue) != Double.parseDouble(originalValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: equals_false_when_different_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(3.0, 2.0, 1.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: Exception { List<PostLite> posts = manager.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectPostLite"); "<AssertPlaceHolder>"; // old gcode issue #392, new #1848 }
selectList(String statement) { return sqlSessionProxy.selectList(statement); }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithComma() { final String expression = "http://snomed.info/sct|'46,2'|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("46,2", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: testCopy() { // test case 1 Document fromDoc = getBaseDocument("/jdocs/sample_1.json"); Document toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$.info"); toDoc.setContent(fromDoc, "$.members[%]", "$.members[%]", 0 + "", 0 + "");  try { toDoc.setContent(fromDoc, "$.id", "$.id"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); assertEquals(e.getErrorCode(), "jdoc_err_22"); }  fromDoc.deletePath("$.id"); fromDoc.deletePath("$.members[1]"); String expected = fromDoc.getJson(); String actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 2 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$"); expected = getCompressedJson("/jdocs/sample_2_1_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 3 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$", "$.members[type=basic].block"); expected = getCompressedJson("/jdocs/sample_2_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 4 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$", "$"); expected = getCompressedJson("/jdocs/sample_6_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 5 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[%]", "$.application.members[%]", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_3_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 6 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[]", "$.application.members[]"); expected = getCompressedJson("/jdocs/sample_6_4_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 7 fromDoc = getTypedDocument("sample_6_model", null); fromDoc.setInteger("$.application.members[0].phones[0].docs[0].index", 0); fromDoc.setString("$.application.members[0].phones[0].docs[0].name", "Deepak"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[0].phones[0].docs[%]", "$.application.members[%].phones[%].docs[%]", 0 + "", 0 + "", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_5_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>";  // test case 8 - we just check that it does not throw an exception fromDoc = getBaseDocument("/jdocs/sample_25.json"); toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses[]", "$.[]"); assertTrue(true);  toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses", "$.[]"); assertTrue(true);  toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses[]"); assertTrue(true);  try { toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); } }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testEmptyFrameCreation() { //given final Animation animation = new Animation();  //then "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, animation::getFrame); }
hasFrame() { return !frames.isEmpty(); }
[*] target: assertFalse(animation.hasFrame())
[-] pred: org. junit. Assert. assertFalse ( animation. hasFrame() )
************************************
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", CPUThreadLoadMapper.EVENT_NAME, "unknown2", GCHeapSummaryMapper.EVENT_NAME, "unknown3");  var expected = List.of(CPUThreadLoadMapper.EVENT_NAME, GCHeapSummaryMapper.EVENT_NAME); ToMetricRegistry registry = ToMetricRegistry.create(names);  var actual = registry.all().map(EventToMetric::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
all() { return mappers.stream(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testNullRoot() { var testClass = new FlamegraphMarshaller(); var result = testClass.flatten(null); List<FlameLevel> expected = Collections.emptyList(); "<AssertPlaceHolder>"; }
flatten(FlamegraphMarshaller.StackFrame stackFrame) { List<FlameLevel> frames = addChildren(stackFrame, null, new AtomicInteger(0)); return frames; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: createFromByteBinary() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_BYTE_BINARY); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromByteBinary(data, width, height); "<AssertPlaceHolder>"; }
createFromByteBinary(byte[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferByte(data, data.length); byte[] arr = {(byte)0, (byte)0xff}; IndexColorModel colorModel = new IndexColorModel(1, 2, arr, arr, arr); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, 1, null); return new BufferedImage(colorModel, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_3() { var encoded = UUIDAdapter.toStringOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
toStringOrDefault(UUID uuid, String defaultString) { if (uuid == null) { return defaultString; } try { return uuid.toString(); } catch (Exception ex) { return defaultString; } }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
************************************
[+] input: setExpandedAndIsExpandedShouldWork() { // prepare final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Stack s = new Stack(); s.add(gamePiece1); s.add(gamePiece2); s.setExpanded(true);  // assert "<AssertPlaceHolder>"; }
isExpanded() { return expanded; }
[*] target: assertTrue(s.isExpanded())
[-] pred: org. junit. Assert. assertTrue ( s. isExpanded() )
************************************
************************************
[+] input: getAllCycles_expectedMultipleCycles() { Cycle testCycle1 = new Cycle("TestCycle1"); Cycle testCycle2 = new Cycle("TestCycle2");  Collection<Cycle> expectedCycles = new ArrayList<>(); expectedCycles.add(testCycle1); expectedCycles.add(testCycle2);  Collection<Cycle> outputCycles = new ArrayList<>(); outputCycles.add(testCycle1); outputCycles.add(testCycle2); when(cycleRepository.findAll()).thenReturn(outputCycles);  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
getAllCycles() { Collection<Cycle> cycles = new ArrayList<>(); for (Cycle cycle : cycleRepository.findAll()) { cycles.add(cycle); } return cycles; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
************************************
[+] input: shouldNotHaveStrayErrorEvents() { com.microsoft.playwright.WebSocket ws = page.waitForWebSocket(() -> { page.evaluate("port => {\n" + "  window.ws = new WebSocket('ws://localhost:' + port + '/ws');\n" + "}", webSocketServer.getPort()); }); boolean[] error = {false}; ws.onSocketError(e -> error[0] = true); ws.waitForFrameReceived(() -> {}); page.evaluate("window.ws.close()"); "<AssertPlaceHolder>"; }
waitForFrameReceived(Runnable callback) { return waitForFrameReceived(null, callback); }
[*] target: assertFalse(error[0])
[-] pred: org. junit. Assert. assertFalse ( error[0] )
************************************
************************************
[+] input: testShallowClone() { Set<Integer> testKeycodeSet = new HashSet<>(); testKeycodeSet.add(VirtualKey.W.getKeycode()); testKeycodeSet.add(VirtualKey.S.getKeycode());  List<Character> testCharList = new ArrayList<>(); testCharList.add('w'); testCharList.add('s');  VirtualKeyboard expected = new VirtualKeyboard(testKeycodeSet, testCharList); VirtualKeyboard actual = expected.shallowClone();  "<AssertPlaceHolder>"; }
shallowClone() { return new VirtualKeyboard(new HashSet<>(this.pressedKeys), new ArrayList<>(this.charList), isIgnoreFirstUpdate()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: should_result_millis_when_days() {  var expected = 3 * 24 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("3days");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[I-].[Na+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Atom iodine = atomList.get(0); assertEquals(0, iodine.getAtomNeighbours().size()); assertEquals(-1, iodine.getCharge());  Atom sodium = atomList.get(1); assertEquals(0, sodium.getAtomNeighbours().size()); assertEquals(1, sodium.getCharge()); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("functionalfoo",""), Arrays.asList('a', OpsinTools.END_OF_FUNCTIONALTERM)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "functionalfoo"); "<AssertPlaceHolder>"; assertEquals("functionalfoo", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testHasNoRange() { OfferPayload payload = mock(OfferPayload.class); when(payload.getMinAmount()).thenReturn(1000L); when(payload.getAmount()).thenReturn(1000L);  Offer offer = new Offer(payload); "<AssertPlaceHolder>"; }
isRange() { return offerPayload.getAmount() != offerPayload.getMinAmount(); }
[*] target: assertFalse(offer.isRange())
[-] pred: org. junit. Assert. assertFalse ( offer. isRange() )
************************************
************************************
[+] input: extractContext_fromStreamRequestHandler() { Object[] args = {mock(InputStream.class), mock(OutputStream.class), mock(Context.class)}; ProceedingJoinPoint pjpMock = mockRequestHandlerPjp(RequestStreamHandler.class, args);  Context context = LambdaHandlerProcessor.extractContext(pjpMock);  "<AssertPlaceHolder>"; }
extractContext(final ProceedingJoinPoint pjp) {  if (placedOnRequestHandler(pjp)) { return (Context) pjp.getArgs()[1]; } else if (placedOnStreamHandler(pjp)) { return (Context) pjp.getArgs()[2]; } else { return null; } }
[*] target: assertNotNull(context)
[-] pred: org. junit. Assert. assertNotNull ( context )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsMinusZero() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(-0.0));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "akita"; var duration = Duration.of(21, MILLIS); var monitorClassName = "ooo"; var expectedAttributes = new Attributes() .put(THREAD_NAME, threadName) .put(CLASS, monitorClassName) .put(DURATION, duration.toMillis()) .put(STACK_TRACE, (String) null); var expectedEvent = new Event(JFR_JAVA_MONITOR_WAIT, expectedAttributes, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var monitorClass = mock(RecordedClass.class); var eventThread = mock(RecordedThread.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getDuration()).thenReturn(duration); when(event.getClass(MONITOR_CLASS)).thenReturn(monitorClass); when(eventThread.getJavaName()).thenReturn(threadName); when(monitorClass.getName()).thenReturn(monitorClassName);  var mapper = new ThreadLockEventMapper();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { Duration duration = ev.getDuration(); if (duration.toMillis() > 20) { long timestamp = ev.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); if (hasField(ev, EVENT_THREAD, SIMPLE_CLASS_NAME)) { attr.put(THREAD_NAME, ev.getThread(EVENT_THREAD).getJavaName()); } if (hasField(ev, MONITOR_CLASS, SIMPLE_CLASS_NAME)) { attr.put(CLASS, ev.getClass(MONITOR_CLASS).getName()); } attr.put(DURATION, duration.toMillis()); RecordedThread eventThread = null; if (hasField(ev, EVENT_THREAD, SIMPLE_CLASS_NAME)) { eventThread = ev.getThread(EVENT_THREAD); } attr.put(THREAD_NAME, eventThread == null ? null : eventThread.getJavaName()); attr.put(STACK_TRACE, MethodSupport.serialize(ev.getStackTrace())); return Collections.singletonList(new Event(JFR_JAVA_MONITOR_WAIT, attr, timestamp)); } return Collections.emptyList(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: generateForDepartment_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(departmentServiceUsers.findById(departmentId)).thenReturn(okrDepartment); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForOkrChildUnit(departmentId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(departmentServiceUsers, times(1)).findById(departmentId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
generateForOkrChildUnit(long departmentId) { OkrDepartment okrDepartment = departmentServiceUsers.findById(departmentId); return generateTeamMemberRowForDepartment(okrDepartment); }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
************************************
[+] input: Exception { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; MetadataIdentifier consumerIdentifier = storeConsumer(etcdMetadataReport, TEST_SERVICE, version, group, application);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(consumerIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(fileContent, "{"paramConsumerTest":"etcdConsumer"}"); }
getNodeKey(BaseMetadataIdentifier identifier) { return toRootDir() + identifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", ProfileSummarizer.EVENT_NAME, "unknown2", ProfileSummarizer.NATIVE_EVENT_NAME, "unknown3");  var expected = List.of(ProfileSummarizer.EVENT_NAME, ProfileSummarizer.NATIVE_EVENT_NAME); ProfilerRegistry registry = ProfilerRegistry.create(names);  var actual = registry.all().map(EventToEventSummary::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
all() { return mappers.stream(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testConflictingOrderOfProcessors3() { AbstractOutputProcessor outputProcessor1 = new AbstractOutputProcessor() { }; outputProcessor1.setAction(null, -1); AbstractOutputProcessor outputProcessor2 = new AbstractOutputProcessor() { }; outputProcessor2.setAction(null, -1); AbstractOutputProcessor outputProcessor3 = new AbstractOutputProcessor() { }; outputProcessor3.setAction(null, -1); outputProcessor1.addBeforeProcessor(outputProcessor2.getClass()); outputProcessor2.addBeforeProcessor(outputProcessor3.getClass()); outputProcessor3.addBeforeProcessor(outputProcessor1.getClass());  OutputProcessorChain outputProcessorChain = new OutputProcessorChainImpl(new OutboundSecurityContextImpl()); outputProcessorChain.addProcessor(outputProcessor1); outputProcessorChain.addProcessor(outputProcessor2); assertThrows(IllegalArgumentException.class, () -> outputProcessorChain.addProcessor(outputProcessor3));  List<OutputProcessor> outputProcessors = outputProcessorChain.getProcessors(); "<AssertPlaceHolder>"; assertEquals(outputProcessor1, outputProcessors.get(0)); assertEquals(outputProcessor2, outputProcessors.get(1)); }
getProcessors();
[*] target: assertEquals(2, outputProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, outputProcessors. size ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Elasticsearch.cmd")); String actual = exportElasticsearchDomains.getTFImport(getAwsElasticsearchDomains()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSElasticsearchDomain> awsElasticsearchDomains) { return TFImport.builder() .importLines(awsElasticsearchDomains.stream() .map(awsElasticsearchDomain -> TFImportLine.builder() .address(awsElasticsearchDomain.getTerraformAddress()) .id(awsElasticsearchDomain.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/MskCluster.cmd")); String actual = exportMskClusters.getTFImport(getAwsMskClusters()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSMskCluster> awsMskClusters) { return TFImport.builder() .importLines(awsMskClusters.stream() .map(awsMskCluster -> TFImportLine.builder() .address(awsMskCluster.getTerraformAddress()) .id(awsMskCluster.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetDevelopers() { assertNotNull(graphqlController);  KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name");  ApplicationOwnerRequest ownerRequest1 = new ApplicationOwnerRequest(); ownerRequest1.setApplicationId("app-id"); ownerRequest1.setUserName("developer1"); ownerRequest1.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest2 = new ApplicationOwnerRequest(); ownerRequest2.setApplicationId("app-id"); ownerRequest2.setUserName("developer2"); ownerRequest2.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest3 = new ApplicationOwnerRequest(); ownerRequest3.setApplicationId("app-id"); ownerRequest3.setUserName("developer3"); ownerRequest3.setState(RequestState.REJECTED); ApplicationOwnerRequest ownerRequest4 = new ApplicationOwnerRequest(); ownerRequest4.setApplicationId("application-id"); ownerRequest4.setUserName("developer4"); ownerRequest4.setState(RequestState.APPROVED);  when(applicationsService.getAllApplicationOwnerRequests()) .thenReturn(List.of(ownerRequest1, ownerRequest2, ownerRequest3, ownerRequest4)); List<String> developers = graphqlController.getDevelopers(app);  "<AssertPlaceHolder>"; assertEquals(2, developers.size()); assertEquals("developer1", developers.get(0)); assertEquals("developer2", developers.get(1)); }
getDevelopers(KnownApplication application) { List<ApplicationOwnerRequest> allOwnerRequests = applicationsService.getAllApplicationOwnerRequests(); return allOwnerRequests.stream() .filter(request -> request.getApplicationId().equals(application.getId()) && request.getState().equals(RequestState.APPROVED)) .map(ApplicationOwnerRequest::getUserName).collect(Collectors.toList()); }
[*] target: assertNotNull(developers)
[-] pred: org. junit. Assert. assertNotNull ( developers )
************************************
************************************
[+] input: modularMultiply() { int[] a = {1, 2, 3}; int[] b = {4, 5, 6}; int[] actual = FastFourierTransform.modularMultiply(a, b); int[] expected = {4, 13, 28, 27, 18}; Assertions."<AssertPlaceHolder>"; }
modularMultiply(int[] a, int[] b) { return modularMultiply(a, b, 7340033, 5, 4404020, 1 << 20); }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
************************************
[+] input: Exception { CacheKey cacheKey = CacheKey.NULL_CACHE_KEY; CacheKey clonedCacheKey = cacheKey.clone(); assertEquals(cacheKey, clonedCacheKey); "<AssertPlaceHolder>"; }
hashCode() { return hashcode; }
[*] target: assertEquals(cacheKey.hashCode(), clonedCacheKey.hashCode())
[-] pred: org. junit. Assert. assertEquals ( cacheKey. hashCode(), clonedCacheKey. hashCode() )
************************************
************************************
[+] input: shouldReturnAEmptyDto_onceEventObjectIsNotValid() { EventDto eventDto = EventMapper.map(null); "<AssertPlaceHolder>"; assertNull(eventDto.getMetadata().getNamespace()); }
map(Event event) { EventDto eventDto = new EventDto();  if (event == null) { return eventDto; }  eventDto.setMetadata(TransformerUtil.fromResource(event.getMetadata())); eventDto.setType(event.getType()); eventDto.setAction(event.getAction()); eventDto.setReason(event.getReason()); eventDto.setMessage(event.getMessage()); eventDto.setFirstTimestamp(getFirstTimestamp(event)); eventDto.setLastTimestamp(getLastTimestamp(event)); eventDto.setCount(getEventCount(event)); eventDto.setReportingComponent(getReportingComponent(event)); eventDto.setReportingInstance(getReportingInstance(event)); eventDto.setInvolvedObject(ObjectReferenceMapper.map(event.getInvolvedObject())); eventDto.setRelated(ObjectReferenceMapper.map(event.getRelated())); return eventDto; }
[*] target: assertNotNull(eventDto)
[-] pred: org. junit. Assert. assertNotNull ( eventDto )
************************************
************************************
[+] input: readResolve() { DCLSingleton instance = DCLSingleton.getInstance();  try (FileOutputStream fileOutputStream = new FileOutputStream(DCLSingleton.class.getResource("").getPath() + "singleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(DCLSingleton.class.getResourceAsStream("singleton.txt")); final DCLSingleton o = (DCLSingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
getInstance() { // 定义这个局部变量可以提高大约25%的性能🚀 依据:Joshua Bloch "Effective Java, Second Edition", p. 283-284 DCLSingleton current = dclSingleton; // 1️⃣ 第一次检查 if (dclSingleton == null) { // 🔒此时为了保证线程安全,我们不清楚其他线程是否已经实例化该对象,所以将类上锁达到互斥效果 synchronized (DCLSingleton.class) { /* * 再次将实例分配给局部变量并检查它是否由其他某个线程初始化 * 当前线程被阻止进入锁定区域。 如果它已初始化，那么我们可以 * 返回先前创建的实例，就像上面检查对象是否为空一样。 */ current = dclSingleton; // 2️⃣ 第二次检查 if (dclSingleton == null) { // 如果此时该类还没有被实例化,那么我们就可以安全的实例化一个单例的该对象实例. current = dclSingleton = new DCLSingleton(); } } } return current; }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamInstanceProfile.cmd")); String actual = exportIamInstanceProfiles.getTFImport(getInstanceProfiles()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSInstanceProfile> awsInstanceProfiles) { return TFImport.builder() .importLines(awsInstanceProfiles.stream() .map(awsInstanceProfile -> TFImportLine.builder() .address(awsInstanceProfile.getTerraformAddress()) .id(awsInstanceProfile.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getVerticesWithoutSuccessorFromCyclicGraphTest() { Graph<String, DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class); graph.addVertex("Vertex_1"); graph.addVertex("Vertex_2"); graph.addVertex("Vertex_3"); graph.addVertex("Vertex_4");  graph.addEdge("Vertex_1", "Vertex_2"); graph.addEdge("Vertex_1", "Vertex_3"); graph.addEdge("Vertex_2", "Vertex_4"); graph.addEdge("Vertex_3", "Vertex_4"); graph.addEdge("Vertex_4", "Vertex_1");  List<String> vertices = GraphUtility.getVerticesWithoutSuccessors(graph);  "<AssertPlaceHolder>"; }
getVerticesWithoutSuccessors(Graph<String, DefaultEdge> graph) { return graph.vertexSet().stream().filter(v -> !Graphs.vertexHasSuccessors(graph, v)).collect(Collectors.toList()); }
[*] target: assertEquals(0, vertices.size())
[-] pred: org. junit. Assert. assertEquals ( 0, vertices. size ( ) )
************************************
************************************
[+] input: test_create() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>";  }
findByVersionId(Long versionId) { if (Objects.isNull(versionId)) { log.debug("version id  is null"); return null; } return selectOne(ImmutableMap.of(RTVI_VERSION_ID, versionId)); }
[*] target: assertEquals(info, refTableVersionInfo)
[-] pred: org. junit. Assert. assertEquals ( info, refTableVersionInfo )
************************************
************************************
[+] input: shouldSelectAllAuthors() { try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) { List<Author> authors = session.selectList("org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors"); "<AssertPlaceHolder>"; } }
selectList(String statement);  /** * Retrieve a list of mapped objects from the statement key and parameter. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsZero() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(0));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: validUnknownAddress_returnsTrue() { String state = "NA"; String zip = "00000"; String street = "** Unknown / Not Given **"; "<AssertPlaceHolder>"; }
isAddressUnknown(String state, String zip, String street) { return isAddressSectionUnk(state, ADDRESS_STATE_UNKNOWN) && isAddressSectionUnk(zip, ADDRESS_ZIP_UNKNOWN) && isAddressSectionUnk(street, ADDRESS_STREET_UNKNOWN); }
[*] target: assertTrue(isAddressUnknown(state, zip, street))
[-] pred: org. junit. Assert. assertTrue ( isAddressUnknown(state, zip, street) )
************************************
************************************
[+] input: Exception { HashCodeHasher hasher = new HashCodeHasher("abcdefghi"); HasherProto hasherProto = hasher.serialize(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.HashCodeHasher", hasherProto.getClassName());  HashCodeHasher hasherD = ProtoUtil.deserialize(hasherProto); hasherD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(hasher, hasherD)
[-] pred: org. junit. Assert. assertEquals ( hasher, hasherD )
************************************
************************************
[+] input: generateForCompany_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(companyService.findById(companyId)).thenReturn(okrCompany); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrCompany.setOkrChildUnits(Collections.singletonList(okrDepartment)); okrDepartment.setParentOkrUnit(okrCompany); okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForCompany(companyId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(companyService, times(1)).findById(companyId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
generateForCompany(long companyId) { OkrCompany okrCompany = companyService.findById(companyId);  Collection<TeamMemberRow> teamMemberRows = new ArrayList<>(); Collection<OkrDepartment> okrDepartments = BranchHelper.collectDepartments(okrCompany); okrDepartments.forEach( department -> teamMemberRows.addAll(generateTeamMemberRowForDepartment(department)));  return teamMemberRows; }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
************************************
[+] input: canLookupPapersFromAuthor() { // given PaperArchiveFacade service = new PaperArchiveFacadeImpl(); LookupPapersFromAuthorRequestDataType anonymousInput = new LookupPapersFromAuthorRequestDataType(); anonymousInput.setAnonymous1("5hbpNILyJe");  // when PaperItemDTOList result = service.lookupPapersFromAuthor(anonymousInput);  // then "<AssertPlaceHolder>"; }
lookupPapersFromAuthor(LookupPapersFromAuthorRequestDataType anonymousInput);
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = AgreementController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = agreementViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, AgreementController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  StringConfigSourceBuilder builder = StringConfigSourceBuilder.builder(); builder.setConfig(config) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  StringConfigSource stringConfigSource = (StringConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new StringConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: getInstance() { final InnerClassSingleton instance1 = InnerClassSingleton.getInstance(); final InnerClassSingleton instance2 = InnerClassSingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { return InnerClassSingletonBuild.innerClassSingleton; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRdsCluster> awsTargetGroups = getAwsRdsClusters();  Maps<Resource> resourceMaps = exportRdsClusters.getResourceMaps(awsTargetGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Rds.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRdsCluster> awsRdsClusters) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsRdsClusters.forEach(awsDbCluster -> { DBCluster dbCluster = awsDbCluster.getDbCluster(); List<AWSRdsInstance> awsRdsInstances = awsDbCluster.getAwsRdsInstances(); resourceMapsBuilder.map( Resource.builder() .api(awsDbCluster.getTerraformResourceName()) .name(awsDbCluster.getResourceName()) .argument("cluster_identifier", TFString.build(dbCluster.dbClusterIdentifier())) .argument("engine", TFString.build(dbCluster.engine())) .argument("engine_version", TFString.build(dbCluster.engineVersion())) .argument("engine_mode", TFString.build(dbCluster.engineMode())) .argument("availability_zones", TFList.build(dbCluster.availabilityZones().stream() .map(az -> TFString.builder().isLineIndent(false).value(az).build()) .collect(Collectors.toList()))) .argument("database_name", TFString.build(dbCluster.databaseName())) .argument("master_username", TFString.build(dbCluster.masterUsername())) .argument("db_cluster_parameter_group_name", TFString.build(dbCluster.dbClusterParameterGroup())) .argument("db_subnet_group_name", TFString.build(dbCluster.dbSubnetGroup())) .argument("port", TFString.build(dbCluster.port().toString())) .argument("storage_encrypted", TFBool.build(dbCluster.storageEncrypted())) .argument("kms_key_id", TFString.build(dbCluster.kmsKeyId())) .argument("vpc_security_group_ids", TFList.build(dbCluster.vpcSecurityGroups().stream() .map(sg -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_security_group.security_groups.{0}.id", sg.vpcSecurityGroupId())) .build()) .collect(Collectors.toList()))) .argument("backtrack_window", TFNumber.build(Optional.ofNullable(dbCluster.backtrackWindow()) .map(Object::toString).orElse(null))) .argument("backup_retention_period", TFNumber.build(dbCluster.backupRetentionPeriod().toString())) .argument("copy_tags_to_snapshot", TFBool.build(dbCluster.copyTagsToSnapshot())) .argument("deletion_protection", TFBool.build(dbCluster.deletionProtection())) .argument("tags", TFMap.build( dbCluster.tagList().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build());  awsRdsInstances.forEach(awsRdsInstance -> { DBInstance dbInstance = awsRdsInstance.getDbInstance(); resourceMapsBuilder.map( Resource.builder() .api(awsRdsInstance.getTerraformResourceName()) .name(awsRdsInstance.getResourceName()) .argument("identifier", TFString.build(dbInstance.dbInstanceIdentifier())) .argument("cluster_identifier", TFString.build(dbInstance.dbClusterIdentifier())) .argument("availability_zone", TFString.build(dbInstance.availabilityZone())) .argument("instance_class", TFString.build(dbInstance.dbInstanceClass())) .argument("engine", TFString.build(dbInstance.engine())) .argument("engine_version", TFString.build(dbInstance.engineVersion())) .argument("db_subnet_group_name", TFString.build(dbInstance.dbSubnetGroup().dbSubnetGroupName())) .argument("monitoring_interval", TFNumber.build(dbInstance.monitoringInterval().toString())) .argument("monitoring_role_arn", TFString.build(dbInstance.monitoringRoleArn())) .argument("performance_insights_enabled", TFBool.build(dbInstance.performanceInsightsEnabled())) .argument("tags", TFMap.build( dbInstance.tagList().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value())))) ) .argument("depends_on", TFList.builder().list( TFExpression.builder().isLineIndent(false) .expression(MessageFormat.format("aws_rds_cluster.{0}", dbInstance.dbClusterIdentifier())) .build()) .build() ) .build()); } ); });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: sendPasswordSuccessfullyChangedMailException() { // given MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendPasswordSuccessfullyChanged(user);  // then "<AssertPlaceHolder>"; }
sendPasswordSuccessfullyChanged(User user) { Map<String, Object> templateModel = new HashMap<>(); templateModel.put("username", user.getName()); String passwordChangedSubject = getLocalizedMessage("locale.EmailSubject.passwordChanged"); boolean mailSent = send(user.getEmail(), passwordChangedSubject, MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel); return mailSent; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
************************************
[+] input: testApply() { var threadName = "santiago"; var threadState = "almost_asleep"; var stackTrace = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[]}"; var startTime = Instant.now(); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(THREAD_STATE, threadState) .put(STACK_TRACE, stackTrace); var expectedEvent = new Event(JFR_METHOD_SAMPLE, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var stack = mock(RecordedStackTrace.class); var sampledThread = mock(RecordedThread.class);  when(stack.getFrames()).thenReturn(List.of()); when(event.getStartTime()).thenReturn(startTime); when(event.getStackTrace()).thenReturn(stack); when(event.getThread(SAMPLED_THREAD)).thenReturn(sampledThread); when(event.getString(STATE)).thenReturn(threadState); when(sampledThread.getJavaName()).thenReturn(threadName);  var mapper = MethodSampleMapper.forExecutionSample();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { RecordedStackTrace trace = ev.getStackTrace(); if (trace == null) { return Collections.emptyList(); }  long timestamp = ev.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); RecordedThread sampledThread = null; if (hasField(ev, SAMPLED_THREAD, SIMPLE_CLASS_NAME)) { sampledThread = ev.getThread(SAMPLED_THREAD); } attr.put(THREAD_NAME, sampledThread == null ? null : sampledThread.getJavaName()); if (hasField(ev, STATE, SIMPLE_CLASS_NAME)) { attr.put(THREAD_STATE, ev.getString(STATE)); } attr.put(STACK_TRACE, MethodSupport.serialize(ev.getStackTrace())); return Collections.singletonList(new Event(JFR_METHOD_SAMPLE, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testGetSecretsProvider_withoutParameter_shouldCreateDefaultClient() {  // Act SecretsProvider secretsProvider = ParamManager.getSecretsProvider();  // Assert "<AssertPlaceHolder>"; assertNotNull(secretsProvider.getClient()); }
getSecretsProvider() { return getProvider(SecretsProvider.class); }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
************************************
[+] input: test_fetchName_notFound() { List<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test"); "<AssertPlaceHolder>"; }
fetchAliveTaskDefinitionByName(String taskName) { String sql = getSelectSQL(TASK_DEF_MODEL_NAME + ".name = ?"); return jdbcTemplate.query(sql, TaskDefinitionMapper.INSTANCE, taskName).stream() .filter(taskDef -> !taskDef.isArchived()) .collect(Collectors.toList()); }
[*] target: assertTrue(fetched.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( fetched. isEmpty ( ) )
************************************
************************************
[+] input: test() { long timestamp = System.currentTimeMillis(); String msg = "Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-127.0.0.1:12345, Pool Size: 1 (active: 0, core: 1, max: 1, largest: 1), Task: 6 (completed: 6), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://127.0.0.1:12345!, dubbo version: 2.7.3, current host: 127.0.0.1"; ThreadPoolExhaustedEvent event = new ThreadPoolExhaustedEvent(this, msg);  assertEquals(this, event.getSource()); "<AssertPlaceHolder>"; assertTrue(event.getTimestamp() >= timestamp); }
getMsg() { return msg; }
[*] target: assertEquals(msg, event.getMsg())
[-] pred: org. junit. Assert. assertEquals ( msg, event. getMsg() )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);   assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testEnforced02() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = null; String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
enforced(final AwsServiceCache awsservice, final String siteId, final String value, final Object... objs) {  boolean enforced = false; Long contentLength = (Long) objs[0]; Long maxContentLength = getMaxContentLength(value);  if (maxContentLength != null) { enforced = (contentLength == null || contentLength.longValue() == 0) || (contentLength.longValue() > maxContentLength.longValue()); }  return enforced; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: convert() { // given final BigDecimalConverter converter = new BigDecimalConverter(); final String rawValue = "1.2";  // when final BigDecimal value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("1.2", value.toString()); }
convert(final String value) throws IllegalArgumentException { return new BigDecimal(value); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: extractTransferContract_messageWithoutTransferContract_returnNull() { /* ARRANGE */ final var message = getArtifactRequestMessageWithoutTransferContract();  /* ACT */ final var result = MessageUtils.extractTransferContract(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
extractTransferContract(final ArtifactRequestMessage message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.getTransferContract(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: Exception { try (InputStream in = Resources.getResourceAsStream(CLASS_LOADER, JPETSTORE_PROPERTIES)) { "<AssertPlaceHolder>"; } }
getResourceAsStream(ClassLoader loader, String resource) throws IOException { InputStream in = classLoaderWrapper.getResourceAsStream(resource, loader); if (in == null) { throw new IOException("Could not find resource " + resource); } return in; }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
************************************
[+] input: DbxException { // given DropboxClient testee = new DropboxClient(dropboxService);  Metadata m1 = new Metadata("folder1"); Metadata m2 = new Metadata("folder2"); List<Metadata> metadataList = List.of(m1, m2); ListFolderResult listFolderResult = new ListFolderResult(metadataList, "2", true);  when(dropboxService.files().listFolder(anyString())).thenReturn(listFolderResult); clearInvocations(dropboxService); // TODO wut?  // when boolean result = testee.doesFileExist("testFileToUpload.txt");  // then verify(dropboxService.files()).listFolder(""); "<AssertPlaceHolder>"; }
doesFileExist(String fileName) throws DbxException { ListFolderResult result = dropboxService.files().listFolder(""); return result.getEntries().stream() .anyMatch(entry -> StringUtils.equalsIgnoreCase(entry.getName(), fileName)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testBoldList() { final String input = """ [LIST] [*][B]bold[/B] not [*][B]bold[/B] not [*][B]bold[/B] not [/LIST] """; final String expected = """  * **bold** not * **bold** not * **bold** not"""; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
convertToMarkdown(String s) { // Deduplication, remove spaces in tags int index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, true); if (closingIndex == -1) { index++; continue; }  s = s.substring(0, index) + this.currentContent + s.substring(closingIndex); }  // Iterate until no whitespaces are left (else they might only be moved into the upper tag...) String result; while ((result = this.removeTrailingWhitespaces(s)) != null) { s = result; }  // Tag conversion index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, false); if (closingIndex == -1) { // No closing tag/no simple match index++; continue; }  if (this.currentContent == null) { // Simple opening tag match final String replacement = SIMPLE_SINGLETON_REPLACERS.get(this.currentTag); s = s.substring(0, index) + replacement + s.substring(closingIndex); continue; }  final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer == null) { // No replacer found index++; continue; }  String processed = replacer.process(this.currentTag, this.currentArg, this.currentContent); if (processed == null) { index++; } else { if (replacer.appendNewline()) { processed += "\n"; }  s = s.substring(0, index) + processed + s.substring(closingIndex); if (replacer.hasRawContents()) { index += processed.length(); } } }  // Removes newlines from the end of the last tag adds newlines final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer != null && replacer.appendNewline()) { final int lastChar = s.length() - 1; if (s.lastIndexOf('\n') == lastChar) { return s.substring(0, lastChar); } }  return cleanup(s); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: Exception { List<RecordedFrame> stack = new ArrayList<>(); for (int i = 0; i < 500; i++) { var method = buildMethod("Act", "io" + i, ""); stack.add(buildFrame(method, 21 + i, 77 + i)); }  String payloads = IntStream.range(0, 55) .mapToObj( i -> "{"desc":"Act.io" + i + "","line":"" + (21 + i) + "","bytecodeIndex":"" + (77 + i) + ""}") .collect(Collectors.joining(",")); var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[" + payloads + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.empty()); "<AssertPlaceHolder>"; }
empty() { List<RecordedFrame> payload = Collections.emptyList(); try { return new String(jsonWrite(payload, Optional.empty()).getBytes()); } catch (IOException e) { throw new RuntimeException("Failed to generate stacktrace json", e); } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: default_returnsDefault() { var defaultEmail = "test@fake.com";  var sut = new PatientEmailsHolder(defaultEmail, List.of(defaultEmail));  "<AssertPlaceHolder>"; }
getDefault() { if (primary == null) { // If a default email is not specified, use the first element of the // patient email list if (all != null && !all.isEmpty()) { return all.get(0); }  return null; }  return primary; }
[*] target: assertEquals(defaultEmail, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( defaultEmail, sut. getDefault() )
************************************
************************************
[+] input: shouldNotApplyIfNoCommandline() { var existing = makeBasicResource(null);  var testClass = new TruncateCommandLineWhenMetricsEnabled.CommandLineTruncator();  var result = testClass.apply(existing, config); "<AssertPlaceHolder>"; }
apply(Resource existing, ConfigProperties config) { boolean forceFullCommandline = config.getBoolean(METRICS_FULL_COMMAND_LINE, false); if (forceFullCommandline) { return existing; }  Resource resource = existing; if (resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS) != null) { List<String> newCommandArgs = truncate(resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS)); if (newCommandArgs != null) { resource = resource.merge( Resource.create( Attributes.of( ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS, newCommandArgs))); } }  String commandLine = resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_LINE); if (commandLine != null && commandLine.length() > MAX_LENGTH) { String newCommandLine = commandLine.substring(0, MAX_LENGTH - 3) + "..."; resource = resource.merge( Resource.create( Attributes.of( ProcessIncubatingAttributes.PROCESS_COMMAND_LINE, newCommandLine))); }  if (existing != resource) { logger.fine( "Metrics are enabled. Truncating process.command_line and process.command_args resource attributes."); } return resource; }
[*] target: assertSame(existing, result)
[-] pred: org. junit. Assert. assertSame ( existing, result )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Subnet.cmd")); String actual = exportSubnets.getTFImport(getAwsSubnets()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSSubnet> awsSubnets) { return TFImport.builder() .importLines(awsSubnets.stream() .map(awsSubnet -> TFImportLine.builder() .address(awsSubnet.getTerraformAddress()) .id(awsSubnet.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testPostAndGetBody() { String testValue = "testValue"; when(restTemplate.postForEntity(startsWith("http://document:8080"), any(HttpEntity.class), eq(String.class))) .thenReturn(new ResponseEntity<>(testValue, HttpStatus.OK)); String tenantId = "smart-upload"; String responseBody = buildRestHelper(null) .withQueryParam("tenantId", tenantId) .withQueryParam("userId", "userId_123") .withHeader("header1", "test_header") .withHeader("header2", List.of("value1", "value2")) .postAndGetBody(restTemplate, String.class);  "<AssertPlaceHolder>"; verify(restTemplate).postForEntity(uriCaptor.capture(), httpEntityCaptor.capture(), responseTypeCaptor.capture()); assertEquals("http://document:8080/documents/search/?tenantId=" + tenantId + "&userId=userId_123", uriCaptor.getValue()); assertEquals(String.class, responseTypeCaptor.getValue()); HttpEntity<List<UUID>> httpEntity = httpEntityCaptor.getValue(); assertTrue(httpEntity.getHeaders().getAccept().contains(MediaType.APPLICATION_JSON)); assertEquals(MediaType.APPLICATION_FORM_URLENCODED, httpEntity.getHeaders().getContentType()); assertTrue(httpEntity.getHeaders().get("Cookie").contains(TEST_COOKIE)); assertTrue(httpEntity.getHeaders().get("Authorization").contains("Bearer 1234")); assertTrue(httpEntity.getHeaders().get("header1").contains("test_header")); assertTrue(httpEntity.getHeaders().get("header2").containsAll(List.of("value1", "value2"))); }
postAndGetBody(RestTemplate restTemplate, Class<T> responseType) { return post(restTemplate, responseType).getBody(); }
[*] target: assertEquals(testValue, responseBody)
[-] pred: org. junit. Assert. assertEquals ( testValue, responseBody )
************************************
************************************
[+] input: Exception { // given String siteId = null; String oldDocumentId = "acd4be1b-9466-4dcd-b8b8-e5b19135b460"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, "karate", MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  documents = service.searchFulltext(siteId, "test.pdf", MAX); assertEquals(1, documents.size());  documents = service.searchFulltext(siteId, "bleh.pdf", MAX); assertEquals(0, documents.size());  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: extractHeaderFromMultipartMessage_mapWithoutHeaderValue_returnNull() { /* ARRANGE */ final var response = new HashMap<String, String>(); response.put("payload", "some payload values");  /* ACT */ final var result = MessageUtils.extractHeaderFromMultipartMessage(response);  /* ACT & ASSERT */ "<AssertPlaceHolder>"; }
extractHeaderFromMultipartMessage(final Map<String, String> message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.get("header"); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: it_recognizes_end_of_statement_when_next_line_is_verb() { CobolLine current = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor); CobolLine next = new CobolLine("                   CONTINUE", tokenExtractor);  boolean isEnd = Interpreter.isEndOfStatement(current, next);  "<AssertPlaceHolder>"; }
isEndOfStatement(CobolLine currentLine, CobolLine nextMeaningfulLine) { if (nextMeaningfulLine == null) { return true; } if (currentLine.getTrimmedString().endsWith(Constants.PERIOD)) { return true; } if (currentLine.getTrimmedString().toUpperCase(Locale.ROOT).endsWith(Constants.END_EXEC_TOKEN)) { return true; } if (containsOnlyPeriod(nextMeaningfulLine)) { return false; } if (currentLine.containsToken(Constants.CALL_TOKEN)) { List<String> currentTokens = currentLine.getTokens(); int callTokenCount = 0, endCallTokenCount = 0; for (String token : currentTokens) { if (token.equals(Constants.CALL_TOKEN)) { callTokenCount++; } if (token.equals(Constants.END_CALL_TOKEN)) { endCallTokenCount++; } } if (callTokenCount == endCallTokenCount) { return true; } if (nextMeaningfulLine.containsToken("ON")) { return false; } if (currentLine.containsToken("ON")) { return false; } } if (CobolVerbs.isStartOrEndCobolVerb(nextMeaningfulLine.getTokens().get(0))) { return true; }  return false; }
[*] target: assertTrue(isEnd)
[-] pred: org. junit. Assert. assertTrue ( isEnd )
************************************
************************************
[+] input: extractRequestedElement_messageWithoutRequestedElement_returnNull() { /* ARRANGE */ final var message = getDescriptionRequestMessageWithoutRequestedElement();  /* ACT */ final var result = MessageUtils.extractRequestedElement(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
extractRequestedElement(final DescriptionRequestMessage message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.getRequestedElement(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testSetupEmptyCredentialsGraphCreateDefaultUser() { final String defaultUser = "user"; final String defaultPassword = "pass"; final Map<String, Object> configMap = configBuilder().defaultUser(defaultUser).defaultPassword(defaultPassword).create(); final JanusGraph graph = StorageSetup.getInMemoryGraph(); final JanusGraphAbstractAuthenticator authenticator = createInitializedAuthenticator(configMap, graph);  authenticator.setup(configMap);  CredentialTraversalSource credentialSource = graph.traversal(CredentialTraversalSource.class); List<Vertex> users = credentialSource.users(defaultUser).toList(); "<AssertPlaceHolder>"; }
setup(final Map<String,Object> config) { logger.info("Initializing authentication with the {}", this.getClass().getName()); Preconditions.checkArgument(config != null, String.format( "Could not configure a %s - provide a 'config' in the 'authentication' settings", this.getClass().getName()));  Preconditions.checkState(config.containsKey(CONFIG_CREDENTIALS_DB), String.format( "Credential configuration missing the %s key that points to a graph config file or graph name", CONFIG_CREDENTIALS_DB)); Preconditions.checkState(config.containsKey(CONFIG_DEFAULT_USER), String.format( "Credential configuration missing the %s key for the default user", CONFIG_DEFAULT_USER)); Preconditions.checkState(config.containsKey(CONFIG_DEFAULT_PASSWORD), String.format( "Credential configuration missing the %s key for the default password", CONFIG_DEFAULT_PASSWORD));  final JanusGraph graph = openGraph(config.get(CONFIG_CREDENTIALS_DB).toString()); credentials = createCredentials(graph); graph.tx().rollback(); ManagementSystem mgmt = (ManagementSystem) graph.openManagement(); if (!mgmt.containsGraphIndex(USERNAME_INDEX_NAME)) { final PropertyKey username = mgmt.makePropertyKey(PROPERTY_USERNAME).dataType(String.class).cardinality(Cardinality.SINGLE).make(); mgmt.buildIndex(USERNAME_INDEX_NAME, Vertex.class).addKey(username).unique().buildCompositeIndex(); mgmt.commit(); mgmt = (ManagementSystem) graph.openManagement(); final JanusGraphIndex index = mgmt.getGraphIndex(USERNAME_INDEX_NAME); if (!index.getIndexStatus(username).equals(SchemaStatus.ENABLED)) { try { mgmt = (ManagementSystem) graph.openManagement(); mgmt.updateIndex(mgmt.getGraphIndex(USERNAME_INDEX_NAME), SchemaAction.REINDEX); ManagementSystem.awaitGraphIndexStatus(graph, USERNAME_INDEX_NAME).status(SchemaStatus.ENABLED).call(); mgmt.commit(); } catch (InterruptedException rude) { mgmt.rollback(); throw new RuntimeException("Timed out waiting for byUsername index to be created on credential graph", rude); } } }  final String defaultUser = config.get(CONFIG_DEFAULT_USER).toString(); if (!userExists(defaultUser)) { createUser(defaultUser, config.get(CONFIG_DEFAULT_PASSWORD).toString()); } }
[*] target: assertEquals(1, users.size())
[-] pred: org. junit. Assert. assertEquals ( 1, users. size ( ) )
************************************
************************************
[+] input: testDelete() { Document d = getBaseDocument("/jdocs/sample_1.json");  // nothing should happen d.deletePath("$.laksdlkj");  boolean b = d.pathExists("$.members[0].phones[0].number"); assertEquals(true, b);  d.deletePath("$.members[0].phones[0].number"); b = d.pathExists("$.members[0].phones[0].number"); assertEquals(false, b);  d.deletePath("$.members[0].phones[0]"); int size = d.getArraySize("$.members[0].phones[]"); assertEquals(size, 1);  d.deletePath("$.members[sex=female]"); b = d.pathExists("$.members[sex=female]"); assertEquals(false, b);  String expected = getCompressedJson("/jdocs/sample_4_expected.json"); String actual = d.getJson();  "<AssertPlaceHolder>";  // nothing should happen d.deletePath("$.members[2]"); d.deletePath("$.members[0].phones[1]");  // just to show that we can specify [] to denote we are deleting an array block d.deletePath("$.members[]"); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testApplyWithThreadName() {  Attributes attributes = new Attributes().put(THREAD_NAME, threadName);  Metric gauge1 = new Gauge(JFR_THREAD_CPU_LOAD_USER, user, timestamp, attributes); Metric gauge2 = new Gauge(JFR_THREAD_CPU_LOAD_SYSTEM, system, timestamp, attributes); List<Metric> expected = List.of(gauge1, gauge2);  RecordedEvent event = mock(RecordedEvent.class); RecordedThread recordedThread = mock(RecordedThread.class);  when(event.getStartTime()).thenReturn(instant); when(event.getDouble(USER)).thenReturn(user); when(event.getDouble(SYSTEM)).thenReturn(system); when(event.getValue(EVENT_THREAD)).thenReturn(recordedThread); when(recordedThread.getJavaName()).thenReturn(threadName);  CPUThreadLoadMapper mapper = new CPUThreadLoadMapper();  List<? extends Metric> result = mapper.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { Optional<String> possibleThreadName = Workarounds.getThreadName(ev); if (possibleThreadName.isPresent()) { String threadName = possibleThreadName.get(); long timestamp = ev.getStartTime().toEpochMilli(); Attributes attr = new Attributes().put(THREAD_NAME, threadName); double userGaugeValue = 0; if (hasField(ev, USER, SIMPLE_CLASS_NAME)) { userGaugeValue = ev.getDouble(USER); } double systemGaugeValue = 0; if (hasField(ev, SYSTEM, SIMPLE_CLASS_NAME)) { systemGaugeValue = ev.getDouble(SYSTEM); } // Do we need to throttle these events somehow? Or just send everything? return Arrays.asList( new Gauge(JFR_THREAD_CPU_LOAD_USER, userGaugeValue, timestamp, attr), new Gauge(JFR_THREAD_CPU_LOAD_SYSTEM, systemGaugeValue, timestamp, attr)); } return Collections.emptyList(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: given_an_available_object_when_couchbase_contains_then_return_true() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); ExistsResult existsResult = mock(ExistsResult.class); when(existsResult.exists()).thenReturn(true); when(collection.exists(idempotencyKey.getKeyValue())).thenReturn(existsResult);  //When Boolean isContain = couchbaseIdempotentRepository.contains(idempotencyKey);  //Then verify(collection, times(1)).exists(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
contains(IdempotencyKey key) { return collection.exists(key.getKeyValue()).exists(); }
[*] target: assertTrue(isContain)
[-] pred: org. junit. Assert. assertTrue ( isContain )
************************************
************************************
[+] input: testGetAuthenticationInfo() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson("{"auth": "info"}");  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; assertEquals("{"auth": "info"}", authInfo); }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNotNull(authInfo)
[-] pred: org. junit. Assert. assertNotNull ( authInfo )
************************************
************************************
[+] input: GestaltException { KubernetesSecretConfigSource source = new KubernetesSecretConfigSource(kubernetesPath); Assertions."<AssertPlaceHolder>"; }
hasStream() { return false; }
[*] target: assertFalse(source.hasStream())
[-] pred: org. junit. Assert. assertFalse ( source. hasStream() )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSingleQuote() { final String expression = "'Someone\'s CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Someone's CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: testCRC2CanCopyItself() { byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  CRC32 crc1 = new CRC32();  crc1.update(buf1, 0, buf1.length);  CRC32 crc2 = crc1.copy();  crc1.update(buf2, 0, buf1.length); crc2.update(buf2, 0, buf1.length);  long expected = crc1.getValue(); long actual = crc2.getValue();  "<AssertPlaceHolder>"; }
getValue() { return v & 0xffffffffL; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDoVolatilityAssert_aboveUpperLimit() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "120"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility >= 0 && volatility <= expected; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: testSerialization() { FeatureMap fm = buildMap(); FeatureDomainProto fmProto = fm.serialize(); FeatureMap deserFm = FeatureMap.deserialize(fmProto); assertEquals(fm, deserFm);  ImmutableFeatureMap ifm = new ImmutableFeatureMap(fm); FeatureDomainProto ifmProto = ifm.serialize(); FeatureMap deserIfm = FeatureMap.deserialize(ifmProto); "<AssertPlaceHolder>"; }
deserialize(FeatureDomainProto proto) { return ProtoUtil.deserialize(proto); }
[*] target: assertEquals(ifm, deserIfm)
[-] pred: org. junit. Assert. assertEquals ( ifm, deserIfm )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(MediaType.JSON, new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes()))).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: ValidationException { for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) { // given DocumentItem doc0 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc0.setPath("Chicago/test2.pdf"); this.service.saveDocument(siteId, doc0, null);  DocumentItem doc1 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc1.setPath("abc.pdf"); this.service.saveDocument(siteId, doc1, null);  DocumentItem doc2 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc2.setPath("aaaa/test3.pdf"); this.service.saveDocument(siteId, doc2, null);  PaginationMapToken startkey = null; String folder = ""; SearchQuery q = new SearchQuery().meta(new SearchMetaCriteria().folder(folder));  // when PaginationResults<DynamicDocumentItem> results = this.searchService.search(siteId, q, null, startkey, MAX_RESULTS);  // then final int expected = 3; List<DynamicDocumentItem> list = results.getResults(); "<AssertPlaceHolder>"; assertNull(results.getToken());  int i = 0; assertNotNull(list.get(i).getDocumentId()); assertEquals("aaaa", list.get(i++).getPath()); assertEquals("Chicago", list.get(i++).getPath()); assertEquals("abc.pdf", list.get(i++).getPath()); } }
search(final String siteId, final SearchQuery query, final SearchResponseFields searchResponseFields, final PaginationMapToken token, final int maxresults) throws ValidationException {  SearchMetaCriteria meta = query.getMeta(); PaginationResults<DynamicDocumentItem> results;  if (meta != null) {  if (meta.path() != null) {  try { Map<String, String> map = this.folderIndexProcesor.getIndex(siteId, meta.path()); String documentId = map.get("documentId");  DocumentItem item = this.docService.findDocument(siteId, documentId);  DynamicDocumentItem result = new DocumentItemToDynamicDocumentItem().apply(item); results = new PaginationResults<>(Collections.singletonList(result), null);  } catch (IOException e) { results = new PaginationResults<>(Collections.emptyList(), null); }  } else { updateFolderMetaData(meta); results = searchByMeta(siteId, meta, token, maxresults); }  } else if (query.getAttribute() != null || !notNull(query.getAttributes()).isEmpty()) {  SearchAttributeCriteria search = query.getAttribute();  if (!notNull(query.getAttributes()).isEmpty()) {  Collection<String> list = query.getAttributes().stream() .map(SearchAttributeCriteria::getKey).collect(Collectors.toSet());  if (list.size() != query.getAttributes().size()) { throw new ValidationException(Collections .singletonList(new ValidationErrorImpl().error("duplicate attributes in query"))); }  search = createAttributesCriteria(siteId, query); }  results = searchByAttribute(siteId, query, search, token, maxresults);  } else {  SearchTagCriteria search = query.getTag(); results = searchByTag(siteId, query, search, token, maxresults, null); }  addResponseFields(siteId, results.getResults(), searchResponseFields); return results; }
[*] target: assertEquals(expected, list.size())
[-] pred: org. junit. Assert. assertEquals ( expected, list. size ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsClusterParameterGroup.cmd")); String actual = exportRdsClusterParameterGroups.getTFImport(getAwsRdsClusterParameterGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRdsClusterParameterGroup> awsRdsClusterParameterGroups) { return TFImport.builder() .importLines(awsRdsClusterParameterGroups.stream() .map(awsRdsClusterParameterGroup -> TFImportLine.builder() .address(awsRdsClusterParameterGroup.getTerraformAddress()) .id(awsRdsClusterParameterGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { // given Maps<Resource> resourceMaps = exportNatGateways.getResourceMaps(getNatGateways()); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/NatGateway.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSNatGateway> awsNatGateways) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSNatGateway awsNatGateway : awsNatGateways) { NatGateway natGateway = awsNatGateway.getNatGateway(); List<NatGatewayAddress> natGatewayAddresses = natGateway.natGatewayAddresses(); for (NatGatewayAddress natGatewayAddress : natGatewayAddresses) { resourceMapsBuilder.map( Resource.builder() .api(awsNatGateway.getTerraformResourceName()) .name(awsNatGateway.getResourceName()) .argument("allocation_id", TFString.build(natGatewayAddress.allocationId())) .argument("subnet_id", TFString.build(natGateway.subnetId())) .argument("tags", TFMap.build( natGateway.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); } } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldProperlyGetWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupList(GroupRequestArgs requestArgs);  /** * Get all the {@link GroupDiscussionInfo}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: testCRC32CanCombineValues() {  byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  long crc1 = getValue(Arrays.asList(buf1)); long crc2 = getValue(Arrays.asList(buf2)); long expected = getValue(Arrays.asList(buf1, buf2));  long actual = CRC32.combine(crc1, crc2, buf2.length);  "<AssertPlaceHolder>"; }
combine(long crc1, long crc2, long len2) { long row; long[] even = new long[GF2_DIM]; long[] odd = new long[GF2_DIM];  // degenerate case (also disallow negative lengths) if (len2 <= 0) return crc1;  // put operator for one zero bit in odd odd[0] = 0xedb88320L; // CRC-32 polynomial row = 1; for (int n = 1; n < GF2_DIM; n++) { odd[n] = row; row <<= 1; }  // put operator for two zero bits in even gf2_matrix_square(even, odd);  // put operator for four zero bits in odd gf2_matrix_square(odd, even);  // apply len2 zeros to crc1 (first square will put the operator for one // zero byte, eight zero bits, in even) do { // apply zeros operator for this bit of len2 gf2_matrix_square(even, odd); if ((len2 & 1) != 0) crc1 = gf2_matrix_times(even, crc1); len2 >>= 1;  // if no more bits set, then done if (len2 == 0) break;  // another iteration of the loop with odd and even swapped gf2_matrix_square(odd, even); if ((len2 & 1) != 0) crc1 = gf2_matrix_times(odd, crc1); len2 >>= 1;  // if no more bits set, then done } while (len2 != 0);  /* return combined crc */ crc1 ^= crc2; return crc1; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCreateSign() { SoMap map = SoMap.getSoMap() .set("name", "zhang") .set("age", 18) .set("sex", "女"); SaManager.getSaSignTemplate().setSignConfig(new SaSignConfig().setSecretKey(key)); String sign = SaManager.getSaSignTemplate().createSign(map); Assertions.assertEquals(sign, "6f5e844a53e74363c2f6b24f64c4f0ff");  // 多次签名，结果一致 String sign2 = SaManager.getSaSignTemplate().createSign(map); Assertions."<AssertPlaceHolder>"; }
createSign(Map<String, ?> paramsMap) { String secretKey = getSecretKey(); SaSignException.notEmpty(secretKey, "参与参数签名的秘钥不可为空", SaErrorCode.CODE_12201);  // 如果调用者不小心传入了 sign 参数，则此处需要将 sign 参数排除在外 if(paramsMap.containsKey(sign)) { // 为了保证不影响原有的 paramsMap，此处需要再复制一份 paramsMap = new TreeMap<>(paramsMap); paramsMap.remove(sign); }  // 计算签名 String paramsStr = joinParamsDictSort(paramsMap); String fullStr = paramsStr + "&" + key + "=" + secretKey; String signStr = abstractStr(fullStr);  // 输入日志，方便调试 log.debug("fullStr：{}", fullStr); log.debug("signStr：{}", signStr);  // 返回 return signStr; }
[*] target: assertEquals(sign, sign2)
[-] pred: org. junit. Assert. assertEquals ( sign, sign2 )
************************************
************************************
[+] input: testDoneAfterSet() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.set(42); "<AssertPlaceHolder>"; }
isDone() { return cancelled || done.getCount() == 0; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone() )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  when(mockConnection.getSession()).thenReturn(mockSession); when(mockSession.getLog()).thenReturn(mockLogger);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision.and.changelist/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision.and.changelist/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
visit(final String originalPom, final String revision, final String sha1, final String changeList){ String modified; modified = originalPom.replace("${revision}", revision); if (modified.contains("${sha1}")) { modified = modified.replace("${sha1}", sha1 != null ? sha1 : ""); }  if (modified.contains("${changelist}")) { modified = modified.replace("${changelist}", changeList != null ? changeList : ""); }  return modified; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
************************************
[+] input: Exception { Properties p = ConfigUtils.loadProperties("META-INF/dubbo/internal/org.apache.dubbo.common.threadpool.ThreadPool", false);  Properties expected = new Properties(); expected.put("fixed", "org.apache.dubbo.common.threadpool.support.fixed.FixedThreadPool"); expected.put("cached", "org.apache.dubbo.common.threadpool.support.cached.CachedThreadPool"); expected.put("limited", "org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool"); expected.put("eager", "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPool");  "<AssertPlaceHolder>"; }
loadProperties(String fileName, boolean allowMultiFile) { return loadProperties(fileName, allowMultiFile, false); }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealInfo", infoProto.getClassName()); RealInfoProto proto = infoProto.getSerializedData().unpack(RealInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: Exception { // given String siteId = "5da6c0ef-20ff-45d1-8c08-d5fb0cfcf9b4"; String oldDocumentId = "666b7588-fc01-4ed3-8b3d-3e8d13264997"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert_siteId.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then String text = "9e803220-127e-45d9-98c6-7b8430812cb5"; List<String> documents = service.searchFulltext(siteId, text, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: hasStream() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource();  Assertions."<AssertPlaceHolder>"; }
hasStream() { return true; }
[*] target: assertTrue(configSource.hasStream())
[-] pred: org. junit. Assert. assertTrue ( configSource. hasStream() )
************************************
************************************
[+] input: shouldVerifyIncorrectPassword() { User user = userDataProvider.full(); String username = user.getUsername();  when(userRepository.findByUsername(username)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(username, "wrong_password");  "<AssertPlaceHolder>"; }
passwordIsCorrect(String usernameOrEmail, String password) { log.info("Verifying password for: " + usernameOrEmail);  return userRepository.findByUsername(usernameOrEmail) .or(() -> userRepository.findByEmail(usernameOrEmail)) .map(u -> Objects.equals(u.getPassword(), password)) .orElse(false); }
[*] target: assertFalse(verified)
[-] pred: org. junit. Assert. assertFalse ( verified )
************************************
************************************
[+] input: getKeysWithIndex() { var indexKey = "myIndex"; var one = "1"; var two = "1"; var map = new IndexedMap<Integer, String>().indexBuilder() .withMapper(str -> Integer.parseInt(str)) .withName(indexKey) .build();  map.put(1, one); map.put(2, two);  var keys = map.keySet(indexKey, 1).stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions.assertTrue(keys.contains(2)); Assertions."<AssertPlaceHolder>"; }
size() { return this.entries.size(); }
[*] target: assertEquals(2, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 2, keys. size() )
************************************
************************************
[+] input: testEqualsFalse() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Integer> p2 = new Property<Integer>("foo", Integer.class); final Property<Boolean> p3 = new Property<Boolean>("bar", Boolean.class);  assertFalse(p1.equals(null)); assertFalse(p1.equals(Boolean.TRUE)); assertFalse(p1.equals(p2)); "<AssertPlaceHolder>"; }
equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  final Property<?> p = (Property<?>) o; return name.equals(p.name) && type.equals(p.type); }
[*] target: assertFalse(p1.equals(p3))
[-] pred: org. junit. Assert. assertFalse ( p1. equals ( p3 ) )
************************************
************************************
[+] input: getResourceMaps() { //given List<AWSPolicy> awsPolicy = getAwsPolicies();  Maps<Resource> resourceMaps = exportIamPolicies.getResourceMaps(awsPolicy);  String actual = resourceMaps.unmarshall(); log.debug("actual => \n{}", actual);  String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamPolicy.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSPolicy> awsPolicies) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSPolicy awsPolicy : awsPolicies) { Policy policy = awsPolicy.getPolicy(); String document = awsPolicy.getDocument(); resourceMapsBuilder.map( Resource.builder() .api(awsPolicy.getTerraformResourceName()) .name(awsPolicy.getResourceName()) .argument("name", TFString.build(policy.policyName())) .argument("path", TFString.build(policy.path())) .argument("description", TFString.build(policy.description())) .argument("policy", TFString.builder().isMultiline(true).value(document).build()) .build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { // given DropboxClient testee = spy(new DropboxClient(dropboxService));  // Mocking a file is not a good idea File testFileToUpload = new File("src/test/resources/testFileToUpload.txt"); if (!testFileToUpload.exists()) { System.out.println("Test file does not exist..."); } // TODO what to return here? when(dropboxService.files().uploadBuilder(anyString()).uploadAndFinish(any())).thenReturn(null); doReturn(true).when(testee).doesFileExist(anyString());  // when boolean result = testee.upload(testFileToUpload);  // then // TODO verify each method call in call chain? verify(dropboxService.files().uploadBuilder("/testFileToUpload.txt")).uploadAndFinish(any(FileInputStream.class)); verify(testee).doesFileExist("testFileToUpload.txt"); "<AssertPlaceHolder>"; }
doesFileExist(String fileName) throws DbxException { ListFolderResult result = dropboxService.files().listFolder(""); return result.getEntries().stream() .anyMatch(entry -> StringUtils.equalsIgnoreCase(entry.getName(), fileName)); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: extractRejectionReason_validRejectionMessage_returnRejectionReason() { /* ARRANGE */ final var rejectionReason = RejectionReason.NOT_FOUND; final var message = getRejectionMessage(rejectionReason);  /* ACT */ final var result = MessageUtils.extractRejectionReason(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
extractRejectionReason(final RejectionMessage message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.getRejectionReason(); }
[*] target: assertEquals(rejectionReason, result)
[-] pred: org. junit. Assert. assertEquals ( rejectionReason, result )
************************************
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new IfSqlNode(mixedContents(new TextSqlNode("WHERE ID = ?")), "false" )); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
getSql(){ DynamicContext context = new DynamicContext(configuration, null); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class<?> parameterType = Object.class; SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); BoundSql boundSql = sqlSource.getBoundSql(null); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql.getSql(); }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("CC"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, atomList.get(0).getElement()); assertEquals(ChemEl.C, atomList.get(1).getElement()); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: testResolveEmptyArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); when(mock.params()).thenReturn(new HandlerAdapter.ResolvableParam[0]); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(0, args.length); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), senderKeys, 1);  // should be assertFalse "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  // TODO: The code currently supports MailboxStoragePayload objects inside ProtectedStorageEntry. Fix this. if (protectedStoragePayload instanceof MailboxStoragePayload) { MailboxStoragePayload mailboxStoragePayload = (MailboxStoragePayload) this.getProtectedStoragePayload(); return mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  } else { boolean result = this.ownerPubKey.equals(protectedStoragePayload.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForAddOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; } }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: testSearchNonExistingFlight() { List<String> foundFlights = flightService.searchFlights("XXX");  "<AssertPlaceHolder>"; }
searchFlights(String query) { throw new ExerciseNotCompletedException(); }
[*] target: assertNotNull(foundFlights)
[-] pred: org. junit. Assert. assertNotNull ( foundFlights )
************************************
************************************
[+] input: getAllProducts() { wireMockServer.stubFor(get(urlPathEqualTo("/products")) .willReturn(aResponse() .withStatus(200) .withHeader("Content-Type", "application/json") .withBody("[" + "{"id":"9","type":"CREDIT_CARD","name":"GEM Visa","version":"v2"},"+ "{"id":"10","type":"CREDIT_CARD","name":"28 Degrees","version":"v1"}"+ "]")));  List<Product> expected = Arrays.asList(new Product("9", "CREDIT_CARD", "GEM Visa", "v2"), new Product("10", "CREDIT_CARD", "28 Degrees", "v1"));  List<Product> products = productService.getAllProducts();  "<AssertPlaceHolder>"; }
getAllProducts() { return restTemplate.exchange("/products", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<List<Product>>(){}).getBody(); }
[*] target: assertEquals(expected, products)
[-] pred: org. junit. Assert. assertEquals ( expected, products )
************************************
************************************
[+] input: buildUsageUntilDeletion() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_UNTIL_DELETION, null, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); properties.setProperty( PropertyKey.clusterId.getKeyName(), "test-cluster-id"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-cluster-id")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: getResourceMaps() { List<AWSCacheCluster> awsCacheClusters = getAwsCacheClusters();  Maps<Resource> resourceMaps = exportElastiCacheClusters.getResourceMaps(awsCacheClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Elasticache.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSCacheCluster> awsCacheClusters) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsCacheClusters.forEach(awsCacheCluster -> { CacheCluster cacheCluster = awsCacheCluster.getCacheCluster(); List<Tag> tags = awsCacheCluster.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsCacheCluster.getTerraformResourceName()) .name(awsCacheCluster.getResourceName()) .argument("cluster_id", TFString.build(cacheCluster.cacheClusterId())) .argument("node_type", TFString.build(cacheCluster.cacheNodeType())) .argument("num_cache_nodes", TFNumber.build(cacheCluster.numCacheNodes())) // Optional, Memcached only //                            .argument("az_mode", TFString.build("")) .argument("engine", TFString.build(cacheCluster.engine())) .argument("engine_version", TFString.build(cacheCluster.engineVersion())) .argument("port", TFNumber.build(cacheCluster.cacheNodes().stream().findFirst().get().endpoint().port())) .argument("parameter_group_name", TFString.build(cacheCluster.cacheParameterGroup().cacheParameterGroupName())) .argument("snapshot_retention_limit", TFString.build(cacheCluster.snapshotRetentionLimit().toString())) .argument("snapshot_window", TFString.build(cacheCluster.snapshotWindow())) .argument("subnet_group_name", TFString.build(cacheCluster.cacheSubnetGroupName())) .argument("security_group_ids", TFList.build(cacheCluster.securityGroups().stream() .map(sg -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_security_group.security_groups.{0}.id", sg.securityGroupId())) .build()) .collect(Collectors.toList()))) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build());  });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRole> roles = getRoleList(); Maps<Resource> resourceMaps = exportIamRoles.getResourceMaps(roles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamRole.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRole> roles) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSRole awsRole : roles) { Role role = awsRole.getRole(); resourceMapsBuilder.map( Resource.builder() .api(awsRole.getTerraformResourceName()) .name(awsRole.getResourceName()) .argument("name", TFString.build(role.roleName())) .argument("path", TFString.build(role.path())) .argument("description", TFString.build(role.description())) .argument("assume_role_policy", TFString.builder().isMultiline(true).value( JsonUtils.toPrettyFormat(URLDecoder.decode(role.assumeRolePolicyDocument(), StandardCharsets.UTF_8)) ).build()) .build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithNoneStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  when(topicDraftService.getAllTopicDrafts()).thenReturn(new ArrayList<>());  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(0, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldProperlyGetGroupsDiscWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
getGroupDiscussionList(GroupRequestArgs requestArgs);  /** * Get count of groups filtered by provided {@link GroupRequestArgs}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testToDateString0() { String expected = new Date(0L).toString(); String actual = SftpATTRS.toDateString(0L); "<AssertPlaceHolder>"; }
toDateString(long epochSeconds) { Instant instant = Instant.ofEpochSecond(epochSeconds); ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.systemDefault()); return DTF.format(zdt); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: hasStream() { MapConfigSource mapConfigSource = new MapConfigSource(configs); Assertions."<AssertPlaceHolder>"; }
hasStream() { return false; }
[*] target: assertFalse(mapConfigSource.hasStream())
[-] pred: org. junit. Assert. assertFalse ( mapConfigSource. hasStream() )
************************************
************************************
[+] input: createFromUshort565Rgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_USHORT_565_RGB); final short[] data = PngEncoderBufferedImageConverter.getDataBufferUShort(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromUshort565Rgb(data, width, height); "<AssertPlaceHolder>"; }
createFromUshort565Rgb(short[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferUShort(data, data.length); ColorModel colorModel = new DirectColorModel(16, BAND_MASKS_USHORT_565_RGB[0], BAND_MASKS_USHORT_565_RGB[1], BAND_MASKS_USHORT_565_RGB[2]); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_USHORT_565_RGB, null); return new BufferedImage(colorModel, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: startCloseTest() { try { boolean isClosing = channel.isClosing(); Assertions.assertFalse(isClosing); header.startClose(); isClosing = channel.isClosing(); Assertions."<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); } }
startClose() { channel.startClose(); }
[*] target: assertTrue(isClosing)
[-] pred: org. junit. Assert. assertTrue ( isClosing )
************************************
************************************
[+] input: testNoneSsl() { final SslHelper sslHelper = new SslHelper(null, true); assertFalse(sslHelper.isSsl()); assertNull(sslHelper.options()); "<AssertPlaceHolder>"; }
getSslContext() { return sslContext; }
[*] target: assertNull(sslHelper.getSslContext())
[-] pred: org. junit. Assert. assertNull ( sslHelper. getSslContext() )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: toModel_withOfferedResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContractWithOfferedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: test5() { int[] arrInitial = {1, 2, 3, 4}; int[] arrExpected = {1, 2, 4}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testSendResult0() { final MockAsyncResponse response = MockAsyncResponse.aMockResponse() .build();  response.setStatus(200); response.sendResult(302, "Hello".getBytes(), 0, "Hello".getBytes().length); assertEquals(302, response.status());  "<AssertPlaceHolder>";  assertThrows(IllegalStateException.class, () -> response.sendResult(404, null, 0, 0, true)); }
isCommitted() { return committed == 1; }
[*] target: assertTrue(response.isCommitted())
[-] pred: org. junit. Assert. assertTrue ( response. isCommitted() )
************************************
************************************
[+] input: testDecoderCopyFromStart() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
hasNext() { return hasMoreTokens(); }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
************************************
[+] input: getAllCycles_expectedOneCycle() { Cycle testCycle1 = new Cycle("TestCycle1");  Collection<Cycle> expectedCycles = new ArrayList<>(); expectedCycles.add(testCycle1);  Collection<Cycle> outputCycles = new ArrayList<>(); outputCycles.add(testCycle1);  when(cycleRepository.findAll()).thenReturn(outputCycles);  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
getAllCycles() { Collection<Cycle> cycles = new ArrayList<>(); for (Cycle cycle : cycleRepository.findAll()) { cycles.add(cycle); } return cycles; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
************************************
[+] input: GestaltException { BlobConfigSourceBuilder builder = BlobConfigSourceBuilder.builder() .setBlobClient(blobClient) .setBlobName("testBlob.properties") .setContainerName("testContainer");  when(blobClient.getBlobName()).thenReturn("testBlob.properties");   ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  BlobConfigSource blobConfigSource = (BlobConfigSource) configSourcePackage.getConfigSource(); assertTrue(blobConfigSource.hasStream()); assertEquals("properties", blobConfigSource.format()); }
build() throws GestaltException { if (blobClient == null) { Objects.requireNonNull(endpoint, "Must provided either a BlobClient or a valid endpoint"); Objects.requireNonNull(blobName, "Must provided either a BlobClient or a valid blobName"); Objects.requireNonNull(containerName, "Must provided either a BlobClient or a valid containerName");  BlobClientBuilder blobClientBuilder = new BlobClientBuilder() .endpoint(endpoint) .blobName(blobName) .containerName(containerName);  if (credential != null) { blobClientBuilder.credential(credential); }  return buildPackage(new BlobConfigSource(blobClientBuilder.buildClient())); } else { return buildPackage(new BlobConfigSource(blobClient)); } }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: testSingleEventSummary() { var summaryStartTime = Instant.now().toEpochMilli();  var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = summaryStartTime + 1; var eventDurationNanos = 13700000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedSummaryMetric = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max summaryStartTime, // startTimeMs eventStartTime, // endTimeMs: the summary metric endTimeMs is the eventStartTime of each // RecordedEvent new Attributes());  List<Metric> expected = List.of(expectedSummaryMetric); var testClass = new G1GarbageCollectionSummarizer(summaryStartTime);  when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>"; }
summarize() { Attributes attr = new Attributes(); Summary out = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, count, summarizer.getDurationMillis(), summarizer.getMinDurationMillis(), summarizer.getMaxDurationMillis(), startTimeMs, endTimeMs, attr); return Stream.of(out); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: shouldConstructWithPassword() { var password = "somePassword"; var dto = new UserPasswordDto(password); "<AssertPlaceHolder>"; }
getPassword() { return password; }
[*] target: assertEquals(password, dto.getPassword())
[-] pred: org. junit. Assert. assertEquals ( password, dto. getPassword() )
************************************
************************************
[+] input: testMoveHeadingToFront() { final String input = "[B][SIZE=5]Dum[/SIZE][/B]"; final String expected = "### **Dum**"; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
convertToMarkdown(String s) { // Deduplication, remove spaces in tags int index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, true); if (closingIndex == -1) { index++; continue; }  s = s.substring(0, index) + this.currentContent + s.substring(closingIndex); }  // Iterate until no whitespaces are left (else they might only be moved into the upper tag...) String result; while ((result = this.removeTrailingWhitespaces(s)) != null) { s = result; }  // Tag conversion index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, false); if (closingIndex == -1) { // No closing tag/no simple match index++; continue; }  if (this.currentContent == null) { // Simple opening tag match final String replacement = SIMPLE_SINGLETON_REPLACERS.get(this.currentTag); s = s.substring(0, index) + replacement + s.substring(closingIndex); continue; }  final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer == null) { // No replacer found index++; continue; }  String processed = replacer.process(this.currentTag, this.currentArg, this.currentContent); if (processed == null) { index++; } else { if (replacer.appendNewline()) { processed += "\n"; }  s = s.substring(0, index) + processed + s.substring(closingIndex); if (replacer.hasRawContents()) { index += processed.length(); } } }  // Removes newlines from the end of the last tag adds newlines final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer != null && replacer.appendNewline()) { final int lastChar = s.length() - 1; if (s.lastIndexOf('\n') == lastChar) { return s.substring(0, lastChar); } }  return cleanup(s); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testAvailability() { int port = NetUtils.getAvailablePort(); MulticastRegistry registry = new MulticastRegistry(URL.valueOf("multicast://224.5.6.8:" + port)); "<AssertPlaceHolder>"; }
isAvailable() { try { return multicastSocket != null; } catch (Throwable t) { return false; } }
[*] target: assertTrue(registry.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registry. isAvailable() )
************************************
************************************
[+] input: getCurrentOrg_success() { Organization org = _service.getCurrentOrganization(); "<AssertPlaceHolder>"; assertEquals("DIS_ORG", org.getExternalId()); }
getCurrentOrganization() { OrganizationRoles orgRole = getCurrentOrganizationRoles().orElseThrow(MisconfiguredUserException::new); return orgRole.getOrganization(); }
[*] target: assertNotNull(org)
[-] pred: org. junit. Assert. assertNotNull ( org )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, senderKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry.receiversPubKey matches the Payload.ownerPubKey. This is a requirement for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for adding MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getSenderPubKeyForAddOperation().getEncoded(),true);  log.warn("ProtectedMailboxStorageEntry::isValidForAddOperation() failed. " + "Entry owner does not match sender key in payload:\nProtectedStorageEntry=%{}\n" + "SenderPubKeyForAddOperation=%{}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
visit(final String originalPom, final String revision, final String sha1, final String changeList){ String modified; modified = originalPom.replace("${revision}", revision); if (modified.contains("${sha1}")) { modified = modified.replace("${sha1}", sha1 != null ? sha1 : ""); }  if (modified.contains("${changelist}")) { modified = modified.replace("${changelist}", changeList != null ? changeList : ""); }  return modified; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
************************************
[+] input: testFilterAndSort() { final BusinessRule one_v1_0_0 = new BusinessRule(); one_v1_0_0.setVersion("1.0.0"); one_v1_0_0.setIdentifier("one");  final BusinessRule two_v1_0_5 = new BusinessRule(); two_v1_0_5.setVersion("1.0.5"); two_v1_0_5.setIdentifier("two");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(one_v1_0_0, two_v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(2, map.get(1).size()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: getInternal_Valid_returnArtifacts() { /* ARRANGE */ representation.getArtifacts().add(artifactOne);  /* ACT */ final var artifacts = linker.getInternal(representation);  /* ASSERT */ final var expected = List.of(artifactOne); "<AssertPlaceHolder>"; }
getInternal(final Representation owner) { return owner.getArtifacts(); }
[*] target: assertEquals(expected, artifacts)
[-] pred: org. junit. Assert. assertEquals ( expected, artifacts )
************************************
************************************
[+] input: IOException { String triggerId = "trigger123"; String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.setTriggerId(triggerId); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_SPOTIFY_LINKS); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_PUSH_URI), interactionModalCaptor.capture(), eq(TEST_USER_ID)); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getView()); assertEquals(triggerId, updateModal.getTriggerId()); assertEquals(NO_TRACK_WARNING_MESSAGE, updateModal.getView().getBlocks().get(0).getText().getTextValue()); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
************************************
[+] input: create_validInput_returnSubscriptionForRepresentation() { /* ARRANGE */ Mockito.doReturn(Optional.of(getRepresentation())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(repSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
************************************
[+] input: toModel_validInput_returnOfferedResourceView() { /* ARRANGE */ final var offeredResource = getOfferedResource();  /* ACT */ final var result = offeredResourceViewAssembler.toModel(offeredResource);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(offeredResource.getTitle(), result.getTitle()); Assertions.assertEquals(offeredResource.getDescription(), result.getDescription()); Assertions.assertEquals(offeredResource.getKeywords(), result.getKeywords()); Assertions.assertEquals(offeredResource.getPublisher(), result.getPublisher()); Assertions.assertEquals(offeredResource.getLanguage(), result.getLanguage()); Assertions.assertEquals(offeredResource.getLicense(), result.getLicense()); Assertions.assertEquals(offeredResource.getVersion(), result.getVersion()); Assertions.assertEquals(offeredResource.getSovereign(), result.getSovereign()); Assertions.assertEquals(offeredResource.getEndpointDocumentation(), result.getEndpointDocumentation()); Assertions.assertEquals(offeredResource.getAdditional(), result.getAdditional()); Assertions.assertEquals(offeredResource.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(offeredResource.getModificationDate(), result.getModificationDate());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getOfferedResourceLink(offeredResource.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getOfferedResourceContractsLink(offeredResource.getId()), contractsLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getOfferedResourceRepresentationsLink(offeredResource.getId()), representationsLink.get().getHref());  final var catalogsLink = result.getLink("catalogs"); assertTrue(catalogsLink.isPresent()); assertNotNull(catalogsLink.get()); assertEquals(getOfferedResourceCatalogsLink(offeredResource.getId()), catalogsLink.get().getHref()); }
toModel(final OfferedResource resource) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(resource, OfferedResourceView.class); view.add(getSelfLink(resource.getId()));  final var contractsLink = linkTo(methodOn(OfferedResourcesToContractsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractsLink);  final var repLink = linkTo(methodOn(OfferedResourcesToRepresentationsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var catalogLink = linkTo(methodOn(OfferedResourcesToCatalogsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.CATALOGS); view.add(catalogLink);  final var subscriptionLink = linkTo(methodOn(OfferedResourcesToSubscriptionsController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var brokerLink = linkTo(methodOn(OfferedResourcesToBrokersController.class) .getResource(resource.getId(), null, null)) .withRel(BaseType.BROKERS); view.add(brokerLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: sendPasswordRecoverCodeMailException() { // given MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendPasswordRecoverCode(user, "test-token");  // then "<AssertPlaceHolder>"; }
sendPasswordRecoverCode(User user, String randomCode) { Map<String, Object> templateModel = new HashMap<>(); templateModel.put("username", user.getName()); templateModel.put("recoverCode", randomCode); String passwordRecoverSubject = getLocalizedMessage("locale.EmailSubject.passwordRecover"); boolean mailSent = send(user.getEmail(), passwordRecoverSubject, MailTemplatesNames.PASSWORD_RESET.filename, templateModel); return mailSent; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
************************************
[+] input: test() { VoiceNotifierConfiguration configuration = new VoiceNotifierConfiguration(); AliyunNotifierProvider provider = configuration.aliyunNotifierProvider(null); Assertions."<AssertPlaceHolder>"; }
aliyunNotifierProvider(TemplateManager templateManager) { return new AliyunNotifierProvider(templateManager); }
[*] target: assertNotNull(provider)
[-] pred: org. junit. Assert. assertNotNull ( provider )
************************************
************************************
[+] input: Exception { // given String siteId = null; String documentId = "3dbc3319-6ef4-402a-a46c-a87a7ce05a73";  Map<String, Object> map = loadRequest("/insert_subdocument01.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size()); assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("System", syncs.getResults().get(0).getUserId()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
************************************
[+] input: testClone() { //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act  Address address = Address.createAddress(street, doorNumber, postCode, city, country); Address cloneAddress = address.clone();  //Assert  "<AssertPlaceHolder>"; }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(address, cloneAddress)
[-] pred: org. junit. Assert. assertEquals ( address, cloneAddress )
************************************
************************************
[+] input: checkMakeAnAddress() {  //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act Address address = Address.createAddress(street, doorNumber, postCode, city, country); Address addressC = new Address(address);  //Assert "<AssertPlaceHolder>";   }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(address, addressC)
[-] pred: org. junit. Assert. assertEquals ( address, addressC )
************************************
************************************
[+] input: update_IdsValue_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isIdsProtocol()); }
update(final Subscription subscription, final SubscriptionDesc desc) { final var hasParentUpdated = super.update(subscription, desc); final var hasUpdatedUrl = this.updateLocation(subscription, desc.getLocation()); final var hasUpdatedTarget = this.updateTarget(subscription, desc.getTarget()); final var hasUpdatedPushData = this.updatePushData(subscription, desc.isPushData()); final var hasUpdatedSubscriber = this.updateSubscriber(subscription, desc.getSubscriber()); final var hasUpdateIdsValue = this.updateIdsValue(subscription, desc.isIdsProtocol());  return hasParentUpdated || hasUpdatedUrl || hasUpdatedTarget || hasUpdatedPushData || hasUpdatedSubscriber || hasUpdateIdsValue; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: roundTrip() { final String expression = "http://snomed.info/sct|166056000|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath.fromString( expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: checkEqualsAddress_true_country_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = "4000"; String cityA = "Porto"; String countryA = "";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = "4000"; String cityB = "Porto"; String countryB = "";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setCountry(null); addressB.setCountry(null);   //Assert  "<AssertPlaceHolder>";  }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
************************************
[+] input: shouldUpdateCommunityAmenitySuccessfully() { // given Amenity communityAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION); Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); AmenityDto updated = getTestAmenityDto(); Amenity updatedAmenity = getUpdatedCommunityAmenity();  given(amenityRepository.findByAmenityId(TEST_AMENITY_ID)) .willReturn(Optional.of(communityAmenity)); given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(amenityRepository.save(updatedAmenity)) .willReturn(updatedAmenity);  // when boolean result = amenitySDJpaService.updateAmenity(updated);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID); verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID); verify(amenityRepository).save(updatedAmenity); }
updateAmenity(AmenityDto updatedAmenity) { String amenityId = updatedAmenity.getAmenityId(); return amenityRepository.findByAmenityId(amenityId) .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId()) .map(community -> { Amenity updated = new Amenity(); updated.setName(updatedAmenity.getName()); updated.setPrice(updatedAmenity.getPrice()); updated.setId(amenity.getId()); updated.setAmenityId(amenityId); updated.setDescription(updatedAmenity.getDescription()); return updated; }) .orElse(null)) .map(amenityRepository::save).isPresent(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { var action = buildMethod("Act", "ion", "()V"); List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action, 21, 77)); String payload = "{"desc":"Act.ion()V","line":"21","bytecodeIndex":"77"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[" + payload + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.of(1)); "<AssertPlaceHolder>"; }
jsonWrite(final List<RecordedFrame> frames, final Optional<Integer> limit) throws IOException { StringWriter strOut = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(strOut); int frameCount = Math.min(limit.orElse(frames.size()), frames.size());  jsonWriter.beginObject(); jsonWriter.name("type").value("stacktrace"); jsonWriter.name("language").value("java"); jsonWriter.name("version").value(JSON_SCHEMA_VERSION); jsonWriter.name("truncated").value(frameCount < frames.size()); jsonWriter.name("payload").beginArray(); for (int i = 0; i < frameCount; i++) { RecordedFrame frame = frames.get(i); jsonWriter.beginObject(); jsonWriter.name("desc").value(describeMethod(frame.getMethod())); jsonWriter.name("line").value(Integer.toString(frame.getLineNumber())); jsonWriter.name("bytecodeIndex").value(Integer.toString(frame.getBytecodeIndex())); jsonWriter.endObject(); }  jsonWriter.endArray(); jsonWriter.endObject(); String out = strOut.toString(); int length = out.length(); if (length > HEADROOM_75PC) { double percentageOfFramesToTry = ((double) HEADROOM_75PC) / length; int numFrames = (int) (frameCount * percentageOfFramesToTry); if (numFrames < frameCount) { return jsonWrite(frames, Optional.of(numFrames)); } throw new IOException( "Corner case of a stack frame that can't be cleanly truncated! " + "numFrames = " + numFrames + ", frameCount = " + frameCount + ", " + ", percentageOfFramesToTry = " + percentageOfFramesToTry + ", length = " + length); } else { return out; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: Exception { var action1 = buildMethod("Foo", "action1", "()V"); var action2 = buildMethod("Foo", "action2", "()V"); var action3 = buildMethod("Foo", "action3", "()V");  List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action1, 21, 77)); stack.add(buildFrame(action2, 22, 78)); stack.add(buildFrame(action3, 23, 79)); String payload1 = "{"desc":"Foo.action1()V","line":"21","bytecodeIndex":"77"}"; String payload2 = "{"desc":"Foo.action2()V","line":"22","bytecodeIndex":"78"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[" + payload1 + "," + payload2 + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.of(2)); "<AssertPlaceHolder>"; }
jsonWrite(final List<RecordedFrame> frames, final Optional<Integer> limit) throws IOException { StringWriter strOut = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(strOut); int frameCount = Math.min(limit.orElse(frames.size()), frames.size());  jsonWriter.beginObject(); jsonWriter.name("type").value("stacktrace"); jsonWriter.name("language").value("java"); jsonWriter.name("version").value(JSON_SCHEMA_VERSION); jsonWriter.name("truncated").value(frameCount < frames.size()); jsonWriter.name("payload").beginArray(); for (int i = 0; i < frameCount; i++) { RecordedFrame frame = frames.get(i); jsonWriter.beginObject(); jsonWriter.name("desc").value(describeMethod(frame.getMethod())); jsonWriter.name("line").value(Integer.toString(frame.getLineNumber())); jsonWriter.name("bytecodeIndex").value(Integer.toString(frame.getBytecodeIndex())); jsonWriter.endObject(); }  jsonWriter.endArray(); jsonWriter.endObject(); String out = strOut.toString(); int length = out.length(); if (length > HEADROOM_75PC) { double percentageOfFramesToTry = ((double) HEADROOM_75PC) / length; int numFrames = (int) (frameCount * percentageOfFramesToTry); if (numFrames < frameCount) { return jsonWrite(frames, Optional.of(numFrames)); } throw new IOException( "Corner case of a stack frame that can't be cleanly truncated! " + "numFrames = " + numFrames + ", frameCount = " + frameCount + ", " + ", percentageOfFramesToTry = " + percentageOfFramesToTry + ", length = " + length); } else { return out; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testDoVolatilityAssert_belowLowerLimit() { FallAssertion fallAssertion = MockFallAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "80"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility <= 0 && Math.abs(volatility) <= expected; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: IOException { final InputStream[] ch = prepareStreams();  int available = 0; for (InputStream child : ch) available += child.available();  final InputStream in = new CompositeInputStream(ch); "<AssertPlaceHolder>"; }
available() throws IOException { int bytes = in != null ? in.available() : 0; for (final InputStream ch : queue) { bytes += Math.max(ch.available(), 0); } return bytes; }
[*] target: assertEquals(available, in.available())
[-] pred: org. junit. Assert. assertEquals ( available, in. available() )
************************************
************************************
[+] input: getList_dataFieldExists_returnsList() { GraphQLResponse response = constructResponse("{ "data": { "field": ["value"] } }"); List<String> values = response.getList("field", String.class); "<AssertPlaceHolder>"; assertEquals("value", values.get(0)); }
getList(String fieldName, Class<T> type) { if (data.hasNonNull(fieldName)) { return convertList(data.get(fieldName), type); } return emptyList(); }
[*] target: assertEquals(1, values.size())
[-] pred: org. junit. Assert. assertEquals ( 1, values. size ( ) )
************************************
************************************
[+] input: Exception { EmptyInterface ins = ConstructionUtil.generateSubClassOf(EmptyInterface.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: testGetOldestPaymentAccountForOfferWhenNoValidAccounts() { PaymentAccounts accounts = new PaymentAccounts(Collections.emptySet(), mock(AccountAgeWitnessService.class)); PaymentAccount actual = accounts.getOldestPaymentAccountForOffer(mock(Offer.class));  "<AssertPlaceHolder>"; }
getOldestPaymentAccountForOffer(Offer offer) { List<PaymentAccount> sortedValidAccounts = sortValidAccounts(offer);  logAccounts(sortedValidAccounts);  return firstOrNull(sortedValidAccounts); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: testIdentifyMessage_FromBAH() { final String xml = "<?xml version="1.0" encoding="UTF-8"?>" + "<Message>\n" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n" + "<Fr> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>FOOCUS3NXXX</BICFI>\n" + "			<ClrSysMmbId>\n" + "				<ClrSysId>\n" + "					<Prtry>T2S</Prtry>\n" + "				</ClrSysId>\n" + "				<MmbId>ADMNUSERLUXCSDT1</MmbId>\n" + "			</ClrSysMmbId>\n" + "			<Othr>\n" + "				<Id>FOOTXE2SXXX</Id>\n" + "				</Othr> \n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</Fr> \n" + "<To> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>ABICUS33</BICFI>\n" + "			<Othr>\n" + "				<Id>AARBDE5W100</Id>\n" + "			</Othr>\n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</To> \n" + "<BizMsgIdr>2012111915360885</BizMsgIdr>\n" + "<MsgDefIdr>seev.031.002.03</MsgDefIdr> \n" + "<BizSvc>CSD</BizSvc> \n" + "<CreDt>2015-08-27T08:59:00Z</CreDt>\n" + "</AppHdr>\n" + "<Document></Document>\n" + "</Message>"; MxId id = MxParseUtils.identifyMessage(xml).orElse(null); "<AssertPlaceHolder>"; assertEquals("seev.031.002.03", id.id()); }
identifyMessage(final String xml) { Optional<String> namespace = NamespaceReader.findDocumentNamespace(xml); if (namespace.isPresent()) { return namespace.map(MxId::new); }  // if the Document does not have a namespace, try to identify the message from the header Optional<XMLStreamReader> element = NamespaceReader.findElement(xml, "MsgDefIdr"); if (!element.isPresent()) { // Legacy ahv10 header element = NamespaceReader.findElement(xml, "MsgName"); } if (element.isPresent()) { try { return Optional.of(new MxId(element.get().getElementText())); } catch (XMLStreamException e) { log.finer("Error identifying message: " + e.getMessage()); } }  return Optional.empty(); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: confirmEmailNoToken() { // given User user = getDefaultUser(); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "any-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: getProductById() { wireMockServer.stubFor(get(urlPathEqualTo("/product/50")) .willReturn(aResponse() .withStatus(200) .withHeader("Content-Type", "application/json") .withBody("{"id":"50","type":"CREDIT_CARD","name":"28 Degrees","version":"v1"}")));  Product expected = new Product("50", "CREDIT_CARD", "28 Degrees", "v1");  Product product = productService.getProduct("50");  "<AssertPlaceHolder>"; }
getProduct(String id) { return restTemplate.exchange("/product/{id}", HttpMethod.GET, getRequestEntity(), Product.class, id).getBody(); }
[*] target: assertEquals(expected, product)
[-] pred: org. junit. Assert. assertEquals ( expected, product )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: normalizeXml() { String origit = "<?xml version="1.0" encoding="UTF-8"?>" + "<response xmlns="http://v8.1c.ru/8.3/debugger/debugBaseData" " + "xmlns:cfg="http://v8.1c.ru/8.1/data/enterprise/current-config" " + "xmlns:debugRDBGRequestResponse="http://v8.1c.ru/8.3/debugger/debugRDBGRequestResponse" " + "xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" " + "xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>" + "                                                         " + "                                                         " + "            nvState>" + "</request> nDebugger></dbgtgtRemoteRequestResponse:commandFromDbgServer></response> mmand"; String template = "<?xml version="1.0" encoding="UTF-8"?>" + "<response xmlns="http://v8.1c.ru/8.3/debugger/debugBaseData" " + "xmlns:cfg="http://v8.1c.ru/8.1/data/enterprise/current-config" " + "xmlns:debugRDBGRequestResponse="http://v8.1c.ru/8.3/debugger/debugRDBGRequestResponse" " + "xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" " + "xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>"; String result = Utils.normalizeXml(origit); "<AssertPlaceHolder>"; }
normalizeXml(String xmlString) { String result = ""; if (!xmlString.startsWith("<")) { return xmlString; } Pattern p = Pattern.compile("<\\w\\S*"); Matcher m = p.matcher(xmlString); String replaceFromTag = ""; if (m.find()) { replaceFromTag = xmlString.substring(m.start() + 1, m.end()); } if (replaceFromTag.isEmpty()) { return result; } result = xmlString; String tag = "</" + replaceFromTag + ">"; int indx = xmlString.indexOf(tag); if (indx != -1) { result = result.substring(0, indx + tag.length()); }  indx = result.indexOf("/>"); if (indx != -1) { String candidate = result.substring(0, indx + 2); m = p.matcher(candidate); String candidateTag = ""; while (m.find()) { candidateTag = result.substring(m.start() + 1, m.end()); }  if (replaceFromTag.equalsIgnoreCase(candidateTag)) { result = candidate; }  }  return result; }
[*] target: assertEquals(template, result)
[-] pred: org. junit. Assert. assertEquals ( template, result )
************************************
************************************
[+] input: addCustomConfigNullMap() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(1, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); }
getCustomConfig() { return customConfig; }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
************************************
[+] input: toModel_validInput_returnArtifactView() { /* ARRANGE */ final var artifact = getArtifact();  /* ACT */ final var result = artifactViewAssembler.toModel(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(artifact.getTitle(), result.getTitle()); Assertions.assertEquals(artifact.getByteSize(), result.getByteSize()); Assertions.assertEquals(artifact.getCheckSum(), result.getCheckSum()); Assertions.assertEquals(artifact.getNumAccessed(), result.getNumAccessed()); Assertions.assertEquals(artifact.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(artifact.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(artifact.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(artifact.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getArtifactLink(artifact.getId()), selfLink.get().getHref());  final var dataLink = result.getLink("data"); assertTrue(dataLink.isPresent()); assertNotNull(dataLink.get()); assertEquals(getArtifactDataLink(artifact.getId()), dataLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getArtifactRepresentationsLink(artifact.getId()), representationsLink.get().getHref());  final var agreementsLink = result.getLink("agreements"); assertTrue(agreementsLink.isPresent()); assertNotNull(agreementsLink.get()); assertEquals(getArtifactAgreementsLink(artifact.getId()), agreementsLink.get().getHref()); }
toModel(final Artifact artifact) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(artifact, ArtifactView.class); view.add(getSelfLink(artifact.getId()));  final var dataLink = linkTo(methodOn(ArtifactController.class) .getData(artifact.getId(), new ArrayList<>(), new QueryInput())) .withRel("data"); view.add(dataLink);  final var repLink = linkTo(methodOn(ArtifactsToRepresentationsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.REPRESENTATIONS); view.add(repLink);  final var agreementLink = linkTo(methodOn(ArtifactsToAgreementsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.AGREEMENTS); view.add(agreementLink);  final var subscriptionLink = linkTo(methodOn(ArtifactsToSubscriptionsController.class) .getResource(artifact.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  final var routeLink = linkTo(methodOn(ArtifactController.class) .getRoute(artifact.getId())) .withRel("route"); view.add(routeLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: createsUser() { final UserProvider userProvider = mock(UserProvider.class); final RealmModel realm = mock(RealmModel.class); final String username = "user";  when(session.users()) .thenReturn(userProvider); when(userProvider.addUser(realm, username)) .thenReturn(new TestUserModel(username));  LegacyUser legacyUser = createLegacyUser(username); var result = userModelFactory.create(legacyUser, realm);  "<AssertPlaceHolder>"; }
create(LegacyUser legacyUser, RealmModel realm) { LOG.infof("Creating user model for: %s", legacyUser.getUsername());  UserModel userModel; if (isEmpty(legacyUser.getId())) { userModel = session.users().addUser(realm, legacyUser.getUsername()); } else { userModel = session.users().addUser( realm, legacyUser.getId(), legacyUser.getUsername(), true, false ); }  validateUsernamesEqual(legacyUser, userModel);  userModel.setFederationLink(model.getId()); userModel.setEnabled(legacyUser.isEnabled()); userModel.setEmail(legacyUser.getEmail()); userModel.setEmailVerified(legacyUser.isEmailVerified()); userModel.setFirstName(legacyUser.getFirstName()); userModel.setLastName(legacyUser.getLastName());  if (legacyUser.getAttributes() != null) { legacyUser.getAttributes() .forEach(userModel::setAttribute); }  getRoleModels(legacyUser, realm) .forEach(userModel::grantRole);  getGroupModels(legacyUser, realm) .forEach(userModel::joinGroup);  if (legacyUser.getRequiredActions() != null) { legacyUser.getRequiredActions() .forEach(userModel::addRequiredAction); }  return userModel; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testInvalid() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = "1"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("1", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: partialUpdateOperator_withExistingOperator_shouldSuccess() { // Prepare // 1. create an operator OperatorPropsVO operatorPropsVO = MockOperatorFactory.createOperatorPropsVO(); Operator operator = operatorService.createOperator(operatorPropsVO);  // 2. prepare an operator value object with only part of its props assigned OperatorPropsVO updateVO = OperatorPropsVO.newBuilder() .withName("ShellOperator") .build();  System.out.println(JSONUtils.toJsonString(updateVO));  // Process // 3. perform partial update operatorService.partialUpdateOperator(operator.getId(), updateVO);  // Validate Optional<Operator> updatedOperatorOptional = operatorService.fetchOperatorById(operator.getId()); "<AssertPlaceHolder>"; Operator updatedOperator = updatedOperatorOptional.get(); // 4. updated operator should have same property values as original one, except updated properties assertThat(updatedOperator, samePropertyValuesAs(operator, "name")); assertThat(updatedOperator.getName(), is("ShellOperator")); }
fetchOperatorById(Long id) { // 1. Id should not be null validateIdNotNull(id);  // 2. Get optional operator through DAO return operatorDao.fetchById(id); }
[*] target: assertTrue(updatedOperatorOptional.isPresent())
[-] pred: org. junit. Assert. assertTrue ( updatedOperatorOptional. isPresent ( ) )
************************************
************************************
[+] input: shouldCreateBooking() { long hotelRoomId = 11L; long customerId = 19L;  HotelRoom hotelRoom = new HotelRoom(); hotelRoom.setCost(15.0); when(hotelRoomRepository.find(hotelRoomId)).thenReturn(hotelRoom); when(customerRepository.find(customerId)).thenReturn(new Customer()); when(bookingValidator.isValid(any())).thenReturn(true); when(bookingRepository.createBooking(any())).thenReturn(true);  boolean actual = bookingService.book(hotelRoomId, customerId, LocalDate.now().minusDays(3), LocalDate.now());  "<AssertPlaceHolder>"; verify(hotelRoomRepository).find(hotelRoomId); verify(customerRepository).find(customerId); verify(customerRepository).updateCost(customerId, 15.0); verify(bookingValidator).isValid(any()); verify(bookingRepository).createBooking(any()); verifyNoMoreInteractions(hotelRoomRepository, customerRepository, bookingValidator, bookingRepository); }
book(long hotelRoomId, long customerId, LocalDate startDate, LocalDate endDate);
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .withAction(() -> { throw new RuntimeException(); }) .withRollback((inputHolder, thrown)-> { }) .build();  try { stage.execute(null); } catch (Throwable t) { stage.rollback(t); }  Assertions."<AssertPlaceHolder>"; }
isRolledback() { return this.rolledBack; }
[*] target: assertFalse(stage.isRolledback())
[-] pred: org. junit. Assert. assertFalse ( stage. isRolledback() )
************************************
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addAttribute(new Attribute(LOCANT_ATR, "4")); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CCCCO",methanol,"1/2/3/4/")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  resolveLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  if (foundSomethingToSubstitute){ performAdditiveOperations(state, subOrRoot);//e.g. ethylenediimino, oxyethylene (operations where two outAtoms are used to produce the bond and no locant is required as groups) performLocantedSubstitutiveOperations(state, subOrRoot);//e.g. 2-methyltoluene } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: deleteBookingItem() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));  // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository).delete(testBookingItem); }
deleteBooking(String amenityId, String bookingId) { Optional<AmenityBookingItem> booking = bookingRepository.findByAmenityBookingItemId(bookingId); return booking.map(bookingItem -> { boolean amenityFound = bookingItem.getAmenity().getAmenityId().equals(amenityId); if (amenityFound) { bookingRepository.delete(bookingItem); return true; } else { return false; } }).orElse(false); }
[*] target: assertTrue(bookingDeleted)
[-] pred: org. junit. Assert. assertTrue ( bookingDeleted )
************************************
************************************
[+] input: shouldReturnDefaultValueGivenNewValueIsNull() { String defaultValue = "default";  String result = ValueUtil.valueOrDefault(defaultValue, null);  Assertions."<AssertPlaceHolder>"; }
valueOrDefault(T defaultValue, T value) { return value == null ? defaultValue : value; }
[*] target: assertEquals(defaultValue, result)
[-] pred: org. junit. Assert. assertEquals ( defaultValue, result )
************************************
************************************
[+] input: testNameAndUnwrap() { final LogHandler handler = mock(LogHandler.class); InternalLoggerImpl logger = new InternalLoggerImpl("foo", handler); assertEquals("foo", logger.name()); "<AssertPlaceHolder>"; }
unwrap() { return this; }
[*] target: assertSame(logger, logger.unwrap())
[-] pred: org. junit. Assert. assertSame ( logger, logger. unwrap() )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: testFilterFields() { Document doc = getTypedDocument("sample_12_model", "/jdocs/sample_12.json"); doc.setString("$.application.members[number=0].name", "Nitika1"); doc.setString("$.application.members[number=0].contacts.addresses[type=home].line1", "Greenwood City"); String expected = getCompressedJson("/jdocs/sample_12_expected.json"); String actual = doc.getJson(); "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCancelledAfterCancel() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.cancel(true); "<AssertPlaceHolder>"; }
isCancelled() { return cancelled; }
[*] target: assertTrue(f.isCancelled())
[-] pred: org. junit. Assert. assertTrue ( f. isCancelled() )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRdsClusterParameterGroup> awsRdsClusterParameterGroups = getAwsRdsClusterParameterGroups();  Maps<Resource> resourceMaps = exportRdsClusterParameterGroups.getResourceMaps(awsRdsClusterParameterGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsClusterParameterGroup.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRdsClusterParameterGroup> awsDbClusterParameterGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsDbClusterParameterGroups.forEach(awsDbClusterParameterGroup -> { DBClusterParameterGroup parameterGroup = awsDbClusterParameterGroup.getDbClusterParameterGroup(); List<Parameter> parameters = awsDbClusterParameterGroup.getParameters(); List<Tag> tags = awsDbClusterParameterGroup.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsDbClusterParameterGroup.getTerraformResourceName()) .name(awsDbClusterParameterGroup.getResourceName()) .argument("name", TFString.build(parameterGroup.dbClusterParameterGroupName())) .argument("family", TFString.build(parameterGroup.dbParameterGroupFamily())) .argument("description", TFString.build(parameterGroup.description())) .argumentsIf(Optional.ofNullable(parameters).isPresent(), "parameter", () -> parameters.stream() .filter(p -> p.source().equalsIgnoreCase("modified")) .map(parameter -> TFBlock.builder() .argument("name", TFString.build(parameter.parameterName())) .argument("value", TFString.build(parameter.parameterValue())) .build()) .collect(Collectors.toList())) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); }); return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test() { String s = "V5__create_customers.sql"; FilenameParser.MigrationInfo migrationInfo = FilenameParser.getMigrationInfo(s); Assertions.assertEquals(5, migrationInfo.getVersion()); Assertions.assertEquals("create customers", migrationInfo.getDescription()); Assertions.assertFalse(migrationInfo.isSplitByLine()); Assertions."<AssertPlaceHolder>"; }
isTransactional() { return transactional; }
[*] target: assertTrue(migrationInfo.isTransactional())
[-] pred: org. junit. Assert. assertTrue ( migrationInfo. isTransactional() )
************************************
************************************
[+] input: testIsStop() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); verify(recording, never()).stop(); jfrRecorder.stop(); verify(recording).stop(); "<AssertPlaceHolder>"; }
isStarted() { return (recording != null) && RecordingState.RUNNING.equals(recording.getState()); }
[*] target: assertFalse(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertFalse ( jfrRecorder. isStarted() )
************************************
************************************
[+] input: getDuration_inputInvalidDurationConstraintNotFirstInList_returnNull() { /* ARRANGE */ final var duration = "P6M";  final var constraint1 = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build(); final var constraint2 = new ConstraintBuilder() ._leftOperand_(LeftOperand.ELAPSED_TIME) ._operator_(BinaryOperator.SHORTER_EQ) ._rightOperand_(new RdfResource(duration, URI.create("xsd:duration"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint1, constraint2)) .build();  /*ACT*/ final var result = RuleUtils.getDuration(permission);  /*ASSERT*/ "<AssertPlaceHolder>"; }
getDuration(final Rule rule) throws DateTimeParseException { final var constraint = rule.getConstraint().get(0); final var type = ((ConstraintImpl) constraint).getRightOperand().getType();  if ("http://www.w3.org/2001/XMLSchema#duration".equals(type)) { final var duration = ((ConstraintImpl) constraint).getRightOperand().getValue(); return Duration.parse(duration); } else { return null; } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: shouldHandleZeroParameters() { try (SqlSession session = sqlMapper.openSession()) { final TestResultHandler resultHandler = new TestResultHandler(); session.select("org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts", resultHandler); "<AssertPlaceHolder>"; } }
select(String statement, ResultHandler handler);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(5, resultHandler.count)
[-] pred: org. junit. Assert. assertEquals ( 5, resultHandler. count )
************************************
************************************
[+] input: GestaltException { GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, "test", Tags.of()); Assertions."<AssertPlaceHolder>"; }
id() {  //NOPMD return id; }
[*] target: assertNotNull(source.id())
[-] pred: org. junit. Assert. assertNotNull ( source. id() )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("combine", CommandEvent.class);  InteractionControllerDefinition controllerDefinition = InteractionControllerDefinition.build(controller, validators, dependencyInjector, LOCALIZATION_FUNCTION).orElse(null); assertNotNull(controllerDefinition); SlashCommandDefinition definition = controllerDefinition.getCommands().stream() .filter(it -> it.getCommandType() == Command.Type.SLASH) .map(it -> (SlashCommandDefinition) it) .filter(c -> c.getMethod().equals(method)) .findFirst().orElse(null); "<AssertPlaceHolder>";  assertEquals("super sub", definition.getName());  assertTrue(definition.hasCooldown()); assertEquals(5, definition.getCooldown().getDelay()); assertEquals(TimeUnit.DAYS, definition.getCooldown().getTimeUnit());  assertEquals(2, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("superPermission")); assertTrue(definition.getPermissions().contains("subPermission")); }
getCommands() { return commands; }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
************************************
[+] input: withSimpleRestartNoTransferTest() { Boolean returnValue = withSimpleRestart("ABORT", "foo", () -> {}); "<AssertPlaceHolder>"; }
withSimpleRestart(String name, String report, Runnable body) { Restart<Object, Boolean> restart = new Restart<>(name, (x) -> true, report); RestartCase<Object, Boolean> restartCase = new RestartCase<>(List.of(restart), () -> { body.run(); return false; }); return restartCase.get(); }
[*] target: assertEquals(false, returnValue)
[-] pred: org. junit. Assert. assertEquals ( false, returnValue )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer, Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference<Integer>(1));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testDispatchSync() { AtomicBoolean wasCalled = new AtomicBoolean(false);  ThreadUtils.dispatch_sync(() -> wasCalled.set(true));  Assertions."<AssertPlaceHolder>"; }
dispatch_sync(Runnable runnable) { dispatch(runnable, true); }
[*] target: assertTrue(wasCalled.get())
[-] pred: org. junit. Assert. assertTrue ( wasCalled. get ( ) )
************************************
************************************
[+] input: shouldEncodeDecodeEquals_1() { var source = UUID.randomUUID(); var encoded = UUIDAdapter.toBytes(source); var decoded = UUIDAdapter.toUUID(encoded);  Assertions."<AssertPlaceHolder>"; }
toUUID(byte[] bytes) { ByteBuffer byteBuffer = ByteBuffer.wrap(bytes); Long high = byteBuffer.getLong(); Long low = byteBuffer.getLong();  return new UUID(high, low); }
[*] target: assertEquals(source, decoded)
[-] pred: org. junit. Assert. assertEquals ( source, decoded )
************************************
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 253; int expectedEventCount = 3; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> allMetrics = new ArrayList<>(); for (String event : events) { allMetrics.addAll(parseMetrics(event)); } Assertions.assertEquals(metricCount, allMetrics.size()); for (MetricDefinition metric : allMetrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
serialize() throws JsonProcessingException { if (rootNode.metrics().size() <= Constants.MAX_METRICS_PER_EVENT && !anyMetricWithTooManyDataPoints(rootNode)) { return Arrays.asList(this.rootNode.serialize()); } else { List<RootNode> nodes = new ArrayList<>(); Map<String, MetricDefinition> metrics = new HashMap<>(); Queue<MetricDefinition> metricDefinitions = new LinkedList<>(rootNode.metrics().values()); while (!metricDefinitions.isEmpty()) { MetricDefinition metric = metricDefinitions.poll();  if (metrics.size() == Constants.MAX_METRICS_PER_EVENT || metrics.containsKey(metric.getName())) { nodes.add(buildRootNode(metrics)); metrics = new HashMap<>(); }  if (metric.getValues().size() <= Constants.MAX_DATAPOINTS_PER_METRIC) { metrics.put(metric.getName(), metric); } else { metrics.put( metric.getName(), new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList(0, Constants.MAX_DATAPOINTS_PER_METRIC))); metricDefinitions.offer( new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList( Constants.MAX_DATAPOINTS_PER_METRIC, metric.getValues().size()))); } } if (!metrics.isEmpty()) { nodes.add(buildRootNode(metrics)); } List<String> strings = new ArrayList<>(); for (RootNode node : nodes) { strings.add(node.serialize()); } return strings; } }
[*] target: assertEquals(expectedEventCount, events.size())
[-] pred: org. junit. Assert. assertEquals ( expectedEventCount, events. size ( ) )
************************************
************************************
[+] input: isCollectionNotEmptyTest_3() { var actual = Utils.isCollectionNotEmpty(List.of(1)); Assertions."<AssertPlaceHolder>"; }
isCollectionNotEmpty(Collection<T> collection) { return Objects.nonNull(collection) && 0 < collection.size(); }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: toModel_withRequestedResources_returnContractViewWithRequestsLink() { /* ARRANGE */ final var contract = getContractWithRequestedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getContractRequestedResourcesLink(contract.getId()), requestsLink.get().getHref()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getResourceMaps() { List<AWSMskCluster> awsMskClusters = getAwsMskClusters();  Maps<Resource> resourceMaps = exportMskClusters.getResourceMaps(awsMskClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/MskCluster.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSMskCluster> awsMskClusters) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSMskCluster awsMskCluster : awsMskClusters) { ClusterInfo cluster = awsMskCluster.getClusterInfo(); //            Map<String, String> tags = awsEksCluster.getTags(); resourceMapsBuilder .map(Resource.builder() .api(awsMskCluster.getTerraformResourceName()) .name(awsMskCluster.getResourceName()) .argument("cluster_name", TFString.build(cluster.clusterName())) .argument("kafka_version", TFString.build(cluster.currentBrokerSoftwareInfo().kafkaVersion())) .argument("number_of_broker_nodes", TFNumber.build(cluster.numberOfBrokerNodes())) .argument("encryption_info", TFBlock.builder() .argument("encryption_at_rest_kms_key_arn", TFString.build(cluster.encryptionInfo().encryptionAtRest().dataVolumeKMSKeyId())) .argument("encryption_in_transit", TFBlock.builder() .argument("in_cluster", TFBool.build(cluster.encryptionInfo().encryptionInTransit().inCluster())) .build()) .build()) .argument("broker_node_group_info", TFBlock.builder() .argument("client_subnets", TFList.build(cluster.brokerNodeGroupInfo().clientSubnets().stream() .map(subnetId -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_subnet.{0}.id", subnetId)) .build()) .collect(Collectors.toList()))) .argument("ebs_volume_size", TFNumber.build(cluster.brokerNodeGroupInfo() .storageInfo().ebsStorageInfo().volumeSize())) .argument("instance_type", TFString.build(cluster.brokerNodeGroupInfo().instanceType())) .argument("security_groups", TFList.build(cluster.brokerNodeGroupInfo().securityGroups().stream() .map(sg -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_security_group.{0}.id", sg)) .build()) .collect(Collectors.toList()))) .argument("tags", TFMap.build( cluster.tags().entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, tag -> TFString.build(tag.getValue()))) )) .build()) .build()) .build();  } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancerListener.cmd")); String actual = exportLoadBalancerListeners.getTFImport(getAwsListeners()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSListener> awsListeners) { return TFImport.builder() .importLines(awsListeners.stream() .map(awsListener -> TFImportLine.builder() .address(awsListener.getTerraformAddress()) .id(awsListener.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentation();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { Properties file = Resources.getResourceAsProperties(JPETSTORE_PROPERTIES); "<AssertPlaceHolder>"; }
getResourceAsProperties(String resource) throws IOException { Properties props = new Properties(); try (InputStream in = getResourceAsStream(resource)) { props.load(in); } return props; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseIdHouseNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
************************************
[+] input: deleteCommunityNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID); verify(communityHouseRepository, never()).deleteByHouseId(any()); verify(communityRepository, never()).delete(testCommunity); }
deleteCommunity(String communityId) { return communityRepository.findByCommunityIdWithHouses(communityId) .map(community -> { Set<String> houseIds = community.getHouses() .stream() .map(CommunityHouse::getHouseId) .collect(Collectors.toSet());  houseIds.forEach(houseId -> removeHouseFromCommunityByHouseId(community, houseId)); communityRepository.delete(community);  return true; }) .orElse(false); }
[*] target: assertFalse(communityDeleted)
[-] pred: org. junit. Assert. assertFalse ( communityDeleted )
************************************
************************************
[+] input: schedulePayment() { //given PaymentDto basePaymentDto = TestUtils.PaymentHelpers.getTestPaymentDto(TEST_PAYMENT_CHARGE,TEST_PAYMENT_TYPE,TEST_PAYMENT_DESCRIPTION,TEST_PAYMENT_RECURRING,TEST_PAYMENT_DUEDATE,TEST_PAYMENT_USER,TEST_PAYMENT_MEMBER); Payment basePayment = new Payment();  given(paymentMapper.paymentDtoToPayment(any(PaymentDto.class))).willReturn(basePayment); given(paymentMapper.paymentToPaymentDto(any(Payment.class))).willReturn(basePaymentDto);  //when PaymentDto testPaymentScheduled = paymentSDJpaService.schedulePayment(basePaymentDto);  //then verify(adminRepository).save(any()); //Logic: User gets associated with payment and persisted verify(paymentRepository).save(any(Payment.class)); //Logic: Payment is persisted Assert.notNull(testPaymentScheduled.getPaymentId()); //Logic: generation of payment ID "<AssertPlaceHolder>"; //Completion: method returns what is expected }
schedulePayment(PaymentDto request) { generatePaymentId(request); return createPaymentInRepository(request); }
[*] target: assertEquals(basePaymentDto,testPaymentScheduled)
[-] pred: org. junit. Assert. assertEquals ( basePaymentDto, testPaymentScheduled )
************************************
************************************
[+] input: protobufTest() { // Empty Result var result = new PhotonPipelineResult(); var serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); var unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // non multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)))), new MultiTargetPNPResult( new PNPResult( new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.1), List.of(1, 2, 3))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); "<AssertPlaceHolder>"; }
unpack(ProtobufPhotonPipelineResult msg) { return new PhotonPipelineResult( msg.getSequenceId(), msg.getCaptureTimestampMicros(), msg.getNtPublishTimestampMicros(), PhotonTrackedTarget.proto.unpack(msg.getTargets()), MultiTargetPNPResult.proto.unpack(msg.getMultiTargetResult())); }
[*] target: assertEquals(result, unpackedResult)
[-] pred: org. junit. Assert. assertEquals ( result, unpackedResult )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancerTargetGroup.cmd")); String actual = exportLoadBalancerTargetGroups.getTFImport(getAwsTargetGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSTargetGroup> awsTargetGroups) { return TFImport.builder() .importLines(awsTargetGroups.stream() .map(awsTargetGroup -> TFImportLine.builder() .address(awsTargetGroup.getTerraformAddress()) .id(awsTargetGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); // Target Group Attachments cannot be imported. }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetFollowingIds() { List<String> ids = twitterClient.getFollowingIds("786491"); "<AssertPlaceHolder>"; assertTrue(ids.size() > 1000); }
getFollowingIds(String userId);  /** * Get the relation between two users calling https://api.twitter.com/1.1/friendships/ * * @param userId1 id of the first user * @param userId2 id of the second user * @return One of the following RelationType enum value : FRIENDS if the two users are following each other, NONE if they neither of the two is * following the other, FOLLOWER if user2 follows user1, FOLLOWING if user1 follows user2 */ RelationType getRelationType(String userId1, String userId2);  /** * Get the twitter rate limit status calling https://api.twitter.com/1.1/application/ * * @return the twitter response */ RateLimitStatus getRateLimitStatus();  /** * Search tweets from last 30 days calling https://api.twitter.com/1.1/tweets/search/30day/dev.json Your development environment name should be * "dev". See https://developer.twitter.com/en/account/environments * * @param query the search query * @param fromDate the start date * @param toDate the end date * @param envName name of the premium environment. See https://developer.twitter.com/en/account/environments * @return a list of tweets * @Deprecated <p> Use {@link ITwitterClientV2#searchTweets(String)}
[*] target: assertNotNull(ids)
[-] pred: org. junit. Assert. assertNotNull ( ids )
************************************
************************************
[+] input: shouldNotAddCallIfCallIdIsNotProvided() { var aliceClientSample = aliceObservedSamplesGenerator.generateObservedClientSample(); var observedClientSamples = ObservedClientSamples.builder() .add(aliceClientSample.getServiceId(), aliceClientSample.getMediaUnitId(), aliceClientSample.getClientSample()) .build();  var callsFetcherResult = this.observedCallsFetcher.fetchFor(observedClientSamples); var aliceRoom = this.roomsRepository.get(aliceClientSample.getServiceRoomId()); Assertions."<AssertPlaceHolder>"; }
fetchFor(ObservedClientSamples observedClientSamples) { if (observedClientSamples == null || observedClientSamples.isEmpty()) { return EMPTY_RESULT; } var clientRelations = this.fetchObservedClientRelations(observedClientSamples); if (clientRelations.clientToServiceRoomIds.size() < 1 || clientRelations.clientToCallIds.size() < 1) { return EMPTY_RESULT; }  var clientToCallIds = clientRelations.clientToCallIds; var clientToServiceRoomIds = clientRelations.clientToServiceRoomIds; var existingCalls = this.callsRepository.getAll(clientToCallIds.values()); var existingRooms = this.roomsRepository.getAll(clientToServiceRoomIds.values());  var roomsToCreate = new HashMap<ServiceRoomId, String>(); var roomsToAlter = new HashMap<ServiceRoomId, String>(); var activeCallIds = new HashSet<String>(); var remedyClientIds = new HashSet<String>(); for (var entry : clientToServiceRoomIds.entrySet()) { var clientId = entry.getKey(); var serviceRoomId = entry.getValue(); var callId = clientToCallIds.get(clientId); if (callId == null) { logger.warn("No CallId is assigned to client {} in room: {}, service {}", clientId, serviceRoomId.roomId, serviceRoomId.serviceId); continue; } var existingCall = existingCalls.get(callId); var existingRoom = existingRooms.get(serviceRoomId); if (existingRoom == null) { // we should create a new room with the callId. btw we need to check if there is only one callId for the room var assignedCallIdToCreate = roomsToCreate.put(serviceRoomId, callId); if (assignedCallIdToCreate != null && !assignedCallIdToCreate.equals(callId)) { logger.warn("Ambiguous call room relation observed in the reported measurements. Service: {}, Room: {}. colliding callIds for newly created room: {}, {}", serviceRoomId.serviceId, serviceRoomId.roomId, assignedCallIdToCreate, callId); } continue; }  if (callId.equals(existingRoom.getCallId())) { // everything is okay, we don't need to change or create anything, but make sure we fetch it activeCallIds.add(callId); continue; } if (existingCall != null) { // thats a remedy client in a remedy call logger.info("Found remedy client. clientId: {}, prev callId: {}, room: {}, service: {}", clientId, existingCall.getCallId(), existingRoom.getServiceRoomId().roomId, existingRoom.getServiceRoomId().serviceId ); remedyClientIds.add(clientId); continue; } // this is probably a new call (or maybe add a deletedCalls set, and we need to check if there is only one callId for this room) var assignedCallIdToAlter = roomsToAlter.put(serviceRoomId, callId); if (assignedCallIdToAlter != null && !assignedCallIdToAlter.equals(callId)) { logger.warn("Ambiguous call room relation observed in the reported measurements. Service: {}, Room: {}. colliding callIds for altering an existing room: {}, {}", serviceRoomId.serviceId, serviceRoomId.roomId, assignedCallIdToAlter, callId); }  } // the result is correct, we should drop all client samples, which is not for the "actual" call.  if (0 < roomsToCreate.size()) { var createRoomsResult = this.createRooms(roomsToCreate); var callsToCreate = new LinkedList<CallsRepository.CreateCallInfo>(); for (var entry : Utils.firstNotNull(createRoomsResult.createdRoomToCallIds, Collections.<ServiceRoomId, String>emptyMap()).entrySet()) { var serviceRoomId = entry.getKey(); var assignedCallId = entry.getValue(); var observedRoom = observedClientSamples.getRoom(serviceRoomId); if (observedRoom == null) { logger.warn("Observed room cannot be found for Room {}, in service {}", serviceRoomId.roomId, serviceRoomId.serviceId); continue; } callsToCreate.add(new CallsRepository.CreateCallInfo( serviceRoomId, observedRoom.getMarker(), assignedCallId, observedRoom.getMinTimestamp() )); } //            logger.info("Calls to create: {}", JsonUtils.objectToString(callsToCreate)); if (0 < callsToCreate.size()) { var createdCallsResult = this.createCalls(callsToCreate); //                logger.info("createdCallsResult: {}", JsonUtils.objectToString(createdCallsResult)); activeCallIds.addAll(createdCallsResult.createdCallIds); activeCallIds.addAll(createdCallsResult.existingCallIds);  } } var serverNow = this.serverTimestamps.instant().toEpochMilli(); if (0 < roomsToAlter.size()) { var callsToCreate = new LinkedList<CallsRepository.CreateCallInfo>(); var oldRoomToCallIds = this.roomsRepository.setCallIds(roomsToAlter); for (var oldRoomToCallEntry : Utils.firstNotNull(oldRoomToCallIds, Collections.<ServiceRoomId, String>emptyMap()).entrySet()) { var serviceRoomId = oldRoomToCallEntry.getKey(); var oldCallId = oldRoomToCallEntry.getValue(); var newCallId = roomsToAlter.get(serviceRoomId); if (oldCallId != null && oldCallId.equals(newCallId)) { activeCallIds.add(newCallId); continue; } logger.info("CallId for room {} in service {} is changed from {} to {}", serviceRoomId.roomId, serviceRoomId.serviceId, oldCallId, newCallId ); var observedRoom = observedClientSamples.getRoom(serviceRoomId); if (observedRoom == null) { logger.warn("Observed room cannot be found for Room {}, in service {}", serviceRoomId.roomId, serviceRoomId.serviceId); continue; } callsToCreate.add(new CallsRepository.CreateCallInfo( serviceRoomId, observedRoom.getMarker(), newCallId, serverNow // it was observedRoom.getMinTimestamp(), but browser epoch timestamp  )); for (var observedClient : observedRoom) { var observedClientCallId = observedClient.streamObservedClientSamples() .map(oc -> oc.getClientSample().callId) .filter(Objects::nonNull) .findFirst().orElse(null); if (observedClientCallId == null || observedClientCallId.equals(newCallId)) { continue; } if (activeCallIds.remove(observedClientCallId)) { clientToCallIds.entrySet().stream() .filter(entry -> entry.getValue().equals(observedClientCallId)) .forEach(entry -> remedyClientIds.add(entry.getKey())); } } activeCallIds.add(newCallId); }  if (0 < callsToCreate.size()) { var createdCallsResult = this.createCalls(callsToCreate); activeCallIds.addAll(createdCallsResult.createdCallIds); activeCallIds.addAll(createdCallsResult.existingCallIds); } } this.roomsRepository.save(); var actualCalls = this.callsRepository.fetchRecursively(activeCallIds).values() .stream() .collect(Collectors.toMap( Call::getServiceRoomId, Function.identity(), (c1, c2) -> { logger.warn("Colliding calls for serviceRoomId {}. callIds: {}, {}", c1.getServiceRoomId(), c1.getCallId(), c2.getCallId()); return c1; } )); var existingRemedyClients = Utils.firstNotNull(this.clientsRepository.fetchRecursivelyUpwards(remedyClientIds), Collections.<String, Client>emptyMap()); Set<String> unregisteredRemedyClientIds; if (existingRemedyClients.size() < remedyClientIds.size()) { unregisteredRemedyClientIds = remedyClientIds.stream() .filter(clientId -> !existingRemedyClients.containsKey(clientId)) .collect(Collectors.toSet()); } else { unregisteredRemedyClientIds = Collections.emptySet(); } //        logger.info("roomsToCreate: {}\nroomsToAlter: {}\nactiveCallIds: {}\nremedyClientIds: {}\nunregisteredRemedyClientIds: {}", //                JsonUtils.objectToString(roomsToCreate), //                JsonUtils.objectToString(roomsToAlter), //                JsonUtils.objectToString(activeCallIds), //                JsonUtils.objectToString(remedyClientIds), //                JsonUtils.objectToString(unregisteredRemedyClientIds) //        ); return new CallsFetcherResult( actualCalls, existingRemedyClients, unregisteredRemedyClientIds ); }
[*] target: assertNull(aliceRoom)
[-] pred: org. junit. Assert. assertNull ( aliceRoom )
************************************
************************************
[+] input: testIsComplete() { LocalStatisticsJsonStringObject object = new LocalStatisticsJsonStringObject(); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(null); object.setSevenDayIncidence1stReportedTrend1Percent(42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); "<AssertPlaceHolder>"; }
isComplete() { return sevenDayIncidence1stReportedDaily != null && sevenDayIncidence1stReportedTrend1Percent != null; }
[*] target: assertTrue(object.isComplete())
[-] pred: org. junit. Assert. assertTrue ( object. isComplete() )
************************************
************************************
[+] input: getResourceMaps() { Maps<Resource> resourceMaps = exportVpcEndpoints.getResourceMaps(getVpcEndpoints()); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/VpcEndpoint.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSVpcEndpoint> awsVpcEndpoints) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();   awsVpcEndpoints.forEach(awsVpcEndpoint -> { VpcEndpoint vpcEndpoint = awsVpcEndpoint.getVpcEndpoint(); resourceMapsBuilder.map( Resource.builder() .api(awsVpcEndpoint.getTerraformResourceName()) .name(awsVpcEndpoint.getResourceName()) .argument("vpc_id", TFExpression.build( MessageFormat.format("aws_vpc.{0}.id", vpcEndpoint.vpcId()))) .argument("service_name", TFString.build(vpcEndpoint.serviceName())) .argument("tags", TFMap.build( vpcEndpoint.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); } ); return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: ReflectiveOperationException { MarketoFooter footer = getModel(MarketoFooter.class, CURRENT_PAGE_PATH); MarketoConfBasicInfo marketoConfig = footer.getMarketoConfBasicInfo(); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"dx/content/components/marketo"}, marketoConfig.getMarketoComponentTypes()); assertEquals("//app-ab12.marketo.com", marketoConfig.getBaseUrl()); assertEquals("123-shs-456", marketoConfig.getMunchkinId()); }
getMarketoConfBasicInfo() { return marketoConfBasicInfo; }
[*] target: assertNotNull(marketoConfig)
[-] pred: org. junit. Assert. assertNotNull ( marketoConfig )
************************************
************************************
[+] input: serializationTest() { SparseVector a = generateVectorA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); assertEquals(a, deser);  SparseVector empty = new SparseVector(10, new int[0], new double[0]); proto = empty.serialize(); deser = Tensor.deserialize(proto); assertEquals(empty, deser);  SparseVector full = new SparseVector(10, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 5); proto = full.serialize(); deser = Tensor.deserialize(proto); "<AssertPlaceHolder>";  }
serialize() { TensorProto.Builder builder = TensorProto.newBuilder();  builder.setVersion(CURRENT_VERSION); builder.setClassName(SparseVector.class.getName());  SparseTensorProto.Builder dataBuilder = SparseTensorProto.newBuilder(); dataBuilder.addAllDimensions(Arrays.stream(shape).boxed().collect(Collectors.toList())); ByteBuffer indicesBuffer = ByteBuffer.allocate(indices.length * 4).order(ByteOrder.LITTLE_ENDIAN); IntBuffer intBuffer = indicesBuffer.asIntBuffer(); intBuffer.put(indices); intBuffer.rewind(); ByteBuffer valuesBuffer = ByteBuffer.allocate(values.length * 8).order(ByteOrder.LITTLE_ENDIAN); DoubleBuffer doubleBuffer = valuesBuffer.asDoubleBuffer(); doubleBuffer.put(values); doubleBuffer.rewind(); dataBuilder.setIndices(ByteString.copyFrom(indicesBuffer)); dataBuilder.setValues(ByteString.copyFrom(valuesBuffer)); dataBuilder.setNumNonZero(values.length); builder.setSerializedData(Any.pack(dataBuilder.build()));  return builder.build(); }
[*] target: assertEquals(full, deser)
[-] pred: org. junit. Assert. assertEquals ( full, deser )
************************************
************************************
[+] input: it_recognizes_non_batch_file_io_statement() { CobolLine line = new CobolLine("       5200-PREPARE-OUTPUT-RECORD.", tokenExtractor);  boolean isBatchFileIOStatement = Interpreter.checkForBatchFileIOStatement(line);  "<AssertPlaceHolder>"; }
checkForBatchFileIOStatement(CobolLine line) { for (String ioVerb : batchFileIOVerbs) { if (isBatchFileIOStatement(line.getTokens(), ioVerb)) { return true; } } return false; }
[*] target: assertFalse(isBatchFileIOStatement)
[-] pred: org. junit. Assert. assertFalse ( isBatchFileIOStatement )
************************************
************************************
[+] input: Exception { final boolean actual = FileUtil.isExistingFolder(null);  // asserts "<AssertPlaceHolder>"; }
isExistingFolder(final File folder) { return folder != null && folder.exists() && folder.isDirectory(); }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: Exception { final String expected = "UPDATE BLOG SET  NAME = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("UPDATE BLOG"), new SetSqlNode(new Configuration(), mixedContents( new IfSqlNode(mixedContents(new TextSqlNode("ID = ?")), "false"), new IfSqlNode(mixedContents(new TextSqlNode(", NAME = ?")), "true")))); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
getSql(){ DynamicContext context = new DynamicContext(configuration, null); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class<?> parameterType = Object.class; SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); BoundSql boundSql = sqlSource.getBoundSql(null); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql.getSql(); }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
************************************
[+] input: Exception { QpackDecoderDynamicTable table = newTable(100); assertEquals(0, table.length()); table.add(fooBar); assertEquals(1, table.length()); table.clear(); "<AssertPlaceHolder>"; }
length() { return head < tail ? fields.length - tail + head : head - tail; }
[*] target: assertEquals(0, table.length())
[-] pred: org. junit. Assert. assertEquals ( 0, table. length() )
************************************
************************************
[+] input: testSerializationMixture() { serialize.registerClass(1,TClass1.class, new TClass1Serializer());  for (int t = 0; t < 1000; t++) { DataOutput out = serialize.getDataOutput(128); int num = random.nextInt(100)+1; final List<SerialEntry> entries = new ArrayList<>(num); for (int i = 0; i < num; i++) { Map.Entry<Class,Factory> type = Iterables.get(TYPES.entrySet(),random.nextInt(TYPES.size())); Object element = type.getValue().newInstance(); boolean notNull = true; if (random.nextDouble()<0.5) { notNull = false; if (random.nextDouble()<0.2) element=null; } entries.add(new SerialEntry(element,type.getKey(),notNull)); if (notNull) out.writeObjectNotNull(element); else out.writeObject(element,type.getKey()); } StaticBuffer sb = out.getStaticBuffer(); ReadBuffer in = sb.asReadBuffer(); for (SerialEntry entry : entries) { Object read; if (entry.notNull) read = serialize.readObjectNotNull(in,entry.clazz); else read = serialize.readObject(in,entry.clazz); if (entry.object==null) "<AssertPlaceHolder>"; else if (entry.clazz.isArray()) { assertEquals(Array.getLength(entry.object),Array.getLength(read)); for (int i = 0; i < Array.getLength(read); i++) { assertEquals(Array.get(entry.object,i),Array.get(read,i)); } } else assertEquals(entry.object,read); } } }
readObject(ScanBuffer buffer, Class<T> type);
[*] target: assertNull(read)
[-] pred: org. junit. Assert. assertNull ( read )
************************************
************************************
[+] input: checkClassFromExternalJar() { final JarFile actual = ClassUtil.jarFileOf(StringUtils.class);  // asserts "<AssertPlaceHolder>"; assertTrue(actual.getName().contains("junit-platform-commons")); }
jarFileOf(final Class<?> klass) { final URL url = klass.getResource( "/" + klass.getName().replace('.', '/') + ".class");  if (url == null) { return null; }  final String s = url.getFile(); final int beginIndex = s.indexOf("file:") + "file:".length(); int endIndex = s.indexOf(".jar!"); if (endIndex == -1) { return null; }  endIndex += ".jar".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, StandardCharsets.UTF_8); final File file = new File(f);  try { return file.exists() ? new JarFile(file) : null; } catch (final IOException e) { throw new IllegalStateException(e); } }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldReThrowException_1() { var task = this.makeOneTimeFailingTask(1);  task.withRethrowingExceptions(true);  Assertions.assertThrows(RuntimeException.class, task::execute); Assertions."<AssertPlaceHolder>"; }
succeeded() { if (!this.executed) { throw new IllegalStateException("The task has not been executed"); } return succeeded; }
[*] target: assertFalse(task.succeeded())
[-] pred: org. junit. Assert. assertFalse ( task. succeeded() )
************************************
************************************
[+] input: testToDateStringNow() { long now = System.currentTimeMillis() / 1000L; String expected = new Date(now * 1000L).toString(); String actual = SftpATTRS.toDateString(now); "<AssertPlaceHolder>"; }
toDateString(long epochSeconds) { Instant instant = Instant.ofEpochSecond(epochSeconds); ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.systemDefault()); return DTF.format(zdt); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testEqualsAndHashCode() { MultiLabel a = new MultiLabelFactory().generateOutput("a"); MultiLabel b = new MultiLabelFactory().generateOutput("a"); assertEquals(a, b); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(labelStrings); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() )
************************************
************************************
[+] input: testPostDM() { DmEvent result = twitterClient.postDm("Hello world !", "1120050519182016513"); "<AssertPlaceHolder>"; assertNotNull(result.getEvent().getText()); }
postDm(String text, String userId);
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getOptions() { String result = WalkGenerationMode.getOptions(); "<AssertPlaceHolder>"; assertFalse(result.endsWith(" ")); assertFalse(result.endsWith("|")); //System.out.println(result); }
getOptions() { String result = ""; for (WalkGenerationMode mode : WalkGenerationMode.values()) { result += mode.toString() + " | "; } result = result.substring(0, result.length() - 3); return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getTemplateConfigMetadata() { ConfigMetadata templateConfig = provider.getTemplateConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云语音模版", templateConfig.getName()); }
getTemplateConfigMetadata() { return templateConfig; }
[*] target: assertNotNull(templateConfig)
[-] pred: org. junit. Assert. assertNotNull ( templateConfig )
************************************
************************************
[+] input: testGetRecordingOptionsDefaults() { Map<String, String> expected = new HashMap<>(); // Due to a bug, some JVMs default "disk=true". So include "disk=false" (the documented default) // to insure consistent behaviour. expected.put("disk", "false"); RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getRecordingOptions() { return recordingOptions; }
[*] target: assertEquals(expected, opts.getRecordingOptions())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getRecordingOptions() )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = CatalogController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = catalogViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, CatalogController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.end(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
isEnded() { return COMMITTED_UPDATER.get(this) == END; }
[*] target: assertTrue(res.isEnded())
[-] pred: org. junit. Assert. assertTrue ( res. isEnded() )
************************************
************************************
[+] input: Exception { Map<String, String> configuration = new HashMap<>(); configuration.put("jdk.ObjectAllocationInNewTLAB#enabled", "true"); configuration.put("jdk.ObjectAllocationOutsideTLAB#enabled", "true");  TabularData expected = OpenDataUtils.makeOpenData(configuration);  MBeanServerConnection mBeanServerConnection = ManagementFactory.getPlatformMBeanServer(); ObjectName objectName = new ObjectName("jdk.management.jfr:type=FlightRecorder"); ObjectInstance objectInstance = mBeanServerConnection.getObjectInstance(objectName);  Object[] args = new Object[] {}; String[] argTypes = new String[] {}; long id = (long) mBeanServerConnection.invoke( objectInstance.getObjectName(), "newRecording", args, argTypes);  args = new Object[] {id, expected}; argTypes = new String[] {long.class.getName(), TabularData.class.getName()}; mBeanServerConnection.invoke( objectInstance.getObjectName(), "setRecordingSettings", args, argTypes);  args = new Object[] {id}; argTypes = new String[] {long.class.getName()}; Map<?, ?> actual = (Map<?, ?>) mBeanServerConnection.invoke( objectInstance.getObjectName(), "getRecordingSettings", args, argTypes);  "<AssertPlaceHolder>"; }
makeOpenData(Map<String, String> options) throws OpenDataException { // Copied from newrelic-jfr-core String typeName = "java.util.Map<java.lang.String, java.lang.String>"; String[] itemNames = new String[] {"key", "value"}; OpenType<?>[] openTypes = new OpenType<?>[] {SimpleType.STRING, SimpleType.STRING}; CompositeType rowType = new CompositeType(typeName, typeName, itemNames, itemNames, openTypes); TabularType tabularType = new TabularType(typeName, typeName, rowType, new String[] {"key"}); TabularDataSupport table = new TabularDataSupport(tabularType);  for (Map.Entry<String, String> entry : options.entrySet()) { Object[] itemValues = {entry.getKey(), entry.getValue()}; CompositeData element = new CompositeDataSupport(rowType, itemNames, itemValues); table.put(element); } return table; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetMaxSizeDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getMaxSize() { return getOrDefault(Option.MAX_SIZE); }
[*] target: assertEquals(expected, opts.getMaxSize())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getMaxSize() )
************************************
************************************
[+] input: testGetNameDefault() { String expected = ""; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getName() { return getOrDefault(Option.NAME); }
[*] target: assertEquals(expected, opts.getName())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getName() )
************************************
************************************
[+] input: should_result_millis_when_hours() {  var expected = 10 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("10hours");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getUserByUserName() { String userName = "RedouaneBali"; User   result   = twitterClient.getUserFromUserName(userName); "<AssertPlaceHolder>"; }
getUserFromUserName(String userName);
[*] target: assertEquals(userName, result.getName())
[-] pred: org. junit. Assert. assertEquals ( userName, result. getName ( ) )
************************************
************************************
[+] input: testISONoMilli() { final String ts = "2020-07-17T14:32:34Z"; Instant i = TimeUtil.fromISOInstant(ts); String time = TimeUtil.toISOInstantTruncated(i); "<AssertPlaceHolder>"; }
toISOInstantTruncated(@NonNull Instant instant) { return ISO_INSTANT_FORMATTER.format(instant.truncatedTo(ChronoUnit.SECONDS)); }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
************************************
[+] input: getResourceMaps() { AWSAccount awsAccount = getAwsAccount();  Maps<Resource> resourceMaps = exportApiGatewayAccount.getResourceMaps(awsAccount); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Apigateway.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(AWSAccount awsAccount) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); GetAccountResponse account = awsAccount.getAccount();  if (Optional.ofNullable(account.cloudwatchRoleArn()).isPresent()) { resourceMapsBuilder.map( Resource.builder() .api(awsAccount.getTerraformResourceName()) .name(awsAccount.getResourceName()) .argument("cloudwatch_role_arn", TFString.build(account.cloudwatchRoleArn())) .build() ); }   return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testNotifyoverrideUrls_withInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> durls = new ArrayList<URL>(); durls.add(SERVICEURL.addParameter("timeout", "1000")); durls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10")); durls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5"));  registryDirectory.notify(durls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/VCUnsigned.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); VerifiablePresentation<VerifiableIndyCredential> signed = mgmt.sign(vp).orElseThrow(); assertNotNull(signed.getProof());  Boolean verified = mgmt.verify(id.getVerkey().orElseThrow(), signed); "<AssertPlaceHolder>"; }
verify(String verkey, VerifiablePresentation<VerifiableIndyCredential> inputVp) { Boolean result = Boolean.FALSE; try { Optional<VerifyResponse> state = acaPy.jsonldVerify(verkey, inputVp); if (state.isPresent()) { result = state.get().isValid(); } } catch (IOException e) { log.error(e.getMessage(), e); throw new NetworkException(e.getMessage()); } return result; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[SiH2]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: testCapsuleOnEmptyPredicate() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty().capsule(); "<AssertPlaceHolder>"; }
isEmpty() { return predicate == null; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
************************************
[+] input: dataSource() { DataSource dataSource = jdbcSourceConfig.dataSource(); Assertions."<AssertPlaceHolder>"; }
dataSource() { return DruidDataSourceBuilder.create().build(); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); long heapUsed = 300; long heapCommittedSize = 500; long reservedSize = 200; long heapStart = 123; long committedEnd = 321; long reservedEnd = 456; String when = "when"; attr.put(WHEN, when); attr.put(HEAP_START, heapStart); attr.put(COMMITTED_END, committedEnd); attr.put(RESERVED_END, reservedEnd);  var gauge1 = new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_COMMITTED_SIZE, heapCommittedSize, now, attr); var gauge2 = new Gauge(JFR_GC_HEAP_SUMMARY_RESERVED_SIZE, reservedSize, now, attr); var gauge3 = new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_USED, heapUsed, now, attr); List<Metric> expected = List.of(gauge1, gauge2, gauge3);  var testClass = new GCHeapSummaryMapper();  var recordedObject = mock(RecordedObject.class); when(recordedObject.getLong(COMMITTED_SIZE)).thenReturn(heapCommittedSize); when(recordedObject.getLong(RESERVED_SIZE)).thenReturn(reservedSize); when(recordedObject.getLong(START)).thenReturn(heapStart); when(recordedObject.getLong(COMMITTED_END)).thenReturn(committedEnd); when(recordedObject.getLong(RESERVED_END)).thenReturn(reservedEnd);  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getLong(HEAP_USED)).thenReturn(heapUsed); when(event.getValue(HEAP_SPACE)).thenReturn(recordedObject); when(event.getString(WHEN)).thenReturn(when);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { long timestamp = ev.getStartTime().toEpochMilli(); long heapUsed = 0; if (hasField(ev, HEAP_USED, SIMPLE_CLASS_NAME)) { heapUsed = ev.getLong(HEAP_USED); } List<Gauge> list = new ArrayList<>(); Attributes attr = new Attributes(); RecordedObject heapSpace = null; if (hasField(ev, HEAP_SPACE, SIMPLE_CLASS_NAME)) { heapSpace = ev.getValue(HEAP_SPACE); } if (!isRecordedObjectNull(heapSpace, SIMPLE_CLASS_NAME)) { long committedSize = 0; if (hasField(heapSpace, COMMITTED_SIZE, SIMPLE_CLASS_NAME)) { committedSize = heapSpace.getLong(COMMITTED_SIZE); } long reservedSize = 0; if (hasField(heapSpace, RESERVED_SIZE, SIMPLE_CLASS_NAME)) { reservedSize = heapSpace.getLong(RESERVED_SIZE); } if (hasField(heapSpace, WHEN, SIMPLE_CLASS_NAME)) { attr.put(WHEN, ev.getString(WHEN)); } if (hasField(heapSpace, START, SIMPLE_CLASS_NAME)) { attr.put(HEAP_START, heapSpace.getLong(START)); } if (hasField(heapSpace, COMMITTED_END, SIMPLE_CLASS_NAME)) { attr.put(COMMITTED_END, heapSpace.getLong(COMMITTED_END)); } if (hasField(heapSpace, RESERVED_END, SIMPLE_CLASS_NAME)) { attr.put(RESERVED_END, heapSpace.getLong(RESERVED_END)); } list.add(new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_COMMITTED_SIZE, committedSize, timestamp, attr)); list.add(new Gauge(JFR_GC_HEAP_SUMMARY_RESERVED_SIZE, reservedSize, timestamp, attr)); } list.add(new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_USED, heapUsed, timestamp, attr)); return list; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: shouldAcceptTheConfirmPrompt() { page.onDialog(dialog -> { dialog.accept(); }); Object result = page.evaluate("() => confirm('boolean?')"); "<AssertPlaceHolder>"; }
accept() { accept(null); }
[*] target: assertEquals(true, result)
[-] pred: org. junit. Assert. assertEquals ( true, result )
************************************
************************************
[+] input: checkEqualsAddress_true_doorNumber_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = ""; String postCodeA = "4000-222"; String cityA = "Porto"; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = ""; String postCodeB = "4000-222"; String cityB = "Porto"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setDoorNumber(null); addressB.setDoorNumber(null);   //Assert  "<AssertPlaceHolder>";  }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
************************************
[+] input: testGetListTweets() { String   listId  = "1449313282892910592"; TweetList tweets = twitterClient.getListTweets(listId,  AdditionalParameters.builder().recursiveCall(false).maxResults(150).build()); "<AssertPlaceHolder>"; assertTrue(tweets.getData().size() > 1); assertNotNull(tweets.getData().get(0).getId()); assertNotNull(tweets.getData().get(0).getText()); assertNotNull(tweets.getData().get(0).getCreatedAt()); }
getListTweets(String listId, AdditionalParameters additionalParameters);
[*] target: assertNotNull(tweets)
[-] pred: org. junit. Assert. assertNotNull ( tweets )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testWrapBoldAroundNewline() { final String input = "[B]Dum\nDum[/B]"; final String expected = "**Dum**\n**Dum**"; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
convertToMarkdown(String s) { // Deduplication, remove spaces in tags int index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, true); if (closingIndex == -1) { index++; continue; }  s = s.substring(0, index) + this.currentContent + s.substring(closingIndex); }  // Iterate until no whitespaces are left (else they might only be moved into the upper tag...) String result; while ((result = this.removeTrailingWhitespaces(s)) != null) { s = result; }  // Tag conversion index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, false); if (closingIndex == -1) { // No closing tag/no simple match index++; continue; }  if (this.currentContent == null) { // Simple opening tag match final String replacement = SIMPLE_SINGLETON_REPLACERS.get(this.currentTag); s = s.substring(0, index) + replacement + s.substring(closingIndex); continue; }  final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer == null) { // No replacer found index++; continue; }  String processed = replacer.process(this.currentTag, this.currentArg, this.currentContent); if (processed == null) { index++; } else { if (replacer.appendNewline()) { processed += "\n"; }  s = s.substring(0, index) + processed + s.substring(closingIndex); if (replacer.hasRawContents()) { index += processed.length(); } } }  // Removes newlines from the end of the last tag adds newlines final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer != null && replacer.appendNewline()) { final int lastChar = s.length() - 1; if (s.lastIndexOf('\n') == lastChar) { return s.substring(0, lastChar); } }  return cleanup(s); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: IOException { Document fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6_frag.json"); Document toDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc.merge(fromDoc, null); String expected = getCompressedJson("/jdocs/sample_6_1_expected.json"); String actual = toDoc.getJson(); assertEquals(expected, actual);  fromDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9_frag.json"); toDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_9_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // this tests the merging of value arrays fromDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10_frag.json"); toDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_10_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test3() { int[][] boxTypes = {{2, 1}, {4, 4}, {3, 1}, {4, 1}, {2, 4}, {3, 4}, {1, 3}, {4, 3}, {5, 3}, {5, 3}}; int truckSize = 13; int expected = new Solution().maximumUnits(boxTypes, truckSize); int actual = new Solution5().maximumUnits(boxTypes, truckSize); "<AssertPlaceHolder>"; }
maximumUnits(int[][] boxTypes, int truckSize) { PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(x -> x[1])); int ans = 0; for (int[] boxType : boxTypes) { ans += boxType[0] * boxType[1]; truckSize -= boxType[0]; pq.offer(boxType); if (truckSize < 0) { int[] poll = null; while (truckSize < 0) { poll = pq.poll(); truckSize += poll[0]; ans -= poll[0] * poll[1]; } int a = Math.min(truckSize, poll[0]); if (a > 0) { truckSize -= a; ans += a * poll[1]; poll[0] = a; pq.offer(poll); } } } return ans; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsOptionGroup.cmd")); String actual = exportRdsOptionGroups.getTFImport(getAwsRdsOptionGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRdsOptionGroup> awsRdsOptionGroups) { return TFImport.builder() .importLines(awsRdsOptionGroups.stream() .map(awsRdsOptionGroup -> TFImportLine.builder() .address(awsRdsOptionGroup.getTerraformAddress()) .id(awsRdsOptionGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { List<AWSKmsKey> roles = getAwsKmsKeys(); Maps<Resource> resourceMaps = exportKmsKeys.getResourceMaps(roles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/KmsKey.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSKmsKey> awsKmsKeys) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSKmsKey awsKmsKey : awsKmsKeys) { KeyMetadata keyMetadata = awsKmsKey.getKeyMetadata(); List<AWSKmsKeyPolicy> awsKeyPolicies = awsKmsKey.getAwsKeyPolicies(); resourceMapsBuilder.map( Resource.builder() .api(awsKmsKey.getTerraformResourceName()) .name(awsKmsKey.getResourceName()) .argument("description", TFString.build(keyMetadata.description())) .argument("key_usage", TFString.build(keyMetadata.keyUsageAsString())) .argument("deletion_window_in_days", TFNumber.builder() .value(Optional.ofNullable(keyMetadata.pendingDeletionWindowInDays()) .map(Object::toString) .orElse(null)) .build()) .argument("customer_master_key_spec", TFString.build(keyMetadata.keySpecAsString())) .argumentsIf(Optional.ofNullable(awsKeyPolicies).isPresent(), "policy", () -> awsKeyPolicies.stream() .map(awsKmsKeyPolicy -> TFString.builder().isMultiline(true) .value(JsonUtils.toPrettyFormat( URLDecoder.decode(awsKmsKeyPolicy.getPolicy(), StandardCharsets.UTF_8))) .build() ).collect(Collectors.toList())) .build() );  List<AWSKmsAlias> awsKmsAliases = awsKmsKey.getAwsKmsAliases(); awsKmsAliases.forEach(awsKmsAlias -> { AliasListEntry aliasListEntry = awsKmsAlias.getAlias(); resourceMapsBuilder.map( Resource.builder() .api(awsKmsAlias.getTerraformResourceName()) .name(awsKmsAlias.getResourceName()) .argument("name", TFString.build(aliasListEntry.aliasName())) .argument("target_key_id", TFString.build(aliasListEntry.targetKeyId())) .build() ); } ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testISOWithMilli() { final String ts = "2021-11-16T12:02:41.930486Z"; final Instant i = TimeUtil.fromISOInstant(ts); assertNotNull(i); String time = TimeUtil.toISOInstant(i); "<AssertPlaceHolder>"; }
toISOInstant(@NonNull Instant instant) { return ISO_INSTANT_FORMATTER.format(instant); }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
************************************
[+] input: confirmAgreement_resourceNotFound_returnFalse() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)) .thenThrow(ResourceNotFoundException.class);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
confirmAgreement(final Agreement agreement) { try { return agreementService.confirmAgreement(agreement); } catch (ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Failed to confirm agreement. [id=({})]", agreement.getId()); }  return false; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiLineString(new LineString[] { gf.createLineString(new Coordinate[] {new Coordinate(10,10), new Coordinate(20,20)}), gf.createLineString(new Coordinate[] {new Coordinate(30,30), new Coordinate(40,40)})}));  String wkt1 = "MULTILINESTRING ((10 10, 20 20), (30 30, 40 40))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
convertToWktString(Geoshape fieldValue) throws BackendException { return fieldValue.toString(); }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
************************************
[+] input: should_result_long_number_of_bytes_when_mib_symbol() {  var expected = (long)(1 * 1024 * 1024);  var actual = NumberUtil.fromHumanReadable("1MiB");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(10, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testStringPaddingEven() { String actual = SerialiserFlavorBase.createCenteredHeading(null, '#', 52); String expected = "####################################################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, data);  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: getResourceMaps() { List<AWSCacheReplicationGroup> awsCacheClusters = getAwsCacheReplicationGroups();  Maps<Resource> resourceMaps = exportElastiCacheReplicationGroups.getResourceMaps(awsCacheClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ElasticacheReplicationGroup.tf") ); "<AssertPlaceHolder>";  }
getResourceMaps(List<AWSCacheReplicationGroup> awsCacheReplicationGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsCacheReplicationGroups.forEach(awsCacheReplicationGroup -> { ReplicationGroup replicationGroup = awsCacheReplicationGroup.getReplicationGroup(); CacheCluster cacheCluster = awsCacheReplicationGroup.getCacheClusters().stream().findFirst().get(); List<Tag> tags = awsCacheReplicationGroup.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsCacheReplicationGroup.getTerraformResourceName()) .name(awsCacheReplicationGroup.getResourceName()) .argument("replication_group_id", TFString.build(replicationGroup.replicationGroupId())) .argument("replication_group_description", TFString.build(replicationGroup.description())) .argument("node_type", TFString.build(replicationGroup.cacheNodeType())) .argument("engine", TFString.build(cacheCluster.engine())) .argument("engine_version", TFString.build(cacheCluster.engineVersion())) .argument("port", TFNumber.build(replicationGroup.configurationEndpoint().port())) .argument("parameter_group_name", TFString.build(cacheCluster.cacheParameterGroup().cacheParameterGroupName())) .argument("at_rest_encryption_enabled", TFBool.build(replicationGroup.atRestEncryptionEnabled())) .argument("transit_encryption_enabled", TFBool.build(replicationGroup.transitEncryptionEnabled())) .argument("auth_token", TFBool.build(replicationGroup.authTokenEnabled())) .argument("auto_minor_version_upgrade", TFBool.build(cacheCluster.autoMinorVersionUpgrade())) .argument("automatic_failover_enabled", TFString.build(replicationGroup.automaticFailoverAsString())) .argument("number_cache_clusters", TFNumber.build(awsCacheReplicationGroup.getCacheClusters().size())) .argument("snapshot_retention_limit", TFString.build(replicationGroup.snapshotRetentionLimit().toString())) .argument("snapshot_window", TFString.build(replicationGroup.snapshotWindow())) .argument("subnet_group_name", TFString.build(cacheCluster.cacheSubnetGroupName())) .argument("security_group_ids", TFList.build(cacheCluster.securityGroups().stream() .map(sg -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_security_group.security_groups.{0}.id", sg.securityGroupId())) .build()) .collect(Collectors.toList()))) .argumentIf(replicationGroup.clusterEnabled(), "cluster_mode", TFBlock.builder() .argument("num_node_groups", TFNumber.build(replicationGroup.nodeGroups().size())) .argument("replicas_per_node_group", TFNumber.build(replicationGroup.nodeGroups().stream() .findFirst().get().nodeGroupMembers().size())) .build() ) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build());  });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: isTransient() { MetadataInjectionPoint metadataInjectionPoint = new MetadataInjectionPoint(); Assertions."<AssertPlaceHolder>"; }
isTransient() { return false; }
[*] target: assertFalse(metadataInjectionPoint.isTransient())
[-] pred: org. junit. Assert. assertFalse ( metadataInjectionPoint. isTransient() )
************************************
************************************
[+] input: verifyUsernamePassword() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro", "123456"); "<AssertPlaceHolder>"; }
verifyUsernamePassword(Integer userId, String username, String password) { QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, userId) .eq(UserIdentityDO::getIdentityType, IdentityConstant.USERNAME_PASSWORD_IDENTITY) .eq(UserIdentityDO::getIdentifier, username); UserIdentityDO userIdentity = this.baseMapper.selectOne(wrapper); return EncryptUtil.verify(userIdentity.getCredential(), password); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageConfiguration payloadStorageConfiguration = new PayloadStorageConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
getS3Client() { return s3; }
[*] target: assertNull(payloadStorageConfiguration.getS3Client())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3Client() )
************************************
************************************
[+] input: test_convert_csv_line_contains_comma() { String[] record = {"1", "apple,orange", "10", "9.99"}; String expected = ""1","apple,orange","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line) { return convertToCsvFormat(line, DEFAULT_SEPARATOR); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: NoSuchAlgorithmException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedMailboxStorageEntry( mailboxStoragePayload, senderKeys.getPublic(), 1, new byte[] { 0 }, receiverKeys.getPublic(), Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry.receiversPubKey matches the Payload.ownerPubKey. This is a requirement for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for adding MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getSenderPubKeyForAddOperation().getEncoded(),true);  log.warn("ProtectedMailboxStorageEntry::isValidForAddOperation() failed. " + "Entry owner does not match sender key in payload:\nProtectedStorageEntry=%{}\n" + "SenderPubKeyForAddOperation=%{}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
************************************
[+] input: updateUserInfo2() { UserDO user = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); GroupDO group1 = GroupDO.builder().name("测试分组12").info("just for test").build(); GroupDO group2 = GroupDO.builder().name("测试分组11").info("just for test").build(); userMapper.insert(user); groupMapper.insert(group1); groupMapper.insert(group2); List<UserGroupDO> relations = new ArrayList<>(); UserGroupDO relation1 = new UserGroupDO(user.getId(), group1.getId()); relations.add(relation1); userGroupMapper.insertBatch(relations);  UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Collections.singletonList(group2.getId())); boolean b = adminService.updateUserInfo(user.getId(), dto); "<AssertPlaceHolder>";  QueryWrapper<UserGroupDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group1.getId()); UserGroupDO rel1 = userGroupMapper.selectOne(wrapper); assertNull(rel1);  QueryWrapper<UserGroupDO> wrapper1 = new QueryWrapper<>(); wrapper1.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group2.getId()); UserGroupDO rel2 = userGroupMapper.selectOne(wrapper1); assertEquals(rel2.getGroupId(), group2.getId()); }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: shouldReturnNumber_whenItsOnly() { int[] arr = { 5 }; int expected = 5;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
getNumberWithOddOccurrences(int[] array) { return map(array); }
[*] target: assertEquals(expected, actual)
[-] pred: assertEquals ( expected, actual )
************************************
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentUnLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  resolveUnLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  if (foundSomethingToSubstitute){ performUnLocantedSubstitutiveOperations(state, subOrRoot);//e.g. tetramethylfuran } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: testInvokeWithArgs() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); Map<String, String> body = new HashMap<>(16); body.put("foo", "1"); body.put("bar", "2"); final CompletableFuture<Object> ret = handler.handle(get, response, body); assertNotNull(ret); assertNotNull(ret.join()); final Map<String, Object> args = (Map<String, Object>) ret.join(); assertEquals(0, args.size());  final AsyncRequest post = MockAsyncRequest.aMockRequest() .withMethod("POST") .build(); final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(post, response1, body); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args1 = (Map<String, Object>) ret1.join(); assertEquals(body, args1); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testDoFixValueAssert_withExpectation() { EqualsAssertion equalsAssertion = MockEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = equalsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); if (NumberUtils.isParsable(expectedValue) || NumberUtils.isParsable(originalValue)) { return Double.parseDouble(expectedValue) == Double.parseDouble(originalValue); }  return expectedValue.equals(originalValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
parse(String text) { if (text == null || text.isEmpty()) { return ""; } // search open token int start = text.indexOf(openToken); if (start == -1) { return text; } char[] src = text.toCharArray(); int offset = 0; final StringBuilder builder = new StringBuilder(); StringBuilder expression = null; do { if (start > 0 && src[start - 1] == '\') { // this open token is escaped. remove the backslash and continue. builder.append(src, offset, start - offset - 1).append(openToken); offset = start + openToken.length(); } else { // found open token. let's search close token. if (expression == null) { expression = new StringBuilder(); } else { expression.setLength(0); } builder.append(src, offset, start - offset); offset = start + openToken.length(); int end = text.indexOf(closeToken, offset); while (end > -1) { if (end > offset && src[end - 1] == '\') { // this close token is escaped. remove the backslash and continue. expression.append(src, offset, end - offset - 1).append(closeToken); offset = end + closeToken.length(); end = text.indexOf(closeToken, offset); } else { expression.append(src, offset, end - offset); break; } } if (end == -1) { // close token was not found. builder.append(src, start, src.length - start); offset = src.length; } else { builder.append(handler.handleToken(expression.toString())); offset = end + closeToken.length(); } } start = text.indexOf(openToken, offset); } while (start > -1); if (offset < src.length) { builder.append(src, offset, src.length - offset); } return builder.toString(); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse ( input. toString ( ) ) )
************************************
************************************
[+] input: serialize() { StackSerializer serializer = new StackSerializer(STACK_DEPTH); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) frames);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat io.test.MyClass.silver(unknown:456)\n" + "\tat io.test.Framewerk.root(unknown:66)"; "<AssertPlaceHolder>"; }
serialize(IMCStackTrace stack) { List<? extends IMCFrame> frames = stack.getFrames(); return frames.stream() // limit the number of stack frames in case jfr stack depth is greater than our stack depth // truncate the bottom stack frames the same way as jfr .limit(maxDepth) .reduce( new StringBuilder(), this::serializeFrame, (sb1, sb2) -> sb1.append("\n").append(sb2)) .toString(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: putMoneyAndGetObject() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Object out = dataManager.get(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertTrue(out instanceof Money); final Money mOut = (Money) out; assertEquals(twelveDotThreeFour, mOut.getValue()); final Currency currency = mOut.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: test() { SaCookie cookie = new SaCookie("satoken", "xxxx-xxxx-xxxx-xxxx") .setDomain("https://sa-token.cc/") .setMaxAge(-1) .setPath("/") .setSameSite("Lax") .setHttpOnly(true) .setSecure(true);  Assertions.assertEquals(cookie.getName(), "satoken"); Assertions.assertEquals(cookie.getValue(), "xxxx-xxxx-xxxx-xxxx"); Assertions.assertEquals(cookie.getDomain(), "https://sa-token.cc/"); Assertions.assertEquals(cookie.getMaxAge(), -1); Assertions.assertEquals(cookie.getPath(), "/"); Assertions.assertEquals(cookie.getSameSite(), "Lax"); Assertions.assertEquals(cookie.getHttpOnly(), true); Assertions.assertEquals(cookie.getSecure(), true); Assertions.assertEquals(cookie.toHeaderValue(), "satoken=xxxx-xxxx-xxxx-xxxx; Domain=https://sa-token.cc/; Path=/; Secure; HttpOnly; SameSite=Lax");  Assertions."<AssertPlaceHolder>"; }
toString() { return "SaCookie [name=" + name + ", value=" + value + ", maxAge=" + maxAge  + ", domain=" + domain + ", path=" + path + ", secure=" + secure + ", httpOnly=" + httpOnly + ", sameSite=" + sameSite + "]"; }
[*] target: assertNotNull(cookie.toString())
[-] pred: org. junit. Assert. assertNotNull ( cookie. toString() )
************************************
************************************
[+] input: shouldGetAndSetRoles() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setRoles(expectedValue); "<AssertPlaceHolder>"; }
getRoles() { return roles; }
[*] target: assertEquals(expectedValue, user.getRoles())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getRoles() )
************************************
************************************
[+] input: equals_true_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
************************************
[+] input: Exception { var stack = new ArrayList<RecordedFrame>(); var method = buildMethod("", "", ""); // Specially crafted artisanal length in order to exercise the edge case // It happens on the second recursion. for (int i = 0; i < 75; i++) { var frame = buildFrame(method, 0, 0); stack.add(frame); }  String result = MethodSupport.jsonWrite(stack, Optional.of(74)); "<AssertPlaceHolder>"; assertTrue(result.length() <= MethodSupport.HEADROOM_75PC); }
jsonWrite(final List<RecordedFrame> frames, final Optional<Integer> limit) throws IOException { StringWriter strOut = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(strOut); int frameCount = Math.min(limit.orElse(frames.size()), frames.size());  jsonWriter.beginObject(); jsonWriter.name("type").value("stacktrace"); jsonWriter.name("language").value("java"); jsonWriter.name("version").value(JSON_SCHEMA_VERSION); jsonWriter.name("truncated").value(frameCount < frames.size()); jsonWriter.name("payload").beginArray(); for (int i = 0; i < frameCount; i++) { RecordedFrame frame = frames.get(i); jsonWriter.beginObject(); jsonWriter.name("desc").value(describeMethod(frame.getMethod())); jsonWriter.name("line").value(Integer.toString(frame.getLineNumber())); jsonWriter.name("bytecodeIndex").value(Integer.toString(frame.getBytecodeIndex())); jsonWriter.endObject(); }  jsonWriter.endArray(); jsonWriter.endObject(); String out = strOut.toString(); int length = out.length(); if (length > HEADROOM_75PC) { double percentageOfFramesToTry = ((double) HEADROOM_75PC) / length; int numFrames = (int) (frameCount * percentageOfFramesToTry); if (numFrames < frameCount) { return jsonWrite(frames, Optional.of(numFrames)); } throw new IOException( "Corner case of a stack frame that can't be cleanly truncated! " + "numFrames = " + numFrames + ", frameCount = " + frameCount + ", " + ", percentageOfFramesToTry = " + percentageOfFramesToTry + ", length = " + length); } else { return out; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 10; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> metrics = parseMetrics(events.get(0)); Assertions.assertEquals(metrics.size(), metricCount); for (MetricDefinition metric : metrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
serialize() throws JsonProcessingException { if (rootNode.metrics().size() <= Constants.MAX_METRICS_PER_EVENT && !anyMetricWithTooManyDataPoints(rootNode)) { return Arrays.asList(this.rootNode.serialize()); } else { List<RootNode> nodes = new ArrayList<>(); Map<String, MetricDefinition> metrics = new HashMap<>(); Queue<MetricDefinition> metricDefinitions = new LinkedList<>(rootNode.metrics().values()); while (!metricDefinitions.isEmpty()) { MetricDefinition metric = metricDefinitions.poll();  if (metrics.size() == Constants.MAX_METRICS_PER_EVENT || metrics.containsKey(metric.getName())) { nodes.add(buildRootNode(metrics)); metrics = new HashMap<>(); }  if (metric.getValues().size() <= Constants.MAX_DATAPOINTS_PER_METRIC) { metrics.put(metric.getName(), metric); } else { metrics.put( metric.getName(), new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList(0, Constants.MAX_DATAPOINTS_PER_METRIC))); metricDefinitions.offer( new MetricDefinition( metric.getName(), metric.getUnit(), metric.getStorageResolution(), metric.getValues() .subList( Constants.MAX_DATAPOINTS_PER_METRIC, metric.getValues().size()))); } } if (!metrics.isEmpty()) { nodes.add(buildRootNode(metrics)); } List<String> strings = new ArrayList<>(); for (RootNode node : nodes) { strings.add(node.serialize()); } return strings; } }
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
************************************
[+] input: findMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when Optional<HouseMemberDocument> houseMemberDocument = houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; verify(houseMemberRepository).findByMemberId(MEMBER_ID); }
findHouseMemberDocument(String memberId);
[*] target: assertFalse(houseMemberDocument.isPresent())
[-] pred: org. junit. Assert. assertFalse ( houseMemberDocument. isPresent ( ) )
************************************
************************************
[+] input: testGetOneMetadataReportForIpFormat() { String hostName = NetUtils.getLocalAddress().getHostName(); String ip = NetUtils.getIpByHost(hostName); URL url1 = URL.valueOf("zookeeper://" + hostName + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); URL url2 = URL.valueOf("zookeeper://" + ip + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url1); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url2); Assertions."<AssertPlaceHolder>"; }
getMetadataReport(URL url) { // 清理export、refer参数 url = url.setPath(MetadataReport.class.getName()) .removeParameters(EXPORT_KEY, REFER_KEY); String key = url.toServiceString(); LOCK.lock(); try { // 从SERVICE_STORE_MAP集合（ConcurrentHashMap<String, MetadataReport>类型）中 // 查询是否已经缓存有对应的MetadataReport对象 MetadataReport metadataReport = SERVICE_STORE_MAP.get(key); if (metadataReport != null) { // 直接返回缓存的MetadataReport对象 return metadataReport; } // 创建新的MetadataReport对象，createMetadataReport()方法由子类具体实现 metadataReport = createMetadataReport(url); if (metadataReport == null) { throw new IllegalStateException("Can not create metadata Report " + url); } // 将MetadataReport缓存到SERVICE_STORE_MAP集合中 SERVICE_STORE_MAP.put(key, metadataReport); return metadataReport; } finally { // Release the lock LOCK.unlock(); } }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
************************************
[+] input: shouldGetAndSetRequiredActions() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setRequiredActions(expectedValue); "<AssertPlaceHolder>"; }
getRequiredActions() { return requiredActions; }
[*] target: assertEquals(expectedValue, user.getRequiredActions())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getRequiredActions() )
************************************
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision.and.sha1/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision.and.sha1/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
visit(final String originalPom, final String revision, final String sha1, final String changeList){ String modified; modified = originalPom.replace("${revision}", revision); if (modified.contains("${sha1}")) { modified = modified.replace("${sha1}", sha1 != null ? sha1 : ""); }  if (modified.contains("${changelist}")) { modified = modified.replace("${changelist}", changeList != null ? changeList : ""); }  return modified; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
************************************
[+] input: testReportSnapshot() { Integer id = this.saveSource();  TaskSnapshotRequest request = new TaskSnapshotRequest(); request.setAgentIp("127.0.0.1"); request.setReportTime(new Date());  TaskSnapshotMessage message = new TaskSnapshotMessage(); message.setJobId(id); message.setSnapshot("{"offset": 100}"); request.setSnapshotList(Collections.singletonList(message));  Boolean result = agentService.reportSnapshot(request); Assertions."<AssertPlaceHolder>";  sourceService.delete(id, GLOBAL_OPERATOR); }
reportSnapshot(TaskSnapshotRequest request);
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { Constructor constructor = ReflectUtils.findConstructor(Foo3.class, Foo2.class); "<AssertPlaceHolder>"; }
findConstructor(Class<?> clazz, Class<?> paramType) throws NoSuchMethodException { Constructor<?> targetConstructor; try { targetConstructor = clazz.getConstructor(new Class<?>[]{paramType}); } catch (NoSuchMethodException e) { targetConstructor = null; Constructor<?>[] constructors = clazz.getConstructors(); for (Constructor<?> constructor : constructors) { if (Modifier.isPublic(constructor.getModifiers()) && constructor.getParameterTypes().length == 1 && constructor.getParameterTypes()[0].isAssignableFrom(paramType)) { targetConstructor = constructor; break; } } if (targetConstructor == null) { throw e; } } return targetConstructor; }
[*] target: assertNotNull(constructor)
[-] pred: org. junit. Assert. assertNotNull ( constructor )
************************************
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test=abc", "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() { return new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8)); }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
************************************
[+] input: testDoVolatilityAssert_withExpectation() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility >= 0 && volatility <= expected; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: removeObjectTriple() { TripleDataSetMemory ds = new TripleDataSetMemory(); ds.addObjectTriple("A", "B", "C"); ds.addObjectTriple("A", "B", "D"); assertEquals(2, ds.getObjectTripleSize());  ds.removeObjectTriple(new Triple("A", "B", "D")); assertEquals(1, ds.getObjectTripleSize()); assertNull(ds.getObjectTriplesInvolvingObject("D")); assertTrue(ds.getObjectTriplesInvolvingSubject("A").contains(new Triple("A", "B", "C")) ); assertEquals(1, ds.getObjectTriplesInvolvingSubject("A").size() );  // negative test ds.removeObjectTriple(null);  // negative test 2 ds.removeObjectTriple(new Triple("A1", "B", "C")); "<AssertPlaceHolder>"; }
getObjectTripleSize() { return objectTriples.size(); }
[*] target: assertEquals(1, ds.getObjectTripleSize())
[-] pred: org. junit. Assert. assertEquals ( 1, ds. getObjectTripleSize ( ) )
************************************
************************************
[+] input: testGetDisk() { String expected = "true"; RecordingOptions opts = new RecordingOptions.Builder().disk(expected).build(); "<AssertPlaceHolder>"; }
getDisk() { return getOrDefault(Option.DISK); }
[*] target: assertEquals(expected, opts.getDisk())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDisk() )
************************************
************************************
[+] input: resetPasswordTokenNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/InternetGateway.cmd")); String actual = exportInternetGateways.getTFImport(getAwsInternetGateways()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSInternetGateway> awsInternetGateways) { return TFImport.builder() .importLines(awsInternetGateways.stream() .map(awsInternetGateway -> TFImportLine.builder() .address(awsInternetGateway.getTerraformAddress()) .id(awsInternetGateway.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldReturnPipelineReportId() { String timeStamp = "121322545121"; String expected = "pipeline-121322545121";  String pipelineReportId = IdUtil.getPipelineReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
getPipelineReportId(String timeStamp) { return PIPELINE_REPORT_PREFIX + timeStamp; }
[*] target: assertEquals(expected, pipelineReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, pipelineReportId )
************************************
************************************
[+] input: testOfSet() { Set<String> set = ofSet(); assertEquals(emptySet(), set);  set = ofSet(((String[]) null)); assertEquals(emptySet(), set);  set = ofSet("A", "B", "C"); Set<String> expectedSet = new LinkedHashSet<>(); expectedSet.add("A"); expectedSet.add("B"); expectedSet.add("C"); "<AssertPlaceHolder>"; }
ofSet(T... values) { int size = values == null ? 0 : values.length; if (size < 1) { return emptySet(); }  float loadFactor = 1f / ((size + 1) * 1.0f);  if (loadFactor > 0.75f) { loadFactor = 0.75f; }  Set<T> elements = new LinkedHashSet<>(size, loadFactor); for (int i = 0; i < size; i++) { elements.add(values[i]); } return unmodifiableSet(elements); }
[*] target: assertEquals(expectedSet, set)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, set )
************************************
************************************
[+] input: testDeployments() { final ServerOptions ops = ServerOptionsConfigure.newOpts() .scheduling(SchedulingOptionsConfigure.newOpts() .defaultScheduler("custom") .configured()) .route(RouteOptionsConfigure.newOpts().useCachedRouting(true).computeRate(20).configured()) .configured(); final Route r1 = Route.route(get("/foo")).schedule(Schedulers.io()); final Route r2 = Route.route(get("/bar")).schedule(Schedulers.biz()); final Route r3 = Route.route(get("/baz")); final ThreadPoolExecutor custom = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<>()); final Restlite restlite = Restlite0.forServer(ops) .deployments() .addScheduler(Schedulers.fromExecutor("custom", custom)) .addSchedulers(Collections.singleton(Schedulers.fromExecutor("custom0", GlobalEventExecutor.INSTANCE))) .addRoute(r1) .addRoutes(Arrays.asList(r2, r3)) .addRequestTaskHook((RequestTaskHook) task -> null) .addRequestTaskHook((RequestTaskHookFactory) ctx -> Optional.empty()) .addRequestTaskHooks(Collections.singletonList(ctx -> Optional.empty())) .server(); restlite.start(); final ServerDeployContext<ServerOptions> ctx = restlite.deployments().deployContext(); "<AssertPlaceHolder>"; assertEquals(ops, ctx.options()); assertTrue(ctx.routeRegistry().isPresent()); assertNotNull(ctx.routeRegistry().get().routes()); assertEquals(3, ctx.routeRegistry().get().routes().size()); assertEquals(4, ctx.schedulers().size()); assertEquals(Schedulers.io(), ctx.schedulers().get(Schedulers.IO)); final Scheduler biz = ctx.schedulers().get(Schedulers.BIZ); assertTrue(biz instanceof ExecutorScheduler); assertTrue(((ExecutorScheduler) biz).executor() instanceof ThreadPoolExecutor); final ThreadPoolExecutor bizPool = (ThreadPoolExecutor) ((ExecutorScheduler) biz).executor(); assertEquals(ops.getBizThreads().getCore(), bizPool.getCorePoolSize()); assertEquals(ops.getBizThreads().getMax(), bizPool.getMaximumPoolSize()); assertEquals(ops.getBizThreads().getKeepAliveTimeSeconds(), bizPool.getKeepAliveTime(TimeUnit.SECONDS)); final Scheduler customScheduler = ctx.schedulers().get("custom"); assertTrue(customScheduler instanceof ExecutorScheduler); assertEquals(custom, ((ExecutorScheduler) customScheduler).executor()); assertTrue(custom.getRejectedExecutionHandler() instanceof BaseDeployments.BizRejectedHandler); }
forServer(ServerOptions options) { return new Restlite(options); }
[*] target: assertNotNull(ctx)
[-] pred: org. junit. Assert. assertNotNull ( ctx )
************************************
************************************
[+] input: testInvokeWithPathVariables() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withUri("/a/b") .build();  PatternsPredicate p = new PatternsPredicate(new String[]{"/{foo}/{bar}"}); p.test(get); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testDeserialisingCameraAngle() { List<String> tick = new ArrayList<>(); tick.add("19;-202.74799"); tick.add("11.1241500;-2.799"); tick.add("17.3;-202.79");  VirtualCameraAngle actual = deserialiseCameraAngle(tick);  VirtualCameraAngle expected = new VirtualCameraAngle(); expected.set(0, 0); expected.updateFromEvent(19F, -202.74799F); expected.updateFromEvent(11.1241500F - 19F, -2.799F + 202.74799F); expected.updateFromEvent(17.3F - 11.1241500F, -202.79F + 2.799F);  "<AssertPlaceHolder>"; }
deserialiseCameraAngle(List<String> cameraAngleStrings) { VirtualCameraAngle out = new VirtualCameraAngle();  currentSubtick = 0; Float previousPitch = previousTickContainer == null ? null : previousTickContainer.getCameraAngle().getPitch(); Float previousYaw = previousTickContainer == null ? null : previousTickContainer.getCameraAngle().getYaw();  for (String line : cameraAngleStrings) { Matcher matcher = extract("(.+?);(.+)", line);  if (matcher.find()) { String cameraPitchString = matcher.group(1); String cameraYawString = matcher.group(2);  Float cameraPitch = null; Float cameraYaw = null;  if (!"null".equals(cameraPitchString)) cameraPitch = deserialiseRelativeFloat("camera pitch", cameraPitchString, previousPitch);  if (!"null".equals(cameraYawString)) cameraYaw = deserialiseRelativeFloat("camera yaw", cameraYawString, previousYaw);  out.updateFromState(cameraPitch, cameraYaw); } currentSubtick++; } return out; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testExtractExceptionStackTrace_it_should_return_null_when_message_don_t_has_an_exception() { //Given  //When final var extractedMessageId = MessageUtils.extractExceptionStackTrace(Map.of());  //Then "<AssertPlaceHolder>"; }
extractExceptionStackTrace(Map<String, Object> messageHeaders) { final var exceptionObject = messageHeaders.get(OUTBOX_MESSAGE_EXCEPTION_HEADER_PARAMETER_NAME); if (Objects.nonNull(exceptionObject)) { return exceptionObject.toString(); }  return null; }
[*] target: assertNull(extractedMessageId)
[-] pred: org. junit. Assert. assertNull ( extractedMessageId )
************************************
************************************
[+] input: testRoundTrip() { //Write the UUID UUIDSerializer serializer = new UUIDSerializer(); UUID uuid1 = UUID.randomUUID(); WriteByteBuffer buffer = new WriteByteBuffer(); serializer.write(buffer, uuid1);  //And read it in again ReadArrayBuffer readBuffer = new ReadArrayBuffer(buffer.getStaticBuffer().getBytes(0, 16)); UUID uuid2 = serializer.read(readBuffer);  "<AssertPlaceHolder>"; }
read(ScanBuffer buffer) { long mostSignificantBits = buffer.getLong(); long leastSignificantBits = buffer.getLong(); return new UUID(mostSignificantBits, leastSignificantBits); }
[*] target: assertEquals(uuid1, uuid2)
[-] pred: org. junit. Assert. assertEquals ( uuid1, uuid2 )
************************************
************************************
[+] input: size_shouldReturn0_whenNothingRegistered() { int size = service.size();  "<AssertPlaceHolder>"; }
size() { return addressRecordMap.size(); }
[*] target: assertEquals(0, size)
[-] pred: org. junit. Assert. assertEquals ( 0, size )
************************************
************************************
[+] input: updateGroup2() { assertThrows(NotFoundException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); Random random = new Random(); boolean ok = adminService.updateGroup(random.nextInt(100) + 10, dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509Certificate x509Cert1 = new XMLX509Certificate(TestUtils.newDocument(), cert); XMLX509Certificate x509Cert2 = new XMLX509Certificate(TestUtils.newDocument(), cert);  assertEquals(x509Cert1, x509Cert2); "<AssertPlaceHolder>"; }
hashCode() { int result = 17; try { byte[] bytes = getCertificateBytes(); for (byte element : bytes) { result = 31 * result + element; } } catch (XMLSecurityException e) { LOG.log(Level.DEBUG, e.getMessage(), e); } return result; }
[*] target: assertEquals(x509Cert1.hashCode(), x509Cert2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509Cert1. hashCode ( ), x509Cert2. hashCode ( ) )
************************************
************************************
[+] input: canCreatePaperItem() { // given PaperArchiveFacade service = new PaperArchiveFacadeImpl(); CreatePaperItemParameter anonymousInput = new CreatePaperItemParameter(); anonymousInput.setWho("UJ7L4TcJQH"); anonymousInput.setWhat("0smET1o7Us"); anonymousInput.setWhere("f1AqeKUaNg");  // when PaperItemDTO result = service.createPaperItem(anonymousInput);  // then "<AssertPlaceHolder>"; }
createPaperItem(CreatePaperItemParameter anonymousInput);
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getEndpoint_inputInvalidWrongConstraintType_returnValue() { /* ARRANGE */ final var value = "5"; final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource(value, URI.create("xsd:decimal"))) .build();  final var duty = new DutyBuilder() ._action_(Util.asList(Action.NOTIFY)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getEndpoint(duty);  /* ASSERT */ "<AssertPlaceHolder>"; }
getEndpoint(final Rule rule) throws NullPointerException { final var constraint = rule.getConstraint().get(0); return ((ConstraintImpl) constraint).getRightOperand().getValue(); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: default_allNull_returnsNull() { var sut = new PatientEmailsHolder(null, null);  "<AssertPlaceHolder>"; }
getDefault() { if (primary == null) { // If a default email is not specified, use the first element of the // patient email list if (all != null && !all.isEmpty()) { return all.get(0); }  return null; }  return primary; }
[*] target: assertEquals(null, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( null, sut. getDefault() )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, senderKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry has the correct receiversPubKey for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for removing MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getOwnerPubKey() != null && mailboxStoragePayload.getOwnerPubKey().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedMailboxStorageEntry::isValidForRemoveOperation() failed. " + "Entry owner does not match Payload owner:\nProtectedStorageEntry={}\n" + "PayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: testSerialize() { // PredicateExpr predicateExpr = null; // PredicateSerDes instance = new JsonPredicateSerDes(); // String expResult = ""; // String result = instance.serialize(predicateExpr); // "<AssertPlaceHolder>"; }
serialize(PredicateExpr predicateExpr) { return gson.toJson(predicateExpr); }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
************************************
[+] input: should_GenerateTheSameDataAsProvided() { DecimalInWords decimal = new DecimalInWords( createLeftNumber(), createRightNumber(), "بالكوادرليون" ); String expected = "ترليون ومئة مليار ومليار ومليونان ومئتا ألف ومئة وخمسة وستون" + " فاصلة " + "ترليون ومئة مليار ومليار ومليونين ومئتي ألف ومئة وخمسة وستين" + " بالكوادرليون"; "<AssertPlaceHolder>"; }
toString() { StringBuilder numberInWords = new StringBuilder(); numberInWords.append(numberLeftDecimalPoint.toString()); numberInWords.append(" فاصلة ").append(numberRightDecimalPoint.toString()); if (!fractionalRatioName.isEmpty()) numberInWords.append(" ").append(fractionalRatioName); return numberInWords.toString(); }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
************************************
[+] input: toModel_withOfferedResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentationWithOfferedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: convert() { // given final UriConverter converter = new UriConverter(); final String rawValue = "http://example.net";  // when final URI value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
convert(final String value) throws IllegalArgumentException { try { return new URI(value); } catch (URISyntaxException e) { throw new IllegalArgumentException("Value '" + value + "' is not a valid URI", e); } }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: testReadConsistencyLevel() { int levelsChecked = 0;  // Test whether CassandraTransaction honors the write consistency level option for (CLevel writeLevel : CLevel.values()) { StandardBaseTransactionConfig.Builder b = new StandardBaseTransactionConfig.Builder(); ModifiableConfiguration mc = GraphDatabaseConfiguration.buildGraphConfiguration(); mc.set(CASSANDRA_READ_CONSISTENCY, writeLevel.name()); b.timestampProvider(TimestampProviders.MICRO); b.customOptions(mc); CassandraTransaction ct = new CassandraTransaction(b.build()); "<AssertPlaceHolder>"; levelsChecked++; }  // Sanity check: if CLevel.values was empty, something is wrong with the test Preconditions.checkState(0 < levelsChecked); }
getReadConsistencyLevel() { return read; }
[*] target: assertEquals(writeLevel, ct.getReadConsistencyLevel())
[-] pred: org. junit. Assert. assertEquals ( writeLevel, ct. getReadConsistencyLevel() )
************************************
************************************
[+] input: testCenterHeadingEvenText() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfiles", '#', 51); String expected = "##################### TASfiles ####################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(ParameterizedClazz.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseId() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); CommunityHouse testHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse(TEST_HOUSE_ID); Set<HouseMember> testHouseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); testHouse.setHouseMembers(testHouseMembers); testCommunity.getHouses().add(testHouse);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.of(testHouse));  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; assertFalse(testCommunity.getHouses().contains(testHouse)); verify(communityRepository).save(testCommunity); testHouse.getHouseMembers() .forEach(houseMember -> verify(houseService).deleteMemberFromHouse(TEST_HOUSE_ID, houseMember.getMemberId())); verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verify(communityHouseRepository).deleteByHouseId(TEST_HOUSE_ID); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertTrue(houseDeleted)
[-] pred: org. junit. Assert. assertTrue ( houseDeleted )
************************************
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_1() { var encoded = UUIDAdapter.toBytesOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
toBytesOrDefault(UUID uuid, byte[] defaultValue) { if (uuid == null) { return defaultValue; } return UUIDAdapter.toBytes(uuid); }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
************************************
[+] input: getCatalogTemplate_validInput_returnCatalog() { /* ARRANGE */ final var catalog = new ResourceCatalogBuilder().build();  /* ACT */ final var result = TemplateUtils.getCatalogTemplate(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; assertNotNull(result.getDesc());  }
getCatalogTemplate( final Catalog catalog) { return FromIdsObjectMapper.fromIdsCatalog(catalog); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: checkUserExistByUsername() { boolean b = userService.checkUserExistByUsername("pedro"); "<AssertPlaceHolder>"; }
checkUserExistByUsername(String username) { int rows = this.baseMapper.selectCountByUsername(username); return rows > 0; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: test_convert_csv_line_contains_double_quotes() { String[] record = {"1", "12"apple", "10", "9.99"}; String expected = ""1","12""apple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line) { return convertToCsvFormat(line, DEFAULT_SEPARATOR); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: BackendException { Geoshape l1 = Geoshape.line(Arrays.asList(new double[][] {{48.9, 35.4}, {49.1, 35.6}}));  String wkt1 = "LINESTRING (48.9 35.4, 49.1 35.6)"; String actualWkt1 = GeoToWktConverter.convertToWktString(l1); "<AssertPlaceHolder>"; }
convertToWktString(Geoshape fieldValue) throws BackendException { return fieldValue.toString(); }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
************************************
[+] input: should_result_false_when_file_version_is_not_greater() {  final Path file = Path.of("v0002_my-migration.yml");  boolean actual = MigrationLoader.greater(file, "v0002");  "<AssertPlaceHolder>"; }
greater(Path file, String currentVersion){ return versionOf(file) .filter(version -> version.compareTo(currentVersion) > 0) .map(v -> Boolean.TRUE) .orElse(Boolean.FALSE); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: createFrom3ByteBgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_3BYTE_BGR); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom3ByteBgr(data, width, height); "<AssertPlaceHolder>"; }
createFrom3ByteBgr(byte[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferByte(data, data.length); ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB); int[] nBits = {8, 8, 8}; int[] bOffs = {2, 1, 0}; ColorModel colorModel = new ComponentColorModel(colorSpace, nBits, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE); WritableRaster raster = Raster.createInterleavedRaster(dataBuffer, width, height, width * 3, 3, bOffs, null); return new BufferedImage(colorModel, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .withRequestBody( new JsonWithPropertiesPattern(Map.of("display_name", "myaccount", "description", "mydesc"))) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value())));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", false);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>";  assertEquals("Created Service Account.", spec.getDescription()); assertEquals("CREATED_service_account", spec.getDisplayName()); assertEquals("sa-xy123", spec.getResourceId()); assertNull(spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: NoSuchMethodException { HandlerInvoker invoker = getInvoker("method"); final HandlerMethod handlerMethod = HandlerMethod.of(Subject.class.getDeclaredMethod("method"), SUBJECT); final HttpResponseStatus customResponse = HttpResponseStatus.ACCEPTED; final HandlerImpl handler = new HandlerImpl(handlerMethod, customResponse, invoker); assertEquals(handlerMethod, handler.handler()); "<AssertPlaceHolder>";  }
customResponse() { return customResponse; }
[*] target: assertEquals(customResponse, handler.customResponse())
[-] pred: org. junit. Assert. assertEquals ( customResponse, handler. customResponse() )
************************************
************************************
[+] input: hasList() { MapConfigSource mapConfigSource = new MapConfigSource(configs); Assertions."<AssertPlaceHolder>"; }
hasList() { return true; }
[*] target: assertTrue(mapConfigSource.hasList())
[-] pred: org. junit. Assert. assertTrue ( mapConfigSource. hasList() )
************************************
************************************
[+] input: Exception { final Method method = Object.class.getMethod("hashCode");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
isUserDefinedMethod(final Method method) { return method.getDeclaringClass() != Object.class; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: testGetRandomMaxFrequencyWithMultipleMaxFrequencies() { MapWithRandomMostFrequentValue<String, String> map = new MapWithRandomMostFrequentValue<>(); map.put("a", "b"); map.put("c", "d"); map.put("e", "b"); map.put("f", "d"); map.put("g", "b"); map.put("h", "d"); map.put("i", "c"); Set<String> expected = Set.of("b", "d"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 100; i++) actual.add(map.getRandomValueWithMaxFrequency()); "<AssertPlaceHolder>"; }
getRandomValueWithMaxFrequency() { if (maxFrequency == 0) return null; return frequencyToValues.get(maxFrequency).getRandom(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseIdHouseNotInCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
************************************
[+] input: nullOrFalseTest_3() { var actual = Utils.nullOrFalse(true); Assertions."<AssertPlaceHolder>"; }
nullOrFalse(Boolean value) { return Objects.isNull(value) || value == false; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: testNotFoundRegionIso() { var db = new NaturalEarthDb(List.of(), List.of(), List.of()); var result = db.getAdmin1ByIso("CA-YT"); "<AssertPlaceHolder>"; }
getAdmin1ByIso(String isoCode) { return this.admin1sByIso31662.get(isoCode); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifItInShortRange() { //given DefaultIntegerValueToShortConverter converter = new DefaultIntegerValueToShortConverter();  //when boolean actual = converter.canConvertValue(ValueFactory.newInteger(Short.MAX_VALUE));  //then "<AssertPlaceHolder>"; }
canConvertValue(IntegerValue value) { return value.isInShortRange(); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: shouldProperlyGetGroupDiscWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
getGroupDiscussionList(GroupRequestArgs requestArgs);  /** * Get count of groups filtered by provided {@link GroupRequestArgs}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: selectByTitleLikeKeyword() { BookDO book = initData(); List<BookDO> found = bookMapper.selectByTitleLikeKeyword("%千里%"); boolean anyMatch = found.stream().anyMatch(it -> it.getTitle().equals(book.getTitle())); "<AssertPlaceHolder>"; }
selectByTitleLikeKeyword(@Param("q") String q);
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: supplyInCaseOfNormalExecution() { var result = Try.wrap(() -> 1, 0); Assertions."<AssertPlaceHolder>"; }
wrap(Supplier<T> supplier, T defaultValue) { AtomicReference<T> result = new AtomicReference<>(defaultValue); var trying = new Try<T>(() -> { var value = supplier.get(); result.set(value); }, null).withRethrowingExceptions(false); if (trying.execute().succeeded()) { return result.get(); } else { return defaultValue; } }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var duration = Duration.ofSeconds(14); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(DURATION, duration.toMillis()) .put(DESC, MISSING) .put(SUCCEEDED, true); var expectedEvent = new Event(JFR_COMPILATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var eventType = mock(EventType.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDuration()).thenReturn(duration); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getValue(METHOD)).thenReturn(null); when(event.hasField(SUCCEEDED)).thenReturn(true); when(event.getBoolean(SUCCEEDED)).thenReturn(true); when(event.getEventType()).thenReturn(eventType);  when(eventThread.getJavaName()).thenReturn(threadName); when(eventType.getName()).thenReturn(EVENT_NAME);  var mapper = new JITCompilationMapper(); assertTrue(mapper.test(event));  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent event) { long timestamp = event.getStartTime().toEpochMilli(); Duration duration = event.getDuration(); Attributes attr = new Attributes(); if (hasField(event, METHOD, SIMPLE_CLASS_NAME)) { attr.put(DESC, MethodSupport.describeMethod(event.getValue(METHOD))); } attr.put(DURATION, duration.toMillis()); attr.put(SUCCEEDED, Workarounds.getSucceeded(event)); RecordedThread threadId = null; if (hasField(event, EVENT_THREAD, SIMPLE_CLASS_NAME)) { threadId = event.getThread(EVENT_THREAD); } attr.put(THREAD_NAME, threadId == null ? null : threadId.getJavaName()); return Collections.singletonList(new Event(JFR_COMPILATION, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testGetBearerToken() { String token = twitterClient.getBearerToken(); "<AssertPlaceHolder>"; assertTrue(token.length() > 50); }
getBearerToken();
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
************************************
[+] input: ignoreErrorsNoTransferTest() { Condition returnValue = ignoreErrors(() -> {}); "<AssertPlaceHolder>"; }
ignoreErrors(Runnable body) { Function<Condition, Condition> function = (x) -> x; HandlerCase<Condition> handlerCase = new HandlerCase<>(List.of(Pair.of(Error.class, function)), () -> { body.run(); return null; }); return handlerCase.get(); }
[*] target: assertNull(returnValue)
[-] pred: org. junit. Assert. assertNull ( returnValue )
************************************
************************************
[+] input: saveTextMessageStatus_success() { String messageId = "some-message-id"; String messageStatus = "delivered";  Organization org = _dataFactory.saveValidOrganization(); Facility f = _dataFactory.createValidFacility(org); Person p = _dataFactory.createFullPerson(org); TestOrder to = _dataFactory.createTestOrder(p, f); PatientLink pl = _dataFactory.createPatientLink(to); TextMessageSent message = new TextMessageSent(pl, messageId); _textMessageSentRepo.save(message);  _service.saveTextMessageStatus(messageId, messageStatus);  List<TextMessageStatus> statuses = _textMessageStatusRepo.findAllByTextMessageSent(message);  "<AssertPlaceHolder>"; assertEquals(messageStatus, statuses.get(0).getStatus()); }
saveTextMessageStatus(String messageId, String status) { TextMessageSent message = sentRepo.findByTwilioMessageId(messageId); if (message == null) { throw new InvalidTwilioMessageIdentifierException(); }  TextMessageStatus textMessageStatus = new TextMessageStatus(message, status); statusRepo.save(textMessageStatus); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
************************************
[+] input: idTest() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource(); Assertions."<AssertPlaceHolder>"; }
id() {  //NOPMD return id; }
[*] target: assertNotNull(configSource.id())
[-] pred: org. junit. Assert. assertNotNull ( configSource. id() )
************************************
************************************
[+] input: shouldGetAndSetGroups() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setGroups(expectedValue); "<AssertPlaceHolder>"; }
getGroups() { return groups; }
[*] target: assertEquals(expectedValue, user.getGroups())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getGroups() )
************************************
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("C1CCCC2CCCCC12"); List<Atom> atomList = frag.getAtomList(); Set<Bond> bonds = new HashSet<Bond>(frag.getBondSet()); bonds.remove(atomList.get(4).getBondToAtom(atomList.get(9))); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(4), atomList.get(9), bonds); "<AssertPlaceHolder>";  List<Atom> pathLeftRing; List<Atom> pathRightRing; if (atomList.indexOf(paths.get(0).get(0))==3){ pathLeftRing = paths.get(0); pathRightRing = paths.get(1); } else{ pathLeftRing = paths.get(1); pathRightRing = paths.get(0); } assertEquals(3, atomList.indexOf(pathLeftRing.get(0))); assertEquals(2, atomList.indexOf(pathLeftRing.get(1))); assertEquals(1, atomList.indexOf(pathLeftRing.get(2))); assertEquals(0, atomList.indexOf(pathLeftRing.get(3)));  assertEquals(5, atomList.indexOf(pathRightRing.get(0))); assertEquals(6, atomList.indexOf(pathRightRing.get(1))); assertEquals(7, atomList.indexOf(pathRightRing.get(2))); assertEquals(8, atomList.indexOf(pathRightRing.get(3))); }
getPathBetweenAtomsUsingBonds(Atom a1, Atom a2, Set<Bond> peripheryBonds){ List<List<Atom>> paths = new ArrayList<>(); Deque<PathSearchState> stateStack = new ArrayDeque<>(); stateStack.add(new PathSearchState(a1, new ArrayList<>())); while (stateStack.size()>0){ PathSearchState state  =stateStack.removeLast();//depth first traversal List<Atom> orderAtomsVisited = state.getOrderAtomsVisited(); Atom nextAtom = state.getCurrentAtom(); orderAtomsVisited.add(nextAtom); Set<Bond> neighbourBonds = new LinkedHashSet<>(nextAtom.getBonds()); neighbourBonds.retainAll(peripheryBonds); for (Bond neighbourBond : neighbourBonds) { Atom neighbour = neighbourBond.getOtherAtom(nextAtom); if (orderAtomsVisited.contains(neighbour)){//atom already visited by this path continue; } if (neighbour ==a2 ){//target atom found paths.add(new ArrayList<>(orderAtomsVisited.subList(1, orderAtomsVisited.size()))); } else{//add atom to stack, its neighbours will be recursively investigated shortly stateStack.add(new PathSearchState(neighbour, new ArrayList<>(orderAtomsVisited))); } } } return paths; }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
************************************
[+] input: GestaltException { sourceBuilder.setSource("abc=def"); ConfigSourcePackage result = sourceBuilder.build(); "<AssertPlaceHolder>"; }
build() throws GestaltException;  protected ConfigSourcePackage buildPackage(ConfigSource source) throws GestaltException {  // for now to maintain backwards compatibility add all config source tags to the builder tags var combinedTags = tags.and(source.getTags());  var configSourcePackage = new ConfigSourcePackage(source, configReloadStrategies, Tags.of(combinedTags));  for (var reloadStrategy : configReloadStrategies) { reloadStrategy.setSource(configSourcePackage); }  return configSourcePackage; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldReturnTrueWhenMacBytesIsSame() { // given var fakeData = MetricCsvFixture.MOCK_METRIC_CSV_DATA_WITH_ONE_PIPELINE(); String jsonFakeData = new Gson().toJson(fakeData); String randomIv = encryptDecryptUtil.getRandomIv(); when(systemUtil.getEnvMap()).thenReturn(envMap); String secretKey = encryptDecryptUtil.getSecretKey("fakePassword");  String encryptedData = encryptDecryptUtil.getEncryptedData(randomIv, secretKey, jsonFakeData); String macBytes = encryptDecryptUtil.getMacBytes(secretKey, encryptedData); // when boolean verifyPass = encryptDecryptUtil.verifyMacBytes(secretKey, encryptedData, macBytes); // then "<AssertPlaceHolder>";  }
verifyMacBytes(String secretKey, String encryptedConfigData, String macBytes) { Mac sha256Hmac; try { sha256Hmac = obtainChecksumAlgorithm(secretKey); byte[] computedMacBytes = sha256Hmac.doFinal(encryptedConfigData.getBytes()); byte[] receivedMacBytes = Base64.getDecoder().decode(macBytes); return MessageDigest.isEqual(computedMacBytes, receivedMacBytes); } catch (NoSuchAlgorithmException | InvalidKeyException | NullPointerException | IllegalStateException e) { log.error("Failed to verify mac bytes, because of checksum algorithm acquisition error e:{}", e.getMessage()); throw new EncryptDecryptProcessException("Obtain checksum algorithm in decrypt failed"); } catch (Exception e) { log.error("Failed to verify mac bytes, because of the file been changed e:{}", e.getMessage()); throw new DecryptDataOrPasswordWrongException("Invalid file", HttpStatus.BAD_REQUEST.value()); } }
[*] target: assertTrue(verifyPass)
[-] pred: org. junit. Assert. assertTrue ( verifyPass )
************************************
************************************
[+] input: shouldReturnSourceControlReportId() { String timeStamp = "121322545121"; String expected = "sourceControl-121322545121";  String sourceControlReportId = IdUtil.getSourceControlReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
getSourceControlReportId(String timeStamp) { return SOURCE_CONTROL_PREFIX + timeStamp; }
[*] target: assertEquals(expected, sourceControlReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, sourceControlReportId )
************************************
************************************
[+] input: Exception {  // Arrange FileConfigLoader loader = new FileConfigLoader("sample-config.yaml");  // Act MainConfig mainConfig = loader.loadConfiguration();  // Assert "<AssertPlaceHolder>"; assertEquals("http://localhost:8080", mainConfig.getHostUri());  }
loadConfiguration() throws IOException {  log.info("Load configuration from: {}", configPath);  InputStream userConfigInputStream; if (configPath.startsWith("https://")) { userConfigInputStream = loadRemoteConfigFile(); } else if (configPath.startsWith("http://") && this.allowUnsafeHttp) { userConfigInputStream = loadRemoteConfigFile(); } else { userConfigInputStream = loadConfigFromFile(); }  InputStream defaultConfigStream = OWASPApplicationGatewayApplication.class.getResourceAsStream("/default-config.yaml"); MainConfig config = mergeConfiguration(defaultConfigStream, userConfigInputStream);  log.debug("Configuration successfully loaded"); return config; }
[*] target: assertNotNull(mainConfig)
[-] pred: org. junit. Assert. assertNotNull ( mainConfig )
************************************
************************************
[+] input: getAllCycles_expectedNoCycles() { Collection<Cycle> expectedCycles = new ArrayList<>(); when(cycleRepository.findAll()).thenReturn(new ArrayList<>());  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
getAllCycles() { Collection<Cycle> cycles = new ArrayList<>(); for (Cycle cycle : cycleRepository.findAll()) { cycles.add(cycle); } return cycles; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
************************************
[+] input: createPerson_SUCCESS() {  // Arrange String personEmail = "trivino@gmail.com"; String personName = "Trivino"; LocalDate personBirthdate = LocalDate.of(1999, 02, 25); String personBirthdateString = "1999-02-25"; String personBirthplace = "Porto";  // Expected CreatePerson DTO Email email = Email.createEmail(personEmail); Name name = Name.createName(personName); Birthdate birthdate = Birthdate.createBirthdate(personBirthdate); Birthplace birthplace = Birthplace.createBirthplace(personBirthplace); PersonID fatherID = null; PersonID motherID = null;  PersonDTO isPersonCreatedExpected = PersonDTOAssembler.createDTOFromDomainObject(email, name, birthdate, birthplace, fatherID, motherID);  // Info DTO NewCreatePersonInfoDTO newCreatePersonInfoDTO = new NewCreatePersonInfoDTO(personEmail, personName, personBirthdateString, personBirthplace);  // DTO CreatePersonDTO createPersonDTO = CreatePersonDTOAssembler.createDTOFromPrimitiveTypes(personEmail, personName, personBirthdateString, personBirthplace);  // Expected Response ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isPersonCreatedExpected, HttpStatus.CREATED);  // Act Mockito.when(service.createPerson(createPersonDTO)).thenReturn(isPersonCreatedExpected); ResponseEntity<Object> isPersonCreated = controller.createPerson(newCreatePersonInfoDTO);  // Assert "<AssertPlaceHolder>"; }
createPerson(@RequestBody NewCreatePersonInfoDTO info) {  CreatePersonDTO createPersonDTO = CreatePersonDTOAssembler.createDTOFromPrimitiveTypes(info.getEmail(), info.getName(), info.getBirthdate(), info.getBirthplace());  PersonDTO result = service.createPerson(createPersonDTO);  Link self_link = linkTo(methodOn(CreatePersonControllerREST.class).getPersonByEmail(info.getEmail())).withSelfRel();  result.add(self_link);  return new ResponseEntity<>(result, HttpStatus.CREATED); }
[*] target: assertEquals(expectedResponse, isPersonCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isPersonCreated )
************************************
************************************
[+] input: testIsStarted() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); when(recording.getState()).thenReturn(RecordingState.RUNNING); "<AssertPlaceHolder>"; }
isStarted() { return (recording != null) && RecordingState.RUNNING.equals(recording.getState()); }
[*] target: assertTrue(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertTrue ( jfrRecorder. isStarted() )
************************************
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: restartTaskRuns_shouldWork() { TaskRun taskRun1 = mockTaskRun(1l); List<TaskRun> taskRuns = Collections.singletonList(taskRun1); mockPost("/taskruns/batchRerun?taskRunIds=" + taskRun1.getId(), "", JSONUtils.toJsonString(true)); Boolean result = (Boolean) wfApi.restartTaskRuns(Collections.singletonList(taskRun1.getId())); Assertions."<AssertPlaceHolder>"; }
restartTaskRuns(List<Long> taskRunIds) { String taskRunIdsString = taskRunIds.stream().map(Objects::toString).collect(Collectors.joining(",")); HttpUrl url = buildUrl(API_TASK_RUNS + "/batchRerun") .addQueryParameter("taskRunIds", taskRunIdsString.toString()) .build(); return post(url, Maps.newHashMap(), Object.class); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: getResourceMaps() { List<AWSListener> awsListeners = getAwsListeners();  Maps<Resource> resourceMaps = exportLoadBalancerListeners.getResourceMaps(awsListeners); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancerListener.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSListener> awslisteners) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();  for (AWSListener awsListener : awslisteners) { Listener listener = awsListener.getListener(); LoadBalancer loadBalancer = awsListener.getLoadBalancer(); resourceMapsBuilder.map( Resource.builder() .api(awsListener.getTerraformResourceName()) .name(awsListener.getResourceName()) .argument("load_balancer_arn", TFExpression.build( MessageFormat.format("aws_lb.{0}.arn", loadBalancer.loadBalancerName()))) .argument("port", TFNumber.build(listener.port())) .argument("protocol", TFString.build(listener.protocolAsString())) .argumentsIf(listener.hasDefaultActions(), "default_action", listener.defaultActions().stream() .map(action -> TFBlock.builder() .argument("target_group_arn", TFExpression.build(Optional.ofNullable(awsListener.getTargetGroup()) .map(t -> MessageFormat.format("aws_lb_target_group.{0}.arn", t.targetGroupName())) .orElse(null)) ) .argument("type", TFString.build(action.typeAsString())) .build()) .collect(Collectors.toList()) ) .build() ).build(); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testTopicsByType() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicType topicType = TopicType.EVENTS;  TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setType(topicType); topicMetadata.setName("test-topic"); topicMetadata.setOwnerApplicationId("owner-app"); topicMetadata.setProducers(List.of("producer-app")); topicMetadata.setEolDate(LocalDate.parse("2024-01-01")); topicMetadata.setDeprecationText("Deprecation notice"); GraphQLContext context = GraphQLContext.newContext().build();  when(topicService.listTopics(environmentId)).thenReturn(List.of(topicMetadata)); List<TopicMetadata> topics = graphqlController.topicsByType(environmentId, topicType, context);  "<AssertPlaceHolder>"; assertEquals(1, topics.size()); TopicMetadata topic = topics.get(0); assertEquals("test-topic", topic.getName()); assertEquals(TopicType.EVENTS, topic.getType()); assertEquals("owner-app", topic.getOwnerApplicationId()); assertNotNull(topic.getProducers()); assertNotNull(topic.getEolDate()); assertEquals("Deprecation notice", topic.getDeprecationText()); }
topicsByType(@Argument String environmentId, @Argument TopicType topicType, GraphQLContext graphQLContext) { if (environmentId == null || topicType == null) { throw new IllegalArgumentException( "The environmentId and topicType parameters are required and cannot be null."); } graphQLContext.put("environmentId", environmentId); return topicService.listTopics(environmentId).stream().filter(m -> m.getType().equals(topicType)) .collect(Collectors.toList()); }
[*] target: assertNotNull(topics)
[-] pred: org. junit. Assert. assertNotNull ( topics )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry has the correct receiversPubKey for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for removing MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getOwnerPubKey() != null && mailboxStoragePayload.getOwnerPubKey().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedMailboxStorageEntry::isValidForRemoveOperation() failed. " + "Entry owner does not match Payload owner:\nProtectedStorageEntry={}\n" + "PayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com  ").loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: mapDateStringToDate_shouldMapStringToLocalDate() { LocalDate expected = LocalDate.of(2020, 3, 1);  LocalDate actual = dateMapper.mapDateStringToDate(expected.toString());  "<AssertPlaceHolder>"; }
mapDateStringToDate(String dateString) { if(dateString == null || dateString.equals("")) { return null; } var splitString = dateString.split("-"); try { return LocalDate.of(Integer.parseInt(splitString[0]), Integer.parseInt(splitString[1]), Integer.parseInt(splitString[2])); } catch (NumberFormatException e) { return null; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("formkiq:://sample/test.txt");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 3; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#formkiq", indexes.get(i).get(SK).s()); assertEquals("formkiq", indexes.get(i).get("path").s()); String documentId0 = indexes.get(i++).get("documentId").s();  assertEquals(site + "global#folders#" + documentId0, indexes.get(i).get(PK).s()); assertEquals("ff#sample", indexes.get(i).get(SK).s()); assertEquals("sample", indexes.get(i).get("path").s()); String documentId1 = indexes.get(i++).get("documentId").s(); assertNotEquals(documentId0, documentId1);  assertEquals(site + "global#folders#" + documentId1, indexes.get(i).get(PK).s()); assertEquals("fi#test.txt", indexes.get(i).get(SK).s()); assertEquals("test.txt", indexes.get(i).get("path").s()); String documentId2 = indexes.get(i).get("documentId").s(); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); assertNotEquals(documentId1, documentId2); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: selectGroupsByUserId() { String email = "13129982604@qq.com"; String username = "pedro-test"; UserDO user = new UserDO(); user.setEmail(email); user.setUsername(username); userMapper.insert(user);  GroupDO group = GroupDO.builder().name("group").info("零零落落").build(); groupMapper.insert(group);  userGroupMapper.insert(new UserGroupDO(user.getId(), group.getId()));  List<GroupDO> groups = groupMapper.selectGroupsByUserId(user.getId()); boolean anyMatch = groups.stream().anyMatch(it -> it.getName().equals("group")); "<AssertPlaceHolder>"; }
selectGroupsByUserId(@Param("userId") Integer userId);
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: it_recognizes_lines_that_should_be_parsed() { CobolLine line1 = new CobolLine("           .", tokenExtractor); CobolLine line2 = new CobolLine("                   PERFORM 9999-ABORT", tokenExtractor); state.setFlagFor(Constants.PROCEDURE_DIVISION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertTrue(shouldBeParsed2); }
shouldLineBeParsed(CobolLine line, State state) { if (isTooShortToBeMeaningful(line) && line.tokensSize() > 0) { return false; } if (state.isFlagSetFor(Constants.FILE_SECTION) && !(line.containsToken(Constants.FILE_SECTION))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; } if (state.isFlagSetFor(Constants.FILE_CONTROL) && !(line.containsToken(Constants.FILE_CONTROL))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; }  return true; }
[*] target: assertTrue(shouldBeParsed1)
[-] pred: org. junit. Assert. assertTrue ( shouldBeParsed1 )
************************************
************************************
[+] input: removeVariable_whenVariableNotExists_shouldReturnFalse() { // 1. Process boolean removeSuccess = variableService.removeByKey("not.existing");  // 2. Validate "<AssertPlaceHolder>"; }
removeByKey(String key) { return variableDao.removeByKey(key); }
[*] target: assertFalse(removeSuccess)
[-] pred: org. junit. Assert. assertFalse ( removeSuccess )
************************************
************************************
[+] input: generateMidWalkForEntity() { try { HdtWalkGenerator parser = new HdtWalkGenerator(loadFile("swdf-2012-11-28.hdt")); String concept = "http://data.semanticweb.org/workshop/semwiki/2010/programme-committee-member";  for (int depth = 1; depth < 10; depth++) { List<String> walk1 = parser.generateMidWalkForEntity(concept, depth); "<AssertPlaceHolder>"; assertTrue(walk1.size() <= depth * 2 + 1, "The walk is supposed to have at most " + (depth * 2 + 1) + " elements. It has: " + walk1.size() + "\nWalk:\n" + walk1); assertTrue(walk1.size() >= 3, "The walk must consist of at least 3 elements. Walk:\n" + walk1);  String[] walkArray = new String[walk1.size()]; for (int i = 0; i < walkArray.length; i++) { walkArray[i] = walk1.get(i); } String hdtPath = loadFile("swdf-2012-11-28.hdt").getAbsolutePath(); try { HDT hdtDataSet = HDTManager.loadHDT(hdtPath); for (int i = 2; i < walkArray.length - 1; i += i + 2) { IteratorTripleString iterator = hdtDataSet.search(walkArray[i - 2], walkArray[i - 1], walkArray[i]); assertTrue(iterator.hasNext(), "The following triple appeared in the walk but not in the data set:\n" + walkArray[i - 2] + " " + walkArray[i - 1] + " " + walkArray[i] + "\nSentence:\n" + walk1); } } catch (NotFoundException | IOException e) { fail("Exception", e); } } } catch (IOException ioe) { LOGGER.error("HDT Init error."); fail("Init should not fail."); } }
generateMidWalkForEntity(String entity, int depth) { LinkedList<String> result = new LinkedList<>();  String nextElementPredecessor = entity; String nextElementSuccessor = entity;  // initialize result result.add(entity);  // variable to store the number of iterations performed so far int currentDepth = 0;  while (currentDepth < depth) { currentDepth++;  // randomly decide whether to use predecessors or successors int randomPickZeroOne = ThreadLocalRandom.current().nextInt(2);  if (randomPickZeroOne == 0) { // predecessor try { IteratorTripleString iterator = hdtDataSet.search("", "", nextElementPredecessor); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; while (iterator.hasNext()) { ts = iterator.next(); candidates.add(ts); }  if (candidates.size() > 0) { TripleString drawnTriple = Util.randomDrawFromSet(candidates);  // add walks from the front (walk started before entity) result.addFirst(drawnTriple.getPredicate().toString()); result.addFirst(drawnTriple.getSubject().toString()); nextElementPredecessor = drawnTriple.getSubject().toString(); }  } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a predecessor.", e); } } else { // successor try { IteratorTripleString iterator = hdtDataSet.search(nextElementSuccessor, "", ""); HashSet<TripleString> candidates = new HashSet<>();  TripleString ts; CharSequence objectCharSequence; while (iterator.hasNext()) { ts = iterator.next(); objectCharSequence = ts.getObject(); if (objectCharSequence.charAt(0) == '"') { continue; } candidates.add(ts); } if (candidates.size() > 0) { TripleString stringToAdd = Util.randomDrawFromSet(candidates);  // add next walk iteration result.addLast(stringToAdd.getPredicate().toString()); result.addLast(stringToAdd.getObject().toString()); nextElementSuccessor = stringToAdd.getObject().toString(); } } catch (NotFoundException e) { LOGGER.error("Search exception while trying to find a successor.", e); } } } return result; }
[*] target: assertNotNull(walk1)
[-] pred: org. junit. Assert. assertNotNull ( walk1 )
************************************
************************************
[+] input: test_convert_csv_line_default() { String[] record = {"1", "apple", "10", "9.99"}; String expected = ""1","apple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line) { return convertToCsvFormat(line, DEFAULT_SEPARATOR); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: deleteAmenityNotExists() { // given given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID)) .willReturn(Optional.empty());  // when boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID); verify(amenityRepository, never()).delete(any()); }
deleteAmenity(String amenityId) { return amenityRepository.findByAmenityIdWithCommunity(amenityId) .map(amenity -> { Community community = amenity.getCommunity(); community.getAmenities().remove(amenity); amenityRepository.delete(amenity); return true; }) .orElse(false); }
[*] target: assertFalse(amenityDeleted)
[-] pred: org. junit. Assert. assertFalse ( amenityDeleted )
************************************
************************************
[+] input: shouldReturnNullIfUserWithDuplicateIdExists() { final String email = "email"; final LegacyUser user = new LegacyUser(); when(legacyUserService.findByEmail(email)) .thenReturn(Optional.of(user)); when(userModelFactory.isDuplicateUserId(user, realmModel)) .thenReturn(true);  var result = legacyProvider.getUserByEmail(realmModel, email);  "<AssertPlaceHolder>"; }
getUserByEmail(RealmModel realmModel, String email) { return getUserModel(realmModel, email, () -> legacyUserService.findByEmail(email)); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("#[SiH]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: testGetRecordingOptions() { Map<String, String> expected = new HashMap<>(); expected.put("name", "test"); expected.put("maxAge", "3m"); expected.put("maxSize", "1048576"); expected.put("dumpOnExit", "true"); expected.put("destination", "test.jfr"); expected.put("disk", "true"); expected.put("duration", "120s"); RecordingOptions opts = new RecordingOptions.Builder() .name("test") .maxAge("3 m") .maxSize("1048576") .dumpOnExit("true") .destination("test.jfr") .disk("true") .duration("120 s") .build(); "<AssertPlaceHolder>"; }
getRecordingOptions() { return recordingOptions; }
[*] target: assertEquals(expected, opts.getRecordingOptions())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getRecordingOptions() )
************************************
************************************
[+] input: testDoFixValueAssert_equals() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) <= Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ApigatewayResource.cmd")); String actual = exportApiGatewayResources.getTFImport(getAwsRestApiResources()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRestApiResource> awsRestApiResources) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder();  for (AWSRestApiResource awsRestApiResource : awsRestApiResources) {  awsRestApiResource.getAwsResources().stream() .filter(awsResource -> awsResource.getResource().parentId() != null) .forEach(awsResource -> { tfImportBuilder.importLine(TFImportLine.builder() .address(awsResource.getTerraformAddress()) .id(awsResource.getResourceId()) .build());  awsResource.getAwsMethods().forEach(awsMethod -> { AWSIntegration awsIntegration = awsMethod.getAwsIntegration();  tfImportBuilder.importLine(TFImportLine.builder() .address(awsMethod.getTerraformAddress()) .id(awsMethod.getResourceId()) .build());  tfImportBuilder.importLine(TFImportLine.builder() .address(awsIntegration.getTerraformAddress()) .id(awsIntegration.getResourceId()) .build()); }); }); } return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EgressOnlyInternetGateway.cmd")); String actual = exportEgressOnlyInternetGateways.getTFImport(getAwsEgressOnlyInternetGateways()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSEgressOnlyInternetGateway> awsEgressOnlyInternetGateways) {  return TFImport.builder() .importLines(awsEgressOnlyInternetGateways.stream() .map(awsEgressOnlyInternetGateway -> TFImportLine.builder() .address(awsEgressOnlyInternetGateway.getTerraformAddress()) .id(awsEgressOnlyInternetGateway.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { var method = buildMethod("Foo", "meth", "()V");  var frames = new ArrayList<RecordedFrame>(); for (int i = 0; i < 8; i++) { var frame = buildFrame(method, i + 10, 14); frames.add(frame); }  var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[{"desc":"Foo.meth()V","line":"10","bytecodeIndex":"14"},{"desc":"Foo.meth()V","line":"11","bytecodeIndex":"14"},{"desc":"Foo.meth()V","line":"12","bytecodeIndex":"14"}]}"; var result = MethodSupport.jsonWrite(frames, Optional.of(3)); "<AssertPlaceHolder>"; }
jsonWrite(final List<RecordedFrame> frames, final Optional<Integer> limit) throws IOException { StringWriter strOut = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(strOut); int frameCount = Math.min(limit.orElse(frames.size()), frames.size());  jsonWriter.beginObject(); jsonWriter.name("type").value("stacktrace"); jsonWriter.name("language").value("java"); jsonWriter.name("version").value(JSON_SCHEMA_VERSION); jsonWriter.name("truncated").value(frameCount < frames.size()); jsonWriter.name("payload").beginArray(); for (int i = 0; i < frameCount; i++) { RecordedFrame frame = frames.get(i); jsonWriter.beginObject(); jsonWriter.name("desc").value(describeMethod(frame.getMethod())); jsonWriter.name("line").value(Integer.toString(frame.getLineNumber())); jsonWriter.name("bytecodeIndex").value(Integer.toString(frame.getBytecodeIndex())); jsonWriter.endObject(); }  jsonWriter.endArray(); jsonWriter.endObject(); String out = strOut.toString(); int length = out.length(); if (length > HEADROOM_75PC) { double percentageOfFramesToTry = ((double) HEADROOM_75PC) / length; int numFrames = (int) (frameCount * percentageOfFramesToTry); if (numFrames < frameCount) { return jsonWrite(frames, Optional.of(numFrames)); } throw new IOException( "Corner case of a stack frame that can't be cleanly truncated! " + "numFrames = " + numFrames + ", frameCount = " + frameCount + ", " + ", percentageOfFramesToTry = " + percentageOfFramesToTry + ", length = " + length); } else { return out; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: createBusinessAppHdrV01() { BusinessAppHdrV01 h = AppHdrFactory.createBusinessAppHdrV01( "AAAAUSXXXXX", "BBBBUSXXXXX", "REF12345", new MxId("pacs.008.001.08")); "<AssertPlaceHolder>"; assertNull(h.getBizSvc()); assertEquals("AAAAUSXXXXX", h.getFr().getFIId().getFinInstnId().getBICFI()); assertEquals("BBBBUSXXXXX", h.getTo().getFIId().getFinInstnId().getBICFI()); assertEquals("REF12345", h.getBizMsgIdr()); assertEquals("pacs.008.001.08", h.getMsgDefIdr());  final String xml = h.xml(); // for BAH v01 the date time must be ISONormalisedDateTime assertTrue(xml.contains("Z</CreDt>")); }
createBusinessAppHdrV01( final String sender, final String receiver, final String reference, final MxId id) { BusinessAppHdrV01 h = new BusinessAppHdrV01();  if (sender != null) { h.setFr(new Party9Choice()); h.getFr().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getFr().getFIId().getFinInstnId().setBICFI(sender); }  if (receiver != null) { h.setTo(new Party9Choice()); h.getTo().setFIId(new BranchAndFinancialInstitutionIdentification5()); h.getTo().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); h.getTo().getFIId().getFinInstnId().setBICFI(receiver); }  if (reference != null) { h.setBizMsgIdr(reference); }  if (id != null) { h.setMsgDefIdr(id.id()); }  h.setCreDt(XMLGregorianCalendarUtils.now());  return h; }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: isCollectionNotEmptyTest_1() { var actual = Utils.isCollectionNotEmpty(null); Assertions."<AssertPlaceHolder>"; }
isCollectionNotEmpty(Collection<T> collection) { return Objects.nonNull(collection) && 0 < collection.size(); }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Instance.cmd")); String actual = exportInstances.getTFImport(getAwsReservations()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSReservation> awsReservations) { return TFImport.builder() .importLines(awsReservations.stream().flatMap(awsReservation -> awsReservation.getInstances().stream()) .map(awsInstance -> TFImportLine.builder() .address(awsInstance.getTerraformAddress()) .id(awsInstance.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final String content = "{"test":"test"}"; final JsonNode node = mapper.readValue(content, JsonNode.class);  final Map<String, Object> map = conv.toMap(node); final JsonNode fromMap = conv.fromMap(map, JsonNode.class);  String contentResult = mapper.writeValueAsString(fromMap); "<AssertPlaceHolder>"; }
writeValueAsString(Object value) { try { return Optional.of(mapper.writeValueAsString(value)); } catch (JsonProcessingException e) { log.error("Could not serialise to string: {}", value, e); } return Optional.empty(); }
[*] target: assertEquals(content, contentResult)
[-] pred: org. junit. Assert. assertEquals ( content, contentResult )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = MyService.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: test4() { int[] arrInitial = {1, 2, 3}; int[] arrExpected = {1, 3}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final ConnectionImpl mockReaderConnection = mockConnection; final ConnectionImpl mockWriterConnection = mockConnection;  final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getTopology(mockReaderConnection, false)) .thenReturn(topology); when(mockTopologyService.getHostByName(mockReaderConnection)) .thenReturn(readerB_Host); when(mockConnectionProvider.connect(mockHostInfo)) .thenReturn(mockReaderConnection); when(mockConnectionProvider.connect(refEq(writerHost))) .thenReturn(mockWriterConnection);  final Properties properties = new Properties(); properties.setProperty(PropertyKey.failOverReadOnly.getKeyName(), "false");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); assertTrue(failoverPlugin.isCurrentConnectionReadOnly()); assertTrue(failoverPlugin.explicitlyReadOnly);  failoverPlugin.execute( JdbcConnection.class, "setReadOnly", () -> { mockConnection.setReadOnly(false); return true; }, new Object[] {false}); assertFalse(failoverPlugin.explicitlyReadOnly);  "<AssertPlaceHolder>"; }
isCurrentConnectionWriter() { return isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionWriter())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionWriter ( ) )
************************************
************************************
[+] input: it_recognizes_end_of_statement_when_ending_in_period() { CobolLine current = new CobolLine("               FILE STATUS INPUT-FILE-STATUS.", tokenExtractor); CobolLine next = new CobolLine(" ", tokenExtractor);  boolean isEnd = Interpreter.isEndOfStatement(current, next);  "<AssertPlaceHolder>"; }
isEndOfStatement(CobolLine currentLine, CobolLine nextMeaningfulLine) { if (nextMeaningfulLine == null) { return true; } if (currentLine.getTrimmedString().endsWith(Constants.PERIOD)) { return true; } if (currentLine.getTrimmedString().toUpperCase(Locale.ROOT).endsWith(Constants.END_EXEC_TOKEN)) { return true; } if (containsOnlyPeriod(nextMeaningfulLine)) { return false; } if (currentLine.containsToken(Constants.CALL_TOKEN)) { List<String> currentTokens = currentLine.getTokens(); int callTokenCount = 0, endCallTokenCount = 0; for (String token : currentTokens) { if (token.equals(Constants.CALL_TOKEN)) { callTokenCount++; } if (token.equals(Constants.END_CALL_TOKEN)) { endCallTokenCount++; } } if (callTokenCount == endCallTokenCount) { return true; } if (nextMeaningfulLine.containsToken("ON")) { return false; } if (currentLine.containsToken("ON")) { return false; } } if (CobolVerbs.isStartOrEndCobolVerb(nextMeaningfulLine.getTokens().get(0))) { return true; }  return false; }
[*] target: assertTrue(isEnd)
[-] pred: org. junit. Assert. assertTrue ( isEnd )
************************************
************************************
[+] input: toArgs_inputSetFields_ArgsSetFields() { /* ARRANGE */ final var params = Map.of("A", "AV", "B", "BV"); final var headers = Map.of("C", "CV", "D", "DV");  final var input = new QueryInput(); input.setParams(params); input.setHeaders(headers);  final var expected = new HttpService.HttpArgs(); expected.setParams(params); expected.setHeaders(headers);  /* ACT */ final var result = service.toArgs(input);  /* ASSERT */ "<AssertPlaceHolder>"; }
toArgs(final QueryInput input) { final var args = new HttpArgs(); if (input != null) { args.setParams(input.getParams()); args.setHeaders(input.getHeaders()); }  return args; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: IOException { /* ARRANGE */ final var endpointId = UUID.randomUUID(); final var requestedArtifact = URI.create("https://requested/" + endpointId); final var queryInput = new QueryInput(); final var expect = new ByteArrayInputStream(new byte[]{});  Mockito.doReturn(expect).when(artifactService) .getData(any(), any(), eq(endpointId), eq(queryInput), any());  /* ACT */ final var result = resolver.getDataByArtifactId(requestedArtifact, queryInput);  /* ASSERT */ "<AssertPlaceHolder>"; }
getDataByArtifactId(final URI requestedArtifact, final QueryInput queryInput) throws IOException { final var endpoint = EndpointUtils.getUUIDFromPath(requestedArtifact); return artifactService.getData(allowAccessVerifier, artifactReceiver, endpoint, queryInput, null); }
[*] target: assertEquals(expect, result)
[-] pred: org. junit. Assert. assertEquals ( expect, result )
************************************
************************************
[+] input: testGetSubscriptions() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setName("test-topic"); SubscriptionMetadata subscriptionMetadata = new SubscriptionMetadata(); subscriptionMetadata.setId("1"); subscriptionMetadata.setClientApplicationId("client-app"); subscriptionMetadata.setDescription("Deprecation notice");  when(subscriptionService.getSubscriptionsForTopic(environmentId, "test-topic", false)) .thenReturn(List.of(subscriptionMetadata)); List<SubscriptionMetadata> subscriptions = graphqlController.getSubscriptions(environmentId, topicMetadata);  "<AssertPlaceHolder>"; assertEquals(1, subscriptions.size()); assertEquals("1", subscriptions.get(0).getId()); assertEquals("client-app", subscriptions.get(0).getClientApplicationId()); assertEquals("Deprecation notice", subscriptions.get(0).getDescription()); }
getSubscriptions(@ContextValue(name = "environmentId") String environmentId, TopicMetadata topic) { return subscriptionService.getSubscriptionsForTopic(environmentId, topic.getName(), false); }
[*] target: assertNotNull(subscriptions)
[-] pred: org. junit. Assert. assertNotNull ( subscriptions )
************************************
************************************
[+] input: shouldLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(0, 2), null); "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).get("ID")); assertEquals(2, posts.get(1).get("ID")); } }
getMapper(Class<T> type);
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageAsyncConfiguration payloadStorageConfiguration = new PayloadStorageAsyncConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
getS3AsyncClient() { return s3Async; }
[*] target: assertNull(payloadStorageConfiguration.getS3AsyncClient())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3AsyncClient() )
************************************
************************************
[+] input: IOException { String xml = Lib.readResource("pacs.002-CDATA.xml"); MxPacs00200103 mx = (MxPacs00200103) new MxReadImpl().read(MxPacs00200103.class, xml, MxPacs00200103._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("11de568fd1754cb7b2fbbb3dd238ff16", mx.getAppHdr().reference()); assertEquals("UNKNOWN", mx.getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgId()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: test2() { int[] nums = {1, 3, 2, 2, 3, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: IOException { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); ResponseEntity<List<BuildKitePipelineDTO>> responseEntity = getBuildKitepipelineResponseEntity(httpHeaders); when(buildKiteFeignClient.getPipelineInfo(MOCK_TOKEN, TEST_ORG_ID, "1", "100")).thenReturn(responseEntity);  var pageStepsInfoDto = cachePageService.getPipelineInfoList(TEST_ORG_ID, MOCK_TOKEN, "1", "100");  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
getPipelineInfoList(String orgSlug, String buildKiteToken, String page, String perPage) { var pipelineInfoResponse = buildKiteFeignClient.getPipelineInfo(buildKiteToken, orgSlug, page, perPage); log.info("Successfully get paginated pipeline info pagination info, orgSlug: {}, page:{}", orgSlug, 1);  int totalPage = parseTotalPage(pipelineInfoResponse.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage);  return PageBuildKitePipelineInfoDTO.builder() .firstPageInfo(pipelineInfoResponse.getBody()) .totalPage(totalPage) .build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: testCallback() { AtomicBoolean wasCalled = new AtomicBoolean(false);  FoundationCallback foundationCallback = FoundationCallbackRegistry.registerCallback(id -> wasCalled.set(true));  System.gc();  Foundation.invoke(foundationCallback.getTarget(), "accept:"); FoundationCallbackRegistry.unregister(foundationCallback);  Assertions."<AssertPlaceHolder>"; }
unregister(FoundationCallback callback) { REFERENCE_MAP.remove(callback.getTarget()); }
[*] target: assertTrue(wasCalled.get())
[-] pred: org. junit. Assert. assertTrue ( wasCalled. get ( ) )
************************************
************************************
[+] input: checkIsRootByUserId() { Integer userId = mockData(); boolean exist = groupService.checkIsRootByUserId(userId); "<AssertPlaceHolder>"; }
checkIsRootByUserId(Integer userId) { QueryWrapper<UserGroupDO> wrapper = new QueryWrapper<>(); Integer rootGroupId = this.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); wrapper.lambda().eq(UserGroupDO::getUserId, userId) .eq(UserGroupDO::getGroupId, rootGroupId); UserGroupDO relation = userGroupMapper.selectOne(wrapper); return relation != null; }
[*] target: assertFalse(exist)
[-] pred: org. junit. Assert. assertFalse ( exist )
************************************
************************************
[+] input: testNotCancelledInitially() { final SimpleFuture<Integer> f = new SimpleFuture<>(); "<AssertPlaceHolder>"; }
isCancelled() { return cancelled; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled ( ) )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties(); properties.setProperty("maxAllowedPacket", "10");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); final Map<String, String> initialConnectionProperties = failoverPlugin.initialConnectionProps;  assertEquals(5, initialConnectionProperties.size()); assertEquals("10", initialConnectionProperties.get("maxAllowedPacket")); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testGetLayerById() { GeoServerTileLayerInfo info = new GeoServerTileLayerInfoImpl(); info.setId("id1"); info.setName("name1"); catalog.save(info); GeoServerTileLayerInfo actual = catalog.getLayerById("id1"); actual = ModificationProxy.unwrap(actual); "<AssertPlaceHolder>"; }
getLayerById(@NonNull String id) { checkInitialized(); return findFile(id).map(this::depersist).orElse(null); }
[*] target: assertEquals(info, actual)
[-] pred: org. junit. Assert. assertEquals ( info, actual )
************************************
************************************
[+] input: testConfigure() { final SerializesOptions options = SerializesOptionsConfigure.newOpts() .request(null) .response(null) .configured();  assertNull(options.getRequest()); "<AssertPlaceHolder>"; }
getResponse() { return response; }
[*] target: assertNull(options.getResponse())
[-] pred: org. junit. Assert. assertNull ( options. getResponse() )
************************************
************************************
[+] input: testGetTransformationManager() {  // Act TransformationManager transformationManager = ParamManager.getTransformationManager();  // Assert "<AssertPlaceHolder>"; }
getTransformationManager() { return transformationManager; }
[*] target: assertNotNull(transformationManager)
[-] pred: org. junit. Assert. assertNotNull ( transformationManager )
************************************
************************************
[+] input: Exception { final File input = FileUtil.createTempFile(); // first bytes of a zip / jar file FileUtil.writeBytes(input, new byte[] {0x50, 0x4b, 0x03, 0x04, 0x14, 0x20, 0x08, 0x08, 0x08, 0x20, 0x09, 0x76, 0x19, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 });  final boolean actual = FileUtil.isBinary(input);  // asserts "<AssertPlaceHolder>"; }
isBinary(final File file) throws IOException { final byte[] bytes = readBytes(file, 128);  for (final byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } }  return false; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: shouldReturnNullIfUserNotFoundByEmail() { final String username = "user"; when(legacyUserService.findByEmail(username)) .thenReturn(Optional.empty());  var result = legacyProvider.getUserByEmail(realmModel, username);  "<AssertPlaceHolder>"; }
getUserByEmail(RealmModel realmModel, String email) { return getUserModel(realmModel, email, () -> legacyUserService.findByEmail(email)); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: checkConstructor() {  //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act Address address = Address.createAddress(street, doorNumber, postCode, city, country);  //Assert assertEquals(street, address.getStreet()); assertEquals(doorNumber, address.getDoorNumber()); assertEquals(postCode, address.getPostCode()); assertEquals(city, address.getCity()); "<AssertPlaceHolder>";  }
getCountry() { return country; }
[*] target: assertEquals(country, address.getCountry())
[-] pred: org. junit. Assert. assertEquals ( country, address. getCountry() )
************************************
************************************
[+] input: getInstance() { final StraightwaySingleton instance1 = StraightwaySingleton.getInstance(); final StraightwaySingleton instance2 = StraightwaySingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { return straightwaySingleton; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
************************************
[+] input: testHashpw() { // System.out.print("BCrypt.hashpw(): "); for (int i = 0; i < test_vectors.length; i++) { String plain = test_vectors[i][0]; String salt = test_vectors[i][1]; String expected = test_vectors[i][2]; String hashed = BCrypt.hashpw(plain, salt); "<AssertPlaceHolder>"; // System.out.print("."); } // System.out.println(""); }
hashpw(String password, String salt) { BCrypt B; String real_salt; byte passwordb[], saltb[], hashed[]; char minor = (char) 0; int rounds, off = 0; StringBuilder rs = new StringBuilder();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') throw new IllegalArgumentException("Invalid salt version"); if (salt.charAt(2) == '$') off = 3; else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') throw new IllegalArgumentException("Invalid salt revision"); off = 4; }  // Extract number of rounds if (salt.charAt(off + 2) > '$') throw new IllegalArgumentException("Missing salt rounds"); rounds = Integer.parseInt(salt.substring(off, off + 2));  real_salt = salt.substring(off + 3, off + 25); passwordb = (password + (minor >= 'a' ? "\000" : "")).getBytes(StandardCharsets.UTF_8);  saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);  B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, bf_crypt_ciphertext.clone());  rs.append("$2"); if (minor >= 'a') rs.append(minor); rs.append("$"); if (rounds < 10) rs.append("0"); if (rounds > 30) { throw new IllegalArgumentException("rounds exceeds maximum (30)"); } rs.append(Integer.toString(rounds)); rs.append("$"); rs.append(encode_base64(saltb, saltb.length)); rs.append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); }
[*] target: assertEquals(hashed, expected)
[-] pred: org. junit. Assert. assertEquals ( hashed, expected )
************************************
************************************
[+] input: testMakeDatabase() { // Prepare test data JDBCSinkConfig config = mock(JDBCSinkConfig.class); when(config.getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_URL)).thenReturn("jdbc:db2://localhost:3306/test"); when(config.getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_USER)).thenReturn("username"); when(config.getPassword(JDBCSinkConfig.CONFIG_NAME_CONNECTION_PASSWORD)).thenReturn(new Password("password")); when(config.getInt(JDBCSinkConfig.CONFIG_NAME_CONNECTION_DS_POOL_SIZE)).thenReturn(10);  // Create a mock for the IDataSource IDataSource dataSource = mock(IDataSource.class);  // Create a mock for the DatabaseType DatabaseType databaseType = mock(DatabaseType.class); when(databaseType.getDriver()).thenReturn("com.ibm.db2.jcc.DB2Driver"); when(databaseType.create(dataSource)).thenReturn(mock(IDatabase.class));  // Create a mock for the DatabaseFactory DatabaseFactory databaseFactory = mock(DatabaseFactory.class); doCallRealMethod().when(databaseFactory).makeDatabase(config);  // Test the makeDatabase method IDatabase database = databaseFactory.makeDatabase(config);  // Verify the interactions and assertions verify(config, times(2)).getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_URL); verify(config).getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_USER); verify(config).getPassword(JDBCSinkConfig.CONFIG_NAME_CONNECTION_PASSWORD); verify(config).getInt(JDBCSinkConfig.CONFIG_NAME_CONNECTION_DS_POOL_SIZE); "<AssertPlaceHolder>"; }
makeDatabase(JDBCSinkConfig config) {  logger.warn("DatabaseFactory: makeDatabase");  DatabaseType databaseType = getDatabaseType(config);  String databaseDriver = getDatabaseDriver(databaseType);  IDataSource dataSource = getDataSource(config, databaseDriver);  return databaseType.create(dataSource); }
[*] target: assertNotNull(database)
[-] pred: org. junit. Assert. assertNotNull ( database )
************************************
************************************
[+] input: selectByPrimaryKeyWithOtherTenant() { InlongGroupEntity entity = createGroupEntity(); groupEntityMapper.insert(entity); setOtherTenant(ANOTHER_TENANT); InlongGroupEntity groupEntity = groupEntityMapper.selectByPrimaryKey(entity.getId()); Assertions."<AssertPlaceHolder>"; }
selectByPrimaryKey(Integer id);
[*] target: assertNull(groupEntity)
[-] pred: org. junit. Assert. assertNull ( groupEntity )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Vpc.cmd")); String actual = exportvpcs.getTFImport(getAwsVpcs()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSVpc> awsVpcs) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder(); awsVpcs.forEach(awsVpc -> { Vpc vpc = awsVpc.getVpc(); tfImportBuilder.importLine(TFImportLine.builder() .address(awsVpc.getTerraformAddress()) .id(awsVpc.getResourceId()) .build() ); vpc.cidrBlockAssociationSet().forEach(cidrBlockAssociation -> tfImportBuilder.importLine(TFImportLine.builder() .address(MessageFormat.format("{0}.{1}", "aws_vpc_ipv4_cidr_block_association", cidrBlockAssociation.associationId())) .id(cidrBlockAssociation.associationId()) .build()) ); } ); return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { File file = tempFolder.newFile("xyz"); Resource resource = resourceLoader.getResource(file.getPath()); "<AssertPlaceHolder>"; }
getResource(String location);
[*] target: assertNotNull(resource)
[-] pred: org. junit. Assert. assertNotNull ( resource )
************************************
************************************
[+] input: testBcc() { UndirectedGraph g = new UndirectedGraph(12); g.addEdge(0, 1); g.addEdge(1, 2); g.addEdge(1, 3); g.addEdge(2, 3); g.addEdge(2, 4); g.addEdge(3, 4); g.addEdge(1, 5); g.addEdge(0, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(5, 8); g.addEdge(7, 8); g.addEdge(8, 9); g.addEdge(10, 11); Set<Set<Integer>> actual = g.bcc().stream().map(HashSet::new).collect(Collectors.toSet()); Set<Set<Integer>> expected = Set.of( Set.of(1, 2, 3, 4), Set.of(8, 9), Set.of(8, 5, 7), Set.of(6, 0, 5, 1), Set.of(10, 11) ); "<AssertPlaceHolder>";  }
bcc() { int n = adj.length; int[] disc = new int[n]; int[] low = new int[n]; int[] parent = new int[n];  LinkedList<Edge> st = new LinkedList<>(); List<Collection<Integer>> ansComponents = new LinkedList<>();  Arrays.fill(disc, -1); Arrays.fill(low, -1); Arrays.fill(parent, -1); for (int i = 0; i < n; i++) { if (disc[i] == -1) bccUtil(i, disc, low, st, parent, ansComponents); if (!st.isEmpty()) { Set<Integer> set = new HashSet<>(); while (!st.isEmpty()) { Edge edge = st.pollLast(); set.add(edge.u); set.add(edge.v); } ansComponents.add(set); count++; } } return ansComponents; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldReturnFindAll() { List<User> datas = new ArrayList(); datas.add(new User(1L, "ten@mail.com","teten","teten")); datas.add(new User(2L, "ten@mail.com","teten","teten")); datas.add(new User(3L, "ten@mail.com","teten","teten"));  given(userRepository.findAll()).willReturn(datas);  List<User> expected = userService.findAllUsers();  "<AssertPlaceHolder>"; }
findAllUsers() { return userRepository.findAll(); }
[*] target: assertEquals(expected, datas)
[-] pred: org. junit. Assert. assertEquals ( expected, datas )
************************************
************************************
[+] input: testEncodeDecodeStringStartingWithDelim() { final String VALUE = ",hahahahah"; final SequenceEncoder se = new SequenceEncoder(',').append(VALUE); final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), ','); "<AssertPlaceHolder>"; }
nextToken() { if (!hasMoreTokens()) throw new NoSuchElementException();  if (start == stop) { // token for "null" is the empty string val = null; return ""; }  if (buf != null) { buf.setLength(0); }  String tok = null; int i = start; for ( ; i < stop; ++i) { if (val.charAt(i) == delim) { if (i > 0 && val.charAt(i - 1) == '\') { // escaped delimiter; piece together the token if (buf == null) { buf = new StringBuilder(); } buf.append(val, start, i - 1); start = i; } else { // real delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start, i); } else { // had an earlier escape; cobble on the end buf.append(val, start, i); } start = i + 1; break; } } }  if (start < i) { // i == stop; we reached the end without a delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start); } else { // had an earlier escape; cobble on the end buf.append(val, start, stop); } val = null; }  return unquote(tok != null ? tok : buf).intern(); }
[*] target: assertEquals(VALUE, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( VALUE, sd. nextToken ( ) )
************************************
************************************
[+] input: testGensaltInt() { // System.out.print("BCrypt.gensalt(log_rounds):"); for (int i = 4; i <= 12; i++) { // System.out.print(" " + Integer.toString(i) + ":"); for (int j = 0; j < test_vectors.length; j += 4) { String plain = test_vectors[j][0]; String salt = BCrypt.gensalt(i); String hashed1 = BCrypt.hashpw(plain, salt); String hashed2 = BCrypt.hashpw(plain, hashed1); "<AssertPlaceHolder>"; // System.out.print("."); } } // System.out.println(""); }
hashpw(String password, String salt) { BCrypt B; String real_salt; byte passwordb[], saltb[], hashed[]; char minor = (char) 0; int rounds, off = 0; StringBuilder rs = new StringBuilder();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') throw new IllegalArgumentException("Invalid salt version"); if (salt.charAt(2) == '$') off = 3; else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') throw new IllegalArgumentException("Invalid salt revision"); off = 4; }  // Extract number of rounds if (salt.charAt(off + 2) > '$') throw new IllegalArgumentException("Missing salt rounds"); rounds = Integer.parseInt(salt.substring(off, off + 2));  real_salt = salt.substring(off + 3, off + 25); passwordb = (password + (minor >= 'a' ? "\000" : "")).getBytes(StandardCharsets.UTF_8);  saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);  B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, bf_crypt_ciphertext.clone());  rs.append("$2"); if (minor >= 'a') rs.append(minor); rs.append("$"); if (rounds < 10) rs.append("0"); if (rounds > 30) { throw new IllegalArgumentException("rounds exceeds maximum (30)"); } rs.append(Integer.toString(rounds)); rs.append("$"); rs.append(encode_base64(saltb, saltb.length)); rs.append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); }
[*] target: assertEquals(hashed1, hashed2)
[-] pred: org. junit. Assert. assertEquals ( hashed1, hashed2 )
************************************
************************************
[+] input: testCenterHeadingEvenText2() { String actual = SerialiserFlavorBase.createCenteredHeading("Keystrokes", '#', 51); String expected = "#################### Keystrokes ###################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: search_withUnmatchedKeyword_shouldReturnEmptySet() { // Prepare // 5 rows, 3 rows with name including substring "example" insertSampleData(); OperatorSearchFilter filter = OperatorSearchFilter.newBuilder() .withKeyword("exampleABC") .withPageNum(1) .withPageSize(5) .build();  // Process List<Operator> results = operatorDao.fetchWithFilter(filter);  // Validate "<AssertPlaceHolder>"; }
fetchWithFilter(OperatorSearchFilter filters) { Preconditions.checkNotNull(filters, "Invalid parameter `filters`: found null object"); Preconditions.checkArgument(Objects.nonNull(filters.getPageNum()) && filters.getPageNum() > 0, "Invalid page num: %d", filters.getPageNum()); Preconditions.checkArgument(Objects.nonNull(filters.getPageSize()) && filters.getPageSize() > 0, "Invalid page size: %d", filters.getPageSize()); boolean hasKeywordFilter = StringUtils.isNotBlank(filters.getKeyword()); Integer offset = (filters.getPageNum() - 1) * filters.getPageSize(); String baseSql = String.format("SELECT id, name, description, class_name, package FROM %s ", DB_TABLE_NAME); List<Operator> results; if (hasKeywordFilter) { String sql = baseSql + "WHERE name LIKE CONCAT('%', CAST(? AS TEXT), '%') LIMIT ? OFFSET ?"; results = dbOperator.fetchAll(sql, OperatorMapper.INSTANCE, filters.getKeyword(), filters.getPageSize(), offset); } else { String sql = baseSql + "LIMIT ? OFFSET ?"; results = dbOperator.fetchAll(sql, OperatorMapper.INSTANCE, filters.getPageSize(), offset); } return results; }
[*] target: assertEquals(0, results.size())
[-] pred: org. junit. Assert. assertEquals ( 0, results. size ( ) )
************************************
************************************
[+] input: test_convert_csv_line_contains_newline() { String[] record = {"1", "promotion!\napple", "10", "9.99"}; String expected = ""1","promotion!\napple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line) { return convertToCsvFormat(line, DEFAULT_SEPARATOR); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: given_an_available_object_when_couchbase_contains_then_return_false() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); ExistsResult existsResult = mock(ExistsResult.class); when(existsResult.exists()).thenReturn(false); when(collection.exists(idempotencyKey.getKeyValue())).thenReturn(existsResult);  //When Boolean isContain = couchbaseIdempotentRepository.contains(idempotencyKey);  //Then verify(collection, times(1)).exists(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
contains(IdempotencyKey key) { return collection.exists(key.getKeyValue()).exists(); }
[*] target: assertFalse(isContain)
[-] pred: org. junit. Assert. assertFalse ( isContain )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) <= Double.parseDouble(expectedValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: CertificateException {  final SslOptions ssl = new SslOptions(); ssl.setEnabledProtocols(new String[]{"TLSv1.2"}); ssl.setCiphers(new String[]{"AES256-SHA", "AES128-SHA"}); final SelfSignedCertificate cert = new SelfSignedCertificate(); ssl.setCertificate(cert.certificate()); ssl.setPrivateKey(cert.privateKey()); ssl.setClientAuth(ClientAuth.NONE); ssl.setSessionCacheSize(10L);   final SslHelper sslHelper = new SslHelper(ssl, true); assertTrue(sslHelper.isSsl()); assertSame(ssl, sslHelper.options());  final SslContext sslContext = sslHelper.getSslContext(); "<AssertPlaceHolder>"; assertTrue(sslContext.isServer()); assertArrayEquals(ssl.getCiphers(), sslContext.cipherSuites().toArray()); assertEquals(10L, sslContext.sessionCacheSize()); }
getSslContext() { return sslContext; }
[*] target: assertNotNull(sslContext)
[-] pred: org. junit. Assert. assertNotNull ( sslContext )
************************************
************************************
[+] input: deleteMemberDocumentSuccess() { // given HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertTrue(isDocumentDeleted)
[-] pred: org. junit. Assert. assertTrue ( isDocumentDeleted )
************************************
************************************
[+] input: removeAdminFromCommunityAdminNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository, never()).save(testCommunity); }
removeAdminFromCommunity(String communityId, String adminId) { Optional<Community> communitySearch = communityRepository.findByCommunityIdWithAdmins(communityId); return communitySearch.map(community -> { boolean adminRemoved = community.getAdmins().removeIf(admin -> admin.getUserId().equals(adminId)); if (adminRemoved) { communityRepository.save(community); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(adminRemoved)
[-] pred: org. junit. Assert. assertFalse ( adminRemoved )
************************************
************************************
[+] input: listAllHousesDefault() { // given Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);  given(communityHouseRepository.findAll()) .willReturn(housesInDatabase);  // when Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findAll(); }
listAllHouses() { Set<CommunityHouse> communityHouses = new HashSet<>(); communityHouseRepository.findAll().forEach(communityHouses::add); return communityHouses; }
[*] target: assertEquals(housesInDatabase, resultHouses)
[-] pred: org. junit. Assert. assertEquals ( housesInDatabase, resultHouses )
************************************
************************************
[+] input: resetPasswordTokenNotMatches() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); testSecurityToken.setToken("wrong-token"); User user = getDefaultUser(); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); assertNotNull(getUserSecurityToken(user, SecurityTokenType.RESET)); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: testProcessEvent() { var stack = new Stack<String>();  String expectedFrameName1 = "expectedFrameName1"; String expectedFrameName2 = "expectedFrameName2"; String expectedFrameName3 = "expectedFrameName3"; Integer expectedFrameValue = 27;  stack.push(expectedFrameName1); stack.push(expectedFrameName2); stack.push(expectedFrameName3);  FlamegraphMarshaller flamegraphMarshaller = new FlamegraphMarshaller(); flamegraphMarshaller.processEvent(stack, expectedFrameValue); FlamegraphMarshaller.StackFrame stackFrame = flamegraphMarshaller.getStackFrame(); List<FlamegraphMarshaller.StackFrame> children = stackFrame.getChildren(); assertNotNull(children);  FlamegraphMarshaller.StackFrame frame3 = (FlamegraphMarshaller.StackFrame) children.toArray()[0]; FlamegraphMarshaller.StackFrame frame2 = (FlamegraphMarshaller.StackFrame) frame3.getChildren().toArray()[0]; FlamegraphMarshaller.StackFrame frame1 = (FlamegraphMarshaller.StackFrame) frame2.getChildren().toArray()[0];  assertEquals(expectedFrameName3, frame3.getName()); assertEquals(expectedFrameValue, frame3.getValue());  assertEquals(expectedFrameName2, frame2.getName()); assertEquals(expectedFrameValue, frame2.getValue());  assertEquals(expectedFrameName1, frame1.getName()); "<AssertPlaceHolder>"; }
getValue() { return value; }
[*] target: assertEquals(expectedFrameValue, frame1.getValue())
[-] pred: org. junit. Assert. assertEquals ( expectedFrameValue, frame1. getValue ( ) )
************************************
************************************
[+] input: updateByteSize_hasChanged_willUpdateByteSizeAndChecksum() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc()); final byte[] data = {0, 1}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length);  /* ACT */ final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(2, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
updateByteSize(final Artifact artifact, final byte[] bytes) { if (bytes != null) { final var byteSize = bytes.length; final var checkSum = calculateChecksum(bytes); if (artifact.getCheckSum() != checkSum || artifact.getByteSize() != byteSize) { setByteSizeAndCheckSum(artifact, byteSize, checkSum); return true; } } else { if (artifact.getByteSize() != 0 || artifact.getCheckSum() != 0) { setByteSizeAndCheckSum(artifact, 0, 0); return true; } } return false; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: skipTaskRun_shouldWork() { TaskRun taskRun = mockTaskRun(1l); mockPut("/taskruns/" + taskRun.getId() + "/_skip", "", JSONUtils.toJsonString(true)); Boolean result = (Boolean) wfApi.skipTaskRun(taskRun.getId()); Assertions."<AssertPlaceHolder>"; }
skipTaskRun(Long taskRunId) { HttpUrl url = buildUrl(API_TASK_RUNS) .addPathSegment(taskRunId.toString()) .addPathSegment("_skip") .build(); return put(url, Maps.newHashMap(), Object.class); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: changeUserPassword1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(random.nextInt(), dto1); "<AssertPlaceHolder>"; }); }
changeUserPassword(Integer id, ResetPasswordDTO dto) { throwUserNotExistById(id); return userIdentityService.changePassword(id, dto.getNewPassword()); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: generateObjectiveRowCollectionForCompany_expectOneRow() { when(companyService.findById(companyId)).thenReturn(okrCompany); objective.setParentOkrUnit(okrDepartment); okrDepartment.getObjectives().add(objective); objective.getKeyResults().add(keyResult); okrDepartment.setParentOkrUnit(okrCompany); okrCompany.getOkrChildUnits().add(okrDepartment);  Collection<ObjectiveRow> rows = objectiveRowBuilderService.generateForCompany(companyId);  "<AssertPlaceHolder>"; verify(companyService, times(1)).findById(companyId); }
generateForCompany(long companyId) { OkrCompany okrCompany = companyService.findById(companyId);  Collection<OkrChildUnit> okrChildUnitCollection = BranchHelper.collectChildUnits(okrCompany);  return okrChildUnitCollection.stream() .flatMap(childUnit -> generateObjectiveRowCollectionForDepartment(childUnit).stream()) .collect(Collectors.toList()); }
[*] target: assertEquals(1, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 1, rows. size ( ) )
************************************
************************************
[+] input: should_GenerateLeftNumberPointZero_WhenPassingLeftNumberPointZero() { DecimalInWords decimal = new DecimalInWords( createLeftNumber(), IntegerInWords.createZero(), "" ); String expected = "ترليون ومئة مليار ومليار ومليونان ومئتا ألف ومئة وخمسة وستون" + " فاصلة " + "صفر"; "<AssertPlaceHolder>"; }
toString() { StringBuilder numberInWords = new StringBuilder(); numberInWords.append(numberLeftDecimalPoint.toString()); numberInWords.append(" فاصلة ").append(numberRightDecimalPoint.toString()); if (!fractionalRatioName.isEmpty()) numberInWords.append(" ").append(fractionalRatioName); return numberInWords.toString(); }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
************************************
[+] input: getLoginUserTestWithFail() {  UserIdAndPassword userIdAndPassword = new UserIdAndPassword("test2", "5678");  when(userMapper.getPassword(userIdAndPassword.getUserId())).thenReturn(null);  User loginUser = userService.getLoginUser(userIdAndPassword); "<AssertPlaceHolder>";  verify(userMapper).getPassword("test2"); verify(userMapper, times(0)).getUser("test2"); }
getLoginUser(UserIdAndPassword userIdAndPassword);
[*] target: assertEquals(null, loginUser)
[-] pred: org. junit. Assert. assertEquals ( null, loginUser )
************************************
************************************
[+] input: testCRC32IsCompatibleWithJavaUtilZipCRC32() { byte[] buf1 = randombuf(1024); java.util.zip.CRC32 juza = new java.util.zip.CRC32(); juza.update(buf1, 0, buf1.length); long expected = juza.getValue(); long actual = getValue(Arrays.asList(buf1));  "<AssertPlaceHolder>"; }
getValue() { return v & 0xffffffffL; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testHashed() { FeatureMap fm = buildMap(); String salt = "This is a salt"; Hasher hasher = new HashCodeHasher(salt); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(fm,hasher);  // Note this check is only true if the hashing didn't induce collisions. assertEquals(fm.size(),hfm.size);  FeatureDomainProto hfmProto = hfm.serialize(); FeatureMap deserHfm = FeatureMap.deserialize(hfmProto); // Serialization intentionally doesn't preserve the salt. ((HashedFeatureMap) deserHfm).setSalt(salt); "<AssertPlaceHolder>"; }
deserialize(FeatureDomainProto proto) { return ProtoUtil.deserialize(proto); }
[*] target: assertEquals(hfm, deserHfm)
[-] pred: org. junit. Assert. assertEquals ( hfm, deserHfm )
************************************
************************************
[+] input: tangentLinesForTwoCircles4() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 2, 1, 4); "<AssertPlaceHolder>"; assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
************************************
[+] input: crc32Empty() { LibdeflateCRC32 crc32 = new LibdeflateCRC32(); "<AssertPlaceHolder>"; }
getValue() { return ((long) crc32 & 0xffffffffL); }
[*] target: assertEquals(0, crc32.getValue())
[-] pred: org. junit. Assert. assertEquals ( 0, crc32. getValue() )
************************************
************************************
[+] input: testDoneAfterCancel() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.cancel(true); "<AssertPlaceHolder>"; }
isDone() { return cancelled || done.getCount() == 0; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone() )
************************************
************************************
[+] input: run_sparksql_ok() { String sqlScript = "create table a as select * from b where bizdate = {{bizdate}}"; operatorRunner.setConfigKey(SparkConfiguration.CONF_SPARK_SQL, sqlScript); operatorRunner.setConfigKey(SparkConfiguration.CONF_VARIABLES,  "{"bizdate":"'2020'"}");  // 1. create session mockPost("/sessions",  null,"{"id":0,"name":null,"appId":null,"owner":null,"proxyUser":null,"state":"starting","kind":"shared","appInfo":{"driverLogUrl":null,"sparkUiUrl":null},"log":["stdout: ","\\nstderr: ","\\nYARN Diagnostics: "]}"); // 2. query session state mockGet("/sessions/0/state", "{"state":"starting"}"); mockGet("/sessions/0/state", "{"state":"idle"}");  // 3. create session statement String evaluatedSQL = "create table a as select * from b where bizdate = '2020'"; String response = String.format(" {"id":0,"code":"%s","state":"available","progress":0.0}", evaluatedSQL); mockPost("/sessions/0/statements", String.format("{"code":"%s","kind":"sql"}", evaluatedSQL), response);  // 4. query statement state response = " {"id":0,"code":"select 1","state":"available","output":{"status":"ok","execution_count":0,"data":{"application/json":{"schema":{"type":"struct","fields":[{"name":"1","type":"integer","nullable":false,"metadata":{}}]},"data":[[1]]}}},"progress":1.0}"; mockGet("/sessions/0/statements/0", response);  // 5. delete session mockDelete("/sessions/0", "{"msg": "deleted"}");  boolean isSuccess = operatorRunner.run(); "<AssertPlaceHolder>"; }
run() { try { return execute(); } catch (Exception e) { logger.error(e.getMessage()); return false; } finally { this.cleanup(); } }
[*] target: assertTrue(isSuccess)
[-] pred: org. junit. Assert. assertTrue ( isSuccess )
************************************
************************************
[+] input: Exception { SqlSessionTemplate sqlSessionTemplate = jdbcSourceConfig.sqlSessionTemplate(); Assertions."<AssertPlaceHolder>"; }
sqlSessionTemplate() throws Exception { return new SqlSessionTemplate(sqlSessionFactory()); }
[*] target: assertNotNull(sqlSessionTemplate)
[-] pred: org. junit. Assert. assertNotNull ( sqlSessionTemplate )
************************************
************************************
[+] input: deleteMemberFromHouse() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID); memberToDelete.setCommunityHouse(communityHouse);  houseMembers.add(memberToDelete); communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(memberToDelete.getCommunityHouse()); assertFalse(communityHouse.getHouseMembers().contains(memberToDelete)); verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository).save(communityHouse); verify(houseMemberRepository).save(memberToDelete); }
deleteMemberFromHouse(String houseId, String memberId) { Optional<CommunityHouse> communityHouseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return communityHouseOptional.map(communityHouse -> { boolean isMemberRemoved = false; if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) { Set<HouseMember> houseMembers = communityHouse.getHouseMembers(); for (HouseMember member : houseMembers) { if (member.getMemberId().equals(memberId)) { houseMembers.remove(member); communityHouse.setHouseMembers(houseMembers); communityHouseRepository.save(communityHouse); member.setCommunityHouse(null); houseMemberRepository.save(member); isMemberRemoved = true; break; } } } return isMemberRemoved; }).orElse(false); }
[*] target: assertTrue(isMemberDeleted)
[-] pred: org. junit. Assert. assertTrue ( isMemberDeleted )
************************************
************************************
[+] input: ParseException { InputArguments inputArguments = new InputArguments("-i", "foo", "-o", "bar"); assertAll( () -> assertEquals(Paths.get("foo"), inputArguments.getInput()), () -> assertEquals(Paths.get("bar"), inputArguments.getOutput()), () -> "<AssertPlaceHolder>"; }
isTransparent() { return transparent; }
[*] target: assertFalse(inputArguments.isTransparent()))
[-] pred: org. junit. Assert. assertFalse ( inputArguments. isTransparent() ) )
************************************
************************************
[+] input: checkGroupExistById() { GroupDO group = mockData1(); boolean exist = groupService.checkGroupExistById(group.getId()); "<AssertPlaceHolder>"; }
checkGroupExistById(Integer id) { return this.baseMapper.selectCountById(id) > 0; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
************************************
[+] input: convertToDatabaseColumn_inputNull_returnNull() { /* ACT */ final var result = urlConverter.convertToDatabaseColumn(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
convertToDatabaseColumn(final URL url) { return url == null ? null : url.toString(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: changeVisibilityNoOp() { AccessInfo accessInfo = new AccessInfo(AccessFlags.ACC_PUBLIC, AFType.METHOD); AccessInfo result = accessInfo.changeVisibility(AccessFlags.ACC_PUBLIC); "<AssertPlaceHolder>"; }
changeVisibility(int flag) { int currentVisFlags = accFlags & VISIBILITY_FLAGS; if (currentVisFlags == flag) { return this; } int unsetAllVisFlags = accFlags & ~VISIBILITY_FLAGS; return new AccessInfo(unsetAllVisFlags | flag, type); }
[*] target: assertSame(accessInfo, result)
[-] pred: org. junit. Assert. assertSame ( accessInfo, result )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(MediaType.JSON, new InputStreamReader(new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes())))).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: testDoFixValueAssert_withExpectation() { LessThanAssertion lessThanAssertion = MockLessThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = lessThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) < Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Efs.cmd")); String actual = exportEfses.getTFImport(getAwsEfs()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSEfs> awsEfses) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder(); awsEfses.forEach(awsEfs -> { tfImportBuilder.importLine(TFImportLine.builder() .address(awsEfs.getTerraformAddress()) .id(awsEfs.getResourceId()) .build());  List<AWSMountTarget> awsMountTargets = awsEfs.getAwsMountTargets();  if (Optional.ofNullable(awsMountTargets).isPresent()) { awsMountTargets.forEach(awsMountTarget -> tfImportBuilder.importLine(TFImportLine.builder() .address(awsMountTarget.getTerraformAddress()) .id(awsMountTarget.getResourceId()) .build())); }  AWSFileSystemPolicy awsFileSystemPolicy = awsEfs.getAwsFileSystemPolicy(); if (Optional.ofNullable(awsFileSystemPolicy).isPresent()) { tfImportBuilder.importLine(TFImportLine.builder() .address(awsFileSystemPolicy.getTerraformAddress()) .id(awsFileSystemPolicy.getResourceId()) .build()); }  AWSBackupPolicy awsBackupPolicy = awsEfs.getAwsBackupPolicy(); if (Optional.ofNullable(awsBackupPolicy).isPresent()) { tfImportBuilder.importLine(TFImportLine.builder() .address(awsBackupPolicy.getTerraformAddress()) .id(awsBackupPolicy.getResourceId()) .build()); }  }); return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: it_accepts_normal_length_line() { CobolLine line = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor);  boolean isTooShort = Interpreter.isTooShortToBeMeaningful(line);  "<AssertPlaceHolder>"; }
isTooShortToBeMeaningful(CobolLine line) { return line.getUnNumberedString() == null || line.getUnNumberedString().length() < minimumMeaningfulSourceLineLength; }
[*] target: assertFalse(isTooShort)
[-] pred: org. junit. Assert. assertFalse ( isTooShort )
************************************
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new InputStreamConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: NoSuchAlgorithmException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys.getPublic(), 1, new byte[] { 0 }, receiverKeys.getPublic(), Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry has the correct receiversPubKey for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for removing MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getOwnerPubKey() != null && mailboxStoragePayload.getOwnerPubKey().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedMailboxStorageEntry::isValidForRemoveOperation() failed. " + "Entry owner does not match Payload owner:\nProtectedStorageEntry={}\n" + "PayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: getInstance() { final DelayLoadSingleton2 instance1 = DelayLoadSingleton2.getInstance(); final DelayLoadSingleton2 instance2 = DelayLoadSingleton2.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { if (delayLoadSingleton1 == null) { delayLoadSingleton1 = new DelayLoadSingleton2(); } return delayLoadSingleton1; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
************************************
[+] input: test_convert_csv_line_empty() { String[] record = {"1", "", "10", ""}; String expected = ""1","","10",""";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line) { return convertToCsvFormat(line, DEFAULT_SEPARATOR); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: it_finds_too_short_line() { CobolLine line = new CobolLine(" .", tokenExtractor);  boolean isTooShort = Interpreter.isTooShortToBeMeaningful(line);  "<AssertPlaceHolder>"; }
isTooShortToBeMeaningful(CobolLine line) { return line.getUnNumberedString() == null || line.getUnNumberedString().length() < minimumMeaningfulSourceLineLength; }
[*] target: assertTrue(isTooShort)
[-] pred: org. junit. Assert. assertTrue ( isTooShort )
************************************
************************************
[+] input: shouldFindOddPostsInList() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectOddPostsIn", new ArrayList<Integer>() {{ add(0); add(1); add(2); add(3); add(4); }}); // we're getting odd indexes, not odd values, 0 is not odd "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).getId()); assertEquals(3, posts.get(1).getId()); } }
selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int connectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerAHost = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerAHost);  when(mockConnectionProvider.connect(refEq(readerAHost))).thenReturn(mockConnection); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerAHost);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(connectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: convertToEntityAttribute_inputNull_returnNull() { /* ACT */ final var result = urlConverter.convertToEntityAttribute(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
convertToEntityAttribute(final String string) { return string == null ? null : new URL(string); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: toModel_validInput_returnAgreementView() { /* ARRANGE */ final var agreement = getAgreement();  /* ACT */ final var result = agreementViewAssembler.toModel(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(agreement.getValue(), result.getValue()); Assertions.assertEquals(agreement.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(agreement.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(agreement.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(agreement.isConfirmed(), result.isConfirmed());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getAgreementLink(agreement.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getAgreementArtifactsLink(agreement.getId()), artifactsLink.get().getHref()); }
toModel(final Agreement agreement) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(agreement, AgreementView.class); view.add(getSelfLink(agreement.getId()));  final var artifactLink = WebMvcLinkBuilder .linkTo(methodOn(AgreementsToArtifactsController.class) .getResource(agreement.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: NoSuchAlgorithmException { KeyPair ownerKeys = TestUtils.generateKeyPair();  ProtectedStoragePayload protectedStoragePayload = new ProtectedStoragePayloadStub(ownerKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedStorageEntry(protectedStoragePayload, ownerKeys.getPublic(), 1, new byte[] { 0 }, Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() {  // Same requirements as add() boolean result = this.isValidForAddOperation();  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForRemoveOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: test_convert_csv_line_custom_separator() { String[] record = {"1", "apple", "10", "9.99"}; String expected = ""1";"apple";"10";"9.99"";  String result = writer.convertToCsvFormat(record, ";"); "<AssertPlaceHolder>"; }
convertToCsvFormat(final String[] line, final String separator) { return convertToCsvFormat(line, separator, true); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: jwtDecodeSuccess() { // given SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder(); AppJwt appJwt = AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build(); String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);  // when AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID); Assertions.assertNotNull(decodedJwt.getExpiration()); }
decode(String encodedJwt, String secret) { Claims claims = Jwts.parserBuilder() .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes())) .build() .parseClaimsJws(encodedJwt) .getBody(); String userId = claims.getSubject(); Date expiration = claims.getExpiration(); return AppJwt.builder() .userId(userId) .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime()) .build(); }
[*] target: assertNotNull(decodedJwt)
[-] pred: org. junit. Assert. assertNotNull ( decodedJwt )
************************************
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, ownerKeys, 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  // TODO: The code currently supports MailboxStoragePayload objects inside ProtectedStorageEntry. Fix this. if (protectedStoragePayload instanceof MailboxStoragePayload) { MailboxStoragePayload mailboxStoragePayload = (MailboxStoragePayload) this.getProtectedStoragePayload(); return mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  } else { boolean result = this.ownerPubKey.equals(protectedStoragePayload.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForAddOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; } }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: ConfigurationException { final TinkerGraphApp app = new TinkerGraphApp(CONF_FILE); final GraphTraversalSource g = app.openGraph(); app.createSchema(); final TinkerGraph tinkerGraph = (TinkerGraph) g.getGraph(); final Set<String> vertexIndexes = tinkerGraph.getIndexedKeys(TinkerVertex.class); "<AssertPlaceHolder>"; assertEquals("name", vertexIndexes.toArray()[0]); final Set<String> edgeIndexes = tinkerGraph.getIndexedKeys(TinkerEdge.class); assertTrue(edgeIndexes.isEmpty()); }
createSchema() { LOGGER.info("creating schema"); final TinkerGraph tinkerGraph = (TinkerGraph) graph; // naive check if the schema was previously created if (!tinkerGraph.getIndexedKeys(Vertex.class).iterator().hasNext()) { tinkerGraph.createIndex("name", Vertex.class); } }
[*] target: assertEquals(1, vertexIndexes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, vertexIndexes. size ( ) )
************************************
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,01:23:45:67:8a:bc,-69,AccessPoint2,fe:dc:ba:98:76:54,-51,25.9");  Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1", location.getAccessPoints().get(0).getName()); assertEquals("01:23:45:67:8a:bc", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("fe:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
toLocation(Message message) throws KidTrackerParseException {  if (!LOCATION_TYPES.contains(message.getType())) { throw new KidTrackerParseException("Unable to parse location from message of type " + message.getType()); }  final Queue<String> parts = new LinkedList<>(Arrays.asList(message.getPayload().split(PAYLOAD_SEPARATOR)));  try { Location.LocationBuilder locationBuilder = Location.builder() .time(LocalDateTime.parse(parts.remove() + parts.remove(), TIME_FORMATTER)) .valid("A".equals(parts.poll())) .latitude(Double.parseDouble(parts.remove()) * ("N".equals(parts.poll()) ? 1 : -1)) .longitude(Double.parseDouble(parts.remove()) * ("E".equals(parts.poll()) ? 1 : -1)) .speed(Double.parseDouble(parts.remove())) .course(Double.parseDouble(parts.remove())) .altitude(Double.parseDouble(parts.remove())) .satellites(Integer.parseInt(parts.remove())) .rssi(Integer.parseInt(parts.remove())) .battery(Integer.parseInt(parts.remove())) .pedometer(Integer.parseInt(parts.remove())) .rolls(Integer.parseInt(parts.remove())) .state(new DeviceState(Long.parseLong(parts.remove(), 16)));  int baseStationsCount = Integer.parseInt(parts.remove());  locationBuilder .gsmDelay(Integer.parseInt(parts.remove())) .mcc(Integer.parseInt(parts.remove())) .mnc(Integer.parseInt(parts.remove())) .baseStations(IntStream.range(0, baseStationsCount) .mapToObj(i -> new BaseStation(Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()))) .collect(Collectors.toList()));  int accessPointsCount = Integer.parseInt(parts.remove()); locationBuilder.accessPoints(IntStream.range(0, accessPointsCount) .mapToObj(i -> { // this trick is required to handle cases where Access Point name contains commas List<String> name = new ArrayList<>(); do { name.add(parts.remove()); } while (!ValidationUtils.isValidMacAddress(parts.peek())); return new AccessPoint(String.join(PAYLOAD_SEPARATOR, name), parts.remove(), Integer.parseInt(parts.remove())); }) .collect(Collectors.toList()));  return new Temporal<>(message.getTimestamp(), locationBuilder .accuracy(Double.parseDouble(parts.remove())) .build());  } catch (Exception ex) { throw new KidTrackerParseException("Unable to parse location from message "" + message + "", not enough data", ex); } }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
************************************
[+] input: Exception { List<PostLite> posts = manager.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectMutablePostLite"); "<AssertPlaceHolder>"; // old gcode issue #392, new #1848 }
selectList(String statement) { return sqlSessionProxy.selectList(statement); }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
************************************
[+] input: getInstance() { final DelayLoadSingleton1 instance1 = DelayLoadSingleton1.getInstance(); final DelayLoadSingleton1 instance2 = DelayLoadSingleton1.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { if (delayLoadSingleton1 == null) { delayLoadSingleton1 = new DelayLoadSingleton1(); } return delayLoadSingleton1; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("primitives", int.class); ParameterDefinition parameter = ParameterDefinition.build(method.getParameters()[0], validatorRegistry);  assertEquals(Integer.class, parameter.getType()); "<AssertPlaceHolder>"; }
isPrimitive() { return isPrimitive; }
[*] target: assertTrue(parameter.isPrimitive())
[-] pred: org. junit. Assert. assertTrue ( parameter. isPrimitive() )
************************************
************************************
[+] input: test_6_getMonitorCalledWithDifferentNodeKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeNEW.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Ensuring monitor is the same one and not creating a new one final IMonitor monitorOneDupe = monitorService.getMonitor(nodeKeys, info, propertySet); assertEquals(monitorOne, monitorOneDupe);  // Ensuring monitors are not the same as they have different keys // "any.node.domain" compared to "nodeNEW.domain" final IMonitor monitorTwo = monitorService.getMonitor(NODE_KEYS, info, propertySet); "<AssertPlaceHolder>"; assertNotEquals(monitorOne, monitorTwo); }
getMonitor(Set<String> nodeKeys, HostInfo hostInfo, PropertySet propertySet) { return this.threadContainer.getOrCreateMonitor(nodeKeys, () -> monitorInitializer.createMonitor(hostInfo, propertySet, this)); }
[*] target: assertNotNull(monitorTwo)
[-] pred: org. junit. Assert. assertNotNull ( monitorTwo )
************************************
************************************
[+] input: testGetAuthenticationInfoWithNull() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson(null);  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; }
getAuthenticationInfo(@ContextValue(name = "applicationsEnvironmentId") String environmentId, KnownApplication application) { Optional<ApplicationMetadata> applicationMetadataOpt = applicationsService.getApplicationMetadata(environmentId, application.getId());  if (applicationMetadataOpt.isPresent()) { ApplicationMetadata applicationMetadata = applicationMetadataOpt.get(); String authenticationJson = applicationMetadata.getAuthenticationJson();  if (authenticationJson != null && !authenticationJson.isEmpty()) { return authenticationJson; } } return null; }
[*] target: assertNull(authInfo)
[-] pred: org. junit. Assert. assertNull ( authInfo )
************************************
************************************
[+] input: extractPayloadFromMultipartMessage_mapWithoutPayloadValue_returnNull() { /* ARRANGE */ final var response = new HashMap<String, String>(); response.put("header", "some header values");  /* ACT */ final var result = MessageUtils.extractPayloadFromMultipartMessage(response);  /* ACT & ASSERT */ "<AssertPlaceHolder>"; }
extractPayloadFromMultipartMessage(final Map<String, String> message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.get("payload"); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: shouldProperlyGetGroupsWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
getGroupList(GroupRequestArgs requestArgs);  /** * Get all the {@link GroupDiscussionInfo}
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
************************************
[+] input: testOccupiedCell() { Cell cell = new Cell(0, 0); cell.setCurrentPiece(TestHelpers.randomPiece()); "<AssertPlaceHolder>"; }
isFree() { return currentPiece == null; }
[*] target: assertFalse(cell.isFree())
[-] pred: org. junit. Assert. assertFalse ( cell. isFree() )
************************************
************************************
[+] input: test3() { int[] nums = {1, 1, 2, 2, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: deleteBookingAmenityNotExists() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION)); // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId()); verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
deleteBooking(String amenityId, String bookingId) { Optional<AmenityBookingItem> booking = bookingRepository.findByAmenityBookingItemId(bookingId); return booking.map(bookingItem -> { boolean amenityFound = bookingItem.getAmenity().getAmenityId().equals(amenityId); if (amenityFound) { bookingRepository.delete(bookingItem); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
************************************
[+] input: should_result_double_when_percent_symbol() {  var expected = 0.01d;  var actual = NumberUtil.fromHumanReadable("1%");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: edgeCase1_simplyHitsEnd() { ThreadDumpRegion region = new ThreadDumpRegion(""something"\n\n", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""something""); "<AssertPlaceHolder>"; }
findNextStack() { while (findNextSection()) { if (threadDump.charAt(startIndex) == '"') { return true; } }  return false; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
************************************
[+] input: roundTripWithQuotedComponent() { final String expression = "http://snomed.info/sct" + "|'397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )'" + "|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals( "397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: should_generate_hash_when_request_body_null() { //given String expectedSignature = "lecLrGZXo5u+Oq3V33vIqtbLU2fopbiH78kq6wjWNDQ=";  //when String signature = HashGenerator.generateHash("http://api.craftgate.io", "api-key", "secret-key", "rand-2010", null, "/onboarding/v1/members");  //then "<AssertPlaceHolder>"; }
generateHash(String baseUrl, String apiKey, String secretKey, String randomString, Object request, String path) { try { String hashData; String decodedUrl = URLDecoder.decode(baseUrl + path, StandardCharsets.UTF_8.toString());  if (request != null) { Gson gson = new Gson(); String requestBody = gson.toJson(request); hashData = decodedUrl + apiKey + secretKey + randomString + requestBody; } else { hashData = decodedUrl + apiKey + secretKey + randomString; }  return Base64.encodeBase64String(DigestUtils.sha256(hashData)); } catch (Exception e) { throw new CraftgateException(e); } }
[*] target: assertEquals(expectedSignature, signature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, signature )
************************************
************************************
[+] input: shouldSelectAllPostsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(); "<AssertPlaceHolder>"; } }
getMapper(Class<T> type);
[*] target: assertEquals(5, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 5, posts. size ( ) )
************************************
************************************
[+] input: Language.LanguageLoadException { Language language = getBaseLanguage(); for (Language.Term term : Language.Term.values()) { language.get(term, getFakeReplacements(term)); } "<AssertPlaceHolder>"; }
get(final Term term, final Object... replacements) { Objects.requireNonNull(term, "Term is null"); checkReplacements(term, replacements);  String translation; if (this.json.has(term.toString())) { translation = this.json.get(term.toString()).getAsString(); } else if (this == getDefaultLanguage()) { // oh no, cannot fall back to default translation if we are the default translation throw new MissingTermException(this.languageCode, term); } else { LOGGER.warn("Language '{}' is missing term '{}', using default ({}) term instead.", this.languageCode, term, getDefaultLanguage().languageCode); translation = getDefaultLanguage().get(term, replacements); }  for (int i = 0; i < replacements.length; i += 2) { final String key = (String) replacements[i]; final String value = replacements[i + 1].toString(); translation = translation.replace("{" + key + "}", value); }  return translation; }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
compile(String className, String sourceCode) throws Exception { return addSource(className, sourceCode).compileAll().get(className); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSSecurityGroup> awsSecurityGroups = getAwsSecurityGroups();  Maps<Resource> resourceMaps = exportSecurityGroups.getResourceMaps(awsSecurityGroups); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/SecurityGroup.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSSecurityGroup> awsSecurityGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();  for (AWSSecurityGroup awsSecurityGroup : awsSecurityGroups) { SecurityGroup securityGroup = awsSecurityGroup.getSecurityGroup(); resourceMapsBuilder.map( Resource.builder() .api(awsSecurityGroup.getTerraformResourceName()) .name(awsSecurityGroup.getResourceName()) .argument("name", TFString.build(securityGroup.groupName())) .argument("description", TFString.build(securityGroup.description())) .argument("vpc_id", TFString.build(securityGroup.vpcId())) .argument("tags", TFMap.build( securityGroup.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .argument("ingress", TFList.builder() .lists(getRuleList(securityGroup.ipPermissions())) .build()) .argument("egress", TFList.builder() .lists(getRuleList(securityGroup.ipPermissionsEgress())) .build() ).build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_4() { var encoded = UUIDAdapter.toStringOrNull(null);  Assertions."<AssertPlaceHolder>"; }
toStringOrNull(UUID uuid) { if (uuid == null) { return null; } try { return uuid.toString(); } catch (Exception ex) { return null; } }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
************************************
[+] input: Exception { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION, METADATA_GROUP, "provider", REVISION, PROTOCOL); nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH); String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(serviceMetaData, URL.encode(url.toFullString()));  //clear test data configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP); }
doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) { storeMetadata(serviceMetadataIdentifier, URL.encode(url.toFullString())); }
[*] target: assertNotNull(serviceMetaData)
[-] pred: org. junit. Assert. assertNotNull ( serviceMetaData )
************************************
************************************
[+] input: NacosException { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(APPLICATION_NAME, REVISION); Gson gson = new Gson(); String urlListJsonString = gson.toJson(Arrays.asList(url)); nacosMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, urlListJsonString); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);  String subscriberMetadata = configService.getConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(subscriberMetadata, urlListJsonString);  //clear test data configService.removeConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);  }
doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) { storeMetadata(subscriberMetadataIdentifier, urlListStr); }
[*] target: assertNotNull(subscriberMetadata)
[-] pred: org. junit. Assert. assertNotNull ( subscriberMetadata )
************************************
************************************
[+] input: toArgs_inputSetAuth_ArgsSetAuthField() { /* ARRANGE */ final var params = Map.of("A", "AV", "B", "BV"); final var headers = Map.of("C", "CV", "D", "DV"); final var authType = new BasicAuth("X", "Y"); final var auth = new ArrayList<Authentication>();  auth.add(authType);  final var input = new QueryInput(); input.setParams(params); input.setHeaders(headers);  final var expected = new HttpService.HttpArgs(); expected.setParams(params); expected.setHeaders(headers); authType.setAuth(expected);  /* ACT */ final var result = service.toArgs(input, auth);  /* ASSERT */ "<AssertPlaceHolder>"; }
toArgs(final QueryInput input, final List<? extends HttpAuthentication> auth) { final var args = toArgs(input); if (auth != null) { for (final var x : auth) { x.setAuth(args); } } return args; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testCloseQuietly() { IOUtils.closeQuietly(() -> { throw new IOException(); });  final AtomicBoolean closed = new AtomicBoolean(false); IOUtils.closeQuietly(() -> closed.set(true)); "<AssertPlaceHolder>"; }
closeQuietly(Closeable closeable) { if (closeable != null) { try { closeable.close(); } catch (IOException ignored) { } } }
[*] target: assertTrue(closed.get())
[-] pred: org. junit. Assert. assertTrue ( closed. get ( ) )
************************************
************************************
[+] input: test3() { Solution solution = new Solution(); Solution2 solution2 = new Solution2(); TreeNode first = LeetcodeUtils.initializeTree(new Integer[]{}); TreeNode second = LeetcodeUtils.initializeTree(new Integer[]{5, 1, 7, 0, 2}); List<Integer> expected = Arrays.asList(0, 1, 2, 5, 7); assertEquals(expected, solution.getAllElements(first, second)); "<AssertPlaceHolder>"; }
getAllElements(TreeNode root1, TreeNode root2) { Stack<StackNode> first = new Stack<>(); if (root1 != null) { first.push(new StackNode(root1)); while (first.peek().root.left != null) { first.push(new StackNode(first.peek().root.left)); } } Stack<StackNode> second = new Stack<>(); if (root2 != null) { second.push(new StackNode(root2)); while (second.peek().root.left != null) { second.push(new StackNode(second.peek().root.left)); } } LinkedList<Integer> ans = new LinkedList<>(); while (!first.isEmpty() || !second.isEmpty()) { if (!first.isEmpty() && !second.isEmpty()) { StackNode firstPeek = first.peek(); StackNode secondPeek = second.peek(); Stack<StackNode> toProcess = firstPeek.root.val < secondPeek.root.val ? first : second; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } else { Stack<StackNode> toProcess = first.isEmpty() ? second : first; ans.add(toProcess.peek().root.val); prepareForNext(toProcess); } } return ans; }
[*] target: assertEquals(expected, solution2.getAllElements(first, second))
[-] pred: org. junit. Assert. assertEquals ( expected, solution2. getAllElements ( first, second ) )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(interfaceName, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(interfaceName, version, group, "provider", revision, protocol); zookeeperMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier));  Assertions.assertNotNull(fileContent);   zookeeperMetadataReport.doRemoveMetadata(serviceMetadataIdentifier);  fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier)); Assertions."<AssertPlaceHolder>"; }
getNodePath(BaseMetadataIdentifier metadataIdentifier) { return toRootDir() + metadataIdentifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNull(fileContent)
[-] pred: org. junit. Assert. assertNull ( fileContent )
************************************
************************************
[+] input: clientRegistrationRepository_nullRegistration_returnsNull() { var properties = new OAuth2ClientRegistrationProperties(); var repository = configuration.reactiveClientRegistrationRepository(properties); "<AssertPlaceHolder>"; }
reactiveClientRegistrationRepository( OAuth2ClientRegistrationProperties properties) { return properties .getClientRegistration() .map(Arrays::asList) .map(InMemoryReactiveClientRegistrationRepository::new) .orElse(null); }
[*] target: assertNull(repository)
[-] pred: org. junit. Assert. assertNull ( repository )
************************************
************************************
[+] input: mapEntitiesToDto_shouldMapDescriptionsArray() { int expected = 3; List<OkrTopicDescription> topicDescription = new ArrayList<>() { { add(new OkrTopicDescription()); add(new OkrTopicDescription()); add(new OkrTopicDescription()); } };  Collection<OkrTopicDescriptionDto> actual = topicDescriptionMapper.mapEntitiesToDtos(topicDescription);  "<AssertPlaceHolder>"; }
mapEntitiesToDtos( Collection<OkrTopicDescription> input ) { Collection<OkrTopicDescriptionDto> dtos = new ArrayList<>(); input.forEach(description -> dtos.add(mapEntityToDto(description))); return dtos; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
************************************
[+] input: shouldReturnNullIfUserNotFoundByUsername() { final String username = "user"; when(legacyUserService.findByUsername(username)) .thenReturn(Optional.empty());  var result = legacyProvider.getUserByUsername(realmModel, username);  "<AssertPlaceHolder>"; }
getUserByUsername(RealmModel realmModel, String username) { return getUserModel(realmModel, username, () -> legacyUserService.findByUsername(username)); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testCloseQuietly() { ESAIOUtils.closeQuietly(() -> { throw new IOException(); });  final AtomicBoolean closed = new AtomicBoolean(false); ESAIOUtils.closeQuietly(() -> closed.set(true)); "<AssertPlaceHolder>"; }
closeQuietly(Closeable closeable) { IOUtils.closeQuietly(closeable); }
[*] target: assertTrue(closed.get())
[-] pred: org. junit. Assert. assertTrue ( closed. get ( ) )
************************************
************************************
[+] input: testRoute_Empty_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl(" => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: loginSuccess() { // given LoginRequest request = getDefaultLoginRequest(); UserDto userDto = getDefaultUserDtoRequest(); AppJwt appJwt = getDefaultJwtToken(userDto); String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET); given(userSDJpaService.findUserByEmail(request.getEmail())) .willReturn(Optional.of(userDto)); given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword())) .willReturn(true); given(appJwtEncoderDecoder.encode(appJwt, SECRET)) .willReturn(encodedJwt);  // when AuthenticationData authenticationData = authenticationSDJpaService.login(request);  // then "<AssertPlaceHolder>"; assertEquals(authenticationData.getUserId(), userDto.getUserId()); assertEquals(authenticationData.getJwtToken(), encodedJwt); verify(userSDJpaService).findUserByEmail(request.getEmail()); verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword()); verify(appJwtEncoderDecoder).encode(appJwt, SECRET); }
login(LoginRequest loginRequest) { log.trace("Received login request"); final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail()) .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail())); if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) { throw new CredentialsIncorrectException(userDto.getUserId()); } final AppJwt jwtToken = createJwt(userDto); final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret); return new AuthenticationData(encodedToken, userDto.getUserId()); }
[*] target: assertNotNull(authenticationData)
[-] pred: org. junit. Assert. assertNotNull ( authenticationData )
************************************
************************************
[+] input: testEnforced05() { // given Long contentLength = Long.valueOf(0); String siteId = UUID.randomUUID().toString(); ConfigService configService = awsservice.getExtension(ConfigService.class);  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
enforced(final AwsServiceCache awsservice, final String siteId, final String value, final Object... objs) {  boolean enforced = false; Long contentLength = (Long) objs[0]; Long maxContentLength = getMaxContentLength(value);  if (maxContentLength != null) { enforced = (contentLength == null || contentLength.longValue() == 0) || (contentLength.longValue() > maxContentLength.longValue()); }  return enforced; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldFindPostsInList() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectPostIn", new ArrayList<Integer>() {{ add(1); add(3); add(5); }}); "<AssertPlaceHolder>"; } }
selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(3, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 3, posts. size ( ) )
************************************
************************************
[+] input: should_override_the_bootstrap_servers() {  var expected = "configure-me:9092"; String[] args = { "--config-file=./src/test/resources/.kattlo.yaml", "--kafka-config-file=./src/test/resources/kafka.properties", "--bootstrap-servers=" + expected, "topic", "--directory=." };  var command = new CommandLine(entry);  command.execute(args);  //assert EntryCommand actualCommand = command.getCommand(); var actualProperties = actualCommand.getKafkaConfiguration(); var actual = actualProperties.getProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG);  "<AssertPlaceHolder>"; }
getKafkaConfiguration() { if(null== kafkaConfigurationValues){ kafkaConfigurationValues = new Properties();  try{ kafkaConfigurationValues .load(new FileReader(kafkaConfiguration));  if(Objects.nonNull(getBootstrapServers())){ var oldBootstrapServers = kafkaConfigurationValues .put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, getBootstrapServers());  log.debug("bootstrap.servers overwritten by {}", getBootstrapServers()); log.debug("Old bootstrap.servers {}", oldBootstrapServers); } }catch(IOException e){ throw new CommandLine .ParameterException(spec.commandLine(), kafkaConfiguration.getAbsolutePath() + " can't be read"); } } return kafkaConfigurationValues; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { Properties file = Resources.getResourceAsProperties(CLASS_LOADER, JPETSTORE_PROPERTIES); "<AssertPlaceHolder>"; }
getResourceAsProperties(ClassLoader loader, String resource) throws IOException { Properties props = new Properties(); try (InputStream in = getResourceAsStream(loader, resource)) { props.load(in); } return props; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
************************************
[+] input: getByTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllByTarget(Mockito.any());  /* ACT */ final var result = service.getByTarget(URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldContainCorrectHeadersWhenRemoteSystemIsInvoked() {  this.mockRestServiceServer .expect(requestTo("/api/books?jscmd=data&format=json&bibkeys=" + ISBN)) .andExpect(MockRestRequestMatchers.header("X-Custom-Auth", "Duke42")) .andExpect(MockRestRequestMatchers.header("X-Customer-Id", "42")) .andRespond( withSuccess( new ClassPathResource("/stubs/openlibrary/success-" + ISBN + ".json"), MediaType.APPLICATION_JSON));  Book result = cut.fetchMetadataForBook(ISBN);  "<AssertPlaceHolder>"; }
fetchMetadataForBook(String isbn) {  HttpHeaders headers = new HttpHeaders(); headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)); headers.set("X-Custom-Auth", "Duke42"); headers.set("X-Customer-Id", "42");  HttpEntity<Void> entity = new HttpEntity<>(headers);  ObjectNode result = restTemplate .exchange( "/api/books?jscmd=data&format=json&bibkeys={isbn}", HttpMethod.GET, entity, ObjectNode.class, isbn) .getBody();  JsonNode content = result.get(isbn);  return convertToBook(isbn, content); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: mapDateStringToDate_shouldNotMapWhenStringIsNull() { String expected = null;  LocalDate actual = dateMapper.mapDateStringToDate(expected);  "<AssertPlaceHolder>"; }
mapDateStringToDate(String dateString) { if(dateString == null || dateString.equals("")) { return null; } var splitString = dateString.split("-"); try { return LocalDate.of(Integer.parseInt(splitString[0]), Integer.parseInt(splitString[1]), Integer.parseInt(splitString[2])); } catch (NumberFormatException e) { return null; } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: testGenCronTrigger() { // normal ScheduleInfo scheduleInfo = genDefaultScheduleInfo(); JobDetail jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  Trigger trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); assertNotNull(trigger);  TriggerKey triggerKey = trigger.getKey(); assertNotNull(triggerKey); String identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  ScheduleBuilder<? extends Trigger> scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(SimpleScheduleBuilder.class, scheduleBuilder);  Date startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  Date endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  // cron scheduleInfo = genDefaultCronScheduleInfo(); jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); "<AssertPlaceHolder>";  triggerKey = trigger.getKey(); assertNotNull(triggerKey); identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(CronScheduleBuilder.class, scheduleBuilder);  startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  }
genQuartzTrigger(JobDetail jobDetail, ScheduleInfo scheduleInfo) { String key = jobDetail.getKey().getName(); Timestamp startTime = scheduleInfo.getStartTime(); Timestamp endTime = scheduleInfo.getEndTime(); int scheduleType = scheduleInfo.getScheduleType(); ScheduleType type = ScheduleType.fromCode(scheduleType); if (type == null) { throw new QuartzScheduleException("Invalid schedule type: " + scheduleType); } LOGGER.info("Creating quartz trigger for key : {}, startTime : {}, endTime : {}, scheduleTYpe : {}, " + "scheduleUnit : {}, scheduleInterval : {}, crontabExpression : {}", key, startTime, endTime, type.name(), scheduleInfo.getScheduleUnit(), scheduleInfo.getScheduleInterval(), scheduleInfo.getCrontabExpression()); switch (type) { case NORMAL: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genSimpleQuartzScheduleBuilder(scheduleInfo.getScheduleInterval(), scheduleInfo.getScheduleUnit())) .forJob(jobDetail).build(); case CRONTAB: return TriggerBuilder.newTrigger() .withIdentity(key) .startAt(new Date(startTime.getTime())) .endAt(new Date(endTime.getTime())) .withSchedule(genCronQuartzScheduleBuilder(scheduleInfo.getCrontabExpression())) .forJob(jobDetail).build(); default: throw new QuartzScheduleException("Unknown schedule type: " + scheduleType); } }
[*] target: assertNotNull(trigger)
[-] pred: org. junit. Assert. assertNotNull ( trigger )
************************************
************************************
[+] input: testMap() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); var jvmUser = 21.77; var jvmSystem = 22.98; var machineTotal = 1203987.22; var gauge1 = new Gauge(JFR_CPU_LOAD_JVM_USER, jvmUser, now, attr); var gauge2 = new Gauge(JFR_CPU_LOAD_JVM_SYSTEM, jvmSystem, now, attr); var gauge3 = new Gauge(JFR_CPU_LOAD_MACHINE_TOTAL, machineTotal, now, attr); List<Metric> expected = List.of(gauge1, gauge2, gauge3);  var testClass = new OverallCPULoadMapper(); var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDouble(JVM_USER)).thenReturn(jvmUser); when(event.getDouble(JVM_SYSTEM)).thenReturn(jvmSystem); when(event.getDouble(MACHINE_TOTAL)).thenReturn(machineTotal);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { long timestamp = ev.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); double jvmUserGaugeValue = 0; if (hasField(ev, JVM_USER, SIMPLE_CLASS_NAME)) { jvmUserGaugeValue = ev.getDouble(JVM_USER); } double jvmSystemGaugeValue = 0; if (hasField(ev, JVM_SYSTEM, SIMPLE_CLASS_NAME)) { jvmSystemGaugeValue = ev.getDouble(JVM_SYSTEM); } double machineTotalGaugeValue = 0; if (hasField(ev, MACHINE_TOTAL, SIMPLE_CLASS_NAME)) { machineTotalGaugeValue = ev.getDouble(MACHINE_TOTAL); } return Arrays.asList( new Gauge(JFR_CPU_LOAD_JVM_USER, jvmUserGaugeValue, timestamp, attr), new Gauge(JFR_CPU_LOAD_JVM_SYSTEM, jvmSystemGaugeValue, timestamp, attr), new Gauge(JFR_CPU_LOAD_MACHINE_TOTAL, machineTotalGaugeValue, timestamp, attr)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: toModel_noResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContract();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
toModel(final Contract contract) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(contract, ContractView.class); view.add(getSelfLink(contract.getId()));  final var rulesLink = linkTo(methodOn(ContractsToRulesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.RULES); view.add(rulesLink);  final var resourceType = contract.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(ContractsToOfferedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(ContractsToRequestedResourcesController.class) .getResource(contract.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: equals_false_when_null() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(null);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: shouldBeCorrectCallInvocationsForFunctions() { var visitor = ReportTypeVisitor.<Void, ReportType>createFunctionalVisitor( VOID -> ReportType.OBSERVER_EVENT, VOID -> ReportType.CALL_EVENT, VOID -> ReportType.CALL_META_DATA, VOID -> ReportType.CLIENT_EXTENSION_DATA, VOID -> ReportType.PEER_CONNECTION_TRANSPORT, VOID -> ReportType.ICE_CANDIDATE_PAIR, VOID -> ReportType.PEER_CONNECTION_DATA_CHANNEL, VOID -> ReportType.INBOUND_AUDIO_TRACK, VOID -> ReportType.INBOUND_VIDEO_TRACK, VOID -> ReportType.OUTBOUND_AUDIO_TRACK, VOID -> ReportType.OUTBOUND_VIDEO_TRACK, VOID -> ReportType.SFU_EVENT, VOID -> ReportType.SFU_META_DATA, VOID -> ReportType.SFU_EXTENSION_DATA, VOID -> ReportType.SFU_TRANSPORT, VOID -> ReportType.SFU_INBOUND_RTP_PAD, VOID -> ReportType.SFU_OUTBOUND_RTP_PAD, VOID -> ReportType.SFU_SCTP_STREAM ); for (var expected : ReportType.values()) { var actual = visitor.apply(null, expected); Assertions."<AssertPlaceHolder>"; } }
apply(TIn obj, ReportType reportType) { switch (reportType) { case OBSERVER_EVENT: return this.visitObserverEventReport(obj); case CALL_EVENT: return this.visitCallEventReport(obj); case CALL_META_DATA: return this.visitCallMetaDataReport(obj); case CLIENT_EXTENSION_DATA: return this.visitClientExtensionDataReport(obj); case PEER_CONNECTION_TRANSPORT: return this.visitPeerConnectionTransportReport(obj); case ICE_CANDIDATE_PAIR: return this.visitIceCandidatePairReport(obj); case PEER_CONNECTION_DATA_CHANNEL: return this.visitClientDataChannelReport(obj); case INBOUND_AUDIO_TRACK: return this.visitInboundAudioTrackReport(obj); case INBOUND_VIDEO_TRACK: return this.visitInboundVideoTrackReport(obj); case OUTBOUND_AUDIO_TRACK: return this.visitOutboundAudioTrackReport(obj); case OUTBOUND_VIDEO_TRACK: return this.visitOutboundVideoTrackReport(obj);  case SFU_EVENT: return this.visitSfuEventReport(obj); case SFU_META_DATA: return this.visitSfuMetaReport(obj); case SFU_EXTENSION_DATA: return this.visitSfuExtensionReport(obj); case SFU_TRANSPORT: return this.visitSfuTransportReport(obj); case SFU_INBOUND_RTP_PAD: return this.visitSfuInboundRtpPadReport(obj); case SFU_OUTBOUND_RTP_PAD: return this.visitSfuOutboundRtpPadReport(obj); case SFU_SCTP_STREAM: return this.visitSctpStreamReport(obj); default: logger.warn("Unrecognized report type {}", reportType); } return null; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: upgradeJob_shouldUpdateTheOperatorVersionOfTheTargetCluster() { final String expectedOperatorVersion = JobsProperty.OPERATOR_VERSION.getString(); cluster.getMetadata().getAnnotations().put( StackGresContext.VERSION_KEY, PREVIOUS_OPERATOR_VERSION); cluster = kubeDb.addOrReplaceCluster(cluster); kubeDb.watchCluster(clusterName, clusterNamespace, cluster -> { statefulSet.getMetadata().setAnnotations(Map.of( StackGresContext.VERSION_KEY, cluster.getMetadata().getAnnotations().get(StackGresContext.VERSION_KEY))); }); securityUpgradeJob.runJob(dbOps, cluster).await().indefinitely(); var storedClusterVersion = kubeDb.getCluster(clusterName, clusterNamespace) .getMetadata().getAnnotations() .get(StackGresContext.VERSION_KEY); "<AssertPlaceHolder>"; }
runJob(StackGresDbOps dbOps, StackGresCluster cluster) { LOGGER.info("Starting security upgrade for SGDbOps {}", dbOps.getMetadata().getName());  return upgradeCluster(cluster) .call(() -> waitStatefulSetUpgrade(cluster)) .chain(() -> restartStateHandler.restartCluster(dbOps)) .onFailure().call(ex -> reportFailure(dbOps, ex)); }
[*] target: assertEquals(expectedOperatorVersion, storedClusterVersion)
[-] pred: org. junit. Assert. assertEquals ( expectedOperatorVersion, storedClusterVersion )
************************************
************************************
[+] input: touchEnabled() { String userAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; ARM; Trident/6.0; Touch; ARMBJS)"; Detection d = DD.detect(userAgent);  "<AssertPlaceHolder>"; }
isTouchEnabled() { return touchEnabledPattern.matcher(userAgent).find(); }
[*] target: assertTrue(d.isTouchEnabled())
[-] pred: org. junit. Assert. assertTrue ( d. isTouchEnabled ( ) )
************************************
************************************
[+] input: writeReducedTextVectorFile() { String fileToWritePath = "./reduced_vocab.txt"; String vectorTxtFilePath = getPathOfResource("txtVectorFile.txt"); String entityFilePath = getPathOfResource("txtVectorFileEntities.txt");  // try error cases first VectorFileReducer.writeReducedTextVectorFile(null, null, null); VectorFileReducer.writeReducedTextVectorFile(null, fileToWritePath, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, null, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, null);  File fileToWrite = new File(fileToWritePath); assertFalse(fileToWrite.exists());  // now try the real thing: VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, entityFilePath); "<AssertPlaceHolder>"; assertTrue(getNumberOfLines(fileToWrite) <= 3);  deleteFile(fileToWrite); }
writeReducedTextVectorFile(String textVectorPath, String fileToWritePath, String entityPath) { writeReducedTextVectorFile(textVectorPath, fileToWritePath, entityPath, false); }
[*] target: assertTrue(fileToWrite.exists())
[-] pred: org. junit. Assert. assertTrue ( fileToWrite. exists ( ) )
************************************
************************************
[+] input: getResourceMaps() { List<AWSEksCluster> awsEksClusters = getAwsEksClusters();  Maps<Resource> resourceMaps = exportEksClusters.getResourceMaps(awsEksClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/EksCluster.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSEksCluster> awsEksClusters) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSEksCluster awsEksCluster : awsEksClusters) { Cluster cluster = awsEksCluster.getCluster(); Map<String, String> tags = awsEksCluster.getTags(); resourceMapsBuilder .map(Resource.builder() .api(awsEksCluster.getTerraformResourceName()) .name(cluster.name()) .argument("name", TFString.build(cluster.name())) .argument("role_arn", TFString.build(cluster.roleArn())) .argument("vpc_config", TFBlock.builder() .argument("endpoint_private_access", TFBool.build(cluster.resourcesVpcConfig().endpointPrivateAccess())) .argument("endpoint_public_access", TFBool.build(cluster.resourcesVpcConfig().endpointPublicAccess())) .argument("public_access_cidrs", TFList.build( cluster.resourcesVpcConfig().publicAccessCidrs().stream() .map(cidr -> TFString.builder().isLineIndent(false).value(cidr).build()) .collect(Collectors.toList()))) .argument("security_group_ids", TFList.build(cluster.resourcesVpcConfig().securityGroupIds().stream() .map(securityGroupId -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_security_group.{0}.id", securityGroupId)) .build()) .collect(Collectors.toList()))) .argument("subnet_ids", TFList.build(cluster.resourcesVpcConfig().subnetIds().stream() .map(subnetId -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_subnet.{0}.id", subnetId)) .build()) .collect(Collectors.toList()))) .build()) .argument("kubernetes_network_config", TFBlock.builder() .argument("service_ipv4_cidr", TFString.build(cluster.kubernetesNetworkConfig().serviceIpv4Cidr())) .build()) .argument("version", TFString.build(cluster.version())) .argument("enabled_cluster_log_types", TFList.build(cluster.logging().clusterLogging().stream() .findFirst().get().types().stream() .map(type -> TFString.builder().isLineIndent(false).value(type.toString()) .build()) .collect(Collectors.toList()))) .argumentIf(Optional.ofNullable(cluster.encryptionConfig()).isPresent(), "encryption_config", () -> { List<EncryptionConfig> encryptionConfigs = cluster.encryptionConfig(); return TFBlock.builder() .argument("provider", TFBlock.builder() .argument("key_arn", TFString.build(encryptionConfigs.stream() .findFirst() .map(encryptionConfig -> encryptionConfig.provider().keyArn()) .orElse(null))) .build()) .argument("resources", TFList.build(encryptionConfigs.stream() .flatMap(encryptionConfig -> encryptionConfig.resources().stream()) .map(resource -> TFString.builder().isLineIndent(false).value(resource) .build()) .collect(Collectors.toList()))) .build(); }) .argument("tags", TFMap.build( tags.entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, tag -> TFString.build(tag.getValue()))) )) .build()); awsEksCluster.getAddons().forEach(addon -> resourceMapsBuilder .map(Resource.builder() .api("aws_eks_addon") .name(MessageFormat.format("{0}-{1}", addon.clusterName(), addon.addonName())) .argument("cluster_name", TFString.build(addon.clusterName())) .argument("addon_name", TFString.build(addon.addonName())) .argument("addon_version", TFString.build(addon.addonVersion())) .build()) .build() ); awsEksCluster.getAwsEksNodeGroups().forEach(awsEksNodegroup -> { Nodegroup nodegroup = awsEksNodegroup.getNodegroup(); Map<String, String> nodegroupTags = awsEksNodegroup.getTags(); log.debug("nodegroup.diskSize => {}", nodegroup.diskSize()); resourceMapsBuilder .map(Resource.builder() .api(awsEksNodegroup.getTerraformResourceName()) .name(nodegroup.nodegroupName())  .argument("cluster_name", TFString.build(nodegroup.clusterName())) .argument("node_group_name", TFString.build(nodegroup.nodegroupName())) .argument("node_role_arn", TFString.build(nodegroup.nodeRole())) .argument("subnet_ids", TFList.build(nodegroup.subnets().stream() .map(subnetId -> TFExpression.builder().isLineIndent(false).expression( MessageFormat.format("aws_subnet.{0}.id", subnetId)) .build()) .collect(Collectors.toList()))) .argument("ami_type", TFString.build(nodegroup.amiTypeAsString())) .argument("capacity_type", TFString.build(nodegroup.capacityTypeAsString())) .argument("disk_size", TFNumber.build(Optional.ofNullable(nodegroup.diskSize()) .map(Object::toString).orElse(null))) .argument("instance_types", TFList.build(nodegroup.instanceTypes().stream() .map(instanceType -> TFString.builder().isLineIndent(false).value(instanceType) .build()) .collect(Collectors.toList()))) .argument("labels", TFMap.build( nodegroup.labels().entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, tag -> TFString.build(tag.getValue()))) )) .argument("release_version", TFString.build(nodegroup.releaseVersion())) .argumentIf(Optional.ofNullable(nodegroup.launchTemplate()).isPresent(), "launch_template", () -> TFMap.builder() .map("name", TFString.build(nodegroup.launchTemplate().name())) .map("version", TFString.build(nodegroup.launchTemplate().version())) .build())  .argumentIf(Optional.ofNullable(nodegroup.remoteAccess()).isPresent(), "remote_access", () -> TFMap.builder() .map("ec2_ssh_key", TFString.build(nodegroup.remoteAccess().ec2SshKey())) .map("source_security_group_ids", TFList.build( nodegroup.remoteAccess().sourceSecurityGroups().stream() .map(sourceSecurityGroup -> TFString.builder().isLineIndent(false) .value(sourceSecurityGroup) .build()) .collect(Collectors.toList())) ) .build() ) .argumentsIf(Optional.ofNullable(nodegroup.taints()).isPresent(), "taint", () -> nodegroup.taints().stream() .map(taint -> TFMap.builder() .map("key", TFString.build(taint.key())) .map("value", TFString.build(taint.value())) .map("effect", TFString.build(taint.effectAsString())) .build()) .collect(Collectors.toList())) .argumentIf(Optional.ofNullable(nodegroup.scalingConfig()).isPresent(), "scaling_config", () -> TFBlock.builder() .argument("desired_size", TFNumber.build(nodegroup.scalingConfig().desiredSize())) .argument("max_size", TFNumber.build(nodegroup.scalingConfig().maxSize())) .argument("min_size", TFNumber.build(nodegroup.scalingConfig().minSize())) .build()) .argument("tags", TFMap.build( nodegroupTags.entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, tag -> TFString.build(tag.getValue()))) )) .build() ); } );   } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetTweetByIdWithExpansions() { String  tweetId = "1361010662714007557"; TweetV2 tweet   = (TweetV2) twitterClient.getTweet(tweetId); "<AssertPlaceHolder>"; assertEquals(3, tweet.getIncludes().getUsers().size()); Assertions.assertEquals("RedouaneBali", tweet.getIncludes().getUsers().get(0).getName()); Assertions.assertEquals("TwitterDev", tweet.getIncludes().getUsers().get(1).getName()); Assertions.assertEquals("jessicagarson", tweet.getIncludes().getUsers().get(2).getName()); assertEquals(1, tweet.getIncludes().getTweets().size()); assertEquals("2244994945", tweet.getIncludes().getTweets().get(0).getAuthorId()); assertEquals("1341761599976181763", tweet.getIncludes().getTweets().get(0).getId()); assertNotNull(tweet.getIncludes().getTweets().get(0).getEntities()); }
getTweet(String tweetId);
[*] target: assertNotNull(tweet)
[-] pred: org. junit. Assert. assertNotNull ( tweet )
************************************
************************************
[+] input: should_generate_hash() { //given String expectedSignature = "Tj0mkbp+WLBwLhS65CjX708PGCl9hD9rlT6n6Zgcyi8="; CreateMemberRequest request = CreateMemberRequest.builder() .memberExternalId("ext-1511") .email("haluk.demir@example.com") .phoneNumber("905551111111") .name("Haluk Demir") .build();  //when String signature = HashGenerator.generateHash("http://api.craftgate.io", "api-key", "secret-key", "rand-2010", request, "/onboarding/v1/members");  //then "<AssertPlaceHolder>"; }
generateHash(String baseUrl, String apiKey, String secretKey, String randomString, Object request, String path) { try { String hashData; String decodedUrl = URLDecoder.decode(baseUrl + path, StandardCharsets.UTF_8.toString());  if (request != null) { Gson gson = new Gson(); String requestBody = gson.toJson(request); hashData = decodedUrl + apiKey + secretKey + randomString + requestBody; } else { hashData = decodedUrl + apiKey + secretKey + randomString; }  return Base64.encodeBase64String(DigestUtils.sha256(hashData)); } catch (Exception e) { throw new CraftgateException(e); } }
[*] target: assertEquals(expectedSignature, signature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, signature )
************************************
************************************
[+] input: shouldGetValueWhenObjectIsNotNull() { Velocity velocity = Velocity.builder().velocityForCards(10).velocityForSP(10).build(); ReportResponse response = ReportResponse.builder().velocity(velocity).build();  Velocity result = ValueUtil.getValueOrNull(response, ReportResponse::getVelocity);  Assertions."<AssertPlaceHolder>"; }
getValueOrNull(T object, Function<T, R> getter) { return object != null ? getter.apply(object) : null; }
[*] target: assertEquals(velocity, result)
[-] pred: org. junit. Assert. assertEquals ( velocity, result )
************************************
************************************
[+] input: removeAllShouldResetExpanded() { // prepare final GameModule gameModule = mock(GameModule.class); final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Deck d = new Deck(gameModule); d.add(gamePiece1); d.add(gamePiece2); d.setExpanded(true); d.removeAll();  // assert "<AssertPlaceHolder>"; }
isExpanded() { return false; }
[*] target: assertFalse(d.isExpanded())
[-] pred: org. junit. Assert. assertFalse ( d. isExpanded() )
************************************
************************************
[+] input: setPropertyShouldDoNothingGetPropertyShouldReturnNull() { // prepare final GameModule gameModule = mock(GameModule.class); final Object key = new Object(); final Object value = new Object();  // run Deck d = new Deck(gameModule); d.setProperty(key, value);  // assert "<AssertPlaceHolder>"; }
getProperty(Object key) { Object value = null; if (Properties.NO_STACK.equals(key)) { value = Boolean.TRUE; } else if (Properties.KEY_COMMANDS.equals(key)) { value = getKeyCommands(); } return value; }
[*] target: assertNull(d.getProperty(key))
[-] pred: org. junit. Assert. assertNull ( d. getProperty ( key ) )
************************************
************************************
[+] input: test_tupleOperations_shouldSerializeCorrectly_ifFieldIsDefinedByName() { final String FIELD_DATA = "data"; List<String> object = Arrays.asList("test1", "test2");  final String FIELD_TS = "ts"; long epochSecond = 12345L;  final String FIELD_SPLICE = "test";  TupleOperations tupleOperations = TupleOperations .set(FIELD_DATA, object) .andSet(FIELD_TS, epochSecond) .andSplice(FIELD_SPLICE, 1, 2, "rep");  Value value = mapperFactory.defaultComplexTypesMapper().toValue(tupleOperations.asProxyOperationList());  Value cond1 = ValueFactory.newArray( ValueFactory.newString("="), ValueFactory.newString(FIELD_DATA), ValueFactory.newArray(ValueFactory.newString(object.get(0)), ValueFactory.newString(object.get(1))));  Value cond2 = ValueFactory.newArray( ValueFactory.newString("="), ValueFactory.newString(FIELD_TS), ValueFactory.newInteger(epochSecond));  Value cond3 = ValueFactory.newArray( ValueFactory.newString(":"), ValueFactory.newString(FIELD_SPLICE), ValueFactory.newInteger(1), ValueFactory.newInteger(2), ValueFactory.newString("rep"));  Value expected = ValueFactory.newArray(cond1, cond2, cond3);  "<AssertPlaceHolder>"; }
asProxyOperationList() { return proxyOperations; }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
************************************
[+] input: IOException { // Given // Prepare test data String csvData = """ id;country;createDate;manufacturer;model;type 2;Japan;1964-04-10;Suzuki;Swift;Small 3;Japan;1960-11-04;Toyota;Camry;Midsize """         ; MockMultipartFile multipartFile = new MockMultipartFile( "file.csv", "file.csv", "text/csv", csvData.getBytes() );  List<Car> expectedCars = new ArrayList<>(); expectedCars.add(new Car(2,"Swift","Suzuki","Japan","Small",LocalDate.of(1964,04,10))); expectedCars.add(new Car(3,"Swift","Camry","Japan","Midsize",LocalDate.of(1960,11,4)));  // When // Set up mock behavior when(carRepository.saveAll(anyList())).thenReturn(expectedCars);  // Then // Call the method List<Car> actualCars = carService.uploadFile(multipartFile);  // Verify the interactions and assertions verify(carRepository, times(1)).saveAll(anyList()); "<AssertPlaceHolder>"; }
uploadFile(MultipartFile multipartFile) throws IOException { List<Car> carList = parseCsvFile(multipartFile); return (List<Car>) carRepository.saveAll(carList); }
[*] target: assertEquals(expectedCars, actualCars)
[-] pred: org. junit. Assert. assertEquals ( expectedCars, actualCars )
************************************
************************************
[+] input: JsonProcessingException { InheritedResponse wrapped = InheritedResponse.inheritedBuilder() .name("testing") .detail("testing-detail") .build();  GenericResponse<InheritedResponse> expectedResponse = GenericResponse.<InheritedResponse>builder() .value(wrapped) .build();  wireMockServer.stubFor( post(urlPathEqualTo("/generic-inherited")) .withHeader(HttpHeaders.CONTENT_TYPE, containing(MediaType.APPLICATION_JSON_VALUE)) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .withRequestBody(equalTo("testing")) .willReturn( aResponse() .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(expectedResponse)) ) );  GenericResponse<InheritedResponse> response = exampleClient.genericInherited("testing").block(); "<AssertPlaceHolder>"; }
genericInherited(@RequestBody String test);
[*] target: assertEquals(expectedResponse, response)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, response )
************************************
************************************
[+] input: should_canConvertValue_returnFalse_ifCheckDoubleMaxValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(Double.MAX_VALUE));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: JsonProcessingException { // Create a user and write to Kafka User user = new User("11111", "John", "Wick"); producer.writeToKafka(user);  // Read the message (John Wick user) with a test consumer from Kafka and assert its properties ConsumerRecord<String, String> message = records.poll(500, TimeUnit.MILLISECONDS); "<AssertPlaceHolder>"; assertEquals("11111", message.key()); User result = objectMapper.readValue(message.value(), User.class); assertNotNull(result); assertEquals("John", result.getFirstName()); assertEquals("Wick", result.getLastName()); }
writeToKafka(User user) { kafkaTemplate.send(topic, user.getUuid(), user); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) >= Double.parseDouble(expectedValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: confirmAgreement_confirmationUnsuccessful_returnFalse() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)).thenReturn(false);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
confirmAgreement(final Agreement agreement) { try { return agreementService.confirmAgreement(agreement); } catch (ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Failed to confirm agreement. [id=({})]", agreement.getId()); }  return false; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: GestaltException { // Arrange Map<String, String> customConfig = new HashMap<>(); customConfig.put("db.port", "1234"); customConfig.put("db.password", "password"); customConfig.put("db.user", "notroot");  MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder(); builder.setCustomConfig(customConfig);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertTrue(configSource.hasList()); assertEquals(3, configSource.loadList().size()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: testEmpty() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty(); assertEquals("", p.toString()); "<AssertPlaceHolder>"; }
isEmpty() { return predicate == null; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
************************************
[+] input: readResolve() { InnerClassSingleton instance = InnerClassSingleton.getInstance();  try (FileOutputStream fileOutputStream = new FileOutputStream(InnerClassSingleton.class.getResource("").getPath() + "InnerClassSingleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(InnerClassSingleton.class.getResourceAsStream("InnerClassSingleton.txt")); final InnerClassSingleton o = (InnerClassSingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
getInstance() { return InnerClassSingletonBuild.innerClassSingleton; }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
************************************
[+] input: Exception { final Method method = StringB.class.getMethod("hashCode");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
isUserDefinedMethod(final Method method) { return method.getDeclaringClass() != Object.class; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: test_5_getMonitorCalledWithMultipleNodesInKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeOne.domain"); nodeKeys.add("nodeTwo.domain");  final Set<String> nodeKeysTwo = new HashSet<>(); nodeKeysTwo.add("nodeTwo.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Should get the same monitor as before as contain the same key "nodeTwo.domain" final IMonitor monitorOneSame = monitorService.getMonitor(nodeKeysTwo, info, propertySet); "<AssertPlaceHolder>"; assertEquals(monitorOne, monitorOneSame);  // Make sure createMonitor was called once verify(monitorInitializer).createMonitor( eq(info), eq(propertySet), eq(monitorService)); }
getMonitor(Set<String> nodeKeys, HostInfo hostInfo, PropertySet propertySet) { return this.threadContainer.getOrCreateMonitor(nodeKeys, () -> monitorInitializer.createMonitor(hostInfo, propertySet, this)); }
[*] target: assertNotNull(monitorOneSame)
[-] pred: org. junit. Assert. assertNotNull ( monitorOneSame )
************************************
************************************
[+] input: testRoutePickInvokers() { String rule = "var result = new java.util.ArrayList(invokers.size());" + "for (i=0;i<invokers.size(); i++){ " + "if (invokers.get(i).isAvailable()) {" + "result.add(invokers.get(i)) ;" + "}" + "} ; " + "return result;"; String script = "function route(invokers,invocation,context){" + rule + "} route(invokers,invocation,context)"; Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));  List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(false); Invoker<String> invoker2 = new MockInvoker<String>(true); Invoker<String> invoker3 = new MockInvoker<String>(true); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { try { // 创建Bindings对象作为function函数的入参 Bindings bindings = createBindings(invokers, invocation); if (function == null) { return invokers; } // 调用function函数，并在getRoutedInvokers()方法中整理得到的Invoker集合 return getRoutedInvokers(function.eval(bindings)); } catch (ScriptException e) { logger.error("route error, rule has been ignored. rule: " + rule + ", method:" + invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(), e); return invokers; } }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: testDoVolatilityAssert_aboveUpperLimit() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "200"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return Math.abs(volatility) <= expected; }
[*] target: assertFalse(validateResult)
[-] pred: org. junit. Assert. assertFalse ( validateResult )
************************************
************************************
[+] input: IOException { final Path p = testArchivePath(); try (ZipArchive z = new ZipArchive(p.toFile())) { z.close(); assertTrue(z.isClosed()); z.close(); assertTrue(z.isClosed()); z.close(); "<AssertPlaceHolder>"; } }
isClosed() { return closed; }
[*] target: assertTrue(z.isClosed())
[-] pred: org. junit. Assert. assertTrue ( z. isClosed() )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = SubscriptionController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = subscriptionViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, SubscriptionController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooane",""), Arrays.asList('a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooane"); "<AssertPlaceHolder>"; assertEquals("fooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: Exception { String path = String.format("gcp://%s/%s", BUCKET_NAME, FILE_NAME); String config = gcpConfigLoader.loadTextFile(new URI(path)); "<AssertPlaceHolder>"; }
loadTextFile(URI uri) {  var bytes = loadBinaryFile(uri); return new String(bytes, StandardCharsets.UTF_8); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: selectByTitle() { BookDO book = initData(); List<BookDO> found = bookMapper.selectByTitle(book.getTitle()); boolean anyMatch = found.stream().anyMatch(it -> it.getTitle().equals(book.getTitle())); "<AssertPlaceHolder>"; }
selectByTitle(@Param("title") String title);
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: Exception { // given String siteId = null; String documentId = "0a5f8534-4c27-4fb3-b50f-09015dd96927";  Map<String, Object> map = loadRequest("/insert_subdocument.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>";  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(0, syncs.getResults().size()); }
handleRequest(final Map<String, Object> map, final Context context) {  LambdaLogger logger = context.getLogger();  if (serviceCache.debug()) { String json = this.gson.toJson(map); logger.log(json); }  List<Map<String, Object>> records = (List<Map<String, Object>>) map.get("Records"); processRecords(logger, records);  return null; }
[*] target: assertEquals(0, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 0, documents. size ( ) )
************************************
************************************
[+] input: confirmAgreement_confirmationSuccessful_returnTrue() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)).thenReturn(true);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
confirmAgreement(final Agreement agreement) { try { return agreementService.confirmAgreement(agreement); } catch (ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Failed to confirm agreement. [id=({})]", agreement.getId()); }  return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testSingleMinorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMinorGcSummaryMetric = new Summary( MINOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(expectedMinorGcSummaryMetric, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_NEW); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: mapEntityToDto_shouldMapEntityToDto() { //Arrange UserDto expected = userDto1;  //Act UserDto actual = userMapper.mapEntityToDto(user1);  //Assert "<AssertPlaceHolder>"; }
mapEntityToDto(User entity) { return UserDto.builder() .id(entity.getId()) .active(entity.isActive()) .mail(entity.getMail()) .photo(entity.getPhoto()) .surname(entity.getSurname()) .givenName(entity.getGivenName()) .department(entity.getDepartment()) .jobTitle(entity.getJobTitle()) .admin(entity.isAdmin()) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: handleRouteCreationException_returnStatusInternalServerError() { /* ACT */ final var response = exceptionHandler .handleRouteCreationException( new RouteCreationException("Failed to create route."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Failed to create Camel route.", body.get("message")); }
handleRouteCreationException( final RouteCreationException exception) { if (log.isWarnEnabled()) { if (exception != null) { log.warn("Failed to create Camel route. [exception=({})] [cause=({})]", exception.getMessage(), exception.getCause() == null ? "" : exception.getCause().getMessage()); } else { log.warn("Failed to create Camel route."); } }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Failed to create Camel route.");  return new ResponseEntity<>(body, headers, HttpStatus.INTERNAL_SERVER_ERROR); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: IOException { // given File fileToUpload = new File("src/test/resources/testFileToUpload.txt"); String googleDriveRootFolderId = "parentFolderId"; GoogleDriveClient googleService = new GoogleDriveClient(googleDriveService, googleDriveRootFolderId);  com.google.api.services.drive.model.File fileMetadata = new com.google.api.services.drive.model.File(); fileMetadata.setName("testFileToUpload.txt"); fileMetadata.setParents(Collections.singletonList("parentFolderId"));  FileContent notionExportFileContent = new FileContent("application/zip", fileToUpload);  when(googleDriveService.files().create(any(), any()).setFields(anyString()).execute()).thenReturn(null); clearInvocations(googleDriveService);  // when boolean result = googleService.upload(fileToUpload);  // then "<AssertPlaceHolder>"; verify(googleDriveService).files(); // eq(notionExportFileContent) does not work I assume because FileContent doesn't override the equals method? // com.google.api.client.http.FileContent@66908383 is not the same as com.google.api.client.http.FileContent@736ac09a // but eq() works for com.google.api.services.drive.model.File -> the toString {"name" = "testFileToUpload.txt", "parents" = [parentFolderId]} verify(googleDriveService.files()).create(eq(fileMetadata), any(FileContent.class)); verify(googleDriveService.files().create(eq(fileMetadata), any(FileContent.class))).setFields("id, parents"); verify(googleDriveService.files().create(eq(fileMetadata), any(FileContent.class)).setFields("id, parents")).execute(); }
upload(java.io.File fileToUpload) {  // create a file /* Service accounts also have their own Google Drive space. If we would create a new folder or file, it would be created in that space. But the problem is that the drive space won't be accessible from a GUI since the "real" user (who created the service account) doesn't have access to the drive space of the service account and there is no way to login with a service account to access the GUI. So the only way to see the files is through API calls. */  log.info("Google Drive: uploading file '{}' ...", fileToUpload.getName()); if (!(fileToUpload.exists() && fileToUpload.isFile())) { log.error("Google Drive: could not find {} in project root directory", fileToUpload.getName()); return false; }  FileContent notionExportFileContent = new FileContent("application/zip", fileToUpload); File fileMetadata = new File(); fileMetadata.setName(fileToUpload.getName()); fileMetadata.setParents(Collections.singletonList(googleDriveRootFolderId)); try { driveService.files().create(fileMetadata, notionExportFileContent) .setFields("id, parents") .execute(); } catch (IOException e) { log.warn("Google Drive: IOException ", e); return false; } log.info("Google Drive: successfully uploaded '{}'", fileToUpload.getName()); return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: GestaltException {  final File uploadFile = new File(UPLOAD_FILE_NAME);  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenThrow(new StorageException(504, "bad data"));  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions."<AssertPlaceHolder>"; GestaltException exception = Assertions.assertThrows(GestaltException.class, source::loadStream); Assertions.assertEquals("Exception loading Google Cloud Storage " + "object: default.properties, bucket: testbucket, with error:bad data", exception.getMessage()); }
hasStream() { return true; }
[*] target: assertTrue(source.hasStream())
[-] pred: org. junit. Assert. assertTrue ( source. hasStream ( ) )
************************************
************************************
[+] input: roundTripWithQuotedComponentWithSpace() { final String expression = "'Some CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Some CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: whenGroupAccountIsCreated_MsgSuccess() { // //        //Arrange //        String personEmail = "ilda@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; //        String accountDenomination = "LakersAccount"; //        String accountDescription = "Lakers Expenses"; // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); // //        GroupDTO isAccountCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupAccountInfoDTO newGroupAccountInfoDTO = new NewGroupAccountInfoDTO(accountDescription, accountDenomination); // //        CreateGroupAccountDTO createGroupAccountDTO = CreateGroupAccountDTOAssembler.createDTOFromPrimitiveTypes(personEmail, groupDenomination, accountDescription, accountDenomination); // //        //Expected ResponseEntity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isAccountCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createAccountAsPeopleInCharge method //        Mockito.when(service.createAccountAsPeopleInCharge(createGroupAccountDTO)).thenReturn(isAccountCreatedExpected); // //        //Act //        ResponseEntity<Object> isAccountCreated = controller.createGroupAccount(newGroupAccountInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
createGroupAccount(@RequestBody NewGroupAccountInfoDTO info, @PathVariable final String personEmail, @PathVariable final String groupDenomination) {  CreateGroupAccountDTO createGroupAccountDTO = CreateGroupAccountDTOAssembler.createDTOFromPrimitiveTypes( personEmail, groupDenomination, info.getAccountDescription(), info.getAccountDenomination());  GroupDTO result = createGroupAccountService.createAccountAsPeopleInCharge(createGroupAccountDTO);  Link link_to_admins = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAdmins(groupDenomination)).withRel("admins"); Link link_to_members = linkTo(methodOn(CreateGroupControllerREST.class).getGroupMembers(groupDenomination)).withRel("members"); Link link_to_ledger = linkTo(methodOn(CreateGroupControllerREST.class).getGroupLedger(groupDenomination)).withRel("ledger"); Link link_to_accounts = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAccounts(personEmail, groupDenomination)).withRel("accounts"); Link link_to_categories = linkTo(methodOn(CreateGroupControllerREST.class).getGroupCategories(personEmail, groupDenomination)).withRel("categories");  result.add(link_to_admins); result.add(link_to_members); result.add(link_to_ledger); result.add(link_to_accounts); result.add(link_to_categories);  return new ResponseEntity<>(result, HttpStatus.CREATED); }
[*] target: assertEquals(expectedResponse, isAccountCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isAccountCreated )
************************************
************************************
[+] input: testNotify_MockProviderOnly() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("methods", "getXXX1")); serviceUrls.add(SERVICEURL2.addParameter("methods", "getXXX1,getXXX2")); serviceUrls.add(SERVICEURL.setProtocol(MOCK_PROTOCOL));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>"; invocation = new RpcInvocation();  List invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  RpcInvocation mockinvocation = new RpcInvocation(); mockinvocation.setAttachment(INVOCATION_NEED_MOCK, "true"); invokers = registryDirectory.list(mockinvocation); Assertions.assertEquals(1, invokers.size()); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable() )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: shouldOffsetAndLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(2, 3)); "<AssertPlaceHolder>"; assertEquals(3, posts.get(0).get("ID")); assertEquals(4, posts.get(1).get("ID")); assertEquals(5, posts.get(2).get("ID")); } }
getMapper(Class<T> type);
[*] target: assertEquals(3, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 3, posts. size ( ) )
************************************
************************************
[+] input: testDecode() { val expected = new DataObject(); val actual = FastProto.decode(expected.toBytes(), DataObject.class);  "<AssertPlaceHolder>"; }
decode(byte[] bytes, Class<T> clazz) { val graph = Resolver.resolve(clazz); val context = PipelineContext.builder() .inputStream(new ByteBufferInputStream(bytes)) .clazz(clazz) .graph(graph) .build();  Pipeline.getDecodeFlow() .process(context);  return (T) context.getObject(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testUnsupportedGcEventName() { var event = mock(RecordedEvent.class); var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000;  List<Metric> expected = List.of(defaultMinorGcSummary, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn("FOO"); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
summarize() { Attributes attr = new Attributes(); Summary minorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MINOR_DURATION, minorGcCount.get(), minorGcDurationSummarizer.getDurationMillis(), minorGcDurationSummarizer.getMinDurationMillis(), minorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, minorGcEndTimeMs, attr);  Summary majorGcDuration = new Summary( JFR_GARBAGE_COLLECTION_MAJOR_DURATION, majorGcCount.get(), majorGcDurationSummarizer.getDurationMillis(), majorGcDurationSummarizer.getMinDurationMillis(), majorGcDurationSummarizer.getMaxDurationMillis(), startTimeMs, majorGcEndTimeMs, attr); return Stream.of(minorGcDuration, majorGcDuration); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: createFromIntRgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_RGB); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntRgb(data, width, height); "<AssertPlaceHolder>"; }
createFromIntRgb(int[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferInt(data, data.length); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_INT_RGB, null); return new BufferedImage(COLOR_MODEL_INT_RGB, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: Exception { URL url = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":2233"); Monitor monitor1 = monitorFactory.getMonitor(url); Monitor monitor2 = monitorFactory.getMonitor(url); if (monitor1 == null || monitor2 == null) { Thread.sleep(2000); monitor1 = monitorFactory.getMonitor(url); monitor2 = monitorFactory.getMonitor(url); } Assertions."<AssertPlaceHolder>"; }
getMonitor(URL url) { url = url.setPath(MonitorService.class.getName()).addParameter(INTERFACE_KEY, MonitorService.class.getName()); String key = url.toServiceStringWithoutResolving(); Monitor monitor = MONITORS.get(key); Future<Monitor> future = FUTURES.get(key); if (monitor != null || future != null) { return monitor; }  LOCK.lock(); try { monitor = MONITORS.get(key); future = FUTURES.get(key); if (monitor != null || future != null) { return monitor; }  final URL monitorUrl = url; final CompletableFuture<Monitor> completableFuture = CompletableFuture.supplyAsync(() -> AbstractMonitorFactory.this.createMonitor(monitorUrl)); FUTURES.put(key, completableFuture); completableFuture.thenRunAsync(new MonitorListener(key), EXECUTOR);  return null; } finally { // unlock LOCK.unlock(); } }
[*] target: assertEquals(monitor1, monitor2)
[-] pred: org. junit. Assert. assertEquals ( monitor1, monitor2 )
************************************
************************************
[+] input: InvalidAlgorithmParameterException { String encodedString = textEncryptorConverter.encode(unencryptedString); "<AssertPlaceHolder>"; return; }
encode(String attribute) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException { byte[] ba = getEnCipher().doFinal(attribute.getBytes(StandardCharsets.UTF_8)); return Base64.getUrlEncoder().encodeToString(ba); }
[*] target: assertNotNull(encodedString)
[-] pred: org. junit. Assert. assertNotNull ( encodedString )
************************************
************************************
[+] input: deleteMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository, never()).save(testMember); }
deleteHouseMemberDocument(String memberId);
[*] target: assertFalse(isDocumentDeleted)
[-] pred: org. junit. Assert. assertFalse ( isDocumentDeleted )
************************************
************************************
[+] input: Exception { XMLSignature sig; SignedInfo si; KeyInfo ki = null; XMLSignContext signContext; XMLValidateContext validateContext; boolean status = true; for (int i = SIGN_KEYS.length-1; i>=0 ; i--) { si = createSignedInfo(SIG_METHODS[i]); if (VALIDATE_KEYS[i] instanceof PublicKey) { ki = kifac.newKeyInfo(Collections.singletonList (kifac.newKeyValue((PublicKey) VALIDATE_KEYS[i]))); } else { ki = kifac.newKeyInfo(Collections.singletonList (kifac.newKeyName("testuser"))); } sig = fac.newXMLSignature(si, ki, objs, id, sigValueId); Document doc = TestUtils.newDocument(); signContext = new DOMSignContext(SIGN_KEYS[i], doc); signContext.setURIDereferencer(ud); sig.sign(signContext); validateContext = new DOMValidateContext (VALIDATE_KEYS[i], doc.getDocumentElement()); validateContext.setURIDereferencer(ud); if (!sig.validate(validateContext)) { status = false; TestUtils.dumpDocument(doc, "signatureTest_out"+i+".xml"); } } "<AssertPlaceHolder>"; }
sign(Key signingKey) throws XMLSignatureException {  if (signingKey instanceof PublicKey) { throw new IllegalArgumentException( I18n.translate("algorithms.operationOnlyVerification") ); }  //Create a SignatureAlgorithm object SignedInfo si = this.getSignedInfo(); SignatureAlgorithm sa = si.getSignatureAlgorithm(); try (SignerOutputStream output = new SignerOutputStream(sa); OutputStream so = new UnsyncBufferedOutputStream(output)) {  // generate digest values for all References in this SignedInfo si.generateDigestValues();  // initialize SignatureAlgorithm for signing sa.initSign(signingKey);  // get the canonicalized bytes from SignedInfo si.signInOctetStream(so);  // set them on the SignatureValue element this.setSignatureValueElement(sa.sign()); } catch (XMLSignatureException ex) { throw ex; } catch (XMLSecurityException | IOException ex) { throw new XMLSignatureException(ex); } }
[*] target: assertTrue(status)
[-] pred: org. junit. Assert. assertTrue ( status )
************************************
************************************
[+] input: Exception { SqlSessionFactory sqlSessionFactory = jdbcSourceConfig.sqlSessionFactory(); Assertions."<AssertPlaceHolder>"; }
sqlSessionFactory() throws Exception { SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource()); bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mappers/*.xml")); Objects.requireNonNull(bean.getObject()).getConfiguration().setMapUnderscoreToCamelCase(true); return bean.getObject(); }
[*] target: assertNotNull(sqlSessionFactory)
[-] pred: org. junit. Assert. assertNotNull ( sqlSessionFactory )
************************************
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var subscription = getSubscription();  /* ACT */ final var result = subscriptionViewAssembler.toModel(subscription);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(subscription.getSubscriber(), result.getSubscriber()); Assertions.assertEquals(subscription.getTarget(), result.getTarget()); Assertions.assertEquals(subscription.getLocation(), result.getLocation()); Assertions.assertEquals(subscription.isPushData(), result.isPushData()); Assertions.assertEquals(subscription.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(subscription.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(subscription.getAdditional(), result.getAdditional()); }
toModel(final Subscription subscription) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(subscription, SubscriptionView.class); view.add(getSelfLink(subscription.getId()));  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testReadNamspaceSingleQuote2() { final String xml = "<message>" + "<AppHdr xmlns='urn:iso:std:iso:20022:tech:xsd:head.001.001.01' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<Fr><FIId><FinInstnId><BICFI>BNANAOLUXXX</BICFI></FinInstnId></FIId></Fr>" + "	<To><FIId><FinInstnId><BICFI>CIYUCNBAFUZ</BICFI></FinInstnId></FIId></To>" + "	<BizMsgIdr>asdfsd</BizMsgIdr>" + "	<MsgDefIdr>catm.004.001.02</MsgDefIdr>" + "	<CreDt>2016-09-16T22:34:48Z</CreDt>" + "</AppHdr>" + "<Document xmlns='urn:iso:std:iso:20022:tech:xsd:catm.004.001.02' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<TermnlMgmtRjctn>" + "		<Hdr>" + "			<DwnldTrf>false</DwnldTrf>" + "			<FrmtVrsn>asdfsd</FrmtVrsn>" + "			<CreDtTm>2016-09-17T10:55:10</CreDtTm>" + "		</Hdr>" + "		<Rjct>" + "			<RjctRsn>VERS</RjctRsn>" + "		</Rjct>" + "	</TermnlMgmtRjctn>" + "</Document>" + "</message>"; MxCatm00400102 mx = (MxCatm00400102) new MxReadImpl().read(MxCatm00400102.class, xml, MxCatm00400102._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("BNANAOLUXXX", mx.getAppHdr().from()); assertEquals(RejectReason1Code.VERS, mx.getTermnlMgmtRjctn().getRjct().getRjctRsn()); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: hasList() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource();  Assertions."<AssertPlaceHolder>"; }
hasList() { return true; }
[*] target: assertTrue(configSource.hasList())
[-] pred: org. junit. Assert. assertTrue ( configSource. hasList() )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.nq");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.N_QUADS.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: getVersion() { String version = sdkOptions.getVersion(); "<AssertPlaceHolder>"; String[] versionParts = version.split("\\."); assertEquals(3, versionParts.length); }
getVersion() { int buildVersion = getHcnetsdk().NET_DVR_GetSDKBuildVersion(); return (buildVersion >> 24) + "." + (buildVersion << 8 >> 24) + "." + (buildVersion << 16 >> 16); }
[*] target: assertNotNull(version)
[-] pred: org. junit. Assert. assertNotNull ( version )
************************************
************************************
[+] input: updateInteger_differentNewInt_returnNewInt() { /* ARRANGE */ final var oldInt = 1; final var newInt = 2;  /* ACT */ final var result = FactoryUtils.updateInteger(oldInt, newInt);  /* ASSERT */ "<AssertPlaceHolder>"; }
updateInteger(final int oldInt, final int newInt) { if (oldInt != newInt) { return newInt; }  return oldInt; }
[*] target: assertEquals(newInt, result)
[-] pred: org. junit. Assert. assertEquals ( newInt, result )
************************************
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test", "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
hasList() { return false; }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
************************************
[+] input: testGetAttributes() { Map<String, String> attributes = authorvh.getAttributes(context.request()); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"data-author-vh-tablet", "data-author-vh-item-mobile", "data-author-vh-item-desktop"}, attributes.keySet().toArray()); assertEquals("51", attributes.get("data-author-vh-tablet")); assertEquals("12,,", attributes.get("data-author-vh-item-mobile")); assertEquals(",15,", attributes.get("data-author-vh-item-desktop")); }
getAttributes(SlingHttpServletRequest request) { if (DISABLED.equals(WCMMode.fromRequest(request))) { return null; }  Map<String, String> attributes = null; for (Breakpoint breakpoint : RequestUtil.getBreakpoints(request)) { if (breakpoint == null) { continue; } String vh = extractVH(request.getResource(), request, breakpoint); if (vh != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX + breakpoint.key(), vh); } for (String parent : listParentNodeNames) { Resource parentResource = request.getResource().getChild(parent + breakpoint.propertySuffix()); String value = generateItemAttributes(parentResource, request); if (value != null) { attributes = addToMap(attributes, ATTRIBUTE_PREFIX_ITEM + breakpoint.key(), value); } } } return attributes; }
[*] target: assertNotNull(attributes)
[-] pred: org. junit. Assert. assertNotNull ( attributes )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { EqualsAssertion equalsAssertion = MockEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = equalsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); if (NumberUtils.isParsable(expectedValue) || NumberUtils.isParsable(originalValue)) { return Double.parseDouble(expectedValue) == Double.parseDouble(originalValue); }  return expectedValue.equals(originalValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: testConfigure() { final MultipartOptions options = MultipartOptionsConfigure.newOpts() .charset(StandardCharsets.UTF_8) .maxSize(1L) .memoryThreshold(2L) .tempDir("/foo") .useDisk(true) .configured();  assertEquals(StandardCharsets.UTF_8, options.getCharset()); assertEquals(1L, options.getMaxSize()); assertEquals(2L, options.getMemoryThreshold()); assertEquals("/foo", options.getTempDir()); "<AssertPlaceHolder>"; }
isUseDisk() { return useDisk; }
[*] target: assertTrue(options.isUseDisk())
[-] pred: org. junit. Assert. assertTrue ( options. isUseDisk() )
************************************
************************************
[+] input: testStorageTemplateDataOnSourcedSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.JOURNAL, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData entryAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = entryAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookRented", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.JOURNAL, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertEquals("BookRentedAdapter", entryAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("JournalProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(4, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookPurchased")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorEntity")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookEntity")); Assertions.assertEquals("BookRented", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookRentedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("BookPurchased", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("BookPurchasedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(2, storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).size()); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("AuthorEntity")); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("BookEntity")); Assertions.assertEquals("JournalProvider", storeProviderTemplateData.filename()); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamPolicy.cmd")); String actual = exportIamPolicies.getTFImport(getAwsPolicies()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSPolicy> awsPolicies) { return TFImport.builder() .importLines(awsPolicies.stream() .map(awsPolicy -> TFImportLine.builder() .address(awsPolicy.getTerraformAddress()) .id(awsPolicy.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { GreaterThanAssertion greaterThanAssertion = MockGreaterThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = greaterThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) > Double.parseDouble(expectedValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: buildNTimesUsage() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.N_TIMES_USAGE, rule, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: IOException { /* ARRANGE */ final var request = new MockHttpServletRequest(); request.setContent("HELLO".getBytes(StandardCharsets.UTF_8)); request.setCharacterEncoding(String.valueOf(Charset.defaultCharset())); final var wrapper = new RequestWrapper(request); wrapper.getRequestBody();  final var reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream( "HELLO".getBytes(StandardCharsets.UTF_8))));  /* ACT && ASSERT */ final var result = wrapper.getReader();  while (true) { final var x = result.read(); final var y = reader.read(); "<AssertPlaceHolder>"; if (x == -1 || y == -1) { break; } } }
read() { return buffer.read(); }
[*] target: assertEquals(x, y)
[-] pred: org. junit. Assert. assertEquals ( x, y )
************************************
************************************
[+] input: nullOrFalseTest_1() { var actual = Utils.nullOrFalse(null); Assertions."<AssertPlaceHolder>"; }
nullOrFalse(Boolean value) { return Objects.isNull(value) || value == false; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: IOException { AdventurerClient client = new AdventurerClient(printerAddress); boolean print = client.print("20mm_Box.gx", Files.readAllBytes(Paths.get("20mm_Box.gx"))); client.close(); "<AssertPlaceHolder>"; }
print(String filename, byte[] readAllLines) throws FlashForgePrinterException { log.info("File: {}/{} byte", filename, readAllLines.length);  log.info(sendCommand(CMD_PREPARE_PRINT.replaceAll("%%size%%", "" + readAllLines.length) .replaceAll("%%filename%%", filename)));  try { List<byte[]> gcode = Util.prepareRawData(readAllLines); sendRawData(gcode); log.info(sendCommand(CMD_SAVE_FILE)); log.info(sendCommand(CMD_PRINT_START.replaceAll("%%filename%%", filename))); return true; } catch (FlashForgePrinterTransferException e) { log.error(e.getMessage(), e); }  return false; }
[*] target: assertTrue(print)
[-] pred: org. junit. Assert. assertTrue ( print )
************************************
************************************
[+] input: test1() { List<Integer> v1 = List.of(1, 2), v2 = List.of(3, 4, 5, 6); ZigzagIterator iterator = new ZigzagIterator(v1, v2); List<Integer> expected = List.of(1, 3, 2, 4, 5, 6); List<Integer> actual = new ArrayList<>(); while (iterator.hasNext()) actual.add(iterator.next()); "<AssertPlaceHolder>"; }
next() { if (v[pos & 1].size() <= (pos >>> 1)) pos++; return v[pos & 1].get(pos++ >>> 1); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testOrderByParserComplexExpressions() { List<Order> orderSpec = new ExprParser("field not in ('a',func('b', 2.0),'c') desc, 1-a->$**[0].*, now () + $.b + c > 2 asc").parseOrderSpec(); "<AssertPlaceHolder>"; Order o1 = orderSpec.get(0); assertTrue(o1.hasDirection()); assertEquals(Order.Direction.DESC, o1.getDirection()); assertEquals("field not in("a", func("b", 2.0), "c")", ExprUnparser.exprToString(o1.getExpr())); Order o2 = orderSpec.get(1); assertFalse(o2.hasDirection()); assertEquals("(1 - a->$**[0].*)", ExprUnparser.exprToString(o2.getExpr())); Order o3 = orderSpec.get(2); assertTrue(o3.hasDirection()); assertEquals(Order.Direction.ASC, o3.getDirection()); assertEquals("(((now() + $.b) + c) > 2)", ExprUnparser.exprToString(o3.getExpr())); }
parseOrderSpec() { return parseCommaSeparatedList(() -> { Order.Builder builder = Order.newBuilder(); builder.setExpr(expr()); if (currentTokenTypeEquals(TokenType.ORDERBY_ASC)) { consumeToken(TokenType.ORDERBY_ASC); builder.setDirection(Order.Direction.ASC); } else if (currentTokenTypeEquals(TokenType.ORDERBY_DESC)) { consumeToken(TokenType.ORDERBY_DESC); builder.setDirection(Order.Direction.DESC); } return builder.build(); }); }
[*] target: assertEquals(3, orderSpec.size())
[-] pred: org. junit. Assert. assertEquals ( 3, orderSpec. size ( ) )
************************************
************************************
[+] input: given_an_available_object_when_redis_contains_then_return_true() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); var key = new IdempotencyKey("key"); var wrapper = new IdempotentRequestResponseWrapper( new IdempotentRequestWrapper(new Object())); when(valueOperations.get(key.getKeyValue())).thenReturn(wrapper);  //When Boolean isContain = redisIdempotentRepository.contains(idempotencyKey);  //Then verify(valueOperations, times(1)).get(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
contains(IdempotencyKey idempotencyKey) { return valueOperations.get(idempotencyKey.getKeyValue()) != null; }
[*] target: assertTrue(isContain)
[-] pred: org. junit. Assert. assertTrue ( isContain )
************************************
************************************
[+] input: Exception { Inner$Interface ins = ConstructionUtil.generateSubClassOf(Inner$Interface.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancer.cmd")); String actual = exportLoadBalancers.getTFImport(getAwsLoadBalancers()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSLoadBalancer> awsLoadBalancers) { return TFImport.builder() .importLines(awsLoadBalancers.stream() .map(awsLoadBalancer -> TFImportLine.builder() .address(awsLoadBalancer.getTerraformAddress()) .id(awsLoadBalancer.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldSetAndGetPassword() { var password = "somePassword"; var dto = new UserPasswordDto(); dto.setPassword(password); "<AssertPlaceHolder>"; }
getPassword() { return password; }
[*] target: assertEquals(password, dto.getPassword())
[-] pred: org. junit. Assert. assertEquals ( password, dto. getPassword() )
************************************
************************************
[+] input: testIsSameMajorVersionButNewer() { final BusinessRule r1 = new BusinessRule(); r1.setVersion("2.1.0");  final BusinessRule r2 = new BusinessRule(); r2.setVersion("2.1.0");  assertTrue(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.1.1"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("1.1.0"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.0.0"); "<AssertPlaceHolder>"; }
isSameMajorVersionButNewer(final BusinessRule other) { return version().getMajor().equals(other.version().getMajor()) && version().isGreaterThanOrEqualTo(other.version()); }
[*] target: assertTrue(r1.isSameMajorVersionButNewer(r2))
[-] pred: org. junit. Assert. assertTrue ( r1. isSameMajorVersionButNewer(r2 ) )
************************************
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooyl","","fooane",""), Arrays.asList('a', OpsinTools.END_OF_SUBSTITUENT,'a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooylfooane"); "<AssertPlaceHolder>"; assertEquals("fooylfooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
splitIntoParseWords(List<ParseTokens> parseTokensList, String chemicalName) { List<ParseTokens> wellFormedParseTokens = new ArrayList<>();//these are all in the same word as would be expected List<List<ParseTokens>> splitParseTokensForEachParseTokens = new ArrayList<>(); /* * Each ParseTokens is split into the number of words it describes * e.g. ethylchloride has one interpretation so splitParseTokensList will have one entry * This entry will be formed of TWO parseTokens, one for the ethyl and one for the chloride */ int leastWordsInOmmittedSpaceParse = Integer.MAX_VALUE;//we want the least number of words i.e. less omitted spaces int longestFunctionalTermEncountered = 0;//we want the longest functional term for (ParseTokens parseTokens : parseTokensList) { List<Character> annotations = parseTokens.getAnnotations(); List<List<Character>> chunkedAnnotations = chunkAnnotations(annotations);//chunked into mainGroup/substituent/functionalTerm if (containsOmittedSpace(chunkedAnnotations)){ List<ParseTokens> omittedWordParseTokens = new ArrayList<>(); List<String> tokens = parseTokens.getTokens(); List<Character> newAnnotations = new ArrayList<>(); List<String> newTokens = new ArrayList<>(); int currentFunctionalTermLength = 0; int annotPos = 0; for (List<Character> annotationList : chunkedAnnotations) { Character finalAnnotationInList = annotationList.get(annotationList.size() - 1); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) && newAnnotations.size() > 0) { //create a new parseTokens for the substituent/maingroup preceding the functional term //not necessary if the functional term is the first thing to be read e.g. in the case of poly omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } for (Character annotation : annotationList) { newAnnotations.add(annotation); newTokens.add(tokens.get(annotPos++)); } if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM) || finalAnnotationInList.equals(END_OF_MAINGROUP) || annotPos == tokens.size()) { omittedWordParseTokens.add(new ParseTokens(newTokens, newAnnotations)); if (finalAnnotationInList.equals(END_OF_FUNCTIONALTERM)){ currentFunctionalTermLength = StringTools.stringListToString(newTokens, "").length(); } newAnnotations = new ArrayList<>(); newTokens = new ArrayList<>(); } } if (omittedWordParseTokens.size() <= leastWordsInOmmittedSpaceParse){ if (omittedWordParseTokens.size() < leastWordsInOmmittedSpaceParse){ splitParseTokensForEachParseTokens.clear(); leastWordsInOmmittedSpaceParse = omittedWordParseTokens.size(); longestFunctionalTermEncountered = 0; } if (currentFunctionalTermLength >=longestFunctionalTermEncountered){ if (currentFunctionalTermLength > longestFunctionalTermEncountered){ splitParseTokensForEachParseTokens.clear(); longestFunctionalTermEncountered =currentFunctionalTermLength; } splitParseTokensForEachParseTokens.add(omittedWordParseTokens); } } } else { wellFormedParseTokens.add(parseTokens); } } List<ParseWord> parseWords = new ArrayList<>(); if (!wellFormedParseTokens.isEmpty()) { parseWords.add(new ParseWord(chemicalName, wellFormedParseTokens)); } else { for (int i = 0; i < leastWordsInOmmittedSpaceParse; i++) { List<ParseTokens> parseTokensForWord = new ArrayList<>(); for (List<ParseTokens> parseTokens : splitParseTokensForEachParseTokens) { if (!parseTokensForWord.contains(parseTokens.get(i))){//if only one word is ambiguous there is no need for the unambiguous word to have multiple identical interpretation parseTokensForWord.add(parseTokens.get(i)); } } parseWords.add(new ParseWord(StringTools.stringListToString(parseTokensForWord.get(0).getTokens(), ""), parseTokensForWord)); } } return parseWords; }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
************************************
[+] input: configRoot_file() {  var configUrl = "config_dir/sample-config.yaml"; var expectedRoot = tempDir.resolve("config_dir").normalize();  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = Paths.get(manager.configRoot()).normalize();  "<AssertPlaceHolder>"; assertTrue(Files.exists(configRoot)); assertTrue(Files.isDirectory(configRoot)); }
configRoot() { return rootConfigDir; }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiPolygon(new Polygon[] { gf.createPolygon(new Coordinate[] {new Coordinate(0,0), new Coordinate(0,10), new Coordinate(10,10), new Coordinate(0,0)}), gf.createPolygon(new Coordinate[] {new Coordinate(20,20), new Coordinate(20,30), new Coordinate(30,30), new Coordinate(20,20)})}));  String wkt1 = "MULTIPOLYGON (((0 0, 0 10, 10 10, 0 0)), ((20 20, 20 30, 30 30, 20 20)))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
convertToWktString(Geoshape fieldValue) throws BackendException { return fieldValue.toString(); }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
************************************
[+] input: Throwable { String methodName = "toString";  when(invoker.toString()).thenReturn(methodName); Method method = invoker.getClass().getMethod(methodName);  Object result = invokerInvocationHandler.invoke(null, method, new Object[]{}); Assertions."<AssertPlaceHolder>"; }
invoke(Object proxy, Method method, Object[] args) throws Throwable { // 对于Object中定义的方法，直接调用Invoker对象的相应方法即可 if (method.getDeclaringClass() == Object.class) { return method.invoke(invoker, args); } String methodName = method.getName(); Class<?>[] parameterTypes = method.getParameterTypes(); if (parameterTypes.length == 0) { if ("toString".equals(methodName)) {// 对toString()方法进行特殊处理 return invoker.toString(); } else if ("$destroy".equals(methodName)) { // 对$destroy等方法的特殊处理 invoker.destroy(); return null; } else if ("hashCode".equals(methodName)) {// 对hashCode()方法进行特殊处理 return invoker.hashCode(); } } else if (parameterTypes.length == 1 && "equals".equals(methodName)) { return invoker.equals(args[0]); } // 创建RpcInvocation对象，后面会作为远程RPC调用的参数 RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args); String serviceKey = invoker.getUrl().getServiceKey(); rpcInvocation.setTargetServiceUniqueName(serviceKey);  if (consumerModel != null) { rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel); rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method)); }  // 调用invoke()方法发起远程调用，拿到AsyncRpcResult之后，调用recreate()方法获取响应结果(或是Future) return invoker.invoke(rpcInvocation).recreate(); }
[*] target: assertEquals(methodName, result)
[-] pred: org. junit. Assert. assertEquals ( methodName, result )
************************************
************************************
[+] input: JsonProcessingException { InheritedResponse expectedResponse = InheritedResponse.inheritedBuilder() .name("testing") .detail("testing-detail") .build();  wireMockServer.stubFor( post(urlPathEqualTo("/inherited")) .withHeader(HttpHeaders.CONTENT_TYPE, containing(MediaType.APPLICATION_JSON_VALUE)) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .withRequestBody(equalTo("testing")) .willReturn( aResponse() .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(expectedResponse)) ) );  InheritedResponse response = exampleClient.inherited("testing").block(); "<AssertPlaceHolder>"; }
inherited(@RequestBody String test);
[*] target: assertEquals(expectedResponse, response)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, response )
************************************
************************************
[+] input: testHashPasswordCorrectly() { PasswordUtils utils = new PasswordUtils();  String password = "mypassword"; String hashed = PasswordUtils.hashPassword(password); assertNotNull(hashed);  boolean isValid = PasswordUtils.checkPassword(password, hashed); assertTrue(isValid);  isValid = PasswordUtils.checkPassword("notmypassword", hashed); "<AssertPlaceHolder>"; }
checkPassword(String password_plaintext, String stored_hash) { boolean password_verified = false;  if(null == stored_hash || !stored_hash.startsWith("$2a$")) throw new java.lang.IllegalArgumentException("Invalid hash provided for comparison");  password_verified = BCrypt.checkpw(password_plaintext, stored_hash);  return(password_verified); }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
************************************
[+] input: testI2() { Collection<Link> result = Link.of("https://example.org/"); "<AssertPlaceHolder>"; assertEquals(0, result.size()); }
of(final String linkHeader) { return of(linkHeader, null); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: generateTextWalksForEntity() { NxMemoryWalkGenerator parser = new NxMemoryWalkGenerator(); parser.setParseDatatypeProperties(true); assertTrue(parser.isParseDatatypeProperties); parser.readNtriples(loadFile("dummyGraph_with_labels.nt"));  // walk depth 8 List<String> result = parser.generateTextWalksForEntity("W", 8); "<AssertPlaceHolder>"; assertTrue(result.contains("W rdfs:label gedichte")); String expectedSentence = "W rdf:Description wer reitet so spät durch nacht"; assertTrue(result.contains(expectedSentence), "Could not find String '" + expectedSentence + "'.\n" + transformToString(result) + "\nNumber of walks: " + result.size()); assertFalse(result.contains("W rdf:Description wer reitet"));  // walk depth 4 result = parser.generateTextWalksForEntity("W", 4); assertNotNull(result); assertTrue(result.contains("W rdfs:label gedichte")); assertTrue(result.contains("W rdf:Description wer reitet")); assertFalse(result.contains("W rdf:Description wer reitet so spät durch nacht")); }
readNtriples(File fileToReadFrom) { if (!fileToReadFrom.exists()) { LOGGER.error("File does not exist. Cannot parse."); return; } if (!sanityCheck(fileToReadFrom)) { LOGGER.error("File cannot be parsed by NxParser."); return; } if (fileToReadFrom.getName().endsWith(".nt") || fileToReadFrom.getName().endsWith(".ttl") || fileToReadFrom.getName().endsWith(".nq")) { NxParser parser = new NxParser(); try { parser.parse(new InputStreamReader(new FileInputStream(fileToReadFrom), StandardCharsets.UTF_8)); String subject, predicate, object; for (Node[] nx : parser) {  if(isParseDatatypeProperties && nx[2].toString().startsWith(""")){ // the current triple is a datatype triple subject = uriShortenerFunction.apply(removeTags(nx[0].toString())); predicate = uriShortenerFunction.apply(removeTags(nx[1].toString())); object = getTextProcessingFunction().apply(nx[2].toString()); data.addDatatypeTriple(subject, predicate, object); continue; } else if (nx[2].toString().startsWith(""")) continue;  subject = uriShortenerFunction.apply(removeTags(nx[0].toString())); predicate = uriShortenerFunction.apply(removeTags(nx[1].toString())); object = uriShortenerFunction.apply(removeTags(nx[2].toString())); data.addObjectTriple(subject, predicate, object); } } catch (FileNotFoundException fnfe) { LOGGER.error("Could not find file " + fileToReadFrom.getAbsolutePath(), fnfe); } } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: GeometryException { List<VectorTile.Feature> items = new ArrayList<>();  items.add(new VectorTile.Feature("mylayer", 1, VectorTile.encodeGeometry(newLineString(0, 0, 10, 0)), Map.of("highway", "tag1_link") ));  var result = LinkSimplify.linkSimplify(items, "highway", "tag1", "tag1_link"); "<AssertPlaceHolder>"; }
linkSimplify(List<VectorTile.Feature> items, String key, String mainval, String linkval) throws GeometryException {  Map<Coordinate, Integer> degrees = new HashMap<>();  for (VectorTile.Feature item : items) { if (item.geometry().geomType() == GeometryType.LINE) { if (item.attrs().get(key).equals(linkval)) { Coordinate[] coordinates = item.geometry().decode().getCoordinates(); if (coordinates.length == 0) continue; Coordinate start = coordinates[0]; Coordinate end = coordinates[coordinates.length - 1]; if (degrees.containsKey(start)) { degrees.put(start, degrees.get(start) + 1); } else { degrees.put(start, 1); } if (degrees.containsKey(end)) { degrees.put(end, degrees.get(end) + 1); } else { degrees.put(end, 1); }  } else if (item.attrs().get(key).equals(mainval)) { Coordinate[] coordinates = item.geometry().decode().getCoordinates(); for (Coordinate c : coordinates) { if (degrees.containsKey(c)) { degrees.put(c, degrees.get(c) + 1); } else { degrees.put(c, 1); } } } } }  List<VectorTile.Feature> output = new ArrayList<>();  for (VectorTile.Feature item : items) { if (item.geometry().geomType() == GeometryType.LINE && item.attrs().get(key).equals(linkval)) { Coordinate[] coordinates = item.geometry().decode().getCoordinates(); if (coordinates.length == 0) continue; Coordinate start = coordinates[0]; Coordinate end = coordinates[coordinates.length - 1]; if (degrees.get(start) >= 2 && degrees.get(end) >= 2) { output.add(item); } } else { output.add(item); } } return output; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatMaxValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(MAX_VALUE));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: getInstance() { DCLSingleton instance1 = DCLSingleton.getInstance(); DCLSingleton instance2 = DCLSingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { // 定义这个局部变量可以提高大约25%的性能🚀 依据:Joshua Bloch "Effective Java, Second Edition", p. 283-284 DCLSingleton current = dclSingleton; // 1️⃣ 第一次检查 if (dclSingleton == null) { // 🔒此时为了保证线程安全,我们不清楚其他线程是否已经实例化该对象,所以将类上锁达到互斥效果 synchronized (DCLSingleton.class) { /* * 再次将实例分配给局部变量并检查它是否由其他某个线程初始化 * 当前线程被阻止进入锁定区域。 如果它已初始化，那么我们可以 * 返回先前创建的实例，就像上面检查对象是否为空一样。 */ current = dclSingleton; // 2️⃣ 第二次检查 if (dclSingleton == null) { // 如果此时该类还没有被实例化,那么我们就可以安全的实例化一个单例的该对象实例. current = dclSingleton = new DCLSingleton(); } } } return current; }
[*] target: assertEquals(instance1, instance2)
[-] pred: org. junit. Assert. assertEquals ( instance1, instance2 )
************************************
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); //builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  var config = builder.build();  "<AssertPlaceHolder>"; }
build() throws GestaltException { return buildPackage(new GCSConfigSource(storage, bucketName, objectName, tags)); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppNoService.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: testDoVolatilityAssert_belowLowerLimit() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return Math.abs(volatility) <= expected; }
[*] target: assertFalse(validateResult)
[-] pred: org. junit. Assert. assertFalse ( validateResult )
************************************
************************************
[+] input: testGetMethod() { Method getMethod = null; for (Method method : MethodTestClazz.class.getMethods()) { if (MethodUtils.isGetter(method)) { getMethod = method; } } Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("getValue", getMethod.getName()); }
isGetter(Method method) { String name = method.getName(); return (name.startsWith("get") || name.startsWith("is")) && !"get".equals(name) && !"is".equals(name) && !"getClass".equals(name) && !"getObject".equals(name) && Modifier.isPublic(method.getModifiers()) && method.getParameterTypes().length == 0 && ClassUtils.isPrimitive(method.getReturnType()); }
[*] target: assertNotNull(getMethod)
[-] pred: org. junit. Assert. assertNotNull ( getMethod )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenNullLinkHeader() { BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder() .jobs(List.of(testJob)) .author(BuildKiteBuildInfo.Author.builder().name("xx").build()) .build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: convert() { // given final UrlConverter converter = new UrlConverter(); final String rawValue = "http://example.net";  // when final URL value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
convert(final String value) throws IllegalArgumentException { if (value == null) { throw new NullPointerException("null can not be converted"); } try { return new URL(value); } catch (MalformedURLException e) { throw new IllegalArgumentException("Value '" + value + "' is not a valid URL", e); } }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
************************************
[+] input: convertToDatabaseColumn_inputNull_returnNull() { /* ACT */ final var result = uriConverter.convertToDatabaseColumn(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
convertToDatabaseColumn(final URI uri) { return uri == null ? null : uri.toString(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiPoint(new Coordinate[] {new Coordinate(10,10), new Coordinate(20,20)}));  String wkt1 = "MULTIPOINT ((10 10), (20 20))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
convertToWktString(Geoshape fieldValue) throws BackendException { return fieldValue.toString(); }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
************************************
[+] input: whenGroupCategoryIsCreated_thenRetrievedMsgIsSuccess() { //        //Arrange // //        String personEmail = "manuel@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; //        String categoryDenomination = "Allowance"; // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); //        GroupDTO isCategoryCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupCategoryInfoDTO newGroupCategoryInfoDTO = new NewGroupCategoryInfoDTO(categoryDenomination); // //        CreateGroupCategoryDTO createGroupCategoryDTO = CreateGroupCategoryDTOAssembler.createDTOFromPrimitiveTypes(personEmail, groupDenomination, categoryDenomination); // //        //Expected Response Entity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isCategoryCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createCategoryAsPersonInCharge method, //        // so it does not depend on other parts (e.g. DB) //        Mockito.when(service.createCategoryAsPeopleInCharge(createGroupCategoryDTO)).thenReturn(isCategoryCreatedExpected); // //        //Act // //        ResponseEntity<Object> isCategoryCreated = controller.createGroupCategory(newGroupCategoryInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
createGroupCategory(@RequestBody NewGroupCategoryInfoDTO info, @PathVariable final String personEmail, @PathVariable final String groupDenomination) {  CreateGroupCategoryDTO createGroupCategoryDTO = CreateGroupCategoryDTOAssembler.createDTOFromPrimitiveTypes(personEmail, groupDenomination, info.getCategoryDenomination());  GroupDTO result = createGroupCategoryService.createCategoryAsPeopleInCharge(createGroupCategoryDTO);  Link link_to_admins = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAdmins(groupDenomination)).withRel("admins"); Link link_to_members = linkTo(methodOn(CreateGroupControllerREST.class).getGroupMembers(groupDenomination)).withRel("members"); Link link_to_ledger = linkTo(methodOn(CreateGroupControllerREST.class).getGroupLedger(groupDenomination)).withRel("ledger"); Link link_to_accounts = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAccounts(personEmail, groupDenomination)).withRel("accounts"); Link link_to_categories = linkTo(methodOn(CreateGroupControllerREST.class).getGroupCategories(personEmail,groupDenomination)).withRel("categories");  result.add(link_to_admins); result.add(link_to_members); result.add(link_to_ledger); result.add(link_to_accounts); result.add(link_to_categories);  return new ResponseEntity<>(result, HttpStatus.CREATED); }
[*] target: assertEquals(expectedResponse, isCategoryCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isCategoryCreated )
************************************
************************************
[+] input: shouldProperlyGetGroupById() { //given Integer androidGroupId = 16;  //when GroupDiscussionInfo groupById = groupClient.getGroupById(androidGroupId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(16, groupById.getId()); Assertions.assertEquals(TECH, groupById.getType()); Assertions.assertEquals("android", groupById.getKey()); }
getGroupById(Integer id);
[*] target: assertNotNull(groupById)
[-] pred: org. junit. Assert. assertNotNull ( groupById )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { NotEqualsAssertion notEqualsAssertion = MockNotEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = notEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(expectedValue) != Double.parseDouble(originalValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: confirmEmailUsedToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); testSecurityToken.setUsed(true); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: testDoVolatilityAssert_increase() { FallAssertion fallAssertion = MockFallAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "200"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility <= 0 && Math.abs(volatility) <= expected; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: createFromIntBgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_BGR); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntBgr(data, width, height); "<AssertPlaceHolder>"; }
createFromIntBgr(int[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferInt(data, data.length); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_INT_BGR, null); return new BufferedImage(COLOR_MODEL_INT_BGR, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: GestaltException { URLConfigSource fileConfigSource = new URLConfigSource(testURL);  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, fileConfigSource::loadList); }
hasList() { return false; }
[*] target: assertFalse(fileConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( fileConfigSource. hasList() )
************************************
************************************
[+] input: testMapper() { var recordedThread = mock(RecordedThread.class); var eventThread = "Thread-13";  var recordedEvent = mock(RecordedEvent.class); var now = System.currentTimeMillis(); var end = now + 1; var startTime = Instant.ofEpochMilli(now); var endTime = Instant.ofEpochMilli(end); var size = 32784L;  var attr = new Attributes().put(THREAD_NAME, eventThread); var gauge = new Gauge(JFR_ALLOCATION_REQUIRING_GC_ALLOCATION_SIZE, size, now, attr); var expected = List.of(gauge);  var testClass = new AllocationRequiringGCMapper();  when(recordedThread.getJavaName()).thenReturn(eventThread);  when(recordedEvent.getStartTime()).thenReturn(startTime); when(recordedEvent.getEndTime()).thenReturn(endTime); when(recordedEvent.getValue(EVENT_THREAD)).thenReturn(recordedThread); when(recordedEvent.getLong(SIZE)).thenReturn(size);  var result = testClass.apply(recordedEvent); "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { Attributes attr = new Attributes(); long timestamp = ev.getStartTime().toEpochMilli(); Optional<String> threadName = Workarounds.getThreadName(ev); threadName.ifPresent(thread -> attr.put(THREAD_NAME, thread)); long gaugeValue = 0; if (hasField(ev, SIZE, SIMPLE_CLASS_NAME)) { gaugeValue = ev.getLong(SIZE); } return Collections.singletonList( new Gauge(JFR_ALLOCATION_REQUIRING_GC_ALLOCATION_SIZE, gaugeValue, timestamp, attr)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: spiralOrder() { Solution solution = new Solution(); int[][] a = new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; List<Integer> expected = Arrays.asList(1, 2, 3, 6, 9, 8, 7, 4, 5); "<AssertPlaceHolder>"; }
spiralOrder(int[][] matrix) { int m = matrix.length; if (m == 0) return Collections.emptyList(); int n = matrix[0].length; if (n == 0) return Collections.emptyList(); int total = m * n; if (total == 1) return Collections.singletonList(matrix[0][0]); ArrayList<Integer> ans = new ArrayList<>(total); int i = 0, j = 0; ans.add(matrix[0][0]); int count = 1;  int rb = n - 1; int lb = 0; int tb = 1; int bb = m - 1;   while (true) { while (j < rb) { j++; ans.add(matrix[i][j]); if (++count == total) return ans; } rb--; while (i < bb) { i++; ans.add(matrix[i][j]); if (++count == total) return ans; } bb--; while (j > lb) { j--; ans.add(matrix[i][j]); if (++count == total) return ans; } lb++; while (i > tb) { i--; ans.add(matrix[i][j]); if (++count == total) return ans; } tb++; } }
[*] target: assertEquals(expected, solution.spiralOrder(a))
[-] pred: org. junit. Assert. assertEquals ( expected, solution. spiralOrder ( a ) )
************************************
************************************
[+] input: testgetPublicKey() { try { KeyValue kv = fac.newKeyValue(keys[0]); "<AssertPlaceHolder>"; } catch (KeyException ke) { fail("Should pass instead of throwing KeyException"); } }
getPublicKey() throws XMLSecurityException { Element rsa = XMLUtils.selectDsNode( getFirstChild(), Constants._TAG_RSAKEYVALUE, 0);  if (rsa != null) { RSAKeyValue kv = new RSAKeyValue(rsa, this.baseURI); return kv.getPublicKey(); }  Element dsa = XMLUtils.selectDsNode( getFirstChild(), Constants._TAG_DSAKEYVALUE, 0);  if (dsa != null) { DSAKeyValue kv = new DSAKeyValue(dsa, this.baseURI); return kv.getPublicKey(); }  return null; }
[*] target: assertNotNull(kv.getPublicKey())
[-] pred: org. junit. Assert. assertNotNull ( kv. getPublicKey() )
************************************
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: buildProhibitAccess() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.PROHIBIT_ACCESS, null, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509SubjectName x509SubjectName1 = new XMLX509SubjectName(TestUtils.newDocument(), cert); assertNotNull(x509SubjectName1.getSubjectName()); XMLX509SubjectName x509SubjectName2 = new XMLX509SubjectName(TestUtils.newDocument(), cert);  assertEquals(x509SubjectName1, x509SubjectName2); "<AssertPlaceHolder>"; }
hashCode() { int result = 17; result = 31 * result + this.getSubjectName().hashCode(); return result; }
[*] target: assertEquals(x509SubjectName1.hashCode(), x509SubjectName2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509SubjectName1. hashCode ( ), x509SubjectName2. hashCode ( ) )
************************************
************************************
[+] input: checkGroupExistByName() { GroupDO group = mockData1(); boolean exist = groupService.checkGroupExistByName(group.getName()); "<AssertPlaceHolder>"; }
checkGroupExistByName(String name) { QueryWrapper<GroupDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(GroupDO::getName, name); return this.baseMapper.selectCount(wrapper) > 0; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
************************************
[+] input: shouldGetConfigProperties() { var result = ConfigurationProperties.getConfigProperties(); "<AssertPlaceHolder>"; }
getConfigProperties() { return PROPERTIES; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getAtAutoCast_dataFieldExists_returnsInt() { GraphQLResponse response = constructResponse("{ "data": { "field": { "innerField": 42 } } }"); Integer value = response.getAt("field.innerField"); "<AssertPlaceHolder>"; }
getAt(String path) throws GraphQLResponseReadException { try { return getReadContext().read(path); } catch (JsonPathException e) { throw new GraphQLResponseReadException("Failed to read part of GraphQL response.", e); } }
[*] target: assertEquals(42, value)
[-] pred: org. junit. Assert. assertEquals ( 42, value )
************************************
************************************
[+] input: IOException { InputStream stream = ResourceUtils.getResourceAsStream("/test/Test.txt"); String actualText = IOUtils.toString(stream, defaultCharset()); "<AssertPlaceHolder>"; }
getResourceAsStream(String resourcePath) { InputStream in = ResourceUtils.class.getResourceAsStream(resourcePath); if (in == null) { throw new IllegalArgumentException("Resource not found in the path: " + resourcePath); } return in; }
[*] target: assertEquals(expectedText, actualText)
[-] pred: org. junit. Assert. assertEquals ( expectedText, actualText )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneOfEachStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.approved); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.rejected); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(1, result.getSeries()[2]); assertEquals(1, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { final boolean actual = FileUtil.isExistingFile(null);  // asserts "<AssertPlaceHolder>"; }
isExistingFile(final File file) { return file != null && file.exists() && file.isFile(); }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: testGetOldestPaymentAccountForOffer() { //        AccountAgeWitnessService service = mock(AccountAgeWitnessService.class); // //        PaymentAccount oldest = createAccountWithAge(service, 3); //        Set<PaymentAccount> accounts = Sets.newHashSet( //                oldest, //                createAccountWithAge(service, 2), //                createAccountWithAge(service, 1)); // //        BiFunction<Offer, PaymentAccount, Boolean> dummyValidator = (offer, account) -> true; //        PaymentAccounts testedEntity = new PaymentAccounts(accounts, service, dummyValidator); // //        PaymentAccount actual = testedEntity.getOldestPaymentAccountForOffer(mock(Offer.class)); //        "<AssertPlaceHolder>"; //    }
getOldestPaymentAccountForOffer(Offer offer) { List<PaymentAccount> sortedValidAccounts = sortValidAccounts(offer);  logAccounts(sortedValidAccounts);  return firstOrNull(sortedValidAccounts); }
[*] target: assertEquals(oldest, actual)
[-] pred: org. junit. Assert. assertEquals ( oldest, actual )
************************************
************************************
[+] input: getNotifierConfigMetadata() { ConfigMetadata notifierConfig = provider.getNotifierConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云通知配置", notifierConfig.getName()); }
getNotifierConfigMetadata() { return notifierConfig; }
[*] target: assertNotNull(notifierConfig)
[-] pred: org. junit. Assert. assertNotNull ( notifierConfig )
************************************
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,2,3,1:23:45:67:a:c,-69,AccessPoint2,f:dc:ba:98:76:54,-51,25.9"); Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1,2,3", location.getAccessPoints().get(0).getName()); assertEquals("1:23:45:67:a:c", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("f:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
toLocation(Message message) throws KidTrackerParseException {  if (!LOCATION_TYPES.contains(message.getType())) { throw new KidTrackerParseException("Unable to parse location from message of type " + message.getType()); }  final Queue<String> parts = new LinkedList<>(Arrays.asList(message.getPayload().split(PAYLOAD_SEPARATOR)));  try { Location.LocationBuilder locationBuilder = Location.builder() .time(LocalDateTime.parse(parts.remove() + parts.remove(), TIME_FORMATTER)) .valid("A".equals(parts.poll())) .latitude(Double.parseDouble(parts.remove()) * ("N".equals(parts.poll()) ? 1 : -1)) .longitude(Double.parseDouble(parts.remove()) * ("E".equals(parts.poll()) ? 1 : -1)) .speed(Double.parseDouble(parts.remove())) .course(Double.parseDouble(parts.remove())) .altitude(Double.parseDouble(parts.remove())) .satellites(Integer.parseInt(parts.remove())) .rssi(Integer.parseInt(parts.remove())) .battery(Integer.parseInt(parts.remove())) .pedometer(Integer.parseInt(parts.remove())) .rolls(Integer.parseInt(parts.remove())) .state(new DeviceState(Long.parseLong(parts.remove(), 16)));  int baseStationsCount = Integer.parseInt(parts.remove());  locationBuilder .gsmDelay(Integer.parseInt(parts.remove())) .mcc(Integer.parseInt(parts.remove())) .mnc(Integer.parseInt(parts.remove())) .baseStations(IntStream.range(0, baseStationsCount) .mapToObj(i -> new BaseStation(Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()), Integer.parseInt(parts.remove()))) .collect(Collectors.toList()));  int accessPointsCount = Integer.parseInt(parts.remove()); locationBuilder.accessPoints(IntStream.range(0, accessPointsCount) .mapToObj(i -> { // this trick is required to handle cases where Access Point name contains commas List<String> name = new ArrayList<>(); do { name.add(parts.remove()); } while (!ValidationUtils.isValidMacAddress(parts.peek())); return new AccessPoint(String.join(PAYLOAD_SEPARATOR, name), parts.remove(), Integer.parseInt(parts.remove())); }) .collect(Collectors.toList()));  return new Temporal<>(message.getTimestamp(), locationBuilder .accuracy(Double.parseDouble(parts.remove())) .build());  } catch (Exception ex) { throw new KidTrackerParseException("Unable to parse location from message "" + message + "", not enough data", ex); } }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
************************************
[+] input: deleteGroup1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); boolean ok = adminService.deleteGroup(random.nextInt(1000)); "<AssertPlaceHolder>"; }); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: Exception { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); final ArgumentResolver argResolver = mock(ArgumentResolver.class); when(argResolver.resolve(any(), any())).thenReturn("foo"); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, argResolver); when(mock.params()) .thenReturn(params); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: shouldFindPostsAllPostsWithDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.findPost"); "<AssertPlaceHolder>"; } }
selectList(String statement);  /** * Retrieve a list of mapped objects from the statement key and parameter. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(5, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 5, posts. size ( ) )
************************************
************************************
[+] input: Exception {  Properties p = ConfigUtils.loadProperties("META-INF/dubbo/internal/org.apache.dubbo.common.status.StatusChecker", true);  Properties expected = new Properties(); expected.put("memory", "org.apache.dubbo.common.status.support.MemoryStatusChecker"); expected.put("load", "org.apache.dubbo.common.status.support.LoadStatusChecker"); expected.put("aa", "12");  "<AssertPlaceHolder>"; }
loadProperties(String fileName, boolean allowMultiFile) { return loadProperties(fileName, allowMultiFile, false); }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
************************************
[+] input: getBrokers_brokersNull_returnNull() { /* ARRANGE */ final var resource = new OfferedResource();  /* ACT */ final var result = resource.getBrokers();  /* ASSERT */ "<AssertPlaceHolder>"; }
getBrokers() { return brokers; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSSubnet> awsSubnets = getAwsSubnets();  Maps<Resource> resourceMaps = exportSubnets.getResourceMaps(awsSubnets); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Subnet.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSSubnet> awsSubnets) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSSubnet awsSubnet : awsSubnets) { Subnet subnet = awsSubnet.getSubnet(); log.debug("subnet => {}", subnet);  resourceMapsBuilder.map( Resource.builder() .api(awsSubnet.getTerraformResourceName()) .name(awsSubnet.getResourceName()) .argument("availability_zone_id", TFString.build(subnet.availabilityZoneId())) .argument("cidr_block", TFString.build(subnet.cidrBlock())) .argumentIf(!subnet.ipv6CidrBlockAssociationSet().isEmpty(), "ipv6_cidr_block", () -> TFString.build(subnet.ipv6CidrBlockAssociationSet().get(0).ipv6CidrBlock()) ) .argument("map_public_ip_on_launch", TFBool.build(subnet.mapPublicIpOnLaunch())) .argumentIf(subnet.outpostArn() != null, "outpost_arn", TFString.build(subnet.outpostArn())) .argument("assign_ipv6_address_on_creation", TFBool.build(subnet.assignIpv6AddressOnCreation())) .argument("vpc_id", TFString.build(subnet.vpcId())) .argument("tags", TFMap.build( subnet.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) ) ) .build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testToDateStringRandom() { for (int i = 0; i < 1000000; i++) { int j = random.ints(Integer.MIN_VALUE, Integer.MAX_VALUE).findFirst().getAsInt(); long l = Integer.toUnsignedLong(j); String expected = new Date(l * 1000L).toString(); String actual = SftpATTRS.toDateString(l); "<AssertPlaceHolder>"; } }
toDateString(long epochSeconds) { Instant instant = Instant.ofEpochSecond(epochSeconds); ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.systemDefault()); return DTF.format(zdt); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: deserialize() { ResourceSpans resourceSpans = ResourceSpans.newBuilder().setResource(Resource.getDefaultInstance()).build(); ExportTraceServiceRequest request = ExportTraceServiceRequest.newBuilder() .addResourceSpans(resourceSpans) .addResourceSpans(resourceSpans) .build(); byte[] data = request.toByteArray();  ExportTraceServiceRequest actual = testSubject.deserialize("test-topic", data);  "<AssertPlaceHolder>"; }
deserialize(String topic, byte[] data) { if (Objects.isNull(data)) { return null; } try { return ExportTraceServiceRequest.parseFrom(data); } catch (InvalidProtocolBufferException e) { throw new SerializationException("Error while deserializing data", e); } }
[*] target: assertEquals(request, actual)
[-] pred: org. junit. Assert. assertEquals ( request, actual )
************************************
************************************
[+] input: testWhenConfigResourceIsNotPresent() { ValueMap cloudConfig = cloudConfigReaderImpl.getContextAwareCloudConfigRes("/content/dx", "notExistentConfig", ValueMap.class); "<AssertPlaceHolder>"; }
getContextAwareCloudConfigRes(@NotNull String resourcePath, String configName, Class<T> type) { try (ResourceResolver resolver = resourceResolverFactory.getServiceResourceResolver(SERVICE_USER)) { Resource resource = resolver.getResource(resourcePath); Resource confRes = null != resource ? configurationResolver.getResource(resource, BUCKET_NAME, configName) : null; if (null != confRes) { Resource jcrContentRes = confRes.getChild(JCR_CONTENT); return null != jcrContentRes ? jcrContentRes.adaptTo(type) : confRes.adaptTo(type); } } catch (LoginException e) { LOG.error("Login Exception occurred when reading config ", e); } return null; }
[*] target: assertNull(cloudConfig)
[-] pred: org. junit. Assert. assertNull ( cloudConfig )
************************************
************************************
[+] input: testGetProviderWithProviderClass() {  // Act SecretsProvider secretsProvider = ParamManager.getProvider(SecretsProvider.class);  // Assert "<AssertPlaceHolder>"; }
getProvider(Class<T> providerClass) { if (providerClass == null) { throw new IllegalStateException("providerClass cannot be null."); } if (providerClass == DynamoDbProvider.class || providerClass == AppConfigProvider.class) { throw new IllegalArgumentException( providerClass + " cannot be instantiated like this, additional parameters are required"); } return (T) providers.computeIfAbsent(providerClass, ParamManager::createProvider); }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
************************************
[+] input: testStorageTemplateDataOnStatefulCQRSModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypesForCQRS(), ProjectionType.NONE, false, true);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final List<TemplateData> storeProviders = allTemplatesData.stream() .filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)) .collect(Collectors.toList());  IntStream.range(0, 1).forEach(modelClassificationIndex -> { final TemplateData storeProviderTemplateData = storeProviders.get(modelClassificationIndex); final Model model = modelClassificationIndex == 0 ? Model.COMMAND : Model.QUERY; final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters(); final int expectedImports = modelClassificationIndex == 0 ? 2 : 1; Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(model, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals(model.title + "StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(expectedImports, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(model.title  + "StateStoreProvider", storeProviderTemplateData.filename()); }); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(9, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 9, allTemplatesData. size ( ) )
************************************
************************************
[+] input: demoAndV2BatchIdStringFormatIsCorrect() { BatchId id = new BatchId(123, Optional.of(45)); String stringId = "123_45"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: IOException { Layout layout = LogLinearLayout.create(1e-8, 1e-2, -1e6, 1e6); Histogram histogram = Histogram.createDynamic(layout); histogram.addValue(-5.5);  ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream); histogram.write(dataOutputStream); byte[] serializedHistogram = byteArrayOutputStream.toByteArray();  DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(serializedHistogram)); Histogram deserializedHistogram = Histogram.readAsPreprocessed(layout, dataInputStream);  "<AssertPlaceHolder>"; assertEquals(histogram.hashCode(), deserializedHistogram.hashCode()); }
addValue(double value) { throw new UnsupportedOperationException(); }
[*] target: assertEquals(histogram, deserializedHistogram)
[-] pred: org. junit. Assert. assertEquals ( histogram, deserializedHistogram )
************************************
************************************
[+] input: defineCycle_insertActiveCycle_expectedCorrectReturn() { Cycle newCycle = new Cycle(); newCycle.setCycleState(CycleState.ACTIVE); Cycle oldCycle = new Cycle(); Cycle savedCycle = new Cycle();  when(cycleService.findById(anyLong())).thenReturn(oldCycle); when(cycleRepository.save(any(Cycle.class))).thenReturn(savedCycle);  Cycle actualCycle = cycleService.defineCycle(100L, newCycle);  "<AssertPlaceHolder>"; }
defineCycle(Long oldCycleId, Cycle cycle) { if (cycle.getCycleState() == CycleState.ACTIVE) { return replaceCycle(oldCycleId, cycle); } else { return createCycleCloneInPreparation(oldCycleId, cycle); } }
[*] target: assertEquals(savedCycle, actualCycle)
[-] pred: org. junit. Assert. assertEquals ( savedCycle, actualCycle )
************************************
************************************
[+] input: buildProgressChart_shouldBuildCorrectXAxisLabels() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle"); long companyId = 11L; KeyResultHistory keyResultHistory1 = new KeyResultHistoryBuilder().SetBaseInformation(5, 10, null, LocalDate.now().minusDays(5)).Build(); KeyResultHistory keyResultHistory2 = new KeyResultHistoryBuilder().SetBaseInformation(10, 10, null, LocalDate.now().minusDays(4)).Build(); KeyResult keyResult = new KeyResultBuilder() .SetTarget(10).SetCurrent(10) .AddHistory(keyResultHistory1) .AddHistory(keyResultHistory2) .Build(); Objective objective1 = ObjectiveBuilder.Create().AddKeyResult(keyResult).Build(); OkrChildUnit team1 = TeamBuilder.CreateDepartment(10L).AddObjective(objective1).Build(); OkrCompany company = new CompanyBuilder().AddChildUnits(team1).Build(); when(keyResultHistoryService.findOldestKeyResultHistoryForKeyResultList(any())).thenReturn(keyResult.getKeyResultHistory().stream().toList().get(0)); when(companyService.findById(companyId)).thenReturn(company);  LineChartOptionsDto result = lineChartService.buildProgressChart(chartCreationOptions, companyId);  "<AssertPlaceHolder>"; assertEquals(6, result.getXAxisCategories().size()); String[] xAxisLabels = result.getXAxisCategories().toArray(new String[0]); assertEquals(LocalDate.now().minusDays(5).toString(), xAxisLabels[0]); assertEquals(LocalDate.now().minusDays(4).toString(), xAxisLabels[1]); assertEquals(LocalDate.now().minusDays(3).toString(), xAxisLabels[2]); assertEquals(LocalDate.now().minusDays(2).toString(), xAxisLabels[3]); assertEquals(LocalDate.now().minusDays(1).toString(), xAxisLabels[4]); assertEquals(LocalDate.now().toString(), xAxisLabels[5]); assertEquals("TestTitle", result.getTitle()); }
buildProgressChart(ChartCreationOptions chartCreationOptions, Long companyId) { LineChartOptionsDto lineChartOptionsDto = new LineChartOptionsDto(); Collection<LineChartLineKeyValues> lineChartLineKeyValuesList = new ArrayList<>(); Collection<Objective> objectives = new ArrayList<>(); Collection<KeyResult> keyResults = new ArrayList<>(); Collection<OkrDepartment> teams;  lineChartOptionsDto.setId(chartCreationOptions.getId()); lineChartOptionsDto.setTitle(chartCreationOptions.getTitle()); lineChartOptionsDto.setChartType(ChartInformationTypeEnum.LINE_PROGRESS.ordinal());  teams = getDepartments( companyId, chartCreationOptions.getTeamIds() );  for (OkrDepartment team : teams) { objectives.addAll(team.getObjectives()); }  for (Objective objective : objectives) { keyResults.addAll(objective.getKeyResults()); }  if (keyResults.size() == 0) { return getNoValuesFoundLineChartOptionsDto(chartCreationOptions, lineChartOptionsDto); }  LocalDate startDate = keyResultHistoryService.findOldestKeyResultHistoryForKeyResultList(keyResults) .getDateChanged(); LocalDate today = LocalDate.now(); long numberOfDays = ChronoUnit.DAYS.between(startDate, today) + 1; // +1 because we also include the startDate   for (OkrDepartment team : teams) { LineChartLineKeyValues lineChartLineKeyValues = new LineChartLineKeyValues(); lineChartLineKeyValues.setName(team.getName()); lineChartLineKeyValues.setData(ProgressHelper.getProgressForTeam(team, startDate, numberOfDays)); lineChartLineKeyValuesList.add(lineChartLineKeyValues); }  if (chartCreationOptions.getTeamIds().size() == 0) { lineChartOptionsDto.setSeries(Collections.singletonList(ProgressHelper.getProgressForCompany( lineChartLineKeyValuesList, numberOfDays ))); } else { lineChartOptionsDto.setSeries(lineChartLineKeyValuesList); } lineChartOptionsDto.setXAxisCategories(getProgressXAxis(startDate, numberOfDays)); return lineChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetForDiffService() { URL url1 = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService1?version=1.0.0&application=vic"); URL url2 = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService2?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url1); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url2); Assertions."<AssertPlaceHolder>"; }
getMetadataReport(URL url) { // 清理export、refer参数 url = url.setPath(MetadataReport.class.getName()) .removeParameters(EXPORT_KEY, REFER_KEY); String key = url.toServiceString(); LOCK.lock(); try { // 从SERVICE_STORE_MAP集合（ConcurrentHashMap<String, MetadataReport>类型）中 // 查询是否已经缓存有对应的MetadataReport对象 MetadataReport metadataReport = SERVICE_STORE_MAP.get(key); if (metadataReport != null) { // 直接返回缓存的MetadataReport对象 return metadataReport; } // 创建新的MetadataReport对象，createMetadataReport()方法由子类具体实现 metadataReport = createMetadataReport(url); if (metadataReport == null) { throw new IllegalStateException("Can not create metadata Report " + url); } // 将MetadataReport缓存到SERVICE_STORE_MAP集合中 SERVICE_STORE_MAP.put(key, metadataReport); return metadataReport; } finally { // Release the lock LOCK.unlock(); } }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
************************************
[+] input: toModel_validInput_returnCatalogView() { /* ARRANGE */ final var catalog = getCatalog();  /* ACT */ final var result = catalogViewAssembler.toModel(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(catalog.getTitle(), result.getTitle()); Assertions.assertEquals(catalog.getDescription(), result.getDescription()); Assertions.assertEquals(catalog.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(catalog.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(catalog.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getCatalogLink(catalog.getId()), selfLink.get().getHref());  final var offeredResourcesLink = result.getLink("offers"); assertTrue(offeredResourcesLink.isPresent()); assertNotNull(offeredResourcesLink.get()); assertEquals(getCatalogOfferedResourcesLink(catalog.getId()), offeredResourcesLink.get().getHref()); }
toModel(final Catalog catalog) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(catalog, CatalogView.class); view.add(getSelfLink(catalog.getId()));  final var offeredResLink = WebMvcLinkBuilder .linkTo(methodOn(CatalogsToOfferedResourcesController.class) .getResource(catalog.getId(), null, null)) .withRel(BaseType.OFFERS); view.add(offeredResLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: Exception { final File input = new File(SystemUtil.info().getTempDir(), "/folder-does-not-exists");  final boolean actual = FileUtil.isExistingFolder(input);  // asserts "<AssertPlaceHolder>"; }
isExistingFolder(final File folder) { return folder != null && folder.exists() && folder.isDirectory(); }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
************************************
[+] input: ifSubjectIsExpectedOrAlternativeTest_1() { var actual = Utils.ifSubjectIsExpectedOrAlternative(1, 1, 2); Assertions."<AssertPlaceHolder>"; }
ifSubjectIsExpectedOrAlternative(T subject, T expected, T alternative) { return Objects.equals(subject, expected) ? expected : alternative; }
[*] target: assertEquals(1, actual)
[-] pred: org. junit. Assert. assertEquals ( 1, actual )
************************************
************************************
[+] input: testToString() { MetadataTest test = new MetadataTest(); PlaybackMetadata metadata = new PlaybackMetadata(test); metadata.setValue("1", "One"); metadata.setValue("2", "Two"); metadata.setValue("3", "Three"); metadata.setValue("4", "Four");  String actual = metadata.toString();  String expected = "1:One\n" + "2:Two\n" + "3:Three\n" + "4:Four\n";  "<AssertPlaceHolder>"; }
toString() { String out = ""; for (String key : data.keySet()) { String value = getValue(key); out += (String.format("%s%s%s\n", key, SEPERATOR, value)); } return out; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/ConsumerSpecificProviders.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals("127.0.0.1:20880", url.getParameter(OVERRIDE_PROVIDERS_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: Exception { final Response response = mock(Response.class); when(response.code()).thenReturn(204); when(github.request("/repos/someowner/somerepo/collaborators/user")) .thenReturn(completedFuture(response)); boolean isCollaborator = repoClient.isCollaborator("user").get(); "<AssertPlaceHolder>"; }
isCollaborator(final String user) { final String path = String.format(REPOSITORY_COLLABORATOR, owner, repo, user); return github.request(path).thenApply(response -> response.code() == NO_CONTENT); }
[*] target: assertTrue(isCollaborator)
[-] pred: org. junit. Assert. assertTrue ( isCollaborator )
************************************
************************************
[+] input: testCurrentSimplyDelegates() { Context expected = mock(Context.class); ContextStorage delegate = mock(ContextStorage.class);  when(delegate.current()).thenReturn(expected);  JfrContextStorage contextStorage = new JfrContextStorage(delegate); Context result = contextStorage.current(); "<AssertPlaceHolder>"; }
current() { return delegate.current(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testBusinessAppHdrV01Xm() { BusinessAppHdrV01 bah = new BusinessAppHdrV01(); bah.setFr(new Party9Choice()); bah.getFr().setFIId(new BranchAndFinancialInstitutionIdentification5()); bah.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); bah.getFr().getFIId().getFinInstnId().setBICFI("BIC"); bah.getFr().getFIId().setBrnchId(new BranchData2()); bah.getFr().getFIId().getBrnchId().setId("id"); bah.getFr().getFIId().getBrnchId().setNm("name"); bah.getFr().getFIId().getBrnchId().setPstlAdr(new PostalAddress6()); bah.getFr().getFIId().getBrnchId().getPstlAdr().setCtry("AR");  final String xml = bah.xml();  "<AssertPlaceHolder>"; // System.out.println(xml); testXpath(xml, "/AppHdr/Fr/FIId/FinInstnId/BICFI", "BIC"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Id", "id"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Nm", "name"); }
xml() { return xml(new MxWriteParams()); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsSubnetGroup.cmd")); String actual = exportRdsSubnetGroups.getTFImport(getAwsRdsSubnetGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRdsSubnetGroup> awsRdsSubnetGroups) { return TFImport.builder() .importLines(awsRdsSubnetGroups.stream() .map(awsRdsSubnetGroup -> TFImportLine.builder() .address(awsRdsSubnetGroup.getTerraformAddress()) .id(awsRdsSubnetGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { KeyInfoReference keyInfoReference = new KeyInfoReference(TestUtils.newDocument(), URI_CONTROL); "<AssertPlaceHolder>"; }
getURI() { return this.getURIAttr().getNodeValue(); }
[*] target: assertEquals(URI_CONTROL, keyInfoReference.getURI())
[-] pred: org. junit. Assert. assertEquals ( URI_CONTROL, keyInfoReference. getURI ( ) )
************************************
************************************
[+] input: testAuthSuccessfully() { String service = "org.apache.dubbo.DemoService"; String method = "test"; long currentTimeMillis = System.currentTimeMillis(); URL url = URL.valueOf("dubbo://10.10.10.10:2181") .setServiceInterface(service) .addParameter(Constants.ACCESS_KEY_ID_KEY, "ak") .addParameter(Constants.SECRET_ACCESS_KEY_KEY, "sk") .addParameter(CommonConstants.APPLICATION_KEY, "test-provider") .addParameter(Constants.SERVICE_AUTH, true); Invoker invoker = mock(Invoker.class); Invocation invocation = mock(Invocation.class); when(invocation.getAttachment(Constants.AK_KEY)).thenReturn("ak"); when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn("test-consumer"); when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis)); when(invocation.getMethodName()).thenReturn(method); when(invoker.getUrl()).thenReturn(url);   String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT, url.getColonSeparatedKey(), invocation.getMethodName(), "sk", currentTimeMillis); String sign = SignatureUtils.sign(requestString, "sk"); when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);  ProviderAuthFilter providerAuthFilter = new ProviderAuthFilter(); Result result = providerAuthFilter.invoke(invoker, invocation); "<AssertPlaceHolder>"; }
invoke(Invoker<?> invoker, Invocation invocation) throws RpcException { URL url = invoker.getUrl(); boolean shouldAuth = url.getParameter(Constants.SERVICE_AUTH, false); if (shouldAuth) { Authenticator authenticator = ExtensionLoader.getExtensionLoader(Authenticator.class) .getExtension(url.getParameter(Constants.AUTHENTICATOR, Constants.DEFAULT_AUTHENTICATOR)); try { authenticator.authenticate(invocation, url); } catch (Exception e) { return AsyncRpcResult.newDefaultAsyncResult(e, invocation); } } return invoker.invoke(invocation); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: sendEmailCreatedMailException() { // given SecurityToken token = new SecurityToken(); token.setToken("token"); MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendAccountCreated(user, token);  // then "<AssertPlaceHolder>"; }
sendAccountCreated(User user, SecurityToken emailConfirmToken) { Map<String, Object> templateModel = new HashMap<>(); String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken); templateModel.put("username", user.getName()); templateModel.put("emailConfirmLink", emailConfirmLink); String accountCreatedSubject = getLocalizedMessage("locale.EmailSubject.accountCreated"); boolean mailSent = send(user.getEmail(), accountCreatedSubject, MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel); return mailSent; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
************************************
[+] input: shouldMakeServiceAndRoomId() { var serviceRoomId = ServiceRoomId.make(this.serviceId, this.roomId);  Assertions."<AssertPlaceHolder>"; }
make(String serviceId, String roomId) { return new ServiceRoomId(serviceId, roomId); }
[*] target: assertNotNull(serviceRoomId)
[-] pred: org. junit. Assert. assertNotNull ( serviceRoomId )
************************************
************************************
[+] input: testGetKafkaLatestMessage_1() { addRecord(Collections.singletonList("inlong")); QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("inlong", messages.get(0).getBody()); }
getLatestMessage(Consumer<byte[], byte[]> consumer, String topicName, InlongStreamInfo streamInfo, QueryMessageRequest request) { List<BriefMQMessage> messageList = new ArrayList<>(); Integer messageCount = request.getMessageCount(); try { List<PartitionInfo> partitionInfoList = consumer.partitionsFor(topicName); List<TopicPartition> topicPartitionList = partitionInfoList.stream() .map(topicPartition -> new TopicPartition(topicPartition.topic(), topicPartition.partition())) .collect(Collectors.toList());  Map<TopicPartition, Long> beginningTopicPartitionList = consumer.beginningOffsets(topicPartitionList); Map<TopicPartition, Long> endTopicPartitionList = consumer.endOffsets(topicPartitionList);  int count = (int) Math.ceil((double) messageCount / topicPartitionList.size()); Map<TopicPartition, Long> expectedOffsetMap = beginningTopicPartitionList.entrySet() .stream() .map(entry -> { long beginningOffset = entry.getValue(); long endOffset = endTopicPartitionList.getOrDefault(entry.getKey(), beginningOffset); Long offset = (endOffset - beginningOffset) >= count ? (endOffset - count) : beginningOffset; return Pair.of(entry.getKey(), offset); }).collect(Collectors.toMap(Pair::getKey, Pair::getValue));  consumer.assign(topicPartitionList); expectedOffsetMap.forEach(consumer::seek);  int index = 0; ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord<byte[], byte[]> record : records) { Map<String, String> headers = new HashMap<>(); for (Header header : record.headers()) { headers.put(header.key(), new String(header.value(), StandardCharsets.UTF_8)); }  MessageWrapType messageWrapType = MessageWrapType.forType(streamInfo.getWrapType()); if (headers.get(InlongConstants.MSG_ENCODE_VER) != null) { messageWrapType = MessageWrapType.valueOf(Integer.parseInt(headers.get(InlongConstants.MSG_ENCODE_VER))); } DeserializeOperator deserializeOperator = deserializeOperatorFactory.getInstance(messageWrapType); deserializeOperator.decodeMsg(streamInfo, messageList, record.value(), headers, index, request); if (messageList.size() >= messageCount) { break; } } } catch (Exception e) { String errMsg = "decode msg error: "; LOGGER.error(errMsg, e); throw new BusinessException(errMsg + e.getMessage()); } finally { consumer.close(); }  LOGGER.debug("success query messages for topic={}, size={}, returned size={}", topicName, messageList.size(), messageCount); // only return a list of messages of the specified count int fromIndex = (messageList.size() > messageCount) ? (messageList.size() - messageCount) : 0; List<BriefMQMessage> resultList = messageList.subList(fromIndex, messageList.size()); for (int i = 0; i < resultList.size(); i++) { BriefMQMessage message = resultList.get(i); message.setId(i + 1); }  return resultList; }
[*] target: assertEquals(1, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 1, messages. size ( ) )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RequestedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = requestedResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, RequestedResourceController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: IOException { final String expected = "Jodd - The Unbearable Lightness of Java - üäößÜÄÖ";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm(), StandardCharsets.UTF_8);  // Asserts "<AssertPlaceHolder>"; }
downloadString(final String url, final Charset encoding) throws IOException { try (final InputStream inputStream = new URL(url).openStream()) { return new String(IOUtil.readChars(inputStream, encoding)); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDoFixValueAssert_notAsExpected() { LessThanAssertion lessThanAssertion = MockLessThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = lessThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) < Double.parseDouble(expectedValue); }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSVpc> vpcs = getAwsVpcs();  Maps<Resource> resourceMaps = exportvpcs.getResourceMaps(vpcs); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Vpc.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSVpc> awsVpcs) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSVpc awsVpc : awsVpcs) { Vpc vpc = awsVpc.getVpc(); resourceMapsBuilder.map( Resource.builder() .api(awsVpc.getTerraformResourceName()) .name(awsVpc.getResourceName()) .argument("cidr_block", TFString.build(vpc.cidrBlock())) .argument("instance_tenancy", TFString.build(vpc.instanceTenancyAsString())) .argument("enable_dns_support", TFBool.build(awsVpc.isEnableDnsSupport())) .argument("enable_dns_hostnames", TFBool.build(awsVpc.isEnableDnsHostnames())) .argument("enable_classiclink", TFBool.build(false)) .argument("assign_generated_ipv6_block", TFBool.build(vpc.hasIpv6CidrBlockAssociationSet())) .argument("tags", TFMap.build( vpc.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); vpc.cidrBlockAssociationSet().forEach(cidrBlockAssociation -> Resource.builder() .api("aws_vpc_ipv4_cidr_block_association") .name(cidrBlockAssociation.associationId()) .argument("vpc_id", TFString.build(vpc.vpcId())) .argument("cidr_block", TFString.build(cidrBlockAssociation.cidrBlock())) .build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: updateUserInfo() { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); dto.setGroupIds(Arrays.asList(rootGroupId, random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: testRaw() { String u = "http://localhost:5256/static/:path?pa=12&pa=34&pb=afasdf"; QueryCoder qc = new QueryCoder(u);  assertNotEquals(qc.uri(), qc.raw()); "<AssertPlaceHolder>"; }
raw() { return decoder.toString(); }
[*] target: assertEquals(u, qc.raw())
[-] pred: org. junit. Assert. assertEquals ( u, qc. raw() )
************************************
************************************
[+] input: roundTripNoVersion() { final String expression = "http://snomed.info/sct|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertNull(literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
getExpression() { return expression.orElse(CodingLiteral.toLiteral(getValue()));  }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
************************************
[+] input: testHttpTime() { long millis = System.currentTimeMillis();  millis = (millis / 1000) * 1000;  String time = TimeUtil.formatHttpDate(millis);  long millisBack = TimeUtil.parseHttpTime(time);  "<AssertPlaceHolder>"; }
parseHttpTime(final String time) { if (time == null) { return -1; }  try { return TimeUtil.HTTP_DATE_FORMAT.parse(time).getTime(); } catch (ParseException e) { return -1; } }
[*] target: assertEquals(millis, millisBack)
[-] pred: org. junit. Assert. assertEquals ( millis, millisBack )
************************************
************************************
[+] input: testXxeDisabled() { String xml = "<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>" + "<FaceAmount>&xxe;</FaceAmount>"; final MxNode doc = MxNode.parse(xml); "<AssertPlaceHolder>"; }
parse(final String xml) { Objects.requireNonNull(xml, "the XML to parser cannot be null"); Validate.notBlank(xml, "the XML to parser cannot be blank"); try { XMLReader xmlReader = SafeXmlUtils.reader(true, null); final MxNodeContentHandler contentHandler = new MxNodeContentHandler(); xmlReader.setContentHandler(contentHandler); xmlReader.parse(new org.xml.sax.InputSource(new StringReader(xml))); return contentHandler.getRootNode(); } catch (final Exception e) { log.log(Level.SEVERE, "Error parsing XML", e); } return null; }
[*] target: assertNull(doc)
[-] pred: org. junit. Assert. assertNull ( doc )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamRole.cmd")); String actual = exportIamRoles.getTFImport(getRoleList()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRole> awsRoles) { return TFImport.builder() .importLines(awsRoles.stream() .map(awsRole -> TFImportLine.builder() .address(awsRole.getTerraformAddress()) .id(awsRole.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: updateGroup1() { assertThrows(ForbiddenException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); GroupDO group1 = GroupDO.builder().name("测试分组2").info("just for test").build(); groupMapper.insert(group); groupMapper.insert(group1);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; }); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
************************************
[+] input: importFromDescriptor_noDependencies_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertNotNull(dto); assertEquals(descriptorDto.getName(), dto.getName());  ApplicationProperties.Imports.Defaults defaults = applicationProperties.getImports().getDefaults(); assertEquals(defaults.getDescription(), dto.getDescription()); assertEquals(defaults.getImageUrl(), dto.getImageUrl()); assertEquals(defaults.getApiUrl(), dto.getSwaggerUrl()); assertEquals(defaults.getGitUrl(), dto.getGitUrl()); assertEquals(defaults.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(defaults.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(defaults.getTeam().getName(), team.getName()); }
importFromDescriptor(final MicroserviceImportDescriptorDto descriptorDto) { final String name = descriptorDto.getName(); if (StringUtils.isBlank(name)) { throw new ImportException("Microservice name can't be null"); }   final Microservice persistent = microserviceRepository.findByName(name); if (persistent != null) { throw new ImportException(String.format("Microservice with name (%s) already exists. Stopping import", name)); } else { final Microservice microservice = persistMicroservice(descriptorDto); importDependencies(microservice, descriptorDto.getDependencies());  return Optional.of(microserviceMapper.microserviceToDto(microservice)); } }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
************************************
[+] input: importFromDescriptor_overrideDefaultValues_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice 2") .withDescription("Test description") .withImageUrl("Test image url") .withApiUrl("Test api url") .withGitUrl("Test git url") .withCiUrl("Test ci url") .withTeam("Test team") .withStatus("Test status") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertEquals(descriptorDto.getDescription(), dto.getDescription()); assertEquals(descriptorDto.getImageUrl(), dto.getImageUrl()); assertEquals(descriptorDto.getApiUrl(), dto.getSwaggerUrl()); assertEquals(descriptorDto.getGitUrl(), dto.getGitUrl()); assertEquals(descriptorDto.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(descriptorDto.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(descriptorDto.getTeam(), team.getName()); }
importFromDescriptor(final MicroserviceImportDescriptorDto descriptorDto) { final String name = descriptorDto.getName(); if (StringUtils.isBlank(name)) { throw new ImportException("Microservice name can't be null"); }   final Microservice persistent = microserviceRepository.findByName(name); if (persistent != null) { throw new ImportException(String.format("Microservice with name (%s) already exists. Stopping import", name)); } else { final Microservice microservice = persistMicroservice(descriptorDto); importDependencies(microservice, descriptorDto.getDependencies());  return Optional.of(microserviceMapper.microserviceToDto(microservice)); } }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneDraft() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: should_result_millis_when_day() {  var expected = 1 * 24 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1day");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: existsByInvoiceNumber_ReturnFalse_WhenInvoiceNumberNotMatch() { var res = invoiceRepository.existsByInvoiceNumber(-1L);  "<AssertPlaceHolder>"; }
existsByInvoiceNumber(Long invoiceNumber);
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
************************************
[+] input: testDelete1() { Document d = getBaseDocument("/jdocs/sample_1.json"); d.deletePath("$.members[]"); d.deletePath("$.id"); d.deletePath("$.info"); String expected = "{ }"; String actual = d.getPrettyPrintJson(); "<AssertPlaceHolder>"; }
getPrettyPrintJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: DbxException { // given DropboxClient testee = spy(new DropboxClient(dropboxService)); File nonExistingFile = new File("thisFileDoesNotExist.txt");  // when boolean result = testee.upload(nonExistingFile);  // then verifyNoInteractions(dropboxService); verify(testee, never()).doesFileExist(anyString()); "<AssertPlaceHolder>"; }
doesFileExist(String fileName) throws DbxException { ListFolderResult result = dropboxService.files().listFolder(""); return result.getEntries().stream() .anyMatch(entry -> StringUtils.equalsIgnoreCase(entry.getName(), fileName)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: getKeysWithoutIndex() { var one = "1"; var map = new IndexedMap<Integer, String>();  map.put(1, one);  var keys = map.keySet().stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions."<AssertPlaceHolder>"; }
size() { return this.entries.size(); }
[*] target: assertEquals(1, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 1, keys. size() )
************************************
************************************
[+] input: testReader() { String content = "jdk.EvacuationFailed#enabled=true\n" + "# lines can start with comments\n" + "jdk.ClassLoad#threshold=0 ms\n" + "  # and comments can be indented\n" + "jdk.ReservedStackActivation#enabled=true\n";  Map<String, String> expected = new HashMap<>(); expected.put("jdk.EvacuationFailed#enabled", "true"); expected.put("jdk.ClassLoad#threshold", "0 ms"); expected.put("jdk.ReservedStackActivation#enabled", "true");  BufferedReader reader = new BufferedReader(new StringReader(content)); JfrSettingsReader settingsReader = new JfrSettingsReader() { @Override BufferedReader openResource(String resourceName) { return reader; } }; Map<String, String> result = settingsReader.read(); "<AssertPlaceHolder>"; }
read() { return read(DEFAULT_JFR_SETTINGS); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: checkEqualsAddress_true_city_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = "4000"; String cityA = ""; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = "4000"; String cityB = ""; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setCity(null); addressB.setCity(null);   //Assert  "<AssertPlaceHolder>";  }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
************************************
[+] input: supplyFirstNotNullTest_1() { var actual = Utils.supplyFirstNotNull(() -> 1); Assertions."<AssertPlaceHolder>"; }
supplyFirstNotNull(Supplier<T>... suppliers) { if (Objects.isNull(suppliers)) return null; for (var supplier : suppliers) { if (Objects.isNull(supplier)) continue; var result = supplier.get(); if (Objects.nonNull(result)) return result; } return null; }
[*] target: assertEquals(1, actual)
[-] pred: org. junit. Assert. assertEquals ( 1, actual )
************************************
************************************
[+] input: getAssociatedRoute_noRouteAssociated_returnNull() { /* ARRANGE */ final var artifact = getArtifact(); when(routeService.getByOutput(any())).thenReturn(null);  /* ACT */ final var result = artifactRouteService.getAssociatedRoute(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; }
getAssociatedRoute(final ArtifactImpl artifact) { return routeSvc.getByOutput(artifact); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testCountTodaysDiagnosisKeysWithNoKeysFromToday() { //1 hour before today in hours since epoch long midnightToday = now(UTC).toEpochSecond(LocalTime.MIDNIGHT, UTC) / 3600; long oneHourBeforeToday = midnightToday - 1;  final var expKeys = list(buildDiagnosisKeyForSubmissionTimestamp(oneHourBeforeToday)); service.saveDiagnosisKeys(expKeys); int countOnDb = service.countTodaysDiagnosisKeys(); //there should not be an entry for today now "<AssertPlaceHolder>"; }
countTodaysDiagnosisKeys() { final long midnightEpochHours = now(UTC).toEpochSecond(LocalTime.MIDNIGHT, UTC) / SECONDS_PER_HOUR; return keyRepository.countNewerThan(midnightEpochHours); }
[*] target: assertEquals(0, countOnDb)
[-] pred: org. junit. Assert. assertEquals ( 0, countOnDb )
************************************
************************************
[+] input: should_result_true_when_file_version_is_greater() {  final Path file = Path.of("v0003_my-migration.yml");  boolean actual = MigrationLoader.greater(file, "v0002");  "<AssertPlaceHolder>"; }
greater(Path file, String currentVersion){ return versionOf(file) .filter(version -> version.compareTo(currentVersion) > 0) .map(v -> Boolean.TRUE) .orElse(Boolean.FALSE); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: it_recognizes_non_empty_line() { CobolLine line1 = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor);  boolean isEmpty = Interpreter.isEmpty(line1);  "<AssertPlaceHolder>"; }
isEmpty(CobolLine line) { return line.tokensSize() == 0 && !containsOnlyPeriod(line); }
[*] target: assertFalse(isEmpty)
[-] pred: org. junit. Assert. assertFalse ( isEmpty )
************************************
************************************
[+] input: Exception { try (Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:association_nested", "SA", ""); Statement stmt = conn.createStatement()) { stmt.execute("create table folder (id int, name varchar(100), parent_id int)"); stmt.execute("insert into folder (id, name) values(1, 'Root')"); stmt.execute("insert into folder values(2, 'Folder 1', 1)"); stmt.execute("insert into folder values(3, 'Folder 2', 1)"); stmt.execute("insert into folder values(4, 'Folder 2_1', 3)"); stmt.execute("insert into folder values(5, 'Folder 2_2', 3)"); }  /** * Root/ *    Folder 1/ *    Folder 2/ *      Folder 2_1 *      Folder 2_2 */  String resource = "org/apache/ibatis/submitted/association_nested/mybatis-config.xml"; try (InputStream inputStream = Resources.getResourceAsStream(resource)) { SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try (SqlSession session = sqlSessionFactory.openSession()) { FolderMapper postMapper = session.getMapper(FolderMapper.class);  List<FolderFlatTree> folders = postMapper.findWithSubFolders("Root");  Assertions."<AssertPlaceHolder>"; } } }
findWithSubFolders(@Param("name") String name);
[*] target: assertEquals(3, folders.size())
[-] pred: org. junit. Assert. assertEquals ( 3, folders. size ( ) )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.InterfaceNameTestService2", version = "0.9.9", group = null; URL tmpUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/?interface=" + interfaceName + "&version=" + version + "&application=vicpubprovder&side=provider"); metadataReportService.publishServiceDefinition(tmpUrl); Thread.sleep(150); String v = metadataReportService.getServiceDefinition(interfaceName, version, group); Assertions."<AssertPlaceHolder>"; }
getServiceDefinition(String interfaceName, String version, String group) { return getDefaultWritableMetadataService().getServiceDefinition(interfaceName, version, group); }
[*] target: assertNotNull(v)
[-] pred: org. junit. Assert. assertNotNull ( v )
************************************
************************************
[+] input: testDeepCopy() { Document d = getBaseDocument("/jdocs/sample_1.json"); String expected = d.getJson();  Document d1 = d.deepCopy(); d.empty(); String actual = d1.getJson();  "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test6() { int[] arrInitial = {1, 2, 3, 4, 5}; int[] arrExpected = {1, 2, 4, 5}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getAllByArtifactId_validUuid_returnContracts() { /* ARRANGE */ final var contract = new Contract(); final var uuid = UUID.randomUUID(); Mockito.doReturn(List.of(contract)).when(repository).findAllByArtifactId(Mockito.eq(uuid));  /* ACT */ final var result = service.getAllByArtifactId(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(contract, result.get(0)); }
getAllByArtifactId(final UUID artifactId) { Utils.requireNonNull(artifactId, ErrorMessage.ENTITYID_NULL); return ((ContractRepository) getRepository()).findAllByArtifactId(artifactId); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: should_result_millis_when_minute() {  var expected = 1 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1minute");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetDumpOnExit() { String expected = "true"; RecordingOptions opts = new RecordingOptions.Builder().dumpOnExit(expected).build(); "<AssertPlaceHolder>"; }
getDumpOnExit() { return recordingOptions.getOrDefault( Option.DUMP_ON_EXIT.name, Option.DUMP_ON_EXIT.defaultValue); }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
************************************
[+] input: testCenterHeadingEven() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfile", '#', 52); String expected = "###################### TASfile #####################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: should_result_long_number_of_bytes_when_kib_symbol() {  var expected = 1 * 1024l;  var actual = NumberUtil.fromHumanReadable("1KiB");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCustomLinks() { List<CustomLinkConfig> links = testController.getCustomLinks(); "<AssertPlaceHolder>";  for (CustomLinkConfig link : links) { assertNotNull(link.getId());  assertNotNull(link.getHref()); assertFalse(link.getHref().isBlank());  assertNotNull(link.getLabel()); assertFalse(link.getLabel().isBlank());  assertNotNull(link.getLinkType()); } }
getCustomLinks() { return customLinksConfig.getLinks(); }
[*] target: assertNotNull(links)
[-] pred: org. junit. Assert. assertNotNull ( links )
************************************
************************************
[+] input: GestaltException { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertNotNull(configSource.hasList()); assertTrue(configSource.loadList().isEmpty()); }
build() throws GestaltException { return buildPackage(new MapConfigSource(customConfig)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: testSuffixArray2() { int[] arr = {1, 2, 1, 3, 1, 2, 1}; int[] suffixArray = SuffixArrays.buildSuffixArray(arr, 3); int[] expected = {6, 4, 0, 2, 5, 1, 3}; "<AssertPlaceHolder>"; }
buildSuffixArray(int[] arr, int K) { int n = arr.length; int[] s = Arrays.copyOf(arr, n + 3); int[] SA = new int[n]; suffixArray(s, SA, n, K); return SA; }
[*] target: assertArrayEquals(expected, suffixArray)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, suffixArray )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = ArtifactController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = artifactViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, ArtifactController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ agreement.getArtifacts().add(artifact);  /* ACT */ final var artifacts = linker.getInternal(agreement);  /* ASSERT */ final var expected = List.of(artifact); "<AssertPlaceHolder>"; }
getInternal(final Agreement owner) { return owner.getArtifacts(); }
[*] target: assertEquals(expected, artifacts)
[-] pred: org. junit. Assert. assertEquals ( expected, artifacts )
************************************
************************************
[+] input: IOException { String data = "\ud83d\udc49"; String result = DOMUtilities.contentToString(data, true); "<AssertPlaceHolder>"; }
contentToString(String s, boolean isXML11) throws IOException {  StringBuilder result = new StringBuilder(s.length());  final int len = s.length(); int i = 0; while (i < len) { int c = s.codePointAt(i); if (!isXML11 && !isXMLCharacter(c) || isXML11 && !isXML11Character(c)) { throw new IOException("Invalid character"); }  switch (c) { case '<': result.append("&lt;"); break; case '>': result.append("&gt;"); break; case '&': result.append("&amp;"); break; case '"': result.append("&quot;"); break; case ''': result.append("&apos;"); break; default: result.appendCodePoint(c); }  i = s.offsetByCodePoints(i, 1); }  return result.toString(); }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // +System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testStringPaddingOdd() { String actual = SerialiserFlavorBase.createCenteredHeading(null, '#', 51); String expected = "###################################################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { Maps<Resource> resourceMaps = exportEfses.getResourceMaps(getAwsEfs()); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Efs.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSEfs> awsEfses) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSEfs awsEfs : awsEfses) { FileSystemDescription fileSystem = awsEfs.getFileSystemDescription(); resourceMapsBuilder.map( Resource.builder() .api(awsEfs.getTerraformResourceName()) .name(awsEfs.getResourceName()) .argument("encrypted", TFBool.build(fileSystem.encrypted())) .argument("kms_key_id", TFString.build(fileSystem.kmsKeyId())) .argument("performance_mode", TFString.build(fileSystem.performanceModeAsString())) .argument("throughput_mode", TFString.build(fileSystem.throughputModeAsString())) .argument("provisioned_throughput_in_mibps", Optional.ofNullable(fileSystem.provisionedThroughputInMibps()) .map(TFNumber::build).orElse(TFNumber.build(null))) .argument("tags", TFMap.build( fileSystem.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build()) .build();  List<AWSMountTarget> awsMountTargets = awsEfs.getAwsMountTargets(); if (awsMountTargets != null) { awsMountTargets.forEach(awsMountTarget -> { MountTargetDescription mountTarget = awsMountTarget.getMountTarget(); resourceMapsBuilder.map( Resource.builder() .api(awsMountTarget.getTerraformResourceName()) .name(awsMountTarget.getResourceName()) .argument("file_system_id", TFExpression.builder() .expression(MessageFormat.format("aws_efs_file_system.{0}.id", awsEfs.getResourceName())) .build()) .argument("subnet_id", TFExpression.builder() .expression(MessageFormat.format("aws_subnet.{0}.id", mountTarget.subnetId())) .build()) .build()) .build(); } );  }  AWSFileSystemPolicy awsFileSystemPolicy = awsEfs.getAwsFileSystemPolicy(); if (awsFileSystemPolicy != null) { resourceMapsBuilder.map( Resource.builder() .api(awsFileSystemPolicy.getTerraformResourceName()) .name(awsFileSystemPolicy.getResourceName()) .argument("file_system_id", TFExpression.builder() .expression(MessageFormat.format("aws_efs_file_system.{0}.id", awsEfs.getResourceName())) .build()) .argument("policy", TFString.builder().isMultiline(true).value( JsonUtils.toPrettyFormat(awsFileSystemPolicy.getFileSystemPolicy())) .build()) .build()) .build(); }  AWSBackupPolicy awsBackupPolicy = awsEfs.getAwsBackupPolicy(); if (Optional.ofNullable(awsBackupPolicy).isPresent()) { resourceMapsBuilder.map( Resource.builder() .api(awsBackupPolicy.getTerraformResourceName()) .name(awsBackupPolicy.getResourceName()) .argument("file_system_id", TFExpression.builder() .expression(MessageFormat.format("aws_efs_file_system.{0}.id", awsEfs.getResourceName())) .build()) .argument("backup_policy", TFMap.builder() .map("status", TFString.build(awsBackupPolicy.getBackupPolicy().statusAsString())) .build()) .build()) .build(); } } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getCopyWithoutRelations_expectedNotNull() { Cycle actualCycle = expectedCycle.getCopyWithoutRelations();  "<AssertPlaceHolder>"; }
getCopyWithoutRelations() { Cycle copy = new Cycle(); copy.setName(getName()); copy.setPlannedStartDate(getPlannedStartDate()); copy.setPlannedEndDate(getPlannedEndDate()); copy.setFactualStartDate(getFactualStartDate()); copy.setFactualEndDate(getFactualEndDate()); copy.setCycleState(getCycleState()); copy.setVisible(isVisible()); return copy; }
[*] target: assertNotNull(actualCycle)
[-] pred: org. junit. Assert. assertNotNull ( actualCycle )
************************************
************************************
[+] input: buildUsageNotification() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_NOTIFICATION, null, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testResolveFixArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); }  @Override protected Object resolveFixedArg(MethodParam parameter, AsyncRequest request, AsyncResponse response) { return "foo"; } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); //noinspection unchecked when(param.type()).thenReturn((Class) Object.class); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, null); when(mock.params()).thenReturn(params);  final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
resolveArguments(AsyncRequest request, AsyncResponse response) { HandlerAdapter.ResolvableParam[] params = handlerAdapter.params(); Object[] args = new Object[params.length]; //resolve parameters one by one for (int i = 0; i < params.length; i++) { HandlerAdapter.ResolvableParam resolvable = params[i]; args[i] = resolveFixedArg(resolvable.param, request, response); //resolve args with resolver if (args[i] == null) { if (resolvable.resolver != null) { //it may return a null value try { args[i] = resolvable.resolver.resolve(request, response); } catch (Exception e) { //wrap exception throw WebServerException.wrap(e); } continue; } if (args[i] == null) { throw WebServerException.badRequest( StringUtils.concat("Could not resolve method parameter at index ", String.valueOf(resolvable.param.index()), " in ", resolvable.param.method() + ": No suitable resolver for argument of type '", resolvable.param.type().getName(), "'")); } } } return args; }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), senderKeys, 1);  // should be assertFalse "<AssertPlaceHolder>"; }
isValidForRemoveOperation() {  // Same requirements as add() boolean result = this.isValidForAddOperation();  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForRemoveOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: testGetRandomKeyForMaxFrequencyWithTwoAfterDelete() { MapWithRandomKeyForMostFrequentValue<String, String> map = new MapWithRandomKeyForMostFrequentValue<>(); map.put("a", "b"); map.put("c", "b"); map.put("e", "f"); map.put("g", "f"); map.put("i", "h"); map.put("k", "h"); map.remove("k");  Set<String> expected = Set.of("a", "c", "e", "g"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 1000; i++) actual.add(map.getRandomKeyWithMaxFrequency()); "<AssertPlaceHolder>"; }
getRandomKeyWithMaxFrequency() { if (maxFrequency == 0) return null; return countToKeys.get(maxFrequency).getRandom().getRandom(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { List<AWSBucket> awsBuckets = getAwsBuckets();  Maps<Resource> resourceMaps = exportS3Buckets.getResourceMaps(awsBuckets); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/S3Bucket.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSBucket> awsBuckets) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSBucket awsBucket : awsBuckets) { Bucket bucket = awsBucket.getBucket(); GetBucketAclResponse acl = awsBucket.getAcl(); GetBucketWebsiteResponse bucketWebsite = awsBucket.getWebsite(); GetBucketVersioningResponse bucketVersioning = awsBucket.getVersioning(); GetBucketLoggingResponse bucketLogging = awsBucket.getLogging(); List<LifecycleRule> lifecycleRules = awsBucket.getLifecycleRules(); log.debug("Optional.ofNullable(lifecycleRules).isPresent()={}", Optional.ofNullable(lifecycleRules).isPresent()); ReplicationConfiguration replication = awsBucket.getReplication(); GetBucketEncryptionResponse encryption = awsBucket.getEncryption(); GetObjectLockConfigurationResponse objectLock = awsBucket.getObjectLock(); List<Tag> tags = awsBucket.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsBucket.getTerraformResourceName()) .name(awsBucket.getResourceName()) .argument("bucket", TFString.build(bucket.name())) .argumentsIf(Optional.ofNullable(acl).isPresent(), "grant", () -> acl.grants().stream() .map(grant -> TFBlock.builder() .argumentIf(grant.grantee().typeAsString().equals("CanonicalUser"), "id", TFString.build(grant.grantee().id())) .argument("type", TFString.build(grant.grantee().typeAsString())) .argument("permission", TFList.build( List.of(TFString.builder().isLineIndent(false) .value(grant.permissionAsString()).build()))) .argumentIf(grant.grantee().typeAsString().equals("Group"), "uri", TFString.build(grant.grantee().uri())) .build() ) .collect(Collectors.toList())) .argumentIf(Optional.ofNullable(bucketWebsite).isPresent(), "website", () -> TFBlock.builder() .argument("index_document", TFString.build(bucketWebsite.indexDocument().toString())) .argument("error_document", TFString.build(bucketWebsite.errorDocument().toString())) .argument("routing_rules ", TFList.builder() .lists(bucketWebsite.routingRules().stream() .map(routingRule -> TFString.builder() .value(routingRule.toString()) .build()) .collect(Collectors.toList())) .build()) .build() ) .argumentIf(Optional.ofNullable(bucketVersioning).isPresent() && Optional.ofNullable(bucketVersioning.status()).isPresent(), "versioning", () -> TFBlock.builder() .argument("enabled", TFBool.build(BucketVersioningStatus.ENABLED == bucketVersioning.status())) .build()) .argumentIf(Optional.ofNullable(bucketLogging).isPresent() && Optional.ofNullable(bucketLogging.loggingEnabled()).isPresent(), "logging", () -> TFBlock.builder() .argument("target_bucket", TFString.build(bucketLogging.loggingEnabled().targetBucket())) .argument("target_prefix", TFString.build(bucketLogging.loggingEnabled().targetPrefix())) .build()) .argumentsIf(Optional.ofNullable(lifecycleRules).isPresent(), "lifecycle_rule", () -> lifecycleRules.stream() .peek(lifecycleRule -> log.debug("lifecycleRule.filter()=>{}", lifecycleRule.filter())) .map(lifecycleRule -> TFBlock.builder() .argument("id", TFString.build(lifecycleRule.id())) .argument("prefix", TFString.build(lifecycleRule.filter().prefix())) .argumentIf(Optional.ofNullable(lifecycleRule.filter().tag()).isPresent(), "tags", () -> TFMap.builder() .map(lifecycleRule.filter().tag().key(), TFString.build(lifecycleRule.filter().tag().value())) .build()) .argumentIf(Optional.ofNullable(lifecycleRule.filter().tag()).isEmpty(), "tags", TFMap::empty) .argument("enabled", TFBool.build(lifecycleRule.status() == ExpirationStatus.ENABLED)) .argumentIf(Optional.ofNullable(lifecycleRule.abortIncompleteMultipartUpload()).isPresent(), "abort_incomplete_multipart_upload_days", () -> TFNumber.build(lifecycleRule.abortIncompleteMultipartUpload() .daysAfterInitiation())) .argumentIf(Optional.ofNullable(lifecycleRule.expiration()).isPresent(), "expiration", () -> TFBlock.builder() .argumentIf(Optional.ofNullable(lifecycleRule.expiration().days()).isPresent(), "days", TFNumber.build(lifecycleRule.expiration().days())) .argumentIf(Optional.ofNullable(lifecycleRule.expiration().days()).isPresent(), "date", TFString.build(lifecycleRule.expiration().date().toString())) .build()) .argumentIf(Optional.ofNullable(lifecycleRule.noncurrentVersionExpiration()).isPresent(), "noncurrent_version_expiration", () -> TFObject.builder().member("days", TFNumber.build(lifecycleRule.noncurrentVersionExpiration().noncurrentDays())) .build()) .argumentsIf(Optional.ofNullable(lifecycleRule.noncurrentVersionTransitions()).isPresent(), "noncurrent_version_transition", lifecycleRule.noncurrentVersionTransitions().stream() .map(transition -> TFObject.builder() .member("days", TFNumber.build(transition.noncurrentDays())) .member("storage_class", TFString.build(transition.storageClassAsString())) .build()) .collect(Collectors.toList())) .build()) .collect(Collectors.toList()))  .argument("acceleration_status", TFString.builder().value(awsBucket.getAccelerateConfiguration().statusAsString()).build()) .argument("request_payer", TFString.builder().value(awsBucket.getRequestPayment().payerAsString()).build()) .argumentIf(Optional.ofNullable(replication).isPresent(), "replication_configuration", () -> { List<ReplicationRule> rules = replication.rules(); return TFBlock.builder() .argument("role", TFString.builder().value(replication.role()).build()) .argumentsIf(Optional.ofNullable(rules).isPresent(), "rules", rules.stream() .map(rule -> TFBlock.builder() .argument("id", TFString.build(rule.id())) .argument("prefix", TFString.build(rule.filter().prefix())) .argument("status", TFString.build(rule.status().toString())) .argument("destination", TFBlock.builder() .argument("bucket", TFString.build(rule.destination().bucket())) .argument("storage_class", TFString.build(rule.destination().storageClassAsString())) .build()) .build()) .collect(Collectors.toList())) .build(); }) .argumentIf(Optional.ofNullable(encryption).isPresent(), "server_side_encryption_configuration", () -> { List<ServerSideEncryptionRule> rules = encryption.serverSideEncryptionConfiguration().rules(); return TFBlock.builder() .argumentsIf(Optional.ofNullable(rules).isPresent(), "rule", () -> rules.stream() .map(rule -> TFBlock.builder() .argumentIf(Optional.ofNullable(rule.applyServerSideEncryptionByDefault()).isPresent(), "apply_server_side_encryption_by_default", TFBlock.builder() .argument("kms_master_key_id", TFString.build(rule.applyServerSideEncryptionByDefault().kmsMasterKeyID())) .argument("sse_algorithm", TFString.build(rule.applyServerSideEncryptionByDefault().sseAlgorithmAsString())) .build()) .build()) .collect(Collectors.toList())) .build(); }) .argumentIf(Optional.ofNullable(objectLock).isPresent(), "object_lock_configuration", () -> { ObjectLockConfiguration objectLockConfiguration = objectLock.objectLockConfiguration(); return TFBlock.builder() .argument("object_lock_enabled", TFString.build(objectLockConfiguration.objectLockEnabledAsString())) .argumentIf(Optional.ofNullable(objectLockConfiguration.rule()).isPresent(), "rule", () -> { DefaultRetention defaultRetention = objectLockConfiguration.rule().defaultRetention(); return TFBlock.builder() .argument("default_retention", TFBlock.builder() .argument("mode", TFString.build(defaultRetention.modeAsString())) .argumentIf(Optional.ofNullable(defaultRetention.days()).isPresent(), "days", TFNumber.build(defaultRetention.days())) .argumentIf(Optional.ofNullable(defaultRetention.years()).isPresent(), "years", TFNumber.build(defaultRetention.years())) .build()) .build(); }) .build(); }) .argumentIf(Optional.ofNullable(awsBucket.getPolicy()).isPresent(), "policy", () -> TFString.builder().isMultiline(true) .value(JsonUtils.toPrettyFormat(awsBucket.getPolicy())) .build()) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build()); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(application, revision); Gson gson = new Gson(); String r = gson.toJson(Arrays.asList(url)); etcdMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, r);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(subscriberMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = etcdMetadataReport.doGetSubscribedURLs(subscriberMetadataIdentifier); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, r); }
doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) { return etcdClient.getKVValue(getNodeKey(subscriberMetadataIdentifier)); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: removeHouseFromCommunityByHouseIdCommunityNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(null, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository, never()).findByHouseId(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
removeHouseFromCommunityByHouseId(Community community, String houseId) { if (community == null) { return false; } else { Optional<CommunityHouse> houseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return houseOptional.map(house -> { Set<CommunityHouse> houses = community.getHouses(); houses.remove( house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work  Set<String> memberIds = house.getHouseMembers() .stream() .map(HouseMember::getMemberId) .collect( Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house  memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));  communityRepository.save(community); communityHouseRepository.deleteByHouseId(houseId); return true; }).orElse(false); } }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: testInvalid() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = "12345"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("12345", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<String> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final int valueLength = metadata.getRawValue().length(); if (valueLength < minLength) { final String message = "String value of Property '" + metadata.getName() + "' must have a minimum " + "length of '" + minLength + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: generatorTest() { MainConfig config = new MainConfig(); config.setKeyManagementProfile(new KeyManagementProfile()); config.getKeyManagementProfile().setKeyGeneratorProfile(new KeyGeneratorProfile()); config.getKeyManagementProfile().getKeyGeneratorProfile().setKeySize(2048);  RsaKeyGenerator underTest = new RsaKeyGenerator(config);  KeyGenerator.GeneratedKey key = underTest.generateJWTSigningKey(); "<AssertPlaceHolder>"; assertNotNull(key.keyPair); assertNotNull(key.getKeyUsedToVerify()); }
generateJWTSigningKey() { int keySize = config.getKeyManagementProfile().getKeyGeneratorProfile().getKeySize(); try { KeyPairGenerator factory = KeyPairGenerator.getInstance("RSA"); factory.initialize(keySize); KeyPair newPair = factory.generateKeyPair(); return new GeneratedKey(newPair); } catch (NoSuchAlgorithmException e) { throw new ConfigurationException("Configured keySize in KeyGeneratorProfile of MainConfig is not working for algorithm RSA. Configured size: " + keySize, e); }  }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
************************************
[+] input: IOException { File dir = tempFolder.newFolder("xyz"); dir.delete(); String path = "file://" + dir.getPath() + "/1/2"; Resource resource = resourceLoader.getResource(path, true); "<AssertPlaceHolder>"; }
getResource(String location, boolean createIfNotExists);
[*] target: assertNotNull(resource)
[-] pred: org. junit. Assert. assertNotNull ( resource )
************************************
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new EntireBufferByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
read(ByteBuffer dst) throws IOException { synchronized (mutex) { if (closed) { throw new ClosedChannelException(); } int result = 0; while (dst.hasRemaining()) { int outputSize = decode(); if (outputSize <= 0) { return result == 0 ? outputSize : result; } result += consume(dst); } return result; } }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: sendMessage_protocolIdscp_returnResponseEntityFromErrorRoute() { /* ARRANGE */ final var errorMessage = "Error message."; final var response = new ResponseEntity<Object>(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR);  when(producerTemplate.send(anyString(), any(Exchange.class))).thenReturn(exchange); when(exchange.getIn()).thenReturn(in); when(in.getBody(ResponseEntity.class)).thenReturn(response); when(connectorConfig.isIdscpEnabled()).thenReturn(true);  /* ACT */ final var responseEntity = controller .sendMessage(URI.create("https://recipient.com"), null);  /* ASSERT */ "<AssertPlaceHolder>"; }
sendMessage( @Parameter(description = "The recipient url.", required = true) @RequestParam("recipient") final URI recipient, @Parameter(description = "The id of the requested resource.") @RequestParam(value = "elementId", required = false) final URI elementId) { String payload; if (connectorConfig.isIdscpEnabled()) { final var result = template.send("direct:descriptionRequestSender", ExchangeBuilder.anExchange(context) .withProperty(ParameterUtils.RECIPIENT_PARAM, recipient) .withProperty(ParameterUtils.ELEMENT_ID_PARAM, elementId) .build());  final var response = result.getIn().getBody(Response.class); if (response != null) { payload = response.getBody(); } else { final var body = toObjectResponse(result.getIn().getBody(ResponseEntity.class)); return Objects.requireNonNullElseGet(body, () -> new JsonResponse( "An error occurred.").create(HttpStatus.INTERNAL_SERVER_ERROR)); } } else { try { // Send and validate description request/response message. final var response = descriptionReqSvc.sendMessage(recipient, elementId);  // Read and process the response message. payload = MessageUtils.extractPayloadFromMultipartMessage(response); } catch (MessageException exception) { // If the message could not be built. return ResponseUtils.respondIdsMessageFailed(exception); } catch (MessageResponseException | IllegalArgumentException e) { // If the response message is invalid or malformed. return ResponseUtils.respondReceivedInvalidResponse(e); } catch (UnexpectedResponseException e) { // If the response is not as expected. return ResponseUtils.respondWithContent(e.getContent()); } }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.parseMediaType(ContentType.JSON_LD));  return new ResponseEntity<>(convertToAnswer(elementId, payload), headers, HttpStatus.OK); }
[*] target: assertEquals(response, responseEntity)
[-] pred: org. junit. Assert. assertEquals ( response, responseEntity )
************************************
************************************
[+] input: IOException { // due to ISO-8859-1 encoding final String expected = "Jodd - The Unbearable Lightness of Java - Ã¼Ã¤Ã¶Ã\u009FÃ\u009CÃ\u0084Ã\u0096";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm(), StandardCharsets.ISO_8859_1);  // Asserts "<AssertPlaceHolder>"; }
downloadString(final String url, final Charset encoding) throws IOException { try (final InputStream inputStream = new URL(url).openStream()) { return new String(IOUtil.readChars(inputStream, encoding)); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test_fetchNameWithSingleAliveAndMultipleArchived_ok() { Random rand = new Random(); int times = rand.nextInt(5) + 5; for (int time = 1; time <= times; time++) { TaskDefinition taskDefinitionTemp = MockTaskDefinitionFactory.createTaskDefinition(); taskDefinitionTemp = taskDefinitionTemp.cloneBuilder() .withName("test") .build(); taskDefinitionDao.create(taskDefinitionTemp); if (time == times) break; taskDefinitionDao.archive(taskDefinitionTemp.getDefinitionId()); } Optional<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test").stream() .findAny(); "<AssertPlaceHolder>"; assertTrue(fetched.get().getName().equals("test")); }
fetchAliveTaskDefinitionByName(String taskName) { String sql = getSelectSQL(TASK_DEF_MODEL_NAME + ".name = ?"); return jdbcTemplate.query(sql, TaskDefinitionMapper.INSTANCE, taskName).stream() .filter(taskDef -> !taskDef.isArchived()) .collect(Collectors.toList()); }
[*] target: assertTrue(fetched.isPresent())
[-] pred: org. junit. Assert. assertTrue ( fetched. isPresent ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/KmsKey.cmd")); String actual = exportKmsKeys.getTFImport(getAwsKmsKeys()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSKmsKey> awsKmsKeys) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder();  awsKmsKeys.forEach(awsKmsKey -> { tfImportBuilder.importLine(TFImportLine.builder() .address(awsKmsKey.getTerraformAddress()) .id(awsKmsKey.getResourceId()) .build());  List<AWSKmsAlias> awsKmsAliases = awsKmsKey.getAwsKmsAliases(); awsKmsAliases.forEach(awsKmsAlias -> tfImportBuilder.importLine(TFImportLine.builder() .address(awsKmsAlias.getTerraformAddress()) .id(awsKmsAlias.getResourceId()) .build()) ); } ); return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test1() { int[] arrInitial = {}; int[] arrExpected = {}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: createFromIntArgbPre() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_ARGB_PRE); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntArgbPre(data, width, height); "<AssertPlaceHolder>"; }
createFromIntArgbPre(int[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferInt(data, data.length); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_INT_ARGB_PRE, null); return new BufferedImage(COLOR_MODEL_INT_ARGB_PRE, raster, true, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: shouldGetDecryptedData() { // given var fakeData = MetricCsvFixture.MOCK_METRIC_CSV_DATA_WITH_ONE_PIPELINE(); String jsonFakeData = new Gson().toJson(fakeData); String randomIv = encryptDecryptUtil.getRandomIv(); when(systemUtil.getEnvMap()).thenReturn(envMap); String secretKey = encryptDecryptUtil.getSecretKey("fakePassword"); String encryptedData = encryptDecryptUtil.getEncryptedData(randomIv, secretKey, jsonFakeData); // when String configData = encryptDecryptUtil.getDecryptedData(randomIv, secretKey, encryptedData); // then "<AssertPlaceHolder>"; }
getDecryptedData(String iv, String secretKey, String encryptedConfigData) { try { byte[] ivByteList = convertByteList(iv); byte[] secretKeyByteList = convertByteList(secretKey); Cipher cipher = obtainAesAlgorithm(secretKeyByteList, ivByteList, Cipher.DECRYPT_MODE); byte[] encryptedDataBytes = Base64.getDecoder().decode(encryptedConfigData); byte[] decryptedDataBytes = cipher.doFinal(encryptedDataBytes); return new String(decryptedDataBytes, StandardCharsets.UTF_8); } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException e) { log.error("Failed to decryptedData, because of encryption algorithm acquisition error"); throw new EncryptDecryptProcessException("Decrypted data failed"); } catch (Exception e) { log.error("Failed to decryptedData, because of e: {}", e.getMessage()); throw new DecryptDataOrPasswordWrongException("Incorrect password", HttpStatus.UNAUTHORIZED.value()); } }
[*] target: assertEquals(jsonFakeData, configData)
[-] pred: org. junit. Assert. assertEquals ( jsonFakeData, configData )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: shouldCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList("org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors"); first = System.identityHashCode(authors); session.commit(); // commit should not be required for read/only activity. } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList("org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors"); second = System.identityHashCode(authors); } "<AssertPlaceHolder>"; }
selectList(String statement);  /** * Retrieve a list of mapped objects from the statement key and parameter. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter);  /** * Retrieve a list of mapped objects from the statement key and parameter, * within the specified row bounds. * @param <E> the returned list element type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return List of mapped object */ <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * Eg. Return a of Map[Integer,Author] for selectMap("selectAuthors","id") * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
************************************
[+] input: testAddZeroCount() {  final Layout layout = new TestLayout(-100, 100); final Histogram histogram = modify(create(layout)).addValue(2.4, 0).done();  "<AssertPlaceHolder>";  testSerialization(layout, histogram); }
isEmpty() { return getTotalCount() == 0; }
[*] target: assertTrue(histogram.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( histogram. isEmpty() )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRepository> awsRepositories = getRepositories();  Maps<Resource> resourceMaps = exportEcrRepositories.getResourceMaps(awsRepositories); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/EcrRepository.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRepository> awsRepositories) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSRepository awsRepository : awsRepositories) { Repository repository = awsRepository.getRepository(); resourceMapsBuilder.map( Resource.builder() .api(awsRepository.getTerraformResourceName()) .name(awsRepository.getResourceName()) .argument("name", TFString.build(repository.repositoryName())) .argument("encryption_configuration", TFMap.builder() .map("encryption_type", TFString.build(repository.encryptionConfiguration().encryptionType().toString())) .map("kms_key", TFString.build(repository.encryptionConfiguration().kmsKey())) .build()) .argument("image_tag_mutability", TFString.build(repository.imageTagMutability().toString())) .argument("image_scanning_configuration", TFMap.builder() .map("scan_on_push", TFBool.build(repository.imageScanningConfiguration().scanOnPush())) .build()) .build()) .build(); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: mapDtoToEntity_expects_TextIsMapped() { String expected = "An Example for a text"; noteObjectiveDto.setNoteBody(expected); noteObjective = noteObjectiveMapper.mapDtoToEntity(noteObjectiveDto); "<AssertPlaceHolder>"; }
mapDtoToEntity(NoteObjectiveDto input) {  NoteObjective noteObjective = noteToNoteObjective(mapNoteDtoToEntity(input)); Objective parentObjective = null;  if (input.getParentObjectiveId() != null) {  parentObjective = new Objective(); parentObjective.setId(input.getParentObjectiveId()); } noteObjective.setParentObjective(parentObjective);  return noteObjective; }
[*] target: assertEquals(expected, noteObjective.getText())
[-] pred: org. junit. Assert. assertEquals ( expected, noteObjective. getText ( ) )
************************************
************************************
[+] input: shouldDeleteAuthorUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { AuthorMapper mapper = session.getMapper(AuthorMapper.class); int count = mapper.deleteAuthor(101); "<AssertPlaceHolder>"; assertNull(mapper.selectAuthor(101)); } }
getMapper(Class<T> type);
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
parse(String text) { if (text == null || text.isEmpty()) { return ""; } // search open token int start = text.indexOf(openToken); if (start == -1) { return text; } char[] src = text.toCharArray(); int offset = 0; final StringBuilder builder = new StringBuilder(); StringBuilder expression = null; while (start > -1) { if (start > 0 && src[start - 1] == '\') { // this open token is escaped. remove the backslash and continue. builder.append(src, offset, start - offset - 1).append(openToken); offset = start + openToken.length(); } else { // found open token. let's search close token. if (expression == null) { expression = new StringBuilder(); } else { expression.setLength(0); } builder.append(src, offset, start - offset); offset = start + openToken.length(); int end = text.indexOf(closeToken, offset); while (end > -1) { if (end > offset && src[end - 1] == '\') { // this close token is escaped. remove the backslash and continue. expression.append(src, offset, end - offset - 1).append(closeToken); offset = end + closeToken.length(); end = text.indexOf(closeToken, offset); } else { expression.append(src, offset, end - offset); break; } } if (end == -1) { // close token was not found. builder.append(src, start, src.length - start); offset = src.length; } else { builder.append(handler.handleToken(expression.toString())); offset = end + closeToken.length(); } } start = text.indexOf(openToken, offset); } if (offset < src.length) { builder.append(src, offset, src.length - offset); } return builder.toString(); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse( input. toString ( ) ) )
************************************
************************************
[+] input: putObjectAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.put(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: shouldStoreReviewWhenReviewQualityIsGoodAndBookIsPresent() {  BookReviewRequest bookReviewRequest = new BookReviewRequest("Title", "GOOD CONTENT!", 1);  when(bookRepository.findByIsbn(ISBN)).thenReturn(new Book()); when(mockedReviewVerifier.doesMeetQualityStandards(bookReviewRequest.getReviewContent())) .thenReturn(true); when(userService.getOrCreateUser(USERNAME, EMAIL)).thenReturn(new User()); when(reviewRepository.save(any(Review.class))) .thenAnswer( invocation -> { Review reviewToSave = invocation.getArgument(0); reviewToSave.setId(42L); return reviewToSave; });  Long result = cut.createBookReview(ISBN, bookReviewRequest, USERNAME, EMAIL);  Long expected = 42L; "<AssertPlaceHolder>"; }
createBookReview( String isbn, BookReviewRequest bookReviewRequest, String userName, String email) {  Book book = bookRepository.findByIsbn(isbn);  if (book == null) { throw new IllegalArgumentException("Book not found"); }  if (reviewVerifier.doesMeetQualityStandards(bookReviewRequest.getReviewContent())) { Review review = new Review();  review.setBook(book); review.setContent(bookReviewRequest.getReviewContent()); review.setTitle(bookReviewRequest.getReviewTitle()); review.setRating(bookReviewRequest.getRating()); review.setUser(userService.getOrCreateUser(userName, email)); review.setCreatedAt(LocalDateTime.now());  review = reviewRepository.save(review);  return review.getId(); } else { throw new BadReviewQualityException("Not meeting standards"); } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: tangentLinesForTwoCircles1() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 9, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(0.0, lines.get(0)[0], 1e-6); assertEquals(1.0, lines.get(0)[1], 1e-6); assertEquals(4.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(-1.0, lines.get(1)[1], 1e-6); assertEquals(6.0, lines.get(1)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(2, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 2, lines. size ( ) )
************************************
************************************
[+] input: ParseException { AuthenticationRequestParams params = AuthenticationRequestParams .create(VALID_HOSTNAME, credentials, UserAgentUtils.getUserAgentValue()); AWS4SignedPayloadGenerator generator = new AWS4SignedPayloadGenerator(); byte[] signedPayload = generator.signedPayload(params);  "<AssertPlaceHolder>"; SignedPayloadValidatorUtils.validatePayload(signedPayload, params); }
signedPayload(@NonNull AuthenticationRequestParams params) throws PayloadGenerationException { final SdkHttpFullRequest request = presignRequest(params);  try { return toPayloadBytes(request, params); } catch (IOException e) { throw new PayloadGenerationException("Failure to create authentication payload ", e); } }
[*] target: assertNotNull(signedPayload)
[-] pred: org. junit. Assert. assertNotNull ( signedPayload )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry has the correct receiversPubKey for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for removing MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getOwnerPubKey() != null && mailboxStoragePayload.getOwnerPubKey().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedMailboxStorageEntry::isValidForRemoveOperation() failed. " + "Entry owner does not match Payload owner:\nProtectedStorageEntry={}\n" + "PayloadOwner={}", res1, res2); }  return result; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-domain.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("fi#test.pdf", indexes.get(i).get(SK).s()); assertEquals("test.pdf", indexes.get(i).get("path").s()); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: deleteBookingNotExists() { // given given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.empty());  // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
deleteBooking(String amenityId, String bookingId) { Optional<AmenityBookingItem> booking = bookingRepository.findByAmenityBookingItemId(bookingId); return booking.map(bookingItem -> { boolean amenityFound = bookingItem.getAmenity().getAmenityId().equals(amenityId); if (amenityFound) { bookingRepository.delete(bookingItem); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
************************************
[+] input: shouldGetAndSetAttributes() { var user = new LegacyUser(); var expectedValue = Map.of("attribute1", singletonList("value1")); user.setAttributes(expectedValue); "<AssertPlaceHolder>"; }
getAttributes() { return attributes; }
[*] target: assertEquals(expectedValue, user.getAttributes())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getAttributes() )
************************************
************************************
[+] input: getGrantedPermissions_restrictedUserAllFacilities_restrictedPermissionsAllFacilities() { Set<UserPermission> permissions = makeHolder(EnumSet.of(OrganizationRole.ENTRY_ONLY, OrganizationRole.ALL_FACILITIES)) .getGrantedPermissions(); Set<UserPermission> expected = EnumSet.of( UserPermission.START_TEST, UserPermission.UPDATE_TEST, UserPermission.SUBMIT_TEST, UserPermission.SEARCH_PATIENTS, UserPermission.ACCESS_ALL_FACILITIES); "<AssertPlaceHolder>"; }
getGrantedPermissions() { return getPermissionsFromRoles(getGrantedRoles()); }
[*] target: assertEquals(expected, permissions)
[-] pred: org. junit. Assert. assertEquals ( expected, permissions )
************************************
************************************
[+] input: should_result_alternative_config_file() {  var expected = new File("./src/test/resources/.kattlo.yaml"); String[] args = { "--config-file=./src/test/resources/.kattlo.yaml", "--kafka-config-file=./src/test/resources/kafka.properties", "--bootstrap-servers=" + expected, "topic", "--directory=." };  var command = new CommandLine(entry);  command.execute(args);  //assert EntryCommand actualCommand = command.getCommand(); var actual = actualCommand.getConfiguration();  "<AssertPlaceHolder>"; }
getConfiguration() {  this.configuration = Optional.ofNullable(configuration) .filter(Objects::nonNull) .orElseGet(() -> new File(DEFAULT_CONFIG_FILE));  if(this.configuration.exists()){ return configuration; } else { throw new CommandLine. ParameterException(spec.commandLine(), configuration.getAbsolutePath() + " not found"); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Rds.cmd")); String actual = exportRdsClusters.getTFImport(getAwsRdsClusters()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRdsCluster> awsRdsClusters) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder(); awsRdsClusters.forEach(awsRdsCluster -> { List<AWSRdsInstance> awsRdsInstances = awsRdsCluster.getAwsRdsInstances(); tfImportBuilder.importLine(TFImportLine.builder() .address(awsRdsCluster.getTerraformAddress()) .id(awsRdsCluster.getResourceId()) .build() ); awsRdsInstances.forEach(awsRdsInstance -> tfImportBuilder.importLine(TFImportLine.builder() .address(awsRdsInstance.getTerraformAddress()) .id(awsRdsInstance.getResourceId()) .build() ) ); } ); return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: requestResetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); given(securityTokenService.createPasswordResetToken(user)) .willReturn(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(mailService.sendPasswordRecoverCode(user, testSecurityToken.getToken())) .willReturn(true);  // when boolean resetRequested = userService.requestResetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(getUserSecurityToken(user, SecurityTokenType.RESET), testSecurityToken); verify(securityTokenService).createPasswordResetToken(user); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(userRepository).save(user); verify(mailService).sendPasswordRecoverCode(user, testSecurityToken.getToken()); }
requestResetPassword(ForgotPasswordRequest forgotPasswordRequest) { return Optional.ofNullable(forgotPasswordRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(email -> userRepository.findByEmailWithTokens(email) .map(user -> { SecurityToken newSecurityToken = securityTokenService.createPasswordResetToken(user); user.getUserTokens().add(newSecurityToken); userRepository.save(user); return mailService.sendPasswordRecoverCode(user, newSecurityToken.getToken()); })) .orElse(false); }
[*] target: assertTrue(resetRequested)
[-] pred: org. junit. Assert. assertTrue ( resetRequested )
************************************
************************************
[+] input: Exception { Properties p = ConfigUtils.loadProperties("properties.load", false);  Properties expected = new Properties(); expected.put("a", "12"); expected.put("b", "34"); expected.put("c", "56");  "<AssertPlaceHolder>"; }
loadProperties(String fileName, boolean allowMultiFile) { return loadProperties(fileName, allowMultiFile, false); }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
************************************
[+] input: select1asATest() { ClickHouseAliasOperation oneConstAsA = new ClickHouseAliasOperation(new ClickHouseInt8Constant(1), "a"); ClickHouseSelect selectOne = new ClickHouseSelect(); selectOne.setFetchColumns(Arrays.asList(oneConstAsA)); String result = ClickHouseVisitor.asString(selectOne); String answer = "SELECT 1 AS `a`"; "<AssertPlaceHolder>"; }
asString(ClickHouseExpression expr) { ClickHouseToStringVisitor visitor = new ClickHouseToStringVisitor(); visitor.visit(expr); return visitor.get(); }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
************************************
[+] input: GestaltException { String config = "db.port = 1234\ndb.password = password\ndb.user = notroot"; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  assertNotNull(builder.getConfig()); assertEquals(format, builder.getFormat()); ConfigSourcePackage configSourcePackage = builder.build();  "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
build() throws GestaltException { return buildPackage(new InputStreamConfigSource(config, format)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: given_an_unavailable_object_when_redis_contains_then_return_false() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key1");  //When Boolean isContain = redisIdempotentRepository.contains(idempotencyKey);  //Then verify(valueOperations, times(1)).get(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
contains(IdempotencyKey idempotencyKey) { return valueOperations.get(idempotencyKey.getKeyValue()) != null; }
[*] target: assertFalse(isContain)
[-] pred: org. junit. Assert. assertFalse ( isContain )
************************************
************************************
[+] input: get_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var uuid = UUID.randomUUID();  Mockito.doReturn(new GenericEndpoint()).when(generic).get(uuid);  /* ACT */ final var result = serviceProxy.get(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
get(final UUID entityId) { try { return generic.get(entityId); } catch (ResourceNotFoundException ignored) { } return app.get(entityId); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRdsOptionGroup> awsRdsOptionGroups = getAwsRdsOptionGroups();  Maps<Resource> resourceMaps = exportRdsOptionGroups.getResourceMaps(awsRdsOptionGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsOptionGroup.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRdsOptionGroup> awsRdsOptionGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsRdsOptionGroups.forEach(awsRdsOptionGroup -> { OptionGroup optionGroup = awsRdsOptionGroup.getOptionGroup(); List<Tag> tags = awsRdsOptionGroup.getTags();  resourceMapsBuilder.map( Resource.builder() .api(awsRdsOptionGroup.getTerraformResourceName()) .name(awsRdsOptionGroup.getResourceName()) .argument("name", TFString.build(optionGroup.optionGroupName())) .argument("engine_name", TFString.build(optionGroup.engineName())) .argument("major_engine_version", TFString.build(optionGroup.majorEngineVersion())) .argument("option_group_description", TFString.build(optionGroup.optionGroupDescription())) .argumentsIf(Optional.ofNullable(optionGroup.options()).isPresent(), "option", () -> optionGroup.options().stream() .map(option -> TFBlock.builder() .argument("option_name", TFString.build(option.optionName())) .argumentsIf(Optional.ofNullable(option.optionSettings()).isPresent(), "option_settings ", () -> option.optionSettings().stream() .map(optionSetting -> TFBlock.builder() .argument("name", TFString.build(optionSetting.name())) .argument("value", TFString.build(optionSetting.value())) .build() ).collect(Collectors.toList())) .build()) .collect(Collectors.toList())) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() );  });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getBySubscriberAndTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllBySubscriberAndTarget(Mockito.any(), Mockito.any());  /* ACT */ final var result = service.getBySubscriberAndTarget(URI.create("https://subscriber"), URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: default_isNull_returnsListElementAsDefault() { var defaultEmail = "test@fake.com";  var sut = new PatientEmailsHolder(null, List.of(defaultEmail));  "<AssertPlaceHolder>"; }
getDefault() { if (primary == null) { // If a default email is not specified, use the first element of the // patient email list if (all != null && !all.isEmpty()) { return all.get(0); }  return null; }  return primary; }
[*] target: assertEquals(defaultEmail, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( defaultEmail, sut. getDefault() )
************************************
************************************
[+] input: mapDtoToEntity_shouldMapText() { String expected = "An example for a text"; noteKeyResultDto.setNoteBody(expected); noteKeyResult = noteKeyResultMapper.mapDtoToEntity(noteKeyResultDto); "<AssertPlaceHolder>"; }
mapDtoToEntity(NoteKeyResultDto input) {  NoteKeyResult noteKeyResult = this.noteToNoteKeyResult(this.mapNoteDtoToEntity(input)); KeyResult parentKeyResult = null;  if (input.getParentKeyResultId() != null) {  parentKeyResult = new KeyResult(); parentKeyResult.setId(input.getParentKeyResultId()); } noteKeyResult.setParentKeyResult(parentKeyResult);  return noteKeyResult; }
[*] target: assertEquals(expected, noteKeyResult.getText())
[-] pred: org. junit. Assert. assertEquals ( expected, noteKeyResult. getText ( ) )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: serializationTest() { DenseVector a = generateVectorA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); "<AssertPlaceHolder>"; }
serialize() { TensorProto.Builder builder = TensorProto.newBuilder();  builder.setVersion(CURRENT_VERSION); builder.setClassName(DenseVector.class.getName());  DenseTensorProto.Builder dataBuilder = DenseTensorProto.newBuilder(); dataBuilder.addAllDimensions(Arrays.stream(shape).boxed().collect(Collectors.toList())); ByteBuffer buffer = ByteBuffer.allocate(elements.length * 8).order(ByteOrder.LITTLE_ENDIAN); DoubleBuffer doubleBuffer = buffer.asDoubleBuffer(); doubleBuffer.put(elements); doubleBuffer.rewind(); dataBuilder.setValues(ByteString.copyFrom(buffer)); builder.setSerializedData(Any.pack(dataBuilder.build()));  return builder.build(); }
[*] target: assertEquals(a,deser)
[-] pred: org. junit. Assert. assertEquals ( a, deser )
************************************
************************************
[+] input: createCommunity() { // given CommunityDto testCommunityDto = getTestCommunityDto(); Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(TEST_COMMUNITY_ID, TEST_COMMUNITY_NAME, TEST_COMMUNITY_DISTRICT, 0, 0); UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(TEST_ADMIN_ID, null, Collections.emptyList()); SecurityContextHolder.getContext().setAuthentication(authentication);  given(communityMapper.communityDtoToCommunity(testCommunityDto)) .willReturn(testCommunity); given(communityAdminRepository.findByUserIdWithCommunities(TEST_ADMIN_ID)) .willReturn(Optional.of(getTestAdmin())); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when Community createdCommunity = communitySDJpaService.createCommunity(testCommunityDto);  // then "<AssertPlaceHolder>"; assertEquals(testCommunityDto.getName(), createdCommunity.getName()); assertEquals(testCommunityDto.getDistrict(), createdCommunity.getDistrict()); verify(communityMapper).communityDtoToCommunity(testCommunityDto); verify(communityAdminRepository).findByUserIdWithCommunities(TEST_ADMIN_ID); verify(communityRepository).save(testCommunity); }
createCommunity(CommunityDto communityDto) { communityDto.setCommunityId(generateUniqueId()); String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto), userId); Community savedCommunity = communityRepository.save(community); log.trace("saved community with id[{}] to repository", savedCommunity.getId()); return savedCommunity; }
[*] target: assertNotNull(createdCommunity)
[-] pred: org. junit. Assert. assertNotNull ( createdCommunity )
************************************
************************************
[+] input: calculateCycleTimeOfRealDoneColumns() { List<StatusChangedItem> statusChangedItems = StatusChangedItemsListAndCycleTimeInfosListFixture .STATUS_CHANGED_ITEMS_LIST_OF_REAL_DONE_COLUMN(); List<CycleTimeInfo> statusChangedItemsExpect = StatusChangedItemsListAndCycleTimeInfosListFixture .CYCLE_TIME_INFOS_LIST_OF_REAL_DONE_COLUMN(); List<String> realDoneStatus = List.of("DONE");  when(workDay.calculateWorkDaysBy24Hours(anyLong(), anyLong())) .thenReturn(StatusChangedItemsListAndCycleTimeInfosListFixture.EXPECT_DAYS); List<CycleTimeInfo> result = boardUtil.getCycleTimeInfos(statusChangedItems, realDoneStatus, true); Assertions."<AssertPlaceHolder>"; }
getCycleTimeInfos(List<StatusChangedItem> statusChangedArray, List<String> realDoneStatus, Boolean treatFlagCardAsBlock) { List<StatusChangedItem> statusChangedByFiltered; if (treatFlagCardAsBlock) { statusChangedByFiltered = statusChangedArray; } else { statusChangedByFiltered = statusChangedArray.stream() .filter(item -> !(CardStepsEnum.FLAG.getValue().equals(item.getStatus()) || CardStepsEnum.REMOVEFLAG.getValue().equals(item.getStatus()))) .collect(Collectors.toList()); }  List<StatusChangedItem> statusChangedBySorted = getStatusChangedBySorted(statusChangedByFiltered); List<StatusTimeStamp> flagTimeStamp = getFlagTimeStamps(statusChangedBySorted); List<StatusTimeStamp> columnTimeStamp = getColumnTimeStamps(statusChangedBySorted);  List<CycleTimeInfo> cycleTimeInfos = calculateCycleTime(realDoneStatus, flagTimeStamp, columnTimeStamp);  return getCollectRemovedDuplicates(cycleTimeInfos); }
[*] target: assertEquals(statusChangedItemsExpect, result)
[-] pred: org. junit. Assert. assertEquals ( statusChangedItemsExpect, result )
************************************
************************************
[+] input: convertTxt2() { File txtFile = loadFile("freude_vectors_w2v_copy.txt"); File fileToWrite = new File(VECTORS_KV_FILE_2); fileToWrite.deleteOnExit(); KvConverter.convert(txtFile, fileToWrite); File w2vFile = new File("./freude_vectors_w2v_copy.w2v"); w2vFile.deleteOnExit(); "<AssertPlaceHolder>";  // checking vocabulary assertTrue(Gensim.getInstance().isInVocabulary("schöner", fileToWrite.getAbsoluteFile()));  // checking dimension Double[] vector = Gensim.getInstance().getVector("schöner", fileToWrite.getAbsolutePath());  // checking values assertEquals(3, vector.length); assertEquals(-0.0016543772, vector[0]); assertEquals(-0.0009240248, vector[1]); assertEquals(-0.0007398839, vector[2]);  assertTrue(fileToWrite.exists()); }
convert(File txtOrw2vFile, File fileToWrite){ File w2vFile = null; if(txtOrw2vFile.getName().endsWith(".w2v")){ LOGGER.info("Recognized w2v format. Converting to kv..."); w2vFile = txtOrw2vFile; } else if(txtOrw2vFile.getName().endsWith(".txt")) { if(isW2Vformat(txtOrw2vFile)){ LOGGER.info("Provided file is likely in w2v format despite '.txt' ending. Trying to convert directly " + "to '.kv'."); w2vFile = txtOrw2vFile; } else { LOGGER.info("Recognized txt format. Will convert to w2v and then to kv."); w2vFile = new File(fileToWrite.getParentFile(), txtOrw2vFile.getName().substring(0, (int) (txtOrw2vFile.getName().length()) - 4) + ".w2v"); VectorTxtToW2v.convert(txtOrw2vFile, w2vFile); } } else { LOGGER.error("Neither .txt nor .w2v file provided (make sure you use correct file endings). ABORTING " + "program."); return; } Gensim.getInstance().convertW2vToKv(w2vFile.getAbsolutePath(), fileToWrite.getAbsolutePath()); }
[*] target: assertFalse(w2vFile.exists())
[-] pred: org. junit. Assert. assertFalse ( w2vFile. exists ( ) )
************************************
************************************
[+] input: shouldVerifyCorrectPasswordForUsername() { User user = userDataProvider.full(); String username = user.getUsername();  when(userRepository.findByUsername(username)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(username, user.getPassword());  "<AssertPlaceHolder>"; }
passwordIsCorrect(String usernameOrEmail, String password) { log.info("Verifying password for: " + usernameOrEmail);  return userRepository.findByUsername(usernameOrEmail) .or(() -> userRepository.findByEmail(usernameOrEmail)) .map(u -> Objects.equals(u.getPassword(), password)) .orElse(false); }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: testMarkSupported() { final InputStream in = new RereadableInputStream(new NullInputStream(10)); "<AssertPlaceHolder>"; }
markSupported() { return true; }
[*] target: assertTrue(in.markSupported())
[-] pred: org. junit. Assert. assertTrue ( in. markSupported() )
************************************
************************************
[+] input: create_validInput_returnSubscriptionForArtifact() { /* ARRANGE */ Mockito.doReturn(Optional.of(getArtifact())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(artSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
************************************
[+] input: testDoVolatilityAssert_reduce() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "50"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility >= 0 && volatility <= expected; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
************************************
[+] input: resetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(passwordEncoder.encode(forgotPasswordRequest.getNewPassword())) .willReturn(forgotPasswordRequest.getNewPassword()); when(userRepository.save(user)) .then(returnsFirstArg()); given(mailService.sendPasswordSuccessfullyChanged(user)) .willReturn(true); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken);  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(passwordEncoder).encode(forgotPasswordRequest.getNewPassword()); verify(mailService).sendPasswordSuccessfullyChanged(user); verify(securityTokenService).useToken(testSecurityToken); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertTrue(passwordChanged)
[-] pred: org. junit. Assert. assertTrue ( passwordChanged )
************************************
************************************
[+] input: getValuesWithIndex() { var indexKey = "myIndex"; var one = "1"; var two = "1"; var map = new IndexedMap<Integer, String>().indexBuilder() .withMapper(str -> Integer.parseInt(str)) .withName(indexKey) .build();  map.put(1, one); map.put(2, two);  var values = map.values().stream().collect(Collectors.toList());  Assertions."<AssertPlaceHolder>"; }
size() { return this.entries.size(); }
[*] target: assertEquals(2, values.size())
[-] pred: org. junit. Assert. assertEquals ( 2, values. size() )
************************************
************************************
[+] input: getGrantedPermissions_restrictedUser_restrictedPermissions() { Set<UserPermission> permissions = makeHolder(EnumSet.of(OrganizationRole.ENTRY_ONLY)).getGrantedPermissions(); Set<UserPermission> expected = EnumSet.of( UserPermission.START_TEST, UserPermission.UPDATE_TEST, UserPermission.SUBMIT_TEST, UserPermission.SEARCH_PATIENTS); "<AssertPlaceHolder>"; }
getGrantedPermissions() { return getPermissionsFromRoles(getGrantedRoles()); }
[*] target: assertEquals(expected, permissions)
[-] pred: org. junit. Assert. assertEquals ( expected, permissions )
************************************
************************************
[+] input: listBrokerMetricsByTopicsTest() { List<String>   metrics  = Arrays.asList( "Messages",                         "BytesIn_min_15",       "BytesRejected", "PartitionURP",                     "HealthCheckTotal",     "ReplicationCount", "CollectMetricsCostTimeUnitSec",    "FailedFetchRequests",  "BytesIn_min_5", "HealthScore",                      "LogSize",              "BytesOut", "FailedProduceRequests",            "BytesOut_min_15",      "BytesIn", "BytesOut_min_5",                   "MessagesIn",           "TotalProduceRequests", "HealthCheckPassed"); List<String>   topics   = Arrays.asList("QAtest_1_13", "__consumer_offsets"); Long endTime   = System.currentTimeMillis(); Long startTime = endTime - 4 * 60 * 60 * 1000;  Table<String, String, List<MetricPointVO>> list = topicMetricESDAO.listTopicMetricsByTopics(clusterId, metrics, "avg", topics, startTime, endTime); Assertions."<AssertPlaceHolder>"; }
listTopicMetricsByTopics(Long clusterPhyId, List<String> metricNameList, String aggType, List<String> topicNameList, Long startTime, Long endTime){ //1、获取需要查下的索引 String realIndex = realIndex(startTime, endTime);  //2、根据查询的时间区间大小来确定指标点的聚合区间大小 String interval = MetricsUtils.getInterval(endTime - startTime);  //3、构造agg查询条件 String aggDsl   = buildAggsDSL(metricNameList, aggType);  final Table<String, String, List<MetricPointVO>> table = HashBasedTable.create();  //4、构造dsl查询条件 for(String topicName : topicNameList){ try { esTPService.submitSearchTask( String.format("class=TopicMetricESDAO||method=listTopicMetricsByTopics||ClusterPhyId=%d||topicName=%s", clusterPhyId, topicName), 3000, () -> { String dsl = dslLoaderUtil.getFormatDslByFileName( DslConstant.GET_TOPIC_AGG_LIST_METRICS, clusterPhyId, topicName, startTime, endTime, interval, aggDsl );  Map<String/*metric*/, List<MetricPointVO>> metricMap = esOpClient.performRequestWithRouting( topicName, realIndex, dsl, s -> handleListESQueryResponse(s, metricNameList, aggType), DEFAULT_RETRY_TIME );  synchronized (table){ for(Map.Entry<String/*metric*/, List<MetricPointVO>> entry: metricMap.entrySet()){ table.put(entry.getKey(), topicName, entry.getValue()); } } }); }catch (Exception e){ LOGGER.error("method=listTopicMetricsByTopics||clusterPhyId={}||topicName={}||errMsg=exception!", clusterPhyId, topicName, e); } }  esTPService.waitExecute();  return table; }
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
************************************
[+] input: testValid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = "12345678"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNull(configViolation)
[-] pred: org. junit. Assert. assertNull ( configViolation )
************************************
************************************
[+] input: Exception { String json = "{"key1":"1234","key2":"4321"}"; final Map<String, Object> d = createMap(json);  Set<String> attributeNames = new LinkedHashSet<>(); attributeNames.add("key1"); attributeNames.add("key2");  when(schemaService.getSchemaFor(anyString())).thenReturn(Optional.of( BPASchema.builder() .schemaAttributeNames(attributeNames) .schemaId("1234") .build()));  when(identity.getDidPrefix()).thenReturn("did:iil:");  MyDocument doc = buildDefault() .setType(CredentialType.INDY) .setSchemaId("testSchema") .setDocument(d);  final VerifiableCredential vp = vpm.buildFromDocument(doc, "xxyyyzzz");  String actual = gson.toJson(vp.getContext()); String expected = "["https://www.w3.org/2018/credentials/v1","https://raw.githubusercontent.com/iil-network/contexts/master/labeled-credential.jsonld"" + ",{"@context":{"sc":"did:iil:1234","key1":{"@id":"sc:key1"},"key2":{"@id":"sc:key2"}}}]";  "<AssertPlaceHolder>"; }
buildFromDocument(@NonNull MyDocument doc, @NonNull String myDid) { final ObjectNode on = converter.fromMap(Objects.requireNonNull(doc.getDocument()), ObjectNode.class); on.remove("id"); on.put("id", myDid);  // this is needed because the java client serializes with GSON // and cannot handle Jackson ObjectNode JsonObject subj = GsonConfig.defaultConfig().fromJson(on.toString(), JsonObject.class);  List<String> types = new ArrayList<>(doc.getType().getType()); if (doc.typeIsJsonLd() && doc.getSchema() != null && doc.getSchema().getLdType() != null) { types.add(doc.getSchema().getLdType()); }  return VerifiableIndyCredential .builder() .id("urn:" + doc.getId().toString()) .type(types) .context(resolveContext(doc.getType(), doc.getSchemaId())) .issuanceDate(TimeUtil.currentTimeFormatted()) .issuer(myDid) .label(doc.getLabel()) .credentialSubject(subj) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test4() { int[] pre = {1, 2, 4, 5, 3, 6, 7}; int[] post = {4, 5, 2, 6, 7, 3, 1}; TreeNode root = new Solution().constructFromPrePost(pre, post); "<AssertPlaceHolder>"; assertEquals(1, root.val);  assertNotNull(root.left); assertEquals(2, root.left.val); assertNotNull(root.right); assertEquals(3, root.right.val);  assertNotNull(root.left.left); assertEquals(4, root.left.left.val); assertNotNull(root.left.right); assertEquals(5, root.left.right.val); assertNotNull(root.right.left); assertEquals(6, root.right.left.val); assertNotNull(root.right.right); assertEquals(7, root.right.right.val); }
constructFromPrePost(int[] pre, int[] post) { int n = pre.length; HashMap<Integer, Integer> preMap = new HashMap<>(); HashMap<Integer, Integer> postMap = new HashMap<>(); for (int i = 0; i < n; i++) { preMap.put(pre[i], i); postMap.put(post[i], i); } return construct(pre, 0, n, post, 0, n, preMap, postMap); }
[*] target: assertNotNull(root)
[-] pred: org. junit. Assert. assertNotNull ( root )
************************************
************************************
[+] input: testCreateMappersFromController() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerExceptionMapping controller = new ControllerExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromController(controller, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
createMappersFromController(Object bean, HandlerLocator locator, HandlerResolverFactory factory) { final Map<Class<? extends Throwable>, ExceptionResolver<Throwable>> mappings = extractMappings(bean, locator, factory); return mappings.isEmpty() ? null : Collections.singletonList(new HandlerOnlyExceptionMapper(mappings, ClassUtils.getUserType(bean.getClass()))); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
************************************
[+] input: batchIdStringFormatIsCorrect() { BatchId id = new BatchId(123); String stringId = "123"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
toString() { return this.intervalNumber + intervalNumberV2.map(n -> SEPARATOR + n).orElse(""); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("C#N"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Set<Bond> bonds = fragment.getBondSet(); assertEquals(1, bonds.size()); for (Bond bond : bonds) { assertEquals(3, bond.getOrder()); } }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
************************************
[+] input: should_GenerateZeroPointRightNumberAndFractionalRatioName_WhenPassingZeroAndRightNumberAndFractionalRatioName() { DecimalInWords decimal = new DecimalInWords( IntegerInWords.createZero(), createRightNumber(), "بالكوادرليون" ); String expected = "صفر" + " فاصلة " + "ترليون ومئة مليار ومليار ومليونين ومئتي ألف ومئة وخمسة وستين" + " بالكوادرليون"; "<AssertPlaceHolder>"; }
toString() { StringBuilder numberInWords = new StringBuilder(); numberInWords.append(numberLeftDecimalPoint.toString()); numberInWords.append(" فاصلة ").append(numberRightDecimalPoint.toString()); if (!fractionalRatioName.isEmpty()) numberInWords.append(" ").append(fractionalRatioName); return numberInWords.toString(); }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
************************************
[+] input: testDoneAfterSetException() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.setException(new Exception()); "<AssertPlaceHolder>"; }
isDone() { return cancelled || done.getCount() == 0; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone ( ) )
************************************
************************************
[+] input: updateUserInfo1() { assertThrows(ForbiddenException.class, () -> { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Arrays.asList(random.nextInt(100), random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }); }
updateUserInfo(Integer id, UpdateUserInfoDTO validator) { List<Integer> newGroupIds = validator.getGroupIds(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); boolean anyMatch = newGroupIds.stream().anyMatch(it -> it.equals(rootGroupId)); if (anyMatch) { throw new ForbiddenException(10073); } List<Integer> existGroupIds = groupService.getUserGroupIdsByUserId(id); // 删除existGroupIds有，而newGroupIds没有的 List<Integer> deleteIds = existGroupIds.stream().filter(it -> !newGroupIds.contains(it)).collect(Collectors.toList()); // 添加newGroupIds有，而existGroupIds没有的 List<Integer> addIds = newGroupIds.stream().filter(it -> !existGroupIds.contains(it)).collect(Collectors.toList()); return groupService.deleteUserGroupRelations(id, deleteIds) && groupService.addUserGroupRelations(id, addIds); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: Exception { String path = String.format("s3://%s/%s", BUCKET_NAME, FILE_NAME); String config = awsConfigLoader.loadTextFile(new URI(path)); "<AssertPlaceHolder>"; }
loadTextFile(URI uri) {  var bytes = loadBinaryFile(uri); return new String(bytes, StandardCharsets.UTF_8); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.EXCEPTION, ThriftCodec.getSeqId());  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  TApplicationException exception = new TApplicationException();  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.class.getName()); // path protocol.writeString(Demo.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); exception.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(encodeFrame(bos.toByteArray()));  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.hasException());  Assertions.assertTrue(result.getException() instanceof RpcException);  }
decode(Channel channel, ChannelBuffer buffer) throws IOException {  int available = buffer.readableBytes();  if (available < MESSAGE_SHORTEST_LENGTH) {  return DecodeResult.NEED_MORE_INPUT;  } else {  TIOStreamTransport transport = new TIOStreamTransport(new ChannelBufferInputStream(buffer));  TBinaryProtocol protocol = new TBinaryProtocol(transport);  short magic; int messageLength;  try { //                protocol.readI32(); // skip the first message length byte[] bytes = new byte[4]; transport.read(bytes, 0, 4); magic = protocol.readI16(); messageLength = protocol.readI32();  } catch (TException e) { throw new IOException(e.getMessage(), e); }  if (MAGIC != magic) { throw new IOException("Unknown magic code " + magic); }  if (available < messageLength) { return DecodeResult.NEED_MORE_INPUT; }  return decode(protocol);  }  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
************************************
[+] input: shouldReturnNewValueGivenNewValueIsNotNull() { String defaultValue = "default"; String newValue = "new";  String result = ValueUtil.valueOrDefault(defaultValue, newValue);  Assertions."<AssertPlaceHolder>"; }
valueOrDefault(T defaultValue, T value) { return value == null ? defaultValue : value; }
[*] target: assertEquals(newValue, result)
[-] pred: org. junit. Assert. assertEquals ( newValue, result )
************************************
************************************
[+] input: testDeserialiseKeyboard() { List<String> tick = new ArrayList<>(); tick.add(";a"); tick.add("W;w"); tick.add("W,LCONTROL;"); tick.add("W,LCONTROL,S;s");  VirtualKeyboard actual = deserialiseKeyboard(tick);  VirtualKeyboard expected = new VirtualKeyboard(); expected.updateFromEvent(VirtualKey.ZERO, false, 'a'); expected.updateFromEvent(VirtualKey.W, true, 'w'); expected.updateFromEvent(VirtualKey.LCONTROL, true, Character.MIN_VALUE); expected.updateFromEvent(VirtualKey.S, true, 's');  "<AssertPlaceHolder>"; }
deserialiseKeyboard(List<String> keyboardStrings) { VirtualKeyboard out = new VirtualKeyboard();  currentSubtick = 0; for (String line : keyboardStrings) { Matcher matcher = extract("(.*?);(.*)", line); if (matcher.find()) { String[] keys = matcher.group(1).split(","); char[] chars = matcher.group(2).toCharArray();  int[] keycodes = deserialiseVirtualKey(keys, VirtualKey.ZERO); out.updateFromState(keycodes, chars); } currentSubtick++; } return out; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testInvalid() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = "no-number"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("no-number", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRolePolicyAttachment> awsRolePolicyAttachments = getAwsRolePolicyAttachments(); Maps<Resource> resourceMaps = exportIamRolePolicyAttachments.getResourceMaps(awsRolePolicyAttachments); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamRolePolicyAttachment.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRolePolicyAttachment> awsRolePolicyAttachments) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSRolePolicyAttachment awsRolePolicyAttachment : awsRolePolicyAttachments) { resourceMapsBuilder.map( Resource.builder() .api(awsRolePolicyAttachment.getTerraformResourceName()) .name(awsRolePolicyAttachment.getResourceName()) .argument("role", TFExpression.build( MessageFormat.format("aws_iam_role.{0}.name", awsRolePolicyAttachment.getRoleName()))) .argument("policy_arn", TFExpression.build( MessageFormat.format("aws_iam_policy.{0}.arn", awsRolePolicyAttachment.getPolicyName()))) .build() ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: should_result_millis_when_seconds() {  var expected = 6 * 1000l;  var actual = NumberUtil.fromHumanReadable("6seconds");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/SecurityGroup.cmd")); String actual = exportSecurityGroups.getTFImport(getAwsSecurityGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSSecurityGroup> awsSecurityGroups) { return TFImport.builder() .importLines(awsSecurityGroups.stream() .map(awsSecurityGroup -> TFImportLine.builder() .address(awsSecurityGroup.getTerraformAddress()) .id(awsSecurityGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testRejectedBeforeExecution() { final AtomicBoolean flag = new AtomicBoolean();  // actualCost < timeoutMillis final TimeoutScheduler scheduler0 = new TimeoutScheduler(Schedulers.io(), TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured()); final AsyncResponse response0 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable0 = () -> { flag.set(true); response0.sendResult(1000); }; final RequestTask task0 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), response0, new CompletableFuture<>(), runnable0); scheduler0.schedule(task0); assertTrue(flag.get()); assertEquals(1000, response0.status()); flag.set(false);  // actualCost >= timeoutMillis final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable1 = () -> { response1.sendResult(1000); flag.set(true); }; final RequestTask task1 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), new CompletableFuture<>(), runnable1); final TimeoutScheduler scheduler1 = new TimeoutScheduler(new Scheduler() {  @Override public String name() { return "test"; }  @Override public void schedule(Runnable cmd) { try { TimeUnit.MILLISECONDS.sleep(10L); } catch (Throwable ignore) { } cmd.run(); }  @Override public void shutdown() {  } }, TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured());  scheduler1.schedule(task1); "<AssertPlaceHolder>"; assertEquals(200, response1.status()); }
schedule(Runnable command) { if (command instanceof RequestTask) { schedule0(new TimeoutRequestTask(((RequestTask) command), name(), getStartTime((RequestTask) command), timeoutMillis)); } else { scheduler.schedule(command); } }
[*] target: assertFalse(flag.get())
[-] pred: org. junit. Assert. assertFalse ( flag. get ( ) )
************************************
************************************
[+] input: removeAdminFromCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); User testAdmin = getTestAdmin(); testCommunity.getAdmins().add(testAdmin);  given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository).save(testCommunity); }
removeAdminFromCommunity(String communityId, String adminId) { Optional<Community> communitySearch = communityRepository.findByCommunityIdWithAdmins(communityId); return communitySearch.map(community -> { boolean adminRemoved = community.getAdmins().removeIf(admin -> admin.getUserId().equals(adminId)); if (adminRemoved) { communityRepository.save(community); return true; } else { return false; } }).orElse(false); }
[*] target: assertTrue(adminRemoved)
[-] pred: org. junit. Assert. assertTrue ( adminRemoved )
************************************
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); State invalidHoursState = invocationModal.getView().getState(); invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); // add warning userInteractionService.handleUserInteraction(invocationModal);  invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("20:00"); invocationModal.getView().setState(invalidHoursState); //remove warning InteractionModal returnedModal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient, times(2)).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updatedModal = interactionModalCaptor.getValue(); assertNotNull(updatedModal.getView()); assertNotNull(updatedModal.getView().getType()); assertNotNull(updatedModal.getView().getSubmit()); assertEquals(17, updatedModal.getView().getBlocks().size()); assertTrue(updatedModal.getView().getBlocks().stream().noneMatch(block -> BLOCK_ID_INVALID_HOURS.equals(block.getBlockId()))); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(returnedModal)
[-] pred: org. junit. Assert. assertNull ( returnedModal )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("https://example.com").loader(MOCK_LOADER).base("").get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-cluster-name.cluster-custom-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: updateTest() { ForkingArray<IndexedValue<String>> array = new ForkingArray<>(8);  Set<String> ref = new HashSet<>(); String prefix = "prefix"; final Random random = new Random(); for (int i = 0; i < 501; i++) { if (random.nextBoolean()) { array = array.newBranch(); } String s = "element" + i; array.append(s, MAPPER); ref.add(prefix + s); }  array.update(val -> new IndexedValue<>(val.getIndex(), prefix + val.getValue()));  Set<String> data = Collections.synchronizedSet(new HashSet<>()); array.forEach(stringIndexedValue -> data.add(stringIndexedValue.getValue()));  Assertions."<AssertPlaceHolder>";  }
forEach(Consumer<? super V> consumer) { int i, size = this.size(); for (i = 0; i < size; i++) { consumer.accept(this.get(i)); } }
[*] target: assertEquals(ref, data)
[-] pred: org. junit. Assert. assertEquals ( ref, data )
************************************
************************************
[+] input: changePassword() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changePassword(userIdentity.getUserId(), "147258"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro", "147258"); "<AssertPlaceHolder>"; }
verifyUsernamePassword(Integer userId, String username, String password) { QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, userId) .eq(UserIdentityDO::getIdentityType, IdentityConstant.USERNAME_PASSWORD_IDENTITY) .eq(UserIdentityDO::getIdentifier, username); UserIdentityDO userIdentity = this.baseMapper.selectOne(wrapper); return EncryptUtil.verify(userIdentity.getCredential(), password); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
************************************
[+] input: testUpdateStatus_notExist() { TaskRun taskRun = MockTaskRunFactory.create(TaskRunStatus.SUCCESS); boolean result = abnormalDatasetService.updateStatus(1L, taskRun); "<AssertPlaceHolder>"; }
updateStatus(Long id, TaskRun taskRun) { TaskRunStatus taskRunStatus = taskRun.getStatus(); OffsetDateTime updateTime = taskRunStatus.isTermState() ? taskRun.getTermAt() : DateTimeUtils.now(); String status = taskRunStatus.isSuccess() ? "SUCCESS" : "FAILED"; return abnormalDatasetRepository.updateStatus(id, status, updateTime); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: delete_WithNonExistId_shouldAffectNoRow() { // Prepare List<Operator> operators = insertSampleData(); Long operatorId = operators.get(0).getId(); Optional<Operator> firstOperator = operatorDao.fetchById(operatorId); assertTrue(firstOperator.isPresent());  // Process boolean rowAffected = operatorDao.deleteById(999L); "<AssertPlaceHolder>"; }
deleteById(Long id) { Preconditions.checkNotNull(id, "Invalid parameter `id`: found null object"); String sql = String.format("DELETE FROM %s WHERE id = ?;", DB_TABLE_NAME); int affectedRows = dbOperator.update(sql, id); return affectedRows > 0; }
[*] target: assertFalse(rowAffected)
[-] pred: org. junit. Assert. assertFalse ( rowAffected )
************************************
************************************
[+] input: testToBytes() { byte[] expectedBytes = new byte[]{81, 6, -4, -102, -68, -126, 55, 85, -127, 54, -46, -119}; Xid id = new Xid(expectedBytes);  assertArrayEquals(expectedBytes, id.toByteArray());  ByteBuffer buffer = ByteBuffer.allocate(12); id.putToByteBuffer(buffer); "<AssertPlaceHolder>"; }
putToByteBuffer(final ByteBuffer buffer) { paramNotNull("buffer", buffer); isTrue("buffer.remaining() >=12", buffer.remaining() >= ID_LENGTH);  buffer.put(int3(timestamp)); buffer.put(int2(timestamp)); buffer.put(int1(timestamp)); buffer.put(int0(timestamp)); buffer.put(int2(randomValue1)); buffer.put(int1(randomValue1)); buffer.put(int0(randomValue1)); buffer.put(short1(randomValue2)); buffer.put(short0(randomValue2)); buffer.put(int2(counter)); buffer.put(int1(counter)); buffer.put(int0(counter)); }
[*] target: assertArrayEquals(expectedBytes, buffer.array())
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, buffer. array ( ) )
************************************
************************************
[+] input: deleteUser1() { Random random = new Random(); boolean b = adminService.deleteUser(random.nextInt()); "<AssertPlaceHolder>"; }
deleteUser(Integer id) { throwUserNotExistById(id); if (userService.getRootUserId().equals(id)) { throw new ForbiddenException(10079); } boolean userRemoved = userService.removeById(id); QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, id); // 删除用户，还应当将 user_group表中的数据删除 boolean deleteResult = userGroupMapper.deleteByUserId(id) > 0; return userRemoved && userIdentityService.remove(wrapper) && deleteResult; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0.zk.md"; String group = null; String application = "vic.zk.md"; MetadataIdentifier providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application);  String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNotNull(fileContent);  deletePath(providerMetadataIdentifier, zookeeperMetadataReport); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 1000, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNull(fileContent);   providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions."<AssertPlaceHolder>";  Gson gson = new Gson(); FullServiceDefinition fullServiceDefinition = gson.fromJson(fileContent, FullServiceDefinition.class); Assertions.assertEquals(fullServiceDefinition.getParameters().get("paramTest"), "zkTest"); }
getNodePath(BaseMetadataIdentifier metadataIdentifier) { return toRootDir() + metadataIdentifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: testMapRemoteExceptionReturnsUnknownExceptionsAsIs() { Throwable expected = new IllegalArgumentException("some-exception");  Throwable result = ExceptionMapper.mapRemoteException(expected);  "<AssertPlaceHolder>"; }
mapRemoteException(Throwable exception) { if (exception instanceof CommandExecutionException) { Optional<Object> details = ((CommandExecutionException) exception).getDetails(); if (details.isPresent()) { ExceptionStatusCode statusCode = (ExceptionStatusCode) details.get(); return new RentalCommandException(statusCode.getDescription(), null, statusCode); } } else if ((exception instanceof QueryExecutionException)) { Optional<Object> details = ((QueryExecutionException) exception).getDetails(); if (details.isPresent()) { ExceptionStatusCode statusCode = (ExceptionStatusCode) details.get(); return new RentalQueryException(statusCode.getDescription(), null, statusCode); } } return exception; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: should_result_millis_when_second() {  var expected = 1 * 1000l;  var actual = NumberUtil.fromHumanReadable("1second");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldSelectAllAuthorsAsMap() { try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) { final Map<Integer,Author> authors = session.selectMap("org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors", "id"); "<AssertPlaceHolder>"; for(Map.Entry<Integer,Author> authorEntry : authors.entrySet()) { assertEquals(authorEntry.getKey(), (Integer) authorEntry.getValue().getId()); } } }
selectMap(String statement, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);  /** * The selectMap is a special case in that it is designed to convert a list * of results into a Map based on one of the properties in the resulting * objects. * @param <K> the returned Map keys type * @param <V> the returned Map values type * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param mapKey The property to use as key for each value in the list. * @param rowBounds  Bounds to limit object retrieval * @return Map containing key pair data. */ <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter);  /** * A Cursor offers the same results as a List, except it fetches data lazily using an Iterator. * @param <T> the returned cursor element type. * @param statement Unique identifier matching the statement to use. * @param parameter A parameter object to pass to the statement. * @param rowBounds  Bounds to limit object retrieval * @return Cursor of mapped objects */ <T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds);  /** * Retrieve a single row mapped from the statement key and parameter * using a {@code ResultHandler}
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
************************************
[+] input: testCreateGraph() { final SoftwareArchitecture architecture = SoftwareArchitectureMother.simple();  final GraphOptions options = new GraphOptions.Builder() .direction(LEFT_TO_RIGHT) .build();  final BufferedImage bufferedImage = GraphFactory .createGraph(options, new RoughStyle(), architecture) .render(Format.PNG).toImage();  "<AssertPlaceHolder>"; }
createGraph( GraphOptions options, GraphvizStyle style, SoftwareArchitecture architecture) {  LOG.trace("Creating Graphviz for architecture with {} components ({})...", architecture.getComponents().size(), architecture.getName());  final Map<SoftwareComponent, Node> nodes = architecture.getComponents().stream() .filter(aggregateFilter(options)) .map(component -> { final List<Node> dependencyNodes = component.getDependencies().stream() .flatMap(dependency -> architecture.findComponent(dependency).stream()) .filter(aggregateFilter(options)) .map(SoftwareComponent::getName) .map(Factory::node) .collect(toList());  final Node node = node(component.getName()) .with(style.componentAttrs(component)) .link(dependencyNodes) ;  return Tuple.of(component, node); }) .collect(Collectors.toMap(tuple -> tuple._1, tuple -> tuple._2));  final Map<AutonomousDependency, Node> linkedNodes = architecture.getComponents().stream() .flatMap(component -> component.getDependencies().stream() .map(dependency -> new AutonomousDependency( dependency, component, architecture.findComponentByName(dependency.getComponentName()) .orElseThrow(() -> new IllegalStateException("Failed to find component by name: " + dependency.getComponentName()))))) .filter(dependency -> nodes.containsKey(dependency.getSource()) && nodes.containsKey(dependency.getTarget())) .filter(dependency -> aggregateFilter(dependency.getSource(), options)) .filter(dependency -> aggregateFilter(dependency.getTarget(), options)) .collect(Collectors.toMap( dependency -> dependency, dependency -> { final Node sourceNode = nodes.get(dependency.getSource()); final Node targetNode = nodes.get(dependency.getTarget());  final Link link = sourceNode.linkTo(targetNode) .with(style.dependencyAttrs(dependency.getDependency(), architecture, options.getGraphType()));  return sourceNode.link(link); }));  final List<String> contexts = nodes.keySet().stream() .flatMap(component -> component.getContext().stream()) .distinct() .collect(toUnmodifiableList());  final List<Graph> subGraphs = contexts.stream() .map(context -> { final List<Node> nodesForContext = nodes.keySet().stream() .flatMap(component -> component.getContext().stream() .filter(componentContext -> componentContext.equals(context)) .map(c -> nodes.get(component))) .collect(toList());  return graph(context) // if we don't do this, "none" is applied on clusters .linkAttr().with("dir", "forward") .cluster() .with(nodesForContext); }) .collect(toList());  final List<Node> nodesWithoutContext = nodes.keySet().stream() .filter(component -> component.getContext().isEmpty()) .map(nodes::get) .collect(toList());  final Graph graph = graph(architecture.getName()) .graphAttr().with(style.graphDefaultAttrs()) .nodeAttr().with(style.nodeDefaultAttrs()) .linkAttr().with(style.linkDefaultAttrs()) .directed() .graphAttr().with(Rank.dir(options.getRankDir())) .with(linkedNodes.values().stream().collect(toUnmodifiableList())) .with(subGraphs) .with(nodesWithoutContext) .strict();  LOG.info("Created Graphviz with {} nodes for architecture with {} components", nodes.size(), architecture.getComponents().size());  return Graphviz.fromGraph(graph); }
[*] target: assertNotNull(bufferedImage)
[-] pred: org. junit. Assert. assertNotNull ( bufferedImage )
************************************
************************************
[+] input: testNotDoneInitially() { final SimpleFuture<Integer> f = new SimpleFuture<>(); "<AssertPlaceHolder>"; }
isDone() { return cancelled || done.getCount() == 0; }
[*] target: assertFalse(f.isDone())
[-] pred: org. junit. Assert. assertFalse ( f. isDone ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/NatGateway.cmd")); String actual = exportNatGateways.getTFImport(getNatGateways()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSNatGateway> awsNatGateways) { return TFImport.builder() .importLines(awsNatGateways.stream() .map(awsNatGateway -> TFImportLine.builder() .address(awsNatGateway.getTerraformAddress()) .id(awsNatGateway.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getSettingTest() { Settings settings = provider.getSettings(context.request(), "some"); "<AssertPlaceHolder>"; assertEquals("linkTag", settings.getEmbedType()); assertEquals("https://use.typekit.net", settings.getUrl()); assertEquals("foo", settings.getId()); }
getSettings(SlingHttpServletRequest request, String configName) { String configPath = CLOUDCONFIG_PARENT + configName; LOG.trace("Obtaining ResourceResolver with service user [{}]", SERVICE_USER); PageManager pageManager = request.getResourceResolver().adaptTo(PageManager.class); Page currentPage = pageManager.getContainingPage(request.getResource()); Resource environmentResource = getEnvironmentResource(pageManager, currentPage, configPath); if (environmentResource != null) { return environmentResource.adaptTo(Settings.class); } return null; }
[*] target: assertNotNull(settings)
[-] pred: org. junit. Assert. assertNotNull ( settings )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int newConnectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockConnectionProvider.connect(refEq(readerA_Host))).thenReturn(mockConnection);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getLastUsedReaderHost()).thenReturn(readerA_Host); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerA_Host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(newConnectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: testDoFixValueAssert_withExpectation() { GreaterThanAssertion greaterThanAssertion = MockGreaterThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = greaterThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) > Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: testGetRandomKeyForMaxFrequencyWithTwo() { MapWithRandomKeyForMostFrequentValue<String, String> map = new MapWithRandomKeyForMostFrequentValue<>(); map.put("a", "b"); map.put("c", "b"); map.put("e", "f"); map.put("g", "f"); map.put("i", "h");  Set<String> expected = Set.of("a", "c", "e", "g"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 1000; i++) actual.add(map.getRandomKeyWithMaxFrequency()); "<AssertPlaceHolder>"; }
getRandomKeyWithMaxFrequency() { if (maxFrequency == 0) return null; return countToKeys.get(maxFrequency).getRandom().getRandom(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.jsonld");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON_LD.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: deleteAmenity() { // given Amenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);  given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID)) .willReturn(Optional.of(testAmenity));  // when boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID); verify(amenityRepository).delete(testAmenity); }
deleteAmenity(String amenityId) { return amenityRepository.findByAmenityIdWithCommunity(amenityId) .map(amenity -> { Community community = amenity.getCommunity(); community.getAmenities().remove(amenity); amenityRepository.delete(amenity); return true; }) .orElse(false); }
[*] target: assertTrue(amenityDeleted)
[-] pred: org. junit. Assert. assertTrue ( amenityDeleted )
************************************
************************************
[+] input: shouldCacheUser() { User user = new User(); user.setId("test_user_id"); user.setTeamId("test_team_id"); user.setSlackAccessToken("test_slack_token"); user.setSlackBotToken("test_slack_bot_token"); user.setSpotifyRefreshToken("test_spotify_token"); user.setTimezoneOffsetSeconds(1000); user.setState(UUID.randomUUID()); CachedUser cachedUser = SpotUtil.toCachedUser(user, "test_token"); "<AssertPlaceHolder>"; assertEquals(user.getId(), cachedUser.getId()); assertEquals(user.getSlackAccessToken(), cachedUser.getSlackAccessToken()); assertEquals(user.getSpotifyRefreshToken(), cachedUser.getSpotifyRefreshToken()); assertEquals("test_token", cachedUser.getSpotifyAccessToken()); assertEquals(1000, cachedUser.getTimezoneOffsetSeconds()); }
toCachedUser(User user, String spotifyAccessToken) { return CachedUser.builder() .id(user.getId()) .teamId(user.getTeamId()) .slackAccessToken(user.getSlackAccessToken()) .slackBotToken(user.getSlackBotToken()) .spotifyRefreshToken(user.getSpotifyRefreshToken()) .spotifyAccessToken(spotifyAccessToken) .timezoneOffsetSeconds(user.getTimezoneOffsetSeconds()) .disabled(user.isDisabled()) .emojis(user.getEmojis()) .spotifyItems(user.getSpotifyItems()) .spotifyDeviceIds(user.getSpotifyDevices()) .syncStartHour(user.getSyncFrom()) .syncEndHour(user.getSyncTo()) .build(); }
[*] target: assertNotNull(cachedUser)
[-] pred: org. junit. Assert. assertNotNull ( cachedUser )
************************************
************************************
[+] input: testProducerConfigSupplier() { Properties consumerConfig = new Properties(); consumerConfig.setProperty("bootstrap.servers", "localhost:9092"); consumerConfig.setProperty("max.poll.records", "10"); consumerConfig.setProperty("group.id", "group-a"); consumerConfig.setProperty("metric.reporters", "org.apache.kafka.common.metrics.MetricsReporter"); Properties producerConfig = SubscriptionBuilder.producerConfigSupplier(consumerConfig).get(); "<AssertPlaceHolder>"; assertEquals("localhost:9092", producerConfig.getProperty("bootstrap.servers")); assertEquals("org.apache.kafka.common.metrics.MetricsReporter", producerConfig.getProperty("metric.reporters")); }
producerConfigSupplier(Properties consumerConfig) { return () -> { Properties producerProps = new Properties(); Set<String> definedProps = ProducerConfig.configNames(); consumerConfig.stringPropertyNames() .stream() .filter(definedProps::contains) .forEach(propertyName -> producerProps.setProperty( propertyName, consumerConfig.getProperty(propertyName))); return producerProps; }; }
[*] target: assertEquals(2, producerConfig.size())
[-] pred: org. junit. Assert. assertEquals ( 2, producerConfig. size ( ) )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), receiverKeys, 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  // TODO: The code currently supports MailboxStoragePayload objects inside ProtectedStorageEntry. Fix this. if (protectedStoragePayload instanceof MailboxStoragePayload) { MailboxStoragePayload mailboxStoragePayload = (MailboxStoragePayload) this.getProtectedStoragePayload(); return mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  } else { boolean result = this.ownerPubKey.equals(protectedStoragePayload.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForAddOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; } }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: InterruptedException { // Fake a pre-existing lock that's long since expired final ConsistentKeyLockStatus expired = makeStatusNow(); expect(lockState.getLocksForTx(defaultTx)).andReturn(ImmutableMap.of(defaultLockID, expired)); // pretend a huge multiple of the expiration time has passed currentTimeNS = currentTimeNS.plus(100, ChronoUnit.DAYS);  // Checker should compare the fake lock's timestamp to the current time expectSleepAfterWritingLock(expired);  // Checker must slice the store; we return the single expired lock column recordLockGetSliceAndReturnSingleEntry( StaticArrayEntry.of( codec.toLockCol(expired.getWriteTimestamp(), defaultLockRid, times), defaultLockVal));  ctrl.replay(); ExpiredLockException ele = null; try { locker.checkLocks(defaultTx); } catch (ExpiredLockException e) { ele = e; } "<AssertPlaceHolder>"; }
getWriteTimestamp() { return writeTimestamp; }
[*] target: assertNotNull(ele)
[-] pred: org. junit. Assert. assertNotNull ( ele )
************************************
************************************
[+] input: Exception { var duration = Duration.of(19, MILLIS); var expected = List.of();  var event = mock(RecordedEvent.class);  when(event.getDuration()).thenReturn(duration);  var mapper = new ThreadLockEventMapper();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { Duration duration = ev.getDuration(); if (duration.toMillis() > 20) { long timestamp = ev.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); if (hasField(ev, EVENT_THREAD, SIMPLE_CLASS_NAME)) { attr.put(THREAD_NAME, ev.getThread(EVENT_THREAD).getJavaName()); } if (hasField(ev, MONITOR_CLASS, SIMPLE_CLASS_NAME)) { attr.put(CLASS, ev.getClass(MONITOR_CLASS).getName()); } attr.put(DURATION, duration.toMillis()); RecordedThread eventThread = null; if (hasField(ev, EVENT_THREAD, SIMPLE_CLASS_NAME)) { eventThread = ev.getThread(EVENT_THREAD); } attr.put(THREAD_NAME, eventThread == null ? null : eventThread.getJavaName()); attr.put(STACK_TRACE, MethodSupport.serialize(ev.getStackTrace())); return Collections.singletonList(new Event(JFR_JAVA_MONITOR_WAIT, attr, timestamp)); } return Collections.emptyList(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); var name = "myName"; var cause = "too huge"; attr.put("name", name); attr.put("cause", cause); var longestPause = 21.77; var gauge1 = new Gauge(JFR_GARBAGE_COLLECTION_LONGEST_PAUSE, longestPause, now, attr); List<Metric> expected = List.of(gauge1);  var testClass = new GarbageCollectionMapper(); var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDouble(LONGEST_PAUSE)).thenReturn(longestPause); when(event.getString(NAME)).thenReturn(name); when(event.getString(CAUSE)).thenReturn(cause);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { long timestamp = ev.getStartTime().toEpochMilli(); double longestPause = 0; if (hasField(ev, LONGEST_PAUSE, SIMPLE_CLASS_NAME)) { longestPause = ev.getDouble(LONGEST_PAUSE); } Attributes attr = new Attributes(); if (hasField(ev, NAME, SIMPLE_CLASS_NAME)) { attr.put(NAME, ev.getString(NAME)); } if (hasField(ev, CAUSE, SIMPLE_CLASS_NAME)) { attr.put(CAUSE, ev.getString(CAUSE)); } return Collections.singletonList( new Gauge(JFR_GARBAGE_COLLECTION_LONGEST_PAUSE, longestPause, timestamp, attr)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: Exception { MutableFeatureMap mfm = new MutableFeatureMap(); mfm.add("goldrat", 1.618033988749); mfm.add("e", Math.E); mfm.add("pi", Math.PI); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(mfm, new MessageDigestHasher("SHA-512", "abcdefghi")); FeatureDomainProto fdp = hfm.serialize(); assertEquals(0, fdp.getVersion()); assertEquals("org.tribuo.hash.HashedFeatureMap", fdp.getClassName()); HashedFeatureMapProto hfmp = fdp.getSerializedData().unpack(HashedFeatureMapProto.class); HasherProto hasherProto = hfmp.getHasher(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.MessageDigestHasher", hasherProto.getClassName()); MessageDigestHasherProto mdhp = hasherProto.getSerializedData().unpack(MessageDigestHasherProto.class); assertEquals("SHA-512", mdhp.getHashType());  HashedFeatureMap hfmD = ProtoUtil.deserialize(fdp); hfmD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(hfm, hfmD)
[-] pred: org. junit. Assert. assertEquals ( hfm, hfmD )
************************************
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", G1GarbageCollectionSummarizer.EVENT_NAME, "unknown2", NetworkReadSummarizer.EVENT_NAME, "unknown3");  var expected = List.of(G1GarbageCollectionSummarizer.EVENT_NAME, NetworkReadSummarizer.EVENT_NAME); ToSummaryRegistry registry = ToSummaryRegistry.create(names);  var actual = registry.all().map(EventToSummary::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
all() { return mappers.stream(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetFolderByDocumentId01() { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/test.pdf");  List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item); assertEquals(2, indexes.size()); dbService.putItems(indexes);  // when FolderIndexRecord folder = index.getFolderByDocumentId(siteId, indexes.get(0).get("documentId").s()); FolderIndexRecord file = index.getFolderByDocumentId(siteId, indexes.get(1).get("documentId").s());  // then "<AssertPlaceHolder>"; assertNotNull(folder); assertEquals("a", folder.path()); assertEquals("folder", folder.type()); } }
getFolderByDocumentId(String siteId, String documentId);  /** * Get Folder Index by documentIds. * * @param siteId {@link String}
[*] target: assertNull(file)
[-] pred: org. junit. Assert. assertNull ( file )
************************************
************************************
[+] input: testFormatDecimalFour_ZeroValue() { double value = 0; String expected = "0.0000";  String result = DecimalUtil.formatDecimalFour(value);  Assertions."<AssertPlaceHolder>"; }
formatDecimalFour(double value) { return new DecimalFormat(FORMAT_4_DECIMALS).format(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: convertToEntityAttribute_inputNull_returnNull() { /* ACT */ final var result = uriConverter.convertToEntityAttribute(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
convertToEntityAttribute(final String string) { return string == null ? null : URI.create(string); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: createAndParseToken_ok() { String username = "test"; String token = JwtUtils.createToken(username); Assertions.assertTrue(token.startsWith("Bearer")); String username_parsed = JwtUtils.parseUsername(token); Assertions."<AssertPlaceHolder>"; }
parseUsername(String token) { token = token.substring(7); SecretKey key = Keys.hmacShaKeyFor(SECRET_TOKEN.getBytes(StandardCharsets.UTF_8)); return Jwts.parserBuilder() .setSigningKey(key) .build() .parseClaimsJws(token).getBody().getAudience(); }
[*] target: assertEquals(username, username_parsed)
[-] pred: org. junit. Assert. assertEquals ( username, username_parsed )
************************************
************************************
[+] input: testMultipleEventSummary() { var summaryStartTime = Instant.now().toEpochMilli();  var event1 = mock(RecordedEvent.class); var numOfEvents = 1; var event1StartTime = summaryStartTime + 1; var event1DurationNanos = 13700000;  var event2 = mock(RecordedEvent.class); numOfEvents = ++numOfEvents; var event2StartTime = summaryStartTime + 2; var event2DurationNanos = 24800000; // max duration of final summary var event2DurationMillis = Duration.ofNanos(event2DurationNanos).toMillis();  var event3 = mock(RecordedEvent.class); numOfEvents = ++numOfEvents; var event3StartTime = summaryStartTime + 3; var event3DurationNanos = 1000000; // min duration of final summary var event3DurationMillis = Duration.ofNanos(event3DurationNanos).toMillis();  var summedDurationNanos = event1DurationNanos + event2DurationNanos + event3DurationNanos; var summedDurationMillis = Duration.ofNanos(summedDurationNanos).toMillis();  var expectedSummaryMetric = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, numOfEvents, // count summedDurationMillis, // sum event3DurationMillis, // min event2DurationMillis, // max summaryStartTime, // startTimeMs event3StartTime, // endTimeMs: the summary metric endTimeMs is the eventStartTime of // each RecordedEvent new Attributes());  var expected = List.of(expectedSummaryMetric);  var testClass = new G1GarbageCollectionSummarizer(summaryStartTime);  when(event1.getStartTime()).thenReturn(Instant.ofEpochMilli(event1StartTime)); when(event1.getDuration(DURATION)).thenReturn(Duration.ofNanos(event1DurationNanos));  when(event2.getStartTime()).thenReturn(Instant.ofEpochMilli(event2StartTime)); when(event2.getDuration(DURATION)).thenReturn(Duration.ofNanos(event2DurationNanos));  when(event3.getStartTime()).thenReturn(Instant.ofEpochMilli(event3StartTime)); when(event3.getDuration(DURATION)).thenReturn(Duration.ofNanos(event3DurationNanos));  // Summarize all events testClass.accept(event1); testClass.accept(event2); testClass.accept(event3);  var result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>"; }
summarize() { Attributes attr = new Attributes(); Summary out = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, count, summarizer.getDurationMillis(), summarizer.getMinDurationMillis(), summarizer.getMaxDurationMillis(), startTimeMs, endTimeMs, attr); return Stream.of(out); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testCreateProvider() {  // Act CustomProvider customProvider = ParamManager.createProvider(CustomProvider.class);  // Assert "<AssertPlaceHolder>"; }
createProvider(Class<T> providerClass) { try { Constructor<T> constructor = providerClass.getDeclaredConstructor(CacheManager.class); T provider = constructor.newInstance(cacheManager); // FIXME: avoid reflection here as we may have issues (#1280) provider.setTransformationManager(transformationManager); return provider; } catch (ReflectiveOperationException e) { throw new RuntimeException("Unexpected error occurred. Please raise issue at " + "https://github.com/aws-powertools/powertools-lambda-java/issues", e); } }
[*] target: assertNotNull(customProvider)
[-] pred: org. junit. Assert. assertNotNull ( customProvider )
************************************
************************************
[+] input: testSaveUser() { userService.save(new User(UUID.randomUUID().toString(), "John", "McClane")); userService.save(new User(UUID.randomUUID().toString(), "Chandler", "Bing")); userService.save(new User(UUID.randomUUID().toString(), "Joey", "Tribbiani")); userService.save(new User(UUID.randomUUID().toString(), "John", "Kennedy"));  List<com.madadipouya.springkafkatest.entity.User> users = userService.getUsers("John");  "<AssertPlaceHolder>"; assertEquals(4, users.size()); assertEquals("Kennedy", users.get(0).getLastName()); assertEquals("McClane", users.get(1).getLastName()); assertEquals("Rambo", users.get(2).getLastName()); assertEquals("Wick", users.get(3).getLastName()); }
getUsers(String firstName);
[*] target: assertNotNull(users)
[-] pred: org. junit. Assert. assertNotNull ( users )
************************************
************************************
[+] input: serializationTest() { DenseMatrix a = generateA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); "<AssertPlaceHolder>"; }
serialize() { TensorProto.Builder builder = TensorProto.newBuilder();  builder.setVersion(CURRENT_VERSION); builder.setClassName(DenseMatrix.class.getName());  DenseTensorProto.Builder dataBuilder = DenseTensorProto.newBuilder(); dataBuilder.addAllDimensions(Arrays.stream(shape).boxed().collect(Collectors.toList())); ByteBuffer buffer = ByteBuffer.allocate(numElements * 8).order(ByteOrder.LITTLE_ENDIAN); DoubleBuffer doubleBuffer = buffer.asDoubleBuffer(); for (int i = 0; i < values.length; i ++) { doubleBuffer.put(values[i]); } doubleBuffer.rewind(); dataBuilder.setValues(ByteString.copyFrom(buffer)); builder.setSerializedData(Any.pack(dataBuilder.build()));  return builder.build(); }
[*] target: assertEquals(a,deser)
[-] pred: org. junit. Assert. assertEquals ( a, deser )
************************************
************************************
[+] input: testConvert_with_null_input() { final URLConverter urlConverter = new URLConverter();  final URL actual = urlConverter.convert(null);  //asserts "<AssertPlaceHolder>"; }
convert(final Object value) { if (value == null) { return null; }  if (value instanceof URL) { return (URL) value; }  if (value instanceof File) { File file = (File) value; try { return FileUtil.toURL(file); } catch (MalformedURLException muex) { throw new TypeConversionException(value, muex); } }  if (value instanceof URI) { URI uri = (URI) value; try { return uri.toURL(); } catch (MalformedURLException muex) { throw new TypeConversionException(value, muex); } }  try { return new URL(value.toString()); } catch (MalformedURLException muex) { throw new TypeConversionException(value, muex); } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: testCreateNewNettyInternalThread() { InternalThread t = InternalThreads.newThread(); assertTrue(t instanceof NettyInternalThread); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = InternalThreads.newThread(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = InternalThreads.newThread(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(InternalThreads.newThread("foo"), null, "foo"); assertThreadInfo(InternalThreads.newThread(group, "foo"), group, "foo");  t = InternalThreads.newThread(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
thread();
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
************************************
[+] input: shouldTestCacheKeysEqual() { Date date = new Date(); CacheKey key1 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); CacheKey key2 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); assertEquals(key1, key2); assertEquals(key2, key1); assertEquals(key1.hashCode(), key2.hashCode()); "<AssertPlaceHolder>"; }
toString() { StringJoiner returnValue = new StringJoiner(":"); returnValue.add(String.valueOf(hashcode)); returnValue.add(String.valueOf(checksum)); updateList.stream().map(ArrayUtil::toString).forEach(returnValue::add); return returnValue.toString(); }
[*] target: assertEquals(key1.toString(), key2.toString())
[-] pred: org. junit. Assert. assertEquals ( key1. toString ( ), key2. toString ( ) )
************************************
************************************
[+] input: testStorageTemplateDataOnStatefulSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(2, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals("StateStoreProvider", storeProviderTemplateData.filename()); }
build(final String basePackage, final String appName, final List<Content> contents, final StorageType storageType, final Map<Model, DatabaseType> databases, final ProjectionType projectionType, final Boolean useAnnotations, final Boolean useCQRS) { final String persistencePackage = PersistenceDetail.resolvePackage(basePackage); final List<TemplateData> templatesData = new ArrayList<>(); templatesData.addAll(AdapterTemplateData.from(persistencePackage, storageType, contents)); templatesData.addAll(QueriesTemplateDataFactory.from(persistencePackage, useCQRS, contents)); templatesData.add(new DatabasePropertiesTemplateData(appName, databases)); templatesData.addAll(buildStoreProvidersTemplateData(persistencePackage, useCQRS, useAnnotations, storageType, projectionType, templatesData, contents));  if (useAnnotations) { templatesData.add(PersistenceSetupTemplateData.from(basePackage, persistencePackage, useCQRS, storageType, projectionType, templatesData, contents)); }  return templatesData; }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
************************************
[+] input: changeUserPassword() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "123456"); assertTrue(valid);  ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(user.getId(), dto1); "<AssertPlaceHolder>";  valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "147258"); assertTrue(valid); }
changeUserPassword(Integer id, ResetPasswordDTO dto) { throwUserNotExistById(id); return userIdentityService.changePassword(id, dto.getNewPassword()); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: changeUsername() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changeUsername(userIdentity.getUserId(), "pedro1"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro1", "123456"); "<AssertPlaceHolder>"; }
verifyUsernamePassword(Integer userId, String username, String password) { QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, userId) .eq(UserIdentityDO::getIdentityType, IdentityConstant.USERNAME_PASSWORD_IDENTITY) .eq(UserIdentityDO::getIdentifier, username); UserIdentityDO userIdentity = this.baseMapper.selectOne(wrapper); return EncryptUtil.verify(userIdentity.getCredential(), password); }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
************************************
[+] input: testFilterAndSortWithSameIdentifier() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0"); v1_0_0.setIdentifier("one");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); v1_0_5.setIdentifier("one");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1).iterator().next()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
setIdentifier(String identifier) { this.identifier = identifier; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/S3Bucket.cmd")); String actual = exportS3Buckets.getTFImport(getAwsBuckets()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSBucket> awsBuckets) { return TFImport.builder() .importLines(awsBuckets.stream() .map(awsBucket -> TFImportLine.builder() .address(awsBucket.getTerraformAddress()) .id(awsBucket.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final Long result = function.call(null, "2020-01-01", "years"); "<AssertPlaceHolder>"; }
call(@Nullable final String encodedFrom, @Nullable final String encodedTo, @Nullable final String calendarDuration) throws Exception { if (encodedFrom == null || encodedTo == null) { return null; } else if (calendarDuration == null) { throw new InvalidUserInputError("Calendar duration must be provided"); }  final TemporalUnit temporalUnit = CALENDAR_DURATION_TO_TEMPORAL.get(calendarDuration);  if (temporalUnit == null) { throw new InvalidUserInputError("Invalid calendar duration: " + calendarDuration); }  final ZonedDateTime from = parse(encodedFrom); final ZonedDateTime to = parse(encodedTo);  if (from == null || to == null) { // If either of the arguments is null (invalid input), then the result is null. return null; }  return from.until(to, temporalUnit); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new OneByteAtATimeByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
read(ByteBuffer dst) throws IOException { synchronized (mutex) { if (closed) { throw new ClosedChannelException(); } int result = 0; while (dst.hasRemaining()) { int outputSize = decode(); if (outputSize <= 0) { return result == 0 ? outputSize : result; } result += consume(dst); } return result; } }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: equals_true_when_same_object() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(vec3c);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSEgressOnlyInternetGateway> internetGateways = getAwsEgressOnlyInternetGateways();  Maps<Resource> resourceMaps = exportEgressOnlyInternetGateways.getResourceMaps(internetGateways); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EgressOnlyInternetGateway.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSEgressOnlyInternetGateway> awsEgressOnlyInternetGateways) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSEgressOnlyInternetGateway awsEgressOnlyInternetGateway : awsEgressOnlyInternetGateways) { EgressOnlyInternetGateway egressOnlyInternetGateway = awsEgressOnlyInternetGateway.getEgressOnlyInternetGateway(); List<InternetGatewayAttachment> internetGatewayAttachments = egressOnlyInternetGateway.attachments();  for (InternetGatewayAttachment internetGatewayAttachment : internetGatewayAttachments) { resourceMapsBuilder.map( Resource.builder() .api(awsEgressOnlyInternetGateway.getTerraformResourceName()) .name(egressOnlyInternetGateway.egressOnlyInternetGatewayId()) .argument("vpc_id", TFString.build(internetGatewayAttachment.vpcId())) .argument("tags", TFMap.build( egressOnlyInternetGateway.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); } } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testIsTailingFalse() { final File file = new File(EXISTS); final Tailer tailer = new Tailer(file); "<AssertPlaceHolder>"; }
isTailing() { return tailing; }
[*] target: assertFalse(tailer.isTailing())
[-] pred: org. junit. Assert. assertFalse ( tailer. isTailing() )
************************************
************************************
[+] input: equals_false_when_different_object_type() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); BlockPos blockPos = new BlockPos(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(blockPos);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); Long datasetGid = IdGenerator.getInstance().nextId(); abnormalDatasetService.create(abnormalDataset, datasetGid);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); TaskRun taskRun = MockTaskRunFactory.create(TaskRunStatus.SUCCESS); boolean result = abnormalDatasetService.updateStatus(abnormalDatasets.get(0).getId(), taskRun); "<AssertPlaceHolder>"; }
updateStatus(Long id, TaskRun taskRun) { TaskRunStatus taskRunStatus = taskRun.getStatus(); OffsetDateTime updateTime = taskRunStatus.isTermState() ? taskRun.getTermAt() : DateTimeUtils.now(); String status = taskRunStatus.isSuccess() ? "SUCCESS" : "FAILED"; return abnormalDatasetRepository.updateStatus(id, status, updateTime); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: getMaxAccess_inputCorrectOperatorLessThanEquals_returnAccessInteger() { /* ARRANGE */ final var maxAccess = 2;  final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource(String.valueOf(maxAccess), URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getMaxAccess(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
getMaxAccess(final Rule rule) throws NumberFormatException { final var constraint = rule.getConstraint().get(0); final var value = ((ConstraintImpl) constraint).getRightOperand().getValue(); final var operator = ((ConstraintImpl) constraint).getOperator();  int number; try { number = Integer.parseInt(value); } catch (NumberFormatException e) { if (log.isDebugEnabled()) { log.debug("Failed to parse value to integer. [exception=({})]", e.getMessage(), e); } throw e; }  if (number < 0) { number = 0; }  switch (operator) { case EQ: case LTEQ: return number; case LT: return number - 1; default: return 0; } }
[*] target: assertEquals(maxAccess, result)
[-] pred: org. junit. Assert. assertEquals ( maxAccess, result )
************************************
************************************
[+] input: shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() { // given Amenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION); Amenity updatedAmenity = getUpdatedCommunityAmenity(); AmenityDto updatedDto = getTestAmenityDto(); Community community = TestUtils.CommunityHelpers.getTestCommunity();  given(amenityRepository.findByAmenityId(TEST_AMENITY_ID)) .willReturn(Optional.of(testAmenity)); given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID)) .willReturn(Optional.of(community)); given(amenityRepository.save(updatedAmenity)) .willReturn(null);  // when boolean result = amenitySDJpaService.updateAmenity(updatedDto);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID); verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID); verify(amenityRepository).save(updatedAmenity); }
updateAmenity(AmenityDto updatedAmenity) { String amenityId = updatedAmenity.getAmenityId(); return amenityRepository.findByAmenityId(amenityId) .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId()) .map(community -> { Amenity updated = new Amenity(); updated.setName(updatedAmenity.getName()); updated.setPrice(updatedAmenity.getPrice()); updated.setId(amenity.getId()); updated.setAmenityId(amenityId); updated.setDescription(updatedAmenity.getDescription()); return updated; }) .orElse(null)) .map(amenityRepository::save).isPresent(); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testInvokeWithUrlParams() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withParameter("foo", "a") .withParameter("bar", "b") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testRef() { JsonObject resolved = JsonRef.resolve(CIRCULAR);  "<AssertPlaceHolder>"; assertNotNull(resolved.getJsonObject("definitions")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address")); assertEquals( "string", resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address") .getString("type")); }
resolve(JsonObject json) { return JsonRef.resolve(json); }
[*] target: assertNotNull(resolved)
[-] pred: org. junit. Assert. assertNotNull ( resolved )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RouteTable.cmd")); String actual = exportRouteTables.getTFImport(getAwsRouteTables()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRouteTable> awsRouteTables) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder(); for (AWSRouteTable awsRouteTable : awsRouteTables) { tfImportBuilder.importLine( TFImportLine.builder() .address(awsRouteTable.getTerraformAddress()) .id(awsRouteTable.getResourceId()) .build() ); awsRouteTable.getAwsRoutes().forEach(awsRoute -> tfImportBuilder.importLine( TFImportLine.builder() .address(awsRoute.getTerraformAddress()) .id(awsRoute.getResourceId()) .build() ) ); awsRouteTable.getAwsRouteTableAssociations().forEach(awsRouteTableAssociation -> tfImportBuilder.importLine( TFImportLine.builder() .address(awsRouteTableAssociation.getTerraformAddress()) .id(awsRouteTableAssociation.getResourceId()) .build() ) ); } return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testDoFixValueAssert_greater() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) >= Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: testSolve() { int n = 4; int m = 3; int k = 2; int[][] bottom = { {1, 4}, {3, 2}, {6, 5} }; int[][] top = { {1, 4}, {3, 2}, {6, 7}, }; int[][] left = { {1, 4}, {1, 4}, {0, 0}, {0, 7} }; int[][] right = { {6, 5}, {6, 5}, {0, 0}, {0, 7} };  int[][] front = { {1, 3, 6}, {1, 3, 6}, {0, 0, 0}, {0, 0, 7} };  int[][] back = { {4, 3, 5}, {4, 2, 5}, {0, 0, 0}, {0, 0, 7} }; ProblemF problemF = new ProblemF(n, m, k, bottom, top, left, right, front, back); "<AssertPlaceHolder>"; }
solve() { if (!processZerosForRightLeft() || !processZerosForFrontBack() || !processZerosForBottomAndTop()) { return null; } if (!shiftBorders()) { return null; }  LinkedList<Triple> coords = new LinkedList<>(); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { if (front[i][j] == 0) continue; for (int l = 0; l < k; l++) { if (bottom[j][l] == 0 || left[i][l] == 0) continue; coords.add(new Triple(i, j, l)); } } } coords.sort(Comparator.comparingInt(triple -> Math.min(triple.i, n - 1 - triple.i) + Math.min(triple.j, m - 1 - triple.j) + Math.min(triple.l, k - 1 - triple.l) ));  int deletedLastIter = 1; while (deletedLastIter != 0) { deletedLastIter = 0; ListIterator<Triple> listIterator = coords.listIterator(); while (listIterator.hasNext()) { Triple triple = listIterator.next(); int code = process(triple.i, triple.j, triple.l); if (code == 1) { listIterator.remove(); deletedLastIter++; } if (code == 2) { return null; } } } prepareToOutput(); return field; }
[*] target: assertNotNull(problemF.solve())
[-] pred: org. junit. Assert. assertNotNull ( problemF. solve() )
************************************
************************************
[+] input: testGroupByMajor() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1");  final Map<Integer, BusinessRule> map = BusinessRule.groupByMajor(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1)); assertEquals(v2_1_1, map.get(2)); }
setVersion(String version) { this.version = version; semver = null; }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
************************************
[+] input: test_update() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); assertEquals(info, refTableVersionInfo); refTableVersionInfo.setTableName("table_update"); refTableVersionRepository.update(refTableVersionInfo); RefTableVersionInfo refTableVersionInfo_update = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>"; }
findByVersionId(Long versionId) { if (Objects.isNull(versionId)) { log.debug("version id  is null"); return null; } return selectOne(ImmutableMap.of(RTVI_VERSION_ID, versionId)); }
[*] target: assertEquals(refTableVersionInfo, refTableVersionInfo_update)
[-] pred: org. junit. Assert. assertEquals ( refTableVersionInfo, refTableVersionInfo_update )
************************************
************************************
[+] input: should_result_millis_when_minutes() {  var expected = 5 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("5minutes");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: nullThread() { var recordedEvent = mock(RecordedEvent.class); var now = System.currentTimeMillis(); var startTime = Instant.ofEpochMilli(now); var allocated = 1250229920d;  var attr = new Attributes(); var gauge = new Gauge(JFR_THREAD_ALLOCATION_STATISTICS_ALLOCATED, allocated, now, attr); var expected = List.of(gauge);  var testClass = new ThreadAllocationStatisticsMapper();  when(recordedEvent.getStartTime()).thenReturn(startTime); when(recordedEvent.getDouble(ALLOCATED)).thenReturn(allocated); when(recordedEvent.getValue(THREAD)).thenReturn(null);  var result = testClass.apply(recordedEvent); "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { long time = ev.getStartTime().toEpochMilli(); double allocated = 0; if (hasField(ev, ALLOCATED, SIMPLE_CLASS_NAME)) { allocated = ev.getDouble(ALLOCATED); } RecordedThread t = null; if (hasField(ev, THREAD, SIMPLE_CLASS_NAME)) { t = ev.getValue(THREAD); } Attributes attr = new Attributes(); if (t != null) { attr.put(THREAD_NAME, t.getJavaName()); attr.put(THREAD_OS_NAME, t.getOSName()); } return Collections.singletonList( new Gauge(JFR_THREAD_ALLOCATION_STATISTICS_ALLOCATED, allocated, time, attr)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: JsonProcessingException { // Write a message (John Wick user) to Kafka using a test producer String uuid = "11111"; String message = objectMapper.writeValueAsString(new User(uuid, "John", "Wick")); producer.send(new ProducerRecord<>(TOPIC_NAME, 0, uuid, message)); producer.flush();  // Read the message and assert its properties verify(userKafkaConsumer, timeout(10000).times(1)) .logKafkaMessages(userArgumentCaptor.capture(), topicArgumentCaptor.capture(), partitionArgumentCaptor.capture(), offsetArgumentCaptor.capture());  User user = userArgumentCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("11111", user.getUuid()); assertEquals("John", user.getFirstName()); assertEquals("Wick", user.getLastName()); assertEquals(TOPIC_NAME, topicArgumentCaptor.getValue()); assertEquals(0, partitionArgumentCaptor.getValue()); assertEquals(0, offsetArgumentCaptor.getValue()); }
logKafkaMessages(@Payload User user, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic, @Header(KafkaHeaders.RECEIVED_PARTITION) Integer partition, @Header(KafkaHeaders.OFFSET) Long offset) { logger.info("Received a message contains a user information with id {}, from {} topic, " + "{} partition, and {} offset", user.getUuid(), topic, partition, offset); userService.save(user); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
************************************
[+] input: testRehashing() { int count = 20000;  for (int i = 0; i < count; i++) { map.put(i, "value" + i); }  for (int i = 0; i < count; i++) { assertEquals("value" + i, map.get(i)); } "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(count, map.size())
[-] pred: org. junit. Assert. assertEquals ( count, map. size() )
************************************
************************************
[+] input: test1() { String s = "(123)"; List<String> expected = List.of("(1, 23)", "(12, 3)", "(1.2, 3)", "(1, 2.3)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
ambiguousCoordinates(String s) { int n = s.length(); List<String> ans = new ArrayList<>(); for (int i = 2; i <= n - 2; i++) { if ( (s.charAt(1) != '0' || s.charAt(i - 1) != '0' || i == 2) && (i == n - 2 || s.charAt(i) != '0' || s.charAt(n - 2) != '0') ) { List<String> l1 = f(s, 1, i); List<String> l2 = f(s, i, n - 1); for (String s1 : l1) for (String s2 : l2) ans.add("(" + s1 + ", " + s2 + ")"); } } return ans;  }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
************************************
[+] input: IOException {  final File uploadFile = new File(UPLOAD_FILE_NAME); byte[] bytes = Files.readAllBytes(uploadFile.toPath());  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenReturn(bytes);  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() throws GestaltException { try { Blob blob = storage.get(BlobId.of(bucketName, objectName));  byte[] objectBytes = blob.getContent(); return new ByteArrayInputStream(objectBytes);  } catch (StorageException e) { throw new GestaltException("Exception loading Google Cloud Storage object: " + objectName + ", bucket: " + bucketName + ", with error:" + e.getMessage(), e); } }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream ( ) )
************************************
************************************
[+] input: IOException {  Guid guid1 = Guid.fromRandomUuid();  byte[] data = guid1.toBytes(); Guid guid2 = Guid.fromBytes(data);  assertTrue(guid1.equals(guid2));  Guid guid3  = Guid.fromUuid(UUID.randomUUID()); "<AssertPlaceHolder>";  }
equals(Object o) {  if (o == null) { return false; } Class theClass = o.getClass(); if (theClass.isAssignableFrom(Guid.class)) { return this.uuid.equals(((Guid) o).uuid); } return super.equals(o); }
[*] target: assertFalse(guid1.equals(guid3))
[-] pred: org. junit. Assert. assertFalse ( guid1. equals ( guid3 ) )
************************************
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.json");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON.match(document.getContentType())); }
loadDocument(final URI url, final DocumentLoaderOptions options) throws JsonLdError {  if (!"file".equalsIgnoreCase(url.getScheme())) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "Unsupported URL scheme [" + url.getScheme() + "]. FileLoader accepts only file scheme."); }  final File file = new File(url);  if (!file.canRead()) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File [" + url + "] is not accessible to read."); }  final MediaType contentType = detectedContentType(url.getPath().toLowerCase()) .orElseGet(() -> { LOGGER.log(Level.WARNING, "Cannot detect file [{0}] content type. Trying application/json.", url); return MediaType.JSON; });  final DocumentReader<InputStream> reader = resolver.getReader(contentType);  try (final InputStream is = new FileInputStream(file)) { final Document document = reader.read(is); document.setDocumentUrl(url); return document;  } catch (FileNotFoundException e) {  throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, "File not found [" + url + "].");  } catch (IOException e) { throw new JsonLdError(JsonLdErrorCode.LOADING_DOCUMENT_FAILED, e); } }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
************************************
[+] input: setPropertyShouldDoNothingGetPropertyShouldReturnNull() { // prepare final Object key = new Object(); final Object value = new Object();  // run Stack s = new Stack(); s.setProperty(key, value);  // assert "<AssertPlaceHolder>";  }
getProperty(Object key) { return null; }
[*] target: assertNull(s.getProperty(key))
[-] pred: org. junit. Assert. assertNull ( s. getProperty ( key ) )
************************************
************************************
[+] input: testTasks_argTask() {  var TASKS = List.of(StandardArgs.task("do_something", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something ARG_VALUE"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertEquals("ARG_VALUE", tasks.get(0).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRestApi> awsRestApis = List.of( AWSRestApi.builder() .restApi(RestApi.builder() .name("PetStore") .description("Your first API with Amazon API Gateway. This is a sample API that integrates via HTTP with our demo Pet Store endpoints") .apiKeySource(ApiKeySourceType.HEADER) .disableExecuteApiEndpoint(false) .endpointConfiguration(EndpointConfiguration.builder() .types(EndpointType.REGIONAL) .build()) .build() ) .awsStage(AWSStage.builder() .stage(Stage.builder() .stageName("PROD") .deploymentId("0t5yci") .tracingEnabled(false) .build()) .awsDeployment(AWSDeployment.builder() .restApiName("PetStore") .deployment( GetDeploymentResponse.builder() .id("0t5yci") .description("test deploy") .build()) .build()) .build()) .build());  Maps<Resource> resourceMaps = exportApigatewayRestApis.getResourceMaps(awsRestApis); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ApigatewayRestApi.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRestApi> awsRestApis) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSRestApi awsRestApi : awsRestApis) { RestApi restApi = awsRestApi.getRestApi();  resourceMapsBuilder.map( Resource.builder() .api(awsRestApi.getTerraformResourceName()) .name(awsRestApi.getResourceName()) .argument("name", TFString.build(restApi.name())) .argument("description", TFString.build(restApi.description())) .argument("api_key_source", TFString.build(restApi.apiKeySourceAsString())) .argument("disable_execute_api_endpoint", TFBool.build(restApi.disableExecuteApiEndpoint())) .argument("endpoint_configuration", TFBlock.builder() .argument("types", TFList.build( restApi.endpointConfiguration() .typesAsStrings().stream() .map(type -> TFString.builder().isLineIndent(false).value(type) .build()) .collect(Collectors.toList()) )) .argument("vpc_endpoint_ids", TFList.build( restApi.endpointConfiguration() .vpcEndpointIds().stream() .map(type -> TFString.build( MessageFormat.format("aws_vpc_endpoint.{0}.id", type))) .collect(Collectors.toList()) )) .build() ) .build()) .build();  awsRestApi.getAwsStages().forEach(awsStage -> { Stage stage = awsStage.getStage(); resourceMapsBuilder.map( Resource.builder() .api(awsStage.getTerraformResourceName()) .name(awsStage.getResourceName()) .argument("rest_api_id", TFExpression.build( MessageFormat.format("aws_api_gateway_rest_api.{0}.id", restApi.name()))) .argument("deployment_id", TFExpression.build( MessageFormat.format("aws_api_gateway_deployment.{0}-{1}.id", restApi.name(), stage.deploymentId()))) .argument("stage_name", TFString.build(stage.stageName())) .argument("xray_tracing_enabled", TFBool.build(stage.tracingEnabled())) .argumentIf(Optional.ofNullable(stage.accessLogSettings()).isPresent(), "access_log_settings", () -> TFBlock.builder() .argument("destination_arn", TFString.build(stage.accessLogSettings().destinationArn())) .argument("format", TFString.build(stage.accessLogSettings().format())) .build()) .build());  AWSDeployment awsDeployment = awsStage.getAwsDeployment(); GetDeploymentResponse deployment = awsDeployment.getDeployment();  resourceMapsBuilder.map( Resource.builder() .api(awsDeployment.getTerraformResourceName()) .name(awsDeployment.getResourceName()) .argument("rest_api_id", TFExpression.build( MessageFormat.format("aws_api_gateway_rest_api.{0}.id", restApi.name()))) .argument("stage_name", TFString.build(stage.stageName())) .argument("description", TFString.build(deployment.description())) .build()); } );   } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetKafkaLatestMessage() { QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; }
getLatestMessage(Consumer<byte[], byte[]> consumer, String topicName, InlongStreamInfo streamInfo, QueryMessageRequest request) { List<BriefMQMessage> messageList = new ArrayList<>(); Integer messageCount = request.getMessageCount(); try { List<PartitionInfo> partitionInfoList = consumer.partitionsFor(topicName); List<TopicPartition> topicPartitionList = partitionInfoList.stream() .map(topicPartition -> new TopicPartition(topicPartition.topic(), topicPartition.partition())) .collect(Collectors.toList());  Map<TopicPartition, Long> beginningTopicPartitionList = consumer.beginningOffsets(topicPartitionList); Map<TopicPartition, Long> endTopicPartitionList = consumer.endOffsets(topicPartitionList);  int count = (int) Math.ceil((double) messageCount / topicPartitionList.size()); Map<TopicPartition, Long> expectedOffsetMap = beginningTopicPartitionList.entrySet() .stream() .map(entry -> { long beginningOffset = entry.getValue(); long endOffset = endTopicPartitionList.getOrDefault(entry.getKey(), beginningOffset); Long offset = (endOffset - beginningOffset) >= count ? (endOffset - count) : beginningOffset; return Pair.of(entry.getKey(), offset); }).collect(Collectors.toMap(Pair::getKey, Pair::getValue));  consumer.assign(topicPartitionList); expectedOffsetMap.forEach(consumer::seek);  int index = 0; ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord<byte[], byte[]> record : records) { Map<String, String> headers = new HashMap<>(); for (Header header : record.headers()) { headers.put(header.key(), new String(header.value(), StandardCharsets.UTF_8)); }  MessageWrapType messageWrapType = MessageWrapType.forType(streamInfo.getWrapType()); if (headers.get(InlongConstants.MSG_ENCODE_VER) != null) { messageWrapType = MessageWrapType.valueOf(Integer.parseInt(headers.get(InlongConstants.MSG_ENCODE_VER))); } DeserializeOperator deserializeOperator = deserializeOperatorFactory.getInstance(messageWrapType); deserializeOperator.decodeMsg(streamInfo, messageList, record.value(), headers, index, request); if (messageList.size() >= messageCount) { break; } } } catch (Exception e) { String errMsg = "decode msg error: "; LOGGER.error(errMsg, e); throw new BusinessException(errMsg + e.getMessage()); } finally { consumer.close(); }  LOGGER.debug("success query messages for topic={}, size={}, returned size={}", topicName, messageList.size(), messageCount); // only return a list of messages of the specified count int fromIndex = (messageList.size() > messageCount) ? (messageList.size() - messageCount) : 0; List<BriefMQMessage> resultList = messageList.subList(fromIndex, messageList.size()); for (int i = 0; i < resultList.size(); i++) { BriefMQMessage message = resultList.get(i); message.setId(i + 1); }  return resultList; }
[*] target: assertEquals(0, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 0, messages. size ( ) )
************************************
************************************
[+] input: shouldRetrieveAnEmptyRelatedObject_onceEventInvolvedObjectHasNoValue() { event.setRelated(null); ObjectReference reference = ObjectReferenceMapper.map(event.getRelated()); "<AssertPlaceHolder>"; }
map(io.fabric8.kubernetes.api.model.ObjectReference reference) { if (reference == null) { return null; } ObjectReference objectReference = new ObjectReference(); objectReference.setKind(reference.getKind()); objectReference.setNamespace(reference.getNamespace()); objectReference.setName(reference.getName()); objectReference.setUid(reference.getUid()); return objectReference; }
[*] target: assertNull(reference)
[-] pred: org. junit. Assert. assertNull ( reference )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } final ConfigConverter<T> converter = metadata.getConverter(); if (converter == null) { final String message = "No converter for type '" + metadata.getValueType() + "' + of property '" + metadata.getName() + "'" + " defined"; return DefaultConfigViolation.of(metadata, message); } try { converter.convert(metadata.getRawValue()); } catch (final Exception e) { final String message = "Value '" + metadata.getRawValue() + "' of property '" + metadata.getName() + "' " + "can not be converted to '" + metadata.getValueType() + "'"; return DefaultConfigViolation.of(metadata, message); } return null; }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: priceGE12() { List<Product> products = dao.findAllByPriceGreaterThanEqual(12.0); "<AssertPlaceHolder>"; System.out.println(products); }
findAllByPriceGreaterThanEqual(double amount);
[*] target: assertEquals(3, products.size())
[-] pred: org. junit. Assert. assertEquals ( 3, products. size ( ) )
************************************
************************************
[+] input: test2() { String s = "(00011)"; List<String> expected = List.of("(0.001, 1)", "(0, 0.011)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
ambiguousCoordinates(String s) { int n = s.length(); List<String> ans = new ArrayList<>(); for (int i = 2; i <= n - 2; i++) { if ( (s.charAt(1) != '0' || s.charAt(i - 1) != '0' || i == 2) && (i == n - 2 || s.charAt(i) != '0' || s.charAt(n - 2) != '0') ) { List<String> l1 = f(s, 1, i); List<String> l2 = f(s, i, n - 1); for (String s1 : l1) for (String s2 : l2) ans.add("(" + s1 + ", " + s2 + ")"); } } return ans;  }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
************************************
[+] input: should_result_even_has_space_between_value_and_symbol() {  var expected = 0.5d;  var actual = NumberUtil.fromHumanReadable("50 %");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: GestaltException { ClassPathConfigSource classPathConfigSource = new ClassPathConfigSource("test.properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, classPathConfigSource::loadList); }
hasList() { return false; }
[*] target: assertFalse(classPathConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( classPathConfigSource. hasList() )
************************************
************************************
[+] input: mapDateStringToDate_shouldNotMapWhenStringIsNonsense() { String expected = "dAWDsdd3a22";  LocalDate actual = dateMapper.mapDateStringToDate(expected);  "<AssertPlaceHolder>"; }
mapDateStringToDate(String dateString) { if(dateString == null || dateString.equals("")) { return null; } var splitString = dateString.split("-"); try { return LocalDate.of(Integer.parseInt(splitString[0]), Integer.parseInt(splitString[1]), Integer.parseInt(splitString[2])); } catch (NumberFormatException e) { return null; } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: listSucceeds() { Flux<Simple> response = graphqlClient.flux("query-list.graphql", Simple.class); List<Simple> list = response.collectList().block(); "<AssertPlaceHolder>"; assertEquals(1, list.size()); }
flux(String resource, Class<T> returnType);
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
************************************
[+] input: testCenterHeadingOdd() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfile", '#', 51); String expected = "##################### TASfile #####################"; "<AssertPlaceHolder>"; }
createCenteredHeading(String text, char spacingChar, int headingWidth) {  if (text == null || text.isEmpty()) { return createPaddedString(spacingChar, headingWidth); }  text = " " + text + " ";  int spacingWidth = headingWidth - text.length();  String paddingPre = createPaddedString(spacingChar, spacingWidth % 2 == 1 ? spacingWidth / 2 + 1 : spacingWidth / 2); String paddingSuf = createPaddedString(spacingChar, spacingWidth / 2);  return String.format("%s%s%s", paddingPre, text, paddingSuf); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("permission", CommandEvent.class); SlashCommandDefinition definition = SlashCommandDefinition.build(method, validator, LOCALIZATION_FUNCTION).orElse(null);  "<AssertPlaceHolder>";  assertEquals(1, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("permission")); }
build(@NotNull Method method, @NotNull ValidatorRegistry validatorRegistry, @NotNull LocalizationFunction localizationFunction) {  if (!method.isAnnotationPresent(SlashCommand.class) || !method.getDeclaringClass().isAnnotationPresent(Interaction.class)) { return Optional.empty(); }  SlashCommand command = method.getAnnotation(SlashCommand.class); Interaction interaction = method.getDeclaringClass().getAnnotation(Interaction.class);  if (!command.isActive()) { log.debug("Command {} is set inactive. Skipping this command!", method.getName()); return Optional.empty(); }  Set<String> permissions = new HashSet<>(); if (method.isAnnotationPresent(Permissions.class)) { Permissions permission = method.getAnnotation(Permissions.class); permissions = new HashSet<>(Arrays.asList(permission.value())); }  String label = interaction.value() + " " + command.value(); while (label.contains("  ")) { label = label.replaceAll(" {2}", " "); } label = label.trim();  if (label.isEmpty()) { logError("Labels must not be empty!", method); return Optional.empty(); }  // build parameter definitions List<ParameterDefinition> parameters = new ArrayList<>(); for (Parameter parameter : method.getParameters()) { parameters.add(ParameterDefinition.build(parameter, validatorRegistry)); }  if (parameters.isEmpty()) { logError(String.format("First parameter must be of type %s!", CommandEvent.class.getSimpleName()), method); return Optional.empty(); }  // validate parameter definitions for (int i = 0; i < parameters.size(); i++) { ParameterDefinition parameter = parameters.get(i); Class<?> type = parameter.getType();  // first argument must be a CommandEvent if (i == 0) { if (!CommandEvent.class.isAssignableFrom(type)) { logError(String.format("First parameter must be of type %s!", CommandEvent.class.getSimpleName()), method); return Optional.empty(); } continue; }  // argument parsing can be skipped by using just a String array (the traditional way of command frameworks) // this means that no other parameters are allowed in this case if (type.isAssignableFrom(String[].class) && parameters.size() > 2) { logError("Additional parameters aren't allowed when using arrays!", method); return Optional.empty(); } }  Set<net.dv8tion.jda.api.Permission> enabledFor = Arrays.stream(command.enabledFor()).collect(Collectors.toSet()); if (enabledFor.size() == 1 && enabledFor.contains(net.dv8tion.jda.api.Permission.UNKNOWN)) { enabledFor.clear(); }  return Optional.of(new SlashCommandDefinition( method, command.ephemeral(), label, permissions, command.isGuildOnly(), command.isNSFW(), Command.Type.SLASH, enabledFor, command.scope(), localizationFunction, command.desc(), parameters, CooldownDefinition.build(method.getAnnotation(Cooldown.class)), false )); }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
************************************
[+] input: GestaltException { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource(); Assertions."<AssertPlaceHolder>"; }
loadStream() throws GestaltException { Properties properties = SystemWrapper.getProperties();  ByteArrayOutputStream output = new ByteArrayOutputStream(); try { properties.store(output, null); return new ByteArrayInputStream(output.toByteArray()); } catch (IOException e) { throw new GestaltException("Exception while converting system properties to a InputStream", e); } }
[*] target: assertNotNull(configSource.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( configSource. loadStream() )
************************************
************************************
[+] input: createBook() {  CreateOrUpdateBookDTO validator = new CreateOrUpdateBookDTO(); validator.setAuthor(author); validator.setImage(image); validator.setSummary(summary); validator.setTitle(title); bookService.createBook(validator);  List<BookDO> books = bookMapper.selectByTitle(title); boolean anyMatch = books.stream().anyMatch(bo -> bo.getTitle().equals(title) && bo.getAuthor().equals(author)); "<AssertPlaceHolder>"; }
createBook(CreateOrUpdateBookDTO validator) { BookDO book = new BookDO(); book.setAuthor(validator.getAuthor()); book.setTitle(validator.getTitle()); book.setImage(validator.getImage()); book.setSummary(validator.getSummary()); return bookMapper.insert(book) > 0; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: shouldHandleZeroParameters() { try (SqlSession session = sqlMapper.openSession()) { final TestResultHandler resultHandler = new TestResultHandler(); session.select("org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts", resultHandler); "<AssertPlaceHolder>"; } }
select(String statement, ResultHandler handler);  /** * Retrieve a single row mapped from the statement key and parameter using a {@code ResultHandler}
[*] target: assertEquals(5, resultHandler.count)
[-] pred: org. junit. Assert. assertEquals ( 5, resultHandler. count )
************************************
************************************
[+] input: deleteGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  boolean ok = adminService.deleteGroup(group.getId()); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertNull(selected); }
deleteGroup(Integer id) { Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); Integer guestGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.GUEST); if (id.equals(rootGroupId)) { throw new ForbiddenException(10074); } if (id.equals(guestGroupId)) { throw new ForbiddenException(10075); } throwGroupNotExistById(id); List<Integer> groupUserIds = groupService.getGroupUserIds(id); if(!groupUserIds.isEmpty()) { throw new ForbiddenException(10027); } return groupService.removeById(id); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: testGetListMembers() { String   listId  = "1449313282892910592"; UserList members = twitterClient.getListMembers(listId); "<AssertPlaceHolder>"; assertTrue(members.getData().size() > 1); assertNotNull(members.getData().get(0).getId()); assertNotNull(members.getData().get(0).getName()); assertNotNull(members.getData().get(0).getCreatedAt()); assertTrue(members.getData().get(0).getFollowersCount() > 0); assertTrue(members.getData().get(0).getFollowingCount() > 0); }
getListMembers(String listId);
[*] target: assertNotNull(members)
[-] pred: org. junit. Assert. assertNotNull ( members )
************************************
************************************
[+] input: test3() { String s = "(0123)"; List<String> expected = List.of("(0, 123)", "(0, 12.3)", "(0, 1.23)", "(0.1, 23)", "(0.1, 2.3)", "(0.12, 3)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
ambiguousCoordinates(String s) { int n = s.length(); List<String> ans = new ArrayList<>(); for (int i = 2; i <= n - 2; i++) { if ( (s.charAt(1) != '0' || s.charAt(i - 1) != '0' || i == 2) && (i == n - 2 || s.charAt(i) != '0' || s.charAt(n - 2) != '0') ) { List<String> l1 = f(s, 1, i); List<String> l2 = f(s, i, n - 1); for (String s1 : l1) for (String s2 : l2) ans.add("(" + s1 + ", " + s2 + ")"); } } return ans;  }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
************************************
[+] input: shouldBeEqual() { SchemaVersion version_1 = SchemaVersion.parse("1.2.3"); SchemaVersion version_2 = SchemaVersion.parse("1.2.3"); Assertions."<AssertPlaceHolder>"; }
compareTo(@NotNull SchemaVersion o) { int result = conceptVersion - o.conceptVersion; if (result != 0) { return result; } result = samplesVersion - o.samplesVersion; if (result != 0) { return result; } result = reportsVersion - o.reportsVersion; return result; }
[*] target: assertEquals(0, version_1.compareTo(version_2))
[-] pred: org. junit. Assert. assertEquals ( 0, version_1. compareTo ( version_2 ) )
************************************
************************************
[+] input: shouldReturnNumberWithOddOccurrences2() { int[] arr = { 5, 4, 5, 3, 1, 4, 1, 3, 3, 3, 3 }; int expected = 3;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
getNumberWithOddOccurrences(int[] array) { return map(array); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: NoSuchMethodException { final SpringMvcRouteHandlerLocatorFactory factory = new SpringMvcRouteHandlerLocatorFactory(); final DeployContext<RestlightOptions> ctx = mock(DeployContext.class); when(ctx.options()).thenReturn(RestlightOptionsConfigure.defaultOpts()); RouteHandlerLocator locator = factory.locator(ctx); assertNotNull(locator); assertEquals(SpringMvcRouteHandlerLocatorFactory.HandlerLocator.class, locator.getClass());  final InvocableMethod method = mock(InvocableMethod.class); when(method.beanType()).thenReturn((Class) SpringMvcRouteHandlerLocatorFactoryTest.class); when(method.method()) .thenReturn(SpringMvcRouteHandlerLocatorFactoryTest.class.getDeclaredMethod("forTest"));  final HttpResponseStatus ret = ((SpringMvcRouteHandlerLocatorFactory.HandlerLocator) locator) .getCustomResponse(method);  "<AssertPlaceHolder>"; assertEquals(HttpResponseStatus.NOT_FOUND.code(), ret.code()); assertEquals("foo", ret.reasonPhrase()); }
getCustomResponse(InvocableMethod handlerMethod) { return ResponseStatusUtils.getCustomResponse(handlerMethod.beanType(), handlerMethod.method()); }
[*] target: assertNotNull(ret)
[-] pred: org. junit. Assert. assertNotNull ( ret )
************************************
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: it_recognizes_lines_that_should_not_be_parsed() { CobolLine line1 = new CobolLine("  ", tokenExtractor); //In FILE SECTION CobolLine line2 = new CobolLine("       FD  INPUT-FILE", tokenExtractor); state.setFlagFor(Constants.FILE_SECTION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertFalse(shouldBeParsed2); }
shouldLineBeParsed(CobolLine line, State state) { if (isTooShortToBeMeaningful(line) && line.tokensSize() > 0) { return false; } if (state.isFlagSetFor(Constants.FILE_SECTION) && !(line.containsToken(Constants.FILE_SECTION))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; } if (state.isFlagSetFor(Constants.FILE_CONTROL) && !(line.containsToken(Constants.FILE_CONTROL))) { if (line.containsToken(Constants.REPLACE_TOKEN)) return true;  return false; }  return true; }
[*] target: assertFalse(shouldBeParsed1)
[-] pred: org. junit. Assert. assertFalse ( shouldBeParsed1 )
************************************
************************************
[+] input: setUseHierarchicalSoftmax() { Word2VecConfiguration configuration = new Word2VecConfiguration(Word2VecType.SG); assertEquals(Word2VecConfiguration.IS_USE_HIERARCHICAL_SOFTMAX_DEFAULT, configuration.isUseHierarchicalSoftmax()); configuration.setUseHierarchicalSoftmax(true); "<AssertPlaceHolder>"; }
isUseHierarchicalSoftmax() { return isUseHierarchicalSoftmax; }
[*] target: assertTrue(configuration.isUseHierarchicalSoftmax())
[-] pred: org. junit. Assert. assertTrue ( configuration. isUseHierarchicalSoftmax ( ) )
************************************
************************************
[+] input: mapDepartmentListToOkrDepartmentList_shouldExpectEmptyListWhenDepartmentsAreNull() { ArrayList<OkrDepartment> departmentList = new ArrayList<>(); int expected = 0;  Collection<OkrUnitSchemaDto> actual = okrBranchSchemaMapper.mapOkrChildUnitListToOkrChildUnitSchemaList(departmentList, currentUserId);  "<AssertPlaceHolder>"; }
mapOkrChildUnitListToOkrChildUnitSchemaList( Collection<? extends OkrChildUnit> okrChildUnits, UUID currentUserId ) { ArrayList<OkrUnitSchemaDto> okrUnitSchemaList = new ArrayList<>();  for (OkrChildUnit okrChildUnit : okrChildUnits) { okrUnitSchemaList.add(mapUnitToUnitchema(okrChildUnit, currentUserId)); }  return okrUnitSchemaList; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
************************************
[+] input: create_validInput_returnSubscriptionForOffer() { /* ARRANGE */ Mockito.doReturn(Optional.of(getOfferedResource())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(offeredResLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
************************************
[+] input: setPosGetPosShouldWork() { // prepare final GamePiece gamePiece = mock(GamePiece.class); final Map map = mock(Map.class); final Point point1 = new Point(10, 100); final Point point2 = new Point(11, 101); when(gamePiece.getMap()).thenReturn(map); when(gamePiece.getPosition()).thenReturn(point1);  // run Stack s = new Stack(gamePiece); s.setPosition(point2);  // assert "<AssertPlaceHolder>"; }
getPosition() { return new Point(pos); }
[*] target: assertEquals(point2, s.getPosition())
[-] pred: org. junit. Assert. assertEquals ( point2, s. getPosition() )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSInternetGateway> internetGateways = getAwsInternetGateways();  Maps<Resource> resourceMaps = exportInternetGateways.getResourceMaps(internetGateways); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/InternetGateway.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSInternetGateway> awsInternetGateways) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSInternetGateway awsInternetGateway : awsInternetGateways) {  InternetGateway internetGateway = awsInternetGateway.getInternetGateway(); List<InternetGatewayAttachment> internetGatewayAttachments = internetGateway.attachments();  for (InternetGatewayAttachment internetGatewayAttachment : internetGatewayAttachments) { resourceMapsBuilder.map( Resource.builder() .api(awsInternetGateway.getTerraformResourceName()) .name(awsInternetGateway.getResourceName()) .argument("vpc_id", TFString.build(internetGatewayAttachment.vpcId())) .argument("tags", TFMap.build( internetGateway.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); } } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testHostFailoverStrictReaderEnabled() { final ITopologyService mockTopologyService = Mockito.mock(ITopologyService.class); final IConnectionProvider mockConnProvider = Mockito.mock(IConnectionProvider.class); final List<HostInfo> hosts = getHostsFromTestUrls(2); final HostInfo writer = hosts.get(0); final HostInfo reader = hosts.get(1);  final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockTopologyService, mockConnProvider, testConnectionProps, 5000, 30000, true, mockLog);  // We expect only reader nodes to be chosen. List<HostTuple> expectedReaderHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( reader, 1));  List<HostTuple> hostsByPriority = target.getHostTuplesByPriority(hosts, Collections.emptySet()); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick reader even if unavailable. hostsByPriority = target.getHostTuplesByPriority(hosts, new HashSet<>(Collections.singletonList(reader.getHost()))); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostTuple> expectedWriterHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( writer, 0)); hostsByPriority = target.getHostTuplesByPriority(Collections.singletonList(writer), Collections.emptySet()); "<AssertPlaceHolder>"; }
getHostTuplesByPriority(List<HostInfo> hosts, Set<String> downHosts) { List<HostTuple> hostGroup = new ArrayList<>(); addActiveReaders(hostGroup, hosts, downHosts); HostInfo writerHost = hosts.get(FailoverConnectionPlugin.WRITER_CONNECTION_INDEX); if (writerHost != null && (!this.enableFailoverStrictReader || hosts.size() == 1)) { hostGroup.add( new HostTuple( writerHost, FailoverConnectionPlugin.WRITER_CONNECTION_INDEX)); } addDownHosts(hostGroup, hosts, downHosts); return hostGroup; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
************************************
[+] input: getResourceMaps() { List<AWSInstanceProfile> instanceProfiles = getInstanceProfiles(); Maps<Resource> resourceMaps = exportIamInstanceProfiles.getResourceMaps(instanceProfiles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamInstanceProfile.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSInstanceProfile> awsInstanceProfiles) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSInstanceProfile awsInstanceProfile : awsInstanceProfiles) { InstanceProfile instanceProfile = awsInstanceProfile.getInstanceProfile(); resourceMapsBuilder.map( Resource.builder() .api("aws_iam_instance_profile") .name(instanceProfile.instanceProfileName()) .argument("name", TFString.build(instanceProfile.instanceProfileName())) .argument("role", TFList.build(instanceProfile.roles().stream() .map(role -> TFExpression.builder().isLineIndent(false) .expression(MessageFormat.format("aws_iam_role.{0}.name", role.roleName())) .build()) .collect(Collectors.toList()))) .build()); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: it_recognizes_batch_file_io_statement() { CobolLine line = new CobolLine("           OPEN INPUT INPUT-FILE", tokenExtractor);  boolean isBatchFileIOStatement = Interpreter.checkForBatchFileIOStatement(line);  "<AssertPlaceHolder>"; }
checkForBatchFileIOStatement(CobolLine line) { for (String ioVerb : batchFileIOVerbs) { if (isBatchFileIOStatement(line.getTokens(), ioVerb)) { return true; } } return false; }
[*] target: assertTrue(isBatchFileIOStatement)
[-] pred: org. junit. Assert. assertTrue ( isBatchFileIOStatement )
************************************
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  try (OutputStream out = z.getOutputStream(name)) { out.write(data); }  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: TimeoutException { this.clientSamplesAnalyser.config.dropUnmatchedReports = false; var samplesGeneratorForSingleSfu = new SamplesGeneratorForSingleSfu(); samplesGeneratorForSingleSfu.saveTo(this.hamokStorages); var observedClientSamples = samplesGeneratorForSingleSfu.getObservedClientSamples();  var reports = new LinkedList<Report>(); this.clientSamplesAnalyser.observableReports().subscribe(reports::addAll); this.clientSamplesAnalyser.accept(observedClientSamples);  var inboundAudioReports = reports.stream() .filter(report -> ReportType.INBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (InboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var inboundVideoReports = reports.stream() .filter(report -> ReportType.INBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (InboundVideoTrackReport) report.payload) .collect(Collectors.toList()); var outboundAudioReports = reports.stream() .filter(report -> ReportType.OUTBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (OutboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var outboundVideoReports = reports.stream() .filter(report -> ReportType.OUTBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (OutboundVideoTrackReport) report.payload) .collect(Collectors.toList());  for (var inboundAudioReport : inboundAudioReports) { var found = false; for (var outboundAudioReport : outboundAudioReports) { if (outboundAudioReport.sfuStreamId == inboundAudioReport.sfuStreamId) { found = true; } } Assertions."<AssertPlaceHolder>"; } for (var outboundVideoReport : outboundVideoReports) { var found = false; for (var inboundVideoReport : inboundVideoReports) { if (inboundVideoReport.sfuStreamId == outboundVideoReport.sfuStreamId) { found = true; } } Assertions.assertTrue(found); } }
accept(ObservedClientSamples observedClientSamples) { if (observedClientSamples == null) { return; } if (observedClientSamples.isEmpty()) { this.output.onNext(Collections.emptyList()); return; } Instant started = Instant.now(); try { this.process(observedClientSamples); } finally { this.exposedMetrics.addTaskExecutionTime(METRIC_COMPONENT_NAME, started, Instant.now()); } }
[*] target: assertTrue(found)
[-] pred: org. junit. Assert. assertTrue ( found )
************************************
************************************
[+] input: selectUserGroupIDs() { String email = "13129982604@qq.com"; String username = "pedro-test"; UserDO user = new UserDO(); user.setEmail(email); user.setUsername(username); userMapper.insert(user);  GroupDO group = GroupDO.builder().name("group").info("零零落落").build(); groupMapper.insert(group);  userGroupMapper.insert(new UserGroupDO(user.getId(), group.getId()));  List<Integer> groupIds = groupMapper.selectUserGroupIds(user.getId()); boolean anyMatch = groupIds.stream().anyMatch(it -> it.equals(group.getId())); "<AssertPlaceHolder>"; }
selectUserGroupIds(@Param("userId") Integer userId);
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: should_correctly_parse_flag() { OggPage oggPage = OggPage.empty();  oggPage.setFlag(0x00); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x01); assertTrue(oggPage.isContinued());  oggPage.setFlag(0x02); assertTrue(oggPage.isBOS());  oggPage.setFlag(0x04); "<AssertPlaceHolder>"; }
isEOS() { return (this.flag & 0x04) != 0; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
************************************
[+] input: testDoVolatilityAssert_withExpectation() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return Math.abs(volatility) <= expected; }
[*] target: assertTrue(validateResult)
[-] pred: org. junit. Assert. assertTrue ( validateResult )
************************************
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RepresentationController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = representationViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
getSelfLink(final UUID entityId) { return getSelfLink(entityId, RepresentationController.class); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: InterruptedException { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.awaitTermination(1L, TimeUnit.SECONDS)); "<AssertPlaceHolder>"; }
isTerminated() { return shutdown.get() && poison_pill.isDone(); }
[*] target: assertTrue(ex.isTerminated())
[-] pred: org. junit. Assert. assertTrue ( ex. isTerminated() )
************************************
************************************
[+] input: testBusinessAppHdrV02Xml() { BusinessAppHdrV02 bah = new BusinessAppHdrV02(); bah.setFr(new Party44Choice()); bah.getFr().setFIId(new BranchAndFinancialInstitutionIdentification6()); bah.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification18()); bah.getFr().getFIId().getFinInstnId().setBICFI("BIC"); bah.getFr().getFIId().setBrnchId(new BranchData3()); bah.getFr().getFIId().getBrnchId().setId("id"); bah.getFr().getFIId().getBrnchId().setNm("name"); bah.getFr().getFIId().getBrnchId().setPstlAdr(new PostalAddress24()); bah.getFr().getFIId().getBrnchId().getPstlAdr().setCtry("AR"); bah.setMktPrctc(new ImplementationSpecification1()); bah.getMktPrctc().setId("FOO"); bah.getMktPrctc().setRegy("BAR");  final String xml = bah.xml();  "<AssertPlaceHolder>"; // System.out.println(xml); testXpath(xml, "/AppHdr/Fr/FIId/FinInstnId/BICFI", "BIC"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Id", "id"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Nm", "name"); }
xml() { return xml(new MxWriteParams()); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
************************************
[+] input: matrixVectorTest() { DenseMatrix a = generateA(); DenseMatrix b = generateB(); DenseMatrix c = generateC();  DenseVector vector = generateVector(); DenseMatrix oneDimMatrix = generateOneDimMatrix();  SGDVector matrixMatrixOutput; SGDVector matrixVectorOutput;  matrixMatrixOutput = a.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = a.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = b.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = b.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = c.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = c.leftMultiply(vector); "<AssertPlaceHolder>"; }
leftMultiply(SGDVector input) { if (input.size() == dim2) { double[] output = new double[dim1]; if (input instanceof DenseVector) { // If it's dense we can use loops for (int i = 0; i < dim1; i++) { for (int j = 0; j < dim2; j++) { output[i] += get(i,j) * input.get(j); } } } else { // If it's sparse we iterate the tuples for (VectorTuple tuple : input) { for (int i = 0; i < output.length; i++) { output[i] += get(i,tuple.index) * tuple.value; } } } return new DenseVector(output); } else { throw new IllegalArgumentException("input.size() != dim2, input.size() = " + input.size() + ", dim1,dim2 = " + dim1+","+dim2); } }
[*] target: assertEquals(matrixMatrixOutput,matrixVectorOutput)
[-] pred: org. junit. Assert. assertEquals ( matrixMatrixOutput, matrixVectorOutput )
************************************
************************************
[+] input: deleteDatasetNode_withNonExistingNodeId_shouldReturnFalse() { // Prepare prepareGraph();  // Process boolean isSuccess = lineageService.deleteDatasetNode(1234556L);  // Validate "<AssertPlaceHolder>"; }
deleteDatasetNode(Long nodeId) { Session sess = getSession(); DatasetNode existingNode = sess.load(DatasetNode.class, nodeId); logger.debug("Deleting lineage dataset node, id = {}", nodeId); if (Objects.isNull(existingNode)) { return false; } // else sess.delete(existingNode); return true; }
[*] target: assertFalse(isSuccess)
[-] pred: org. junit. Assert. assertFalse ( isSuccess )
************************************
************************************
[+] input: isCollectionEmptyOrNullTest_2() { var actual = Utils.isCollectionEmptyOrNull(Collections.EMPTY_LIST); Assertions."<AssertPlaceHolder>"; }
isCollectionEmptyOrNull(Collection<T> collection) { return Objects.isNull(collection) || collection.size() < 1; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: testRoute_Placeholder() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = $host")); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: removeTaskNotifyConfigByWorkflowTaskId() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(persistedConfig.getWorkflowTaskId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigByWorkflowTaskId(Long workflowTaskId) { Preconditions.checkNotNull(workflowTaskId, "id of workflow task id should not be null"); return taskNotifyConfigDao.removeByWorkflowTaskId(workflowTaskId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: mapDtoToEntity_shouldExpectNotesNotNull() { keyResult = keyResultMapper.mapDtoToEntity(keyResultDto); "<AssertPlaceHolder>"; }
mapDtoToEntity(KeyResultDto keyResultDto) { KeyResult keyResult = new KeyResult();  keyResult.setId(keyResultDto.getId()); keyResult.setName(keyResultDto.getTitle()); keyResult.setDescription(keyResultDto.getDescription()); keyResult.setUnit(keyResultDto.getUnit()); keyResult.setStartValue(keyResultDto.getStartValue()); keyResult.setCurrentValue(keyResultDto.getCurrentValue()); keyResult.setTargetValue(keyResultDto.getTargetValue()); keyResult.setSequence(keyResultDto.getSequence());  Objective parentObjective = null; if (keyResultDto.getParentObjectiveId() != null) { parentObjective = new Objective(); parentObjective.setId(keyResultDto.getParentObjectiveId()); } keyResult.setParentObjective(parentObjective);  keyResult.setNotes(new ArrayList<>());  keyResult.setMilestones( keyResultMilestoneMapper.mapDtosToEntities(keyResultDto.getKeyResultMilestoneDtos()));  log.debug("Mapped KeyResultDto (id: %d) to KeyResult.".formatted(keyResultDto.getId())); return keyResult; }
[*] target: assertNotNull(keyResult)
[-] pred: org. junit. Assert. assertNotNull ( keyResult )
************************************
************************************
[+] input: addCustomConfig() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234") .addCustomConfig("db.password", "password") .addCustomConfig("db.user", "notroot");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(3, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); assertEquals("password", customConfig.get("db.password")); assertEquals("notroot", customConfig.get("db.user")); }
getCustomConfig() { return customConfig; }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
************************************
[+] input: GestaltException { S3ConfigSourceBuilder builder = S3ConfigSourceBuilder.builder(); builder.setS3(s3Client); builder.setBucketName("testBucket"); builder.setKeyName("testKey");  assertEquals(s3Client, builder.getS3()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testKey", builder.getKeyName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  S3ConfigSource s3ConfigSource = (S3ConfigSource) configSourcePackage.getConfigSource(); assertTrue(s3ConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new S3ConfigSource(s3, bucketName, keyName)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: readResolve() { StraightwaySingleton instance = StraightwaySingleton.getInstance(); try (FileOutputStream fileOutputStream = new FileOutputStream(StraightwaySingleton.class.getResource("").getPath() + "StraightwaySingleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(StraightwaySingleton.class.getResourceAsStream("StraightwaySingleton.txt")); final StraightwaySingleton o = (StraightwaySingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
getInstance() { return straightwaySingleton; }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
************************************
[+] input: testFlattenWithValues() { JDocument d = (JDocument)getBaseDocument("/jdocs/native_array.json"); List<PathValue> list = d.flattenWithValues(); String s = ""; String expected = "$.valid_states[0].country, USA, string\n" + "$.valid_states[0].states[0], AZ, string\n" + "$.valid_states[0].states[1], NJ, string\n" + "$.valid_states[0].states[2], NY, string\n" + "$.valid_states[0].states[3], GA, string\n" + "$.valid_states[0].states[4], TX, string\n";  for (PathValue pv : list) { s = s + pv.getPath() + ", " + pv.getValue() + ", " + pv.getDataType() + "\n"; }  "<AssertPlaceHolder>"; }
flattenWithValues();
[*] target: assertEquals(s, expected)
[-] pred: org. junit. Assert. assertEquals ( s, expected )
************************************
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(URI.create("https://example.com")).loader(MOCK_LOADER).mode(JsonLdVersion.V1_0).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
get() throws JsonLdError { if (document != null) { return ExpansionProcessor.expand(document, options, false);  } else if (documentUri != null) { return ExpansionProcessor.expand(documentUri, options); } throw new IllegalStateException(); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
************************************
[+] input: testHashCodeEquals() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Boolean> p2 = new Property<Boolean>("foo", Boolean.class);  assertEquals(p1.hashCode(), p1.hashCode()); "<AssertPlaceHolder>"; }
hashCode() { return hash; }
[*] target: assertEquals(p1.hashCode(), p2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( p1. hashCode(), p2. hashCode() )
************************************
************************************
[+] input: Exception { final HashMap<String, String> parameterObject = new HashMap<String, String>() {{ put("name", "Steve"); }}; final String expected = "Expression test: 3 / yes."; DynamicSqlSource source = createDynamicSqlSource(new TextSqlNode("Expression test: ${name.indexOf('v')} / ${name in {'Bob', 'Steve'\\} ? 'yes' : 'no'}.")); BoundSql boundSql = source.getBoundSql(parameterObject); "<AssertPlaceHolder>"; }
getSql(){ DynamicContext context = new DynamicContext(configuration, null); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class<?> parameterType = Object.class; SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); BoundSql boundSql = sqlSource.getBoundSql(null); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql.getSql(); }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatOne() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(1.0f));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: Exception { try(Reader in = Resources.getResourceAsReader(CLASS_LOADER, JPETSTORE_PROPERTIES)) { "<AssertPlaceHolder>"; } }
getResourceAsReader(ClassLoader loader, String resource) throws IOException { Reader reader; if (charset == null) { reader = new InputStreamReader(getResourceAsStream(loader, resource)); } else { reader = new InputStreamReader(getResourceAsStream(loader, resource), charset); } return reader; }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
************************************
[+] input: createFromIntArgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_ARGB); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntArgb(data, width, height); "<AssertPlaceHolder>"; }
createFromIntArgb(int[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferInt(data, data.length); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_INT_ARGB, null); return new BufferedImage(COLOR_MODEL_INT_ARGB, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ElasticacheReplicationGroup.cmd")); String actual = exportElastiCacheReplicationGroups.getTFImport(getAwsCacheReplicationGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSCacheReplicationGroup> awsCacheReplicationGroups) { return TFImport.builder() .importLines(awsCacheReplicationGroups.stream() .map(awsCacheReplicationGroup -> TFImportLine.builder() .address(awsCacheReplicationGroup.getTerraformAddress()) .id(awsCacheReplicationGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testConvertRGB() { Color color = convertPaint(CSSConstants.CSS_FILL_PROPERTY, "rgb(120, 30, 200)", ColorValue.RGB_FUNCTION); "<AssertPlaceHolder>"; assertEquals(120, color.getRed()); assertEquals(30, color.getGreen()); assertEquals(200, color.getBlue()); assertEquals(255, color.getAlpha());  assertNull(context.getColorSpace()); }
convertPaint(Element paintedElement, GraphicsNode paintedNode, Value paintDef, float opacity, BridgeContext ctx) { if (paintDef.getCssValueType() == CssType.TYPED) { switch (paintDef.getPrimitiveType()) { case IDENT: return null; // none case COLOR: return convertColor(paintDef.getColorValue(), opacity, ctx); case URI: return convertURIPaint(paintedElement, paintedNode, paintDef, opacity, ctx); default: break; } } else { // List Value v = paintDef.item(0); switch (v.getPrimitiveType()) { case COLOR: switch ((v.getColorValue()).getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: return convertRGBICCColor(paintedElement, v, paintDef.item(1), opacity, ctx); } break;  case URI: Paint result = silentConvertURIPaint(paintedElement, paintedNode, v, opacity, ctx); if (result != null) { return result; }  v = paintDef.item(1); switch (v.getPrimitiveType()) { case IDENT: return null; // none case COLOR: ColorValue color = v.getColorValue(); switch (color.getCSSColorSpace()) { case ColorValue.RGB_FUNCTION: if (paintDef.getLength() == 2) { return convertColor((RGBColorValue) color, opacity); } else { return convertRGBICCColor(paintedElement, v, paintDef.item(2), opacity, ctx); } } break; default: break; }  default: break; } } throw new IllegalArgumentException("Paint argument is not an appropriate CSS value"); }
[*] target: assertNotNull(color)
[-] pred: org. junit. Assert. assertNotNull ( color )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/VpcEndpoint.cmd")); String actual = exportVpcEndpoints.getTFImport(getVpcEndpoints()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSVpcEndpoint> awsVpcEndpoints) { TFImport.TFImportBuilder tfImportBuilder = TFImport.builder(); awsVpcEndpoints.forEach(awsVpcEndpoint -> tfImportBuilder.importLine( TFImportLine.builder() .address(awsVpcEndpoint.getTerraformAddress()) .id(awsVpcEndpoint.getResourceId()) .build() )); return tfImportBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { var action = buildMethod("Act", "ion", ""); List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action, 21, 77)); String payload = "{"desc":"Act.ion","line":"21","bytecodeIndex":"77"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[" + payload + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.empty()); "<AssertPlaceHolder>"; }
empty() { List<RecordedFrame> payload = Collections.emptyList(); try { return new String(jsonWrite(payload, Optional.empty()).getBytes()); } catch (IOException e) { throw new RuntimeException("Failed to generate stacktrace json", e); } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: Exception { String p1 = "dubbo.registry.address=zookeeper://127.0.0.1:2181\\\\ndubbo.protocol.port=20880"; Map<String, String> result = ConfigurationUtils.parseProperties(p1); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("zookeeper://127.0.0.1:2181\\ndubbo.protocol.port=20880", result.get("dubbo.registry.address")); }
parseProperties(String content) throws IOException { Map<String, String> map = new HashMap<>(); if (StringUtils.isEmpty(content)) { logger.warn("You specified the config center, but there's not even one single config item in it."); } else { Properties properties = new Properties(); properties.load(new StringReader(content)); properties.stringPropertyNames().forEach( k -> map.put(k, properties.getProperty(k)) ); } return map; }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
************************************
[+] input: confirmEmail() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user)); //    given(mailService.sendAccountConfirmed(user)) //        .willReturn(true);  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertTrue(user.isEmailConfirmed()); verify(securityTokenService).useToken(testSecurityToken); verify(userRepository).save(user); //    verify(mailService).sendAccountConfirmed(user); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertTrue(emailConfirmed)
[-] pred: org. junit. Assert. assertTrue ( emailConfirmed )
************************************
************************************
[+] input: testInitialNullBug3465() { // SequenceEncoder was failing to include initial null in sequence // Nulls are decoded as empty strings final String value2 = "value"; final char delim = ';';  final SequenceEncoder se = new SequenceEncoder(null, delim); se.append(value2);  final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), delim);  assertEquals("", sd.nextToken()); "<AssertPlaceHolder>"; }
nextToken() { if (!hasMoreTokens()) throw new NoSuchElementException();  if (start == stop) { // token for "null" is the empty string val = null; return ""; }  if (buf != null) { buf.setLength(0); }  String tok = null; int i = start; for ( ; i < stop; ++i) { if (val.charAt(i) == delim) { if (i > 0 && val.charAt(i - 1) == '\') { // escaped delimiter; piece together the token if (buf == null) { buf = new StringBuilder(); } buf.append(val, start, i - 1); start = i; } else { // real delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start, i); } else { // had an earlier escape; cobble on the end buf.append(val, start, i); } start = i + 1; break; } } }  if (start < i) { // i == stop; we reached the end without a delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start); } else { // had an earlier escape; cobble on the end buf.append(val, start, stop); } val = null; }  return unquote(tok != null ? tok : buf).intern(); }
[*] target: assertEquals(value2, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( value2, sd. nextToken ( ) )
************************************
************************************
[+] input: testIsRedundantWith() { final DependencyChain chain1 = new DependencyChain() .add(single("c1")) .add(single("c2")) .add(single("c3")) .add(single("c1"));  final CircularDependency circularDependency1 = chain1.getCircularDependency().orElseThrow();  final DependencyChain chain2 = new DependencyChain() .add(single("c9")) .add(single("c2")) .add(single("c3")) .add(single("c1")) .add(single("c2"));  final CircularDependency circularDependency2 = chain2.getCircularDependency().orElseThrow();   "<AssertPlaceHolder>"; }
isRedundantWith(CircularDependency other) { return this.signature().equals(other.signature()); }
[*] target: assertTrue(circularDependency1.isRedundantWith(circularDependency2))
[-] pred: org. junit. Assert. assertTrue ( circularDependency1. isRedundantWith ( circularDependency2 ) )
************************************
************************************
[+] input: equals_false_when_vec3_equals() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3 vec3c2 = new Vec3(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
equals(Object other) { if (this == other) { return true; } else if (!(other instanceof Vec3Comparable)) { return false; } else { Vec3Comparable vec3c = (Vec3Comparable) other; return this.xCoord == vec3c.xCoord && this.yCoord == vec3c.yCoord && this.zCoord == vec3c.zCoord; } }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
************************************
[+] input: InvalidAlgorithmParameterException { String decodedString = textEncryptorConverter.decode(encryptedString); "<AssertPlaceHolder>"; return; }
decode(String dbData) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException { try { return new String(getDeCipher().doFinal(Base64.getUrlDecoder().decode(dbData)), StandardCharsets.UTF_8); } catch (BadPaddingException e) { throw new BadPaddingException(); } }
[*] target: assertNotNull(decodedString)
[-] pred: org. junit. Assert. assertNotNull ( decodedString )
************************************
************************************
[+] input: testSetAndCallOnEndHandler() { final Req req = plainReq(); when(req.response.isCommitted()).thenReturn(true); when(req.response.isEnded()).thenReturn(true); final AtomicBoolean end = new AtomicBoolean(); assertSame(req, req.onEnd(p -> { end.set(true); return p.setSuccess(null); })); req.handleEnd(); "<AssertPlaceHolder>"; }
handleEnd() { if (multipart != null) { // may be error multipart.end(); }  if (onEnd != null) { Future<Void> f = onEnd.apply(ctx.newPromise()); if (f.isDone()) { windUp(f); } else { f.addListener(this::windUp); } } else { windUp(ctx.newSucceededFuture()); } }
[*] target: assertTrue(end.get())
[-] pred: org. junit. Assert. assertTrue ( end. get ( ) )
************************************
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value()))); wireMock.register(authenticatedEndpoint("/service_accounts") .willReturn(okForPlainJson(readTestResource("ccloud/service-account-mapping.json"))));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", true);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>"; assertEquals("123456", spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); wireMock.verifyThat(1, requestedFor(HttpMethod.GET.name(), urlPathEqualTo("/service_accounts"))); }
createServiceAccount(String accountName, String accountDescription) { log.debug("Create Service Account {}", accountName); JSONObject req = new JSONObject(); req.put("display_name", accountName); req.put("description", accountDescription);  return doPost("/iam/v2/service-accounts", req.toString(), response -> toServiceAccountSpec(response), "Could not create service account").flatMap(spec -> perhapsAddInternalId(spec)); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
************************************
[+] input: findById_expectedFoundResult() { long searchId = 100L; Cycle expectedCycle = new Cycle("TestCycle");  when(cycleRepository.findByIdOrThrow(searchId)).thenReturn(expectedCycle);  Cycle actualCycle = cycleService.findById(searchId);  "<AssertPlaceHolder>"; }
findById(Long cycleId) { return cycleRepository.findByIdOrThrow(cycleId); }
[*] target: assertEquals(expectedCycle, actualCycle)
[-] pred: org. junit. Assert. assertEquals ( expectedCycle, actualCycle )
************************************
************************************
[+] input: IOException { try ( FileInputStream testFis = new FileInputStream("src/codeforces/contest1731/testsE.txt"); Scanner testScanner = new Scanner(testFis); FileInputStream ansFis = new FileInputStream("src/codeforces/contest1731/answersE.txt"); Scanner answerScanner = new Scanner(ansFis); ) { while (testScanner.hasNextLine()) { int n = testScanner.nextInt(); long m = testScanner.nextLong(); long expected = answerScanner.nextLong(); long actual = ProblemE.solve(n, m); if (expected != actual) System.out.println(n + " " + m); "<AssertPlaceHolder>"; } } }
solve(int n, long m) { long ans = 0; for (int gcd = n / 2; gcd >= 2; gcd--) { long took = Math.min(COPRIME_COUNT[n / gcd], m) / (gcd - 1) * (gcd - 1); ans += took / (gcd - 1) * gcd; m -= took; if (m == 0) return ans; } return -1; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testContrainsNoProperty() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: getAll_validInput_returnEndpoints() { /* ARRANGE */ Mockito.doReturn(new PageImpl<Endpoint>(List.of())).when(repository).findAll(Pageable.unpaged());  /* ACT */ final var result = serviceProxy.getAll(Pageable.unpaged());  /* ASSERT */ "<AssertPlaceHolder>"; }
getAll(final Pageable pageable) { return repository.findAll(pageable); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetDumpOnExitBadValue() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().dumpOnExit("BAD_VALUE").build(); "<AssertPlaceHolder>"; }
getDumpOnExit() { return recordingOptions.getOrDefault( Option.DUMP_ON_EXIT.name, Option.DUMP_ON_EXIT.defaultValue); }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
************************************
[+] input: instantiateViaServiceLoaderApi() { final ServiceLoader<DataCaptureConfig> dataCaptureConfigs = ServiceLoader.load(DataCaptureConfig.class); final Iterator<DataCaptureConfig> iterator = dataCaptureConfigs.iterator(); "<AssertPlaceHolder>"; final DataCaptureConfig dataCaptureConfig = iterator.next(); assertNotNull(dataCaptureConfig); assertFalse(iterator.hasNext()); }
load(ClassLoader cl) { ServiceLoader<DataCaptureConfig> configs = ServiceLoader.load(DataCaptureConfig.class, cl); Iterator<DataCaptureConfig> iterator = configs.iterator(); if (!iterator.hasNext()) { logger.error("Failed to load data capture config"); return null; } return iterator.next(); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
************************************
[+] input: should_result_long_number_of_bytes_when_gib_symbol() {  var expected = (long)(1 * 1024 * 1024 * 1024);  var actual = NumberUtil.fromHumanReadable("1GiB");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldNotApplyIfConfigItemOverrides() { var existing = makeBasicResource("blargus");  when(config.getBoolean(METRICS_FULL_COMMAND_LINE, false)).thenReturn(true);  var testClass = new TruncateCommandLineWhenMetricsEnabled.CommandLineTruncator();  var result = testClass.apply(existing, config); "<AssertPlaceHolder>"; }
apply(Resource existing, ConfigProperties config) { boolean forceFullCommandline = config.getBoolean(METRICS_FULL_COMMAND_LINE, false); if (forceFullCommandline) { return existing; }  Resource resource = existing; if (resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS) != null) { List<String> newCommandArgs = truncate(resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS)); if (newCommandArgs != null) { resource = resource.merge( Resource.create( Attributes.of( ProcessIncubatingAttributes.PROCESS_COMMAND_ARGS, newCommandArgs))); } }  String commandLine = resource.getAttribute(ProcessIncubatingAttributes.PROCESS_COMMAND_LINE); if (commandLine != null && commandLine.length() > MAX_LENGTH) { String newCommandLine = commandLine.substring(0, MAX_LENGTH - 3) + "..."; resource = resource.merge( Resource.create( Attributes.of( ProcessIncubatingAttributes.PROCESS_COMMAND_LINE, newCommandLine))); }  if (existing != resource) { logger.fine( "Metrics are enabled. Truncating process.command_line and process.command_args resource attributes."); } return resource; }
[*] target: assertSame(existing, result)
[-] pred: org. junit. Assert. assertSame ( existing, result )
************************************
************************************
[+] input: shouldCheckGetterAndSetterNames() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertEquals(5, meta.getGetterNames().length); "<AssertPlaceHolder>"; }
getSetterNames() { return reflector.getSetablePropertyNames(); }
[*] target: assertEquals(5, meta.getSetterNames().length)
[-] pred: org. junit. Assert. assertEquals ( 5, meta. getSetterNames(). length )
************************************
************************************
[+] input: testDeserialiseKeyboardWithKeyCodes() { List<String> tick = new ArrayList<>(); tick.add(";a"); tick.add("17;w"); tick.add("17,29;"); tick.add("17,29,31;s"); tick.add("17,29,31,500;"); // Test theoretical keycode that doesn't exist  VirtualKeyboard actual = deserialiseKeyboard(tick);  VirtualKeyboard expected = new VirtualKeyboard(); expected.updateFromEvent(VirtualKey.ZERO, false, 'a'); expected.updateFromEvent(VirtualKey.W, true, 'w'); expected.updateFromEvent(VirtualKey.LCONTROL, true, Character.MIN_VALUE); expected.updateFromEvent(VirtualKey.S, true, 's'); expected.updateFromEvent(500, true, Character.MIN_VALUE);  "<AssertPlaceHolder>"; }
deserialiseKeyboard(List<String> keyboardStrings) { VirtualKeyboard out = new VirtualKeyboard();  currentSubtick = 0; for (String line : keyboardStrings) { Matcher matcher = extract("(.*?);(.*)", line); if (matcher.find()) { String[] keys = matcher.group(1).split(","); char[] chars = matcher.group(2).toCharArray();  int[] keycodes = deserialiseVirtualKey(keys, VirtualKey.ZERO); out.updateFromState(keycodes, chars); } currentSubtick++; } return out; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: withSimpleRestartTransferTest() { Boolean returnValue = withSimpleRestart("ABORT", "foo", () -> invokeRestart(findRestart("ABORT"))); "<AssertPlaceHolder>"; }
withSimpleRestart(String name, String report, Runnable body) { Restart<Object, Boolean> restart = new Restart<>(name, (x) -> true, report); RestartCase<Object, Boolean> restartCase = new RestartCase<>(List.of(restart), () -> { body.run(); return false; }); return restartCase.get(); }
[*] target: assertEquals(true, returnValue)
[-] pred: org. junit. Assert. assertEquals ( true, returnValue )
************************************
************************************
[+] input: testCreateListConvertor() { ConvertorRegister register = ConvertorRegister.instance(); String convertorName = register.createListConvert(Car.class, CarDTO.class);  String convertorNameNew = register.createListConvert(Car.class, CarDTO.class); "<AssertPlaceHolder>"; }
createListConvert(Class<?> orignalClass, Class<?> destlClass) { list_lock.lock(); String converorName; try { String name = getListConvertorName(orignalClass, destlClass); converorName = LIST_CONVERTORS.get(name); if (converorName != null) { return converorName; } converorName = LIST_CONVERTORS.get(name); if (converorName == null) { converorName = generateListConvertorClass(orignalClass, destlClass); if (converorName != null) { LIST_CONVERTORS.put(name, converorName); } } } finally { list_lock.unlock(); } return converorName; }
[*] target: assertEquals(convertorName, convertorNameNew)
[-] pred: org. junit. Assert. assertEquals ( convertorName, convertorNameNew )
************************************
************************************
[+] input: InterruptedException { final NetOptions options = new NetOptions(); options.setSoBacklog(10); options.setReuseAddress(false); options.setSoKeepalive(true); options.setTcpNoDelay(true); options.setSoRcvbuf(100); options.setSoSendbuf(100); options.setSoLinger(1); options.setOptions(Collections.singletonMap(ChannelOption.AUTO_READ, false)); final CountDownLatch latch = new CountDownLatch(1); final AtomicReference<Channel> ch = new AtomicReference<>(); final EventLoopGroup group = new NioEventLoopGroup(1); try { ServerBootstrap sb = new ServerBootstrap(); NioTransport.INSTANCE.applyOptions(sb, options, new LocalAddress("foo")); sb.channel(NioServerSocketChannel.class) .group(group) .childHandler(new ChannelInboundHandlerAdapter()) .handler(new ChannelHandlerAdapter() { @Override public void handlerAdded(ChannelHandlerContext ctx) { ch.set(ctx.channel()); latch.countDown(); } }); sb.register().syncUninterruptibly(); latch.await(); final Channel channel = ch.get(); "<AssertPlaceHolder>";  assertEquals(10, channel.config().getOption(ChannelOption.SO_BACKLOG)); assertFalse(channel.config().getOption(ChannelOption.SO_REUSEADDR)); assertFalse(channel.config().getOption(ChannelOption.AUTO_READ)); } finally { group.shutdownGracefully(); } }
applyOptions(ServerBootstrap bootstrap, NetOptions options, SocketAddress local) { final boolean isDomainSocket = local instanceof DomainSocketAddress; if (!isDomainSocket) { bootstrap.childOption(ChannelOption.SO_KEEPALIVE, options.isSoKeepalive()); bootstrap.childOption(ChannelOption.TCP_NODELAY, options.isTcpNoDelay()); }  if (options.getSoBacklog() > 0) { bootstrap.option(ChannelOption.SO_BACKLOG, options.getSoBacklog()); }  bootstrap.option(ChannelOption.SO_REUSEADDR, options.isReuseAddress());  if (USE_UNPOOLED_ALLOCATOR) { bootstrap.childOption(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT); }  if (options.getSoRcvbuf() > 0) { bootstrap.childOption(ChannelOption.SO_RCVBUF, options.getSoRcvbuf()); }  if (options.getSoSendbuf() > 0) { bootstrap.childOption(ChannelOption.SO_SNDBUF, options.getSoSendbuf()); }  if (options.getSoLinger() != -1) { bootstrap.childOption(ChannelOption.SO_LINGER, options.getSoLinger()); }  if (options.getOptions() != null) { addOption(bootstrap, options.getOptions()); }  if (options.getChildOptions() != null) { addChildOption(bootstrap, options.getChildOptions()); } }
[*] target: assertNotNull(channel)
[-] pred: org. junit. Assert. assertNotNull ( channel )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/B/");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 2; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#a", indexes.get(i).get(SK).s()); assertEquals("a", indexes.get(i).get("path").s()); String documentIdA = indexes.get(i).get("documentId").s(); assertNotNull(indexes.get(i++).get("documentId"));  assertEquals(site + "global#folders#" + documentIdA, indexes.get(i).get(PK).s()); assertEquals("fi#b", indexes.get(i).get(SK).s()); assertEquals("B", indexes.get(i).get("path").s()); assertNotNull(indexes.get(i++).get("documentId")); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedPageLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EksCluster.cmd")); String actual = exportEksClusters.getTFImport(getAwsEksClusters()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSEksCluster> awsEksClusters) { return TFImport.builder() .importLines(awsEksClusters.stream() .map(awsEksCluster -> TFImportLine.builder() .address(awsEksCluster.getTerraformAddress()) .id(awsEksCluster.getResourceId()) .build() ).collect(Collectors.toList())) .build(); //TODO: add import AWSEKSNodeGroup }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getResourceMaps() { List<AWSReservation> awsReservations = getAwsReservations();  Maps<Resource> resourceMaps = exportInstances.getResourceMaps(awsReservations); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Instance.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSReservation> awsReservations) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();  for (AWSReservation reservation : awsReservations) { for (AWSInstance awsInstance : reservation.getInstances()) { Instance instance = awsInstance.getInstance(); resourceMapsBuilder.map( Resource.builder() .api(awsInstance.getTerraformResourceName()) .name(instance.instanceId()) .argument("ami", TFString.build(instance.imageId())) .argument("placement_group", TFString.build(instance.placement().groupName())) .argument("tenancy", TFString.build(instance.placement().tenancyAsString())) .argument("host_id", TFString.builder().isEmptyStringToNull(true).value(instance.placement().hostId()).build()) .argument("cpu_core_count", TFNumber.build(instance.cpuOptions().coreCount())) .argument("cpu_threads_per_core", TFNumber.build(instance.cpuOptions().threadsPerCore())) .argument("ebs_optimized", TFBool.build(instance.ebsOptimized())) .argument("disable_api_termination", TFBool.build(awsInstance.getDisableApiTermination())) .argument("instance_initiated_shutdown_behavior", TFString.build(awsInstance.getShutdownBehavior())) .argument("instance_type", TFString.build(instance.instanceType().toString())) .argument("key_name", TFString.build(instance.keyName())) //.argument("get_password_data", TFBool.build(instance.pass)) .argument("monitoring", TFBool.build(instance.monitoring().state() == MonitoringState.ENABLED)) .argument("vpc_security_group_ids", TFList.builder().isLineIndent(false) .lists(instance.securityGroups().stream().map(sg -> TFString.builder() .isLineIndent(false) .value(sg.groupId()).build()) .collect(Collectors.toList())) .build()) .argument("subnet_id", TFString.build(instance.subnetId())) //.argument("associate_public_ip_address", TFBool.build(instance.)) .argument("private_ip", TFString.build(instance.privateIpAddress())) .argument("secondary_private_ips", TFList.builder() .lists( instance.networkInterfaces().stream() .flatMap( ni -> ni.privateIpAddresses().stream() .filter(nis -> !nis.primary()) .map(nis -> TFString.builder().isLineIndent(false) .value(nis.privateIpAddress()).build()) ) .collect(Collectors.toList()) ) .build()) .argument("source_dest_check", TFBool.build(instance.sourceDestCheck())) .argument("user_data", TFString.builder().isMultiline(true).value( awsInstance.getUserData() != null ? new String(Base64.getDecoder().decode(awsInstance.getUserData())).replaceAll("[$]", "\\$\\$") : "" ).build()) .argument("iam_instance_profile", TFString.build( instance.iamInstanceProfile() == null ? "" : instance.iamInstanceProfile().arn() )) //.argument("ipv6_address_count", TFNumber.build(instance.)) //.argument("ipv6_address") .argument("tags", TFMap.build( instance.tags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) /* .argument("root_block_device", TFBlock.builder() .arguments( TFArguments.builder() .argument("volume_type", instance.blockDeviceMappings().get(0).) .argument("volume_size", null) .argument("iops", null) .argument("delete_on_termination", null) .argument("encrypted", null) .argument("kms_key_id", null) .build() ) .build() ) */ //.argument("ebs_block_device", ) //.argument("ephemeral_block_device", ) //.argument("network_interface", ) //.argument("credit_specification", ) .argument("hibernation", TFBool.build(instance.hibernationOptions().configured())) .argument("metadata_options", TFBlock.builder() .argument("http_endpoint", TFString.build(instance.metadataOptions().httpEndpointAsString())) .argument("http_tokens", TFString.build(instance.metadataOptions().httpTokensAsString())) .argument("http_put_response_hop_limit", TFNumber.build(instance.metadataOptions().httpPutResponseHopLimit())) .build() ) .build() ); } }  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: should_canConvertValue_returnFalse_ifCheckDoubleMinValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(Double.MIN_VALUE));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: test2() { List<Integer> v1 = List.of(1, 1, 1, 1), v2 = List.of(3, 4, 5, 6); ZigzagIterator iterator = new ZigzagIterator(v1, v2); List<Integer> expected = List.of(1, 3, 1, 4, 1, 5, 1, 6); List<Integer> actual = new ArrayList<>(); while (iterator.hasNext()) actual.add(iterator.next()); "<AssertPlaceHolder>"; }
next() { if (v[pos & 1].size() <= (pos >>> 1)) pos++; return v[pos & 1].get(pos++ >>> 1); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception {  final String uniqueInstanceKey = String.valueOf(instanceCount.getAndIncrement()); final String[] customAuthArgs = new String[]{ uniqueInstanceKey, "arg1", "arg2" }; final String serializedArgList = StringUtils.join(customAuthArgs,','); final HttpClientConfigCallback hccc = authTestBase( ImmutableMap.<String, String>builder(). put("index." + INDEX_NAME + ".elasticsearch.interface", "REST_CLIENT"). put("index." + INDEX_NAME + ".elasticsearch.http.auth.type", HttpAuthTypes.CUSTOM.toString()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-class", TestCustomAuthenticator.class.getName()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-args", serializedArgList). build() );  verify(restClientSetup).getCustomAuthenticator( eq(TestCustomAuthenticator.class.getName()), eq(customAuthArgs));  TestCustomAuthenticator customAuth = TestCustomAuthenticator.instanceMap.get(uniqueInstanceKey); "<AssertPlaceHolder>";  // authenticator has been instantiated, verifying it has been called assertEquals(1, customAuth.numInitCalls);  // verifying that the custom callback is in the chain final HttpAsyncClientBuilder hacb = mock(HttpAsyncClientBuilder.class); hccc.customizeHttpClient(hacb);  assertEquals(1, customAuth.customizeHttpClientHistory.size()); assertSame(hacb, customAuth.customizeHttpClientHistory.get(0)); assertArrayEquals(customAuthArgs, customAuth.args); }
getCustomAuthenticator(String authClassName, String[] authClassConstructorArgList) { Preconditions.checkArgument(StringUtils.isNotEmpty(authClassName), "Custom authenticator class name cannot be empty"); Preconditions.checkNotNull(authClassConstructorArgList, "Custom authenticator class constructor argument list cannot be null");  final RestClientAuthenticator authenticator;  try { final Class<?> c = Class.forName(authClassName); Preconditions.checkArgument(RestClientAuthenticator.class.isAssignableFrom(c), "Authenticator class " + authClassName + " must be a subclass of " + RestClientAuthenticator.class.getName()); @SuppressWarnings("unchecked") final Constructor<RestClientAuthenticator> ctr = ((Class<RestClientAuthenticator>)c).getConstructor(String[].class); authenticator = ctr.newInstance((Object)authClassConstructorArgList); } catch (Exception e) { log.error("Unable to instantiate the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to instantiate the custom authenticator", e); }  try { authenticator.init(); } catch (IOException e) { log.error("Unable to initialize the custom authenticator {} with constructor arguments "{}"", authClassName, authClassConstructorArgList, e); throw new RuntimeException("Unable to initialize the custom authenticator", e); }  return authenticator; }
[*] target: assertNotNull(customAuth)
[-] pred: org. junit. Assert. assertNotNull ( customAuth )
************************************
************************************
[+] input: rootsToSearchNone() { var resolution = new EqualTagsWithDefaultTagResolutionStrategy();  var roots = new LinkedHashMap<Tags, ConfigNode>(); var foundNodes = resolution.rootsToSearch(roots, Tags.of());  Assertions.assertEquals(0, foundNodes.size());  // search for dev foundNodes = resolution.rootsToSearch(roots, Tags.environment("dev"));  Assertions."<AssertPlaceHolder>"; }
rootsToSearch(LinkedHashMap<Tags, ConfigNode> roots, Tags tags) { List<GResultOf<ConfigNode>> rootsToSearch = new ArrayList<>();  // if the roots contain the empty tags, add the empty tags as a fallback. if (roots.containsKey(Tags.of())) { rootsToSearch.add(GResultOf.result(roots.get(Tags.of()))); }  // if the tags aren't the empty tags, and if this root contains the tags, add them to the roots to search. if (!Tags.of().equals(tags) && roots.containsKey(tags)) { rootsToSearch.add(GResultOf.result(roots.get(tags))); }  return rootsToSearch; }
[*] target: assertEquals(0, foundNodes.size())
[-] pred: org. junit. Assert. assertEquals ( 0, foundNodes. size ( ) )
************************************
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/all/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/all/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", "test-sha1", "test-changelist");  "<AssertPlaceHolder>"; }
visit(final String originalPom, final String revision, final String sha1, final String changeList){ String modified; modified = originalPom.replace("${revision}", revision); if (modified.contains("${sha1}")) { modified = modified.replace("${sha1}", sha1 != null ? sha1 : ""); }  if (modified.contains("${changelist}")) { modified = modified.replace("${changelist}", changeList != null ? changeList : ""); }  return modified; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
************************************
[+] input: isRedisClusterEnabledReturnsDefaultStatus() { final Map<String, Object> originalConfig = new HashMap<>(); originalConfig.put("topic", "mytopic"); originalConfig.put("redis.uri", "redis://localhost:6379"); originalConfig.put("redis.channels", "channel1,channel2"); originalConfig.put("redis.channels.pattern.enabled", true);  final RedisSourceConfig sinkConfig = new RedisSourceConfig(originalConfig);  "<AssertPlaceHolder>"; }
isRedisClusterEnabled() { return this.redisClusterEnabled; }
[*] target: assertFalse(sinkConfig.isRedisClusterEnabled())
[-] pred: org. junit. Assert. assertFalse ( sinkConfig. isRedisClusterEnabled ( ) )
************************************
************************************
[+] input: testApply() { var jvmArgs = "-Xmx9001m"; var jvmVersion = "11.0.1"; var startTime = Instant.now(); var eventTime = Instant.now().plus(12, MILLIS); var expectedAttributes = new Attributes() .put(JVM_ARGUMENTS, jvmArgs) .put(JVM_START_TIME, startTime.toEpochMilli()) .put(JVM_VERSION, jvmVersion); var expectedEvent = new Event(JFR_JVM_INFORMATION, expectedAttributes, eventTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(eventTime); when(event.getString(JVM_ARGUMENTS)).thenReturn(jvmArgs); when(event.getInstant(JVM_START_TIME)).thenReturn(startTime); when(event.getString(JVM_VERSION)).thenReturn(jvmVersion);  var mapper = new JVMInformationMapper();  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent event) {  long timestamp = event.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); if (hasField(event, JVM_START_TIME, SIMPLE_CLASS_NAME)) { attr.put(JVM_START_TIME, event.getInstant(JVM_START_TIME).toEpochMilli()); } if (hasField(event, JVM_ARGUMENTS, SIMPLE_CLASS_NAME)) { attr.put(JVM_ARGUMENTS, event.getString(JVM_ARGUMENTS)); } if (hasField(event, JVM_VERSION, SIMPLE_CLASS_NAME)) { attr.put(JVM_VERSION, event.getString(JVM_VERSION)); } return Collections.singletonList(new Event(JFR_JVM_INFORMATION, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: executeHappyPath() { CompletionResult expected = new CompletionResult(); Single<CompletionResult> single = Single.just(expected);  CompletionResult actual = OpenAiService.execute(single); "<AssertPlaceHolder>"; }
execute(Single<T> apiCall) { try { return apiCall.blockingGet(); } catch (HttpException e) { try { if (e.response() == null || e.response().errorBody() == null) { throw e; } String errorBody = e.response().errorBody().string();  OpenAiError error = mapper.readValue(errorBody, OpenAiError.class); throw new OpenAiHttpException(error, e, e.code()); } catch (IOException ex) { // couldn't parse OpenAI error throw e; } } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: DefaultStringsTest() { final SimpleRunConfig config = new SimpleRunConfig(new String[0]);  assertThat(config.getNumOfThreads(), is(4)); assertThat(config.getAllocRateInMbPerSecond(), is(1024L)); assertThat(config.getDurationInSecond(), is(60)); assertThat(config.getMaxObjectSize(), is(1024)); assertThat(config.getMinObjectSize(), is(128)); assertThat(config.getHeapSizeInMb(), is(1024)); assertThat(config.getLongLivedInMb(), is(64)); assertThat(config.getMidAgedInMb(), is(64)); assertThat(config.getPruneRatio(), is(50)); assertThat(config.getReshuffleRatio(), is(100)); assertThat(config.getLogFile(), is("output.csv")); "<AssertPlaceHolder>"; }
isUseCompressedOops() { return useCompressedOops; }
[*] target: assertTrue(config.isUseCompressedOops())
[-] pred: org. junit. Assert. assertTrue ( config. isUseCompressedOops() )
************************************
************************************
[+] input: testDeepClone() { VirtualMouse expected = new VirtualMouse(); expected.updateFromEvent(VirtualKey.LC, true, 15, 0, 0); expected.updateFromEvent(VirtualKey.MOUSEMOVED, true, 0, 0, 0);  VirtualMouse actual = expected.clone();  "<AssertPlaceHolder>"; assertIterableEquals(expected.getSubticks(), actual.getSubticks()); }
clone() { return new VirtualMouse(new HashSet<>(this.pressedKeys), scrollWheel, cursorX, cursorY, new ArrayList<>(subtickList), isIgnoreFirstUpdate()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldProperlySendStatDTO() { //given Mockito.when(telegramUserService.findAllInActiveUsers()).thenReturn(singletonList(new TelegramUser())); TelegramUser activeUser = new TelegramUser(); activeUser.setGroupSubs(singletonList(new GroupSub())); Mockito.when(telegramUserService.findAllActiveUsers()).thenReturn(singletonList(activeUser)); GroupSub groupSub = new GroupSub(); groupSub.setTitle("group"); groupSub.setId(1); groupSub.setUsers(singletonList(new TelegramUser())); Mockito.when(groupSubService.findAll()).thenReturn(singletonList(groupSub));  //when StatisticDTO statisticDTO = statisticsService.countBotStatistic();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, statisticDTO.getActiveUserCount()); Assertions.assertEquals(1, statisticDTO.getInactiveUserCount()); Assertions.assertEquals(1.0, statisticDTO.getAverageGroupCountByUser()); Assertions.assertEquals(singletonList(new GroupStatDTO(groupSub.getId(), groupSub.getTitle(), groupSub.getUsers().size())), statisticDTO.getGroupStatDTOs()); }
countBotStatistic() { List<GroupStatDTO> groupStatDTOS = groupSubService.findAll().stream() .filter(it -> !isEmpty(it.getUsers())) .map(groupSub -> new GroupStatDTO(groupSub.getId(), groupSub.getTitle(), groupSub.getUsers().size())) .collect(Collectors.toList()); List<TelegramUser> allInActiveUsers = telegramUserService.findAllInActiveUsers(); List<TelegramUser> allActiveUsers = telegramUserService.findAllActiveUsers();  double groupsPerUser = getGroupsPerUser(allActiveUsers); return new StatisticDTO(allActiveUsers.size(), allInActiveUsers.size(), groupStatDTOS, groupsPerUser); }
[*] target: assertNotNull(statisticDTO)
[-] pred: org. junit. Assert. assertNotNull ( statisticDTO )
************************************
************************************
[+] input: getResourceMaps() { // given List<AWSRouteTable> routeTables = getAwsRouteTables();  Maps<Resource> resourceMaps = exportRouteTables.getResourceMaps(routeTables); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RouteTable.tf")); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRouteTable> awsRouteTables) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder();  for (AWSRouteTable awsRouteTable : awsRouteTables) { resourceMapsBuilder.map( Resource.builder() .api(awsRouteTable.getTerraformResourceName()) .name(awsRouteTable.getResourceName()) .argument("vpc_id", TFString.build(awsRouteTable.getVpcId())) .argument("tags", TFMap.build( awsRouteTable.getTags().stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .argument("propagating_vgws", TFList.build( awsRouteTable.getPropagatingVgws().stream() .map(vgw -> TFString.build(vgw.gatewayId())) .collect(Collectors.toCollection(ArrayList::new)) )) .build() );  List<AWSRoute> awsRoutes = awsRouteTable.getAwsRoutes(); for (AWSRoute awsRoute : awsRoutes) { Route route = awsRoute.getRoute(); resourceMapsBuilder.map( Resource.builder() .api(awsRoute.getTerraformResourceName()) .name(awsRoute.getResourceName()) .argument("route_table_id", TFString.build(awsRoute.getRouteTableId())) .argumentIf(Optional.ofNullable(route.destinationCidrBlock()).isPresent(), "destination_cidr_block", () -> TFString.build(route.destinationCidrBlock())) .argumentIf(Optional.ofNullable(route.destinationIpv6CidrBlock()).isPresent(), "destination_ipv6_cidr_block", () -> TFString.build(route.destinationIpv6CidrBlock())) .argumentIf(Optional.ofNullable(route.egressOnlyInternetGatewayId()).isPresent(), "egress_only_gateway_id", () -> TFString.build(route.egressOnlyInternetGatewayId())) .argumentIf(Optional.ofNullable(route.gatewayId()).isPresent(), "gateway_id", () -> TFString.build(route.gatewayId())) .argumentIf(Optional.ofNullable(route.instanceId()).isPresent(), "instance_id", () -> TFString.build(route.instanceId())) .argumentIf(Optional.ofNullable(route.natGatewayId()).isPresent(), "nat_gateway_id", () -> TFString.build(route.natGatewayId())) .argumentIf(Optional.ofNullable(route.localGatewayId()).isPresent(), "local_gateway_id", () -> TFString.build(route.localGatewayId())) .argumentIf(Optional.ofNullable(route.networkInterfaceId()).isPresent(), "network_interface_id", () -> TFString.build(route.networkInterfaceId())) .argumentIf(Optional.ofNullable(route.transitGatewayId()).isPresent(), "transit_gateway_id", () -> TFString.build(route.transitGatewayId())) .argumentIf(Optional.ofNullable(route.destinationPrefixListId()).isPresent(), "vpc_endpoint_id", () -> TFString.build(route.destinationPrefixListId())) .argumentIf(Optional.ofNullable(route.vpcPeeringConnectionId()).isPresent(), "vpc_peering_connection_id", () -> TFString.build(route.vpcPeeringConnectionId())) .build() ); }  awsRouteTable.getAwsRouteTableAssociations().forEach(awsRouteTableAssociation -> { RouteTableAssociation routeTableAssociation = awsRouteTableAssociation.getRouteTableAssociation(); resourceMapsBuilder.map( Resource.builder() .api(awsRouteTableAssociation.getTerraformResourceName()) .name(awsRouteTableAssociation.getResourceName()) .argumentIf(Optional.ofNullable(routeTableAssociation.subnetId()).isPresent(), "subnet_id", () -> TFString.build(routeTableAssociation.subnetId())) .argumentIf(Optional.ofNullable(routeTableAssociation.gatewayId()).isPresent(), "gateway_id", () -> TFString.build(routeTableAssociation.gatewayId())) .argument("route_table_id", TFString.build(routeTableAssociation.routeTableId())) .build() ); } ); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testUpdateStatus_notExist() { boolean result = abnormalDatasetRepository.updateStatus(1L, "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
updateStatus(Long id, String status, OffsetDateTime updateTime) { String sql = DefaultSQLBuilder.newBuilder() .update(TABLE_NAME) .set("status", "update_time") .where("id = ?") .asPrepared() .getSQL(); int updatedRows = jdbcTemplate.update(sql, status, updateTime, id); return updatedRows == 1; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testAdler32CanCopyItself() { byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  Adler32 adler1 = new Adler32();  adler1.update(buf1, 0, buf1.length);  Adler32 adler2 = adler1.copy();  adler1.update(buf2, 0, buf1.length); adler2.update(buf2, 0, buf1.length);  long expected = adler1.getValue(); long actual = adler2.getValue();  "<AssertPlaceHolder>"; }
getValue() { return ((s2 << 16) | s1); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test_fetchNameWithMultipleArchived_notFound() { Random rand = new Random(); int times = rand.nextInt(5) + 5; for (int time = 1; time <= times; time++) { TaskDefinition taskDefinitionTemp = MockTaskDefinitionFactory.createTaskDefinition(); taskDefinitionTemp = taskDefinitionTemp.cloneBuilder() .withName("test") .build(); taskDefinitionDao.archive(taskDefinitionTemp.getDefinitionId()); } List<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test"); "<AssertPlaceHolder>"; }
fetchAliveTaskDefinitionByName(String taskName) { String sql = getSelectSQL(TASK_DEF_MODEL_NAME + ".name = ?"); return jdbcTemplate.query(sql, TaskDefinitionMapper.INSTANCE, taskName).stream() .filter(taskDef -> !taskDef.isArchived()) .collect(Collectors.toList()); }
[*] target: assertTrue(fetched.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( fetched. isEmpty ( ) )
************************************
************************************
[+] input: Exception { URL url = Resources.getResourceURL(CLASS_LOADER, JPETSTORE_PROPERTIES); try (InputStream in = Resources.getUrlAsStream(url.toString())) { "<AssertPlaceHolder>"; } }
getUrlAsStream(String urlString) throws IOException { URL url = new URL(urlString); URLConnection conn = url.openConnection(); return conn.getInputStream(); }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
************************************
[+] input: checkWithClassFromThisModule() { final JarFile actual = ClassUtil.jarFileOf(StringUtil.class);  // asserts "<AssertPlaceHolder>"; }
jarFileOf(final Class<?> klass) { final URL url = klass.getResource( "/" + klass.getName().replace('.', '/') + ".class");  if (url == null) { return null; }  final String s = url.getFile(); final int beginIndex = s.indexOf("file:") + "file:".length(); int endIndex = s.indexOf(".jar!"); if (endIndex == -1) { return null; }  endIndex += ".jar".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, StandardCharsets.UTF_8); final File file = new File(f);  try { return file.exists() ? new JarFile(file) : null; } catch (final IOException e) { throw new IllegalStateException(e); } }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: mapDtosToEntities_shouldMapDescriptionsArray() { int expected = 3; List<OkrTopicDescriptionDto> topicDescriptionDtos = new ArrayList<>() { { add(new OkrTopicDescriptionDto()); add(new OkrTopicDescriptionDto()); add(new OkrTopicDescriptionDto()); } };  Collection<OkrTopicDescription> actual = topicDescriptionMapper.mapDtosToEntities(topicDescriptionDtos);  "<AssertPlaceHolder>"; }
mapDtosToEntities( Collection<OkrTopicDescriptionDto> input ) { Collection<OkrTopicDescription> descriptions = new ArrayList<>(); input.forEach(descriptionDto -> descriptions.add(mapDtoToEntity(descriptionDto))); return descriptions; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
************************************
[+] input: testLineIntersection2() { double[] p = GeometryTools.lineIntersection(0, 0, 1, 1, 0, 2, 1, 3); "<AssertPlaceHolder>"; }
lineIntersection( double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4 ) { double d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4); if (Math.abs(d) < EPS) return null;  double d1 = x1 * y2 - y1 * x2, d2 = x3 * y4 - y3 * x4; double x = d1 * (x3 - x4) - d2 * (x1 - x2); double y = d1 * (y3 - y4) - d2 * (y1 - y2); return new double[]{x / d, y / d}; }
[*] target: assertNull(p)
[-] pred: org. junit. Assert. assertNull ( p )
************************************
************************************
[+] input: testDoFixValueAssert_equals() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) >= Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: getCatalogs_catalogsNull_returnNull() { /* ARRANGE */ final var resource = new OfferedResource();  /* ACT */ final var result = resource.getCatalogs();  /* ASSERT */ "<AssertPlaceHolder>"; }
getCatalogs() { return catalogs; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: whenGroupTransactionIsCreated_thenRetrievedMsgIsSuccess() { //        //Arrange // //        String personEmail = "manuel@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; // // //        String denominationCategory = "IRS"; //        String type = "debit"; //        String transactionDescription = "May IRS"; //        double amount = 150.0; //        String denominationAccountDeb = "Bank Account"; //        String denominationAccountCred = "State"; // // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); //        GroupDTO isTransactionCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupTransactionInfoDTO newGroupTransactionInfoDTO = new NewGroupTransactionInfoDTO(denominationCategory, type, transactionDescription, amount, denominationAccountDeb, denominationAccountCred); // //        CreateGroupTransactionDTO createGroupTransactionDTO = CreateGroupTransactionDTOAssembler.createDTOFromPrimitiveTypes(groupDenomination, personEmail, newGroupTransactionInfoDTO.getDenominationCategory(), newGroupTransactionInfoDTO.getDenominationAccountDeb(), newGroupTransactionInfoDTO.getDenominationAccountCred(), newGroupTransactionInfoDTO.getAmount(), newGroupTransactionInfoDTO.getType(), newGroupTransactionInfoDTO.getDescription()); // //        //Expected Response Entity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isTransactionCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createCategoryAsPersonInCharge method, //        // so it does not depend on other parts (e.g. DB) //        Mockito.when(service.createGroupTransaction(createGroupTransactionDTO)).thenReturn(isTransactionCreatedExpected); // //        //Act // //        ResponseEntity<Object> isCategoryCreated = controller.createGroupTransaction(newGroupTransactionInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
createGroupTransaction(@RequestBody NewGroupTransactionInfoDTO info, @PathVariable final String personEmail, @PathVariable final String groupDenomination) {  CreateGroupTransactionDTO createGroupTransactionDTO = CreateGroupTransactionDTOAssembler.createDTOFromPrimitiveTypes(groupDenomination, personEmail, info.getDenominationCategory(), info.getDenominationAccountDeb(), info.getDenominationAccountCred(), info.getAmount(), info.getType(), info.getDescription(), info.getDate());  GroupDTO result = service.createGroupTransaction(createGroupTransactionDTO);  Link link_to_admins = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAdmins(groupDenomination)).withRel("admins"); Link link_to_members = linkTo(methodOn(CreateGroupControllerREST.class).getGroupMembers(groupDenomination)).withRel("members"); Link link_to_ledger = linkTo(methodOn(CreateGroupControllerREST.class).getGroupLedger(groupDenomination)).withRel("records"); Link link_to_accounts = linkTo(methodOn(CreateGroupControllerREST.class).getGroupAccounts(personEmail, groupDenomination)).withRel("accounts"); Link link_to_categories = linkTo(methodOn(CreateGroupControllerREST.class).getGroupCategories(personEmail, groupDenomination)).withRel("categories");  result.add(link_to_admins); result.add(link_to_members); result.add(link_to_ledger); result.add(link_to_accounts); result.add(link_to_categories);  return new ResponseEntity<>(result, HttpStatus.CREATED); }
[*] target: assertEquals(expectedResponse, isCategoryCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isCategoryCreated )
************************************
************************************
[+] input: createFromUshort555Rgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_USHORT_555_RGB); final short[] data = PngEncoderBufferedImageConverter.getDataBufferUShort(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromUshort555Rgb(data, width, height); "<AssertPlaceHolder>"; }
createFromUshort555Rgb(short[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferUShort(data, data.length); ColorModel colorModel = new DirectColorModel(15, BAND_MASKS_USHORT_555_RGB[0], BAND_MASKS_USHORT_555_RGB[1], BAND_MASKS_USHORT_555_RGB[2]); WritableRaster raster = Raster.createPackedRaster(dataBuffer, width, height, width, BAND_MASKS_USHORT_555_RGB, null); return new BufferedImage(colorModel, raster, false, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: testPublishServiceDefinition() { InMemoryWritableMetadataService inMemoryWritableMetadataService = new InMemoryWritableMetadataService(); inMemoryWritableMetadataService.publishServiceDefinition(url);  String v = inMemoryWritableMetadataService.getServiceDefinition(interfaceName, version, group); Assertions."<AssertPlaceHolder>"; }
getServiceDefinition(String interfaceName, String version, String group) { return serviceDefinitions.get(URL.buildKey(interfaceName, group, version)); }
[*] target: assertNotNull(v)
[-] pred: org. junit. Assert. assertNotNull ( v )
************************************
************************************
[+] input: deleteTaskRun_byExistingId_shouldReturnRemovedRowNum() { // Prepare Clock mockClock = getMockClock(); DateTimeUtils.setClock(mockClock);  // 1. create task runs Task task = MockTaskFactory.createTask(); taskDao.create(task);  // 2. create task run TaskRun sampleTaskRun = MockTaskRunFactory.createTaskRun(1L, task); taskRunDao.createTaskRun(sampleTaskRun);  // Process // 3. Perform delete action boolean deletionSuccess = taskRunDao.deleteTaskRun(1L);  // Validate assertTrue(deletionSuccess);  // 4. fetch and validate Optional<TaskRun> persistedTaskRunOptional = taskRunDao.fetchTaskRunById(1L); assertFalse(persistedTaskRunOptional.isPresent());  // 5. Multiple deletions on same id should be idempotent, but returns false flag boolean deletionSuccessAfterAction = taskRunDao.deleteTaskRun(1L); "<AssertPlaceHolder>"; }
deleteTaskRun(Long taskRunId) { return dbOperator.transaction(() -> { deleteTaskRunConditions(taskRunId); deleteTaskRunDependencies(taskRunId); deleteTaskAttempts(taskRunId); String deleteSQL = DefaultSQLBuilder.newBuilder() .delete() .from(TASK_RUN_TABLE_NAME) .where("id = ?") .getSQL(); return dbOperator.update(deleteSQL, taskRunId) > 0; }); }
[*] target: assertFalse(deletionSuccessAfterAction)
[-] pred: org. junit. Assert. assertFalse ( deletionSuccessAfterAction )
************************************
************************************
[+] input: testGetOneMetadataReport() { URL url = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url); Assertions."<AssertPlaceHolder>"; }
getMetadataReport(URL url) { // 清理export、refer参数 url = url.setPath(MetadataReport.class.getName()) .removeParameters(EXPORT_KEY, REFER_KEY); String key = url.toServiceString(); LOCK.lock(); try { // 从SERVICE_STORE_MAP集合（ConcurrentHashMap<String, MetadataReport>类型）中 // 查询是否已经缓存有对应的MetadataReport对象 MetadataReport metadataReport = SERVICE_STORE_MAP.get(key); if (metadataReport != null) { // 直接返回缓存的MetadataReport对象 return metadataReport; } // 创建新的MetadataReport对象，createMetadataReport()方法由子类具体实现 metadataReport = createMetadataReport(url); if (metadataReport == null) { throw new IllegalStateException("Can not create metadata Report " + url); } // 将MetadataReport缓存到SERVICE_STORE_MAP集合中 SERVICE_STORE_MAP.put(key, metadataReport); return metadataReport; } finally { // Release the lock LOCK.unlock(); } }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
************************************
[+] input: shouldStopResultHandler() { try (SqlSession session = sqlMapper.openSession()) { final TestResultStopHandler resultHandler = new TestResultStopHandler(); session.select("org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts", null, resultHandler); "<AssertPlaceHolder>"; } }
select(String statement, Object parameter, ResultHandler handler);  /** * Retrieve a single row mapped from the statement * using a {@code ResultHandler}
[*] target: assertEquals(2, resultHandler.count)
[-] pred: org. junit. Assert. assertEquals ( 2, resultHandler. count )
************************************
************************************
[+] input: Exception { VariableInfo info = new RealIDInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0, 12345); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealIDInfo", infoProto.getClassName()); RealIDInfoProto proto = infoProto.getSerializedData().unpack(RealIDInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares()); assertEquals(12345, proto.getId());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
deserialize(SERIALIZED serialized) {  // Extract version from serialized FieldDescriptor fieldDescriptor = serialized.getDescriptorForType().findFieldByName("version"); int version = (Integer) serialized.getField(fieldDescriptor); // Extract class_name of return value from serialized fieldDescriptor = serialized.getDescriptorForType().findFieldByName("class_name"); // Allow redirect for Tribuo's classes. String className = (String) serialized.getField(fieldDescriptor); Pair<Integer, String> key = new Pair<>(version, className); String targetClassName = REDIRECT_MAP.getOrDefault(key, className);  try { @SuppressWarnings("unchecked") Class<PROTO_SERIALIZABLE> protoSerializableClass = (Class<PROTO_SERIALIZABLE>) Class.forName(targetClassName); if (!ProtoSerializable.class.isAssignableFrom(protoSerializableClass)) { throw new IllegalStateException("Class " + targetClassName + " does not implement ProtoSerializable"); }  fieldDescriptor = serialized.getDescriptorForType().findFieldByName("serialized_data"); Any serializedData = (Any) serialized.getField(fieldDescriptor);  Method method = protoSerializableClass.getDeclaredMethod(ProtoSerializable.DESERIALIZATION_METHOD_NAME, int.class, String.class, Any.class); Class<?> deserializationReturnType = method.getReturnType(); if (!ProtoSerializable.class.isAssignableFrom(deserializationReturnType)) { throw new IllegalStateException("Method " + protoSerializableClass + "." + ProtoSerializable.DESERIALIZATION_METHOD_NAME + " does not return an instance of " + protoSerializableClass); } method.setAccessible(true); @SuppressWarnings("unchecked") PROTO_SERIALIZABLE protoSerializable = (PROTO_SERIALIZABLE) method.invoke(null, version, targetClassName, serializedData); method.setAccessible(false); return protoSerializable; } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to find class " + targetClassName, e); } catch (NoSuchMethodException e) { throw new IllegalStateException("Failed to find deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (IllegalAccessException e) { throw new IllegalStateException("Failed to invoke deserialization method " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName, e); } catch (InvocationTargetException e) { throw new IllegalStateException("The deserialization method for " + ProtoSerializable.DESERIALIZATION_METHOD_NAME + "(int, String, com.google.protobuf.Any) on class " + targetClassName + " threw an exception", e); } }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
************************************
[+] input: URISyntaxException { SerDesParser serDesAnalyzer = new SerDesParser(analyzer); Snapshot first = serDesAnalyzer.parse(pathOfResource("jstack_8.log"), NoOpProgressListener); Snapshot second = serDesAnalyzer.parse(pathOfResource("jstack_8.log"), NoOpProgressListener); Assertions."<AssertPlaceHolder>"; }
parse(Path path, ProgressListener listener) { // TODO: multi-threads support Path serializedDataPath = resolveSerializedDataPath(path); if (Files.exists(serializedDataPath)) { try { listener.beginTask("Deserializing thread dump", 100); Snapshot snapshot = deserialize(serializedDataPath); listener.worked(100); return snapshot; } catch (Throwable t) { log.error("Failed to deserialize thread dump: {}", t.getMessage()); listener.sendUserMessage(ProgressListener.Level.WARNING, "Deserialize thread dump failed", t); listener.reset(); } }  Snapshot snapshot = parser.parse(path, listener); try { listener.beginTask("Serializing thread dump", 5); serialize(snapshot, serializedDataPath); } catch (Throwable t) { log.warn("Failed to serialize thread dump: {}", t.getMessage()); } finally { listener.worked(5); } return snapshot; }
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, ownerKeys, 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() {  // Same requirements as add() boolean result = this.isValidForAddOperation();  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForRemoveOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: testDoFixValueAssert_less() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
doFixValueAssert(MetricsCollectedResult<String> metricsCollectedResult) { String expectedValue = getExpectedValue(); String originalValue = metricsCollectedResult.getValue(); return Double.parseDouble(originalValue) <= Double.parseDouble(expectedValue); }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: Exception {  DubboSwaggerApiListingResource resource = new  DubboSwaggerApiListingResource();  app = mock(Application.class); sc = mock(ServletConfig.class); Set<Class<?>> sets = new HashSet<Class<?>>(); sets.add(SwaggerService.class);  when(sc.getServletContext()).thenReturn(mock(ServletContext.class)); when(app.getClasses()).thenReturn(sets);  Response response = resource.getListingJson(app, sc, null, new ResteasyUriInfo(new URI("http://rest.test")));  Assertions."<AssertPlaceHolder>"; Swagger swagger = (Swagger)response.getEntity(); Assertions.assertEquals("SwaggerService",swagger.getTags().get(0).getName()); Assertions.assertEquals("/demoService/hello",swagger.getPaths().keySet().toArray()[0].toString()); }
getListingJson(Application app, ServletConfig sc, HttpHeaders headers, UriInfo uriInfo)  throws JsonProcessingException { Response response =  getListingJsonResponse(app, context, sc, headers, uriInfo); response.getHeaders().add("Access-Control-Allow-Origin", "*"); response.getHeaders().add("Access-Control-Allow-Headers", "x-requested-with, ssi-token"); response.getHeaders().add("Access-Control-Max-Age", "3600"); response.getHeaders().add("Access-Control-Allow-Methods","GET,POST,PUT,DELETE,OPTIONS"); return response; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenValidLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
fetchPageStepsInfo(String realToken, String orgId, String pipelineId, String page, String perPage, String createdFrom, String createdTo, List<String> branches) { ResponseEntity<List<BuildKiteBuildInfo>> pipelineStepsInfo = buildKiteFeignClient.getPipelineSteps(realToken, orgId, pipelineId, page, perPage, createdFrom, createdTo, branches);  log.info( "Successfully get paginated pipeline steps pagination info, orgId: {},pipelineId: {}, createdFrom: {},  createdTo: {}, result status code: {}, page:{}", orgId, pipelineId, createdFrom, createdTo, pipelineStepsInfo.getStatusCode(), page);  int totalPage = parseTotalPage(pipelineStepsInfo.getHeaders().get(BUILD_KITE_LINK_HEADER)); log.info("Successfully parse the total page_total page: {}", totalPage); List<BuildKiteBuildInfo> firstPageStepsInfo = pipelineStepsInfo.getBody(); return PageStepsInfoDto.builder().firstPageStepsInfo(firstPageStepsInfo).totalPage(totalPage).build(); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
************************************
[+] input: setIdGetIdShouldWork() { // prepare final String id = "someId";  // run Stack s = new Stack(); s.setId(id);  // assert "<AssertPlaceHolder>"; }
getId() { return id; }
[*] target: assertEquals(id, s.getId())
[-] pred: org. junit. Assert. assertEquals ( id, s. getId() )
************************************
************************************
[+] input: getResourceMaps() { List<AWSLoadBalancer> AWSLoadBalancers = getAwsLoadBalancers();  Maps<Resource> resourceMaps = exportLoadBalancers.getResourceMaps(AWSLoadBalancers); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancer.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSLoadBalancer> awsLoadBalancers) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSLoadBalancer awsLoadBalancer : awsLoadBalancers) { LoadBalancer loadBalancer = awsLoadBalancer.getLoadBalancer(); List<LoadBalancerAttribute> attributes = awsLoadBalancer.getLoadBalancerAttributes(); List<Tag> tags = awsLoadBalancer.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsLoadBalancer.getTerraformResourceName()) .name(awsLoadBalancer.getResourceName()) .argument("name", TFString.build(loadBalancer.loadBalancerName())) .argument("internal", TFBool.build(loadBalancer.scheme() == LoadBalancerSchemeEnum.INTERNAL)) .argument("load_balancer_type", TFString.build(loadBalancer.typeAsString())) .argumentIf(() -> loadBalancer.availabilityZones().stream() .flatMap(zone -> zone.loadBalancerAddresses().stream()) .peek(address -> log.debug("1, LBName => {}, address => {}", loadBalancer.loadBalancerName(), address)) .allMatch(address -> address.allocationId() == null && address.privateIPv4Address() == null), "subnets", TFList.build( loadBalancer.availabilityZones().stream() .map(zone -> TFExpression.builder().isLineIndent(false) .expression(MessageFormat.format("aws_subnet.{0}.id", zone.subnetId())) .build()) .collect(Collectors.toList()))) .argumentsIf(() -> loadBalancer.availabilityZones().stream() .peek(zone -> log.debug("zone => {}", zone)) .flatMap(zone -> zone.loadBalancerAddresses().stream()) .peek(address -> log.debug("2, LBName => {}, address => {}", loadBalancer.loadBalancerName(), address)) .anyMatch(address -> address.allocationId() != null), "subnet_mapping", loadBalancer.availabilityZones().stream() .flatMap(zone -> zone.loadBalancerAddresses().stream() .map(address -> TFBlock.builder() .arguments(TFArguments.builder() .argument("subnet_id", TFExpression.builder() .expression(MessageFormat.format("aws_subnet.{0}.id", zone.subnetId())) .build()) .argument("allocation_id ", TFString.builder() .value(address.allocationId()) .build()) .build()) .build())) .collect(Collectors.toList())) .argumentsIf(() -> loadBalancer.availabilityZones().stream() .peek(zone -> log.debug("zone => {}", zone)) .flatMap(zone -> zone.loadBalancerAddresses().stream()) .peek(address -> log.debug("3, LBName => {}, address => {}", loadBalancer.loadBalancerName(), address)) .anyMatch(address -> address.privateIPv4Address() != null), "subnet_mapping", loadBalancer.availabilityZones().stream() .flatMap(zone -> zone.loadBalancerAddresses().stream() .map(address -> TFBlock.builder() .arguments(TFArguments.builder() .argument("subnet_id", TFExpression.builder() .expression(MessageFormat.format("aws_subnet.{0}.id", zone.subnetId())) .build()) .argument("private_ipv4_address ", TFString.builder() .value(address.privateIPv4Address()) .build()) .build()) .build())) .collect(Collectors.toList())) .argument("ip_address_type", TFString.builder() .value(loadBalancer.ipAddressTypeAsString()).build()) .argument("enable_deletion_protection", TFBool.builder() .bool(attributes.stream() .filter(a -> a.key().equals("deletion_protection.enabled")) .anyMatch(a -> a.value().equals("true"))) .build()) .argument("enable_cross_zone_load_balancing", TFBool.builder() .bool(attributes.stream() .filter(a -> a.key().equals("load_balancing.cross_zone.enabled")) .anyMatch(a -> a.value().equals("true"))) .build()) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build()) .build(); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  assertEquals(storage, builder.getStorage()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testObject", builder.getObjectName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  GCSConfigSource gcsConfigSource = (GCSConfigSource) configSourcePackage.getConfigSource(); assertTrue(gcsConfigSource.hasStream()); }
build() throws GestaltException { return buildPackage(new GCSConfigSource(storage, bucketName, objectName, tags)); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
************************************
[+] input: shouldGetAndSetEnabled() { var user = new LegacyUser(); user.setEnabled(true); "<AssertPlaceHolder>"; }
isEnabled() { return isEnabled; }
[*] target: assertTrue(user.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( user. isEnabled() )
************************************
************************************
[+] input: testF2() { for (int i = 1; i < MAX_VAl; i++) { int expected = Solution.f1(i); int actual = Solution.f2(i); "<AssertPlaceHolder>"; } }
f2(int n) { if (n >= 100_000_000) return 9; if (n >= 10_000_000) return 8; if (n >= 1_000_000) return 7; if (n >= 100_000) return 6; if (n >= 10_000) return 5; if (n >= 1_000) return 4; if (n >= 100) return 3; if (n >= 10) return 2; return 1; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetDiskDefault() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getDisk() { return getOrDefault(Option.DISK); }
[*] target: assertEquals(expected, opts.getDisk())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDisk() )
************************************
************************************
[+] input: shouldReadCorrectData() { List<AddressRecord> expected = List.of(getDanilaRecord(), getLinasRecord());  List<AddressRecord> records = reader.read( "src/test/resources/address-book.json");  "<AssertPlaceHolder>"; }
read(String filePath) { try { return objectMapper.readValue(new File(filePath), new TypeReference<List<AddressRecord>>(){}); } catch (IOException e) { throw new UncheckedIOException(e); } }
[*] target: assertEquals(expected, records)
[-] pred: org. junit. Assert. assertEquals ( expected, records )
************************************
************************************
[+] input: testTasks_multipleTasks() {  var TASKS = List.of( StandardArgs.task("do_something", "desc"), StandardArgs.task("do_something_else", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something --task do_something_else ARG1 --task do_something_else ARG2"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); assertEquals("do_something_else", tasks.get(1).getTaskName()); assertEquals("ARG1", tasks.get(1).getTaskArg()); assertEquals("do_something_else", tasks.get(2).getTaskName()); assertEquals("ARG2", tasks.get(2).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(3, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 3, tasks. size ( ) )
************************************
************************************
[+] input: shouldGetAndSetFirstName() { var user = new LegacyUser(); var expectedValue = "someValue"; user.setFirstName(expectedValue); "<AssertPlaceHolder>"; }
getFirstName() { return firstName; }
[*] target: assertEquals(expectedValue, user.getFirstName())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getFirstName() )
************************************
************************************
[+] input: Exception { Class<?> clazz = Resources.classForName(ResourcesTest.class.getName()); "<AssertPlaceHolder>"; }
classForName(String className) throws ClassNotFoundException { return classLoaderWrapper.classForName(className); }
[*] target: assertNotNull(clazz)
[-] pred: org. junit. Assert. assertNotNull ( clazz )
************************************
************************************
[+] input: testTasks_basicTask() {  var TASKS = List.of(StandardArgs.task("do_something", "desc"));  var command = "--config app.conf --task do_something"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); }
processArgs(String appName, String[] args, List<StandardArgs.Task> availableTasks, Map<String, String> envVariables) { if (envVariables == null) { envVariables = Collections.emptyMap(); }  var usingTasks = availableTasks != null && !availableTasks.isEmpty(); var helpOptions = helpOptions(usingTasks); var options = standardOptions(usingTasks);  try {  var parser = new DefaultParser(); var helpCommand = parser.parse(helpOptions, args, true);  handleHelpCommands(appName, helpCommand, options, availableTasks);  var command = parser.parse(options, args, false); var workingDir = Paths.get(".").toAbsolutePath().normalize(); var configFile = command.getOptionValue("config"); var secretKey = command.getOptionValue("secret-key");  if (secretKey == null) { secretKey = envVariables.get(ConfigKeys.SECRET_KEY_ENV); }  var tasks = usingTasks ? processTasks(command, availableTasks) : null;  return new StandardArgs(workingDir, configFile, secretKey, tasks); } catch (ParseException e) {  var message = "Invalid command line: " + e.getMessage(); System.err.println(message);  var formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(System.out), 80, appName, options); formatter.printHelp(appName, options);  throw EStartup.quietShutdown(-1); } }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testRoute_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: TimeoutException { var expected = generator.generateReport(); var emitted = new CompletableFuture<List<Report>>(); reportsCollector.getObservableReports().subscribe(emitted::complete); reportsCollector.accept(expected); reportsCollector.teardown(); var actual = emitted.get(60, TimeUnit.SECONDS).get(0); Assertions."<AssertPlaceHolder>"; }
teardown() { try { this.reportsCollector.flush(); } catch (Exception e) { logger.warn("Error occurred", e); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testEnforced04() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = Long.valueOf("15"); String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
enforced(final AwsServiceCache awsservice, final String siteId, final String value, final Object... objs) {  boolean enforced = false; Long contentLength = (Long) objs[0]; Long maxContentLength = getMaxContentLength(value);  if (maxContentLength != null) { enforced = (contentLength == null || contentLength.longValue() == 0) || (contentLength.longValue() > maxContentLength.longValue()); }  return enforced; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldReturnEmptyWhenDeploymentEnvironmentsIsEmpty() { List<PipelineCSVInfo> result = pipelineService.generateCSVForPipelineWithCodebase( CodebaseSetting.builder().build(), MOCK_START_TIME, MOCK_END_TIME, FetchedData.BuildKiteData.builder().build(), Lists.list());  "<AssertPlaceHolder>"; verify(buildKiteService, never()).getPipelineStepNames(any()); }
generateCSVForPipelineWithCodebase(CodebaseSetting codebaseSetting, String startTime, String endTime, FetchedData.BuildKiteData buildKiteData, List<DeploymentEnvironment> deploymentEnvironments) { List<PipelineCSVInfo> pipelineCSVInfos = new ArrayList<>(); deploymentEnvironments.parallelStream().forEach(deploymentEnvironment -> { List<BuildKiteBuildInfo> buildInfos = getBuildInfos(buildKiteData.getBuildInfosList(), deploymentEnvironment.getId()); if (!buildInfos.isEmpty()) { List<String> pipelineSteps = buildKiteService.getPipelineStepNames(buildInfos); if (!pipelineSteps.isEmpty()) { List<String> validSteps = buildKiteService.getStepsBeforeEndStep(deploymentEnvironment.getStep(), pipelineSteps); List<PipelineCSVInfo> pipelineCSVInfoList = buildInfos.stream() .filter(buildInfo -> isValidBuildInfo(buildInfo, validSteps, startTime, endTime)) .map(buildInfo -> getPipelineCSVInfo(codebaseSetting, startTime, endTime, buildKiteData, deploymentEnvironment, buildInfo, validSteps)) .toList(); pipelineCSVInfos.addAll(pipelineCSVInfoList); } } }); return pipelineCSVInfos; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
************************************
[+] input: extractPayloadFromMultipartMessage_mapWithPayloadValue_returnPayloadValue() { /* ARRANGE */ final var payloadValue = "some payload values"; final var response = new HashMap<String, String>(); response.put("header", "some header values"); response.put("payload", payloadValue);  /* ACT */ final var result = MessageUtils.extractPayloadFromMultipartMessage(response);  /* ASSERT */ "<AssertPlaceHolder>"; }
extractPayloadFromMultipartMessage(final Map<String, String> message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.get("payload"); }
[*] target: assertEquals(payloadValue, result)
[-] pred: org. junit. Assert. assertEquals ( payloadValue, result )
************************************
************************************
[+] input: checkEqualsAddress_true_postCode_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = ""; String cityA = "Porto"; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = ""; String cityB = "Porto"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setPostCode(null); addressB.setPostCode(null);   //Assert  "<AssertPlaceHolder>";  }
createAddress(String street, String doorNumber, String postCode, String city, String country) { return new Address(street, doorNumber, postCode, city, country); }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
************************************
[+] input: testApply() { var key = "key1"; var value = "value1"; var startTime = Instant.now();  var expectedAttrs = new Attributes(); expectedAttrs.put(JVM_PROPERTY, key); expectedAttrs.put(JVM_PROPERTY_VALUE, value);  var expectedEvent = new Event(JFR_JVM_INFORMATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var mapper = new JVMSystemPropertyMapper(new AttributeValueSplitter());  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getString(KEY)).thenReturn(key); when(event.getString(VALUE)).thenReturn(value);  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent event) { long timestamp = event.getStartTime().toEpochMilli(); Attributes attr = new Attributes();  if (hasField(event, KEY, SIMPLE_CLASS_NAME)) { attr.put(JVM_PROPERTY, event.getString(KEY)); } if (hasField(event, VALUE, SIMPLE_CLASS_NAME)) { valueSplitter.maybeSplit(attr, JVM_PROPERTY_VALUE, event.getString(VALUE)); } return Collections.singletonList(new Event(JFR_JVM_INFORMATION, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ contract.getRules().add(rule);  /* ACT */ final var resources = linker.getInternal(contract);  /* ASSERT */ final var expected = List.of(rule); "<AssertPlaceHolder>"; }
getInternal(final Contract owner) { return owner.getRules(); }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
************************************
[+] input: removeTaskNotifyConfigById() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigById(persistedConfig.getId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigById(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
removeTaskNotifyConfigById(Long taskNotifyConfigId) { Preconditions.checkNotNull(taskNotifyConfigId, "id of target config record to be removed should not be null"); return taskNotifyConfigDao.removeById(taskNotifyConfigId); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
************************************
[+] input: Exception {  final String expected = "üöä ÜÖÄ ß";  final File file = new File(BASE_DIR, "file_with_german_umlaut.txt");  FileUtil.writeString(file, expected, StandardCharsets.UTF_8);  final String actual = PathUtil.readString(file.toPath());  // asserts "<AssertPlaceHolder>"; }
readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance IOUtil.copy(reader, writer); return writer.toString(); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamRolePolicyAttachment.cmd")); String actual = exportIamRolePolicyAttachments.getTFImport(getAwsRolePolicyAttachments()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRolePolicyAttachment> awsRolePolicyAttachments) { return TFImport.builder() .importLines(awsRolePolicyAttachments.stream() .map(awsRolePolicyAttachment -> TFImportLine.builder() .address(awsRolePolicyAttachment.getTerraformAddress()) .id(awsRolePolicyAttachment.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG WHERE ID = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new TextSqlNode("WHERE ID = ?")); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
getSql(){ DynamicContext context = new DynamicContext(configuration, null); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class<?> parameterType = Object.class; SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); BoundSql boundSql = sqlSource.getBoundSql(null); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql.getSql(); }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[Si]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: getConfigUrlSplunkRealm() { ConfigProperties config = mock(ConfigProperties.class); when(config.getString(Configuration.CONFIG_KEY_OTEL_OTLP_URL, null)) .thenReturn("https://ingest.us0.signalfx.com"); when(config.getString(Configuration.CONFIG_KEY_INGEST_URL, null)).thenReturn(null); String result = Configuration.getConfigUrl(config); "<AssertPlaceHolder>"; }
getConfigUrl(ConfigProperties config) { String ingestUrl = config.getString(CONFIG_KEY_OTEL_OTLP_URL, null); if (ingestUrl != null) { if (ingestUrl.startsWith("https://ingest.") && ingestUrl.endsWith(".signalfx.com") && config.getString(CONFIG_KEY_INGEST_URL) == null) { logger.log( WARNING, "Profiling data can not be sent to {0}, using {1} instead. " + "You can override it by setting splunk.profiler.logs-endpoint", new Object[] {ingestUrl, getDefaultLogsEndpoint(config)}); return null; } if ("http/protobuf".equals(getOtlpProtocol(config))) { if (!ingestUrl.endsWith("/")) { ingestUrl += "/"; } ingestUrl += "v1/logs"; } } return config.getString(CONFIG_KEY_INGEST_URL, ingestUrl); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: isJoinable() { study.setPublished(true); study.setRecruiting(true);  "<AssertPlaceHolder>"; }
isJoinable(UserAccount userAccount) { Account account = userAccount.getAccount(); return this.isPublished() && this.isRecruiting() && !this.members.contains(account) && !this.managers.contains(account);  }
[*] target: assertTrue(study.isJoinable(userAccount))
[-] pred: org. junit. Assert. assertTrue ( study. isJoinable ( userAccount ) )
************************************
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.Iface.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());  Demo.echoString_result methodResult = new Demo.echoString_result();  methodResult.success = "Hello, World!";  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.Iface.class.getName()); // path protocol.writeString(Demo.Iface.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); methodResult.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  byte[] buf = new byte[4 + bos.size()]; System.arraycopy(bos.toByteArray(), 0, buf, 4, bos.size());  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(buf);  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertEquals(request.getId(), response.getId());  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.getValue() instanceof String);  Assertions.assertEquals(methodResult.success, result.getValue());  }
decode(Channel channel, ChannelBuffer buffer) throws IOException {  int available = buffer.readableBytes();  if (available < MESSAGE_SHORTEST_LENGTH) {  return DecodeResult.NEED_MORE_INPUT;  } else {  TIOStreamTransport transport = new TIOStreamTransport(new ChannelBufferInputStream(buffer));  TBinaryProtocol protocol = new TBinaryProtocol(transport);  short magic; int messageLength;  try { //                protocol.readI32(); // skip the first message length byte[] bytes = new byte[4]; transport.read(bytes, 0, 4); magic = protocol.readI16(); messageLength = protocol.readI32();  } catch (TException e) { throw new IOException(e.getMessage(), e); }  if (MAGIC != magic) { throw new IOException("Unknown magic code " + magic); }  if (available < messageLength) { return DecodeResult.NEED_MORE_INPUT; }  return decode(protocol);  }  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
************************************
[+] input: test1() { Solution solution = new Solution(); String[] words = {"What", "must", "be", "acknowledgment", "shall", "be"}; List<String> expected = List.of( "What   must   be", "acknowledgment  ", "shall be        " ); List<String> actual = solution.fullJustify(words, 16); "<AssertPlaceHolder>"; }
fullJustify(String[] words, int maxWidth) { LinkedList<String> ans = new LinkedList<>(); int n = words.length; int start = 0; int currentLength = 0; int i = 0; char[] chars = new char[maxWidth]; while (true) { while (i < n && currentLength + words[i].length() + i - start <= maxWidth) currentLength += words[i++].length(); if (i != n) { int curPos = 0; for (char c : words[start].toCharArray()) { chars[curPos++] = c; } if (i - start == 1) { Arrays.fill(chars, curPos, maxWidth, ' '); } else { int spaces = maxWidth - currentLength; for (int j = start + 1; j < i; j++) { int spaceN = spaces / (i - j); if (spaces % (i - j) != 0) spaceN++; spaces -= spaceN; Arrays.fill(chars, curPos, curPos + spaceN, ' '); curPos += spaceN; for (char c : words[j].toCharArray()) { chars[curPos++] = c; } } } ans.add(new String(chars)); currentLength = 0; start = i; } else { int curPos = 0; for (char c : words[start].toCharArray()) { chars[curPos++] = c; } for (int j = start + 1; j < i; j++) { chars[curPos++] = ' '; for (char c : words[j].toCharArray()) { chars[curPos++] = c; } } Arrays.fill(chars, curPos, maxWidth, ' '); ans.add(new String(chars)); break; } } return ans; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testNotifyoverrideUrls_beforeInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory(); List<URL> overrideUrls = new ArrayList<URL>(); overrideUrls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5")); registryDirectory.notify(overrideUrls); //The registry is initially pushed to override only, and the dirctory state should be false because there is no invoker. Assertions.assertFalse(registryDirectory.isAvailable());  //After pushing two provider, the directory state is restored to true List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("timeout", "1000")); serviceUrls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10"));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
isAvailable() { if (isDestroyed()) { return false; } Map<String, Invoker<T>> localUrlInvokerMap = urlInvokerMap; if (localUrlInvokerMap != null && localUrlInvokerMap.size() > 0) { for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) { if (invoker.isAvailable()) { return true; } } } return false; }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
************************************
[+] input: InterruptedException { LockCleanerService mockCleaner = ctrl.createMock(LockCleanerService.class); ctrl.replay(); Locker altLocker = getDefaultBuilder().customCleaner(mockCleaner).build(); ctrl.verify(); ctrl.reset();  final ConsistentKeyLockStatus expired = makeStatusNow(); expect(lockState.getLocksForTx(defaultTx)).andReturn(ImmutableMap.of(defaultLockID, expired)); // pretend a huge multiple of the expiration time has passed currentTimeNS = currentTimeNS.plus(100, ChronoUnit.DAYS);  // Checker should compare the fake lock's timestamp to the current time expect(times.sleepPast(expired.getWriteTimestamp().plus(defaultWaitNS))).andReturn(currentTimeNS);  // Checker must slice the store; we return the single expired lock column recordLockGetSliceAndReturnSingleEntry( StaticArrayEntry.of( codec.toLockCol(expired.getWriteTimestamp(), defaultLockRid, times), defaultLockVal));  // Checker must attempt to cleanup expired lock mockCleaner.clean(eq(defaultLockID), eq(currentTimeNS.minus(defaultExpireNS)), eq(defaultTx)); expectLastCall().once();  ctrl.replay(); TemporaryLockingException ple = null; try { altLocker.checkLocks(defaultTx); } catch (TemporaryLockingException e) { ple = e; } "<AssertPlaceHolder>"; }
getWriteTimestamp() { return writeTimestamp; }
[*] target: assertNotNull(ple)
[-] pred: org. junit. Assert. assertNotNull ( ple )
************************************
************************************
[+] input: Exception { var replayMarkerAwareTrackingEventProcessor = spy(processor); when(replayMarkerAwareTrackingEventProcessor.processingStatus()).thenReturn(Map.of( 0, mock(EventTrackerStatus.class), 1, mock(EventTrackerStatus.class))); CountDownLatch replayLatch = new CountDownLatch(1); Consumer<ReplayableEventProcessor> listener = p -> replayLatch.countDown(); replayMarkerAwareTrackingEventProcessor.registerReplayCompletionListener(listener); replayMarkerAwareTrackingEventProcessor.startReplay(startPosition, replayMarkerEvent); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); verify(replayMarkerAwareTrackingEventProcessor).shutDown(); verify(replayMarkerAwareTrackingEventProcessor).resetTokens(startPosition); verify(replayMarkerAwareTrackingEventProcessor).start(); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying());  // Feed the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // one is not enough since we have two segments assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); assertEquals(1, replayLatch.getCount());  // Feed again the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // Now the replay be completed replayLatch.await(1, TimeUnit.SECONDS); assertEquals(0, replayLatch.getCount()); "<AssertPlaceHolder>"; }
isReplaying() { return targetMarkerEventHolder.get() != null; }
[*] target: assertFalse(replayMarkerAwareTrackingEventProcessor.isReplaying())
[-] pred: org. junit. Assert. assertFalse ( replayMarkerAwareTrackingEventProcessor. isReplaying() )
************************************
************************************
[+] input: nullOrFalseTest_2() { var actual = Utils.nullOrFalse(false); Assertions."<AssertPlaceHolder>"; }
nullOrFalse(Boolean value) { return Objects.isNull(value) || value == false; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: IOException { final File file = new File(EXISTS);  final StringBuilder sb_tailer = new StringBuilder();  final Tailer tailer = new Tailer(file); tailer.addEventListener((src, str) -> sb_tailer.append(str)); tailer.start();  // give the Tailer time to work Thread.sleep(1000L);  tailer.stop();  final String actual = sb_tailer.toString().replace("\r\n", "\n"); final String expected = Files.readString(file.toPath()) .replace("\r\n", "\n") .substring(0, actual.length());  // compare whatever the Tailer had time to read "<AssertPlaceHolder>"; }
stop() { tailing = false; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testParseWithPrefix() { final String xml = "<h:AppHdr xmlns:h="urn:swift:xsd:$ahV10">\n" + "    <h:From>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=abcdchzz,o=swift</h:Id>\n" + "    </h:From>\n" + "    <h:To>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=dcbadeff,o=swift</h:Id>\n" + "    </h:To>\n" + "    <h:MsgRef>11308917</h:MsgRef>\n" + "    <h:CrDate>2013-12-23T15:50:00</h:CrDate>\n" + "</h:AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: IOException { //prepare File operator = new File("/tmp/testOperator.jar"); operator.createNewFile(); Long operatorId = IdGenerator.getInstance().nextId();  localStorageManager.uploadOperator(operatorId, "/tmp/testOperator.jar");  //verify File updatedOperator = new File("/tmp/operators/" + operatorId + "/testOperator.jar"); "<AssertPlaceHolder>"; operator.delete(); }
uploadOperator(Long operatorId, String sourceName) { File source = new File(sourceName); String directName = operatorDir + "/" + operatorId; String operatorName = sourceName.substring(sourceName.lastIndexOf("/") + 1); File direct = new File(directName); try { if (!direct.exists()) { direct.mkdirs(); } File target = new File(directName + "/" + operatorName); Files.copy(source.toPath(), target.toPath()); } catch (IOException e) { logger.error("copy operator to operator lib failed", e); } }
[*] target: assertTrue(updatedOperator.exists())
[-] pred: org. junit. Assert. assertTrue ( updatedOperator. exists ( ) )
************************************
************************************
[+] input: test2019() { var firstMat = new MatOfPoint(); // contour 0 and 1 data from kCargoStraightDark72in_HighRes firstMat.fromList( List.of( new Point(1328, 976), new Point(1272, 985), new Point(1230, 832), new Point(1326, 948), new Point(1328, 971)));  var secondMat = new MatOfPoint(); secondMat.fromList( List.of( new Point(956, 832), new Point(882, 978), new Point(927, 810), new Point(954, 821), new Point(956, 825))); var firstContour = new Contour(firstMat); var secondContour = new Contour(secondMat); boolean result = firstContour.isIntersecting(secondContour, ContourIntersectionDirection.Up); "<AssertPlaceHolder>"; }
isIntersecting( Contour secondContour, ContourIntersectionDirection intersectionDirection) { boolean isIntersecting = false;  if (intersectionDirection == ContourIntersectionDirection.None) { isIntersecting = true; } else { try { MatOfPoint2f intersectMatA = new MatOfPoint2f(); MatOfPoint2f intersectMatB = new MatOfPoint2f();  mat.convertTo(intersectMatA, CvType.CV_32F); secondContour.mat.convertTo(intersectMatB, CvType.CV_32F);  RotatedRect a = Imgproc.fitEllipse(intersectMatA); RotatedRect b = Imgproc.fitEllipse(intersectMatB); double mA = MathUtils.toSlope(a.angle); double mB = MathUtils.toSlope(b.angle); double x0A = a.center.x; double y0A = a.center.y; double x0B = b.center.x; double y0B = b.center.y; double intersectionX = ((mA * x0A) - y0A - (mB * x0B) + y0B) / (mA - mB); double intersectionY = (mA * (intersectionX - x0A)) + y0A; double massX = (x0A + x0B) / 2; double massY = (y0A + y0B) / 2; switch (intersectionDirection) { case Up: if (intersectionY < massY) isIntersecting = true; break; case Down: if (intersectionY > massY) isIntersecting = true; break; case Left: if (intersectionX < massX) isIntersecting = true; break; case Right: if (intersectionX > massX) isIntersecting = true; break; } intersectMatA.release(); intersectMatB.release(); } catch (Exception e) { // defaults to false } }  return isIntersecting; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testWrite() { Document d = new JDocument();  d.setString("$.id", "id"); d.setString("$.info.iid", "iid");  d.setString("$.members[0].first_name", "Deepak"); d.setString("$.members[%].first_name", "Deepak", "0"); d.setString("$.members[sex=male].first_name", "Deepak"); d.setString("$.members[sex=male].last_name", "Arora");  d.setString("$.members[sex=male].phones[type=home].type", "home"); d.setString("$.members[sex=%].phones[type=%].type", "home", "male", "home");  d.setString("$.members[0].phones[type=home].number", "9999999999"); d.setString("$.info.iid", "12345678"); d.setString("$.addresses[0].line_1", "line 1"); d.setString("$.addresses[1].line_1", "line 1"); d.setString("$.addresses[2].line_1", "line 1"); d.setInteger("$.members[0].index", 0); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=home].is_primary", true); d.setString("$.members[sex=female].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_5_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_17", e.getErrorCode()); }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { Document d = getBaseDocument("/jdocs/sample_11.json"); Document primary = new JDocument(); primary.setContent(d, "$.members[0]", "$.members[0]"); primary.setContent(d, "$.members[0]", "$.members[1]"); primary.setContent(d, "$.members[0]", "$.members[2]"); String expected = getCompressedJson("/jdocs/sample_11_expected.json"); String actual = primary.getJson(); "<AssertPlaceHolder>"; }
getJson();
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldReturnTrue_whenPassed1() { boolean result = powerOfTwo.isPowerOfTwo(1);  "<AssertPlaceHolder>"; }
isPowerOfTwo(int i) { return naive(i); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: buildConnectorRestrictedUsage() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.CONNECTOR_RESTRICTED_USAGE, rule, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: getConfig() { context.create() .resource("/content/some/component", "test", "foobar"); Config config = condition.getConfig(context.currentResource("/content/some/component")); "<AssertPlaceHolder>"; assertEquals("foobar", config.get("test")); }
getConfig(@NotNull Resource dialogResource) { return new Config(dialogResource); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: testF3() { for (int i = 1; i < MAX_VAl; i++) { int expected = Solution.f1(i); int actual = Solution.f3(i); "<AssertPlaceHolder>"; } }
f3(int n) { return 1 + (int) Math.log10(n); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldGetEvenNull() { Once<Integer> once = new Once<>();  once.set(null);  Assertions."<AssertPlaceHolder>"; }
get() { if (!this.set) throw new IllegalStateException("Illegal attempt to access Once value."); return this.value; }
[*] target: assertNull(once.get())
[-] pred: org. junit. Assert. assertNull ( once. get() )
************************************
************************************
[+] input: StructureBuildingException { //standard unlocanted substitution BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element amino = new TokenEl(GROUP_EL); Fragment aminoFrag = state.fragManager.buildSMILES("-N"); amino.setFrag(aminoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(amino);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(aminoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, interFragmentBonds.iterator().next().getOtherAtom(aminoFrag.getFirstAtom()).getElement()); }
resolveRootOrSubstituentUnLocanted(BuildState state, Element subOrRoot) throws StructureBuildingException {  boolean foundSomethingToSubstitute = potentiallyCanSubstitute(subOrRoot);  resolveUnLocantedFeatures(state, subOrRoot);//e.g. unsaturators, hydro groups and heteroatom replacement  if (foundSomethingToSubstitute){ performUnLocantedSubstitutiveOperations(state, subOrRoot);//e.g. tetramethylfuran } }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
************************************
[+] input: testGetFile() { final File file = new File(EXISTS); final Tailer tailer = new Tailer(file); "<AssertPlaceHolder>"; }
getFile() { return file; }
[*] target: assertEquals(file, tailer.getFile())
[-] pred: org. junit. Assert. assertEquals ( file, tailer. getFile() )
************************************
************************************
[+] input: toModel_withRequestedResources_returnRepresentationViewWithRequestsLink() { /* ARRANGE */ final var representation = getRepresentationWithRequestedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getRepresentationRequestedResourcesLink(representation.getId()), requestsLink.get().getHref()); }
toModel(final Representation representation) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(representation, RepresentationView.class); view.add(getSelfLink(representation.getId()));  final var artifactsLink = linkTo(methodOn(RepresentationsToArtifactsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.ARTIFACTS); view.add(artifactsLink);  final var resourceType = representation.getResources(); Link resourceLinker; if (resourceType.isEmpty()) { // No elements found, default to offered resources resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else { // Construct the link for the right resource type. if (resourceType.get(0) instanceof OfferedResource) { resourceLinker = linkTo(methodOn(RepresentationsToOfferedResourcesController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.OFFERS); } else if (resourceType.get(0) instanceof RequestedResource) { resourceLinker = linkTo(methodOn(RepresentationsToRequestsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.REQUESTS); } else { throw new UnreachableLineException(ErrorMessage.UNKNOWN_TYPE); } }  view.add(resourceLinker);  final var subscriptionLink = linkTo(methodOn(RepresentationsToSubscriptionsController.class) .getResource(representation.getId(), null, null)) .withRel(BaseType.SUBSCRIPTIONS); view.add(subscriptionLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: FlashForgePrinterException { AdventurerClient client = new AdventurerClient(printerAddress); boolean replay = client.setLed(false); System.out.println(replay); client.close(); "<AssertPlaceHolder>"; }
setLed(boolean on) throws FlashForgePrinterException { String replay = sendCommand(on ? CMD_LED_ON : CMD_LED_OFF); log.info(replay); return replay.contentEquals("CMD M146 Received.\nok"); }
[*] target: assertTrue(replay)
[-] pred: org. junit. Assert. assertTrue ( replay )
************************************
************************************
[+] input: testConsumeDelete() { stubFor( delete(urlMatching("/inlong/manager/api/consume/delete/1.*")) .willReturn( okJson(JsonUtils.toJsonString(Response.success(true)))));  InlongConsumeRequest request = new ConsumePulsarRequest(); request.setId(1); request.setMqType(MQType.PULSAR); Boolean delete = consumeClient.delete(1); Assertions."<AssertPlaceHolder>"; }
delete(Integer id) { Preconditions.expectNotNull(id, "inlong consume id cannot be null");  Response<Boolean> response = ClientUtils.executeHttpCall(inlongConsumeApi.delete(id)); ClientUtils.assertRespSuccess(response); return response.getData(); }
[*] target: assertTrue(delete)
[-] pred: org. junit. Assert. assertTrue ( delete )
************************************
************************************
[+] input: testConvert_with_null_input() { final UUIDConverter uuidConverter = new UUIDConverter();  final UUID actual = uuidConverter.convert(null);  //asserts "<AssertPlaceHolder>"; }
convert(final Object value) { if (value == null) { return null; }  if (value instanceof UUID) { return (UUID) value; }  if (value instanceof CharSequence) { return UUID.fromString(value.toString()); }  Class valueClass = value.getClass();  if (valueClass.isArray()) { if (valueClass.getComponentType() == byte.class) { return UUID.nameUUIDFromBytes((byte[]) value); } }  throw new TypeConversionException(value); }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: deleteById() { BookDO bookDO = new BookDO(); bookDO.setTitle(title); bookDO.setAuthor(author); bookDO.setImage(image); bookDO.setSummary(summary); bookMapper.insert(bookDO);  bookService.deleteById(bookDO.getId()); BookDO hit = bookService.getById(bookDO.getId()); "<AssertPlaceHolder>"; }
getById(Integer id) { return bookMapper.selectById(id); }
[*] target: assertNull(hit)
[-] pred: org. junit. Assert. assertNull ( hit )
************************************
************************************
[+] input: configRoot_nonFile() {  var configUrl = "test://config_svr/config_dir/sample-config.yaml"; var expectedRoot = URI.create("test://config_svr/config_dir/");  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = manager.configRoot();  "<AssertPlaceHolder>"; }
configRoot() { return rootConfigDir; }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
************************************
[+] input: NoSuchMethodException { // given Method method = MyIf.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
getInterfaceMethodIfPossible(Method method) { if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) { return method; } // 抽象类 + 接口 只会保留一个方法 return INTERFACE_METHOD_CACHE.computeIfAbsent(method, key -> { Class<?> current = key.getDeclaringClass(); while (current != null && current != Object.class) { for (Class<?> ifc : current.getInterfaces()) { try { return ifc.getMethod(key.getName(), key.getParameterTypes()); } catch (NoSuchMethodException ex) { // ignore } } current = current.getSuperclass(); } return key; }); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
************************************
[+] input: JsonProcessingException { wireMockServer.stubFor( get(urlPathEqualTo("/response-entity-list")) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .willReturn( aResponse() .withStatus(400) .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(Collections.singletonList(FIRST_RESPONSE))) ) );  ResponseEntity<List<FirstResponse>> response = exampleClient.responseEntityList().block(); "<AssertPlaceHolder>"; assertEquals(400, response.getStatusCodeValue()); assertNotNull(response.getBody()); assertEquals(1, response.getBody().size()); assertEquals(FIRST_RESPONSE, response.getBody().get(0)); }
responseEntityList();  @RequestMapping( method = RequestMethod.POST, path = "/first", consumes = MediaType.APPLICATION_JSON_VALUE ) Mono<FirstResponse> first(@RequestBody FirstRequest request);  @RequestMapping( method = RequestMethod.GET, path = "/second" ) Mono<SecondResponse> second();  @RequestMapping( method = RequestMethod.GET, path = "/third/{userId}
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: IOException { String data = "\ud83d\udc49"; String result = DOMUtilities.contentToString(data, false); "<AssertPlaceHolder>"; }
contentToString(String s, boolean isXML11) throws IOException {  StringBuilder result = new StringBuilder(s.length());  final int len = s.length(); int i = 0; while (i < len) { int c = s.codePointAt(i); if (!isXML11 && !isXMLCharacter(c) || isXML11 && !isXML11Character(c)) { throw new IOException("Invalid character"); }  switch (c) { case '<': result.append("&lt;"); break; case '>': result.append("&gt;"); break; case '&': result.append("&amp;"); break; case '"': result.append("&quot;"); break; case ''': result.append("&apos;"); break; default: result.appendCodePoint(c); }  i = s.offsetByCodePoints(i, 1); }  return result.toString(); }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
************************************
[+] input: tagbodyNormalReturnTest() { var ref = new Object() { boolean passed = true; }; tagbody((tagbody) -> { ref.passed = true; }); "<AssertPlaceHolder>"; }
tagbody(TagbodyElement... elements) { Tagbody tagbody = new Tagbody(elements); tagbody.accept(tagbody); }
[*] target: assertTrue(ref.passed)
[-] pred: org. junit. Assert. assertTrue ( ref.passed )
************************************
************************************
[+] input: convertSpansToRequest() { SpanData span1 = makeBasicSpan("span-1"); SpanData span2 = makeBasicSpan("span-2"); ImmutableList<SpanData> spans = ImmutableList.of(span1, span2);  ExportTraceServiceRequest actual = testSubject.convertSpansToRequest(spans);  "<AssertPlaceHolder>"; assertEquals("span-1", actual.getResourceSpans(0).getScopeSpans(0).getSpans(0).getName()); assertEquals("span-2", actual.getResourceSpans(0).getScopeSpans(0).getSpans(1).getName()); }
convertSpansToRequest(Collection<SpanData> spans) { List<ResourceSpans> resourceSpansList = Arrays.stream(ResourceSpansMarshaler.create(spans)) .map( resourceSpansMarshaler -> { try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) { resourceSpansMarshaler.writeBinaryTo(baos); return ResourceSpans.parseFrom(baos.toByteArray()); } catch (IOException e) { throw new SerializationException(e); } }) .collect(toList());  return ExportTraceServiceRequest.newBuilder().addAllResourceSpans(resourceSpansList).build(); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldGetAndSetEmail() { var user = new LegacyUser(); var expectedValue = "someValue"; user.setEmail(expectedValue); "<AssertPlaceHolder>"; }
getEmail() { return email; }
[*] target: assertEquals(expectedValue, user.getEmail())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getEmail() )
************************************
************************************
[+] input: testAsync() {  RpcContext rpcContext = RpcContext.getContext(); Assertions.assertFalse(rpcContext.isAsyncStarted());  AsyncContext asyncContext = RpcContext.startAsync(); Assertions.assertTrue(rpcContext.isAsyncStarted());  asyncContext.write(new Object()); Assertions.assertTrue(((AsyncContextImpl) asyncContext).getInternalFuture().isDone());  rpcContext.stopAsync(); Assertions."<AssertPlaceHolder>"; }
isAsyncStarted() { if (this.asyncContext == null) { return false; } return asyncContext.isAsyncStarted(); }
[*] target: assertTrue(rpcContext.isAsyncStarted())
[-] pred: org. junit. Assert. assertTrue ( rpcContext. isAsyncStarted() )
************************************
************************************
[+] input: changeUserPassword() { ChangePasswordDTO dto = new ChangePasswordDTO(); dto.setNewPassword("147258"); dto.setConfirmPassword("147258"); dto.setOldPassword("123456"); UserDO user = userService.changeUserPassword(dto); boolean b = userIdentityService.verifyUsernamePassword(user.getId(), "pedro", "147258"); "<AssertPlaceHolder>"; }
changeUserPassword(ChangePasswordDTO dto) { UserDO user = LocalUser.getLocalUser(); boolean valid = userIdentityService.verifyUsernamePassword(user.getId(), user.getUsername(), dto.getOldPassword()); if (!valid) { throw new ParameterException(10032); } valid = userIdentityService.changePassword(user.getId(), dto.getNewPassword()); if (!valid) { throw new FailedException(10011); } return user; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: should_return_false_if_checkout_time_is_equal_or_before_checkin_time() { SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  boolean result = validator.verify(newPayload, mockValidatorContext); assertFalse(result);  newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME - 1).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
verify(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) { List<CheckIn> checkins = submissionPayload.getCheckInsList(); return checkins.stream() .map(checkin -> verifyTransmissionRiskLevel(checkin, validatorContext) && verifyLocationIdLength(checkin, validatorContext) && verifyStartIntervalNumber(checkin, validatorContext) && verifyEndIntervalNumber(checkin, validatorContext)) .allMatch(checkinValidation -> checkinValidation.equals(Boolean.TRUE)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: create_validInput_returnSubscriptionForRequest() { /* ARRANGE */ Mockito.doReturn(Optional.of(getRequestedResource())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(reqSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
create(final SubscriptionDesc desc) { Utils.requireNonNull(desc, ErrorMessage.DESC_NULL);  final var subscription = persist(getFactory().create(desc)); final var target = subscription.getTarget();  linkSubscriptionToEntityById(target, subscription);  return subscription; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
************************************
[+] input: testNotFoundRegionWikidata() { var db = new NaturalEarthDb(List.of(), List.of(), List.of()); var result = db.getAdmin1ByWikidata("Q2009"); "<AssertPlaceHolder>"; }
getAdmin1ByWikidata(String wikidataId) { return this.admin1sByWikidataId.get(wikidataId); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: IOException { final String expected = "Jodd - The Unbearable Lightness of Java - üäößÜÄÖ";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm());  // Asserts "<AssertPlaceHolder>"; }
downloadString(final String url) throws IOException { try (final InputStream inputStream = new URL(url).openStream()) { return new String(IOUtil.readChars(inputStream)); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: IOException { final String xml = Lib.readResource("pacs.008.001.07.xml"); // System.out.println(xml); assertNotNull(xml); final MxPacs00800107 mx = (MxPacs00800107) new MxReadImpl().read(MxPacs00800107.class, xml, MxPacs00800107._classes); // System.out.println(ToStringBuilder.reflectionToString(mx)); "<AssertPlaceHolder>"; assertNotNull(mx.getFIToFICstmrCdtTrf()); assertNotNull( "123452342", mx.getFIToFICstmrCdtTrf().getCdtTrfTxInf().get(0).getPmtId().getTxId()); // System.out.println(mx); }
read(final Class<? extends AbstractMX> targetClass, final String xml, final Class<?>[] classes) { return parse(targetClass, xml, classes, new MxReadParams()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
************************************
[+] input: should_correctly_set_flag() { OggPage oggPage = OggPage.empty(); oggPage.setFlag(0x00);  oggPage.setContinued(); assertTrue(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setBOS(); assertFalse(oggPage.isContinued()); assertTrue(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setEOS(); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); "<AssertPlaceHolder>"; }
isEOS() { return (this.flag & 0x04) != 0; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EcrRepository.cmd")); String actual = exportEcrRepositories.getTFImport(getRepositories()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSRepository> awsRepositories) { return TFImport.builder() .importLines(awsRepositories.stream() .map(awsRepository -> TFImportLine.builder() .address(awsRepository.getTerraformAddress()) .id(awsRepository.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: edgeCase2_emptyString() { ThreadDumpRegion region = new ThreadDumpRegion("", 0, 0); "<AssertPlaceHolder>"; }
findNextStack() { while (findNextSection()) { if (threadDump.charAt(startIndex) == '"') { return true; } }  return false; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatMinValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(MIN_VALUE));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: JsonProcessingException { setExperianMockResponse(EXPERIAN_ANSWERS_SAMPLE_RESPONSE_REFER);  IdentityVerificationAnswersRequest request = createValidAnswersRequest(); IdentityVerificationAnswersResponse response = _service.submitAnswers(request);  // expect false because experian responded with REFER "<AssertPlaceHolder>"; }
submitAnswers( IdentityVerificationAnswersRequest answersRequest) { try { ObjectNode finalRequestBody = createSubmitAnswersRequestBody( _experianProperties.getCrosscoreSubscriberSubcode(), _experianProperties.getPreciseidUsername(), _experianProperties.getPreciseidPassword(), _experianProperties.getPreciseidTenantId(), _experianProperties.getPreciseidClientReferenceId(), answersRequest); log.info("EXPERIAN_ANSWER_REQUEST_SUBMITTED"); ObjectNode responseEntity = submitExperianRequest(finalRequestBody);  // look for errors in KIQ response ("CrossCore - PreciseId (Option 24).pdf" page 79) int kbaResultCode = findNodeInResponse(responseEntity, KBA_RESULT_CODE_PATH).asInt(); if (kbaResultCode != KBA_SUCCESS_RESULT_CODE) { handleKbaResultCodeFailure(kbaResultCode, responseEntity); }  boolean passed = hasPassed(responseEntity);  // Generate a searchable log message so we can monitor decisions from Experian String requestData = Encode.forJava(_objectMapper.writeValueAsString(answersRequest)); log.info("EXPERIAN_DECISION ({}): {}", passed, requestData);  return new IdentityVerificationAnswersResponse(passed); } catch (RestClientException | JsonProcessingException e) { throw new ExperianSubmitAnswersException("Answers could not be validated by Experian", e); } }
[*] target: assertFalse(response.isPassed())
[-] pred: org. junit. Assert. assertFalse ( response. isPassed ( ) )
************************************
************************************
[+] input: EncodeException {  byte[] bs = ProtoBuf.toByteArray(null);  "<AssertPlaceHolder>"; }
toByteArray(Object obj) { if (obj == null) { return null; } ProtoBufEncoder codec = REGISTER.getEncoder(obj.getClass()); ProtoBufWriter writer = THREAD_WRITER.get(); writer.reset(); BufOut out = writer.getBufOut(); out.reset(); byte[] bs; try { codec.encode(writer, obj); int len = writer.size(); bs = new byte[len]; System.arraycopy(out.getWriteBuf().bs, 0, bs, 0, len); return bs; } catch (EncodeException e) { //throw e; } finally { THREAD_WRITER.set(writer); } return null; }
[*] target: assertNull(bs)
[-] pred: org. junit. Assert. assertNull ( bs )
************************************
************************************
[+] input: compareTo_zero_when_equal() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act int result = vec3c1.compareTo(vec3c2);  // Assert "<AssertPlaceHolder>"; }
compareTo(Vec3Comparable other) { return this.yCoord == other.yCoord ? (this.zCoord == other.zCoord ? (int) (this.xCoord - other.xCoord) : (int) (this.zCoord - other.zCoord)) : (int) (this.yCoord - other.yCoord); }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: getBookByKeyword() { BookDO bookDO = new BookDO(); bookDO.setTitle(title); bookDO.setAuthor(author); bookDO.setImage(image); bookDO.setSummary(summary); bookMapper.insert(bookDO);  List<BookDO> books = bookService.getBookByKeyword("%千里%"); boolean anyMatch = books.stream().anyMatch(bo -> bo.getTitle().equals(title) && bo.getAuthor().equals(author)); "<AssertPlaceHolder>"; }
getBookByKeyword(String q) { return bookMapper.selectByTitleLikeKeyword(q); }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
************************************
[+] input: testFromJdbcUrl_InvalidUrl_ReturnsNull() { // Prepare test data String connectionUrl = "jdbc:oracle://localhost:1521/mydatabase";  // Test the fromJdbcUrl method DatabaseType result = DatabaseType.fromJdbcUrl(connectionUrl);  // Verify the result "<AssertPlaceHolder>"; }
fromJdbcUrl(String connectionUrl) { final int STRING_SPLIT_LIMIT = 3; final String JDBC_URL_DELIMITER = ":";  final String[] urlSegments = connectionUrl.split(JDBC_URL_DELIMITER, STRING_SPLIT_LIMIT);  DatabaseType type = null;  if (urlSegments.length == STRING_SPLIT_LIMIT) { String matchedDatabaseType = urlSegments[STRING_SPLIT_LIMIT - 2]; log.info("matchedType = " + matchedDatabaseType);  type = EnumSet.allOf(DatabaseType.class).stream() .filter(t -> t.name().toLowerCase().equals(matchedDatabaseType)) .findFirst() .orElse(null); }  log.info("DATABASE TYPE = " + type); return type; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
hasList() { return false; }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckDoubleOne() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(1.0d));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: testAddExtend() { Proto proto = new Proto();  proto.addExtend(null); "<AssertPlaceHolder>"; }
getProtoExtends() { if (protoExtends == null) { protoExtends = new ArrayList<>(); } return protoExtends; }
[*] target: assertEquals(0, proto.getProtoExtends().size())
[-] pred: org. junit. Assert. assertEquals ( 0, proto. getProtoExtends(). size ( ) )
************************************
************************************
[+] input: testAdler32IsCompatibleWithJavaUtilZipAdler32() { byte[] buf1 = randombuf(1024); java.util.zip.Adler32 juza = new java.util.zip.Adler32(); juza.update(buf1, 0, buf1.length); long expected = juza.getValue(); long actual = getValue(Arrays.asList(buf1));  "<AssertPlaceHolder>"; }
getValue() { return ((s2 << 16) | s1); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testFindByBatchTagIsAndUploader_CountryIsNot() { List<DiagnosisKeyEntity> result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_B); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_A, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.SECOND_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_B); Assertions."<AssertPlaceHolder>"; }
findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(String batchTag, String country);
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
************************************
[+] input: testAdler32CanCombineValues() {  byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  long adler1 = getValue(Arrays.asList(buf1)); long adler2 = getValue(Arrays.asList(buf2)); long expected = getValue(Arrays.asList(buf1, buf2));  long actual = Adler32.combine(adler1, adler2, buf2.length);  "<AssertPlaceHolder>"; }
combine(long adler1, long adler2, long len2) { long BASEL = (long) BASE; long sum1; long sum2; long rem; // unsigned int  rem = len2 % BASEL; sum1 = adler1 & 0xffffL; sum2 = rem * sum1; sum2 %= BASEL; // MOD(sum2); sum1 += (adler2 & 0xffffL) + BASEL - 1; sum2 += ((adler1 >> 16) & 0xffffL) + ((adler2 >> 16) & 0xffffL) + BASEL - rem; if (sum1 >= BASEL) sum1 -= BASEL; if (sum1 >= BASEL) sum1 -= BASEL; if (sum2 >= (BASEL << 1)) sum2 -= (BASEL << 1); if (sum2 >= BASEL) sum2 -= BASEL; return sum1 | (sum2 << 16); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: FlashForgePrinterException { AdventurerClient client = new AdventurerClient(printerAddress); boolean replay = client.stopPrinting(); client.close(); "<AssertPlaceHolder>"; }
stopPrinting() throws FlashForgePrinterException { String replay = sendCommand(CMD_PRINT_STOP); log.info(replay); return replay.trim().contentEquals("CMD M26 Received.\nok"); }
[*] target: assertTrue(replay)
[-] pred: org. junit. Assert. assertTrue ( replay )
************************************
************************************
[+] input: confirmEmailWrongToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "wrong-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
confirmEmail(String userId, String emailConfirmToken) { final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId); Optional<SecurityToken> emailToken = userWithToken .filter(user -> !user.isEmailConfirmed()) .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM) .map(token -> { confirmEmail(user); return token; }) .map(securityTokenService::useToken) .orElse(null)); return emailToken.map(token -> true).orElse(false); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
************************************
[+] input: finds_correct_file_suffix() { String[] suffixes = {".cbl", ".cob", ".txt", ".java"}; List<String> suffixList = Arrays.asList(suffixes); String fullPath = "fake\\fake\\file.txt"; String pathWithNoSuffix = "fake\\fake\\file"; MockedStatic<Files> mockedFiles = Mockito.mockStatic(Files.class); mockedFiles.when(() -> Files.isRegularFile(Paths.get(fullPath))) .thenReturn(true); String appended = PathHelper.appendMatchingFileSuffix(pathWithNoSuffix, suffixList);  mockedFiles.close();  "<AssertPlaceHolder>"; }
appendMatchingFileSuffix(String filePath, List<String> applicationSuffixes){ for (String suffix : applicationSuffixes) { Log.debug("Initializer looking for source file <" + filePath + suffix + ">"); if (Files.isRegularFile(Paths.get(filePath + suffix))) { filePath += suffix; Log.debug("Initializer recognized this file as a regular file: <" + filePath + ">"); break; } } return filePath; }
[*] target: assertEquals(fullPath, appended)
[-] pred: org. junit. Assert. assertEquals ( fullPath, appended )
************************************
************************************
[+] input: testEnforced03() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = Long.valueOf("10"); String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
enforced(final AwsServiceCache awsservice, final String siteId, final String value, final Object... objs) {  boolean enforced = false; Long contentLength = (Long) objs[0]; Long maxContentLength = getMaxContentLength(value);  if (maxContentLength != null) { enforced = (contentLength == null || contentLength.longValue() == 0) || (contentLength.longValue() > maxContentLength.longValue()); }  return enforced; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: should_serialize_object_and_deserialize_from_bytes() { JacksonSerializer jacksonSerializer = new JacksonSerializer(); SerializeObject serializeObject = new SerializeObject("java", "Java"); byte[] bytes = jacksonSerializer.serialize(serializeObject); assertNotEquals(bytes.length, 0); SerializeObject deserializeObject = jacksonSerializer.deserialize(bytes, SerializeObject.class); "<AssertPlaceHolder>"; }
deserialize(byte[] bytes, Class<T> clazz) { T object = null; try { object = objectMapper.readValue(bytes, clazz); } catch (IOException e) { e.printStackTrace(); } return object; }
[*] target: assertEquals(serializeObject, deserializeObject)
[-] pred: org. junit. Assert. assertEquals ( serializeObject, deserializeObject )
************************************
************************************
[+] input: testEmailAddress() { RFC2822AddressParser.ParsedAddress address = new RFC2822AddressParser().parse("igor@jodd.org");  assertEquals(null, address.getPersonalName()); assertEquals("igor", address.getLocalPart()); assertEquals("jodd.org", address.getDomain()); assertTrue(address.isValid());  address = new RFC2822AddressParser().parse("Vladimir <djs@gmail.com>");  assertEquals("Vladimir", address.getPersonalName()); assertEquals("djs", address.getLocalPart()); assertEquals("gmail.com", address.getDomain());  "<AssertPlaceHolder>"; }
isValid() { return isValid; }
[*] target: assertTrue(address.isValid())
[-] pred: org. junit. Assert. assertTrue ( address. isValid() )
************************************
************************************
[+] input: testDoVolatilityAssert_withExpectation() { FallAssertion fallAssertion = MockFallAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
doVolatilityAssert(MetricsCollectedResult<String> currentValue, MetricsCollectedResult<String> benchmarkValue) { double expected = Double.parseDouble(getExpectedValue()); double volatility = calculateVolatility(currentValue, benchmarkValue); return volatility <= 0 && Math.abs(volatility) <= expected; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[Li+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(1, atomList.get(0).getCharge()); assertEquals(0, atomList.get(0).getProtonsExplicitlyAddedOrRemoved()); assertEquals(0, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: IOException { // given File fileToUpload = new File("src/test/resources/testFileToUpload.txt"); String googleDriveRootFolderId = "parentFolderId"; GoogleDriveClient googleService = new GoogleDriveClient(googleDriveService, googleDriveRootFolderId);  com.google.api.services.drive.model.File fileMetadata = new com.google.api.services.drive.model.File(); fileMetadata.setName("testFileToUpload.txt"); fileMetadata.setParents(Collections.singletonList("parentFolderId"));  when(googleDriveService.files().create(any(), any())).thenThrow(IOException.class); clearInvocations(googleDriveService);  // when boolean result = googleService.upload(fileToUpload);  // then "<AssertPlaceHolder>"; verify(googleDriveService).files(); verify(googleDriveService.files()).create(eq(fileMetadata), any(FileContent.class)); }
upload(java.io.File fileToUpload) {  // create a file /* Service accounts also have their own Google Drive space. If we would create a new folder or file, it would be created in that space. But the problem is that the drive space won't be accessible from a GUI since the "real" user (who created the service account) doesn't have access to the drive space of the service account and there is no way to login with a service account to access the GUI. So the only way to see the files is through API calls. */  log.info("Google Drive: uploading file '{}' ...", fileToUpload.getName()); if (!(fileToUpload.exists() && fileToUpload.isFile())) { log.error("Google Drive: could not find {} in project root directory", fileToUpload.getName()); return false; }  FileContent notionExportFileContent = new FileContent("application/zip", fileToUpload); File fileMetadata = new File(); fileMetadata.setName(fileToUpload.getName()); fileMetadata.setParents(Collections.singletonList(googleDriveRootFolderId)); try { driveService.files().create(fileMetadata, notionExportFileContent) .setFields("id, parents") .execute(); } catch (IOException e) { log.warn("Google Drive: IOException ", e); return false; } log.info("Google Drive: successfully uploaded '{}'", fileToUpload.getName()); return true; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: verifyEquals_personNull() { //Arrange  //Person A String nameAnaA = "Ana"; LocalDate birthdateAnaA = LocalDate.of(1985, 8, 19); String emailAnaA = "ana@gmail.com"; Ledger ledgerAna = Ledger.createLedger(); LedgerID ledgerID_Ana = ledgerAna.getLedgerID(); String birthplaceAnaA = "Cuba";  //Person Mother String nameMother = "Joana"; LocalDate birthdateMother = LocalDate.of(1987, 01, 11); String emailMother = "joana@gmail.com"; Ledger ledgerMother = Ledger.createLedger(); LedgerID ledgerID_Mother = ledgerMother.getLedgerID();  //Person Father String nameFather = "João"; LocalDate birthdateFather = LocalDate.of(1987, 01, 11); String emailFather = "joao@gmail.com"; Ledger ledgerFather = Ledger.createLedger(); LedgerID ledgerID_Father = ledgerFather.getLedgerID();  //Birthplace String birthplace = "Braga";  //Address String street = "Rua do Carmo"; String number = "4"; String zipCode = "2562"; String city = "Porto"; String country = "Portugal"; Address address = Address.createAddress(street, number, zipCode, city, country);   Person personMother = Person.createPersonWithoutParents(emailMother, nameMother, birthdateMother, birthplace, address, ledgerID_Mother); Person personFather = Person.createPersonWithoutParents(emailFather, nameFather, birthdateFather, birthplace, address, ledgerID_Father);  //Act Person personA = Person.createPersonWithParents(emailAnaA, nameAnaA, birthdateAnaA, personMother.getPersonID(), personFather.getPersonID(), birthplaceAnaA, address, ledgerID_Ana); Person personB = null;  boolean result = personA.equals(personB);  //Assert "<AssertPlaceHolder>"; }
equals(Object o) { if (o == null || getClass() != o.getClass()) { return false; } if (this == o) { return true; } else { Person person2 = (Person) o;  if (!this.personID.equals(person2.personID)) { return false; } return true; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: putMoneyAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
getCurrency() { return currency; }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
************************************
[+] input: testGetDestinationDefault() { String expected = ""; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getDestination() { return getOrDefault(Option.DESTINATION); }
[*] target: assertEquals(expected, opts.getDestination())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDestination() )
************************************
************************************
[+] input: test1() { int[] nums = {1, 5, 1, 1, 6, 4}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
countMap(String word) { return word.chars().boxed() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) .values() .stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; }
execute(AtomicReference inputHolder) throws Throwable{ if (this.rolledBack || this.executed) { logger.info("Stage {} is already executed ({}) or rolled back ({}) execution forward is not allowed", this.executed, this.rolledBack); return null; } this.inputHolder = inputHolder; boolean executed = false; AtomicReference result = null; for (int tried = 0; ; ) { try { if (Objects.nonNull(this.inputHolder)) { Object input = inputHolder.get(); if (Objects.nonNull(this.onExecFunc)) { Object nextInput = this.onExecFunc.apply(input); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecConsumer)){ this.onExecConsumer.accept(input); result = null; executed = true; } } else { if (Objects.nonNull(this.onExecSupplier)) { Object nextInput = this.onExecSupplier.get(); result = new AtomicReference(nextInput); executed = true; } else if (Objects.nonNull(this.onExecAction)) { this.onExecAction.run(); result = null; executed = true; } } break; } catch (Throwable t) { if (this.maxExecRetry <= ++tried) { logger.warn("Stage {} is failed to execute", this.name, t); throw t; } logger.info("Stage {} is attempted to execute, but got an error. tried: {}, maxRetry: {}", this.name, tried, this.maxExecRetry, t); } } this.executed = executed; if (!this.executed) { if (this.throwExceptionIfNotExecuted) { throw new IllegalStateException("Stage " + this.name + " was not executed"); } logger.warn("Stage {} did not executed action", this.name); return null; }  return result; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testGetRowCount() { testMatrixFlavors(new Matrix(2, 3), m -> { "<AssertPlaceHolder>"; }); }
getRowCount() { return this.rowCount; }
[*] target: assertEquals(2, m.getRowCount())
[-] pred: org. junit. Assert. assertEquals ( 2, m. getRowCount() )
************************************
************************************
[+] input: updateByteSize_setByteFromNullToEmpty_willNotUpdate() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc());  /* ACT */ final byte[] data = {}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length); final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ //bytesize and checksum should still be 0 "<AssertPlaceHolder>"; assertEquals(0, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
updateByteSize(final Artifact artifact, final byte[] bytes) { if (bytes != null) { final var byteSize = bytes.length; final var checkSum = calculateChecksum(bytes); if (artifact.getCheckSum() != checkSum || artifact.getByteSize() != byteSize) { setByteSizeAndCheckSum(artifact, byteSize, checkSum); return true; } } else { if (artifact.getByteSize() != 0 || artifact.getCheckSum() != 0) { setByteSizeAndCheckSum(artifact, 0, 0); return true; } } return false; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testSuffixArray1() { int[] arr = {2, 1, 1, 4, 3}; int[] suffixArray = SuffixArrays.buildSuffixArray(arr, 4); int[] expected = {1, 2, 0, 4, 3}; "<AssertPlaceHolder>"; }
buildSuffixArray(int[] arr, int K) { int n = arr.length; int[] s = Arrays.copyOf(arr, n + 3); int[] SA = new int[n]; suffixArray(s, SA, n, K); return SA; }
[*] target: assertArrayEquals(expected, suffixArray)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, suffixArray )
************************************
************************************
[+] input: Exception { final Long result = function.call("2020-01-01", null, "years"); "<AssertPlaceHolder>"; }
call(@Nullable final String encodedFrom, @Nullable final String encodedTo, @Nullable final String calendarDuration) throws Exception { if (encodedFrom == null || encodedTo == null) { return null; } else if (calendarDuration == null) { throw new InvalidUserInputError("Calendar duration must be provided"); }  final TemporalUnit temporalUnit = CALENDAR_DURATION_TO_TEMPORAL.get(calendarDuration);  if (temporalUnit == null) { throw new InvalidUserInputError("Invalid calendar duration: " + calendarDuration); }  final ZonedDateTime from = parse(encodedFrom); final ZonedDateTime to = parse(encodedTo);  if (from == null || to == null) { // If either of the arguments is null (invalid input), then the result is null. return null; }  return from.until(to, temporalUnit); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); KeyPair notOwnerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, notOwnerKeys, 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  // TODO: The code currently supports MailboxStoragePayload objects inside ProtectedStorageEntry. Fix this. if (protectedStoragePayload instanceof MailboxStoragePayload) { MailboxStoragePayload mailboxStoragePayload = (MailboxStoragePayload) this.getProtectedStoragePayload(); return mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  } else { boolean result = this.ownerPubKey.equals(protectedStoragePayload.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForAddOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; } }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: testConstructor() { final String id = "keyId"; // test newKeyInfo(List, String id) KeyInfo ki = fac.newKeyInfo (Collections.singletonList(fac.newKeyName("foo")), id); "<AssertPlaceHolder>"; try { ki = fac.newKeyInfo(null, id); fail("Should raise a NullPointerException"); } catch (NullPointerException npe) {} // test newKeyInfo(List) ki = fac.newKeyInfo(Collections.singletonList(fac.newKeyName("foo"))); }
getId() { return getLocalAttribute(Constants._ATT_ID); }
[*] target: assertEquals(id, ki.getId())
[-] pred: org. junit. Assert. assertEquals ( id, ki. getId ( ) )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), receiverKeys, 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() {  // Same requirements as add() boolean result = this.isValidForAddOperation();  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForRemoveOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: test1() { CombinationIterator iterator = new CombinationIterator("abc", 2); assertTrue(iterator.hasNext()); assertEquals("ab", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("ac", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("bc", iterator.next()); "<AssertPlaceHolder>"; }
hasNext() { return current[0] != space; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
************************************
[+] input: getConfigUrlNull() { ConfigProperties config = mock(ConfigProperties.class); when(config.getString(Configuration.CONFIG_KEY_OTEL_OTLP_URL, null)).thenReturn(null); when(config.getString(Configuration.CONFIG_KEY_INGEST_URL, null)).thenReturn(null); String result = Configuration.getConfigUrl(config); "<AssertPlaceHolder>"; }
getConfigUrl(ConfigProperties config) { String ingestUrl = config.getString(CONFIG_KEY_OTEL_OTLP_URL, null); if (ingestUrl != null) { if (ingestUrl.startsWith("https://ingest.") && ingestUrl.endsWith(".signalfx.com") && config.getString(CONFIG_KEY_INGEST_URL) == null) { logger.log( WARNING, "Profiling data can not be sent to {0}, using {1} instead. " + "You can override it by setting splunk.profiler.logs-endpoint", new Object[] {ingestUrl, getDefaultLogsEndpoint(config)}); return null; } if ("http/protobuf".equals(getOtlpProtocol(config))) { if (!ingestUrl.endsWith("/")) { ingestUrl += "/"; } ingestUrl += "v1/logs"; } } return config.getString(CONFIG_KEY_INGEST_URL, ingestUrl); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testGetDurationDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getDuration() { return getOrDefault(Option.DURATION); }
[*] target: assertEquals(expected, opts.getDuration())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDuration() )
************************************
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, version, group, "provider", revision, protocol); etcdMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(serviceMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, URL.encode(url.toFullString())); }
getNodeKey(BaseMetadataIdentifier identifier) { return toRootDir() + identifier.getUniqueKey(KeyTypeEnum.PATH); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
************************************
[+] input: shouldSelectAuthorsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { AuthorMapper mapper = session.getMapper(AuthorMapper.class); List<Author> authors = mapper.selectAllAuthors(); "<AssertPlaceHolder>"; } }
getMapper(Class<T> type);
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
************************************
[+] input: testGetVirtualEventsOnSubtick() {  VirtualKeyboard pressed = new VirtualKeyboard(new HashSet<>(), new ArrayList<>(), null, false);  // Load actual with the events Queue<VirtualKeyboardEvent> actual = new ConcurrentLinkedQueue<>(); pressed.getVirtualEvents(pressed, actual);  "<AssertPlaceHolder>"; }
isEmpty() { return super.isEmpty() && charList.isEmpty(); }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty() )
************************************
************************************
[+] input: tangentLinesForTwoCircles2() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 11, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(1.0, lines.get(1)[1], 1e-6); assertEquals(4.0, lines.get(1)[2], 1e-6);  assertEquals(0.0, lines.get(2)[0], 1e-6); assertEquals(-1.0, lines.get(2)[1], 1e-6); assertEquals(6.0, lines.get(2)[2], 1e-6); }
tangentLinesForTwoCircles( double x1, double y1, double r1, double x2, double y2, double r2 ) { List<double[]> ans = new ArrayList<>(); for (int i = -1; i <= 1; i += 2) { for (int j = -1; j <= 1; j += 2) { tangentLinesForTwoCircles(x2 - x1, y2 - y1, r1 * i, r2 * j, ans); } }  for (double[] line : ans) { if (line[2] < 0) { line[0] = -line[0]; line[1] = -line[1]; line[2] = -line[2]; } else if (line[2] == 0 && line[0] < 0) { line[0] = -line[0]; line[1] = -line[1]; } else if (line[2] == 0 && line[0] == 0 && line[1] < 0) { line[1] = -line[1]; } }  if (ans.size() >= 2) { ans.sort(Comparator.comparingDouble((double[] p) -> p[0]) .thenComparingDouble(p -> p[1]) .thenComparingDouble(p -> p[2]) ); double[] prev = ans.get(0), curr; ListIterator<double[]> iterator = ans.listIterator(1); while (iterator.hasNext()) { curr = iterator.next(); boolean same = true; for (int i = 0; same && i < 3; i++) same = Math.abs(curr[i] - prev[i]) < EPS; if (same) iterator.remove(); else prev = curr; } } for (double[] line : ans) line[2] -= line[0] * x1 + line[1] * y1; return ans; }
[*] target: assertEquals(3, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 3, lines. size ( ) )
************************************
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_2() { var encoded = UUIDAdapter.toUUIDOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
toUUIDOrDefault(byte[] bytes, UUID defaultValue) { if (bytes == null) { return defaultValue; } return UUIDAdapter.toUUID(bytes); }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
************************************
[+] input: testTransferListenableFuture() { final CompletableFuture<String> cf = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> "foo")); assertNotNull(cf); assertEquals("foo", cf.join());  final IllegalStateException e = new IllegalStateException("bar"); final CompletableFuture<String> cf1 = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> { throw e; })); "<AssertPlaceHolder>"; try { cf1.join(); } catch (Exception ex) { Throwable err = Futures.unwrapCompletionException(ex); assertEquals(e, err); assertEquals("bar", err.getMessage()); } }
transferListenableFuture(ListenableFuture<T> future) { final CompletableFuture<T> transfer = new CompletableFuture<>(); future.addListener(() -> { try { transfer.complete(getDone(future)); } catch (Throwable t) { // unwrap ExecutionException which wrapped by ListenableFuture if (t instanceof ExecutionException) { transfer.completeExceptionally(t.getCause()); } else { transfer.completeExceptionally(t); } } }, DirectExecutor.INSTANCE); return transfer; }
[*] target: assertNotNull(cf1)
[-] pred: org. junit. Assert. assertNotNull ( cf1 )
************************************
************************************
[+] input: testAsChunkAdds12Bytes() { byte[] data = {5}; byte[] chunk = PngEncoderLogic.asChunk(VALID_CHUNK_TYPE, data);  int expected = 13; int actual = chunk.length; "<AssertPlaceHolder>"; }
asChunk(String type, byte[] data) { PngEncoderVerificationUtil.verifyChunkType(type); ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 12); byteBuffer.putInt(data.length); ByteBuffer byteBufferForCrc = byteBuffer.slice().asReadOnlyBuffer(); byteBufferForCrc.limit(4 + data.length); byteBuffer.put(type.getBytes(StandardCharsets.US_ASCII)); byteBuffer.put(data); byteBuffer.putInt(getCrc32(byteBufferForCrc)); return byteBuffer.array(); }
[*] target: assertThat(actual, is(expected))
[-] pred: org. junit. Assert. assertThat ( actual, is ( expected ) )
************************************
************************************
[+] input: shouldVerifyCorrectPasswordForEmail() { User user = userDataProvider.full(); String email = user.getEmail();  when(userRepository.findByEmail(email)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(email, user.getPassword());  "<AssertPlaceHolder>"; }
passwordIsCorrect(String usernameOrEmail, String password) { log.info("Verifying password for: " + usernameOrEmail);  return userRepository.findByUsername(usernameOrEmail) .or(() -> userRepository.findByEmail(usernameOrEmail)) .map(u -> Objects.equals(u.getPassword(), password)) .orElse(false); }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now);  var attr = new Attributes(); String when = "when"; attr.put(WHEN, when);  double used = 10; double committed = 30; double reserved = 20;  List<Metric> expected = new ArrayList<>(9); expected.addAll( generateMetrics(MetaspaceSummaryMapper.METASPACE, used, committed, reserved, now, attr)); expected.addAll( generateMetrics(MetaspaceSummaryMapper.DATA_SPACE, used, committed, reserved, now, attr)); expected.addAll( generateMetrics(MetaspaceSummaryMapper.CLASS_SPACE, used, committed, reserved, now, attr));  var testClass = new MetaspaceSummaryMapper();  var recordedObject = mock(RecordedObject.class); when(recordedObject.getDouble(USED)).thenReturn(used); when(recordedObject.getDouble(COMMITTED)).thenReturn(committed); when(recordedObject.getDouble(RESERVED)).thenReturn(reserved);  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getString(WHEN)).thenReturn(when); when(event.getValue(METASPACE)).thenReturn(recordedObject); when(event.getValue(DATA_SPACE)).thenReturn(recordedObject); when(event.getValue(CLASS_SPACE)).thenReturn(recordedObject);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent ev) { long timestamp = ev.getStartTime().toEpochMilli(); RecordedObject metaspace = null; if (hasField(ev, METASPACE, SIMPLE_CLASS_NAME)) { metaspace = ev.getValue(METASPACE); } RecordedObject dataSpace = null; if (hasField(ev, DATA_SPACE, SIMPLE_CLASS_NAME)) { dataSpace = ev.getValue(DATA_SPACE); } RecordedObject classSpace = null; if (hasField(ev, CLASS_SPACE, SIMPLE_CLASS_NAME)) { classSpace = ev.getValue(CLASS_SPACE); } Attributes attr = new Attributes(); if (hasField(ev, WHEN, SIMPLE_CLASS_NAME)) { attr.put(WHEN, ev.getString(WHEN)); } List<Metric> metrics = new ArrayList<>(9); metrics.addAll(generateMetric(METASPACE, metaspace, attr, timestamp)); metrics.addAll(generateMetric(DATA_SPACE, dataSpace, attr, timestamp)); metrics.addAll(generateMetric(CLASS_SPACE, classSpace, attr, timestamp)); return metrics; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testTokenSign() { TokenSign tokenSign = new TokenSign(); tokenSign.setDevice("PC"); tokenSign.setValue("ttt-value");  Assertions.assertEquals(tokenSign.getDevice(), "PC"); Assertions.assertEquals(tokenSign.getValue(), "ttt-value");  Assertions."<AssertPlaceHolder>"; }
toString() { return "TokenSign [value=" + value + ", device=" + device + ", tag=" + tag + "]"; }
[*] target: assertNotNull(tokenSign.toString())
[-] pred: org. junit. Assert. assertNotNull ( tokenSign. toString ( ) )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ElastiCacheSubnetGroup.cmd")); String actual = exportElastiCacheSubnetGroups.getTFImport(getAwsCacheSubnetGroups()).script();  "<AssertPlaceHolder>"; }
getTFImport(List<AWSCacheSubnetGroup> awsCacheSubnetGroups) { return TFImport.builder() .importLines(awsCacheSubnetGroups.stream() .map(awsCacheSubnetGroup -> TFImportLine.builder() .address(awsCacheSubnetGroup.getTerraformAddress()) .id(awsCacheSubnetGroup.getResourceId()) .build() ).collect(Collectors.toList())) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testAddServices() { Proto proto = new Proto();  proto.addService(null); "<AssertPlaceHolder>"; }
getServices() { if (services == null) { services = new ArrayList<>(); } return services; }
[*] target: assertEquals(0, proto.getServices().size())
[-] pred: org. junit. Assert. assertEquals ( 0, proto. getServices(). size ( ) )
************************************
************************************
[+] input: buildUsageULogging() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_LOGGING, null, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: buildProvideAccess() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.PROVIDE_ACCESS, null, uri); "<AssertPlaceHolder>"; }
buildFormula(final PolicyPattern pattern, final Rule rule, final URI target) { switch (pattern) { case PROVIDE_ACCESS: //when access is provided, policy is Fulfilled everytime return trueOperator(); case USAGE_UNTIL_DELETION: return buildUsageUntilDeletionFormula(target); case USAGE_LOGGING: return buildLoggingFormula(target); case N_TIMES_USAGE: return buildNTimesUsageFormula(rule, target); case USAGE_NOTIFICATION: return buildNotificationFormula(target); case CONNECTOR_RESTRICTED_USAGE: return buildConnectorRestrictionFormula(rule, target); case PROHIBIT_ACCESS: return buildProhibitAccessFormula(target); default: //other rules are ignored return null; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: test2() { int[] arrInitial = {1}; int[] arrExpected = {}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
deleteMiddle(ListNode head) { head = new ListNode(0, head); ListNode fast = head, slow = head; while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } if (slow.next != null) slow.next = slow.next.next; return head.next; }
[*] target: assertEquals(expected, actual)
[-] pred: assertEquals ( expected, actual )
************************************
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 2); assertEquals(2, opusPacket.getCode()); assertTrue(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(2, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
getPadLenBytesSum() { return 0; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
************************************
[+] input: testGivenPersonDTOThenReturnSuccessSavedMessage() { PersonDTO personDTO = createFakeDTO(); Person expectedSavedPerson = createFakeEntity();  when(personMapper.toModel(personDTO)).thenReturn(expectedSavedPerson); when(personRepository.save(any(Person.class))).thenReturn(expectedSavedPerson);  MessageResponseDTO expectedSuccessMessage = createExpectedSuccessMessage(expectedSavedPerson.getId()); MessageResponseDTO successMessage = personService.create(personDTO);  "<AssertPlaceHolder>"; }
create(PersonDTO personDTO) { Person person = personMapper.toModel(personDTO); Person savedPerson = personRepository.save(person);  MessageResponseDTO messageResponse = createMessageResponse("Person successfully created with ID ", savedPerson.getId());  return messageResponse; }
[*] target: assertEquals(expectedSuccessMessage, successMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedSuccessMessage, successMessage )
************************************
************************************
[+] input: testDefaultOpts() { final XssOptions options = XssOptionsConfigure.defaultOpts(); final XssOptions def = new XssOptions();  "<AssertPlaceHolder>"; }
getMode() { return mode; }
[*] target: assertEquals(def.getMode(), options.getMode())
[-] pred: org. junit. Assert. assertEquals ( def. getMode(), options. getMode() )
************************************
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (!metadata.exists()) { final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); } if (metadata.getRawValue() == null) { final String message = "Property '" + metadata.getName() + "' must not be null."; return DefaultConfigViolation.of(metadata, message); } final T convertedValue = metadata.getConverter().convert(metadata.getRawValue()); if (ConfigNumberUtils.compare(convertedValue, metadata.getValueType(), min) < 0) { final String message = "Value of Property '" + metadata.getName() + "' must be >= '" + min + "'"; return DefaultConfigViolation.of(metadata, message); } else { return null; } }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
[+] input: testRemoteActivityConfiguration() { String phrase = "Hello remote!"; RemoteActivities remoteActivity = mock(RemoteActivities.class); when(remoteActivity.echo(phrase)).thenReturn(phrase);  createWorkerForRemoteActivity(remoteActivity); createWorkerForLocalWorkflow(HelloRemoteWorkflowImpl.class);  HelloWorkflow workflowStub = fact.makeStub( HelloWorkflow.class, HelloRemoteWorkflowImpl.class, testEnv.getWorkflowClient()); testEnv.start();  String echoResult = workflowStub.process(); "<AssertPlaceHolder>"; }
process() { return null; }
[*] target: assertEquals(phrase, echoResult)
[-] pred: org. junit. Assert. assertEquals ( phrase, echoResult )
************************************
************************************
[+] input: getResourceMaps() { List<AWSElasticsearchDomain> awsElasticsearchDomains = getAwsElasticsearchDomains();  Maps<Resource> resourceMaps = exportElasticsearchDomains.getResourceMaps(awsElasticsearchDomains); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Elasticsearch.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSElasticsearchDomain> awsElasticsearchDomains) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsElasticsearchDomains.forEach(awsElasticsearchDomain -> { ElasticsearchDomainStatus domainStatus = awsElasticsearchDomain.getElasticsearchDomainStatus(); List<Tag> tags = awsElasticsearchDomain.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsElasticsearchDomain.getTerraformResourceName()) .name(awsElasticsearchDomain.getResourceName()) .argument("domain_name", TFString.build(domainStatus.domainName())) .argument("elasticsearch_version", TFString.build(domainStatus.elasticsearchVersion())) .argument("cluster_config", TFBlock.builder() .argumentIf(domainStatus.elasticsearchClusterConfig().dedicatedMasterEnabled(), "dedicated_master_count", () -> TFNumber.build(domainStatus.elasticsearchClusterConfig().dedicatedMasterCount())) .argument("dedicated_master_enabled", TFBool.build(domainStatus.elasticsearchClusterConfig().dedicatedMasterEnabled())) .argument("instance_type", TFString.build( domainStatus.elasticsearchClusterConfig().instanceTypeAsString())) .argument("instance_count", TFNumber.build( domainStatus.elasticsearchClusterConfig().instanceCount())) .build()) .argument("vpc_options", TFBlock.builder() .argument("subnet_ids", TFList.builder().isLineIndent(false).lists( domainStatus.vpcOptions().subnetIds().stream() .map(subnetId -> TFString.builder().isLineIndent(false) .value(subnetId) .build()) .collect(Collectors.toList())) .build()) .argument("security_group_ids", TFList.builder().isLineIndent(false).lists( domainStatus.vpcOptions().securityGroupIds().stream() .map(securityGroupId -> TFString.builder().isLineIndent(false) .value(securityGroupId) .build()) .collect(Collectors.toList())) .build()) .build()) .argument("advanced_options", TFMap.build( domainStatus.advancedOptions().entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, parameter -> TFString.build(parameter.getValue()))) )) .argument("ebs_options", TFBlock.builder() .argument("ebs_enabled", TFBool.build( domainStatus.ebsOptions().ebsEnabled())) .argument("volume_size", TFNumber.build( domainStatus.ebsOptions().volumeSize())) .argument("volume_type", TFString.build( domainStatus.ebsOptions().volumeTypeAsString())) .build()) .argumentsIf(domainStatus.hasLogPublishingOptions(), "log_publishing_options", () -> domainStatus.logPublishingOptions().entrySet().stream() .map(option -> TFBlock.builder() .argument("cloudwatch_log_group_arn", TFString.builder() .value(option.getValue().cloudWatchLogsLogGroupArn()) .build()) .argument("enabled", TFBool.builder() .bool(option.getValue().enabled()) .build()) .argument("log_type", TFString.builder() .value(option.getKey().name()) .build()) .build()) .collect(Collectors.toList())) .argument("node_to_node_encryption", TFBlock.builder() .argument("enabled", TFBool.build(domainStatus.nodeToNodeEncryptionOptions().enabled())) .build()) .argument("encrypt_at_rest", TFBlock.builder() .argument("enabled", TFBool.build(domainStatus.encryptionAtRestOptions().enabled())) .build()) .argument("advanced_security_options", TFBlock.builder() .argument("enabled", TFBool.build(domainStatus.advancedSecurityOptions().enabled())) .argument("internal_user_database_enabled", TFBool.build(domainStatus.advancedSecurityOptions() .internalUserDatabaseEnabled())) .build()) .argument("cognito_options", TFBlock.builder() .argument("enabled", TFBool.build(domainStatus.cognitoOptions().enabled())) .argument("identity_pool_id", TFString.build(domainStatus.cognitoOptions() .identityPoolId())) .argument("role_arn", TFString.build(domainStatus.cognitoOptions() .roleArn())) .argument("user_pool_id", TFString.build(domainStatus.cognitoOptions() .userPoolId())) .build()) .argument("domain_endpoint_options", TFBlock.builder() .argument("enforce_https", TFBool.build(domainStatus.domainEndpointOptions().enforceHTTPS())) .argument("tls_security_policy", TFString.build(domainStatus.domainEndpointOptions() .tlsSecurityPolicyAsString())) .build()) .argument("ebs_options", TFBlock.builder() .argument("ebs_enabled", TFBool.build(domainStatus.ebsOptions().ebsEnabled())) .argument("iops", Optional.ofNullable(domainStatus.ebsOptions().iops()) .map(TFNumber::build) .orElse(TFNumber.build(null))) .argument("volume_size", TFNumber.build(domainStatus.ebsOptions() .volumeSize())) .argument("volume_type", TFString.build(domainStatus.ebsOptions() .volumeTypeAsString())) .build()) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build());  resourceMapsBuilder.map( Resource.builder() .api("aws_elasticsearch_domain_policy") .name(domainStatus.domainName()) .argument("domain_name", TFString.build(domainStatus.domainName())) .argument("access_policies", TFString.builder() .isMultiline(true) .value(JsonUtils.toPrettyFormat(domainStatus.accessPolicies())) .build()) .build()); });  return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: removeAdminFromCommunityNotExists() { // given given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository, never()).save(any()); }
removeAdminFromCommunity(String communityId, String adminId) { Optional<Community> communitySearch = communityRepository.findByCommunityIdWithAdmins(communityId); return communitySearch.map(community -> { boolean adminRemoved = community.getAdmins().removeIf(admin -> admin.getUserId().equals(adminId)); if (adminRemoved) { communityRepository.save(community); return true; } else { return false; } }).orElse(false); }
[*] target: assertFalse(adminRemoved)
[-] pred: org. junit. Assert. assertFalse ( adminRemoved )
************************************
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); invocationModal.getView() .getState() .getStateValues() .get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getViewId()); assertNotNull(updateModal.getHash()); assertNotNull(updateModal.getView().getType()); assertNotNull(updateModal.getView().getSubmit()); assertEquals(18, updateModal.getView().getBlocks().size()); Block warningBlock = updateModal.getView().getBlocks().get(8); assertEquals(BLOCK_ID_INVALID_HOURS, warningBlock.getBlockId()); assertEquals(":warning: start and end time cannot identical", warningBlock.getElements().get(0).getText()); }
handleUserInteraction(InvocationModal payload) { if (PAYLOAD_TYPE_BLOCK_ACTIONS.equals(payload.getType())) { getUserAction(payload).ifPresent(userAction -> handleUserAction(payload, userAction)); } else if (PAYLOAD_TYPE_SUBMISSION.equals(payload.getType())) { return handleSubmission(payload); } return null; }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry.receiversPubKey matches the Payload.ownerPubKey. This is a requirement for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for adding MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getSenderPubKeyForAddOperation().getEncoded(),true);  log.warn("ProtectedMailboxStorageEntry::isValidForAddOperation() failed. " + "Entry owner does not match sender key in payload:\nProtectedStorageEntry=%{}\n" + "SenderPubKeyForAddOperation=%{}", res1, res2); }  return result; }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: updateGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组1儿子"); dto.setInfo("测试分组1儿子info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertEquals(selected.getName(), "测试分组1儿子"); assertEquals(selected.getInfo(), "测试分组1儿子info"); }
updateGroup(Integer id, UpdateGroupDTO dto) { // bug 如果只修改info，不修改name，则name已经存在，此时不应该报错 GroupDO exist = groupService.getById(id); if (exist == null) { throw new NotFoundException(10024); } if (!exist.getName().equals(dto.getName())) { throwGroupNameExist(dto.getName()); } GroupDO group = GroupDO.builder().name(dto.getName()).info(dto.getInfo()).build(); group.setId(id); return groupService.updateById(group); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: testStartEditOfferForDeactivatedOffer() { P2PService p2PService = mock(P2PService.class); OfferBookService offerBookService = mock(OfferBookService.class); XmrConnectionService xmrConnectionService = mock(XmrConnectionService.class); when(p2PService.getPeerManager()).thenReturn(mock(PeerManager.class));  final OpenOfferManager manager = new OpenOfferManager(coreContext, null, null, p2PService, xmrConnectionService, null, null, null, offerBookService, null, null, null, null, null, null, null, null, persistenceManager, signedOfferPersistenceManager, null);  AtomicBoolean startEditOfferSuccessful = new AtomicBoolean(false);  ResultHandler resultHandler = () -> startEditOfferSuccessful.set(true);  final OpenOffer openOffer = new OpenOffer(make(btcUsdOffer)); openOffer.setState(OpenOffer.State.DEACTIVATED);  manager.editOpenOfferStart(openOffer, resultHandler, null); "<AssertPlaceHolder>";  }
editOpenOfferStart(OpenOffer openOffer, ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) { if (offersToBeEdited.containsKey(openOffer.getId())) { log.warn("editOpenOfferStart called for an offer which is already in edit mode."); resultHandler.handleResult(); return; }  offersToBeEdited.put(openOffer.getId(), openOffer);  if (openOffer.isAvailable()) { deactivateOpenOffer(openOffer, resultHandler, errorMessage -> { offersToBeEdited.remove(openOffer.getId()); errorMessageHandler.handleErrorMessage(errorMessage); }); } else { resultHandler.handleResult(); } }
[*] target: assertTrue(startEditOfferSuccessful.get())
[-] pred: org. junit. Assert. assertTrue ( startEditOfferSuccessful. get ( ) )
************************************
************************************
[+] input: testFreeCell() { Cell cell = new Cell(0, 0); "<AssertPlaceHolder>"; }
isFree() { return currentPiece == null; }
[*] target: assertTrue(cell.isFree())
[-] pred: org. junit. Assert. assertTrue ( cell. isFree() )
************************************
************************************
[+] input: ParseException { InputArguments inputArguments = new InputArguments("--help"); "<AssertPlaceHolder>"; }
isHelp() { return help; }
[*] target: assertTrue(inputArguments.isHelp())
[-] pred: org. junit. Assert. assertTrue ( inputArguments. isHelp() )
************************************
************************************
[+] input: updateInteger_same_returnOldInt() { /* ARRANGE */ final var oldInt = 1; final var newInt = 1;  /* ACT */ final var result = FactoryUtils.updateInteger(oldInt, newInt);  /* ASSERT */ "<AssertPlaceHolder>"; }
updateInteger(final int oldInt, final int newInt) { if (oldInt != newInt) { return newInt; }  return oldInt; }
[*] target: assertEquals(oldInt, result)
[-] pred: org. junit. Assert. assertEquals ( oldInt, result )
************************************
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.write(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
isEnded() { return COMMITTED_UPDATER.get(this) == END; }
[*] target: assertFalse(res.isEnded())
[-] pred: org. junit. Assert. assertFalse ( res. isEnded() )
************************************
************************************
[+] input: Exception { KnownApplicationImpl app = new KnownApplicationImpl("quattro-1", "Quattro"); app.setAliases(List.of("q2")); knownApplicationRepository.save(app).get();  GalapagosEventManagerMock eventManagerMock = new GalapagosEventManagerMock();  NamingService namingService = buildNamingService();  ApplicationsServiceImpl applicationServiceImpl = new ApplicationsServiceImpl(kafkaClusters, mock(CurrentUserService.class), mock(TimeService.class), namingService, eventManagerMock);  applicationServiceImpl .registerApplicationOnEnvironment("test", "quattro-1", new JSONObject(), new ByteArrayOutputStream()) .get();  List<InvocationOnMock> invs = eventManagerMock.getSinkInvocations(); "<AssertPlaceHolder>"; assertEquals("handleApplicationRegistered", invs.get(0).getMethod().getName()); }
registerApplicationOnEnvironment(String environmentId, String applicationId, JSONObject registerParams, OutputStream outputStreamForSecret) { KafkaAuthenticationModule authModule = kafkaClusters.getAuthenticationModule(environmentId).orElse(null); if (authModule == null) { return unknownEnvironment(environmentId); }  KafkaCluster kafkaCluster = kafkaClusters.getEnvironment(environmentId).orElse(null); if (kafkaCluster == null) { return unknownEnvironment(environmentId); }  KnownApplication knownApplication = getKnownApplication(applicationId).orElse(null); if (knownApplication == null) { return unknownApplication(applicationId); }  String applicationName = namingService.normalize(knownApplication.getName());  ApplicationMetadata existing = getApplicationMetadata(environmentId, applicationId).orElse(null); CompletableFuture<CreateAuthenticationResult> updateOrCreateFuture = null;  if (existing != null) { String json = existing.getAuthenticationJson(); if (!ObjectUtils.isEmpty(json)) { updateOrCreateFuture = authModule.updateApplicationAuthentication(applicationId, applicationName, registerParams, new JSONObject(json)); } } if (updateOrCreateFuture == null) { updateOrCreateFuture = authModule.createApplicationAuthentication(applicationId, applicationName, registerParams); }  GalapagosEventSink eventSink = eventManager.newEventSink(kafkaCluster);  JSONObject oldAuthentication = existing != null && StringUtils.hasLength(existing.getAuthenticationJson()) ? new JSONObject(existing.getAuthenticationJson()) : new JSONObject();  return updateOrCreateFuture .thenCompose(result -> updateApplicationMetadata(kafkaCluster, knownApplication, existing, result) .thenCompose(meta -> futureWrite(outputStreamForSecret, result.getPrivateAuthenticationData()) .thenApply(o -> meta))) .thenCompose(meta -> { if (existing != null) { return eventSink.handleApplicationAuthenticationChanged(meta, oldAuthentication, new JSONObject(meta.getAuthenticationJson())).thenApply(o -> meta); } return eventSink.handleApplicationRegistered(meta).thenApply(o -> meta); }); }
[*] target: assertEquals(1, invs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, invs. size ( ) )
************************************
************************************
[+] input: handleResourceNotFoundException_returnHttpStatusNotFound() { /* ACT */ final var response = exceptionHandler .handleResourceNotFoundException(new ResourceNotFoundException("Resource not found."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Resource not found.", body.get("message")); }
handleResourceNotFoundException( final ResourceNotFoundException exception) { if (log.isDebugEnabled()) { log.debug("Resource not found. [exception=({})]", exception == null ? "" : exception.getMessage(), exception); }  final var headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON);  final var body = new JSONObject(); body.put("message", "Resource not found.");  return new ResponseEntity<>(body, headers, HttpStatus.NOT_FOUND); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: shouldFailOnAddAmenityToNotExistingCommunity() { // given final String communityId = "communityId"; final AmenityDto baseAmenityDto = new AmenityDto() .id(1L) .amenityId("amenityId") .name("name") .description("description") .price(BigDecimal.valueOf(12)); final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto)); given(communityService.getCommunityDetailsById(communityId)) .willReturn(Optional.empty());  // when final Optional<List<AmenityDto>> actualResult = amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);  // then "<AssertPlaceHolder>"; verify(communityService).getCommunityDetailsById(communityId); verifyNoInteractions(amenityApiMapper); verifyNoInteractions(amenityRepository); }
createAmenities(Set<AmenityDto> amenities, String communityId) { final Optional<Community> community = communityService.getCommunityDetailsById(communityId); if (!community.isPresent()) { return Optional.empty(); } final List<Amenity> amenitiesWithCommunity = amenities.stream() .map(amenityApiMapper::amenityDtoToAmenity) .map(amenity -> { amenity.setCommunity(community.get()); return amenity; }) .collect(Collectors.toList()); final List<AmenityDto> createdAmenities = amenityRepository.saveAll(amenitiesWithCommunity).stream() .map(amenityApiMapper::amenityToAmenityDto) .collect(Collectors.toList()); return Optional.of(createdAmenities); }
[*] target: assertFalse(actualResult.isPresent())
[-] pred: org. junit. Assert. assertFalse ( actualResult. isPresent ( ) )
************************************
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(RealInterface.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: getResourceMaps() {  List<AWSRestApiResource> awsRestApis = getAwsRestApiResources();  Maps<Resource> resourceMaps = exportApiGatewayResources.getResourceMaps(awsRestApis); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ApigatewayResource.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRestApiResource> awsRestApiResources) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); for (AWSRestApiResource awsRestApiResource : awsRestApiResources) { RestApi restApi = awsRestApiResource.getRestApi();  @SuppressWarnings("OptionalGetWithoutIsPresent") String rootResourceId = awsRestApiResource.getAwsResources().stream() .filter(awsResource -> awsResource.getResource().parentId() == null) .findFirst().get() .getResource() .id();  awsRestApiResource.getAwsResources().stream() .filter(awsResource -> awsResource.getResource().parentId() != null) .forEach(awsResource -> { software.amazon.awssdk.services.apigateway.model.Resource resource = awsResource.getResource(); resourceMapsBuilder.map( Resource.builder() .api(awsRestApiResource.getTerraformResourceName()) .name(awsResource.getResourceName()) .argument("rest_api_id ", TFExpression.build( MessageFormat.format("aws_api_gateway_rest_api.{0}.id", restApi.name()))) .argument("parent_id", resource.parentId().equals(rootResourceId) ? TFExpression.build(MessageFormat.format("aws_api_gateway_rest_api.{0}.root_resource_id", restApi.name())) : TFExpression.build(MessageFormat.format("aws_api_gateway_resource.{0}-{1}.id", restApi.name(), resource.parentId()))) .argument("path_part ", TFString.build(resource.pathPart())) .build()); awsResource.getAwsMethods().forEach(awsMethod -> { GetMethodResponse method = awsMethod.getMethod(); resourceMapsBuilder.map( Resource.builder() .api(awsMethod.getTerraformResourceName()) .name(awsMethod.getResourceName()) .argument("rest_api_id", TFExpression.build( MessageFormat.format("aws_api_gateway_rest_api.{0}.id", restApi.name()))) .argument("resource_id", TFExpression.build( MessageFormat.format("aws_api_gateway_resource.{0}-{1}.id", restApi.name(), resource.id()))) .argument("http_method", TFString.build(method.httpMethod())) .argument("authorization", TFString.build(method.authorizationType())) .argument("authorizer_id", TFString.build(method.authorizerId())) .argument("request_parameters", TFMap.build( method.requestParameters().entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, parameter -> TFBool.build(parameter.getValue()))) )) .build());  AWSIntegration awsIntegration = awsMethod.getAwsIntegration(); GetIntegrationResponse integration = awsIntegration.getIntegration();  resourceMapsBuilder.map( Resource.builder() .api(awsIntegration.getTerraformResourceName()) .name(awsIntegration.getResourceName()) .argument("rest_api_id", TFExpression.build( MessageFormat.format("aws_api_gateway_rest_api.{0}.id", restApi.name()))) .argument("resource_id", TFExpression.build( MessageFormat.format("aws_api_gateway_resource.{0}-{1}.id", restApi.name(), resource.id()))) .argument("http_method", TFString.build(method.httpMethod())) .argument("type", TFString.build(integration.typeAsString())) .argument("connection_type", TFString.build(integration.connectionTypeAsString())) .argument("connection_id", TFString.build(integration.connectionId())) .argument("uri", TFString.build(integration.uri())) .argument("integration_http_method", TFString.build(integration.httpMethod())) .argument("request_parameters", TFMap.build( integration.requestParameters().entrySet().stream() .collect(Collectors.toMap(Map.Entry::getKey, parameter -> TFString.build(parameter.getValue()))) )) .build()); } ); }); } return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: deleteMemberFromHouseMemberNotPresent() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository, never()).save(communityHouse); verifyNoInteractions(houseMemberRepository); }
deleteMemberFromHouse(String houseId, String memberId) { Optional<CommunityHouse> communityHouseOptional = communityHouseRepository.findByHouseIdWithHouseMembers(houseId); return communityHouseOptional.map(communityHouse -> { boolean isMemberRemoved = false; if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) { Set<HouseMember> houseMembers = communityHouse.getHouseMembers(); for (HouseMember member : houseMembers) { if (member.getMemberId().equals(memberId)) { houseMembers.remove(member); communityHouse.setHouseMembers(houseMembers); communityHouseRepository.save(communityHouse); member.setCommunityHouse(null); houseMemberRepository.save(member); isMemberRemoved = true; break; } } } return isMemberRemoved; }).orElse(false); }
[*] target: assertFalse(isMemberDeleted)
[-] pred: org. junit. Assert. assertFalse ( isMemberDeleted )
************************************
************************************
[+] input: testLineIntersection4() { double[] p = GeometryTools.lineIntersection(2, -4, 0, 1, -2, 0); "<AssertPlaceHolder>"; }
lineIntersection( double a1, double b1, double c1, double a2, double b2, double c2 ) { double d = a1 * b2 - b1 * a2; if (Math.abs(d) < EPS) return null;  double x = (c1 * b2 - c2 * b1) / d; double y = (a1 * c2 - a2 * c1) / d; return new double[]{x, y}; }
[*] target: assertNull(p)
[-] pred: org. junit. Assert. assertNull ( p )
************************************
************************************
[+] input: should_GenerateZeroPointZero_WhenPassingZeroPointZero() { DecimalInWords decimal = new DecimalInWords( IntegerInWords.createZero(), IntegerInWords.createZero(), "" ); String expected = "صفر" + " فاصلة " + "صفر"; "<AssertPlaceHolder>"; }
toString() { StringBuilder numberInWords = new StringBuilder(); numberInWords.append(numberLeftDecimalPoint.toString()); numberInWords.append(" فاصلة ").append(numberRightDecimalPoint.toString()); if (!fractionalRatioName.isEmpty()) numberInWords.append(" ").append(fractionalRatioName); return numberInWords.toString(); }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
************************************
[+] input: shouldReturnEmptyTenantWithInvalidClosingInvoiceTime() { String tenantIdentifier = "Tenant0"; loadDeterministicTenantWithInvalidClosingInvoiceTime(tenantIdentifier); TenantConfiguration tenant = TenantConfiguration.getTenantConfiguration( tenantIdentifier, new TableConfiguration(tableName, indexName), client, logger); "<AssertPlaceHolder>"; }
isEmpty() { return this.tenantID.isEmpty() && this.externalSubscriptionIdentifier.isEmpty() && this.invoiceClosingTime == null; }
[*] target: assertTrue(tenant.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( tenant. isEmpty() )
************************************
************************************
[+] input: toModel_validInput_returnContractRuleView() { /* ARRANGE */ final var contractRule = getContractRule();  /* ACT */ final var result = contractRuleViewAssembler.toModel(contractRule);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contractRule.getTitle(), result.getTitle()); Assertions.assertEquals(contractRule.getValue(), result.getValue()); Assertions.assertEquals(contractRule.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contractRule.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contractRule.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractRuleLink(contractRule.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getContractRuleContractsLink(contractRule.getId()), contractsLink.get().getHref()); }
toModel(final ContractRule rule) { final var modelMapper = new ModelMapper(); final var view = modelMapper.map(rule, ContractRuleView.class); view.add(getSelfLink(rule.getId()));  final var contractLink = WebMvcLinkBuilder.linkTo(methodOn(RulesToContractsController.class) .getResource(rule.getId(), null, null)) .withRel(BaseType.CONTRACTS); view.add(contractLink);  return view; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: test_should_createClient_ifMessagePackMapperIsChanged() { //given String expectedMappingResult = "Hello";  //when TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client = TarantoolClientFactory.createClient() .withAddresses(SAMPLE_ADDRESS) .withCredentials(SAMPLE_CREDENTIALS) .withDefaultMessagePackMapperConfiguration(mapperBuilder -> mapperBuilder.withObjectConverter(String.class, StringValue.class, object -> ValueFactory.newString(expectedMappingResult)) ) .withConnections(SAMPLE_CONNECTIONS) .withConnectTimeout(SAMPLE_CONNECT_TIMEOUT) .withRequestTimeout(SAMPLE_REQUEST_TIMEOUT) .withReadTimeout(SAMPLE_READ_TIMEOUT) .withEventLoopThreadsNumber(SAMPLE_EVENT_LOOP_THREADS_NUMBER) .build();  TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> configuredClient = TarantoolClientFactory.configureClient(client).build();  String convertedTest = configuredClient.getConfig().getMessagePackMapper() .toValue("Test").asStringValue().asString();  //then "<AssertPlaceHolder>"; assertEquals(ClusterTarantoolTupleClient.class, configuredClient.getClass()); TarantoolClientConfig config = configuredClient.getConfig();  assertTrue(((ClusterTarantoolTupleClient) client).getAddressProvider() .getAddresses().contains(SAMPLE_ADDRESS));  assertNotEquals(SAMPLE_MAPPER, config.getMessagePackMapper());  assertEquals(SAMPLE_CREDENTIALS, config.getCredentials()); assertEquals(SAMPLE_CONNECTIONS, config.getConnections()); assertEquals(SAMPLE_READ_TIMEOUT, config.getReadTimeout()); assertEquals(SAMPLE_REQUEST_TIMEOUT, config.getRequestTimeout()); assertEquals(SAMPLE_CONNECT_TIMEOUT, config.getConnectTimeout()); assertEquals(PARALLEL_ROUND_ROBIN.value(), config.getConnectionSelectionStrategyFactory()); }
build();
[*] target: assertEquals(expectedMappingResult, convertedTest)
[-] pred: org. junit. Assert. assertEquals ( expectedMappingResult, convertedTest )
************************************
************************************
[+] input: NoSuchAlgorithmException { KeyPair ownerKeys = TestUtils.generateKeyPair();  ProtectedStoragePayload protectedStoragePayload = new ProtectedStoragePayloadStub(ownerKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedStorageEntry(protectedStoragePayload, ownerKeys.getPublic(), 1, new byte[] { 0 }, Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  // TODO: The code currently supports MailboxStoragePayload objects inside ProtectedStorageEntry. Fix this. if (protectedStoragePayload instanceof MailboxStoragePayload) { MailboxStoragePayload mailboxStoragePayload = (MailboxStoragePayload) this.getProtectedStoragePayload(); return mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  } else { boolean result = this.ownerPubKey.equals(protectedStoragePayload.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForAddOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; } }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
************************************
[+] input: testGetMaxAgeDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
getMaxAge() { return getOrDefault(Option.MAX_AGE); }
[*] target: assertEquals(expected, opts.getMaxAge())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getMaxAge() )
************************************
************************************
[+] input: testBuilderCreatesInstance() { EncryptedSecretModuleBuilder builder = EncryptedSecretModuleBuilder.builder(); "<AssertPlaceHolder>"; }
builder() { return new EncryptedSecretModuleBuilder(); }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
************************************
[+] input: resetPasswordUserNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.empty());  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
resetPassword(ForgotPasswordRequest passwordResetRequest) { final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest) .map(ForgotPasswordRequest::getEmail) .flatMap(userRepository::findByEmailWithTokens); return userWithToken .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET)) .map(securityTokenService::useToken) .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword())) .map(mailService::sendPasswordSuccessfullyChanged) .orElse(false); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
************************************
[+] input: testGetLocalPort() { final int port = NetworkUtils.selectRandomPort(); final MockAsyncRequest request = MockAsyncRequest.aMockRequest() .withLocalPort(port) .withUri("/") .build(); "<AssertPlaceHolder>"; }
localPort() { return this.localPort; }
[*] target: assertEquals(port, request.localPort())
[-] pred: org. junit. Assert. assertEquals ( port, request. localPort() )
************************************
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
isValidForAddOperation() { if (!this.isSignatureValid()) return false;  MailboxStoragePayload mailboxStoragePayload = this.getMailboxStoragePayload();  // Verify the Entry.receiversPubKey matches the Payload.ownerPubKey. This is a requirement for removal if (!mailboxStoragePayload.getOwnerPubKey().equals(this.receiversPubKey)) { log.debug("Entry receiversPubKey does not match payload owner which is a requirement for adding MailboxStoragePayloads"); return false; }  boolean result = mailboxStoragePayload.getSenderPubKeyForAddOperation().equals(this.getOwnerPubKey());  if (!result) { String res1 = this.toString(); String res2 = "null"; if (mailboxStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(mailboxStoragePayload.getSenderPubKeyForAddOperation().getEncoded(),true);  log.warn("ProtectedMailboxStorageEntry::isValidForAddOperation() failed. " + "Entry owner does not match sender key in payload:\nProtectedStorageEntry=%{}\n" + "SenderPubKeyForAddOperation=%{}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties();  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertEquals(4, failoverPlugin.initialConnectionProps.size()); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: Exception { final ApacheHttpClient client = mock(ApacheHttpClient.class); final Request request = Request.create(HttpMethod.GET, "http://localhost", Collections.emptyMap(), Body.empty(), (RequestTemplate) null); final Response mockResponse = Response.builder().request(request).body("foo".getBytes()).build(); when(client.execute(any(), any())).thenReturn(mockResponse); final DccRevocationClientDelegator fixture = new DccRevocationClientDelegator(client); assertNotNull(mockResponse.body()); final Response response = fixture.execute(request, new Options()); "<AssertPlaceHolder>"; }
execute(final Request request, final Options options) throws IOException { final Response response = apacheHttpClient.execute(request, options);  // in case of http HEAD the response is NULL! final Body body = response.body(); if (body != null) { return response; } else { logger.info("response body is null for '{}'", request); }  return Response.builder() .status(response.status()) .reason(response.reason()) .headers(response.headers()) .request(response.request()) .body("", StandardCharsets.UTF_8).build(); }
[*] target: assertEquals(mockResponse, response)
[-] pred: org. junit. Assert. assertEquals ( mockResponse, response )
************************************
************************************
[+] input: testGetMetaAnnotations() { List<Annotation> metaAnnotations = getMetaAnnotations(Service.class, a -> isSameType(a, Inherited.class)); "<AssertPlaceHolder>"; assertEquals(Inherited.class, metaAnnotations.get(0).annotationType());  metaAnnotations = getMetaAnnotations(Service.class); assertEquals(2, metaAnnotations.size()); assertEquals(Inherited.class, metaAnnotations.get(0).annotationType()); assertEquals(Deprecated.class, metaAnnotations.get(1).annotationType()); }
isSameType(Annotation annotation, Class<? extends Annotation> annotationType) { if (annotation == null || annotationType == null) { return false; } return Objects.equals(annotation.annotationType(), annotationType); }
[*] target: assertEquals(1, metaAnnotations.size())
[-] pred: org. junit. Assert. assertEquals ( 1, metaAnnotations. size ( ) )
************************************
************************************
[+] input: test_Notified_withGroupFilter() { URL directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1,group2"); RegistryDirectory directory = this.getRegistryDirectory(directoryUrl); URL provider1 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group1&mock=false&application=mockApplication"); URL provider2 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group2&mock=false&application=mockApplication");  List<URL> providers = new ArrayList<>(); providers.add(provider1); providers.add(provider2); directory.notify(providers);  invocation = new RpcInvocation(); invocation.setMethodName("getXXX"); List<Invoker<DemoService>> invokers = directory.list(invocation);  Assertions.assertEquals(2, invokers.size()); Assertions.assertTrue(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertTrue(invokers.get(1) instanceof MockClusterInvoker);  directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1"); directory = this.getRegistryDirectory(directoryUrl); directory.notify(providers);  invokers = directory.list(invocation);  Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertFalse(invokers.get(1) instanceof MockClusterInvoker); }
notify(List<URL> urls) { // 按照category进行分类，分成configurators、routers、providers三类 Map<String, List<URL>> categoryUrls = urls.stream() .filter(Objects::nonNull) .filter(this::isValidCategory) .filter(this::isNotCompatibleFor26x) .collect(Collectors.groupingBy(this::judgeCategory)); // 获取configurators类型的URL，并转换成Configurator对象 List<URL> configuratorURLs = categoryUrls.getOrDefault(CONFIGURATORS_CATEGORY, Collections.emptyList()); this.configurators = Configurator.toConfigurators(configuratorURLs).orElse(this.configurators);  // 获取routers类型的URL，并转成Router对象，添加到RouterChain中 List<URL> routerURLs = categoryUrls.getOrDefault(ROUTERS_CATEGORY, Collections.emptyList()); toRouters(routerURLs).ifPresent(this::addRouters);  // 获取providers类型的URL，调用refreshOverrideAndInvoker()方法进行处理 List<URL> providerURLs = categoryUrls.getOrDefault(PROVIDERS_CATEGORY, Collections.emptyList()); /** * 3.x added for extend URL address */ ExtensionLoader<AddressListener> addressListenerExtensionLoader = ExtensionLoader.getExtensionLoader(AddressListener.class); List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null); if (supportedListeners != null && !supportedListeners.isEmpty()) { for (AddressListener addressListener : supportedListeners) { providerURLs = addressListener.notify(providerURLs, getConsumerUrl(),this); } } refreshOverrideAndInvoker(providerURLs); }
[*] target: assertEquals(2, invokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, invokers. size ( ) )
************************************
************************************
[+] input: Exception { DidVerkeyResponse verKey = new DidVerkeyResponse(); verKey.setVerkey("dummy"); Mockito.when(ac.ledgerDidVerkey(Mockito.anyString())) .thenReturn(Optional.of(verKey)); BPASchema dbSchema = schemaRepo.save(BPASchema.builder() .schemaId("1234") .seqNo(571) .type(CredentialType.INDY) .build()); Optional<TrustedIssuer> credDefId = mgmt .addRestriction(dbSchema.getId(), "5mwQSWnRePrZ3oF67C4KqD", null); Assertions.assertTrue(credDefId.isPresent());  Optional<BPASchema> schemaReloaded = schemaRepo.findById(dbSchema.getId()); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(schemaReloaded.get().getRestrictions()); Assertions.assertEquals(1, schemaReloaded.get().getRestrictions().size()); }
findById(@NonNull UUID id) { return repo.findById(id).orElseThrow(EntityNotFoundException::new); }
[*] target: assertTrue(schemaReloaded.isPresent())
[-] pred: org. junit. Assert. assertTrue ( schemaReloaded. isPresent ( ) )
************************************
************************************
[+] input: getInstanceShouldNotBeNull() { VFS vsf = VFS.getInstance(); Assertions."<AssertPlaceHolder>"; }
getInstance() { return VFSHolder.INSTANCE; }
[*] target: assertNotNull(vsf)
[-] pred: org. junit. Assert. assertNotNull ( vsf )
************************************
************************************
[+] input: IOException { final Path p = testArchivePath(); try (ZipArchive z = new ZipArchive(p.toFile())) { z.close(); "<AssertPlaceHolder>"; } }
isClosed() { return closed; }
[*] target: assertTrue(z.isClosed())
[-] pred: org. junit. Assert. assertTrue ( z. isClosed() )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-instance-name.XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
isFailoverEnabled() { return this.enableFailoverSetting && !this.isRdsProxy && this.isClusterTopologyAvailable && (this.hosts == null || this.hosts.size() > 1); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
************************************
[+] input: checkUserExistById1() { UserDO user = LocalUser.getLocalUser(); boolean b = userService.checkUserExistById(user.getId()); "<AssertPlaceHolder>"; }
checkUserExistById(Integer id) { int rows = this.baseMapper.selectCountById(id); return rows > 0; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: getDuration_inputInvalidWrongConstraintType_returnNull() { /* ARRANGE */ final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getDuration(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
getDuration(final Rule rule) throws DateTimeParseException { final var constraint = rule.getConstraint().get(0); final var type = ((ConstraintImpl) constraint).getRightOperand().getType();  if ("http://www.w3.org/2001/XMLSchema#duration".equals(type)) { final var duration = ((ConstraintImpl) constraint).getRightOperand().getValue(); return Duration.parse(duration); } else { return null; } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: serializeEmptyData() { byte[] actual = testSubject.serialize("test-topic", Collections.emptySet());  "<AssertPlaceHolder>"; }
serialize(String topic, Collection<SpanData> data) { if (Objects.isNull(data)) { throw new SerializationException("Cannot serialize null"); } return convertSpansToRequest(data).toByteArray(); }
[*] target: assertEquals(0, actual.length)
[-] pred: org. junit. Assert. assertEquals ( 0, actual. length )
************************************
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG WHERE ID = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new IfSqlNode(mixedContents(new TextSqlNode("WHERE ID = ?")), "true" )); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
getSql(){ DynamicContext context = new DynamicContext(configuration, null); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class<?> parameterType = Object.class; SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); BoundSql boundSql = sqlSource.getBoundSql(null); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql.getSql(); }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
************************************
[+] input: testUniqueName() { TestUtils.loadLibraries(); PipelineManager manager = new PipelineManager(new DriverModePipelineSettings(), List.of(), "meme_name", -1); manager.addPipeline(PipelineType.Reflective, "Another");  // We now have ["New Pipeline", "Another"] // After we duplicate 0 and 1, we expect ["New Pipeline", "Another", "New Pipeline (1)", // "Another (1)"] manager.duplicatePipeline(0); manager.duplicatePipeline(1);  // Should add "Another (2)" manager.duplicatePipeline(3); // Should add "Another (3) manager.duplicatePipeline(3); // Should add "Another (4) manager.duplicatePipeline(1);  // Should add "Another (5)" through "Another (15)" for (int i = 5; i < 15; i++) { manager.duplicatePipeline(1); }  var nicks = manager.getPipelineNicknames(); var expected = new ArrayList<>(List.of("New Pipeline", "Another", "New Pipeline (1)", "Another (1)")); for (int i = 2; i < 15; i++) { expected.add("Another (" + i + ")"); } Assertions."<AssertPlaceHolder>"; }
getPipelineNicknames() { List<String> ret = new ArrayList<>(); for (var p : userPipelineSettings) { ret.add(p.pipelineNickname); } return ret; }
[*] target: assertEquals(expected, nicks)
[-] pred: org. junit. Assert. assertEquals ( expected, nicks )
************************************
************************************
[+] input: testCreateNewInternalThread() { InternalThread t = new InternalThreadImpl(); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = new InternalThreadImpl(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = new InternalThreadImpl(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(new InternalThreadImpl("foo"), null, "foo"); assertThreadInfo(new InternalThreadImpl(group, "foo"), group, "foo");  t = new InternalThreadImpl(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
thread();
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  String site = siteId != null ? siteId + "/" : "";  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  Map<String, AttributeValue> map = indexes.get(0); assertFalse(dbService.exists(map.get(PK), map.get(SK))); verifyIndex(map, site + "global#folders#", "fi#test.pdf", "test.pdf", false); } }
generateIndex(String siteId, DocumentItem item);  /** * Get {@link FolderIndexRecord}
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
************************************
[+] input: testScanFromJarWithIncludesPredicates() { // use slf4j as target assumeTrue(ClassUtils.hasClass("org.slf4j.Logger") && ClassUtils.hasClass("org.slf4j.LoggerFactory"));  final ClassPathScanUtils scanUtils = new ClassPathScanUtils(true, true, Collections.singletonList("LoggerFactory")); Set<Class<?>> classes = scanUtils.getPackageAllClasses("org.slf4j", false); "<AssertPlaceHolder>"; assertTrue(classes.contains(org.slf4j.LoggerFactory.class)); assertFalse(classes.contains(org.slf4j.Logger.class)); }
getPackageAllClasses(String path, boolean recursive) { Checks.checkNotEmptyArg(path, "path"); final Set<Class<?>> classes = new LinkedHashSet<>(); if (path.endsWith(".")) { path = path.substring(0, path.lastIndexOf('.')); }  Enumeration<URL> dirs; try { dirs = ClassUtils.getClassLoader().getResources(standardPath(path)); while (dirs.hasMoreElements()) { URL url = dirs.nextElement(); if ("file".equals(url.getProtocol())) { scanFromFile(classes, path, URLDecoder.decode(url.getFile(), "UTF-8"), recursive); } else if ("jar".equals(url.getProtocol())) { scanFromJar(path, url, classes, recursive); } } } catch (IOException ignored) { }  return classes; }
[*] target: assertEquals(1, classes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, classes. size ( ) )
************************************
************************************
[+] input: clientRegistrationRepository_withRegistration_returns() { var properties = new OAuth2ClientRegistrationProperties(); properties.setClientId("client-id"); properties.setClientSecret("client-secret"); properties.setRedirectUri("redirect-uri"); properties.setScope(Set.of("profile")); properties.setClientName("client-name"); properties.setAuthorizationUri("authorization-uri"); properties.setTokenUri("token-uri"); properties.setUserInfoUri("user-info-uri"); properties.setJwkSetUri("jwk-set-uri"); properties.setProvider("provider"); properties.setUserNameAttribute("username-attribute"); properties.setIssuerUri("issuer-uri"); var repository = configuration.reactiveClientRegistrationRepository(properties); "<AssertPlaceHolder>"; }
reactiveClientRegistrationRepository( OAuth2ClientRegistrationProperties properties) { return properties .getClientRegistration() .map(Arrays::asList) .map(InMemoryReactiveClientRegistrationRepository::new) .orElse(null); }
[*] target: assertNotNull(repository)
[-] pred: org. junit. Assert. assertNotNull ( repository )
************************************
************************************
[+] input: should_return_true_if_checkout_time_is_after_checkin_time() { final SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME + 1).setTransmissionRiskLevel(CORRECT_TRL) .setLocationId(CORRECT_LOCATION_ID).build())) .build();  final boolean result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
verify(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) { List<CheckIn> checkins = submissionPayload.getCheckInsList(); return checkins.stream() .map(checkin -> verifyTransmissionRiskLevel(checkin, validatorContext) && verifyLocationIdLength(checkin, validatorContext) && verifyStartIntervalNumber(checkin, validatorContext) && verifyEndIntervalNumber(checkin, validatorContext)) .allMatch(checkinValidation -> checkinValidation.equals(Boolean.TRUE)); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppAnyServices.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
parseConfigurators(String rawConfig) { List<URL> urls = new ArrayList<>(); ConfiguratorConfig configuratorConfig = parseObject(rawConfig);  String scope = configuratorConfig.getScope(); List<ConfigItem> items = configuratorConfig.getConfigs();  if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) { items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig))); } else { // service scope by default. items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig))); } return urls; }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(writerHost); when(mockConnectionProvider.connect(refEq(writerHost))).thenReturn(mockConnection);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isCurrentConnectionWriter()); assertFalse(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
isCurrentConnectionReadOnly() { return isConnected() && !isWriterHostIndex(this.currentHostIndex); }
[*] target: assertFalse(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
************************************
[+] input: testSearchExistingFlightByFullNumber() { flightService.registerFlight("OL234"); flightService.registerFlight("KM23234"); flightService.registerFlight("LTE114"); flightService.registerFlight("BRT14");  List<String> foundFlights = flightService.searchFlights("LTE114");  "<AssertPlaceHolder>"; assertEquals("LTE114", foundFlights.get(0)); }
searchFlights(String query) { throw new ExerciseNotCompletedException(); }
[*] target: assertEquals(1, foundFlights.size())
[-] pred: org. junit. Assert. assertEquals ( 1, foundFlights. size ( ) )
************************************
************************************
[+] input: NoSuchMethodException { final RouteHandler handler = mock(RouteHandler.class); when(handler.intercepted()).thenReturn(true); when(handler.handler()) .thenReturn(HandlerMethod.of(HandlerAdapterTest.class.getDeclaredMethod("normal", String.class), new HandlerAdapterTest())); final MultiValueMap<InterceptorPredicate, Interceptor> interceptors = new LinkedMultiValueMap<>(); final Interceptor interceptor0 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return 0; } }; final Interceptor interceptor1 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return -1; } }; final Interceptor interceptor2 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> false; }  @Override public int getOrder() { return 1; } }; interceptors.add(interceptor0.predicate(), interceptor0); interceptors.add(interceptor1.predicate(), interceptor1); interceptors.add(interceptor2.predicate(), interceptor2);  final RouteHandlerAdapter adapter = new RouteHandlerAdapter(handler, mock(HandlerResolverFactory.class), interceptors, null);  final List<InternalInterceptor> matched = adapter.getMatchingInterceptors(MockAsyncRequest.aMockRequest().build()); "<AssertPlaceHolder>"; assertEquals(2, matched.size()); assertSame(interceptor1, matched.get(0)); assertSame(interceptor0, matched.get(1)); }
getMatchingInterceptors(AsyncRequest request) { if (handler.intercepted()) { return interceptorMatcher.match(request); } return null; }
[*] target: assertNotNull(matched)
[-] pred: org. junit. Assert. assertNotNull ( matched )
************************************
************************************
[+] input: testKafkaDoc() { List<KafkaConfigDescriptionDto> result = new UISupportController(null, null, null, null, null, null, null) .getSupportedKafkaConfigs(); "<AssertPlaceHolder>"; assertTrue(result.size() > 10); assertTrue(result.stream().filter(d -> d.getConfigDescription().length() > 20).count() > 10); }
getSupportedKafkaConfigs() { return KafkaTopicConfigHelper.getConfigKeysAndDescription().entrySet().stream() .map(entry -> new KafkaConfigDescriptionDto(entry.getKey(), entry.getValue())) .collect(Collectors.toList()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldRetrieveAnEmptyInvolvedObject_onceEventInvolvedObjectHasNoValue() { event.setInvolvedObject(null); ObjectReference reference = ObjectReferenceMapper.map(event.getInvolvedObject()); "<AssertPlaceHolder>"; }
map(io.fabric8.kubernetes.api.model.ObjectReference reference) { if (reference == null) { return null; } ObjectReference objectReference = new ObjectReference(); objectReference.setKind(reference.getKind()); objectReference.setNamespace(reference.getNamespace()); objectReference.setName(reference.getName()); objectReference.setUid(reference.getUid()); return objectReference; }
[*] target: assertNull(reference)
[-] pred: org. junit. Assert. assertNull ( reference )
************************************
************************************
[+] input: test1() { Set<String> expected = Set.of( "word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "4", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3" ); HashSet<String> actual = new HashSet<>(new Solution().generateAbbreviations("word")); "<AssertPlaceHolder>"; }
generateAbbreviations(String word) { int n = word.length(); List<String> ans = new ArrayList<>(1 << n); char[] tmp = new char[n];  for (int key = 0; key < 1 << n; key++) { int pos = 0, left = 0, right = 0; while (right <= n) { if (right == n || (key >>> right & 1) == 0) { if (left != right) { int k = right - left; int d = 0; while (k != 0) { tmp[pos++] = (char) ('0' + k % 10); d++; k /= 10; } if (d != 1) { for (int i = pos - d, j = pos - 1; i < j; i++, j--) { char t = tmp[i]; tmp[i] = tmp[j]; tmp[j] = t; } } } if (right != n) tmp[pos++] = word.charAt(right); left = right + 1; } right++; } ans.add(new String(tmp, 0, pos)); } return ans; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(STACK_TRACE, MethodSupport.empty()) .put(BOX_CLASS, JAVA_LANG_INTEGER); var expectedEvent = new Event(JFR_VALHALLA_VBC_SYNC, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var stack = mock(RecordedStackTrace.class); when(stack.getFrames()).thenReturn(List.of()); var clazz = mock(RecordedClass.class); when(clazz.getName()).thenReturn(JAVA_LANG_INTEGER);  when(event.getClass(BOX_CLASS)).thenReturn(clazz); when(event.getStartTime()).thenReturn(startTime); when(event.getStackTrace()).thenReturn(stack); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread);  when(eventThread.getJavaName()).thenReturn(threadName);  var mapper = new ValhallaVBCDetector();  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
apply(RecordedEvent event) { long timestamp = event.getStartTime().toEpochMilli(); Attributes attr = new Attributes(); RecordedThread eventThread = null; if (hasField(event, EVENT_THREAD, SIMPLE_CLASS_NAME)) { eventThread = event.getThread(EVENT_THREAD); } RecordedClass boxClass = null; if (hasField(event, BOX_CLASS, SIMPLE_CLASS_NAME)) { boxClass = event.getClass(BOX_CLASS); } attr.put(THREAD_NAME, eventThread == null ? null : eventThread.getJavaName()); attr.put(BOX_CLASS, boxClass == null ? null : boxClass.getName()); attr.put(STACK_TRACE, MethodSupport.serialize(event.getStackTrace())); return Collections.singletonList(new Event(JFR_VALHALLA_VBC_SYNC, attr, timestamp)); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: isExpandedShouldAlwaysReturnFalse() { // prepare final GameModule gameModule = mock(GameModule.class); final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Deck d = new Deck(gameModule); d.add(gamePiece1); d.add(gamePiece2); d.setExpanded(true);  // assert "<AssertPlaceHolder>"; }
isExpanded() { return false; }
[*] target: assertFalse(d.isExpanded())
[-] pred: org. junit. Assert. assertFalse ( d. isExpanded() )
************************************
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ catalog.getOfferedResources().add(resource);  /* ACT */ final var resources = linker.getInternal(catalog);  /* ASSERT */ final var expected = List.of(resource); "<AssertPlaceHolder>"; }
getInternal(final Catalog owner) { return owner.getOfferedResources(); }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
************************************
[+] input: supplyInCaseOfExecution() { var result = Try.wrap(() -> { throw new RuntimeException(); }, 0); Assertions."<AssertPlaceHolder>"; }
wrap(Supplier<T> supplier, T defaultValue) { AtomicReference<T> result = new AtomicReference<>(defaultValue); var trying = new Try<T>(() -> { var value = supplier.get(); result.set(value); }, null).withRethrowingExceptions(false); if (trying.execute().succeeded()) { return result.get(); } else { return defaultValue; } }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
************************************
[+] input: testNotCancelledAfterSet() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.set(42); "<AssertPlaceHolder>"; }
isCancelled() { return cancelled; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled() )
************************************
************************************
[+] input: mapDtoToEntity_shouldMapDtoToEntity() { //Arrange User expected = user1; expected.setCreatedAt(null);  //Act User actual = userMapper.mapDtoToEntity(userDto1);  //Assert "<AssertPlaceHolder>"; }
mapDtoToEntity(UserDto dto) { return User.builder() .id(dto.getId()) .active(dto.isActive()) .mail(dto.getMail()) .photo(dto.getPhoto()) .surname(dto.getSurname()) .givenName(dto.getGivenName()) .department(dto.getDepartment()) .jobTitle(dto.getJobTitle()) .admin(dto.isAdmin()) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: create_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var desc = new GenericEndpointDesc();  Mockito.doReturn(new GenericEndpoint()).when(generic).create(desc);  /* ACT */ final var result = serviceProxy.create(desc);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
create(final EndpointDesc desc) { return getService(desc.getClass()).create(desc); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); KeyPair notOwnerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, notOwnerKeys, 1);  "<AssertPlaceHolder>"; }
isValidForRemoveOperation() {  // Same requirements as add() boolean result = this.isValidForAddOperation();  if (!result) { String res1 = this.toString(); String res2 = "null"; if (protectedStoragePayload.getOwnerPubKey() != null) res2 = Utilities.encodeToHex(protectedStoragePayload.getOwnerPubKey().getEncoded(), true);  log.warn("ProtectedStorageEntry::isValidForRemoveOperation() failed. Entry owner does not match Payload owner:\n" + "ProtectedStorageEntry={}\nPayloadOwner={}", res1, res2); }  return result; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
************************************
[+] input: testConstructor() { // test newKeyValue(PublicKey pk) for (PublicKey key : keys) { try { KeyValue kv = fac.newKeyValue(key); "<AssertPlaceHolder>"; } catch (KeyException ke) { fail("Should pass instead of throwing KeyException"); } } }
getPublicKey() throws XMLSecurityException { Element rsa = XMLUtils.selectDsNode( getFirstChild(), Constants._TAG_RSAKEYVALUE, 0);  if (rsa != null) { RSAKeyValue kv = new RSAKeyValue(rsa, this.baseURI); return kv.getPublicKey(); }  Element dsa = XMLUtils.selectDsNode( getFirstChild(), Constants._TAG_DSAKEYVALUE, 0);  if (dsa != null) { DSAKeyValue kv = new DSAKeyValue(dsa, this.baseURI); return kv.getPublicKey(); }  return null; }
[*] target: assertEquals(key, kv.getPublicKey())
[-] pred: org. junit. Assert. assertEquals ( key, kv. getPublicKey() )
************************************
************************************
[+] input: createFrom4ByteAbgrPre() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_4BYTE_ABGR_PRE); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom4ByteAbgrPre(data, width, height); "<AssertPlaceHolder>"; }
createFrom4ByteAbgrPre(byte[] data, int width, int height) { DataBuffer dataBuffer = new DataBufferByte(data, data.length); ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB); int[] nBits = {8, 8, 8, 8}; int[] bOffs = {3, 2, 1, 0}; ColorModel colorModel = new ComponentColorModel(colorSpace, nBits, true, true, Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE); WritableRaster raster = Raster.createInterleavedRaster(dataBuffer, width, height, width * 4, 4, bOffs, null); return new BufferedImage(colorModel, raster, true, null); }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
************************************
[+] input: testLegacyAppHdrXml() { LegacyAppHdr ah = new LegacyAppHdr(); ah.setFrom(new EntityIdentification()); ah.getFrom().setId("id");  final String xml = ah.xml();  "<AssertPlaceHolder>"; testXpath(xml, "/AppHdr/From/Id", "id"); }
xml() { return xml(new MxWriteParams()); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
************************************
[+] input: shouldGetAndSetEmailVerified() { var user = new LegacyUser(); user.setEmailVerified(true); "<AssertPlaceHolder>"; }
isEmailVerified() { return isEmailVerified; }
[*] target: assertTrue(user.isEmailVerified())
[-] pred: org. junit. Assert. assertTrue ( user. isEmailVerified() )
************************************
************************************
[+] input: findSupportedDiseaseByName_successful() { SupportedDisease covid = _repo.findByName("COVID-19").orElse(null); "<AssertPlaceHolder>"; assertEquals("96741-4", covid.getLoinc()); }
findByName(String name);
[*] target: assertNotNull(covid)
[-] pred: org. junit. Assert. assertNotNull ( covid )
************************************
************************************
[+] input: testIsShutdownTrue() { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.isShutdown()); "<AssertPlaceHolder>"; }
isShutdown() { return shutdown.get(); }
[*] target: assertTrue(ex.isShutdown())
[-] pred: org. junit. Assert. assertTrue ( ex. isShutdown() )
************************************
************************************
[+] input: getMaxAccess_inputCorrectOperatorEquals_returnAccessInteger() { /* ARRANGE */ final var maxAccess = 2;  final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource(String.valueOf(maxAccess), URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getMaxAccess(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
getMaxAccess(final Rule rule) throws NumberFormatException { final var constraint = rule.getConstraint().get(0); final var value = ((ConstraintImpl) constraint).getRightOperand().getValue(); final var operator = ((ConstraintImpl) constraint).getOperator();  int number; try { number = Integer.parseInt(value); } catch (NumberFormatException e) { if (log.isDebugEnabled()) { log.debug("Failed to parse value to integer. [exception=({})]", e.getMessage(), e); } throw e; }  if (number < 0) { number = 0; }  switch (operator) { case EQ: case LTEQ: return number; case LT: return number - 1; default: return 0; } }
[*] target: assertEquals(maxAccess, result)
[-] pred: org. junit. Assert. assertEquals ( maxAccess, result )
************************************
************************************
[+] input: extractHeaderFromMultipartMessage_mapWithHeaderValue_returnHeaderValue() { /* ARRANGE */ final var headerValue = "some header values"; final var response = new HashMap<String, String>(); response.put("header", headerValue); response.put("payload", "some payload values");  /* ACT */ final var result = MessageUtils.extractHeaderFromMultipartMessage(response);  /* ASSERT */ "<AssertPlaceHolder>"; }
extractHeaderFromMultipartMessage(final Map<String, String> message) { Utils.requireNonNull(message, ErrorMessage.MESSAGE_NULL); return message.get("header"); }
[*] target: assertEquals(headerValue, result)
[-] pred: org. junit. Assert. assertEquals ( headerValue, result )
************************************
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ catalog.getRequestedResources().add(resource);  /* ACT */ final var resources = linker.getInternal(catalog);  /* ASSERT */ final var expected = List.of(resource); "<AssertPlaceHolder>"; }
getInternal(final Catalog owner) { return owner.getRequestedResources(); }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
************************************
[+] input: hashCode_same_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act double vec3c1Hash = vec3c1.hashCode(); double vec3c2Hash = vec3c2.hashCode();  // Assert "<AssertPlaceHolder>"; }
hashCode() { long bits = 1L; bits = 31L * bits + doubleToLongBits(xCoord); bits = 31L * bits + doubleToLongBits(yCoord); bits = 31L * bits + doubleToLongBits(zCoord); return (int) (bits ^ (bits >> 32)); }
[*] target: assertEquals(vec3c1Hash, vec3c2Hash)
[-] pred: org. junit. Assert. assertEquals ( vec3c1Hash, vec3c2Hash )
************************************
************************************
[+] input: shouldReturnFalseBookingWasNotCreated() { long hotelRoomId = 11L; long customerId = 19L;  HotelRoom hotelRoom = new HotelRoom(); hotelRoom.setCost(15.0); when(hotelRoomRepository.find(hotelRoomId)).thenReturn(hotelRoom); when(customerRepository.find(customerId)).thenReturn(new Customer()); when(bookingValidator.isValid(any())).thenReturn(true); when(bookingRepository.createBooking(any())).thenReturn(false);  boolean actual = bookingService.book(hotelRoomId, customerId, LocalDate.now().minusDays(3), LocalDate.now());  "<AssertPlaceHolder>"; verify(hotelRoomRepository).find(hotelRoomId); verify(customerRepository).find(customerId); verify(bookingValidator).isValid(any()); verify(bookingRepository).createBooking(any()); verifyNoMoreInteractions(hotelRoomRepository, customerRepository, bookingValidator, bookingRepository); }
book(long hotelRoomId, long customerId, LocalDate startDate, LocalDate endDate);
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: testIsNotRedundantWith() { final DependencyChain chain1 = new DependencyChain() .add(single("c1")) .add(single("c2")) .add(single("c3")) .add(single("c1"));  final CircularDependency circularDependency1 = chain1.getCircularDependency().orElseThrow();  final DependencyChain chain2 = new DependencyChain() .add(single("c4")) .add(single("c5")) .add(single("c6")) .add(single("c4"));  final CircularDependency circularDependency2 = chain2.getCircularDependency().orElseThrow();   "<AssertPlaceHolder>"; }
isRedundantWith(CircularDependency other) { return this.signature().equals(other.signature()); }
[*] target: assertFalse(circularDependency1.isRedundantWith(circularDependency2))
[-] pred: org. junit. Assert. assertFalse ( circularDependency1. isRedundantWith ( circularDependency2 ) )
************************************
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(AbstractClazz.class, options); "<AssertPlaceHolder>"; }
generateSubClassOf(Class<T> clazz, ConstructionOption[] options) throws InstantiationException { StringBuilder sourceCode = new StringBuilder(); String packageName = adaptName(clazz.getPackage().getName()); String subclassName = getSubclassName(clazz); Map<String, String> noMapping = new HashMap<String, String>(); sourceCode.append("package ") .append(packageName) .append(";\npublic class ") .append(subclassName) .append(getTypeParameters(clazz.getTypeParameters(), true, noMapping)) .append(clazz.isInterface() ? " implements " : " extends ") .append(getClassName(clazz, noMapping)) .append(getTypeParameters(clazz.getTypeParameters(), false, noMapping)) .append(" {\n"); sourceCode.append("\tpublic ").append(subclassName).append("() { ") .append(invokeConstructorOf(clazz, noMapping, options)).append(" }\n"); for (String method : generateMethodsOf(clazz, new HashSet<String>(), noMapping, options)) { sourceCode.append(method); } sourceCode.append("}");  try { return (T) InMemoryJavaCompiler.newInstance() .useParentClassLoader(clazz.getClassLoader()) .useOptions("-Xlint:unchecked") .ignoreWarnings() .compile(packageName + DOT + subclassName, sourceCode.toString()) .newInstance(); } catch (Throwable e) { throw new InstantiationException(e.toString()); } }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
************************************
[+] input: Exception { final Method method = StringB.class.getMethod("toString");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
isUserDefinedMethod(final Method method) { return method.getDeclaringClass() != Object.class; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: testRoute_False_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("true => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException { if (!enabled) { // 通过enable字段判断当前ConditionRouter对象是否可用 return invokers; }  if (CollectionUtils.isEmpty(invokers)) { // 当前invokers集合为空，则直接返回 return invokers; } try { if (!matchWhen(url, invocation)) { // 匹配发起请求的Consumer是否符合表达式中=>之前的过滤条件 return invokers; } List<Invoker<T>> result = new ArrayList<Invoker<T>>(); if (thenCondition == null) { // 判断=>之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用 logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey()); return result; } for (Invoker<T> invoker : invokers) { // 逐个判断Invoker是否符合表达式中=>之后的过滤条件 if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } if (!result.isEmpty()) { return result; } else if (force) { // 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(RULE_KEY)); return result; } } catch (Throwable t) { logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t); } return invokers; }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
************************************
[+] input: Exception { final Response response = mock(Response.class); when(response.code()).thenReturn(204);  ObjectMapper mapper = new ObjectMapper(); ObjectNode clientPayload = mapper.createObjectNode(); clientPayload.put("my-custom-true-property","true"); clientPayload.put("my-custom-false-property", "false");  RepositoryDispatch repositoryDispatchRequest = ImmutableRepositoryDispatch.builder() .eventType("my-custom-event") .clientPayload(clientPayload) .build();  when(github.post("/repos/someowner/somerepo/dispatches", json.toJsonUnchecked(repositoryDispatchRequest))).thenReturn(completedFuture(response));  boolean repoDispatchResult = repoClient.createRepositoryDispatchEvent(repositoryDispatchRequest).get(); "<AssertPlaceHolder>"; }
createRepositoryDispatchEvent(final RepositoryDispatch request) { final String path = String.format(CREATE_REPOSITORY_DISPATCH_EVENT_TEMPLATE, owner, repo); return github .post(path, github.json().toJsonUnchecked(request)) .thenApply(response -> response.code() == NO_CONTENT); //should always return a 204 }
[*] target: assertTrue(repoDispatchResult)
[-] pred: org. junit. Assert. assertTrue ( repoDispatchResult )
************************************
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   private static class InnerHelloWorld { int inner; }\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
compile(String className, String sourceCode) throws Exception { return addSource(className, sourceCode).compileAll().get(className); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
************************************
[+] input: isDuplicateUserIdReturnsFalseIfTheUserIdDoesntExists() { final UserProvider userProvider = mock(UserProvider.class); final RealmModel realm = mock(RealmModel.class); final String userId = "0123456789"; final String username = "user";  when(session.users()) .thenReturn(userProvider); when(userProvider.getUserById(realm, userId)) .thenReturn(null);  LegacyUser legacyUser = createLegacyUser(username, userId);  var result = userModelFactory.isDuplicateUserId(legacyUser, realm);  "<AssertPlaceHolder>"; }
isDuplicateUserId(LegacyUser legacyUser, RealmModel realm) { if (isEmpty(legacyUser.getId())) { return false; }  return session.users().getUserById(realm, legacyUser.getId()) != null; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testRegisterFlight() { boolean registered = flightService.registerFlight("PR344");  "<AssertPlaceHolder>"; }
registerFlight(String flightNumber) { throw new ExerciseNotCompletedException(); }
[*] target: assertTrue(registered)
[-] pred: org. junit. Assert. assertTrue ( registered )
************************************
************************************
[+] input: Throwable { final HandlerAdvicesFactory factory = mock(HandlerAdvicesFactory.class); when(factory.getHandlerAdvices(any())) .thenReturn(new HandlerAdvice[]{(request, response, args, invoker) -> "bar"});  final AbstractRouteHandlerLocator locator = new AbstractRouteHandlerLocator("foo", factory) { @Override protected HttpResponseStatus getCustomResponse(InvocableMethod handlerMethod) { return HttpResponseStatus.OK; } };  final Optional<RouteHandler> handler = locator.getRouteHandler(AbstractRouteHandlerLocatorTest.class, AbstractRouteHandlerLocatorTest.class.getDeclaredMethod("forTest"), new AbstractRouteHandlerLocatorTest());  "<AssertPlaceHolder>"; assertTrue(handler.isPresent()); assertEquals("foo", handler.get().scheduler()); assertTrue(handler.get().hasCustomResponse()); assertEquals(HttpResponseStatus.OK, handler.get().customResponse()); assertEquals("bar", handler.get().invoke(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), null)); }
getRouteHandler(Class<?> userType, Method method, Object bean) { final InvocableMethod handlerMethod = getHandlerMethod(userType, method, bean); HandlerInvoker invoker = new HandlerInvokerImpl(handlerMethod); if (handlerAdvicesFactory != null) { HandlerAdvice[] handlerAdvices = handlerAdvicesFactory.getHandlerAdvices(new HandlerImpl(handlerMethod, this.getCustomResponse(handlerMethod), invoker)); if (handlerAdvices != null && handlerAdvices.length > 0) { invoker = LinkedHandlerInvoker.immutable(handlerAdvices, invoker); } } return Optional.of(new RouteHandlerImpl(handlerMethod, this.getCustomResponse(handlerMethod), invoker, InterceptorUtils.isIntercepted(handlerMethod), RouteUtils.scheduling(handlerMethod, globalScheduling))); }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
************************************
[+] input: testReturnObjectAndStatus() { final WebOperation op = webOperation(c -> new WebEndpointResponse<>("foo", 404)); final OperationHandler handler = new OperationHandler(op); final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(request, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); assertEquals("foo", ret1.join()); assertEquals(404, response.status()); }
handle(AsyncRequest request, AsyncResponse response, Map<String, String> body) { return handleResult(doInvoke(request, body), response); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
************************************
[+] input: testInfo() { final java.util.logging.Logger mock = mock(java.util.logging.Logger.class); when(mock.getName()).thenReturn("foo"); final Logger logger = new JdkLogger(mock); when(mock.isLoggable(Level.INFO)).thenReturn(true); assertTrue(logger.isInfoEnabled()); verifyInfo(mock, logger, true);  reset(mock);  when(mock.getName()).thenReturn("foo"); when(mock.isLoggable(Level.INFO)).thenReturn(false); "<AssertPlaceHolder>"; verifyInfo(mock, logger, false); }
isInfoEnabled() { return logger.isLoggable(Level.INFO); }
[*] target: assertFalse(logger.isInfoEnabled())
[-] pred: org. junit. Assert. assertFalse ( logger. isInfoEnabled() )
************************************
************************************
[+] input: testSetupCredentialsGraphWithDefaultUserDontCreateUserAgain() { final String defaultUser = "user"; final String defaultPassword = "pass"; final Map<String, Object> configMap = configBuilder().defaultUser(defaultUser).defaultPassword(defaultPassword).create(); final JanusGraph graph = StorageSetup.getInMemoryGraph(); JanusGraphAbstractAuthenticator authenticator = createInitializedAuthenticator(configMap, graph); authenticator.setup(configMap); authenticator = createInitializedAuthenticator(configMap, graph);  // set up again: authenticator.setup(configMap);  CredentialTraversalSource credentialSource = graph.traversal(CredentialTraversalSource.class); List<Vertex> users = credentialSource.users(defaultUser).toList(); "<AssertPlaceHolder>"; }
setup(final Map<String,Object> config) { logger.info("Initializing authentication with the {}", this.getClass().getName()); Preconditions.checkArgument(config != null, String.format( "Could not configure a %s - provide a 'config' in the 'authentication' settings", this.getClass().getName()));  Preconditions.checkState(config.containsKey(CONFIG_CREDENTIALS_DB), String.format( "Credential configuration missing the %s key that points to a graph config file or graph name", CONFIG_CREDENTIALS_DB)); Preconditions.checkState(config.containsKey(CONFIG_DEFAULT_USER), String.format( "Credential configuration missing the %s key for the default user", CONFIG_DEFAULT_USER)); Preconditions.checkState(config.containsKey(CONFIG_DEFAULT_PASSWORD), String.format( "Credential configuration missing the %s key for the default password", CONFIG_DEFAULT_PASSWORD));  final JanusGraph graph = openGraph(config.get(CONFIG_CREDENTIALS_DB).toString()); credentials = createCredentials(graph); graph.tx().rollback(); ManagementSystem mgmt = (ManagementSystem) graph.openManagement(); if (!mgmt.containsGraphIndex(USERNAME_INDEX_NAME)) { final PropertyKey username = mgmt.makePropertyKey(PROPERTY_USERNAME).dataType(String.class).cardinality(Cardinality.SINGLE).make(); mgmt.buildIndex(USERNAME_INDEX_NAME, Vertex.class).addKey(username).unique().buildCompositeIndex(); mgmt.commit(); mgmt = (ManagementSystem) graph.openManagement(); final JanusGraphIndex index = mgmt.getGraphIndex(USERNAME_INDEX_NAME); if (!index.getIndexStatus(username).equals(SchemaStatus.ENABLED)) { try { mgmt = (ManagementSystem) graph.openManagement(); mgmt.updateIndex(mgmt.getGraphIndex(USERNAME_INDEX_NAME), SchemaAction.REINDEX); ManagementSystem.awaitGraphIndexStatus(graph, USERNAME_INDEX_NAME).status(SchemaStatus.ENABLED).call(); mgmt.commit(); } catch (InterruptedException rude) { mgmt.rollback(); throw new RuntimeException("Timed out waiting for byUsername index to be created on credential graph", rude); } } }  final String defaultUser = config.get(CONFIG_DEFAULT_USER).toString(); if (!userExists(defaultUser)) { createUser(defaultUser, config.get(CONFIG_DEFAULT_PASSWORD).toString()); } }
[*] target: assertEquals(1, users.size())
[-] pred: org. junit. Assert. assertEquals ( 1, users. size ( ) )
************************************
************************************
[+] input: testSaveAndDelete() { Integer id = this.saveSource(); Assertions.assertNotNull(id);  boolean result = sourceService.delete(id, GLOBAL_OPERATOR); Assertions."<AssertPlaceHolder>"; }
delete(Integer id, String operator);  /** * Force deletes the stream source by groupId and streamId * * @param groupId The belongs group id. * @param streamId The belongs stream id. * @param operator Operator's name * @return Whether succeed */ Boolean forceDelete(String groupId, String streamId, String operator);  /** * Delete the stream source by the given id and source type. * * @param id The primary key of the source. * @param operator Operator's name * @return Whether succeed */ Boolean restart(Integer id, String operator);  /** * Delete the stream source by the given id and source type. * * @param id The primary key of the source. * @param operator Operator's name * @return Whether succeed */ Boolean stop(Integer id, String operator);  /** * Logically delete stream source with the given conditions. * * @param groupId Inlong group id to which the data source belongs. * @param streamId Inlong stream id to which the data source belongs. * @param operator Operator's name * @return Whether succeed. */ Boolean logicDeleteAll(String groupId, String streamId, String operator);  /** * Physically delete stream source with the given conditions. * * @param groupId Inlong group id. * @param streamId Inlong stream id. * @param operator Operator's name * @return Whether succeed. */ Boolean deleteAll(String groupId, String streamId, String operator);  /** * According to the inlong stream id, query the list of source types owned by it. * * @param groupId Inlong group id. * @param streamId Inlong stream id. * @return List of source types. */ List<String> getSourceTypeList(String groupId, String streamId);  /** * Save the information modified when the approval is passed. * * @param operator Operator's name * @return Whether succeed. */ default Boolean updateAfterApprove(String operator) { return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: lineCircleIntersection3() { double[][] points = GeometryTools.lineCircleIntersection(0, 1, -7, 1, 1, 5); "<AssertPlaceHolder>"; }
lineCircleIntersection( double a, double b, double c, double z0, double z1, double r ) { c += z0 * a + z1 * b; double[][] points = lineCircleIntersection(a, b, c, r); for (double[] p : points) { p[0] += z0; p[1] += z1; } return points; }
[*] target: assertEquals(0, points.length)
[-] pred: org. junit. Assert. assertEquals ( 0, points. length )
************************************
************************************
[+] input: test2() { Solution solution = new Solution(); String[] words = { "Science", "is", "what", "we", "understand", "well", "enough", "to", "explain", "to", "a", "computer.", "Art", "is", "everything", "else", "we", "do"};  List<String> expected = List.of( "Science  is  what we", "understand      well", "enough to explain to", "a  computer.  Art is", "everything  else  we", "do                  " ); List<String> actual = solution.fullJustify(words, 20); "<AssertPlaceHolder>";  }
fullJustify(String[] words, int maxWidth) { LinkedList<String> ans = new LinkedList<>(); int n = words.length; int start = 0; int currentLength = 0; int i = 0; char[] chars = new char[maxWidth]; while (true) { while (i < n && currentLength + words[i].length() + i - start <= maxWidth) currentLength += words[i++].length(); if (i != n) { int curPos = 0; for (char c : words[start].toCharArray()) { chars[curPos++] = c; } if (i - start == 1) { Arrays.fill(chars, curPos, maxWidth, ' '); } else { int spaces = maxWidth - currentLength; for (int j = start + 1; j < i; j++) { int spaceN = spaces / (i - j); if (spaces % (i - j) != 0) spaceN++; spaces -= spaceN; Arrays.fill(chars, curPos, curPos + spaceN, ' '); curPos += spaceN; for (char c : words[j].toCharArray()) { chars[curPos++] = c; } } } ans.add(new String(chars)); currentLength = 0; start = i; } else { int curPos = 0; for (char c : words[start].toCharArray()) { chars[curPos++] = c; } for (int j = start + 1; j < i; j++) { chars[curPos++] = ' '; for (char c : words[j].toCharArray()) { chars[curPos++] = c; } } Arrays.fill(chars, curPos, maxWidth, ' '); ans.add(new String(chars)); break; } } return ans; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldBeCorrectCallInvocationsForSuppliers() { var visitor = ReportTypeVisitor.<ReportType>createSupplierVisitor( () -> ReportType.OBSERVER_EVENT, () -> ReportType.CALL_EVENT, () -> ReportType.CALL_META_DATA, () -> ReportType.CLIENT_EXTENSION_DATA, () -> ReportType.PEER_CONNECTION_TRANSPORT, () -> ReportType.ICE_CANDIDATE_PAIR, () -> ReportType.PEER_CONNECTION_DATA_CHANNEL, () -> ReportType.INBOUND_AUDIO_TRACK, () -> ReportType.INBOUND_VIDEO_TRACK, () -> ReportType.OUTBOUND_AUDIO_TRACK, () -> ReportType.OUTBOUND_VIDEO_TRACK, () -> ReportType.SFU_EVENT, () -> ReportType.SFU_META_DATA, () -> ReportType.SFU_EXTENSION_DATA, () -> ReportType.SFU_TRANSPORT, () -> ReportType.SFU_INBOUND_RTP_PAD, () -> ReportType.SFU_OUTBOUND_RTP_PAD, () -> ReportType.SFU_SCTP_STREAM ); for (var expected : ReportType.values()) { var actual = visitor.apply(null, expected); Assertions."<AssertPlaceHolder>"; } }
apply(TIn obj, ReportType reportType) { switch (reportType) { case OBSERVER_EVENT: return this.visitObserverEventReport(obj); case CALL_EVENT: return this.visitCallEventReport(obj); case CALL_META_DATA: return this.visitCallMetaDataReport(obj); case CLIENT_EXTENSION_DATA: return this.visitClientExtensionDataReport(obj); case PEER_CONNECTION_TRANSPORT: return this.visitPeerConnectionTransportReport(obj); case ICE_CANDIDATE_PAIR: return this.visitIceCandidatePairReport(obj); case PEER_CONNECTION_DATA_CHANNEL: return this.visitClientDataChannelReport(obj); case INBOUND_AUDIO_TRACK: return this.visitInboundAudioTrackReport(obj); case INBOUND_VIDEO_TRACK: return this.visitInboundVideoTrackReport(obj); case OUTBOUND_AUDIO_TRACK: return this.visitOutboundAudioTrackReport(obj); case OUTBOUND_VIDEO_TRACK: return this.visitOutboundVideoTrackReport(obj);  case SFU_EVENT: return this.visitSfuEventReport(obj); case SFU_META_DATA: return this.visitSfuMetaReport(obj); case SFU_EXTENSION_DATA: return this.visitSfuExtensionReport(obj); case SFU_TRANSPORT: return this.visitSfuTransportReport(obj); case SFU_INBOUND_RTP_PAD: return this.visitSfuInboundRtpPadReport(obj); case SFU_OUTBOUND_RTP_PAD: return this.visitSfuOutboundRtpPadReport(obj); case SFU_SCTP_STREAM: return this.visitSctpStreamReport(obj); default: logger.warn("Unrecognized report type {}", reportType); } return null; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Apigateway.cmd")); String actual = exportApiGatewayAccount.getTFImport(getAwsAccount()).script();  "<AssertPlaceHolder>"; }
getTFImport(AWSAccount awsAccount) { return TFImport.builder() .importLine(TFImportLine.builder() .address(awsAccount.getTerraformAddress()) .id(awsAccount.getResourceId()) .build()) .build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: DbxException { // given DropboxClient testee = new DropboxClient(dropboxService);  Metadata m1 = new Metadata("folder1"); Metadata m2 = new Metadata("folder2"); Metadata m3 = new Metadata("testFileToUpload.txt"); List<Metadata> metadataList = List.of(m1, m2, m3); ListFolderResult listFolderResult = new ListFolderResult(metadataList, "3", true); when(dropboxService.files().listFolder(anyString())).thenReturn(listFolderResult); clearInvocations(dropboxService);  // when boolean result = testee.doesFileExist("testFileToUpload.txt");  // then verify(dropboxService.files()).listFolder(""); "<AssertPlaceHolder>"; }
doesFileExist(String fileName) throws DbxException { ListFolderResult result = dropboxService.files().listFolder(""); return result.getEntries().stream() .anyMatch(entry -> StringUtils.equalsIgnoreCase(entry.getName(), fileName)); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testDecoderCopyFromMiddle() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  sd1.nextToken(); sd1.nextToken();  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
hasNext() { return hasMoreTokens(); }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
************************************
[+] input: IOException { final String name = "pom.xml"; final Path extPath = Path.of(name); final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, extPath.toFile());  // file is there now assertTrue(z.isModified()); assertFile(name, extPath, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, extPath, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
isModified() { return modified; }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
************************************
[+] input: deleteUser() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean b = true; try { b = adminService.deleteUser(user.getId()); } catch (ForbiddenException ignored) { } "<AssertPlaceHolder>";  UserDO selected = userMapper.selectById(user.getId()); assertNull(selected); }
deleteUser(Integer id) { throwUserNotExistById(id); if (userService.getRootUserId().equals(id)) { throw new ForbiddenException(10079); } boolean userRemoved = userService.removeById(id); QueryWrapper<UserIdentityDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserIdentityDO::getUserId, id); // 删除用户，还应当将 user_group表中的数据删除 boolean deleteResult = userGroupMapper.deleteByUserId(id) > 0; return userRemoved && userIdentityService.remove(wrapper) && deleteResult; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
************************************
[+] input: getResourceMaps() { List<AWSRdsSubnetGroup> awsRdsSubnetGroup = getAwsRdsSubnetGroups();  Maps<Resource> resourceMaps = exportRdsSubnetGroups.getResourceMaps(awsRdsSubnetGroup); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsSubnetGroup.tf") ); "<AssertPlaceHolder>"; }
getResourceMaps(List<AWSRdsSubnetGroup> awsRdsSubnetGroups) { Maps.MapsBuilder<Resource> resourceMapsBuilder = Maps.builder(); awsRdsSubnetGroups.forEach(awsRdsSubnetGroup -> { DBSubnetGroup dbSubnetGroup = awsRdsSubnetGroup.getDbSubnetGroup(); List<Tag> tags = awsRdsSubnetGroup.getTags(); resourceMapsBuilder.map( Resource.builder() .api(awsRdsSubnetGroup.getTerraformResourceName()) .name(awsRdsSubnetGroup.getResourceName()) .argument("name", TFString.build(dbSubnetGroup.dbSubnetGroupName())) .argument("subnet_ids", TFList.builder().isLineIndent(false) .lists(dbSubnetGroup.subnets().stream() .map(subnet -> TFExpression.builder().isLineIndent(false) .expression( MessageFormat.format("aws_subnet.{0}.id", subnet.subnetIdentifier())) .build()) .collect(Collectors.toList())) .build()) .argument("tags", TFMap.build( tags.stream() .collect(Collectors.toMap(Tag::key, tag -> TFString.build(tag.value()))) )) .build() ); }); return resourceMapsBuilder.build(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getPersonByEmail_SUCCESS() {  // Arrange String personEmail = "maria@gmail.com"; PersonEmailDTO personEmailDTO = PersonEmailDTOAssembler.createPersonEmailDTO(personEmail); String personName = "Maria Silva"; LocalDate personBirthdate = LocalDate.of(1973, 07, 25); String personBirthplace = "Braga";  // Expected Person DTO Email email = Email.createEmail(personEmail); Name name = Name.createName(personName); Birthdate birthdate = Birthdate.createBirthdate(personBirthdate); Birthplace birthplace = Birthplace.createBirthplace(personBirthplace); PersonID fatherID = null; PersonID motherID = null;  PersonDTO personExpected = PersonDTOAssembler.createDTOFromDomainObject(email, name, birthdate, birthplace, fatherID, motherID);  // Expected Response ResponseEntity<Object> expectedResponse = new ResponseEntity<>(personExpected, HttpStatus.OK);  // Act Mockito.when(service.getPersonByEmail(personEmailDTO)).thenReturn(personExpected); ResponseEntity<Object> person = controller.getPersonByEmail(personEmail);  // Assert "<AssertPlaceHolder>"; }
getPersonByEmail(@PathVariable final String personEmail) {  PersonEmailDTO personEmailDTO = new PersonEmailDTO(personEmail);  PersonDTO result = service.getPersonByEmail(personEmailDTO);  Link link_to_siblings = linkTo(methodOn(CreatePersonControllerREST.class).getPersonSiblings(personEmail)).withRel("siblings"); Link link_to_personLedger = WebMvcLinkBuilder.linkTo(methodOn(PersonSearchAccountRecordsControllerREST.class).searchPersonRecords("", "", "", personEmail)).withRel("records"); Link link_to_personAccounts = linkTo(methodOn(CreatePersonControllerREST.class).getPersonAccounts(personEmail)).withRel("accounts"); Link link_to_personCategories = linkTo(methodOn(CreatePersonControllerREST.class).getPersonCategories(personEmail)).withRel("categories");  result.add(link_to_siblings); result.add(link_to_personLedger); result.add(link_to_personAccounts); result.add(link_to_personCategories);  return new ResponseEntity<>(result, HttpStatus.OK); }
[*] target: assertEquals(expectedResponse, person)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, person )
************************************
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[SiH2]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
build(String smiles) throws StructureBuildingException { return build(smiles, "", NONE_LABELS_VAL); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
************************************
[+] input: testNotCancelledAfterSetException() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.setException(new Exception()); "<AssertPlaceHolder>"; }
isCancelled() { return cancelled; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled() )
************************************
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
loadStream() { return config; }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns:Ah="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>" + "</bar></foo>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
parse(final String xml) { return parse(xml, new MxReadParams()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
************************************
[+] input: IOException { // Be sure to retest/-generate this output if "breaking" changes are made, for example to spacing final String input = Files.readString(PATH.resolve("BBCodeExample.txt")); final String expected = Files.readString(PATH.resolve("BBCodeConverted.txt")); final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
convertToMarkdown(String s) { // Deduplication, remove spaces in tags int index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, true); if (closingIndex == -1) { index++; continue; }  s = s.substring(0, index) + this.currentContent + s.substring(closingIndex); }  // Iterate until no whitespaces are left (else they might only be moved into the upper tag...) String result; while ((result = this.removeTrailingWhitespaces(s)) != null) { s = result; }  // Tag conversion index = 0; while ((index = s.indexOf(TAG_PREFIX, index)) != -1) { final int closingIndex = this.process(s, index, false); if (closingIndex == -1) { // No closing tag/no simple match index++; continue; }  if (this.currentContent == null) { // Simple opening tag match final String replacement = SIMPLE_SINGLETON_REPLACERS.get(this.currentTag); s = s.substring(0, index) + replacement + s.substring(closingIndex); continue; }  final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer == null) { // No replacer found index++; continue; }  String processed = replacer.process(this.currentTag, this.currentArg, this.currentContent); if (processed == null) { index++; } else { if (replacer.appendNewline()) { processed += "\n"; }  s = s.substring(0, index) + processed + s.substring(closingIndex); if (replacer.hasRawContents()) { index += processed.length(); } } }  // Removes newlines from the end of the last tag adds newlines final TagReplacer replacer = REPLACERS.get(this.currentTag); if (replacer != null && replacer.appendNewline()) { final int lastChar = s.length() - 1; if (s.lastIndexOf('\n') == lastChar) { return s.substring(0, lastChar); } }  return cleanup(s); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: resolveNull() { // given Cluster cluster = new Cluster("test-cluster", "https://kubernetes.default.svc"); cluster.setHost("minikube.host"); Environment environment = new Environment("dev", "development"); cluster.addEnvironment(environment); Release release = new Release("release1"); EnvironmentRelease environmentRelease = new EnvironmentRelease(environment, release); Application application = new Application("app1"); String routeHostname = null;  // when String resolvedRouteHostname = resolver.resolve(environmentRelease, application, routeHostname);  // then "<AssertPlaceHolder>"; }
resolve(EnvironmentRelease environmentRelease, Application application, String routeHostname) { if (routeHostname == null) return null;  Objects.requireNonNull(environmentRelease, "environmentRelease is required"); Objects.requireNonNull(application, "application is required");  Map<String, String> valuesMap = new HashMap<>(); valuesMap.put("cluster_host", environmentRelease.getEnvironment().getCluster().getHost()); valuesMap.put("environment_key", environmentRelease.getEnvironment().getKey()); valuesMap.put("release_name", environmentRelease.getRelease().getName()); valuesMap.put("application_name", application.getName());  StringSubstitutor stringSubstitutor = new StringSubstitutor(valuesMap); stringSubstitutor.setEnableUndefinedVariableException(true);  try { return stringSubstitutor.replace(routeHostname); } catch (IllegalArgumentException e) { throw new IllegalArgumentException("Failed to resolve route hostname for " + application.getName() + ": " + routeHostname + ", reason: " + e.getMessage()); } }
[*] target: assertNull(resolvedRouteHostname)
[-] pred: org. junit. Assert. assertNull ( resolvedRouteHostname )
************************************
************************************
[+] input: limitDepth() { StackSerializer serializer = new StackSerializer(2); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) frames);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat io.test.MyClass.silver(unknown:456)"; "<AssertPlaceHolder>"; }
serialize(IMCStackTrace stack) { List<? extends IMCFrame> frames = stack.getFrames(); return frames.stream() // limit the number of stack frames in case jfr stack depth is greater than our stack depth // truncate the bottom stack frames the same way as jfr .limit(maxDepth) .reduce( new StringBuilder(), this::serializeFrame, (sb1, sb2) -> sb1.append("\n").append(sb2)) .toString(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: getClassFieldsTest() {  List<Field> fields = ReflectionUtility.getClassFields(TestBean.class);  "<AssertPlaceHolder>"; assertEquals("field1", fields.get(0).getName()); assertEquals("field2", fields.get(1).getName()); assertEquals("field3", fields.get(2).getName()); assertEquals("field4", fields.get(3).getName()); assertEquals("field5", fields.get(4).getName()); }
getClassFields(Class clazz) {  List<Field> classFields = new ArrayList<>(Arrays.asList(clazz.getDeclaredFields()));  if(clazz.getSuperclass() == null) { return classFields; }  classFields.addAll(getClassFields(clazz.getSuperclass()));  return classFields; }
[*] target: assertEquals(5, fields.size())
[-] pred: org. junit. Assert. assertEquals ( 5, fields. size ( ) )
************************************
************************************
[+] input: serializeWithNullMethod() { StackSerializer serializer = new StackSerializer(STACK_DEPTH); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) framesWithNullMethod);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat unknown.unknown(unknown)\n" + "\tat io.test.Framewerk.root(unknown:66)"; "<AssertPlaceHolder>"; }
serialize(IMCStackTrace stack) { List<? extends IMCFrame> frames = stack.getFrames(); return frames.stream() // limit the number of stack frames in case jfr stack depth is greater than our stack depth // truncate the bottom stack frames the same way as jfr .limit(maxDepth) .reduce( new StringBuilder(), this::serializeFrame, (sb1, sb2) -> sb1.append("\n").append(sb2)) .toString(); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsZeroWithFloatingPoint() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(0.0));  //then "<AssertPlaceHolder>"; }
canConvertValue(FloatValue value) { double aDouble = value.toDouble(); return aDouble <= 0.0D ? isInAcceptableRange(0.0D - aDouble) : isInAcceptableRange(aDouble); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithMuchOfOne() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(3, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
buildTopicDraftOverviewChart(ChartCreationOptions chartCreationOptions) { String[] possibleStates = {"Draft", "Submitted", "Approved", "Rejected"}; Double[] stateCount = new Double[4]; Collection<OkrTopicDraft> topicDrafts = topicDraftService.getAllTopicDrafts(); stateCount[0] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.draft) .toArray().length; stateCount[1] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.submitted) .toArray().length; stateCount[2] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.approved) .toArray().length; stateCount[3] = (double) topicDrafts.stream() .filter(okrTopicDraft -> okrTopicDraft.getCurrentStatus() == OkrTopicDraftStatusEnum.rejected) .toArray().length;  PieChartOptionsDto pieChartOptionsDto = new PieChartOptionsDto(); pieChartOptionsDto.setId(chartCreationOptions.getId()); pieChartOptionsDto.setTitle(chartCreationOptions.getTitle()); pieChartOptionsDto.setChartType(chartCreationOptions.getChartType().ordinal()); pieChartOptionsDto.setValueLabels(possibleStates);  pieChartOptionsDto.setValueLabels(possibleStates); pieChartOptionsDto.setSeries(stateCount); pieChartOptionsDto.setChartType(ChartInformationTypeEnum.PIE_TOPICDRAFTOVERVIEW.ordinal());  return pieChartOptionsDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 0); assertEquals(0, opusPacket.getCode()); assertFalse(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(1, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
getPadLenBytesSum() { return 0; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
************************************
[+] input: protobufTest() { var pnpRes = new PNPResult(); var serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); var unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); assertEquals(pnpRes, unpackedPNPRes);  pnpRes = new PNPResult(new Transform3d(1, 2, 3, new Rotation3d(1, 2, 3)), 0.1); serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); "<AssertPlaceHolder>"; }
unpack(ProtobufPNPResult msg) { if (!msg.getIsPresent()) { return new PNPResult(); }  return new PNPResult( Transform3d.proto.unpack(msg.getBest()), Transform3d.proto.unpack(msg.getAlt()), msg.getAmbiguity(), msg.getBestReprojErr(), msg.getAltReprojErr()); }
[*] target: assertEquals(pnpRes, unpackedPNPRes)
[-] pred: org. junit. Assert. assertEquals ( pnpRes, unpackedPNPRes )
************************************
************************************
[+] input: testEncodeDecodeString() { final String VALUE = "How many ,'s in this sentence?\n"; final SequenceEncoder se = new SequenceEncoder(',').append(VALUE); final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), ','); "<AssertPlaceHolder>"; }
nextToken() { if (!hasMoreTokens()) throw new NoSuchElementException();  if (start == stop) { // token for "null" is the empty string val = null; return ""; }  if (buf != null) { buf.setLength(0); }  String tok = null; int i = start; for ( ; i < stop; ++i) { if (val.charAt(i) == delim) { if (i > 0 && val.charAt(i - 1) == '\') { // escaped delimiter; piece together the token if (buf == null) { buf = new StringBuilder(); } buf.append(val, start, i - 1); start = i; } else { // real delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start, i); } else { // had an earlier escape; cobble on the end buf.append(val, start, i); } start = i + 1; break; } } }  if (start < i) { // i == stop; we reached the end without a delimiter if (buf == null || buf.length() == 0) { // no escapes; take the token whole tok = val.substring(start); } else { // had an earlier escape; cobble on the end buf.append(val, start, stop); } val = null; }  return unquote(tok != null ? tok : buf).intern(); }
[*] target: assertEquals(VALUE, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( VALUE, sd. nextToken ( ) )
************************************
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); abnormalDatasetRepository.create(abnormalDataset);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); boolean result = abnormalDatasetRepository.updateStatus(abnormalDatasets.get(0).getId(), "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
updateStatus(Long id, String status, OffsetDateTime updateTime) { String sql = DefaultSQLBuilder.newBuilder() .update(TABLE_NAME) .set("status", "update_time") .where("id = ?") .asPrepared() .getSQL(); int updatedRows = jdbcTemplate.update(sql, status, updateTime, id); return updatedRows == 1; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: should_result_millis_when_hour() {  var expected = 1 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1hour");  "<AssertPlaceHolder>"; }
fromHumanReadable(String value) { StringUtil.requireNonBlank(value); log.debug("Try to parse the human readable: {}", value);  var human = value.toLowerCase().trim();  if(human.endsWith(PERCENT_SYMBOL)){ human = human.substring(FIRST_INDEX, human.indexOf(PERCENT_SYMBOL)).trim(); log.debug("Parsing as percentage: {}", human);  return Double.parseDouble(human) / 100;  } else if(human.endsWith("ib")) {  var multiplier = 1; var endIndex = 0; if(human.endsWith(GIB_SYMBOL)) { multiplier = ONE_KIB * ONE_KIB * ONE_KIB; endIndex = human.indexOf(GIB_SYMBOL);  } else if(human.endsWith(MIB_SYMBOL)){ multiplier = ONE_KIB * ONE_KIB; endIndex = human.indexOf(MIB_SYMBOL);  } else if(human.endsWith(KIB_SYMBOL)){ multiplier = ONE_KIB; endIndex = human.indexOf(KIB_SYMBOL);  } else { throw new IllegalArgumentException(value); }  human = human.substring(FIRST_INDEX, endIndex).trim(); log.debug("Parsing as bytes: {}", human);  return Long.parseLong(human) * multiplier;  } else { return parseTime(value); }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testInvalid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertFalse(configViolation.propertyExists()); }
check(final PropertyMetadata<T> metadata) { CommonUtils.throwArgNull(metadata, "metadata"); if (metadata.exists()) { return null; } final String message = "Property '" + metadata.getName() + "' must be defined"; return DefaultConfigViolation.of(metadata, message); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
************************************
